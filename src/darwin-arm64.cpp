// Auto generated by JuleC.
// JuleC version: beta 0.0.4 master
// Date: 21/8/2023 20.21 (DD/MM/YYYY) (HH.MM)
//
// Recommended Compile Command;
// clang++ -O0 -Wno-everything --std=c++17 dist/ir.cpp

#include "api/jule.hpp"                                   

#include <dirent.h>
#include <fcntl.h>
#include <unistd.h>
#include <cstdio>
#include <sys/stat.h>
#include "std/sys/syscall_unix.hpp"                                   
#include "src/julec/julec.hpp"                                   
#include "std/vector/alloc.hpp"                                   
#include "std/jule/parser/parser.hpp"                                   
#include "src/julec/obj/cxx/cxx.hpp"                                   

struct _110e4edc0_Importer;
struct _1116aff70_Kind;
struct _111732860_Lookup;
struct _1114d55f0_RangeSetter;

struct _137e06080_AnsiEscape;


struct _137e06080_Logger;


struct _117e1d320_LazyBuff;


struct _110621ed0_bits_error;


struct _117e12d10_FloatInfo;


struct _117e12d10_DecimalSlice;


struct _110057cd0_LeftCheat;


struct _110057cd0_Decimal;


struct _127e05da0_Log;


struct _110473c30_DirEntry;


struct _1104f8ac0_File;


struct _11054d9e0_Status;


struct _1106ed100_accept_range;


struct _1106ec050_Token;


struct _11054eff0_KindPair;


struct _11054f670_CommentGroup;


struct _11054f670_NamespaceTypeDecl;


struct _11054f670_RefTypeDecl;


struct _11054f670_SlcTypeDecl;


struct _11054f670_TupleTypeDecl;


struct _11054f670_PtrTypeDecl;


struct _11054f670_ArrTypeDecl;


struct _11054f670_MapTypeDecl;


struct _11054f670_RetTypeDecl;


struct _11054f670_TupleExpr;


struct _11054f670_LitExpr;


struct _11054f670_UnsafeExpr;


struct _11054f670_IdentExpr;


struct _11054f670_UnaryExpr;


struct _11054f670_VariadicExpr;


struct _11054f670_CastExpr;


struct _11054f670_NsSelectionExpr;


struct _11054f670_SubIdentExpr;


struct _11054f670_BinopExpr;


struct _11054f670_FieldExprPair;


struct _11054f670_StructLit;


struct _11054f670_BraceLit;


struct _11054f670_KeyValPair;


struct _11054f670_SliceExpr;


struct _11054f670_IndexingExpr;


struct _11054f670_SlicingExpr;


struct _11054f670_LabelSt;


struct _11054f670_FallSt;


struct _11054f670_AssignSt;


struct _11054f670_ScopeTree;


struct _11054f670_RetSt;


struct _11054f670_Iter;


struct _11054f670_WhileKind;


struct _11054f670_RangeKind;


struct _11054f670_Conditional;


struct _11054f670_MatchCase;


struct _1106f8b50_FileInfo;


struct _1106f8b50_PackageInfo;


struct _110709a60_Stmt;


struct _110709a60_ScopeParser;


struct _11070bfb0_CallData;


struct _11070bfb0_Precedencer;


struct _11070bfb0_ExprBuilder;


struct _110754df0_Parser;


struct _110a15a10_TypeBuilder;


struct _1118cee40_Const;


struct _1109372e0_FieldIns;


struct _1109372e0_StructIns;


struct _11072eb20_RetType;


struct _11072eb20_ParamIns;


struct _11072eb20_FnIns;


struct _110d9ce90_SymbolBuilder;


struct _110af2660_If;


struct _110af2660_Else;


struct _110af2660_Conditional;


struct _110af2660_InfIter;


struct _110af2660_WhileIter;


struct _110af2660_RangeIter;


struct _110af2660_ContSt;


struct _110af2660_BreakSt;


struct _110af2660_Label;


struct _110af2660_GotoSt;


struct _110af2660_Postfix;


struct _110af2660_Assign;


struct _110af2660_MultiAssign;


struct _110af2660_Match;


struct _110af2660_Case;


struct _110af2660_FallSt;


struct _110af2660_RetSt;


struct _110af2660_Recover;


struct _110af2660_ScopeGoto;


struct _110af2660_ScopeChecker;


struct _110e4e8a0_BinopExprModel;


struct _110e4e8a0_UnaryExprModel;


struct _110e4e8a0_GetRefPtrExprModel;


struct _110e4e8a0_StructArgExprModel;


struct _110e4e8a0_StructLitExprModel;


struct _110e4e8a0_AllocStructLitExprModel;


struct _110e4e8a0_CastingExprModel;


struct _110e4e8a0_FnCallExprModel;


struct _110e4e8a0_SliceExprModel;


struct _110e4e8a0_IndexigExprModel;


struct _110e4e8a0_AnonFnExprModel;


struct _110e4e8a0_KeyValPairExprModel;


struct _110e4e8a0_MapExprModel;


struct _110e4e8a0_SlicingExprModel;


struct _110e4e8a0_TraitSubIdentExprModel;


struct _110e4e8a0_StructSubIdentExprModel;


struct _110e4e8a0_StructStaticIdentExprModel;


struct _110e4e8a0_ArrayExprModel;


struct _110e4e8a0_CommonIdentExprModel;


struct _110e4e8a0_CommonSubIdentExprModel;


struct _110e4e8a0_TupleExprModel;


struct _110e4e8a0_BuiltinOutCallExprModel;


struct _110e4e8a0_BuiltinOutlnCallExprModel;


struct _110e4e8a0_BuiltinCloneCallExprModel;


struct _110e4e8a0_BuiltinNewCallExprModel;


struct _110e4e8a0_BuiltinRealCallExprModel;


struct _110e4e8a0_BuiltinDropCallExprModel;


struct _110e4e8a0_BuiltinPanicCallExprModel;


struct _110e4e8a0_BuiltinMakeCallExprModel;


struct _110e4e8a0_BuiltinAppendCallExprModel;


struct _110e4e8a0_BuiltinErrorTraitSubIdentExprModel;


struct _110e4e8a0_SizeofExprModel;


struct _110e4e8a0_AlignofExprModel;


struct _110e4e8a0_RuneExprModel;


struct _110e4e8a0_ExplicitDerefExprModel;


struct _110e4edc0_Package;


struct _110e92bc0_Sema;


struct _1111c0be0_DynamicTypeAnnotation;


struct _1111c0be0_StructLitChecker;


struct _1111c0be0_RangeChecker;


struct _1112d7f10_Data;


struct _1112d7f10_Value;


struct _1112d7f10_Eval;


struct _1116aff70_TypeKind;


struct _1116aff70_TypeSymbol;


struct _1116aff70_Prim;


struct _1116aff70_Ref;


struct _1116aff70_Slc;


struct _1116aff70_Tuple;


struct _1116aff70_Map;


struct _1116aff70_Arr;


struct _1116aff70_Ptr;


struct _1116aff70_Referencer;


struct _110194230_PlainImporter;


struct _110254280_IR;


struct _1102a20b0_ScopeDeadCode;


struct _1114d55f0_IndexRangeSetter;


struct _1114d55f0_MapRangeSetter;


struct _111b4cab0_OrderedDecls;


struct _1116aff70_TypeChecker;


struct _1116aff70_TypeAlias;


struct _1112d7f10_BinopSolver;


struct _1111c0be0_RetTypeChecker;


struct _1111c0be0_FnCallArgChecker;


struct _1111c0be0_AssignTypeChecker;


struct _1111c0be0_TypeCompatibilityChecker;


struct _110e92c80_Var;


struct _110e4edc0_ImportInfo;


struct _110af2660_ScopeLabel;


struct _110e4c050_Impl;


struct _110e453c0_Enum;


struct _110e453c0_EnumItem;


struct _110e3f160_Trait;


struct _110d9ce90_Pass;


struct _11072eb20_Fn;


struct _11072eb20_Param;


struct _1109372e0_Field;


struct _110711f30_AssignInfo;


struct _11054f670_Impl;


struct _11054f670_TraitDecl;


struct _11054f670_StructDecl;


struct _11054f670_FieldDecl;


struct _11054f670_EnumDecl;


struct _11054f670_EnumItemDecl;


struct _11054f670_UseDecl;


struct _11054f670_Case;


struct _11054f670_TypeAliasDecl;


struct _11054f670_Else;


struct _11054f670_If;


struct _11054f670_ContSt;


struct _11054f670_BreakSt;


struct _11054f670_VarDecl;


struct _11054f670_FnDecl;


struct _11054f670_ParamDecl;


struct _11054f670_AssignLeft;


struct _11054f670_GotoSt;


struct _11054f670_GenericDecl;


struct _11054f670_FnCallExpr;


struct _11054f670_Expr;


struct _11054f670_IdentTypeDecl;


struct _11054f670_TypeDecl;


struct _11054f670_Directive;


struct _11054f670_Comment;


struct _11054f670_Node;


struct _1108ddf20_Vector_0;

struct _1108ddf20_Vector_1;

struct _1108ddf20_Vector_2;

struct _1108ddf20_Vector_3;

struct _1108ddf20_Vector_4;

struct _1108ddf20_Vector_5;

struct _1108ddf20_Vector_6;

struct _1108ddf20_Vector_7;

struct _1108ddf20_Vector_8;

struct _1108ddf20_Vector_9;

struct _1108ddf20_Vector_10;

struct _1108ddf20_Vector_11;

struct _1108ddf20_Vector_12;

struct _1108ddf20_Vector_13;

struct _1108ddf20_Vector_14;

struct _1108ddf20_Vector_15;


struct _11054ec70_File;


struct _11054eff0_Lex;


struct _1104fada0_Ast;


struct _1109372e0_Struct;


struct _110d9ce90_ReferenceStack;


struct _110af2660_Scope;


struct _1111c15d0_SymbolTable;

struct _110e4edc0_Importer {
	virtual ~_110e4edc0_Importer(void) {}

	virtual jule::Ref<_110e4edc0_ImportInfo> _method_get_import(jule::Str _1633_path) { return {}; }
	virtual std::tuple<jule::Slice<jule::Ref<_1104fada0_Ast>>,jule::Slice<_127e05da0_Log>> _method_import_package(jule::Str _2037_path) { return {}; }
	virtual void _method_imported(jule::Ref<_110e4edc0_ImportInfo>) {}
};

struct _1116aff70_Kind {
	virtual ~_1116aff70_Kind(void) {}

	virtual jule::Str _method_to_str(void) { return {}; }
	virtual jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind> _4621_other) { return {}; }
};

struct _111732860_Lookup {
	virtual ~_111732860_Lookup(void) {}

	virtual jule::Ref<_110e4edc0_ImportInfo> _method_find_package(jule::Str _935_ident) { return {}; }
	virtual jule::Ref<_110e4edc0_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)> _1337_selector) { return {}; }
	virtual jule::Ref<_110e92c80_Var> _method_find_var(jule::Str _1731_ident,jule::Bool _1743_cpp_linked) { return {}; }
	virtual jule::Ref<_1116aff70_TypeAlias> _method_find_type_alias(jule::Str _2138_ident,jule::Bool _2150_cpp_linked) { return {}; }
	virtual jule::Ref<_1109372e0_Struct> _method_find_struct(jule::Str _2534_ident,jule::Bool _2546_cpp_linked) { return {}; }
	virtual jule::Ref<_11072eb20_Fn> _method_find_fn(jule::Str _2930_ident,jule::Bool _2942_cpp_linked) { return {}; }
	virtual jule::Ref<_110e3f160_Trait> _method_find_trait(jule::Str _3333_ident) { return {}; }
	virtual jule::Ref<_110e453c0_Enum> _method_find_enum(jule::Str _3732_ident) { return {}; }
};

struct _1114d55f0_RangeSetter {
	virtual ~_1114d55f0_RangeSetter(void) {}

	virtual jule::Str _method_setup_vars(jule::Ref<_110e92c80_Var> _3929_key_a,jule::Ref<_110e92c80_Var> _3946_key_b) { return {}; }
	virtual jule::Str _method_next_steps(jule::Ref<_110e92c80_Var> _4029_key_a,jule::Ref<_110e92c80_Var> _4046_key_b,jule::Str _4059_begin) { return {}; }
};


struct _137e06080_AnsiEscape {
	jule::Ref<_137e06080_AnsiEscape> self{};

	~_137e06080_AnsiEscape(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_137e06080_AnsiEscape(void) { this->self = jule::Ref<_137e06080_AnsiEscape>::make(this, nullptr); }

	static inline void _static_method_reset(void);


	static inline void _static_method_print(jule::Str,jule::Str);


	inline bool operator==(const _137e06080_AnsiEscape &_Src) const { return true; }

	inline bool operator!=(const _137e06080_AnsiEscape &_Src) const { return !this->operator==(_Src); }
};


struct _137e06080_Logger {
	jule::Ref<_137e06080_Logger> self{};

	~_137e06080_Logger(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_137e06080_Logger(void) { this->self = jule::Ref<_137e06080_Logger>::make(this, nullptr); }

	static inline void _static_method_log_flat(_127e05da0_Log&);


	static inline void _static_method_log_error(_127e05da0_Log&);


	static inline void _static_method_log(_127e05da0_Log&);


	inline bool operator==(const _137e06080_Logger &_Src) const { return true; }

	inline bool operator!=(const _137e06080_Logger &_Src) const { return !this->operator==(_Src); }
};


struct _117e1d320_LazyBuff {
	jule::Ref<_117e1d320_LazyBuff> self{};

	jule::Str _field_path{jule::Str()};
	jule::Slice<jule::U8> _field_buff{jule::Slice<jule::U8>()};
	jule::Int _field_w{jule::Int()};
	jule::Str _field_vol_and_path{jule::Str()};
	jule::Int _field_vol_len{jule::Int()};


	_117e1d320_LazyBuff(jule::Str __param_path, jule::Slice<jule::U8> __param_buff, jule::Int __param_w, jule::Str __param_vol_and_path, jule::Int __param_vol_len) {
		this->self = jule::Ref<_117e1d320_LazyBuff>::make(this, nullptr);

		this->_field_path = __param_path;
		this->_field_buff = __param_buff;
		this->_field_w = __param_w;
		this->_field_vol_and_path = __param_vol_and_path;
		this->_field_vol_len = __param_vol_len;
	}

	~_117e1d320_LazyBuff(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_117e1d320_LazyBuff(void) { this->self = jule::Ref<_117e1d320_LazyBuff>::make(this, nullptr); }

	inline jule::U8 _method_index(jule::Int);


	inline void _method_append(jule::U8);


	inline jule::Str _method_string(void);


	inline bool operator==(const _117e1d320_LazyBuff &_Src) const {
		return 
			this->_field_path == _Src._field_path &&
			this->_field_buff == _Src._field_buff &&
			this->_field_w == _Src._field_w &&
			this->_field_vol_and_path == _Src._field_vol_and_path &&
			this->_field_vol_len == _Src._field_vol_len;
	}

	inline bool operator!=(const _117e1d320_LazyBuff &_Src) const { return !this->operator==(_Src); }
};


struct _110621ed0_bits_error: public jule::Error {
	jule::Ref<_110621ed0_bits_error> self{};

	jule::Str _field_message{jule::Str()};


	_110621ed0_bits_error(jule::Str __param_message) {
		this->self = jule::Ref<_110621ed0_bits_error>::make(this, nullptr);

		this->_field_message = __param_message;
	}

	~_110621ed0_bits_error(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110621ed0_bits_error(void) { this->self = jule::Ref<_110621ed0_bits_error>::make(this, nullptr); }

	inline jule::Str _method_error(void);


	inline bool operator==(const _110621ed0_bits_error &_Src) const {
		return 
			this->_field_message == _Src._field_message;
	}

	inline bool operator!=(const _110621ed0_bits_error &_Src) const { return !this->operator==(_Src); }
};


struct _117e12d10_FloatInfo {
	jule::Ref<_117e12d10_FloatInfo> self{};

	jule::Uint _field_mantbits{jule::Uint()};
	jule::Uint _field_expbits{jule::Uint()};
	jule::Int _field_bias{jule::Int()};


	_117e12d10_FloatInfo(jule::Uint __param_mantbits, jule::Uint __param_expbits, jule::Int __param_bias) {
		this->self = jule::Ref<_117e12d10_FloatInfo>::make(this, nullptr);

		this->_field_mantbits = __param_mantbits;
		this->_field_expbits = __param_expbits;
		this->_field_bias = __param_bias;
	}

	~_117e12d10_FloatInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_117e12d10_FloatInfo(void) { this->self = jule::Ref<_117e12d10_FloatInfo>::make(this, nullptr); }

	inline bool operator==(const _117e12d10_FloatInfo &_Src) const {
		return 
			this->_field_mantbits == _Src._field_mantbits &&
			this->_field_expbits == _Src._field_expbits &&
			this->_field_bias == _Src._field_bias;
	}

	inline bool operator!=(const _117e12d10_FloatInfo &_Src) const { return !this->operator==(_Src); }
};


struct _117e12d10_DecimalSlice {
	jule::Ref<_117e12d10_DecimalSlice> self{};

	jule::Slice<jule::U8> _field_d{jule::Slice<jule::U8>()};
	jule::Int _field_nd{jule::Int()};
	jule::Int _field_dp{jule::Int()};
	jule::Bool _field_neg{jule::Bool()};


	_117e12d10_DecimalSlice(jule::Slice<jule::U8> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg) {
		this->self = jule::Ref<_117e12d10_DecimalSlice>::make(this, nullptr);

		this->_field_d = __param_d;
		this->_field_nd = __param_nd;
		this->_field_dp = __param_dp;
		this->_field_neg = __param_neg;
	}

	~_117e12d10_DecimalSlice(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_117e12d10_DecimalSlice(void) { this->self = jule::Ref<_117e12d10_DecimalSlice>::make(this, nullptr); }

	inline bool operator==(const _117e12d10_DecimalSlice &_Src) const {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg;
	}

	inline bool operator!=(const _117e12d10_DecimalSlice &_Src) const { return !this->operator==(_Src); }
};


struct _110057cd0_LeftCheat {
	jule::Ref<_110057cd0_LeftCheat> self{};

	jule::Int _field_delta{jule::Int()};
	jule::Str _field_cutoff{jule::Str()};


	_110057cd0_LeftCheat(jule::Int __param_delta, jule::Str __param_cutoff) {
		this->self = jule::Ref<_110057cd0_LeftCheat>::make(this, nullptr);

		this->_field_delta = __param_delta;
		this->_field_cutoff = __param_cutoff;
	}

	~_110057cd0_LeftCheat(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110057cd0_LeftCheat(void) { this->self = jule::Ref<_110057cd0_LeftCheat>::make(this, nullptr); }

	inline bool operator==(const _110057cd0_LeftCheat &_Src) const {
		return 
			this->_field_delta == _Src._field_delta &&
			this->_field_cutoff == _Src._field_cutoff;
	}

	inline bool operator!=(const _110057cd0_LeftCheat &_Src) const { return !this->operator==(_Src); }
};


struct _110057cd0_Decimal {
	jule::Ref<_110057cd0_Decimal> self{};

	jule::Array<jule::U8,800> _field_d{jule::Array<jule::U8,800>()};
	jule::Int _field_nd{jule::Int()};
	jule::Int _field_dp{jule::Int()};
	jule::Bool _field_neg{jule::Bool()};
	jule::Bool _field_trunc{jule::Bool()};


	_110057cd0_Decimal(jule::Array<jule::U8,800> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg, jule::Bool __param_trunc) {
		this->self = jule::Ref<_110057cd0_Decimal>::make(this, nullptr);

		this->_field_d = __param_d;
		this->_field_nd = __param_nd;
		this->_field_dp = __param_dp;
		this->_field_neg = __param_neg;
		this->_field_trunc = __param_trunc;
	}

	~_110057cd0_Decimal(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110057cd0_Decimal(void) { this->self = jule::Ref<_110057cd0_Decimal>::make(this, nullptr); }

	inline jule::Bool _method_set(jule::Str);


	inline std::tuple<jule::U64,jule::Bool> _method_float_bits(_117e12d10_FloatInfo&);


	inline void _method_assign(jule::U64);


	inline void _method_shift(jule::Int);


	inline void _method_round_down(jule::Int);


	inline void _method_round_up(jule::Int);


	inline void _method_round(jule::Int);


	inline jule::U64 _method_rounded_integer(void);


	inline bool operator==(const _110057cd0_Decimal &_Src) const {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg &&
			this->_field_trunc == _Src._field_trunc;
	}

	inline bool operator!=(const _110057cd0_Decimal &_Src) const { return !this->operator==(_Src); }
};


struct _127e05da0_Log {
	jule::Ref<_127e05da0_Log> self{};

	jule::Int _field_kind{0LLU};
	jule::Int _field_row{jule::Int()};
	jule::Int _field_column{jule::Int()};
	jule::Str _field_path{jule::Str()};
	jule::Str _field_text{jule::Str()};
	jule::Str _field_line{jule::Str()};
	jule::Str _field_suggestion{jule::Str()};


	_127e05da0_Log(jule::Int __param_kind, jule::Int __param_row, jule::Int __param_column, jule::Str __param_path, jule::Str __param_text, jule::Str __param_line, jule::Str __param_suggestion) {
		this->self = jule::Ref<_127e05da0_Log>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_row = __param_row;
		this->_field_column = __param_column;
		this->_field_path = __param_path;
		this->_field_text = __param_text;
		this->_field_line = __param_line;
		this->_field_suggestion = __param_suggestion;
	}

	~_127e05da0_Log(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_127e05da0_Log(void) { this->self = jule::Ref<_127e05da0_Log>::make(this, nullptr); }

	inline bool operator==(const _127e05da0_Log &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_path == _Src._field_path &&
			this->_field_text == _Src._field_text &&
			this->_field_line == _Src._field_line &&
			this->_field_suggestion == _Src._field_suggestion;
	}

	inline bool operator!=(const _127e05da0_Log &_Src) const { return !this->operator==(_Src); }
};


struct _110473c30_DirEntry {
	jule::Ref<_110473c30_DirEntry> self{};

	jule::Str _field_name{jule::Str()};
	jule::Ref<_11054d9e0_Status> _field_stat{jule::Ref<_11054d9e0_Status>()};


	_110473c30_DirEntry(jule::Str __param_name, jule::Ref<_11054d9e0_Status> __param_stat) {
		this->self = jule::Ref<_110473c30_DirEntry>::make(this, nullptr);

		this->_field_name = __param_name;
		this->_field_stat = __param_stat;
	}

	~_110473c30_DirEntry(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110473c30_DirEntry(void) { this->self = jule::Ref<_110473c30_DirEntry>::make(this, nullptr); }

	inline bool operator==(const _110473c30_DirEntry &_Src) const {
		return 
			this->_field_name == _Src._field_name &&
			this->_field_stat == _Src._field_stat;
	}

	inline bool operator!=(const _110473c30_DirEntry &_Src) const { return !this->operator==(_Src); }
};


struct _1104f8ac0_File {
	jule::Ref<_1104f8ac0_File> self{};

	jule::Int _field_handle{jule::Int()};


	_1104f8ac0_File(jule::Int __param_handle) {
		this->self = jule::Ref<_1104f8ac0_File>::make(this, nullptr);

		this->_field_handle = __param_handle;
	}

	~_1104f8ac0_File(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1104f8ac0_File(void) { this->self = jule::Ref<_1104f8ac0_File>::make(this, nullptr); }

	inline std::tuple<jule::I64,jule::Int> _method_seek(jule::I64,jule::Int);


	inline std::tuple<jule::Int,jule::Int> _method_read(jule::Slice<jule::U8>);


	inline std::tuple<jule::Int,jule::Int> _method_write(jule::Slice<jule::U8>);


	inline jule::Int _method_close(void);


	inline bool operator==(const _1104f8ac0_File &_Src) const {
		return 
			this->_field_handle == _Src._field_handle;
	}

	inline bool operator!=(const _1104f8ac0_File &_Src) const { return !this->operator==(_Src); }
};


struct _11054d9e0_Status {
	jule::Ref<_11054d9e0_Status> self{};

	jule::Uint _field_mode{jule::Uint()};
	jule::Uint _field_size{jule::Uint()};


	_11054d9e0_Status(jule::Uint __param_mode, jule::Uint __param_size) {
		this->self = jule::Ref<_11054d9e0_Status>::make(this, nullptr);

		this->_field_mode = __param_mode;
		this->_field_size = __param_size;
	}

	~_11054d9e0_Status(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054d9e0_Status(void) { this->self = jule::Ref<_11054d9e0_Status>::make(this, nullptr); }

	inline jule::Bool _method_is_dir(void);


	inline jule::Bool _method_is_reg(void);


	inline bool operator==(const _11054d9e0_Status &_Src) const {
		return 
			this->_field_mode == _Src._field_mode &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _11054d9e0_Status &_Src) const { return !this->operator==(_Src); }
};


struct _1106ed100_accept_range {
	jule::Ref<_1106ed100_accept_range> self{};

	jule::U8 _field_lo{jule::U8()};
	jule::U8 _field_hi{jule::U8()};


	_1106ed100_accept_range(jule::U8 __param_lo, jule::U8 __param_hi) {
		this->self = jule::Ref<_1106ed100_accept_range>::make(this, nullptr);

		this->_field_lo = __param_lo;
		this->_field_hi = __param_hi;
	}

	~_1106ed100_accept_range(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1106ed100_accept_range(void) { this->self = jule::Ref<_1106ed100_accept_range>::make(this, nullptr); }

	inline bool operator==(const _1106ed100_accept_range &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi;
	}

	inline bool operator!=(const _1106ed100_accept_range &_Src) const { return !this->operator==(_Src); }
};


struct _1106ec050_Token {
	jule::Ref<_1106ec050_Token> self{};

	jule::Ref<_11054ec70_File> _field_file{jule::Ref<_11054ec70_File>()};
	jule::Int _field_row{jule::Int()};
	jule::Int _field_column{jule::Int()};
	jule::Str _field_kind{jule::Str()};
	jule::Uint _field_id{0LLU};


	_1106ec050_Token(jule::Ref<_11054ec70_File> __param_file, jule::Int __param_row, jule::Int __param_column, jule::Str __param_kind, jule::Uint __param_id) {
		this->self = jule::Ref<_1106ec050_Token>::make(this, nullptr);

		this->_field_file = __param_file;
		this->_field_row = __param_row;
		this->_field_column = __param_column;
		this->_field_kind = __param_kind;
		this->_field_id = __param_id;
	}

	~_1106ec050_Token(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1106ec050_Token(void) { this->self = jule::Ref<_1106ec050_Token>::make(this, nullptr); }

	inline jule::Int _method_prec(void);


	inline bool operator==(const _1106ec050_Token &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _1106ec050_Token &_Src) const { return !this->operator==(_Src); }
};


struct _11054eff0_KindPair {
	jule::Ref<_11054eff0_KindPair> self{};

	jule::Str _field_kind{jule::Str("::", 2)};
	jule::Uint _field_id{0LLU};


	_11054eff0_KindPair(jule::Str __param_kind, jule::Uint __param_id) {
		this->self = jule::Ref<_11054eff0_KindPair>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_id = __param_id;
	}

	~_11054eff0_KindPair(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054eff0_KindPair(void) { this->self = jule::Ref<_11054eff0_KindPair>::make(this, nullptr); }

	inline bool operator==(const _11054eff0_KindPair &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _11054eff0_KindPair &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_CommentGroup {
	jule::Ref<_11054f670_CommentGroup> self{};

	jule::Slice<jule::Ref<_11054f670_Comment>> _field_comments{jule::Slice<jule::Ref<_11054f670_Comment>>()};


	_11054f670_CommentGroup(jule::Slice<jule::Ref<_11054f670_Comment>> __param_comments) {
		this->self = jule::Ref<_11054f670_CommentGroup>::make(this, nullptr);

		this->_field_comments = __param_comments;
	}

	~_11054f670_CommentGroup(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_CommentGroup(void) { this->self = jule::Ref<_11054f670_CommentGroup>::make(this, nullptr); }

	inline bool operator==(const _11054f670_CommentGroup &_Src) const {
		return 
			this->_field_comments == _Src._field_comments;
	}

	inline bool operator!=(const _11054f670_CommentGroup &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_NamespaceTypeDecl {
	jule::Ref<_11054f670_NamespaceTypeDecl> self{};

	jule::Slice<_1106ec050_Token> _field_idents{jule::Slice<_1106ec050_Token>()};
	jule::Ref<_11054f670_IdentTypeDecl> _field_kind{jule::Ref<_11054f670_IdentTypeDecl>()};


	_11054f670_NamespaceTypeDecl(jule::Slice<_1106ec050_Token> __param_idents, jule::Ref<_11054f670_IdentTypeDecl> __param_kind) {
		this->self = jule::Ref<_11054f670_NamespaceTypeDecl>::make(this, nullptr);

		this->_field_idents = __param_idents;
		this->_field_kind = __param_kind;
	}

	~_11054f670_NamespaceTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_NamespaceTypeDecl(void) { this->self = jule::Ref<_11054f670_NamespaceTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_NamespaceTypeDecl &_Src) const {
		return 
			this->_field_idents == _Src._field_idents &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _11054f670_NamespaceTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_RefTypeDecl {
	jule::Ref<_11054f670_RefTypeDecl> self{};

	jule::Ref<_11054f670_TypeDecl> _field_elem{jule::Ref<_11054f670_TypeDecl>()};


	_11054f670_RefTypeDecl(jule::Ref<_11054f670_TypeDecl> __param_elem) {
		this->self = jule::Ref<_11054f670_RefTypeDecl>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_11054f670_RefTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_RefTypeDecl(void) { this->self = jule::Ref<_11054f670_RefTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_RefTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _11054f670_RefTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_SlcTypeDecl {
	jule::Ref<_11054f670_SlcTypeDecl> self{};

	jule::Ref<_11054f670_TypeDecl> _field_elem{jule::Ref<_11054f670_TypeDecl>()};


	_11054f670_SlcTypeDecl(jule::Ref<_11054f670_TypeDecl> __param_elem) {
		this->self = jule::Ref<_11054f670_SlcTypeDecl>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_11054f670_SlcTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_SlcTypeDecl(void) { this->self = jule::Ref<_11054f670_SlcTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_SlcTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _11054f670_SlcTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_TupleTypeDecl {
	jule::Ref<_11054f670_TupleTypeDecl> self{};

	jule::Slice<jule::Ref<_11054f670_TypeDecl>> _field_types{jule::Slice<jule::Ref<_11054f670_TypeDecl>>()};


	_11054f670_TupleTypeDecl(jule::Slice<jule::Ref<_11054f670_TypeDecl>> __param_types) {
		this->self = jule::Ref<_11054f670_TupleTypeDecl>::make(this, nullptr);

		this->_field_types = __param_types;
	}

	~_11054f670_TupleTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_TupleTypeDecl(void) { this->self = jule::Ref<_11054f670_TupleTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_TupleTypeDecl &_Src) const {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _11054f670_TupleTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_PtrTypeDecl {
	jule::Ref<_11054f670_PtrTypeDecl> self{};

	jule::Ref<_11054f670_TypeDecl> _field_elem{jule::Ref<_11054f670_TypeDecl>()};


	_11054f670_PtrTypeDecl(jule::Ref<_11054f670_TypeDecl> __param_elem) {
		this->self = jule::Ref<_11054f670_PtrTypeDecl>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_11054f670_PtrTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_PtrTypeDecl(void) { this->self = jule::Ref<_11054f670_PtrTypeDecl>::make(this, nullptr); }

	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _11054f670_PtrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _11054f670_PtrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_ArrTypeDecl {
	jule::Ref<_11054f670_ArrTypeDecl> self{};

	jule::Ref<_11054f670_TypeDecl> _field_elem{jule::Ref<_11054f670_TypeDecl>()};
	jule::Ref<_11054f670_Expr> _field_size{jule::Ref<_11054f670_Expr>()};


	_11054f670_ArrTypeDecl(jule::Ref<_11054f670_TypeDecl> __param_elem, jule::Ref<_11054f670_Expr> __param_size) {
		this->self = jule::Ref<_11054f670_ArrTypeDecl>::make(this, nullptr);

		this->_field_elem = __param_elem;
		this->_field_size = __param_size;
	}

	~_11054f670_ArrTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_ArrTypeDecl(void) { this->self = jule::Ref<_11054f670_ArrTypeDecl>::make(this, nullptr); }

	inline jule::Bool _method_auto_sized(void);


	inline bool operator==(const _11054f670_ArrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _11054f670_ArrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_MapTypeDecl {
	jule::Ref<_11054f670_MapTypeDecl> self{};

	jule::Ref<_11054f670_TypeDecl> _field_key{jule::Ref<_11054f670_TypeDecl>()};
	jule::Ref<_11054f670_TypeDecl> _field_val{jule::Ref<_11054f670_TypeDecl>()};


	_11054f670_MapTypeDecl(jule::Ref<_11054f670_TypeDecl> __param_key, jule::Ref<_11054f670_TypeDecl> __param_val) {
		this->self = jule::Ref<_11054f670_MapTypeDecl>::make(this, nullptr);

		this->_field_key = __param_key;
		this->_field_val = __param_val;
	}

	~_11054f670_MapTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_MapTypeDecl(void) { this->self = jule::Ref<_11054f670_MapTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_MapTypeDecl &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _11054f670_MapTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_RetTypeDecl {
	jule::Ref<_11054f670_RetTypeDecl> self{};

	jule::Ref<_11054f670_TypeDecl> _field_kind{jule::Ref<_11054f670_TypeDecl>()};
	jule::Slice<_1106ec050_Token> _field_idents{jule::Slice<_1106ec050_Token>()};


	_11054f670_RetTypeDecl(jule::Ref<_11054f670_TypeDecl> __param_kind, jule::Slice<_1106ec050_Token> __param_idents) {
		this->self = jule::Ref<_11054f670_RetTypeDecl>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_idents = __param_idents;
	}

	~_11054f670_RetTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_RetTypeDecl(void) { this->self = jule::Ref<_11054f670_RetTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_RetTypeDecl &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _11054f670_RetTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_TupleExpr {
	jule::Ref<_11054f670_TupleExpr> self{};

	jule::Slice<jule::Ref<_11054f670_Expr>> _field_expr{jule::Slice<jule::Ref<_11054f670_Expr>>()};


	_11054f670_TupleExpr(jule::Slice<jule::Ref<_11054f670_Expr>> __param_expr) {
		this->self = jule::Ref<_11054f670_TupleExpr>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_11054f670_TupleExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_TupleExpr(void) { this->self = jule::Ref<_11054f670_TupleExpr>::make(this, nullptr); }

	inline bool operator==(const _11054f670_TupleExpr &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11054f670_TupleExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_LitExpr {
	jule::Ref<_11054f670_LitExpr> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_value{jule::Str()};


	_11054f670_LitExpr(_1106ec050_Token __param_token, jule::Str __param_value) {
		this->self = jule::Ref<_11054f670_LitExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_value = __param_value;
	}

	~_11054f670_LitExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_LitExpr(void) { this->self = jule::Ref<_11054f670_LitExpr>::make(this, nullptr); }

	inline jule::Bool _method_is_nil(void);


	inline bool operator==(const _11054f670_LitExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _11054f670_LitExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_UnsafeExpr {
	jule::Ref<_11054f670_UnsafeExpr> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Any _field_expr{jule::Any()};


	_11054f670_UnsafeExpr(_1106ec050_Token __param_token, jule::Any __param_expr) {
		this->self = jule::Ref<_11054f670_UnsafeExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
	}

	~_11054f670_UnsafeExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_UnsafeExpr(void) { this->self = jule::Ref<_11054f670_UnsafeExpr>::make(this, nullptr); }

	inline bool operator==(const _11054f670_UnsafeExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11054f670_UnsafeExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_IdentExpr {
	jule::Ref<_11054f670_IdentExpr> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_cpp_linked{jule::Bool()};


	_11054f670_IdentExpr(_1106ec050_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked) {
		this->self = jule::Ref<_11054f670_IdentExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_cpp_linked = __param_cpp_linked;
	}

	~_11054f670_IdentExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_IdentExpr(void) { this->self = jule::Ref<_11054f670_IdentExpr>::make(this, nullptr); }

	inline jule::Bool _method_is_self(void);


	inline bool operator==(const _11054f670_IdentExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked;
	}

	inline bool operator!=(const _11054f670_IdentExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_UnaryExpr {
	jule::Ref<_11054f670_UnaryExpr> self{};

	_1106ec050_Token _field_op{_1106ec050_Token()};
	jule::Any _field_expr{jule::Any()};


	_11054f670_UnaryExpr(_1106ec050_Token __param_op, jule::Any __param_expr) {
		this->self = jule::Ref<_11054f670_UnaryExpr>::make(this, nullptr);

		this->_field_op = __param_op;
		this->_field_expr = __param_expr;
	}

	~_11054f670_UnaryExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_UnaryExpr(void) { this->self = jule::Ref<_11054f670_UnaryExpr>::make(this, nullptr); }

	inline bool operator==(const _11054f670_UnaryExpr &_Src) const {
		return 
			this->_field_op == _Src._field_op &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11054f670_UnaryExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_VariadicExpr {
	jule::Ref<_11054f670_VariadicExpr> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Any _field_expr{jule::Any()};


	_11054f670_VariadicExpr(_1106ec050_Token __param_token, jule::Any __param_expr) {
		this->self = jule::Ref<_11054f670_VariadicExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
	}

	~_11054f670_VariadicExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_VariadicExpr(void) { this->self = jule::Ref<_11054f670_VariadicExpr>::make(this, nullptr); }

	inline bool operator==(const _11054f670_VariadicExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11054f670_VariadicExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_CastExpr {
	jule::Ref<_11054f670_CastExpr> self{};

	jule::Ref<_11054f670_TypeDecl> _field_kind{jule::Ref<_11054f670_TypeDecl>()};
	jule::Any _field_expr{jule::Any()};


	_11054f670_CastExpr(jule::Ref<_11054f670_TypeDecl> __param_kind, jule::Any __param_expr) {
		this->self = jule::Ref<_11054f670_CastExpr>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_expr = __param_expr;
	}

	~_11054f670_CastExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_CastExpr(void) { this->self = jule::Ref<_11054f670_CastExpr>::make(this, nullptr); }

	inline bool operator==(const _11054f670_CastExpr &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11054f670_CastExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_NsSelectionExpr {
	jule::Ref<_11054f670_NsSelectionExpr> self{};

	jule::Slice<_1106ec050_Token> _field_ns{jule::Slice<_1106ec050_Token>()};
	_1106ec050_Token _field_ident{_1106ec050_Token()};


	_11054f670_NsSelectionExpr(jule::Slice<_1106ec050_Token> __param_ns, _1106ec050_Token __param_ident) {
		this->self = jule::Ref<_11054f670_NsSelectionExpr>::make(this, nullptr);

		this->_field_ns = __param_ns;
		this->_field_ident = __param_ident;
	}

	~_11054f670_NsSelectionExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_NsSelectionExpr(void) { this->self = jule::Ref<_11054f670_NsSelectionExpr>::make(this, nullptr); }

	inline bool operator==(const _11054f670_NsSelectionExpr &_Src) const {
		return 
			this->_field_ns == _Src._field_ns &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _11054f670_NsSelectionExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_SubIdentExpr {
	jule::Ref<_11054f670_SubIdentExpr> self{};

	jule::Bool _field_is_self{jule::Bool()};
	jule::Any _field_expr{jule::Any()};
	_1106ec050_Token _field_ident{_1106ec050_Token()};


	_11054f670_SubIdentExpr(jule::Bool __param_is_self, jule::Any __param_expr, _1106ec050_Token __param_ident) {
		this->self = jule::Ref<_11054f670_SubIdentExpr>::make(this, nullptr);

		this->_field_is_self = __param_is_self;
		this->_field_expr = __param_expr;
		this->_field_ident = __param_ident;
	}

	~_11054f670_SubIdentExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_SubIdentExpr(void) { this->self = jule::Ref<_11054f670_SubIdentExpr>::make(this, nullptr); }

	inline bool operator==(const _11054f670_SubIdentExpr &_Src) const {
		return 
			this->_field_is_self == _Src._field_is_self &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _11054f670_SubIdentExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_BinopExpr {
	jule::Ref<_11054f670_BinopExpr> self{};

	jule::Any _field_left{jule::Any()};
	jule::Any _field_right{jule::Any()};
	_1106ec050_Token _field_op{_1106ec050_Token()};


	_11054f670_BinopExpr(jule::Any __param_left, jule::Any __param_right, _1106ec050_Token __param_op) {
		this->self = jule::Ref<_11054f670_BinopExpr>::make(this, nullptr);

		this->_field_left = __param_left;
		this->_field_right = __param_right;
		this->_field_op = __param_op;
	}

	~_11054f670_BinopExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_BinopExpr(void) { this->self = jule::Ref<_11054f670_BinopExpr>::make(this, nullptr); }

	inline bool operator==(const _11054f670_BinopExpr &_Src) const {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _11054f670_BinopExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_FieldExprPair {
	jule::Ref<_11054f670_FieldExprPair> self{};

	_1106ec050_Token _field_field{_1106ec050_Token()};
	jule::Any _field_expr{jule::Any()};


	_11054f670_FieldExprPair(_1106ec050_Token __param_field, jule::Any __param_expr) {
		this->self = jule::Ref<_11054f670_FieldExprPair>::make(this, nullptr);

		this->_field_field = __param_field;
		this->_field_expr = __param_expr;
	}

	~_11054f670_FieldExprPair(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_FieldExprPair(void) { this->self = jule::Ref<_11054f670_FieldExprPair>::make(this, nullptr); }

	inline jule::Bool _method_is_targeted(void);


	inline bool operator==(const _11054f670_FieldExprPair &_Src) const {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11054f670_FieldExprPair &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_StructLit {
	jule::Ref<_11054f670_StructLit> self{};

	jule::Ref<_11054f670_TypeDecl> _field_kind{jule::Ref<_11054f670_TypeDecl>()};
	jule::Slice<jule::Any> _field_exprs{jule::Slice<jule::Any>()};


	_11054f670_StructLit(jule::Ref<_11054f670_TypeDecl> __param_kind, jule::Slice<jule::Any> __param_exprs) {
		this->self = jule::Ref<_11054f670_StructLit>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_exprs = __param_exprs;
	}

	~_11054f670_StructLit(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_StructLit(void) { this->self = jule::Ref<_11054f670_StructLit>::make(this, nullptr); }

	inline bool operator==(const _11054f670_StructLit &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _11054f670_StructLit &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_BraceLit {
	jule::Ref<_11054f670_BraceLit> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Slice<jule::Any> _field_exprs{jule::Slice<jule::Any>()};


	_11054f670_BraceLit(_1106ec050_Token __param_token, jule::Slice<jule::Any> __param_exprs) {
		this->self = jule::Ref<_11054f670_BraceLit>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_exprs = __param_exprs;
	}

	~_11054f670_BraceLit(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_BraceLit(void) { this->self = jule::Ref<_11054f670_BraceLit>::make(this, nullptr); }

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _11054f670_BraceLit &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _11054f670_BraceLit &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_KeyValPair {
	jule::Ref<_11054f670_KeyValPair> self{};

	jule::Any _field_key{jule::Any()};
	jule::Any _field_val{jule::Any()};
	_1106ec050_Token _field_colon{_1106ec050_Token()};


	_11054f670_KeyValPair(jule::Any __param_key, jule::Any __param_val, _1106ec050_Token __param_colon) {
		this->self = jule::Ref<_11054f670_KeyValPair>::make(this, nullptr);

		this->_field_key = __param_key;
		this->_field_val = __param_val;
		this->_field_colon = __param_colon;
	}

	~_11054f670_KeyValPair(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_KeyValPair(void) { this->self = jule::Ref<_11054f670_KeyValPair>::make(this, nullptr); }

	inline bool operator==(const _11054f670_KeyValPair &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val &&
			this->_field_colon == _Src._field_colon;
	}

	inline bool operator!=(const _11054f670_KeyValPair &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_SliceExpr {
	jule::Ref<_11054f670_SliceExpr> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Slice<jule::Any> _field_elems{jule::Slice<jule::Any>()};


	_11054f670_SliceExpr(_1106ec050_Token __param_token, jule::Slice<jule::Any> __param_elems) {
		this->self = jule::Ref<_11054f670_SliceExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_elems = __param_elems;
	}

	~_11054f670_SliceExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_SliceExpr(void) { this->self = jule::Ref<_11054f670_SliceExpr>::make(this, nullptr); }

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _11054f670_SliceExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _11054f670_SliceExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_IndexingExpr {
	jule::Ref<_11054f670_IndexingExpr> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Any _field_expr{jule::Any()};
	jule::Any _field_index{jule::Any()};


	_11054f670_IndexingExpr(_1106ec050_Token __param_token, jule::Any __param_expr, jule::Any __param_index) {
		this->self = jule::Ref<_11054f670_IndexingExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
		this->_field_index = __param_index;
	}

	~_11054f670_IndexingExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_IndexingExpr(void) { this->self = jule::Ref<_11054f670_IndexingExpr>::make(this, nullptr); }

	inline bool operator==(const _11054f670_IndexingExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _11054f670_IndexingExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_SlicingExpr {
	jule::Ref<_11054f670_SlicingExpr> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Any _field_expr{jule::Any()};
	jule::Any _field_start{jule::Any()};
	jule::Any _field_to{jule::Any()};


	_11054f670_SlicingExpr(_1106ec050_Token __param_token, jule::Any __param_expr, jule::Any __param_start, jule::Any __param_to) {
		this->self = jule::Ref<_11054f670_SlicingExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
		this->_field_start = __param_start;
		this->_field_to = __param_to;
	}

	~_11054f670_SlicingExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_SlicingExpr(void) { this->self = jule::Ref<_11054f670_SlicingExpr>::make(this, nullptr); }

	inline bool operator==(const _11054f670_SlicingExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_start == _Src._field_start &&
			this->_field_to == _Src._field_to;
	}

	inline bool operator!=(const _11054f670_SlicingExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_LabelSt {
	jule::Ref<_11054f670_LabelSt> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};


	_11054f670_LabelSt(_1106ec050_Token __param_token, jule::Str __param_ident) {
		this->self = jule::Ref<_11054f670_LabelSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
	}

	~_11054f670_LabelSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_LabelSt(void) { this->self = jule::Ref<_11054f670_LabelSt>::make(this, nullptr); }

	inline bool operator==(const _11054f670_LabelSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _11054f670_LabelSt &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_FallSt {
	jule::Ref<_11054f670_FallSt> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};


	_11054f670_FallSt(_1106ec050_Token __param_token) {
		this->self = jule::Ref<_11054f670_FallSt>::make(this, nullptr);

		this->_field_token = __param_token;
	}

	~_11054f670_FallSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_FallSt(void) { this->self = jule::Ref<_11054f670_FallSt>::make(this, nullptr); }

	inline bool operator==(const _11054f670_FallSt &_Src) const {
		return 
			this->_field_token == _Src._field_token;
	}

	inline bool operator!=(const _11054f670_FallSt &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_AssignSt {
	jule::Ref<_11054f670_AssignSt> self{};

	jule::Bool _field_declarative{jule::Bool()};
	_1106ec050_Token _field_setter{_1106ec050_Token()};
	jule::Slice<jule::Ref<_11054f670_AssignLeft>> _field_left{jule::Slice<jule::Ref<_11054f670_AssignLeft>>()};
	jule::Ref<_11054f670_Expr> _field_right{jule::Ref<_11054f670_Expr>()};


	_11054f670_AssignSt(jule::Bool __param_declarative, _1106ec050_Token __param_setter, jule::Slice<jule::Ref<_11054f670_AssignLeft>> __param_left, jule::Ref<_11054f670_Expr> __param_right) {
		this->self = jule::Ref<_11054f670_AssignSt>::make(this, nullptr);

		this->_field_declarative = __param_declarative;
		this->_field_setter = __param_setter;
		this->_field_left = __param_left;
		this->_field_right = __param_right;
	}

	~_11054f670_AssignSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_AssignSt(void) { this->self = jule::Ref<_11054f670_AssignSt>::make(this, nullptr); }

	inline bool operator==(const _11054f670_AssignSt &_Src) const {
		return 
			this->_field_declarative == _Src._field_declarative &&
			this->_field_setter == _Src._field_setter &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _11054f670_AssignSt &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_ScopeTree {
	jule::Ref<_11054f670_ScopeTree> self{};

	jule::Ref<_11054f670_ScopeTree> _field_parent{jule::Ref<_11054f670_ScopeTree>()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Bool _field_deferred{jule::Bool()};
	jule::Slice<jule::Any> _field_stmts{jule::Slice<jule::Any>()};


	_11054f670_ScopeTree(jule::Ref<_11054f670_ScopeTree> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts) {
		this->self = jule::Ref<_11054f670_ScopeTree>::make(this, nullptr);

		this->_field_parent = __param_parent;
		this->_field_unsafety = __param_unsafety;
		this->_field_deferred = __param_deferred;
		this->_field_stmts = __param_stmts;
	}

	~_11054f670_ScopeTree(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_ScopeTree(void) { this->self = jule::Ref<_11054f670_ScopeTree>::make(this, nullptr); }

	inline bool operator==(const _11054f670_ScopeTree &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _11054f670_ScopeTree &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_RetSt {
	jule::Ref<_11054f670_RetSt> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Ref<_11054f670_Expr> _field_expr{jule::Ref<_11054f670_Expr>()};


	_11054f670_RetSt(_1106ec050_Token __param_token, jule::Ref<_11054f670_Expr> __param_expr) {
		this->self = jule::Ref<_11054f670_RetSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
	}

	~_11054f670_RetSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_RetSt(void) { this->self = jule::Ref<_11054f670_RetSt>::make(this, nullptr); }

	inline bool operator==(const _11054f670_RetSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11054f670_RetSt &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_Iter {
	jule::Ref<_11054f670_Iter> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Any _field_kind{jule::Any()};
	jule::Ref<_11054f670_ScopeTree> _field_scope{jule::Ref<_11054f670_ScopeTree>()};


	_11054f670_Iter(_1106ec050_Token __param_token, jule::Any __param_kind, jule::Ref<_11054f670_ScopeTree> __param_scope) {
		this->self = jule::Ref<_11054f670_Iter>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_kind = __param_kind;
		this->_field_scope = __param_scope;
	}

	~_11054f670_Iter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_Iter(void) { this->self = jule::Ref<_11054f670_Iter>::make(this, nullptr); }

	inline jule::Bool _method_is_inf(void);


	inline bool operator==(const _11054f670_Iter &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _11054f670_Iter &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_WhileKind {
	jule::Ref<_11054f670_WhileKind> self{};

	jule::Ref<_11054f670_Expr> _field_expr{jule::Ref<_11054f670_Expr>()};
	jule::Any _field_next{jule::Any()};
	_1106ec050_Token _field_next_token{_1106ec050_Token()};


	_11054f670_WhileKind(jule::Ref<_11054f670_Expr> __param_expr, jule::Any __param_next, _1106ec050_Token __param_next_token) {
		this->self = jule::Ref<_11054f670_WhileKind>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_next = __param_next;
		this->_field_next_token = __param_next_token;
	}

	~_11054f670_WhileKind(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_WhileKind(void) { this->self = jule::Ref<_11054f670_WhileKind>::make(this, nullptr); }

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _11054f670_WhileKind &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_next_token == _Src._field_next_token;
	}

	inline bool operator!=(const _11054f670_WhileKind &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_RangeKind {
	jule::Ref<_11054f670_RangeKind> self{};

	_1106ec050_Token _field_in_token{_1106ec050_Token()};
	jule::Ref<_11054f670_Expr> _field_expr{jule::Ref<_11054f670_Expr>()};
	jule::Ref<_11054f670_VarDecl> _field_key_a{jule::Ref<_11054f670_VarDecl>()};
	jule::Ref<_11054f670_VarDecl> _field_key_b{jule::Ref<_11054f670_VarDecl>()};


	_11054f670_RangeKind(_1106ec050_Token __param_in_token, jule::Ref<_11054f670_Expr> __param_expr, jule::Ref<_11054f670_VarDecl> __param_key_a, jule::Ref<_11054f670_VarDecl> __param_key_b) {
		this->self = jule::Ref<_11054f670_RangeKind>::make(this, nullptr);

		this->_field_in_token = __param_in_token;
		this->_field_expr = __param_expr;
		this->_field_key_a = __param_key_a;
		this->_field_key_b = __param_key_b;
	}

	~_11054f670_RangeKind(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_RangeKind(void) { this->self = jule::Ref<_11054f670_RangeKind>::make(this, nullptr); }

	inline bool operator==(const _11054f670_RangeKind &_Src) const {
		return 
			this->_field_in_token == _Src._field_in_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _11054f670_RangeKind &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_Conditional {
	jule::Ref<_11054f670_Conditional> self{};

	jule::Ref<_11054f670_If> _field_head{jule::Ref<_11054f670_If>()};
	jule::Slice<jule::Ref<_11054f670_If>> _field_tail{jule::Slice<jule::Ref<_11054f670_If>>()};
	jule::Ref<_11054f670_Else> _field_default{jule::Ref<_11054f670_Else>()};


	_11054f670_Conditional(jule::Ref<_11054f670_If> __param_head, jule::Slice<jule::Ref<_11054f670_If>> __param_tail, jule::Ref<_11054f670_Else> __param_default) {
		this->self = jule::Ref<_11054f670_Conditional>::make(this, nullptr);

		this->_field_head = __param_head;
		this->_field_tail = __param_tail;
		this->_field_default = __param_default;
	}

	~_11054f670_Conditional(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_Conditional(void) { this->self = jule::Ref<_11054f670_Conditional>::make(this, nullptr); }

	inline bool operator==(const _11054f670_Conditional &_Src) const {
		return 
			this->_field_head == _Src._field_head &&
			this->_field_tail == _Src._field_tail &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _11054f670_Conditional &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_MatchCase {
	jule::Ref<_11054f670_MatchCase> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Bool _field_type_match{jule::Bool()};
	jule::Ref<_11054f670_Expr> _field_expr{jule::Ref<_11054f670_Expr>()};
	jule::Slice<jule::Ref<_11054f670_Case>> _field_cases{jule::Slice<jule::Ref<_11054f670_Case>>()};
	jule::Ref<_11054f670_Else> _field_default{jule::Ref<_11054f670_Else>()};


	_11054f670_MatchCase(_1106ec050_Token __param_token, jule::Bool __param_type_match, jule::Ref<_11054f670_Expr> __param_expr, jule::Slice<jule::Ref<_11054f670_Case>> __param_cases, jule::Ref<_11054f670_Else> __param_default) {
		this->self = jule::Ref<_11054f670_MatchCase>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_type_match = __param_type_match;
		this->_field_expr = __param_expr;
		this->_field_cases = __param_cases;
		this->_field_default = __param_default;
	}

	~_11054f670_MatchCase(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_MatchCase(void) { this->self = jule::Ref<_11054f670_MatchCase>::make(this, nullptr); }

	inline bool operator==(const _11054f670_MatchCase &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_expr == _Src._field_expr &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _11054f670_MatchCase &_Src) const { return !this->operator==(_Src); }
};


struct _1106f8b50_FileInfo {
	jule::Ref<_1106f8b50_FileInfo> self{};

	jule::Ref<_1104fada0_Ast> _field_ast{jule::Ref<_1104fada0_Ast>()};
	jule::Slice<_127e05da0_Log> _field_errors{jule::Slice<_127e05da0_Log>()};


	_1106f8b50_FileInfo(jule::Ref<_1104fada0_Ast> __param_ast, jule::Slice<_127e05da0_Log> __param_errors) {
		this->self = jule::Ref<_1106f8b50_FileInfo>::make(this, nullptr);

		this->_field_ast = __param_ast;
		this->_field_errors = __param_errors;
	}

	~_1106f8b50_FileInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1106f8b50_FileInfo(void) { this->self = jule::Ref<_1106f8b50_FileInfo>::make(this, nullptr); }

	inline bool operator==(const _1106f8b50_FileInfo &_Src) const {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _1106f8b50_FileInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1106f8b50_PackageInfo {
	jule::Ref<_1106f8b50_PackageInfo> self{};

	jule::Slice<jule::Ref<_1106f8b50_FileInfo>> _field_files{jule::Slice<jule::Ref<_1106f8b50_FileInfo>>()};


	_1106f8b50_PackageInfo(jule::Slice<jule::Ref<_1106f8b50_FileInfo>> __param_files) {
		this->self = jule::Ref<_1106f8b50_PackageInfo>::make(this, nullptr);

		this->_field_files = __param_files;
	}

	~_1106f8b50_PackageInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1106f8b50_PackageInfo(void) { this->self = jule::Ref<_1106f8b50_PackageInfo>::make(this, nullptr); }

	inline bool operator==(const _1106f8b50_PackageInfo &_Src) const {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _1106f8b50_PackageInfo &_Src) const { return !this->operator==(_Src); }
};


struct _110709a60_Stmt {
	jule::Ref<_110709a60_Stmt> self{};

	jule::Slice<_1106ec050_Token> _field_tokens{jule::Slice<_1106ec050_Token>()};
	jule::Bool _field_terminated{jule::Bool()};


	_110709a60_Stmt(jule::Slice<_1106ec050_Token> __param_tokens, jule::Bool __param_terminated) {
		this->self = jule::Ref<_110709a60_Stmt>::make(this, nullptr);

		this->_field_tokens = __param_tokens;
		this->_field_terminated = __param_terminated;
	}

	~_110709a60_Stmt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110709a60_Stmt(void) { this->self = jule::Ref<_110709a60_Stmt>::make(this, nullptr); }

	inline bool operator==(const _110709a60_Stmt &_Src) const {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_terminated == _Src._field_terminated;
	}

	inline bool operator!=(const _110709a60_Stmt &_Src) const { return !this->operator==(_Src); }
};


struct _110709a60_ScopeParser {
	jule::Ref<_110709a60_ScopeParser> self{};

	jule::Ref<_110754df0_Parser> _field_p{jule::Ref<_110754df0_Parser>()};
	jule::Ref<_11054f670_ScopeTree> _field_s{jule::Ref<_11054f670_ScopeTree>()};
	jule::Slice<jule::Ref<_110709a60_Stmt>> _field_stms{jule::Slice<jule::Ref<_110709a60_Stmt>>()};
	jule::Int _field_pos{jule::Int()};


	_110709a60_ScopeParser(jule::Ref<_110754df0_Parser> __param_p, jule::Ref<_11054f670_ScopeTree> __param_s, jule::Slice<jule::Ref<_110709a60_Stmt>> __param_stms, jule::Int __param_pos) {
		this->self = jule::Ref<_110709a60_ScopeParser>::make(this, nullptr);

		this->_field_p = __param_p;
		this->_field_s = __param_s;
		this->_field_stms = __param_stms;
		this->_field_pos = __param_pos;
	}

	~_110709a60_ScopeParser(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110709a60_ScopeParser(void) { this->self = jule::Ref<_110709a60_ScopeParser>::make(this, nullptr); }

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline jule::Bool _method_finished(void);


	inline jule::Bool _method_is_last_st(void);


	inline void _method_push_err(_1106ec050_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_insert_as_next(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_110709a60_Stmt> _method_next(void);


	inline jule::Ref<_11054f670_ScopeTree> _method_build_scope(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_var_st(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_ret_st(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_while_next_iter(jule::Ref<_110709a60_Stmt>);


	inline jule::Ref<_11054f670_WhileKind> _method_build_while_iter_kind(jule::Slice<_1106ec050_Token>);


	inline jule::Slice<jule::Slice<_1106ec050_Token>> _method_get_range_kind_keys_tokens(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_VarDecl> _method_build_range_kind_key(jule::Slice<_1106ec050_Token>);


	inline jule::Slice<jule::Ref<_11054f670_VarDecl>> _method_build_range_kind_keys(jule::Slice<jule::Slice<_1106ec050_Token>>);


	inline void _method_setup_range_kind_keys_plain(jule::Ref<_11054f670_RangeKind>,jule::Slice<_1106ec050_Token>);


	inline void _method_setup_range_kind_keys_explicit(jule::Ref<_11054f670_RangeKind>,jule::Slice<_1106ec050_Token>);


	inline void _method_setup_range_kind_keys(jule::Ref<_11054f670_RangeKind>,jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_RangeKind> _method_build_range_iter_kind(jule::Slice<_1106ec050_Token>,jule::Slice<_1106ec050_Token>,_1106ec050_Token);


	inline jule::Any _method_build_common_iter_kind(jule::Slice<_1106ec050_Token>,_1106ec050_Token);


	inline jule::Any _method_build_common_iter(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_buid_iter_st(jule::Ref<_110709a60_Stmt>);


	inline jule::Any _method_build_break_st(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_cont_st(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_If> _method_build_if(jule::Slice<_1106ec050_Token>&);


	inline jule::Ref<_11054f670_Else> _method_build_else(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_if_else_chain(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_comment_st(_1106ec050_Token);


	inline jule::Any _method_build_call_st(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_co_call_st(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_goto_st(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_fall_st(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_type_alias_st(jule::Slice<_1106ec050_Token>);


	inline void _method_push_case_expr(jule::Slice<_1106ec050_Token>,_1106ec050_Token,jule::Bool,jule::Slice<jule::Ref<_11054f670_Expr>>&);


	inline jule::Slice<jule::Ref<_11054f670_Expr>> _method_build_case_exprs(jule::Slice<_1106ec050_Token>&,jule::Bool);


	inline jule::Ref<_11054f670_ScopeTree> _method_build_case_scope(jule::Slice<_1106ec050_Token>&);


	inline std::tuple<jule::Ref<_11054f670_Case>,jule::Bool> _method_build_case(jule::Slice<_1106ec050_Token>&,jule::Bool);


	inline std::tuple<jule::Slice<jule::Ref<_11054f670_Case>>,jule::Ref<_11054f670_Else>> _method_build_cases(jule::Slice<_1106ec050_Token>,jule::Bool);


	inline jule::Ref<_11054f670_MatchCase> _method_build_match_case(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_ScopeTree> _method_build_scope_st(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_LabelSt> _method_build_label_st(jule::Slice<_1106ec050_Token>);


	inline std::tuple<jule::Any,jule::Bool> _method_build_id_st(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_110711f30_AssignInfo> _method_build_assign_info(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_AssignLeft> _method_build_assign_l(jule::Slice<_1106ec050_Token>);


	inline jule::Slice<jule::Ref<_11054f670_AssignLeft>> _method_build_assign_ls(jule::Slice<jule::Slice<_1106ec050_Token>>);


	inline std::tuple<jule::Ref<_11054f670_AssignSt>,jule::Bool> _method_build_plain_assign(jule::Slice<_1106ec050_Token>);


	inline std::tuple<jule::Ref<_11054f670_AssignSt>,jule::Bool> _method_build_decl_assign(jule::Slice<_1106ec050_Token>);


	inline std::tuple<jule::Ref<_11054f670_AssignSt>,jule::Bool> _method_build_assign_st(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_st(jule::Ref<_110709a60_Stmt>);


	inline void _method_build(jule::Slice<_1106ec050_Token>,jule::Ref<_11054f670_ScopeTree>);


	inline bool operator==(const _110709a60_ScopeParser &_Src) const {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_s == _Src._field_s &&
			this->_field_stms == _Src._field_stms &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _110709a60_ScopeParser &_Src) const { return !this->operator==(_Src); }
};


struct _11070bfb0_CallData {
	jule::Ref<_11070bfb0_CallData> self{};

	jule::Slice<_1106ec050_Token> _field_expr_tokens{jule::Slice<_1106ec050_Token>()};
	jule::Slice<_1106ec050_Token> _field_args_tokens{jule::Slice<_1106ec050_Token>()};
	jule::Slice<_1106ec050_Token> _field_generics_tokens{jule::Slice<_1106ec050_Token>()};


	_11070bfb0_CallData(jule::Slice<_1106ec050_Token> __param_expr_tokens, jule::Slice<_1106ec050_Token> __param_args_tokens, jule::Slice<_1106ec050_Token> __param_generics_tokens) {
		this->self = jule::Ref<_11070bfb0_CallData>::make(this, nullptr);

		this->_field_expr_tokens = __param_expr_tokens;
		this->_field_args_tokens = __param_args_tokens;
		this->_field_generics_tokens = __param_generics_tokens;
	}

	~_11070bfb0_CallData(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11070bfb0_CallData(void) { this->self = jule::Ref<_11070bfb0_CallData>::make(this, nullptr); }

	inline bool operator==(const _11070bfb0_CallData &_Src) const {
		return 
			this->_field_expr_tokens == _Src._field_expr_tokens &&
			this->_field_args_tokens == _Src._field_args_tokens &&
			this->_field_generics_tokens == _Src._field_generics_tokens;
	}

	inline bool operator!=(const _11070bfb0_CallData &_Src) const { return !this->operator==(_Src); }
};


struct _11070bfb0_Precedencer {
	jule::Ref<_11070bfb0_Precedencer> self{};

	jule::Slice<jule::Slice<jule::Any>> _field_pairs{jule::Slice<jule::Slice<jule::Any>>()};


	_11070bfb0_Precedencer(jule::Slice<jule::Slice<jule::Any>> __param_pairs) {
		this->self = jule::Ref<_11070bfb0_Precedencer>::make(this, nullptr);

		this->_field_pairs = __param_pairs;
	}

	~_11070bfb0_Precedencer(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11070bfb0_Precedencer(void) { this->self = jule::Ref<_11070bfb0_Precedencer>::make(this, nullptr); }

	inline void _method_set(jule::Int,jule::Any);


	inline jule::Any _method_get_lower(void);


	inline bool operator==(const _11070bfb0_Precedencer &_Src) const {
		return 
			this->_field_pairs == _Src._field_pairs;
	}

	inline bool operator!=(const _11070bfb0_Precedencer &_Src) const { return !this->operator==(_Src); }
};


struct _11070bfb0_ExprBuilder {
	jule::Ref<_11070bfb0_ExprBuilder> self{};

	jule::Ref<_110754df0_Parser> _field_p{jule::Ref<_110754df0_Parser>()};


	_11070bfb0_ExprBuilder(jule::Ref<_110754df0_Parser> __param_p) {
		this->self = jule::Ref<_11070bfb0_ExprBuilder>::make(this, nullptr);

		this->_field_p = __param_p;
	}

	~_11070bfb0_ExprBuilder(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11070bfb0_ExprBuilder(void) { this->self = jule::Ref<_11070bfb0_ExprBuilder>::make(this, nullptr); }

	inline void _method_push_err(_1106ec050_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ref<_11054f670_TupleExpr> _method_build_tuple(jule::Slice<jule::Slice<_1106ec050_Token>>);


	inline jule::Ref<_11054f670_LitExpr> _method_build_lit(_1106ec050_Token);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_primitive_type(_1106ec050_Token);


	inline jule::Any _method_build_single(_1106ec050_Token);


	inline jule::Ref<_11054f670_IdentExpr> _method_build_cpp_linked_ident(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_UnaryExpr> _method_build_unary(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_SubIdentExpr> _method_build_obj_sub_ident(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_NsSelectionExpr> _method_build_ns_sub_ident(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_type(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_sub_ident(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_VariadicExpr> _method_build_variadic(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_op_right(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_between_parentheses(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_CastExpr> _method_try_build_cast(jule::Slice<_1106ec050_Token>);


	inline void _method_push_arg(jule::Slice<jule::Ref<_11054f670_Expr>>&,jule::Slice<_1106ec050_Token>,_1106ec050_Token);


	inline jule::Slice<jule::Ref<_11054f670_Expr>> _method_build_args(jule::Slice<_1106ec050_Token>);


	inline jule::Slice<jule::Ref<_11054f670_TypeDecl>> _method_build_call_generics(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_FnCallExpr> _method_build_fn_call(_1106ec050_Token,jule::Ref<_11070bfb0_CallData>);


	inline jule::Any _method_build_parentheses_range(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_UnsafeExpr> _method_build_unsafe_expr(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_FnDecl> _method_build_anon_fn(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_unsafe(jule::Slice<_1106ec050_Token>);


	inline void _method_push_range_lit_part(jule::Slice<_1106ec050_Token>,_1106ec050_Token,jule::Slice<jule::Slice<_1106ec050_Token>>&);


	inline jule::Slice<jule::Slice<_1106ec050_Token>> _method_get_brace_range_lit_expr_parts(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_FieldExprPair> _method_build_field_expr_pair(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_struct_lit_expr(jule::Slice<_1106ec050_Token>);


	inline jule::Slice<jule::Any> _method_build_struct_lit_exprs(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_StructLit> _method_build_typed_struct_literal(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_brace_lit_part(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_BraceLit> _method_build_brace_lit(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_brace_range(jule::Slice<_1106ec050_Token>);


	inline jule::Slice<jule::Slice<_1106ec050_Token>> _method_get_enumerable_parts(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_SliceExpr> _method_build_slice(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_IndexingExpr> _method_build_indexing(jule::Slice<_1106ec050_Token>,jule::Slice<_1106ec050_Token>,_1106ec050_Token);


	inline jule::Ref<_11054f670_SlicingExpr> _method_build_slicing(jule::Slice<_1106ec050_Token>,jule::Slice<_1106ec050_Token>,jule::Int,_1106ec050_Token);


	inline jule::Any _method_build_bracket_range(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_data(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_BinopExpr> _method_build_binop(jule::Slice<_1106ec050_Token>,jule::Int);


	inline jule::Any _method_build(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_kind(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_Expr> _method_build_from_tokens(jule::Slice<_1106ec050_Token>);


	inline bool operator==(const _11070bfb0_ExprBuilder &_Src) const {
		return 
			this->_field_p == _Src._field_p;
	}

	inline bool operator!=(const _11070bfb0_ExprBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _110754df0_Parser {
	jule::Ref<_110754df0_Parser> self{};

	jule::Ref<_1104fada0_Ast> _field_ast{jule::Ref<_1104fada0_Ast>()};
	jule::Slice<jule::Ref<_11054f670_Directive>> _field_directives{jule::Slice<jule::Ref<_11054f670_Directive>>()};
	jule::Ref<_11054f670_CommentGroup> _field_comment_group{jule::Ref<_11054f670_CommentGroup>()};
	jule::Slice<_127e05da0_Log> _field_errors{jule::Slice<_127e05da0_Log>()};


	_110754df0_Parser(jule::Ref<_1104fada0_Ast> __param_ast, jule::Slice<jule::Ref<_11054f670_Directive>> __param_directives, jule::Ref<_11054f670_CommentGroup> __param_comment_group, jule::Slice<_127e05da0_Log> __param_errors) {
		this->self = jule::Ref<_110754df0_Parser>::make(this, nullptr);

		this->_field_ast = __param_ast;
		this->_field_directives = __param_directives;
		this->_field_comment_group = __param_comment_group;
		this->_field_errors = __param_errors;
	}

	~_110754df0_Parser(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110754df0_Parser(void) { this->self = jule::Ref<_110754df0_Parser>::make(this, nullptr); }

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline void _method_push_err(_1106ec050_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ref<_11054f670_Expr> _method_build_expr(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_Directive> _method_get_directive(jule::Ref<_11054f670_Comment>);


	inline void _method_push_directive(jule::Ref<_11054f670_Comment>);


	inline void _method_process_comment(jule::Ref<_11054f670_Comment>);


	inline jule::Ref<_11054f670_ScopeTree> _method_build_scope(jule::Slice<_1106ec050_Token>);


	inline std::tuple<jule::Ref<_11054f670_TypeDecl>,jule::Bool> _method___build_type(jule::Slice<_1106ec050_Token>,jule::Int*,jule::Bool);


	inline std::tuple<jule::Ref<_11054f670_TypeDecl>,jule::Bool> _method_build_type(jule::Slice<_1106ec050_Token>,jule::Int*,jule::Bool);


	inline jule::Ref<_11054f670_TypeAliasDecl> _method_build_type_alias_decl(jule::Slice<_1106ec050_Token>);


	inline void _method_build_var_type_and_expr(jule::Ref<_11054f670_VarDecl>,jule::Slice<_1106ec050_Token>);


	inline void _method_build_var_common(jule::Ref<_11054f670_VarDecl>,jule::Slice<_1106ec050_Token>);


	inline void _method_build_var_begin(jule::Ref<_11054f670_VarDecl>,jule::Ref<jule::Int>,jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_VarDecl> _method_build_var(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_GenericDecl> _method_build_generic(jule::Slice<_1106ec050_Token>);


	inline jule::Slice<jule::Ref<_11054f670_GenericDecl>> _method_build_generics(jule::Slice<_1106ec050_Token>,_1106ec050_Token);


	inline jule::Ref<_11054f670_ParamDecl> _method_build_self_param(jule::Slice<_1106ec050_Token>);


	inline void _method_param_type_begin(jule::Ref<_11054f670_ParamDecl>,jule::Int&,jule::Slice<_1106ec050_Token>);


	inline void _method_build_param_type(jule::Ref<_11054f670_ParamDecl>,jule::Slice<_1106ec050_Token>,jule::Bool);


	inline void _method_param_body_id(jule::Ref<_11054f670_ParamDecl>,_1106ec050_Token);


	inline void _method_build_param_body(jule::Ref<_11054f670_ParamDecl>,jule::Ref<jule::Int>,jule::Slice<_1106ec050_Token>,jule::Bool);


	inline jule::Ref<_11054f670_ParamDecl> _method_build_param(jule::Slice<_1106ec050_Token>,jule::Bool);


	inline void _method_check_params(jule::Slice<jule::Ref<_11054f670_ParamDecl>>);


	inline jule::Slice<jule::Ref<_11054f670_ParamDecl>> _method_build_params(jule::Slice<_1106ec050_Token>,jule::Bool,jule::Bool);


	inline std::tuple<jule::Ref<_11054f670_RetTypeDecl>,jule::Bool> _method_build_multi_ret_type(jule::Slice<_1106ec050_Token>,jule::Int&);


	inline std::tuple<jule::Ref<_11054f670_RetTypeDecl>,jule::Bool> _method_build_ret_type(jule::Slice<_1106ec050_Token>,jule::Int&);


	inline jule::Ref<_11054f670_FnDecl> _method_build_fn_prototype(jule::Slice<_1106ec050_Token>,jule::Int&,jule::Bool);


	inline jule::Ref<_11054f670_FnDecl> _method_build_fn(jule::Slice<_1106ec050_Token>,jule::Bool,jule::Bool);


	inline jule::Slice<_1106ec050_Token> _method_get_use_decl_selectors(jule::Slice<_1106ec050_Token>);


	inline void _method_build_cpp_use_decl(jule::Ref<_11054f670_UseDecl>,jule::Slice<_1106ec050_Token>);


	inline void _method_build_std_use_decl(jule::Ref<_11054f670_UseDecl>,jule::Slice<_1106ec050_Token>);


	inline void _method_build_ident_use_decl(jule::Ref<_11054f670_UseDecl>,jule::Slice<_1106ec050_Token>);


	inline void _method_parse_use_decl(jule::Ref<_11054f670_UseDecl>,jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_UseDecl> _method_build_use_decl(jule::Slice<_1106ec050_Token>,jule::Bool);


	inline jule::Ref<_11054f670_Expr> _method_build_enum_item_expr(jule::Ref<jule::Int>,jule::Slice<_1106ec050_Token>);


	inline jule::Slice<jule::Ref<_11054f670_EnumItemDecl>> _method_build_enum_items(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_EnumDecl> _method_build_enum_decl(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_FieldDecl> _method_build_field(jule::Slice<_1106ec050_Token>);


	inline jule::Slice<jule::Ref<_11054f670_FieldDecl>> _method_build_struct_decl_fields(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_StructDecl> _method_build_struct_decl(jule::Slice<_1106ec050_Token>);


	inline void _method_check_method_receiver(jule::Ref<_11054f670_FnDecl>);


	inline jule::Slice<jule::Ref<_11054f670_FnDecl>> _method_build_trait_methods(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_TraitDecl> _method_build_trait_decl(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_FnDecl> _method_build_cpp_link_fn(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_VarDecl> _method_build_cpp_link_var(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_StructDecl> _method_build_cpp_link_struct(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_TypeAliasDecl> _method_build_cpp_link_type_alias(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_UseDecl> _method_build_cpp_link_use(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_cpp_link(jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_FnDecl> _method_get_method(jule::Slice<_1106ec050_Token>);


	inline void _method_parse_impl_trait(jule::Ref<_11054f670_Impl>,jule::Slice<_1106ec050_Token>);


	inline void _method_parse_impl_struct(jule::Ref<_11054f670_Impl>,jule::Slice<_1106ec050_Token>);


	inline void _method_parse_impl_body(jule::Ref<_11054f670_Impl>,jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_Impl> _method_build_impl(jule::Slice<_1106ec050_Token>);


	inline jule::Any _method_build_node_data(jule::Slice<_1106ec050_Token>);


	inline void _method_check_comment_group(_11054f670_Node);


	inline void _method_check_directive(_11054f670_Node);


	inline void _method_apply_meta(_11054f670_Node,jule::Bool);


	inline void _method_check_use_decl(_11054f670_Node);


	inline std::tuple<jule::Bool,jule::Any> _method_build_general_scope_node_data(jule::Slice<_1106ec050_Token>);


	inline _11054f670_Node _method_parse_node(jule::Slice<_1106ec050_Token>);


	inline void _method_append_node(jule::Slice<_1106ec050_Token>);


	inline void _method_remove_range(jule::Int,jule::Str,jule::Slice<_1106ec050_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_wrong_order_close_err(_1106ec050_Token,jule::Slice<_1106ec050_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_range_close(_1106ec050_Token,jule::Str,jule::Slice<_1106ec050_Token>&,jule::Slice<jule::Int>&);


	inline void _method_check_ranges(jule::Slice<_1106ec050_Token>);


	inline void _method_parse(jule::Ref<_11054ec70_File>);


	inline bool operator==(const _110754df0_Parser &_Src) const {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_directives == _Src._field_directives &&
			this->_field_comment_group == _Src._field_comment_group &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _110754df0_Parser &_Src) const { return !this->operator==(_Src); }
};


struct _110a15a10_TypeBuilder {
	jule::Ref<_110a15a10_TypeBuilder> self{};

	jule::Ref<_110754df0_Parser> _field_p{jule::Ref<_110754df0_Parser>()};
	jule::Slice<_1106ec050_Token> _field_tokens{jule::Slice<_1106ec050_Token>()};
	jule::Int* _field_i{nullptr};
	jule::Bool _field_err{jule::Bool()};


	_110a15a10_TypeBuilder(jule::Ref<_110754df0_Parser> __param_p, jule::Slice<_1106ec050_Token> __param_tokens, jule::Int* __param_i, jule::Bool __param_err) {
		this->self = jule::Ref<_110a15a10_TypeBuilder>::make(this, nullptr);

		this->_field_p = __param_p;
		this->_field_tokens = __param_tokens;
		this->_field_i = __param_i;
		this->_field_err = __param_err;
	}

	~_110a15a10_TypeBuilder(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110a15a10_TypeBuilder(void) { this->self = jule::Ref<_110a15a10_TypeBuilder>::make(this, nullptr); }

	inline void _method_push_err(_1106ec050_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_prim(void);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_namespace(void);


	inline jule::Slice<jule::Ref<_11054f670_TypeDecl>> _method_build_generics(void);


	inline jule::Slice<jule::Slice<_1106ec050_Token>> _method_ident_generics(void);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_ident(void);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_cpp_link(void);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_fn(void);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_ptr(void);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_ref(void);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_op(void);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_slc(void);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_arr(void);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_map(jule::Int,jule::Slice<_1106ec050_Token>);


	inline jule::Ref<_11054f670_TypeDecl> _method_build_enumerable(void);


	inline jule::Ref<_11054f670_TypeDecl> _method_step(void);


	inline std::tuple<jule::Ref<_11054f670_TypeDecl>,jule::Bool> _method_build(void);


	inline bool operator==(const _110a15a10_TypeBuilder &_Src) const {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_tokens == _Src._field_tokens &&
			this->_field_i == _Src._field_i &&
			this->_field_err == _Src._field_err;
	}

	inline bool operator!=(const _110a15a10_TypeBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _1118cee40_Const {
	jule::Ref<_1118cee40_Const> self{};

	jule::Any _field_data{jule::Any()};


	_1118cee40_Const(jule::Any __param_data) {
		this->self = jule::Ref<_1118cee40_Const>::make(this, nullptr);

		this->_field_data = __param_data;
	}

	~_1118cee40_Const(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1118cee40_Const(void) { this->self = jule::Ref<_1118cee40_Const>::make(this, nullptr); }

	static inline jule::Ref<_1118cee40_Const> _static_method_new_i64(jule::I64);


	static inline jule::Ref<_1118cee40_Const> _static_method_new_u64(jule::U64);


	static inline jule::Ref<_1118cee40_Const> _static_method_new_bool(jule::Bool);


	static inline jule::Ref<_1118cee40_Const> _static_method_new_str(jule::Str);


	static inline jule::Ref<_1118cee40_Const> _static_method_new_f64(jule::F64);


	static inline jule::Ref<_1118cee40_Const> _static_method_new_nil(void);


	inline jule::I64 _method_read_i64(void);


	inline jule::U64 _method_read_u64(void);


	inline jule::Bool _method_read_bool(void);


	inline jule::Str _method_read_str(void);


	inline jule::F64 _method_read_f64(void);


	inline jule::I64 _method_as_i64(void);


	inline jule::U64 _method_as_u64(void);


	inline jule::F64 _method_as_f64(void);


	inline void _method_set_i64(jule::I64);


	inline void _method_set_u64(jule::U64);


	inline void _method_set_bool(jule::Bool);


	inline void _method_set_str(jule::Str);


	inline void _method_set_f64(jule::F64);


	inline void _method_set_nil(void);


	inline void _method_set_by_type(jule::F64,_1118cee40_Const);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_are_same_types(_1118cee40_Const);


	inline jule::Bool _method_and(_1118cee40_Const);


	inline jule::Bool _method_or(_1118cee40_Const);


	inline jule::Bool _method_eqs(_1118cee40_Const);


	inline jule::Bool _method_lt(_1118cee40_Const);


	inline jule::Bool _method_gt(_1118cee40_Const);


	inline jule::Bool _method_add(_1118cee40_Const);


	inline jule::Bool _method_sub(_1118cee40_Const);


	inline jule::Bool _method_mul(_1118cee40_Const);


	inline jule::Bool _method_div(_1118cee40_Const);


	inline jule::Bool _method_mod(_1118cee40_Const);


	inline jule::Bool _method_bitwise_and(_1118cee40_Const);


	inline jule::Bool _method_bitwise_or(_1118cee40_Const);


	inline jule::Bool _method_xor(_1118cee40_Const);


	inline jule::Bool _method_lshift(_1118cee40_Const);


	inline jule::Bool _method_rshift(_1118cee40_Const);


	inline bool operator==(const _1118cee40_Const &_Src) const {
		return 
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _1118cee40_Const &_Src) const { return !this->operator==(_Src); }
};


struct _1109372e0_FieldIns {
	jule::Ref<_1109372e0_FieldIns> self{};

	jule::Ref<_1109372e0_Field> _field_decl{jule::Ref<_1109372e0_Field>()};
	jule::Ref<_1116aff70_TypeKind> _field_kind{jule::Ref<_1116aff70_TypeKind>()};


	_1109372e0_FieldIns(jule::Ref<_1109372e0_Field> __param_decl, jule::Ref<_1116aff70_TypeKind> __param_kind) {
		this->self = jule::Ref<_1109372e0_FieldIns>::make(this, nullptr);

		this->_field_decl = __param_decl;
		this->_field_kind = __param_kind;
	}

	~_1109372e0_FieldIns(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1109372e0_FieldIns(void) { this->self = jule::Ref<_1109372e0_FieldIns>::make(this, nullptr); }

	inline bool operator==(const _1109372e0_FieldIns &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1109372e0_FieldIns &_Src) const { return !this->operator==(_Src); }
};


struct _1109372e0_StructIns: public _1116aff70_Kind {
	jule::Ref<_1109372e0_StructIns> self{};

	jule::Bool _field_checked{jule::Bool()};
	jule::Ref<_1109372e0_Struct> _field_decl{jule::Ref<_1109372e0_Struct>()};
	jule::Slice<jule::Ref<_1116aff70_TypeKind>> _field_generics{jule::Slice<jule::Ref<_1116aff70_TypeKind>>()};
	jule::Slice<jule::Ref<_1109372e0_FieldIns>> _field_fields{jule::Slice<jule::Ref<_1109372e0_FieldIns>>()};
	jule::Slice<jule::Ref<_11072eb20_Fn>> _field_methods{jule::Slice<jule::Ref<_11072eb20_Fn>>()};
	jule::Bool _field_has_mut{jule::Bool()};
	jule::Ref<_110d9ce90_ReferenceStack> _field_references{jule::Ref<_110d9ce90_ReferenceStack>()};


	_1109372e0_StructIns(jule::Bool __param_checked, jule::Ref<_1109372e0_Struct> __param_decl, jule::Slice<jule::Ref<_1116aff70_TypeKind>> __param_generics, jule::Slice<jule::Ref<_1109372e0_FieldIns>> __param_fields, jule::Slice<jule::Ref<_11072eb20_Fn>> __param_methods, jule::Bool __param_has_mut, jule::Ref<_110d9ce90_ReferenceStack> __param_references) {
		this->self = jule::Ref<_1109372e0_StructIns>::make(this, nullptr);

		this->_field_checked = __param_checked;
		this->_field_decl = __param_decl;
		this->_field_generics = __param_generics;
		this->_field_fields = __param_fields;
		this->_field_methods = __param_methods;
		this->_field_has_mut = __param_has_mut;
		this->_field_references = __param_references;
	}

	~_1109372e0_StructIns(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1109372e0_StructIns(void) { this->self = jule::Ref<_1109372e0_StructIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Ref<_11072eb20_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ref<_1109372e0_FieldIns> _method_find_field(jule::Str);


	inline bool operator==(const _1109372e0_StructIns &_Src) const {
		return 
			this->_field_checked == _Src._field_checked &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_has_mut == _Src._field_has_mut &&
			this->_field_references == _Src._field_references;
	}

	inline bool operator!=(const _1109372e0_StructIns &_Src) const { return !this->operator==(_Src); }
};


struct _11072eb20_RetType {
	jule::Ref<_11072eb20_RetType> self{};

	jule::Ref<_1116aff70_TypeSymbol> _field_kind{jule::Ref<_1116aff70_TypeSymbol>()};
	jule::Slice<_1106ec050_Token> _field_idents{jule::Slice<_1106ec050_Token>()};


	_11072eb20_RetType(jule::Ref<_1116aff70_TypeSymbol> __param_kind, jule::Slice<_1106ec050_Token> __param_idents) {
		this->self = jule::Ref<_11072eb20_RetType>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_idents = __param_idents;
	}

	~_11072eb20_RetType(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11072eb20_RetType(void) { this->self = jule::Ref<_11072eb20_RetType>::make(this, nullptr); }

	inline bool operator==(const _11072eb20_RetType &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _11072eb20_RetType &_Src) const { return !this->operator==(_Src); }
};


struct _11072eb20_ParamIns {
	jule::Ref<_11072eb20_ParamIns> self{};

	jule::Ref<_11072eb20_Param> _field_decl{jule::Ref<_11072eb20_Param>()};
	jule::Ref<_1116aff70_TypeKind> _field_kind{jule::Ref<_1116aff70_TypeKind>()};


	_11072eb20_ParamIns(jule::Ref<_11072eb20_Param> __param_decl, jule::Ref<_1116aff70_TypeKind> __param_kind) {
		this->self = jule::Ref<_11072eb20_ParamIns>::make(this, nullptr);

		this->_field_decl = __param_decl;
		this->_field_kind = __param_kind;
	}

	~_11072eb20_ParamIns(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11072eb20_ParamIns(void) { this->self = jule::Ref<_11072eb20_ParamIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline bool operator==(const _11072eb20_ParamIns &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _11072eb20_ParamIns &_Src) const { return !this->operator==(_Src); }
};


struct _11072eb20_FnIns: public _1116aff70_Kind {
	jule::Ref<_11072eb20_FnIns> self{};

	jule::Ref<_1109372e0_StructIns> _field_owner{jule::Ref<_1109372e0_StructIns>()};
	jule::Ref<_11072eb20_Fn> _field_decl{jule::Ref<_11072eb20_Fn>()};
	jule::Slice<jule::Ref<_1116aff70_TypeKind>> _field_generics{jule::Slice<jule::Ref<_1116aff70_TypeKind>>()};
	jule::Slice<jule::Ref<_11072eb20_ParamIns>> _field_params{jule::Slice<jule::Ref<_11072eb20_ParamIns>>()};
	jule::Ref<_1116aff70_TypeKind> _field_result{jule::Ref<_1116aff70_TypeKind>()};
	jule::Ref<_110af2660_Scope> _field_scope{jule::Ref<_110af2660_Scope>()};
	jule::Ref<_110d9ce90_ReferenceStack> _field_references{jule::Ref<_110d9ce90_ReferenceStack>()};
	jule::Ref<_110d9ce90_ReferenceStack> _field_refers{jule::Ref<_110d9ce90_ReferenceStack>()};
	jule::Fn<jule::Ref<_1112d7f10_Data>(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>)> _field_caller{jule::Fn<jule::Ref<_1112d7f10_Data>(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>)>()};
	jule::Bool _field_reloaded{jule::Bool()};
	jule::Bool _field_anon{jule::Bool()};


	_11072eb20_FnIns(jule::Ref<_1109372e0_StructIns> __param_owner, jule::Ref<_11072eb20_Fn> __param_decl, jule::Slice<jule::Ref<_1116aff70_TypeKind>> __param_generics, jule::Slice<jule::Ref<_11072eb20_ParamIns>> __param_params, jule::Ref<_1116aff70_TypeKind> __param_result, jule::Ref<_110af2660_Scope> __param_scope, jule::Ref<_110d9ce90_ReferenceStack> __param_references, jule::Ref<_110d9ce90_ReferenceStack> __param_refers, jule::Fn<jule::Ref<_1112d7f10_Data>(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>)> __param_caller, jule::Bool __param_reloaded, jule::Bool __param_anon) {
		this->self = jule::Ref<_11072eb20_FnIns>::make(this, nullptr);

		this->_field_owner = __param_owner;
		this->_field_decl = __param_decl;
		this->_field_generics = __param_generics;
		this->_field_params = __param_params;
		this->_field_result = __param_result;
		this->_field_scope = __param_scope;
		this->_field_references = __param_references;
		this->_field_refers = __param_refers;
		this->_field_caller = __param_caller;
		this->_field_reloaded = __param_reloaded;
		this->_field_anon = __param_anon;
	}

	~_11072eb20_FnIns(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11072eb20_FnIns(void) { this->self = jule::Ref<_11072eb20_FnIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Str _method_get_kind_str(jule::Bool);


	inline bool operator==(const _11072eb20_FnIns &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_params == _Src._field_params &&
			this->_field_result == _Src._field_result &&
			this->_field_scope == _Src._field_scope &&
			this->_field_references == _Src._field_references &&
			this->_field_refers == _Src._field_refers &&
			this->_field_caller == _Src._field_caller &&
			this->_field_reloaded == _Src._field_reloaded &&
			this->_field_anon == _Src._field_anon;
	}

	inline bool operator!=(const _11072eb20_FnIns &_Src) const { return !this->operator==(_Src); }
};


struct _110d9ce90_SymbolBuilder {
	jule::Ref<_110d9ce90_SymbolBuilder> self{};

	jule::Ref<_110d9ce90_SymbolBuilder> _field_owner{jule::Ref<_110d9ce90_SymbolBuilder>()};
	jule::Trait<_110e4edc0_Importer> _field_importer{jule::Trait<_110e4edc0_Importer>()};
	jule::Slice<_127e05da0_Log> _field_errors{jule::Slice<_127e05da0_Log>()};
	jule::Ref<_1104fada0_Ast> _field_ast{jule::Ref<_1104fada0_Ast>()};
	jule::Ref<_1111c15d0_SymbolTable> _field_table{jule::Ref<_1111c15d0_SymbolTable>()};


	_110d9ce90_SymbolBuilder(jule::Ref<_110d9ce90_SymbolBuilder> __param_owner, jule::Trait<_110e4edc0_Importer> __param_importer, jule::Slice<_127e05da0_Log> __param_errors, jule::Ref<_1104fada0_Ast> __param_ast, jule::Ref<_1111c15d0_SymbolTable> __param_table) {
		this->self = jule::Ref<_110d9ce90_SymbolBuilder>::make(this, nullptr);

		this->_field_owner = __param_owner;
		this->_field_importer = __param_importer;
		this->_field_errors = __param_errors;
		this->_field_ast = __param_ast;
		this->_field_table = __param_table;
	}

	~_110d9ce90_SymbolBuilder(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110d9ce90_SymbolBuilder(void) { this->self = jule::Ref<_110d9ce90_SymbolBuilder>::make(this, nullptr); }

	inline jule::Ref<_110d9ce90_SymbolBuilder> _method_get_root(void);


	inline void _method_push_err(_1106ec050_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_text(_1106ec050_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_cpp_use_decl_path(jule::Ref<_11054f670_UseDecl>);


	inline jule::Ref<_110e4edc0_ImportInfo> _method_build_cpp_header_import(jule::Ref<_11054f670_UseDecl>);


	inline jule::Ref<_110e4edc0_ImportInfo> _method_build_std_import(jule::Ref<_11054f670_UseDecl>);


	inline jule::Ref<_110e4edc0_ImportInfo> _method_build_ident_import(jule::Ref<_11054f670_UseDecl>);


	inline jule::Ref<_110e4edc0_ImportInfo> _method_build_import(jule::Ref<_11054f670_UseDecl>);


	inline jule::Bool _method_check_duplicate_use_decl(jule::Ref<_110e4edc0_ImportInfo>);


	inline void _method_impl_import_selections(jule::Ref<_110e4edc0_ImportInfo>,jule::Ref<_11054f670_UseDecl>);


	inline jule::Str _method_get_as_link_path(jule::Str);


	inline void _method_push_cycle_error(jule::Ref<_110d9ce90_SymbolBuilder>,jule::Str,jule::Str&);


	inline void _method_push_cross_cycle_error(jule::Ref<_110d9ce90_SymbolBuilder>,jule::Ref<_110e4edc0_ImportInfo>,_1106ec050_Token);


	inline jule::Bool _method_check_import_cycles(jule::Ref<_110e4edc0_ImportInfo>,jule::Ref<_11054f670_UseDecl>);


	inline jule::Bool _method_import_package(jule::Ref<_110e4edc0_ImportInfo>&,jule::Ref<_11054f670_UseDecl>);


	inline jule::Ref<_110e4edc0_ImportInfo> _method_import_use_decl(jule::Ref<_11054f670_UseDecl>);


	inline void _method_import_use_decls(void);


	inline void _method_append_decl(_11054f670_Node);


	inline void _method_append_decls(void);


	inline void _method_append_impls(void);


	inline void _method_push_directive_pass(jule::Ref<_11054f670_Directive>);


	inline void _method_append_top_directives(void);


	inline void _method_build(void);


	inline bool operator==(const _110d9ce90_SymbolBuilder &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_importer == _Src._field_importer &&
			this->_field_errors == _Src._field_errors &&
			this->_field_ast == _Src._field_ast &&
			this->_field_table == _Src._field_table;
	}

	inline bool operator!=(const _110d9ce90_SymbolBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_If {
	jule::Ref<_110af2660_If> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Ref<_110af2660_Scope> _field_scope{jule::Ref<_110af2660_Scope>()};


	_110af2660_If(jule::Any __param_expr, jule::Ref<_110af2660_Scope> __param_scope) {
		this->self = jule::Ref<_110af2660_If>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_scope = __param_scope;
	}

	~_110af2660_If(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_If(void) { this->self = jule::Ref<_110af2660_If>::make(this, nullptr); }

	inline bool operator==(const _110af2660_If &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _110af2660_If &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_Else {
	jule::Ref<_110af2660_Else> self{};

	jule::Ref<_110af2660_Scope> _field_scope{jule::Ref<_110af2660_Scope>()};


	_110af2660_Else(jule::Ref<_110af2660_Scope> __param_scope) {
		this->self = jule::Ref<_110af2660_Else>::make(this, nullptr);

		this->_field_scope = __param_scope;
	}

	~_110af2660_Else(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_Else(void) { this->self = jule::Ref<_110af2660_Else>::make(this, nullptr); }

	inline bool operator==(const _110af2660_Else &_Src) const {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _110af2660_Else &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_Conditional {
	jule::Ref<_110af2660_Conditional> self{};

	jule::Slice<jule::Ref<_110af2660_If>> _field_elifs{jule::Slice<jule::Ref<_110af2660_If>>()};
	jule::Ref<_110af2660_Else> _field_default{jule::Ref<_110af2660_Else>()};


	_110af2660_Conditional(jule::Slice<jule::Ref<_110af2660_If>> __param_elifs, jule::Ref<_110af2660_Else> __param_default) {
		this->self = jule::Ref<_110af2660_Conditional>::make(this, nullptr);

		this->_field_elifs = __param_elifs;
		this->_field_default = __param_default;
	}

	~_110af2660_Conditional(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_Conditional(void) { this->self = jule::Ref<_110af2660_Conditional>::make(this, nullptr); }

	inline bool operator==(const _110af2660_Conditional &_Src) const {
		return 
			this->_field_elifs == _Src._field_elifs &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _110af2660_Conditional &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_InfIter {
	jule::Ref<_110af2660_InfIter> self{};

	jule::Ref<_110af2660_Scope> _field_scope{jule::Ref<_110af2660_Scope>()};


	_110af2660_InfIter(jule::Ref<_110af2660_Scope> __param_scope) {
		this->self = jule::Ref<_110af2660_InfIter>::make(this, nullptr);

		this->_field_scope = __param_scope;
	}

	~_110af2660_InfIter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_InfIter(void) { this->self = jule::Ref<_110af2660_InfIter>::make(this, nullptr); }

	inline bool operator==(const _110af2660_InfIter &_Src) const {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _110af2660_InfIter &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_WhileIter {
	jule::Ref<_110af2660_WhileIter> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Any _field_next{jule::Any()};
	jule::Ref<_110af2660_Scope> _field_scope{jule::Ref<_110af2660_Scope>()};


	_110af2660_WhileIter(jule::Any __param_expr, jule::Any __param_next, jule::Ref<_110af2660_Scope> __param_scope) {
		this->self = jule::Ref<_110af2660_WhileIter>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_next = __param_next;
		this->_field_scope = __param_scope;
	}

	~_110af2660_WhileIter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_WhileIter(void) { this->self = jule::Ref<_110af2660_WhileIter>::make(this, nullptr); }

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _110af2660_WhileIter &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _110af2660_WhileIter &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_RangeIter {
	jule::Ref<_110af2660_RangeIter> self{};

	jule::Ref<_1112d7f10_Data> _field_expr{jule::Ref<_1112d7f10_Data>()};
	jule::Ref<_110af2660_Scope> _field_scope{jule::Ref<_110af2660_Scope>()};
	jule::Ref<_110e92c80_Var> _field_key_a{jule::Ref<_110e92c80_Var>()};
	jule::Ref<_110e92c80_Var> _field_key_b{jule::Ref<_110e92c80_Var>()};


	_110af2660_RangeIter(jule::Ref<_1112d7f10_Data> __param_expr, jule::Ref<_110af2660_Scope> __param_scope, jule::Ref<_110e92c80_Var> __param_key_a, jule::Ref<_110e92c80_Var> __param_key_b) {
		this->self = jule::Ref<_110af2660_RangeIter>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_scope = __param_scope;
		this->_field_key_a = __param_key_a;
		this->_field_key_b = __param_key_b;
	}

	~_110af2660_RangeIter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_RangeIter(void) { this->self = jule::Ref<_110af2660_RangeIter>::make(this, nullptr); }

	inline bool operator==(const _110af2660_RangeIter &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _110af2660_RangeIter &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_ContSt {
	jule::Ref<_110af2660_ContSt> self{};

	jule::Uintptr _field_it{jule::Uintptr()};


	_110af2660_ContSt(jule::Uintptr __param_it) {
		this->self = jule::Ref<_110af2660_ContSt>::make(this, nullptr);

		this->_field_it = __param_it;
	}

	~_110af2660_ContSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_ContSt(void) { this->self = jule::Ref<_110af2660_ContSt>::make(this, nullptr); }

	inline bool operator==(const _110af2660_ContSt &_Src) const {
		return 
			this->_field_it == _Src._field_it;
	}

	inline bool operator!=(const _110af2660_ContSt &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_BreakSt {
	jule::Ref<_110af2660_BreakSt> self{};

	jule::Uintptr _field_it{jule::Uintptr()};
	jule::Uintptr _field_mtch{jule::Uintptr()};


	_110af2660_BreakSt(jule::Uintptr __param_it, jule::Uintptr __param_mtch) {
		this->self = jule::Ref<_110af2660_BreakSt>::make(this, nullptr);

		this->_field_it = __param_it;
		this->_field_mtch = __param_mtch;
	}

	~_110af2660_BreakSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_BreakSt(void) { this->self = jule::Ref<_110af2660_BreakSt>::make(this, nullptr); }

	inline bool operator==(const _110af2660_BreakSt &_Src) const {
		return 
			this->_field_it == _Src._field_it &&
			this->_field_mtch == _Src._field_mtch;
	}

	inline bool operator!=(const _110af2660_BreakSt &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_Label {
	jule::Ref<_110af2660_Label> self{};

	jule::Str _field_ident{jule::Str()};


	_110af2660_Label(jule::Str __param_ident) {
		this->self = jule::Ref<_110af2660_Label>::make(this, nullptr);

		this->_field_ident = __param_ident;
	}

	~_110af2660_Label(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_Label(void) { this->self = jule::Ref<_110af2660_Label>::make(this, nullptr); }

	inline bool operator==(const _110af2660_Label &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _110af2660_Label &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_GotoSt {
	jule::Ref<_110af2660_GotoSt> self{};

	jule::Str _field_ident{jule::Str()};


	_110af2660_GotoSt(jule::Str __param_ident) {
		this->self = jule::Ref<_110af2660_GotoSt>::make(this, nullptr);

		this->_field_ident = __param_ident;
	}

	~_110af2660_GotoSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_GotoSt(void) { this->self = jule::Ref<_110af2660_GotoSt>::make(this, nullptr); }

	inline bool operator==(const _110af2660_GotoSt &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _110af2660_GotoSt &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_Postfix {
	jule::Ref<_110af2660_Postfix> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Str _field_op{jule::Str()};


	_110af2660_Postfix(jule::Any __param_expr, jule::Str __param_op) {
		this->self = jule::Ref<_110af2660_Postfix>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_op = __param_op;
	}

	~_110af2660_Postfix(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_Postfix(void) { this->self = jule::Ref<_110af2660_Postfix>::make(this, nullptr); }

	inline bool operator==(const _110af2660_Postfix &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _110af2660_Postfix &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_Assign {
	jule::Ref<_110af2660_Assign> self{};

	jule::Any _field_l{jule::Any()};
	jule::Any _field_r{jule::Any()};
	jule::Str _field_op{jule::Str()};


	_110af2660_Assign(jule::Any __param_l, jule::Any __param_r, jule::Str __param_op) {
		this->self = jule::Ref<_110af2660_Assign>::make(this, nullptr);

		this->_field_l = __param_l;
		this->_field_r = __param_r;
		this->_field_op = __param_op;
	}

	~_110af2660_Assign(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_Assign(void) { this->self = jule::Ref<_110af2660_Assign>::make(this, nullptr); }

	inline bool operator==(const _110af2660_Assign &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _110af2660_Assign &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_MultiAssign {
	jule::Ref<_110af2660_MultiAssign> self{};

	jule::Slice<jule::Any> _field_l{jule::Slice<jule::Any>()};
	jule::Any _field_r{jule::Any()};


	_110af2660_MultiAssign(jule::Slice<jule::Any> __param_l, jule::Any __param_r) {
		this->self = jule::Ref<_110af2660_MultiAssign>::make(this, nullptr);

		this->_field_l = __param_l;
		this->_field_r = __param_r;
	}

	~_110af2660_MultiAssign(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_MultiAssign(void) { this->self = jule::Ref<_110af2660_MultiAssign>::make(this, nullptr); }

	inline bool operator==(const _110af2660_MultiAssign &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r;
	}

	inline bool operator!=(const _110af2660_MultiAssign &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_Match {
	jule::Ref<_110af2660_Match> self{};

	jule::Ref<_1112d7f10_Data> _field_expr{jule::Ref<_1112d7f10_Data>()};
	jule::Bool _field_type_match{jule::Bool()};
	jule::Slice<jule::Ref<_110af2660_Case>> _field_cases{jule::Slice<jule::Ref<_110af2660_Case>>()};
	jule::Ref<_110af2660_Case> _field_default{jule::Ref<_110af2660_Case>()};


	_110af2660_Match(jule::Ref<_1112d7f10_Data> __param_expr, jule::Bool __param_type_match, jule::Slice<jule::Ref<_110af2660_Case>> __param_cases, jule::Ref<_110af2660_Case> __param_default) {
		this->self = jule::Ref<_110af2660_Match>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_type_match = __param_type_match;
		this->_field_cases = __param_cases;
		this->_field_default = __param_default;
	}

	~_110af2660_Match(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_Match(void) { this->self = jule::Ref<_110af2660_Match>::make(this, nullptr); }

	inline bool operator==(const _110af2660_Match &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _110af2660_Match &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_Case {
	jule::Ref<_110af2660_Case> self{};

	jule::Ref<_110af2660_Match> _field_owner{jule::Ref<_110af2660_Match>()};
	jule::Ref<_110af2660_Scope> _field_scope{jule::Ref<_110af2660_Scope>()};
	jule::Slice<jule::Any> _field_exprs{jule::Slice<jule::Any>()};
	jule::Ref<_110af2660_Case> _field_next{jule::Ref<_110af2660_Case>()};


	_110af2660_Case(jule::Ref<_110af2660_Match> __param_owner, jule::Ref<_110af2660_Scope> __param_scope, jule::Slice<jule::Any> __param_exprs, jule::Ref<_110af2660_Case> __param_next) {
		this->self = jule::Ref<_110af2660_Case>::make(this, nullptr);

		this->_field_owner = __param_owner;
		this->_field_scope = __param_scope;
		this->_field_exprs = __param_exprs;
		this->_field_next = __param_next;
	}

	~_110af2660_Case(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_Case(void) { this->self = jule::Ref<_110af2660_Case>::make(this, nullptr); }

	inline jule::Bool _method_is_default(void);


	inline bool operator==(const _110af2660_Case &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_next == _Src._field_next;
	}

	inline bool operator!=(const _110af2660_Case &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_FallSt {
	jule::Ref<_110af2660_FallSt> self{};

	jule::Uintptr _field_dest_case{jule::Uintptr()};


	_110af2660_FallSt(jule::Uintptr __param_dest_case) {
		this->self = jule::Ref<_110af2660_FallSt>::make(this, nullptr);

		this->_field_dest_case = __param_dest_case;
	}

	~_110af2660_FallSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_FallSt(void) { this->self = jule::Ref<_110af2660_FallSt>::make(this, nullptr); }

	inline bool operator==(const _110af2660_FallSt &_Src) const {
		return 
			this->_field_dest_case == _Src._field_dest_case;
	}

	inline bool operator!=(const _110af2660_FallSt &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_RetSt {
	jule::Ref<_110af2660_RetSt> self{};

	jule::Slice<jule::Ref<_110e92c80_Var>> _field_vars{jule::Slice<jule::Ref<_110e92c80_Var>>()};
	jule::Any _field_expr{jule::Any()};


	_110af2660_RetSt(jule::Slice<jule::Ref<_110e92c80_Var>> __param_vars, jule::Any __param_expr) {
		this->self = jule::Ref<_110af2660_RetSt>::make(this, nullptr);

		this->_field_vars = __param_vars;
		this->_field_expr = __param_expr;
	}

	~_110af2660_RetSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_RetSt(void) { this->self = jule::Ref<_110af2660_RetSt>::make(this, nullptr); }

	inline bool operator==(const _110af2660_RetSt &_Src) const {
		return 
			this->_field_vars == _Src._field_vars &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _110af2660_RetSt &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_Recover {
	jule::Ref<_110af2660_Recover> self{};

	jule::Ref<_11072eb20_FnIns> _field_handler{jule::Ref<_11072eb20_FnIns>()};
	jule::Any _field_handler_expr{jule::Any()};
	jule::Ref<_110af2660_Scope> _field_scope{jule::Ref<_110af2660_Scope>()};
	jule::Ref<_11072eb20_FnIns> _field_scope_owner{jule::Ref<_11072eb20_FnIns>()};


	_110af2660_Recover(jule::Ref<_11072eb20_FnIns> __param_handler, jule::Any __param_handler_expr, jule::Ref<_110af2660_Scope> __param_scope, jule::Ref<_11072eb20_FnIns> __param_scope_owner) {
		this->self = jule::Ref<_110af2660_Recover>::make(this, nullptr);

		this->_field_handler = __param_handler;
		this->_field_handler_expr = __param_handler_expr;
		this->_field_scope = __param_scope;
		this->_field_scope_owner = __param_scope_owner;
	}

	~_110af2660_Recover(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_Recover(void) { this->self = jule::Ref<_110af2660_Recover>::make(this, nullptr); }

	inline bool operator==(const _110af2660_Recover &_Src) const {
		return 
			this->_field_handler == _Src._field_handler &&
			this->_field_handler_expr == _Src._field_handler_expr &&
			this->_field_scope == _Src._field_scope &&
			this->_field_scope_owner == _Src._field_scope_owner;
	}

	inline bool operator!=(const _110af2660_Recover &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_ScopeGoto {
	jule::Ref<_110af2660_ScopeGoto> self{};

	jule::Ref<_11054f670_GotoSt> _field_gt{jule::Ref<_11054f670_GotoSt>()};
	jule::Ref<_110af2660_ScopeChecker> _field_scope{jule::Ref<_110af2660_ScopeChecker>()};
	jule::Int _field_pos{jule::Int()};


	_110af2660_ScopeGoto(jule::Ref<_11054f670_GotoSt> __param_gt, jule::Ref<_110af2660_ScopeChecker> __param_scope, jule::Int __param_pos) {
		this->self = jule::Ref<_110af2660_ScopeGoto>::make(this, nullptr);

		this->_field_gt = __param_gt;
		this->_field_scope = __param_scope;
		this->_field_pos = __param_pos;
	}

	~_110af2660_ScopeGoto(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_ScopeGoto(void) { this->self = jule::Ref<_110af2660_ScopeGoto>::make(this, nullptr); }

	inline bool operator==(const _110af2660_ScopeGoto &_Src) const {
		return 
			this->_field_gt == _Src._field_gt &&
			this->_field_scope == _Src._field_scope &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _110af2660_ScopeGoto &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_ScopeChecker: public _111732860_Lookup {
	jule::Ref<_110af2660_ScopeChecker> self{};

	jule::Ref<_110e92bc0_Sema> _field_s{jule::Ref<_110e92bc0_Sema>()};
	jule::Ref<_11072eb20_FnIns> _field_owner{jule::Ref<_11072eb20_FnIns>()};
	jule::Ref<_110af2660_ScopeChecker> _field_parent{jule::Ref<_110af2660_ScopeChecker>()};
	jule::Int _field_child_index{jule::Int()};
	jule::Ref<_1111c15d0_SymbolTable> _field_table{jule::Ref<_1111c15d0_SymbolTable>()};
	jule::Ref<_110af2660_Scope> _field_scope{jule::Ref<_110af2660_Scope>()};
	jule::Ref<_11054f670_ScopeTree> _field_tree{jule::Ref<_11054f670_ScopeTree>()};
	jule::Uintptr _field_it{jule::Uintptr()};
	jule::Uintptr _field_cse{jule::Uintptr()};
	jule::Ref<jule::Slice<jule::Ref<_110af2660_ScopeLabel>>> _field_labels{jule::Ref<jule::Slice<jule::Ref<_110af2660_ScopeLabel>>>()};
	jule::Ref<jule::Slice<jule::Ref<_110af2660_ScopeGoto>>> _field_gotos{jule::Ref<jule::Slice<jule::Ref<_110af2660_ScopeGoto>>>()};
	jule::Int _field_i{jule::Int()};


	_110af2660_ScopeChecker(jule::Ref<_110e92bc0_Sema> __param_s, jule::Ref<_11072eb20_FnIns> __param_owner, jule::Ref<_110af2660_ScopeChecker> __param_parent, jule::Int __param_child_index, jule::Ref<_1111c15d0_SymbolTable> __param_table, jule::Ref<_110af2660_Scope> __param_scope, jule::Ref<_11054f670_ScopeTree> __param_tree, jule::Uintptr __param_it, jule::Uintptr __param_cse, jule::Ref<jule::Slice<jule::Ref<_110af2660_ScopeLabel>>> __param_labels, jule::Ref<jule::Slice<jule::Ref<_110af2660_ScopeGoto>>> __param_gotos, jule::Int __param_i) {
		this->self = jule::Ref<_110af2660_ScopeChecker>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_owner = __param_owner;
		this->_field_parent = __param_parent;
		this->_field_child_index = __param_child_index;
		this->_field_table = __param_table;
		this->_field_scope = __param_scope;
		this->_field_tree = __param_tree;
		this->_field_it = __param_it;
		this->_field_cse = __param_cse;
		this->_field_labels = __param_labels;
		this->_field_gotos = __param_gotos;
		this->_field_i = __param_i;
	}

	~_110af2660_ScopeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_ScopeChecker(void) { this->self = jule::Ref<_110af2660_ScopeChecker>::make(this, nullptr); }

	inline jule::Ref<_110e4edc0_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_110e4edc0_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)>);


	inline jule::Ref<_110e92c80_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_1116aff70_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_1109372e0_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_11072eb20_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_110e3f160_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_110e453c0_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_root(void);


	inline jule::Ref<_110af2660_ScopeChecker> _method_get_root(void);


	inline jule::Ref<_110af2660_Label> _method_find_label(jule::Str);


	inline jule::Ref<_110af2660_ScopeLabel> _method_find_label_scope(jule::Str);


	inline jule::Ref<_110af2660_ScopeLabel> _method_find_label_all(jule::Str);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str);


	inline void _method_check_var_decl(jule::Ref<_11054f670_VarDecl>);


	inline void _method_check_type_alias_decl(jule::Ref<_11054f670_TypeAliasDecl>);


	inline jule::Ref<_110af2660_Scope> _method_get_child(void);


	inline void _method_check_child_ssc(jule::Ref<_11054f670_ScopeTree>,jule::Ref<_110af2660_Scope>,jule::Ref<_110af2660_ScopeChecker>);


	inline jule::Ref<_110af2660_Scope> _method_check_child_sc(jule::Ref<_11054f670_ScopeTree>,jule::Ref<_110af2660_ScopeChecker>);


	inline jule::Ref<_110af2660_Scope> _method_check_child(jule::Ref<_11054f670_ScopeTree>);


	inline void _method_check_anon_scope(jule::Ref<_11054f670_ScopeTree>);


	inline jule::Bool _method_try_call_recover(jule::Ref<_1112d7f10_Data>);


	inline void _method_check_expr(jule::Ref<_11054f670_Expr>);


	inline jule::Ref<_110af2660_If> _method_check_if(jule::Ref<_11054f670_If>);


	inline jule::Ref<_110af2660_Else> _method_check_else(jule::Ref<_11054f670_Else>);


	inline void _method_check_conditional(jule::Ref<_11054f670_Conditional>);


	inline jule::Ref<_110af2660_Scope> _method_check_iter_scope_sc(jule::Uintptr,jule::Ref<_11054f670_ScopeTree>,jule::Ref<_110af2660_ScopeChecker>);


	inline jule::Ref<_110af2660_Scope> _method_check_iter_scope(jule::Uintptr,jule::Ref<_11054f670_ScopeTree>);


	inline void _method_check_inf_iter(jule::Ref<_11054f670_Iter>);


	inline void _method_check_while_iter(jule::Ref<_11054f670_Iter>);


	inline void _method_check_range_iter(jule::Ref<_11054f670_Iter>);


	inline void _method_check_iter(jule::Ref<_11054f670_Iter>);


	inline jule::Bool _method_check_valid_cont_label(jule::Uintptr);


	inline jule::Bool _method_check_valid_break_label(jule::Uintptr);


	inline jule::Ref<_110af2660_ContSt> _method_check_cont_valid_scope(jule::Ref<_11054f670_ContSt>);


	inline void _method_check_cont(jule::Ref<_11054f670_ContSt>);


	inline void _method_check_label(jule::Ref<_11054f670_LabelSt>);


	inline void _method_push_goto(jule::Ref<_11054f670_GotoSt>);


	inline void _method_check_postfix(jule::Ref<_11054f670_AssignSt>);


	inline jule::Bool _method_is_new_assign_ident(jule::Str);


	inline void _method_check_single_assign(jule::Ref<_11054f670_AssignSt>);


	inline void _method___process_end_part_of_multi_assign(jule::Ref<_110af2660_MultiAssign>,jule::Ref<_11054f670_AssignSt>,jule::Ref<_11054f670_AssignLeft>,jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>);


	inline void _method_check_ret_multi_assign(jule::Ref<_11054f670_AssignSt>);


	inline void _method_check_multi_assign(jule::Ref<_11054f670_AssignSt>);


	inline void _method_check_assign_st(jule::Ref<_11054f670_AssignSt>);


	inline jule::Ref<_110af2660_Scope> _method_check_case_scope(jule::Ref<_110af2660_Case>,jule::Ref<_11054f670_ScopeTree>);


	inline jule::Ref<_110af2660_Case> _method_check_case(jule::Ref<_110af2660_Match>,jule::Int,jule::Ref<_11054f670_Case>,jule::Ref<_1112d7f10_Data>);


	inline void _method_check_cases(jule::Ref<_11054f670_MatchCase>,jule::Ref<_110af2660_Match>,jule::Ref<_1112d7f10_Data>);


	inline jule::Ref<_110af2660_Case> _method_check_default(jule::Ref<_110af2660_Match>,jule::Ref<_11054f670_Else>);


	inline void _method_check_type_match(jule::Ref<_11054f670_MatchCase>);


	inline void _method_check_common_match(jule::Ref<_11054f670_MatchCase>);


	inline void _method_check_match(jule::Ref<_11054f670_MatchCase>);


	inline void _method_check_fall(jule::Ref<_11054f670_FallSt>);


	inline jule::Ref<_110af2660_BreakSt> _method_check_break_with_label(jule::Ref<_11054f670_BreakSt>);


	inline jule::Ref<_110af2660_BreakSt> _method_check_plain_break(jule::Ref<_11054f670_BreakSt>);


	inline void _method_check_break(jule::Ref<_11054f670_BreakSt>);


	inline void _method_check_ret(jule::Ref<_11054f670_RetSt>);


	inline void _method_check_node(jule::Any);


	inline void _method_check_tree(void);


	inline void _method_check_same_scope_goto(jule::Ref<_110af2660_ScopeGoto>,jule::Ref<_110af2660_ScopeLabel>);


	inline jule::Bool _method_check_label_parents(jule::Ref<_110af2660_ScopeGoto>,jule::Ref<_110af2660_ScopeLabel>);


	inline void _method_check_goto_scope(jule::Ref<_110af2660_ScopeGoto>,jule::Ref<_110af2660_ScopeLabel>);


	inline void _method_check_diff_scope_goto(jule::Ref<_110af2660_ScopeGoto>,jule::Ref<_110af2660_ScopeLabel>);


	inline void _method_check_goto(jule::Ref<_110af2660_ScopeGoto>,jule::Ref<_110af2660_ScopeLabel>);


	inline void _method_check_gotos(void);


	inline void _method_check_labels(void);


	inline void _method_check_vars(void);


	inline void _method_check_aliases(void);


	inline void _method_check(jule::Ref<_11054f670_ScopeTree>,jule::Ref<_110af2660_Scope>);


	inline jule::Ref<_110af2660_ScopeChecker> _method_new_child_checker(void);


	inline bool operator==(const _110af2660_ScopeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_owner == _Src._field_owner &&
			this->_field_parent == _Src._field_parent &&
			this->_field_child_index == _Src._field_child_index &&
			this->_field_table == _Src._field_table &&
			this->_field_scope == _Src._field_scope &&
			this->_field_tree == _Src._field_tree &&
			this->_field_it == _Src._field_it &&
			this->_field_cse == _Src._field_cse &&
			this->_field_labels == _Src._field_labels &&
			this->_field_gotos == _Src._field_gotos &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _110af2660_ScopeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_BinopExprModel {
	jule::Ref<_110e4e8a0_BinopExprModel> self{};

	jule::Any _field_left{jule::Any()};
	jule::Any _field_right{jule::Any()};
	jule::Str _field_op{jule::Str()};


	_110e4e8a0_BinopExprModel(jule::Any __param_left, jule::Any __param_right, jule::Str __param_op) {
		this->self = jule::Ref<_110e4e8a0_BinopExprModel>::make(this, nullptr);

		this->_field_left = __param_left;
		this->_field_right = __param_right;
		this->_field_op = __param_op;
	}

	~_110e4e8a0_BinopExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_BinopExprModel(void) { this->self = jule::Ref<_110e4e8a0_BinopExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_BinopExprModel &_Src) const {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _110e4e8a0_BinopExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_UnaryExprModel {
	jule::Ref<_110e4e8a0_UnaryExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Str _field_op{jule::Str()};


	_110e4e8a0_UnaryExprModel(jule::Any __param_expr, jule::Str __param_op) {
		this->self = jule::Ref<_110e4e8a0_UnaryExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_op = __param_op;
	}

	~_110e4e8a0_UnaryExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_UnaryExprModel(void) { this->self = jule::Ref<_110e4e8a0_UnaryExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_UnaryExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _110e4e8a0_UnaryExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_GetRefPtrExprModel {
	jule::Ref<_110e4e8a0_GetRefPtrExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_110e4e8a0_GetRefPtrExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_110e4e8a0_GetRefPtrExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_110e4e8a0_GetRefPtrExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_GetRefPtrExprModel(void) { this->self = jule::Ref<_110e4e8a0_GetRefPtrExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_GetRefPtrExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _110e4e8a0_GetRefPtrExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_StructArgExprModel {
	jule::Ref<_110e4e8a0_StructArgExprModel> self{};

	jule::Ref<_1109372e0_FieldIns> _field_field{jule::Ref<_1109372e0_FieldIns>()};
	jule::Any _field_expr{jule::Any()};


	_110e4e8a0_StructArgExprModel(jule::Ref<_1109372e0_FieldIns> __param_field, jule::Any __param_expr) {
		this->self = jule::Ref<_110e4e8a0_StructArgExprModel>::make(this, nullptr);

		this->_field_field = __param_field;
		this->_field_expr = __param_expr;
	}

	~_110e4e8a0_StructArgExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_StructArgExprModel(void) { this->self = jule::Ref<_110e4e8a0_StructArgExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_StructArgExprModel &_Src) const {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _110e4e8a0_StructArgExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_StructLitExprModel {
	jule::Ref<_110e4e8a0_StructLitExprModel> self{};

	jule::Ref<_1109372e0_StructIns> _field_strct{jule::Ref<_1109372e0_StructIns>()};
	jule::Slice<jule::Ref<_110e4e8a0_StructArgExprModel>> _field_args{jule::Slice<jule::Ref<_110e4e8a0_StructArgExprModel>>()};


	_110e4e8a0_StructLitExprModel(jule::Ref<_1109372e0_StructIns> __param_strct, jule::Slice<jule::Ref<_110e4e8a0_StructArgExprModel>> __param_args) {
		this->self = jule::Ref<_110e4e8a0_StructLitExprModel>::make(this, nullptr);

		this->_field_strct = __param_strct;
		this->_field_args = __param_args;
	}

	~_110e4e8a0_StructLitExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_StructLitExprModel(void) { this->self = jule::Ref<_110e4e8a0_StructLitExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_StructLitExprModel &_Src) const {
		return 
			this->_field_strct == _Src._field_strct &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _110e4e8a0_StructLitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_AllocStructLitExprModel {
	jule::Ref<_110e4e8a0_AllocStructLitExprModel> self{};

	jule::Ref<_110e4e8a0_StructLitExprModel> _field_lit{jule::Ref<_110e4e8a0_StructLitExprModel>()};


	_110e4e8a0_AllocStructLitExprModel(jule::Ref<_110e4e8a0_StructLitExprModel> __param_lit) {
		this->self = jule::Ref<_110e4e8a0_AllocStructLitExprModel>::make(this, nullptr);

		this->_field_lit = __param_lit;
	}

	~_110e4e8a0_AllocStructLitExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_AllocStructLitExprModel(void) { this->self = jule::Ref<_110e4e8a0_AllocStructLitExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_AllocStructLitExprModel &_Src) const {
		return 
			this->_field_lit == _Src._field_lit;
	}

	inline bool operator!=(const _110e4e8a0_AllocStructLitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_CastingExprModel {
	jule::Ref<_110e4e8a0_CastingExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Ref<_1116aff70_TypeKind> _field_kind{jule::Ref<_1116aff70_TypeKind>()};
	jule::Ref<_1116aff70_TypeKind> _field_expr_kind{jule::Ref<_1116aff70_TypeKind>()};


	_110e4e8a0_CastingExprModel(jule::Any __param_expr, jule::Ref<_1116aff70_TypeKind> __param_kind, jule::Ref<_1116aff70_TypeKind> __param_expr_kind) {
		this->self = jule::Ref<_110e4e8a0_CastingExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_kind = __param_kind;
		this->_field_expr_kind = __param_expr_kind;
	}

	~_110e4e8a0_CastingExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_CastingExprModel(void) { this->self = jule::Ref<_110e4e8a0_CastingExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_CastingExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr_kind == _Src._field_expr_kind;
	}

	inline bool operator!=(const _110e4e8a0_CastingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_FnCallExprModel {
	jule::Ref<_110e4e8a0_FnCallExprModel> self{};

	jule::Ref<_11072eb20_FnIns> _field_func{jule::Ref<_11072eb20_FnIns>()};
	jule::Bool _field_is_co{jule::Bool()};
	jule::Any _field_expr{jule::Any()};
	jule::Slice<jule::Any> _field_args{jule::Slice<jule::Any>()};


	_110e4e8a0_FnCallExprModel(jule::Ref<_11072eb20_FnIns> __param_func, jule::Bool __param_is_co, jule::Any __param_expr, jule::Slice<jule::Any> __param_args) {
		this->self = jule::Ref<_110e4e8a0_FnCallExprModel>::make(this, nullptr);

		this->_field_func = __param_func;
		this->_field_is_co = __param_is_co;
		this->_field_expr = __param_expr;
		this->_field_args = __param_args;
	}

	~_110e4e8a0_FnCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_FnCallExprModel(void) { this->self = jule::Ref<_110e4e8a0_FnCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_FnCallExprModel &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_is_co == _Src._field_is_co &&
			this->_field_expr == _Src._field_expr &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _110e4e8a0_FnCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_SliceExprModel {
	jule::Ref<_110e4e8a0_SliceExprModel> self{};

	jule::Ref<_1116aff70_TypeKind> _field_elem_kind{jule::Ref<_1116aff70_TypeKind>()};
	jule::Slice<jule::Any> _field_elems{jule::Slice<jule::Any>()};


	_110e4e8a0_SliceExprModel(jule::Ref<_1116aff70_TypeKind> __param_elem_kind, jule::Slice<jule::Any> __param_elems) {
		this->self = jule::Ref<_110e4e8a0_SliceExprModel>::make(this, nullptr);

		this->_field_elem_kind = __param_elem_kind;
		this->_field_elems = __param_elems;
	}

	~_110e4e8a0_SliceExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_SliceExprModel(void) { this->self = jule::Ref<_110e4e8a0_SliceExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_SliceExprModel &_Src) const {
		return 
			this->_field_elem_kind == _Src._field_elem_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _110e4e8a0_SliceExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_IndexigExprModel {
	jule::Ref<_110e4e8a0_IndexigExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Any _field_index{jule::Any()};


	_110e4e8a0_IndexigExprModel(jule::Any __param_expr, jule::Any __param_index) {
		this->self = jule::Ref<_110e4e8a0_IndexigExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_index = __param_index;
	}

	~_110e4e8a0_IndexigExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_IndexigExprModel(void) { this->self = jule::Ref<_110e4e8a0_IndexigExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_IndexigExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _110e4e8a0_IndexigExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_AnonFnExprModel {
	jule::Ref<_110e4e8a0_AnonFnExprModel> self{};

	jule::Ref<_11072eb20_FnIns> _field_func{jule::Ref<_11072eb20_FnIns>()};
	jule::Bool _field_global{jule::Bool()};


	_110e4e8a0_AnonFnExprModel(jule::Ref<_11072eb20_FnIns> __param_func, jule::Bool __param_global) {
		this->self = jule::Ref<_110e4e8a0_AnonFnExprModel>::make(this, nullptr);

		this->_field_func = __param_func;
		this->_field_global = __param_global;
	}

	~_110e4e8a0_AnonFnExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_AnonFnExprModel(void) { this->self = jule::Ref<_110e4e8a0_AnonFnExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_AnonFnExprModel &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_global == _Src._field_global;
	}

	inline bool operator!=(const _110e4e8a0_AnonFnExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_KeyValPairExprModel {
	jule::Ref<_110e4e8a0_KeyValPairExprModel> self{};

	jule::Any _field_key{jule::Any()};
	jule::Any _field_val{jule::Any()};


	_110e4e8a0_KeyValPairExprModel(jule::Any __param_key, jule::Any __param_val) {
		this->self = jule::Ref<_110e4e8a0_KeyValPairExprModel>::make(this, nullptr);

		this->_field_key = __param_key;
		this->_field_val = __param_val;
	}

	~_110e4e8a0_KeyValPairExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_KeyValPairExprModel(void) { this->self = jule::Ref<_110e4e8a0_KeyValPairExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_KeyValPairExprModel &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _110e4e8a0_KeyValPairExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_MapExprModel {
	jule::Ref<_110e4e8a0_MapExprModel> self{};

	jule::Ref<_1116aff70_TypeKind> _field_key_kind{jule::Ref<_1116aff70_TypeKind>()};
	jule::Ref<_1116aff70_TypeKind> _field_val_kind{jule::Ref<_1116aff70_TypeKind>()};
	jule::Slice<jule::Ref<_110e4e8a0_KeyValPairExprModel>> _field_entries{jule::Slice<jule::Ref<_110e4e8a0_KeyValPairExprModel>>()};


	_110e4e8a0_MapExprModel(jule::Ref<_1116aff70_TypeKind> __param_key_kind, jule::Ref<_1116aff70_TypeKind> __param_val_kind, jule::Slice<jule::Ref<_110e4e8a0_KeyValPairExprModel>> __param_entries) {
		this->self = jule::Ref<_110e4e8a0_MapExprModel>::make(this, nullptr);

		this->_field_key_kind = __param_key_kind;
		this->_field_val_kind = __param_val_kind;
		this->_field_entries = __param_entries;
	}

	~_110e4e8a0_MapExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_MapExprModel(void) { this->self = jule::Ref<_110e4e8a0_MapExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_MapExprModel &_Src) const {
		return 
			this->_field_key_kind == _Src._field_key_kind &&
			this->_field_val_kind == _Src._field_val_kind &&
			this->_field_entries == _Src._field_entries;
	}

	inline bool operator!=(const _110e4e8a0_MapExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_SlicingExprModel {
	jule::Ref<_110e4e8a0_SlicingExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Any _field_left{jule::Any()};
	jule::Any _field_right{jule::Any()};


	_110e4e8a0_SlicingExprModel(jule::Any __param_expr, jule::Any __param_left, jule::Any __param_right) {
		this->self = jule::Ref<_110e4e8a0_SlicingExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_left = __param_left;
		this->_field_right = __param_right;
	}

	~_110e4e8a0_SlicingExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_SlicingExprModel(void) { this->self = jule::Ref<_110e4e8a0_SlicingExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_SlicingExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _110e4e8a0_SlicingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_TraitSubIdentExprModel {
	jule::Ref<_110e4e8a0_TraitSubIdentExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Str _field_ident{jule::Str()};


	_110e4e8a0_TraitSubIdentExprModel(jule::Any __param_expr, jule::Str __param_ident) {
		this->self = jule::Ref<_110e4e8a0_TraitSubIdentExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_ident = __param_ident;
	}

	~_110e4e8a0_TraitSubIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_TraitSubIdentExprModel(void) { this->self = jule::Ref<_110e4e8a0_TraitSubIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_TraitSubIdentExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _110e4e8a0_TraitSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_StructSubIdentExprModel {
	jule::Ref<_110e4e8a0_StructSubIdentExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Ref<_1116aff70_TypeKind> _field_expr_kind{jule::Ref<_1116aff70_TypeKind>()};
	jule::Ref<_11072eb20_FnIns> _field_method{jule::Ref<_11072eb20_FnIns>()};
	jule::Ref<_1109372e0_FieldIns> _field_field{jule::Ref<_1109372e0_FieldIns>()};


	_110e4e8a0_StructSubIdentExprModel(jule::Any __param_expr, jule::Ref<_1116aff70_TypeKind> __param_expr_kind, jule::Ref<_11072eb20_FnIns> __param_method, jule::Ref<_1109372e0_FieldIns> __param_field) {
		this->self = jule::Ref<_110e4e8a0_StructSubIdentExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_expr_kind = __param_expr_kind;
		this->_field_method = __param_method;
		this->_field_field = __param_field;
	}

	~_110e4e8a0_StructSubIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_StructSubIdentExprModel(void) { this->self = jule::Ref<_110e4e8a0_StructSubIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_StructSubIdentExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_method == _Src._field_method &&
			this->_field_field == _Src._field_field;
	}

	inline bool operator!=(const _110e4e8a0_StructSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_StructStaticIdentExprModel {
	jule::Ref<_110e4e8a0_StructStaticIdentExprModel> self{};

	jule::Ref<_1109372e0_StructIns> _field_structure{jule::Ref<_1109372e0_StructIns>()};
	jule::Any _field_expr{jule::Any()};
	jule::Ref<_11072eb20_FnIns> _field_method{jule::Ref<_11072eb20_FnIns>()};


	_110e4e8a0_StructStaticIdentExprModel(jule::Ref<_1109372e0_StructIns> __param_structure, jule::Any __param_expr, jule::Ref<_11072eb20_FnIns> __param_method) {
		this->self = jule::Ref<_110e4e8a0_StructStaticIdentExprModel>::make(this, nullptr);

		this->_field_structure = __param_structure;
		this->_field_expr = __param_expr;
		this->_field_method = __param_method;
	}

	~_110e4e8a0_StructStaticIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_StructStaticIdentExprModel(void) { this->self = jule::Ref<_110e4e8a0_StructStaticIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_StructStaticIdentExprModel &_Src) const {
		return 
			this->_field_structure == _Src._field_structure &&
			this->_field_expr == _Src._field_expr &&
			this->_field_method == _Src._field_method;
	}

	inline bool operator!=(const _110e4e8a0_StructStaticIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_ArrayExprModel {
	jule::Ref<_110e4e8a0_ArrayExprModel> self{};

	jule::Ref<_1116aff70_Arr> _field_kind{jule::Ref<_1116aff70_Arr>()};
	jule::Slice<jule::Any> _field_elems{jule::Slice<jule::Any>()};


	_110e4e8a0_ArrayExprModel(jule::Ref<_1116aff70_Arr> __param_kind, jule::Slice<jule::Any> __param_elems) {
		this->self = jule::Ref<_110e4e8a0_ArrayExprModel>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_elems = __param_elems;
	}

	~_110e4e8a0_ArrayExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_ArrayExprModel(void) { this->self = jule::Ref<_110e4e8a0_ArrayExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_ArrayExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _110e4e8a0_ArrayExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_CommonIdentExprModel {
	jule::Ref<_110e4e8a0_CommonIdentExprModel> self{};

	jule::Str _field_ident{jule::Str()};


	_110e4e8a0_CommonIdentExprModel(jule::Str __param_ident) {
		this->self = jule::Ref<_110e4e8a0_CommonIdentExprModel>::make(this, nullptr);

		this->_field_ident = __param_ident;
	}

	~_110e4e8a0_CommonIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_CommonIdentExprModel(void) { this->self = jule::Ref<_110e4e8a0_CommonIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_CommonIdentExprModel &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _110e4e8a0_CommonIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_CommonSubIdentExprModel {
	jule::Ref<_110e4e8a0_CommonSubIdentExprModel> self{};

	jule::Ref<_1116aff70_TypeKind> _field_expr_kind{jule::Ref<_1116aff70_TypeKind>()};
	jule::Any _field_expr{jule::Any()};
	jule::Str _field_ident{jule::Str()};


	_110e4e8a0_CommonSubIdentExprModel(jule::Ref<_1116aff70_TypeKind> __param_expr_kind, jule::Any __param_expr, jule::Str __param_ident) {
		this->self = jule::Ref<_110e4e8a0_CommonSubIdentExprModel>::make(this, nullptr);

		this->_field_expr_kind = __param_expr_kind;
		this->_field_expr = __param_expr;
		this->_field_ident = __param_ident;
	}

	~_110e4e8a0_CommonSubIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_CommonSubIdentExprModel(void) { this->self = jule::Ref<_110e4e8a0_CommonSubIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_CommonSubIdentExprModel &_Src) const {
		return 
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _110e4e8a0_CommonSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_TupleExprModel {
	jule::Ref<_110e4e8a0_TupleExprModel> self{};

	jule::Slice<jule::Ref<_1112d7f10_Data>> _field_datas{jule::Slice<jule::Ref<_1112d7f10_Data>>()};


	_110e4e8a0_TupleExprModel(jule::Slice<jule::Ref<_1112d7f10_Data>> __param_datas) {
		this->self = jule::Ref<_110e4e8a0_TupleExprModel>::make(this, nullptr);

		this->_field_datas = __param_datas;
	}

	~_110e4e8a0_TupleExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_TupleExprModel(void) { this->self = jule::Ref<_110e4e8a0_TupleExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_TupleExprModel &_Src) const {
		return 
			this->_field_datas == _Src._field_datas;
	}

	inline bool operator!=(const _110e4e8a0_TupleExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_BuiltinOutCallExprModel {
	jule::Ref<_110e4e8a0_BuiltinOutCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_110e4e8a0_BuiltinOutCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_110e4e8a0_BuiltinOutCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_110e4e8a0_BuiltinOutCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_BuiltinOutCallExprModel(void) { this->self = jule::Ref<_110e4e8a0_BuiltinOutCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_BuiltinOutCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _110e4e8a0_BuiltinOutCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_BuiltinOutlnCallExprModel {
	jule::Ref<_110e4e8a0_BuiltinOutlnCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_110e4e8a0_BuiltinOutlnCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_110e4e8a0_BuiltinOutlnCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_110e4e8a0_BuiltinOutlnCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_BuiltinOutlnCallExprModel(void) { this->self = jule::Ref<_110e4e8a0_BuiltinOutlnCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_BuiltinOutlnCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _110e4e8a0_BuiltinOutlnCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_BuiltinCloneCallExprModel {
	jule::Ref<_110e4e8a0_BuiltinCloneCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_110e4e8a0_BuiltinCloneCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_110e4e8a0_BuiltinCloneCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_110e4e8a0_BuiltinCloneCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_BuiltinCloneCallExprModel(void) { this->self = jule::Ref<_110e4e8a0_BuiltinCloneCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_BuiltinCloneCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _110e4e8a0_BuiltinCloneCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_BuiltinNewCallExprModel {
	jule::Ref<_110e4e8a0_BuiltinNewCallExprModel> self{};

	jule::Ref<_1116aff70_TypeKind> _field_kind{jule::Ref<_1116aff70_TypeKind>()};
	jule::Any _field_init{jule::Any()};


	_110e4e8a0_BuiltinNewCallExprModel(jule::Ref<_1116aff70_TypeKind> __param_kind, jule::Any __param_init) {
		this->self = jule::Ref<_110e4e8a0_BuiltinNewCallExprModel>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_init = __param_init;
	}

	~_110e4e8a0_BuiltinNewCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_BuiltinNewCallExprModel(void) { this->self = jule::Ref<_110e4e8a0_BuiltinNewCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_BuiltinNewCallExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_init == _Src._field_init;
	}

	inline bool operator!=(const _110e4e8a0_BuiltinNewCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_BuiltinRealCallExprModel {
	jule::Ref<_110e4e8a0_BuiltinRealCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_110e4e8a0_BuiltinRealCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_110e4e8a0_BuiltinRealCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_110e4e8a0_BuiltinRealCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_BuiltinRealCallExprModel(void) { this->self = jule::Ref<_110e4e8a0_BuiltinRealCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_BuiltinRealCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _110e4e8a0_BuiltinRealCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_BuiltinDropCallExprModel {
	jule::Ref<_110e4e8a0_BuiltinDropCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_110e4e8a0_BuiltinDropCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_110e4e8a0_BuiltinDropCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_110e4e8a0_BuiltinDropCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_BuiltinDropCallExprModel(void) { this->self = jule::Ref<_110e4e8a0_BuiltinDropCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_BuiltinDropCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _110e4e8a0_BuiltinDropCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_BuiltinPanicCallExprModel {
	jule::Ref<_110e4e8a0_BuiltinPanicCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_110e4e8a0_BuiltinPanicCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_110e4e8a0_BuiltinPanicCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_110e4e8a0_BuiltinPanicCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_BuiltinPanicCallExprModel(void) { this->self = jule::Ref<_110e4e8a0_BuiltinPanicCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_BuiltinPanicCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _110e4e8a0_BuiltinPanicCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_BuiltinMakeCallExprModel {
	jule::Ref<_110e4e8a0_BuiltinMakeCallExprModel> self{};

	jule::Ref<_1116aff70_TypeKind> _field_kind{jule::Ref<_1116aff70_TypeKind>()};
	jule::Any _field_len{jule::Any()};
	jule::Any _field_cap{jule::Any()};


	_110e4e8a0_BuiltinMakeCallExprModel(jule::Ref<_1116aff70_TypeKind> __param_kind, jule::Any __param_len, jule::Any __param_cap) {
		this->self = jule::Ref<_110e4e8a0_BuiltinMakeCallExprModel>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_len = __param_len;
		this->_field_cap = __param_cap;
	}

	~_110e4e8a0_BuiltinMakeCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_BuiltinMakeCallExprModel(void) { this->self = jule::Ref<_110e4e8a0_BuiltinMakeCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_BuiltinMakeCallExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_len == _Src._field_len &&
			this->_field_cap == _Src._field_cap;
	}

	inline bool operator!=(const _110e4e8a0_BuiltinMakeCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_BuiltinAppendCallExprModel {
	jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel> self{};

	jule::Any _field_dest{jule::Any()};
	jule::Any _field_elements{jule::Any()};


	_110e4e8a0_BuiltinAppendCallExprModel(jule::Any __param_dest, jule::Any __param_elements) {
		this->self = jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel>::make(this, nullptr);

		this->_field_dest = __param_dest;
		this->_field_elements = __param_elements;
	}

	~_110e4e8a0_BuiltinAppendCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_BuiltinAppendCallExprModel(void) { this->self = jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_BuiltinAppendCallExprModel &_Src) const {
		return 
			this->_field_dest == _Src._field_dest &&
			this->_field_elements == _Src._field_elements;
	}

	inline bool operator!=(const _110e4e8a0_BuiltinAppendCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_BuiltinErrorTraitSubIdentExprModel {
	jule::Ref<_110e4e8a0_BuiltinErrorTraitSubIdentExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Str _field_ident{jule::Str()};


	_110e4e8a0_BuiltinErrorTraitSubIdentExprModel(jule::Any __param_expr, jule::Str __param_ident) {
		this->self = jule::Ref<_110e4e8a0_BuiltinErrorTraitSubIdentExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_ident = __param_ident;
	}

	~_110e4e8a0_BuiltinErrorTraitSubIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_BuiltinErrorTraitSubIdentExprModel(void) { this->self = jule::Ref<_110e4e8a0_BuiltinErrorTraitSubIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_BuiltinErrorTraitSubIdentExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _110e4e8a0_BuiltinErrorTraitSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_SizeofExprModel {
	jule::Ref<_110e4e8a0_SizeofExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_110e4e8a0_SizeofExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_110e4e8a0_SizeofExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_110e4e8a0_SizeofExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_SizeofExprModel(void) { this->self = jule::Ref<_110e4e8a0_SizeofExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_SizeofExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _110e4e8a0_SizeofExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_AlignofExprModel {
	jule::Ref<_110e4e8a0_AlignofExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_110e4e8a0_AlignofExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_110e4e8a0_AlignofExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_110e4e8a0_AlignofExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_AlignofExprModel(void) { this->self = jule::Ref<_110e4e8a0_AlignofExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_AlignofExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _110e4e8a0_AlignofExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_RuneExprModel {
	jule::Ref<_110e4e8a0_RuneExprModel> self{};

	jule::I32 _field_code{jule::I32()};


	_110e4e8a0_RuneExprModel(jule::I32 __param_code) {
		this->self = jule::Ref<_110e4e8a0_RuneExprModel>::make(this, nullptr);

		this->_field_code = __param_code;
	}

	~_110e4e8a0_RuneExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_RuneExprModel(void) { this->self = jule::Ref<_110e4e8a0_RuneExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_RuneExprModel &_Src) const {
		return 
			this->_field_code == _Src._field_code;
	}

	inline bool operator!=(const _110e4e8a0_RuneExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4e8a0_ExplicitDerefExprModel {
	jule::Ref<_110e4e8a0_ExplicitDerefExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_110e4e8a0_ExplicitDerefExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_110e4e8a0_ExplicitDerefExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_110e4e8a0_ExplicitDerefExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4e8a0_ExplicitDerefExprModel(void) { this->self = jule::Ref<_110e4e8a0_ExplicitDerefExprModel>::make(this, nullptr); }

	inline bool operator==(const _110e4e8a0_ExplicitDerefExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _110e4e8a0_ExplicitDerefExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4edc0_Package: public _111732860_Lookup {
	jule::Ref<_110e4edc0_Package> self{};

	jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> _field_files{jule::Slice<jule::Ref<_1111c15d0_SymbolTable>>()};


	_110e4edc0_Package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> __param_files) {
		this->self = jule::Ref<_110e4edc0_Package>::make(this, nullptr);

		this->_field_files = __param_files;
	}

	~_110e4edc0_Package(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4edc0_Package(void) { this->self = jule::Ref<_110e4edc0_Package>::make(this, nullptr); }

	inline jule::Ref<_110e4edc0_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_110e4edc0_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)>);


	inline jule::Ref<_110e92c80_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_1116aff70_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_1109372e0_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_11072eb20_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_110e3f160_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_110e453c0_Enum> _method_find_enum(jule::Str);


	inline bool operator==(const _110e4edc0_Package &_Src) const {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _110e4edc0_Package &_Src) const { return !this->operator==(_Src); }
};


struct _110e92bc0_Sema: public _111732860_Lookup {
	jule::Ref<_110e92bc0_Sema> self{};

	jule::Slice<_127e05da0_Log> _field_errors{jule::Slice<_127e05da0_Log>()};
	jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> _field_files{jule::Slice<jule::Ref<_1111c15d0_SymbolTable>>()};
	jule::Ref<_1111c15d0_SymbolTable> _field_file{jule::Ref<_1111c15d0_SymbolTable>()};


	_110e92bc0_Sema(jule::Slice<_127e05da0_Log> __param_errors, jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> __param_files, jule::Ref<_1111c15d0_SymbolTable> __param_file) {
		this->self = jule::Ref<_110e92bc0_Sema>::make(this, nullptr);

		this->_field_errors = __param_errors;
		this->_field_files = __param_files;
		this->_field_file = __param_file;
	}

	~_110e92bc0_Sema(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e92bc0_Sema(void) { this->self = jule::Ref<_110e92bc0_Sema>::make(this, nullptr); }

	inline jule::Ref<_110e4edc0_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_110e4edc0_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)>);


	inline jule::Ref<_110e92c80_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_1116aff70_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_1109372e0_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_11072eb20_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_110e3f160_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_110e453c0_Enum> _method_find_enum(jule::Str);


	inline void _method_set_current_file(jule::Ref<_1111c15d0_SymbolTable>);


	inline void _method_push_err(_1106ec050_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_is_accessible_define(jule::Bool,_1106ec050_Token);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline jule::Bool _method_check_generic_quantity(jule::Int,jule::Int,_1106ec050_Token);


	inline jule::Bool _method_is_duplicated_import_selection(jule::Uintptr,jule::Str);


	inline jule::Any _method_get_import_def(jule::Str,jule::Ref<_110e4edc0_ImportInfo>&);


	inline void _method_check_import_selections(jule::Ref<_110e4edc0_ImportInfo>);


	inline jule::Bool _method_is_use_alias_duplication(jule::Ref<_110e4edc0_ImportInfo>&);


	inline jule::Bool _method_check_import(jule::Ref<_110e4edc0_ImportInfo>);


	inline void _method_check_imports(void);


	inline void _method_impl_file_impls(void);


	inline void _method_impl_impls(void);


	inline void _method_check_enums(void);


	inline jule::Bool _method_check_type_with_refers(jule::Ref<_1116aff70_TypeSymbol>,jule::Trait<_111732860_Lookup>,jule::Ref<_1116aff70_Referencer>);


	inline jule::Bool _method_check_type(jule::Ref<_1116aff70_TypeSymbol>,jule::Trait<_111732860_Lookup>);


	inline jule::Ref<_1116aff70_TypeKind> _method_build_type_with_generics(jule::Ref<_11054f670_TypeDecl>,jule::Slice<jule::Ref<_1116aff70_TypeAlias>>);


	inline jule::Ref<_1116aff70_TypeKind> _method_build_type(jule::Ref<_11054f670_TypeDecl>);


	inline jule::Ref<_1112d7f10_Data> _method_evalpd(jule::Ref<_11054f670_Expr>,jule::Trait<_111732860_Lookup>,jule::Ref<_1116aff70_TypeKind>,jule::Ref<_110e92c80_Var>);


	inline jule::Ref<_1112d7f10_Data> _method_evalp(jule::Ref<_11054f670_Expr>,jule::Trait<_111732860_Lookup>,jule::Ref<_1116aff70_TypeKind>);


	inline jule::Ref<_1112d7f10_Data> _method_eval(jule::Ref<_11054f670_Expr>,jule::Trait<_111732860_Lookup>);


	inline void _method_check_assign_type(jule::Ref<_1116aff70_TypeKind>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token,jule::Bool);


	inline jule::Bool _method_check_type_compatibility(jule::Ref<_1116aff70_TypeKind>,jule::Ref<_1116aff70_TypeKind>,_1106ec050_Token,jule::Bool);


	inline jule::Ref<_1116aff70_TypeKind> _method_build_non_generic_type_kind(jule::Ref<_11054f670_TypeDecl>,jule::Slice<jule::Ref<_11054f670_GenericDecl>>);


	inline void _method_build_fn_non_generic_type_kinds(jule::Ref<_11072eb20_FnIns>);


	inline jule::Ref<_11072eb20_FnIns> _method_get_trait_check_fn_kind(jule::Ref<_11072eb20_Fn>);


	inline jule::Bool _method_reload_fn_ins_types(jule::Ref<_11072eb20_FnIns>);


	inline void _method_check_validity_for_init_expr(jule::Bool,jule::Bool,jule::Ref<_1116aff70_TypeKind>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline jule::Bool _method_check_type_alias_decl_kind(jule::Ref<_1116aff70_TypeAlias>,jule::Trait<_111732860_Lookup>);


	inline void _method_check_type_alias_decl(jule::Ref<_1116aff70_TypeAlias>,jule::Trait<_111732860_Lookup>);


	inline void _method_check_type_alias_decl_dup(jule::Ref<_1116aff70_TypeAlias>);


	inline jule::Bool _method_check_type_alias_decls(void);


	inline void _method_check_enum_items_dup(jule::Ref<_110e453c0_Enum>);


	inline void _method_check_enum_items_str(jule::Ref<_110e453c0_Enum>);


	inline void _method_check_enum_items_int(jule::Ref<_110e453c0_Enum>);


	inline void _method_check_enum_decl(jule::Ref<_110e453c0_Enum>);


	inline jule::Bool _method_check_enum_decls(void);


	inline jule::Bool _method_check_decl_generics(jule::Slice<jule::Ref<_11054f670_GenericDecl>>);


	inline jule::Bool _method_check_fn_decl_params_dup(jule::Ref<_11072eb20_Fn>);


	inline jule::Bool _method_check_fn_decl_result_dup(jule::Ref<_11072eb20_Fn>);


	inline jule::Bool _method_check_fn_decl_types(jule::Ref<_11072eb20_Fn>);


	inline jule::Bool _method_check_fn_decl_prototype(jule::Ref<_11072eb20_Fn>);


	inline void _method_check_trait_decl_method(jule::Ref<_11072eb20_Fn>);


	inline void _method_check_trait_decl_methods(jule::Ref<_110e3f160_Trait>);


	inline void _method_check_trait_decl(jule::Ref<_110e3f160_Trait>);


	inline jule::Bool _method_check_trait_decls(void);


	inline jule::Bool _method_check_trait_impl_methods(jule::Ref<_110e3f160_Trait>,jule::Ref<_110e4c050_Impl>);


	inline jule::Bool _method_impl_to_struct(jule::Ref<_1109372e0_Struct>,jule::Ref<_110e4c050_Impl>);


	inline void _method_impl_trait(jule::Ref<_110e4c050_Impl>);


	inline void _method_impl_struct(jule::Ref<_110e4c050_Impl>);


	inline void _method_impl_impl(jule::Ref<_110e4c050_Impl>);


	inline void _method_check_var_decl(jule::Ref<_110e92c80_Var>,jule::Trait<_111732860_Lookup>);


	inline void _method_check_global_var_decl(jule::Ref<_110e92c80_Var>);


	inline jule::Bool _method_check_global_decls(void);


	inline jule::Bool _method_check_struct_trait_impl(jule::Ref<_1109372e0_Struct>,jule::Ref<_110e3f160_Trait>);


	inline jule::Bool _method_check_struct_impls(jule::Ref<_1109372e0_Struct>);


	inline jule::Bool _method_check_struct_fields(jule::Ref<_1109372e0_Struct>);


	inline jule::Bool _method_check_struct_decl_methods(jule::Ref<_1109372e0_Struct>);


	inline void _method_check_struct_decl(jule::Ref<_1109372e0_Struct>);


	inline jule::Bool _method_check_struct_decls(void);


	inline void _method_check_fn_decl(jule::Ref<_11072eb20_Fn>);


	inline jule::Bool _method_check_fn_decls(void);


	inline jule::Bool _method_check_directive_pass(_110d9ce90_Pass);


	inline jule::Bool _method_check_passes(void);


	inline void _method_push_cycle_error(jule::Ref<_1109372e0_Struct>,jule::Ref<_1109372e0_Struct>,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ref<_1109372e0_Struct>,jule::Ref<_1109372e0_Struct>,jule::Str&);


	inline jule::Bool _method_check_struct_derive_illegal_cycles(jule::Str,jule::Ref<_1109372e0_Struct>,jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_check_struct_ins_derive_clone(jule::Ref<_1109372e0_StructIns>);


	inline jule::Bool _method_check_struct_derive_clone(jule::Ref<_1109372e0_Struct>);


	inline jule::Bool _method_check_file_derives(void);


	inline void _method_check_package_derives(void);


	inline void _method_check_package_decls(void);


	inline void _method_check_data_for_type_inference(jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline void _method_check_var(jule::Ref<_110e92c80_Var>);


	inline void _method_check_type_var(jule::Ref<_110e92c80_Var>,jule::Trait<_111732860_Lookup>);


	inline void _method_check_global_types(void);


	inline void _method_check_type_method(jule::Ref<_1109372e0_StructIns>,jule::Ref<_11072eb20_Fn>);


	inline void _method_check_type_struct(jule::Ref<_1109372e0_Struct>);


	inline void _method_check_struct_types(void);


	inline void _method_check_rets(jule::Ref<_11072eb20_FnIns>);


	inline void _method_check_fn_ins_sc(jule::Ref<_11072eb20_FnIns>,jule::Ref<_110af2660_ScopeChecker>);


	inline void _method_check_fn_ins(jule::Ref<_11072eb20_FnIns>);


	inline void _method_check_type_fn(jule::Ref<_11072eb20_Fn>);


	inline void _method_precheck_type_fn(jule::Ref<_11072eb20_Fn>);


	inline jule::Bool _method_precheck_fn_types(void);


	inline jule::Bool _method_check_fn_types(void);


	inline void _method_check_package_types(void);


	inline void _method_set_file_sema_fields(void);


	inline void _method_set_sema_fields(void);


	inline void _method_check(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>>);


	inline bool operator==(const _110e92bc0_Sema &_Src) const {
		return 
			this->_field_errors == _Src._field_errors &&
			this->_field_files == _Src._field_files &&
			this->_field_file == _Src._field_file;
	}

	inline bool operator!=(const _110e92bc0_Sema &_Src) const { return !this->operator==(_Src); }
};


struct _1111c0be0_DynamicTypeAnnotation {
	jule::Ref<_1111c0be0_DynamicTypeAnnotation> self{};

	jule::Ref<_1112d7f10_Eval> _field_e{jule::Ref<_1112d7f10_Eval>()};
	jule::Ref<_11072eb20_FnIns> _field_f{jule::Ref<_11072eb20_FnIns>()};
	jule::Ref<_11072eb20_ParamIns> _field_p{jule::Ref<_11072eb20_ParamIns>()};
	jule::Ref<_1112d7f10_Data> _field_a{jule::Ref<_1112d7f10_Data>()};
	_1106ec050_Token _field_error_token{_1106ec050_Token()};
	_1116aff70_TypeKind** _field_k{nullptr};


	_1111c0be0_DynamicTypeAnnotation(jule::Ref<_1112d7f10_Eval> __param_e, jule::Ref<_11072eb20_FnIns> __param_f, jule::Ref<_11072eb20_ParamIns> __param_p, jule::Ref<_1112d7f10_Data> __param_a, _1106ec050_Token __param_error_token, _1116aff70_TypeKind** __param_k) {
		this->self = jule::Ref<_1111c0be0_DynamicTypeAnnotation>::make(this, nullptr);

		this->_field_e = __param_e;
		this->_field_f = __param_f;
		this->_field_p = __param_p;
		this->_field_a = __param_a;
		this->_field_error_token = __param_error_token;
		this->_field_k = __param_k;
	}

	~_1111c0be0_DynamicTypeAnnotation(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1111c0be0_DynamicTypeAnnotation(void) { this->self = jule::Ref<_1111c0be0_DynamicTypeAnnotation>::make(this, nullptr); }

	inline void _method_push_generic(jule::Ref<_1116aff70_TypeKind>,jule::Int);


	inline jule::Bool _method_annotate_prim(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_annotate_slc(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_check_map_key(_1116aff70_TypeKind**,jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_annotate_map(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_annotate_fn(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_annotate_ptr(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_annotate_any(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_annotate_kind(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_annotate(void);


	inline bool operator==(const _1111c0be0_DynamicTypeAnnotation &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_f == _Src._field_f &&
			this->_field_p == _Src._field_p &&
			this->_field_a == _Src._field_a &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_k == _Src._field_k;
	}

	inline bool operator!=(const _1111c0be0_DynamicTypeAnnotation &_Src) const { return !this->operator==(_Src); }
};


struct _1111c0be0_StructLitChecker {
	jule::Ref<_1111c0be0_StructLitChecker> self{};

	jule::Ref<_1112d7f10_Eval> _field_e{jule::Ref<_1112d7f10_Eval>()};
	_1106ec050_Token _field_error_token{_1106ec050_Token()};
	jule::Ref<_1109372e0_StructIns> _field_s{jule::Ref<_1109372e0_StructIns>()};
	jule::Slice<jule::Ref<_110e4e8a0_StructArgExprModel>> _field_args{jule::Slice<jule::Ref<_110e4e8a0_StructArgExprModel>>()};


	_1111c0be0_StructLitChecker(jule::Ref<_1112d7f10_Eval> __param_e, _1106ec050_Token __param_error_token, jule::Ref<_1109372e0_StructIns> __param_s, jule::Slice<jule::Ref<_110e4e8a0_StructArgExprModel>> __param_args) {
		this->self = jule::Ref<_1111c0be0_StructLitChecker>::make(this, nullptr);

		this->_field_e = __param_e;
		this->_field_error_token = __param_error_token;
		this->_field_s = __param_s;
		this->_field_args = __param_args;
	}

	~_1111c0be0_StructLitChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1111c0be0_StructLitChecker(void) { this->self = jule::Ref<_1111c0be0_StructLitChecker>::make(this, nullptr); }

	inline void _method_push_err(_1106ec050_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_match(jule::Ref<_1109372e0_FieldIns>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline void _method_check_pair(jule::Ref<_11054f670_FieldExprPair>,jule::Slice<jule::Any>);


	inline jule::Bool _method_ready_exprs(jule::Slice<jule::Any>);


	inline void _method_check(jule::Slice<jule::Any>);


	inline bool operator==(const _1111c0be0_StructLitChecker &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_s == _Src._field_s &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _1111c0be0_StructLitChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1111c0be0_RangeChecker {
	jule::Ref<_1111c0be0_RangeChecker> self{};

	jule::Ref<_110af2660_ScopeChecker> _field_sc{jule::Ref<_110af2660_ScopeChecker>()};
	jule::Ref<_11054f670_RangeKind> _field_rang{jule::Ref<_11054f670_RangeKind>()};
	jule::Ref<_110af2660_RangeIter> _field_kind{jule::Ref<_110af2660_RangeIter>()};
	jule::Ref<_1112d7f10_Data> _field_d{jule::Ref<_1112d7f10_Data>()};


	_1111c0be0_RangeChecker(jule::Ref<_110af2660_ScopeChecker> __param_sc, jule::Ref<_11054f670_RangeKind> __param_rang, jule::Ref<_110af2660_RangeIter> __param_kind, jule::Ref<_1112d7f10_Data> __param_d) {
		this->self = jule::Ref<_1111c0be0_RangeChecker>::make(this, nullptr);

		this->_field_sc = __param_sc;
		this->_field_rang = __param_rang;
		this->_field_kind = __param_kind;
		this->_field_d = __param_d;
	}

	~_1111c0be0_RangeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1111c0be0_RangeChecker(void) { this->self = jule::Ref<_1111c0be0_RangeChecker>::make(this, nullptr); }

	inline jule::Ref<_110e92c80_Var> _method_build_var(jule::Ref<_11054f670_VarDecl>);


	inline void _method_set_size_key(void);


	inline void _method_check_slice(void);


	inline void _method_check_array(void);


	inline void _method_check_map_key_a(void);


	inline void _method_check_map_key_b(void);


	inline void _method_check_map(void);


	inline void _method_check_str(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1111c0be0_RangeChecker &_Src) const {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_rang == _Src._field_rang &&
			this->_field_kind == _Src._field_kind &&
			this->_field_d == _Src._field_d;
	}

	inline bool operator!=(const _1111c0be0_RangeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1112d7f10_Data {
	jule::Ref<_1112d7f10_Data> self{};

	jule::Ref<_1116aff70_TypeKind> _field_kind{jule::Ref<_1116aff70_TypeKind>()};
	jule::Ref<_1116aff70_TypeKind> _field_cast_kind{jule::Ref<_1116aff70_TypeKind>()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Bool _field_lvalue{jule::Bool()};
	jule::Bool _field_variadiced{jule::Bool()};
	jule::Bool _field_is_rune{jule::Bool()};
	jule::Any _field_model{jule::Any()};
	jule::Bool _field_decl{jule::Bool()};
	jule::Ref<_1118cee40_Const> _field_constant{jule::Ref<_1118cee40_Const>()};


	_1112d7f10_Data(jule::Ref<_1116aff70_TypeKind> __param_kind, jule::Ref<_1116aff70_TypeKind> __param_cast_kind, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Bool __param_lvalue, jule::Bool __param_variadiced, jule::Bool __param_is_rune, jule::Any __param_model, jule::Bool __param_decl, jule::Ref<_1118cee40_Const> __param_constant) {
		this->self = jule::Ref<_1112d7f10_Data>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_cast_kind = __param_cast_kind;
		this->_field_mutable = __param_mutable;
		this->_field_reference = __param_reference;
		this->_field_lvalue = __param_lvalue;
		this->_field_variadiced = __param_variadiced;
		this->_field_is_rune = __param_is_rune;
		this->_field_model = __param_model;
		this->_field_decl = __param_decl;
		this->_field_constant = __param_constant;
	}

	~_1112d7f10_Data(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1112d7f10_Data(void) { this->self = jule::Ref<_1112d7f10_Data>::make(this, nullptr); }

	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_const(void);


	inline bool operator==(const _1112d7f10_Data &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_cast_kind == _Src._field_cast_kind &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_lvalue == _Src._field_lvalue &&
			this->_field_variadiced == _Src._field_variadiced &&
			this->_field_is_rune == _Src._field_is_rune &&
			this->_field_model == _Src._field_model &&
			this->_field_decl == _Src._field_decl &&
			this->_field_constant == _Src._field_constant;
	}

	inline bool operator!=(const _1112d7f10_Data &_Src) const { return !this->operator==(_Src); }
};


struct _1112d7f10_Value {
	jule::Ref<_1112d7f10_Value> self{};

	jule::Ref<_11054f670_Expr> _field_expr{jule::Ref<_11054f670_Expr>()};
	jule::Ref<_1112d7f10_Data> _field_data{jule::Ref<_1112d7f10_Data>()};


	_1112d7f10_Value(jule::Ref<_11054f670_Expr> __param_expr, jule::Ref<_1112d7f10_Data> __param_data) {
		this->self = jule::Ref<_1112d7f10_Value>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_data = __param_data;
	}

	~_1112d7f10_Value(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1112d7f10_Value(void) { this->self = jule::Ref<_1112d7f10_Value>::make(this, nullptr); }

	inline bool operator==(const _1112d7f10_Value &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _1112d7f10_Value &_Src) const { return !this->operator==(_Src); }
};


struct _1112d7f10_Eval {
	jule::Ref<_1112d7f10_Eval> self{};

	jule::Ref<_110e92bc0_Sema> _field_s{jule::Ref<_110e92bc0_Sema>()};
	jule::Trait<_111732860_Lookup> _field_lookup{jule::Trait<_111732860_Lookup>()};
	jule::Ref<_1116aff70_TypeKind> _field_prefix{jule::Ref<_1116aff70_TypeKind>()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Ref<_110e92c80_Var> _field_owner{jule::Ref<_110e92c80_Var>()};


	_1112d7f10_Eval(jule::Ref<_110e92bc0_Sema> __param_s, jule::Trait<_111732860_Lookup> __param_lookup, jule::Ref<_1116aff70_TypeKind> __param_prefix, jule::Bool __param_unsafety, jule::Ref<_110e92c80_Var> __param_owner) {
		this->self = jule::Ref<_1112d7f10_Eval>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_lookup = __param_lookup;
		this->_field_prefix = __param_prefix;
		this->_field_unsafety = __param_unsafety;
		this->_field_owner = __param_owner;
	}

	~_1112d7f10_Eval(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1112d7f10_Eval(void) { this->self = jule::Ref<_1112d7f10_Eval>::make(this, nullptr); }

	inline void _method_push_err(_1106ec050_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_global(void);


	inline jule::Ref<_1112d7f10_Data> _method_lit_nil(void);


	inline jule::Ref<_1112d7f10_Data> _method_lit_str(jule::Ref<_11054f670_LitExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_lit_bool(jule::Ref<_11054f670_LitExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_lit_rune(jule::Ref<_11054f670_LitExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_lit_float(jule::Ref<_11054f670_LitExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_lit_int(jule::Ref<_11054f670_LitExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_lit_num(jule::Ref<_11054f670_LitExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_lit(jule::Ref<_11054f670_LitExpr>);


	inline jule::Any _method_find_builtins(jule::Str);


	inline jule::Any _method_get_def(jule::Str,jule::Bool);


	inline void _method_push_reference(jule::Ref<_110d9ce90_ReferenceStack>);


	inline void _method_push_reference_to_fn(jule::Ref<_11072eb20_FnIns>);


	inline void _method_push_reference_to_var(jule::Ref<_110e92c80_Var>);


	inline void _method_push_reference_to_struct(jule::Ref<_1109372e0_StructIns>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_enum(jule::Ref<_110e453c0_Enum>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_struct(jule::Ref<_1109372e0_StructIns>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_fn_ins(jule::Ref<_11072eb20_FnIns>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_fn(jule::Ref<_11072eb20_Fn>,_1106ec050_Token);


	inline void _method_push_illegal_cycle_error(jule::Ref<_110e92c80_Var>,jule::Ref<_110e92c80_Var>,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ref<_110e92c80_Var>,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ref<_110e92c80_Var>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_var(jule::Ref<_110e92c80_Var>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_type_alias(jule::Ref<_1116aff70_TypeAlias>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_def(jule::Any,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_ident(jule::Ref<_11054f670_IdentExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_unary_minus(jule::Ref<_1112d7f10_Data>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_unary_plus(jule::Ref<_1112d7f10_Data>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_unary_caret(jule::Ref<_1112d7f10_Data>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_unary_excl(jule::Ref<_1112d7f10_Data>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_unary_star(jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_unary_amper(jule::Ref<_1112d7f10_Data>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_unary_type_decl(jule::Ref<_1112d7f10_Data>,jule::Ref<_11054f670_UnaryExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_unary(jule::Ref<_11054f670_UnaryExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_variadic(jule::Ref<_11054f670_VariadicExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_unsafe(jule::Ref<_11054f670_UnsafeExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_arr(jule::Ref<_11054f670_SliceExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_exp_slc(jule::Ref<_11054f670_SliceExpr>,jule::Ref<_1116aff70_TypeKind>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_slice_expr(jule::Ref<_11054f670_SliceExpr>);


	inline void _method_check_integer_indexing_by_data(jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline void _method_indexing_ptr(jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>,jule::Ref<_11054f670_IndexingExpr>);


	inline void _method_indexing_arr(jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>,jule::Ref<_11054f670_IndexingExpr>);


	inline void _method_indexing_slc(jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>,jule::Ref<_11054f670_IndexingExpr>);


	inline void _method_indexing_map(jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>,jule::Ref<_11054f670_IndexingExpr>);


	inline void _method_indexing_str(jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>,jule::Ref<_11054f670_IndexingExpr>);


	inline void _method_to_indexing(jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>,jule::Ref<_11054f670_IndexingExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_ident_decl_from_indexing(jule::Ref<_11054f670_IndexingExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_indexing(jule::Ref<_11054f670_IndexingExpr>);


	inline std::tuple<jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>> _method_eval_slicing_exprs(jule::Ref<_11054f670_SlicingExpr>);


	inline void _method_slicing_arr(jule::Ref<_1112d7f10_Data>);


	inline void _method_slicing_slc(jule::Ref<_1112d7f10_Data>);


	inline void _method_slicing_str(jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>);


	inline void _method_check_slicing(jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>,jule::Ref<_11054f670_SlicingExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_slicing(jule::Ref<_11054f670_SlicingExpr>);


	inline void _method_cast_ptr(jule::Ref<_1116aff70_TypeKind>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline void _method_cast_struct(jule::Ref<_1116aff70_TypeKind>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline void _method_cast_ref(jule::Ref<_1116aff70_TypeKind>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline void _method_cast_slc(jule::Ref<_1116aff70_TypeKind>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline void _method_cast_str(jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline void _method_cast_int(jule::Ref<_1116aff70_TypeKind>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline void _method_cast_num(jule::Ref<_1116aff70_TypeKind>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline void _method_cast_prim(jule::Ref<_1116aff70_TypeKind>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_cast_by_type_n_data(jule::Ref<_1116aff70_TypeKind>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_cast(jule::Ref<_11054f670_CastExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_ns_selection(jule::Ref<_11054f670_NsSelectionExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_struct_lit_explicit(jule::Ref<_1109372e0_StructIns>,jule::Slice<jule::Any>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_struct_lit(jule::Ref<_11054f670_StructLit>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_type(jule::Ref<_11054f670_TypeDecl>);


	inline jule::Ref<_1112d7f10_Data> _method_call_type_fn(jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);


	inline std::tuple<jule::Bool,jule::Bool> _method_check_fn_call_generics(jule::Ref<_11072eb20_FnIns>,jule::Ref<_11054f670_FnCallExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_call_builtin_fn(jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);


	inline void _method_check_fn_of_concurrent_call(jule::Ref<_11072eb20_FnIns>&,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_call_fn(jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_fn_call(jule::Ref<_11054f670_FnCallExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_enum_static(jule::Ref<_110e453c0_Enum>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_struct_static(jule::Ref<_1109372e0_StructIns>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_trait_sub_ident(jule::Ref<_1112d7f10_Data>,jule::Ref<_110e3f160_Trait>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_struct_sub_ident(jule::Ref<_1112d7f10_Data>,jule::Ref<_1109372e0_StructIns>,jule::Ref<_11054f670_SubIdentExpr>,jule::Bool);


	inline jule::Ref<_1112d7f10_Data> _method_eval_slice_sub_ident(jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_array_sub_ident(jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_map_sub_ident(jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_str_sub_ident(jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_int_type_static(_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_uint_type_static(_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_i8_type_static(_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_i16_type_static(_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_i32_type_static(_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_i64_type_static(_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_u8_type_static(_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_u16_type_static(_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_u32_type_static(_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_u64_type_static(_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_f32_type_tatic(_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_f64_type_static(_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_prim_static(jule::Str,_1106ec050_Token);


	inline jule::Ref<_1112d7f10_Data> _method_eval_type_static(jule::Ref<_1112d7f10_Data>,jule::Ref<_11054f670_SubIdentExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_obj_sub_ident(jule::Ref<_1112d7f10_Data>,jule::Ref<_11054f670_SubIdentExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_sub_ident(jule::Ref<_11054f670_SubIdentExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_tuple(jule::Ref<_11054f670_TupleExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_map(jule::Ref<_1116aff70_Map>,jule::Ref<_11054f670_BraceLit>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_brace_lit(jule::Ref<_11054f670_BraceLit>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_anon_fn(jule::Ref<_11054f670_FnDecl>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_binop(jule::Ref<_11054f670_BinopExpr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_expr_kind(jule::Any);


	inline jule::Ref<_1112d7f10_Data> _method_eval(jule::Ref<_11054f670_Expr>);


	inline jule::Ref<_1112d7f10_Data> _method_eval_expr(jule::Ref<_11054f670_Expr>);


	inline bool operator==(const _1112d7f10_Eval &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_prefix == _Src._field_prefix &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_owner == _Src._field_owner;
	}

	inline bool operator!=(const _1112d7f10_Eval &_Src) const { return !this->operator==(_Src); }
};


struct _1116aff70_TypeKind: public _1116aff70_Kind {
	jule::Ref<_1116aff70_TypeKind> self{};

	jule::Str _field_cpp_ident{jule::Str()};
	jule::Bool _field_variadic{jule::Bool()};
	jule::Trait<_1116aff70_Kind> _field_kind{jule::Trait<_1116aff70_Kind>()};


	_1116aff70_TypeKind(jule::Str __param_cpp_ident, jule::Bool __param_variadic, jule::Trait<_1116aff70_Kind> __param_kind) {
		this->self = jule::Ref<_1116aff70_TypeKind>::make(this, nullptr);

		this->_field_cpp_ident = __param_cpp_ident;
		this->_field_variadic = __param_variadic;
		this->_field_kind = __param_kind;
	}

	~_1116aff70_TypeKind(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116aff70_TypeKind(void) { this->self = jule::Ref<_1116aff70_TypeKind>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Ref<_1116aff70_TypeKind> _method_clone(void);


	inline jule::Bool _method_is_cpp_linked(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_is_void(void);


	inline jule::Ref<_1116aff70_Prim> _method_prim(void);


	inline jule::Ref<_1116aff70_Ref> _method_ref(void);


	inline jule::Ref<_1116aff70_Ptr> _method_ptr(void);


	inline jule::Ref<_110e453c0_Enum> _method_enm(void);


	inline jule::Ref<_1116aff70_Arr> _method_arr(void);


	inline jule::Ref<_1116aff70_Slc> _method_slc(void);


	inline jule::Ref<_11072eb20_FnIns> _method_fnc(void);


	inline jule::Ref<_1109372e0_StructIns> _method_strct(void);


	inline jule::Ref<_110e3f160_Trait> _method_trt(void);


	inline jule::Ref<_1116aff70_Map> _method_map(void);


	inline jule::Ref<_1116aff70_Tuple> _method_tup(void);


	inline bool operator==(const _1116aff70_TypeKind &_Src) const {
		return 
			this->_field_cpp_ident == _Src._field_cpp_ident &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1116aff70_TypeKind &_Src) const { return !this->operator==(_Src); }
};


struct _1116aff70_TypeSymbol {
	jule::Ref<_1116aff70_TypeSymbol> self{};

	jule::Ref<_11054f670_TypeDecl> _field_decl{jule::Ref<_11054f670_TypeDecl>()};
	jule::Ref<_1116aff70_TypeKind> _field_kind{jule::Ref<_1116aff70_TypeKind>()};


	_1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl> __param_decl, jule::Ref<_1116aff70_TypeKind> __param_kind) {
		this->self = jule::Ref<_1116aff70_TypeSymbol>::make(this, nullptr);

		this->_field_decl = __param_decl;
		this->_field_kind = __param_kind;
	}

	~_1116aff70_TypeSymbol(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116aff70_TypeSymbol(void) { this->self = jule::Ref<_1116aff70_TypeSymbol>::make(this, nullptr); }

	inline jule::Bool _method_checked(void);


	inline void _method_remove_kind(void);


	inline bool operator==(const _1116aff70_TypeSymbol &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1116aff70_TypeSymbol &_Src) const { return !this->operator==(_Src); }
};


struct _1116aff70_Prim: public _1116aff70_Kind {
	jule::Ref<_1116aff70_Prim> self{};

	jule::Str _field_kind{jule::Str()};


	_1116aff70_Prim(jule::Str __param_kind) {
		this->self = jule::Ref<_1116aff70_Prim>::make(this, nullptr);

		this->_field_kind = __param_kind;
	}

	~_1116aff70_Prim(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116aff70_Prim(void) { this->self = jule::Ref<_1116aff70_Prim>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_is_i8(void);


	inline jule::Bool _method_is_i16(void);


	inline jule::Bool _method_is_i32(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u8(void);


	inline jule::Bool _method_is_u16(void);


	inline jule::Bool _method_is_u32(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_f32(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_int(void);


	inline jule::Bool _method_is_uint(void);


	inline jule::Bool _method_is_uintptr(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_any(void);


	inline bool operator==(const _1116aff70_Prim &_Src) const {
		return 
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1116aff70_Prim &_Src) const { return !this->operator==(_Src); }
};


struct _1116aff70_Ref: public _1116aff70_Kind {
	jule::Ref<_1116aff70_Ref> self{};

	jule::Ref<_1116aff70_TypeKind> _field_elem{jule::Ref<_1116aff70_TypeKind>()};


	_1116aff70_Ref(jule::Ref<_1116aff70_TypeKind> __param_elem) {
		this->self = jule::Ref<_1116aff70_Ref>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_1116aff70_Ref(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116aff70_Ref(void) { this->self = jule::Ref<_1116aff70_Ref>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind>);


	inline bool operator==(const _1116aff70_Ref &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1116aff70_Ref &_Src) const { return !this->operator==(_Src); }
};


struct _1116aff70_Slc: public _1116aff70_Kind {
	jule::Ref<_1116aff70_Slc> self{};

	jule::Ref<_1116aff70_TypeKind> _field_elem{jule::Ref<_1116aff70_TypeKind>()};


	_1116aff70_Slc(jule::Ref<_1116aff70_TypeKind> __param_elem) {
		this->self = jule::Ref<_1116aff70_Slc>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_1116aff70_Slc(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116aff70_Slc(void) { this->self = jule::Ref<_1116aff70_Slc>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind>);


	inline bool operator==(const _1116aff70_Slc &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1116aff70_Slc &_Src) const { return !this->operator==(_Src); }
};


struct _1116aff70_Tuple: public _1116aff70_Kind {
	jule::Ref<_1116aff70_Tuple> self{};

	jule::Slice<jule::Ref<_1116aff70_TypeKind>> _field_types{jule::Slice<jule::Ref<_1116aff70_TypeKind>>()};


	_1116aff70_Tuple(jule::Slice<jule::Ref<_1116aff70_TypeKind>> __param_types) {
		this->self = jule::Ref<_1116aff70_Tuple>::make(this, nullptr);

		this->_field_types = __param_types;
	}

	~_1116aff70_Tuple(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116aff70_Tuple(void) { this->self = jule::Ref<_1116aff70_Tuple>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind>);


	inline bool operator==(const _1116aff70_Tuple &_Src) const {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _1116aff70_Tuple &_Src) const { return !this->operator==(_Src); }
};


struct _1116aff70_Map: public _1116aff70_Kind {
	jule::Ref<_1116aff70_Map> self{};

	jule::Ref<_1116aff70_TypeKind> _field_key{jule::Ref<_1116aff70_TypeKind>()};
	jule::Ref<_1116aff70_TypeKind> _field_val{jule::Ref<_1116aff70_TypeKind>()};


	_1116aff70_Map(jule::Ref<_1116aff70_TypeKind> __param_key, jule::Ref<_1116aff70_TypeKind> __param_val) {
		this->self = jule::Ref<_1116aff70_Map>::make(this, nullptr);

		this->_field_key = __param_key;
		this->_field_val = __param_val;
	}

	~_1116aff70_Map(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116aff70_Map(void) { this->self = jule::Ref<_1116aff70_Map>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind>);


	inline bool operator==(const _1116aff70_Map &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _1116aff70_Map &_Src) const { return !this->operator==(_Src); }
};


struct _1116aff70_Arr: public _1116aff70_Kind {
	jule::Ref<_1116aff70_Arr> self{};

	jule::Bool _field_auto{jule::Bool()};
	jule::Int _field_n{jule::Int()};
	jule::Ref<_1116aff70_TypeKind> _field_elem{jule::Ref<_1116aff70_TypeKind>()};


	_1116aff70_Arr(jule::Bool __param_auto, jule::Int __param_n, jule::Ref<_1116aff70_TypeKind> __param_elem) {
		this->self = jule::Ref<_1116aff70_Arr>::make(this, nullptr);

		this->_field_auto = __param_auto;
		this->_field_n = __param_n;
		this->_field_elem = __param_elem;
	}

	~_1116aff70_Arr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116aff70_Arr(void) { this->self = jule::Ref<_1116aff70_Arr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind>);


	inline bool operator==(const _1116aff70_Arr &_Src) const {
		return 
			this->_field_auto == _Src._field_auto &&
			this->_field_n == _Src._field_n &&
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1116aff70_Arr &_Src) const { return !this->operator==(_Src); }
};


struct _1116aff70_Ptr: public _1116aff70_Kind {
	jule::Ref<_1116aff70_Ptr> self{};

	jule::Ref<_1116aff70_TypeKind> _field_elem{jule::Ref<_1116aff70_TypeKind>()};


	_1116aff70_Ptr(jule::Ref<_1116aff70_TypeKind> __param_elem) {
		this->self = jule::Ref<_1116aff70_Ptr>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_1116aff70_Ptr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116aff70_Ptr(void) { this->self = jule::Ref<_1116aff70_Ptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _1116aff70_Ptr &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1116aff70_Ptr &_Src) const { return !this->operator==(_Src); }
};


struct _1116aff70_Referencer {
	jule::Ref<_1116aff70_Referencer> self{};

	jule::Str _field_ident{jule::Str()};
	jule::Any _field_owner{jule::Any()};
	jule::Slice<jule::Any>* _field_refs{nullptr};


	_1116aff70_Referencer(jule::Str __param_ident, jule::Any __param_owner, jule::Slice<jule::Any>* __param_refs) {
		this->self = jule::Ref<_1116aff70_Referencer>::make(this, nullptr);

		this->_field_ident = __param_ident;
		this->_field_owner = __param_owner;
		this->_field_refs = __param_refs;
	}

	~_1116aff70_Referencer(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116aff70_Referencer(void) { this->self = jule::Ref<_1116aff70_Referencer>::make(this, nullptr); }

	inline bool operator==(const _1116aff70_Referencer &_Src) const {
		return 
			this->_field_ident == _Src._field_ident &&
			this->_field_owner == _Src._field_owner &&
			this->_field_refs == _Src._field_refs;
	}

	inline bool operator!=(const _1116aff70_Referencer &_Src) const { return !this->operator==(_Src); }
};


struct _110194230_PlainImporter: public _110e4edc0_Importer {
	jule::Ref<_110194230_PlainImporter> self{};

	jule::Slice<jule::Ref<_110e4edc0_ImportInfo>> _field_all_packages{jule::Slice<jule::Ref<_110e4edc0_ImportInfo>>()};


	_110194230_PlainImporter(jule::Slice<jule::Ref<_110e4edc0_ImportInfo>> __param_all_packages) {
		this->self = jule::Ref<_110194230_PlainImporter>::make(this, nullptr);

		this->_field_all_packages = __param_all_packages;
	}

	~_110194230_PlainImporter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110194230_PlainImporter(void) { this->self = jule::Ref<_110194230_PlainImporter>::make(this, nullptr); }

	inline jule::Ref<_110e4edc0_ImportInfo> _method_get_import(jule::Str);


	inline std::tuple<jule::Slice<jule::Ref<_1104fada0_Ast>>,jule::Slice<_127e05da0_Log>> _method_import_package(jule::Str);


	inline void _method_imported(jule::Ref<_110e4edc0_ImportInfo>);


	inline bool operator==(const _110194230_PlainImporter &_Src) const {
		return 
			this->_field_all_packages == _Src._field_all_packages;
	}

	inline bool operator!=(const _110194230_PlainImporter &_Src) const { return !this->operator==(_Src); }
};


struct _110254280_IR {
	jule::Ref<_110254280_IR> self{};

	jule::Slice<jule::Str> _field_passes{jule::Slice<jule::Str>()};
	jule::Ref<_110e4edc0_Package> _field_main{jule::Ref<_110e4edc0_Package>()};
	jule::Slice<jule::Ref<_110e4edc0_ImportInfo>> _field_used{jule::Slice<jule::Ref<_110e4edc0_ImportInfo>>()};


	_110254280_IR(jule::Slice<jule::Str> __param_passes, jule::Ref<_110e4edc0_Package> __param_main, jule::Slice<jule::Ref<_110e4edc0_ImportInfo>> __param_used) {
		this->self = jule::Ref<_110254280_IR>::make(this, nullptr);

		this->_field_passes = __param_passes;
		this->_field_main = __param_main;
		this->_field_used = __param_used;
	}

	~_110254280_IR(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110254280_IR(void) { this->self = jule::Ref<_110254280_IR>::make(this, nullptr); }

	static inline std::tuple<jule::Ref<_110254280_IR>,jule::Slice<_127e05da0_Log>> _static_method_build(jule::Str);


	inline void _method_append_structs(jule::Ref<_110e4edc0_Package>,jule::Slice<jule::Ref<_1109372e0_Struct>>&);


	inline jule::Slice<jule::Ref<_1109372e0_Struct>> _method_get_all_structures(void);


	inline void _method_append_vars(jule::Ref<_110e4edc0_Package>,jule::Slice<jule::Ref<_110e92c80_Var>>&);


	inline jule::Slice<jule::Ref<_110e92c80_Var>> _method_get_all_variables(void);


	inline bool operator==(const _110254280_IR &_Src) const {
		return 
			this->_field_passes == _Src._field_passes &&
			this->_field_main == _Src._field_main &&
			this->_field_used == _Src._field_used;
	}

	inline bool operator!=(const _110254280_IR &_Src) const { return !this->operator==(_Src); }
};


struct _1102a20b0_ScopeDeadCode {
	jule::Ref<_1102a20b0_ScopeDeadCode> self{};

	jule::Ref<_1102a20b0_ScopeDeadCode> _field_parent{jule::Ref<_1102a20b0_ScopeDeadCode>()};
	jule::Ref<_110af2660_Scope> _field_s{jule::Ref<_110af2660_Scope>()};
	_1108ddf20_Vector_8* _field_stmts{nullptr};
	jule::Int _field_i{jule::Int()};


	_1102a20b0_ScopeDeadCode(jule::Ref<_1102a20b0_ScopeDeadCode> __param_parent, jule::Ref<_110af2660_Scope> __param_s, _1108ddf20_Vector_8* __param_stmts, jule::Int __param_i) {
		this->self = jule::Ref<_1102a20b0_ScopeDeadCode>::make(this, nullptr);

		this->_field_parent = __param_parent;
		this->_field_s = __param_s;
		this->_field_stmts = __param_stmts;
		this->_field_i = __param_i;
	}

	~_1102a20b0_ScopeDeadCode(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1102a20b0_ScopeDeadCode(void) { this->self = jule::Ref<_1102a20b0_ScopeDeadCode>::make(this, nullptr); }

	inline void _method_optimize_child(jule::Ref<_110af2660_Scope>);


	inline void _method_eliminate_followed(void);


	inline void _method_optimize_stmt(jule::Any);


	inline void _method_optimize_stmts(void);


	inline bool operator==(const _1102a20b0_ScopeDeadCode &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_s == _Src._field_s &&
			this->_field_stmts == _Src._field_stmts &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _1102a20b0_ScopeDeadCode &_Src) const { return !this->operator==(_Src); }
};


struct _1114d55f0_IndexRangeSetter: public _1114d55f0_RangeSetter {
	jule::Ref<_1114d55f0_IndexRangeSetter> self{};

	~_1114d55f0_IndexRangeSetter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1114d55f0_IndexRangeSetter(void) { this->self = jule::Ref<_1114d55f0_IndexRangeSetter>::make(this, nullptr); }

	inline jule::Str _method_setup_vars(jule::Ref<_110e92c80_Var>,jule::Ref<_110e92c80_Var>);


	inline jule::Str _method_next_steps(jule::Ref<_110e92c80_Var>,jule::Ref<_110e92c80_Var>,jule::Str);


	inline bool operator==(const _1114d55f0_IndexRangeSetter &_Src) const { return true; }

	inline bool operator!=(const _1114d55f0_IndexRangeSetter &_Src) const { return !this->operator==(_Src); }
};


struct _1114d55f0_MapRangeSetter: public _1114d55f0_RangeSetter {
	jule::Ref<_1114d55f0_MapRangeSetter> self{};

	~_1114d55f0_MapRangeSetter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1114d55f0_MapRangeSetter(void) { this->self = jule::Ref<_1114d55f0_MapRangeSetter>::make(this, nullptr); }

	inline jule::Str _method_setup_vars(jule::Ref<_110e92c80_Var>,jule::Ref<_110e92c80_Var>);


	inline jule::Str _method_next_steps(jule::Ref<_110e92c80_Var>,jule::Ref<_110e92c80_Var>,jule::Str);


	inline bool operator==(const _1114d55f0_MapRangeSetter &_Src) const { return true; }

	inline bool operator!=(const _1114d55f0_MapRangeSetter &_Src) const { return !this->operator==(_Src); }
};


struct _111b4cab0_OrderedDecls {
	jule::Ref<_111b4cab0_OrderedDecls> self{};

	jule::Slice<jule::Ref<_1109372e0_Struct>> _field_structs{jule::Slice<jule::Ref<_1109372e0_Struct>>()};
	jule::Slice<jule::Ref<_110e92c80_Var>> _field_globals{jule::Slice<jule::Ref<_110e92c80_Var>>()};


	_111b4cab0_OrderedDecls(jule::Slice<jule::Ref<_1109372e0_Struct>> __param_structs, jule::Slice<jule::Ref<_110e92c80_Var>> __param_globals) {
		this->self = jule::Ref<_111b4cab0_OrderedDecls>::make(this, nullptr);

		this->_field_structs = __param_structs;
		this->_field_globals = __param_globals;
	}

	~_111b4cab0_OrderedDecls(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111b4cab0_OrderedDecls(void) { this->self = jule::Ref<_111b4cab0_OrderedDecls>::make(this, nullptr); }

	inline bool operator==(const _111b4cab0_OrderedDecls &_Src) const {
		return 
			this->_field_structs == _Src._field_structs &&
			this->_field_globals == _Src._field_globals;
	}

	inline bool operator!=(const _111b4cab0_OrderedDecls &_Src) const { return !this->operator==(_Src); }
};


struct _1116aff70_TypeChecker {
	jule::Ref<_1116aff70_TypeChecker> self{};

	jule::Ref<_110e92bc0_Sema> _field_s{jule::Ref<_110e92bc0_Sema>()};
	jule::Trait<_111732860_Lookup> _field_lookup{jule::Trait<_111732860_Lookup>()};
	jule::Ref<_1116aff70_Referencer> _field_referencer{jule::Ref<_1116aff70_Referencer>()};
	_1106ec050_Token _field_error_token{_1106ec050_Token()};
	jule::Slice<jule::Ref<_11054f670_GenericDecl>> _field_ignore_generics{jule::Slice<jule::Ref<_11054f670_GenericDecl>>()};
	jule::Slice<jule::Ref<_1116aff70_TypeAlias>> _field_use_generics{jule::Slice<jule::Ref<_1116aff70_TypeAlias>>()};
	jule::Bool _field_not_plain{jule::Bool()};


	_1116aff70_TypeChecker(jule::Ref<_110e92bc0_Sema> __param_s, jule::Trait<_111732860_Lookup> __param_lookup, jule::Ref<_1116aff70_Referencer> __param_referencer, _1106ec050_Token __param_error_token, jule::Slice<jule::Ref<_11054f670_GenericDecl>> __param_ignore_generics, jule::Slice<jule::Ref<_1116aff70_TypeAlias>> __param_use_generics, jule::Bool __param_not_plain) {
		this->self = jule::Ref<_1116aff70_TypeChecker>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_lookup = __param_lookup;
		this->_field_referencer = __param_referencer;
		this->_field_error_token = __param_error_token;
		this->_field_ignore_generics = __param_ignore_generics;
		this->_field_use_generics = __param_use_generics;
		this->_field_not_plain = __param_not_plain;
	}

	~_1116aff70_TypeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116aff70_TypeChecker(void) { this->self = jule::Ref<_1116aff70_TypeChecker>::make(this, nullptr); }

	inline void _method_push_err(_1106ec050_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Ref<_1116aff70_Prim> _method_build_prim(jule::Ref<_11054f670_IdentTypeDecl>);


	inline void _method_push_cycle_error(jule::Any,jule::Any,jule::Str&);


	inline jule::Bool _method_are_equals_cross_cycle_data_0(jule::Any,jule::Any);
	inline jule::Bool _method_are_equals_cross_cycle_data_1(jule::Any,jule::Any);


	inline jule::Bool _method_check_cross_cycle(jule::Any,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ref<_11054f670_IdentTypeDecl>,jule::Any);


	inline jule::Trait<_1116aff70_Kind> _method_from_type_alias(jule::Ref<_11054f670_IdentTypeDecl>,jule::Ref<_1116aff70_TypeAlias>);


	inline jule::Ref<_110e453c0_Enum> _method_from_enum(jule::Ref<_11054f670_IdentTypeDecl>,jule::Ref<_110e453c0_Enum>);


	inline jule::Bool _method_check_struct_ins(jule::Ref<_1109372e0_StructIns>,_1106ec050_Token);


	inline void _method_append_used_struct_reference(jule::Ref<_1109372e0_Struct>);


	inline jule::Ref<_1109372e0_StructIns> _method_from_struct(jule::Ref<_11054f670_IdentTypeDecl>,jule::Ref<_1109372e0_Struct>);


	inline jule::Trait<_1116aff70_Kind> _method_get_def(jule::Ref<_11054f670_IdentTypeDecl>);


	inline jule::Trait<_1116aff70_Kind> _method_build_ident(jule::Ref<_11054f670_IdentTypeDecl>);


	inline jule::Ref<_1116aff70_Ref> _method_build_ref_from_type(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Ref<_1116aff70_Ref> _method_build_ref(jule::Ref<_11054f670_RefTypeDecl>);


	inline jule::Ref<_1116aff70_Ptr> _method_build_ptr_from_type(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Ref<_1116aff70_Ptr> _method_build_ptr(jule::Ref<_11054f670_PtrTypeDecl>);


	inline jule::Ref<_1116aff70_Slc> _method_build_slc(jule::Ref<_11054f670_SlcTypeDecl>);


	inline jule::Ref<_1116aff70_Arr> _method_build_arr(jule::Ref<_11054f670_ArrTypeDecl>);


	inline jule::Ref<_1116aff70_Map> _method_build_map(jule::Ref<_11054f670_MapTypeDecl>);


	inline jule::Ref<_1116aff70_Tuple> _method_build_tuple(jule::Ref<_11054f670_TupleTypeDecl>);


	inline jule::Bool _method_check_fn_types(jule::Ref<_11072eb20_FnIns>);


	inline jule::Ref<_11072eb20_FnIns> _method_build_fn(jule::Ref<_11054f670_FnDecl>);


	inline jule::Trait<_1116aff70_Kind> _method_build_by_namespace(jule::Ref<_11054f670_NamespaceTypeDecl>);


	inline jule::Ref<_1116aff70_TypeKind> _method_build(jule::Any);


	inline jule::Ref<_1116aff70_TypeKind> _method_check_decl(jule::Ref<_11054f670_TypeDecl>);


	inline void _method_check(jule::Ref<_1116aff70_TypeSymbol>);


	inline bool operator==(const _1116aff70_TypeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_referencer == _Src._field_referencer &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_ignore_generics == _Src._field_ignore_generics &&
			this->_field_use_generics == _Src._field_use_generics &&
			this->_field_not_plain == _Src._field_not_plain;
	}

	inline bool operator!=(const _1116aff70_TypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1116aff70_TypeAlias {
	jule::Ref<_1116aff70_TypeAlias> self{};

	jule::Ref<_11054f670_ScopeTree> _field_scope{jule::Ref<_11054f670_ScopeTree>()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_used{jule::Bool()};
	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1116aff70_TypeSymbol> _field_kind{jule::Ref<_1116aff70_TypeSymbol>()};
	jule::Str _field_doc{jule::Str()};
	jule::Slice<jule::Any> _field_refers{jule::Slice<jule::Any>()};


	_1116aff70_TypeAlias(jule::Ref<_11054f670_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_used, _1106ec050_Token __param_token, jule::Str __param_ident, jule::Ref<_1116aff70_TypeSymbol> __param_kind, jule::Str __param_doc, jule::Slice<jule::Any> __param_refers) {
		this->self = jule::Ref<_1116aff70_TypeAlias>::make(this, nullptr);

		this->_field_scope = __param_scope;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_used = __param_used;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
		this->_field_doc = __param_doc;
		this->_field_refers = __param_refers;
	}

	~_1116aff70_TypeAlias(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116aff70_TypeAlias(void) { this->self = jule::Ref<_1116aff70_TypeAlias>::make(this, nullptr); }

	inline bool operator==(const _1116aff70_TypeAlias &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_used == _Src._field_used &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc == _Src._field_doc &&
			this->_field_refers == _Src._field_refers;
	}

	inline bool operator!=(const _1116aff70_TypeAlias &_Src) const { return !this->operator==(_Src); }
};


struct _1112d7f10_BinopSolver {
	jule::Ref<_1112d7f10_BinopSolver> self{};

	jule::Ref<_1112d7f10_Eval> _field_e{jule::Ref<_1112d7f10_Eval>()};
	jule::Ref<_1112d7f10_Data> _field_l{jule::Ref<_1112d7f10_Data>()};
	jule::Ref<_1112d7f10_Data> _field_r{jule::Ref<_1112d7f10_Data>()};
	_1106ec050_Token _field_op{_1106ec050_Token()};


	_1112d7f10_BinopSolver(jule::Ref<_1112d7f10_Eval> __param_e, jule::Ref<_1112d7f10_Data> __param_l, jule::Ref<_1112d7f10_Data> __param_r, _1106ec050_Token __param_op) {
		this->self = jule::Ref<_1112d7f10_BinopSolver>::make(this, nullptr);

		this->_field_e = __param_e;
		this->_field_l = __param_l;
		this->_field_r = __param_r;
		this->_field_op = __param_op;
	}

	~_1112d7f10_BinopSolver(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1112d7f10_BinopSolver(void) { this->self = jule::Ref<_1112d7f10_BinopSolver>::make(this, nullptr); }

	inline jule::Bool _method_check_type_compatibility(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_nil(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_enum(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_ptr(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_arr(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_slc(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_fn(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_struct(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_trait(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_any(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_bool(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_str(void);


	inline void _method_set_type_to_greater(void);


	inline void _method_check_mod_data(jule::Ref<_1112d7f10_Data>);


	inline void _method_mod(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_float(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_unsig_int(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_sig_int(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval_prim(void);


	inline jule::Ref<_1112d7f10_Data> _method_eval(void);


	inline void _method_assign_shift(jule::Ref<_1112d7f10_Data>,jule::F64);


	inline void _method_solve_const(jule::Ref<_1112d7f10_Data>);


	inline void _method_post_const(jule::Ref<_1112d7f10_Data>);


	inline void _method_prepare_data(jule::Ref<_1112d7f10_Data>);


	inline void _method_prepare_eval(void);


	inline void _method_check_data(jule::Ref<_1112d7f10_Data>);


	inline void _method_check_datas(void);


	inline jule::Ref<_1112d7f10_Data> _method_solve_explicit(jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>);


	inline jule::Ref<_1112d7f10_Data> _method_solve(jule::Ref<_11054f670_BinopExpr>);


	inline bool operator==(const _1112d7f10_BinopSolver &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1112d7f10_BinopSolver &_Src) const { return !this->operator==(_Src); }
};


struct _1111c0be0_RetTypeChecker {
	jule::Ref<_1111c0be0_RetTypeChecker> self{};

	jule::Ref<_110af2660_ScopeChecker> _field_sc{jule::Ref<_110af2660_ScopeChecker>()};
	jule::Ref<_11072eb20_FnIns> _field_f{jule::Ref<_11072eb20_FnIns>()};
	jule::Slice<jule::Ref<_1116aff70_TypeKind>> _field_types{jule::Slice<jule::Ref<_1116aff70_TypeKind>>()};
	jule::Slice<jule::Ref<_11054f670_Expr>> _field_exprs{jule::Slice<jule::Ref<_11054f670_Expr>>()};
	jule::Slice<jule::Ref<_110e92c80_Var>> _field_vars{jule::Slice<jule::Ref<_110e92c80_Var>>()};
	_1106ec050_Token _field_error_token{_1106ec050_Token()};
	jule::Any _field_model{jule::Any()};


	_1111c0be0_RetTypeChecker(jule::Ref<_110af2660_ScopeChecker> __param_sc, jule::Ref<_11072eb20_FnIns> __param_f, jule::Slice<jule::Ref<_1116aff70_TypeKind>> __param_types, jule::Slice<jule::Ref<_11054f670_Expr>> __param_exprs, jule::Slice<jule::Ref<_110e92c80_Var>> __param_vars, _1106ec050_Token __param_error_token, jule::Any __param_model) {
		this->self = jule::Ref<_1111c0be0_RetTypeChecker>::make(this, nullptr);

		this->_field_sc = __param_sc;
		this->_field_f = __param_f;
		this->_field_types = __param_types;
		this->_field_exprs = __param_exprs;
		this->_field_vars = __param_vars;
		this->_field_error_token = __param_error_token;
		this->_field_model = __param_model;
	}

	~_1111c0be0_RetTypeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1111c0be0_RetTypeChecker(void) { this->self = jule::Ref<_1111c0be0_RetTypeChecker>::make(this, nullptr); }

	inline void _method_prepare_types(void);


	inline void _method_prepare_exprs(jule::Ref<_11054f670_Expr>);


	inline void _method_ret_vars(void);


	inline void _method_check_exprs(void);


	inline jule::Bool _method_check(jule::Ref<_11054f670_Expr>);


	inline bool operator==(const _1111c0be0_RetTypeChecker &_Src) const {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_f == _Src._field_f &&
			this->_field_types == _Src._field_types &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_vars == _Src._field_vars &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_model == _Src._field_model;
	}

	inline bool operator!=(const _1111c0be0_RetTypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1111c0be0_FnCallArgChecker {
	jule::Ref<_1111c0be0_FnCallArgChecker> self{};

	jule::Ref<_1112d7f10_Eval> _field_e{jule::Ref<_1112d7f10_Eval>()};
	jule::Slice<jule::Ref<_11054f670_Expr>> _field_args{jule::Slice<jule::Ref<_11054f670_Expr>>()};
	_1106ec050_Token _field_error_token{_1106ec050_Token()};
	jule::Ref<_11072eb20_FnIns> _field_f{jule::Ref<_11072eb20_FnIns>()};
	jule::Bool _field_dynamic_annotation{jule::Bool()};
	jule::Slice<jule::Any> _field_arg_models{jule::Slice<jule::Any>()};


	_1111c0be0_FnCallArgChecker(jule::Ref<_1112d7f10_Eval> __param_e, jule::Slice<jule::Ref<_11054f670_Expr>> __param_args, _1106ec050_Token __param_error_token, jule::Ref<_11072eb20_FnIns> __param_f, jule::Bool __param_dynamic_annotation, jule::Slice<jule::Any> __param_arg_models) {
		this->self = jule::Ref<_1111c0be0_FnCallArgChecker>::make(this, nullptr);

		this->_field_e = __param_e;
		this->_field_args = __param_args;
		this->_field_error_token = __param_error_token;
		this->_field_f = __param_f;
		this->_field_dynamic_annotation = __param_dynamic_annotation;
		this->_field_arg_models = __param_arg_models;
	}

	~_1111c0be0_FnCallArgChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1111c0be0_FnCallArgChecker(void) { this->self = jule::Ref<_1111c0be0_FnCallArgChecker>::make(this, nullptr); }

	inline void _method_push_err_token(_1106ec050_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Ref<_11072eb20_ParamIns>> _method_get_params(void);


	inline jule::Bool _method_check_counts(jule::Slice<jule::Ref<_11072eb20_ParamIns>>);


	inline jule::Bool _method_check_arg(jule::Ref<_11072eb20_ParamIns>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);


	inline jule::Bool _method_push(jule::Ref<_11072eb20_ParamIns>,jule::Ref<_11054f670_Expr>);


	inline jule::Bool _method_push_variadic(jule::Ref<_11072eb20_ParamIns>,jule::Int);


	inline jule::Bool _method_check_args(jule::Slice<jule::Ref<_11072eb20_ParamIns>>);


	inline jule::Bool _method_check_dynamic_type_annotation(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1111c0be0_FnCallArgChecker &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_args == _Src._field_args &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_f == _Src._field_f &&
			this->_field_dynamic_annotation == _Src._field_dynamic_annotation &&
			this->_field_arg_models == _Src._field_arg_models;
	}

	inline bool operator!=(const _1111c0be0_FnCallArgChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1111c0be0_AssignTypeChecker {
	jule::Ref<_1111c0be0_AssignTypeChecker> self{};

	jule::Ref<_110e92bc0_Sema> _field_s{jule::Ref<_110e92bc0_Sema>()};
	jule::Ref<_1116aff70_TypeKind> _field_dest{jule::Ref<_1116aff70_TypeKind>()};
	jule::Ref<_1112d7f10_Data> _field_d{jule::Ref<_1112d7f10_Data>()};
	_1106ec050_Token _field_error_token{_1106ec050_Token()};
	jule::Bool _field_deref{jule::Bool()};


	_1111c0be0_AssignTypeChecker(jule::Ref<_110e92bc0_Sema> __param_s, jule::Ref<_1116aff70_TypeKind> __param_dest, jule::Ref<_1112d7f10_Data> __param_d, _1106ec050_Token __param_error_token, jule::Bool __param_deref) {
		this->self = jule::Ref<_1111c0be0_AssignTypeChecker>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_dest = __param_dest;
		this->_field_d = __param_d;
		this->_field_error_token = __param_error_token;
		this->_field_deref = __param_deref;
	}

	~_1111c0be0_AssignTypeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1111c0be0_AssignTypeChecker(void) { this->self = jule::Ref<_1111c0be0_AssignTypeChecker>::make(this, nullptr); }

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_validity(void);


	inline jule::Bool _method_check_const(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1111c0be0_AssignTypeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_d == _Src._field_d &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_deref == _Src._field_deref;
	}

	inline bool operator!=(const _1111c0be0_AssignTypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1111c0be0_TypeCompatibilityChecker {
	jule::Ref<_1111c0be0_TypeCompatibilityChecker> self{};

	jule::Ref<_110e92bc0_Sema> _field_s{jule::Ref<_110e92bc0_Sema>()};
	jule::Ref<_1116aff70_TypeKind> _field_dest{jule::Ref<_1116aff70_TypeKind>()};
	jule::Ref<_1116aff70_TypeKind> _field_src{jule::Ref<_1116aff70_TypeKind>()};
	_1106ec050_Token _field_error_token{_1106ec050_Token()};
	jule::Bool _field_ignore_any{jule::Bool()};
	jule::Bool _field_deref{jule::Bool()};
	jule::Bool _field_sub_check{jule::Bool()};


	_1111c0be0_TypeCompatibilityChecker(jule::Ref<_110e92bc0_Sema> __param_s, jule::Ref<_1116aff70_TypeKind> __param_dest, jule::Ref<_1116aff70_TypeKind> __param_src, _1106ec050_Token __param_error_token, jule::Bool __param_ignore_any, jule::Bool __param_deref, jule::Bool __param_sub_check) {
		this->self = jule::Ref<_1111c0be0_TypeCompatibilityChecker>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_dest = __param_dest;
		this->_field_src = __param_src;
		this->_field_error_token = __param_error_token;
		this->_field_ignore_any = __param_ignore_any;
		this->_field_deref = __param_deref;
		this->_field_sub_check = __param_sub_check;
	}

	~_1111c0be0_TypeCompatibilityChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1111c0be0_TypeCompatibilityChecker(void) { this->self = jule::Ref<_1111c0be0_TypeCompatibilityChecker>::make(this, nullptr); }

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_trait(void);


	inline jule::Bool _method_check_ref(void);


	inline jule::Bool _method_check_ptr(void);


	inline jule::Bool _method_check_slc(void);


	inline jule::Bool _method_check_arr(void);


	inline jule::Bool _method_check_map(void);


	inline jule::Bool _method_check_struct(void);


	inline jule::Bool _method_check_fn(void);


	inline jule::Bool _method_check_enum(void);


	inline jule::Bool _method_check_prim(void);


	inline jule::Bool _method_check_cpp_linked(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1111c0be0_TypeCompatibilityChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_src == _Src._field_src &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_ignore_any == _Src._field_ignore_any &&
			this->_field_deref == _Src._field_deref &&
			this->_field_sub_check == _Src._field_sub_check;
	}

	inline bool operator!=(const _1111c0be0_TypeCompatibilityChecker &_Src) const { return !this->operator==(_Src); }
};


struct _110e92c80_Var {
	jule::Ref<_110e92c80_Var> self{};

	jule::Ref<_110af2660_Scope> _field_scope{jule::Ref<_110af2660_Scope>()};
	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_constant{jule::Bool()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_used{jule::Bool()};
	jule::Bool _field_statically{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Str _field_doc{jule::Str()};
	jule::Ref<_1116aff70_TypeSymbol> _field_kind{jule::Ref<_1116aff70_TypeSymbol>()};
	jule::Ref<_1112d7f10_Value> _field_value{jule::Ref<_1112d7f10_Value>()};
	jule::Ref<_110d9ce90_ReferenceStack> _field_references{jule::Ref<_110d9ce90_ReferenceStack>()};
	jule::Slice<jule::Ref<_11054f670_Directive>> _field_directives{jule::Slice<jule::Ref<_11054f670_Directive>>()};
	jule::Slice<jule::Ref<_110e92c80_Var>> _field_depends{jule::Slice<jule::Ref<_110e92c80_Var>>()};


	_110e92c80_Var(jule::Ref<_110af2660_Scope> __param_scope, _1106ec050_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_constant, jule::Bool __param_mutable, jule::Bool __param_public, jule::Bool __param_used, jule::Bool __param_statically, jule::Bool __param_reference, jule::Str __param_doc, jule::Ref<_1116aff70_TypeSymbol> __param_kind, jule::Ref<_1112d7f10_Value> __param_value, jule::Ref<_110d9ce90_ReferenceStack> __param_references, jule::Slice<jule::Ref<_11054f670_Directive>> __param_directives, jule::Slice<jule::Ref<_110e92c80_Var>> __param_depends) {
		this->self = jule::Ref<_110e92c80_Var>::make(this, nullptr);

		this->_field_scope = __param_scope;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_constant = __param_constant;
		this->_field_mutable = __param_mutable;
		this->_field_public = __param_public;
		this->_field_used = __param_used;
		this->_field_statically = __param_statically;
		this->_field_reference = __param_reference;
		this->_field_doc = __param_doc;
		this->_field_kind = __param_kind;
		this->_field_value = __param_value;
		this->_field_references = __param_references;
		this->_field_directives = __param_directives;
		this->_field_depends = __param_depends;
	}

	~_110e92c80_Var(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e92c80_Var(void) { this->self = jule::Ref<_110e92c80_Var>::make(this, nullptr); }

	inline jule::Bool _method_is_initialized(void);


	inline jule::Bool _method_is_type_inferred(void);


	inline bool operator==(const _110e92c80_Var &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_constant == _Src._field_constant &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_public == _Src._field_public &&
			this->_field_used == _Src._field_used &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_doc == _Src._field_doc &&
			this->_field_kind == _Src._field_kind &&
			this->_field_value == _Src._field_value &&
			this->_field_references == _Src._field_references &&
			this->_field_directives == _Src._field_directives &&
			this->_field_depends == _Src._field_depends;
	}

	inline bool operator!=(const _110e92c80_Var &_Src) const { return !this->operator==(_Src); }
};


struct _110e4edc0_ImportInfo: public _111732860_Lookup {
	jule::Ref<_110e4edc0_ImportInfo> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_path{jule::Str()};
	jule::Str _field_link_path{jule::Str()};
	jule::Str _field_ident{jule::Str()};
	jule::Str _field_alias{jule::Str()};
	jule::Bool _field_duplicate{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_std{jule::Bool()};
	jule::Bool _field_import_all{jule::Bool()};
	jule::Slice<_1106ec050_Token> _field_selected{jule::Slice<_1106ec050_Token>()};
	jule::Ref<_110e4edc0_Package> _field_package{jule::Ref<_110e4edc0_Package>()};


	_110e4edc0_ImportInfo(_1106ec050_Token __param_token, jule::Str __param_path, jule::Str __param_link_path, jule::Str __param_ident, jule::Str __param_alias, jule::Bool __param_duplicate, jule::Bool __param_cpp_linked, jule::Bool __param_std, jule::Bool __param_import_all, jule::Slice<_1106ec050_Token> __param_selected, jule::Ref<_110e4edc0_Package> __param_package) {
		this->self = jule::Ref<_110e4edc0_ImportInfo>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_path = __param_path;
		this->_field_link_path = __param_link_path;
		this->_field_ident = __param_ident;
		this->_field_alias = __param_alias;
		this->_field_duplicate = __param_duplicate;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_std = __param_std;
		this->_field_import_all = __param_import_all;
		this->_field_selected = __param_selected;
		this->_field_package = __param_package;
	}

	~_110e4edc0_ImportInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4edc0_ImportInfo(void) { this->self = jule::Ref<_110e4edc0_ImportInfo>::make(this, nullptr); }

	inline jule::Ref<_110e4edc0_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_110e4edc0_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)>);


	inline jule::Ref<_110e92c80_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_1116aff70_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_1109372e0_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_11072eb20_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_110e3f160_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_110e453c0_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_lookupable(jule::Str);


	inline jule::Bool _method_exist_ident(jule::Str);


	inline bool operator==(const _110e4edc0_ImportInfo &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_path == _Src._field_path &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_ident == _Src._field_ident &&
			this->_field_alias == _Src._field_alias &&
			this->_field_duplicate == _Src._field_duplicate &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std &&
			this->_field_import_all == _Src._field_import_all &&
			this->_field_selected == _Src._field_selected &&
			this->_field_package == _Src._field_package;
	}

	inline bool operator!=(const _110e4edc0_ImportInfo &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_ScopeLabel {
	jule::Ref<_110af2660_ScopeLabel> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Ref<_110af2660_Label> _field_label{jule::Ref<_110af2660_Label>()};
	jule::Int _field_pos{jule::Int()};
	jule::Ref<_110af2660_ScopeChecker> _field_scope{jule::Ref<_110af2660_ScopeChecker>()};
	jule::Bool _field_used{jule::Bool()};


	_110af2660_ScopeLabel(_1106ec050_Token __param_token, jule::Ref<_110af2660_Label> __param_label, jule::Int __param_pos, jule::Ref<_110af2660_ScopeChecker> __param_scope, jule::Bool __param_used) {
		this->self = jule::Ref<_110af2660_ScopeLabel>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_label = __param_label;
		this->_field_pos = __param_pos;
		this->_field_scope = __param_scope;
		this->_field_used = __param_used;
	}

	~_110af2660_ScopeLabel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_ScopeLabel(void) { this->self = jule::Ref<_110af2660_ScopeLabel>::make(this, nullptr); }

	inline bool operator==(const _110af2660_ScopeLabel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label &&
			this->_field_pos == _Src._field_pos &&
			this->_field_scope == _Src._field_scope &&
			this->_field_used == _Src._field_used;
	}

	inline bool operator!=(const _110af2660_ScopeLabel &_Src) const { return !this->operator==(_Src); }
};


struct _110e4c050_Impl {
	jule::Ref<_110e4c050_Impl> self{};

	_1106ec050_Token _field_base{_1106ec050_Token()};
	_1106ec050_Token _field_dest{_1106ec050_Token()};
	jule::Slice<jule::Ref<_11072eb20_Fn>> _field_methods{jule::Slice<jule::Ref<_11072eb20_Fn>>()};


	_110e4c050_Impl(_1106ec050_Token __param_base, _1106ec050_Token __param_dest, jule::Slice<jule::Ref<_11072eb20_Fn>> __param_methods) {
		this->self = jule::Ref<_110e4c050_Impl>::make(this, nullptr);

		this->_field_base = __param_base;
		this->_field_dest = __param_dest;
		this->_field_methods = __param_methods;
	}

	~_110e4c050_Impl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e4c050_Impl(void) { this->self = jule::Ref<_110e4c050_Impl>::make(this, nullptr); }

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _110e4c050_Impl &_Src) const {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _110e4c050_Impl &_Src) const { return !this->operator==(_Src); }
};


struct _110e453c0_Enum: public _1116aff70_Kind {
	jule::Ref<_110e453c0_Enum> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Bool _field_public{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1116aff70_TypeSymbol> _field_kind{jule::Ref<_1116aff70_TypeSymbol>()};
	jule::Slice<jule::Ref<_110e453c0_EnumItem>> _field_items{jule::Slice<jule::Ref<_110e453c0_EnumItem>>()};
	jule::Str _field_doc{jule::Str()};


	_110e453c0_Enum(_1106ec050_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ref<_1116aff70_TypeSymbol> __param_kind, jule::Slice<jule::Ref<_110e453c0_EnumItem>> __param_items, jule::Str __param_doc) {
		this->self = jule::Ref<_110e453c0_Enum>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_public = __param_public;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
		this->_field_items = __param_items;
		this->_field_doc = __param_doc;
	}

	~_110e453c0_Enum(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e453c0_Enum(void) { this->self = jule::Ref<_110e453c0_Enum>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Ref<_110e453c0_EnumItem> _method_find_item(jule::Str);


	inline bool operator==(const _110e453c0_Enum &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc == _Src._field_doc;
	}

	inline bool operator!=(const _110e453c0_Enum &_Src) const { return !this->operator==(_Src); }
};


struct _110e453c0_EnumItem {
	jule::Ref<_110e453c0_EnumItem> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1112d7f10_Value> _field_value{jule::Ref<_1112d7f10_Value>()};


	_110e453c0_EnumItem(_1106ec050_Token __param_token, jule::Str __param_ident, jule::Ref<_1112d7f10_Value> __param_value) {
		this->self = jule::Ref<_110e453c0_EnumItem>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_value = __param_value;
	}

	~_110e453c0_EnumItem(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e453c0_EnumItem(void) { this->self = jule::Ref<_110e453c0_EnumItem>::make(this, nullptr); }

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _110e453c0_EnumItem &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _110e453c0_EnumItem &_Src) const { return !this->operator==(_Src); }
};


struct _110e3f160_Trait: public _1116aff70_Kind {
	jule::Ref<_110e3f160_Trait> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_public{jule::Bool()};
	jule::Str _field_doc{jule::Str()};
	jule::Slice<jule::Ref<_11072eb20_Fn>> _field_methods{jule::Slice<jule::Ref<_11072eb20_Fn>>()};
	jule::Slice<jule::Ref<_1109372e0_Struct>> _field_implemented{jule::Slice<jule::Ref<_1109372e0_Struct>>()};


	_110e3f160_Trait(_1106ec050_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Str __param_doc, jule::Slice<jule::Ref<_11072eb20_Fn>> __param_methods, jule::Slice<jule::Ref<_1109372e0_Struct>> __param_implemented) {
		this->self = jule::Ref<_110e3f160_Trait>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_public = __param_public;
		this->_field_doc = __param_doc;
		this->_field_methods = __param_methods;
		this->_field_implemented = __param_implemented;
	}

	~_110e3f160_Trait(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110e3f160_Trait(void) { this->self = jule::Ref<_110e3f160_Trait>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1116aff70_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Ref<_11072eb20_Fn> _method_find_method(jule::Str);


	inline bool operator==(const _110e3f160_Trait &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_doc == _Src._field_doc &&
			this->_field_methods == _Src._field_methods &&
			this->_field_implemented == _Src._field_implemented;
	}

	inline bool operator!=(const _110e3f160_Trait &_Src) const { return !this->operator==(_Src); }
};


struct _110d9ce90_Pass {
	jule::Ref<_110d9ce90_Pass> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_text{jule::Str()};


	_110d9ce90_Pass(_1106ec050_Token __param_token, jule::Str __param_text) {
		this->self = jule::Ref<_110d9ce90_Pass>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_text = __param_text;
	}

	~_110d9ce90_Pass(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110d9ce90_Pass(void) { this->self = jule::Ref<_110d9ce90_Pass>::make(this, nullptr); }

	inline bool operator==(const _110d9ce90_Pass &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _110d9ce90_Pass &_Src) const { return !this->operator==(_Src); }
};


struct _11072eb20_Fn {
	jule::Ref<_11072eb20_Fn> self{};

	jule::Ref<_110e92bc0_Sema> _field_sema{jule::Ref<_110e92bc0_Sema>()};
	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Bool _field_global{jule::Bool()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_statically{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Slice<jule::Ref<_11054f670_Directive>> _field_directives{jule::Slice<jule::Ref<_11054f670_Directive>>()};
	jule::Str _field_doc{jule::Str()};
	jule::Ref<_11054f670_ScopeTree> _field_scope{jule::Ref<_11054f670_ScopeTree>()};
	jule::Slice<jule::Ref<_11054f670_GenericDecl>> _field_generics{jule::Slice<jule::Ref<_11054f670_GenericDecl>>()};
	jule::Ref<_11072eb20_RetType> _field_result{jule::Ref<_11072eb20_RetType>()};
	jule::Slice<jule::Ref<_11072eb20_Param>> _field_params{jule::Slice<jule::Ref<_11072eb20_Param>>()};
	jule::Ref<_1109372e0_Struct> _field_owner{jule::Ref<_1109372e0_Struct>()};
	jule::Slice<jule::Ref<_11072eb20_FnIns>> _field_instances{jule::Slice<jule::Ref<_11072eb20_FnIns>>()};


	_11072eb20_Fn(jule::Ref<_110e92bc0_Sema> __param_sema, _1106ec050_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Str __param_ident, jule::Slice<jule::Ref<_11054f670_Directive>> __param_directives, jule::Str __param_doc, jule::Ref<_11054f670_ScopeTree> __param_scope, jule::Slice<jule::Ref<_11054f670_GenericDecl>> __param_generics, jule::Ref<_11072eb20_RetType> __param_result, jule::Slice<jule::Ref<_11072eb20_Param>> __param_params, jule::Ref<_1109372e0_Struct> __param_owner, jule::Slice<jule::Ref<_11072eb20_FnIns>> __param_instances) {
		this->self = jule::Ref<_11072eb20_Fn>::make(this, nullptr);

		this->_field_sema = __param_sema;
		this->_field_token = __param_token;
		this->_field_global = __param_global;
		this->_field_unsafety = __param_unsafety;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_statically = __param_statically;
		this->_field_ident = __param_ident;
		this->_field_directives = __param_directives;
		this->_field_doc = __param_doc;
		this->_field_scope = __param_scope;
		this->_field_generics = __param_generics;
		this->_field_result = __param_result;
		this->_field_params = __param_params;
		this->_field_owner = __param_owner;
		this->_field_instances = __param_instances;
	}

	~_11072eb20_Fn(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11072eb20_Fn(void) { this->self = jule::Ref<_11072eb20_Fn>::make(this, nullptr); }

	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_method(void);


	inline jule::Bool _method_is_entry_point(void);


	inline jule::Bool _method_is_init(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_any_var(void);


	inline jule::Bool _method_parameters_uses_generics(void);


	inline jule::Bool _method_result_uses_generics(void);


	inline jule::Ref<_11072eb20_FnIns> _method_instance_force(void);


	inline jule::Ref<_11072eb20_FnIns> _method_instance(void);


	inline std::tuple<jule::Bool,jule::Int> _method_append_instance(jule::Ref<_11072eb20_FnIns>);


	inline bool operator==(const _11072eb20_Fn &_Src) const {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params &&
			this->_field_owner == _Src._field_owner &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _11072eb20_Fn &_Src) const { return !this->operator==(_Src); }
};


struct _11072eb20_Param {
	jule::Ref<_11072eb20_Param> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_variadic{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Ref<_1116aff70_TypeSymbol> _field_kind{jule::Ref<_1116aff70_TypeSymbol>()};
	jule::Str _field_ident{jule::Str()};


	_11072eb20_Param(_1106ec050_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ref<_1116aff70_TypeSymbol> __param_kind, jule::Str __param_ident) {
		this->self = jule::Ref<_11072eb20_Param>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_mutable = __param_mutable;
		this->_field_variadic = __param_variadic;
		this->_field_reference = __param_reference;
		this->_field_kind = __param_kind;
		this->_field_ident = __param_ident;
	}

	~_11072eb20_Param(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11072eb20_Param(void) { this->self = jule::Ref<_11072eb20_Param>::make(this, nullptr); }

	inline jule::Ref<_11072eb20_ParamIns> _method_instance(void);


	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _11072eb20_Param &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _11072eb20_Param &_Src) const { return !this->operator==(_Src); }
};


struct _1109372e0_Field {
	jule::Ref<_1109372e0_Field> self{};

	jule::Ref<_1109372e0_Struct> _field_owner{jule::Ref<_1109372e0_Struct>()};
	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1116aff70_TypeSymbol> _field_kind{jule::Ref<_1116aff70_TypeSymbol>()};


	_1109372e0_Field(jule::Ref<_1109372e0_Struct> __param_owner, _1106ec050_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ref<_1116aff70_TypeSymbol> __param_kind) {
		this->self = jule::Ref<_1109372e0_Field>::make(this, nullptr);

		this->_field_owner = __param_owner;
		this->_field_token = __param_token;
		this->_field_public = __param_public;
		this->_field_mutable = __param_mutable;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
	}

	~_1109372e0_Field(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1109372e0_Field(void) { this->self = jule::Ref<_1109372e0_Field>::make(this, nullptr); }

	inline jule::Ref<_1109372e0_FieldIns> _method_instance(void);


	inline bool operator==(const _1109372e0_Field &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1109372e0_Field &_Src) const { return !this->operator==(_Src); }
};


struct _110711f30_AssignInfo {
	jule::Ref<_110711f30_AssignInfo> self{};

	jule::Slice<_1106ec050_Token> _field_l{jule::Slice<_1106ec050_Token>()};
	jule::Slice<_1106ec050_Token> _field_r{jule::Slice<_1106ec050_Token>()};
	_1106ec050_Token _field_setter{_1106ec050_Token()};
	jule::Bool _field_ok{jule::Bool()};


	_110711f30_AssignInfo(jule::Slice<_1106ec050_Token> __param_l, jule::Slice<_1106ec050_Token> __param_r, _1106ec050_Token __param_setter, jule::Bool __param_ok) {
		this->self = jule::Ref<_110711f30_AssignInfo>::make(this, nullptr);

		this->_field_l = __param_l;
		this->_field_r = __param_r;
		this->_field_setter = __param_setter;
		this->_field_ok = __param_ok;
	}

	~_110711f30_AssignInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110711f30_AssignInfo(void) { this->self = jule::Ref<_110711f30_AssignInfo>::make(this, nullptr); }

	inline bool operator==(const _110711f30_AssignInfo &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_setter == _Src._field_setter &&
			this->_field_ok == _Src._field_ok;
	}

	inline bool operator!=(const _110711f30_AssignInfo &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_Impl {
	jule::Ref<_11054f670_Impl> self{};

	_1106ec050_Token _field_base{_1106ec050_Token()};
	_1106ec050_Token _field_dest{_1106ec050_Token()};
	jule::Slice<jule::Ref<_11054f670_FnDecl>> _field_methods{jule::Slice<jule::Ref<_11054f670_FnDecl>>()};


	_11054f670_Impl(_1106ec050_Token __param_base, _1106ec050_Token __param_dest, jule::Slice<jule::Ref<_11054f670_FnDecl>> __param_methods) {
		this->self = jule::Ref<_11054f670_Impl>::make(this, nullptr);

		this->_field_base = __param_base;
		this->_field_dest = __param_dest;
		this->_field_methods = __param_methods;
	}

	~_11054f670_Impl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_Impl(void) { this->self = jule::Ref<_11054f670_Impl>::make(this, nullptr); }

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _11054f670_Impl &_Src) const {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _11054f670_Impl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_TraitDecl {
	jule::Ref<_11054f670_TraitDecl> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_public{jule::Bool()};
	jule::Ref<_11054f670_CommentGroup> _field_doc_comments{jule::Ref<_11054f670_CommentGroup>()};
	jule::Slice<jule::Ref<_11054f670_FnDecl>> _field_methods{jule::Slice<jule::Ref<_11054f670_FnDecl>>()};


	_11054f670_TraitDecl(_1106ec050_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Ref<_11054f670_CommentGroup> __param_doc_comments, jule::Slice<jule::Ref<_11054f670_FnDecl>> __param_methods) {
		this->self = jule::Ref<_11054f670_TraitDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_public = __param_public;
		this->_field_doc_comments = __param_doc_comments;
		this->_field_methods = __param_methods;
	}

	~_11054f670_TraitDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_TraitDecl(void) { this->self = jule::Ref<_11054f670_TraitDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_TraitDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _11054f670_TraitDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_StructDecl {
	jule::Ref<_11054f670_StructDecl> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Slice<jule::Ref<_11054f670_FieldDecl>> _field_fields{jule::Slice<jule::Ref<_11054f670_FieldDecl>>()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Slice<jule::Ref<_11054f670_Directive>> _field_directives{jule::Slice<jule::Ref<_11054f670_Directive>>()};
	jule::Ref<_11054f670_CommentGroup> _field_doc_comments{jule::Ref<_11054f670_CommentGroup>()};
	jule::Slice<jule::Ref<_11054f670_GenericDecl>> _field_generics{jule::Slice<jule::Ref<_11054f670_GenericDecl>>()};


	_11054f670_StructDecl(_1106ec050_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ref<_11054f670_FieldDecl>> __param_fields, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ref<_11054f670_Directive>> __param_directives, jule::Ref<_11054f670_CommentGroup> __param_doc_comments, jule::Slice<jule::Ref<_11054f670_GenericDecl>> __param_generics) {
		this->self = jule::Ref<_11054f670_StructDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_fields = __param_fields;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_directives = __param_directives;
		this->_field_doc_comments = __param_doc_comments;
		this->_field_generics = __param_generics;
	}

	~_11054f670_StructDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_StructDecl(void) { this->self = jule::Ref<_11054f670_StructDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_StructDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _11054f670_StructDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_FieldDecl {
	jule::Ref<_11054f670_FieldDecl> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_11054f670_TypeDecl> _field_kind{jule::Ref<_11054f670_TypeDecl>()};


	_11054f670_FieldDecl(_1106ec050_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ref<_11054f670_TypeDecl> __param_kind) {
		this->self = jule::Ref<_11054f670_FieldDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_public = __param_public;
		this->_field_mutable = __param_mutable;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
	}

	~_11054f670_FieldDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_FieldDecl(void) { this->self = jule::Ref<_11054f670_FieldDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_FieldDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _11054f670_FieldDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_EnumDecl {
	jule::Ref<_11054f670_EnumDecl> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Bool _field_public{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_11054f670_TypeDecl> _field_kind{jule::Ref<_11054f670_TypeDecl>()};
	jule::Slice<jule::Ref<_11054f670_EnumItemDecl>> _field_items{jule::Slice<jule::Ref<_11054f670_EnumItemDecl>>()};
	jule::Ref<_11054f670_CommentGroup> _field_doc_comments{jule::Ref<_11054f670_CommentGroup>()};


	_11054f670_EnumDecl(_1106ec050_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ref<_11054f670_TypeDecl> __param_kind, jule::Slice<jule::Ref<_11054f670_EnumItemDecl>> __param_items, jule::Ref<_11054f670_CommentGroup> __param_doc_comments) {
		this->self = jule::Ref<_11054f670_EnumDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_public = __param_public;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
		this->_field_items = __param_items;
		this->_field_doc_comments = __param_doc_comments;
	}

	~_11054f670_EnumDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_EnumDecl(void) { this->self = jule::Ref<_11054f670_EnumDecl>::make(this, nullptr); }

	inline jule::Bool _method_default_typed(void);


	inline bool operator==(const _11054f670_EnumDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _11054f670_EnumDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_EnumItemDecl {
	jule::Ref<_11054f670_EnumItemDecl> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_11054f670_Expr> _field_expr{jule::Ref<_11054f670_Expr>()};


	_11054f670_EnumItemDecl(_1106ec050_Token __param_token, jule::Str __param_ident, jule::Ref<_11054f670_Expr> __param_expr) {
		this->self = jule::Ref<_11054f670_EnumItemDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_expr = __param_expr;
	}

	~_11054f670_EnumItemDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_EnumItemDecl(void) { this->self = jule::Ref<_11054f670_EnumItemDecl>::make(this, nullptr); }

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _11054f670_EnumItemDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11054f670_EnumItemDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_UseDecl {
	jule::Ref<_11054f670_UseDecl> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_link_path{jule::Str()};
	jule::Str _field_alias{jule::Str()};
	jule::Bool _field_full{jule::Bool()};
	jule::Slice<_1106ec050_Token> _field_selected{jule::Slice<_1106ec050_Token>()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_std{jule::Bool()};


	_11054f670_UseDecl(_1106ec050_Token __param_token, jule::Str __param_link_path, jule::Str __param_alias, jule::Bool __param_full, jule::Slice<_1106ec050_Token> __param_selected, jule::Bool __param_cpp_linked, jule::Bool __param_std) {
		this->self = jule::Ref<_11054f670_UseDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_link_path = __param_link_path;
		this->_field_alias = __param_alias;
		this->_field_full = __param_full;
		this->_field_selected = __param_selected;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_std = __param_std;
	}

	~_11054f670_UseDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_UseDecl(void) { this->self = jule::Ref<_11054f670_UseDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_UseDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_alias == _Src._field_alias &&
			this->_field_full == _Src._field_full &&
			this->_field_selected == _Src._field_selected &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std;
	}

	inline bool operator!=(const _11054f670_UseDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_Case {
	jule::Ref<_11054f670_Case> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Ref<_11054f670_ScopeTree> _field_scope{jule::Ref<_11054f670_ScopeTree>()};
	jule::Slice<jule::Ref<_11054f670_Expr>> _field_exprs{jule::Slice<jule::Ref<_11054f670_Expr>>()};


	_11054f670_Case(_1106ec050_Token __param_token, jule::Ref<_11054f670_ScopeTree> __param_scope, jule::Slice<jule::Ref<_11054f670_Expr>> __param_exprs) {
		this->self = jule::Ref<_11054f670_Case>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_scope = __param_scope;
		this->_field_exprs = __param_exprs;
	}

	~_11054f670_Case(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_Case(void) { this->self = jule::Ref<_11054f670_Case>::make(this, nullptr); }

	inline bool operator==(const _11054f670_Case &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _11054f670_Case &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_TypeAliasDecl {
	jule::Ref<_11054f670_TypeAliasDecl> self{};

	jule::Ref<_11054f670_ScopeTree> _field_scope{jule::Ref<_11054f670_ScopeTree>()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_11054f670_TypeDecl> _field_kind{jule::Ref<_11054f670_TypeDecl>()};
	jule::Ref<_11054f670_CommentGroup> _field_doc_comments{jule::Ref<_11054f670_CommentGroup>()};


	_11054f670_TypeAliasDecl(jule::Ref<_11054f670_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, _1106ec050_Token __param_token, jule::Str __param_ident, jule::Ref<_11054f670_TypeDecl> __param_kind, jule::Ref<_11054f670_CommentGroup> __param_doc_comments) {
		this->self = jule::Ref<_11054f670_TypeAliasDecl>::make(this, nullptr);

		this->_field_scope = __param_scope;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
		this->_field_doc_comments = __param_doc_comments;
	}

	~_11054f670_TypeAliasDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_TypeAliasDecl(void) { this->self = jule::Ref<_11054f670_TypeAliasDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_TypeAliasDecl &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _11054f670_TypeAliasDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_Else {
	jule::Ref<_11054f670_Else> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Ref<_11054f670_ScopeTree> _field_scope{jule::Ref<_11054f670_ScopeTree>()};


	_11054f670_Else(_1106ec050_Token __param_token, jule::Ref<_11054f670_ScopeTree> __param_scope) {
		this->self = jule::Ref<_11054f670_Else>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_scope = __param_scope;
	}

	~_11054f670_Else(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_Else(void) { this->self = jule::Ref<_11054f670_Else>::make(this, nullptr); }

	inline bool operator==(const _11054f670_Else &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _11054f670_Else &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_If {
	jule::Ref<_11054f670_If> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Ref<_11054f670_Expr> _field_expr{jule::Ref<_11054f670_Expr>()};
	jule::Ref<_11054f670_ScopeTree> _field_scope{jule::Ref<_11054f670_ScopeTree>()};


	_11054f670_If(_1106ec050_Token __param_token, jule::Ref<_11054f670_Expr> __param_expr, jule::Ref<_11054f670_ScopeTree> __param_scope) {
		this->self = jule::Ref<_11054f670_If>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
		this->_field_scope = __param_scope;
	}

	~_11054f670_If(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_If(void) { this->self = jule::Ref<_11054f670_If>::make(this, nullptr); }

	inline bool operator==(const _11054f670_If &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _11054f670_If &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_ContSt {
	jule::Ref<_11054f670_ContSt> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	_1106ec050_Token _field_label{_1106ec050_Token()};


	_11054f670_ContSt(_1106ec050_Token __param_token, _1106ec050_Token __param_label) {
		this->self = jule::Ref<_11054f670_ContSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_label = __param_label;
	}

	~_11054f670_ContSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_ContSt(void) { this->self = jule::Ref<_11054f670_ContSt>::make(this, nullptr); }

	inline bool operator==(const _11054f670_ContSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _11054f670_ContSt &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_BreakSt {
	jule::Ref<_11054f670_BreakSt> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	_1106ec050_Token _field_label{_1106ec050_Token()};


	_11054f670_BreakSt(_1106ec050_Token __param_token, _1106ec050_Token __param_label) {
		this->self = jule::Ref<_11054f670_BreakSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_label = __param_label;
	}

	~_11054f670_BreakSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_BreakSt(void) { this->self = jule::Ref<_11054f670_BreakSt>::make(this, nullptr); }

	inline bool operator==(const _11054f670_BreakSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _11054f670_BreakSt &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_VarDecl {
	jule::Ref<_11054f670_VarDecl> self{};

	jule::Ref<_11054f670_ScopeTree> _field_scope{jule::Ref<_11054f670_ScopeTree>()};
	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_constant{jule::Bool()};
	jule::Bool _field_statically{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Slice<jule::Ref<_11054f670_Directive>> _field_directives{jule::Slice<jule::Ref<_11054f670_Directive>>()};
	jule::Ref<_11054f670_CommentGroup> _field_doc_comments{jule::Ref<_11054f670_CommentGroup>()};
	jule::Ref<_11054f670_TypeDecl> _field_kind{jule::Ref<_11054f670_TypeDecl>()};
	jule::Ref<_11054f670_Expr> _field_expr{jule::Ref<_11054f670_Expr>()};


	_11054f670_VarDecl(jule::Ref<_11054f670_ScopeTree> __param_scope, _1106ec050_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_public, jule::Bool __param_mutable, jule::Bool __param_constant, jule::Bool __param_statically, jule::Bool __param_reference, jule::Slice<jule::Ref<_11054f670_Directive>> __param_directives, jule::Ref<_11054f670_CommentGroup> __param_doc_comments, jule::Ref<_11054f670_TypeDecl> __param_kind, jule::Ref<_11054f670_Expr> __param_expr) {
		this->self = jule::Ref<_11054f670_VarDecl>::make(this, nullptr);

		this->_field_scope = __param_scope;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_public = __param_public;
		this->_field_mutable = __param_mutable;
		this->_field_constant = __param_constant;
		this->_field_statically = __param_statically;
		this->_field_reference = __param_reference;
		this->_field_directives = __param_directives;
		this->_field_doc_comments = __param_doc_comments;
		this->_field_kind = __param_kind;
		this->_field_expr = __param_expr;
	}

	~_11054f670_VarDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_VarDecl(void) { this->self = jule::Ref<_11054f670_VarDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_VarDecl &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_constant == _Src._field_constant &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11054f670_VarDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_FnDecl {
	jule::Ref<_11054f670_FnDecl> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Bool _field_global{jule::Bool()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_statically{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Slice<jule::Ref<_11054f670_Directive>> _field_directives{jule::Slice<jule::Ref<_11054f670_Directive>>()};
	jule::Ref<_11054f670_CommentGroup> _field_doc_comments{jule::Ref<_11054f670_CommentGroup>()};
	jule::Ref<_11054f670_ScopeTree> _field_scope{jule::Ref<_11054f670_ScopeTree>()};
	jule::Slice<jule::Ref<_11054f670_GenericDecl>> _field_generics{jule::Slice<jule::Ref<_11054f670_GenericDecl>>()};
	jule::Ref<_11054f670_RetTypeDecl> _field_result{jule::Ref<_11054f670_RetTypeDecl>()};
	jule::Slice<jule::Ref<_11054f670_ParamDecl>> _field_params{jule::Slice<jule::Ref<_11054f670_ParamDecl>>()};


	_11054f670_FnDecl(_1106ec050_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Str __param_ident, jule::Slice<jule::Ref<_11054f670_Directive>> __param_directives, jule::Ref<_11054f670_CommentGroup> __param_doc_comments, jule::Ref<_11054f670_ScopeTree> __param_scope, jule::Slice<jule::Ref<_11054f670_GenericDecl>> __param_generics, jule::Ref<_11054f670_RetTypeDecl> __param_result, jule::Slice<jule::Ref<_11054f670_ParamDecl>> __param_params) {
		this->self = jule::Ref<_11054f670_FnDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_global = __param_global;
		this->_field_unsafety = __param_unsafety;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_statically = __param_statically;
		this->_field_ident = __param_ident;
		this->_field_directives = __param_directives;
		this->_field_doc_comments = __param_doc_comments;
		this->_field_scope = __param_scope;
		this->_field_generics = __param_generics;
		this->_field_result = __param_result;
		this->_field_params = __param_params;
	}

	~_11054f670_FnDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_FnDecl(void) { this->self = jule::Ref<_11054f670_FnDecl>::make(this, nullptr); }

	inline jule::Bool _method_is_anon(void);


	inline bool operator==(const _11054f670_FnDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params;
	}

	inline bool operator!=(const _11054f670_FnDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_ParamDecl {
	jule::Ref<_11054f670_ParamDecl> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_variadic{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Ref<_11054f670_TypeDecl> _field_kind{jule::Ref<_11054f670_TypeDecl>()};
	jule::Str _field_ident{jule::Str()};


	_11054f670_ParamDecl(_1106ec050_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ref<_11054f670_TypeDecl> __param_kind, jule::Str __param_ident) {
		this->self = jule::Ref<_11054f670_ParamDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_mutable = __param_mutable;
		this->_field_variadic = __param_variadic;
		this->_field_reference = __param_reference;
		this->_field_kind = __param_kind;
		this->_field_ident = __param_ident;
	}

	~_11054f670_ParamDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_ParamDecl(void) { this->self = jule::Ref<_11054f670_ParamDecl>::make(this, nullptr); }

	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _11054f670_ParamDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _11054f670_ParamDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_AssignLeft {
	jule::Ref<_11054f670_AssignLeft> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_11054f670_Expr> _field_expr{jule::Ref<_11054f670_Expr>()};


	_11054f670_AssignLeft(_1106ec050_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Str __param_ident, jule::Ref<_11054f670_Expr> __param_expr) {
		this->self = jule::Ref<_11054f670_AssignLeft>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_mutable = __param_mutable;
		this->_field_reference = __param_reference;
		this->_field_ident = __param_ident;
		this->_field_expr = __param_expr;
	}

	~_11054f670_AssignLeft(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_AssignLeft(void) { this->self = jule::Ref<_11054f670_AssignLeft>::make(this, nullptr); }

	inline bool operator==(const _11054f670_AssignLeft &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11054f670_AssignLeft &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_GotoSt {
	jule::Ref<_11054f670_GotoSt> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	_1106ec050_Token _field_label{_1106ec050_Token()};


	_11054f670_GotoSt(_1106ec050_Token __param_token, _1106ec050_Token __param_label) {
		this->self = jule::Ref<_11054f670_GotoSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_label = __param_label;
	}

	~_11054f670_GotoSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_GotoSt(void) { this->self = jule::Ref<_11054f670_GotoSt>::make(this, nullptr); }

	inline bool operator==(const _11054f670_GotoSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _11054f670_GotoSt &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_GenericDecl {
	jule::Ref<_11054f670_GenericDecl> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};


	_11054f670_GenericDecl(_1106ec050_Token __param_token, jule::Str __param_ident) {
		this->self = jule::Ref<_11054f670_GenericDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
	}

	~_11054f670_GenericDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_GenericDecl(void) { this->self = jule::Ref<_11054f670_GenericDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_GenericDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _11054f670_GenericDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_FnCallExpr {
	jule::Ref<_11054f670_FnCallExpr> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Ref<_11054f670_Expr> _field_expr{jule::Ref<_11054f670_Expr>()};
	jule::Slice<jule::Ref<_11054f670_TypeDecl>> _field_generics{jule::Slice<jule::Ref<_11054f670_TypeDecl>>()};
	jule::Slice<jule::Ref<_11054f670_Expr>> _field_args{jule::Slice<jule::Ref<_11054f670_Expr>>()};
	jule::Bool _field_concurrent{jule::Bool()};


	_11054f670_FnCallExpr(_1106ec050_Token __param_token, jule::Ref<_11054f670_Expr> __param_expr, jule::Slice<jule::Ref<_11054f670_TypeDecl>> __param_generics, jule::Slice<jule::Ref<_11054f670_Expr>> __param_args, jule::Bool __param_concurrent) {
		this->self = jule::Ref<_11054f670_FnCallExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
		this->_field_generics = __param_generics;
		this->_field_args = __param_args;
		this->_field_concurrent = __param_concurrent;
	}

	~_11054f670_FnCallExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_FnCallExpr(void) { this->self = jule::Ref<_11054f670_FnCallExpr>::make(this, nullptr); }

	inline bool operator==(const _11054f670_FnCallExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_generics == _Src._field_generics &&
			this->_field_args == _Src._field_args &&
			this->_field_concurrent == _Src._field_concurrent;
	}

	inline bool operator!=(const _11054f670_FnCallExpr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_Expr {
	jule::Ref<_11054f670_Expr> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Any _field_kind{jule::Any()};


	_11054f670_Expr(_1106ec050_Token __param_token, jule::Any __param_kind) {
		this->self = jule::Ref<_11054f670_Expr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_kind = __param_kind;
	}

	~_11054f670_Expr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_Expr(void) { this->self = jule::Ref<_11054f670_Expr>::make(this, nullptr); }

	inline jule::Bool _method_is_fn_call(void);


	inline bool operator==(const _11054f670_Expr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _11054f670_Expr &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_IdentTypeDecl {
	jule::Ref<_11054f670_IdentTypeDecl> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Slice<jule::Ref<_11054f670_TypeDecl>> _field_generics{jule::Slice<jule::Ref<_11054f670_TypeDecl>>()};


	_11054f670_IdentTypeDecl(_1106ec050_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Slice<jule::Ref<_11054f670_TypeDecl>> __param_generics) {
		this->self = jule::Ref<_11054f670_IdentTypeDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_generics = __param_generics;
	}

	~_11054f670_IdentTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_IdentTypeDecl(void) { this->self = jule::Ref<_11054f670_IdentTypeDecl>::make(this, nullptr); }

	inline jule::Bool _method_is_prim(void);


	inline bool operator==(const _11054f670_IdentTypeDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _11054f670_IdentTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_TypeDecl {
	jule::Ref<_11054f670_TypeDecl> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Any _field_kind{jule::Any()};


	_11054f670_TypeDecl(_1106ec050_Token __param_token, jule::Any __param_kind) {
		this->self = jule::Ref<_11054f670_TypeDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_kind = __param_kind;
	}

	~_11054f670_TypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_TypeDecl(void) { this->self = jule::Ref<_11054f670_TypeDecl>::make(this, nullptr); }

	inline bool operator==(const _11054f670_TypeDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _11054f670_TypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_Directive {
	jule::Ref<_11054f670_Directive> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_tag{jule::Str()};
	jule::Slice<jule::Str> _field_args{jule::Slice<jule::Str>()};


	_11054f670_Directive(_1106ec050_Token __param_token, jule::Str __param_tag, jule::Slice<jule::Str> __param_args) {
		this->self = jule::Ref<_11054f670_Directive>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_tag = __param_tag;
		this->_field_args = __param_args;
	}

	~_11054f670_Directive(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_Directive(void) { this->self = jule::Ref<_11054f670_Directive>::make(this, nullptr); }

	inline bool operator==(const _11054f670_Directive &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_tag == _Src._field_tag &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _11054f670_Directive &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_Comment {
	jule::Ref<_11054f670_Comment> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_text{jule::Str()};


	_11054f670_Comment(_1106ec050_Token __param_token, jule::Str __param_text) {
		this->self = jule::Ref<_11054f670_Comment>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_text = __param_text;
	}

	~_11054f670_Comment(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_Comment(void) { this->self = jule::Ref<_11054f670_Comment>::make(this, nullptr); }

	inline jule::Bool _method_is_directive(void);


	inline bool operator==(const _11054f670_Comment &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _11054f670_Comment &_Src) const { return !this->operator==(_Src); }
};


struct _11054f670_Node {
	jule::Ref<_11054f670_Node> self{};

	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Any _field_data{jule::Any()};


	_11054f670_Node(_1106ec050_Token __param_token, jule::Any __param_data) {
		this->self = jule::Ref<_11054f670_Node>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_data = __param_data;
	}

	~_11054f670_Node(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054f670_Node(void) { this->self = jule::Ref<_11054f670_Node>::make(this, nullptr); }

	inline jule::Bool _method_is_decl(void);


	inline jule::Bool _method_is_comment(void);


	inline jule::Bool _method_is_impl(void);


	inline jule::Bool _method_is_use_decl(void);


	inline bool operator==(const _11054f670_Node &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _11054f670_Node &_Src) const { return !this->operator==(_Src); }
};


struct _1108ddf20_Vector_0 {
	jule::Ref<_1108ddf20_Vector_0> self{};

	StdJuleVectorBuffer<_1106ec050_Token> _field__buffer{StdJuleVectorBuffer<_1106ec050_Token>()};


	_1108ddf20_Vector_0(StdJuleVectorBuffer<_1106ec050_Token> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_0>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_0(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_0(void) { this->self = jule::Ref<_1108ddf20_Vector_0>::make(this, nullptr); }

	static inline _1108ddf20_Vector_0 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline _1106ec050_Token _method_at(jule::Int);


	inline void _method_set(jule::Int,_1106ec050_Token);


	inline void _method_push(_1106ec050_Token);


	inline void _method_push_front(_1106ec050_Token);


	inline void _method_append(jule::Slice<_1106ec050_Token>);


	inline void _method_merge(_1108ddf20_Vector_0);


	inline void _method_merge_front(_1108ddf20_Vector_0);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,_1106ec050_Token);


	inline _1108ddf20_Vector_0 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_0 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_0 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_1 {
	jule::Ref<_1108ddf20_Vector_1> self{};

	StdJuleVectorBuffer<jule::Ref<_11054f670_Directive>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_11054f670_Directive>>()};


	_1108ddf20_Vector_1(StdJuleVectorBuffer<jule::Ref<_11054f670_Directive>> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_1>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_1(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_1(void) { this->self = jule::Ref<_1108ddf20_Vector_1>::make(this, nullptr); }

	static inline _1108ddf20_Vector_1 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_11054f670_Directive> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_11054f670_Directive>);


	inline void _method_push(jule::Ref<_11054f670_Directive>);


	inline void _method_push_front(jule::Ref<_11054f670_Directive>);


	inline void _method_append(jule::Slice<jule::Ref<_11054f670_Directive>>);


	inline void _method_merge(_1108ddf20_Vector_1);


	inline void _method_merge_front(_1108ddf20_Vector_1);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_11054f670_Directive>);


	inline _1108ddf20_Vector_1 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_1 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_1 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_2 {
	jule::Ref<_1108ddf20_Vector_2> self{};

	StdJuleVectorBuffer<jule::Ref<_11054f670_UseDecl>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_11054f670_UseDecl>>()};


	_1108ddf20_Vector_2(StdJuleVectorBuffer<jule::Ref<_11054f670_UseDecl>> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_2>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_2(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_2(void) { this->self = jule::Ref<_1108ddf20_Vector_2>::make(this, nullptr); }

	static inline _1108ddf20_Vector_2 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_11054f670_UseDecl> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_11054f670_UseDecl>);


	inline void _method_push(jule::Ref<_11054f670_UseDecl>);


	inline void _method_push_front(jule::Ref<_11054f670_UseDecl>);


	inline void _method_append(jule::Slice<jule::Ref<_11054f670_UseDecl>>);


	inline void _method_merge(_1108ddf20_Vector_2);


	inline void _method_merge_front(_1108ddf20_Vector_2);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_11054f670_UseDecl>);


	inline _1108ddf20_Vector_2 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_2 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_2 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_3 {
	jule::Ref<_1108ddf20_Vector_3> self{};

	StdJuleVectorBuffer<jule::Ref<_11054f670_Impl>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_11054f670_Impl>>()};


	_1108ddf20_Vector_3(StdJuleVectorBuffer<jule::Ref<_11054f670_Impl>> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_3>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_3(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_3(void) { this->self = jule::Ref<_1108ddf20_Vector_3>::make(this, nullptr); }

	static inline _1108ddf20_Vector_3 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_11054f670_Impl> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_11054f670_Impl>);


	inline void _method_push(jule::Ref<_11054f670_Impl>);


	inline void _method_push_front(jule::Ref<_11054f670_Impl>);


	inline void _method_append(jule::Slice<jule::Ref<_11054f670_Impl>>);


	inline void _method_merge(_1108ddf20_Vector_3);


	inline void _method_merge_front(_1108ddf20_Vector_3);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_11054f670_Impl>);


	inline _1108ddf20_Vector_3 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_3 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_3 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_4 {
	jule::Ref<_1108ddf20_Vector_4> self{};

	StdJuleVectorBuffer<jule::Ref<_11054f670_Comment>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_11054f670_Comment>>()};


	_1108ddf20_Vector_4(StdJuleVectorBuffer<jule::Ref<_11054f670_Comment>> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_4>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_4(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_4(void) { this->self = jule::Ref<_1108ddf20_Vector_4>::make(this, nullptr); }

	static inline _1108ddf20_Vector_4 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_11054f670_Comment> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_11054f670_Comment>);


	inline void _method_push(jule::Ref<_11054f670_Comment>);


	inline void _method_push_front(jule::Ref<_11054f670_Comment>);


	inline void _method_append(jule::Slice<jule::Ref<_11054f670_Comment>>);


	inline void _method_merge(_1108ddf20_Vector_4);


	inline void _method_merge_front(_1108ddf20_Vector_4);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_11054f670_Comment>);


	inline _1108ddf20_Vector_4 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_4 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_4 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_5 {
	jule::Ref<_1108ddf20_Vector_5> self{};

	StdJuleVectorBuffer<_11054f670_Node> _field__buffer{StdJuleVectorBuffer<_11054f670_Node>()};


	_1108ddf20_Vector_5(StdJuleVectorBuffer<_11054f670_Node> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_5>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_5(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_5(void) { this->self = jule::Ref<_1108ddf20_Vector_5>::make(this, nullptr); }

	static inline _1108ddf20_Vector_5 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline _11054f670_Node _method_at(jule::Int);


	inline void _method_set(jule::Int,_11054f670_Node);


	inline void _method_push(_11054f670_Node);


	inline void _method_push_front(_11054f670_Node);


	inline void _method_append(jule::Slice<_11054f670_Node>);


	inline void _method_merge(_1108ddf20_Vector_5);


	inline void _method_merge_front(_1108ddf20_Vector_5);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,_11054f670_Node);


	inline _1108ddf20_Vector_5 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_5 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_5 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_6 {
	jule::Ref<_1108ddf20_Vector_6> self{};

	StdJuleVectorBuffer<_110d9ce90_Pass> _field__buffer{StdJuleVectorBuffer<_110d9ce90_Pass>()};


	_1108ddf20_Vector_6(StdJuleVectorBuffer<_110d9ce90_Pass> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_6>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_6(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_6(void) { this->self = jule::Ref<_1108ddf20_Vector_6>::make(this, nullptr); }

	static inline _1108ddf20_Vector_6 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline _110d9ce90_Pass _method_at(jule::Int);


	inline void _method_set(jule::Int,_110d9ce90_Pass);


	inline void _method_push(_110d9ce90_Pass);


	inline void _method_push_front(_110d9ce90_Pass);


	inline void _method_append(jule::Slice<_110d9ce90_Pass>);


	inline void _method_merge(_1108ddf20_Vector_6);


	inline void _method_merge_front(_1108ddf20_Vector_6);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,_110d9ce90_Pass);


	inline _1108ddf20_Vector_6 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_6 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_6 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_7 {
	jule::Ref<_1108ddf20_Vector_7> self{};

	StdJuleVectorBuffer<jule::Ref<_110e4edc0_ImportInfo>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_110e4edc0_ImportInfo>>()};


	_1108ddf20_Vector_7(StdJuleVectorBuffer<jule::Ref<_110e4edc0_ImportInfo>> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_7>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_7(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_7(void) { this->self = jule::Ref<_1108ddf20_Vector_7>::make(this, nullptr); }

	static inline _1108ddf20_Vector_7 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_110e4edc0_ImportInfo> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_110e4edc0_ImportInfo>);


	inline void _method_push(jule::Ref<_110e4edc0_ImportInfo>);


	inline void _method_push_front(jule::Ref<_110e4edc0_ImportInfo>);


	inline void _method_append(jule::Slice<jule::Ref<_110e4edc0_ImportInfo>>);


	inline void _method_merge(_1108ddf20_Vector_7);


	inline void _method_merge_front(_1108ddf20_Vector_7);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_110e4edc0_ImportInfo>);


	inline _1108ddf20_Vector_7 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_7 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_7 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_8 {
	jule::Ref<_1108ddf20_Vector_8> self{};

	StdJuleVectorBuffer<jule::Any> _field__buffer{StdJuleVectorBuffer<jule::Any>()};


	_1108ddf20_Vector_8(StdJuleVectorBuffer<jule::Any> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_8>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_8(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_8(void) { this->self = jule::Ref<_1108ddf20_Vector_8>::make(this, nullptr); }

	static inline _1108ddf20_Vector_8 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Any _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Any);


	inline void _method_push(jule::Any);


	inline void _method_push_front(jule::Any);


	inline void _method_append(jule::Slice<jule::Any>);


	inline void _method_merge(_1108ddf20_Vector_8);


	inline void _method_merge_front(_1108ddf20_Vector_8);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Any);


	inline _1108ddf20_Vector_8 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_8 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_8 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_9 {
	jule::Ref<_1108ddf20_Vector_9> self{};

	StdJuleVectorBuffer<jule::Ref<_110e92c80_Var>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_110e92c80_Var>>()};


	_1108ddf20_Vector_9(StdJuleVectorBuffer<jule::Ref<_110e92c80_Var>> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_9>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_9(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_9(void) { this->self = jule::Ref<_1108ddf20_Vector_9>::make(this, nullptr); }

	static inline _1108ddf20_Vector_9 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_110e92c80_Var> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_110e92c80_Var>);


	inline void _method_push(jule::Ref<_110e92c80_Var>);


	inline void _method_push_front(jule::Ref<_110e92c80_Var>);


	inline void _method_append(jule::Slice<jule::Ref<_110e92c80_Var>>);


	inline void _method_merge(_1108ddf20_Vector_9);


	inline void _method_merge_front(_1108ddf20_Vector_9);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_110e92c80_Var>);


	inline _1108ddf20_Vector_9 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_9 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_9 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_10 {
	jule::Ref<_1108ddf20_Vector_10> self{};

	StdJuleVectorBuffer<jule::Ref<_1116aff70_TypeAlias>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_1116aff70_TypeAlias>>()};


	_1108ddf20_Vector_10(StdJuleVectorBuffer<jule::Ref<_1116aff70_TypeAlias>> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_10>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_10(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_10(void) { this->self = jule::Ref<_1108ddf20_Vector_10>::make(this, nullptr); }

	static inline _1108ddf20_Vector_10 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_1116aff70_TypeAlias> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_1116aff70_TypeAlias>);


	inline void _method_push(jule::Ref<_1116aff70_TypeAlias>);


	inline void _method_push_front(jule::Ref<_1116aff70_TypeAlias>);


	inline void _method_append(jule::Slice<jule::Ref<_1116aff70_TypeAlias>>);


	inline void _method_merge(_1108ddf20_Vector_10);


	inline void _method_merge_front(_1108ddf20_Vector_10);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_1116aff70_TypeAlias>);


	inline _1108ddf20_Vector_10 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_10 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_10 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_11 {
	jule::Ref<_1108ddf20_Vector_11> self{};

	StdJuleVectorBuffer<jule::Ref<_11072eb20_Fn>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_11072eb20_Fn>>()};


	_1108ddf20_Vector_11(StdJuleVectorBuffer<jule::Ref<_11072eb20_Fn>> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_11>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_11(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_11(void) { this->self = jule::Ref<_1108ddf20_Vector_11>::make(this, nullptr); }

	static inline _1108ddf20_Vector_11 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_11072eb20_Fn> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_11072eb20_Fn>);


	inline void _method_push(jule::Ref<_11072eb20_Fn>);


	inline void _method_push_front(jule::Ref<_11072eb20_Fn>);


	inline void _method_append(jule::Slice<jule::Ref<_11072eb20_Fn>>);


	inline void _method_merge(_1108ddf20_Vector_11);


	inline void _method_merge_front(_1108ddf20_Vector_11);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_11072eb20_Fn>);


	inline _1108ddf20_Vector_11 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_11 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_11 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_12 {
	jule::Ref<_1108ddf20_Vector_12> self{};

	StdJuleVectorBuffer<jule::Ref<_1109372e0_Struct>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_1109372e0_Struct>>()};


	_1108ddf20_Vector_12(StdJuleVectorBuffer<jule::Ref<_1109372e0_Struct>> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_12>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_12(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_12(void) { this->self = jule::Ref<_1108ddf20_Vector_12>::make(this, nullptr); }

	static inline _1108ddf20_Vector_12 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_1109372e0_Struct> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_1109372e0_Struct>);


	inline void _method_push(jule::Ref<_1109372e0_Struct>);


	inline void _method_push_front(jule::Ref<_1109372e0_Struct>);


	inline void _method_append(jule::Slice<jule::Ref<_1109372e0_Struct>>);


	inline void _method_merge(_1108ddf20_Vector_12);


	inline void _method_merge_front(_1108ddf20_Vector_12);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_1109372e0_Struct>);


	inline _1108ddf20_Vector_12 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_12 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_12 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_13 {
	jule::Ref<_1108ddf20_Vector_13> self{};

	StdJuleVectorBuffer<jule::Ref<_110e3f160_Trait>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_110e3f160_Trait>>()};


	_1108ddf20_Vector_13(StdJuleVectorBuffer<jule::Ref<_110e3f160_Trait>> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_13>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_13(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_13(void) { this->self = jule::Ref<_1108ddf20_Vector_13>::make(this, nullptr); }

	static inline _1108ddf20_Vector_13 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_110e3f160_Trait> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_110e3f160_Trait>);


	inline void _method_push(jule::Ref<_110e3f160_Trait>);


	inline void _method_push_front(jule::Ref<_110e3f160_Trait>);


	inline void _method_append(jule::Slice<jule::Ref<_110e3f160_Trait>>);


	inline void _method_merge(_1108ddf20_Vector_13);


	inline void _method_merge_front(_1108ddf20_Vector_13);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_110e3f160_Trait>);


	inline _1108ddf20_Vector_13 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_13 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_13 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_14 {
	jule::Ref<_1108ddf20_Vector_14> self{};

	StdJuleVectorBuffer<jule::Ref<_110e453c0_Enum>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_110e453c0_Enum>>()};


	_1108ddf20_Vector_14(StdJuleVectorBuffer<jule::Ref<_110e453c0_Enum>> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_14>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_14(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_14(void) { this->self = jule::Ref<_1108ddf20_Vector_14>::make(this, nullptr); }

	static inline _1108ddf20_Vector_14 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_110e453c0_Enum> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_110e453c0_Enum>);


	inline void _method_push(jule::Ref<_110e453c0_Enum>);


	inline void _method_push_front(jule::Ref<_110e453c0_Enum>);


	inline void _method_append(jule::Slice<jule::Ref<_110e453c0_Enum>>);


	inline void _method_merge(_1108ddf20_Vector_14);


	inline void _method_merge_front(_1108ddf20_Vector_14);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_110e453c0_Enum>);


	inline _1108ddf20_Vector_14 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_14 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_14 &_Src) const { return !this->operator==(_Src); }
};

struct _1108ddf20_Vector_15 {
	jule::Ref<_1108ddf20_Vector_15> self{};

	StdJuleVectorBuffer<jule::Ref<_110e4c050_Impl>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_110e4c050_Impl>>()};


	_1108ddf20_Vector_15(StdJuleVectorBuffer<jule::Ref<_110e4c050_Impl>> __param__buffer) {
		this->self = jule::Ref<_1108ddf20_Vector_15>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_1108ddf20_Vector_15(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1108ddf20_Vector_15(void) { this->self = jule::Ref<_1108ddf20_Vector_15>::make(this, nullptr); }

	static inline _1108ddf20_Vector_15 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_110e4c050_Impl> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_110e4c050_Impl>);


	inline void _method_push(jule::Ref<_110e4c050_Impl>);


	inline void _method_push_front(jule::Ref<_110e4c050_Impl>);


	inline void _method_append(jule::Slice<jule::Ref<_110e4c050_Impl>>);


	inline void _method_merge(_1108ddf20_Vector_15);


	inline void _method_merge_front(_1108ddf20_Vector_15);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_110e4c050_Impl>);


	inline _1108ddf20_Vector_15 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _1108ddf20_Vector_15 &_Src) const {
		return true;
	}

	inline bool operator!=(const _1108ddf20_Vector_15 &_Src) const { return !this->operator==(_Src); }
};


struct _11054ec70_File {
	jule::Ref<_11054ec70_File> self{};

	jule::Slice<jule::U8> _field_data{jule::Slice<jule::U8>()};
	jule::Str _field__path{jule::Str()};
	_1108ddf20_Vector_0 _field__tokens{_1108ddf20_Vector_0()};


	_11054ec70_File(jule::Slice<jule::U8> __param_data, jule::Str __param__path, _1108ddf20_Vector_0 __param__tokens) {
		this->self = jule::Ref<_11054ec70_File>::make(this, nullptr);

		this->_field_data = __param_data;
		this->_field__path = __param__path;
		this->_field__tokens = __param__tokens;
	}

	~_11054ec70_File(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054ec70_File(void) { this->self = jule::Ref<_11054ec70_File>::make(this, nullptr); }

	inline jule::Bool _method_is_ok(void);


	inline void _method_fill(jule::Slice<jule::U8>);


	inline jule::Str _method_path(void);


	inline jule::Str _method_dir(void);


	inline jule::Str _method_name(void);


	inline jule::Uintptr _method_addr(void);


	inline _1108ddf20_Vector_0 _method_tokens(void);


	inline jule::Str _method_get_row(jule::Int);


	inline bool operator==(const _11054ec70_File &_Src) const {
		return 
			this->_field_data == _Src._field_data &&
			this->_field__path == _Src._field__path &&
			this->_field__tokens == _Src._field__tokens;
	}

	inline bool operator!=(const _11054ec70_File &_Src) const { return !this->operator==(_Src); }
};


struct _11054eff0_Lex {
	jule::Ref<_11054eff0_Lex> self{};

	_1108ddf20_Vector_0 _field_tokens{_1108ddf20_Vector_0()};
	jule::Ref<_11054ec70_File> _field_file{jule::Ref<_11054ec70_File>()};
	jule::Int _field_pos{jule::Int()};
	jule::Int _field_column{jule::Int()};
	jule::Int _field_row{jule::Int()};
	jule::Slice<_127e05da0_Log> _field_errors{jule::Slice<_127e05da0_Log>()};


	_11054eff0_Lex(_1108ddf20_Vector_0 __param_tokens, jule::Ref<_11054ec70_File> __param_file, jule::Int __param_pos, jule::Int __param_column, jule::Int __param_row, jule::Slice<_127e05da0_Log> __param_errors) {
		this->self = jule::Ref<_11054eff0_Lex>::make(this, nullptr);

		this->_field_tokens = __param_tokens;
		this->_field_file = __param_file;
		this->_field_pos = __param_pos;
		this->_field_column = __param_column;
		this->_field_row = __param_row;
		this->_field_errors = __param_errors;
	}

	~_11054eff0_Lex(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11054eff0_Lex(void) { this->self = jule::Ref<_11054eff0_Lex>::make(this, nullptr); }

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_tok(_1106ec050_Token,jule::Str);


	inline void _method_lex(void);


	inline jule::Str _method_id(jule::Slice<jule::U8>);


	inline jule::Slice<jule::U8> _method_resume(void);


	inline void _method_lex_line_comment(_1106ec050_Token&);


	inline void _method_lex_range_comment(void);


	inline jule::Str _method_num(jule::Slice<jule::U8>);


	inline jule::Str _method_escape_seq(jule::Slice<jule::U8>);


	inline jule::Str _method_get_rune(jule::Slice<jule::U8>,jule::Bool);


	inline jule::Str _method_lex_rune(jule::Slice<jule::U8>);


	inline jule::Str _method_lex_str(void);


	inline jule::Bool _method_is_first_token_of_line(void);


	inline void _method_new_line(void);


	inline jule::Bool _method_is_op(jule::Slice<jule::U8>,jule::Str,jule::Uint,_1106ec050_Token&);


	inline jule::Bool _method_lex_basic_ops(jule::Slice<jule::U8>,_1106ec050_Token&);


	inline jule::Bool _method_lex_id(jule::Slice<jule::U8>,_1106ec050_Token&);


	inline jule::Bool _method_lex_num(jule::Slice<jule::U8>,_1106ec050_Token&);


	inline _1106ec050_Token _method_token(void);


	inline bool operator==(const _11054eff0_Lex &_Src) const {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_file == _Src._field_file &&
			this->_field_pos == _Src._field_pos &&
			this->_field_column == _Src._field_column &&
			this->_field_row == _Src._field_row &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _11054eff0_Lex &_Src) const { return !this->operator==(_Src); }
};


struct _1104fada0_Ast {
	jule::Ref<_1104fada0_Ast> self{};

	jule::Ref<_11054ec70_File> _field_file{jule::Ref<_11054ec70_File>()};
	_1108ddf20_Vector_1 _field_top_directives{_1108ddf20_Vector_1()};
	_1108ddf20_Vector_2 _field_use_decls{_1108ddf20_Vector_2()};
	_1108ddf20_Vector_3 _field_impls{_1108ddf20_Vector_3()};
	_1108ddf20_Vector_4 _field_comments{_1108ddf20_Vector_4()};
	_1108ddf20_Vector_5 _field_decls{_1108ddf20_Vector_5()};


	_1104fada0_Ast(jule::Ref<_11054ec70_File> __param_file, _1108ddf20_Vector_1 __param_top_directives, _1108ddf20_Vector_2 __param_use_decls, _1108ddf20_Vector_3 __param_impls, _1108ddf20_Vector_4 __param_comments, _1108ddf20_Vector_5 __param_decls) {
		this->self = jule::Ref<_1104fada0_Ast>::make(this, nullptr);

		this->_field_file = __param_file;
		this->_field_top_directives = __param_top_directives;
		this->_field_use_decls = __param_use_decls;
		this->_field_impls = __param_impls;
		this->_field_comments = __param_comments;
		this->_field_decls = __param_decls;
	}

	~_1104fada0_Ast(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1104fada0_Ast(void) { this->self = jule::Ref<_1104fada0_Ast>::make(this, nullptr); }

	inline bool operator==(const _1104fada0_Ast &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_top_directives == _Src._field_top_directives &&
			this->_field_use_decls == _Src._field_use_decls &&
			this->_field_impls == _Src._field_impls &&
			this->_field_comments == _Src._field_comments &&
			this->_field_decls == _Src._field_decls;
	}

	inline bool operator!=(const _1104fada0_Ast &_Src) const { return !this->operator==(_Src); }
};


struct _1109372e0_Struct {
	jule::Ref<_1109372e0_Struct> self{};

	jule::Ref<_110e92bc0_Sema> _field_sema{jule::Ref<_110e92bc0_Sema>()};
	jule::Slice<jule::Ref<_1109372e0_Struct>> _field_depends{jule::Slice<jule::Ref<_1109372e0_Struct>>()};
	jule::Slice<jule::Ref<_1109372e0_Struct>> _field_uses{jule::Slice<jule::Ref<_1109372e0_Struct>>()};
	_1106ec050_Token _field_token{_1106ec050_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Slice<jule::Ref<_1109372e0_Field>> _field_fields{jule::Slice<jule::Ref<_1109372e0_Field>>()};
	_1108ddf20_Vector_11 _field_methods{_1108ddf20_Vector_11()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Slice<jule::Ref<_11054f670_Directive>> _field_directives{jule::Slice<jule::Ref<_11054f670_Directive>>()};
	jule::Str _field_doc{jule::Str()};
	jule::Slice<jule::Ref<_11054f670_GenericDecl>> _field_generics{jule::Slice<jule::Ref<_11054f670_GenericDecl>>()};
	jule::Slice<jule::Ref<_110e3f160_Trait>> _field_implements{jule::Slice<jule::Ref<_110e3f160_Trait>>()};
	jule::Slice<jule::Ref<_1109372e0_StructIns>> _field_instances{jule::Slice<jule::Ref<_1109372e0_StructIns>>()};


	_1109372e0_Struct(jule::Ref<_110e92bc0_Sema> __param_sema, jule::Slice<jule::Ref<_1109372e0_Struct>> __param_depends, jule::Slice<jule::Ref<_1109372e0_Struct>> __param_uses, _1106ec050_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ref<_1109372e0_Field>> __param_fields, _1108ddf20_Vector_11 __param_methods, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ref<_11054f670_Directive>> __param_directives, jule::Str __param_doc, jule::Slice<jule::Ref<_11054f670_GenericDecl>> __param_generics, jule::Slice<jule::Ref<_110e3f160_Trait>> __param_implements, jule::Slice<jule::Ref<_1109372e0_StructIns>> __param_instances) {
		this->self = jule::Ref<_1109372e0_Struct>::make(this, nullptr);

		this->_field_sema = __param_sema;
		this->_field_depends = __param_depends;
		this->_field_uses = __param_uses;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_fields = __param_fields;
		this->_field_methods = __param_methods;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_directives = __param_directives;
		this->_field_doc = __param_doc;
		this->_field_generics = __param_generics;
		this->_field_implements = __param_implements;
		this->_field_instances = __param_instances;
	}

	~_1109372e0_Struct(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1109372e0_Struct(void) { this->self = jule::Ref<_1109372e0_Struct>::make(this, nullptr); }

	inline jule::Ref<_1109372e0_StructIns> _method_instance(void);


	inline jule::Ref<_1109372e0_StructIns> _method_append_instance(jule::Ref<_1109372e0_StructIns>);


	inline jule::Ref<_11072eb20_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ref<_1109372e0_Field> _method_find_field(jule::Str);


	inline jule::Bool _method_is_implements(jule::Ref<_110e3f160_Trait>);


	inline jule::Bool _method_is_derives(jule::Str);


	inline jule::Bool _method_is_uses(jule::Ref<_1109372e0_Struct>);


	inline bool operator==(const _1109372e0_Struct &_Src) const {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_depends == _Src._field_depends &&
			this->_field_uses == _Src._field_uses &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_generics == _Src._field_generics &&
			this->_field_implements == _Src._field_implements &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _1109372e0_Struct &_Src) const { return !this->operator==(_Src); }
};


struct _110d9ce90_ReferenceStack {
	jule::Ref<_110d9ce90_ReferenceStack> self{};

	_1108ddf20_Vector_8 _field_buffer{_1108ddf20_Vector_8()};


	_110d9ce90_ReferenceStack(_1108ddf20_Vector_8 __param_buffer) {
		this->self = jule::Ref<_110d9ce90_ReferenceStack>::make(this, nullptr);

		this->_field_buffer = __param_buffer;
	}

	~_110d9ce90_ReferenceStack(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110d9ce90_ReferenceStack(void) { this->self = jule::Ref<_110d9ce90_ReferenceStack>::make(this, nullptr); }

	inline jule::Int _method_len(void);


	inline jule::Any _method_at(jule::Int);


	inline void _method_push(jule::Any);


	inline void _method_push_front(jule::Any);


	inline void _method_remove(jule::Int);


	inline jule::Bool _method_exist_0(jule::Ref<_110e92c80_Var>);
	inline jule::Bool _method_exist_1(jule::Ref<_11072eb20_FnIns>);
	inline jule::Bool _method_exist_2(jule::Ref<_1109372e0_StructIns>);


	inline bool operator==(const _110d9ce90_ReferenceStack &_Src) const {
		return 
			this->_field_buffer == _Src._field_buffer;
	}

	inline bool operator!=(const _110d9ce90_ReferenceStack &_Src) const { return !this->operator==(_Src); }
};


struct _110af2660_Scope {
	jule::Ref<_110af2660_Scope> self{};

	jule::Ref<_110af2660_Scope> _field_parent{jule::Ref<_110af2660_Scope>()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Bool _field_deferred{jule::Bool()};
	_1108ddf20_Vector_8 _field_stmts{_1108ddf20_Vector_8()};


	_110af2660_Scope(jule::Ref<_110af2660_Scope> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, _1108ddf20_Vector_8 __param_stmts) {
		this->self = jule::Ref<_110af2660_Scope>::make(this, nullptr);

		this->_field_parent = __param_parent;
		this->_field_unsafety = __param_unsafety;
		this->_field_deferred = __param_deferred;
		this->_field_stmts = __param_stmts;
	}

	~_110af2660_Scope(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_110af2660_Scope(void) { this->self = jule::Ref<_110af2660_Scope>::make(this, nullptr); }

	inline bool operator==(const _110af2660_Scope &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _110af2660_Scope &_Src) const { return !this->operator==(_Src); }
};


struct _1111c15d0_SymbolTable: public _111732860_Lookup {
	jule::Ref<_1111c15d0_SymbolTable> self{};

	jule::Ref<_11054ec70_File> _field_file{jule::Ref<_11054ec70_File>()};
	_1108ddf20_Vector_6 _field_passes{_1108ddf20_Vector_6()};
	_1108ddf20_Vector_7 _field_imports{_1108ddf20_Vector_7()};
	_1108ddf20_Vector_9 _field_vars{_1108ddf20_Vector_9()};
	_1108ddf20_Vector_10 _field_type_aliases{_1108ddf20_Vector_10()};
	_1108ddf20_Vector_12 _field_structs{_1108ddf20_Vector_12()};
	_1108ddf20_Vector_11 _field_funcs{_1108ddf20_Vector_11()};
	_1108ddf20_Vector_13 _field_traits{_1108ddf20_Vector_13()};
	_1108ddf20_Vector_14 _field_enums{_1108ddf20_Vector_14()};
	_1108ddf20_Vector_15 _field_impls{_1108ddf20_Vector_15()};


	_1111c15d0_SymbolTable(jule::Ref<_11054ec70_File> __param_file, _1108ddf20_Vector_6 __param_passes, _1108ddf20_Vector_7 __param_imports, _1108ddf20_Vector_9 __param_vars, _1108ddf20_Vector_10 __param_type_aliases, _1108ddf20_Vector_12 __param_structs, _1108ddf20_Vector_11 __param_funcs, _1108ddf20_Vector_13 __param_traits, _1108ddf20_Vector_14 __param_enums, _1108ddf20_Vector_15 __param_impls) {
		this->self = jule::Ref<_1111c15d0_SymbolTable>::make(this, nullptr);

		this->_field_file = __param_file;
		this->_field_passes = __param_passes;
		this->_field_imports = __param_imports;
		this->_field_vars = __param_vars;
		this->_field_type_aliases = __param_type_aliases;
		this->_field_structs = __param_structs;
		this->_field_funcs = __param_funcs;
		this->_field_traits = __param_traits;
		this->_field_enums = __param_enums;
		this->_field_impls = __param_impls;
	}

	~_1111c15d0_SymbolTable(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1111c15d0_SymbolTable(void) { this->self = jule::Ref<_1111c15d0_SymbolTable>::make(this, nullptr); }

	inline jule::Ref<_110e4edc0_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_110e4edc0_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)>);


	inline jule::Ref<_110e92c80_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_1116aff70_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_1109372e0_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_11072eb20_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_110e3f160_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_110e453c0_Enum> _method_find_enum(jule::Str);


	inline jule::Ref<_110e92c80_Var> _method___find_var(jule::Str,jule::Bool,jule::Bool);


	inline jule::Ref<_1116aff70_TypeAlias> _method___find_type_alias(jule::Str,jule::Bool,jule::Bool);


	inline jule::Any _method_def_by_ident(jule::Str,jule::Bool);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline bool operator==(const _1111c15d0_SymbolTable &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_passes == _Src._field_passes &&
			this->_field_imports == _Src._field_imports &&
			this->_field_vars == _Src._field_vars &&
			this->_field_type_aliases == _Src._field_type_aliases &&
			this->_field_structs == _Src._field_structs &&
			this->_field_funcs == _Src._field_funcs &&
			this->_field_traits == _Src._field_traits &&
			this->_field_enums == _Src._field_enums &&
			this->_field_impls == _Src._field_impls;
	}

	inline bool operator!=(const _1111c15d0_SymbolTable &_Src) const { return !this->operator==(_Src); }
};


inline jule::Int _117e8bf60_get_last_errno(void);
inline jule::Str _117e8d290_byte_ptr_to_str(jule::U8*);
inline jule::Int _117e8d290_stat(jule::U8*,struct stat*);
inline jule::Int _117e8d290_open(jule::U8*,jule::Int,jule::Int);
inline jule::U8* _117e8d290_getcwd(jule::U8*,jule::Uint);
inline DIR* _117e8d290_opendir(jule::U8*);
inline struct dirent* _117e8d290_readdir(DIR*);
inline jule::Int _117e8d290_closedir(DIR*);
inline jule::Int _117e8d290_chdir(jule::U8*);
inline jule::Int _117e8d290_remove(jule::U8*);
inline jule::Int _117e8d290_mkdir(jule::U8*,jule::Int);
inline jule::Int _117e8d290_rmdir(jule::U8*);
inline jule::Int _117e8d290_unlink(jule::U8*);
inline jule::I64 _117eb6970_seek(jule::Int,jule::I64,jule::Int);
inline jule::Int _117eb6970_read(jule::Int,void*,jule::Uint);
inline jule::Int _117eb6970_close(jule::Int);
inline jule::Int _117eb6970_write(jule::Int,void*,jule::Uint);
inline void _117eb6970_exit(jule::Int);
inline void* _117e92660_malloc(jule::Uint);
inline void* _117e92660_calloc(jule::Uint,jule::Uint);
inline void* _117e92660_realloc(void*,jule::Uint);
inline void _117e92660_free(void*);
inline jule::Int _117e750c0_get_last_os_error(void);
inline std::tuple<jule::Str,jule::Int> _117e7c8c0_working_dir(void);
inline jule::Int _117e7c8c0_set_working_dir(jule::Str);
inline void _117e7c8c0_init(void);
inline std::tuple<jule::Str,jule::Int> _117e79ab0___getwd(void);
inline jule::Int _117e79ab0___chdir(jule::Str);
inline jule::Str _117e1d320_clean(jule::Str);
inline jule::Str _117e1d320_to_slash(jule::Str);
inline jule::Str _117e1d320_from_slash(jule::Str);
inline jule::Str _117e1d320_join(jule::Slice<jule::Str>);
inline jule::Str _117e1d320_ext(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _117e1d320_abs(jule::Str);
inline jule::Str _117e1d320_base(jule::Str);
inline jule::Str _117e1d320_dir(jule::Str);
inline jule::Str _117e1d320_volume_name(jule::Str);
inline jule::Bool _117e12d90_is_path_sep(jule::U8);
inline jule::Bool _117e12d90_is_abs(jule::Str);
inline jule::Int _117e12d90_volume_name_len(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _117e12d90___abs(jule::Str);
inline jule::Str _117e12d90_str_join(jule::Slice<jule::Str>,jule::Str);
inline jule::Str _117e12d90___join(jule::Slice<jule::Str>);
inline jule::Int _110621fc0_leading_zeros(jule::Uint);
inline jule::Int _110621fc0_leading_zeros8(jule::U8);
inline jule::Int _110621fc0_leading_zeros16(jule::U16);
inline jule::Int _110621fc0_leading_zeros32(jule::U32);
inline jule::Int _110621fc0_leading_zeros64(jule::U64);
inline jule::Int _110621fc0_trailing_zeros(jule::Uint);
inline jule::Int _110621fc0_trailing_zeros8(jule::U8);
inline jule::Int _110621fc0_trailing_zeros16(jule::U16);
inline jule::Int _110621fc0_trailing_zeros32(jule::U32);
inline jule::Int _110621fc0_trailing_zeros64(jule::U64);
inline jule::Int _110621fc0_ones_count(jule::Uint);
inline jule::Int _110621fc0_ones_count8(jule::U8);
inline jule::Int _110621fc0_ones_count16(jule::U16);
inline jule::Int _110621fc0_ones_count32(jule::U32);
inline jule::Int _110621fc0_ones_count64(jule::U64);
inline jule::Uint _110621fc0_rotate_left(jule::Uint,jule::Int);
inline jule::U8 _110621fc0_rotate_left8(jule::U8,jule::Int);
inline jule::U16 _110621fc0_rotate_left16(jule::U16,jule::Int);
inline jule::U32 _110621fc0_rotate_left32(jule::U32,jule::Int);
inline jule::U64 _110621fc0_rotate_left64(jule::U64,jule::Int);
inline jule::Uint _110621fc0_reverse(jule::Uint);
inline jule::U8 _110621fc0_reverse8(jule::U8);
inline jule::U16 _110621fc0_reverse16(jule::U16);
inline jule::U32 _110621fc0_reverse32(jule::U32);
inline jule::U64 _110621fc0_reverse64(jule::U64);
inline jule::Uint _110621fc0_reverse_bytes(jule::Uint);
inline jule::U16 _110621fc0_reverse_bytes16(jule::U16);
inline jule::U32 _110621fc0_reverse_bytes32(jule::U32);
inline jule::U64 _110621fc0_reverse_bytes64(jule::U64);
inline jule::Int _110621fc0_len(jule::Uint);
inline jule::Int _110621fc0_len8(jule::U8);
inline jule::Int _110621fc0_len16(jule::U16);
inline jule::Int _110621fc0_len32(jule::U32);
inline jule::Int _110621fc0_len64(jule::U64);
inline std::tuple<jule::Uint,jule::Uint> _110621fc0_add(jule::Uint,jule::Uint,jule::Uint);
inline std::tuple<jule::U32,jule::U32> _110621fc0_add32(jule::U32,jule::U32,jule::U32);
inline std::tuple<jule::U64,jule::U64> _110621fc0_add64(jule::U64,jule::U64,jule::U64);
inline std::tuple<jule::Uint,jule::Uint> _110621fc0_sub(jule::Uint,jule::Uint,jule::Uint);
inline std::tuple<jule::U32,jule::U32> _110621fc0_sub32(jule::U32,jule::U32,jule::U32);
inline std::tuple<jule::U64,jule::U64> _110621fc0_sub64(jule::U64,jule::U64,jule::U64);
inline std::tuple<jule::Uint,jule::Uint> _110621fc0_mul(jule::Uint,jule::Uint);
inline std::tuple<jule::U32,jule::U32> _110621fc0_mul32(jule::U32,jule::U32);
inline std::tuple<jule::U64,jule::U64> _110621fc0_mul64(jule::U64,jule::U64);
inline std::tuple<jule::Uint,jule::Uint> _110621fc0_div(jule::Uint,jule::Uint,jule::Uint);
inline std::tuple<jule::U32,jule::U32> _110621fc0_div32(jule::U32,jule::U32,jule::U32);
inline std::tuple<jule::U64,jule::U64> _110621fc0_div64(jule::U64,jule::U64,jule::U64);
inline jule::Uint _110621fc0_rem(jule::Uint,jule::Uint,jule::Uint);
inline jule::U32 _110621fc0_rem32(jule::U32,jule::U32,jule::U32);
inline jule::U64 _110621fc0_rem64(jule::U64,jule::U64,jule::U64);
inline jule::F64 _110059190_atanh(jule::F64);
inline jule::U32 _1100c9ac0_f32_bits(jule::F32);
inline jule::F32 _1100c9ac0_f32_from_bits(jule::U32);
inline jule::U64 _1100c9ac0_f64_bits(jule::F64);
inline jule::F64 _1100c9ac0_f64_from_bits(jule::U64);
inline jule::F64 _1100cd0d0_cos(jule::F64);
inline jule::F64 _1100cd0d0_sin(jule::F64);
inline jule::F64 _1100eaf20_tan(jule::F64);
inline jule::F64 _1100eaa90_mod(jule::F64,jule::F64);
inline std::tuple<jule::F64,jule::Int> _1100ebd60_frexp(jule::F64);
inline jule::F32 _1100ecf40_nextafter32(jule::F32,jule::F32);
inline jule::F64 _1100ecf40_nextafter(jule::F64,jule::F64);
inline jule::F64 _110159c10_copysign(jule::F64,jule::F64);
inline std::tuple<jule::U64,jule::F64> _110149e20_trig_reduce(jule::F64);
inline jule::F64 _110149c20_atan2(jule::F64,jule::F64);
inline jule::F64 _11015fbf0_floor(jule::F64);
inline jule::F64 _11015fbf0_ceil(jule::F64);
inline jule::F64 _11015fbf0_trunc(jule::F64);
inline jule::F64 _11015fbf0_round(jule::F64);
inline jule::F64 _11015fbf0_round_even(jule::F64);
inline jule::F64 _110193400_nan(void);
inline jule::Bool _110193400_is_nan(jule::F64);
inline jule::F64 _110193400_inf(jule::Int);
inline jule::Bool _110193400_is_inf(jule::F64,jule::Int);
inline std::tuple<jule::F64,jule::Int> _110193400_normalize(jule::F64);
inline std::tuple<jule::F64,jule::F64> _110166080_sincos(jule::F64);
inline jule::F64 _1101abc90_dim(jule::F64,jule::F64);
inline jule::F64 _1101abc90_max(jule::F64,jule::F64);
inline jule::F64 _1101abc90_min(jule::F64,jule::F64);
inline jule::F64 _1101abe90_log(jule::F64);
inline jule::F64 _1101bb320_expm1(jule::F64);
inline jule::F64 _1101dd560_abs(jule::F64);
inline jule::F64 _1101ab0a0_j1(jule::F64);
inline jule::F64 _1101ab0a0_y1(jule::F64);
inline jule::F64 _1101ab0a0_pone(jule::F64);
inline jule::F64 _1101ab0a0_qone(jule::F64);
inline jule::U64 _1102af770_zero(jule::U64);
inline jule::U64 _1102af770_nonzero(jule::U64);
inline std::tuple<jule::U64,jule::U64> _1102af770_shl(jule::U64,jule::U64,jule::Uint);
inline std::tuple<jule::U64,jule::U64> _1102af770_shr(jule::U64,jule::U64,jule::Uint);
inline std::tuple<jule::U64,jule::U64> _1102af770_shrcompress(jule::U64,jule::U64,jule::Uint);
inline jule::I32 _1102af770_lz(jule::U64,jule::U64);
inline std::tuple<jule::U32,jule::I32,jule::U64> _1102af770_split(jule::U64);
inline jule::F64 _1102af770_fma(jule::F64,jule::F64,jule::F64);
inline std::tuple<jule::F64,jule::F64> _110254f60_modf(jule::F64);
inline jule::F64 _11020f800_log10(jule::F64);
inline jule::F64 _11020f800_log2(jule::F64);
inline jule::F64 _110219170_hypot(jule::F64,jule::F64);
inline jule::F64 _1102aaee0_j0(jule::F64);
inline jule::F64 _1102aaee0_y0(jule::F64);
inline jule::F64 _1102aaee0_pzero(jule::F64);
inline jule::F64 _1102aaee0_qzero(jule::F64);
inline jule::F64 _1101ed150_ldexp(jule::F64,jule::Int);
inline jule::Bool _11030a600_signbit(jule::F64);
inline jule::F64 _110372030_sinh(jule::F64);
inline jule::F64 _110372030_cosh(jule::F64);
inline std::tuple<jule::F64,jule::Int> _11037b0d0_lgamma(jule::F64);
inline jule::F64 _11037b0d0_sin_pi(jule::F64);
inline jule::F64 _1102f17c0_acosh(jule::F64);
inline jule::F64 _110305650_tanh(jule::F64);
inline jule::F64 _110377070_cbrt(jule::F64);
inline jule::F64 _1103e69a0_pow(jule::F64,jule::F64);
inline jule::Bool _1103e69a0_is_odd_int(jule::F64);
inline jule::F64 _1103f42c0_exp(jule::F64);
inline jule::F64 _1103f42c0_exp2(jule::F64);
inline jule::F64 _1103f42c0_expmulti(jule::F64,jule::F64,jule::Int);
inline jule::F64 _1103f8320_log1p(jule::F64);
inline std::tuple<jule::F64,jule::F64> _1104ab510_stirling(jule::F64);
inline jule::F64 _1104ab510_gamma(jule::F64);
inline jule::Bool _1104ab510_is_neg_int(jule::F64);
inline jule::F64 _1104bda20_erfinv(jule::F64);
inline jule::F64 _1104bda20_erfcinv(jule::F64);
inline jule::F64 _1104f4a00_erf(jule::F64);
inline jule::F64 _1104f4a00_erfc(jule::F64);
inline jule::F64 _11052ac10_pow10(jule::Int);
inline jule::F64 _1104d53b0_sqrt(jule::F64);
inline jule::F64 _110542580_logb(jule::F64);
inline jule::Int _110542580_ilogb(jule::F64);
inline jule::Int _110542580__ilogb(jule::F64);
inline jule::F64 _110475f70_jn(jule::Int,jule::F64);
inline jule::F64 _110475f70_yn(jule::Int,jule::F64);
inline jule::F64 _1105ade10_remainder(jule::F64,jule::F64);
inline jule::F64 _1104f3f30_xatan(jule::F64);
inline jule::F64 _1104f3f30_satan(jule::F64);
inline jule::F64 _1104f3f30_atan(jule::F64);
inline jule::F64 _1105e3e90_asin(jule::F64);
inline jule::F64 _1105e3e90_acos(jule::F64);
inline jule::F64 _1105ca980_asinh(jule::F64);
inline std::tuple<jule::Bool,jule::Int> _117e51220_conv_bool(jule::Str);
inline jule::Str _117e51220_fmt_bool(jule::Bool);
inline jule::Str _117e12d10_fmt_float(jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _117e12d10_generic_ftoa(jule::Slice<jule::U8>,jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _117e12d10_big_ftoa(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_117e12d10_FloatInfo&);
inline jule::Slice<jule::U8> _117e12d10_fmt_digits(jule::Slice<jule::U8>,jule::Bool,jule::Bool,_117e12d10_DecimalSlice,jule::Int,jule::U8);
inline void _117e12d10_round_shortest(_110057cd0_Decimal&,jule::U64,jule::Int,_117e12d10_FloatInfo&);
inline jule::Slice<jule::U8> _117e12d10_fmt_e(jule::Slice<jule::U8>,jule::Bool,_117e12d10_DecimalSlice,jule::Int,jule::U8);
inline jule::Slice<jule::U8> _117e12d10_fmt_f(jule::Slice<jule::U8>,jule::Bool,_117e12d10_DecimalSlice,jule::Int);
inline jule::Slice<jule::U8> _117e12d10_fmt_b(jule::Slice<jule::U8>,jule::Bool,jule::U64,jule::Int,_117e12d10_FloatInfo&);
inline jule::Slice<jule::U8> _117e12d10_fmt_x(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_117e12d10_FloatInfo&);
inline jule::Int _117e12d10_min(jule::Int,jule::Int);
inline jule::Int _117e12d10_max(jule::Int,jule::Int);
inline jule::U8 _117e872d0_lower(jule::U8);
inline std::tuple<jule::U64,jule::Int> _117e872d0_parse_uint(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::I64,jule::Int> _117e872d0_parse_int(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::F64,jule::Bool> _117e95220_eisel_lemire64(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _117e95220_eisel_lemire32(jule::U64,jule::Int,jule::Bool);
inline jule::Int _107ec5260_common_prefix_len_ignore_case(jule::Str,jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Bool> _107ec5260_special(jule::Str);
inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _107ec5260_read_float(jule::Str);
inline std::tuple<jule::F64,jule::Bool> _107ec5260_atof64_exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F64,jule::Bool> _107ec5260_atof64exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _107ec5260_atof32exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F64,jule::Int> _107ec5260_atof_hex(jule::Str,_117e12d10_FloatInfo&,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline std::tuple<jule::F32,jule::Int,jule::Int> _107ec5260_atof32(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _107ec5260_atof64(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _107ec5260_parse_float_prefix(jule::Str,jule::Int);
inline std::tuple<jule::F64,jule::Int> _107ec5260_parse_float(jule::Str,jule::Int);
inline void _107ea21d0_ryu_ftoa_fixed32(_117e12d10_DecimalSlice&,jule::U32,jule::Int,jule::Int);
inline void _107ea21d0_ryu_ftoa_fixed64(_117e12d10_DecimalSlice&,jule::U64,jule::Int,jule::Int);
inline void _107ea21d0_format_decimal(_117e12d10_DecimalSlice&,jule::U64,jule::Bool,jule::Bool,jule::Int);
inline void _107ea21d0_ryu_ftoa_shortest(_117e12d10_DecimalSlice&,jule::U64,jule::Int,_117e12d10_FloatInfo&);
inline jule::Int _107ea21d0_mul_by_log2_log10(jule::Int);
inline jule::Int _107ea21d0_mul_by_log10_log2(jule::Int);
inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _107ea21d0_compute_bounds(jule::U64,jule::Int,_117e12d10_FloatInfo&);
inline void _107ea21d0_ryu_digits(_117e12d10_DecimalSlice&,jule::U64,jule::U64,jule::U64,jule::Bool,jule::Bool);
inline void _107ea21d0_ryu_digits32(_117e12d10_DecimalSlice&,jule::U32,jule::U32,jule::U32,jule::Bool,jule::Bool,jule::Int);
inline std::tuple<jule::U32,jule::Int,jule::Bool> _107ea21d0_mult64bit_pow10(jule::U32,jule::Int,jule::Int);
inline std::tuple<jule::U64,jule::Int,jule::Bool> _107ea21d0_mult128bit_pow10(jule::U64,jule::Int,jule::Int);
inline jule::Bool _107ea21d0_divisible_by_pow5(jule::U64,jule::Int);
inline std::tuple<jule::U32,jule::U32> _107ea21d0_divmod1e9(jule::U64);
inline jule::Int _110057cd0_digit_zero(jule::Slice<jule::U8>);
inline void _110057cd0_trim(_110057cd0_Decimal&);
inline void _110057cd0_right_shift(_110057cd0_Decimal&,jule::Uint);
inline jule::Bool _110057cd0_prefix_is_less_than(jule::Slice<jule::U8>,jule::Str);
inline void _110057cd0_left_shift(_110057cd0_Decimal&,jule::Uint);
inline jule::Bool _110057cd0_should_round_up(_110057cd0_Decimal&,jule::Int);
inline jule::Str _110054e40_fmt_uint(jule::U64,jule::Int);
inline jule::Str _110054e40_fmt_int(jule::I64,jule::Int);
inline jule::Str _110054e40_itoa(jule::Int);
inline jule::Str _110054e40_small(jule::Int);
inline jule::Bool _110054e40_is_power_of_two(jule::Int);
inline std::tuple<jule::Slice<jule::U8>,jule::Str> _110054e40_fmt_bits(jule::Slice<jule::U8>,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline void _107ec3010_exit(jule::Int);
inline jule::Str _107ec3010_executable(void);
inline jule::Bool _127e05470_is_std_header_path(jule::Str);
inline jule::Bool _127e05470_is_valid_header_ext(jule::Str);
inline jule::Bool _127e05470_is_valid_cpp_ext(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _127e05990_check_os(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _127e05990_check_arch(jule::Str);
inline jule::Bool _127e05990_is_pass_file_annotation(jule::Str);
inline jule::Str _127e05da0_logf(jule::Str,jule::Slice<jule::Any>);
inline jule::Str _127e05da0_arg_to_str(jule::Any);
inline jule::Int _127e05da0_find_next_fmt(jule::Str);
inline jule::Str _127e05da0_apply_fmt(jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _127e7c3f0_is_top_directive(jule::Str);
inline jule::Bool _127eb0d70_is_windows(jule::Str);
inline jule::Bool _127eb0d70_is_darwin(jule::Str);
inline jule::Bool _127eb0d70_is_linux(jule::Str);
inline jule::Bool _127eb0d70_is_i386(jule::Str);
inline jule::Bool _127eb0d70_is_amd64(jule::Str);
inline jule::Bool _127eb0d70_is_arm64(jule::Str);
inline jule::Bool _127eb0d70_is_unix(jule::Str);
inline jule::Bool _127eb0d70_is_32bit(jule::Str);
inline jule::Bool _127eb0d70_is_64bit(jule::Str);
inline void _127ebf120_exit_err(jule::Str);
inline void _127ebf120_init(void);
inline jule::Bool _117e0af70_is_jule(jule::Str);
inline jule::Int _110471290_get_last_fs_error(void);
inline std::tuple<jule::Ref<_1104f8ac0_File>,jule::Int> _110471730_open(jule::Str,jule::Int,jule::Int);
inline jule::Int _110471730_remove_file(jule::Str);
inline std::tuple<jule::Ref<_11054d9e0_Status>,jule::Int> _1104fc7d0_stat(jule::Str);
inline std::tuple<jule::Slice<jule::U8>,jule::Int> _1104f8ac0_read_file(jule::Str);
inline std::tuple<jule::Slice<jule::Ref<_110473c30_DirEntry>>,jule::Int> _11060cca0_read_dir(jule::Str);
inline jule::Int _11060cca0_create_dir(jule::Str);
inline jule::Int _11060cca0_remove_dir(jule::Str);
inline jule::Bool _1106ed100_full_rune(jule::Slice<jule::U8>);
inline jule::Bool _1106ed100_full_rune_str(jule::Str);
inline std::tuple<jule::I32,jule::Int> _1106ed100_decode_rune(jule::Slice<jule::U8>);
inline std::tuple<jule::I32,jule::Int> _1106ed100_decode_rune_str(jule::Str);
inline std::tuple<jule::I32,jule::Int> _1106ed100_decode_last_rune(jule::Slice<jule::U8>);
inline std::tuple<jule::I32,jule::Int> _1106ed100_decode_last_rune_str(jule::Str);
inline jule::Int _1106ed100_rune_len(jule::I32);
inline jule::Int _1106ed100_encode_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _1106ed100_append_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _1106ed100_append_rune_non_ascii(jule::Slice<jule::U8>,jule::I32);
inline jule::Int _1106ed100_rune_count(jule::Slice<jule::U8>);
inline jule::Int _1106ed100_rune_count_str(jule::Str);
inline jule::Bool _1106ed100_rune_start(jule::U8);
inline jule::Bool _1106ed100_valid(jule::Slice<jule::U8>);
inline jule::Bool _1106ed100_valid_str(jule::Str);
inline jule::Bool _1106ed100_valid_rune(jule::I32);
inline jule::Bool _1106ec050_is_unary_op(jule::Str);
inline jule::Bool _1106ec050_is_bin_op(jule::Str);
inline jule::Bool _1106ec050_is_weak_op(jule::Str);
inline jule::Bool _1106ec050_is_str(jule::Str);
inline jule::Bool _1106ec050_is_raw_str(jule::Str);
inline jule::Bool _1106ec050_is_rune(jule::Str);
inline jule::Bool _1106ec050_is_nil(jule::Str);
inline jule::Bool _1106ec050_is_bool(jule::Str);
inline jule::Bool _1106ec050_contains_any(jule::Str,jule::Str);
inline jule::Bool _1106ec050_is_float(jule::Str);
inline jule::Bool _1106ec050_is_num(jule::Str);
inline jule::Bool _1106ec050_is_lit(jule::Str);
inline jule::Bool _1106ec050_is_ignore_ident(jule::Str);
inline jule::Bool _1106ec050_is_anon_ident(jule::Str);
inline jule::Bool _1106ec050_is_punct(jule::I32);
inline jule::Bool _1106ec050_is_space(jule::I32);
inline jule::Bool _1106ec050_is_letter(jule::I32);
inline jule::Bool _1106ec050_is_ident_rune(jule::Str);
inline jule::Bool _1106ec050_is_decimal(jule::U8);
inline jule::Bool _1106ec050_is_binary(jule::U8);
inline jule::Bool _1106ec050_is_octal(jule::U8);
inline jule::Bool _1106ec050_is_hex(jule::U8);
inline jule::Bool _1106ec050_is_assign(jule::Uint);
inline jule::Bool _1106ec050_is_postfix_op(jule::Str);
inline jule::Bool _1106ec050_is_assign_op(jule::Str);
inline jule::Ref<_11054ec70_File> _11054ec70_new_file_set(jule::Str);
inline _127e05da0_Log _11054eff0_make_err(jule::Int,jule::Int,jule::Ref<_11054ec70_File>,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _11054eff0_bytes_has_prefix(jule::Slice<jule::U8>,jule::Str);
inline jule::Str _11054eff0_float_fmt_e(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _11054eff0_float_fmt_p(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _11054eff0_float_fmt_dotnp(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _11054eff0_float_fmt_dotfp(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _11054eff0_float_fmt_dotp(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _11054eff0_float_num(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _11054eff0_common_num(jule::Slice<jule::U8>);
inline jule::Str _11054eff0_binary_num(jule::Slice<jule::U8>);
inline jule::Bool _11054eff0_is_float_fmt_e(jule::U8,jule::Int);
inline jule::Bool _11054eff0_is_float_fmt_p(jule::U8,jule::Int);
inline jule::Bool _11054eff0_is_float_fmt_dotnp(jule::Slice<jule::U8>,jule::Int);
inline jule::Bool _11054eff0_is_float_fmt_dotp(jule::Slice<jule::U8>,jule::Int);
inline jule::Bool _11054eff0_is_float_fmt_dotfp(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _11054eff0_octal_num(jule::Slice<jule::U8>);
inline jule::Str _11054eff0_hex_num(jule::Slice<jule::U8>);
inline jule::Str _11054eff0_hex_escape(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _11054eff0_big_unicode_point_escape(jule::Slice<jule::U8>);
inline jule::Str _11054eff0_little_unicode_point_escape(jule::Slice<jule::U8>);
inline jule::Str _11054eff0_hex_byte_escape(jule::Slice<jule::U8>);
inline jule::Str _11054eff0_byte_escape(jule::Slice<jule::U8>);
inline jule::Slice<_127e05da0_Log> _11054eff0_lex(jule::Ref<_11054ec70_File>);
inline jule::Ref<_1106f8b50_FileInfo> _1106f8b50_parse_file(jule::Ref<_11054ec70_File>);
inline jule::Ref<_1106f8b50_PackageInfo> _1106f8b50_parse_package(jule::Slice<jule::Ref<_11054ec70_File>>);
inline std::tuple<jule::Ref<_1104fada0_Ast>,jule::Slice<_127e05da0_Log>> _1106f8b50_parse_fileset(jule::Ref<_11054ec70_File>);
inline jule::Ref<_11054f670_ScopeTree> _110709a60_new_scope(void);
inline std::tuple<jule::Bool,jule::Bool> _110709a60_is_st(_1106ec050_Token,_1106ec050_Token);
inline std::tuple<jule::Int,jule::Bool> _110709a60_next_st_pos(jule::Slice<_1106ec050_Token>,jule::Int);
inline std::tuple<jule::Slice<_1106ec050_Token>,jule::Bool> _110709a60_skip_st(jule::Int&,jule::Slice<_1106ec050_Token>);
inline jule::Slice<jule::Ref<_110709a60_Stmt>> _110709a60_split_stms(jule::Slice<_1106ec050_Token>);
inline jule::Slice<_1106ec050_Token> _11070bfb0_is_fn_call(jule::Slice<_1106ec050_Token>);
inline jule::Ref<_11070bfb0_CallData> _11070bfb0_get_call_data(jule::Slice<_1106ec050_Token>);
inline jule::Slice<_1106ec050_Token> _11070bfb0_get_block_expr(jule::Slice<_1106ec050_Token>);
inline std::tuple<jule::Slice<_1106ec050_Token>,jule::Slice<_1106ec050_Token>> _11070bfb0_split_colon(jule::Slice<_1106ec050_Token>);
inline jule::Slice<_1106ec050_Token> _11070bfb0_eliminate_comments(jule::Slice<_1106ec050_Token>);
inline jule::Int _11070bfb0_find_lowest_prec_op(jule::Slice<_1106ec050_Token>);
inline jule::Ref<_11054f670_IdentExpr> _11070bfb0_build_ident_expr(_1106ec050_Token);
inline std::tuple<jule::Slice<_1106ec050_Token>,jule::Int> _11070bfb0_get_range_expr_tokens(jule::Slice<_1106ec050_Token>);
inline jule::Bool _110711f30_check_assign_tokens(jule::Slice<_1106ec050_Token>);
inline _127e05da0_Log _110754df0_make_err(jule::Int,jule::Int,jule::Ref<_11054ec70_File>,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<_1106ec050_Token> _110754df0_range(jule::Int&,jule::Str,jule::Str,jule::Slice<_1106ec050_Token>);
inline std::tuple<jule::Slice<_1106ec050_Token>,jule::Slice<_1106ec050_Token>> _110754df0_range_last(jule::Slice<_1106ec050_Token>);
inline std::tuple<jule::Slice<jule::Slice<_1106ec050_Token>>,jule::Slice<_127e05da0_Log>> _110754df0_parts(jule::Slice<_1106ec050_Token>,jule::Uint,jule::Bool);
inline jule::Str _110754df0_get_close_kind_of_brace(jule::Str);
inline _127e05da0_Log _110754df0_compiler_err(_1106ec050_Token,jule::Str,jule::Slice<jule::Any>);
inline void _110754df0_push_suggestion(_127e05da0_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Ref<_11054f670_Comment> _110754df0_build_comment(_1106ec050_Token);
inline jule::Str _110754df0_tokstoa(jule::Slice<_1106ec050_Token>);
inline jule::Ref<_11054f670_TypeDecl> _110a15a10_build_void_type(void);
inline jule::Ref<_11054f670_TypeDecl> _110a15a10_build_prim_type(_1106ec050_Token);
inline std::tuple<jule::Slice<_1106ec050_Token>,jule::Int> _110a15a10_split_map_range(jule::Slice<_1106ec050_Token>,jule::Int&);
inline void _1118cee40_lshift_unsig(_1118cee40_Const&,_1118cee40_Const&);
inline void _1118cee40_rshift_unsig(_1118cee40_Const&,_1118cee40_Const&);
inline jule::Bool _1118ceb10_check_bit(jule::Str,jule::Int,jule::Fn<jule::Bool(jule::Str,jule::Int,jule::Int)>);
inline jule::Str _1118ceb10_real_kind_of(jule::Str);
inline jule::Int _1118ceb10_bitsize_of(jule::Str);
inline jule::Str _1118ceb10_int_from_bits(jule::U64);
inline jule::Str _1118ceb10_uint_from_bits(jule::U64);
inline jule::Str _1118ceb10_float_from_bits(jule::U64);
inline jule::Bool _1118ceb10_check_bit_int(jule::Str,jule::Int);
inline jule::Bool _1118ceb10_check_bit_uint(jule::Str,jule::Int);
inline jule::Bool _1118ceb10_check_bit_float(jule::Str,jule::Int);
inline jule::U64 _1118ceb10_bitsize_of_float(jule::F64);
inline jule::U64 _1118ceb10_bitsize_of_int(jule::I64);
inline jule::U64 _1118ceb10_bitsize_of_uint(jule::U64);
inline jule::F64 _1118d0df0_min(jule::Str);
inline jule::F64 _1118d0df0_max(jule::Str);
inline jule::Bool _111954bc0_is_i8_compatible(jule::Str);
inline jule::Bool _111954bc0_is_i16_compatible(jule::Str);
inline jule::Bool _111954bc0_is_i32_compatible(jule::Str);
inline jule::Bool _111954bc0_is_i64_compatible(jule::Str);
inline jule::Bool _111954bc0_is_u8_compatible(jule::Str);
inline jule::Bool _111954bc0_is_u16_compatible(jule::Str);
inline jule::Bool _111954bc0_is_u32_compatible(jule::Str);
inline jule::Bool _111954bc0_is_u64_compatible(jule::Str);
inline jule::Bool _111954bc0_is_f32_compatible(jule::Str);
inline jule::Bool _111954bc0_is_f64_compatible(jule::Str);
inline jule::Bool _111954bc0_types_are_compatible(jule::Str,jule::Str);
inline jule::Bool _111954bc0_is_i16_greater(jule::Str);
inline jule::Bool _111954bc0_is_i32_greater(jule::Str);
inline jule::Bool _111954bc0_is_i64_greater(jule::Str);
inline jule::Bool _111954bc0_is_u8_greater(jule::Str);
inline jule::Bool _111954bc0_is_u16_greater(jule::Str);
inline jule::Bool _111954bc0_is_u32_greater(jule::Str);
inline jule::Bool _111954bc0_is_u64_greater(jule::Str);
inline jule::Bool _111954bc0_is_f32_greater(jule::Str);
inline jule::Bool _111954bc0_is_f64_greater(jule::Str);
inline jule::Bool _111954bc0_is_greater(jule::Str,jule::Str);
inline jule::Bool _1118e4c20_is_sig_int(jule::Str);
inline jule::Bool _1118e4c20_is_unsig_int(jule::Str);
inline jule::Bool _1118e4c20_is_int(jule::Str);
inline jule::Bool _1118e4c20_is_float(jule::Str);
inline jule::Bool _1118e4c20_is_num(jule::Str);
inline jule::Bool _1118e4c20_is_sig_num(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _111a1efb0_is_byte_lit(jule::Str);
inline jule::I32 _111a1efb0_to_rune(jule::Slice<jule::U8>);
inline jule::Str _111a1efb0_to_raw_str(jule::Slice<jule::U8>);
inline jule::Str _111a1efb0_to_str(jule::Slice<jule::U8>);
inline std::tuple<jule::U8,jule::Bool> _111a1efb0_try_btoa_common_esq(jule::Slice<jule::U8>);
inline jule::I32 _111a1efb0_rune_from_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Str _111a1efb0_str_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Ref<_110d9ce90_ReferenceStack> _110d9ce90_new_reference_stack(void);
inline jule::Str _110d9ce90_str_repeat(jule::Str,jule::Int);
inline jule::Str _110d9ce90_build_doc(jule::Ref<_11054f670_CommentGroup>);
inline jule::Ref<_1116aff70_TypeSymbol> _110d9ce90_build_type(jule::Ref<_11054f670_TypeDecl>);
inline jule::Ref<_1112d7f10_Value> _110d9ce90_build_expr(jule::Ref<_11054f670_Expr>);
inline jule::Ref<_1116aff70_TypeAlias> _110d9ce90_build_type_alias(jule::Ref<_11054f670_TypeAliasDecl>);
inline jule::Ref<_1109372e0_Field> _110d9ce90_build_field(jule::Ref<_11054f670_FieldDecl>);
inline jule::Slice<jule::Ref<_1109372e0_Field>> _110d9ce90_build_fields(jule::Slice<jule::Ref<_11054f670_FieldDecl>>);
inline jule::Ref<_1109372e0_Struct> _110d9ce90_build_struct(jule::Ref<_11054f670_StructDecl>);
inline jule::Ref<_11072eb20_Param> _110d9ce90_build_param(jule::Ref<_11054f670_ParamDecl>);
inline jule::Slice<jule::Ref<_11072eb20_Param>> _110d9ce90_build_params(jule::Slice<jule::Ref<_11054f670_ParamDecl>>);
inline jule::Ref<_11072eb20_RetType> _110d9ce90_build_ret_type(jule::Ref<_11054f670_RetTypeDecl>);
inline jule::Ref<_11072eb20_Fn> _110d9ce90_build_fn(jule::Ref<_11054f670_FnDecl>);
inline jule::Slice<jule::Ref<_11072eb20_Fn>> _110d9ce90_build_methods(jule::Slice<jule::Ref<_11054f670_FnDecl>>);
inline jule::Ref<_110e3f160_Trait> _110d9ce90_build_trait(jule::Ref<_11054f670_TraitDecl>);
inline jule::Ref<_110e453c0_EnumItem> _110d9ce90_build_enum_item(jule::Ref<_11054f670_EnumItemDecl>);
inline jule::Slice<jule::Ref<_110e453c0_EnumItem>> _110d9ce90_build_enum_items(jule::Slice<jule::Ref<_11054f670_EnumItemDecl>>);
inline jule::Ref<_110e453c0_Enum> _110d9ce90_build_enum(jule::Ref<_11054f670_EnumDecl>);
inline jule::Ref<_110e92c80_Var> _110d9ce90_build_var(jule::Ref<_11054f670_VarDecl>);
inline jule::Ref<_110e4c050_Impl> _110d9ce90_build_impl(jule::Ref<_11054f670_Impl>);
inline jule::Ref<_110af2660_ScopeChecker> _110af2660_new_scope_checker_base(jule::Ref<_110e92bc0_Sema>,jule::Ref<_11072eb20_FnIns>);
inline jule::Ref<_110af2660_ScopeChecker> _110af2660_new_scope_checker(jule::Ref<_110e92bc0_Sema>,jule::Ref<_11072eb20_FnIns>);
inline jule::Ref<_110af2660_ScopeLabel> _110af2660_find_label_parent(jule::Str,jule::Ref<_110af2660_ScopeChecker>);
inline jule::Int _110af2660_count_match_type(jule::Ref<_110af2660_Match>,jule::Ref<_1116aff70_TypeKind>);
inline jule::Slice<jule::Ref<_1112d7f10_Data>> _110af2660_get_datas_from_tuple_data(jule::Ref<_1112d7f10_Data>);
inline jule::Slice<jule::Any> _110af2660_get_expr_models(jule::Any);
inline jule::Bool _110af2660_check_mut(jule::Ref<_110e92bc0_Sema>,jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);
inline jule::Bool _110af2660_check_assign(jule::Ref<_110e92bc0_Sema>,jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>,_1106ec050_Token);
inline jule::Bool _110af2660_is_valid_ast_st_for_next_st(jule::Any);
inline jule::Bool _110af2660_is_valid_st_for_next_st(jule::Any);
inline jule::Bool _110af2660_st_is_def(jule::Any);
inline jule::Ref<_110e92c80_Var> _110e4edc0_find_var_in_package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>>,jule::Str,jule::Bool);
inline jule::Ref<_1116aff70_TypeAlias> _110e4edc0_find_type_alias_in_package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>>,jule::Str,jule::Bool);
inline jule::Ref<_1109372e0_Struct> _110e4edc0_find_struct_in_package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>>,jule::Str,jule::Bool);
inline jule::Ref<_11072eb20_Fn> _110e4edc0_find_fn_in_package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>>,jule::Str,jule::Bool);
inline jule::Ref<_110e3f160_Trait> _110e4edc0_find_trait_in_package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>>,jule::Str);
inline jule::Ref<_110e453c0_Enum> _110e4edc0_find_enum_in_package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>>,jule::Str);
inline _127e05da0_Log _110e92bc0_compiler_err(_1106ec050_Token,jule::Bool,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _110e92bc0_imp_is_lookupable(jule::Ref<_110e4edc0_ImportInfo>,jule::Str);
inline jule::Slice<jule::Ref<_110e92c80_Var>> _110e92bc0_build_ret_vars(jule::Ref<_11072eb20_FnIns>);
inline jule::Slice<jule::Ref<_110e92c80_Var>> _110e92bc0_build_param_vars(jule::Ref<_11072eb20_FnIns>);
inline jule::Slice<jule::Ref<_1116aff70_TypeAlias>> _110e92bc0_build_generic_type_aliases(jule::Ref<_11072eb20_FnIns>);
inline jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_find_file(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>>,jule::Ref<_11054ec70_File>);
inline std::tuple<jule::Bool,jule::Bool> _110e92bc0_conditional_has_ret(jule::Ref<_110af2660_Conditional>);
inline jule::Bool _110e92bc0_match_has_ret(jule::Ref<_110af2660_Match>);
inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _110e92bc0___has_ret(jule::Ref<_110af2660_Scope>);
inline jule::Bool _110e92bc0_has_ret(jule::Ref<_110af2660_Scope>);
inline void _110e92bc0_push_suggestion(_127e05da0_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<jule::Ref<_1116aff70_TypeKind>> _1111c0be0_get_fn_result_types(jule::Ref<_11072eb20_FnIns>);
inline jule::Bool _1111c0be0_trait_has_reference_receiver(jule::Ref<_110e3f160_Trait>);
inline jule::Bool _1111c0be0_float_assignable(jule::Str,jule::Ref<_1112d7f10_Data>);
inline jule::Bool _1111c0be0_sig_assignable(jule::Str,jule::Ref<_1112d7f10_Data>);
inline jule::Bool _1111c0be0_unsig_assignable(jule::Str,jule::Ref<_1112d7f10_Data>);
inline jule::Bool _1111c0be0_int_assignable(jule::Str,jule::Ref<_1112d7f10_Data>);
inline jule::Any _1112d7f10_find_builtins_import(jule::Str,jule::Ref<_110e4edc0_ImportInfo>);
inline jule::Any _1112d7f10_find_builtins_sema(jule::Str,jule::Ref<_110e92bc0_Sema>);
inline jule::Bool _1112d7f10_is_ok_for_shifting(jule::Ref<_1112d7f10_Data>);
inline jule::Bool _1112d7f10_is_instanced_struct(jule::Ref<_1109372e0_StructIns>);
inline void _1112d7f10_normalize_bitsize(jule::Ref<_1112d7f10_Data>);
inline void _1112d7f10_normalize_type(jule::Ref<_1112d7f10_Data>);
inline void _1112d7f10_apply_cast_kind_model(jule::Ref<_1112d7f10_Data>);
inline void _1112d7f10_apply_cast_kind(jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1112d7f10_build_void_data(void);
inline jule::Str _1112d7f10_kind_by_bitsize(jule::Any);
inline jule::Str _1112d7f10_check_data_for_integer_indexing(jule::Ref<_1112d7f10_Data>);
inline jule::Bool _1116aff70_can_get_ptr(jule::Ref<_1112d7f10_Data>);
inline jule::Bool _1116aff70_is_lvalue(jule::Ref<_1116aff70_TypeKind>);
inline jule::Bool _1116aff70_is_mut(jule::Ref<_1116aff70_TypeKind>);
inline jule::Bool _1116aff70_supports_cloning(jule::Ref<_1116aff70_TypeKind>);
inline jule::Bool _1116aff70_is_nil_compatible(jule::Ref<_1116aff70_TypeKind>);
inline jule::Bool _1116aff70_is_valid_for_ref(jule::Ref<_1116aff70_TypeKind>);
inline jule::Bool _1116aff70_is_variadicable(jule::Ref<_1116aff70_TypeKind>);
inline jule::Str _1116aff70_build_link_path_by_tokens(jule::Slice<_1106ec050_Token>);
inline jule::Ref<_1116aff70_Prim> _1116aff70_build_prim_type(jule::Str);
inline jule::Ref<_1109372e0_Struct> _1116aff70_get_struct_from_kind(jule::Ref<_1116aff70_TypeKind>);
inline jule::Bool _1116aff70_is_prim(jule::Str);
inline std::tuple<jule::Ref<_1111c15d0_SymbolTable>,jule::Slice<_127e05da0_Log>> _1117d9ee0_build_symbols(jule::Ref<_1104fada0_Ast>,jule::Trait<_110e4edc0_Importer>,jule::Ref<_110d9ce90_SymbolBuilder>);
inline std::tuple<jule::Ref<_110e4edc0_Package>,jule::Slice<_127e05da0_Log>> _1117d9ee0___analyze_package(jule::Slice<jule::Ref<_1104fada0_Ast>>,jule::Trait<_110e4edc0_Importer>);
inline std::tuple<jule::Ref<_110e4edc0_Package>,jule::Slice<_127e05da0_Log>> _1117d9ee0_analyze_package(jule::Slice<jule::Ref<_1104fada0_Ast>>,jule::Trait<_110e4edc0_Importer>);
inline std::tuple<jule::Ref<_1111c15d0_SymbolTable>,jule::Slice<_127e05da0_Log>> _1117d9ee0_analyze_file(jule::Ref<_1104fada0_Ast>,jule::Trait<_110e4edc0_Importer>);
inline void _1113198e0_init(void);
inline jule::Ref<_11072eb20_FnIns> _1113198e0_find_builtin_fn(jule::Str);
inline jule::Ref<_1116aff70_TypeAlias> _1113198e0_find_builtin_type_alias(jule::Str);
inline jule::Ref<_110e3f160_Trait> _1113198e0_find_builtin_trait(jule::Str);
inline jule::Any _1113198e0_find_builtin_def(jule::Str);
inline jule::Any _1113198e0_find_builtin_def_std_mem(jule::Str);
inline jule::Any _1113198e0_find_package_builtin_def(jule::Str,jule::Str);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_common_plain(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_common(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_common_mut(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_out(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_outln(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_new(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_real(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_drop(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_panic(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_make(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_append(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_copy(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_recover(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_clone(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_std_mem_size_of(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_std_mem_align_of(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>);
inline jule::Bool _117e3bec0_eval_directive_ident(jule::Str);
inline jule::Bool _117e3bec0_eval_directive_part(jule::Str);
inline jule::Slice<jule::Str> _117e3bec0_split_operans(jule::Str,jule::Str);
inline jule::Bool _117e3bec0_eval_directive_expr(jule::Str);
inline void _11020ca90_set_os_flags(void);
inline void _11020ca90_set_arch_flags(void);
inline void _11020ca90_init(void);
inline void _110194230_exit_err(jule::Str);
inline jule::Slice<jule::U8> _110194230_read_buff(jule::Str);
inline _127e05da0_Log _110194230_flat_compiler_err(jule::Str);
inline std::tuple<jule::Slice<jule::Ref<_110473c30_DirEntry>>,jule::Str> _110194230_read_package_dirents(jule::Str);
inline jule::Str _110194230_concat_all_parts(jule::Slice<jule::Str>);
inline jule::Bool _110194230_is_pass_build_directives(jule::Ref<_1104fada0_Ast>&);
inline void _110254280_push_passes(jule::Ref<_110e4edc0_Package>,jule::Slice<jule::Str>&);
inline jule::Slice<jule::Str> _110254280_get_all_unique_passes(jule::Ref<_110e4edc0_Package>,jule::Slice<jule::Ref<_110e4edc0_ImportInfo>>);
inline jule::Bool _11034cb30_is_exist_0(jule::Slice<jule::Any>,jule::Ref<_11072eb20_FnIns>);
inline jule::Bool _11034cb30_is_exist_1(jule::Slice<jule::Any>,jule::Ref<_110e92c80_Var>);
inline jule::Bool _11034cb30_is_exist_2(jule::Slice<jule::Any>,jule::Ref<_1109372e0_StructIns>);
inline jule::Bool _11034cb30_is_exist_3(jule::Slice<jule::Any>,jule::Ref<_110e3f160_Trait>);
inline jule::Bool _11034cb30_is_exist_ref(jule::Slice<jule::Any>,jule::Any);
inline jule::Bool _11034cb30_is_dead(jule::Any);
inline void _11034cb30_remove_from_slice_0(jule::Slice<jule::Ref<_11072eb20_FnIns>>&,jule::Int);
inline void _11034cb30_remove_from_slice_1(jule::Slice<jule::Ref<_1109372e0_StructIns>>&,jule::Int);
inline void _11034cb30_drop_ref(jule::Slice<jule::Any>&,jule::Int);
inline jule::Bool _11034cb30_is_all_references_are_dead_0(jule::Ref<_110d9ce90_ReferenceStack>);
inline jule::Bool _11034cb30_is_all_references_are_dead_1(jule::Ref<_110d9ce90_ReferenceStack>);
inline jule::Bool _11034cb30_is_all_references_are_dead_2(jule::Ref<_110d9ce90_ReferenceStack>);
inline jule::Bool _11034cb30_is_fn_dead(jule::Ref<_11072eb20_FnIns>);
inline jule::Bool _11034cb30_is_var_dead(jule::Ref<_110e92c80_Var>);
inline jule::Bool _11034cb30_kind_is_dead(jule::Ref<_1116aff70_TypeKind>);
inline jule::Bool _11034cb30_is_any_generic_is_dead(jule::Slice<jule::Ref<_1116aff70_TypeKind>>&);
inline jule::Bool _11034cb30_is_struct_dead(jule::Ref<_1109372e0_StructIns>);
inline jule::Bool _11034cb30_is_trait_dead(jule::Ref<_110e3f160_Trait>);
inline void _11034cb30_eliminate_dead_functions(_1108ddf20_Vector_11&);
inline void _11034cb30_eliminate_dead_globals(jule::Ref<_110e4edc0_Package>&);
inline void _11034cb30_eliminate_dead_functions_package(jule::Ref<_110e4edc0_Package>&);
inline void _11034cb30_eliminate_dead_structs(jule::Ref<_110e4edc0_Package>&);
inline void _11034cb30_eliminate_dead_traits(jule::Ref<_110e4edc0_Package>&);
inline void _11034cb30_catch_alive_init(jule::Ref<_110e4edc0_Package>&);
inline void _11034cb30_eliminate_dead_code_package(jule::Ref<_110e4edc0_Package>&);
inline void _11034cb30_eliminate_dead_code(jule::Ref<_110254280_IR>);
inline void _1102a20b0_eliminate_dead_code_of_scope(jule::Ref<_110af2660_Scope>);
inline void _1100e3f70_push_opt_level(jule::Int);
inline jule::Bool _1100e3f70_is_opt_enabled(jule::Str);
inline jule::Str _1114d55f0_gen_if(jule::Ref<_110af2660_If>);
inline jule::Str _1114d55f0_gen_conditional(jule::Ref<_110af2660_Conditional>);
inline jule::Str _1114d55f0_gen_inf_iter(jule::Ref<_110af2660_InfIter>);
inline jule::Str _1114d55f0_gen_while_iter(jule::Ref<_110af2660_WhileIter>);
inline jule::Trait<_1114d55f0_RangeSetter> _1114d55f0_get_range_setter(jule::Ref<_110af2660_RangeIter>);
inline jule::Str _1114d55f0_gen_range_iter(jule::Ref<_110af2660_RangeIter>);
inline jule::Str _1114d55f0_gen_cont(jule::Ref<_110af2660_ContSt>);
inline jule::Str _1114d55f0_gen_label(jule::Ref<_110af2660_Label>);
inline jule::Str _1114d55f0_gen_goto(jule::Ref<_110af2660_GotoSt>);
inline jule::Str _1114d55f0_gen_postfix(jule::Ref<_110af2660_Postfix>);
inline jule::Str _1114d55f0_gen_assign(jule::Ref<_110af2660_Assign>);
inline jule::Str _1114d55f0_gen_multi_assign(jule::Ref<_110af2660_MultiAssign>);
inline jule::Str _1114d55f0_gen_case(jule::Ref<_110af2660_Match>,jule::Ref<_110af2660_Case>);
inline jule::Str _1114d55f0_gen_match(jule::Ref<_110af2660_Match>);
inline jule::Str _1114d55f0_gen_fall_st(jule::Ref<_110af2660_FallSt>);
inline jule::Str _1114d55f0_gen_break_st(jule::Ref<_110af2660_BreakSt>);
inline jule::Str _1114d55f0_gen_ret_vars(jule::Ref<_110af2660_RetSt>);
inline jule::Str _1114d55f0_gen_ret_expr_tuple(jule::Ref<_110af2660_RetSt>);
inline jule::Str _1114d55f0_gen_ret_expr(jule::Ref<_110af2660_RetSt>);
inline jule::Str _1114d55f0_gen_ret_st(jule::Ref<_110af2660_RetSt>);
inline jule::Str _1114d55f0_gen_ret_st_with_defaults(jule::Ref<_1116aff70_TypeKind>);
inline jule::Str _1114d55f0_gen_recover(jule::Ref<_110af2660_Recover>);
inline jule::Str _1114d55f0_gen_data_expr(jule::Ref<_1112d7f10_Data>);
inline jule::Str _1114d55f0_gen_st(jule::Any);
inline jule::Str _1114d55f0_gen_scope(jule::Ref<_110af2660_Scope>);
inline jule::Str _1114d55f0_gen_fn_scope(jule::Ref<_11072eb20_FnIns>);
inline jule::Str _1114d55f0_gen_method_scope(jule::Ref<_11072eb20_FnIns>);
inline jule::Str _1115eb810_concat_all_parts(jule::Slice<jule::Str>);
inline jule::Str _1115eb810_get_accessor(jule::Ref<_1116aff70_TypeKind>);
inline jule::Str _1115eb810_decompose_common_esq(jule::U8);
inline jule::Str _1115eb810_sbtoa(jule::U8);
inline jule::Str _1115eb810_get_str_model(jule::Ref<_1118cee40_Const>);
inline jule::Str _1115eb810_get_bool_model(jule::Ref<_1118cee40_Const>);
inline jule::Str _1115eb810_get_nil_model(void);
inline jule::Str _1115eb810_gen_float_special_cases(jule::F64);
inline jule::Str _1115eb810_ftoa(jule::F64,jule::Int);
inline jule::Str _1115eb810_get_f32_model(jule::Ref<_1118cee40_Const>);
inline jule::Str _1115eb810_get_f64_model(jule::Ref<_1118cee40_Const>);
inline jule::Str _1115eb810_get_float_model(jule::Ref<_1112d7f10_Data>);
inline jule::Str _1115eb810_i64toa(jule::I64);
inline jule::Str _1115eb810_get_i64_model(jule::Ref<_1118cee40_Const>);
inline jule::Str _1115eb810_u64toa(jule::U64);
inline jule::Str _1115eb810_get_u64_model(jule::Ref<_1118cee40_Const>);
inline jule::Str _1115eb810_gen_const_expr(jule::Ref<_1112d7f10_Data>);
inline jule::Str _1115eb810_gen_const_expr_model(jule::Ref<_1118cee40_Const>);
inline jule::Str _1115eb810_gen_binop_expr_model(jule::Ref<_110e4e8a0_BinopExprModel>);
inline jule::Str _1115eb810_gen_var_expr_model(jule::Ref<_110e92c80_Var>);
inline jule::Str _1115eb810_gen_struct_expr_model(jule::Ref<_1109372e0_Struct>);
inline jule::Str _1115eb810_gen_struct_ins_expr_model(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _1115eb810_gen_unary_expr_model(jule::Ref<_110e4e8a0_UnaryExprModel>);
inline jule::Str _1115eb810_gen_get_ref_ptr_expr_model(jule::Ref<_110e4e8a0_GetRefPtrExprModel>);
inline jule::Str _1115eb810_gen_cpp_struct_lit_expr_model(jule::Ref<_110e4e8a0_StructLitExprModel>);
inline jule::Str _1115eb810_gen_struct_lit_expr_model(jule::Ref<_110e4e8a0_StructLitExprModel>);
inline jule::Str _1115eb810_gen_alloc_struct_lit_expr_model(jule::Ref<_110e4e8a0_AllocStructLitExprModel>);
inline jule::Str _1115eb810_gen_casting_expr_model(jule::Ref<_110e4e8a0_CastingExprModel>);
inline jule::Str _1115eb810_gen_arg_expr_models(jule::Slice<jule::Any>);
inline jule::Str _1115eb810_gen_fn_call_expr_model(jule::Ref<_110e4e8a0_FnCallExprModel>);
inline jule::Str _1115eb810_gen_slice_expr_model(jule::Ref<_110e4e8a0_SliceExprModel>);
inline jule::Str _1115eb810_gen_indexing_expr_model(jule::Ref<_110e4e8a0_IndexigExprModel>);
inline jule::Str _1115eb810_gen_anon_fn_expr_model(jule::Ref<_110e4e8a0_AnonFnExprModel>);
inline jule::Str _1115eb810_gen_map_expr_model(jule::Ref<_110e4e8a0_MapExprModel>);
inline jule::Str _1115eb810_gen_slicing_expr_model(jule::Ref<_110e4e8a0_SlicingExprModel>);
inline jule::Str _1115eb810_gen_trait_sub_ident_expr_model(jule::Ref<_110e4e8a0_TraitSubIdentExprModel>);
inline jule::Str _1115eb810_gen_struct_sub_ident_expr_model(jule::Ref<_110e4e8a0_StructSubIdentExprModel>);
inline jule::Str _1115eb810_gen_common_ident_expr_model(jule::Ref<_110e4e8a0_CommonIdentExprModel>);
inline jule::Str _1115eb810_gen_common_sub_ident_expr_model(jule::Ref<_110e4e8a0_CommonSubIdentExprModel>);
inline jule::Str _1115eb810_gen_array_expr_model(jule::Ref<_110e4e8a0_ArrayExprModel>);
inline jule::Str _1115eb810_gen_fn_ins_expr_model(jule::Ref<_11072eb20_FnIns>);
inline jule::Str _1115eb810_gen_tuple_expr_model(jule::Ref<_110e4e8a0_TupleExprModel>);
inline jule::Str _1115eb810_gen_builtin_new_call_expr_model(jule::Ref<_110e4e8a0_BuiltinNewCallExprModel>);
inline jule::Str _1115eb810_gen_builtin_out_call_expr_model(jule::Ref<_110e4e8a0_BuiltinOutCallExprModel>);
inline jule::Str _1115eb810_gen_builtin_outln_call_expr_model(jule::Ref<_110e4e8a0_BuiltinOutlnCallExprModel>);
inline jule::Str _1115eb810_gen_builtin_real_call_expr_model(jule::Ref<_110e4e8a0_BuiltinRealCallExprModel>);
inline jule::Str _1115eb810_gen_builtin_drop_call_expr_model(jule::Ref<_110e4e8a0_BuiltinDropCallExprModel>);
inline jule::Str _1115eb810_gen_builtin_panic_call_expr_model(jule::Ref<_110e4e8a0_BuiltinPanicCallExprModel>);
inline jule::Str _1115eb810_gen_builtin_make_call_expr_model(jule::Ref<_110e4e8a0_BuiltinMakeCallExprModel>);
inline jule::Str _1115eb810_gen_builtin_append_call_expr_model_assign_opt(jule::Bool,jule::Str&,jule::Ref<_1116aff70_TypeKind>&,jule::Ref<_110e4e8a0_SliceExprModel>&,jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel>&);
inline std::tuple<jule::Str,jule::Bool> _1115eb810_gen_builtin_append_call_expr_model_assign(jule::Any,jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel>);
inline jule::Str _1115eb810_gen_builtin_append_call_expr_model(jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel>);
inline jule::Str _1115eb810_gen_builtin_clone_call_expr_model(jule::Ref<_110e4e8a0_BuiltinCloneCallExprModel>);
inline jule::Str _1115eb810_gen_sizeof_expr_model(jule::Ref<_110e4e8a0_SizeofExprModel>);
inline jule::Str _1115eb810_gen_alignof_expr_model(jule::Ref<_110e4e8a0_AlignofExprModel>);
inline jule::Str _1115eb810_gen_rune_expr_model(jule::Ref<_110e4e8a0_RuneExprModel>);
inline jule::Str _1115eb810_gen_builtin_error_trait_sub_ident_expr_model(jule::Ref<_110e4e8a0_BuiltinErrorTraitSubIdentExprModel>);
inline jule::Str _1115eb810_gen_explicit_deref_expr_model(jule::Ref<_110e4e8a0_ExplicitDerefExprModel>);
inline jule::Str _1115eb810_gen_struct_static_ident_expr_model(jule::Ref<_110e4e8a0_StructStaticIdentExprModel>);
inline jule::Str _1115eb810_gen_expr_model(jule::Any);
inline jule::Str _1115eb810_gen_expr(jule::Any);
inline jule::Str _1115eb810_gen_val(jule::Ref<_1112d7f10_Value>);
inline jule::Str _1115eb810_get_init_expr(jule::Ref<_1116aff70_TypeKind>);
inline jule::Str _111b4b8a0_get_derive_fn_decl_clone(jule::Ref<_1109372e0_Struct>);
inline jule::Str _111b4b8a0_get_derive_fn_def_clone(jule::Ref<_1109372e0_Struct>);
inline jule::Str _111b4b010_as_ident(jule::Str);
inline jule::Str _111b4b010_as_jt(jule::Str);
inline jule::Str _111b4b010_get_ptr_as_ident(jule::Uintptr);
inline jule::Str _111b4b010_as_out_ident(jule::Str,jule::Uintptr);
inline jule::Str _111b4b010_as_local_ident(jule::Int,jule::Int,jule::Str);
inline jule::Str _111b4b010_fn_out_ident(jule::Ref<_11072eb20_Fn>);
inline jule::Str _111b4b010_fn_ins_out_ident(jule::Ref<_11072eb20_FnIns>);
inline jule::Str _111b4b010_trait_out_ident(jule::Ref<_110e3f160_Trait>);
inline jule::Str _111b4b010_param_out_ident(jule::Ref<_11072eb20_Param>);
inline jule::Str _111b4b010_struct_out_ident(jule::Ref<_1109372e0_Struct>);
inline jule::Str _111b4b010_struct_ins_out_ident(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4b010_field_out_ident(jule::Ref<_1109372e0_Field>);
inline jule::Str _111b4b010_var_out_ident(jule::Ref<_110e92c80_Var>);
inline jule::Str _111b4b010_iter_begin_label_ident(jule::Uintptr);
inline jule::Str _111b4b010_iter_end_label_ident(jule::Uintptr);
inline jule::Str _111b4b010_iter_next_label_ident(jule::Uintptr);
inline jule::Str _111b4b010_label_ident(jule::Str);
inline jule::Str _111b4b010_match_end_label_ident(jule::Uintptr);
inline jule::Str _111b4b010_case_begin_label_ident(jule::Uintptr);
inline jule::Str _111b4b010_case_end_label_ident(jule::Uintptr);
inline jule::Bool _111b757c0_any_equals_0(jule::Ref<_110e92c80_Var>&,jule::Any&);
inline jule::Bool _111b757c0_any_equals_1(jule::Ref<_1109372e0_FieldIns>&,jule::Any&);
inline jule::Ref<_11054f670_Directive> _111b757c0_find_directive(jule::Slice<jule::Ref<_11054f670_Directive>>,jule::Str);
inline jule::Bool _111b757c0_has_directive(jule::Slice<jule::Ref<_11054f670_Directive>>,jule::Str);
inline jule::Str _111b757c0_gen_prim_kind(jule::Ref<_1116aff70_Prim>);
inline jule::Str _111b757c0_gen_tuple_kind(jule::Ref<_1116aff70_Tuple>);
inline jule::Str _111b757c0_as_ref_kind(jule::Str);
inline jule::Str _111b757c0_gen_ref_kind(jule::Ref<_1116aff70_Ref>);
inline jule::Str _111b757c0_gen_ptr_kind(jule::Ref<_1116aff70_Ptr>);
inline jule::Str _111b757c0_gen_enum_kind(jule::Ref<_110e453c0_Enum>);
inline jule::Str _111b757c0_as_slice_kind(jule::Ref<_1116aff70_TypeKind>);
inline jule::Str _111b757c0_gen_slice_kind(jule::Ref<_1116aff70_Slc>);
inline jule::Str _111b757c0_gen_map_kind(jule::Ref<_1116aff70_Map>);
inline jule::Str _111b757c0_gen_trait_kind_from_ident(jule::Str);
inline jule::Str _111b757c0_gen_trait_kind(jule::Ref<_110e3f160_Trait>);
inline jule::Str _111b757c0_gen_struct_kind(jule::Ref<_1109372e0_Struct>);
inline jule::Str _111b757c0_gen_struct_kind_ins(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b757c0_gen_array_kind(jule::Ref<_1116aff70_Arr>);
inline jule::Str _111b757c0_gen_fn_anon_decl(jule::Ref<_11072eb20_FnIns>);
inline jule::Str _111b757c0_gen_fn_kind(jule::Ref<_11072eb20_FnIns>);
inline jule::Str _111b757c0_gen_type_kind(jule::Ref<_1116aff70_TypeKind>);
inline void _111b4cab0_add_indent(void);
inline void _111b4cab0_done_indent(void);
inline jule::Str _111b4cab0_indent(void);
inline jule::Bool _111b4cab0_is_cpp_header_file(jule::Str);
inline jule::Str _111b4cab0_gen_links(jule::Ref<_110254280_IR>);
inline jule::Str _111b4cab0_gen_fn_result(jule::Ref<_11072eb20_Fn>);
inline jule::Str _111b4cab0_gen_fn_ins_result(jule::Ref<_11072eb20_FnIns>);
inline jule::Str _111b4cab0_gen_param_prototype(jule::Ref<_11072eb20_Param>);
inline jule::Str _111b4cab0_gen_param_ins(jule::Ref<_11072eb20_ParamIns>);
inline jule::Str _111b4cab0_gen_param_ins_prototype(jule::Ref<_11072eb20_ParamIns>);
inline jule::Str _111b4cab0_gen_param(jule::Ref<_11072eb20_Param>);
inline jule::Str _111b4cab0_gen_params(jule::Slice<jule::Ref<_11072eb20_Param>>);
inline jule::Str _111b4cab0_gen_params_ins(jule::Slice<jule::Ref<_11072eb20_ParamIns>>);
inline jule::Str _111b4cab0_gen_params_prototypes(jule::Slice<jule::Ref<_11072eb20_ParamIns>>);
inline jule::Str _111b4cab0_gen_trait(jule::Ref<_110e3f160_Trait>);
inline jule::Str _111b4cab0_gen_traits_tbl(jule::Ref<_1111c15d0_SymbolTable>);
inline jule::Str _111b4cab0_gen_traits_pkg(jule::Ref<_110e4edc0_Package>);
inline jule::Str _111b4cab0_gen_traits(jule::Ref<_110254280_IR>);
inline jule::Str _111b4cab0_gen_trait_prototype(jule::Ref<_110e3f160_Trait>);
inline jule::Str _111b4cab0_gen_trait_prototypes(jule::Ref<_110e4edc0_Package>);
inline jule::Str _111b4cab0_gen_struct_plain_prototype(jule::Ref<_1109372e0_Struct>);
inline jule::Str _111b4cab0_gen_struct_plain_prototypes(jule::Slice<jule::Ref<_1109372e0_Struct>>);
inline jule::Str _111b4cab0_gen_struct_traits(jule::Ref<_1109372e0_Struct>);
inline jule::Str _111b4cab0_gen_field_decl(jule::Ref<_1109372e0_FieldIns>);
inline jule::Str _111b4cab0_gen_struct_self_field_type_kind(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4cab0_gen_struct_self_field(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4cab0_gen_struct_self_field_init_st(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4cab0_gen_struct_constructor(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4cab0_gen_struct_destructor(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4cab0_gen_struct_operators(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4cab0_gen_struct_derive_defs_prototypes(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4cab0_gen_struct_ins_prototype(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4cab0_gen_struct_prototype(jule::Ref<_1109372e0_Struct>);
inline jule::Str _111b4cab0_gen_struct_prototypes(jule::Slice<jule::Ref<_1109372e0_Struct>>);
inline jule::Str _111b4cab0_gen_fn_decl_head(jule::Ref<_11072eb20_FnIns>,jule::Bool);
inline jule::Str _111b4cab0_gen_fn_prototype(jule::Ref<_11072eb20_Fn>,jule::Bool);
inline jule::Str _111b4cab0_gen_fn_prototypes(jule::Ref<_110e4edc0_Package>);
inline jule::Str _111b4cab0_gen_prototypes(jule::Ref<_110254280_IR>,jule::Slice<jule::Ref<_1109372e0_Struct>>);
inline jule::Str _111b4cab0_gen_var_init_expr(jule::Ref<_110e92c80_Var>,jule::Str);
inline jule::Str _111b4cab0_gen_var(jule::Ref<_110e92c80_Var>);
inline jule::Str _111b4cab0_gen_globals(jule::Slice<jule::Ref<_110e92c80_Var>>);
inline jule::Str _111b4cab0_gen_fn(jule::Ref<_11072eb20_Fn>);
inline jule::Str _111b4cab0_gen_pkg_fns(jule::Ref<_110e4edc0_Package>);
inline jule::Str _111b4cab0_gen_struct_method_defs(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4cab0_gen_struct_ostream(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4cab0_gen_struct_derive_defs(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4cab0_gen_struct_ins(jule::Ref<_1109372e0_StructIns>);
inline jule::Str _111b4cab0_gen_struct(jule::Ref<_1109372e0_Struct>);
inline jule::Str _111b4cab0_gen_structs(jule::Slice<jule::Ref<_1109372e0_Struct>>);
inline jule::Str _111b4cab0_gen_fns(jule::Ref<_110254280_IR>);
inline void _111b4cab0_push_init(jule::Ref<_110e4edc0_Package>,jule::Str&);
inline jule::Str _111b4cab0_gen_init_caller(jule::Ref<_110254280_IR>);
inline void _111b4cab0_append_standard(jule::Str&,jule::Str,jule::Str);
inline jule::Str _111b4cab0_gen(jule::Ref<_110254280_IR>);
inline jule::Bool _111c6e920_is_struct_ordered(jule::Slice<jule::Ref<_1109372e0_Struct>>,jule::Ref<_1109372e0_Struct>);
inline void _111c6e920_order_structures(jule::Slice<jule::Ref<_1109372e0_Struct>>);
inline jule::Bool _111c6e920_is_var_ordered(jule::Slice<jule::Ref<_110e92c80_Var>>,jule::Ref<_110e92c80_Var>);
inline void _111c6e920_order_variables(jule::Slice<jule::Ref<_110e92c80_Var>>);
inline jule::Str _147e094f0_str_repeat(jule::Str,jule::Int);
inline void _147e094f0_print_error_message(jule::Str);
inline void _147e094f0_help(void);
inline void _147e094f0_version(void);
inline void _147e094f0_tool_distos(void);
inline void _147e094f0_tool_distarch(void);
inline void _147e094f0_tool(void);
inline void _147e094f0_julenv(void);
inline jule::Bool _147e094f0_process_command(void);
inline void _147e094f0_init(void);
inline void _147e094f0_exit_err(jule::Str);
void entry_point(void);
inline jule::Int _137e06a60_system(jule::Str);
inline std::tuple<jule::Str,jule::Str> _137e06a60_get_option(jule::Slice<jule::Str>,jule::Int&);
inline jule::Str _137e06a60_get_option_value(jule::Slice<jule::Str>,jule::Int&);
inline void _137e06a60_parse_out_option(jule::Slice<jule::Str>,jule::Int&);
inline void _137e06a60_parse_opt_option(jule::Slice<jule::Str>,jule::Int&);
inline void _137e06a60_check_target_arch(jule::Str);
inline void _137e06a60_check_target_os(jule::Str);
inline void _137e06a60_parse_target_option(jule::Slice<jule::Str>,jule::Int&);
inline void _137e06a60_parse_compiler_option(jule::Slice<jule::Str>,jule::Int&);
inline jule::Str _137e06a60_parse_options(jule::Slice<jule::Str>);
inline void _137e06a60_write_output(jule::Str,jule::Str);
inline void _137e06a60_clear_objects(void);
inline void _137e06a60_compile_ir(jule::Str,jule::Str);
inline void _137e06a60_do_spell(jule::Str,jule::Str,jule::Str);
inline void _137e06a60_check_mode(void);
inline void _137e06a60_check_compiler(void);
inline void _137e06a60_set(void);
inline void _137e06a60_print_logs(jule::Slice<_127e05da0_Log>&);
inline jule::Bool _137e06a60_is_cpp_source_file(jule::Str);
inline std::tuple<jule::Str,jule::Str> _137e06a60_gen_compile_cmd(jule::Str,jule::Ref<_110254280_IR>);
inline jule::Str _137e06a60_get_compile_path(void);
inline void _137e06a60_apply_target_independent_optimizations(jule::Ref<_110254280_IR>);
inline void _137e06a60_compile_command(void);


static jule::Array<jule::Array<jule::Str,2>,4> _147e094f0_HELP_MAP = jule::Array<jule::Array<jule::Str,2>,4>({jule::Array<jule::Str,2>({jule::Str("help", 4),jule::Str("Show help", 9)}),jule::Array<jule::Str,2>({jule::Str("version", 7),jule::Str("Show version", 12)}),jule::Array<jule::Str,2>({jule::Str("tool", 4),jule::Str("Tools for effective Jule", 24)}),jule::Array<jule::Str,2>({jule::Str("julenv", 6),jule::Str("Show information about native jule environment", 46)})});
static jule::Str _137e06a60_COMPILER = jule::Str("", 0);
static jule::Str _137e06a60_COMPILER_PATH = jule::Str("", 0);
static jule::Str _137e06a60_OUT_DIR = jule::Str("dist", 4);
static jule::Int _137e06a60_MODE = 0LLU;
static jule::Str _137e06a60_OUT_NAME = jule::Str("ir.cpp", 6);
static jule::Str _137e06a60_OUT = jule::Str("", 0);
static jule::Str _137e06a60_CPP_STD = jule::Str("c++17", 5);
static jule::Uintptr _117e8d290_STDIN = 0LLU;
static jule::Uintptr _117e8d290_STDOUT = 1LLU;
static jule::Uintptr _117e8d290_STDERR = 2LLU;
static jule::Slice<jule::Str> _117e7c8c0_ARGS = nullptr;
static jule::Slice<jule::Str> _117e7c8c0_ENV = nullptr;
static jule::Array<jule::U8,32> _110621fc0_DE_BRUIJN32_TAB = jule::Array<jule::U8,32>({0LLU,1LLU,28LLU,2LLU,29LLU,14LLU,24LLU,3LLU,30LLU,22LLU,20LLU,15LLU,25LLU,17LLU,4LLU,8LLU,31LLU,27LLU,13LLU,23LLU,21LLU,19LLU,16LLU,7LLU,26LLU,12LLU,18LLU,6LLU,11LLU,5LLU,10LLU,9LLU});
static jule::Array<jule::U8,64> _110621fc0_DE_BRUIJN64_TAB = jule::Array<jule::U8,64>({0LLU,1LLU,56LLU,2LLU,57LLU,49LLU,28LLU,3LLU,61LLU,58LLU,42LLU,50LLU,38LLU,29LLU,17LLU,4LLU,62LLU,47LLU,59LLU,36LLU,45LLU,43LLU,51LLU,22LLU,53LLU,39LLU,33LLU,30LLU,24LLU,18LLU,12LLU,5LLU,63LLU,55LLU,48LLU,27LLU,60LLU,41LLU,37LLU,16LLU,46LLU,35LLU,44LLU,21LLU,52LLU,32LLU,23LLU,11LLU,54LLU,26LLU,40LLU,15LLU,34LLU,20LLU,31LLU,10LLU,25LLU,14LLU,19LLU,9LLU,13LLU,8LLU,7LLU,6LLU});
static jule::Trait<jule::Error> _110621ed0_OVERFLOW_ERROR = jule::new_struct<_110621ed0_bits_error>(new( std::nothrow ) _110621ed0_bits_error(jule::Str("integer overflow", 16)));
static jule::Trait<jule::Error> _110621ed0_DIVIDE_ERROR = jule::new_struct<_110621ed0_bits_error>(new( std::nothrow ) _110621ed0_bits_error(jule::Str("integer divide by zero", 22)));
static jule::Array<jule::F64,6> _1100cd0d0__SIN = jule::Array<jule::F64,6>({0.00000000015896230157654656,-0.000000025050747762857807,0.0000027557313621385722,-0.0001984126982958954,0.008333333333322118,-0.1666666666666663});
static jule::Array<jule::F64,6> _1100cd0d0__COS = jule::Array<jule::F64,6>({-0.000000000011358536521387682,0.000000002087570084197473,-0.0000002755731417929674,0.000024801587288851704,-0.0013888888888873056,0.041666666666666595});
static jule::Array<jule::F64,3> _1100eaf20__TAN_P = jule::Array<jule::F64,3>({-13093.693918138379,1153516.6483858742,-17956525.197648488});
static jule::Array<jule::F64,5> _1100eaf20__TAN_Q = jule::Array<jule::F64,5>({1LL,13681.296347069296,-1320892.3444021097,25008380.18233579,-53869575.592945464});
static jule::Array<jule::U64,20> _110149e20_M_PI4 = jule::Array<jule::U64,20>({1LLU,5040379952546458195LLU,17892431488136887169LLU,13169980181085364355LLU,18204331823439776451LLU,7946843935494350272LLU,905889640498799673LLU,18175356263134875261LLU,15061281708168349961LLU,15220161563773041794LLU,8296664548579374057LLU,4109744767560208502LLU,4607516669194743839LLU,16023283104648321598LLU,15739233654134936430LLU,11424645774684705882LLU,16883842788696515318LLU,8795094592981902804LLU,15561835991111744016LLU,12395701187267450711LLU});
static jule::Array<jule::F64,6> _1101ab0a0_P_1R8 = jule::Array<jule::F64,6>({0LL,0.11718749999998865,13.239480659307358,412.05185430737856,3874.7453891396053,7914.479540318917});
static jule::Array<jule::F64,5> _1101ab0a0_P_1S8 = jule::Array<jule::F64,5>({114.20737037567841,3650.9308342085346,36956.206026903346,97602.79359349508,30804.27206278888});
static jule::Array<jule::F64,6> _1101ab0a0_P_1R5 = jule::Array<jule::F64,6>({0.000000000013199051955624352,0.1171874931906141,6.802751278684329,108.30818299018911,517.6361395331998,528.7152013633375});
static jule::Array<jule::F64,5> _1101ab0a0_P_1S5 = jule::Array<jule::F64,5>({59.28059872211313,991.4014187336144,5353.26695291488,7844.690317495512,1504.0468881036106});
static jule::Array<jule::F64,6> _1101ab0a0_P_1R3 = jule::Array<jule::F64,6>({0.000000003025039161373736,0.11718686556725359,3.9329775003331564,35.11940355916369,91.05501107507813,48.55906851973649});
static jule::Array<jule::F64,5> _1101ab0a0_P_1S3 = jule::Array<jule::F64,5>({34.79130950012515,336.76245874782575,1046.8713997577513,890.8113463982564,103.78793243963928});
static jule::Array<jule::F64,6> _1101ab0a0_P_1R2 = jule::Array<jule::F64,6>({0.00000010771083010687374,0.11717621946268335,2.368514966676088,12.242610914826123,17.693971127168773,5.073523125888185});
static jule::Array<jule::F64,5> _1101ab0a0_P_1S2 = jule::Array<jule::F64,5>({21.43648593638214,125.29022716840275,232.2764690571628,117.6793732871471,8.364638933716183});
static jule::Array<jule::F64,6> _1101ab0a0_Q_1R8 = jule::Array<jule::F64,6>({0LL,-0.10253906249999271,-16.271753454459,-759.6017225139501,-11849.806670242959,-48438.512428575035});
static jule::Array<jule::F64,6> _1101ab0a0_Q_1S8 = jule::Array<jule::F64,6>({161.3953697007229,7825.385999233485,133875.33628724958,719657.7236832409,666601.2326177764,-294490.26430383464});
static jule::Array<jule::F64,6> _1101ab0a0_Q_1R5 = jule::Array<jule::F64,6>({-0.00000000002089799311417641,-0.10253905024137543,-8.05644828123936,-183.66960747488838,-1373.1937606550816,-2612.4444045321566});
static jule::Array<jule::F64,6> _1101ab0a0_Q_1S5 = jule::Array<jule::F64,6>({81.27655013843358,1991.7987346048596,17468.48519249089,49851.42709103523,27948.075163891812,-4719.183547951285});
static jule::Array<jule::F64,6> _1101ab0a0_Q_1R3 = jule::Array<jule::F64,6>({-0.000000005078312264617666,-0.10253782982083709,-4.610115811394734,-57.847221656278364,-228.2445407376317,-219.21012847890933});
static jule::Array<jule::F64,6> _1101ab0a0_Q_1S3 = jule::Array<jule::F64,6>({47.66515503237295,673.8651126766997,3380.1528667952634,5547.729097207228,1903.119193388108,-135.20119144430734});
static jule::Array<jule::F64,6> _1101ab0a0_Q_1R2 = jule::Array<jule::F64,6>({-0.00000017838172751095887,-0.10251704260798555,-2.7522056827818746,-19.663616264370372,-42.32531333728305,-21.371921170370406});
static jule::Array<jule::F64,6> _1101ab0a0_Q_1S2 = jule::Array<jule::F64,6>({29.533362906052385,252.98154998219053,757.5028348686454,739.3932053204672,155.94900333666612,-4.959498988226282});
static jule::Array<jule::F64,6> _1102aaee0_P_0R8 = jule::Array<jule::F64,6>({0LL,-0.07031249999999004,-8.081670412753498,-257.06310567970485,-2485.216410094288,-5253.043804907295});
static jule::Array<jule::F64,5> _1102aaee0_P_0S8 = jule::Array<jule::F64,5>({116.53436461966818,3833.7447536412183,40597.857264847255,116752.97256437592,47627.728414673096});
static jule::Array<jule::F64,6> _1102aaee0_P_0R5 = jule::Array<jule::F64,6>({-0.00000000001141254646918945,-0.07031249408735993,-4.159610644705878,-67.67476522651673,-331.23129964917297,-346.4333883656049});
static jule::Array<jule::F64,5> _1102aaee0_P_0S5 = jule::Array<jule::F64,5>({60.753938269230034,1051.2523059570458,5978.970943338558,9625.445143577745,2406.058159229391});
static jule::Array<jule::F64,6> _1102aaee0_P_0R3 = jule::Array<jule::F64,6>({-0.000000002547046017719519,-0.07031196163814817,-2.409032215495296,-21.96597747348831,-58.07917047017376,-31.44794705948885});
static jule::Array<jule::F64,5> _1102aaee0_P_0S3 = jule::Array<jule::F64,5>({35.85603380552097,361.51398305030386,1193.6078379211153,1127.9967985690741,173.58093081333575});
static jule::Array<jule::F64,6> _1102aaee0_P_0R2 = jule::Array<jule::F64,6>({-0.00000008875343330325264,-0.07030309954836247,-1.4507384678095299,-7.635696138235278,-11.193166886035675,-3.2336457935133534});
static jule::Array<jule::F64,5> _1102aaee0_P_0S2 = jule::Array<jule::F64,5>({22.22029975320888,136.2067942182152,270.4702786580835,153.87539420832033,14.65761769482562});
static jule::Array<jule::F64,6> _1102aaee0_Q_0R8 = jule::Array<jule::F64,6>({0LL,0.0732421874999935,11.76820646822527,557.6733802564019,8859.197207564686,37014.62677768878});
static jule::Array<jule::F64,6> _1102aaee0_Q_0S8 = jule::Array<jule::F64,6>({163.77602689568982,8098.344946564498,142538.29141912048,803309.2571195144,840501.5798190605,-343899.2935378666});
static jule::Array<jule::F64,6> _1102aaee0_Q_0R5 = jule::Array<jule::F64,6>({0.000000000018408596359451553,0.07324217666126848,5.8356350896205695,135.11157728644983,1027.243765961641,1989.9778586460538});
static jule::Array<jule::F64,6> _1102aaee0_Q_0S5 = jule::Array<jule::F64,6>({82.77661022365378,2077.81416421393,18847.28877857181,56751.11228949473,35976.75384251145,-5354.342756019448});
static jule::Array<jule::F64,6> _1102aaee0_Q_0R3 = jule::Array<jule::F64,6>({0.000000004377410140897386,0.07324111800429114,3.344231375161707,42.621844074541265,170.8080913405656,166.73394869665117});
static jule::Array<jule::F64,6> _1102aaee0_Q_0S3 = jule::Array<jule::F64,6>({48.75887297245872,709.689221056606,3704.1482262011136,6460.425167525689,2516.3336892036896,-149.2474518361564});
static jule::Array<jule::F64,6> _1102aaee0_Q_0R2 = jule::Array<jule::F64,6>({0.00000015044444488698327,0.07322342659630793,1.99819174093816,14.495602934788574,31.666231750478154,16.252707571092927});
static jule::Array<jule::F64,6> _1102aaee0_Q_0S2 = jule::Array<jule::F64,6>({30.36558483552192,269.34811860804984,844.7837575953201,882.9358451124886,212.66638851179883,-5.3109549388266695});
static jule::Array<jule::F64,12> _11037b0d0__LGAM_A = jule::Array<jule::F64,12>({0.07721566490153287,0.3224670334241136,0.06735230105312927,0.020580808432516733,0.007385550860814029,0.0028905138367341563,0.0011927076318336207,0.0005100697921535113,0.00022086279071390839,0.00010801156724758394,0.000025214456545125733,0.000044864094961891516});
static jule::Array<jule::F64,7> _11037b0d0__LGAM_R = jule::Array<jule::F64,7>({1LL,1.3920053346762105,0.7219355475671381,0.17193386563280308,0.01864591917156529,0.0007779424963818936,0.000007326684307446256});
static jule::Array<jule::F64,7> _11037b0d0__LGAM_S = jule::Array<jule::F64,7>({-0.07721566490153287,0.21498241596060885,0.325778796408931,0.14635047265246445,0.02664227030336386,0.0018402845140733772,0.00003194753265841009});
static jule::Array<jule::F64,15> _11037b0d0__LGAM_T = jule::Array<jule::F64,15>({0.48383612272381005,-0.1475877229945939,0.06462494023913339,-0.032788541075985965,0.01797067508118204,-0.010314224129834144,0.006100538702462913,-0.0036845201678113826,0.0022596478090061247,-0.0014034646998923284,0.000881081882437654,-0.0005385953053567405,0.00031563207090362595,-0.00031275416837512086,0.0003355291926355191});
static jule::Array<jule::F64,6> _11037b0d0__LGAM_U = jule::Array<jule::F64,6>({-0.07721566490153287,0.6328270640250934,1.4549225013723477,0.9777175279633727,0.22896372806469245,0.013381091853678766});
static jule::Array<jule::F64,6> _11037b0d0__LGAM_V = jule::Array<jule::F64,6>({1LL,2.4559779371304113,2.128489763798934,0.7692851504566728,0.10422264559336913,0.003217092422824239});
static jule::Array<jule::F64,7> _11037b0d0__LGAM_W = jule::Array<jule::F64,7>({0.4189385332046727,0.08333333333333297,-0.0027777777772877554,0.0007936505586430196,-0.00059518755745034,0.0008363399189962821,-0.0016309293409657527});
static jule::Array<jule::F64,3> _110305650_TANH_P = jule::Array<jule::F64,3>({-0.9643991794250523,-99.28772310019185,-1614.6876844170845});
static jule::Array<jule::F64,3> _110305650_TANH_Q = jule::Array<jule::F64,3>({112.81167849163293,2235.4883906010045,4844.063053251255});
static jule::Array<jule::F64,7> _1104ab510__GAM_P = jule::Array<jule::F64,7>({0.00016011952247675185,0.0011913514700658638,0.010421379756176158,0.04763678004571372,0.20744822764843598,0.4942148268014971,1LL});
static jule::Array<jule::F64,8> _1104ab510__GAM_Q = jule::Array<jule::F64,8>({-0.000023158187332412014,0.0005396055804933034,-0.004456419138517973,0.011813978522206043,0.035823639860549865,-0.23459179571824335,0.0714304917030273,1LL});
static jule::Array<jule::F64,5> _1104ab510__GAM_S = jule::Array<jule::F64,5>({0.0007873113957930937,-0.00022954996161337813,-0.0026813261780578124,0.0034722222160545866,0.08333333333334822});
static jule::Array<jule::F64,32> _11052ac10_POW10_TAB = jule::Array<jule::F64,32>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL,1000000000000000000LL,10000000000000000000LLU,100000000000000000000.0,1000000000000000000000.0,10000000000000000000000.0,100000000000000000000000.0,1000000000000000000000000.0,10000000000000000000000000.0,100000000000000000000000000.0,1000000000000000000000000000.0,10000000000000000000000000000.0,100000000000000000000000000000.0,1000000000000000000000000000000.0,10000000000000000000000000000000.0});
static jule::Array<jule::F64,10> _11052ac10_POW10_POSTAB32 = jule::Array<jule::F64,10>({1LL,100000000000000000000000000000000.0,10000000000000000000000000000000000000000000000000000000000000000.0,1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0});
static jule::Array<jule::F64,11> _11052ac10_POW10_NEGTAB32 = jule::Array<jule::F64,11>({1LL,0.00000000000000000000000000000001,0.0000000000000000000000000000000000000000000000000000000000000001,0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001});
static _117e12d10_FloatInfo _117e12d10_F32_INFO = _117e12d10_FloatInfo(23LLU,8LLU,-127LL);
static _117e12d10_FloatInfo _117e12d10_F64_INFO = _117e12d10_FloatInfo(52LLU,11LLU,-1023LL);
static jule::Array<jule::Array<jule::U64,2>,696> _117e95220_DETAILED_POWS_OF_TEN = jule::Array<jule::Array<jule::U64,2>,696>({jule::Array<jule::U64,2>({1671618768450675795LLU,18054884314459144840LLU}),jule::Array<jule::U64,2>({1044761730281672372LLU,11284302696536965525LLU}),jule::Array<jule::U64,2>({5917638181279478369LLU,14105378370671206906LLU}),jule::Array<jule::U64,2>({16620419763454123769LLU,17631722963339008632LLU}),jule::Array<jule::U64,2>({10387762352158827356LLU,11019826852086880395LLU}),jule::Array<jule::U64,2>({8373016921771146291LLU,13774783565108600494LLU}),jule::Array<jule::U64,2>({1242899115359157055LLU,17218479456385750618LLU}),jule::Array<jule::U64,2>({5388497965526861063LLU,10761549660241094136LLU}),jule::Array<jule::U64,2>({6735622456908576329LLU,13451937075301367670LLU}),jule::Array<jule::U64,2>({17642900107990496220LLU,16814921344126709587LLU}),jule::Array<jule::U64,2>({8720969558280366185LLU,10509325840079193492LLU}),jule::Array<jule::U64,2>({10901211947850457732LLU,13136657300098991865LLU}),jule::Array<jule::U64,2>({18238200953240460069LLU,16420821625123739831LLU}),jule::Array<jule::U64,2>({18316404623416369399LLU,10263013515702337394LLU}),jule::Array<jule::U64,2>({13672133742415685941LLU,12828766894627921743LLU}),jule::Array<jule::U64,2>({12478481159592219522LLU,16035958618284902179LLU}),jule::Array<jule::U64,2>({5493207715531443249LLU,10022474136428063862LLU}),jule::Array<jule::U64,2>({16089881681269079869LLU,12528092670535079827LLU}),jule::Array<jule::U64,2>({15500666083158961933LLU,15660115838168849784LLU}),jule::Array<jule::U64,2>({9687916301974351208LLU,9787572398855531115LLU}),jule::Array<jule::U64,2>({7498209359040551106LLU,12234465498569413894LLU}),jule::Array<jule::U64,2>({149389661945913074LLU,15293081873211767368LLU}),jule::Array<jule::U64,2>({93368538716195671LLU,9558176170757354605LLU}),jule::Array<jule::U64,2>({4728396691822632493LLU,11947720213446693256LLU}),jule::Array<jule::U64,2>({5910495864778290617LLU,14934650266808366570LLU}),jule::Array<jule::U64,2>({8305745933913819539LLU,9334156416755229106LLU}),jule::Array<jule::U64,2>({1158810380537498616LLU,11667695520944036383LLU}),jule::Array<jule::U64,2>({15283571030954036982LLU,14584619401180045478LLU}),jule::Array<jule::U64,2>({9881091751837770420LLU,18230774251475056848LLU}),jule::Array<jule::U64,2>({6175682344898606512LLU,11394233907171910530LLU}),jule::Array<jule::U64,2>({16942974967978033949LLU,14242792383964888162LLU}),jule::Array<jule::U64,2>({11955346673117766628LLU,17803490479956110203LLU}),jule::Array<jule::U64,2>({5166248661484910190LLU,11127181549972568877LLU}),jule::Array<jule::U64,2>({11069496845283525642LLU,13908976937465711096LLU}),jule::Array<jule::U64,2>({13836871056604407053LLU,17386221171832138870LLU}),jule::Array<jule::U64,2>({4036358391950366504LLU,10866388232395086794LLU}),jule::Array<jule::U64,2>({14268820026792733938LLU,13582985290493858492LLU}),jule::Array<jule::U64,2>({17836025033490917422LLU,16978731613117323115LLU}),jule::Array<jule::U64,2>({8841672636718129437LLU,10611707258198326947LLU}),jule::Array<jule::U64,2>({6440404777470273892LLU,13264634072747908684LLU}),jule::Array<jule::U64,2>({8050505971837842365LLU,16580792590934885855LLU}),jule::Array<jule::U64,2>({11949095260039733334LLU,10362995369334303659LLU}),jule::Array<jule::U64,2>({10324683056622278764LLU,12953744211667879574LLU}),jule::Array<jule::U64,2>({3682481783923072647LLU,16192180264584849468LLU}),jule::Array<jule::U64,2>({11524923151806696212LLU,10120112665365530917LLU}),jule::Array<jule::U64,2>({571095884476206553LLU,12650140831706913647LLU}),jule::Array<jule::U64,2>({14548927910877421904LLU,15812676039633642058LLU}),jule::Array<jule::U64,2>({13704765962725776594LLU,9882922524771026286LLU}),jule::Array<jule::U64,2>({7907585416552444934LLU,12353653155963782858LLU}),jule::Array<jule::U64,2>({661109733835780360LLU,15442066444954728573LLU}),jule::Array<jule::U64,2>({2719036592861056677LLU,9651291528096705358LLU}),jule::Array<jule::U64,2>({12622167777931096654LLU,12064114410120881697LLU}),jule::Array<jule::U64,2>({1942651667131707105LLU,15080143012651102122LLU}),jule::Array<jule::U64,2>({5825843310384704845LLU,9425089382906938826LLU}),jule::Array<jule::U64,2>({16505676174835656864LLU,11781361728633673532LLU}),jule::Array<jule::U64,2>({2185351144835019464LLU,14726702160792091916LLU}),jule::Array<jule::U64,2>({2731688931043774330LLU,18408377700990114895LLU}),jule::Array<jule::U64,2>({8624834609543440812LLU,11505236063118821809LLU}),jule::Array<jule::U64,2>({15392729280356688919LLU,14381545078898527261LLU}),jule::Array<jule::U64,2>({5405853545163697437LLU,17976931348623159077LLU}),jule::Array<jule::U64,2>({5684501474941004850LLU,11235582092889474423LLU}),jule::Array<jule::U64,2>({2493940825248868159LLU,14044477616111843029LLU}),jule::Array<jule::U64,2>({7729112049988473103LLU,17555597020139803786LLU}),jule::Array<jule::U64,2>({9442381049670183593LLU,10972248137587377366LLU}),jule::Array<jule::U64,2>({2579604275232953683LLU,13715310171984221708LLU}),jule::Array<jule::U64,2>({3224505344041192104LLU,17144137714980277135LLU}),jule::Array<jule::U64,2>({8932844867666826921LLU,10715086071862673209LLU}),jule::Array<jule::U64,2>({15777742103010921555LLU,13393857589828341511LLU}),jule::Array<jule::U64,2>({15110491610336264040LLU,16742321987285426889LLU}),jule::Array<jule::U64,2>({2526528228819083169LLU,10463951242053391806LLU}),jule::Array<jule::U64,2>({12381532322878629770LLU,13079939052566739757LLU}),jule::Array<jule::U64,2>({1641857348316123500LLU,16349923815708424697LLU}),jule::Array<jule::U64,2>({12555375888766046947LLU,10218702384817765435LLU}),jule::Array<jule::U64,2>({11082533842530170780LLU,12773377981022206794LLU}),jule::Array<jule::U64,2>({4629795266307937667LLU,15966722476277758493LLU}),jule::Array<jule::U64,2>({5199465050656154994LLU,9979201547673599058LLU}),jule::Array<jule::U64,2>({15722703350174969551LLU,12474001934591998822LLU}),jule::Array<jule::U64,2>({10430007150863936130LLU,15592502418239998528LLU}),jule::Array<jule::U64,2>({6518754469289960081LLU,9745314011399999080LLU}),jule::Array<jule::U64,2>({8148443086612450102LLU,12181642514249998850LLU}),jule::Array<jule::U64,2>({962181821410786819LLU,15227053142812498563LLU}),jule::Array<jule::U64,2>({16742264702877599426LLU,9516908214257811601LLU}),jule::Array<jule::U64,2>({7092772823314835570LLU,11896135267822264502LLU}),jule::Array<jule::U64,2>({18089338065998320271LLU,14870169084777830627LLU}),jule::Array<jule::U64,2>({8999993282035256217LLU,9293855677986144142LLU}),jule::Array<jule::U64,2>({2026619565689294464LLU,11617319597482680178LLU}),jule::Array<jule::U64,2>({11756646493966393888LLU,14521649496853350222LLU}),jule::Array<jule::U64,2>({5472436080603216552LLU,18152061871066687778LLU}),jule::Array<jule::U64,2>({8031958568804398249LLU,11345038669416679861LLU}),jule::Array<jule::U64,2>({14651634229432885715LLU,14181298336770849826LLU}),jule::Array<jule::U64,2>({9091170749936331336LLU,17726622920963562283LLU}),jule::Array<jule::U64,2>({3376138709496513133LLU,11079139325602226427LLU}),jule::Array<jule::U64,2>({18055231442152805128LLU,13848924157002783033LLU}),jule::Array<jule::U64,2>({8733981247408842698LLU,17311155196253478792LLU}),jule::Array<jule::U64,2>({5458738279630526686LLU,10819471997658424245LLU}),jule::Array<jule::U64,2>({11435108867965546262LLU,13524339997073030306LLU}),jule::Array<jule::U64,2>({5070514048102157020LLU,16905424996341287883LLU}),jule::Array<jule::U64,2>({863228270850154185LLU,10565890622713304927LLU}),jule::Array<jule::U64,2>({14914093393844856443LLU,13207363278391631158LLU}),jule::Array<jule::U64,2>({9419244705451294746LLU,16509204097989538948LLU}),jule::Array<jule::U64,2>({15110399977761835024LLU,10318252561243461842LLU}),jule::Array<jule::U64,2>({9664627935347517973LLU,12897815701554327303LLU}),jule::Array<jule::U64,2>({7469098900757009562LLU,16122269626942909129LLU}),jule::Array<jule::U64,2>({16197401859041600736LLU,10076418516839318205LLU}),jule::Array<jule::U64,2>({6411694268519837208LLU,12595523146049147757LLU}),jule::Array<jule::U64,2>({12626303854077184414LLU,15744403932561434696LLU}),jule::Array<jule::U64,2>({7891439908798240259LLU,9840252457850896685LLU}),jule::Array<jule::U64,2>({14475985904425188227LLU,12300315572313620856LLU}),jule::Array<jule::U64,2>({18094982380531485284LLU,15375394465392026070LLU}),jule::Array<jule::U64,2>({6697677969404790399LLU,9609621540870016294LLU}),jule::Array<jule::U64,2>({17595469498610763806LLU,12012026926087520367LLU}),jule::Array<jule::U64,2>({17382650854836066854LLU,15015033657609400459LLU}),jule::Array<jule::U64,2>({8558313775058847832LLU,9384396036005875287LLU}),jule::Array<jule::U64,2>({6086206200396171886LLU,11730495045007344109LLU}),jule::Array<jule::U64,2>({12219443768922602761LLU,14663118806259180136LLU}),jule::Array<jule::U64,2>({15274304711153253452LLU,18328898507823975170LLU}),jule::Array<jule::U64,2>({14158126462898171311LLU,11455561567389984481LLU}),jule::Array<jule::U64,2>({3862600023340550427LLU,14319451959237480602LLU}),jule::Array<jule::U64,2>({14051622066030463842LLU,17899314949046850752LLU}),jule::Array<jule::U64,2>({8782263791269039901LLU,11187071843154281720LLU}),jule::Array<jule::U64,2>({10977829739086299876LLU,13983839803942852150LLU}),jule::Array<jule::U64,2>({4498915137003099037LLU,17479799754928565188LLU}),jule::Array<jule::U64,2>({12035193997481712706LLU,10924874846830353242LLU}),jule::Array<jule::U64,2>({5820620459997365075LLU,13656093558537941553LLU}),jule::Array<jule::U64,2>({11887461593424094248LLU,17070116948172426941LLU}),jule::Array<jule::U64,2>({9735506505103752857LLU,10668823092607766838LLU}),jule::Array<jule::U64,2>({2946011094524915263LLU,13336028865759708548LLU}),jule::Array<jule::U64,2>({3682513868156144079LLU,16670036082199635685LLU}),jule::Array<jule::U64,2>({4607414176811284001LLU,10418772551374772303LLU}),jule::Array<jule::U64,2>({1147581702586717097LLU,13023465689218465379LLU}),jule::Array<jule::U64,2>({15269535183515560084LLU,16279332111523081723LLU}),jule::Array<jule::U64,2>({7237616480483531100LLU,10174582569701926077LLU}),jule::Array<jule::U64,2>({13658706619031801779LLU,12718228212127407596LLU}),jule::Array<jule::U64,2>({17073383273789752224LLU,15897785265159259495LLU}),jule::Array<jule::U64,2>({17588393573759676996LLU,9936115790724537184LLU}),jule::Array<jule::U64,2>({3538747893490044629LLU,12420144738405671481LLU}),jule::Array<jule::U64,2>({9035120885289943691LLU,15525180923007089351LLU}),jule::Array<jule::U64,2>({12564479580947296663LLU,9703238076879430844LLU}),jule::Array<jule::U64,2>({15705599476184120828LLU,12129047596099288555LLU}),jule::Array<jule::U64,2>({15020313326802763131LLU,15161309495124110694LLU}),jule::Array<jule::U64,2>({4776009810824339053LLU,9475818434452569184LLU}),jule::Array<jule::U64,2>({5970012263530423816LLU,11844773043065711480LLU}),jule::Array<jule::U64,2>({7462515329413029771LLU,14805966303832139350LLU}),jule::Array<jule::U64,2>({52386062455755702LLU,9253728939895087094LLU}),jule::Array<jule::U64,2>({9288854614924470436LLU,11567161174868858867LLU}),jule::Array<jule::U64,2>({6999382250228200141LLU,14458951468586073584LLU}),jule::Array<jule::U64,2>({8749227812785250177LLU,18073689335732591980LLU}),jule::Array<jule::U64,2>({14691639419845557168LLU,11296055834832869987LLU}),jule::Array<jule::U64,2>({13752863256379558556LLU,14120069793541087484LLU}),jule::Array<jule::U64,2>({17191079070474448196LLU,17650087241926359355LLU}),jule::Array<jule::U64,2>({8438581409832836170LLU,11031304526203974597LLU}),jule::Array<jule::U64,2>({15159912780718433117LLU,13789130657754968246LLU}),jule::Array<jule::U64,2>({9726518939043265588LLU,17236413322193710308LLU}),jule::Array<jule::U64,2>({15302446373756816800LLU,10772758326371068942LLU}),jule::Array<jule::U64,2>({9904685930341245193LLU,13465947907963836178LLU}),jule::Array<jule::U64,2>({3157485376071780683LLU,16832434884954795223LLU}),jule::Array<jule::U64,2>({8890957387685944783LLU,10520271803096747014LLU}),jule::Array<jule::U64,2>({1890324697752655170LLU,13150339753870933768LLU}),jule::Array<jule::U64,2>({2362905872190818963LLU,16437924692338667210LLU}),jule::Array<jule::U64,2>({6088502188546649756LLU,10273702932711667006LLU}),jule::Array<jule::U64,2>({16833999772538088003LLU,12842128665889583757LLU}),jule::Array<jule::U64,2>({7207441660390446292LLU,16052660832361979697LLU}),jule::Array<jule::U64,2>({16033866083812498692LLU,10032913020226237310LLU}),jule::Array<jule::U64,2>({10818960567910847557LLU,12541141275282796638LLU}),jule::Array<jule::U64,2>({4300328673033783639LLU,15676426594103495798LLU}),jule::Array<jule::U64,2>({16522763475928278486LLU,9797766621314684873LLU}),jule::Array<jule::U64,2>({6818396289628184396LLU,12247208276643356092LLU}),jule::Array<jule::U64,2>({8522995362035230495LLU,15309010345804195115LLU}),jule::Array<jule::U64,2>({3021029092058325107LLU,9568131466127621947LLU}),jule::Array<jule::U64,2>({17611344420355070096LLU,11960164332659527433LLU}),jule::Array<jule::U64,2>({8179122470161673908LLU,14950205415824409292LLU}),jule::Array<jule::U64,2>({14335323580705822000LLU,9343878384890255807LLU}),jule::Array<jule::U64,2>({13307468457454889596LLU,11679847981112819759LLU}),jule::Array<jule::U64,2>({12022649553391224092LLU,14599809976391024699LLU}),jule::Array<jule::U64,2>({10416625923311642211LLU,18249762470488780874LLU}),jule::Array<jule::U64,2>({11122077220497164286LLU,11406101544055488046LLU}),jule::Array<jule::U64,2>({4679224488766679549LLU,14257626930069360058LLU}),jule::Array<jule::U64,2>({15072402647813125244LLU,17822033662586700072LLU}),jule::Array<jule::U64,2>({9420251654883203278LLU,11138771039116687545LLU}),jule::Array<jule::U64,2>({16387000587031392001LLU,13923463798895859431LLU}),jule::Array<jule::U64,2>({15872064715361852097LLU,17404329748619824289LLU}),jule::Array<jule::U64,2>({3002511419460075705LLU,10877706092887390181LLU}),jule::Array<jule::U64,2>({8364825292752482535LLU,13597132616109237726LLU}),jule::Array<jule::U64,2>({1232659579085827361LLU,16996415770136547158LLU}),jule::Array<jule::U64,2>({14605470292210805812LLU,10622759856335341973LLU}),jule::Array<jule::U64,2>({4421779809981343554LLU,13278449820419177467LLU}),jule::Array<jule::U64,2>({915538744049291538LLU,16598062275523971834LLU}),jule::Array<jule::U64,2>({5183897733458195115LLU,10373788922202482396LLU}),jule::Array<jule::U64,2>({6479872166822743894LLU,12967236152753102995LLU}),jule::Array<jule::U64,2>({3488154190101041964LLU,16209045190941378744LLU}),jule::Array<jule::U64,2>({2180096368813151227LLU,10130653244338361715LLU}),jule::Array<jule::U64,2>({16560178516298602746LLU,12663316555422952143LLU}),jule::Array<jule::U64,2>({16088537126945865529LLU,15829145694278690179LLU}),jule::Array<jule::U64,2>({7749492695127472003LLU,9893216058924181362LLU}),jule::Array<jule::U64,2>({463493832054564196LLU,12366520073655226703LLU}),jule::Array<jule::U64,2>({14414425345350368957LLU,15458150092069033378LLU}),jule::Array<jule::U64,2>({13620701859271368502LLU,9661343807543145861LLU}),jule::Array<jule::U64,2>({3190819268807046916LLU,12076679759428932327LLU}),jule::Array<jule::U64,2>({17823582141290972357LLU,15095849699286165408LLU}),jule::Array<jule::U64,2>({11139738838306857723LLU,9434906062053853380LLU}),jule::Array<jule::U64,2>({13924673547883572154LLU,11793632577567316725LLU}),jule::Array<jule::U64,2>({3570783879572301480LLU,14742040721959145907LLU}),jule::Array<jule::U64,2>({18298537904747540562LLU,18427550902448932383LLU}),jule::Array<jule::U64,2>({18354115218108294707LLU,11517219314030582739LLU}),jule::Array<jule::U64,2>({18330958004207980480LLU,14396524142538228424LLU}),jule::Array<jule::U64,2>({4466953431550423984LLU,17995655178172785531LLU}),jule::Array<jule::U64,2>({486002885505321038LLU,11247284486357990957LLU}),jule::Array<jule::U64,2>({5219189625309039202LLU,14059105607947488696LLU}),jule::Array<jule::U64,2>({6523987031636299002LLU,17573882009934360870LLU}),jule::Array<jule::U64,2>({17912549950054850588LLU,10983676256208975543LLU}),jule::Array<jule::U64,2>({17779001419141175331LLU,13729595320261219429LLU}),jule::Array<jule::U64,2>({8388693718644305452LLU,17161994150326524287LLU}),jule::Array<jule::U64,2>({12160462601793772764LLU,10726246343954077679LLU}),jule::Array<jule::U64,2>({10588892233814828051LLU,13407807929942597099LLU}),jule::Array<jule::U64,2>({8624429273841147159LLU,16759759912428246374LLU}),jule::Array<jule::U64,2>({778582277723329070LLU,10474849945267653984LLU}),jule::Array<jule::U64,2>({973227847154161338LLU,13093562431584567480LLU}),jule::Array<jule::U64,2>({1216534808942701673LLU,16366953039480709350LLU}),jule::Array<jule::U64,2>({14595392310871352257LLU,10229345649675443343LLU}),jule::Array<jule::U64,2>({13632554370161802418LLU,12786682062094304179LLU}),jule::Array<jule::U64,2>({12429006944274865118LLU,15983352577617880224LLU}),jule::Array<jule::U64,2>({7768129340171790699LLU,9989595361011175140LLU}),jule::Array<jule::U64,2>({9710161675214738374LLU,12486994201263968925LLU}),jule::Array<jule::U64,2>({16749388112445810871LLU,15608742751579961156LLU}),jule::Array<jule::U64,2>({1244995533423855986LLU,9755464219737475723LLU}),jule::Array<jule::U64,2>({15391302472061983695LLU,12194330274671844653LLU}),jule::Array<jule::U64,2>({5404070034795315907LLU,15242912843339805817LLU}),jule::Array<jule::U64,2>({14906758817815542202LLU,9526820527087378635LLU}),jule::Array<jule::U64,2>({14021762503842039848LLU,11908525658859223294LLU}),jule::Array<jule::U64,2>({8303831092947774002LLU,14885657073574029118LLU}),jule::Array<jule::U64,2>({578208414664970847LLU,9303535670983768199LLU}),jule::Array<jule::U64,2>({14557818573613377271LLU,11629419588729710248LLU}),jule::Array<jule::U64,2>({18197273217016721589LLU,14536774485912137810LLU}),jule::Array<jule::U64,2>({13523219484416126178LLU,18170968107390172263LLU}),jule::Array<jule::U64,2>({15369541205401160717LLU,11356855067118857664LLU}),jule::Array<jule::U64,2>({765182433041899281LLU,14196068833898572081LLU}),jule::Array<jule::U64,2>({5568164059729762005LLU,17745086042373215101LLU}),jule::Array<jule::U64,2>({5785945546544795205LLU,11090678776483259438LLU}),jule::Array<jule::U64,2>({16455803970035769814LLU,13863348470604074297LLU}),jule::Array<jule::U64,2>({6734696907262548556LLU,17329185588255092872LLU}),jule::Array<jule::U64,2>({4209185567039092847LLU,10830740992659433045LLU}),jule::Array<jule::U64,2>({9873167977226253963LLU,13538426240824291306LLU}),jule::Array<jule::U64,2>({3118087934678041646LLU,16923032801030364133LLU}),jule::Array<jule::U64,2>({4254647968387469981LLU,10576895500643977583LLU}),jule::Array<jule::U64,2>({706623942056949572LLU,13221119375804971979LLU}),jule::Array<jule::U64,2>({14718337982853350677LLU,16526399219756214973LLU}),jule::Array<jule::U64,2>({11504804248497038125LLU,10328999512347634358LLU}),jule::Array<jule::U64,2>({5157633273766521849LLU,12911249390434542948LLU}),jule::Array<jule::U64,2>({6447041592208152311LLU,16139061738043178685LLU}),jule::Array<jule::U64,2>({6335244004343789146LLU,10086913586276986678LLU}),jule::Array<jule::U64,2>({17142427042284512241LLU,12608641982846233347LLU}),jule::Array<jule::U64,2>({16816347784428252397LLU,15760802478557791684LLU}),jule::Array<jule::U64,2>({1286845328412881940LLU,9850501549098619803LLU}),jule::Array<jule::U64,2>({15443614715798266137LLU,12313126936373274753LLU}),jule::Array<jule::U64,2>({5469460339465668959LLU,15391408670466593442LLU}),jule::Array<jule::U64,2>({8030098730593431003LLU,9619630419041620901LLU}),jule::Array<jule::U64,2>({14649309431669176658LLU,12024538023802026126LLU}),jule::Array<jule::U64,2>({9088264752731695015LLU,15030672529752532658LLU}),jule::Array<jule::U64,2>({10291851488884697288LLU,9394170331095332911LLU}),jule::Array<jule::U64,2>({8253128342678483706LLU,11742712913869166139LLU}),jule::Array<jule::U64,2>({5704724409920716729LLU,14678391142336457674LLU}),jule::Array<jule::U64,2>({16354277549255671720LLU,18347988927920572092LLU}),jule::Array<jule::U64,2>({998051431430019017LLU,11467493079950357558LLU}),jule::Array<jule::U64,2>({10470936326142299579LLU,14334366349937946947LLU}),jule::Array<jule::U64,2>({8476984389250486570LLU,17917957937422433684LLU}),jule::Array<jule::U64,2>({14521487280136329914LLU,11198723710889021052LLU}),jule::Array<jule::U64,2>({18151859100170412392LLU,13998404638611276315LLU}),jule::Array<jule::U64,2>({18078137856785627587LLU,17498005798264095394LLU}),jule::Array<jule::U64,2>({15910522178918405146LLU,10936253623915059621LLU}),jule::Array<jule::U64,2>({6053094668365842720LLU,13670317029893824527LLU}),jule::Array<jule::U64,2>({2954682317029915496LLU,17087896287367280659LLU}),jule::Array<jule::U64,2>({17987577512639554849LLU,10679935179604550411LLU}),jule::Array<jule::U64,2>({17872785872372055657LLU,13349918974505688014LLU}),jule::Array<jule::U64,2>({13117610303610293764LLU,16687398718132110018LLU}),jule::Array<jule::U64,2>({12810192458183821506LLU,10429624198832568761LLU}),jule::Array<jule::U64,2>({2177682517447613171LLU,13037030248540710952LLU}),jule::Array<jule::U64,2>({2722103146809516464LLU,16296287810675888690LLU}),jule::Array<jule::U64,2>({6313000485183335694LLU,10185179881672430431LLU}),jule::Array<jule::U64,2>({3279564588051781713LLU,12731474852090538039LLU}),jule::Array<jule::U64,2>({17934513790346890853LLU,15914343565113172548LLU}),jule::Array<jule::U64,2>({1985699082112030975LLU,9946464728195732843LLU}),jule::Array<jule::U64,2>({16317181907922202431LLU,12433080910244666053LLU}),jule::Array<jule::U64,2>({6561419329620589327LLU,15541351137805832567LLU}),jule::Array<jule::U64,2>({11018416108653950185LLU,9713344461128645354LLU}),jule::Array<jule::U64,2>({4549648098962661924LLU,12141680576410806693LLU}),jule::Array<jule::U64,2>({10298746142130715309LLU,15177100720513508366LLU}),jule::Array<jule::U64,2>({1825030320404309164LLU,9485687950320942729LLU}),jule::Array<jule::U64,2>({6892973918932774359LLU,11857109937901178411LLU}),jule::Array<jule::U64,2>({4004531380238580045LLU,14821387422376473014LLU}),jule::Array<jule::U64,2>({16337890167931276240LLU,9263367138985295633LLU}),jule::Array<jule::U64,2>({6587304654631931588LLU,11579208923731619542LLU}),jule::Array<jule::U64,2>({17457502855144690293LLU,14474011154664524427LLU}),jule::Array<jule::U64,2>({17210192550503474962LLU,18092513943330655534LLU}),jule::Array<jule::U64,2>({6144684325637283947LLU,11307821214581659709LLU}),jule::Array<jule::U64,2>({12292541425473992838LLU,14134776518227074636LLU}),jule::Array<jule::U64,2>({15365676781842491048LLU,17668470647783843295LLU}),jule::Array<jule::U64,2>({16521077016292638761LLU,11042794154864902059LLU}),jule::Array<jule::U64,2>({16039660251938410547LLU,13803492693581127574LLU}),jule::Array<jule::U64,2>({10826203278068237376LLU,17254365866976409468LLU}),jule::Array<jule::U64,2>({15989749085647424168LLU,10783978666860255917LLU}),jule::Array<jule::U64,2>({6152128301777116498LLU,13479973333575319897LLU}),jule::Array<jule::U64,2>({12301846395648783526LLU,16849966666969149871LLU}),jule::Array<jule::U64,2>({14606183024921571560LLU,10531229166855718669LLU}),jule::Array<jule::U64,2>({4422670725869800738LLU,13164036458569648337LLU}),jule::Array<jule::U64,2>({10140024425764638826LLU,16455045573212060421LLU}),jule::Array<jule::U64,2>({8643358275316593218LLU,10284403483257537763LLU}),jule::Array<jule::U64,2>({6192511825718353619LLU,12855504354071922204LLU}),jule::Array<jule::U64,2>({7740639782147942024LLU,16069380442589902755LLU}),jule::Array<jule::U64,2>({2532056854628769813LLU,10043362776618689222LLU}),jule::Array<jule::U64,2>({12388443105140738074LLU,12554203470773361527LLU}),jule::Array<jule::U64,2>({10873867862998534689LLU,15692754338466701909LLU}),jule::Array<jule::U64,2>({9102010423587778132LLU,9807971461541688693LLU}),jule::Array<jule::U64,2>({15989199047912110569LLU,12259964326927110866LLU}),jule::Array<jule::U64,2>({10763126773035362404LLU,15324955408658888583LLU}),jule::Array<jule::U64,2>({13644483260788183358LLU,9578097130411805364LLU}),jule::Array<jule::U64,2>({17055604075985229198LLU,11972621413014756705LLU}),jule::Array<jule::U64,2>({7484447039699372786LLU,14965776766268445882LLU}),jule::Array<jule::U64,2>({9289465418239495895LLU,9353610478917778676LLU}),jule::Array<jule::U64,2>({11611831772799369869LLU,11692013098647223345LLU}),jule::Array<jule::U64,2>({679731660717048624LLU,14615016373309029182LLU}),jule::Array<jule::U64,2>({10073036612751086588LLU,18268770466636286477LLU}),jule::Array<jule::U64,2>({8601490892183123069LLU,11417981541647679048LLU}),jule::Array<jule::U64,2>({10751863615228903837LLU,14272476927059598810LLU}),jule::Array<jule::U64,2>({4216457482181353988LLU,17840596158824498513LLU}),jule::Array<jule::U64,2>({14164500972431816002LLU,11150372599265311570LLU}),jule::Array<jule::U64,2>({8482254178684994195LLU,13937965749081639463LLU}),jule::Array<jule::U64,2>({5991131704928854840LLU,17422457186352049329LLU}),jule::Array<jule::U64,2>({15273672361649004035LLU,10889035741470030830LLU}),jule::Array<jule::U64,2>({9868718415206479236LLU,13611294676837538538LLU}),jule::Array<jule::U64,2>({3112525982153323237LLU,17014118346046923173LLU}),jule::Array<jule::U64,2>({4251171748059520975LLU,10633823966279326983LLU}),jule::Array<jule::U64,2>({702278666647013314LLU,13292279957849158729LLU}),jule::Array<jule::U64,2>({5489534351736154547LLU,16615349947311448411LLU}),jule::Array<jule::U64,2>({1125115960621402640LLU,10384593717069655257LLU}),jule::Array<jule::U64,2>({6018080969204141204LLU,12980742146337069071LLU}),jule::Array<jule::U64,2>({2910915193077788601LLU,16225927682921336339LLU}),jule::Array<jule::U64,2>({17960223060169475539LLU,10141204801825835211LLU}),jule::Array<jule::U64,2>({17838592806784456520LLU,12676506002282294014LLU}),jule::Array<jule::U64,2>({13074868971625794843LLU,15845632502852867518LLU}),jule::Array<jule::U64,2>({3560107088838733872LLU,9903520314283042199LLU}),jule::Array<jule::U64,2>({18285191916330581053LLU,12379400392853802748LLU}),jule::Array<jule::U64,2>({4409745821703674700LLU,15474250491067253436LLU}),jule::Array<jule::U64,2>({11979463175419572495LLU,9671406556917033397LLU}),jule::Array<jule::U64,2>({1139270913992301907LLU,12089258196146291747LLU}),jule::Array<jule::U64,2>({15259146697772541096LLU,15111572745182864683LLU}),jule::Array<jule::U64,2>({7231123676894144233LLU,9444732965739290427LLU}),jule::Array<jule::U64,2>({4427218577690292387LLU,11805916207174113034LLU}),jule::Array<jule::U64,2>({14757395258967641292LLU,14757395258967641292LLU}),jule::Array<jule::U64,2>({0LLU,9223372036854775808LLU}),jule::Array<jule::U64,2>({0LLU,11529215046068469760LLU}),jule::Array<jule::U64,2>({0LLU,14411518807585587200LLU}),jule::Array<jule::U64,2>({0LLU,18014398509481984000LLU}),jule::Array<jule::U64,2>({0LLU,11258999068426240000LLU}),jule::Array<jule::U64,2>({0LLU,14073748835532800000LLU}),jule::Array<jule::U64,2>({0LLU,17592186044416000000LLU}),jule::Array<jule::U64,2>({0LLU,10995116277760000000LLU}),jule::Array<jule::U64,2>({0LLU,13743895347200000000LLU}),jule::Array<jule::U64,2>({0LLU,17179869184000000000LLU}),jule::Array<jule::U64,2>({0LLU,10737418240000000000LLU}),jule::Array<jule::U64,2>({0LLU,13421772800000000000LLU}),jule::Array<jule::U64,2>({0LLU,16777216000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10485760000000000000LLU}),jule::Array<jule::U64,2>({0LLU,13107200000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16384000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10240000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12800000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12500000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,15625000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,9765625000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12207031250000000000LLU}),jule::Array<jule::U64,2>({0LLU,15258789062500000000LLU}),jule::Array<jule::U64,2>({0LLU,9536743164062500000LLU}),jule::Array<jule::U64,2>({0LLU,11920928955078125000LLU}),jule::Array<jule::U64,2>({0LLU,14901161193847656250LLU}),jule::Array<jule::U64,2>({4611686018427387904LLU,9313225746154785156LLU}),jule::Array<jule::U64,2>({5764607523034234880LLU,11641532182693481445LLU}),jule::Array<jule::U64,2>({11817445422220181504LLU,14551915228366851806LLU}),jule::Array<jule::U64,2>({5548434740920451072LLU,18189894035458564758LLU}),jule::Array<jule::U64,2>({17302829768357445632LLU,11368683772161602973LLU}),jule::Array<jule::U64,2>({7793479155164643328LLU,14210854715202003717LLU}),jule::Array<jule::U64,2>({14353534962383192064LLU,17763568394002504646LLU}),jule::Array<jule::U64,2>({4359273333062107136LLU,11102230246251565404LLU}),jule::Array<jule::U64,2>({5449091666327633920LLU,13877787807814456755LLU}),jule::Array<jule::U64,2>({2199678564482154496LLU,17347234759768070944LLU}),jule::Array<jule::U64,2>({1374799102801346560LLU,10842021724855044340LLU}),jule::Array<jule::U64,2>({1718498878501683200LLU,13552527156068805425LLU}),jule::Array<jule::U64,2>({6759809616554491904LLU,16940658945086006781LLU}),jule::Array<jule::U64,2>({6530724019560251392LLU,10587911840678754238LLU}),jule::Array<jule::U64,2>({17386777061305090048LLU,13234889800848442797LLU}),jule::Array<jule::U64,2>({7898413271349198848LLU,16543612251060553497LLU}),jule::Array<jule::U64,2>({16465723340661719040LLU,10339757656912845935LLU}),jule::Array<jule::U64,2>({15970468157399760896LLU,12924697071141057419LLU}),jule::Array<jule::U64,2>({15351399178322313216LLU,16155871338926321774LLU}),jule::Array<jule::U64,2>({4982938468024057856LLU,10097419586828951109LLU}),jule::Array<jule::U64,2>({10840359103457460224LLU,12621774483536188886LLU}),jule::Array<jule::U64,2>({4327076842467049472LLU,15777218104420236108LLU}),jule::Array<jule::U64,2>({11927795063396681728LLU,9860761315262647567LLU}),jule::Array<jule::U64,2>({10298057810818464256LLU,12325951644078309459LLU}),jule::Array<jule::U64,2>({8260886245095692416LLU,15407439555097886824LLU}),jule::Array<jule::U64,2>({5163053903184807760LLU,9629649721936179265LLU}),jule::Array<jule::U64,2>({11065503397408397604LLU,12037062152420224081LLU}),jule::Array<jule::U64,2>({18443565265187884909LLU,15046327690525280101LLU}),jule::Array<jule::U64,2>({13833071299956122020LLU,9403954806578300063LLU}),jule::Array<jule::U64,2>({12679653106517764621LLU,11754943508222875079LLU}),jule::Array<jule::U64,2>({11237880364719817872LLU,14693679385278593849LLU}),jule::Array<jule::U64,2>({212292400617608628LLU,18367099231598242312LLU}),jule::Array<jule::U64,2>({132682750386005392LLU,11479437019748901445LLU}),jule::Array<jule::U64,2>({4777539456409894645LLU,14349296274686126806LLU}),jule::Array<jule::U64,2>({15195296357367144114LLU,17936620343357658507LLU}),jule::Array<jule::U64,2>({7191217214140771119LLU,11210387714598536567LLU}),jule::Array<jule::U64,2>({4377335499248575995LLU,14012984643248170709LLU}),jule::Array<jule::U64,2>({10083355392488107898LLU,17516230804060213386LLU}),jule::Array<jule::U64,2>({10913783138732455340LLU,10947644252537633366LLU}),jule::Array<jule::U64,2>({4418856886560793367LLU,13684555315672041708LLU}),jule::Array<jule::U64,2>({5523571108200991709LLU,17105694144590052135LLU}),jule::Array<jule::U64,2>({10369760970266701674LLU,10691058840368782584LLU}),jule::Array<jule::U64,2>({12962201212833377092LLU,13363823550460978230LLU}),jule::Array<jule::U64,2>({6979379479186945558LLU,16704779438076222788LLU}),jule::Array<jule::U64,2>({13585484211346616781LLU,10440487148797639242LLU}),jule::Array<jule::U64,2>({7758483227328495169LLU,13050608935997049053LLU}),jule::Array<jule::U64,2>({14309790052588006865LLU,16313261169996311316LLU}),jule::Array<jule::U64,2>({18166990819722280098LLU,10195788231247694572LLU}),jule::Array<jule::U64,2>({4261994450943298507LLU,12744735289059618216LLU}),jule::Array<jule::U64,2>({5327493063679123134LLU,15930919111324522770LLU}),jule::Array<jule::U64,2>({7941369183226839863LLU,9956824444577826731LLU}),jule::Array<jule::U64,2>({5315025460606161924LLU,12446030555722283414LLU}),jule::Array<jule::U64,2>({15867153862612478214LLU,15557538194652854267LLU}),jule::Array<jule::U64,2>({7611128154919104931LLU,9723461371658033917LLU}),jule::Array<jule::U64,2>({14125596212076269068LLU,12154326714572542396LLU}),jule::Array<jule::U64,2>({17656995265095336336LLU,15192908393215677995LLU}),jule::Array<jule::U64,2>({8729779031470891258LLU,9495567745759798747LLU}),jule::Array<jule::U64,2>({6300537770911226168LLU,11869459682199748434LLU}),jule::Array<jule::U64,2>({17099044250493808518LLU,14836824602749685542LLU}),jule::Array<jule::U64,2>({6075216638131242420LLU,9273015376718553464LLU}),jule::Array<jule::U64,2>({7594020797664053025LLU,11591269220898191830LLU}),jule::Array<jule::U64,2>({269153960225290473LLU,14489086526122739788LLU}),jule::Array<jule::U64,2>({336442450281613091LLU,18111358157653424735LLU}),jule::Array<jule::U64,2>({7127805559067090038LLU,11319598848533390459LLU}),jule::Array<jule::U64,2>({4298070930406474644LLU,14149498560666738074LLU}),jule::Array<jule::U64,2>({14595960699862869113LLU,17686873200833422592LLU}),jule::Array<jule::U64,2>({9122475437414293195LLU,11054295750520889120LLU}),jule::Array<jule::U64,2>({11403094296767866494LLU,13817869688151111400LLU}),jule::Array<jule::U64,2>({14253867870959833118LLU,17272337110188889250LLU}),jule::Array<jule::U64,2>({13520353437777283602LLU,10795210693868055781LLU}),jule::Array<jule::U64,2>({3065383741939440791LLU,13494013367335069727LLU}),jule::Array<jule::U64,2>({17666787732706464701LLU,16867516709168837158LLU}),jule::Array<jule::U64,2>({6430056314514152534LLU,10542197943230523224LLU}),jule::Array<jule::U64,2>({8037570393142690668LLU,13177747429038154030LLU}),jule::Array<jule::U64,2>({823590954573587527LLU,16472184286297692538LLU}),jule::Array<jule::U64,2>({5126430365035880108LLU,10295115178936057836LLU}),jule::Array<jule::U64,2>({6408037956294850135LLU,12868893973670072295LLU}),jule::Array<jule::U64,2>({3398361426941174765LLU,16086117467087590369LLU}),jule::Array<jule::U64,2>({13653190937906703988LLU,10053823416929743980LLU}),jule::Array<jule::U64,2>({17066488672383379985LLU,12567279271162179975LLU}),jule::Array<jule::U64,2>({16721424822051837077LLU,15709099088952724969LLU}),jule::Array<jule::U64,2>({3533361486141316317LLU,9818186930595453106LLU}),jule::Array<jule::U64,2>({13640073894531421205LLU,12272733663244316382LLU}),jule::Array<jule::U64,2>({7826720331309500698LLU,15340917079055395478LLU}),jule::Array<jule::U64,2>({280014188641050032LLU,9588073174409622174LLU}),jule::Array<jule::U64,2>({9573389772656088348LLU,11985091468012027717LLU}),jule::Array<jule::U64,2>({16578423234247498339LLU,14981364335015034646LLU}),jule::Array<jule::U64,2>({5749828502977298558LLU,9363352709384396654LLU}),jule::Array<jule::U64,2>({16410657665576399005LLU,11704190886730495817LLU}),jule::Array<jule::U64,2>({6678264026688335045LLU,14630238608413119772LLU}),jule::Array<jule::U64,2>({8347830033360418806LLU,18287798260516399715LLU}),jule::Array<jule::U64,2>({2911550761636567802LLU,11429873912822749822LLU}),jule::Array<jule::U64,2>({12862810488900485560LLU,14287342391028437277LLU}),jule::Array<jule::U64,2>({2243455055843443238LLU,17859177988785546597LLU}),jule::Array<jule::U64,2>({3708002419115845976LLU,11161986242990966623LLU}),jule::Array<jule::U64,2>({23317005467419566LLU,13952482803738708279LLU}),jule::Array<jule::U64,2>({13864204312116438170LLU,17440603504673385348LLU}),jule::Array<jule::U64,2>({17888499731927549664LLU,10900377190420865842LLU}),jule::Array<jule::U64,2>({13137252628054661272LLU,13625471488026082303LLU}),jule::Array<jule::U64,2>({11809879766640938686LLU,17031839360032602879LLU}),jule::Array<jule::U64,2>({14298703881791668535LLU,10644899600020376799LLU}),jule::Array<jule::U64,2>({13261693833812197764LLU,13306124500025470999LLU}),jule::Array<jule::U64,2>({11965431273837859301LLU,16632655625031838749LLU}),jule::Array<jule::U64,2>({9784237555362356015LLU,10395409765644899218LLU}),jule::Array<jule::U64,2>({3006924907348169211LLU,12994262207056124023LLU}),jule::Array<jule::U64,2>({17593714189467375226LLU,16242827758820155028LLU}),jule::Array<jule::U64,2>({1772699331562333708LLU,10151767349262596893LLU}),jule::Array<jule::U64,2>({6827560182880305039LLU,12689709186578246116LLU}),jule::Array<jule::U64,2>({8534450228600381299LLU,15862136483222807645LLU}),jule::Array<jule::U64,2>({7639874402088932264LLU,9913835302014254778LLU}),jule::Array<jule::U64,2>({326470965756389522LLU,12392294127517818473LLU}),jule::Array<jule::U64,2>({5019774725622874806LLU,15490367659397273091LLU}),jule::Array<jule::U64,2>({831516194300602802LLU,9681479787123295682LLU}),jule::Array<jule::U64,2>({10262767279730529310LLU,12101849733904119602LLU}),jule::Array<jule::U64,2>({3605087062808385830LLU,15127312167380149503LLU}),jule::Array<jule::U64,2>({9170708441896323000LLU,9454570104612593439LLU}),jule::Array<jule::U64,2>({6851699533943015846LLU,11818212630765741799LLU}),jule::Array<jule::U64,2>({3952938399001381903LLU,14772765788457177249LLU}),jule::Array<jule::U64,2>({13999801545444333449LLU,9232978617785735780LLU}),jule::Array<jule::U64,2>({17499751931805416812LLU,11541223272232169725LLU}),jule::Array<jule::U64,2>({8039631859474607303LLU,14426529090290212157LLU}),jule::Array<jule::U64,2>({14661225842770647033LLU,18033161362862765196LLU}),jule::Array<jule::U64,2>({18386638188586430203LLU,11270725851789228247LLU}),jule::Array<jule::U64,2>({18371611717305649850LLU,14088407314736535309LLU}),jule::Array<jule::U64,2>({9129456591349898601LLU,17610509143420669137LLU}),jule::Array<jule::U64,2>({17235125415662156385LLU,11006568214637918210LLU}),jule::Array<jule::U64,2>({12320534732722919674LLU,13758210268297397763LLU}),jule::Array<jule::U64,2>({10788982397476261688LLU,17197762835371747204LLU}),jule::Array<jule::U64,2>({15966486035277439363LLU,10748601772107342002LLU}),jule::Array<jule::U64,2>({10734735507242023396LLU,13435752215134177503LLU}),jule::Array<jule::U64,2>({8806733365625141341LLU,16794690268917721879LLU}),jule::Array<jule::U64,2>({12421737381156795194LLU,10496681418073576174LLU}),jule::Array<jule::U64,2>({6303799689591218185LLU,13120851772591970218LLU}),jule::Array<jule::U64,2>({17103121648843798539LLU,16401064715739962772LLU}),jule::Array<jule::U64,2>({1466078993672598279LLU,10250665447337476733LLU}),jule::Array<jule::U64,2>({6444284760518135752LLU,12813331809171845916LLU}),jule::Array<jule::U64,2>({8055355950647669691LLU,16016664761464807395LLU}),jule::Array<jule::U64,2>({2728754459941099604LLU,10010415475915504622LLU}),jule::Array<jule::U64,2>({12634315111781150314LLU,12513019344894380777LLU}),jule::Array<jule::U64,2>({1957835834444274180LLU,15641274181117975972LLU}),jule::Array<jule::U64,2>({10447019433382447170LLU,9775796363198734982LLU}),jule::Array<jule::U64,2>({3835402254873283155LLU,12219745453998418728LLU}),jule::Array<jule::U64,2>({4794252818591603944LLU,15274681817498023410LLU}),jule::Array<jule::U64,2>({7608094030047140369LLU,9546676135936264631LLU}),jule::Array<jule::U64,2>({4898431519131537557LLU,11933345169920330789LLU}),jule::Array<jule::U64,2>({10734725417341809851LLU,14916681462400413486LLU}),jule::Array<jule::U64,2>({2097517367411243253LLU,9322925914000258429LLU}),jule::Array<jule::U64,2>({7233582727691441970LLU,11653657392500323036LLU}),jule::Array<jule::U64,2>({9041978409614302462LLU,14567071740625403795LLU}),jule::Array<jule::U64,2>({6690786993590490174LLU,18208839675781754744LLU}),jule::Array<jule::U64,2>({4181741870994056359LLU,11380524797363596715LLU}),jule::Array<jule::U64,2>({615491320315182544LLU,14225655996704495894LLU}),jule::Array<jule::U64,2>({9992736187248753989LLU,17782069995880619867LLU}),jule::Array<jule::U64,2>({3939617107816777291LLU,11113793747425387417LLU}),jule::Array<jule::U64,2>({9536207403198359517LLU,13892242184281734271LLU}),jule::Array<jule::U64,2>({7308573235570561493LLU,17365302730352167839LLU}),jule::Array<jule::U64,2>({11485387299872682789LLU,10853314206470104899LLU}),jule::Array<jule::U64,2>({9745048106413465582LLU,13566642758087631124LLU}),jule::Array<jule::U64,2>({12181310133016831978LLU,16958303447609538905LLU}),jule::Array<jule::U64,2>({695789805494438130LLU,10598939654755961816LLU}),jule::Array<jule::U64,2>({869737256868047663LLU,13248674568444952270LLU}),jule::Array<jule::U64,2>({10310543607939835386LLU,16560843210556190337LLU}),jule::Array<jule::U64,2>({17973304801030866876LLU,10350527006597618960LLU}),jule::Array<jule::U64,2>({4019886927579031980LLU,12938158758247023701LLU}),jule::Array<jule::U64,2>({9636544677901177879LLU,16172698447808779626LLU}),jule::Array<jule::U64,2>({10634526442115624078LLU,10107936529880487266LLU}),jule::Array<jule::U64,2>({4069786015789754290LLU,12634920662350609083LLU}),jule::Array<jule::U64,2>({475546501309804958LLU,15793650827938261354LLU}),jule::Array<jule::U64,2>({4908902581746016003LLU,9871031767461413346LLU}),jule::Array<jule::U64,2>({15359500264037295811LLU,12338789709326766682LLU}),jule::Array<jule::U64,2>({9976003293191843956LLU,15423487136658458353LLU}),jule::Array<jule::U64,2>({17764217104313372233LLU,9639679460411536470LLU}),jule::Array<jule::U64,2>({12981899343536939483LLU,12049599325514420588LLU}),jule::Array<jule::U64,2>({16227374179421174354LLU,15061999156893025735LLU}),jule::Array<jule::U64,2>({17059637889779315827LLU,9413749473058141084LLU}),jule::Array<jule::U64,2>({2877803288514593168LLU,11767186841322676356LLU}),jule::Array<jule::U64,2>({3597254110643241460LLU,14708983551653345445LLU}),jule::Array<jule::U64,2>({9108253656731439729LLU,18386229439566681806LLU}),jule::Array<jule::U64,2>({1080972517029761926LLU,11491393399729176129LLU}),jule::Array<jule::U64,2>({5962901664714590312LLU,14364241749661470161LLU}),jule::Array<jule::U64,2>({12065313099320625794LLU,17955302187076837701LLU}),jule::Array<jule::U64,2>({9846663696289085073LLU,11222063866923023563LLU}),jule::Array<jule::U64,2>({7696643601933968437LLU,14027579833653779454LLU}),jule::Array<jule::U64,2>({397432465562684739LLU,17534474792067224318LLU}),jule::Array<jule::U64,2>({14083453346258841674LLU,10959046745042015198LLU}),jule::Array<jule::U64,2>({8380944645968776284LLU,13698808431302518998LLU}),jule::Array<jule::U64,2>({1252808770606194547LLU,17123510539128148748LLU}),jule::Array<jule::U64,2>({10006377518483647400LLU,10702194086955092967LLU}),jule::Array<jule::U64,2>({7896285879677171346LLU,13377742608693866209LLU}),jule::Array<jule::U64,2>({14482043368023852087LLU,16722178260867332761LLU}),jule::Array<jule::U64,2>({2133748077373825698LLU,10451361413042082976LLU}),jule::Array<jule::U64,2>({2667185096717282123LLU,13064201766302603720LLU}),jule::Array<jule::U64,2>({3333981370896602653LLU,16330252207878254650LLU}),jule::Array<jule::U64,2>({6695424375237764562LLU,10206407629923909156LLU}),jule::Array<jule::U64,2>({8369280469047205703LLU,12758009537404886445LLU}),jule::Array<jule::U64,2>({15073286604736395033LLU,15947511921756108056LLU}),jule::Array<jule::U64,2>({9420804127960246895LLU,9967194951097567535LLU}),jule::Array<jule::U64,2>({7164319141522920715LLU,12458993688871959419LLU}),jule::Array<jule::U64,2>({4343712908476262990LLU,15573742111089949274LLU}),jule::Array<jule::U64,2>({7326506586225052273LLU,9733588819431218296LLU}),jule::Array<jule::U64,2>({9158133232781315341LLU,12166986024289022870LLU}),jule::Array<jule::U64,2>({2224294504121868368LLU,15208732530361278588LLU}),jule::Array<jule::U64,2>({10613556101930943538LLU,9505457831475799117LLU}),jule::Array<jule::U64,2>({17878631145841067327LLU,11881822289344748896LLU}),jule::Array<jule::U64,2>({3901544858591782542LLU,14852277861680936121LLU}),jule::Array<jule::U64,2>({13967680582688333849LLU,9282673663550585075LLU}),jule::Array<jule::U64,2>({12847914709933029407LLU,11603342079438231344LLU}),jule::Array<jule::U64,2>({16059893387416286759LLU,14504177599297789180LLU}),jule::Array<jule::U64,2>({1628122660560806833LLU,18130221999122236476LLU}),jule::Array<jule::U64,2>({10240948699705280078LLU,11331388749451397797LLU}),jule::Array<jule::U64,2>({17412871893058988002LLU,14164235936814247246LLU}),jule::Array<jule::U64,2>({12542717829468959195LLU,17705294921017809058LLU}),jule::Array<jule::U64,2>({12450884661845487401LLU,11065809325636130661LLU}),jule::Array<jule::U64,2>({1728547772024695539LLU,13832261657045163327LLU}),jule::Array<jule::U64,2>({15995742770313033136LLU,17290327071306454158LLU}),jule::Array<jule::U64,2>({5385653213018257806LLU,10806454419566533849LLU}),jule::Array<jule::U64,2>({11343752534700210161LLU,13508068024458167311LLU}),jule::Array<jule::U64,2>({9568004649947874797LLU,16885085030572709139LLU}),jule::Array<jule::U64,2>({3674159897003727796LLU,10553178144107943212LLU}),jule::Array<jule::U64,2>({4592699871254659745LLU,13191472680134929015LLU}),jule::Array<jule::U64,2>({1129188820640936778LLU,16489340850168661269LLU}),jule::Array<jule::U64,2>({3011586022114279438LLU,10305838031355413293LLU}),jule::Array<jule::U64,2>({8376168546070237202LLU,12882297539194266616LLU}),jule::Array<jule::U64,2>({10470210682587796502LLU,16102871923992833270LLU}),jule::Array<jule::U64,2>({1932195658189984910LLU,10064294952495520794LLU}),jule::Array<jule::U64,2>({11638616609592256945LLU,12580368690619400992LLU}),jule::Array<jule::U64,2>({14548270761990321182LLU,15725460863274251240LLU}),jule::Array<jule::U64,2>({9092669226243950738LLU,9828413039546407025LLU}),jule::Array<jule::U64,2>({15977522551232326327LLU,12285516299433008781LLU}),jule::Array<jule::U64,2>({6136845133758244197LLU,15356895374291260977LLU}),jule::Array<jule::U64,2>({15364743254667372383LLU,9598059608932038110LLU}),jule::Array<jule::U64,2>({9982557031479439671LLU,11997574511165047638LLU}),jule::Array<jule::U64,2>({3254824252494523781LLU,14996968138956309548LLU}),jule::Array<jule::U64,2>({11257637194663853171LLU,9373105086847693467LLU}),jule::Array<jule::U64,2>({9460360474902428559LLU,11716381358559616834LLU}),jule::Array<jule::U64,2>({2602078556773259891LLU,14645476698199521043LLU}),jule::Array<jule::U64,2>({17087656251248738576LLU,18306845872749401303LLU}),jule::Array<jule::U64,2>({17597314184671543466LLU,11441778670468375814LLU}),jule::Array<jule::U64,2>({12773270693984653525LLU,14302223338085469768LLU}),jule::Array<jule::U64,2>({15966588367480816906LLU,17877779172606837210LLU}),jule::Array<jule::U64,2>({14590803748102898470LLU,11173611982879273256LLU}),jule::Array<jule::U64,2>({18238504685128623088LLU,13967014978599091570LLU}),jule::Array<jule::U64,2>({13574758819556003052LLU,17458768723248864463LLU}),jule::Array<jule::U64,2>({15401753289863583763LLU,10911730452030540289LLU}),jule::Array<jule::U64,2>({5417133557047315992LLU,13639663065038175362LLU}),jule::Array<jule::U64,2>({15994788983163920798LLU,17049578831297719202LLU}),jule::Array<jule::U64,2>({14608429132904838403LLU,10655986769561074501LLU}),jule::Array<jule::U64,2>({4425478360848884291LLU,13319983461951343127LLU}),jule::Array<jule::U64,2>({920161932633717460LLU,16649979327439178909LLU}),jule::Array<jule::U64,2>({2880944217109767365LLU,10406237079649486818LLU}),jule::Array<jule::U64,2>({12824552308241985014LLU,13007796349561858522LLU}),jule::Array<jule::U64,2>({6807318348447705459LLU,16259745436952323153LLU}),jule::Array<jule::U64,2>({15783789013848285672LLU,10162340898095201970LLU}),jule::Array<jule::U64,2>({10506364230455581282LLU,12702926122619002463LLU}),jule::Array<jule::U64,2>({8521269269642088699LLU,15878657653273753079LLU}),jule::Array<jule::U64,2>({12243322321167387293LLU,9924161033296095674LLU}),jule::Array<jule::U64,2>({6080780864604458308LLU,12405201291620119593LLU}),jule::Array<jule::U64,2>({12212662099182960789LLU,15506501614525149491LLU}),jule::Array<jule::U64,2>({5327070802775656541LLU,9691563509078218432LLU}),jule::Array<jule::U64,2>({6658838503469570676LLU,12114454386347773040LLU}),jule::Array<jule::U64,2>({8323548129336963345LLU,15143067982934716300LLU}),jule::Array<jule::U64,2>({14425589617690377899LLU,9464417489334197687LLU}),jule::Array<jule::U64,2>({13420301003685584469LLU,11830521861667747109LLU}),jule::Array<jule::U64,2>({2940318199324816875LLU,14788152327084683887LLU}),jule::Array<jule::U64,2>({8755227902219092403LLU,9242595204427927429LLU}),jule::Array<jule::U64,2>({15555720896201253407LLU,11553244005534909286LLU}),jule::Array<jule::U64,2>({10221279083396790951LLU,14441555006918636608LLU}),jule::Array<jule::U64,2>({12776598854245988689LLU,18051943758648295760LLU}),jule::Array<jule::U64,2>({7985374283903742931LLU,11282464849155184850LLU}),jule::Array<jule::U64,2>({758345818024902856LLU,14103081061443981063LLU}),jule::Array<jule::U64,2>({14782990327813292282LLU,17628851326804976328LLU}),jule::Array<jule::U64,2>({9239368954883307676LLU,11018032079253110205LLU}),jule::Array<jule::U64,2>({16160897212031522499LLU,13772540099066387756LLU}),jule::Array<jule::U64,2>({1754377441329851508LLU,17215675123832984696LLU}),jule::Array<jule::U64,2>({1096485900831157192LLU,10759796952395615435LLU}),jule::Array<jule::U64,2>({15205665431321110202LLU,13449746190494519293LLU}),jule::Array<jule::U64,2>({5172023733869224041LLU,16812182738118149117LLU}),jule::Array<jule::U64,2>({5538357842881958977LLU,10507614211323843198LLU}),jule::Array<jule::U64,2>({16146319340457224530LLU,13134517764154803997LLU}),jule::Array<jule::U64,2>({6347841120289366950LLU,16418147205193504997LLU}),jule::Array<jule::U64,2>({6273243709394548296LLU,10261342003245940623LLU}),jule::Array<jule::U64,2>({3229868618315797466LLU,12826677504057425779LLU}),jule::Array<jule::U64,2>({17872393828176910545LLU,16033346880071782223LLU}),jule::Array<jule::U64,2>({18087775170251650946LLU,10020841800044863889LLU}),jule::Array<jule::U64,2>({8774660907532399971LLU,12526052250056079862LLU}),jule::Array<jule::U64,2>({1744954097560724156LLU,15657565312570099828LLU}),jule::Array<jule::U64,2>({10313968347830228405LLU,9785978320356312392LLU}),jule::Array<jule::U64,2>({12892460434787785506LLU,12232472900445390490LLU}),jule::Array<jule::U64,2>({6892203506629956075LLU,15290591125556738113LLU}),jule::Array<jule::U64,2>({15836842237712192307LLU,9556619453472961320LLU}),jule::Array<jule::U64,2>({1349308723430688768LLU,11945774316841201651LLU}),jule::Array<jule::U64,2>({15521693959570524672LLU,14932217896051502063LLU}),jule::Array<jule::U64,2>({16618587752372659776LLU,9332636185032188789LLU}),jule::Array<jule::U64,2>({6938176635183661008LLU,11665795231290235987LLU}),jule::Array<jule::U64,2>({4061034775552188356LLU,14582244039112794984LLU}),jule::Array<jule::U64,2>({5076293469440235445LLU,18227805048890993730LLU}),jule::Array<jule::U64,2>({7784369436827535057LLU,11392378155556871081LLU}),jule::Array<jule::U64,2>({14342147814461806725LLU,14240472694446088851LLU}),jule::Array<jule::U64,2>({13315998749649870503LLU,17800590868057611064LLU}),jule::Array<jule::U64,2>({8322499218531169064LLU,11125369292536006915LLU}),jule::Array<jule::U64,2>({5791438004736573426LLU,13906711615670008644LLU}),jule::Array<jule::U64,2>({7239297505920716783LLU,17383389519587510805LLU}),jule::Array<jule::U64,2>({6830403950414141941LLU,10864618449742194253LLU}),jule::Array<jule::U64,2>({13149690956445065330LLU,13580773062177742816LLU}),jule::Array<jule::U64,2>({16437113695556331663LLU,16975966327722178520LLU}),jule::Array<jule::U64,2>({10273196059722707289LLU,10609978954826361575LLU}),jule::Array<jule::U64,2>({8229809056225996208LLU,13262473693532951969LLU}),jule::Array<jule::U64,2>({14898947338709883164LLU,16578092116916189961LLU}),jule::Array<jule::U64,2>({2394313059052595121LLU,10361307573072618726LLU}),jule::Array<jule::U64,2>({12216263360670519709LLU,12951634466340773407LLU}),jule::Array<jule::U64,2>({10658643182410761733LLU,16189543082925966759LLU}),jule::Array<jule::U64,2>({13579181016647807939LLU,10118464426828729224LLU}),jule::Array<jule::U64,2>({16973976270809759924LLU,12648080533535911530LLU}),jule::Array<jule::U64,2>({11994098301657424097LLU,15810100666919889413LLU}),jule::Array<jule::U64,2>({9802154447749584012LLU,9881312916824930883LLU}),jule::Array<jule::U64,2>({7641007041259592112LLU,12351641146031163604LLU}),jule::Array<jule::U64,2>({9551258801574490140LLU,15439551432538954505LLU}),jule::Array<jule::U64,2>({17498751797052526097LLU,9649719645336846565LLU}),jule::Array<jule::U64,2>({8038381691033493909LLU,12062149556671058207LLU}),jule::Array<jule::U64,2>({5436291095364479483LLU,15077686945838822759LLU})});
static jule::Slice<jule::Int> _107ec5260_POWTAB = jule::Slice<jule::Int>({1LL,3LL,6LL,9LL,13LL,16LL,19LL,23LL,26LL});
static jule::Slice<jule::F64> _107ec5260_F64_POW10 = jule::Slice<jule::F64>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL,1000000000000000000LL,10000000000000000000LLU,100000000000000000000.0,1000000000000000000000.0,10000000000000000000000.0});
static jule::Slice<jule::F32> _107ec5260_F32_POW10 = jule::Slice<jule::F32>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL});
static jule::Array<jule::U64,20> _107ea21d0_U64_POW10 = jule::Array<jule::U64,20>({1LLU,10LLU,100LLU,1000LLU,10000LLU,100000LLU,1000000LLU,10000000LLU,100000000LLU,1000000000LLU,10000000000LLU,100000000000LLU,1000000000000LLU,10000000000000LLU,100000000000000LLU,1000000000000000LLU,10000000000000000LLU,100000000000000000LLU,1000000000000000000LLU,10000000000000000000LLU});
static jule::Slice<_110057cd0_LeftCheat> _110057cd0_LEFTCHEATS = jule::Slice<_110057cd0_LeftCheat>({_110057cd0_LeftCheat(0LL,jule::Str("", 0)),_110057cd0_LeftCheat(1LL,jule::Str("5", 1)),_110057cd0_LeftCheat(1LL,jule::Str("25", 2)),_110057cd0_LeftCheat(1LL,jule::Str("125", 3)),_110057cd0_LeftCheat(2LL,jule::Str("625", 3)),_110057cd0_LeftCheat(2LL,jule::Str("3125", 4)),_110057cd0_LeftCheat(2LL,jule::Str("15625", 5)),_110057cd0_LeftCheat(3LL,jule::Str("78125", 5)),_110057cd0_LeftCheat(3LL,jule::Str("390625", 6)),_110057cd0_LeftCheat(3LL,jule::Str("1953125", 7)),_110057cd0_LeftCheat(4LL,jule::Str("9765625", 7)),_110057cd0_LeftCheat(4LL,jule::Str("48828125", 8)),_110057cd0_LeftCheat(4LL,jule::Str("244140625", 9)),_110057cd0_LeftCheat(4LL,jule::Str("1220703125", 10)),_110057cd0_LeftCheat(5LL,jule::Str("6103515625", 10)),_110057cd0_LeftCheat(5LL,jule::Str("30517578125", 11)),_110057cd0_LeftCheat(5LL,jule::Str("152587890625", 12)),_110057cd0_LeftCheat(6LL,jule::Str("762939453125", 12)),_110057cd0_LeftCheat(6LL,jule::Str("3814697265625", 13)),_110057cd0_LeftCheat(6LL,jule::Str("19073486328125", 14)),_110057cd0_LeftCheat(7LL,jule::Str("95367431640625", 14)),_110057cd0_LeftCheat(7LL,jule::Str("476837158203125", 15)),_110057cd0_LeftCheat(7LL,jule::Str("2384185791015625", 16)),_110057cd0_LeftCheat(7LL,jule::Str("11920928955078125", 17)),_110057cd0_LeftCheat(8LL,jule::Str("59604644775390625", 17)),_110057cd0_LeftCheat(8LL,jule::Str("298023223876953125", 18)),_110057cd0_LeftCheat(8LL,jule::Str("1490116119384765625", 19)),_110057cd0_LeftCheat(9LL,jule::Str("7450580596923828125", 19)),_110057cd0_LeftCheat(9LL,jule::Str("37252902984619140625", 20)),_110057cd0_LeftCheat(9LL,jule::Str("186264514923095703125", 21)),_110057cd0_LeftCheat(10LL,jule::Str("931322574615478515625", 21)),_110057cd0_LeftCheat(10LL,jule::Str("4656612873077392578125", 22)),_110057cd0_LeftCheat(10LL,jule::Str("23283064365386962890625", 23)),_110057cd0_LeftCheat(10LL,jule::Str("116415321826934814453125", 24)),_110057cd0_LeftCheat(11LL,jule::Str("582076609134674072265625", 24)),_110057cd0_LeftCheat(11LL,jule::Str("2910383045673370361328125", 25)),_110057cd0_LeftCheat(11LL,jule::Str("14551915228366851806640625", 26)),_110057cd0_LeftCheat(12LL,jule::Str("72759576141834259033203125", 26)),_110057cd0_LeftCheat(12LL,jule::Str("363797880709171295166015625", 27)),_110057cd0_LeftCheat(12LL,jule::Str("1818989403545856475830078125", 28)),_110057cd0_LeftCheat(13LL,jule::Str("9094947017729282379150390625", 28)),_110057cd0_LeftCheat(13LL,jule::Str("45474735088646411895751953125", 29)),_110057cd0_LeftCheat(13LL,jule::Str("227373675443232059478759765625", 30)),_110057cd0_LeftCheat(13LL,jule::Str("1136868377216160297393798828125", 31)),_110057cd0_LeftCheat(14LL,jule::Str("5684341886080801486968994140625", 31)),_110057cd0_LeftCheat(14LL,jule::Str("28421709430404007434844970703125", 32)),_110057cd0_LeftCheat(14LL,jule::Str("142108547152020037174224853515625", 33)),_110057cd0_LeftCheat(15LL,jule::Str("710542735760100185871124267578125", 33)),_110057cd0_LeftCheat(15LL,jule::Str("3552713678800500929355621337890625", 34)),_110057cd0_LeftCheat(15LL,jule::Str("17763568394002504646778106689453125", 35)),_110057cd0_LeftCheat(16LL,jule::Str("88817841970012523233890533447265625", 35)),_110057cd0_LeftCheat(16LL,jule::Str("444089209850062616169452667236328125", 36)),_110057cd0_LeftCheat(16LL,jule::Str("2220446049250313080847263336181640625", 37)),_110057cd0_LeftCheat(16LL,jule::Str("11102230246251565404236316680908203125", 38)),_110057cd0_LeftCheat(17LL,jule::Str("55511151231257827021181583404541015625", 38)),_110057cd0_LeftCheat(17LL,jule::Str("277555756156289135105907917022705078125", 39)),_110057cd0_LeftCheat(17LL,jule::Str("1387778780781445675529539585113525390625", 40)),_110057cd0_LeftCheat(18LL,jule::Str("6938893903907228377647697925567626953125", 40)),_110057cd0_LeftCheat(18LL,jule::Str("34694469519536141888238489627838134765625", 41)),_110057cd0_LeftCheat(18LL,jule::Str("173472347597680709441192448139190673828125", 42)),_110057cd0_LeftCheat(19LL,jule::Str("867361737988403547205962240695953369140625", 42))});
static jule::Array<jule::Str,4> _127e05470_CPP_HEADER_EXTS = jule::Array<jule::Str,4>({jule::Str(".h", 2),jule::Str(".hpp", 4),jule::Str(".hxx", 4),jule::Str(".hh", 3)});
static jule::Array<jule::Str,3> _127e05470_CPP_EXTS = jule::Array<jule::Str,3>({jule::Str(".cpp", 4),jule::Str(".cc", 3),jule::Str(".cxx", 4)});
static jule::Array<jule::Str,1> _127e05470_OBJECTIVE_CPP_EXTS = jule::Array<jule::Str,1>({jule::Str(".mm", 3)});
static jule::Array<jule::Str,6> _127e7c3f0_DIRECTIVES = jule::Array<jule::Str,6>({jule::Str("cdef", 4),jule::Str("typedef", 7),jule::Str("derive", 6),jule::Str("pass", 4),jule::Str("build", 5),jule::Str("namespace", 9)});
static jule::Array<jule::Str,3> _127eb0d70_DISTOS = jule::Array<jule::Str,3>({jule::Str("windows", 7),jule::Str("linux", 5),jule::Str("darwin", 6)});
static jule::Array<jule::Str,3> _127eb0d70_DISTARCH = jule::Array<jule::Str,3>({jule::Str("arm64", 5),jule::Str("amd64", 5),jule::Str("i386", 4)});
static jule::Str _127ebf120_OS = jule::Str("darwin", 6);
static jule::Str _127ebf120_ARCH = jule::Str("arm64", 5);
static jule::Str _127ebf120_PATH_STDLIB = jule::Str("", 0);
static jule::Str _127ebf120_PATH_EXEC = jule::Str("", 0);
static jule::Str _127ebf120_PATH_WD = jule::Str("", 0);
static jule::Str _127ebf120_PATH_API = jule::Str("", 0);
static jule::Array<jule::U8,256> _1106ed100_FIRST = jule::Array<jule::U8,256>({});
static jule::Array<_1106ed100_accept_range,16> _1106ed100_ACCEPT_RANGES = jule::Array<_1106ed100_accept_range,16>({_1106ed100_accept_range(128LLU,191LLU),_1106ed100_accept_range(160LLU,191LLU),_1106ed100_accept_range(128LLU,159LLU),_1106ed100_accept_range(144LLU,191LLU),_1106ed100_accept_range(128LLU,143LLU)});
static jule::Array<jule::I32,33> _1106ec050_PUNCTS = jule::Array<jule::I32,33>({'!','#','$',',','.','\'','\"',':',';','<','>','=','?','-','+','*','(',')','[',']','{','}','%','&','/','\\','@','^','_','`','|','~',166LL});
static jule::Array<jule::I32,5> _1106ec050_SPACES = jule::Array<jule::I32,5>({' ','\t','\v','\r','\n'});
static jule::Array<jule::Str,6> _1106ec050_UNARY_OPS = jule::Array<jule::Str,6>({jule::Str("-", 1),jule::Str("+", 1),jule::Str("^", 1),jule::Str("!", 1),jule::Str("*", 1),jule::Str("&", 1)});
static jule::Array<jule::Str,13> _1106ec050_BIN_OPS = jule::Array<jule::Str,13>({jule::Str("+", 1),jule::Str("-", 1),jule::Str("*", 1),jule::Str("/", 1),jule::Str("%", 1),jule::Str("&", 1),jule::Str("|", 1),jule::Str("^", 1),jule::Str("<", 1),jule::Str(">", 1),jule::Str("!", 1),jule::Str("&&", 2),jule::Str("||", 2)});
static jule::Array<jule::Str,2> _1106ec050_WEAK_OPS = jule::Array<jule::Str,2>({jule::Str("...", 3),jule::Str(":", 1)});
static jule::Array<jule::Str,2> _1106ec050_POSTFIX_OPS = jule::Array<jule::Str,2>({jule::Str("++", 2),jule::Str("--", 2)});
static jule::Array<jule::Str,11> _1106ec050_ASSING_OPS = jule::Array<jule::Str,11>({jule::Str("=", 1),jule::Str("+=", 2),jule::Str("-=", 2),jule::Str("/=", 2),jule::Str("*=", 2),jule::Str("%=", 2),jule::Str(">>=", 3),jule::Str("<<=", 3),jule::Str("|=", 2),jule::Str("&=", 2),jule::Str("^=", 2)});
static jule::Array<_11054eff0_KindPair,46> _11054eff0_KEYWORDS = jule::Array<_11054eff0_KindPair,46>({_11054eff0_KindPair(jule::Str("i8", 2),1LLU),_11054eff0_KindPair(jule::Str("i16", 3),1LLU),_11054eff0_KindPair(jule::Str("i32", 3),1LLU),_11054eff0_KindPair(jule::Str("i64", 3),1LLU),_11054eff0_KindPair(jule::Str("u8", 2),1LLU),_11054eff0_KindPair(jule::Str("u16", 3),1LLU),_11054eff0_KindPair(jule::Str("u32", 3),1LLU),_11054eff0_KindPair(jule::Str("u64", 3),1LLU),_11054eff0_KindPair(jule::Str("f32", 3),1LLU),_11054eff0_KindPair(jule::Str("f64", 3),1LLU),_11054eff0_KindPair(jule::Str("uint", 4),1LLU),_11054eff0_KindPair(jule::Str("int", 3),1LLU),_11054eff0_KindPair(jule::Str("uintptr", 7),1LLU),_11054eff0_KindPair(jule::Str("bool", 4),1LLU),_11054eff0_KindPair(jule::Str("str", 3),1LLU),_11054eff0_KindPair(jule::Str("any", 3),1LLU),_11054eff0_KindPair(jule::Str("true", 4),6LLU),_11054eff0_KindPair(jule::Str("false", 5),6LLU),_11054eff0_KindPair(jule::Str("nil", 3),6LLU),_11054eff0_KindPair(jule::Str("const", 5),9LLU),_11054eff0_KindPair(jule::Str("ret", 3),4LLU),_11054eff0_KindPair(jule::Str("type", 4),10LLU),_11054eff0_KindPair(jule::Str("for", 3),12LLU),_11054eff0_KindPair(jule::Str("break", 5),13LLU),_11054eff0_KindPair(jule::Str("continue", 8),14LLU),_11054eff0_KindPair(jule::Str("in", 2),15LLU),_11054eff0_KindPair(jule::Str("if", 2),16LLU),_11054eff0_KindPair(jule::Str("else", 4),17LLU),_11054eff0_KindPair(jule::Str("use", 3),19LLU),_11054eff0_KindPair(jule::Str("pub", 3),21LLU),_11054eff0_KindPair(jule::Str("goto", 4),22LLU),_11054eff0_KindPair(jule::Str("enum", 4),24LLU),_11054eff0_KindPair(jule::Str("struct", 6),25LLU),_11054eff0_KindPair(jule::Str("co", 2),26LLU),_11054eff0_KindPair(jule::Str("match", 5),27LLU),_11054eff0_KindPair(jule::Str("self", 4),28LLU),_11054eff0_KindPair(jule::Str("trait", 5),29LLU),_11054eff0_KindPair(jule::Str("impl", 4),30LLU),_11054eff0_KindPair(jule::Str("cpp", 3),31LLU),_11054eff0_KindPair(jule::Str("fall", 4),32LLU),_11054eff0_KindPair(jule::Str("fn", 2),33LLU),_11054eff0_KindPair(jule::Str("let", 3),34LLU),_11054eff0_KindPair(jule::Str("unsafe", 6),35LLU),_11054eff0_KindPair(jule::Str("mut", 3),36LLU),_11054eff0_KindPair(jule::Str("defer", 5),37LLU),_11054eff0_KindPair(jule::Str("static", 6),38LLU)});
static jule::Array<_11054eff0_KindPair,38> _11054eff0_BASIC_OPS = jule::Array<_11054eff0_KindPair,38>({_11054eff0_KindPair(jule::Str("::", 2),23LLU),_11054eff0_KindPair(jule::Str(":", 1),11LLU),_11054eff0_KindPair(jule::Str(";", 1),5LLU),_11054eff0_KindPair(jule::Str(",", 1),8LLU),_11054eff0_KindPair(jule::Str("...", 3),7LLU),_11054eff0_KindPair(jule::Str(".", 1),20LLU),_11054eff0_KindPair(jule::Str("+=", 2),7LLU),_11054eff0_KindPair(jule::Str("-=", 2),7LLU),_11054eff0_KindPair(jule::Str("*=", 2),7LLU),_11054eff0_KindPair(jule::Str("/=", 2),7LLU),_11054eff0_KindPair(jule::Str("%=", 2),7LLU),_11054eff0_KindPair(jule::Str("<<=", 3),7LLU),_11054eff0_KindPair(jule::Str(">>=", 3),7LLU),_11054eff0_KindPair(jule::Str("^=", 2),7LLU),_11054eff0_KindPair(jule::Str("&=", 2),7LLU),_11054eff0_KindPair(jule::Str("|=", 2),7LLU),_11054eff0_KindPair(jule::Str("==", 2),7LLU),_11054eff0_KindPair(jule::Str("!=", 2),7LLU),_11054eff0_KindPair(jule::Str(">=", 2),7LLU),_11054eff0_KindPair(jule::Str("<=", 2),7LLU),_11054eff0_KindPair(jule::Str("&&", 2),7LLU),_11054eff0_KindPair(jule::Str("||", 2),7LLU),_11054eff0_KindPair(jule::Str("<<", 2),7LLU),_11054eff0_KindPair(jule::Str(">>", 2),7LLU),_11054eff0_KindPair(jule::Str("++", 2),7LLU),_11054eff0_KindPair(jule::Str("--", 2),7LLU),_11054eff0_KindPair(jule::Str("+", 1),7LLU),_11054eff0_KindPair(jule::Str("-", 1),7LLU),_11054eff0_KindPair(jule::Str("*", 1),7LLU),_11054eff0_KindPair(jule::Str("/", 1),7LLU),_11054eff0_KindPair(jule::Str("%", 1),7LLU),_11054eff0_KindPair(jule::Str("&", 1),7LLU),_11054eff0_KindPair(jule::Str("|", 1),7LLU),_11054eff0_KindPair(jule::Str("^", 1),7LLU),_11054eff0_KindPair(jule::Str("!", 1),7LLU),_11054eff0_KindPair(jule::Str("<", 1),7LLU),_11054eff0_KindPair(jule::Str(">", 1),7LLU),_11054eff0_KindPair(jule::Str("=", 1),7LLU)});
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_OUT = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns());
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_OUTLN = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns());
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_NEW = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns());
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_DROP = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns());
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_PANIC = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns());
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_MAKE = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns());
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_APPEND = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns());
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_RECOVER = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns());
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_CLONE = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns());
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_STD_MEM_SIZE_OF = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns());
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_STD_MEM_ALIGN_OF = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns());
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_REAL = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>(),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Fn<jule::Ref<_1112d7f10_Data>(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>)>(),jule::Bool(),jule::Bool()));
static jule::Ref<_11072eb20_FnIns> _1113198e0_BUILTIN_FN_COPY = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>(),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("int", 3)))),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Fn<jule::Ref<_1112d7f10_Data>(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>)>(),jule::Bool(),jule::Bool()));
static jule::Ref<_1116aff70_TypeAlias> _1113198e0_BUILTIN_TYPE_ALIAS_BYTE = jule::new_struct<_1116aff70_TypeAlias>(new( std::nothrow ) _1116aff70_TypeAlias(jule::Ref<_11054f670_ScopeTree>(),true,jule::Bool(),jule::Bool(),_1106ec050_Token(),jule::Str(),jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("u8", 2)))))),jule::Str(),jule::Slice<jule::Any>()));
static jule::Ref<_1116aff70_TypeAlias> _1113198e0_BUILTIN_TYPE_ALIAS_RUNE = jule::new_struct<_1116aff70_TypeAlias>(new( std::nothrow ) _1116aff70_TypeAlias(jule::Ref<_11054f670_ScopeTree>(),true,jule::Bool(),jule::Bool(),_1106ec050_Token(),jule::Str(),jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i32", 3)))))),jule::Str(),jule::Slice<jule::Any>()));
static jule::Ref<_110e3f160_Trait> _1113198e0_BUILTIN_TRAIT_ERROR = jule::new_struct<_110e3f160_Trait>(new( std::nothrow ) _110e3f160_Trait(_1106ec050_Token(),jule::Str("Error", 5),true,jule::Str(),jule::Slice<jule::Ref<_11072eb20_Fn>>({jule::new_struct<_11072eb20_Fn>(new( std::nothrow ) _11072eb20_Fn(jule::Ref<_110e92bc0_Sema>(),_1106ec050_Token(),jule::Bool(),jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str("error", 5),jule::Slice<jule::Ref<_11054f670_Directive>>(),jule::Str(),jule::Ref<_11054f670_ScopeTree>(),jule::Slice<jule::Ref<_11054f670_GenericDecl>>(),jule::new_struct<_11072eb20_RetType>(new( std::nothrow ) _11072eb20_RetType(jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_1106ec050_Token(),jule::Any(jule::new_struct<_11054f670_IdentTypeDecl>(new( std::nothrow ) _11054f670_IdentTypeDecl(_1106ec050_Token(),jule::Str("str", 3),jule::Bool(),jule::Slice<jule::Ref<_11054f670_TypeDecl>>()))))),jule::Ref<_1116aff70_TypeKind>())),jule::Slice<_1106ec050_Token>())),jule::Slice<jule::Ref<_11072eb20_Param>>({jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("self", 4)))}),jule::Ref<_1109372e0_Struct>(),jule::Slice<jule::Ref<_11072eb20_FnIns>>()))}),jule::Slice<jule::Ref<_1109372e0_Struct>>()));
static jule::Slice<jule::Str> _11020ca90_FLAGS = nullptr;
static jule::Slice<jule::Any> _11034cb30_deads = nullptr;
static jule::Slice<jule::Any> _11034cb30_checking = nullptr;
static jule::Any _11034cb30_current = jule::Any(nullptr);
static jule::Any _11034cb30_main_current = jule::Any(nullptr);
static jule::Slice<jule::Str> _1100e3f70_OPTIMIZATIONS = nullptr;
static jule::U64 _111b4cab0_INDENT = 0LLU;

inline void _137e06080_AnsiEscape::_static_method_reset(void) {
	jule::out(jule::Str("\033[0m", 4));
}



inline void _137e06080_AnsiEscape::_static_method_print(jule::Str _2021_escape,jule::Str _2034_text) {
	jule::out(_2021_escape);
	jule::out(_2034_text);
	_137e06080_AnsiEscape::_static_method_reset();
}







std::ostream &operator<<(std::ostream &_Stream, const _137e06080_AnsiEscape &_Src) {
	_Stream << "AnsiEscape{";
	_Stream << "}";
	return _Stream;
}



inline void _137e06080_Logger::_static_method_log_flat(_127e05da0_Log& _3125_l) {
	jule::outln(_3125_l._field_text);
}



inline void _137e06080_Logger::_static_method_log_error(_127e05da0_Log& _3426_l) {
	jule::out(jule::Str("\033[31m", 5));
	jule::out(jule::Str("error: ", 7));
	jule::out(_3426_l._field_text);
	_137e06080_AnsiEscape::_static_method_reset();
	jule::out(jule::Str("\n  --> ", 7));
	jule::out(_3426_l._field_path);
	jule::out(jule::Str(":", 1));
	jule::out(_110054e40_itoa(_3426_l._field_row));
	jule::out(jule::Str(":", 1));
	jule::out(_110054e40_itoa(_3426_l._field_column));
	if (_3426_l._field_line.len() != 0LL) {
		jule::Str _4721_line = _3426_l._field_line.ltrim(jule::Str("\r\n\v\b ", 5));
		jule::I64 _4821_offset = (_3426_l._field_line.len() - _4721_line.len()) + 1LL;
		jule::I64 _4921_old_len = _4721_line.len();
		_4721_line=_4721_line.ltrim(jule::Str("\t", 1));
		if (_4921_old_len != _4721_line.len()) {
			_4821_offset+=static_cast<jule::I64>((_4921_old_len - _4721_line.len()) * 8LL);
		}
		jule::out(jule::Str("\n  ", 3));
		jule::Str _5517_row = _110054e40_itoa(_3426_l._field_row);
		jule::out(_5517_row);
		jule::out(jule::Str(" | ", 3));
		jule::out(_4721_line);
		jule::out(jule::Str("\n  ", 3));
		jule::out(_147e094f0_str_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_5517_row.len())));
		jule::out(jule::Str(" | ", 3));
		jule::out(_147e094f0_str_repeat(jule::Str(" ", 1),static_cast<jule::Int>(_3426_l._field_column - _4821_offset)));
		jule::out(jule::Str("^", 1));
		if (_3426_l._field_suggestion.len() != 0LL) {
			jule::out(jule::Str("\n  ", 3));
			jule::out(_147e094f0_str_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_5517_row.len())));
			jule::out(jule::Str(" | ", 3));
			_137e06080_AnsiEscape::_static_method_print(jule::Str("\033[95m", 5),jule::Str("suggestion: ", 12));
			jule::out(_3426_l._field_suggestion);
		}
	}
	jule::outln(jule::Str("\n", 1));
}



inline void _137e06080_Logger::_static_method_log(_127e05da0_Log& _7620_l) {
	{
		auto _match_expr{ _7620_l._field_kind };
		if (!((0LLU) == _match_expr)) { goto _case_end_4617131360; }
		_case_begin_4617131360:;
		{
			_137e06080_Logger::_static_method_log_flat(_7620_l);
		}
		goto _match_end_4617130000;
		_case_end_4617131360:;
		if (!((1LLU) == _match_expr)) { goto _case_end_4617131488; }
		_case_begin_4617131488:;
		{
			_137e06080_Logger::_static_method_log_error(_7620_l);
		}
		goto _match_end_4617130000;
		_case_end_4617131488:;
		_match_end_4617130000:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _137e06080_Logger &_Src) {
	_Stream << "Logger{";
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _117e1d320_LazyBuff::_method_index(jule::Int _5324_i) {
	if ((*this)._field_buff != nullptr) {
		return (*this)._field_buff[static_cast<jule::Int>(_5324_i)];
	}
	return (*this)._field_path[static_cast<jule::Int>(_5324_i)];
}



inline void _117e1d320_LazyBuff::_method_append(jule::U8 _6025_c) {
	if ((*this)._field_buff == nullptr) {
		if (((*this)._field_w < (*this)._field_path.len()) && ((*this)._field_path[static_cast<jule::Int>((*this)._field_w)] == _6025_c)) {
			((*this)._field_w)++;
			return;
		}
		(*this)._field_buff=jule::Slice<jule::U8>::alloc(static_cast<jule::Int>(static_cast<jule::I64>((*this)._field_path.len())));
		copy((*this)._field_buff,static_cast<jule::Slice<jule::U8>>((*this)._field_path.slice(0LL,static_cast<jule::Int>((*this)._field_w))));
	}
	(*this)._field_buff[static_cast<jule::Int>((*this)._field_w)]=_6025_c;
	((*this)._field_w)++;
}



inline jule::Str _117e1d320_LazyBuff::_method_string(void) {
	if ((*this)._field_buff == nullptr) {
		return (*this)._field_vol_and_path.slice(0LL,static_cast<jule::Int>((*this)._field_vol_len + (*this)._field_w));
	}
	return (*this)._field_vol_and_path.slice(0LL,static_cast<jule::Int>((*this)._field_vol_len)) + static_cast<jule::Str>((*this)._field_buff.slice(0LL,static_cast<jule::Int>((*this)._field_w)));
}







std::ostream &operator<<(std::ostream &_Stream, const _117e1d320_LazyBuff &_Src) {
	_Stream << "LazyBuff{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "buff:" << _Src._field_buff << ", ";
	_Stream << "w:" << _Src._field_w << ", ";
	_Stream << "vol_and_path:" << _Src._field_vol_and_path << ", ";
	_Stream << "vol_len:" << _Src._field_vol_len;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _110621ed0_bits_error::_method_error(void) {
	return jule::Str("runtime error: ", 15) + (*this)._field_message;
}







std::ostream &operator<<(std::ostream &_Stream, const _110621ed0_bits_error &_Src) {
	_Stream << "bits_error{";
	_Stream << "message:" << _Src._field_message;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _117e12d10_FloatInfo &_Src) {
	_Stream << "FloatInfo{";
	_Stream << "mantbits:" << _Src._field_mantbits << ", ";
	_Stream << "expbits:" << _Src._field_expbits << ", ";
	_Stream << "bias:" << _Src._field_bias;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _117e12d10_DecimalSlice &_Src) {
	_Stream << "DecimalSlice{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110057cd0_LeftCheat &_Src) {
	_Stream << "LeftCheat{";
	_Stream << "delta:" << _Src._field_delta << ", ";
	_Stream << "cutoff:" << _Src._field_cutoff;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _110057cd0_Decimal::_method_set(jule::Str _22922_s) {
	jule::Bool _22932_ok = jule::Bool();
	jule::Int _23017_i = 0LL;
	(*this)._field_neg=false;
	(*this)._field_trunc=false;
	if (_23017_i >= _22922_s.len()) {
		return _22932_ok;
	}
	{
		if (!((_22922_s[static_cast<jule::Int>(_23017_i)] == '+'))) { goto _case_end_4597660288; }
		_case_begin_4597660288:;
		{
			(_23017_i)++;
		}
		goto _match_end_4597660816;
		_case_end_4597660288:;
		if (!((_22922_s[static_cast<jule::Int>(_23017_i)] == '-'))) { goto _case_end_4597660416; }
		_case_begin_4597660416:;
		{
			(*this)._field_neg=true;
			(_23017_i)++;
		}
		goto _match_end_4597660816;
		_case_end_4597660416:;
		_match_end_4597660816:;
	}
	jule::Bool _24717_sawdot = false;
	jule::Bool _24817_sawdigits = false;
	_iter_begin_4597664512:;
	if (!(_23017_i < _22922_s.len())) { goto _iter_end_4597664512; }
	{
		{
			if (!((_22922_s[static_cast<jule::Int>(_23017_i)] == '.'))) { goto _case_end_4597667152; }
			_case_begin_4597667152:;
			{
				if (_24717_sawdot) {
					return _22932_ok;
				}
				_24717_sawdot=true;
				(*this)._field_dp=(*this)._field_nd;
				goto _iter_next_4597664512;
			}
			goto _match_end_4597666960;
			_case_end_4597667152:;
			if (!((('0' <= _22922_s[static_cast<jule::Int>(_23017_i)]) && (_22922_s[static_cast<jule::Int>(_23017_i)] <= '9')))) { goto _case_end_4597667280; }
			_case_begin_4597667280:;
			{
				_24817_sawdigits=true;
				if ((_22922_s[static_cast<jule::Int>(_23017_i)] == '0') && ((*this)._field_nd == 0LL)) {
					((*this)._field_dp)--;
					goto _iter_next_4597664512;
				}
				if ((*this)._field_nd < 800LL) {
					(*this)._field_d[static_cast<jule::Int>((*this)._field_nd)]=_22922_s[static_cast<jule::Int>(_23017_i)];
					((*this)._field_nd)++;
				} else if (_22922_s[static_cast<jule::Int>(_23017_i)] != '0') {
					(*this)._field_trunc=true;
				}
				goto _iter_next_4597664512;
			}
			goto _match_end_4597666960;
			_case_end_4597667280:;
			_match_end_4597666960:;
		}
		goto _iter_end_4597664512;
	}
	_iter_next_4597664512:;
	(_23017_i)++;
	goto _iter_begin_4597664512;
	_iter_end_4597664512:;
	if ((!(_24817_sawdigits))) {
		return _22932_ok;
	}
	if ((!(_24717_sawdot))) {
		(*this)._field_dp=(*this)._field_nd;
	}
	if ((_23017_i < _22922_s.len()) && (_117e872d0_lower(_22922_s[static_cast<jule::Int>(_23017_i)]) == 'e')) {
		(_23017_i)++;
		if (_23017_i >= _22922_s.len()) {
			return _22932_ok;
		}
		jule::Int _29121_esign = 1LL;
		if (_22922_s[static_cast<jule::Int>(_23017_i)] == '+') {
			(_23017_i)++;
		} else if (_22922_s[static_cast<jule::Int>(_23017_i)] == '-') {
			(_23017_i)++;
			_29121_esign=-1LL;
		}
		if (((_23017_i >= _22922_s.len()) || (_22922_s[static_cast<jule::Int>(_23017_i)] < '0')) || (_22922_s[static_cast<jule::Int>(_23017_i)] > '9')) {
			return _22932_ok;
		}
		jule::Int _30121_e = 0LL;
		_iter_begin_4597688720:;
		if (!((_23017_i < _22922_s.len()) && (('0' <= _22922_s[static_cast<jule::Int>(_23017_i)]) && (_22922_s[static_cast<jule::Int>(_23017_i)] <= '9')))) { goto _iter_end_4597688720; }
		{
			if (_30121_e < 10000LL) {
				_30121_e=static_cast<jule::Int>(((_30121_e * 10LL) + static_cast<jule::Int>(_22922_s[static_cast<jule::Int>(_23017_i)])) - '0');
			}
		}
		_iter_next_4597688720:;
		(_23017_i)++;
		goto _iter_begin_4597688720;
		_iter_end_4597688720:;
		(*this)._field_dp+=static_cast<jule::Int>(_30121_e * _29121_esign);
	}
	if (_23017_i != _22922_s.len()) {
		return _22932_ok;
	}
	_22932_ok=true;
	return _22932_ok;
}



inline std::tuple<jule::U64,jule::Bool> _110057cd0_Decimal::_method_float_bits(_117e12d10_FloatInfo& _31830_flt) {
	jule::Bool _31856_overflow = jule::Bool();
	jule::U64 _31848_b = jule::U64();
	jule::Int _31917_exp = 0LL;
	jule::U64 _32017_mant = 0LLU;
	if ((*this)._field_nd == 0LL) {
		_32017_mant=0LL;
		_31917_exp=_31830_flt._field_bias;
		goto _julec_label_out;
	}
	if ((*this)._field_dp > 310LL) {
		goto _julec_label_overflow;
	}
	if ((*this)._field_dp < -330LL) {
		_32017_mant=0LL;
		_31917_exp=_31830_flt._field_bias;
		goto _julec_label_out;
	}
	_31917_exp=0LL;
	_iter_begin_4597708928:;
	if (!((*this)._field_dp > 0LL)) { goto _iter_end_4597708928; }
	{
		jule::Int _34521_n = 0LL;
		if ((*this)._field_dp >= _107ec5260_POWTAB.len()) {
			_34521_n=27LL;
		} else {
			_34521_n=_107ec5260_POWTAB[static_cast<jule::Int>((*this)._field_dp)];
		}
		(*this)._method_shift(static_cast<jule::Int>((-(_34521_n))));
		_31917_exp+=_34521_n;
	}
	_iter_next_4597708928:;
	goto _iter_begin_4597708928;
	_iter_end_4597708928:;
	_iter_begin_4597715184:;
	if (!(((*this)._field_dp < 0LL) || (((*this)._field_dp == 0LL) && ((*this)._field_d[0LL] < '5')))) { goto _iter_end_4597715184; }
	{
		jule::Int _35521_n = 0LL;
		if ((-((*this)._field_dp)) >= _107ec5260_POWTAB.len()) {
			_35521_n=27LL;
		} else {
			_35521_n=_107ec5260_POWTAB[static_cast<jule::Int>((-((*this)._field_dp)))];
		}
		(*this)._method_shift(_35521_n);
		_31917_exp-=_35521_n;
	}
	_iter_next_4597715184:;
	goto _iter_begin_4597715184;
	_iter_end_4597715184:;
	(_31917_exp)--;
	if (_31917_exp < (_31830_flt._field_bias + 1LL)) {
		jule::Int _37217_n = (_31830_flt._field_bias + 1LL) - _31917_exp;
		(*this)._method_shift(static_cast<jule::Int>((-(_37217_n))));
		_31917_exp+=_37217_n;
	}
	if ((_31917_exp - _31830_flt._field_bias) >= ((1LL << _31830_flt._field_expbits) - 1LL)) {
		goto _julec_label_overflow;
	}
	(*this)._method_shift(static_cast<jule::Int>(1LL + _31830_flt._field_mantbits));
	_32017_mant=static_cast<jule::U64>((*this)._method_rounded_integer());
	if (_32017_mant == (2LL << _31830_flt._field_mantbits)) {
		_32017_mant>>=1LL;
		(_31917_exp)++;
		if ((_31917_exp - _31830_flt._field_bias) >= ((1LL << _31830_flt._field_expbits) - 1LL)) {
			goto _julec_label_overflow;
		}
	}
	if ((_32017_mant & (1LL << _31830_flt._field_mantbits)) == 0LL) {
		_31917_exp=_31830_flt._field_bias;
	}
	goto _julec_label_out;
	_julec_label_overflow:;
	_32017_mant=0LL;
	_31917_exp=static_cast<jule::Int>(((1LL << _31830_flt._field_expbits) - 1LL) + _31830_flt._field_bias);
	_31856_overflow=true;
	_julec_label_out:;
	jule::U64 _40817_bits = _32017_mant & ((static_cast<jule::U64>(1LLU) << _31830_flt._field_mantbits) - 1LL);
	_40817_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_31917_exp - _31830_flt._field_bias) & ((1LL << _31830_flt._field_expbits) - 1LL)) << _31830_flt._field_mantbits);
	if ((*this)._field_neg) {
		_40817_bits|=static_cast<jule::Int>((1LL << _31830_flt._field_mantbits) << _31830_flt._field_expbits);
	}
	_31848_b = _40817_bits;
	_31856_overflow = _31856_overflow;
	return std::make_tuple(_31848_b,_31856_overflow);
}



inline void _110057cd0_Decimal::_method_assign(jule::U64 _15229_v) {
	jule::Array<jule::U8,24> _15317_buf = jule::Array<jule::U8,24>({});
	jule::Int _15617_n = 0LL;
	_iter_begin_4597749136:;
	if (!(_15229_v > 0LL)) { goto _iter_end_4597749136; }
	{
		jule::U64 _15817_v1 = jule::div(_15229_v,10LL);
		_15229_v-=static_cast<jule::U64>(10LL * _15817_v1);
		_15317_buf[static_cast<jule::Int>(_15617_n)]=static_cast<jule::U8>(_15229_v + '0');
		(_15617_n)++;
		_15229_v=_15817_v1;
	}
	_iter_next_4597749136:;
	goto _iter_begin_4597749136;
	_iter_end_4597749136:;
	(*this)._field_nd=0LL;
	(_15617_n)--;
	_iter_begin_4597752880:;
	if (!(_15617_n >= 0LL)) { goto _iter_end_4597752880; }
	{
		(*this)._field_d[static_cast<jule::Int>((*this)._field_nd)]=_15317_buf[static_cast<jule::Int>(_15617_n)];
		((*this)._field_nd)++;
	}
	_iter_next_4597752880:;
	(_15617_n)--;
	goto _iter_begin_4597752880;
	_iter_end_4597752880:;
	(*this)._field_dp=(*this)._field_nd;
	_110057cd0_trim((*this));
}



inline void _110057cd0_Decimal::_method_shift(jule::Int _17728_k) {
	{
		if (!(((*this)._field_nd == 0LL))) { goto _case_end_4597759552; }
		goto _match_end_4597759344;
		_case_end_4597759552:;
		if (!((_17728_k > 0LL))) { goto _case_end_4597759680; }
		_case_begin_4597759680:;
		{
			_iter_begin_4597760736:;
			if (!(_17728_k > 60LL)) { goto _iter_end_4597760736; }
			{
				_110057cd0_left_shift((*this),60LLU);
				_17728_k-=60LL;
			}
			_iter_next_4597760736:;
			goto _iter_begin_4597760736;
			_iter_end_4597760736:;
			_110057cd0_left_shift((*this),static_cast<jule::Uint>(_17728_k));
		}
		goto _match_end_4597759344;
		_case_end_4597759680:;
		if (!((_17728_k < 0LL))) { goto _case_end_4597759808; }
		_case_begin_4597759808:;
		{
			_iter_begin_4597760592:;
			if (!(_17728_k < -60LL)) { goto _iter_end_4597760592; }
			{
				_110057cd0_right_shift((*this),60LLU);
				_17728_k+=60LL;
			}
			_iter_next_4597760592:;
			goto _iter_begin_4597760592;
			_iter_end_4597760592:;
			_110057cd0_right_shift((*this),static_cast<jule::Uint>((-(_17728_k))));
		}
		goto _match_end_4597759344;
		_case_end_4597759808:;
		_match_end_4597759344:;
	}
}



inline void _110057cd0_Decimal::_method_round_down(jule::Int _19729_nd) {
	if ((_19729_nd < 0LL) || (_19729_nd >= (*this)._field_nd)) {
		return;
	}
	(*this)._field_nd=_19729_nd;
	_110057cd0_trim((*this));
}



inline void _110057cd0_Decimal::_method_round_up(jule::Int _20627_nd) {
	if ((_20627_nd < 0LL) || (_20627_nd >= (*this)._field_nd)) {
		return;
	}
	jule::Int _21217_i = _20627_nd - 1LL;
	_iter_begin_4597772224:;
	if (!(_21217_i >= 0LL)) { goto _iter_end_4597772224; }
	{
		jule::U8 _21417_c = (*this)._field_d[static_cast<jule::Int>(_21217_i)];
		if (_21417_c < '9') {
			((*this)._field_d[static_cast<jule::Int>(_21217_i)])++;
			(*this)._field_nd=static_cast<jule::Int>(_21217_i + 1LL);
			return;
		}
	}
	_iter_next_4597772224:;
	(_21217_i)--;
	goto _iter_begin_4597772224;
	_iter_end_4597772224:;
	(*this)._field_d[0LL]='1';
	(*this)._field_nd=1LL;
	((*this)._field_dp)++;
}



inline void _110057cd0_Decimal::_method_round(jule::Int _23324_nd) {
	if ((_23324_nd < 0LL) || (_23324_nd >= (*this)._field_nd)) {
		return;
	}
	if (_110057cd0_should_round_up((*this),_23324_nd)) {
		(*this)._method_round_up(_23324_nd);
	} else {
		(*this)._method_round_down(_23324_nd);
	}
}



inline jule::U64 _110057cd0_Decimal::_method_rounded_integer(void) {
	if ((*this)._field_dp > 20LL) {
		return jule::MAX_U64;
	}
	jule::Int _25017_i = 0LL;
	jule::U64 _25117_n = 0LLU;
	_iter_begin_4597788400:;
	if (!((_25017_i < (*this)._field_dp) && (_25017_i < (*this)._field_nd))) { goto _iter_end_4597788400; }
	{
		_25117_n=static_cast<jule::U64>((_25117_n * 10LL) + static_cast<jule::U64>((*this)._field_d[static_cast<jule::Int>(_25017_i)] - '0'));
	}
	_iter_next_4597788400:;
	(_25017_i)++;
	goto _iter_begin_4597788400;
	_iter_end_4597788400:;
	_iter_begin_4597789152:;
	if (!(_25017_i < (*this)._field_dp)) { goto _iter_end_4597789152; }
	{
		_25117_n*=10LL;
	}
	_iter_next_4597789152:;
	(_25017_i)++;
	goto _iter_begin_4597789152;
	_iter_end_4597789152:;
	if (_110057cd0_should_round_up((*this),(*this)._field_dp)) {
		(_25117_n)++;
	}
	return _25117_n;
}







std::ostream &operator<<(std::ostream &_Stream, const _110057cd0_Decimal &_Src) {
	_Stream << "Decimal{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "trunc:" << _Src._field_trunc;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _127e05da0_Log &_Src) {
	_Stream << "Log{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "text:" << _Src._field_text << ", ";
	_Stream << "line:" << _Src._field_line << ", ";
	_Stream << "suggestion:" << _Src._field_suggestion;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110473c30_DirEntry &_Src) {
	_Stream << "DirEntry{";
	_Stream << "name:" << _Src._field_name << ", ";
	_Stream << "stat:" << _Src._field_stat;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::I64,jule::Int> _1104f8ac0_File::_method_seek(jule::I64 _5527_offset,jule::Int _5540_origin) {
	jule::I64 _5613_pos = _117eb6970_seek((*this)._field_handle,_5527_offset,static_cast<jule::Int>(_5540_origin));
	return std::make_tuple(_5613_pos,0LLU);
}



inline std::tuple<jule::Int,jule::Int> _1104f8ac0_File::_method_read(jule::Slice<jule::U8> _7031_buff) {
	jule::Int _7047_n = jule::Int();
	if (_7031_buff.len() == 0LL) {
		_7047_n = 0LL;
		return std::make_tuple(_7047_n,0LLU);
	}
	_7047_n=static_cast<jule::Int>(static_cast<jule::Int>(_117eb6970_read((*this)._field_handle,(&(_7031_buff[0LL])),static_cast<jule::Uint>(_7031_buff.len()))));
	if (_7047_n == -1LL) {
		_7047_n=0LL;
		_7047_n = _7047_n;
		return std::make_tuple(_7047_n,_110471290_get_last_fs_error());
	}
	_7047_n = _7047_n;
	return std::make_tuple(_7047_n,0LLU);
}



inline std::tuple<jule::Int,jule::Int> _1104f8ac0_File::_method_write(jule::Slice<jule::U8> _8928_buff) {
	jule::Int _8944_n = jule::Int();
	if (_8928_buff.len() == 0LL) {
		_8944_n = 0LL;
		return std::make_tuple(_8944_n,0LLU);
	}
	_8944_n=static_cast<jule::Int>(static_cast<jule::Int>(_117eb6970_write((*this)._field_handle,(&(_8928_buff[0LL])),static_cast<jule::Uint>(_8928_buff.len()))));
	if (_8944_n == -1LL) {
		_8944_n=0LL;
		_8944_n = _8944_n;
		return std::make_tuple(_8944_n,_110471290_get_last_fs_error());
	}
	_8944_n = _8944_n;
	return std::make_tuple(_8944_n,0LLU);
}



inline jule::Int _1104f8ac0_File::_method_close(void) {
	if (_117eb6970_close((*this)._field_handle) == -1LL) {
		return _110471290_get_last_fs_error();
	}
	return 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _1104f8ac0_File &_Src) {
	_Stream << "File{";
	_Stream << "handle:" << _Src._field_handle;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054d9e0_Status::_method_is_dir(void) {
	return ((*this)._field_mode & 16384LL) == 16384LL;
}



inline jule::Bool _11054d9e0_Status::_method_is_reg(void) {
	return ((*this)._field_mode & 32768LL) == 32768LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054d9e0_Status &_Src) {
	_Stream << "Status{";
	_Stream << "mode:" << _Src._field_mode << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1106ed100_accept_range &_Src) {
	_Stream << "accept_range{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi;
	_Stream << "}";
	return _Stream;
}



inline jule::Int _1106ec050_Token::_method_prec(void) {
	if ((*this)._field_id != 7LLU) {
		return -1LL;
	}
	{
		auto _match_expr{ (*this)._field_kind };
		if (!((jule::Str("*", 1)) == _match_expr || (jule::Str("%", 1)) == _match_expr || (jule::Str("/", 1)) == _match_expr || (jule::Str(">>", 2)) == _match_expr || (jule::Str("<<", 2)) == _match_expr || (jule::Str("&", 1)) == _match_expr)) { goto _case_end_4599200704; }
		_case_begin_4599200704:;
		{
			return 5LL;
		}
		goto _match_end_4599197760;
		_case_end_4599200704:;
		if (!((jule::Str("+", 1)) == _match_expr || (jule::Str("-", 1)) == _match_expr || (jule::Str("|", 1)) == _match_expr || (jule::Str("^", 1)) == _match_expr)) { goto _case_end_4599200816; }
		_case_begin_4599200816:;
		{
			return 4LL;
		}
		goto _match_end_4599197760;
		_case_end_4599200816:;
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("=", 1)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str("<=", 2)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str(">=", 2)) == _match_expr)) { goto _case_end_4599200224; }
		_case_begin_4599200224:;
		{
			return 3LL;
		}
		goto _match_end_4599197760;
		_case_end_4599200224:;
		if (!((jule::Str("&&", 2)) == _match_expr)) { goto _case_end_4599200336; }
		_case_begin_4599200336:;
		{
			return 2LL;
		}
		goto _match_end_4599197760;
		_case_end_4599200336:;
		if (!((jule::Str("||", 2)) == _match_expr)) { goto _case_end_4599200448; }
		_case_begin_4599200448:;
		{
			return 1LL;
		}
		goto _match_end_4599197760;
		_case_end_4599200448:;
		_case_begin_4599198192:;
		{
			return -1LL;
		}
		goto _match_end_4599197760;
		_case_end_4599198192:;
		_match_end_4599197760:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1106ec050_Token &_Src) {
	_Stream << "Token{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054eff0_KindPair &_Src) {
	_Stream << "KindPair{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_CommentGroup &_Src) {
	_Stream << "CommentGroup{";
	_Stream << "comments:" << _Src._field_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_NamespaceTypeDecl &_Src) {
	_Stream << "NamespaceTypeDecl{";
	_Stream << "idents:" << _Src._field_idents << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_RefTypeDecl &_Src) {
	_Stream << "RefTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_SlcTypeDecl &_Src) {
	_Stream << "SlcTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_TupleTypeDecl &_Src) {
	_Stream << "TupleTypeDecl{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_PtrTypeDecl::_method_is_unsafe(void) {
	return (!(jule::real((*this)._field_elem)));
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_PtrTypeDecl &_Src) {
	_Stream << "PtrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_ArrTypeDecl::_method_auto_sized(void) {
	return (!(jule::real((*this)._field_size)));
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_ArrTypeDecl &_Src) {
	_Stream << "ArrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_MapTypeDecl &_Src) {
	_Stream << "MapTypeDecl{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_RetTypeDecl &_Src) {
	_Stream << "RetTypeDecl{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_TupleExpr &_Src) {
	_Stream << "TupleExpr{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_LitExpr::_method_is_nil(void) {
	return (*this)._field_value == jule::Str("nil", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_LitExpr &_Src) {
	_Stream << "LitExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_UnsafeExpr &_Src) {
	_Stream << "UnsafeExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_IdentExpr::_method_is_self(void) {
	return (*this)._field_ident == jule::Str("self", 4);
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_IdentExpr &_Src) {
	_Stream << "IdentExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_UnaryExpr &_Src) {
	_Stream << "UnaryExpr{";
	_Stream << "op:" << _Src._field_op << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_VariadicExpr &_Src) {
	_Stream << "VariadicExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_CastExpr &_Src) {
	_Stream << "CastExpr{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_NsSelectionExpr &_Src) {
	_Stream << "NsSelectionExpr{";
	_Stream << "ns:" << _Src._field_ns << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_SubIdentExpr &_Src) {
	_Stream << "SubIdentExpr{";
	_Stream << "is_self:" << _Src._field_is_self << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_BinopExpr &_Src) {
	_Stream << "BinopExpr{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_FieldExprPair::_method_is_targeted(void) {
	return (*this)._field_field._field_id != 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_FieldExprPair &_Src) {
	_Stream << "FieldExprPair{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_StructLit &_Src) {
	_Stream << "StructLit{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_BraceLit::_method_is_empty(void) {
	return (*this)._field_exprs.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_BraceLit &_Src) {
	_Stream << "BraceLit{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_KeyValPair &_Src) {
	_Stream << "KeyValPair{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val << ", ";
	_Stream << "colon:" << _Src._field_colon;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_SliceExpr::_method_is_empty(void) {
	return (*this)._field_elems.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_SliceExpr &_Src) {
	_Stream << "SliceExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_IndexingExpr &_Src) {
	_Stream << "IndexingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_SlicingExpr &_Src) {
	_Stream << "SlicingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "start:" << _Src._field_start << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_LabelSt &_Src) {
	_Stream << "LabelSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "token:" << _Src._field_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_AssignSt &_Src) {
	_Stream << "AssignSt{";
	_Stream << "declarative:" << _Src._field_declarative << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_ScopeTree &_Src) {
	_Stream << "ScopeTree{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_Iter::_method_is_inf(void) {
	return (*this)._field_kind == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_Iter &_Src) {
	_Stream << "Iter{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_WhileKind::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_WhileKind &_Src) {
	_Stream << "WhileKind{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "next_token:" << _Src._field_next_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_RangeKind &_Src) {
	_Stream << "RangeKind{";
	_Stream << "in_token:" << _Src._field_in_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "head:" << _Src._field_head << ", ";
	_Stream << "tail:" << _Src._field_tail << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_MatchCase &_Src) {
	_Stream << "MatchCase{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1106f8b50_FileInfo &_Src) {
	_Stream << "FileInfo{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1106f8b50_PackageInfo &_Src) {
	_Stream << "PackageInfo{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110709a60_Stmt &_Src) {
	_Stream << "Stmt{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "terminated:" << _Src._field_terminated;
	_Stream << "}";
	return _Stream;
}



inline void _110709a60_ScopeParser::_method_stop(void) {
	(*this)._field_pos=-1LL;
}



inline jule::Bool _110709a60_ScopeParser::_method_stopped(void) {
	return (*this)._field_pos == -1LL;
}



inline jule::Bool _110709a60_ScopeParser::_method_finished(void) {
	return (*this)._field_pos >= (*this)._field_stms.len();
}



inline jule::Bool _110709a60_ScopeParser::_method_is_last_st(void) {
	return ((*this)._field_pos + 1LL) >= (*this)._field_stms.len();
}



inline void _110709a60_ScopeParser::_method_push_err(_1106ec050_Token _15927_token,jule::Str _15941_fmt) {
	(*this)._field_p->_method_push_err(_15927_token,_15941_fmt,jule::Slice<jule::Any>({}));
}



inline void _110709a60_ScopeParser::_method_push_suggestion(jule::Str _16234_fmt,jule::Slice<jule::Any> _16247_args) {
	(*this)._field_p->_method_push_suggestion(_16234_fmt,_16247_args);
}



inline void _110709a60_ScopeParser::_method_insert_as_next(jule::Slice<_1106ec050_Token> _16637_tokens) {
	(*this)._field_stms=jule::append((*this)._field_stms.slice(0LL,static_cast<jule::Int>((*this)._field_pos + 1LL)),(*this)._field_stms.slice(static_cast<jule::Int>((*this)._field_pos)));
	(*this)._field_stms[static_cast<jule::Int>((*this)._field_pos + 1LL)]=jule::new_struct<_110709a60_Stmt>(new( std::nothrow ) _110709a60_Stmt(_16637_tokens,jule::Bool()));
}



inline jule::Ref<_110709a60_Stmt> _110709a60_ScopeParser::_method_next(void) {
	((*this)._field_pos)++;
	return (*this)._field_stms[static_cast<jule::Int>((*this)._field_pos)];
}



inline jule::Ref<_11054f670_ScopeTree> _110709a60_ScopeParser::_method_build_scope(jule::Slice<_1106ec050_Token> _17634_tokens) {
	jule::Ref<_11054f670_ScopeTree> _17717_s = _110709a60_new_scope();
	_17717_s->_field_parent=(*this)._field_s;
	_110709a60_ScopeParser _17917_ssp = _110709a60_ScopeParser((*this)._field_p,jule::Ref<_11054f670_ScopeTree>(),jule::Slice<jule::Ref<_110709a60_Stmt>>(),jule::Int());
	_17917_ssp._method_build(_17634_tokens,_17717_s);
	return _17717_s;
}



inline jule::Any _110709a60_ScopeParser::_method_build_var_st(jule::Slice<_1106ec050_Token> _18635_tokens) {
	jule::Ref<_11054f670_VarDecl> _18717_v = (*this)._field_p->_method_build_var(_18635_tokens);
	_18717_v->_field_scope=(*this)._field_s;
	return jule::Any(_18717_v);
}



inline jule::Any _110709a60_ScopeParser::_method_build_ret_st(jule::Slice<_1106ec050_Token> _19235_tokens) {
	jule::Ref<_11054f670_RetSt> _19317_st = jule::new_struct<_11054f670_RetSt>(new( std::nothrow ) _11054f670_RetSt(_19235_tokens[0LL],jule::Ref<_11054f670_Expr>()));
	if (_19235_tokens.len() > 1LL) {
		_19235_tokens=_19235_tokens.slice(1LL);
		_19317_st->_field_expr=(*this)._field_p->_method_build_expr(_19235_tokens);
	}
	return jule::Any(_19317_st);
}



inline jule::Any _110709a60_ScopeParser::_method_build_while_next_iter(jule::Ref<_110709a60_Stmt> _20344_s) {
	jule::Ref<_11054f670_Iter> _20417_it = jule::new_struct<_11054f670_Iter>(new( std::nothrow ) _11054f670_Iter(_20344_s->_field_tokens[0LL],jule::Any(),jule::Ref<_11054f670_ScopeTree>()));
	jule::Slice<_1106ec050_Token> _20717_tokens = _20344_s->_field_tokens.slice(1LL);
	jule::Ref<_11054f670_WhileKind> _20817_kind = jule::new_struct<_11054f670_WhileKind>(new( std::nothrow ) _11054f670_WhileKind());
	if (_20717_tokens.len() > 0LL) {
		_20817_kind->_field_expr=(*this)._field_p->_method_build_expr(_20717_tokens);
	}
	if ((*this)._method_is_last_st()) {
		(*this)._method_push_err(_20417_it->_field_token,jule::Str("invalid syntax", 14));
		return jule::Any(nullptr);
	}
	_20717_tokens=(*this)._method_next()->_field_tokens;
	jule::Slice<_1106ec050_Token> _22017_st_tokens = _11070bfb0_get_block_expr(_20717_tokens);
	if (_22017_st_tokens.len() > 0LL) {
		jule::Ref<_110709a60_Stmt> _22221_s = jule::new_struct<_110709a60_Stmt>(new( std::nothrow ) _110709a60_Stmt(_22017_st_tokens,_20344_s->_field_terminated));
		_20817_kind->_field_next_token=_22017_st_tokens[0LL];
		_20817_kind->_field_next=(*this)._method_build_st(_22221_s);
	}
	jule::I64 _23017_i = _22017_st_tokens.len();
	jule::Slice<_1106ec050_Token> _23117_block_tokens = _110754df0_range(_23017_i,jule::Str("{", 1),jule::Str("}", 1),_20717_tokens);
	if (_23117_block_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_20417_it->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	if (_23017_i < _20717_tokens.len()) {
		(*this)._method_push_err(_20717_tokens[static_cast<jule::Int>(_23017_i)],jule::Str("invalid syntax", 14));
	}
	_20417_it->_field_scope=(*this)._method_build_scope(_23117_block_tokens);
	_20417_it->_field_kind=jule::Any(_20817_kind);
	return jule::Any(_20417_it);
}



inline jule::Ref<_11054f670_WhileKind> _110709a60_ScopeParser::_method_build_while_iter_kind(jule::Slice<_1106ec050_Token> _24844_tokens) {
	return jule::new_struct<_11054f670_WhileKind>(new( std::nothrow ) _11054f670_WhileKind((*this)._field_p->_method_build_expr(_24844_tokens),jule::Any(),_1106ec050_Token()));
}



inline jule::Slice<jule::Slice<_1106ec050_Token>> _110709a60_ScopeParser::_method_get_range_kind_keys_tokens(jule::Slice<_1106ec050_Token> _25449_toks) {
	jule::Slice<jule::Slice<_1106ec050_Token>> _25518_vars;
	jule::Slice<_127e05da0_Log> _25524_errs;
	std::tie(_25518_vars,_25524_errs) = _110754df0_parts(_25449_toks,8LLU,true);
	(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_25524_errs);
	return _25518_vars;
}



inline jule::Ref<_11054f670_VarDecl> _110709a60_ScopeParser::_method_build_range_kind_key(jule::Slice<_1106ec050_Token> _26043_tokens) {
	if (_26043_tokens.len() == 0LL) {
		return jule::new_ref<_11054f670_VarDecl>();
	}
	jule::Ref<_11054f670_VarDecl> _26417_key = jule::new_struct<_11054f670_VarDecl>(new( std::nothrow ) _11054f670_VarDecl(jule::Ref<_11054f670_ScopeTree>(),_26043_tokens[0LL],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ref<_11054f670_Directive>>(),jule::Ref<_11054f670_CommentGroup>(),jule::Ref<_11054f670_TypeDecl>(),jule::Ref<_11054f670_Expr>()));
	if (_26417_key->_field_token._field_id == 36LLU) {
		_26417_key->_field_mutable=true;
		if (_26043_tokens.len() == 1LL) {
			(*this)._method_push_err(_26417_key->_field_token,jule::Str("invalid syntax", 14));
		}
		_26417_key->_field_token=_26043_tokens[1LL];
	} else if (_26043_tokens.len() > 1LL) {
		(*this)._method_push_err(_26043_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	if (_26417_key->_field_token._field_id != 2LLU) {
		(*this)._method_push_err(_26417_key->_field_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_VarDecl>();
	}
	_26417_key->_field_ident=_26417_key->_field_token._field_kind;
	return _26417_key;
}



inline jule::Slice<jule::Ref<_11054f670_VarDecl>> _110709a60_ScopeParser::_method_build_range_kind_keys(jule::Slice<jule::Slice<_1106ec050_Token>> _28544_parts) {
	jule::Slice<jule::Ref<_11054f670_VarDecl>> _28617_keys = nullptr;
	{
		auto __julec_range_expr = _28544_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Slice<_1106ec050_Token> _110709a60_tokens = *__julec_range_begin;
			_iter_begin_4601189024:;
			{
				_28617_keys=jule::append(_28617_keys,jule::Slice<jule::Ref<_11054f670_VarDecl>>({(*this)._method_build_range_kind_key(_110709a60_tokens)}));
			}
			_iter_next_4601189024:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110709a60_tokens = *__julec_range_begin; goto _iter_begin_4601189024; }
			_iter_end_4601189024:;
		}
	}
	return _28617_keys;
}



inline void _110709a60_ScopeParser::_method_setup_range_kind_keys_plain(jule::Ref<_11054f670_RangeKind> _29350_rng,jule::Slice<_1106ec050_Token> _29371_tokens) {
	jule::Slice<jule::Slice<_1106ec050_Token>> _29417_key_tokens = (*this)._method_get_range_kind_keys_tokens(_29371_tokens);
	if (_29417_key_tokens.len() == 0LL) {
		return;
	}
	if (_29417_key_tokens.len() > 2LL) {
		(*this)._method_push_err(_29350_rng->_field_in_token,jule::Str("range variables can be maximum two", 34));
	}
	jule::Slice<jule::Ref<_11054f670_VarDecl>> _30117_keys = (*this)._method_build_range_kind_keys(_29417_key_tokens);
	_29350_rng->_field_key_a=_30117_keys[0LL];
	if (_30117_keys.len() > 1LL) {
		_29350_rng->_field_key_b=_30117_keys[1LL];
	}
}



inline void _110709a60_ScopeParser::_method_setup_range_kind_keys_explicit(jule::Ref<_11054f670_RangeKind> _30853_rng,jule::Slice<_1106ec050_Token> _30874_tokens) {
	jule::Int _30917_i = 0LL;
	jule::Slice<_1106ec050_Token> _31017_rang = _110754df0_range(_30917_i,jule::Str("(", 1),jule::Str(")", 1),_30874_tokens);
	if (_30917_i < _30874_tokens.len()) {
		(*this)._method_push_err(_30853_rng->_field_in_token,jule::Str("invalid syntax", 14));
	}
	(*this)._method_setup_range_kind_keys_plain(_30853_rng,_31017_rang);
}



inline void _110709a60_ScopeParser::_method_setup_range_kind_keys(jule::Ref<_11054f670_RangeKind> _31744_rng,jule::Slice<_1106ec050_Token> _31765_tokens) {
	if (_31765_tokens[0LL]._field_id == 3LLU) {
		if (_31765_tokens[0LL]._field_kind != jule::Str("(", 1)) {
			(*this)._method_push_err(_31765_tokens[0LL],jule::Str("invalid syntax", 14));
			return;
		}
		(*this)._method_setup_range_kind_keys_explicit(_31744_rng,_31765_tokens);
		return;
	}
	(*this)._method_setup_range_kind_keys_plain(_31744_rng,_31765_tokens);
}



inline jule::Ref<_11054f670_RangeKind> _110709a60_ScopeParser::_method_build_range_iter_kind(jule::Slice<_1106ec050_Token> _32944_var_tokens,jule::Slice<_1106ec050_Token> _32969_expr_tokens,_1106ec050_Token _32991_in_token) {
	jule::Ref<_11054f670_RangeKind> _33017_rng = jule::new_struct<_11054f670_RangeKind>(new( std::nothrow ) _11054f670_RangeKind(_32991_in_token,jule::Ref<_11054f670_Expr>(),jule::Ref<_11054f670_VarDecl>(),jule::Ref<_11054f670_VarDecl>()));
	if (_32969_expr_tokens.len() == 0LL) {
		(*this)._method_push_err(_33017_rng->_field_in_token,jule::Str("expression missing", 18));
		return _33017_rng;
	}
	_33017_rng->_field_expr=(*this)._field_p->_method_build_expr(_32969_expr_tokens);
	if (_32944_var_tokens.len() > 0LL) {
		(*this)._method_setup_range_kind_keys(_33017_rng,_32944_var_tokens);
	}
	return _33017_rng;
}



inline jule::Any _110709a60_ScopeParser::_method_build_common_iter_kind(jule::Slice<_1106ec050_Token> _34445_tokens,_1106ec050_Token _34462_err_tok) {
	jule::Int _34517_brace_n = 0LL;
	{
		auto __julec_range_expr = _34445_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110709a60_i = 0;
			_1106ec050_Token _110709a60_tok = *__julec_range_begin;
			_iter_begin_4601234608:;
			{
				if (_110709a60_tok._field_id == 3LLU) {
					{
						auto _match_expr{ _110709a60_tok._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4601238928; }
						_case_begin_4601238928:;
						{
							(_34517_brace_n)++;
							goto _iter_next_4601234608;
						}
						goto _match_end_4601237408;
						_case_end_4601238928:;
						_case_begin_4601238096:;
						{
							(_34517_brace_n)--;
						}
						goto _match_end_4601237408;
						_case_end_4601238096:;
						_match_end_4601237408:;
					}
				}
				if (_34517_brace_n != 0LL) {
					goto _iter_next_4601234608;
				}
				{
					auto _match_expr{ _110709a60_tok._field_id };
					if (!((15LLU) == _match_expr)) { goto _case_end_4601240368; }
					_case_begin_4601240368:;
					{
						jule::Slice<_1106ec050_Token> _36425_decl_tokens = _34445_tokens.slice(0LL,static_cast<jule::Int>(_110709a60_i));
						jule::Slice<_1106ec050_Token> _36525_expr_tokens = _34445_tokens.slice(static_cast<jule::Int>(_110709a60_i + 1LL));
						return jule::Any((*this)._method_build_range_iter_kind(_36425_decl_tokens,_36525_expr_tokens,_110709a60_tok));
					}
					goto _match_end_4601240080;
					_case_end_4601240368:;
					_match_end_4601240080:;
				}
			}
			_iter_next_4601234608:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110709a60_i; _110709a60_tok = *__julec_range_begin; goto _iter_begin_4601234608; }
			_iter_end_4601234608:;
		}
	}
	return jule::Any((*this)._method_build_while_iter_kind(_34445_tokens));
}



inline jule::Any _110709a60_ScopeParser::_method_build_common_iter(jule::Slice<_1106ec050_Token> _37240_tokens) {
	jule::Ref<_11054f670_Iter> _37317_it = jule::new_struct<_11054f670_Iter>(new( std::nothrow ) _11054f670_Iter(_37240_tokens[0LL],jule::Any(),jule::Ref<_11054f670_ScopeTree>()));
	_37240_tokens=_37240_tokens.slice(1LL);
	if (_37240_tokens.len() == 0LL) {
		(*this)._method_stop();
		(*this)._method_push_err(_37317_it->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	jule::Slice<_1106ec050_Token> _38317_expr_tokens = _11070bfb0_get_block_expr(_37240_tokens);
	if (_38317_expr_tokens.len() > 0LL) {
		_37317_it->_field_kind=(*this)._method_build_common_iter_kind(_38317_expr_tokens,_37317_it->_field_token);
	}
	jule::I64 _38717_i = _38317_expr_tokens.len();
	jule::Slice<_1106ec050_Token> _38817_scope_tokens = _110754df0_range(_38717_i,jule::Str("{", 1),jule::Str("}", 1),_37240_tokens);
	if (_38817_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_37317_it->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	if (_38717_i < _37240_tokens.len()) {
		(*this)._method_push_err(_37240_tokens[static_cast<jule::Int>(_38717_i)],jule::Str("invalid syntax", 14));
	}
	_37317_it->_field_scope=(*this)._method_build_scope(_38817_scope_tokens);
	return jule::Any(_37317_it);
}



inline jule::Any _110709a60_ScopeParser::_method_buid_iter_st(jule::Ref<_110709a60_Stmt> _40235_st) {
	if (_40235_st->_field_terminated) {
		return (*this)._method_build_while_next_iter(_40235_st);
	}
	return (*this)._method_build_common_iter(_40235_st->_field_tokens);
}



inline jule::Any _110709a60_ScopeParser::_method_build_break_st(jule::Slice<_1106ec050_Token> _40937_tokens) {
	jule::Ref<_11054f670_BreakSt> _41017_brk = jule::new_struct<_11054f670_BreakSt>(new( std::nothrow ) _11054f670_BreakSt(_40937_tokens[0LL],_1106ec050_Token()));
	if (_40937_tokens.len() > 1LL) {
		if (_40937_tokens[1LL]._field_id != 2LLU) {
			(*this)._method_push_err(_40937_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>({}));
		} else {
			_41017_brk->_field_label=_40937_tokens[1LL];
			if (_40937_tokens.len() > 2LL) {
				(*this)._method_push_err(_40937_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_41017_brk);
}



inline jule::Any _110709a60_ScopeParser::_method_build_cont_st(jule::Slice<_1106ec050_Token> _42736_tokens) {
	jule::Ref<_11054f670_ContSt> _42817_cont = jule::new_struct<_11054f670_ContSt>(new( std::nothrow ) _11054f670_ContSt(_42736_tokens[0LL],_1106ec050_Token()));
	if (_42736_tokens.len() > 1LL) {
		if (_42736_tokens[1LL]._field_id != 2LLU) {
			(*this)._method_push_err(_42736_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>({}));
		} else {
			_42817_cont->_field_label=_42736_tokens[1LL];
			if (_42736_tokens.len() > 2LL) {
				(*this)._method_push_err(_42736_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_42817_cont);
}



inline jule::Ref<_11054f670_If> _110709a60_ScopeParser::_method_build_if(jule::Slice<_1106ec050_Token>& _44532_tokens) {
	jule::Ref<_11054f670_If> _44617_model = jule::new_struct<_11054f670_If>(new( std::nothrow ) _11054f670_If(_44532_tokens[0LL],jule::Ref<_11054f670_Expr>(),jule::Ref<_11054f670_ScopeTree>()));
	_44532_tokens=_44532_tokens.slice(1LL);
	jule::Slice<_1106ec050_Token> _45017_expr_tokens = _11070bfb0_get_block_expr(_44532_tokens);
	jule::Int _45117_i = 0LL;
	if (_45017_expr_tokens.len() == 0LL) {
		(*this)._method_push_err(_44617_model->_field_token,jule::Str("expression missing", 18));
	} else {
		_45117_i=static_cast<jule::I64>(_45017_expr_tokens.len());
	}
	jule::Slice<_1106ec050_Token> _45717_scope_tokens = _110754df0_range(_45117_i,jule::Str("{", 1),jule::Str("}", 1),_44532_tokens);
	if (_45717_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_44617_model->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_If>();
	}
	if (_45117_i < _44532_tokens.len()) {
		if (_44532_tokens[static_cast<jule::Int>(_45117_i)]._field_id == 17LLU) {
			_44532_tokens=_44532_tokens.slice(static_cast<jule::Int>(_45117_i));
		} else {
			(*this)._method_push_err(_44532_tokens[static_cast<jule::Int>(_45117_i)],jule::Str("invalid syntax", 14));
			_44532_tokens=nullptr;
		}
	}
	_44617_model->_field_expr=(*this)._field_p->_method_build_expr(_45017_expr_tokens);
	_44617_model->_field_scope=(*this)._method_build_scope(_45717_scope_tokens);
	return _44617_model;
}



inline jule::Ref<_11054f670_Else> _110709a60_ScopeParser::_method_build_else(jule::Slice<_1106ec050_Token> _47733_tokens) {
	jule::Ref<_11054f670_Else> _47817_els = jule::new_struct<_11054f670_Else>(new( std::nothrow ) _11054f670_Else(_47733_tokens[0LL],jule::Ref<_11054f670_ScopeTree>()));
	_47733_tokens=_47733_tokens.slice(1LL);
	jule::Int _48217_i = 0LL;
	jule::Slice<_1106ec050_Token> _48317_scope_tokens = _110754df0_range(_48217_i,jule::Str("{", 1),jule::Str("}", 1),_47733_tokens);
	if (_48317_scope_tokens == nullptr) {
		if (_48217_i < _47733_tokens.len()) {
			(*this)._method_push_err(_47817_els->_field_token,jule::Str("else's cannot have any expression", 33));
		} else {
			(*this)._method_stop();
			(*this)._method_push_err(_47817_els->_field_token,jule::Str("body is not exist", 17));
			(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		}
		return jule::new_ref<_11054f670_Else>();
	}
	if (_48217_i < _47733_tokens.len()) {
		(*this)._method_push_err(_47733_tokens[static_cast<jule::Int>(_48217_i)],jule::Str("invalid syntax", 14));
	}
	_47817_els->_field_scope=(*this)._method_build_scope(_48317_scope_tokens);
	return _47817_els;
}



inline jule::Any _110709a60_ScopeParser::_method_build_if_else_chain(jule::Slice<_1106ec050_Token> _50142_tokens) {
	jule::Ref<_11054f670_Conditional> _50217_chain = jule::new_struct<_11054f670_Conditional>(new( std::nothrow ) _11054f670_Conditional((*this)._method_build_if(_50142_tokens),jule::Slice<jule::Ref<_11054f670_If>>(),jule::Ref<_11054f670_Else>()));
	if ((!(jule::real(_50217_chain->_field_head)))) {
		return jule::Any(nullptr);
	}
	_iter_begin_4601336736:;
	if (!(_50142_tokens != nullptr)) { goto _iter_end_4601336736; }
	{
		if (_50142_tokens[0LL]._field_id != 17LLU) {
			goto _iter_end_4601336736;
		}
		if ((_50142_tokens.len() > 1LL) && (_50142_tokens[1LL]._field_id == 16LLU)) {
			_50142_tokens=_50142_tokens.slice(1LL);
			jule::Ref<_11054f670_If> _51425_elif = (*this)._method_build_if(_50142_tokens);
			_50217_chain->_field_tail=jule::append(_50217_chain->_field_tail,jule::Slice<jule::Ref<_11054f670_If>>({_51425_elif}));
			goto _iter_next_4601336736;
		}
		_50217_chain->_field_default=(*this)._method_build_else(_50142_tokens);
		goto _iter_end_4601336736;
	}
	_iter_next_4601336736:;
	goto _iter_begin_4601336736;
	_iter_end_4601336736:;
	return jule::Any(_50217_chain);
}



inline jule::Any _110709a60_ScopeParser::_method_build_comment_st(_1106ec050_Token _52435_token) {
	return jule::Any(_110754df0_build_comment(_52435_token));
}



inline jule::Any _110709a60_ScopeParser::_method_build_call_st(jule::Slice<_1106ec050_Token> _52836_tokens) {
	_1106ec050_Token _52913_token = _52836_tokens[0LL];
	if (_11070bfb0_is_fn_call(_52836_tokens) == nullptr) {
		(*this)._method_push_err(_52913_token,jule::Str("statement must have function call expression", 44));
	}
	jule::Ref<_11054f670_Expr> _53317_expr = (*this)._field_p->_method_build_expr(_52836_tokens);
	if (jule::real(_53317_expr) && (!(_53317_expr->_method_is_fn_call()))) {
		(*this)._method_push_err(_52913_token,jule::Str("invalid syntax", 14));
	}
	return jule::Any(_53317_expr);
}



inline jule::Any _110709a60_ScopeParser::_method_build_co_call_st(jule::Slice<_1106ec050_Token> _54039_tokens) {
	_54039_tokens=_54039_tokens.slice(1LL);
	jule::Any _54217_cc = (*this)._method_build_call_st(_54039_tokens);
	_54217_cc.operator jule::Ref<_11054f670_Expr>()->_field_kind.operator jule::Ref<_11054f670_FnCallExpr>()->_field_concurrent=true;
	return _54217_cc;
}



inline jule::Any _110709a60_ScopeParser::_method_build_goto_st(jule::Slice<_1106ec050_Token> _54736_tokens) {
	jule::Ref<_11054f670_GotoSt> _54817_gt = jule::new_struct<_11054f670_GotoSt>(new( std::nothrow ) _11054f670_GotoSt(_54736_tokens[0LL],_1106ec050_Token()));
	if (_54736_tokens.len() == 1LL) {
		(*this)._method_push_err(_54817_gt->_field_token,jule::Str("missing label identifier for goto statement", 43));
		return jule::Any(nullptr);
	} else if (_54736_tokens.len() > 2LL) {
		(*this)._method_push_err(_54736_tokens[2LL],jule::Str("invalid syntax", 14));
	}
	_1106ec050_Token _55717_ident_token = _54736_tokens[1LL];
	if (_55717_ident_token._field_id != 2LLU) {
		(*this)._method_push_err(_55717_ident_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return jule::Any(_54817_gt);
	}
	_54817_gt->_field_label=_55717_ident_token;
	return jule::Any(_54817_gt);
}



inline jule::Any _110709a60_ScopeParser::_method_build_fall_st(jule::Slice<_1106ec050_Token> _56736_tokens) {
	jule::Ref<_11054f670_FallSt> _56817_fll = jule::new_struct<_11054f670_FallSt>(new( std::nothrow ) _11054f670_FallSt(_56736_tokens[0LL]));
	if (_56736_tokens.len() > 1LL) {
		(*this)._method_push_err(_56736_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	return jule::Any(_56817_fll);
}



inline jule::Any _110709a60_ScopeParser::_method_build_type_alias_st(jule::Slice<_1106ec050_Token> _57742_tokens) {
	jule::Ref<_11054f670_TypeAliasDecl> _57817_tad = (*this)._field_p->_method_build_type_alias_decl(_57742_tokens);
	_57817_tad->_field_scope=(*this)._field_s;
	return jule::Any(_57817_tad);
}



inline void _110709a60_ScopeParser::_method_push_case_expr(jule::Slice<_1106ec050_Token> _58337_tokens,_1106ec050_Token _58358_token,jule::Bool _5849_type_match,jule::Slice<jule::Ref<_11054f670_Expr>>& _58432_exprs) {
	if (_58337_tokens.len() == 0LL) {
		return;
	}
	if (_5849_type_match) {
		jule::Int _59021_i = 0LL;
		jule::Ref<_11054f670_TypeDecl> _59122_t;
		jule::Bool _59125_ok;
		std::tie(_59122_t,_59125_ok) = (*this)._field_p->_method_build_type(_58337_tokens,(&(_59021_i)),true);
		if (_59125_ok) {
			_58432_exprs=jule::append(_58432_exprs,jule::Slice<jule::Ref<_11054f670_Expr>>({jule::new_struct<_11054f670_Expr>(new( std::nothrow ) _11054f670_Expr(_58358_token,jule::Any(_59122_t)))}));
		}
		if (_59021_i < _58337_tokens.len()) {
			(*this)._method_push_err(_58337_tokens[static_cast<jule::Int>(_59021_i)],jule::Str("invalid syntax", 14));
		}
		return;
	}
	_58432_exprs=jule::append(_58432_exprs,jule::Slice<jule::Ref<_11054f670_Expr>>({(*this)._field_p->_method_build_expr(_58337_tokens)}));
}



inline jule::Slice<jule::Ref<_11054f670_Expr>> _110709a60_ScopeParser::_method_build_case_exprs(jule::Slice<_1106ec050_Token>& _60640_tokens,jule::Bool _60657_type_match) {
	jule::Slice<jule::Ref<_11054f670_Expr>> _60717_exprs = nullptr;
	jule::Int _60917_brace_n = 0LL;
	jule::Int _61017_j = 0LL;
	{
		auto __julec_range_expr = _60640_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110709a60_i = 0;
			_1106ec050_Token _110709a60_tok = *__julec_range_begin;
			_iter_begin_4601412592:;
			{
				if (_110709a60_tok._field_id == 3LLU) {
					{
						auto _match_expr{ _110709a60_tok._field_kind };
						if (!((jule::Str("(", 1)) == _match_expr || (jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr)) { goto _case_end_4601416960; }
						_case_begin_4601416960:;
						{
							(_60917_brace_n)++;
						}
						goto _match_end_4601415440;
						_case_end_4601416960:;
						_case_begin_4601416128:;
						{
							(_60917_brace_n)--;
						}
						goto _match_end_4601415440;
						_case_end_4601416128:;
						_match_end_4601415440:;
					}
					goto _iter_next_4601412592;
				} else if (_60917_brace_n != 0LL) {
					goto _iter_next_4601412592;
				}
				{
					if (!(((_110709a60_tok._field_id == 7LLU) && (_110709a60_tok._field_kind == jule::Str("|", 1))))) { goto _case_end_4601418224; }
					_case_begin_4601418224:;
					{
						(*this)._method_push_case_expr(_60640_tokens.slice(static_cast<jule::Int>(_61017_j),static_cast<jule::Int>(_110709a60_i)),_110709a60_tok,_60657_type_match,_60717_exprs);
						_61017_j=static_cast<jule::Int>(_110709a60_i + 1LL);
					}
					goto _match_end_4601416368;
					_case_end_4601418224:;
					if (!((_110709a60_tok._field_id == 11LLU))) { goto _case_end_4601418336; }
					_case_begin_4601418336:;
					{
						(*this)._method_push_case_expr(_60640_tokens.slice(static_cast<jule::Int>(_61017_j),static_cast<jule::Int>(_110709a60_i)),_110709a60_tok,_60657_type_match,_60717_exprs);
						_60640_tokens=_60640_tokens.slice(static_cast<jule::Int>(_110709a60_i + 1LL));
						return _60717_exprs;
					}
					goto _match_end_4601416368;
					_case_end_4601418336:;
					_match_end_4601416368:;
				}
			}
			_iter_next_4601412592:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110709a60_i; _110709a60_tok = *__julec_range_begin; goto _iter_begin_4601412592; }
			_iter_end_4601412592:;
		}
	}
	(*this)._method_push_err(_60640_tokens[0LL],jule::Str("invalid syntax", 14));
	_60640_tokens=nullptr;
	return nullptr;
}



inline jule::Ref<_11054f670_ScopeTree> _110709a60_ScopeParser::_method_build_case_scope(jule::Slice<_1106ec050_Token>& _64240_tokens) {
	jule::Int _64317_n = 0LL;
	_iter_begin_4601431424:;
	{
		jule::Int _64521_i = 0LL;
		jule::Slice<_1106ec050_Token> _64622_next;
		std::tie(_64622_next,std::ignore) = _110709a60_skip_st(_64521_i,_64240_tokens.slice(static_cast<jule::Int>(_64317_n)));
		if (_64622_next.len() == 0LL) {
			goto _iter_end_4601431424;
		}
		_1106ec050_Token _65017_tok = _64622_next[0LL];
		if ((_65017_tok._field_id != 7LLU) || (_65017_tok._field_kind != jule::Str("|", 1))) {
			_64317_n+=static_cast<jule::I64>(_64622_next.len());
			goto _iter_next_4601431424;
		}
		jule::Ref<_11054f670_ScopeTree> _65521_scope = (*this)._method_build_scope(_64240_tokens.slice(0LL,static_cast<jule::Int>(_64317_n)));
		_64240_tokens=_64240_tokens.slice(static_cast<jule::Int>(_64317_n));
		return _65521_scope;
	}
	_iter_next_4601431424:;
	goto _iter_begin_4601431424;
	_iter_end_4601431424:;
	jule::Ref<_11054f670_ScopeTree> _65917_scope = (*this)._method_build_scope(_64240_tokens);
	_64240_tokens=nullptr;
	return _65917_scope;
}



inline std::tuple<jule::Ref<_11054f670_Case>,jule::Bool> _110709a60_ScopeParser::_method_build_case(jule::Slice<_1106ec050_Token>& _66434_tokens,jule::Bool _66451_type_match) {
	jule::Ref<_11054f670_Case> _66517_c = jule::new_struct<_11054f670_Case>(new( std::nothrow ) _11054f670_Case(_66434_tokens[0LL],jule::Ref<_11054f670_ScopeTree>(),jule::Slice<jule::Ref<_11054f670_Expr>>()));
	_66434_tokens=_66434_tokens.slice(1LL);
	_66517_c->_field_exprs=(*this)._method_build_case_exprs(_66434_tokens,_66451_type_match);
	_66517_c->_field_scope=(*this)._method_build_case_scope(_66434_tokens);
	jule::Bool _67113_is_default = _66517_c->_field_exprs.len() == 0LL;
	return std::make_tuple(_66517_c,_67113_is_default);
}



inline std::tuple<jule::Slice<jule::Ref<_11054f670_Case>>,jule::Ref<_11054f670_Else>> _110709a60_ScopeParser::_method_build_cases(jule::Slice<_1106ec050_Token> _67534_tokens,jule::Bool _67551_type_match) {
	jule::Slice<jule::Ref<_11054f670_Case>> _67617_cases = nullptr;
	jule::Ref<_11054f670_Else> _67717_def = jule::new_ref<_11054f670_Else>();
	_iter_begin_4601461520:;
	if (!(_67534_tokens.len() > 0LL)) { goto _iter_end_4601461520; }
	{
		_1106ec050_Token _67921_tok = _67534_tokens[0LL];
		if (_67921_tok._field_id == 18LLU) {
			_67534_tokens=_67534_tokens.slice(1LL);
			goto _iter_next_4601461520;
		}
		if ((_67921_tok._field_id != 7LLU) || (_67921_tok._field_kind != jule::Str("|", 1))) {
			(*this)._method_push_err(_67921_tok,jule::Str("invalid syntax", 14));
			goto _iter_end_4601461520;
		}
		jule::Ref<_11054f670_Case> _69022_c;
		jule::Bool _69025_is_default;
		std::tie(_69022_c,_69025_is_default) = (*this)._method_build_case(_67534_tokens,_67551_type_match);
		if (_69025_is_default) {
			_69022_c->_field_token=_67921_tok;
			if ((!(jule::real(_67717_def)))) {
				_67717_def=jule::new_struct<_11054f670_Else>(new( std::nothrow ) _11054f670_Else(_69022_c->_field_token,_69022_c->_field_scope));
			} else {
				(*this)._method_push_err(_67921_tok,jule::Str("invalid syntax", 14));
			}
		} else {
			_67617_cases=jule::append(_67617_cases,jule::Slice<jule::Ref<_11054f670_Case>>({_69022_c}));
		}
	}
	_iter_next_4601461520:;
	goto _iter_begin_4601461520;
	_iter_end_4601461520:;
	return std::make_tuple(_67617_cases,_67717_def);
}



inline jule::Ref<_11054f670_MatchCase> _110709a60_ScopeParser::_method_build_match_case(jule::Slice<_1106ec050_Token> _70839_tokens) {
	jule::Ref<_11054f670_MatchCase> _70917_m = jule::new_struct<_11054f670_MatchCase>(new( std::nothrow ) _11054f670_MatchCase(_70839_tokens[0LL],jule::Bool(),jule::Ref<_11054f670_Expr>(),jule::Slice<jule::Ref<_11054f670_Case>>(),jule::Ref<_11054f670_Else>()));
	_70839_tokens=_70839_tokens.slice(1LL);
	if ((_70839_tokens.len() > 0LL) && (_70839_tokens[0LL]._field_id == 10LLU)) {
		_70917_m->_field_type_match=true;
		_70839_tokens=_70839_tokens.slice(1LL);
	}
	jule::Slice<_1106ec050_Token> _71917_expr_tokens = _11070bfb0_get_block_expr(_70839_tokens);
	if (_71917_expr_tokens.len() > 0LL) {
		_70917_m->_field_expr=(*this)._field_p->_method_build_expr(_71917_expr_tokens);
	} else if (_70917_m->_field_type_match) {
		(*this)._method_push_err(_70917_m->_field_token,jule::Str("expression missing", 18));
	}
	jule::I64 _72617_i = _71917_expr_tokens.len();
	jule::Slice<_1106ec050_Token> _72717_block_toks = _110754df0_range(_72617_i,jule::Str("{", 1),jule::Str("}", 1),_70839_tokens);
	if (_72717_block_toks == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_70917_m->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_MatchCase>();
	}
	std::tie(_70917_m->_field_cases,_70917_m->_field_default) = (*this)._method_build_cases(_72717_block_toks,_70917_m->_field_type_match);
	return _70917_m;
}



inline jule::Ref<_11054f670_ScopeTree> _110709a60_ScopeParser::_method_build_scope_st(jule::Slice<_1106ec050_Token> _73937_tokens) {
	jule::Bool _74017_is_unsafe = false;
	jule::Bool _74117_is_deferred = false;
	_1106ec050_Token _74217_token = _73937_tokens[0LL];
	if (_74217_token._field_id == 35LLU) {
		_74017_is_unsafe=true;
		_73937_tokens=_73937_tokens.slice(1LL);
		if (_73937_tokens.len() == 0LL) {
			(*this)._method_push_err(_74217_token,jule::Str("invalid syntax", 14));
			return jule::new_ref<_11054f670_ScopeTree>();
		}
		_74217_token=_73937_tokens[0LL];
		if (_74217_token._field_id == 37LLU) {
			_74117_is_deferred=true;
			_73937_tokens=_73937_tokens.slice(1LL);
			if (_73937_tokens.len() == 0LL) {
				(*this)._method_push_err(_74217_token,jule::Str("invalid syntax", 14));
				return jule::new_ref<_11054f670_ScopeTree>();
			}
		}
	} else if (_74217_token._field_id == 37LLU) {
		_74117_is_deferred=true;
		_73937_tokens=_73937_tokens.slice(1LL);
		if (_73937_tokens.len() == 0LL) {
			(*this)._method_push_err(_74217_token,jule::Str("invalid syntax", 14));
			return jule::new_ref<_11054f670_ScopeTree>();
		}
	}
	jule::Int _76817_i = 0LL;
	jule::Slice<_1106ec050_Token> _76917_scope_tokens = _110754df0_range(_76817_i,jule::Str("{", 1),jule::Str("}", 1),_73937_tokens);
	if (_76917_scope_tokens == nullptr) {
		(*this)._method_push_err(_74217_token,jule::Str("invalid syntax", 14));
		return jule::new_ref<_11054f670_ScopeTree>();
	} else if (_76817_i < _73937_tokens.len()) {
		(*this)._method_push_err(_73937_tokens[static_cast<jule::Int>(_76817_i)],jule::Str("invalid syntax", 14));
	}
	jule::Ref<_11054f670_ScopeTree> _77617_scope = (*this)._method_build_scope(_76917_scope_tokens);
	_77617_scope->_field_unsafety=_74017_is_unsafe;
	_77617_scope->_field_deferred=_74117_is_deferred;
	return _77617_scope;
}



inline jule::Ref<_11054f670_LabelSt> _110709a60_ScopeParser::_method_build_label_st(jule::Slice<_1106ec050_Token> _78237_tokens) {
	jule::Ref<_11054f670_LabelSt> _78317_lbl = jule::new_struct<_11054f670_LabelSt>(new( std::nothrow ) _11054f670_LabelSt(_78237_tokens[0LL],_78237_tokens[0LL]._field_kind));
	if (_78237_tokens.len() > 2LL) {
		_78237_tokens=_78237_tokens.slice(2LL);
		(*this)._method_insert_as_next(_78237_tokens);
	}
	return _78317_lbl;
}



inline std::tuple<jule::Any,jule::Bool> _110709a60_ScopeParser::_method_build_id_st(jule::Slice<_1106ec050_Token> _79734_tokens) {
	jule::Bool _79763_ok = jule::Bool();
	if (_79734_tokens.len() == 1LL) {
		return std::make_tuple(jule::Any(),_79763_ok);
	}
	_1106ec050_Token _80217_token = _79734_tokens[1LL];
	{
		auto _match_expr{ _80217_token._field_id };
		if (!((11LLU) == _match_expr)) { goto _case_end_4601532544; }
		_case_begin_4601532544:;
		{
			_79763_ok = true;
			return std::make_tuple(jule::Any((*this)._method_build_label_st(_79734_tokens)),_79763_ok);
		}
		goto _match_end_4601531936;
		_case_end_4601532544:;
		_match_end_4601531936:;
	}
	return std::make_tuple(jule::Any(),_79763_ok);
}



inline jule::Ref<_110711f30_AssignInfo> _110709a60_ScopeParser::_method_build_assign_info(jule::Slice<_1106ec050_Token> _81140_tokens) {
	jule::Ref<_110711f30_AssignInfo> _81217_info = jule::new_struct<_110711f30_AssignInfo>(new( std::nothrow ) _110711f30_AssignInfo(jule::Slice<_1106ec050_Token>(),jule::Slice<_1106ec050_Token>(),_1106ec050_Token(),true));
	jule::Int _81517_brace_n = 0LL;
	{
		auto __julec_range_expr = _81140_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110709a60_i = 0;
			_1106ec050_Token _110709a60_token = *__julec_range_begin;
			_iter_begin_4601540624:;
			{
				if (_110709a60_token._field_id == 3LLU) {
					{
						auto _match_expr{ _110709a60_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4601545072; }
						_case_begin_4601545072:;
						{
							(_81517_brace_n)++;
						}
						goto _match_end_4601543552;
						_case_end_4601545072:;
						_case_begin_4601544240:;
						{
							(_81517_brace_n)--;
						}
						goto _match_end_4601543552;
						_case_end_4601544240:;
						_match_end_4601543552:;
					}
				}
				{
					if (!((_81517_brace_n > 0LL))) { goto _case_end_4601544480; }
					_case_begin_4601544480:;
					{
						goto _iter_next_4601540624;
					}
					goto _match_end_4601544720;
					_case_end_4601544480:;
					if (!((_110709a60_token._field_id != 7LLU))) { goto _case_end_4601546128; }
					_case_begin_4601546128:;
					{
						goto _iter_next_4601540624;
					}
					goto _match_end_4601544720;
					_case_end_4601546128:;
					if (!(((!(_1106ec050_is_assign_op(_110709a60_token._field_kind)))))) { goto _case_end_4601546240; }
					_case_begin_4601546240:;
					{
						goto _iter_next_4601540624;
					}
					goto _match_end_4601544720;
					_case_end_4601546240:;
					_match_end_4601544720:;
				}
				_81217_info->_field_l=_81140_tokens.slice(0LL,static_cast<jule::Int>(_110709a60_i));
				if (_81217_info->_field_l.len() == 0LL) {
					_81217_info->_field_ok=false;
				}
				_81217_info->_field_setter=_110709a60_token;
				if ((_110709a60_i + 1LL) >= _81140_tokens.len()) {
					_81217_info->_field_r=nullptr;
					_81217_info->_field_ok=_1106ec050_is_postfix_op(_81217_info->_field_setter._field_kind);
					goto _iter_end_4601540624;
				}
				_81217_info->_field_r=_81140_tokens.slice(static_cast<jule::Int>(_110709a60_i + 1LL));
				if (_1106ec050_is_postfix_op(_81217_info->_field_setter._field_kind)) {
					if (_81217_info->_field_r.len() > 0LL) {
						(*this)._method_push_err(_81217_info->_field_r[0LL],jule::Str("invalid syntax", 14));
						_81217_info->_field_r=nullptr;
					}
				}
				goto _iter_end_4601540624;
			}
			_iter_next_4601540624:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110709a60_i; _110709a60_token = *__julec_range_begin; goto _iter_begin_4601540624; }
			_iter_end_4601540624:;
		}
	}
	return _81217_info;
}



inline jule::Ref<_11054f670_AssignLeft> _110709a60_ScopeParser::_method_build_assign_l(jule::Slice<_1106ec050_Token> _85837_tokens) {
	jule::Ref<_11054f670_AssignLeft> _85917_l = jule::new_struct<_11054f670_AssignLeft>(new( std::nothrow ) _11054f670_AssignLeft(_85837_tokens[0LL],jule::Bool(),jule::Bool(),jule::Str(),jule::Ref<_11054f670_Expr>()));
	if (_85837_tokens[0LL]._field_id == 2LLU) {
		_85917_l->_field_ident=_85917_l->_field_token._field_kind;
	}
	_85917_l->_field_expr=(*this)._field_p->_method_build_expr(_85837_tokens);
	return _85917_l;
}



inline jule::Slice<jule::Ref<_11054f670_AssignLeft>> _110709a60_ScopeParser::_method_build_assign_ls(jule::Slice<jule::Slice<_1106ec050_Token>> _87138_parts) {
	jule::Slice<jule::Ref<_11054f670_AssignLeft>> _87217_lefts = nullptr;
	{
		auto __julec_range_expr = _87138_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Slice<_1106ec050_Token> _110709a60_part = *__julec_range_begin;
			_iter_begin_4601571472:;
			{
				jule::Ref<_11054f670_AssignLeft> _87421_l = (*this)._method_build_assign_l(_110709a60_part);
				_87217_lefts=jule::append(_87217_lefts,jule::Slice<jule::Ref<_11054f670_AssignLeft>>({_87421_l}));
			}
			_iter_next_4601571472:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110709a60_part = *__julec_range_begin; goto _iter_begin_4601571472; }
			_iter_end_4601571472:;
		}
	}
	return _87217_lefts;
}



inline std::tuple<jule::Ref<_11054f670_AssignSt>,jule::Bool> _110709a60_ScopeParser::_method_build_plain_assign(jule::Slice<_1106ec050_Token> _88141_tokens) {
	jule::Ref<_110711f30_AssignInfo> _88217_info = (*this)._method_build_assign_info(_88141_tokens);
	if ((!(_88217_info->_field_ok))) {
		return std::make_tuple(jule::new_ref<_11054f670_AssignSt>(),false);
	}
	jule::Ref<_11054f670_AssignSt> _88717_assign = jule::new_struct<_11054f670_AssignSt>(new( std::nothrow ) _11054f670_AssignSt(jule::Bool(),_88217_info->_field_setter,jule::Slice<jule::Ref<_11054f670_AssignLeft>>(),jule::Ref<_11054f670_Expr>()));
	jule::Slice<jule::Slice<_1106ec050_Token>> _89118_parts;
	jule::Slice<_127e05da0_Log> _89125_errs;
	std::tie(_89118_parts,_89125_errs) = _110754df0_parts(_88217_info->_field_l,8LLU,true);
	if (_89125_errs.len() > 0LL) {
		(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_89125_errs);
		return std::make_tuple(jule::new_ref<_11054f670_AssignSt>(),false);
	}
	_88717_assign->_field_left=(*this)._method_build_assign_ls(_89118_parts);
	if (_88217_info->_field_r != nullptr) {
		_88717_assign->_field_right=(*this)._field_p->_method_build_expr(_88217_info->_field_r);
	}
	return std::make_tuple(_88717_assign,true);
}



inline std::tuple<jule::Ref<_11054f670_AssignSt>,jule::Bool> _110709a60_ScopeParser::_method_build_decl_assign(jule::Slice<_1106ec050_Token> _90540_tokens) {
	if (_90540_tokens.len() < 1LL) {
		return std::make_tuple(jule::new_ref<_11054f670_AssignSt>(),false);
	}
	_90540_tokens=_90540_tokens.slice(1LL);
	_1106ec050_Token _91113_token = _90540_tokens[0LL];
	if ((_91113_token._field_id != 3LLU) || (_91113_token._field_kind != jule::Str("(", 1))) {
		return std::make_tuple(jule::new_ref<_11054f670_AssignSt>(),false);
	}
	jule::Ref<_11054f670_AssignSt> _91617_assign = jule::new_struct<_11054f670_AssignSt>(new( std::nothrow ) _11054f670_AssignSt(true,_1106ec050_Token(),jule::Slice<jule::Ref<_11054f670_AssignLeft>>(),jule::Ref<_11054f670_Expr>()));
	jule::Int _92017_i = 0LL;
	jule::Slice<_1106ec050_Token> _92117_rang = _110754df0_range(_92017_i,jule::Str("(", 1),jule::Str(")", 1),_90540_tokens);
	if (_92117_rang == nullptr) {
		(*this)._method_push_err(_91113_token,jule::Str("invalid syntax", 14));
		return std::make_tuple(jule::new_ref<_11054f670_AssignSt>(),false);
	} else if ((_92017_i + 1LL) < _90540_tokens.len()) {
		_91617_assign->_field_setter=_90540_tokens[static_cast<jule::Int>(_92017_i)];
		(_92017_i)++;
		_91617_assign->_field_right=(*this)._field_p->_method_build_expr(_90540_tokens.slice(static_cast<jule::Int>(_92017_i)));
	}
	jule::Slice<jule::Slice<_1106ec050_Token>> _93218_parts;
	jule::Slice<_127e05da0_Log> _93225_errs;
	std::tie(_93218_parts,_93225_errs) = _110754df0_parts(_92117_rang,8LLU,true);
	if (_93225_errs.len() > 0LL) {
		(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_93225_errs);
		return std::make_tuple(jule::new_ref<_11054f670_AssignSt>(),false);
	}
	{
		auto __julec_range_expr = _93218_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Slice<_1106ec050_Token> _110709a60_part = *__julec_range_begin;
			_iter_begin_4601612960:;
			{
				jule::Bool _93921_is_mut = false;
				jule::Bool _94021_is_ref = false;
				_1106ec050_Token _94217_token = _110709a60_part[0LL];
				if (_94217_token._field_id == 36LLU) {
					_93921_is_mut=true;
					_110709a60_part=_110709a60_part.slice(1LL);
					if (_110709a60_part.len() == 0LL) {
						(*this)._method_push_err(_94217_token,jule::Str("invalid syntax", 14));
						goto _iter_next_4601612960;
					}
				}
				if ((_110709a60_part[0LL]._field_id == 7LLU) && (_110709a60_part[0LL]._field_kind == jule::Str("&", 1))) {
					_94021_is_ref=true;
					_110709a60_part=_110709a60_part.slice(1LL);
					if (_110709a60_part.len() == 0LL) {
						(*this)._method_push_err(_94217_token,jule::Str("invalid syntax", 14));
						goto _iter_next_4601612960;
					}
				}
				if (((_110709a60_part[0LL]._field_id != 2LLU) && (_110709a60_part[0LL]._field_id != 3LLU)) && (_110709a60_part[0LL]._field_kind != jule::Str("(", 1))) {
					(*this)._method_push_err(_94217_token,jule::Str("invalid syntax", 14));
					goto _iter_next_4601612960;
				}
				jule::Ref<_11054f670_AssignLeft> _96821_l = (*this)._method_build_assign_l(_110709a60_part);
				_96821_l->_field_mutable=_93921_is_mut;
				_96821_l->_field_reference=_94021_is_ref;
				_91617_assign->_field_left=jule::append(_91617_assign->_field_left,jule::Slice<jule::Ref<_11054f670_AssignLeft>>({_96821_l}));
			}
			_iter_next_4601612960:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110709a60_part = *__julec_range_begin; goto _iter_begin_4601612960; }
			_iter_end_4601612960:;
		}
	}
	return std::make_tuple(_91617_assign,true);
}



inline std::tuple<jule::Ref<_11054f670_AssignSt>,jule::Bool> _110709a60_ScopeParser::_method_build_assign_st(jule::Slice<_1106ec050_Token> _97738_tokens) {
	jule::Bool _97772_ok = jule::Bool();
	jule::Ref<_11054f670_AssignSt> _97757_st = jule::Ref<_11054f670_AssignSt>();
	if ((!(_110711f30_check_assign_tokens(_97738_tokens)))) {
		_97757_st = jule::new_ref<_11054f670_AssignSt>();
		_97772_ok = false;
		return std::make_tuple(_97757_st,_97772_ok);
	}
	{
		auto _match_expr{ _97738_tokens[0LL]._field_id };
		if (!((34LLU) == _match_expr)) { goto _case_end_4601644176; }
		_case_begin_4601644176:;
		{
			std::tie(_97757_st,_97772_ok) = (*this)._method_build_decl_assign(_97738_tokens);
		}
		goto _match_end_4601641280;
		_case_end_4601644176:;
		_case_begin_4601640784:;
		{
			std::tie(_97757_st,_97772_ok) = (*this)._method_build_plain_assign(_97738_tokens);
		}
		goto _match_end_4601641280;
		_case_end_4601640784:;
		_match_end_4601641280:;
	}
	return std::make_tuple(_97757_st,_97772_ok);
}



inline jule::Any _110709a60_ScopeParser::_method_build_st(jule::Ref<_110709a60_Stmt> _99031_st) {
	_1106ec050_Token _99117_token = _99031_st->_field_tokens[0LL];
	if (_99117_token._field_id == 2LLU) {
		jule::Any _99322_s;
		jule::Bool _99325_ok;
		std::tie(_99322_s,_99325_ok) = (*this)._method_build_id_st(_99031_st->_field_tokens);
		if (_99325_ok) {
			return _99322_s;
		}
	}
	jule::Ref<_11054f670_AssignSt> _99918_s;
	jule::Bool _99921_ok;
	std::tie(_99918_s,_99921_ok) = (*this)._method_build_assign_st(_99031_st->_field_tokens);
	if (_99921_ok) {
		return jule::Any(_99918_s);
	}
	{
		auto _match_expr{ _99117_token._field_id };
		if (!((38LLU) == _match_expr || (9LLU) == _match_expr || (34LLU) == _match_expr || (36LLU) == _match_expr)) { goto _case_end_4601657520; }
		_case_begin_4601657520:;
		{
			return (*this)._method_build_var_st(_99031_st->_field_tokens);
		}
		goto _match_end_4601655616;
		_case_end_4601657520:;
		if (!((4LLU) == _match_expr)) { goto _case_end_4601658688; }
		_case_begin_4601658688:;
		{
			return (*this)._method_build_ret_st(_99031_st->_field_tokens);
		}
		goto _match_end_4601655616;
		_case_end_4601658688:;
		if (!((12LLU) == _match_expr)) { goto _case_end_4601658928; }
		_case_begin_4601658928:;
		{
			return (*this)._method_buid_iter_st(_99031_st);
		}
		goto _match_end_4601655616;
		_case_end_4601658928:;
		if (!((13LLU) == _match_expr)) { goto _case_end_4601654400; }
		_case_begin_4601654400:;
		{
			return (*this)._method_build_break_st(_99031_st->_field_tokens);
		}
		goto _match_end_4601655616;
		_case_end_4601654400:;
		if (!((14LLU) == _match_expr)) { goto _case_end_4601654512; }
		_case_begin_4601654512:;
		{
			return (*this)._method_build_cont_st(_99031_st->_field_tokens);
		}
		goto _match_end_4601655616;
		_case_end_4601654512:;
		if (!((16LLU) == _match_expr)) { goto _case_end_4601654624; }
		_case_begin_4601654624:;
		{
			return (*this)._method_build_if_else_chain(_99031_st->_field_tokens);
		}
		goto _match_end_4601655616;
		_case_end_4601654624:;
		if (!((18LLU) == _match_expr)) { goto _case_end_4601656320; }
		_case_begin_4601656320:;
		{
			return (*this)._method_build_comment_st(_99117_token);
		}
		goto _match_end_4601655616;
		_case_end_4601656320:;
		if (!((26LLU) == _match_expr)) { goto _case_end_4601656432; }
		_case_begin_4601656432:;
		{
			return (*this)._method_build_co_call_st(_99031_st->_field_tokens);
		}
		goto _match_end_4601655616;
		_case_end_4601656432:;
		if (!((22LLU) == _match_expr)) { goto _case_end_4601656544; }
		_case_begin_4601656544:;
		{
			return (*this)._method_build_goto_st(_99031_st->_field_tokens);
		}
		goto _match_end_4601655616;
		_case_end_4601656544:;
		if (!((32LLU) == _match_expr)) { goto _case_end_4601656656; }
		_case_begin_4601656656:;
		{
			return (*this)._method_build_fall_st(_99031_st->_field_tokens);
		}
		goto _match_end_4601655616;
		_case_end_4601656656:;
		if (!((10LLU) == _match_expr)) { goto _case_end_4601659152; }
		_case_begin_4601659152:;
		{
			return (*this)._method_build_type_alias_st(_99031_st->_field_tokens);
		}
		goto _match_end_4601655616;
		_case_end_4601659152:;
		if (!((27LLU) == _match_expr)) { goto _case_end_4601659264; }
		_case_begin_4601659264:;
		{
			return jule::Any((*this)._method_build_match_case(_99031_st->_field_tokens));
		}
		goto _match_end_4601655616;
		_case_end_4601659264:;
		if (!((35LLU) == _match_expr || (37LLU) == _match_expr)) { goto _case_end_4601659376; }
		_case_begin_4601659376:;
		{
			return jule::Any((*this)._method_build_scope_st(_99031_st->_field_tokens));
		}
		goto _match_end_4601655616;
		_case_end_4601659376:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4601659488; }
		_case_begin_4601659488:;
		{
			if (_99117_token._field_kind == jule::Str("{", 1)) {
				return jule::Any((*this)._method_build_scope_st(_99031_st->_field_tokens));
			}
		}
		goto _match_end_4601655616;
		_case_end_4601659488:;
		_case_begin_4601655088:;
		{
			if (_11070bfb0_is_fn_call(_99031_st->_field_tokens) != nullptr) {
				return (*this)._method_build_call_st(_99031_st->_field_tokens);
			}
		}
		goto _match_end_4601655616;
		_case_end_4601655088:;
		_match_end_4601655616:;
	}
	(*this)._method_push_err(_99117_token,jule::Str("invalid syntax", 14));
	return jule::Any(nullptr);
}



inline void _110709a60_ScopeParser::_method_build(jule::Slice<_1106ec050_Token> _106628_tokens,jule::Ref<_11054f670_ScopeTree> _106649_s) {
	if ((!(jule::real(_106649_s)))) {
		return;
	}
	(*this)._field_stms=_110709a60_split_stms(_106628_tokens);
	(*this)._field_pos=-1LL;
	(*this)._field_s=_106649_s;
	_iter_begin_4601681168:;
	if (!((!((*this)._method_is_last_st())) && (!((*this)._method_finished())))) { goto _iter_end_4601681168; }
	{
		jule::Ref<_110709a60_Stmt> _107521_st = (*this)._method_next();
		jule::Any _107621_data = (*this)._method_build_st(_107521_st);
		if (_107621_data != nullptr) {
			(*this)._field_s->_field_stmts=jule::append((*this)._field_s->_field_stmts,jule::Slice<jule::Any>({_107621_data}));
		}
		if ((*this)._method_stopped()) {
			goto _iter_end_4601681168;
		}
	}
	_iter_next_4601681168:;
	goto _iter_begin_4601681168;
	_iter_end_4601681168:;
}







std::ostream &operator<<(std::ostream &_Stream, const _110709a60_ScopeParser &_Src) {
	_Stream << "ScopeParser{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stms:" << _Src._field_stms << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11070bfb0_CallData &_Src) {
	_Stream << "CallData{";
	_Stream << "expr_tokens:" << _Src._field_expr_tokens << ", ";
	_Stream << "args_tokens:" << _Src._field_args_tokens << ", ";
	_Stream << "generics_tokens:" << _Src._field_generics_tokens;
	_Stream << "}";
	return _Stream;
}



inline void _11070bfb0_Precedencer::_method_set(jule::Int _15522_level,jule::Any _15534_expr) {
	{
		auto __julec_range_expr = (*this)._field_pairs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			jule::Slice<jule::Any> _11070bfb0_pair = *__julec_range_begin;
			_iter_begin_4601690880:;
			{
				jule::Int _15717_pair_level = _11070bfb0_pair[0LL].operator jule::Int();
				if (_15522_level > _15717_pair_level) {
					jule::Slice<jule::Slice<jule::Any>> _15925_first = (*this)._field_pairs.slice(0LL,static_cast<jule::Int>(_11070bfb0_i));
					jule::Slice<jule::Slice<jule::Any>> _16025_buffer = jule::Slice<jule::Slice<jule::Any>>({jule::Slice<jule::Any>({jule::Any(_15522_level),_15534_expr})});
					jule::Slice<jule::Slice<jule::Any>> _16125_appended = jule::append(_16025_buffer,(*this)._field_pairs.slice(static_cast<jule::Int>(_11070bfb0_i)));
					(*this)._field_pairs=jule::append(_15925_first,_16125_appended);
					return;
				}
			}
			_iter_next_4601690880:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_pair = *__julec_range_begin; goto _iter_begin_4601690880; }
			_iter_end_4601690880:;
		}
	}
	(*this)._field_pairs=jule::append((*this)._field_pairs,jule::Slice<jule::Slice<jule::Any>>({jule::Slice<jule::Any>({jule::Any(_15522_level),_15534_expr})}));
}



inline jule::Any _11070bfb0_Precedencer::_method_get_lower(void) {
	jule::I64 _17017_i = (*this)._field_pairs.len() - 1LL;
	_iter_begin_4601699840:;
	if (!(_17017_i >= 0LL)) { goto _iter_end_4601699840; }
	{
		jule::Any _17221_data = (*this)._field_pairs[static_cast<jule::Int>(_17017_i)][1LL];
		if (_17221_data != nullptr) {
			return _17221_data;
		}
	}
	_iter_next_4601699840:;
	(_17017_i)--;
	goto _iter_begin_4601699840;
	_iter_end_4601699840:;
	return jule::Any(nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _11070bfb0_Precedencer &_Src) {
	_Stream << "Precedencer{";
	_Stream << "pairs:" << _Src._field_pairs;
	_Stream << "}";
	return _Stream;
}



inline void _11070bfb0_ExprBuilder::_method_push_err(_1106ec050_Token _28727_token,jule::Str _28741_fmt,jule::Slice<jule::Any> _28754_args) {
	(*this)._field_p->_method_push_err(_28727_token,_28741_fmt,_28754_args);
}



inline void _11070bfb0_ExprBuilder::_method_push_suggestion(jule::Str _29234_fmt,jule::Slice<jule::Any> _29247_args) {
	(*this)._field_p->_method_push_suggestion(_29234_fmt,_29247_args);
}



inline jule::Ref<_11054f670_TupleExpr> _11070bfb0_ExprBuilder::_method_build_tuple(jule::Slice<jule::Slice<_1106ec050_Token>> _29634_parts) {
	jule::Ref<_11054f670_TupleExpr> _29717_tuple = jule::new_struct<_11054f670_TupleExpr>(new( std::nothrow ) _11054f670_TupleExpr(jule::Slice<jule::Ref<_11054f670_Expr>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_29634_parts.len())))));
	{
		auto __julec_range_expr = _29634_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			jule::Slice<_1106ec050_Token> _11070bfb0_part = *__julec_range_begin;
			_iter_begin_4601742256:;
			{
				_29717_tuple->_field_expr[static_cast<jule::Int>(_11070bfb0_i)]=(*this)._method_build_from_tokens(_11070bfb0_part);
			}
			_iter_next_4601742256:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_part = *__julec_range_begin; goto _iter_begin_4601742256; }
			_iter_end_4601742256:;
		}
	}
	return _29717_tuple;
}



inline jule::Ref<_11054f670_LitExpr> _11070bfb0_ExprBuilder::_method_build_lit(_1106ec050_Token _30628_token) {
	return jule::new_struct<_11054f670_LitExpr>(new( std::nothrow ) _11054f670_LitExpr(_30628_token,_30628_token._field_kind));
}



inline jule::Ref<_11054f670_TypeDecl> _11070bfb0_ExprBuilder::_method_build_primitive_type(_1106ec050_Token _31339_token) {
	return _110a15a10_build_prim_type(_31339_token);
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build_single(_1106ec050_Token _31735_token) {
	{
		auto _match_expr{ _31735_token._field_id };
		if (!((6LLU) == _match_expr)) { goto _case_end_4601757328; }
		_case_begin_4601757328:;
		{
			return jule::Any((*this)._method_build_lit(_31735_token));
		}
		goto _match_end_4601753584;
		_case_end_4601757328:;
		if (!((2LLU) == _match_expr || (28LLU) == _match_expr)) { goto _case_end_4601754544; }
		_case_begin_4601754544:;
		{
			return jule::Any(_11070bfb0_build_ident_expr(_31735_token));
		}
		goto _match_end_4601753584;
		_case_end_4601754544:;
		if (!((1LLU) == _match_expr)) { goto _case_end_4601754656; }
		_case_begin_4601754656:;
		{
			return jule::Any((*this)._method_build_primitive_type(_31735_token));
		}
		goto _match_end_4601753584;
		_case_end_4601754656:;
		_case_begin_4601754240:;
		{
			(*this)._method_push_err(_31735_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4601753584;
		_case_end_4601754240:;
		_match_end_4601753584:;
	}
}



inline jule::Ref<_11054f670_IdentExpr> _11070bfb0_ExprBuilder::_method_build_cpp_linked_ident(jule::Slice<_1106ec050_Token> _33545_tokens) {
	if (_33545_tokens[0LL]._field_id != 31LLU) {
		return jule::new_ref<_11054f670_IdentExpr>();
	} else if (_33545_tokens[1LL]._field_id != 20LLU) {
		(*this)._method_push_err(_33545_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("use dot (.) to access cpp-linked defines", 40),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_IdentExpr>();
	}
	_1106ec050_Token _34317_token = _33545_tokens[2LL];
	if (_34317_token._field_id != 2LLU) {
		(*this)._method_push_err(_33545_tokens[2LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_IdentExpr>();
	}
	jule::Ref<_11054f670_IdentExpr> _34917_expr = _11070bfb0_build_ident_expr(_34317_token);
	_34917_expr->_field_cpp_linked=true;
	return _34917_expr;
}



inline jule::Ref<_11054f670_UnaryExpr> _11070bfb0_ExprBuilder::_method_build_unary(jule::Slice<_1106ec050_Token> _35434_tokens) {
	_1106ec050_Token _35517_op = _35434_tokens[0LL];
	if (_35434_tokens.len() == 1LL) {
		(*this)._method_push_err(_35517_op,jule::Str("missing expression for unary operator", 37),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_UnaryExpr>();
	} else if ((!(_1106ec050_is_unary_op(_35517_op._field_kind)))) {
		(*this)._method_push_err(_35517_op,jule::Str("invalid_operator_for_unary: @", 29),jule::Slice<jule::Any>({jule::Any(_35517_op._field_kind)}));
		return jule::new_ref<_11054f670_UnaryExpr>();
	}
	_35434_tokens=_35434_tokens.slice(1LL);
	return jule::new_struct<_11054f670_UnaryExpr>(new( std::nothrow ) _11054f670_UnaryExpr(_35517_op,(*this)._method_build(_35434_tokens)));
}



inline jule::Ref<_11054f670_SubIdentExpr> _11070bfb0_ExprBuilder::_method_build_obj_sub_ident(jule::Slice<_1106ec050_Token> _37542_tokens) {
	jule::I64 _37617_i = _37542_tokens.len() - 1LL;
	_1106ec050_Token _37717_ident_token = _37542_tokens[static_cast<jule::Int>(_37617_i)];
	(_37617_i)--;
	_37542_tokens=_37542_tokens.slice(0LL,static_cast<jule::Int>(_37617_i));
	if (_37542_tokens.len() == 0LL) {
		(*this)._method_push_err(_37717_ident_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_SubIdentExpr>();
	}
	return jule::new_struct<_11054f670_SubIdentExpr>(new( std::nothrow ) _11054f670_SubIdentExpr(jule::Bool(),(*this)._method_build(_37542_tokens),_37717_ident_token));
}



inline jule::Ref<_11054f670_NsSelectionExpr> _11070bfb0_ExprBuilder::_method_build_ns_sub_ident(jule::Slice<_1106ec050_Token> _39041_tokens) {
	jule::Ref<_11054f670_NsSelectionExpr> _39117_ns = jule::new_struct<_11054f670_NsSelectionExpr>(new( std::nothrow ) _11054f670_NsSelectionExpr());
	{
		auto __julec_range_expr = _39041_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			_1106ec050_Token _11070bfb0_token = *__julec_range_begin;
			_iter_begin_4601797808:;
			{
				if (jule::mod(_11070bfb0_i,2LL) == 0LL) {
					if (_11070bfb0_token._field_id != 2LLU) {
						(*this)._method_push_err(_11070bfb0_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
						(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
					}
					_39117_ns->_field_ns=jule::append(_39117_ns->_field_ns,jule::Slice<_1106ec050_Token>({_11070bfb0_token}));
				} else if (_11070bfb0_token._field_id != 23LLU) {
					(*this)._method_push_err(_11070bfb0_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
					(*this)._method_push_suggestion(jule::Str("expected double colon \"::\"", 26),jule::Slice<jule::Any>({}));
				}
			}
			_iter_next_4601797808:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_token = *__julec_range_begin; goto _iter_begin_4601797808; }
			_iter_end_4601797808:;
		}
	}
	_39117_ns->_field_ident=_39117_ns->_field_ns[static_cast<jule::Int>(_39117_ns->_field_ns.len() - 1LL)];
	_39117_ns->_field_ns=_39117_ns->_field_ns.slice(0LL,static_cast<jule::Int>(_39117_ns->_field_ns.len() - 1LL));
	return _39117_ns;
}



inline jule::Ref<_11054f670_TypeDecl> _11070bfb0_ExprBuilder::_method_build_type(jule::Slice<_1106ec050_Token> _40933_tokens) {
	jule::Int _41017_i = 0LL;
	jule::Ref<_11054f670_TypeDecl> _41118_t;
	jule::Bool _41121_ok;
	std::tie(_41118_t,_41121_ok) = (*this)._field_p->_method_build_type(_40933_tokens,(&(_41017_i)),false);
	if ((!(_41121_ok))) {
		(*this)._method_push_err(_40933_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_TypeDecl>();
	}
	if (_41017_i < _40933_tokens.len()) {
		(*this)._method_push_err(_40933_tokens[static_cast<jule::Int>(_41017_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	return _41118_t;
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build_sub_ident(jule::Slice<_1106ec050_Token> _42338_tokens) {
	jule::I64 _42413_i = _42338_tokens.len() - 2LL;
	_1106ec050_Token _42513_token = _42338_tokens[static_cast<jule::Int>(_42413_i)];
	{
		auto _match_expr{ _42513_token._field_id };
		if (!((20LLU) == _match_expr)) { goto _case_end_4601826928; }
		_case_begin_4601826928:;
		{
			return jule::Any((*this)._method_build_obj_sub_ident(_42338_tokens));
		}
		goto _match_end_4601825824;
		_case_end_4601826928:;
		if (!((23LLU) == _match_expr)) { goto _case_end_4601827040; }
		_case_begin_4601827040:;
		{
			return jule::Any((*this)._method_build_ns_sub_ident(_42338_tokens));
		}
		goto _match_end_4601825824;
		_case_end_4601827040:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4601827152; }
		_case_begin_4601827152:;
		{
			if (_42513_token._field_kind == jule::Str("]", 1)) {
				return jule::Any((*this)._method_build_type(_42338_tokens));
			}
		}
		goto _match_end_4601825824;
		_case_end_4601827152:;
		_match_end_4601825824:;
	}
	(*this)._method_push_err(_42513_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	return jule::Any(nullptr);
}



inline jule::Ref<_11054f670_VariadicExpr> _11070bfb0_ExprBuilder::_method_build_variadic(jule::Slice<_1106ec050_Token> _44437_tokens) {
	_1106ec050_Token _44517_token = _44437_tokens[static_cast<jule::Int>(_44437_tokens.len() - 1LL)];
	_44437_tokens=_44437_tokens.slice(0LL,static_cast<jule::Int>(_44437_tokens.len() - 1LL));
	return jule::new_struct<_11054f670_VariadicExpr>(new( std::nothrow ) _11054f670_VariadicExpr(_44517_token,(*this)._method_build(_44437_tokens)));
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build_op_right(jule::Slice<_1106ec050_Token> _45337_tokens) {
	_1106ec050_Token _45417_token = _45337_tokens[static_cast<jule::Int>(_45337_tokens.len() - 1LL)];
	{
		auto _match_expr{ _45417_token._field_kind };
		if (!((jule::Str("...", 3)) == _match_expr)) { goto _case_end_4601847520; }
		_case_begin_4601847520:;
		{
			return jule::Any((*this)._method_build_variadic(_45337_tokens));
		}
		goto _match_end_4601842304;
		_case_end_4601847520:;
		_case_begin_4601844400:;
		{
			(*this)._method_push_err(_45417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4601842304;
		_case_end_4601844400:;
		_match_end_4601842304:;
	}
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build_between_parentheses(jule::Slice<_1106ec050_Token> _46548_tokens) {
	_1106ec050_Token _46613_token = _46548_tokens[0LL];
	_46548_tokens=_46548_tokens.slice(1LL,static_cast<jule::Int>(_46548_tokens.len() - 1LL));
	if (_46548_tokens.len() == 0LL) {
		(*this)._method_push_err(_46613_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("empty parentheses are not valid expression, must include an expression in range", 79),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	return (*this)._method_build(_46548_tokens);
}



inline jule::Ref<_11054f670_CastExpr> _11070bfb0_ExprBuilder::_method_try_build_cast(jule::Slice<_1106ec050_Token> _47637_tokens) {
	jule::Int _47717_range_n = 0LL;
	{
		auto __julec_range_expr = _47637_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			_1106ec050_Token _11070bfb0_token = *__julec_range_begin;
			_iter_begin_4601860272:;
			{
				if (_11070bfb0_token._field_id == 3LLU) {
					{
						auto _match_expr{ _11070bfb0_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4601864592; }
						_case_begin_4601864592:;
						{
							(_47717_range_n)++;
							goto _iter_next_4601860272;
						}
						goto _match_end_4601863072;
						_case_end_4601864592:;
						_case_begin_4601863760:;
						{
							(_47717_range_n)--;
						}
						goto _match_end_4601863072;
						_case_end_4601863760:;
						_match_end_4601863072:;
					}
				}
				if (_47717_range_n > 0LL) {
					goto _iter_next_4601860272;
				} else if ((_11070bfb0_i + 1LL) == _47637_tokens.len()) {
					return jule::new_ref<_11054f670_CastExpr>();
				}
				jule::Slice<_1106ec050_Token> _49821_type_tokens = _47637_tokens.slice(0LL,static_cast<jule::Int>(_11070bfb0_i + 1LL));
				jule::Slice<_1106ec050_Token> _49921_expr_tokens = _47637_tokens.slice(static_cast<jule::Int>(_11070bfb0_i + 1LL));
				if (_49921_expr_tokens.len() == 0LL) {
					return jule::new_ref<_11054f670_CastExpr>();
				}
				_1106ec050_Token _50617_token = _49921_expr_tokens[0LL];
				if ((_50617_token._field_id != 3LLU) || (_50617_token._field_kind != jule::Str("(", 1))) {
					return jule::new_ref<_11054f670_CastExpr>();
				}
				jule::Ref<_11054f670_CastExpr> _51121_cast = jule::new_struct<_11054f670_CastExpr>(new( std::nothrow ) _11054f670_CastExpr());
				if (_49921_expr_tokens.len() == 2LL) {
					(*this)._method_push_err(_49921_expr_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
					(*this)._method_push_suggestion(jule::Str("give an expression for casting", 30),jule::Slice<jule::Any>({}));
				}
				if (_49821_type_tokens.len() == 2LL) {
					(*this)._method_push_err(_49821_type_tokens[0LL],jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
					(*this)._method_push_suggestion(jule::Str("type declaration expected for casting", 37),jule::Slice<jule::Any>({}));
				} else {
					_49821_type_tokens=_49821_type_tokens.slice(1LL,static_cast<jule::Int>(_49821_type_tokens.len() - 1LL));
					jule::Int _52525_type_index = 0LL;
					jule::Ref<_11054f670_TypeDecl> _52626_t;
					jule::Bool _52629_ok;
					std::tie(_52626_t,_52629_ok) = (*this)._field_p->_method_build_type(_49821_type_tokens,(&(_52525_type_index)),true);
					if (_52629_ok && (_52525_type_index < _49821_type_tokens.len())) {
						(*this)._method_push_err(_49821_type_tokens[static_cast<jule::Int>(_52525_type_index)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
					} else if ((!(_52629_ok))) {
						return _51121_cast;
					}
					_51121_cast->_field_kind=_52626_t;
					if (_49921_expr_tokens.len() > 2LL) {
						jule::Int _53629_i = 0LL;
						_110754df0_range(_53629_i,jule::Str("(", 1),jule::Str(")", 1),_49921_expr_tokens);
						if (_53629_i < _49921_expr_tokens.len()) {
							return jule::new_ref<_11054f670_CastExpr>();
						}
						_51121_cast->_field_expr=(*this)._method_build(_49921_expr_tokens.slice(0LL,static_cast<jule::Int>(_53629_i)));
					}
				}
				return _51121_cast;
			}
			_iter_next_4601860272:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_token = *__julec_range_begin; goto _iter_begin_4601860272; }
			_iter_end_4601860272:;
		}
	}
	return jule::new_ref<_11054f670_CastExpr>();
}



inline void _11070bfb0_ExprBuilder::_method_push_arg(jule::Slice<jule::Ref<_11054f670_Expr>>& _55032_args,jule::Slice<_1106ec050_Token> _55051_tokens,_1106ec050_Token _55068_err_token) {
	if (_55051_tokens.len() == 0LL) {
		(*this)._method_push_err(_55068_err_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>({}));
		return;
	}
	_55032_args=jule::append(_55032_args,jule::Slice<jule::Ref<_11054f670_Expr>>({(*this)._method_build_from_tokens(_55051_tokens)}));
}



inline jule::Slice<jule::Ref<_11054f670_Expr>> _11070bfb0_ExprBuilder::_method_build_args(jule::Slice<_1106ec050_Token> _55933_tokens) {
	if (_55933_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_11054f670_Expr>> _56517_args = nullptr;
	jule::Int _56617_last = 0LL;
	jule::Int _56717_range_n = 0LL;
	_55933_tokens=_55933_tokens.slice(1LL,static_cast<jule::Int>(_55933_tokens.len() - 1LL));
	{
		auto __julec_range_expr = _55933_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			_1106ec050_Token _11070bfb0_token = *__julec_range_begin;
			_iter_begin_4601911584:;
			{
				if (_11070bfb0_token._field_id == 3LLU) {
					{
						auto _match_expr{ _11070bfb0_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4601917264; }
						_case_begin_4601917264:;
						{
							(_56717_range_n)++;
						}
						goto _match_end_4601915744;
						_case_end_4601917264:;
						_case_begin_4601916432:;
						{
							(_56717_range_n)--;
						}
						goto _match_end_4601915744;
						_case_end_4601916432:;
						_match_end_4601915744:;
					}
				}
				if ((_56717_range_n > 0LL) || (_11070bfb0_token._field_id != 8LLU)) {
					goto _iter_next_4601911584;
				}
				(*this)._method_push_arg(_56517_args,_55933_tokens.slice(static_cast<jule::Int>(_56617_last),static_cast<jule::Int>(_11070bfb0_i)),_11070bfb0_token);
				_56617_last=static_cast<jule::Int>(_11070bfb0_i + 1LL);
			}
			_iter_next_4601911584:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_token = *__julec_range_begin; goto _iter_begin_4601911584; }
			_iter_end_4601911584:;
		}
	}
	if (_56617_last < _55933_tokens.len()) {
		if (_56617_last == 0LL) {
			if (_55933_tokens.len() > 0LL) {
				(*this)._method_push_arg(_56517_args,_55933_tokens.slice(static_cast<jule::Int>(_56617_last)),_55933_tokens[static_cast<jule::Int>(_56617_last)]);
			}
		} else {
			(*this)._method_push_arg(_56517_args,_55933_tokens.slice(static_cast<jule::Int>(_56617_last)),_55933_tokens[static_cast<jule::Int>(_56617_last - 1LL)]);
		}
	}
	return _56517_args;
}



inline jule::Slice<jule::Ref<_11054f670_TypeDecl>> _11070bfb0_ExprBuilder::_method_build_call_generics(jule::Slice<_1106ec050_Token> _60242_tokens) {
	if (_60242_tokens.len() == 0LL) {
		return nullptr;
	}
	_60242_tokens=_60242_tokens.slice(1LL,static_cast<jule::Int>(_60242_tokens.len() - 1LL));
	jule::Slice<jule::Slice<_1106ec050_Token>> _60818_parts;
	jule::Slice<_127e05da0_Log> _60825_errs;
	std::tie(_60818_parts,_60825_errs) = _110754df0_parts(_60242_tokens,8LLU,true);
	jule::Slice<jule::Ref<_11054f670_TypeDecl>> _60917_generics = jule::Slice<jule::Ref<_11054f670_TypeDecl>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_60818_parts.len())));
	(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_60825_errs);
	{
		auto __julec_range_expr = _60818_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			jule::Slice<_1106ec050_Token> _11070bfb0_part = *__julec_range_begin;
			_iter_begin_4601938512:;
			{
				if (_11070bfb0_part.len() == 0LL) {
					goto _iter_next_4601938512;
				}
				jule::Int _61521_j = 0LL;
				jule::Ref<_11054f670_TypeDecl> _61622_generic;
				std::tie(_61622_generic,std::ignore) = (*this)._field_p->_method_build_type(_11070bfb0_part,(&(_61521_j)),true);
				if (_61521_j < _11070bfb0_part.len()) {
					(*this)._method_push_err(_11070bfb0_part[static_cast<jule::Int>(_61521_j)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				}
				_60917_generics[static_cast<jule::Int>(_11070bfb0_i)]=_61622_generic;
			}
			_iter_next_4601938512:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_part = *__julec_range_begin; goto _iter_begin_4601938512; }
			_iter_end_4601938512:;
		}
	}
	return _60917_generics;
}



inline jule::Ref<_11054f670_FnCallExpr> _11070bfb0_ExprBuilder::_method_build_fn_call(_1106ec050_Token _62636_token,jule::Ref<_11070bfb0_CallData> _62654_data) {
	return jule::new_struct<_11054f670_FnCallExpr>(new( std::nothrow ) _11054f670_FnCallExpr(_62636_token,(*this)._method_build_from_tokens(_62654_data->_field_expr_tokens),(*this)._method_build_call_generics(_62654_data->_field_generics_tokens),(*this)._method_build_args(_62654_data->_field_args_tokens),jule::Bool()));
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build_parentheses_range(jule::Slice<_1106ec050_Token> _63546_tokens) {
	_1106ec050_Token _63617_token = _63546_tokens[0LL];
	{
		auto _match_expr{ _63617_token._field_id };
		if (!((3LLU) == _match_expr)) { goto _case_end_4601959824; }
		_case_begin_4601959824:;
		{
			{
				auto _match_expr{ _63617_token._field_kind };
				if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4601961488; }
				_case_begin_4601961488:;
				{
					jule::Ref<_11054f670_CastExpr> _64125_expr = (*this)._method_try_build_cast(_63546_tokens);
					if (jule::real(_64125_expr)) {
						return jule::Any(_64125_expr);
					}
				}
				goto _match_end_4601960368;
				_case_end_4601961488:;
				_match_end_4601960368:;
			}
		}
		goto _match_end_4601958560;
		_case_end_4601959824:;
		_match_end_4601958560:;
	}
	jule::Ref<_11070bfb0_CallData> _64817_data = _11070bfb0_get_call_data(_63546_tokens);
	if (_64817_data->_field_expr_tokens.len() == 0LL) {
		return (*this)._method_build_between_parentheses(_64817_data->_field_args_tokens);
	}
	return jule::Any((*this)._method_build_fn_call(_63617_token,_64817_data));
}



inline jule::Ref<_11054f670_UnsafeExpr> _11070bfb0_ExprBuilder::_method_build_unsafe_expr(jule::Slice<_1106ec050_Token> _65940_tokens) {
	_1106ec050_Token _66017_token = _65940_tokens[0LL];
	_65940_tokens=_65940_tokens.slice(1LL);
	jule::Int _66217_i = 0LL;
	jule::Slice<_1106ec050_Token> _66317_range_tokens = _110754df0_range(_66217_i,jule::Str("{", 1),jule::Str("}", 1),_65940_tokens);
	if (_66317_range_tokens.len() == 0LL) {
		(*this)._method_push_err(_65940_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_UnsafeExpr>();
	}
	return jule::new_struct<_11054f670_UnsafeExpr>(new( std::nothrow ) _11054f670_UnsafeExpr(_66017_token,(*this)._method_build_from_tokens(_66317_range_tokens)->_field_kind));
}



inline jule::Ref<_11054f670_FnDecl> _11070bfb0_ExprBuilder::_method_build_anon_fn(jule::Slice<_1106ec050_Token> _67436_tokens) {
	jule::Ref<_11054f670_FnDecl> _67517_f = (*this)._field_p->_method_build_fn(_67436_tokens,false,false);
	if ((!(_67517_f->_method_is_anon()))) {
		(*this)._method_push_err(_67517_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("anonymous function expected, remove identifier of function", 58),jule::Slice<jule::Any>({}));
	}
	return _67517_f;
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build_unsafe(jule::Slice<_1106ec050_Token> _68335_tokens) {
	{
		auto _match_expr{ _68335_tokens[1LL]._field_id };
		if (!((33LLU) == _match_expr)) { goto _case_end_4601991456; }
		_case_begin_4601991456:;
		{
			return jule::Any((*this)._method_build_anon_fn(_68335_tokens));
		}
		goto _match_end_4601988992;
		_case_end_4601991456:;
		_case_begin_4601989936:;
		{
			return jule::Any((*this)._method_build_unsafe_expr(_68335_tokens));
		}
		goto _match_end_4601988992;
		_case_end_4601989936:;
		_match_end_4601988992:;
	}
}



inline void _11070bfb0_ExprBuilder::_method_push_range_lit_part(jule::Slice<_1106ec050_Token> _69442_part,_1106ec050_Token _6959_error_token,jule::Slice<jule::Slice<_1106ec050_Token>>& _69534_parts) {
	if (_69442_part.len() == 0LL) {
		(*this)._method_push_err(_6959_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>({}));
		return;
	}
	_69534_parts=jule::append(_69534_parts,jule::Slice<jule::Slice<_1106ec050_Token>>({_69442_part}));
}



inline jule::Slice<jule::Slice<_1106ec050_Token>> _11070bfb0_ExprBuilder::_method_get_brace_range_lit_expr_parts(jule::Slice<_1106ec050_Token> _70553_tokens) {
	if (_70553_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_1106ec050_Token>> _71117_parts = nullptr;
	jule::Int _71317_last = 0LL;
	jule::Int _71417_range_n = 0LL;
	_70553_tokens=_70553_tokens.slice(1LL,static_cast<jule::Int>(_70553_tokens.len() - 1LL));
	{
		auto __julec_range_expr = _70553_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			_1106ec050_Token _11070bfb0_token = *__julec_range_begin;
			_iter_begin_4602007408:;
			{
				if (_11070bfb0_token._field_id == 3LLU) {
					{
						auto _match_expr{ _11070bfb0_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4602013088; }
						_case_begin_4602013088:;
						{
							(_71417_range_n)++;
						}
						goto _match_end_4602011568;
						_case_end_4602013088:;
						_case_begin_4602012256:;
						{
							(_71417_range_n)--;
						}
						goto _match_end_4602011568;
						_case_end_4602012256:;
						_match_end_4602011568:;
					}
				}
				if ((_71417_range_n > 0LL) || (_11070bfb0_token._field_id != 8LLU)) {
					goto _iter_next_4602007408;
				}
				(*this)._method_push_range_lit_part(_70553_tokens.slice(static_cast<jule::Int>(_71317_last),static_cast<jule::Int>(_11070bfb0_i)),_11070bfb0_token,_71117_parts);
				_71317_last=static_cast<jule::Int>(_11070bfb0_i + 1LL);
			}
			_iter_next_4602007408:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_token = *__julec_range_begin; goto _iter_begin_4602007408; }
			_iter_end_4602007408:;
		}
	}
	if (_71317_last < _70553_tokens.len()) {
		if (_71317_last == 0LL) {
			if (_70553_tokens.len() > 0LL) {
				(*this)._method_push_range_lit_part(_70553_tokens.slice(static_cast<jule::Int>(_71317_last)),_70553_tokens[static_cast<jule::Int>(_71317_last)],_71117_parts);
			}
		} else {
			(*this)._method_push_range_lit_part(_70553_tokens.slice(static_cast<jule::Int>(_71317_last)),_70553_tokens[static_cast<jule::Int>(_71317_last - 1LL)],_71117_parts);
		}
	}
	return _71117_parts;
}



inline jule::Ref<_11054f670_FieldExprPair> _11070bfb0_ExprBuilder::_method_build_field_expr_pair(jule::Slice<_1106ec050_Token> _74844_tokens) {
	jule::Ref<_11054f670_FieldExprPair> _74917_pair = jule::new_struct<_11054f670_FieldExprPair>(new( std::nothrow ) _11054f670_FieldExprPair(_74844_tokens[0LL],jule::Any()));
	_74844_tokens=_74844_tokens.slice(2LL);
	_74917_pair->_field_expr=(*this)._method_build_from_tokens(_74844_tokens)->_field_kind;
	return _74917_pair;
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build_struct_lit_expr(jule::Slice<_1106ec050_Token> _75744_tokens) {
	_1106ec050_Token _75813_token = _75744_tokens[0LL];
	if (_75813_token._field_id == 2LLU) {
		if (_75744_tokens.len() > 1LL) {
			_1106ec050_Token _76121_token = _75744_tokens[1LL];
			if (_76121_token._field_id == 11LLU) {
				return jule::Any((*this)._method_build_field_expr_pair(_75744_tokens));
			}
		}
	}
	return jule::Any((*this)._method_build_from_tokens(_75744_tokens));
}



inline jule::Slice<jule::Any> _11070bfb0_ExprBuilder::_method_build_struct_lit_exprs(jule::Slice<_1106ec050_Token> _77045_tokens) {
	jule::Slice<jule::Slice<_1106ec050_Token>> _77117_parts = (*this)._method_get_brace_range_lit_expr_parts(_77045_tokens);
	if (_77117_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Any> _77617_pairs = jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_77117_parts.len())));
	{
		auto __julec_range_expr = _77117_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			jule::Slice<_1106ec050_Token> _11070bfb0_part = *__julec_range_begin;
			_iter_begin_4602045616:;
			{
				_77617_pairs[static_cast<jule::Int>(_11070bfb0_i)]=(*this)._method_build_struct_lit_expr(_11070bfb0_part);
			}
			_iter_next_4602045616:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_part = *__julec_range_begin; goto _iter_begin_4602045616; }
			_iter_end_4602045616:;
		}
	}
	return _77617_pairs;
}



inline jule::Ref<_11054f670_StructLit> _11070bfb0_ExprBuilder::_method_build_typed_struct_literal(jule::Slice<_1106ec050_Token> _78349_tokens) {
	jule::Int _78417_i = 0LL;
	jule::Ref<_11054f670_TypeDecl> _78518_t;
	jule::Bool _78521_ok;
	std::tie(_78518_t,_78521_ok) = (*this)._field_p->_method_build_type(_78349_tokens,(&(_78417_i)),true);
	if ((!(_78521_ok))) {
		return jule::new_ref<_11054f670_StructLit>();
	} else if (_78417_i >= _78349_tokens.len()) {
		(*this)._method_push_err(_78349_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_StructLit>();
	}
	_78349_tokens=_78349_tokens.slice(static_cast<jule::Int>(_78417_i));
	_1106ec050_Token _79413_token = _78349_tokens[0LL];
	if ((_79413_token._field_id != 3LLU) || (_79413_token._field_kind != jule::Str("{", 1))) {
		(*this)._method_push_err(_79413_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_StructLit>();
	}
	return jule::new_struct<_11054f670_StructLit>(new( std::nothrow ) _11054f670_StructLit(_78518_t,(*this)._method_build_struct_lit_exprs(_78349_tokens)));
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build_brace_lit_part(jule::Slice<_1106ec050_Token> _80643_tokens) {
	jule::Slice<_1106ec050_Token> _80718_l;
	jule::Slice<_1106ec050_Token> _80725_r;
	std::tie(_80718_l,_80725_r) = _11070bfb0_split_colon(_80643_tokens);
	if (_80718_l != nullptr) {
		return jule::Any(jule::new_struct<_11054f670_KeyValPair>(new( std::nothrow ) _11054f670_KeyValPair((*this)._method_build_from_tokens(_80718_l)->_field_kind,(*this)._method_build_from_tokens(_80725_r)->_field_kind,_80643_tokens[static_cast<jule::Int>(_80718_l.len())])));
	}
	return jule::Any((*this)._method_build_from_tokens(_80643_tokens));
}



inline jule::Ref<_11054f670_BraceLit> _11070bfb0_ExprBuilder::_method_build_brace_lit(jule::Slice<_1106ec050_Token> _81938_tokens) {
	jule::Ref<_11054f670_BraceLit> _82017_lit = jule::new_struct<_11054f670_BraceLit>(new( std::nothrow ) _11054f670_BraceLit(_81938_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_1106ec050_Token>> _82417_parts = (*this)._method_get_brace_range_lit_expr_parts(_81938_tokens);
	if (_82417_parts == nullptr) {
		return _82017_lit;
	}
	_82017_lit->_field_exprs=jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_82417_parts.len())));
	{
		auto __julec_range_expr = _82417_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			jule::Slice<_1106ec050_Token> _11070bfb0_part = *__julec_range_begin;
			_iter_begin_4602078976:;
			{
				_82017_lit->_field_exprs[static_cast<jule::Int>(_11070bfb0_i)]=(*this)._method_build_brace_lit_part(_11070bfb0_part);
			}
			_iter_next_4602078976:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_part = *__julec_range_begin; goto _iter_begin_4602078976; }
			_iter_end_4602078976:;
		}
	}
	return _82017_lit;
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build_brace_range(jule::Slice<_1106ec050_Token> _83740_tokens) {
	jule::Slice<_1106ec050_Token> _83814_expr_tokens;
	jule::Int _83827_range_n;
	std::tie(_83814_expr_tokens,_83827_range_n) = _11070bfb0_get_range_expr_tokens(_83740_tokens);
	{
		if (!((_83814_expr_tokens.len() == 0LL))) { goto _case_end_4602087552; }
		_case_begin_4602087552:;
		{
			return jule::Any((*this)._method_build_brace_lit(_83740_tokens));
		}
		goto _match_end_4602087264;
		_case_end_4602087552:;
		if (!((_83827_range_n > 0LL))) { goto _case_end_4602087664; }
		_case_begin_4602087664:;
		{
			(*this)._method_push_err(_83740_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4602087264;
		_case_end_4602087664:;
		_match_end_4602087264:;
	}
	{
		auto _match_expr{ _83814_expr_tokens[0LL]._field_id };
		if (!((35LLU) == _match_expr)) { goto _case_end_4602095088; }
		_case_begin_4602095088:;
		{
			return (*this)._method_build_unsafe(_83740_tokens);
		}
		goto _match_end_4602091728;
		_case_end_4602095088:;
		if (!((33LLU) == _match_expr)) { goto _case_end_4602094560; }
		_case_begin_4602094560:;
		{
			return jule::Any((*this)._method_build_anon_fn(_83740_tokens));
		}
		goto _match_end_4602091728;
		_case_end_4602094560:;
		if (!((2LLU) == _match_expr || (31LLU) == _match_expr)) { goto _case_end_4602094672; }
		_case_begin_4602094672:;
		{
			return jule::Any((*this)._method_build_typed_struct_literal(_83740_tokens));
		}
		goto _match_end_4602091728;
		_case_end_4602094672:;
		_case_begin_4602088320:;
		{
			(*this)._method_push_err(_83814_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4602091728;
		_case_end_4602088320:;
		_match_end_4602091728:;
	}
}



inline jule::Slice<jule::Slice<_1106ec050_Token>> _11070bfb0_ExprBuilder::_method_get_enumerable_parts(jule::Slice<_1106ec050_Token> _86743_tokens) {
	_86743_tokens=_86743_tokens.slice(1LL,static_cast<jule::Int>(_86743_tokens.len() - 1LL));
	jule::Slice<jule::Slice<_1106ec050_Token>> _86918_parts;
	jule::Slice<_127e05da0_Log> _86925_errors;
	std::tie(_86918_parts,_86925_errors) = _110754df0_parts(_86743_tokens,8LLU,true);
	(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_86925_errors);
	return _86918_parts;
}



inline jule::Ref<_11054f670_SliceExpr> _11070bfb0_ExprBuilder::_method_build_slice(jule::Slice<_1106ec050_Token> _87434_tokens) {
	jule::Ref<_11054f670_SliceExpr> _87517_slc = jule::new_struct<_11054f670_SliceExpr>(new( std::nothrow ) _11054f670_SliceExpr(_87434_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_1106ec050_Token>> _87917_parts = (*this)._method_get_enumerable_parts(_87434_tokens);
	if (_87917_parts.len() == 0LL) {
		return _87517_slc;
	}
	_87517_slc->_field_elems=jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_87917_parts.len())));
	{
		auto __julec_range_expr = _87917_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			jule::Slice<_1106ec050_Token> _11070bfb0_p = *__julec_range_begin;
			_iter_begin_4602111696:;
			{
				_87517_slc->_field_elems[static_cast<jule::Int>(_11070bfb0_i)]=(*this)._method_build_from_tokens(_11070bfb0_p)->_field_kind;
			}
			_iter_next_4602111696:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_p = *__julec_range_begin; goto _iter_begin_4602111696; }
			_iter_end_4602111696:;
		}
	}
	return _87517_slc;
}



inline jule::Ref<_11054f670_IndexingExpr> _11070bfb0_ExprBuilder::_method_build_indexing(jule::Slice<_1106ec050_Token> _89237_expr_tokens,jule::Slice<_1106ec050_Token> _89313_tokens,_1106ec050_Token _89334_error_token) {
	_89313_tokens=_89313_tokens.slice(1LL,static_cast<jule::Int>(_89313_tokens.len() - 1LL));
	return jule::new_struct<_11054f670_IndexingExpr>(new( std::nothrow ) _11054f670_IndexingExpr(_89334_error_token,(*this)._method_build_from_tokens(_89237_expr_tokens)->_field_kind,(*this)._method_build_from_tokens(_89313_tokens)->_field_kind));
}



inline jule::Ref<_11054f670_SlicingExpr> _11070bfb0_ExprBuilder::_method_build_slicing(jule::Slice<_1106ec050_Token> _90236_expr_tokens,jule::Slice<_1106ec050_Token> _90262_slicing_tokens,jule::Int _9039_colon,_1106ec050_Token _90321_error_token) {
	jule::Ref<_11054f670_SlicingExpr> _90417_slc = jule::new_struct<_11054f670_SlicingExpr>(new( std::nothrow ) _11054f670_SlicingExpr(_90321_error_token,(*this)._method_build_from_tokens(_90236_expr_tokens)->_field_kind,jule::Any(),jule::Any()));
	jule::Slice<_1106ec050_Token> _90917_start_expr_tokens = _90262_slicing_tokens.slice(0LL,static_cast<jule::Int>(_9039_colon));
	if (_90917_start_expr_tokens.len() > 0LL) {
		_90417_slc->_field_start=(*this)._method_build_from_tokens(_90917_start_expr_tokens)->_field_kind;
	}
	jule::Slice<_1106ec050_Token> _91417_to_expr_tokens = _90262_slicing_tokens.slice(static_cast<jule::Int>(_9039_colon + 1LL));
	if (_91417_to_expr_tokens.len() > 0LL) {
		_90417_slc->_field_to=(*this)._method_build_from_tokens(_91417_to_expr_tokens)->_field_kind;
	}
	return _90417_slc;
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build_bracket_range(jule::Slice<_1106ec050_Token> _92242_tokens) {
	_1106ec050_Token _92317_error_token = _92242_tokens[0LL];
	jule::Slice<_1106ec050_Token> _92418_expr_tokens;
	jule::Int _92431_range_n;
	std::tie(_92418_expr_tokens,_92431_range_n) = _11070bfb0_get_range_expr_tokens(_92242_tokens);
	{
		if (!((_92418_expr_tokens.len() == 0LL))) { goto _case_end_4602143648; }
		_case_begin_4602143648:;
		{
			return jule::Any((*this)._method_build_slice(_92242_tokens));
		}
		goto _match_end_4602143504;
		_case_end_4602143648:;
		if (!(((_92418_expr_tokens.len() == 0LL) || (_92431_range_n > 0LL)))) { goto _case_end_4602143776; }
		_case_begin_4602143776:;
		{
			(*this)._method_push_err(_92317_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4602143504;
		_case_end_4602143776:;
		_match_end_4602143504:;
	}
	_92242_tokens=_92242_tokens.slice(static_cast<jule::Int>(_92418_expr_tokens.len()));
	jule::Int _94317_i = 0LL;
	jule::Slice<_1106ec050_Token> _94418_slicing_tokens;
	jule::Int _94434_colon;
	std::tie(_94418_slicing_tokens,_94434_colon) = _110a15a10_split_map_range(_92242_tokens,_94317_i);
	if (_94434_colon != -1LL) {
		return jule::Any((*this)._method_build_slicing(_92418_expr_tokens,_94418_slicing_tokens,_94434_colon,_92317_error_token));
	}
	return jule::Any((*this)._method_build_indexing(_92418_expr_tokens,_92242_tokens,_92317_error_token));
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build_data(jule::Slice<_1106ec050_Token> _95133_tokens) {
	{
		auto _match_expr{ _95133_tokens.len() };
		if (!((0LL) == _match_expr)) { goto _case_end_4602156960; }
		_case_begin_4602156960:;
		{
			return jule::Any(nullptr);
		}
		goto _match_end_4602156208;
		_case_end_4602156960:;
		if (!((1LL) == _match_expr)) { goto _case_end_4602157072; }
		_case_begin_4602157072:;
		{
			return (*this)._method_build_single(_95133_tokens[0LL]);
		}
		goto _match_end_4602156208;
		_case_end_4602157072:;
		if (!((3LL) == _match_expr)) { goto _case_end_4602157184; }
		_case_begin_4602157184:;
		{
			if (_95133_tokens[0LL]._field_id == 31LLU) {
				return jule::Any((*this)._method_build_cpp_linked_ident(_95133_tokens));
			}
		}
		goto _match_end_4602156208;
		_case_end_4602157184:;
		_match_end_4602156208:;
	}
	_1106ec050_Token _96517_token = _95133_tokens[0LL];
	{
		auto _match_expr{ _96517_token._field_id };
		if (!((7LLU) == _match_expr)) { goto _case_end_4602158208; }
		_case_begin_4602158208:;
		{
			if ((_95133_tokens.len() > 1LL) && (_96517_token._field_kind == jule::Str("*", 1))) {
				_96517_token=_95133_tokens[1LL];
				if ((_96517_token._field_id == 1LLU) || (_96517_token._field_id == 35LLU)) {
					return jule::Any((*this)._method_build_type(_95133_tokens));
				}
			}
			return jule::Any((*this)._method_build_unary(_95133_tokens));
		}
		goto _match_end_4602157680;
		_case_end_4602158208:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4602162768; }
		_case_begin_4602162768:;
		{
			if ((_96517_token._field_kind != jule::Str("[", 1)) || (_95133_tokens.len() < 3LL)) {
				goto _match_end_4602157680;
			}
			_1106ec050_Token _98317_next = _95133_tokens[1LL];
			if ((_98317_next._field_id != 3LLU) || (_98317_next._field_kind != jule::Str("]", 1))) {
				goto _match_end_4602157680;
			}
			return jule::Any((*this)._method_build_type(_95133_tokens));
		}
		goto _match_end_4602157680;
		_case_end_4602162768:;
		_match_end_4602157680:;
	}
	_96517_token=_95133_tokens[static_cast<jule::Int>(_95133_tokens.len() - 1LL)];
	{
		auto _match_expr{ _96517_token._field_id };
		if (!((2LLU) == _match_expr)) { goto _case_end_4602174448; }
		_case_begin_4602174448:;
		{
			return (*this)._method_build_sub_ident(_95133_tokens);
		}
		goto _match_end_4602163680;
		_case_end_4602174448:;
		if (!((1LLU) == _match_expr)) { goto _case_end_4602174576; }
		_case_begin_4602174576:;
		{
			return jule::Any((*this)._method_build_type(_95133_tokens));
		}
		goto _match_end_4602163680;
		_case_end_4602174576:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4602174688; }
		_case_begin_4602174688:;
		{
			return (*this)._method_build_op_right(_95133_tokens);
		}
		goto _match_end_4602163680;
		_case_end_4602174688:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4602174800; }
		_case_begin_4602174800:;
		{
			{
				auto _match_expr{ _96517_token._field_kind };
				if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4602179168; }
				_case_begin_4602179168:;
				{
					return (*this)._method_build_parentheses_range(_95133_tokens);
				}
				goto _match_end_4602175552;
				_case_end_4602179168:;
				if (!((jule::Str("}", 1)) == _match_expr)) { goto _case_end_4602179280; }
				_case_begin_4602179280:;
				{
					return (*this)._method_build_brace_range(_95133_tokens);
				}
				goto _match_end_4602175552;
				_case_end_4602179280:;
				if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4602179392; }
				_case_begin_4602179392:;
				{
					return (*this)._method_build_bracket_range(_95133_tokens);
				}
				goto _match_end_4602175552;
				_case_end_4602179392:;
				_match_end_4602175552:;
			}
		}
		goto _match_end_4602163680;
		_case_end_4602174800:;
		_match_end_4602163680:;
	}
	(*this)._method_push_err(_95133_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	return jule::Any(nullptr);
}



inline jule::Ref<_11054f670_BinopExpr> _11070bfb0_ExprBuilder::_method_build_binop(jule::Slice<_1106ec050_Token> _102034_tokens,jule::Int _102051_i) {
	jule::Slice<_1106ec050_Token> _102117_left_tokens = _102034_tokens.slice(0LL,static_cast<jule::Int>(_102051_i));
	jule::Slice<_1106ec050_Token> _102217_right_tokens = _102034_tokens.slice(static_cast<jule::Int>(_102051_i + 1LL));
	if (_102117_left_tokens.len() == 0LL) {
		(*this)._method_push_err(_102034_tokens[static_cast<jule::Int>(_102051_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("left operand expected for binary operator", 41),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_BinopExpr>();
	}
	if (_102217_right_tokens.len() == 0LL) {
		(*this)._method_push_err(_102034_tokens[static_cast<jule::Int>(_102051_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("right operand expected for binary operator", 42),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_BinopExpr>();
	}
	return jule::new_struct<_11054f670_BinopExpr>(new( std::nothrow ) _11054f670_BinopExpr((*this)._method_build(_102117_left_tokens),(*this)._method_build(_102217_right_tokens),_102034_tokens[static_cast<jule::Int>(_102051_i)]));
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build(jule::Slice<_1106ec050_Token> _104328_tokens) {
	jule::Int _104413_i = _11070bfb0_find_lowest_prec_op(_104328_tokens);
	if (_104413_i == -1LL) {
		return (*this)._method_build_data(_104328_tokens);
	}
	return jule::Any((*this)._method_build_binop(_104328_tokens,_104413_i));
}



inline jule::Any _11070bfb0_ExprBuilder::_method_build_kind(jule::Slice<_1106ec050_Token> _105133_tokens) {
	jule::Slice<jule::Slice<_1106ec050_Token>> _105218_parts;
	jule::Slice<_127e05da0_Log> _105225_errors;
	std::tie(_105218_parts,_105225_errors) = _110754df0_parts(_105133_tokens,8LLU,true);
	if (_105225_errors != nullptr) {
		(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_105225_errors);
		return jule::Any(nullptr);
	} else if (_105218_parts.len() > 1LL) {
		return jule::Any((*this)._method_build_tuple(_105218_parts));
	}
	return (*this)._method_build(_105133_tokens);
}



inline jule::Ref<_11054f670_Expr> _11070bfb0_ExprBuilder::_method_build_from_tokens(jule::Slice<_1106ec050_Token> _106240_tokens) {
	_106240_tokens=_11070bfb0_eliminate_comments(_106240_tokens);
	if (_106240_tokens.len() == 0LL) {
		return jule::new_ref<_11054f670_Expr>();
	}
	return jule::new_struct<_11054f670_Expr>(new( std::nothrow ) _11054f670_Expr(_106240_tokens[0LL],(*this)._method_build_kind(_106240_tokens)));
}







std::ostream &operator<<(std::ostream &_Stream, const _11070bfb0_ExprBuilder &_Src) {
	_Stream << "ExprBuilder{";
	_Stream << "p:" << _Src._field_p;
	_Stream << "}";
	return _Stream;
}



inline void _110754df0_Parser::_method_stop(void) {
	jule::drop((*this)._field_ast);
}



inline jule::Bool _110754df0_Parser::_method_stopped(void) {
	return (!(jule::real((*this)._field_ast)));
}



inline void _110754df0_Parser::_method_push_err(_1106ec050_Token _24527_token,jule::Str _24541_fmt,jule::Slice<jule::Any> _24554_args) {
	(*this)._field_errors=jule::append((*this)._field_errors,jule::Slice<_127e05da0_Log>({_110754df0_compiler_err(_24527_token,_24541_fmt,_24554_args)}));
}



inline void _110754df0_Parser::_method_push_suggestion(jule::Str _25034_fmt,jule::Slice<jule::Any> _25047_args) {
	{
		_110754df0_push_suggestion((&((*this)._field_errors[static_cast<jule::Int>((*this)._field_errors.len() - 1LL)])),_25034_fmt,_25047_args);
	}
}



inline jule::Ref<_11054f670_Expr> _110754df0_Parser::_method_build_expr(jule::Slice<_1106ec050_Token> _25434_tokens) {
	jule::Ref<_11070bfb0_ExprBuilder> _25517_ep = jule::new_struct<_11070bfb0_ExprBuilder>(new( std::nothrow ) _11070bfb0_ExprBuilder(this->self));
	jule::Ref<_11054f670_Expr> _25617_expr = _25517_ep->_method_build_from_tokens(_25434_tokens);
	return _25617_expr;
}



inline jule::Ref<_11054f670_Directive> _110754df0_Parser::_method_get_directive(jule::Ref<_11054f670_Comment> _26028_c) {
	if (_26028_c->_field_text.len() <= jule::Str("jule:", 5).len()) {
		return jule::new_ref<_11054f670_Directive>();
	}
	jule::Ref<_11054f670_Directive> _26517_d = jule::new_struct<_11054f670_Directive>(new( std::nothrow ) _11054f670_Directive(_26028_c->_field_token,jule::Str(),jule::Slice<jule::Str>()));
	jule::Str _26913_pragma = _26028_c->_field_token._field_kind.slice(static_cast<jule::Int>(jule::Str("jule:", 5).len()));
	jule::Slice<jule::Str> _27017_parts = _26913_pragma.split(jule::Str(" ", 1),-1LL);
	_26517_d->_field_tag=_27017_parts[0LL];
	_26517_d->_field_args=_27017_parts.slice(1LL);
	jule::Bool _27617_ok = false;
	{
		auto __julec_range_expr = _127e7c3f0_DIRECTIVES;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _110754df0_kind = *__julec_range_begin;
			_iter_begin_4602263664:;
			{
				if (_26517_d->_field_tag == _110754df0_kind) {
					_27617_ok=true;
					goto _iter_end_4602263664;
				}
			}
			_iter_next_4602263664:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110754df0_kind = *__julec_range_begin; goto _iter_begin_4602263664; }
			_iter_end_4602263664:;
		}
	}
	if ((!(_27617_ok))) {
		return jule::new_ref<_11054f670_Directive>();
	}
	return _26517_d;
}



inline void _110754df0_Parser::_method_push_directive(jule::Ref<_11054f670_Comment> _29033_c) {
	jule::Ref<_11054f670_Directive> _29117_d = (*this)._method_get_directive(_29033_c);
	if ((!(jule::real(_29117_d)))) {
		return;
	}
	{
		auto __julec_range_expr = (*this)._field_directives;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11054f670_Directive> _110754df0_pd = *__julec_range_begin;
			_iter_begin_4602270608:;
			{
				if (_29117_d->_field_tag == _110754df0_pd->_field_tag) {
					return;
				}
			}
			_iter_next_4602270608:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110754df0_pd = *__julec_range_begin; goto _iter_begin_4602270608; }
			_iter_end_4602270608:;
		}
	}
	(*this)._field_directives=jule::append((*this)._field_directives,jule::Slice<jule::Ref<_11054f670_Directive>>({_29117_d}));
}



inline void _110754df0_Parser::_method_process_comment(jule::Ref<_11054f670_Comment> _30638_c) {
	if (_30638_c->_method_is_directive()) {
		(*this)._method_push_directive(_30638_c);
		return;
	}
	if ((!(jule::real((*this)._field_comment_group)))) {
		(*this)._field_comment_group=jule::new_struct<_11054f670_CommentGroup>(new( std::nothrow ) _11054f670_CommentGroup());
	}
	(*this)._field_comment_group->_field_comments=jule::append((*this)._field_comment_group->_field_comments,jule::Slice<jule::Ref<_11054f670_Comment>>({_30638_c}));
}



inline jule::Ref<_11054f670_ScopeTree> _110754df0_Parser::_method_build_scope(jule::Slice<_1106ec050_Token> _31735_tokens) {
	jule::Ref<_11054f670_ScopeTree> _31817_s = _110709a60_new_scope();
	_110709a60_ScopeParser _31917_sp = _110709a60_ScopeParser(this->self,jule::Ref<_11054f670_ScopeTree>(),jule::Slice<jule::Ref<_110709a60_Stmt>>(),jule::Int());
	_31917_sp._method_build(_31735_tokens,_31817_s);
	return _31817_s;
}



inline std::tuple<jule::Ref<_11054f670_TypeDecl>,jule::Bool> _110754df0_Parser::_method___build_type(jule::Slice<_1106ec050_Token> _32643_tokens,jule::Int* _32713_i,jule::Bool _32722_err) {
	_110a15a10_TypeBuilder _32817_tb = _110a15a10_TypeBuilder(this->self,_32643_tokens,_32713_i,_32722_err);
	jule::Ref<_11054f670_TypeDecl> _33418_decl;
	jule::Bool _33424_ok;
	std::tie(_33418_decl,_33424_ok) = _32817_tb._method_build();
	return std::make_tuple(_33418_decl,_33424_ok);
}



inline std::tuple<jule::Ref<_11054f670_TypeDecl>,jule::Bool> _110754df0_Parser::_method_build_type(jule::Slice<_1106ec050_Token> _33941_tokens,jule::Int* _34013_i,jule::Bool _34022_err) {
	_1106ec050_Token _34113_token = _33941_tokens[static_cast<jule::Int>((*(_34013_i)))];
	jule::Ref<_11054f670_TypeDecl> _34218_t;
	jule::Bool _34221_ok;
	std::tie(_34218_t,_34221_ok) = this->self->_method___build_type(_33941_tokens,_34013_i,_34022_err);
	if (_34022_err && (!(_34221_ok))) {
		this->self->_method_push_err(_34113_token,jule::Str("invalid data-type", 17),jule::Slice<jule::Any>({}));
	}
	return std::make_tuple(_34218_t,_34221_ok);
}



inline jule::Ref<_11054f670_TypeAliasDecl> _110754df0_Parser::_method_build_type_alias_decl(jule::Slice<_1106ec050_Token> _34945_tokens) {
	jule::Int _35017_i = 1LL;
	if (_35017_i >= _34945_tokens.len()) {
		this->self->_method_push_err(_34945_tokens[static_cast<jule::Int>(_35017_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_TypeAliasDecl>();
	}
	jule::Ref<_11054f670_TypeAliasDecl> _35517_tad = jule::new_struct<_11054f670_TypeAliasDecl>(new( std::nothrow ) _11054f670_TypeAliasDecl(jule::Ref<_11054f670_ScopeTree>(),jule::Bool(),jule::Bool(),_34945_tokens[1LL],_34945_tokens[1LL]._field_kind,jule::Ref<_11054f670_TypeDecl>(),jule::Ref<_11054f670_CommentGroup>()));
	_1106ec050_Token _35917_token = _34945_tokens[static_cast<jule::Int>(_35017_i)];
	if (_35917_token._field_id != 2LLU) {
		this->self->_method_push_err(_35917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
	}
	(_35017_i)++;
	if (_35017_i >= _34945_tokens.len()) {
		this->self->_method_push_err(_34945_tokens[static_cast<jule::Int>(_35017_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return _35517_tad;
	}
	_35917_token=_34945_tokens[static_cast<jule::Int>(_35017_i)];
	if (_35917_token._field_id != 11LLU) {
		this->self->_method_push_err(_34945_tokens[static_cast<jule::Int>(_35017_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected colon \":\"", 18),jule::Slice<jule::Any>({}));
		return _35517_tad;
	}
	(_35017_i)++;
	if (_35017_i >= _34945_tokens.len()) {
		this->self->_method_push_err(_34945_tokens[static_cast<jule::Int>(_35017_i - 1LL)],jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
		return _35517_tad;
	}
	jule::Ref<_11054f670_TypeDecl> _38018_t;
	jule::Bool _38021_ok;
	std::tie(_38018_t,_38021_ok) = this->self->_method_build_type(_34945_tokens,(&(_35017_i)),true);
	_35517_tad->_field_kind=_38018_t;
	if (_38021_ok && (_35017_i < _34945_tokens.len())) {
		this->self->_method_push_err(_34945_tokens[static_cast<jule::Int>(_35017_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	return _35517_tad;
}



inline void _110754df0_Parser::_method_build_var_type_and_expr(jule::Ref<_11054f670_VarDecl> _38847_v,jule::Slice<_1106ec050_Token> _38864_tokens) {
	jule::Int _38917_i = 0LL;
	_1106ec050_Token _39017_tok = _38864_tokens[static_cast<jule::Int>(_38917_i)];
	if (_39017_tok._field_id == 11LLU) {
		(_38917_i)++;
		if ((_38917_i >= _38864_tokens.len()) || ((_38864_tokens[static_cast<jule::Int>(_38917_i)]._field_id == 7LLU) && (_38864_tokens[static_cast<jule::Int>(_38917_i)]._field_kind == jule::Str("=", 1)))) {
			this->self->_method_push_err(_39017_tok,jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
			return;
		}
		jule::Ref<_11054f670_TypeDecl> _39822_t;
		jule::Bool _39825_ok;
		std::tie(_39822_t,_39825_ok) = this->self->_method_build_type(_38864_tokens,(&(_38917_i)),true);
		if (_39825_ok) {
			_38847_v->_field_kind=_39822_t;
			if (_38917_i >= _38864_tokens.len()) {
				return;
			}
			_39017_tok=_38864_tokens[static_cast<jule::Int>(_38917_i)];
		}
	}
	if (_39017_tok._field_id == 7LLU) {
		if (_39017_tok._field_kind != jule::Str("=", 1)) {
			this->self->_method_push_err(_39017_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return;
		}
		jule::Slice<_1106ec050_Token> _41321_expr_tokens = _38864_tokens.slice(static_cast<jule::Int>(_38917_i + 1LL));
		if (_41321_expr_tokens.len() == 0LL) {
			this->self->_method_push_err(_39017_tok,jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
			return;
		}
		_38847_v->_field_expr=this->self->_method_build_expr(_41321_expr_tokens);
	} else {
		this->self->_method_push_err(_39017_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
}



inline void _110754df0_Parser::_method_build_var_common(jule::Ref<_11054f670_VarDecl> _42440_v,jule::Slice<_1106ec050_Token> _42457_tokens) {
	_42440_v->_field_token=_42457_tokens[0LL];
	if (_42440_v->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_42440_v->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return;
	}
	_42440_v->_field_ident=_42440_v->_field_token._field_kind;
	jule::drop(_42440_v->_field_kind);
	if (_42457_tokens.len() > 1LL) {
		_42457_tokens=_42457_tokens.slice(1LL);
		this->self->_method_build_var_type_and_expr(_42440_v,_42457_tokens);
	}
}



inline void _110754df0_Parser::_method_build_var_begin(jule::Ref<_11054f670_VarDecl> _43938_v,jule::Ref<jule::Int> _43955_i,jule::Slice<_1106ec050_Token> _43964_tokens) {
	_1106ec050_Token _44013_tok = _43964_tokens[static_cast<jule::Int>(_43955_i)];
	{
		auto _match_expr{ _44013_tok._field_id };
		if (!((38LLU) == _match_expr)) { goto _case_end_4602386464; }
		_case_begin_4602386464:;
		{
			_43938_v->_field_statically=true;
			goto _case_begin_4602386576;
		}
		goto _match_end_4602382608;
		_case_end_4602386464:;
		if (!((34LLU) == _match_expr)) { goto _case_end_4602386576; }
		_case_begin_4602386576:;
		{
			(_43955_i)++;
			if (_43955_i >= _43964_tokens.len()) {
				(*this)._method_push_err(_44013_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			if (_43964_tokens[static_cast<jule::Int>(_43955_i)]._field_id == 36LLU) {
				_43938_v->_field_mutable=true;
				(_43955_i)++;
			}
		}
		goto _match_end_4602382608;
		_case_end_4602386576:;
		if (!((9LLU) == _match_expr)) { goto _case_end_4602384432; }
		_case_begin_4602384432:;
		{
			(_43955_i)++;
			_43938_v->_field_constant=true;
		}
		goto _match_end_4602382608;
		_case_end_4602384432:;
		_case_begin_4602384128:;
		{
			(*this)._method_push_err(_44013_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4602382608;
		_case_end_4602384128:;
		_match_end_4602382608:;
	}
	if (_43955_i >= _43964_tokens.len()) {
		(*this)._method_push_err(_44013_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
}



inline jule::Ref<_11054f670_VarDecl> _110754df0_Parser::_method_build_var(jule::Slice<_1106ec050_Token> _47333_tokens) {
	jule::Ref<jule::Int> _47417_i = jule::new_ref<jule::Int>(0LL);
	jule::Ref<_11054f670_VarDecl> _47517_v = jule::new_struct<_11054f670_VarDecl>(new( std::nothrow ) _11054f670_VarDecl(jule::Ref<_11054f670_ScopeTree>(),_47333_tokens[static_cast<jule::Int>(_47417_i)],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ref<_11054f670_Directive>>(),jule::Ref<_11054f670_CommentGroup>(),jule::Ref<_11054f670_TypeDecl>(),jule::Ref<_11054f670_Expr>()));
	this->self->_method_build_var_begin(_47517_v,_47417_i,_47333_tokens);
	if (_47417_i >= _47333_tokens.len()) {
		return jule::new_ref<_11054f670_VarDecl>();
	}
	_47333_tokens=_47333_tokens.slice(static_cast<jule::Int>(_47417_i));
	if ((_47333_tokens[0LL]._field_id == 7LLU) && (_47333_tokens[0LL]._field_kind == jule::Str("&", 1))) {
		_47517_v->_field_reference=true;
		if (_47333_tokens.len() == 1LL) {
			return jule::new_ref<_11054f670_VarDecl>();
		}
		_47333_tokens=_47333_tokens.slice(1LL);
	}
	this->self->_method_build_var_common(_47517_v,_47333_tokens);
	return _47517_v;
}



inline jule::Ref<_11054f670_GenericDecl> _110754df0_Parser::_method_build_generic(jule::Slice<_1106ec050_Token> _49536_tokens) {
	if (_49536_tokens.len() > 1LL) {
		(*this)._method_push_err(_49536_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_11054f670_GenericDecl> _49917_g = jule::new_struct<_11054f670_GenericDecl>(new( std::nothrow ) _11054f670_GenericDecl(_49536_tokens[0LL],jule::Str()));
	if (_49917_g->_field_token._field_id != 2LLU) {
		(*this)._method_push_err(_49917_g->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
	}
	_49917_g->_field_ident=_49917_g->_field_token._field_kind;
	return _49917_g;
}



inline jule::Slice<jule::Ref<_11054f670_GenericDecl>> _110754df0_Parser::_method_build_generics(jule::Slice<_1106ec050_Token> _51037_tokens,_1106ec050_Token _51054_error_token) {
	if (_51037_tokens.len() == 0LL) {
		(*this)._method_push_err(_51054_error_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
		return nullptr;
	}
	jule::Slice<jule::Slice<_1106ec050_Token>> _51618_parts;
	jule::Slice<_127e05da0_Log> _51625_errors;
	std::tie(_51618_parts,_51625_errors) = _110754df0_parts(_51037_tokens,8LLU,true);
	(*this)._field_errors=jule::append((*this)._field_errors,_51625_errors);
	jule::Slice<jule::Ref<_11054f670_GenericDecl>> _51917_generics = jule::Slice<jule::Ref<_11054f670_GenericDecl>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_51618_parts.len())));
	{
		auto __julec_range_expr = _51618_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110754df0_i = 0;
			jule::Slice<_1106ec050_Token> _110754df0_part = *__julec_range_begin;
			_iter_begin_4602425040:;
			{
				if (_51618_parts.len() > 0LL) {
					_51917_generics[static_cast<jule::Int>(_110754df0_i)]=(*this)._method_build_generic(_110754df0_part);
				}
			}
			_iter_next_4602425040:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110754df0_i; _110754df0_part = *__julec_range_begin; goto _iter_begin_4602425040; }
			_iter_end_4602425040:;
		}
	}
	return _51917_generics;
}



inline jule::Ref<_11054f670_ParamDecl> _110754df0_Parser::_method_build_self_param(jule::Slice<_1106ec050_Token> _52939_tokens) {
	if (_52939_tokens.len() == 0LL) {
		return jule::new_ref<_11054f670_ParamDecl>();
	}
	jule::Ref<_11054f670_ParamDecl> _53417_param = jule::new_struct<_11054f670_ParamDecl>(new( std::nothrow ) _11054f670_ParamDecl());
	jule::Int _53717_i = 0LL;
	if (_52939_tokens[static_cast<jule::Int>(_53717_i)]._field_id == 36LLU) {
		_53417_param->_field_mutable=true;
		(_53717_i)++;
		if (_53717_i >= _52939_tokens.len()) {
			(*this)._method_push_err(_52939_tokens[static_cast<jule::Int>(_53717_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_11054f670_ParamDecl>();
		}
	}
	if (_52939_tokens[static_cast<jule::Int>(_53717_i)]._field_kind == jule::Str("&", 1)) {
		_53417_param->_field_ident=jule::Str("&", 1);
		(_53717_i)++;
		if (_53717_i >= _52939_tokens.len()) {
			(*this)._method_push_err(_52939_tokens[static_cast<jule::Int>(_53717_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_11054f670_ParamDecl>();
		}
	}
	if (_52939_tokens[static_cast<jule::Int>(_53717_i)]._field_id == 28LLU) {
		_53417_param->_field_ident+=jule::Str("self", 4);
		_53417_param->_field_token=_52939_tokens[static_cast<jule::Int>(_53717_i)];
		(_53717_i)++;
		if (_53717_i < _52939_tokens.len()) {
			(*this)._method_push_err(_52939_tokens[static_cast<jule::Int>(_53717_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
	}
	return _53417_param;
}



inline void _110754df0_Parser::_method_param_type_begin(jule::Ref<_11054f670_ParamDecl> _56839_param,jule::Int& _56863_i,jule::Slice<_1106ec050_Token> _56871_tokens) {
	_iter_begin_4602455888:;
	if (!(_56863_i < _56871_tokens.len())) { goto _iter_end_4602455888; }
	{
		_1106ec050_Token _57017_token = _56871_tokens[static_cast<jule::Int>(_56863_i)];
		if (_57017_token._field_id != 7LLU) {
			return;
		} else if (_57017_token._field_kind != jule::Str("...", 3)) {
			return;
		}
		if (_56839_param->_field_variadic) {
			(*this)._method_push_err(_57017_token,jule::Str("define is already variadic", 26),jule::Slice<jule::Any>({}));
			goto _iter_next_4602455888;
		}
		_56839_param->_field_variadic=true;
	}
	_iter_next_4602455888:;
	(_56863_i)++;
	goto _iter_begin_4602455888;
	_iter_end_4602455888:;
}



inline void _110754df0_Parser::_method_build_param_type(jule::Ref<_11054f670_ParamDecl> _58540_param,jule::Slice<_1106ec050_Token> _58563_tokens,jule::Bool _58580_must_pure) {
	jule::Int _58617_i = 0LL;
	if ((!(_58580_must_pure))) {
		this->self->_method_param_type_begin(_58540_param,_58617_i,_58563_tokens);
		if (_58617_i >= _58563_tokens.len()) {
			return;
		}
	}
	std::tie(_58540_param->_field_kind,std::ignore) = this->self->_method_build_type(_58563_tokens,(&(_58617_i)),true);
	if (_58617_i < _58563_tokens.len()) {
		this->self->_method_push_err(_58563_tokens[static_cast<jule::Int>(_58617_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
}



inline void _110754df0_Parser::_method_param_body_id(jule::Ref<_11054f670_ParamDecl> _59932_param,_1106ec050_Token _59951_token) {
	if (_1106ec050_is_ignore_ident(_59951_token._field_kind)) {
		_59932_param->_field_ident=jule::Str("<anonymous>", 11);
		return;
	}
	_59932_param->_field_ident=_59951_token._field_kind;
}



inline void _110754df0_Parser::_method_build_param_body(jule::Ref<_11054f670_ParamDecl> _60740_param,jule::Ref<jule::Int> _60763_i,jule::Slice<_1106ec050_Token> _60776_tokens,jule::Bool _60793_must_pure) {
	this->self->_method_param_body_id(_60740_param,_60776_tokens[static_cast<jule::Int>(_60763_i)]);
	_1106ec050_Token _60917_tok = _60776_tokens[static_cast<jule::Int>(_60763_i)];
	if ((_60763_i + 1LL) >= _60776_tokens.len()) {
		return;
	} else if (((_60776_tokens.len() - _60763_i) - 1LL) < 2LL) {
		this->self->_method_push_err(_60917_tok,jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
		return;
	}
	_60917_tok=_60776_tokens[static_cast<jule::Int>(_60763_i + 1LL)];
	if (_60917_tok._field_id != 11LLU) {
		this->self->_method_build_param_type(_60740_param,_60776_tokens,_60793_must_pure);
		return;
	}
	_60776_tokens=_60776_tokens.slice(static_cast<jule::Int>(_60763_i + 2LL));
	this->self->_method_build_param_type(_60740_param,_60776_tokens,_60793_must_pure);
}



inline jule::Ref<_11054f670_ParamDecl> _110754df0_Parser::_method_build_param(jule::Slice<_1106ec050_Token> _62835_tokens,jule::Bool _62852_must_pure) {
	jule::Ref<_11054f670_ParamDecl> _62917_param = jule::new_struct<_11054f670_ParamDecl>(new( std::nothrow ) _11054f670_ParamDecl(_62835_tokens[0LL],jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_11054f670_TypeDecl>(),jule::Str()));
	if (_62917_param->_field_token._field_id == 36LLU) {
		_62917_param->_field_mutable=true;
		if (_62835_tokens.len() == 1LL) {
			this->self->_method_push_err(_62835_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_11054f670_ParamDecl>();
		}
		_62835_tokens=_62835_tokens.slice(1LL);
		_62917_param->_field_token=_62835_tokens[0LL];
	}
	if (_62835_tokens.len() >= 3LL) {
		if ((_62917_param->_field_token._field_id == 7LLU) && (_62917_param->_field_token._field_kind == jule::Str("&", 1))) {
			if (_62835_tokens.len() == 1LL) {
				this->self->_method_push_err(_62835_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return jule::new_ref<_11054f670_ParamDecl>();
			}
			if ((_62835_tokens[1LL]._field_id == 2LLU) && (_62835_tokens[2LL]._field_id == 11LLU)) {
				_62917_param->_field_reference=true;
				_62835_tokens=_62835_tokens.slice(1LL);
				_62917_param->_field_token=_62835_tokens[0LL];
			}
		}
	}
	if (_62917_param->_field_token._field_id != 2LLU) {
		_62917_param->_field_ident=jule::Str("<anonymous>", 11);
		this->self->_method_build_param_type(_62917_param,_62835_tokens,_62852_must_pure);
	} else {
		jule::Ref<jule::Int> _66521_i = jule::new_ref<jule::Int>(0LL);
		this->self->_method_build_param_body(_62917_param,_66521_i,_62835_tokens,_62852_must_pure);
	}
	return _62917_param;
}



inline void _110754df0_Parser::_method_check_params(jule::Slice<jule::Ref<_11054f670_ParamDecl>> _67235_params) {
	{
		auto __julec_range_expr = _67235_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11054f670_ParamDecl> _110754df0_param = *__julec_range_begin;
			_iter_begin_4602521360:;
			{
				if (_110754df0_param->_method_is_self() || jule::real(_110754df0_param->_field_kind)) {
					goto _iter_next_4602521360;
				}
				if (_110754df0_param->_field_token._field_id == 0LLU) {
					(*this)._method_push_err(_110754df0_param->_field_token,jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
				} else {
					_110754df0_param->_field_kind=jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_110754df0_param->_field_token,jule::Any(jule::new_struct<_11054f670_IdentTypeDecl>(new( std::nothrow ) _11054f670_IdentTypeDecl(_110754df0_param->_field_token,_110754df0_param->_field_token._field_kind,jule::Bool(),jule::Slice<jule::Ref<_11054f670_TypeDecl>>())))));
					_110754df0_param->_field_ident=jule::Str("<anonymous>", 11);
					_110754df0_param->_field_token=_1106ec050_Token();
				}
			}
			_iter_next_4602521360:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110754df0_param = *__julec_range_begin; goto _iter_begin_4602521360; }
			_iter_end_4602521360:;
		}
	}
}



inline jule::Slice<jule::Ref<_11054f670_ParamDecl>> _110754df0_Parser::_method_build_params(jule::Slice<_1106ec050_Token> _69336_tokens,jule::Bool _69353_method,jule::Bool _69367_must_pure) {
	jule::Slice<jule::Slice<_1106ec050_Token>> _69418_parts;
	jule::Slice<_127e05da0_Log> _69425_errs;
	std::tie(_69418_parts,_69425_errs) = _110754df0_parts(_69336_tokens,8LLU,true);
	this->self->_field_errors=jule::append(this->self->_field_errors,_69425_errs);
	if (_69418_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_11054f670_ParamDecl>> _70017_params = nullptr;
	if (_69353_method && (_69418_parts.len() > 0LL)) {
		jule::Ref<_11054f670_ParamDecl> _70221_param = this->self->_method_build_self_param(_69418_parts[0LL]);
		if (jule::real(_70221_param) && _70221_param->_method_is_self()) {
			_70017_params=jule::append(_70017_params,jule::Slice<jule::Ref<_11054f670_ParamDecl>>({_70221_param}));
			_69418_parts=_69418_parts.slice(1LL);
		}
	}
	{
		auto __julec_range_expr = _69418_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Slice<_1106ec050_Token> _110754df0_part = *__julec_range_begin;
			_iter_begin_4602540016:;
			{
				jule::Ref<_11054f670_ParamDecl> _71021_param = this->self->_method_build_param(_110754df0_part,_69367_must_pure);
				if (jule::real(_71021_param)) {
					_70017_params=jule::append(_70017_params,jule::Slice<jule::Ref<_11054f670_ParamDecl>>({_71021_param}));
				}
			}
			_iter_next_4602540016:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110754df0_part = *__julec_range_begin; goto _iter_begin_4602540016; }
			_iter_end_4602540016:;
		}
	}
	this->self->_method_check_params(_70017_params);
	return _70017_params;
}



inline std::tuple<jule::Ref<_11054f670_RetTypeDecl>,jule::Bool> _110754df0_Parser::_method_build_multi_ret_type(jule::Slice<_1106ec050_Token> _72044_tokens,jule::Int& _72066_i) {
	jule::Bool _72093_ok = jule::Bool();
	jule::Ref<_11054f670_RetTypeDecl> _72076_t = jule::Ref<_11054f670_RetTypeDecl>();
	_72076_t=jule::new_struct<_11054f670_RetTypeDecl>(new( std::nothrow ) _11054f670_RetTypeDecl());
	(_72066_i)++;
	if (_72066_i >= _72044_tokens.len()) {
		(_72066_i)--;
		std::tie(_72076_t->_field_kind,_72093_ok) = this->self->_method_build_type(_72044_tokens,(&(_72066_i)),false);
		return std::make_tuple(_72076_t,_72093_ok);
	}
	(_72066_i)--;
	jule::Slice<_1106ec050_Token> _73017_range_tokens = _110754df0_range(_72066_i,jule::Str("(", 1),jule::Str(")", 1),_72044_tokens);
	jule::Slice<jule::Ref<_11054f670_ParamDecl>> _73117_params = this->self->_method_build_params(_73017_range_tokens,false,true);
	jule::Slice<jule::Ref<_11054f670_TypeDecl>> _73317_types = jule::Slice<jule::Ref<_11054f670_TypeDecl>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_73117_params.len())));
	{
		auto __julec_range_expr = _73117_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110754df0_i = 0;
			jule::Ref<_11054f670_ParamDecl> _110754df0_param = *__julec_range_begin;
			_iter_begin_4602563088:;
			{
				_73317_types[static_cast<jule::Int>(_110754df0_i)]=_110754df0_param->_field_kind;
				if (_110754df0_param->_field_ident != jule::Str("<anonymous>", 11)) {
					_110754df0_param->_field_token._field_kind=_110754df0_param->_field_ident;
				} else {
					_110754df0_param->_field_token._field_kind=jule::Str("_", 1);
				}
				_72076_t->_field_idents=jule::append(_72076_t->_field_idents,jule::Slice<_1106ec050_Token>({_110754df0_param->_field_token}));
			}
			_iter_next_4602563088:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110754df0_i; _110754df0_param = *__julec_range_begin; goto _iter_begin_4602563088; }
			_iter_end_4602563088:;
		}
	}
	if (_73317_types.len() > 1LL) {
		_72076_t->_field_kind=jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_72044_tokens[0LL],jule::Any(jule::new_struct<_11054f670_TupleTypeDecl>(new( std::nothrow ) _11054f670_TupleTypeDecl(_73317_types)))));
	} else {
		_72076_t->_field_kind=_73317_types[0LL];
	}
	_72093_ok=true;
	return std::make_tuple(_72076_t,_72093_ok);
}



inline std::tuple<jule::Ref<_11054f670_RetTypeDecl>,jule::Bool> _110754df0_Parser::_method_build_ret_type(jule::Slice<_1106ec050_Token> _76038_tokens,jule::Int& _76060_i) {
	jule::Bool _76087_ok = jule::Bool();
	jule::Ref<_11054f670_RetTypeDecl> _76070_t = jule::Ref<_11054f670_RetTypeDecl>();
	_76070_t=jule::new_struct<_11054f670_RetTypeDecl>(new( std::nothrow ) _11054f670_RetTypeDecl());
	if (_76060_i >= _76038_tokens.len()) {
		return std::make_tuple(_76070_t,_76087_ok);
	}
	_1106ec050_Token _76617_token = _76038_tokens[static_cast<jule::Int>(_76060_i)];
	{
		auto _match_expr{ _76617_token._field_id };
		if (!((3LLU) == _match_expr)) { goto _case_end_4602581568; }
		_case_begin_4602581568:;
		{
			if (_76617_token._field_kind == jule::Str("{", 1)) {
				return std::make_tuple(_76070_t,_76087_ok);
			}
		}
		goto _match_end_4602580224;
		_case_end_4602581568:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4602581680; }
		_case_begin_4602581680:;
		{
			if (_76617_token._field_kind == jule::Str("=", 1)) {
				return std::make_tuple(_76070_t,_76087_ok);
			}
		}
		goto _match_end_4602580224;
		_case_end_4602581680:;
		if (!((11LLU) == _match_expr)) { goto _case_end_4602581792; }
		_case_begin_4602581792:;
		{
			if ((_76060_i + 1LL) >= _76038_tokens.len()) {
				this->self->_method_push_err(_76617_token,jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
				return std::make_tuple(_76070_t,_76087_ok);
			}
			(_76060_i)++;
			_76617_token=_76038_tokens[static_cast<jule::Int>(_76060_i)];
			if (_76617_token._field_id == 3LLU) {
				{
					auto _match_expr{ _76617_token._field_kind };
					if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4602590160; }
					_case_begin_4602590160:;
					{
						jule::Ref<_11054f670_RetTypeDecl> _78930_decl;
						jule::Bool _78936_ok;
						std::tie(_78930_decl,_78936_ok) = this->self->_method_build_multi_ret_type(_76038_tokens,_76060_i);
						_76070_t = _78930_decl;
						_76087_ok = _78936_ok;
						return std::make_tuple(_76070_t,_76087_ok);
					}
					goto _match_end_4602589136;
					_case_end_4602590160:;
					if (!((jule::Str("{", 1)) == _match_expr)) { goto _case_end_4602590272; }
					_case_begin_4602590272:;
					{
						this->self->_method_push_err(_76617_token,jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
						return std::make_tuple(_76070_t,_76087_ok);
					}
					goto _match_end_4602589136;
					_case_end_4602590272:;
					_match_end_4602589136:;
				}
			}
			std::tie(_76070_t->_field_kind,_76087_ok) = this->self->_method_build_type(_76038_tokens,(&(_76060_i)),true);
			return std::make_tuple(_76070_t,_76087_ok);
		}
		goto _match_end_4602580224;
		_case_end_4602581792:;
		_match_end_4602580224:;
	}
	(_76060_i)++;
	this->self->_method_push_err(_76617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	return std::make_tuple(_76070_t,_76087_ok);
}



inline jule::Ref<_11054f670_FnDecl> _110754df0_Parser::_method_build_fn_prototype(jule::Slice<_1106ec050_Token> _80842_tokens,jule::Int& _80864_i,jule::Bool _80872_method) {
	jule::Ref<_11054f670_FnDecl> _80917_f = jule::new_struct<_11054f670_FnDecl>(new( std::nothrow ) _11054f670_FnDecl(_80842_tokens[static_cast<jule::Int>(_80864_i)],jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::Slice<jule::Ref<_11054f670_Directive>>(),jule::Ref<_11054f670_CommentGroup>(),jule::Ref<_11054f670_ScopeTree>(),jule::Slice<jule::Ref<_11054f670_GenericDecl>>(),jule::Ref<_11054f670_RetTypeDecl>(),jule::Slice<jule::Ref<_11054f670_ParamDecl>>()));
	if (_80917_f->_field_token._field_id == 38LLU) {
		_80917_f->_field_statically=true;
		(_80864_i)++;
		if (_80864_i >= _80842_tokens.len()) {
			this->self->_method_push_err(_80917_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_11054f670_FnDecl>();
		}
		_80917_f->_field_token=_80842_tokens[static_cast<jule::Int>(_80864_i)];
	}
	if (_80917_f->_field_token._field_id == 35LLU) {
		_80917_f->_field_unsafety=true;
		(_80864_i)++;
		if (_80864_i >= _80842_tokens.len()) {
			this->self->_method_push_err(_80917_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_11054f670_FnDecl>();
		}
		_80917_f->_field_token=_80842_tokens[static_cast<jule::Int>(_80864_i)];
	}
	(_80864_i)++;
	if (_80864_i >= _80842_tokens.len()) {
		this->self->_method_push_err(_80917_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_FnDecl>();
	}
	_1106ec050_Token _84213_tok = _80842_tokens[static_cast<jule::Int>(_80864_i)];
	if (_84213_tok._field_id == 2LLU) {
		(_80864_i)++;
		if (_80864_i >= _80842_tokens.len()) {
			this->self->_method_push_err(_80917_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_11054f670_FnDecl>();
		}
		_80917_f->_field_ident=_84213_tok._field_kind;
	} else {
		_80917_f->_field_ident=jule::Str("<anonymous>", 11);
	}
	_1106ec050_Token _85413_error_token = _80842_tokens[static_cast<jule::Int>(_80864_i)];
	jule::Slice<_1106ec050_Token> _85517_generics_tokens = _110754df0_range(_80864_i,jule::Str("[", 1),jule::Str("]", 1),_80842_tokens);
	if (_85517_generics_tokens != nullptr) {
		_80917_f->_field_generics=this->self->_method_build_generics(_85517_generics_tokens,_85413_error_token);
	}
	if (_80842_tokens[static_cast<jule::Int>(_80864_i)]._field_kind != jule::Str("(", 1)) {
		this->self->_method_push_err(_80842_tokens[static_cast<jule::Int>(_80864_i)],jule::Str("missing function parentheses", 28),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_FnDecl>();
	}
	jule::Slice<_1106ec050_Token> _86517_params_toks = _110754df0_range(_80864_i,jule::Str("(", 1),jule::Str(")", 1),_80842_tokens);
	if (_86517_params_toks.len() > 0LL) {
		_80917_f->_field_params=this->self->_method_build_params(_86517_params_toks,_80872_method,false);
	}
	std::tie(_80917_f->_field_result,std::ignore) = this->self->_method_build_ret_type(_80842_tokens,_80864_i);
	return _80917_f;
}



inline jule::Ref<_11054f670_FnDecl> _110754df0_Parser::_method_build_fn(jule::Slice<_1106ec050_Token> _87632_tokens,jule::Bool _87649_method,jule::Bool _87663_prototype) {
	jule::Int _87717_i = 0LL;
	jule::Ref<_11054f670_FnDecl> _87817_f = this->self->_method_build_fn_prototype(_87632_tokens,_87717_i,_87649_method);
	if (_87663_prototype) {
		if (_87717_i < _87632_tokens.len()) {
			this->self->_method_push_err(_87632_tokens[static_cast<jule::Int>(_87717_i + 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
		return _87817_f;
	} else if ((!(jule::real(_87817_f)))) {
		return _87817_f;
	}
	if (_87717_i >= _87632_tokens.len()) {
		this->self->_method_stop();
		this->self->_method_push_err(_87817_f->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_FnDecl>();
	}
	jule::Slice<_1106ec050_Token> _89417_block_tokens = _110754df0_range(_87717_i,jule::Str("{", 1),jule::Str("}", 1),_87632_tokens);
	if (_89417_block_tokens != nullptr) {
		_87817_f->_field_scope=this->self->_method_build_scope(_89417_block_tokens);
		_87817_f->_field_scope->_field_unsafety=_87817_f->_field_unsafety;
		if (_87717_i < _87632_tokens.len()) {
			this->self->_method_push_err(_87632_tokens[static_cast<jule::Int>(_87717_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
	} else {
		this->self->_method_stop();
		this->self->_method_push_err(_87817_f->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_FnDecl>();
	}
	return _87817_f;
}



inline jule::Slice<_1106ec050_Token> _110754df0_Parser::_method_get_use_decl_selectors(jule::Slice<_1106ec050_Token> _91045_tokens) {
	jule::Int _91117_i = 0LL;
	_91045_tokens=_110754df0_range(_91117_i,jule::Str("{", 1),jule::Str("}", 1),_91045_tokens);
	jule::Slice<jule::Slice<_1106ec050_Token>> _91318_parts;
	jule::Slice<_127e05da0_Log> _91325_errs;
	std::tie(_91318_parts,_91325_errs) = _110754df0_parts(_91045_tokens,8LLU,true);
	if (_91325_errs.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_91325_errs);
		return nullptr;
	}
	jule::Slice<_1106ec050_Token> _91917_selectors = jule::Slice<_1106ec050_Token>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_91318_parts.len())));
	{
		auto __julec_range_expr = _91318_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110754df0_i = 0;
			jule::Slice<_1106ec050_Token> _110754df0_part = *__julec_range_begin;
			_iter_begin_4602662768:;
			{
				if (_110754df0_part.len() > 1LL) {
					(*this)._method_push_err(_110754df0_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				}
				_1106ec050_Token _92421_tok = _110754df0_part[0LL];
				if ((_92421_tok._field_id != 2LLU) && (_92421_tok._field_id != 28LLU)) {
					(*this)._method_push_err(_92421_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
					(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
					goto _iter_next_4602662768;
				}
				_91917_selectors[static_cast<jule::Int>(_110754df0_i)]=_92421_tok;
			}
			_iter_next_4602662768:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110754df0_i; _110754df0_part = *__julec_range_begin; goto _iter_begin_4602662768; }
			_iter_end_4602662768:;
		}
	}
	return _91917_selectors;
}



inline void _110754df0_Parser::_method_build_cpp_use_decl(jule::Ref<_11054f670_UseDecl> _93541_decl,jule::Slice<_1106ec050_Token> _93557_tokens) {
	if (_93557_tokens.len() > 1LL) {
		(*this)._method_push_err(_93557_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	_1106ec050_Token _93913_token = _93557_tokens[0LL];
	if ((_93913_token._field_id != 6LLU) || ((_93913_token._field_kind[0LL] != '`') && (_93913_token._field_kind[0LL] != '\"'))) {
		(*this)._method_push_err(_93913_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		return;
	}
	_93541_decl->_field_cpp_linked=true;
	_93541_decl->_field_link_path=_93913_token._field_kind.slice(1LL,static_cast<jule::Int>(_93913_token._field_kind.len() - 1LL));
	if ((!(_127e05470_is_std_header_path(_93541_decl->_field_link_path)))) {
		_93541_decl->_field_link_path=_117e1d320_join(jule::Slice<jule::Str>({_93913_token._field_file->_method_dir(),_93541_decl->_field_link_path}));
	}
}



inline void _110754df0_Parser::_method_build_std_use_decl(jule::Ref<_11054f670_UseDecl> _95141_decl,jule::Slice<_1106ec050_Token> _95161_tokens) {
	_95141_decl->_field_std=true;
	_1106ec050_Token _95417_token = _95161_tokens[0LL];
	if (_95161_tokens.len() < 3LL) {
		(*this)._method_push_err(_95417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return;
	}
	_95161_tokens=_95161_tokens.slice(2LL);
	_95417_token=_95161_tokens[static_cast<jule::Int>(_95161_tokens.len() - 1LL)];
	{
		auto _match_expr{ _95417_token._field_id };
		if (!((23LLU) == _match_expr)) { goto _case_end_4602700400; }
		_case_begin_4602700400:;
		{
			(*this)._method_push_err(_95417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4602696960;
		_case_end_4602700400:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4602700512; }
		_case_begin_4602700512:;
		{
			if (_95417_token._field_kind != jule::Str("}", 1)) {
				(*this)._method_push_err(_95417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			jule::Slice<_1106ec050_Token> _97221_selectors = nullptr;
			std::tie(_95161_tokens,_97221_selectors) = _110754df0_range_last(_95161_tokens);
			_95141_decl->_field_selected=(*this)._method_get_use_decl_selectors(_97221_selectors);
			if (_95161_tokens.len() == 0LL) {
				(*this)._method_push_err(_95417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_95417_token=_95161_tokens[static_cast<jule::Int>(_95161_tokens.len() - 1LL)];
			if (_95417_token._field_id != 23LLU) {
				(*this)._method_push_err(_95417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_95161_tokens=_95161_tokens.slice(0LL,static_cast<jule::Int>(_95161_tokens.len() - 1LL));
			if (_95161_tokens.len() == 0LL) {
				(*this)._method_push_err(_95417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
		}
		goto _match_end_4602696960;
		_case_end_4602700512:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4602700624; }
		_case_begin_4602700624:;
		{
			if (_95417_token._field_kind != jule::Str("*", 1)) {
				(*this)._method_push_err(_95417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_95161_tokens=_95161_tokens.slice(0LL,static_cast<jule::Int>(_95161_tokens.len() - 1LL));
			if (_95161_tokens.len() == 0LL) {
				(*this)._method_push_err(_95417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_95417_token=_95161_tokens[static_cast<jule::Int>(_95161_tokens.len() - 1LL)];
			if (_95417_token._field_id != 23LLU) {
				(*this)._method_push_err(_95417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_95161_tokens=_95161_tokens.slice(0LL,static_cast<jule::Int>(_95161_tokens.len() - 1LL));
			if (_95161_tokens.len() == 0LL) {
				(*this)._method_push_err(_95417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_95141_decl->_field_full=true;
		}
		goto _match_end_4602696960;
		_case_end_4602700624:;
		_match_end_4602696960:;
	}
	_95141_decl->_field_link_path=jule::Str("std::", 5) + _110754df0_tokstoa(_95161_tokens);
}



inline void _110754df0_Parser::_method_build_ident_use_decl(jule::Ref<_11054f670_UseDecl> _101543_decl,jule::Slice<_1106ec050_Token> _101563_tokens) {
	_101543_decl->_field_std=false;
	_1106ec050_Token _101817_token = _101563_tokens[static_cast<jule::Int>(_101563_tokens.len() - 1LL)];
	{
		auto _match_expr{ _101817_token._field_id };
		if (!((23LLU) == _match_expr)) { goto _case_end_4602735248; }
		_case_begin_4602735248:;
		{
			(*this)._method_push_err(_101817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4602734624;
		_case_end_4602735248:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4602735360; }
		_case_begin_4602735360:;
		{
			if (_101817_token._field_kind != jule::Str("}", 1)) {
				(*this)._method_push_err(_101817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			jule::Slice<_1106ec050_Token> _103021_selectors = nullptr;
			std::tie(_101563_tokens,_103021_selectors) = _110754df0_range_last(_101563_tokens);
			_101543_decl->_field_selected=(*this)._method_get_use_decl_selectors(_103021_selectors);
			if (_101563_tokens.len() == 0LL) {
				(*this)._method_push_err(_101817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101817_token=_101563_tokens[static_cast<jule::Int>(_101563_tokens.len() - 1LL)];
			if (_101817_token._field_id != 23LLU) {
				(*this)._method_push_err(_101817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101563_tokens=_101563_tokens.slice(0LL,static_cast<jule::Int>(_101563_tokens.len() - 1LL));
			if (_101563_tokens.len() == 0LL) {
				(*this)._method_push_err(_101817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
		}
		goto _match_end_4602734624;
		_case_end_4602735360:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4602735472; }
		_case_begin_4602735472:;
		{
			if (_101817_token._field_kind != jule::Str("*", 1)) {
				(*this)._method_push_err(_101817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101563_tokens=_101563_tokens.slice(0LL,static_cast<jule::Int>(_101563_tokens.len() - 1LL));
			if (_101563_tokens.len() == 0LL) {
				(*this)._method_push_err(_101817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101817_token=_101563_tokens[static_cast<jule::Int>(_101563_tokens.len() - 1LL)];
			if (_101817_token._field_id != 23LLU) {
				(*this)._method_push_err(_101817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101563_tokens=_101563_tokens.slice(0LL,static_cast<jule::Int>(_101563_tokens.len() - 1LL));
			if (_101563_tokens.len() == 0LL) {
				(*this)._method_push_err(_101817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101543_decl->_field_full=true;
		}
		goto _match_end_4602734624;
		_case_end_4602735472:;
		_match_end_4602734624:;
	}
	_101543_decl->_field_link_path=_110754df0_tokstoa(_101563_tokens);
}



inline void _110754df0_Parser::_method_parse_use_decl(jule::Ref<_11054f670_UseDecl> _108037_decl,jule::Slice<_1106ec050_Token> _108057_tokens) {
	if (_108037_decl->_field_cpp_linked) {
		(*this)._method_build_cpp_use_decl(_108037_decl,_108057_tokens);
		return;
	}
	_1106ec050_Token _108617_token = _108057_tokens[0LL];
	if (_108617_token._field_id != 2LLU) {
		(*this)._method_push_err(_108617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return;
	}
	if ((_108057_tokens.len() > 2LL) && (_108057_tokens[1LL]._field_id == 12LLU)) {
		_108037_decl->_field_alias=_108617_token._field_kind;
		if (_108057_tokens[2LL]._field_id != 2LLU) {
			(*this)._method_push_err(_108617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
			return;
		}
		_108057_tokens=_108057_tokens.slice(2LL);
		_108617_token=_108057_tokens[0LL];
	}
	
	{
		if (!((_108617_token._field_kind == jule::Str("std", 3)))) { goto _case_end_4602780864; }
		_case_begin_4602780864:;
		{
			(*this)._method_build_std_use_decl(_108037_decl,_108057_tokens);
		}
		goto _match_end_4602779888;
		_case_end_4602780864:;
		_case_begin_4602780016:;
		{
			(*this)._method_build_ident_use_decl(_108037_decl,_108057_tokens);
		}
		goto _match_end_4602779888;
		_case_end_4602780016:;
		_match_end_4602779888:;
	}
}



inline jule::Ref<_11054f670_UseDecl> _110754df0_Parser::_method_build_use_decl(jule::Slice<_1106ec050_Token> _111537_tokens,jule::Bool _111554_cpp_linked) {
	jule::Ref<_11054f670_UseDecl> _111617_decl = jule::new_struct<_11054f670_UseDecl>(new( std::nothrow ) _11054f670_UseDecl(_111537_tokens[0LL],jule::Str(),jule::Str(),jule::Bool(),jule::Slice<_1106ec050_Token>(),_111554_cpp_linked,jule::Bool()));
	if (_111537_tokens.len() < 2LL) {
		(*this)._method_push_err(_111617_decl->_field_token,jule::Str("missing path of use statement", 29),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_UseDecl>();
	}
	_111537_tokens=_111537_tokens.slice(1LL);
	(*this)._method_parse_use_decl(_111617_decl,_111537_tokens);
	return _111617_decl;
}



inline jule::Ref<_11054f670_Expr> _110754df0_Parser::_method_build_enum_item_expr(jule::Ref<jule::Int> _112944_i,jule::Slice<_1106ec050_Token> _112957_tokens) {
	jule::Int _113017_brace_n = 0LL;
	jule::Int _113113_expr_start = _112944_i;
	_iter_begin_4602797632:;
	if (!(_112944_i < _112957_tokens.len())) { goto _iter_end_4602797632; }
	{
		_1106ec050_Token _113317_t = _112957_tokens[static_cast<jule::Int>(_112944_i)];
		if (_113317_t._field_id == 3LLU) {
			{
				auto _match_expr{ _113317_t._field_kind };
				if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4602802560; }
				_case_begin_4602802560:;
				{
					(_113017_brace_n)++;
					goto _iter_next_4602797632;
				}
				goto _match_end_4602801040;
				_case_end_4602802560:;
				_case_begin_4602801728:;
				{
					(_113017_brace_n)--;
				}
				goto _match_end_4602801040;
				_case_end_4602801728:;
				_match_end_4602801040:;
			}
		}
		if (_113017_brace_n > 0LL) {
			goto _iter_next_4602797632;
		}
		if ((_113317_t._field_id == 8LLU) || ((_112944_i + 1LL) >= _112957_tokens.len())) {
			jule::Slice<_1106ec050_Token> _115225_expr_tokens = nullptr;
			if (_113317_t._field_id == 8LLU) {
				_115225_expr_tokens=_112957_tokens.slice(static_cast<jule::Int>(_113113_expr_start),static_cast<jule::Int>(_112944_i));
			} else {
				_115225_expr_tokens=_112957_tokens.slice(static_cast<jule::Int>(_113113_expr_start));
			}
			return this->self->_method_build_expr(_115225_expr_tokens);
		}
	}
	_iter_next_4602797632:;
	(_112944_i)++;
	goto _iter_begin_4602797632;
	_iter_end_4602797632:;
	return jule::new_ref<_11054f670_Expr>();
}



inline jule::Slice<jule::Ref<_11054f670_EnumItemDecl>> _110754df0_Parser::_method_build_enum_items(jule::Slice<_1106ec050_Token> _116440_tokens) {
	jule::Slice<jule::Ref<_11054f670_EnumItemDecl>> _116517_items = jule::Slice<jule::Ref<_11054f670_EnumItemDecl>>::alloc(0LL);
	jule::Ref<jule::Int> _116617_i = jule::new_ref<jule::Int>(0LL);
	_iter_begin_4602815856:;
	if (!(_116617_i < _116440_tokens.len())) { goto _iter_end_4602815856; }
	{
		_1106ec050_Token _116821_t = _116440_tokens[static_cast<jule::Int>(_116617_i)];
		if (_116821_t._field_id == 18LLU) {
			goto _iter_next_4602815856;
		}
		jule::Ref<_11054f670_EnumItemDecl> _117321_item = jule::new_struct<_11054f670_EnumItemDecl>(new( std::nothrow ) _11054f670_EnumItemDecl());
		_117321_item->_field_token=_116821_t;
		if (_117321_item->_field_token._field_id != 2LLU) {
			this->self->_method_push_err(_117321_item->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		}
		_117321_item->_field_ident=_117321_item->_field_token._field_kind;
		if (((_116617_i + 1LL) >= _116440_tokens.len()) || (_116440_tokens[static_cast<jule::Int>(_116617_i + 1LL)]._field_id == 8LLU)) {
			if ((_116617_i + 1LL) < _116440_tokens.len()) {
				(_116617_i)++;
			}
			_116517_items=jule::append(_116517_items,jule::Slice<jule::Ref<_11054f670_EnumItemDecl>>({_117321_item}));
			goto _iter_next_4602815856;
		}
		(_116617_i)++;
		_116821_t=_116440_tokens[static_cast<jule::Int>(_116617_i)];
		(_116617_i)++;
		if ((_116821_t._field_id != 7LLU) || (_116821_t._field_kind != jule::Str("=", 1))) {
			this->self->_method_push_err(_116821_t,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			this->self->_method_push_suggestion(jule::Str("expected equals \"=\" for assignment", 34),jule::Slice<jule::Any>({}));
			goto _iter_next_4602815856;
		}
		if ((_116617_i >= _116440_tokens.len()) || (_116440_tokens[static_cast<jule::Int>(_116617_i)]._field_id == 8LLU)) {
			this->self->_method_push_err(_116821_t,jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
			goto _iter_next_4602815856;
		}
		_117321_item->_field_expr=this->self->_method_build_enum_item_expr(_116617_i,_116440_tokens);
		_116517_items=jule::append(_116517_items,jule::Slice<jule::Ref<_11054f670_EnumItemDecl>>({_117321_item}));
	}
	_iter_next_4602815856:;
	(_116617_i)++;
	goto _iter_begin_4602815856;
	_iter_end_4602815856:;
	return _116517_items;
}



inline jule::Ref<_11054f670_EnumDecl> _110754df0_Parser::_method_build_enum_decl(jule::Slice<_1106ec050_Token> _120539_tokens) {
	if ((_120539_tokens.len() < 2LL) || (_120539_tokens.len() < 3LL)) {
		this->self->_method_push_err(_120539_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_EnumDecl>();
	}
	jule::Ref<_11054f670_EnumDecl> _121017_e = jule::new_struct<_11054f670_EnumDecl>(new( std::nothrow ) _11054f670_EnumDecl(_120539_tokens[1LL],jule::Bool(),jule::Str(),jule::Ref<_11054f670_TypeDecl>(),jule::Slice<jule::Ref<_11054f670_EnumItemDecl>>(),jule::Ref<_11054f670_CommentGroup>()));
	if (_121017_e->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_121017_e->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
	}
	_121017_e->_field_ident=_121017_e->_field_token._field_kind;
	jule::Int _121817_i = 2LL;
	if (_120539_tokens[static_cast<jule::Int>(_121817_i)]._field_id == 11LLU) {
		(_121817_i)++;
		if (_121817_i >= _120539_tokens.len()) {
			this->self->_method_push_err(_120539_tokens[static_cast<jule::Int>(_121817_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return _121017_e;
		}
		std::tie(_121017_e->_field_kind,std::ignore) = this->self->_method_build_type(_120539_tokens,(&(_121817_i)),true);
		if (_121817_i >= _120539_tokens.len()) {
			this->self->_method_stop();
			this->self->_method_push_err(_121017_e->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
			this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
			return _121017_e;
		}
	} else {
		jule::drop(_121017_e->_field_kind);
	}
	jule::Slice<_1106ec050_Token> _123517_item_tokens = _110754df0_range(_121817_i,jule::Str("{", 1),jule::Str("}", 1),_120539_tokens);
	if (_123517_item_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_121017_e->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return _121017_e;
	} else if (_121817_i < _120539_tokens.len()) {
		this->self->_method_push_err(_120539_tokens[static_cast<jule::Int>(_121817_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	_121017_e->_field_items=this->self->_method_build_enum_items(_123517_item_tokens);
	return _121017_e;
}



inline jule::Ref<_11054f670_FieldDecl> _110754df0_Parser::_method_build_field(jule::Slice<_1106ec050_Token> _124835_tokens) {
	jule::Ref<_11054f670_FieldDecl> _124917_f = jule::new_struct<_11054f670_FieldDecl>(new( std::nothrow ) _11054f670_FieldDecl());
	_124917_f->_field_public=_124835_tokens[0LL]._field_id == 21LLU;
	if (_124917_f->_field_public) {
		if (_124835_tokens.len() == 1LL) {
			this->self->_method_push_err(_124835_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_11054f670_FieldDecl>();
		}
		_124835_tokens=_124835_tokens.slice(1LL);
	}
	_124917_f->_field_mutable=_124835_tokens[0LL]._field_id == 36LLU;
	if (_124917_f->_field_mutable) {
		if (_124835_tokens.len() == 1LL) {
			this->self->_method_push_err(_124835_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_11054f670_FieldDecl>();
		}
		_124835_tokens=_124835_tokens.slice(1LL);
	}
	_124917_f->_field_token=_124835_tokens[0LL];
	if (_124917_f->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_124917_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_FieldDecl>();
	}
	_124917_f->_field_ident=_124917_f->_field_token._field_kind;
	if (_124835_tokens.len() == 1LL) {
		this->self->_method_push_err(_124835_tokens[0LL],jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_FieldDecl>();
	} else if (_124835_tokens[1LL]._field_id != 11LLU) {
		this->self->_method_push_err(_124835_tokens[1LL],jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_FieldDecl>();
	}
	_124835_tokens=_124835_tokens.slice(2LL);
	jule::Int _128617_i = 0LL;
	std::tie(_124917_f->_field_kind,std::ignore) = this->self->_method_build_type(_124835_tokens,(&(_128617_i)),true);
	if (_128617_i < _124835_tokens.len()) {
		this->self->_method_push_err(_124835_tokens[static_cast<jule::Int>(_128617_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_FieldDecl>();
	}
	return _124917_f;
}



inline jule::Slice<jule::Ref<_11054f670_FieldDecl>> _110754df0_Parser::_method_build_struct_decl_fields(jule::Slice<_1106ec050_Token> _129648_tokens) {
	jule::Slice<jule::Ref<_11054f670_FieldDecl>> _129717_fields = nullptr;
	jule::Slice<jule::Ref<_110709a60_Stmt>> _129817_stms = _110709a60_split_stms(_129648_tokens);
	{
		auto __julec_range_expr = _129817_stms;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110709a60_Stmt> _110754df0_st = *__julec_range_begin;
			_iter_begin_4602904048:;
			{
				jule::Slice<_1106ec050_Token> _130021_tokens = _110754df0_st->_field_tokens;
				if (_130021_tokens[0LL]._field_id == 18LLU) {
					goto _iter_next_4602904048;
				}
				jule::Ref<_11054f670_FieldDecl> _130421_f = this->self->_method_build_field(_130021_tokens);
				_129717_fields=jule::append(_129717_fields,jule::Slice<jule::Ref<_11054f670_FieldDecl>>({_130421_f}));
			}
			_iter_next_4602904048:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110754df0_st = *__julec_range_begin; goto _iter_begin_4602904048; }
			_iter_end_4602904048:;
		}
	}
	return _129717_fields;
}



inline jule::Ref<_11054f670_StructDecl> _110754df0_Parser::_method_build_struct_decl(jule::Slice<_1106ec050_Token> _131041_tokens) {
	if (_131041_tokens.len() < 3LL) {
		this->self->_method_push_err(_131041_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_StructDecl>();
	}
	jule::Int _131617_i = 1LL;
	jule::Ref<_11054f670_StructDecl> _131717_s = jule::new_struct<_11054f670_StructDecl>(new( std::nothrow ) _11054f670_StructDecl(_131041_tokens[static_cast<jule::Int>(_131617_i)],jule::Str(),jule::Slice<jule::Ref<_11054f670_FieldDecl>>(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ref<_11054f670_Directive>>(),jule::Ref<_11054f670_CommentGroup>(),jule::Slice<jule::Ref<_11054f670_GenericDecl>>()));
	if (_131717_s->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_131717_s->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
	}
	(_131617_i)++;
	if (_131617_i >= _131041_tokens.len()) {
		this->self->_method_push_err(_131041_tokens[static_cast<jule::Int>(_131617_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return _131717_s;
	}
	_131717_s->_field_ident=_131717_s->_field_token._field_kind;
	_1106ec050_Token _133113_error_token = _131041_tokens[static_cast<jule::Int>(_131617_i)];
	jule::Slice<_1106ec050_Token> _133217_generics_tokens = _110754df0_range(_131617_i,jule::Str("[", 1),jule::Str("]", 1),_131041_tokens);
	if (_133217_generics_tokens != nullptr) {
		_131717_s->_field_generics=this->self->_method_build_generics(_133217_generics_tokens,_133113_error_token);
	}
	if (_131617_i >= _131041_tokens.len()) {
		this->self->_method_push_err(_131041_tokens[static_cast<jule::Int>(_131617_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return _131717_s;
	}
	jule::Slice<_1106ec050_Token> _134117_body_tokens = _110754df0_range(_131617_i,jule::Str("{", 1),jule::Str("}", 1),_131041_tokens);
	if (_134117_body_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_131717_s->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return _131717_s;
	}
	if (_131617_i < _131041_tokens.len()) {
		this->self->_method_push_err(_131041_tokens[static_cast<jule::Int>(_131617_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	_131717_s->_field_fields=this->self->_method_build_struct_decl_fields(_134117_body_tokens);
	return _131717_s;
}



inline void _110754df0_Parser::_method_check_method_receiver(jule::Ref<_11054f670_FnDecl> _135540_f) {
	if (_135540_f->_field_statically) {
		if ((_135540_f->_field_params.len() > 0LL) && _135540_f->_field_params[0LL]->_method_is_self()) {
			(*this)._method_push_err(_135540_f->_field_token,jule::Str("static functions cannot have receiver parameter", 47),jule::Slice<jule::Any>({}));
		}
		return;
	}
	if (_135540_f->_field_params.len() == 0LL) {
		(*this)._method_push_err(_135540_f->_field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>({}));
		return;
	}
	jule::Ref<_11054f670_ParamDecl> _136813_param = _135540_f->_field_params[0LL];
	if ((!(_136813_param->_method_is_self()))) {
		(*this)._method_push_err(_135540_f->_field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>({}));
		return;
	}
}



inline jule::Slice<jule::Ref<_11054f670_FnDecl>> _110754df0_Parser::_method_build_trait_methods(jule::Slice<_1106ec050_Token> _137543_tokens) {
	jule::Slice<jule::Ref<_11054f670_FnDecl>> _137617_methods = nullptr;
	jule::Slice<jule::Ref<_110709a60_Stmt>> _137717_stms = _110709a60_split_stms(_137543_tokens);
	{
		auto __julec_range_expr = _137717_stms;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110709a60_Stmt> _110754df0_st = *__julec_range_begin;
			_iter_begin_4602958672:;
			{
				jule::Slice<_1106ec050_Token> _137921_tokens = _11070bfb0_eliminate_comments(_110754df0_st->_field_tokens);
				if (_137921_tokens.len() == 0LL) {
					goto _iter_next_4602958672;
				}
				jule::Bool _138421_is_pub = false;
				if (_137921_tokens[0LL]._field_id == 21LLU) {
					_138421_is_pub=true;
					if (_137921_tokens.len() == 1LL) {
						this->self->_method_push_err(_137921_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
						goto _iter_next_4602958672;
					}
					_137921_tokens=_137921_tokens.slice(1LL);
				}
				jule::Ref<_11054f670_FnDecl> _139421_f = this->self->_method_build_fn(_137921_tokens,true,true);
				if (jule::real(_139421_f)) {
					if (_139421_f->_method_is_anon()) {
						this->self->_method_push_err(_139421_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
					}
					this->self->_method_check_method_receiver(_139421_f);
					if (_139421_f->_field_generics.len() > 0LL) {
						this->self->_method_push_err(_139421_f->_field_token,jule::Str("trait methods cannot have generics", 34),jule::Slice<jule::Any>({}));
					}
					_139421_f->_field_public=_138421_is_pub;
					_137617_methods=jule::append(_137617_methods,jule::Slice<jule::Ref<_11054f670_FnDecl>>({_139421_f}));
				}
			}
			_iter_next_4602958672:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110754df0_st = *__julec_range_begin; goto _iter_begin_4602958672; }
			_iter_end_4602958672:;
		}
	}
	return _137617_methods;
}



inline jule::Ref<_11054f670_TraitDecl> _110754df0_Parser::_method_build_trait_decl(jule::Slice<_1106ec050_Token> _141040_tokens) {
	if (_141040_tokens.len() < 3LL) {
		this->self->_method_push_err(_141040_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_TraitDecl>();
	}
	jule::Ref<_11054f670_TraitDecl> _141517_t = jule::new_struct<_11054f670_TraitDecl>(new( std::nothrow ) _11054f670_TraitDecl(_141040_tokens[1LL],jule::Str(),jule::Bool(),jule::Ref<_11054f670_CommentGroup>(),jule::Slice<jule::Ref<_11054f670_FnDecl>>()));
	if (_141517_t->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_141517_t->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
	}
	_141517_t->_field_ident=_141517_t->_field_token._field_kind;
	jule::Int _142317_i = 2LL;
	jule::Slice<_1106ec050_Token> _142417_body_tokens = _110754df0_range(_142317_i,jule::Str("{", 1),jule::Str("}", 1),_141040_tokens);
	if (_142417_body_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_141517_t->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_TraitDecl>();
	}
	if (_142317_i < _141040_tokens.len()) {
		this->self->_method_push_err(_141040_tokens[static_cast<jule::Int>(_142317_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	_141517_t->_field_methods=this->self->_method_build_trait_methods(_142417_body_tokens);
	return _141517_t;
}



inline jule::Ref<_11054f670_FnDecl> _110754df0_Parser::_method_build_cpp_link_fn(jule::Slice<_1106ec050_Token> _143841_tokens) {
	_143841_tokens=_143841_tokens.slice(1LL);
	jule::Ref<_11054f670_FnDecl> _144017_f = this->self->_method_build_fn(_143841_tokens,false,true);
	if (jule::real(_144017_f)) {
		if (_144017_f->_method_is_anon()) {
			this->self->_method_push_err(_144017_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
		_144017_f->_field_cpp_linked=true;
	}
	return _144017_f;
}



inline jule::Ref<_11054f670_VarDecl> _110754df0_Parser::_method_build_cpp_link_var(jule::Slice<_1106ec050_Token> _145042_tokens) {
	_145042_tokens=_145042_tokens.slice(1LL);
	jule::Ref<_11054f670_VarDecl> _145217_v = this->self->_method_build_var(_145042_tokens);
	if (jule::real(_145217_v)) {
		_145217_v->_field_cpp_linked=true;
		if (jule::real(_145217_v->_field_expr)) {
			this->self->_method_push_err(_145217_v->_field_token,jule::Str("cpp linked variables cannot have expression", 43),jule::Slice<jule::Any>({}));
		}
	}
	return _145217_v;
}



inline jule::Ref<_11054f670_StructDecl> _110754df0_Parser::_method_build_cpp_link_struct(jule::Slice<_1106ec050_Token> _146245_tokens) {
	_146245_tokens=_146245_tokens.slice(1LL);
	jule::Ref<_11054f670_StructDecl> _146417_s = this->self->_method_build_struct_decl(_146245_tokens);
	if (jule::real(_146417_s)) {
		_146417_s->_field_cpp_linked=true;
	}
	return _146417_s;
}



inline jule::Ref<_11054f670_TypeAliasDecl> _110754df0_Parser::_method_build_cpp_link_type_alias(jule::Slice<_1106ec050_Token> _147149_tokens) {
	_147149_tokens=_147149_tokens.slice(1LL);
	jule::Ref<_11054f670_TypeAliasDecl> _147317_t = this->self->_method_build_type_alias_decl(_147149_tokens);
	if (jule::real(_147317_t)) {
		_147317_t->_field_cpp_linked=true;
	}
	return _147317_t;
}



inline jule::Ref<_11054f670_UseDecl> _110754df0_Parser::_method_build_cpp_link_use(jule::Slice<_1106ec050_Token> _148042_tokens) {
	if (_148042_tokens.len() == 1LL) {
		this->self->_method_push_err(_148042_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_UseDecl>();
	}
	_148042_tokens=_148042_tokens.slice(1LL);
	
	return this->self->_method_build_use_decl(_148042_tokens,true);
}



inline jule::Any _110754df0_Parser::_method_build_cpp_link(jule::Slice<_1106ec050_Token> _149138_tokens) {
	_1106ec050_Token _149217_token = _149138_tokens[0LL];
	if (_149138_tokens.len() == 1LL) {
		this->self->_method_push_err(_149217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	_149217_token=_149138_tokens[1LL];
	{
		auto _match_expr{ _149217_token._field_id };
		if (!((19LLU) == _match_expr)) { goto _case_end_4603037008; }
		_case_begin_4603037008:;
		{
			return jule::Any(this->self->_method_build_cpp_link_use(_149138_tokens));
		}
		goto _match_end_4603035872;
		_case_end_4603037008:;
		if (!((33LLU) == _match_expr || (35LLU) == _match_expr)) { goto _case_end_4603037120; }
		_case_begin_4603037120:;
		{
			return jule::Any(this->self->_method_build_cpp_link_fn(_149138_tokens));
		}
		goto _match_end_4603035872;
		_case_end_4603037120:;
		if (!((9LLU) == _match_expr || (34LLU) == _match_expr)) { goto _case_end_4603037232; }
		_case_begin_4603037232:;
		{
			return jule::Any(this->self->_method_build_cpp_link_var(_149138_tokens));
		}
		goto _match_end_4603035872;
		_case_end_4603037232:;
		if (!((25LLU) == _match_expr)) { goto _case_end_4603038880; }
		_case_begin_4603038880:;
		{
			return jule::Any(this->self->_method_build_cpp_link_struct(_149138_tokens));
		}
		goto _match_end_4603035872;
		_case_end_4603038880:;
		if (!((10LLU) == _match_expr)) { goto _case_end_4603038992; }
		_case_begin_4603038992:;
		{
			return jule::Any(this->self->_method_build_cpp_link_type_alias(_149138_tokens));
		}
		goto _match_end_4603035872;
		_case_end_4603038992:;
		_case_begin_4603036064:;
		{
			this->self->_method_push_err(_149217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4603035872;
		_case_end_4603036064:;
		_match_end_4603035872:;
	}
	return jule::Any(nullptr);
}



inline jule::Ref<_11054f670_FnDecl> _110754df0_Parser::_method_get_method(jule::Slice<_1106ec050_Token> _152234_tokens) {
	jule::Int _152317_i = 0LL;
	_1106ec050_Token _152417_token = _152234_tokens[static_cast<jule::Int>(_152317_i)];
	if (_152417_token._field_id == 38LLU) {
		if ((_152317_i + 1LL) >= _152234_tokens.len()) {
			this->self->_method_push_err(_152417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_11054f670_FnDecl>();
		}
		(_152317_i)++;
		_152417_token=_152234_tokens[static_cast<jule::Int>(_152317_i)];
	}
	if (_152417_token._field_id == 35LLU) {
		if ((_152317_i + 1LL) >= _152234_tokens.len()) {
			this->self->_method_push_err(_152417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_11054f670_FnDecl>();
		}
		(_152317_i)++;
		_152417_token=_152234_tokens[static_cast<jule::Int>(_152317_i)];
	}
	if (_152417_token._field_id != 33LLU) {
		this->self->_method_push_err(_152417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_FnDecl>();
	}
	jule::Ref<_11054f670_FnDecl> _154817_f = this->self->_method_build_fn(_152234_tokens,true,false);
	if (jule::real(_154817_f) && _154817_f->_method_is_anon()) {
		this->self->_method_push_err(_154817_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	return _154817_f;
}



inline void _110754df0_Parser::_method_parse_impl_trait(jule::Ref<_11054f670_Impl> _155540_ipl,jule::Slice<_1106ec050_Token> _155556_tokens) {
	jule::Slice<jule::Ref<_110709a60_Stmt>> _155617_stms = _110709a60_split_stms(_155556_tokens);
	{
		auto __julec_range_expr = _155617_stms;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110709a60_Stmt> _110754df0_st = *__julec_range_begin;
			_iter_begin_4603068416:;
			{
				jule::Slice<_1106ec050_Token> _155821_tokens = _110754df0_st->_field_tokens;
				_1106ec050_Token _155921_token = _155821_tokens[0LL];
				jule::Bool _156021_is_pub = false;
				{
					auto _match_expr{ _155921_token._field_id };
					if (!((18LLU) == _match_expr)) { goto _case_end_4603073632; }
					_case_begin_4603073632:;
					{
						goto _iter_next_4603068416;
					}
					goto _match_end_4603071872;
					_case_end_4603073632:;
					if (!((21LLU) == _match_expr)) { goto _case_end_4603073744; }
					_case_begin_4603073744:;
					{
						_156021_is_pub=true;
						if (_155821_tokens.len() == 1LL) {
							this->self->_method_push_err(_155821_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
							goto _iter_next_4603068416;
						}
						_155821_tokens=_155821_tokens.slice(1LL);
						if (_155821_tokens.len() > 0LL) {
							_155921_token=_155821_tokens[0LL];
						}
					}
					goto _match_end_4603071872;
					_case_end_4603073744:;
					_match_end_4603071872:;
				}
				{
					auto _match_expr{ _155921_token._field_id };
					if (!((38LLU) == _match_expr || (33LLU) == _match_expr || (35LLU) == _match_expr)) { goto _case_end_4603081152; }
					_case_begin_4603081152:;
					{
						jule::Ref<_11054f670_FnDecl> _158225_f = this->self->_method_get_method(_155821_tokens);
						if (jule::real(_158225_f)) {
							_158225_f->_field_public=_156021_is_pub;
							this->self->_method_check_method_receiver(_158225_f);
							_155540_ipl->_field_methods=jule::append(_155540_ipl->_field_methods,jule::Slice<jule::Ref<_11054f670_FnDecl>>({_158225_f}));
						}
					}
					goto _match_end_4603076816;
					_case_end_4603081152:;
					_case_begin_4603074128:;
					{
						this->self->_method_push_err(_155921_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
						goto _iter_next_4603068416;
					}
					goto _match_end_4603076816;
					_case_end_4603074128:;
					_match_end_4603076816:;
				}
			}
			_iter_next_4603068416:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110754df0_st = *__julec_range_begin; goto _iter_begin_4603068416; }
			_iter_end_4603068416:;
		}
	}
}



inline void _110754df0_Parser::_method_parse_impl_struct(jule::Ref<_11054f670_Impl> _159641_ipl,jule::Slice<_1106ec050_Token> _159657_tokens) {
	jule::Slice<jule::Ref<_110709a60_Stmt>> _159717_stms = _110709a60_split_stms(_159657_tokens);
	{
		auto __julec_range_expr = _159717_stms;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110709a60_Stmt> _110754df0_st = *__julec_range_begin;
			_iter_begin_4603090640:;
			{
				jule::Slice<_1106ec050_Token> _159921_tokens = _110754df0_st->_field_tokens;
				_1106ec050_Token _160021_token = _159921_tokens[0LL];
				jule::Bool _160121_is_pub = false;
				{
					auto _match_expr{ _160021_token._field_id };
					if (!((18LLU) == _match_expr)) { goto _case_end_4603095856; }
					_case_begin_4603095856:;
					{
						goto _iter_next_4603090640;
					}
					goto _match_end_4603094096;
					_case_end_4603095856:;
					if (!((21LLU) == _match_expr)) { goto _case_end_4603095968; }
					_case_begin_4603095968:;
					{
						_160121_is_pub=true;
						if (_159921_tokens.len() == 1LL) {
							this->self->_method_push_err(_159921_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
							goto _iter_next_4603090640;
						}
						_159921_tokens=_159921_tokens.slice(1LL);
						if (_159921_tokens.len() > 0LL) {
							_160021_token=_159921_tokens[0LL];
						}
					}
					goto _match_end_4603094096;
					_case_end_4603095968:;
					_match_end_4603094096:;
				}
				{
					auto _match_expr{ _160021_token._field_id };
					if (!((38LLU) == _match_expr || (33LLU) == _match_expr || (35LLU) == _match_expr)) { goto _case_end_4603103376; }
					_case_begin_4603103376:;
					{
						jule::Ref<_11054f670_FnDecl> _162325_f = this->self->_method_get_method(_159921_tokens);
						if (jule::real(_162325_f)) {
							_162325_f->_field_public=_160121_is_pub;
							this->self->_method_check_method_receiver(_162325_f);
							_159641_ipl->_field_methods=jule::append(_159641_ipl->_field_methods,jule::Slice<jule::Ref<_11054f670_FnDecl>>({_162325_f}));
						}
					}
					goto _match_end_4603099040;
					_case_end_4603103376:;
					_case_begin_4603096352:;
					{
						this->self->_method_push_err(_160021_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
						goto _iter_next_4603090640;
					}
					goto _match_end_4603099040;
					_case_end_4603096352:;
					_match_end_4603099040:;
				}
			}
			_iter_next_4603090640:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110754df0_st = *__julec_range_begin; goto _iter_begin_4603090640; }
			_iter_end_4603090640:;
		}
	}
}



inline void _110754df0_Parser::_method_parse_impl_body(jule::Ref<_11054f670_Impl> _163739_ipl,jule::Slice<_1106ec050_Token> _163755_tokens) {
	if (_163739_ipl->_method_is_trait_impl()) {
		this->self->_method_parse_impl_trait(_163739_ipl,_163755_tokens);
		return;
	}
	this->self->_method_parse_impl_struct(_163739_ipl,_163755_tokens);
}



inline jule::Ref<_11054f670_Impl> _110754df0_Parser::_method_build_impl(jule::Slice<_1106ec050_Token> _164534_tokens) {
	_1106ec050_Token _164617_token = _164534_tokens[0LL];
	if (_164534_tokens.len() < 2LL) {
		this->self->_method_push_err(_164617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_Impl>();
	}
	_164617_token=_164534_tokens[1LL];
	if (_164617_token._field_id != 2LLU) {
		this->self->_method_push_err(_164617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_Impl>();
	}
	if (_164534_tokens.len() < 3LL) {
		this->self->_method_push_err(_164617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_Impl>();
	}
	jule::Ref<_11054f670_Impl> _166117_ipl = jule::new_struct<_11054f670_Impl>(new( std::nothrow ) _11054f670_Impl(_164617_token,_1106ec050_Token(),jule::Slice<jule::Ref<_11054f670_FnDecl>>()));
	_164617_token=_164534_tokens[2LL];
	if (_164617_token._field_id != 12LLU) {
		if ((_164617_token._field_id == 3LLU) && (_164617_token._field_kind == jule::Str("{", 1))) {
			std::tie(_166117_ipl->_field_base,_166117_ipl->_field_dest) = std::make_tuple(_166117_ipl->_field_dest,_166117_ipl->_field_base);
			_164534_tokens=_164534_tokens.slice(2LL);
			goto _julec_label_body;
		}
		this->self->_method_push_err(_164617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_Impl>();
	}
	if (_164534_tokens.len() < 4LL) {
		this->self->_method_push_err(_164617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_Impl>();
	}
	_164617_token=_164534_tokens[3LL];
	if (_164617_token._field_id != 2LLU) {
		this->self->_method_push_err(_164617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_Impl>();
	}
	_166117_ipl->_field_dest=_164617_token;
	_164534_tokens=_164534_tokens.slice(4LL);
	_julec_label_body:;
	jule::Int _169117_i = 0LL;
	jule::Slice<_1106ec050_Token> _169217_body_tokens = _110754df0_range(_169117_i,jule::Str("{", 1),jule::Str("}", 1),_164534_tokens);
	if (_169217_body_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_166117_ipl->_field_base,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11054f670_Impl>();
	}
	if (_169117_i < _164534_tokens.len()) {
		this->self->_method_push_err(_164534_tokens[static_cast<jule::Int>(_169117_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	this->self->_method_parse_impl_body(_166117_ipl,_169217_body_tokens);
	return _166117_ipl;
}



inline jule::Any _110754df0_Parser::_method_build_node_data(jule::Slice<_1106ec050_Token> _170639_tokens) {
	_1106ec050_Token _170717_token = _170639_tokens[0LL];
	{
		auto _match_expr{ _170717_token._field_id };
		if (!((19LLU) == _match_expr)) { goto _case_end_4603158720; }
		_case_begin_4603158720:;
		{
			
			return jule::Any(this->self->_method_build_use_decl(_170639_tokens,false));
		}
		goto _match_end_4603155120;
		_case_end_4603158720:;
		if (!((33LLU) == _match_expr || (35LLU) == _match_expr)) { goto _case_end_4603158832; }
		_case_begin_4603158832:;
		{
			jule::Ref<_11054f670_FnDecl> _171521_f = this->self->_method_build_fn(_170639_tokens,false,false);
			if (jule::real(_171521_f)) {
				_171521_f->_field_global=true;
				if (_171521_f->_method_is_anon()) {
					this->self->_method_push_err(_171521_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				}
			}
			return jule::Any(_171521_f);
		}
		goto _match_end_4603155120;
		_case_end_4603158832:;
		if (!((34LLU) == _match_expr || (9LLU) == _match_expr || (36LLU) == _match_expr || (38LLU) == _match_expr)) { goto _case_end_4603156688; }
		_case_begin_4603156688:;
		{
			return jule::Any(this->self->_method_build_var(_170639_tokens));
		}
		goto _match_end_4603155120;
		_case_end_4603156688:;
		if (!((10LLU) == _match_expr)) { goto _case_end_4603156800; }
		_case_begin_4603156800:;
		{
			return jule::Any(this->self->_method_build_type_alias_decl(_170639_tokens));
		}
		goto _match_end_4603155120;
		_case_end_4603156800:;
		if (!((24LLU) == _match_expr)) { goto _case_end_4603156912; }
		_case_begin_4603156912:;
		{
			return jule::Any(this->self->_method_build_enum_decl(_170639_tokens));
		}
		goto _match_end_4603155120;
		_case_end_4603156912:;
		if (!((25LLU) == _match_expr)) { goto _case_end_4603159552; }
		_case_begin_4603159552:;
		{
			return jule::Any(this->self->_method_build_struct_decl(_170639_tokens));
		}
		goto _match_end_4603155120;
		_case_end_4603159552:;
		if (!((29LLU) == _match_expr)) { goto _case_end_4603159664; }
		_case_begin_4603159664:;
		{
			return jule::Any(this->self->_method_build_trait_decl(_170639_tokens));
		}
		goto _match_end_4603155120;
		_case_end_4603159664:;
		if (!((30LLU) == _match_expr)) { goto _case_end_4603159776; }
		_case_begin_4603159776:;
		{
			return jule::Any(this->self->_method_build_impl(_170639_tokens));
		}
		goto _match_end_4603155120;
		_case_end_4603159776:;
		if (!((31LLU) == _match_expr)) { goto _case_end_4603159888; }
		_case_begin_4603159888:;
		{
			return this->self->_method_build_cpp_link(_170639_tokens);
		}
		goto _match_end_4603155120;
		_case_end_4603159888:;
		if (!((18LLU) == _match_expr)) { goto _case_end_4603160000; }
		_case_begin_4603160000:;
		{
			jule::Ref<_11054f670_Comment> _175221_c = _110754df0_build_comment(_170717_token);
			this->self->_method_process_comment(_175221_c);
			return jule::Any(_175221_c);
		}
		goto _match_end_4603155120;
		_case_end_4603160000:;
		_case_begin_4603156384:;
		{
			this->self->_method_push_err(_170717_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4603155120;
		_case_end_4603156384:;
		_match_end_4603155120:;
	}
}



inline void _110754df0_Parser::_method_check_comment_group(_11054f670_Node _176238_node) {
	if ((!(jule::real((*this)._field_comment_group)))) {
		return;
	}
	{
		auto _match_expr{ _176238_node._field_data };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_Comment>>() || _match_expr.type_is<jule::Ref<_11054f670_Directive>>())) { goto _case_end_4603180608; }
		goto _match_end_4603179456;
		_case_end_4603180608:;
		_case_begin_4603179792:;
		{
			jule::drop((*this)._field_comment_group);
		}
		goto _match_end_4603179456;
		_case_end_4603179792:;
		_match_end_4603179456:;
	}
}



inline void _110754df0_Parser::_method_check_directive(_11054f670_Node _177634_node) {
	if ((*this)._field_directives == nullptr) {
		return;
	}
	{
		auto _match_expr{ _177634_node._field_data };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_Directive>>() || _match_expr.type_is<jule::Ref<_11054f670_Comment>>())) { goto _case_end_4603186480; }
		goto _match_end_4603184864;
		_case_end_4603186480:;
		_case_begin_4603184368:;
		{
			(*this)._field_directives=nullptr;
		}
		goto _match_end_4603184864;
		_case_end_4603184368:;
		_match_end_4603184864:;
	}
}



inline void _110754df0_Parser::_method_apply_meta(_11054f670_Node _179133_node,jule::Bool _179149_is_pub) {
	{
		auto _match_expr{ _179133_node._field_data };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_VarDecl>>())) { goto _case_end_4603190928; }
		_case_begin_4603190928:;
		{
			jule::Ref<_11054f670_VarDecl> _179421_v = _179133_node._field_data.operator jule::Ref<_11054f670_VarDecl>();
			if ((!(jule::real(_179421_v)))) {
				return;
			}
			_179421_v->_field_public=_179149_is_pub;
			_179149_is_pub=false;
			_179421_v->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
			_179421_v->_field_directives=(*this)._field_directives;
			(*this)._field_directives=nullptr;
		}
		goto _match_end_4603190192;
		_case_end_4603190928:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_FnDecl>>())) { goto _case_end_4603191040; }
		_case_begin_4603191040:;
		{
			jule::Ref<_11054f670_FnDecl> _180821_f = _179133_node._field_data.operator jule::Ref<_11054f670_FnDecl>();
			if ((!(jule::real(_180821_f)))) {
				return;
			}
			_180821_f->_field_public=_179149_is_pub;
			_179149_is_pub=false;
			_180821_f->_field_directives=(*this)._field_directives;
			(*this)._field_directives=nullptr;
			_180821_f->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
		}
		goto _match_end_4603190192;
		_case_end_4603191040:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_TypeAliasDecl>>())) { goto _case_end_4603191152; }
		_case_begin_4603191152:;
		{
			jule::Ref<_11054f670_TypeAliasDecl> _182121_tad = _179133_node._field_data.operator jule::Ref<_11054f670_TypeAliasDecl>();
			if ((!(jule::real(_182121_tad)))) {
				return;
			}
			_182121_tad->_field_public=_179149_is_pub;
			_179149_is_pub=false;
			_182121_tad->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
		}
		goto _match_end_4603190192;
		_case_end_4603191152:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_EnumDecl>>())) { goto _case_end_4603191264; }
		_case_begin_4603191264:;
		{
			jule::Ref<_11054f670_EnumDecl> _183121_ed = _179133_node._field_data.operator jule::Ref<_11054f670_EnumDecl>();
			if ((!(jule::real(_183121_ed)))) {
				return;
			}
			_183121_ed->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
			_183121_ed->_field_public=_179149_is_pub;
			_179149_is_pub=false;
		}
		goto _match_end_4603190192;
		_case_end_4603191264:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_StructDecl>>())) { goto _case_end_4603191392; }
		_case_begin_4603191392:;
		{
			jule::Ref<_11054f670_StructDecl> _184121_sd = _179133_node._field_data.operator jule::Ref<_11054f670_StructDecl>();
			if ((!(jule::real(_184121_sd)))) {
				return;
			}
			_184121_sd->_field_directives=(*this)._field_directives;
			(*this)._field_directives=nullptr;
			_184121_sd->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
			_184121_sd->_field_public=_179149_is_pub;
			_179149_is_pub=false;
		}
		goto _match_end_4603190192;
		_case_end_4603191392:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_TraitDecl>>())) { goto _case_end_4603191520; }
		_case_begin_4603191520:;
		{
			jule::Ref<_11054f670_TraitDecl> _185321_td = _179133_node._field_data.operator jule::Ref<_11054f670_TraitDecl>();
			if ((!(jule::real(_185321_td)))) {
				return;
			}
			_185321_td->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
			_185321_td->_field_public=_179149_is_pub;
			_179149_is_pub=false;
		}
		goto _match_end_4603190192;
		_case_end_4603191520:;
		_match_end_4603190192:;
	}
	if (_179149_is_pub) {
		(*this)._method_push_err(_179133_node._field_token,jule::Str("define is not supports pub modifier", 35),jule::Slice<jule::Any>({}));
	}
}



inline void _110754df0_Parser::_method_check_use_decl(_11054f670_Node _186733_node) {
	{
		auto _match_expr{ _186733_node._field_data };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_UseDecl>>())) { goto _case_end_4603227376; }
		goto _match_end_4603225776;
		_case_end_4603227376:;
		_case_begin_4603226464:;
		{
			return;
		}
		goto _match_end_4603225776;
		_case_end_4603226464:;
		_match_end_4603225776:;
	}
	if ((*this)._field_ast->_field_decls._method_len() > 0LL) {
		(*this)._method_push_err(_186733_node._field_token,jule::Str("use declarations must declared before other declarations", 56),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("move this use declaration to top of source file", 47),jule::Slice<jule::Any>({}));
	}
}



inline std::tuple<jule::Bool,jule::Any> _110754df0_Parser::_method_build_general_scope_node_data(jule::Slice<_1106ec050_Token> _188253_st) {
	jule::Any _188282_data = jule::Any();
	jule::Bool _188268_is_pub = jule::Bool();
	if (_188253_st[0LL]._field_id == 21LLU) {
		_188268_is_pub=true;
		_188253_st=_188253_st.slice(1LL);
		if (_188253_st.len() == 0LL) {
			this->self->_method_push_err(_188253_st[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return std::make_tuple(_188268_is_pub,_188282_data);
		}
	}
	_188282_data=this->self->_method_build_node_data(_188253_st);
	_188268_is_pub = _188268_is_pub;
	_188282_data = _188282_data;
	return std::make_tuple(_188268_is_pub,_188282_data);
}



inline _11054f670_Node _110754df0_Parser::_method_parse_node(jule::Slice<_1106ec050_Token> _189734_st) {
	_11054f670_Node _189817_node = _11054f670_Node(_189734_st[0LL],jule::Any());
	jule::Bool _190214_is_pub;
	jule::Any _190226_data;
	std::tie(_190214_is_pub,_190226_data) = this->self->_method_build_general_scope_node_data(_189734_st);
	if (_190226_data == nullptr) {
		return _189817_node;
	}
	_189817_node._field_data=_190226_data;
	this->self->_method_apply_meta(_189817_node,_190214_is_pub);
	this->self->_method_check_comment_group(_189817_node);
	this->self->_method_check_directive(_189817_node);
	this->self->_method_check_use_decl(_189817_node);
	return _189817_node;
}



inline void _110754df0_Parser::_method_append_node(jule::Slice<_1106ec050_Token> _191635_st) {
	if (_191635_st.len() == 0LL) {
		return;
	}
	_11054f670_Node _192117_node = this->self->_method_parse_node(_191635_st);
	if ((_192117_node._field_data == nullptr) || this->self->_method_stopped()) {
		return;
	}
	{
		if (!((_192117_node._method_is_use_decl()))) { goto _case_end_4603275712; }
		_case_begin_4603275712:;
		{
			this->self->_field_ast->_field_use_decls._method_push(_192117_node._field_data.operator jule::Ref<_11054f670_UseDecl>());
		}
		goto _match_end_4603274288;
		_case_end_4603275712:;
		if (!((_192117_node._method_is_decl()))) { goto _case_end_4603277376; }
		_case_begin_4603277376:;
		{
			this->self->_field_ast->_field_decls._method_push(_192117_node);
		}
		goto _match_end_4603274288;
		_case_end_4603277376:;
		if (!((_192117_node._method_is_comment()))) { goto _case_end_4603275232; }
		_case_begin_4603275232:;
		{
			jule::Ref<_11054f670_Comment> _193621_c = _192117_node._field_data.operator jule::Ref<_11054f670_Comment>();
			this->self->_field_ast->_field_comments._method_push(_193621_c);
		}
		goto _match_end_4603274288;
		_case_end_4603275232:;
		if (!((_192117_node._method_is_impl()))) { goto _case_end_4603275344; }
		_case_begin_4603275344:;
		{
			this->self->_field_ast->_field_impls._method_push(_192117_node._field_data.operator jule::Ref<_11054f670_Impl>());
		}
		goto _match_end_4603274288;
		_case_end_4603275344:;
		_case_begin_4603274928:;
		{
			this->self->_method_push_err(_192117_node._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4603274288;
		_case_end_4603274928:;
		_match_end_4603274288:;
	}
}



inline void _110754df0_Parser::_method_remove_range(jule::Int _194731_i,jule::Str _194739_kind,jule::Slice<_1106ec050_Token>& _194751_tokens,jule::Slice<jule::Int>& _194773_ranges) {
	jule::Str _194813_close = _110754df0_get_close_kind_of_brace(_194739_kind);
	_iter_begin_4603289472:;
	if (!(_194731_i >= 0LL)) { goto _iter_end_4603289472; }
	{
		_1106ec050_Token _195017_tok = _194751_tokens[static_cast<jule::Int>(_194773_ranges[static_cast<jule::Int>(_194731_i)])];
		if (_195017_tok._field_kind != _194813_close) {
			goto _iter_next_4603289472;
		}
		_194773_ranges=jule::append(_194773_ranges.slice(0LL,static_cast<jule::Int>(_194731_i)),_194773_ranges.slice(static_cast<jule::Int>(_194731_i + 1LL)));
		goto _iter_end_4603289472;
	}
	_iter_next_4603289472:;
	(_194731_i)--;
	goto _iter_begin_4603289472;
	_iter_end_4603289472:;
}



inline void _110754df0_Parser::_method_push_wrong_order_close_err(_1106ec050_Token _196045_t,jule::Slice<_1106ec050_Token>& _196056_tokens,jule::Slice<jule::Int>& _196074_ranges) {
	{
		auto _match_expr{ _196056_tokens[static_cast<jule::Int>(_196074_ranges[static_cast<jule::Int>(_196074_ranges.len() - 1LL)])]._field_kind };
		if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4603307216; }
		_case_begin_4603307216:;
		{
			(*this)._method_push_err(_196045_t,jule::Str("was expected parentheses close", 30),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4603305072;
		_case_end_4603307216:;
		if (!((jule::Str("{", 1)) == _match_expr)) { goto _case_end_4603307328; }
		_case_begin_4603307328:;
		{
			(*this)._method_push_err(_196045_t,jule::Str("was expected brace close", 24),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4603305072;
		_case_end_4603307328:;
		if (!((jule::Str("[", 1)) == _match_expr)) { goto _case_end_4603307440; }
		_case_begin_4603307440:;
		{
			(*this)._method_push_err(_196045_t,jule::Str("was expected bracket close", 26),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4603305072;
		_case_end_4603307440:;
		_match_end_4603305072:;
	}
}



inline void _110754df0_Parser::_method_push_range_close(_1106ec050_Token _196835_t,jule::Str _196845_left,jule::Slice<_1106ec050_Token>& _196857_tokens,jule::Slice<jule::Int>& _196879_ranges) {
	jule::I64 _196913_n = _196879_ranges.len();
	if (_196913_n == 0LL) {
		{
			auto _match_expr{ _196835_t._field_kind };
			if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4603319824; }
			_case_begin_4603319824:;
			{
				(*this)._method_push_err(_196835_t,jule::Str("extra closed brackets", 21),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4603319136;
			_case_end_4603319824:;
			if (!((jule::Str("}", 1)) == _match_expr)) { goto _case_end_4603319952; }
			_case_begin_4603319952:;
			{
				(*this)._method_push_err(_196835_t,jule::Str("extra closed braces", 19),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4603319136;
			_case_end_4603319952:;
			if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4603320080; }
			_case_begin_4603320080:;
			{
				(*this)._method_push_err(_196835_t,jule::Str("extra closed parentheses", 24),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4603319136;
			_case_end_4603320080:;
			_match_end_4603319136:;
		}
		return;
	} else if (_196857_tokens[static_cast<jule::Int>(_196879_ranges[static_cast<jule::Int>(_196913_n - 1LL)])]._field_kind != _196845_left) {
		(*this)._method_push_wrong_order_close_err(_196835_t,_196857_tokens,_196879_ranges);
	}
	(*this)._method_remove_range(static_cast<jule::I64>(_196913_n - 1LL),_196835_t._field_kind,_196857_tokens,_196879_ranges);
}



inline void _110754df0_Parser::_method_check_ranges(jule::Slice<_1106ec050_Token> _198331_tokens) {
	jule::Slice<jule::Int> _198417_ranges = nullptr;
	{
		auto __julec_range_expr = _198331_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110754df0_i = 0;
			_1106ec050_Token _110754df0_token = *__julec_range_begin;
			_iter_begin_4603332048:;
			{
				if (_110754df0_token._field_id != 3LLU) {
					goto _iter_next_4603332048;
				}
				{
					auto _match_expr{ _110754df0_token._field_kind };
					if (!((jule::Str("(", 1)) == _match_expr || (jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr)) { goto _case_end_4603335984; }
					_case_begin_4603335984:;
					{
						_198417_ranges=jule::append(_198417_ranges,jule::Slice<jule::Int>({_110754df0_i}));
					}
					goto _match_end_4603335712;
					_case_end_4603335984:;
					if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4603336096; }
					_case_begin_4603336096:;
					{
						(*this)._method_push_range_close(_110754df0_token,jule::Str("(", 1),_198331_tokens,_198417_ranges);
					}
					goto _match_end_4603335712;
					_case_end_4603336096:;
					if (!((jule::Str("}", 1)) == _match_expr)) { goto _case_end_4603336208; }
					_case_begin_4603336208:;
					{
						(*this)._method_push_range_close(_110754df0_token,jule::Str("{", 1),_198331_tokens,_198417_ranges);
					}
					goto _match_end_4603335712;
					_case_end_4603336208:;
					if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4603336320; }
					_case_begin_4603336320:;
					{
						(*this)._method_push_range_close(_110754df0_token,jule::Str("[", 1),_198331_tokens,_198417_ranges);
					}
					goto _match_end_4603335712;
					_case_end_4603336320:;
					_match_end_4603335712:;
				}
			}
			_iter_next_4603332048:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110754df0_i; _110754df0_token = *__julec_range_begin; goto _iter_begin_4603332048; }
			_iter_end_4603332048:;
		}
	}
	{
		auto __julec_range_expr = _198417_ranges;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110754df0_i = *__julec_range_begin;
			_iter_begin_4603340352:;
			{
				_1106ec050_Token _200917_token = _198331_tokens[static_cast<jule::Int>(_110754df0_i)];
				{
					auto _match_expr{ _200917_token._field_kind };
					if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4603345072; }
					_case_begin_4603345072:;
					{
						(*this)._method_push_err(_200917_token,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>({}));
					}
					goto _match_end_4603343872;
					_case_end_4603345072:;
					if (!((jule::Str("{", 1)) == _match_expr)) { goto _case_end_4603345184; }
					_case_begin_4603345184:;
					{
						(*this)._method_push_err(_200917_token,jule::Str("brace waiting to close", 22),jule::Slice<jule::Any>({}));
					}
					goto _match_end_4603343872;
					_case_end_4603345184:;
					if (!((jule::Str("[", 1)) == _match_expr)) { goto _case_end_4603345296; }
					_case_begin_4603345296:;
					{
						(*this)._method_push_err(_200917_token,jule::Str("bracket are waiting to close", 28),jule::Slice<jule::Any>({}));
					}
					goto _match_end_4603343872;
					_case_end_4603345296:;
					_match_end_4603343872:;
				}
			}
			_iter_next_4603340352:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110754df0_i = *__julec_range_begin; goto _iter_begin_4603340352; }
			_iter_end_4603340352:;
		}
	}
}



inline void _110754df0_Parser::_method_parse(jule::Ref<_11054ec70_File> _201829_f) {
	this->self->_field_ast=jule::new_struct<_1104fada0_Ast>(new( std::nothrow ) _1104fada0_Ast(_201829_f,_1108ddf20_Vector_1(),_1108ddf20_Vector_2(),_1108ddf20_Vector_3(),_1108ddf20_Vector_4(),_1108ddf20_Vector_5()));
	jule::Slice<_1106ec050_Token> _202317_tokens = __jule_parser_vector_as_slice<_1108ddf20_Vector_0,_1106ec050_Token>(_201829_f->_method_tokens());
	this->self->_method_check_ranges(_202317_tokens);
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	jule::Slice<jule::Ref<_110709a60_Stmt>> _203017_stms = _110709a60_split_stms(_202317_tokens);
	jule::Int _203317_i = 0LL;
	_iter_begin_4603351040:;
	if (!(_203317_i < _203017_stms.len())) { goto _iter_end_4603351040; }
	{
		jule::Ref<_110709a60_Stmt> _203521_st = _203017_stms[static_cast<jule::Int>(_203317_i)];
		if (_203521_st->_field_tokens.len() == 0LL) {
			return;
		}
		jule::Any _204025_data;
		std::tie(std::ignore,_204025_data) = this->self->_method_build_general_scope_node_data(_203521_st->_field_tokens);
		if (_204025_data == nullptr) {
			goto _iter_end_4603351040;
		}
		if (this->self->_method_stopped()) {
			return;
		}
		_11054f670_Node _204921_node = _11054f670_Node(_1106ec050_Token(),_204025_data);
		if (_204921_node._method_is_comment()) {
			jule::Ref<_11054f670_Directive> _205125_d = this->self->_method_get_directive(_204921_node._field_data.operator jule::Ref<_11054f670_Comment>());
			if (jule::real(_205125_d) && _127e7c3f0_is_top_directive(_205125_d->_field_tag)) {
				this->self->_field_ast->_field_top_directives._method_push(_205125_d);
			}
		} else {
			goto _iter_end_4603351040;
		}
	}
	_iter_next_4603351040:;
	(_203317_i)++;
	goto _iter_begin_4603351040;
	_iter_end_4603351040:;
	this->self->_field_errors=nullptr;
	_iter_begin_4603358640:;
	if (!(_203317_i < _203017_stms.len())) { goto _iter_end_4603358640; }
	{
		jule::Ref<_110709a60_Stmt> _206421_st = _203017_stms[static_cast<jule::Int>(_203317_i)];
		this->self->_method_append_node(_206421_st->_field_tokens);
		if (this->self->_method_stopped()) {
			goto _iter_end_4603358640;
		}
	}
	_iter_next_4603358640:;
	(_203317_i)++;
	goto _iter_begin_4603358640;
	_iter_end_4603358640:;
}







std::ostream &operator<<(std::ostream &_Stream, const _110754df0_Parser &_Src) {
	_Stream << "Parser{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "comment_group:" << _Src._field_comment_group << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}



inline void _110a15a10_TypeBuilder::_method_push_err(_1106ec050_Token _7827_token,jule::Str _7841_fmt) {
	if ((*this)._field_err) {
		(*this)._field_p->_method_push_err(_7827_token,_7841_fmt,jule::Slice<jule::Any>({}));
	}
}



inline void _110a15a10_TypeBuilder::_method_push_suggestion(jule::Str _8534_fmt,jule::Slice<jule::Any> _8547_args) {
	if ((*this)._field_err) {
		(*this)._field_p->_method_push_suggestion(_8534_fmt,_8547_args);
	}
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_build_prim(void) {
	jule::Ref<_11054f670_TypeDecl> _9217_t = _110a15a10_build_prim_type((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))]);
	((*((*this)._field_i)))++;
	return _9217_t;
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_build_namespace(void) {
	jule::Ref<_11054f670_TypeDecl> _9817_t = jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))],jule::Any()));
	jule::Ref<_11054f670_NamespaceTypeDecl> _10217_nst = jule::new_struct<_11054f670_NamespaceTypeDecl>(new( std::nothrow ) _11054f670_NamespaceTypeDecl());
	jule::Int _10317_n = 0LL;
	_iter_begin_4603395840:;
	if (!((*((*this)._field_i)) < (*this)._field_tokens.len())) { goto _iter_end_4603395840; }
	{
		_1106ec050_Token _10521_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
		if (jule::mod(_10317_n,2LL) == 0LL) {
			if (_10521_token._field_id != 2LLU) {
				(*this)._method_push_err(_10521_token,jule::Str("invalid syntax", 14));
				(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
			}
			_10217_nst->_field_idents=jule::append(_10217_nst->_field_idents,jule::Slice<_1106ec050_Token>({_10521_token}));
		} else if (_10521_token._field_id != 23LLU) {
			goto _iter_end_4603395840;
		}
		(_10317_n)++;
	}
	_iter_next_4603395840:;
	((*((*this)._field_i)))++;
	goto _iter_begin_4603395840;
	_iter_end_4603395840:;
	_10217_nst->_field_idents=_10217_nst->_field_idents.slice(0LL,static_cast<jule::Int>(_10217_nst->_field_idents.len() - 1LL));
	((*((*this)._field_i)))--;
	_10217_nst->_field_kind=(*this)._method_build_ident()->_field_kind.operator jule::Ref<_11054f670_IdentTypeDecl>();
	_9817_t->_field_kind=jule::Any(_10217_nst);
	return _9817_t;
}



inline jule::Slice<jule::Ref<_11054f670_TypeDecl>> _110a15a10_TypeBuilder::_method_build_generics(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		return nullptr;
	}
	_1106ec050_Token _13113_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if ((_13113_token._field_id != 3LLU) || (_13113_token._field_kind != jule::Str("[", 1))) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_1106ec050_Token>> _13617_parts = (*this)._method_ident_generics();
	if (_13617_parts.len() == 0LL) {
		(*this)._method_push_err(_13113_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	jule::Slice<jule::Ref<_11054f670_TypeDecl>> _14217_types = jule::Slice<jule::Ref<_11054f670_TypeDecl>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_13617_parts.len())));
	{
		auto __julec_range_expr = _13617_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110a15a10_i = 0;
			jule::Slice<_1106ec050_Token> _110a15a10_part = *__julec_range_begin;
			_iter_begin_4603424096:;
			{
				jule::Int _14421_j = 0LL;
				jule::Ref<_11054f670_TypeDecl> _14522_t;
				std::tie(_14522_t,std::ignore) = (*this)._field_p->_method_build_type(_110a15a10_part,(&(_14421_j)),true);
				if (_14421_j < _110a15a10_part.len()) {
					(*this)._method_push_err(_110a15a10_part[static_cast<jule::Int>(_14421_j)],jule::Str("invalid syntax", 14));
				}
				_14217_types[static_cast<jule::Int>(_110a15a10_i)]=_14522_t;
			}
			_iter_next_4603424096:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110a15a10_i; _110a15a10_part = *__julec_range_begin; goto _iter_begin_4603424096; }
			_iter_end_4603424096:;
		}
	}
	return _14217_types;
}



inline jule::Slice<jule::Slice<_1106ec050_Token>> _110a15a10_TypeBuilder::_method_ident_generics(void) {
	jule::Int _15513_first = (*((*this)._field_i));
	jule::Int _15617_range_n = 0LL;
	_iter_begin_4603434080:;
	if (!((*((*this)._field_i)) < (*this)._field_tokens.len())) { goto _iter_end_4603434080; }
	{
		_1106ec050_Token _15817_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
		if (_15817_token._field_id == 3LLU) {
			{
				auto _match_expr{ _15817_token._field_kind };
				if (!((jule::Str("[", 1)) == _match_expr)) { goto _case_end_4603438256; }
				_case_begin_4603438256:;
				{
					(_15617_range_n)++;
				}
				goto _match_end_4603437520;
				_case_end_4603438256:;
				if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4603438368; }
				_case_begin_4603438368:;
				{
					(_15617_range_n)--;
				}
				goto _match_end_4603437520;
				_case_end_4603438368:;
				_match_end_4603437520:;
			}
		}
		if (_15617_range_n == 0LL) {
			((*((*this)._field_i)))++;
			goto _iter_end_4603434080;
		}
	}
	_iter_next_4603434080:;
	((*((*this)._field_i)))++;
	goto _iter_begin_4603434080;
	_iter_end_4603434080:;
	jule::Slice<_1106ec050_Token> _17017_tokens = (*this)._field_tokens.slice(static_cast<jule::Int>(_15513_first + 1LL),static_cast<jule::Int>((*((*this)._field_i)) - 1LL));
	jule::Slice<jule::Slice<_1106ec050_Token>> _17118_parts;
	jule::Slice<_127e05da0_Log> _17125_errors;
	std::tie(_17118_parts,_17125_errors) = _110754df0_parts(_17017_tokens,8LLU,true);
	if ((*this)._field_err) {
		(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_17125_errors);
	}
	return _17118_parts;
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_build_ident(void) {
	if ((((*((*this)._field_i)) + 1LL) < (*this)._field_tokens.len()) && ((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)) + 1LL)]._field_id == 23LLU)) {
		return (*this)._method_build_namespace();
	}
	_1106ec050_Token _18217_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	jule::Ref<_11054f670_IdentTypeDecl> _18317_it = jule::new_struct<_11054f670_IdentTypeDecl>(new( std::nothrow ) _11054f670_IdentTypeDecl(_18217_token,_18217_token._field_kind,false,jule::Slice<jule::Ref<_11054f670_TypeDecl>>()));
	((*((*this)._field_i)))++;
	_18317_it->_field_generics=(*this)._method_build_generics();
	return jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_18217_token,jule::Any(_18317_it)));
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_build_cpp_link(void) {
	if ((((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) || ((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)) + 1LL)]._field_id != 20LLU)) {
		(*this)._method_push_err((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))],jule::Str("invalid syntax", 14));
		return jule::new_ref<_11054f670_TypeDecl>();
	}
	(*((*this)._field_i))+=2LL;
	jule::Ref<_11054f670_TypeDecl> _20217_t = (*this)._method_build_ident();
	_20217_t->_field_kind.operator jule::Ref<_11054f670_IdentTypeDecl>()->_field_cpp_linked=true;
	return _20217_t;
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_build_fn(void) {
	_1106ec050_Token _20817_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	jule::Ref<_11054f670_FnDecl> _20917_f = (*this)._field_p->_method_build_fn_prototype((*this)._field_tokens,(*((*this)._field_i)),false);
	if ((!(jule::real(_20917_f)))) {
		return jule::new_ref<_11054f670_TypeDecl>();
	}
	if ((!(_20917_f->_method_is_anon()))) {
		(*this)._method_push_err(_20917_f->_field_token,jule::Str("invalid syntax", 14));
	}
	return jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_20817_token,jule::Any(_20917_f)));
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_build_ptr(void) {
	_1106ec050_Token _22317_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_22317_token,jule::Str("invalid syntax", 14));
		return jule::new_ref<_11054f670_TypeDecl>();
	}
	((*((*this)._field_i)))++;
	if ((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))]._field_id == 35LLU) {
		((*((*this)._field_i)))++;
		return jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_22317_token,jule::Any(jule::new_struct<_11054f670_PtrTypeDecl>(new( std::nothrow ) _11054f670_PtrTypeDecl(jule::new_ref<_11054f670_TypeDecl>())))));
	}
	jule::Ref<_11054f670_TypeDecl> _24017_elem = (*this)._method_step();
	if ((!(jule::real(_24017_elem)))) {
		return jule::new_ref<_11054f670_TypeDecl>();
	}
	return jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_22317_token,jule::Any(jule::new_struct<_11054f670_PtrTypeDecl>(new( std::nothrow ) _11054f670_PtrTypeDecl(_24017_elem)))));
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_build_ref(void) {
	_1106ec050_Token _25417_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_25417_token,jule::Str("invalid syntax", 14));
		return jule::new_ref<_11054f670_TypeDecl>();
	}
	((*((*this)._field_i)))++;
	jule::Ref<_11054f670_TypeDecl> _26117_elem = (*this)._method_step();
	if ((!(jule::real(_26117_elem)))) {
		return jule::new_ref<_11054f670_TypeDecl>();
	}
	return jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_25417_token,jule::Any(jule::new_struct<_11054f670_RefTypeDecl>(new( std::nothrow ) _11054f670_RefTypeDecl(_26117_elem)))));
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_build_op(void) {
	_1106ec050_Token _27517_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	{
		auto _match_expr{ _27517_token._field_kind };
		if (!((jule::Str("*", 1)) == _match_expr)) { goto _case_end_4603508144; }
		_case_begin_4603508144:;
		{
			return (*this)._method_build_ptr();
		}
		goto _match_end_4603502896;
		_case_end_4603508144:;
		if (!((jule::Str("&", 1)) == _match_expr)) { goto _case_end_4603506976; }
		_case_begin_4603506976:;
		{
			return (*this)._method_build_ref();
		}
		goto _match_end_4603502896;
		_case_end_4603506976:;
		if (!((jule::Str("&&", 2)) == _match_expr)) { goto _case_end_4603507808; }
		_case_begin_4603507808:;
		{
			(*this)._method_push_err(_27517_token,jule::Str("references cannot reference to another reference", 48));
			return (*this)._method_build_ref();
		}
		goto _match_end_4603502896;
		_case_end_4603507808:;
		_case_begin_4603504912:;
		{
			(*this)._method_push_err(_27517_token,jule::Str("invalid syntax", 14));
			return jule::new_ref<_11054f670_TypeDecl>();
		}
		goto _match_end_4603502896;
		_case_end_4603504912:;
		_match_end_4603502896:;
	}
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_build_slc(void) {
	_1106ec050_Token _29417_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	((*((*this)._field_i)))++;
	jule::Ref<_11054f670_TypeDecl> _29617_elem = (*this)._method_step();
	if ((!(jule::real(_29617_elem)))) {
		return jule::new_ref<_11054f670_TypeDecl>();
	}
	return jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_29417_token,jule::Any(jule::new_struct<_11054f670_SlcTypeDecl>(new( std::nothrow ) _11054f670_SlcTypeDecl(_29617_elem)))));
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_build_arr(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)) - 1LL)],jule::Str("data-type missing", 17));
		return jule::new_ref<_11054f670_TypeDecl>();
	}
	jule::Int _31713_expr_delta = (*((*this)._field_i));
	jule::Ref<_11054f670_TypeDecl> _31917_elem = (*this)._method_step();
	if ((!(jule::real(_31917_elem)))) {
		return jule::new_ref<_11054f670_TypeDecl>();
	}
	jule::Ref<_11054f670_ArrTypeDecl> _32417_arrt = jule::new_struct<_11054f670_ArrTypeDecl>(new( std::nothrow ) _11054f670_ArrTypeDecl(_31917_elem,jule::Ref<_11054f670_Expr>()));
	jule::Slice<_1106ec050_Token> _32821_expr_tokens;
	std::tie(std::ignore,_32821_expr_tokens) = _110754df0_range_last((*this)._field_tokens.slice(0LL,static_cast<jule::Int>(_31713_expr_delta)));
	_32821_expr_tokens=_32821_expr_tokens.slice(1LL,static_cast<jule::Int>(_32821_expr_tokens.len() - 1LL));
	_1106ec050_Token _33017_token = _32821_expr_tokens[0LL];
	if (((_32821_expr_tokens.len() == 1LL) && (_33017_token._field_id == 7LLU)) && (_33017_token._field_kind == jule::Str("...", 3))) {
	} else {
		_32417_arrt->_field_size=(*this)._field_p->_method_build_expr(_32821_expr_tokens);
	}
	return jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_33017_token,jule::Any(_32417_arrt)));
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_build_map(jule::Int _34328_colon,jule::Slice<_1106ec050_Token> _34344_tokens) {
	_1106ec050_Token _34417_colon_token = (*this)._field_tokens[static_cast<jule::Int>(_34328_colon)];
	if ((_34328_colon == 0LL) || ((_34328_colon + 1LL) >= _34344_tokens.len())) {
		(*this)._method_push_err(_34417_colon_token,jule::Str("data-type missing", 17));
		return jule::new_ref<_11054f670_TypeDecl>();
	}
	jule::Slice<_1106ec050_Token> _34917_key_tokens = _34344_tokens.slice(0LL,static_cast<jule::Int>(_34328_colon));
	jule::Slice<_1106ec050_Token> _35017_val_tokens = _34344_tokens.slice(static_cast<jule::Int>(_34328_colon + 1LL));
	jule::Ref<_11054f670_MapTypeDecl> _35117_mapt = jule::new_struct<_11054f670_MapTypeDecl>(new( std::nothrow ) _11054f670_MapTypeDecl());
	jule::Int _35317_j = 0LL;
	jule::Ref<_11054f670_TypeDecl> _35418_keyt;
	jule::Bool _35428_ok;
	std::tie(_35418_keyt,_35428_ok) = (*this)._field_p->_method_build_type(_34917_key_tokens,(&(_35317_j)),(*this)._field_err);
	if ((!(_35428_ok))) {
		return jule::new_ref<_11054f670_TypeDecl>();
	} else if (_35317_j < _34917_key_tokens.len()) {
		(*this)._method_push_err(_34917_key_tokens[static_cast<jule::Int>(_35317_j)],jule::Str("invalid syntax", 14));
	}
	_35117_mapt->_field_key=_35418_keyt;
	_35317_j=0LL;
	jule::Ref<_11054f670_TypeDecl> _36318_valt;
	std::tie(_36318_valt,_35428_ok) = (*this)._field_p->_method_build_type(_35017_val_tokens,(&(_35317_j)),(*this)._field_err);
	if ((!(_35428_ok))) {
		return jule::new_ref<_11054f670_TypeDecl>();
	} else if (_35317_j < _35017_val_tokens.len()) {
		(*this)._method_push_err(_35017_val_tokens[static_cast<jule::Int>(_35317_j)],jule::Str("invalid syntax", 14));
	}
	_35117_mapt->_field_val=_36318_valt;
	return jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_34417_colon_token,jule::Any(_35117_mapt)));
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_build_enumerable(void) {
	_1106ec050_Token _37817_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if (((((*((*this)._field_i)) + 2LL) >= (*this)._field_tokens.len()) || (_37817_token._field_id != 3LLU)) || (_37817_token._field_kind != jule::Str("[", 1))) {
		(*this)._method_push_err(_37817_token,jule::Str("invalid syntax", 14));
		return jule::new_ref<_11054f670_TypeDecl>();
	}
	((*((*this)._field_i)))++;
	_37817_token=(*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if ((_37817_token._field_id == 3LLU) && (_37817_token._field_kind == jule::Str("]", 1))) {
		return (*this)._method_build_slc();
	}
	((*((*this)._field_i)))--;
	jule::Slice<_1106ec050_Token> _39218_map_tokens;
	jule::Int _39230_colon;
	std::tie(_39218_map_tokens,_39230_colon) = _110a15a10_split_map_range((*this)._field_tokens,(*((*this)._field_i)));
	((*((*this)._field_i)))++;
	if (_39230_colon == -1LL) {
		return (*this)._method_build_arr();
	}
	return (*this)._method_build_map(_39230_colon,_39218_map_tokens);
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_TypeBuilder::_method_step(void) {
	_1106ec050_Token _40113_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	{
		auto _match_expr{ _40113_token._field_id };
		if (!((1LLU) == _match_expr)) { goto _case_end_4603582304; }
		_case_begin_4603582304:;
		{
			return (*this)._method_build_prim();
		}
		goto _match_end_4603575168;
		_case_end_4603582304:;
		if (!((2LLU) == _match_expr)) { goto _case_end_4603582416; }
		_case_begin_4603582416:;
		{
			return (*this)._method_build_ident();
		}
		goto _match_end_4603575168;
		_case_end_4603582416:;
		if (!((31LLU) == _match_expr)) { goto _case_end_4603579264; }
		_case_begin_4603579264:;
		{
			return (*this)._method_build_cpp_link();
		}
		goto _match_end_4603575168;
		_case_end_4603579264:;
		if (!((33LLU) == _match_expr)) { goto _case_end_4603579376; }
		_case_begin_4603579376:;
		{
			return (*this)._method_build_fn();
		}
		goto _match_end_4603575168;
		_case_end_4603579376:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4603579488; }
		_case_begin_4603579488:;
		{
			return (*this)._method_build_op();
		}
		goto _match_end_4603575168;
		_case_end_4603579488:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4603581696; }
		_case_begin_4603581696:;
		{
			return (*this)._method_build_enumerable();
		}
		goto _match_end_4603575168;
		_case_end_4603581696:;
		_case_begin_4603578960:;
		{
			((*((*this)._field_i)))++;
			(*this)._method_push_err(_40113_token,jule::Str("invalid syntax", 14));
			return jule::new_ref<_11054f670_TypeDecl>();
		}
		goto _match_end_4603575168;
		_case_end_4603578960:;
		_match_end_4603575168:;
	}
}



inline std::tuple<jule::Ref<_11054f670_TypeDecl>,jule::Bool> _110a15a10_TypeBuilder::_method_build(void) {
	jule::Bool _43044_ok = jule::Bool();
	jule::Ref<_11054f670_TypeDecl> _43117_root = (*this)._method_step();
	if ((!(jule::real(_43117_root)))) {
		_43044_ok = false;
		return std::make_tuple(_110a15a10_build_void_type(),_43044_ok);
	}
	_43044_ok = true;
	return std::make_tuple(_43117_root,_43044_ok);
}







std::ostream &operator<<(std::ostream &_Stream, const _110a15a10_TypeBuilder &_Src) {
	_Stream << "TypeBuilder{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_1118cee40_Const> _1118cee40_Const::_static_method_new_i64(jule::I64 _1327_x) {
	return jule::new_struct<_1118cee40_Const>(new( std::nothrow ) _1118cee40_Const(jule::Any(_1327_x)));
}



inline jule::Ref<_1118cee40_Const> _1118cee40_Const::_static_method_new_u64(jule::U64 _1527_x) {
	return jule::new_struct<_1118cee40_Const>(new( std::nothrow ) _1118cee40_Const(jule::Any(_1527_x)));
}



inline jule::Ref<_1118cee40_Const> _1118cee40_Const::_static_method_new_bool(jule::Bool _1728_x) {
	return jule::new_struct<_1118cee40_Const>(new( std::nothrow ) _1118cee40_Const(jule::Any(_1728_x)));
}



inline jule::Ref<_1118cee40_Const> _1118cee40_Const::_static_method_new_str(jule::Str _1927_x) {
	return jule::new_struct<_1118cee40_Const>(new( std::nothrow ) _1118cee40_Const(jule::Any(_1927_x)));
}



inline jule::Ref<_1118cee40_Const> _1118cee40_Const::_static_method_new_f64(jule::F64 _2127_x) {
	return jule::new_struct<_1118cee40_Const>(new( std::nothrow ) _1118cee40_Const(jule::Any(_2127_x)));
}



inline jule::Ref<_1118cee40_Const> _1118cee40_Const::_static_method_new_nil(void) {
	return jule::new_struct<_1118cee40_Const>(new( std::nothrow ) _1118cee40_Const(jule::Any(nullptr)));
}



inline jule::I64 _1118cee40_Const::_method_read_i64(void) {
	if ((!((*this)._method_is_i64()))) {
		return 0LL;
	}
	return (*this)._field_data.operator jule::I64();
}



inline jule::U64 _1118cee40_Const::_method_read_u64(void) {
	if ((!((*this)._method_is_u64()))) {
		return 0LL;
	}
	return (*this)._field_data.operator jule::U64();
}



inline jule::Bool _1118cee40_Const::_method_read_bool(void) {
	if ((!((*this)._method_is_bool()))) {
		return false;
	}
	return (*this)._field_data.operator jule::Bool();
}



inline jule::Str _1118cee40_Const::_method_read_str(void) {
	if ((!((*this)._method_is_str()))) {
		return jule::Str("", 0);
	}
	return (*this)._field_data.operator jule::Str();
}



inline jule::F64 _1118cee40_Const::_method_read_f64(void) {
	if ((!((*this)._method_is_f64()))) {
		return 0LL;
	}
	return (*this)._field_data.operator jule::F64();
}



inline jule::I64 _1118cee40_Const::_method_as_i64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4603676464; }
		_case_begin_4603676464:;
		{
			return (*this)._field_data.operator jule::I64();
		}
		goto _match_end_4603674016;
		_case_end_4603676464:;
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4603676032; }
		_case_begin_4603676032:;
		{
			return static_cast<jule::I64>((*this)._field_data.operator jule::U64());
		}
		goto _match_end_4603674016;
		_case_end_4603676032:;
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4603676144; }
		_case_begin_4603676144:;
		{
			return static_cast<jule::I64>((*this)._field_data.operator jule::F64());
		}
		goto _match_end_4603674016;
		_case_end_4603676144:;
		_case_begin_4603674624:;
		{
			return 0LL;
		}
		goto _match_end_4603674016;
		_case_end_4603674624:;
		_match_end_4603674016:;
	}
}



inline jule::U64 _1118cee40_Const::_method_as_u64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4603682672; }
		_case_begin_4603682672:;
		{
			return (*this)._field_data.operator jule::U64();
		}
		goto _match_end_4603680080;
		_case_end_4603682672:;
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4603682240; }
		_case_begin_4603682240:;
		{
			return static_cast<jule::U64>((*this)._field_data.operator jule::I64());
		}
		goto _match_end_4603680080;
		_case_end_4603682240:;
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4603682352; }
		_case_begin_4603682352:;
		{
			return static_cast<jule::U64>((*this)._field_data.operator jule::F64());
		}
		goto _match_end_4603680080;
		_case_end_4603682352:;
		_case_begin_4603676784:;
		{
			return 0LL;
		}
		goto _match_end_4603680080;
		_case_end_4603676784:;
		_match_end_4603680080:;
	}
}



inline jule::F64 _1118cee40_Const::_method_as_f64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4603689696; }
		_case_begin_4603689696:;
		{
			return (*this)._field_data.operator jule::F64();
		}
		goto _match_end_4603687280;
		_case_end_4603689696:;
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4603689264; }
		_case_begin_4603689264:;
		{
			return static_cast<jule::F64>((*this)._field_data.operator jule::I64());
		}
		goto _match_end_4603687280;
		_case_end_4603689264:;
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4603689376; }
		_case_begin_4603689376:;
		{
			return static_cast<jule::F64>((*this)._field_data.operator jule::U64());
		}
		goto _match_end_4603687280;
		_case_end_4603689376:;
		_case_begin_4603687856:;
		{
			return 0LL;
		}
		goto _match_end_4603687280;
		_case_end_4603687856:;
		_match_end_4603687280:;
	}
}



inline void _1118cee40_Const::_method_set_i64(jule::I64 _14030_x) {
	(*this)._field_data=jule::Any(_14030_x);
}



inline void _1118cee40_Const::_method_set_u64(jule::U64 _14230_x) {
	(*this)._field_data=jule::Any(_14230_x);
}



inline void _1118cee40_Const::_method_set_bool(jule::Bool _14431_x) {
	(*this)._field_data=jule::Any(_14431_x);
}



inline void _1118cee40_Const::_method_set_str(jule::Str _14630_x) {
	(*this)._field_data=jule::Any(_14630_x);
}



inline void _1118cee40_Const::_method_set_f64(jule::F64 _14830_x) {
	(*this)._field_data=jule::Any(_14830_x);
}



inline void _1118cee40_Const::_method_set_nil(void) {
	(*this)._field_data=jule::Any(nullptr);
}



inline void _1118cee40_Const::_method_set_by_type(jule::F64 _15230_v,_1118cee40_Const _15238_x) {
	{
		if (!((_15238_x._method_is_f64()))) { goto _case_end_4603712736; }
		_case_begin_4603712736:;
		{
			(*this)._method_set_f64(_15230_v);
		}
		goto _match_end_4603712496;
		_case_end_4603712736:;
		if (!(((*this)._method_is_f64()))) { goto _case_end_4603712864; }
		_case_begin_4603712864:;
		{
			(*this)._method_set_f64(_15230_v);
		}
		goto _match_end_4603712496;
		_case_end_4603712864:;
		if (!(((*this)._method_is_i64()))) { goto _case_end_4603712992; }
		_case_begin_4603712992:;
		{
			(*this)._method_set_i64(static_cast<jule::I64>(_15230_v));
		}
		goto _match_end_4603712496;
		_case_end_4603712992:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4603713120; }
		_case_begin_4603713120:;
		{
			(*this)._method_set_u64(static_cast<jule::U64>(_15230_v));
		}
		goto _match_end_4603712496;
		_case_end_4603713120:;
		_match_end_4603712496:;
	}
}



inline jule::Bool _1118cee40_Const::_method_is_i64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4603721216; }
		_case_begin_4603721216:;
		{
			return true;
		}
		goto _match_end_4603712048;
		_case_end_4603721216:;
		_case_begin_4603720912:;
		{
			return false;
		}
		goto _match_end_4603712048;
		_case_end_4603720912:;
		_match_end_4603712048:;
	}
}



inline jule::Bool _1118cee40_Const::_method_is_u64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4603723760; }
		_case_begin_4603723760:;
		{
			return true;
		}
		goto _match_end_4603722688;
		_case_end_4603723760:;
		_case_begin_4603723392:;
		{
			return false;
		}
		goto _match_end_4603722688;
		_case_end_4603723392:;
		_match_end_4603722688:;
	}
}



inline jule::Bool _1118cee40_Const::_method_is_bool(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Bool>())) { goto _case_end_4603726272; }
		_case_begin_4603726272:;
		{
			return true;
		}
		goto _match_end_4603725200;
		_case_end_4603726272:;
		_case_begin_4603725904:;
		{
			return false;
		}
		goto _match_end_4603725200;
		_case_end_4603725904:;
		_match_end_4603725200:;
	}
}



inline jule::Bool _1118cee40_Const::_method_is_str(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Str>())) { goto _case_end_4603728784; }
		_case_begin_4603728784:;
		{
			return true;
		}
		goto _match_end_4603727712;
		_case_end_4603728784:;
		_case_begin_4603728416:;
		{
			return false;
		}
		goto _match_end_4603727712;
		_case_end_4603728416:;
		_match_end_4603727712:;
	}
}



inline jule::Bool _1118cee40_Const::_method_is_f64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4603731296; }
		_case_begin_4603731296:;
		{
			return true;
		}
		goto _match_end_4603730224;
		_case_end_4603731296:;
		_case_begin_4603730928:;
		{
			return false;
		}
		goto _match_end_4603730224;
		_case_end_4603730928:;
		_match_end_4603730224:;
	}
}



inline jule::Bool _1118cee40_Const::_method_is_nil(void) {
	return (*this)._field_data == nullptr;
}



inline jule::Bool _1118cee40_Const::_method_are_same_types(_1118cee40_Const _20933_x) {
	{
		if (!(((*this)._method_is_i64() == _20933_x._method_is_i64()))) { goto _case_end_4603737568; }
		_case_begin_4603737568:;
		{
			return true;
		}
		goto _match_end_4603737008;
		_case_end_4603737568:;
		if (!(((*this)._method_is_u64() == _20933_x._method_is_u64()))) { goto _case_end_4603737680; }
		_case_begin_4603737680:;
		{
			return true;
		}
		goto _match_end_4603737008;
		_case_end_4603737680:;
		if (!(((*this)._method_is_f64() == _20933_x._method_is_f64()))) { goto _case_end_4603738800; }
		_case_begin_4603738800:;
		{
			return true;
		}
		goto _match_end_4603737008;
		_case_end_4603738800:;
		if (!(((*this)._method_is_bool() == _20933_x._method_is_bool()))) { goto _case_end_4603738912; }
		_case_begin_4603738912:;
		{
			return true;
		}
		goto _match_end_4603737008;
		_case_end_4603738912:;
		if (!(((*this)._method_is_str() == _20933_x._method_is_str()))) { goto _case_end_4603739024; }
		_case_begin_4603739024:;
		{
			return true;
		}
		goto _match_end_4603737008;
		_case_end_4603739024:;
		if (!(((*this)._method_is_nil() == _20933_x._method_is_nil()))) { goto _case_end_4603739136; }
		_case_begin_4603739136:;
		{
			return true;
		}
		goto _match_end_4603737008;
		_case_end_4603739136:;
		_case_begin_4603737152:;
		{
			return false;
		}
		goto _match_end_4603737008;
		_case_end_4603737152:;
		_match_end_4603737008:;
	}
}



inline jule::Bool _1118cee40_Const::_method_and(_1118cee40_Const _22722_x) {
	{
		if (!(((*this)._method_is_bool() && _22722_x._method_is_bool()))) { goto _case_end_4603749280; }
		_case_begin_4603749280:;
		{
			return (*this)._method_read_bool() && _22722_x._method_read_bool();
		}
		goto _match_end_4603748800;
		_case_end_4603749280:;
		_case_begin_4603748944:;
		{
			return false;
		}
		goto _match_end_4603748800;
		_case_end_4603748944:;
		_match_end_4603748800:;
	}
}



inline jule::Bool _1118cee40_Const::_method_or(_1118cee40_Const _23921_x) {
	{
		if (!(((*this)._method_is_bool() && _23921_x._method_is_bool()))) { goto _case_end_4603754912; }
		_case_begin_4603754912:;
		{
			return (*this)._method_read_bool() || _23921_x._method_read_bool();
		}
		goto _match_end_4603754432;
		_case_end_4603754912:;
		_case_begin_4603754576:;
		{
			return false;
		}
		goto _match_end_4603754432;
		_case_end_4603754576:;
		_match_end_4603754432:;
	}
}



inline jule::Bool _1118cee40_Const::_method_eqs(_1118cee40_Const _25122_x) {
	{
		if (!(((*this)._method_is_nil()))) { goto _case_end_4603760656; }
		_case_begin_4603760656:;
		{
			return _25122_x._method_is_nil();
		}
		goto _match_end_4603760096;
		_case_end_4603760656:;
		if (!(((*this)._method_is_bool()))) { goto _case_end_4603760768; }
		_case_begin_4603760768:;
		{
			return _25122_x._method_is_bool() && ((*this)._method_read_bool() == _25122_x._method_read_bool());
		}
		goto _match_end_4603760096;
		_case_end_4603760768:;
		if (!(((*this)._method_is_str()))) { goto _case_end_4603761888; }
		_case_begin_4603761888:;
		{
			return _25122_x._method_is_str() && ((*this)._method_read_str() == _25122_x._method_read_str());
		}
		goto _match_end_4603760096;
		_case_end_4603761888:;
		if (!(((*this)._method_is_i64()))) { goto _case_end_4603762000; }
		_case_begin_4603762000:;
		{
			return (*this)._method_read_i64() == _25122_x._method_as_i64();
		}
		goto _match_end_4603760096;
		_case_end_4603762000:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4603762112; }
		_case_begin_4603762112:;
		{
			return (*this)._method_read_u64() == _25122_x._method_as_u64();
		}
		goto _match_end_4603760096;
		_case_end_4603762112:;
		if (!(((*this)._method_is_f64()))) { goto _case_end_4603762224; }
		_case_begin_4603762224:;
		{
			return (*this)._method_read_f64() == _25122_x._method_as_f64();
		}
		goto _match_end_4603760096;
		_case_end_4603762224:;
		_case_begin_4603760240:;
		{
			return false;
		}
		goto _match_end_4603760096;
		_case_end_4603760240:;
		_match_end_4603760096:;
	}
}



inline jule::Bool _1118cee40_Const::_method_lt(_1118cee40_Const _28321_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4603775216; }
		_case_begin_4603775216:;
		{
			return (*this)._method_read_i64() < _28321_x._method_as_i64();
		}
		goto _match_end_4603774704;
		_case_end_4603775216:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4603775328; }
		_case_begin_4603775328:;
		{
			return (*this)._method_read_u64() < _28321_x._method_as_u64();
		}
		goto _match_end_4603774704;
		_case_end_4603775328:;
		if (!(((*this)._method_is_f64()))) { goto _case_end_4603775456; }
		_case_begin_4603775456:;
		{
			return (*this)._method_read_f64() < _28321_x._method_as_f64();
		}
		goto _match_end_4603774704;
		_case_end_4603775456:;
		_case_begin_4603774848:;
		{
			return false;
		}
		goto _match_end_4603774704;
		_case_end_4603774848:;
		_match_end_4603774704:;
	}
}



inline jule::Bool _1118cee40_Const::_method_gt(_1118cee40_Const _30621_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4603783936; }
		_case_begin_4603783936:;
		{
			return (*this)._method_read_i64() > _30621_x._method_as_i64();
		}
		goto _match_end_4603783424;
		_case_end_4603783936:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4603784048; }
		_case_begin_4603784048:;
		{
			return (*this)._method_read_u64() > _30621_x._method_as_u64();
		}
		goto _match_end_4603783424;
		_case_end_4603784048:;
		if (!(((*this)._method_is_f64()))) { goto _case_end_4603784176; }
		_case_begin_4603784176:;
		{
			return (*this)._method_read_f64() > _30621_x._method_as_f64();
		}
		goto _match_end_4603783424;
		_case_end_4603784176:;
		_case_begin_4603783568:;
		{
			return false;
		}
		goto _match_end_4603783424;
		_case_end_4603783568:;
		_match_end_4603783424:;
	}
}



inline jule::Bool _1118cee40_Const::_method_add(_1118cee40_Const _32826_x) {
	{
		if (!(((*this)._method_is_str()))) { goto _case_end_4603792416; }
		_case_begin_4603792416:;
		{
			if ((!(_32826_x._method_is_str()))) {
				return false;
			}
			(*this)._method_set_str((*this)._method_read_str() + _32826_x._method_read_str());
		}
		goto _match_end_4603791920;
		_case_end_4603792416:;
		if (!(((*this)._method_is_f64()) || ((*this)._method_is_i64()) || ((*this)._method_is_u64()))) { goto _case_end_4603792528; }
		_case_begin_4603792528:;
		{
			(*this)._method_set_by_type(static_cast<jule::F64>((*this)._method_as_f64() + _32826_x._method_as_f64()),_32826_x);
		}
		goto _match_end_4603791920;
		_case_end_4603792528:;
		_case_begin_4603792064:;
		{
			return false;
		}
		goto _match_end_4603791920;
		_case_end_4603792064:;
		_match_end_4603791920:;
	}
	return true;
}



inline jule::Bool _1118cee40_Const::_method_sub(_1118cee40_Const _34926_x) {
	{
		if (!(((*this)._method_is_f64()) || ((*this)._method_is_i64()) || ((*this)._method_is_u64()))) { goto _case_end_4603802944; }
		_case_begin_4603802944:;
		{
			(*this)._method_set_by_type(static_cast<jule::F64>((*this)._method_as_f64() - _34926_x._method_as_f64()),_34926_x);
		}
		goto _match_end_4603802464;
		_case_end_4603802944:;
		_case_begin_4603802608:;
		{
			return false;
		}
		goto _match_end_4603802464;
		_case_end_4603802608:;
		_match_end_4603802464:;
	}
	return true;
}



inline jule::Bool _1118cee40_Const::_method_mul(_1118cee40_Const _36426_x) {
	{
		if (!(((*this)._method_is_f64()) || ((*this)._method_is_i64()) || ((*this)._method_is_u64()))) { goto _case_end_4603810240; }
		_case_begin_4603810240:;
		{
			(*this)._method_set_by_type(static_cast<jule::F64>((*this)._method_as_f64() * _36426_x._method_as_f64()),_36426_x);
		}
		goto _match_end_4603809760;
		_case_end_4603810240:;
		_case_begin_4603809904:;
		{
			return false;
		}
		goto _match_end_4603809760;
		_case_end_4603809904:;
		_match_end_4603809760:;
	}
	return true;
}



inline jule::Bool _1118cee40_Const::_method_div(_1118cee40_Const _38326_x) {
	{
		if (!(((*this)._method_is_f64()))) { goto _case_end_4603817152; }
		_case_begin_4603817152:;
		{
			jule::F64 _38617_l = _38326_x._method_as_f64();
			if (_38617_l == 0LL) {
				return false;
			}
			(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_read_f64(),_38617_l)));
		}
		goto _match_end_4603816640;
		_case_end_4603817152:;
		if (!(((*this)._method_is_i64()))) { goto _case_end_4603817264; }
		_case_begin_4603817264:;
		{
			jule::F64 _39317_l = _38326_x._method_as_f64();
			if (_39317_l == 0LL) {
				return false;
			}
			(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_39317_l)));
		}
		goto _match_end_4603816640;
		_case_end_4603817264:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4603817392; }
		_case_begin_4603817392:;
		{
			jule::F64 _40017_l = _38326_x._method_as_f64();
			if (_40017_l == 0LL) {
				return false;
			}
			(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_40017_l)));
		}
		goto _match_end_4603816640;
		_case_end_4603817392:;
		_case_begin_4603816784:;
		{
			return false;
		}
		goto _match_end_4603816640;
		_case_end_4603816784:;
		_match_end_4603816640:;
	}
	return true;
}



inline jule::Bool _1118cee40_Const::_method_mod(_1118cee40_Const _41526_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4603833008; }
		_case_begin_4603833008:;
		{
			jule::I64 _41817_l = _41526_x._method_as_i64();
			if (_41817_l == 0LL) {
				return false;
			}
			(*this)._method_set_i64(static_cast<jule::I64>(jule::mod((*this)._method_read_i64(),_41817_l)));
		}
		goto _match_end_4603832512;
		_case_end_4603833008:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4603833120; }
		_case_begin_4603833120:;
		{
			jule::U64 _42517_l = _41526_x._method_as_u64();
			if (_42517_l == 0LL) {
				return false;
			}
			(*this)._method_set_u64(static_cast<jule::U64>(jule::mod((*this)._method_read_u64(),_42517_l)));
		}
		goto _match_end_4603832512;
		_case_end_4603833120:;
		_case_begin_4603832656:;
		{
			return false;
		}
		goto _match_end_4603832512;
		_case_end_4603832656:;
		_match_end_4603832512:;
	}
	return true;
}



inline jule::Bool _1118cee40_Const::_method_bitwise_and(_1118cee40_Const _43934_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4603844864; }
		_case_begin_4603844864:;
		{
			(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() & _43934_x._method_as_i64()));
		}
		goto _match_end_4603844368;
		_case_end_4603844864:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4603844976; }
		_case_begin_4603844976:;
		{
			(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() & _43934_x._method_as_u64()));
		}
		goto _match_end_4603844368;
		_case_end_4603844976:;
		_case_begin_4603844512:;
		{
			return false;
		}
		goto _match_end_4603844368;
		_case_end_4603844512:;
		_match_end_4603844368:;
	}
	return true;
}



inline jule::Bool _1118cee40_Const::_method_bitwise_or(_1118cee40_Const _45533_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4603853392; }
		_case_begin_4603853392:;
		{
			(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() | _45533_x._method_as_i64()));
		}
		goto _match_end_4603852896;
		_case_end_4603853392:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4603853504; }
		_case_begin_4603853504:;
		{
			(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() | _45533_x._method_as_u64()));
		}
		goto _match_end_4603852896;
		_case_end_4603853504:;
		_case_begin_4603853040:;
		{
			return false;
		}
		goto _match_end_4603852896;
		_case_end_4603853040:;
		_match_end_4603852896:;
	}
	return true;
}



inline jule::Bool _1118cee40_Const::_method_xor(_1118cee40_Const _47126_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4603862112; }
		_case_begin_4603862112:;
		{
			(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() ^ _47126_x._method_as_i64()));
		}
		goto _match_end_4603861616;
		_case_end_4603862112:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4603862224; }
		_case_begin_4603862224:;
		{
			(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() ^ _47126_x._method_as_u64()));
		}
		goto _match_end_4603861616;
		_case_end_4603862224:;
		_case_begin_4603861760:;
		{
			return false;
		}
		goto _match_end_4603861616;
		_case_end_4603861760:;
		_match_end_4603861616:;
	}
	return true;
}



inline jule::Bool _1118cee40_Const::_method_lshift(_1118cee40_Const _48729_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4603870640; }
		_case_begin_4603870640:;
		{
			jule::I64 _49017_l = (*this)._method_as_i64();
			if (_49017_l < 0LL) {
				jule::U64 _49221_r = _48729_x._method_as_u64();
				(*this)._method_set_i64(static_cast<jule::I64>(_49017_l << _49221_r));
			} else {
				_1118cee40_lshift_unsig((*this),_48729_x);
			}
		}
		goto _match_end_4603870144;
		_case_end_4603870640:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4603870752; }
		_case_begin_4603870752:;
		{
			_1118cee40_lshift_unsig((*this),_48729_x);
		}
		goto _match_end_4603870144;
		_case_end_4603870752:;
		_case_begin_4603870288:;
		{
			return false;
		}
		goto _match_end_4603870144;
		_case_end_4603870288:;
		_match_end_4603870144:;
	}
	return true;
}



inline jule::Bool _1118cee40_Const::_method_rshift(_1118cee40_Const _51029_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4603881136; }
		_case_begin_4603881136:;
		{
			jule::I64 _51317_l = (*this)._method_as_i64();
			if (_51317_l < 0LL) {
				jule::U64 _51521_r = _51029_x._method_as_u64();
				(*this)._method_set_i64(static_cast<jule::I64>(_51317_l >> _51521_r));
			} else {
				_1118cee40_rshift_unsig((*this),_51029_x);
			}
		}
		goto _match_end_4603880640;
		_case_end_4603881136:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4603881248; }
		_case_begin_4603881248:;
		{
			_1118cee40_rshift_unsig((*this),_51029_x);
		}
		goto _match_end_4603880640;
		_case_end_4603881248:;
		_case_begin_4603880784:;
		{
			return false;
		}
		goto _match_end_4603880640;
		_case_end_4603880784:;
		_match_end_4603880640:;
	}
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1118cee40_Const &_Src) {
	_Stream << "Const{";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1109372e0_FieldIns &_Src) {
	_Stream << "FieldIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1109372e0_StructIns::_method_to_str(void) {
	jule::Str _20717_kind = jule::Str("", 0);
	_20717_kind+=(*this)._field_decl->_field_ident;
	if ((*this)._field_generics.len() > 0LL) {
		_20717_kind+=jule::Str("[", 1);
		{
			auto __julec_range_expr = (*this)._field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1116aff70_TypeKind> _1109372e0_g = *__julec_range_begin;
				_iter_begin_4608048736:;
				{
					_20717_kind+=_1109372e0_g->_method_to_str();
					_20717_kind+=jule::Str(",", 1);
				}
				_iter_next_4608048736:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1109372e0_g = *__julec_range_begin; goto _iter_begin_4608048736; }
				_iter_end_4608048736:;
			}
		}
		_20717_kind=_20717_kind.slice(0LL,static_cast<jule::Int>(_20717_kind.len() - 1LL));
		_20717_kind+=jule::Str("]", 1);
	}
	return _20717_kind;
}



inline jule::Bool _1109372e0_StructIns::_method_equals(jule::Ref<_1116aff70_TypeKind> _22221_other) {
	jule::Ref<_1109372e0_StructIns> _22313_s = (_22221_other).alloc->_method_strct();
	if ((!(jule::real(_22313_s)))) {
		return false;
	}
	if (((*this)._field_decl).alloc != (_22313_s->_field_decl).alloc) {
		return false;
	}
	if ((*this)._field_generics.len() != _22313_s->_field_generics.len()) {
		return false;
	}
	jule::Int _23617_i = 0LL;
	_iter_begin_4608060720:;
	if (!(_23617_i < (*this)._field_generics.len())) { goto _iter_end_4608060720; }
	{
		if ((!((*this)._field_generics[static_cast<jule::Int>(_23617_i)]->_method_equals(_22313_s->_field_generics[static_cast<jule::Int>(_23617_i)])))) {
			return false;
		}
	}
	_iter_next_4608060720:;
	(_23617_i)++;
	goto _iter_begin_4608060720;
	_iter_end_4608060720:;
	return true;
}



inline jule::Ref<_11072eb20_Fn> _1109372e0_StructIns::_method_find_method(jule::Str _25034_ident,jule::Bool _25046_statically) {
	{
		auto __julec_range_expr = (*this)._field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_Fn> _1109372e0_f = *__julec_range_begin;
			_iter_begin_4608068816:;
			{
				if ((_1109372e0_f->_field_statically == _25046_statically) && (_1109372e0_f->_field_ident == _25034_ident)) {
					return _1109372e0_f;
				}
			}
			_iter_next_4608068816:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1109372e0_f = *__julec_range_begin; goto _iter_begin_4608068816; }
			_iter_end_4608068816:;
		}
	}
	return jule::new_ref<_11072eb20_Fn>();
}



inline jule::Ref<_1109372e0_FieldIns> _1109372e0_StructIns::_method_find_field(jule::Str _26133_ident) {
	{
		auto __julec_range_expr = (*this)._field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_FieldIns> _1109372e0_f = *__julec_range_begin;
			_iter_begin_4608074320:;
			{
				if (_1109372e0_f->_field_decl->_field_ident == _26133_ident) {
					return _1109372e0_f;
				}
			}
			_iter_next_4608074320:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1109372e0_f = *__julec_range_begin; goto _iter_begin_4608074320; }
			_iter_end_4608074320:;
		}
	}
	return jule::new_ref<_1109372e0_FieldIns>();
}







std::ostream &operator<<(std::ostream &_Stream, const _1109372e0_StructIns &_Src) {
	_Stream << "StructIns{";
	_Stream << "checked:" << _Src._field_checked << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "has_mut:" << _Src._field_has_mut << ", ";
	_Stream << "references:" << _Src._field_references;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11072eb20_RetType &_Src) {
	_Stream << "RetType{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _11072eb20_ParamIns::_method_to_str(void) {
	jule::Str _19517_s = jule::Str("", 0);
	if ((*this)._field_decl->_field_mutable) {
		_19517_s+=jule::Str("mut ", 4);
	}
	if ((*this)._field_decl->_field_reference) {
		_19517_s+=jule::Str("&_:", 3);
	}
	if ((*this)._field_decl->_method_is_self()) {
		if ((*this)._field_decl->_method_is_ref()) {
			_19517_s+=jule::Str("&", 1);
		}
		_19517_s+=jule::Str("self", 4);
		return _19517_s;
	}
	if ((*this)._field_decl->_field_variadic) {
		_19517_s+=jule::Str("...", 3);
	}
	if (jule::real((*this)._field_kind)) {
		_19517_s+=(*this)._field_kind->_method_to_str();
	}
	return _19517_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _11072eb20_ParamIns &_Src) {
	_Stream << "ParamIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _11072eb20_FnIns::_method_to_str(void) {
	
	return (*this)._method_get_kind_str(false);
}



inline jule::Bool _11072eb20_FnIns::_method_equals(jule::Ref<_1116aff70_TypeKind> _25021_other) {
	jule::Ref<_11072eb20_FnIns> _25113_f = (_25021_other).alloc->_method_fnc();
	if ((!(jule::real(_25113_f)))) {
		return false;
	}
	if ((*this)._field_decl->_field_statically != _25113_f->_field_decl->_field_statically) {
		return false;
	}
	if ((*this)._field_decl->_field_unsafety != _25113_f->_field_decl->_field_unsafety) {
		return false;
	}
	if ((*this)._field_generics.len() != _25113_f->_field_generics.len()) {
		return false;
	}
	if ((*this)._field_decl->_method_is_void() != _25113_f->_field_decl->_method_is_void()) {
		return false;
	}
	jule::Int _27217_i = 0LL;
	_iter_begin_4608174912:;
	if (!(_27217_i < (*this)._field_generics.len())) { goto _iter_end_4608174912; }
	{
		if ((!((*this)._field_generics[static_cast<jule::Int>(_27217_i)]->_method_equals(_25113_f->_field_generics[static_cast<jule::Int>(_27217_i)])))) {
			return false;
		}
	}
	_iter_next_4608174912:;
	(_27217_i)++;
	goto _iter_begin_4608174912;
	_iter_end_4608174912:;
	jule::Fn<jule::Bool(jule::Ref<_11072eb20_ParamIns>,jule::Ref<_11072eb20_ParamIns>)> _27913_check_params = jule::Fn<jule::Bool(jule::Ref<_11072eb20_ParamIns>,jule::Ref<_11072eb20_ParamIns>)>([=](jule::Ref<_11072eb20_ParamIns> _27931_p1,jule::Ref<_11072eb20_ParamIns> _27946_p2) mutable -> jule::Bool {
		if (_27931_p1->_field_decl->_field_mutable != _27946_p2->_field_decl->_field_mutable) {
			return false;
		}
		if (_27931_p1->_field_decl->_method_is_self()) {
			if ((!(_27946_p2->_field_decl->_method_is_self()))) {
				return false;
			}
			if (_27931_p1->_field_decl->_method_is_ref() != _27946_p2->_field_decl->_method_is_ref()) {
				return false;
			}
			return true;
		}
		if (_27931_p1->_field_decl->_field_reference != _27946_p2->_field_decl->_field_reference) {
			return false;
		}
		if (_27931_p1->_field_decl->_field_variadic != _27946_p2->_field_decl->_field_variadic) {
			return false;
		}
		return _27931_p1->_field_kind->_method_equals(_27946_p2->_field_kind);
	});
	_27217_i=0LL;
	_iter_begin_4608167072:;
	if (!(_27217_i < (*this)._field_params.len())) { goto _iter_end_4608167072; }
	{
		if ((!(_27913_check_params((*this)._field_params[static_cast<jule::Int>(_27217_i)],_25113_f->_field_params[static_cast<jule::Int>(_27217_i)])))) {
			return false;
		}
	}
	_iter_next_4608167072:;
	(_27217_i)++;
	goto _iter_begin_4608167072;
	_iter_end_4608167072:;
	if ((!((*this)._field_decl->_method_is_void()))) {
		if ((!((*this)._field_result->_method_equals(_25113_f->_field_result)))) {
			return false;
		}
	}
	return true;
}



inline jule::Bool _11072eb20_FnIns::_method_is_builtin(void) {
	return (*this)._field_caller != nullptr;
}



inline jule::Bool _11072eb20_FnIns::_method_is_anon(void) {
	return (*this)._field_anon || (jule::real((*this)._field_decl) && (*this)._field_decl->_method_is_anon());
}



inline jule::Str _11072eb20_FnIns::_method_get_kind_str(jule::Bool _33431_ident) {
	jule::Str _33517_s = jule::Str("", 0);
	if ((*this)._field_decl->_field_statically) {
		_33517_s+=jule::Str("static ", 7);
	}
	if ((*this)._field_decl->_field_unsafety) {
		_33517_s+=jule::Str("unsafe ", 7);
	}
	_33517_s+=jule::Str("fn", 2);
	if (_33431_ident && jule::real((*this)._field_decl)) {
		_33517_s+=jule::Str(" ", 1) + (*this)._field_decl->_field_ident;
	}
	if ((*this)._field_generics.len() > 0LL) {
		_33517_s+=jule::Str("[", 1);
		{
			auto __julec_range_expr = (*this)._field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _11072eb20_i = 0;
				jule::Ref<_1116aff70_TypeKind> _11072eb20_t = *__julec_range_begin;
				_iter_begin_4608215072:;
				{
					_33517_s+=_11072eb20_t->_method_to_str();
					if ((_11072eb20_i + 1LL) < (*this)._field_generics.len()) {
						_33517_s+=jule::Str(",", 1);
					}
				}
				_iter_next_4608215072:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_11072eb20_i; _11072eb20_t = *__julec_range_begin; goto _iter_begin_4608215072; }
				_iter_end_4608215072:;
			}
		}
		_33517_s+=jule::Str("]", 1);
	} else if ((*this)._field_decl->_field_generics.len() > 0LL) {
		_33517_s+=jule::Str("[", 1);
		{
			auto __julec_range_expr = (*this)._field_decl->_field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _11072eb20_i = 0;
				jule::Ref<_11054f670_GenericDecl> _11072eb20_g = *__julec_range_begin;
				_iter_begin_4608214944:;
				{
					_33517_s+=_11072eb20_g->_field_ident;
					if ((_11072eb20_i + 1LL) < (*this)._field_decl->_field_generics.len()) {
						_33517_s+=jule::Str(",", 1);
					}
				}
				_iter_next_4608214944:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_11072eb20_i; _11072eb20_g = *__julec_range_begin; goto _iter_begin_4608214944; }
				_iter_end_4608214944:;
			}
		}
		_33517_s+=jule::Str("]", 1);
	}
	_33517_s+=jule::Str("(", 1);
	jule::I64 _37213_n = (*this)._field_params.len();
	if (_37213_n > 0LL) {
		{
			auto __julec_range_expr = (*this)._field_params;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_11072eb20_ParamIns> _11072eb20_p = *__julec_range_begin;
				_iter_begin_4608227952:;
				{
					_33517_s+=_11072eb20_p->_method_to_str();
					_33517_s+=jule::Str(",", 1);
				}
				_iter_next_4608227952:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _11072eb20_p = *__julec_range_begin; goto _iter_begin_4608227952; }
				_iter_end_4608227952:;
			}
		}
		_33517_s=_33517_s.slice(0LL,static_cast<jule::Int>(_33517_s.len() - 1LL));
	}
	_33517_s+=jule::Str(")", 1);
	if ((!((*this)._field_decl->_method_is_void()))) {
		_33517_s+=jule::Str(":", 1);
		_33517_s+=(*this)._field_result->_method_to_str();
	}
	return _33517_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _11072eb20_FnIns &_Src) {
	_Stream << "FnIns{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "refers:" << _Src._field_refers << ", ";
	_Stream << "caller:" << _Src._field_caller << ", ";
	_Stream << "reloaded:" << _Src._field_reloaded << ", ";
	_Stream << "anon:" << _Src._field_anon;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_110d9ce90_SymbolBuilder> _110d9ce90_SymbolBuilder::_method_get_root(void) {
	jule::Ref<_110d9ce90_SymbolBuilder> _31517_root = this->self;
	_iter_begin_4608250912:;
	if (!(jule::real(_31517_root->_field_owner))) { goto _iter_end_4608250912; }
	{
		_31517_root=_31517_root->_field_owner;
	}
	_iter_next_4608250912:;
	goto _iter_begin_4608250912;
	_iter_end_4608250912:;
	return _31517_root;
}



inline void _110d9ce90_SymbolBuilder::_method_push_err(_1106ec050_Token _32227_token,jule::Str _32241_fmt,jule::Slice<jule::Any> _32254_args) {
	(*this)._field_errors=jule::append((*this)._field_errors,jule::Slice<_127e05da0_Log>({_110e92bc0_compiler_err(_32227_token,true,_32241_fmt,_32254_args)}));
}



inline void _110d9ce90_SymbolBuilder::_method_push_err_text(_1106ec050_Token _32632_token,jule::Str _32646_fmt,jule::Slice<jule::Any> _32659_args) {
	(*this)._field_errors=jule::append((*this)._field_errors,jule::Slice<_127e05da0_Log>({_110e92bc0_compiler_err(_32632_token,false,_32646_fmt,_32659_args)}));
}



inline void _110d9ce90_SymbolBuilder::_method_push_suggestion(jule::Str _33134_fmt,jule::Slice<jule::Any> _33147_args) {
	{
		_110e92bc0_push_suggestion((&((*this)._field_errors[static_cast<jule::Int>((*this)._field_errors.len() - 1LL)])),_33134_fmt,_33147_args);
	}
}



inline jule::Bool _110d9ce90_SymbolBuilder::_method_check_cpp_use_decl_path(jule::Ref<_11054f670_UseDecl> _33542_decl) {
	jule::Bool _33560_ok = jule::Bool();
	if (_127e05470_is_std_header_path(_33542_decl->_field_link_path)) {
		_33560_ok = true;
		return _33560_ok;
	}
	jule::Str _34013_ext = _117e1d320_ext(_33542_decl->_field_link_path);
	if ((!(_127e05470_is_valid_header_ext(_34013_ext))) && (!(_127e05470_is_valid_cpp_ext(_34013_ext)))) {
		(*this)._method_push_err(_33542_decl->_field_token,jule::Str("invalid C++ extension: @", 24),jule::Slice<jule::Any>({jule::Any(_34013_ext)}));
		_33560_ok = false;
		return _33560_ok;
	}
	jule::Ref<_11054d9e0_Status> _34614_info;
	jule::Int _34620_err;
	std::tie(_34614_info,_34620_err) = _1104fc7d0_stat(_33542_decl->_field_link_path);
	if ((_34620_err != 0LLU) || _34614_info->_method_is_dir()) {
		(*this)._method_push_err(_33542_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_33542_decl->_field_link_path)}));
		_33560_ok = false;
		return _33560_ok;
	}
	_33560_ok = true;
	return _33560_ok;
}



inline jule::Ref<_110e4edc0_ImportInfo> _110d9ce90_SymbolBuilder::_method_build_cpp_header_import(jule::Ref<_11054f670_UseDecl> _35646_decl) {
	jule::Str _35717_path = _35646_decl->_field_link_path;
	if ((!(_127e05470_is_std_header_path(_35646_decl->_field_link_path)))) {
		jule::Bool _36021_ok = (*this)._method_check_cpp_use_decl_path(_35646_decl);
		if ((!(_36021_ok))) {
			return jule::new_ref<_110e4edc0_ImportInfo>();
		}
		std::tie(_35717_path,_36021_ok) = _117e1d320_abs(_35646_decl->_field_link_path);
		if ((!(_36021_ok))) {
			(*this)._method_push_err(_35646_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_35646_decl->_field_link_path)}));
		}
	}
	return jule::new_struct<_110e4edc0_ImportInfo>(new( std::nothrow ) _110e4edc0_ImportInfo(_35646_decl->_field_token,_35717_path,_35646_decl->_field_link_path,jule::Str("", 0),jule::Str(),jule::Bool(),true,false,jule::Bool(),jule::Slice<_1106ec050_Token>(),jule::new_ref<_110e4edc0_Package>()));
}



inline jule::Ref<_110e4edc0_ImportInfo> _110d9ce90_SymbolBuilder::_method_build_std_import(jule::Ref<_11054f670_UseDecl> _38339_decl) {
	jule::Str _38417_path = _38339_decl->_field_link_path.slice(static_cast<jule::Int>(jule::Str("std::", 5).len()));
	_38417_path=_38417_path.replace(jule::Str("::", 2),static_cast<jule::Str>(47LL),-1LL);
	_38417_path=_117e1d320_join(jule::Slice<jule::Str>({_127ebf120_PATH_STDLIB,_38417_path}));
	jule::Bool _38720_ok;
	std::tie(_38417_path,_38720_ok) = _117e1d320_abs(_38417_path);
	if ((!(_38720_ok))) {
		(*this)._method_push_err(_38339_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_38339_decl->_field_link_path)}));
		return jule::new_ref<_110e4edc0_ImportInfo>();
	}
	jule::Ref<_11054d9e0_Status> _39314_info;
	jule::Int _39320_err;
	std::tie(_39314_info,_39320_err) = _1104fc7d0_stat(_38417_path);
	if ((_39320_err != 0LLU) || (!(_39314_info->_method_is_dir()))) {
		(*this)._method_push_err(_38339_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_38339_decl->_field_link_path)}));
		return jule::new_ref<_110e4edc0_ImportInfo>();
	}
	jule::Str _40113_ident = _38339_decl->_field_link_path.slice(static_cast<jule::Int>(_38339_decl->_field_link_path.rfind(jule::Str("::", 2)) + 1LL));
	return jule::new_struct<_110e4edc0_ImportInfo>(new( std::nothrow ) _110e4edc0_ImportInfo(_38339_decl->_field_token,_38417_path,_38339_decl->_field_link_path,_40113_ident,_38339_decl->_field_alias,jule::Bool(),false,true,_38339_decl->_field_full,jule::Slice<_1106ec050_Token>(),jule::new_struct<_110e4edc0_Package>(new( std::nothrow ) _110e4edc0_Package(nullptr))));
}



inline jule::Ref<_110e4edc0_ImportInfo> _110d9ce90_SymbolBuilder::_method_build_ident_import(jule::Ref<_11054f670_UseDecl> _41842_decl) {
	jule::Str _41917_path = _41842_decl->_field_link_path;
	_41917_path=_41917_path.replace(jule::Str("::", 2),static_cast<jule::Str>(47LL),-1LL);
	_41917_path=_117e1d320_join(jule::Slice<jule::Str>({this->self->_method_get_root()->_field_ast->_field_file->_method_dir(),_41917_path}));
	jule::Bool _42320_ok;
	std::tie(_41917_path,_42320_ok) = _117e1d320_abs(_41917_path);
	if ((!(_42320_ok))) {
		this->self->_method_push_err(_41842_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_41842_decl->_field_link_path)}));
		return jule::new_ref<_110e4edc0_ImportInfo>();
	}
	jule::Ref<_11054d9e0_Status> _42914_info;
	jule::Int _42920_err;
	std::tie(_42914_info,_42920_err) = _1104fc7d0_stat(_41917_path);
	if ((_42920_err != 0LLU) || (!(_42914_info->_method_is_dir()))) {
		this->self->_method_push_err(_41842_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_41842_decl->_field_link_path)}));
		return jule::new_ref<_110e4edc0_ImportInfo>();
	}
	jule::Str _43713_ident = _41842_decl->_field_link_path.slice(static_cast<jule::Int>(_41842_decl->_field_link_path.rfind(jule::Str("::", 2)) + 1LL));
	return jule::new_struct<_110e4edc0_ImportInfo>(new( std::nothrow ) _110e4edc0_ImportInfo(_41842_decl->_field_token,_41917_path,_41842_decl->_field_link_path,_43713_ident,_41842_decl->_field_alias,jule::Bool(),false,false,_41842_decl->_field_full,jule::Slice<_1106ec050_Token>(),jule::new_struct<_110e4edc0_Package>(new( std::nothrow ) _110e4edc0_Package(nullptr))));
}



inline jule::Ref<_110e4edc0_ImportInfo> _110d9ce90_SymbolBuilder::_method_build_import(jule::Ref<_11054f670_UseDecl> _45436_decl) {
	{
		if (!((_45436_decl->_field_cpp_linked))) { goto _case_end_4608346496; }
		_case_begin_4608346496:;
		{
			return this->self->_method_build_cpp_header_import(_45436_decl);
		}
		goto _match_end_4608344608;
		_case_end_4608346496:;
		if (!((_45436_decl->_field_std))) { goto _case_end_4608346160; }
		_case_begin_4608346160:;
		{
			return this->self->_method_build_std_import(_45436_decl);
		}
		goto _match_end_4608344608;
		_case_end_4608346160:;
		_case_begin_4608344752:;
		{
			return this->self->_method_build_ident_import(_45436_decl);
		}
		goto _match_end_4608344608;
		_case_end_4608344752:;
		_match_end_4608344608:;
	}
}



inline jule::Bool _110d9ce90_SymbolBuilder::_method_check_duplicate_use_decl(jule::Ref<_110e4edc0_ImportInfo> _46243_pkg) {
	jule::Bool _46263_ok = jule::Bool();
	jule::Ref<_110e4edc0_ImportInfo> _46413_lpkg = (*this)._field_table->_method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)>([=](jule::Ref<_110e4edc0_ImportInfo> _46449_spkg) mutable -> jule::Bool {
		return _46243_pkg->_field_path == _46449_spkg->_field_path;
	}));
	if ((!(jule::real(_46413_lpkg)))) {
		_46263_ok = true;
		return _46263_ok;
	}
	(*this)._method_push_err(_46243_pkg->_field_token,jule::Str("duplicate use declaration: @", 28),jule::Slice<jule::Any>({jule::Any(_46243_pkg->_field_link_path)}));
	(*this)._method_push_suggestion(jule::Str("remove this use declaration, already used, it is safe", 53),jule::Slice<jule::Any>({}));
	_46263_ok = false;
	return _46263_ok;
}



inline void _110d9ce90_SymbolBuilder::_method_impl_import_selections(jule::Ref<_110e4edc0_ImportInfo> _47645_imp,jule::Ref<_11054f670_UseDecl> _47667_decl) {
	{
		auto __julec_range_expr = _47667_decl->_field_selected;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_1106ec050_Token _110d9ce90_ident = *__julec_range_begin;
			_iter_begin_4608367216:;
			{
				if (_47645_imp->_method_exist_ident(_110d9ce90_ident._field_kind)) {
					(*this)._method_push_err(_110d9ce90_ident,jule::Str("duplicated identifier selection: @", 34),jule::Slice<jule::Any>({jule::Any(_110d9ce90_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("remove this use selection, already selected, it is safe", 55),jule::Slice<jule::Any>({}));
					goto _iter_next_4608367216;
				}
				_47645_imp->_field_selected=jule::append(_47645_imp->_field_selected,jule::Slice<_1106ec050_Token>({_110d9ce90_ident}));
			}
			_iter_next_4608367216:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110d9ce90_ident = *__julec_range_begin; goto _iter_begin_4608367216; }
			_iter_end_4608367216:;
		}
	}
}



inline jule::Str _110d9ce90_SymbolBuilder::_method_get_as_link_path(jule::Str _48840_path) {
	if (_48840_path.has_prefix(_127ebf120_PATH_STDLIB)) {
		_48840_path=_48840_path.slice(static_cast<jule::Int>(_127ebf120_PATH_STDLIB.len()));
		return jule::Str("std", 3) + _48840_path.replace(static_cast<jule::Str>(47LL),jule::Str("::", 2),-1LL);
	}
	jule::Str _49414_root;
	std::tie(_49414_root,std::ignore) = _117e1d320_abs(this->self->_method_get_root()->_field_ast->_field_file->_method_dir());
	_48840_path=_48840_path.slice(static_cast<jule::Int>(_49414_root.len()));
	if (_48840_path[0LL] == 47LL) {
		_48840_path=_48840_path.slice(1LL);
	}
	return _48840_path.replace(static_cast<jule::Str>(47LL),jule::Str("::", 2),-1LL);
}



inline void _110d9ce90_SymbolBuilder::_method_push_cycle_error(jule::Ref<_110d9ce90_SymbolBuilder> _50236_sb,jule::Str _50256_path,jule::Str& _50272_message) {
	
	jule::Str _50513_refers_to = _127e05da0_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(this->self->_method_get_as_link_path(_50236_sb->_field_table->_field_file->_method_dir())),jule::Any(this->self->_method_get_as_link_path(_50256_path))}));
	_50272_message=((_110d9ce90_str_repeat(jule::Str(" ", 1),4LL) + _50513_refers_to) + jule::Str("\n", 1)) + _50272_message;
}



inline void _110d9ce90_SymbolBuilder::_method_push_cross_cycle_error(jule::Ref<_110d9ce90_SymbolBuilder> _51242_target,jule::Ref<_110e4edc0_ImportInfo> _51266_imp,_1106ec050_Token _51284_error_token) {
	jule::Str _51317_message = jule::Str("", 0);
	this->self->_method_push_cycle_error(this->self,_51266_imp->_field_path,_51317_message);
	jule::Ref<_110d9ce90_SymbolBuilder> _51717_owner = this->self->_field_owner;
	jule::Ref<_110d9ce90_SymbolBuilder> _51817_old = this->self;
	_iter_begin_4608404576:;
	if (!(jule::real(_51717_owner->_field_owner))) { goto _iter_end_4608404576; }
	{
		this->self->_method_push_cycle_error(_51817_old->_field_owner,_51817_old->_field_table->_field_file->_method_dir(),_51317_message);
		if ((_51717_owner->_field_owner).alloc == (_51242_target).alloc) {
			this->self->_method_push_cycle_error(_51242_target,_51717_owner->_field_table->_field_file->_method_dir(),_51317_message);
			goto _iter_end_4608404576;
		}
		_51817_old=_51717_owner;
		_51717_owner=_51717_owner->_field_owner;
	}
	_iter_next_4608404576:;
	goto _iter_begin_4608404576;
	_iter_end_4608404576:;
	this->self->_method_push_err(_51284_error_token,jule::Str("illegal cross cycle in use declarations;\n@", 42),jule::Slice<jule::Any>({jule::Any(_51317_message)}));
}



inline jule::Bool _110d9ce90_SymbolBuilder::_method_check_import_cycles(jule::Ref<_110e4edc0_ImportInfo> _53539_imp,jule::Ref<_11054f670_UseDecl> _53557_decl) {
	if (_53539_imp->_field_path == this->self->_field_table->_field_file->_method_dir()) {
		this->self->_method_push_err(_53557_decl->_field_token,jule::Str("illegal cycle in use declaration, package @ refers to itself", 60),jule::Slice<jule::Any>({jule::Any(this->self->_method_get_as_link_path(_53539_imp->_field_path))}));
		return false;
	}
	if ((!(jule::real(this->self->_field_owner)))) {
		return true;
	}
	if (this->self->_field_owner->_field_table->_field_file->_method_dir() == _53539_imp->_field_path) {
		this->self->_method_push_cross_cycle_error(this->self->_field_owner,_53539_imp,_53557_decl->_field_token);
		return false;
	}
	jule::Ref<_110d9ce90_SymbolBuilder> _55017_owner = this->self->_field_owner;
	_julec_label_iter:;
	if (_55017_owner->_field_table->_field_file->_method_dir() == _53539_imp->_field_path) {
		this->self->_method_push_cross_cycle_error(_55017_owner,_53539_imp,_53557_decl->_field_token);
		return false;
	}
	if (jule::real(_55017_owner->_field_owner)) {
		_55017_owner=_55017_owner->_field_owner;
		goto _julec_label_iter;
	}
	return true;
}



inline jule::Bool _110d9ce90_SymbolBuilder::_method_import_package(jule::Ref<_110e4edc0_ImportInfo>& _56539_imp,jule::Ref<_11054f670_UseDecl> _56561_decl) {
	jule::Bool _56579_ok = jule::Bool();
	if (_56539_imp->_field_cpp_linked) {
		_56579_ok = true;
		return _56579_ok;
	}
	jule::Ref<_110e4edc0_ImportInfo> _57017_port = this->self->_field_importer.get()._method_get_import(_56539_imp->_field_path);
	if (jule::real(_57017_port)) {
		_56539_imp->_field_package=_57017_port->_field_package;
		_56539_imp->_field_duplicate=true;
	} else {
		if ((!(this->self->_method_check_import_cycles(_56539_imp,_56561_decl)))) {
			_56579_ok = false;
			return _56579_ok;
		}
		jule::Slice<jule::Ref<_1104fada0_Ast>> _57922_asts;
		jule::Slice<_127e05da0_Log> _57928_errors;
		std::tie(_57922_asts,_57928_errors) = this->self->_field_importer.get()._method_import_package(_56539_imp->_field_path);
		if (_57928_errors.len() > 0LL) {
			this->self->_field_errors=jule::append(this->self->_field_errors,_57928_errors);
			_56579_ok = false;
			return _56579_ok;
		}
		{
			auto __julec_range_expr = _57922_asts;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1104fada0_Ast> _110d9ce90_ast = *__julec_range_begin;
				_iter_begin_4608450912:;
				{
					jule::Ref<_1111c15d0_SymbolTable> _58626_table;
					jule::Slice<_127e05da0_Log> _58633_errors;
					std::tie(_58626_table,_58633_errors) = _1117d9ee0_build_symbols(_110d9ce90_ast,this->self->_field_importer,this->self);
					if (_58633_errors.len() > 0LL) {
						this->self->_field_errors=jule::append(this->self->_field_errors,_58633_errors);
						this->self->_method_push_err_text(_56539_imp->_field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any(_56539_imp->_field_link_path)}));
						_56579_ok = false;
						return _56579_ok;
					}
					_56539_imp->_field_package->_field_files=jule::append(_56539_imp->_field_package->_field_files,jule::Slice<jule::Ref<_1111c15d0_SymbolTable>>({_58626_table}));
				}
				_iter_next_4608450912:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _110d9ce90_ast = *__julec_range_begin; goto _iter_begin_4608450912; }
				_iter_end_4608450912:;
			}
		}
	}
	this->self->_method_impl_import_selections(_56539_imp,_56561_decl);
	_56579_ok = true;
	return _56579_ok;
}



inline jule::Ref<_110e4edc0_ImportInfo> _110d9ce90_SymbolBuilder::_method_import_use_decl(jule::Ref<_11054f670_UseDecl> _60439_decl) {
	jule::Ref<_110e4edc0_ImportInfo> _60517_imp = this->self->_method_build_import(_60439_decl);
	if ((!(jule::real(_60517_imp)))) {
		return jule::new_ref<_110e4edc0_ImportInfo>();
	}
	jule::Bool _61117_ok = this->self->_method_check_duplicate_use_decl(_60517_imp);
	if ((!(_61117_ok))) {
		return jule::new_ref<_110e4edc0_ImportInfo>();
	}
	if ((_60517_imp->_field_alias.len() != 0LL) && (_60439_decl->_field_selected.len() > 0LL)) {
		this->self->_method_push_err(_60439_decl->_field_token,jule::Str("use aliases cannot useable for selected package defines", 55),jule::Slice<jule::Any>({}));
	}
	_61117_ok=this->self->_method_import_package(_60517_imp,_60439_decl);
	this->self->_field_table->_field_imports._method_push(_60517_imp);
	if (_61117_ok) {
		this->self->_field_importer.get()._method_imported(_60517_imp);
		return _60517_imp;
	}
	return jule::new_ref<_110e4edc0_ImportInfo>();
}



inline void _110d9ce90_SymbolBuilder::_method_import_use_decls(void) {
	jule::Int _63017_i = 0LL;
	_iter_begin_4608477376:;
	if (!(_63017_i < this->self->_field_ast->_field_use_decls._method_len())) { goto _iter_end_4608477376; }
	{
		jule::Ref<_11054f670_UseDecl> _63221_decl = this->self->_field_ast->_field_use_decls._method_at(_63017_i);
		this->self->_method_import_use_decl(_63221_decl);
		if (this->self->_field_errors.len() > 0LL) {
			goto _iter_end_4608477376;
		}
	}
	_iter_next_4608477376:;
	(_63017_i)++;
	goto _iter_begin_4608477376;
	_iter_end_4608477376:;
}



inline void _110d9ce90_SymbolBuilder::_method_append_decl(_11054f670_Node _64234_decl) {
	{
		auto _match_expr{ _64234_decl._field_data };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_TypeAliasDecl>>())) { goto _case_end_4608488128; }
		_case_begin_4608488128:;
		{
			jule::Ref<_1116aff70_TypeAlias> _64521_ta = _110d9ce90_build_type_alias(_64234_decl._field_data.operator jule::Ref<_11054f670_TypeAliasDecl>());
			(*this)._field_table->_field_type_aliases._method_push(_64521_ta);
		}
		goto _match_end_4608484992;
		_case_end_4608488128:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_StructDecl>>())) { goto _case_end_4608485984; }
		_case_begin_4608485984:;
		{
			jule::Ref<_1109372e0_Struct> _64921_srct = _110d9ce90_build_struct(_64234_decl._field_data.operator jule::Ref<_11054f670_StructDecl>());
			(*this)._field_table->_field_structs._method_push(_64921_srct);
		}
		goto _match_end_4608484992;
		_case_end_4608485984:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_FnDecl>>())) { goto _case_end_4608486096; }
		_case_begin_4608486096:;
		{
			jule::Ref<_11072eb20_Fn> _65321_f = _110d9ce90_build_fn(_64234_decl._field_data.operator jule::Ref<_11054f670_FnDecl>());
			(*this)._field_table->_field_funcs._method_push(_65321_f);
		}
		goto _match_end_4608484992;
		_case_end_4608486096:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_TraitDecl>>())) { goto _case_end_4608486208; }
		_case_begin_4608486208:;
		{
			jule::Ref<_110e3f160_Trait> _65721_t = _110d9ce90_build_trait(_64234_decl._field_data.operator jule::Ref<_11054f670_TraitDecl>());
			(*this)._field_table->_field_traits._method_push(_65721_t);
		}
		goto _match_end_4608484992;
		_case_end_4608486208:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_VarDecl>>())) { goto _case_end_4608488304; }
		_case_begin_4608488304:;
		{
			jule::Ref<_110e92c80_Var> _66121_v = _110d9ce90_build_var(_64234_decl._field_data.operator jule::Ref<_11054f670_VarDecl>());
			(*this)._field_table->_field_vars._method_push(_66121_v);
		}
		goto _match_end_4608484992;
		_case_end_4608488304:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_EnumDecl>>())) { goto _case_end_4608488416; }
		_case_begin_4608488416:;
		{
			jule::Ref<_110e453c0_Enum> _66521_e = _110d9ce90_build_enum(_64234_decl._field_data.operator jule::Ref<_11054f670_EnumDecl>());
			(*this)._field_table->_field_enums._method_push(_66521_e);
		}
		goto _match_end_4608484992;
		_case_end_4608488416:;
		_case_begin_4608485680:;
		{
			(*this)._method_push_err(_64234_decl._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4608484992;
		_case_end_4608485680:;
		_match_end_4608484992:;
	}
}



inline void _110d9ce90_SymbolBuilder::_method_append_decls(void) {
	jule::Int _67417_i = 0LL;
	_iter_begin_4608527616:;
	if (!(_67417_i < (*this)._field_ast->_field_decls._method_len())) { goto _iter_end_4608527616; }
	{
		_11054f670_Node _67621_decl = (*this)._field_ast->_field_decls._method_at(_67417_i);
		(*this)._method_append_decl(_67621_decl);
	}
	_iter_next_4608527616:;
	(_67417_i)++;
	goto _iter_begin_4608527616;
	_iter_end_4608527616:;
}



inline void _110d9ce90_SymbolBuilder::_method_append_impls(void) {
	(*this)._field_table->_field_impls=_1108ddf20_Vector_15::_static_method_new(static_cast<jule::Int>((*this)._field_ast->_field_impls._method_len()));
	jule::Int _68317_i = 0LL;
	_iter_begin_4608536112:;
	if (!(_68317_i < (*this)._field_ast->_field_impls._method_len())) { goto _iter_end_4608536112; }
	{
		jule::Ref<_11054f670_Impl> _68521_decl = (*this)._field_ast->_field_impls._method_at(_68317_i);
		(*this)._field_table->_field_impls._method_push(_110d9ce90_build_impl(_68521_decl));
	}
	_iter_next_4608536112:;
	(_68317_i)++;
	goto _iter_begin_4608536112;
	_iter_end_4608536112:;
}



inline void _110d9ce90_SymbolBuilder::_method_push_directive_pass(jule::Ref<_11054f670_Directive> _69042_d) {
	_110d9ce90_Pass _69117_pass = _110d9ce90_Pass(_69042_d->_field_token,jule::Str());
	{
		auto __julec_range_expr = _69042_d->_field_args;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _110d9ce90_arg = *__julec_range_begin;
			_iter_begin_4608545360:;
			{
				if (_110d9ce90_arg != jule::Str("", 0)) {
					_69117_pass._field_text+=_110d9ce90_arg + jule::Str(" ", 1);
				}
			}
			_iter_next_4608545360:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110d9ce90_arg = *__julec_range_begin; goto _iter_begin_4608545360; }
			_iter_end_4608545360:;
		}
	}
	_69117_pass._field_text=_69117_pass._field_text.trim(jule::Str(" \n\r\t\v", 5));
	(*this)._field_table->_field_passes._method_push(_69117_pass);
}



inline void _110d9ce90_SymbolBuilder::_method_append_top_directives(void) {
	jule::Int _70417_i = 0LL;
	_iter_begin_4608552048:;
	if (!(_70417_i < (*this)._field_ast->_field_top_directives._method_len())) { goto _iter_end_4608552048; }
	{
		jule::Ref<_11054f670_Directive> _70621_d = (*this)._field_ast->_field_top_directives._method_at(_70417_i);
		{
			auto _match_expr{ _70621_d->_field_tag };
			if (!((jule::Str("pass", 4)) == _match_expr)) { goto _case_end_4608555840; }
			_case_begin_4608555840:;
			{
				(*this)._method_push_directive_pass(_70621_d);
			}
			goto _match_end_4608553872;
			_case_end_4608555840:;
			_match_end_4608553872:;
		}
	}
	_iter_next_4608552048:;
	(_70417_i)++;
	goto _iter_begin_4608552048;
	_iter_end_4608552048:;
}



inline void _110d9ce90_SymbolBuilder::_method_build(void) {
	this->self->_field_table=jule::new_struct<_1111c15d0_SymbolTable>(new( std::nothrow ) _1111c15d0_SymbolTable(this->self->_field_ast->_field_file,_1108ddf20_Vector_6(),_1108ddf20_Vector_7(),_1108ddf20_Vector_9(),_1108ddf20_Vector_10(),_1108ddf20_Vector_12(),_1108ddf20_Vector_11(),_1108ddf20_Vector_13(),_1108ddf20_Vector_14(),_1108ddf20_Vector_15()));
	this->self->_method_append_top_directives();
	this->self->_method_import_use_decls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_append_decls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_append_impls();
}







std::ostream &operator<<(std::ostream &_Stream, const _110d9ce90_SymbolBuilder &_Src) {
	_Stream << "SymbolBuilder{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "importer:" << _Src._field_importer << ", ";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "table:" << _Src._field_table;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_If &_Src) {
	_Stream << "If{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_Else &_Src) {
	_Stream << "Else{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "elifs:" << _Src._field_elifs << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_InfIter &_Src) {
	_Stream << "InfIter{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _110af2660_WhileIter::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_WhileIter &_Src) {
	_Stream << "WhileIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_RangeIter &_Src) {
	_Stream << "RangeIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "it:" << _Src._field_it;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "mtch:" << _Src._field_mtch;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_Label &_Src) {
	_Stream << "Label{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_Postfix &_Src) {
	_Stream << "Postfix{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_Assign &_Src) {
	_Stream << "Assign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_MultiAssign &_Src) {
	_Stream << "MultiAssign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_Match &_Src) {
	_Stream << "Match{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _110af2660_Case::_method_is_default(void) {
	return (*this)._field_exprs == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_Case &_Src) {
	_Stream << "Case{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "next:" << _Src._field_next;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "dest_case:" << _Src._field_dest_case;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_Recover &_Src) {
	_Stream << "Recover{";
	_Stream << "handler:" << _Src._field_handler << ", ";
	_Stream << "handler_expr:" << _Src._field_handler_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "scope_owner:" << _Src._field_scope_owner;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_ScopeGoto &_Src) {
	_Stream << "ScopeGoto{";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_110e4edc0_ImportInfo> _110af2660_ScopeChecker::_method_find_package(jule::Str _37835_ident) {
	return (*this)._field_s->_method_find_package(_37835_ident);
}



inline jule::Ref<_110e4edc0_ImportInfo> _110af2660_ScopeChecker::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)> _38837_selector) {
	return (*this)._field_s->_method_select_package(_38837_selector);
}



inline jule::Ref<_110e92c80_Var> _110af2660_ScopeChecker::_method_find_var(jule::Str _39931_ident,jule::Bool _39943_cpp_linked) {
	
	jule::Ref<_110e92c80_Var> _40217_v = (*this)._field_table->_method___find_var(_39931_ident,_39943_cpp_linked,true);
	if (jule::real(_40217_v)) {
		return _40217_v;
	}
	jule::Ref<_110af2660_ScopeChecker> _40717_parent = (*this)._field_parent;
	_iter_begin_4608621072:;
	if (!(jule::real(_40717_parent))) { goto _iter_end_4608621072; }
	{
		jule::Ref<_110e92c80_Var> _40921_v = _40717_parent->_field_table->_method___find_var(_39931_ident,_39943_cpp_linked,true);
		if (jule::real(_40921_v)) {
			return _40921_v;
		}
		_40717_parent=_40717_parent->_field_parent;
	}
	_iter_next_4608621072:;
	goto _iter_begin_4608621072;
	_iter_end_4608621072:;
	return (*this)._field_s->_method_find_var(_39931_ident,_39943_cpp_linked);
}



inline jule::Ref<_1116aff70_TypeAlias> _110af2660_ScopeChecker::_method_find_type_alias(jule::Str _42638_ident,jule::Bool _42650_cpp_linked) {
	
	jule::Ref<_1116aff70_TypeAlias> _42917_ta = (*this)._field_table->_method___find_type_alias(_42638_ident,_42650_cpp_linked,true);
	if (jule::real(_42917_ta)) {
		return _42917_ta;
	}
	jule::Ref<_110af2660_ScopeChecker> _43417_parent = (*this)._field_parent;
	_iter_begin_4608635856:;
	if (!(jule::real(_43417_parent))) { goto _iter_end_4608635856; }
	{
		jule::Ref<_1116aff70_TypeAlias> _43621_ta = _43417_parent->_field_table->_method___find_type_alias(_42638_ident,_42650_cpp_linked,true);
		if (jule::real(_43621_ta)) {
			return _43621_ta;
		}
		_43417_parent=_43417_parent->_field_parent;
	}
	_iter_next_4608635856:;
	goto _iter_begin_4608635856;
	_iter_end_4608635856:;
	return (*this)._field_s->_method_find_type_alias(_42638_ident,_42650_cpp_linked);
}



inline jule::Ref<_1109372e0_Struct> _110af2660_ScopeChecker::_method_find_struct(jule::Str _45134_ident,jule::Bool _45146_cpp_linked) {
	return (*this)._field_s->_method_find_struct(_45134_ident,_45146_cpp_linked);
}



inline jule::Ref<_11072eb20_Fn> _110af2660_ScopeChecker::_method_find_fn(jule::Str _46030_ident,jule::Bool _46042_cpp_linked) {
	return (*this)._field_s->_method_find_fn(_46030_ident,_46042_cpp_linked);
}



inline jule::Ref<_110e3f160_Trait> _110af2660_ScopeChecker::_method_find_trait(jule::Str _46933_ident) {
	return (*this)._field_s->_method_find_trait(_46933_ident);
}



inline jule::Ref<_110e453c0_Enum> _110af2660_ScopeChecker::_method_find_enum(jule::Str _47832_ident) {
	return (*this)._field_s->_method_find_enum(_47832_ident);
}



inline jule::Bool _110af2660_ScopeChecker::_method_is_unsafe(void) {
	jule::Ref<_110af2660_ScopeChecker> _48617_scope = this->self;
	_julec_label_iter:;
	if (_48617_scope->_field_scope->_field_unsafety) {
		return true;
	}
	if (jule::real(_48617_scope->_field_parent)) {
		_48617_scope=_48617_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _110af2660_ScopeChecker::_method_is_root(void) {
	return (!(jule::real((*this)._field_parent))) || jule::real((*this)._field_owner);
}



inline jule::Ref<_110af2660_ScopeChecker> _110af2660_ScopeChecker::_method_get_root(void) {
	jule::Ref<_110af2660_ScopeChecker> _50817_root = this->self;
	_iter_begin_4608678224:;
	if (!(jule::real(_50817_root->_field_parent) && (!(jule::real(_50817_root->_field_owner))))) { goto _iter_end_4608678224; }
	{
		_50817_root=_50817_root->_field_parent;
	}
	_iter_next_4608678224:;
	goto _iter_begin_4608678224;
	_iter_end_4608678224:;
	return _50817_root;
}



inline jule::Ref<_110af2660_Label> _110af2660_ScopeChecker::_method_find_label(jule::Str _51829_ident) {
	jule::Int _51917_i = 0LL;
	_iter_begin_4608683248:;
	if (!(_51917_i < (*this)._field_scope->_field_stmts._method_len())) { goto _iter_end_4608683248; }
	{
		jule::Any _52121_st = (*this)._field_scope->_field_stmts._method_at(_51917_i);
		{
			auto _match_expr{ _52121_st };
			if (!(_match_expr.type_is<jule::Ref<_110af2660_Label>>())) { goto _case_end_4608686832; }
			_case_begin_4608686832:;
			{
				jule::Ref<_110af2660_Label> _52425_label = _52121_st.operator jule::Ref<_110af2660_Label>();
				if (_52425_label->_field_ident == _51829_ident) {
					return _52425_label;
				}
			}
			goto _match_end_4608685104;
			_case_end_4608686832:;
			_match_end_4608685104:;
		}
	}
	_iter_next_4608683248:;
	(_51917_i)++;
	goto _iter_begin_4608683248;
	_iter_end_4608683248:;
	return jule::new_ref<_110af2660_Label>();
}



inline jule::Ref<_110af2660_ScopeLabel> _110af2660_ScopeChecker::_method_find_label_scope(jule::Str _53636_ident) {
	jule::Ref<_110af2660_ScopeLabel> _53717_label = this->self->_method_find_label_all(_53636_ident);
	if (jule::real(_53717_label) && ((_53717_label->_field_scope).alloc == (this->self).alloc)) {
		return _53717_label;
	}
	return jule::new_ref<_110af2660_ScopeLabel>();
}



inline jule::Ref<_110af2660_ScopeLabel> _110af2660_ScopeChecker::_method_find_label_all(jule::Str _54833_ident) {
	{
		auto __julec_range_expr = (*this)._field_labels.get();
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110af2660_ScopeLabel> _110af2660_lbl = *__julec_range_begin;
			_iter_begin_4608697728:;
			{
				if (_110af2660_lbl->_field_label->_field_ident == _54833_ident) {
					return _110af2660_lbl;
				}
			}
			_iter_next_4608697728:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110af2660_lbl = *__julec_range_begin; goto _iter_begin_4608697728; }
			_iter_end_4608697728:;
		}
	}
	return jule::new_ref<_110af2660_ScopeLabel>();
}



inline jule::Bool _110af2660_ScopeChecker::_method_is_duplicated_ident(jule::Uintptr _56038_itself,jule::Str _56055_ident) {
	jule::Ref<_110e92c80_Var> _56113_v = (*this)._method_find_var(_56055_ident,false);
	if ((jule::real(_56113_v) && (((jule::Uintptr)((_56113_v).alloc)) != _56038_itself)) && ((_56113_v->_field_scope).alloc == ((*this)._field_scope).alloc)) {
		return true;
	}
	jule::Ref<_1116aff70_TypeAlias> _56613_ta = (*this)._method_find_type_alias(_56055_ident,false);
	if ((jule::real(_56613_ta) && (((jule::Uintptr)((_56613_ta).alloc)) != _56038_itself)) && ((_56613_ta->_field_scope).alloc == ((*this)._field_tree).alloc)) {
		return true;
	}
	return false;
}



inline void _110af2660_ScopeChecker::_method_check_var_decl(jule::Ref<_11054f670_VarDecl> _57438_decl) {
	jule::Ref<_110e92c80_Var> _57517_v = _110d9ce90_build_var(_57438_decl);
	_57517_v->_field_scope=this->self->_field_scope;
	__JULE_DEFER({
		this->self->_field_table->_field_vars._method_push(_57517_v);
		this->self->_field_scope->_field_stmts._method_push(jule::Any(_57517_v));
	});
	if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_57517_v).alloc)),_57517_v->_field_ident)) {
		this->self->_field_s->_method_push_err(_57517_v->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_57517_v->_field_ident)}));
		this->self->_field_s->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	this->self->_field_s->_method_check_var_decl(_57517_v,this->self);
	if ((!(_57517_v->_method_is_type_inferred())) && ((!(jule::real(_57517_v->_field_kind))) || (!(jule::real(_57517_v->_field_kind->_field_kind))))) {
		return;
	}
	this->self->_field_s->_method_check_type_var(_57517_v,this->self);
}



inline void _110af2660_ScopeChecker::_method_check_type_alias_decl(jule::Ref<_11054f670_TypeAliasDecl> _59645_decl) {
	jule::Ref<_1116aff70_TypeAlias> _59717_ta = _110d9ce90_build_type_alias(_59645_decl);
	if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_59717_ta).alloc)),_59717_ta->_field_ident)) {
		this->self->_field_s->_method_push_err(_59717_ta->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_59717_ta->_field_ident)}));
		this->self->_field_s->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	this->self->_field_s->_method_check_type_alias_decl(_59717_ta,this->self);
	this->self->_field_table->_field_type_aliases._method_push(_59717_ta);
}



inline jule::Ref<_110af2660_Scope> _110af2660_ScopeChecker::_method_get_child(void) {
	return jule::new_struct<_110af2660_Scope>(new( std::nothrow ) _110af2660_Scope((*this)._field_scope,jule::Bool(),jule::Bool(),_1108ddf20_Vector_8()));
}



inline void _110af2660_ScopeChecker::_method_check_child_ssc(jule::Ref<_11054f670_ScopeTree> _61339_tree,jule::Ref<_110af2660_Scope> _61361_s,jule::Ref<_110af2660_ScopeChecker> _61376_ssc) {
	_61376_ssc->_field_parent=this->self;
	_61376_ssc->_method_check(_61339_tree,_61361_s);
}



inline jule::Ref<_110af2660_Scope> _110af2660_ScopeChecker::_method_check_child_sc(jule::Ref<_11054f670_ScopeTree> _61838_tree,jule::Ref<_110af2660_ScopeChecker> _61860_ssc) {
	jule::Ref<_110af2660_Scope> _61917_s = this->self->_method_get_child();
	this->self->_method_check_child_ssc(_61838_tree,_61917_s,_61860_ssc);
	return _61917_s;
}



inline jule::Ref<_110af2660_Scope> _110af2660_ScopeChecker::_method_check_child(jule::Ref<_11054f670_ScopeTree> _62435_tree) {
	jule::Ref<_110af2660_ScopeChecker> _62517_ssc = this->self->_method_new_child_checker();
	return this->self->_method_check_child_sc(_62435_tree,_62517_ssc);
}



inline void _110af2660_ScopeChecker::_method_check_anon_scope(jule::Ref<_11054f670_ScopeTree> _62940_tree) {
	jule::Ref<_110af2660_Scope> _63017_s = this->self->_method_check_child(_62940_tree);
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_63017_s));
}



inline jule::Bool _110af2660_ScopeChecker::_method_try_call_recover(jule::Ref<_1112d7f10_Data> _63440_d) {
	{
		auto _match_expr{ _63440_d->_field_model };
		if (!(_match_expr.type_is<jule::Ref<_110af2660_Recover>>())) { goto _case_end_4608773632; }
		goto _match_end_4608772672;
		_case_end_4608773632:;
		_case_begin_4608773328:;
		{
			return false;
		}
		goto _match_end_4608772672;
		_case_end_4608773328:;
		_match_end_4608772672:;
	}
	jule::Ref<_110af2660_Recover> _64017_rec = _63440_d->_field_model.operator jule::Ref<_110af2660_Recover>();
	_64017_rec->_field_handler=_63440_d->_field_kind->_method_fnc();
	_64017_rec->_field_scope=jule::new_struct<_110af2660_Scope>(new( std::nothrow ) _110af2660_Scope());
	_64017_rec->_field_scope_owner=this->self->_method_get_root()->_field_owner;
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_64017_rec));
	this->self->_field_tree->_field_stmts=this->self->_field_tree->_field_stmts.slice(static_cast<jule::Int>(this->self->_field_i + 1LL));
	this->self->_field_scope=_64017_rec->_field_scope;
	this->self->_method_check_tree();
	return true;
}



inline void _110af2660_ScopeChecker::_method_check_expr(jule::Ref<_11054f670_Expr> _65334_expr) {
	jule::Ref<_1112d7f10_Data> _65417_d = this->self->_field_s->_method_eval(_65334_expr,this->self);
	if ((!(jule::real(_65417_d)))) {
		return;
	}
	if (_65334_expr->_method_is_fn_call()) {
		jule::Bool _66017_ok = this->self->_method_try_call_recover(_65417_d);
		if (_66017_ok) {
			return;
		}
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_65417_d));
}



inline jule::Ref<_110af2660_If> _110af2660_ScopeChecker::_method_check_if(jule::Ref<_11054f670_If> _66932_i) {
	jule::Ref<_110af2660_Scope> _67017_s = this->self->_method_check_child(_66932_i->_field_scope);
	jule::Ref<_1112d7f10_Data> _67217_d = this->self->_field_s->_method_eval(_66932_i->_field_expr,this->self);
	if ((!(jule::real(_67217_d)))) {
		return jule::new_ref<_110af2660_If>();
	}
	jule::Ref<_1116aff70_Prim> _67713_prim = _67217_d->_field_kind->_method_prim();
	if ((!(jule::real(_67713_prim)))) {
		this->self->_field_s->_method_push_err(_66932_i->_field_expr->_field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>({}));
		return jule::new_ref<_110af2660_If>();
	}
	if ((!(_67713_prim->_method_is_bool()))) {
		this->self->_field_s->_method_push_err(_66932_i->_field_expr->_field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>({}));
		return jule::new_ref<_110af2660_If>();
	}
	return jule::new_struct<_110af2660_If>(new( std::nothrow ) _110af2660_If(_67217_d->_field_model,_67017_s));
}



inline jule::Ref<_110af2660_Else> _110af2660_ScopeChecker::_method_check_else(jule::Ref<_11054f670_Else> _69434_e) {
	jule::Ref<_110af2660_Scope> _69517_s = this->self->_method_check_child(_69434_e->_field_scope);
	return jule::new_struct<_110af2660_Else>(new( std::nothrow ) _110af2660_Else(_69517_s));
}



inline void _110af2660_ScopeChecker::_method_check_conditional(jule::Ref<_11054f670_Conditional> _70141_conditional) {
	jule::Ref<_110af2660_Conditional> _70217_c = jule::new_struct<_110af2660_Conditional>(new( std::nothrow ) _110af2660_Conditional());
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_70217_c));
	_70217_c->_field_elifs=jule::Slice<jule::Ref<_110af2660_If>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_70141_conditional->_field_tail.len() + 1LL)));
	_70217_c->_field_elifs[0LL]=this->self->_method_check_if(_70141_conditional->_field_head);
	{
		auto __julec_range_expr = _70141_conditional->_field_tail;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110af2660_i = 0;
			jule::Ref<_11054f670_If> _110af2660_elif = *__julec_range_begin;
			_iter_begin_4608823936:;
			{
				_70217_c->_field_elifs[static_cast<jule::Int>(_110af2660_i + 1LL)]=this->self->_method_check_if(_110af2660_elif);
			}
			_iter_next_4608823936:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110af2660_i; _110af2660_elif = *__julec_range_begin; goto _iter_begin_4608823936; }
			_iter_end_4608823936:;
		}
	}
	if (jule::real(_70141_conditional->_field_default)) {
		_70217_c->_field_default=this->self->_method_check_else(_70141_conditional->_field_default);
	}
}



inline jule::Ref<_110af2660_Scope> _110af2660_ScopeChecker::_method_check_iter_scope_sc(jule::Uintptr _71739_it,jule::Ref<_11054f670_ScopeTree> _71756_tree,jule::Ref<_110af2660_ScopeChecker> _71778_ssc) {
	_71778_ssc->_field_it=_71739_it;
	return this->self->_method_check_child_sc(_71756_tree,_71778_ssc);
}



inline jule::Ref<_110af2660_Scope> _110af2660_ScopeChecker::_method_check_iter_scope(jule::Uintptr _72236_it,jule::Ref<_11054f670_ScopeTree> _72253_tree) {
	jule::Ref<_110af2660_ScopeChecker> _72317_ssc = this->self->_method_new_child_checker();
	return this->self->_method_check_iter_scope_sc(_72236_it,_72253_tree,_72317_ssc);
}



inline void _110af2660_ScopeChecker::_method_check_inf_iter(jule::Ref<_11054f670_Iter> _72738_it) {
	jule::Ref<_110af2660_InfIter> _72817_kind = jule::new_struct<_110af2660_InfIter>(new( std::nothrow ) _110af2660_InfIter());
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_72817_kind));
	_72817_kind->_field_scope=this->self->_method_check_iter_scope(((jule::Uintptr)((_72817_kind).alloc)),_72738_it->_field_scope);
}



inline void _110af2660_ScopeChecker::_method_check_while_iter(jule::Ref<_11054f670_Iter> _73540_it) {
	jule::Ref<_11054f670_WhileKind> _73617_wh = _73540_it->_field_kind.operator jule::Ref<_11054f670_WhileKind>();
	if ((!(jule::real(_73617_wh->_field_expr))) && (_73617_wh->_field_next == nullptr)) {
		this->self->_method_check_inf_iter(_73540_it);
		return;
	}
	jule::Ref<_110af2660_WhileIter> _74217_kind = jule::new_struct<_110af2660_WhileIter>(new( std::nothrow ) _110af2660_WhileIter());
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_74217_kind));
	_74217_kind->_field_scope=this->self->_method_check_iter_scope(((jule::Uintptr)((_74217_kind).alloc)),_73540_it->_field_scope);
	if (jule::real(_73617_wh->_field_expr)) {
		jule::Ref<_1112d7f10_Data> _74921_d = this->self->_field_s->_method_eval(_73617_wh->_field_expr,this->self);
		if ((!(jule::real(_74921_d)))) {
			return;
		}
		jule::Ref<_1116aff70_Prim> _75417_prim = _74921_d->_field_kind->_method_prim();
		if ((!(jule::real(_75417_prim)))) {
			this->self->_field_s->_method_push_err(_73540_it->_field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>({}));
			return;
		}
		if ((!(_75417_prim->_method_is_bool()))) {
			this->self->_field_s->_method_push_err(_73540_it->_field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>({}));
			return;
		}
		_74217_kind->_field_expr=_74921_d->_field_model;
	}
	if (_73617_wh->_method_is_while_next()) {
		if ((!(_110af2660_is_valid_ast_st_for_next_st(_73617_wh->_field_next)))) {
			this->self->_field_s->_method_push_err(_73617_wh->_field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>({}));
			return;
		}
		jule::Int _77417_n = this->self->_field_scope->_field_stmts._method_len();
		this->self->_method_check_node(_73617_wh->_field_next);
		if (_77417_n < this->self->_field_scope->_field_stmts._method_len()) {
			jule::Any _77725_st = this->self->_field_scope->_field_stmts._method_at(_77417_n);
			this->self->_field_scope->_field_stmts._method_set_len(_77417_n);
			if ((!(_110af2660_is_valid_st_for_next_st(_77725_st)))) {
				this->self->_field_s->_method_push_err(_73617_wh->_field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>({}));
			}
			_74217_kind->_field_next=_77725_st;
		}
	}
}



inline void _110af2660_ScopeChecker::_method_check_range_iter(jule::Ref<_11054f670_Iter> _78840_it) {
	jule::Ref<_11054f670_RangeKind> _78917_rang = _78840_it->_field_kind.operator jule::Ref<_11054f670_RangeKind>();
	jule::Ref<_1112d7f10_Data> _79117_d = this->self->_field_s->_method_eval(_78917_rang->_field_expr,this->self);
	if ((!(jule::real(_79117_d)))) {
		return;
	}
	jule::Ref<_110af2660_RangeIter> _79617_kind = jule::new_struct<_110af2660_RangeIter>(new( std::nothrow ) _110af2660_RangeIter(_79117_d,jule::Ref<_110af2660_Scope>(),jule::Ref<_110e92c80_Var>(),jule::Ref<_110e92c80_Var>()));
	_1111c0be0_RangeChecker _80017_rc = _1111c0be0_RangeChecker(this->self,_78917_rang,_79617_kind,_79117_d);
	jule::Bool _80613_ok = _80017_rc._method_check();
	if ((!(_80613_ok))) {
		return;
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_79617_kind));
	jule::Ref<_110af2660_ScopeChecker> _81317_ssc = this->self->_method_new_child_checker();
	if (jule::real(_79617_kind->_field_key_a)) {
		_81317_ssc->_field_table->_field_vars._method_push(_79617_kind->_field_key_a);
	}
	if (jule::real(_79617_kind->_field_key_b)) {
		_81317_ssc->_field_table->_field_vars._method_push(_79617_kind->_field_key_b);
	}
	_79617_kind->_field_scope=this->self->_method_check_iter_scope_sc(((jule::Uintptr)((_79617_kind).alloc)),_78840_it->_field_scope,_81317_ssc);
}



inline void _110af2660_ScopeChecker::_method_check_iter(jule::Ref<_11054f670_Iter> _82634_it) {
	if (_82634_it->_method_is_inf()) {
		this->self->_method_check_inf_iter(_82634_it);
		return;
	}
	{
		auto _match_expr{ _82634_it->_field_kind };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_WhileKind>>())) { goto _case_end_4608914080; }
		_case_begin_4608914080:;
		{
			this->self->_method_check_while_iter(_82634_it);
		}
		goto _match_end_4608912960;
		_case_end_4608914080:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_RangeKind>>())) { goto _case_end_4608914800; }
		_case_begin_4608914800:;
		{
			this->self->_method_check_range_iter(_82634_it);
		}
		goto _match_end_4608912960;
		_case_end_4608914800:;
		_case_begin_4608911504:;
		{
			jule::outln(jule::Str("error <unimplemented iteration kind>", 36));
		}
		goto _match_end_4608912960;
		_case_end_4608911504:;
		_match_end_4608912960:;
	}
}



inline jule::Bool _110af2660_ScopeChecker::_method_check_valid_cont_label(jule::Uintptr _83942_it) {
	jule::Ref<_110af2660_ScopeChecker> _84017_scope = this->self;
	_julec_label_iter:;
	if (_84017_scope->_field_it == _83942_it) {
		return true;
	}
	if (jule::real(_84017_scope->_field_parent)) {
		_84017_scope=_84017_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _110af2660_ScopeChecker::_method_check_valid_break_label(jule::Uintptr _85543_ptr) {
	jule::Ref<_110af2660_ScopeChecker> _85617_scope = this->self;
	_julec_label_iter:;
	if (_85617_scope->_field_it == _85543_ptr) {
		return true;
	}
	if (_85617_scope->_field_cse != 0LL) {
		jule::Uintptr _86417_mtch = ((jule::Uintptr)((((_110af2660_Case*)(_85617_scope->_field_cse))->_field_owner).alloc));
		if (_86417_mtch == _85543_ptr) {
			return true;
		}
	}
	if (jule::real(_85617_scope->_field_parent)) {
		_85617_scope=_85617_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ref<_110af2660_ContSt> _110af2660_ScopeChecker::_method_check_cont_valid_scope(jule::Ref<_11054f670_ContSt> _87841_c) {
	if (_87841_c->_field_label._field_id != 0LLU) {
		return jule::new_struct<_110af2660_ContSt>(new( std::nothrow ) _110af2660_ContSt());
	}
	_110af2660_ScopeChecker _88317_scope = (*this);
	_julec_label_iter:;
	{
		if (!((((_88317_scope._field_it == 0LL) && jule::real(_88317_scope._field_parent)) && (!(jule::real(_88317_scope._field_owner)))))) { goto _case_end_4608942096; }
		_case_begin_4608942096:;
		{
			_88317_scope=_88317_scope._field_parent;
			goto _julec_label_iter;
		}
		goto _match_end_4608941808;
		_case_end_4608942096:;
		if (!((_88317_scope._field_it != 0LL))) { goto _case_end_4608942208; }
		_case_begin_4608942208:;
		{
			return jule::new_struct<_110af2660_ContSt>(new( std::nothrow ) _110af2660_ContSt(_88317_scope._field_it));
		}
		goto _match_end_4608941808;
		_case_end_4608942208:;
		_match_end_4608941808:;
	}
	(*this)._field_s->_method_push_err(_87841_c->_field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>({}));
	return jule::new_ref<_110af2660_ContSt>();
}



inline void _110af2660_ScopeChecker::_method_check_cont(jule::Ref<_11054f670_ContSt> _89830_c) {
	jule::Ref<_110af2660_ContSt> _89917_cont = this->self->_method_check_cont_valid_scope(_89830_c);
	if ((!(jule::real(_89917_cont)))) {
		return;
	}
	if (_89830_c->_field_label._field_id != 0LLU) {
		jule::Ref<_110af2660_ScopeLabel> _90521_label = _110af2660_find_label_parent(_89830_c->_field_label._field_kind,this->self->_field_parent);
		if ((!(jule::real(_90521_label)))) {
			this->self->_field_s->_method_push_err(_89830_c->_field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any(_89830_c->_field_label._field_kind)}));
			return;
		}
		_90521_label->_field_used=true;
		if ((_90521_label->_field_pos + 1LL) >= _90521_label->_field_scope->_field_scope->_field_stmts._method_len()) {
			this->self->_field_s->_method_push_err(_89830_c->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
			return;
		}
		jule::Int _91817_i = _90521_label->_field_pos + 1LL;
		if (_91817_i >= _90521_label->_field_scope->_field_scope->_field_stmts._method_len()) {
			this->self->_field_s->_method_push_err(_89830_c->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
		} else {
			jule::Any _92225_st = _90521_label->_field_scope->_field_scope->_field_stmts._method_at(_91817_i);
			{
				auto _match_expr{ _92225_st };
				if (!(_match_expr.type_is<jule::Ref<_110af2660_InfIter>>())) { goto _case_end_4608973584; }
				_case_begin_4608973584:;
				{
					_89917_cont->_field_it=((jule::Uintptr)((_92225_st.operator jule::Ref<_110af2660_InfIter>()).alloc));
				}
				goto _match_end_4608970400;
				_case_end_4608973584:;
				if (!(_match_expr.type_is<jule::Ref<_110af2660_RangeIter>>())) { goto _case_end_4608971312; }
				_case_begin_4608971312:;
				{
					_89917_cont->_field_it=((jule::Uintptr)((_92225_st.operator jule::Ref<_110af2660_RangeIter>()).alloc));
				}
				goto _match_end_4608970400;
				_case_end_4608971312:;
				if (!(_match_expr.type_is<jule::Ref<_110af2660_WhileIter>>())) { goto _case_end_4608971424; }
				_case_begin_4608971424:;
				{
					_89917_cont->_field_it=((jule::Uintptr)((_92225_st.operator jule::Ref<_110af2660_WhileIter>()).alloc));
				}
				goto _match_end_4608970400;
				_case_end_4608971424:;
				_case_begin_4608970896:;
				{
					this->self->_field_s->_method_push_err(_89830_c->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
				}
				goto _match_end_4608970400;
				_case_end_4608970896:;
				_match_end_4608970400:;
			}
		}
	}
	if (_89917_cont->_field_it != 0LL) {
		if ((!(this->self->_method_check_valid_cont_label(_89917_cont->_field_it)))) {
			this->self->_field_s->_method_push_err(_89830_c->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
		}
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_89917_cont));
}



inline void _110af2660_ScopeChecker::_method_check_label(jule::Ref<_11054f670_LabelSt> _94135_l) {
	if (jule::real(this->self->_method_find_label(_94135_l->_field_ident))) {
		this->self->_field_s->_method_push_err(_94135_l->_field_token,jule::Str("label is already exist in this identifier: @", 44),jule::Slice<jule::Any>({jule::Any(_94135_l->_field_ident)}));
		return;
	}
	jule::Ref<_110af2660_Label> _94717_label = jule::new_struct<_110af2660_Label>(new( std::nothrow ) _110af2660_Label(_94135_l->_field_ident));
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_94717_label));
	this->self->_field_labels=jule::append(this->self->_field_labels.get(),jule::Slice<jule::Ref<_110af2660_ScopeLabel>>({jule::new_struct<_110af2660_ScopeLabel>(new( std::nothrow ) _110af2660_ScopeLabel(_94135_l->_field_token,_94717_label,static_cast<jule::Int>(this->self->_field_scope->_field_stmts._method_len() - 1LL),this->self,jule::Bool()))}));
}



inline void _110af2660_ScopeChecker::_method_push_goto(jule::Ref<_11054f670_GotoSt> _96033_gt) {
	this->self->_field_scope->_field_stmts._method_push(jule::Any(jule::new_struct<_110af2660_GotoSt>(new( std::nothrow ) _110af2660_GotoSt(_96033_gt->_field_label._field_kind))));
	this->self->_field_gotos=jule::append(this->self->_field_gotos.get(),jule::Slice<jule::Ref<_110af2660_ScopeGoto>>({jule::new_struct<_110af2660_ScopeGoto>(new( std::nothrow ) _110af2660_ScopeGoto(_96033_gt,this->self,static_cast<jule::Int>(this->self->_field_scope->_field_stmts._method_len() - 1LL)))}));
}



inline void _110af2660_ScopeChecker::_method_check_postfix(jule::Ref<_11054f670_AssignSt> _97237_a) {
	if (_97237_a->_field_left.len() > 1LL) {
		this->self->_field_s->_method_push_err(_97237_a->_field_setter,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return;
	}
	jule::Ref<_1112d7f10_Data> _97817_d = this->self->_field_s->_method_eval(_97237_a->_field_left[0LL]->_field_expr,this->self);
	if ((!(jule::real(_97817_d)))) {
		return;
	}
	_110af2660_check_assign(this->self->_field_s,_97817_d,jule::new_ref<_1112d7f10_Data>(),_97237_a->_field_setter);
	if (jule::real(_97817_d->_field_kind->_method_ptr())) {
		jule::Ref<_1116aff70_Ptr> _98621_ptr = _97817_d->_field_kind->_method_ptr();
		if ((!(_98621_ptr->_method_is_unsafe())) && (!(this->self->_method_is_unsafe()))) {
			this->self->_field_s->_method_push_err(_97237_a->_field_left[0LL]->_field_expr->_field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
			return;
		}
	}
	jule::Ref<_1116aff70_TypeKind> _99317_check_t = _97817_d->_field_kind;
	if (jule::real(_97817_d->_field_kind->_method_ref())) {
		_99317_check_t=_97817_d->_field_kind->_method_ref()->_field_elem;
	}
	if ((!(jule::real(_99317_check_t->_method_prim()))) || (!(_1118e4c20_is_num(_99317_check_t->_method_prim()->_field_kind)))) {
		this->self->_field_s->_method_push_err(_97237_a->_field_setter,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any(_97237_a->_field_setter._field_kind),jule::Any(_97817_d->_field_kind->_method_to_str())}));
		return;
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(jule::new_struct<_110af2660_Postfix>(new( std::nothrow ) _110af2660_Postfix(_97817_d->_field_model,_97237_a->_field_setter._field_kind))));
}



inline jule::Bool _110af2660_ScopeChecker::_method_is_new_assign_ident(jule::Str _100938_ident) {
	if (_1106ec050_is_ignore_ident(_100938_ident) || (_100938_ident == jule::Str("", 0))) {
		return false;
	}
	return (*this)._field_table->_method_def_by_ident(_100938_ident,false) == nullptr;
}



inline void _110af2660_ScopeChecker::_method_check_single_assign(jule::Ref<_11054f670_AssignSt> _101743_a) {
	jule::Ref<_1112d7f10_Data> _101817_l = jule::new_ref<_1112d7f10_Data>();
	jule::Ref<_1112d7f10_Data> _101917_r = jule::new_ref<_1112d7f10_Data>();
	if ((!(_1106ec050_is_ignore_ident(_101743_a->_field_left[0LL]->_field_ident)))) {
		_101817_l=this->self->_field_s->_method_eval(_101743_a->_field_left[0LL]->_field_expr,this->self);
		if ((!(jule::real(_101817_l)))) {
			return;
		}
	}
	if (jule::real(_101817_l)) {
		_101917_r=this->self->_field_s->_method_evalp(_101743_a->_field_right,this->self,_101817_l->_field_kind);
	} else {
		_101917_r=this->self->_field_s->_method_eval(_101743_a->_field_right,this->self);
	}
	if ((!(jule::real(_101917_r)))) {
		return;
	}
	if ((!(jule::real(_101817_l)))) {
		if (_101917_r->_field_kind->_method_is_void()) {
			this->self->_field_s->_method_push_err(_101743_a->_field_right->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		}
		this->self->_field_scope->_field_stmts._method_push(jule::Any(_101917_r));
		return;
	}
	if ((!(_110af2660_check_assign(this->self->_field_s,_101817_l,_101917_r,_101743_a->_field_setter)))) {
		return;
	}
	if (jule::real(_101917_r->_field_kind->_method_tup())) {
		this->self->_field_s->_method_push_err(_101743_a->_field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>({}));
		return;
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(jule::new_struct<_110af2660_Assign>(new( std::nothrow ) _110af2660_Assign(_101817_l->_field_model,_101917_r->_field_model,_101743_a->_field_setter._field_kind))));
	if ((_101743_a->_field_setter._field_kind != jule::Str("=", 1)) && (!(_101917_r->_method_is_const()))) {
		_101743_a->_field_setter._field_kind=_101743_a->_field_setter._field_kind.slice(0LL,static_cast<jule::Int>(_101743_a->_field_setter._field_kind.len() - 1LL));
		_1112d7f10_BinopSolver _106421_solver = _1112d7f10_BinopSolver(jule::new_struct<_1112d7f10_Eval>(new( std::nothrow ) _1112d7f10_Eval(this->self->_field_s,this->self,jule::Ref<_1116aff70_TypeKind>(),this->self->_method_is_unsafe(),jule::Ref<_110e92c80_Var>())),jule::Ref<_1112d7f10_Data>(),jule::Ref<_1112d7f10_Data>(),_101743_a->_field_setter);
		_101917_r=_106421_solver._method_solve_explicit(_101817_l,_101917_r);
		if ((!(jule::real(_101917_r)))) {
			return;
		}
		_101743_a->_field_setter._field_kind+=jule::Str("=", 1);
	}
	_1111c0be0_AssignTypeChecker _108017_checker = _1111c0be0_AssignTypeChecker(this->self->_field_s,_101817_l->_field_kind,_101917_r,_101743_a->_field_setter,true);
	_108017_checker._method_check();
}



inline void _110af2660_ScopeChecker::_method___process_end_part_of_multi_assign(jule::Ref<_110af2660_MultiAssign> _109057_st,jule::Ref<_11054f670_AssignSt> _109113_a,jule::Ref<_11054f670_AssignLeft> _109127_lexpr,jule::Ref<_1112d7f10_Data> _109151_l,jule::Ref<_1112d7f10_Data> _109165_r) {
	if (_1106ec050_is_ignore_ident(_109127_lexpr->_field_ident)) {
		if (_109165_r->_field_kind->_method_is_void()) {
			(*this)._field_s->_method_push_err(_109113_a->_field_right->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		}
		_109057_st->_field_l=jule::append(_109057_st->_field_l,jule::Slice<jule::Any>({jule::Any(nullptr)}));
		return;
	}
	if (_109113_a->_field_declarative && (*this)._method_is_new_assign_ident(_109127_lexpr->_field_ident)) {
		jule::Ref<_110e92c80_Var> _110321_v = jule::new_struct<_110e92c80_Var>(new( std::nothrow ) _110e92c80_Var((*this)._field_scope,_109127_lexpr->_field_token,_109127_lexpr->_field_ident,jule::Bool(),jule::Bool(),_109127_lexpr->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),_109127_lexpr->_field_reference,jule::Str(),jule::Ref<_1116aff70_TypeSymbol>(),jule::new_struct<_1112d7f10_Value>(new( std::nothrow ) _1112d7f10_Value(_109113_a->_field_right,_109165_r)),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Slice<jule::Ref<_11054f670_Directive>>(),jule::Slice<jule::Ref<_110e92c80_Var>>()));
		(*this)._field_s->_method_check_var(_110321_v);
		_109057_st->_field_l=jule::append(_109057_st->_field_l,jule::Slice<jule::Any>({jule::Any(_110321_v)}));
		(*this)._field_table->_field_vars._method_push(_110321_v);
		(*this)._field_scope->_field_stmts._method_push(jule::Any(_110321_v));
		return;
	}
	if (_109127_lexpr->_field_mutable || _109127_lexpr->_field_reference) {
		(*this)._field_s->_method_push_err(_109127_lexpr->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_109127_lexpr->_field_ident)}));
		(*this)._field_s->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	if ((!(_110af2660_check_assign((*this)._field_s,_109151_l,_109165_r,_109113_a->_field_setter)))) {
		return;
	}
	
	(*this)._field_s->_method_check_validity_for_init_expr(_109151_l->_field_mutable,false,_109151_l->_field_kind,_109165_r,_109113_a->_field_setter);
	_1111c0be0_AssignTypeChecker _113817_checker = _1111c0be0_AssignTypeChecker((*this)._field_s,_109151_l->_field_kind,_109165_r,_109113_a->_field_setter,true);
	_113817_checker._method_check();
	_109057_st->_field_l=jule::append(_109057_st->_field_l,jule::Slice<jule::Any>({_109151_l->_field_model}));
}



inline void _110af2660_ScopeChecker::_method_check_ret_multi_assign(jule::Ref<_11054f670_AssignSt> _115046_a) {
	jule::Ref<_1112d7f10_Data> _115117_rd = this->self->_field_s->_method_eval(_115046_a->_field_right,this->self);
	if ((!(jule::real(_115117_rd)))) {
		return;
	}
	jule::Slice<jule::Ref<_1112d7f10_Data>> _115617_r = _110af2660_get_datas_from_tuple_data(_115117_rd);
	{
		if (!((_115046_a->_field_left.len() > _115617_r.len()))) { goto _case_end_4609138272; }
		_case_begin_4609138272:;
		{
			this->self->_field_s->_method_push_err(_115046_a->_field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4609137984;
		_case_end_4609138272:;
		if (!((_115046_a->_field_left.len() < _115617_r.len()))) { goto _case_end_4609138384; }
		_case_begin_4609138384:;
		{
			this->self->_field_s->_method_push_err(_115046_a->_field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4609137984;
		_case_end_4609138384:;
		_match_end_4609137984:;
	}
	jule::Ref<_110af2660_MultiAssign> _116817_st = jule::new_struct<_110af2660_MultiAssign>(new( std::nothrow ) _110af2660_MultiAssign(jule::Slice<jule::Any>(),_115117_rd->_field_model));
	if ((!(jule::real(_115117_rd->_field_kind->_method_tup())))) {
		_116817_st->_field_r=jule::Any(jule::new_struct<_110e4e8a0_TupleExprModel>(new( std::nothrow ) _110e4e8a0_TupleExprModel(_115617_r)));
	}
	{
		auto __julec_range_expr = _115046_a->_field_left;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110af2660_i = 0;
			_iter_begin_4609148672:;
			{
				jule::Ref<_11054f670_AssignLeft> _117721_lexpr = _115046_a->_field_left[static_cast<jule::Int>(_110af2660_i)];
				jule::Ref<_1112d7f10_Data> _117821_l = jule::new_ref<_1112d7f10_Data>();
				jule::Ref<_1112d7f10_Data> _117921_r = _115617_r[static_cast<jule::Int>(_110af2660_i)];
				if ((!(_1106ec050_is_ignore_ident(_117721_lexpr->_field_ident))) && ((!(_115046_a->_field_declarative)) || (!(this->self->_method_is_new_assign_ident(_117721_lexpr->_field_ident))))) {
					_117821_l=this->self->_field_s->_method_eval(_117721_lexpr->_field_expr,this->self);
					if ((!(jule::real(_117821_l)))) {
						goto _iter_next_4609148672;
					}
				}
				this->self->_method___process_end_part_of_multi_assign(_116817_st,_115046_a,_117721_lexpr,_117821_l,_117921_r);
			}
			_iter_next_4609148672:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110af2660_i; goto _iter_begin_4609148672; }
			_iter_end_4609148672:;
		}
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_116817_st));
}



inline void _110af2660_ScopeChecker::_method_check_multi_assign(jule::Ref<_11054f670_AssignSt> _119442_a) {
	{
		auto _match_expr{ _119442_a->_field_right->_field_kind };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_FnCallExpr>>())) { goto _case_end_4609165360; }
		_case_begin_4609165360:;
		{
			this->self->_method_check_ret_multi_assign(_119442_a);
			return;
		}
		goto _match_end_4609164496;
		_case_end_4609165360:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_UnsafeExpr>>())) { goto _case_end_4609165488; }
		_case_begin_4609165488:;
		{
			{
				auto _match_expr{ _119442_a->_field_right->_field_kind.operator jule::Ref<_11054f670_UnsafeExpr>()->_field_expr };
				if (!(_match_expr.type_is<jule::Ref<_11054f670_FnCallExpr>>())) { goto _case_end_4609169696; }
				_case_begin_4609169696:;
				{
					this->self->_method_check_ret_multi_assign(_119442_a);
					return;
				}
				goto _match_end_4609167024;
				_case_end_4609169696:;
				_match_end_4609167024:;
			}
		}
		goto _match_end_4609164496;
		_case_end_4609165488:;
		_match_end_4609164496:;
	}
	jule::Slice<jule::Any> _120817_right = _110af2660_get_expr_models(_119442_a->_field_right->_field_kind);
	{
		if (!((_119442_a->_field_left.len() > _120817_right.len()))) { goto _case_end_4609172656; }
		_case_begin_4609172656:;
		{
			this->self->_field_s->_method_push_err(_119442_a->_field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4609170832;
		_case_end_4609172656:;
		if (!((_119442_a->_field_left.len() < _120817_right.len()))) { goto _case_end_4609172768; }
		_case_begin_4609172768:;
		{
			this->self->_field_s->_method_push_err(_119442_a->_field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4609170832;
		_case_end_4609172768:;
		_match_end_4609170832:;
	}
	jule::Ref<_110e4e8a0_TupleExprModel> _122017_right_tuple = jule::new_struct<_110e4e8a0_TupleExprModel>(new( std::nothrow ) _110e4e8a0_TupleExprModel());
	jule::Ref<_110af2660_MultiAssign> _122217_st = jule::new_struct<_110af2660_MultiAssign>(new( std::nothrow ) _110af2660_MultiAssign(jule::Slice<jule::Any>(),jule::Any(_122017_right_tuple)));
	{
		auto __julec_range_expr = _119442_a->_field_left;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110af2660_i = 0;
			_iter_begin_4609181840:;
			{
				jule::Ref<_11054f670_AssignLeft> _122721_lexpr = _119442_a->_field_left[static_cast<jule::Int>(_110af2660_i)];
				jule::Ref<_1112d7f10_Data> _122821_l = jule::new_ref<_1112d7f10_Data>();
				jule::Ref<_1112d7f10_Data> _122921_r = jule::new_ref<_1112d7f10_Data>();
				if ((!(_1106ec050_is_ignore_ident(_122721_lexpr->_field_ident))) && ((!(_119442_a->_field_declarative)) || (!(this->self->_method_is_new_assign_ident(_122721_lexpr->_field_ident))))) {
					_122821_l=this->self->_field_s->_method_eval(_122721_lexpr->_field_expr,this->self);
					if ((!(jule::real(_122821_l)))) {
						goto _iter_next_4609181840;
					}
				}
				if (jule::real(_122821_l)) {
					jule::Ref<_11054f670_Expr> _123925_expr = jule::new_struct<_11054f670_Expr>(new( std::nothrow ) _11054f670_Expr(_119442_a->_field_right->_field_token,_120817_right[static_cast<jule::Int>(_110af2660_i)]));
					_122921_r=this->self->_field_s->_method_evalp(_123925_expr,this->self,_122821_l->_field_kind);
				} else {
					jule::Ref<_11054f670_Expr> _124225_expr = jule::new_struct<_11054f670_Expr>(new( std::nothrow ) _11054f670_Expr(_119442_a->_field_right->_field_token,_120817_right[static_cast<jule::Int>(_110af2660_i)]));
					_122921_r=this->self->_field_s->_method_eval(_124225_expr,this->self);
				}
				if ((!(jule::real(_122921_r)))) {
					goto _iter_next_4609181840;
				}
				_122017_right_tuple->_field_datas=jule::append(_122017_right_tuple->_field_datas,jule::Slice<jule::Ref<_1112d7f10_Data>>({_122921_r}));
				this->self->_method___process_end_part_of_multi_assign(_122217_st,_119442_a,_122721_lexpr,_122821_l,_122921_r);
			}
			_iter_next_4609181840:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110af2660_i; goto _iter_begin_4609181840; }
			_iter_end_4609181840:;
		}
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_122217_st));
}



inline void _110af2660_ScopeChecker::_method_check_assign_st(jule::Ref<_11054f670_AssignSt> _125739_a) {
	if (_1106ec050_is_postfix_op(_125739_a->_field_setter._field_kind)) {
		this->self->_method_check_postfix(_125739_a);
		return;
	}
	if ((_125739_a->_field_left.len() == 1LL) && (!(_125739_a->_field_declarative))) {
		this->self->_method_check_single_assign(_125739_a);
		return;
	}
	this->self->_method_check_multi_assign(_125739_a);
}



inline jule::Ref<_110af2660_Scope> _110af2660_ScopeChecker::_method_check_case_scope(jule::Ref<_110af2660_Case> _127136_c,jule::Ref<_11054f670_ScopeTree> _127150_tree) {
	jule::Ref<_110af2660_ScopeChecker> _127217_ssc = this->self->_method_new_child_checker();
	_127217_ssc->_field_cse=((jule::Uintptr)((_127136_c).alloc));
	return this->self->_method_check_child_sc(_127150_tree,_127217_ssc);
}



inline jule::Ref<_110af2660_Case> _110af2660_ScopeChecker::_method_check_case(jule::Ref<_110af2660_Match> _127734_m,jule::Int _127745_i,jule::Ref<_11054f670_Case> _127757_c,jule::Ref<_1112d7f10_Data> _127787_expr) {
	jule::Ref<_110af2660_Case> _127817__case = _127734_m->_field_cases[static_cast<jule::Int>(_127745_i)];
	_127817__case->_field_exprs=jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_127757_c->_field_exprs.len())));
	{
		auto __julec_range_expr = _127757_c->_field_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110af2660_i = 0;
			jule::Ref<_11054f670_Expr> _110af2660_e = *__julec_range_begin;
			_iter_begin_4609228672:;
			{
				if (_127734_m->_field_type_match) {
					jule::Ref<_1112d7f10_Eval> _128325_eval = jule::new_struct<_1112d7f10_Eval>(new( std::nothrow ) _1112d7f10_Eval(this->self->_field_s,this->self,jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Ref<_110e92c80_Var>()));
					jule::Ref<_1112d7f10_Data> _128825_d = _128325_eval->_method_eval(_110af2660_e);
					if (jule::real(_128825_d)) {
						_127817__case->_field_exprs[static_cast<jule::Int>(_110af2660_i)]=jule::Any(_128825_d->_field_kind);
						if (_110af2660_count_match_type(_127734_m,_128825_d->_field_kind) > 1LL) {
							this->self->_field_s->_method_push_err(_110af2660_e->_field_token,jule::Str("type is already checked: @", 26),jule::Slice<jule::Any>({jule::Any(_128825_d->_field_kind->_method_to_str())}));
						}
					}
					jule::Ref<_110e3f160_Trait> _129621_trt = _127787_expr->_field_kind->_method_trt();
					if (jule::real(_129621_trt)) {
						this->self->_field_s->_method_check_type_compatibility(_127787_expr->_field_kind,_128825_d->_field_kind,_110af2660_e->_field_token,false);
					}
					goto _iter_next_4609228672;
				}
				jule::Ref<_1112d7f10_Data> _130421_d = this->self->_field_s->_method_eval(_110af2660_e,this->self);
				if ((!(jule::real(_130421_d)))) {
					goto _iter_next_4609228672;
				}
				_127817__case->_field_exprs[static_cast<jule::Int>(_110af2660_i)]=_130421_d->_field_model;
				_1111c0be0_AssignTypeChecker _131121_checker = _1111c0be0_AssignTypeChecker(this->self->_field_s,_127787_expr->_field_kind,_130421_d,_110af2660_e->_field_token,true);
				_131121_checker._method_check();
			}
			_iter_next_4609228672:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110af2660_i; _110af2660_e = *__julec_range_begin; goto _iter_begin_4609228672; }
			_iter_end_4609228672:;
		}
	}
	_127817__case->_field_scope=this->self->_method_check_case_scope(_127817__case,_127757_c->_field_scope);
	return _127817__case;
}



inline void _110af2660_ScopeChecker::_method_check_cases(jule::Ref<_11054f670_MatchCase> _132535_m,jule::Ref<_110af2660_Match> _132570_rm,jule::Ref<_1112d7f10_Data> _132586_expr) {
	_132570_rm->_field_cases=jule::Slice<jule::Ref<_110af2660_Case>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_132535_m->_field_cases.len())));
	{
		auto __julec_range_expr = _132535_m->_field_cases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110af2660_i = 0;
			_iter_begin_4609261664:;
			{
				jule::Ref<_110af2660_Case> _132821__case = jule::new_struct<_110af2660_Case>(new( std::nothrow ) _110af2660_Case(_132570_rm,jule::Ref<_110af2660_Scope>(),jule::Slice<jule::Any>(),jule::Ref<_110af2660_Case>()));
				if (_110af2660_i > 0LL) {
					_132570_rm->_field_cases[static_cast<jule::Int>(_110af2660_i - 1LL)]->_field_next=_132821__case;
				}
				_132570_rm->_field_cases[static_cast<jule::Int>(_110af2660_i)]=_132821__case;
			}
			_iter_next_4609261664:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110af2660_i; goto _iter_begin_4609261664; }
			_iter_end_4609261664:;
		}
	}
	if (jule::real(_132570_rm->_field_default) && (_132535_m->_field_cases.len() > 0LL)) {
		_132570_rm->_field_cases[static_cast<jule::Int>(_132570_rm->_field_cases.len() - 1LL)]->_field_next=_132570_rm->_field_default;
	}
	{
		auto __julec_range_expr = _132535_m->_field_cases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110af2660_i = 0;
			jule::Ref<_11054f670_Case> _110af2660_c = *__julec_range_begin;
			_iter_begin_4609270576:;
			{
				this->self->_method_check_case(_132570_rm,_110af2660_i,_110af2660_c,_132586_expr);
			}
			_iter_next_4609270576:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110af2660_i; _110af2660_c = *__julec_range_begin; goto _iter_begin_4609270576; }
			_iter_end_4609270576:;
		}
	}
}



inline jule::Ref<_110af2660_Case> _110af2660_ScopeChecker::_method_check_default(jule::Ref<_110af2660_Match> _134837_m,jule::Ref<_11054f670_Else> _134852_d) {
	jule::Ref<_110af2660_Case> _134917_def = jule::new_struct<_110af2660_Case>(new( std::nothrow ) _110af2660_Case(_134837_m,jule::Ref<_110af2660_Scope>(),jule::Slice<jule::Any>(),jule::Ref<_110af2660_Case>()));
	_134917_def->_field_scope=this->self->_method_check_case_scope(_134917_def,_134852_d->_field_scope);
	return _134917_def;
}



inline void _110af2660_ScopeChecker::_method_check_type_match(jule::Ref<_11054f670_MatchCase> _135640_m) {
	jule::Ref<_1112d7f10_Data> _135717_d = this->self->_field_s->_method_eval(_135640_m->_field_expr,this->self);
	if ((!(jule::real(_135717_d)))) {
		return;
	}
	if ((!((jule::real(_135717_d->_field_kind->_method_prim()) && _135717_d->_field_kind->_method_prim()->_method_is_any()) || jule::real(_135717_d->_field_kind->_method_trt())))) {
		this->self->_field_s->_method_push_err(_135640_m->_field_expr->_field_token,jule::Str("type-case must be have <any> or trait typed expression", 54),jule::Slice<jule::Any>({}));
		return;
	}
	jule::Ref<_110af2660_Match> _136717_tm = jule::new_struct<_110af2660_Match>(new( std::nothrow ) _110af2660_Match(_135717_d,true,jule::Slice<jule::Ref<_110af2660_Case>>(),jule::Ref<_110af2660_Case>()));
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_136717_tm));
	if (jule::real(_135640_m->_field_default)) {
		_136717_tm->_field_default=this->self->_method_check_default(_136717_tm,_135640_m->_field_default);
	}
	this->self->_method_check_cases(_135640_m,_136717_tm,_135717_d);
}



inline void _110af2660_ScopeChecker::_method_check_common_match(jule::Ref<_11054f670_MatchCase> _138042_m) {
	jule::Ref<_1112d7f10_Data> _138117_d = jule::new_ref<_1112d7f10_Data>();
	if ((!(jule::real(_138042_m->_field_expr)))) {
		_138117_d=jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1118cee40_Const::_static_method_new_bool(true)));
		_138117_d->_field_model=jule::Any(_138117_d->_field_constant);
	} else {
		_138117_d=this->self->_field_s->_method_eval(_138042_m->_field_expr,this->self);
		if ((!(jule::real(_138117_d)))) {
			return;
		}
	}
	jule::Ref<_110af2660_Match> _139517_mc = jule::new_struct<_110af2660_Match>(new( std::nothrow ) _110af2660_Match(_138117_d,jule::Bool(),jule::Slice<jule::Ref<_110af2660_Case>>(),jule::Ref<_110af2660_Case>()));
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_139517_mc));
	if (jule::real(_138042_m->_field_default)) {
		_139517_mc->_field_default=this->self->_method_check_default(_139517_mc,_138042_m->_field_default);
	}
	this->self->_method_check_cases(_138042_m,_139517_mc,_138117_d);
}



inline void _110af2660_ScopeChecker::_method_check_match(jule::Ref<_11054f670_MatchCase> _140735_m) {
	if (_140735_m->_field_type_match) {
		this->self->_method_check_type_match(_140735_m);
		return;
	}
	this->self->_method_check_common_match(_140735_m);
}



inline void _110af2660_ScopeChecker::_method_check_fall(jule::Ref<_11054f670_FallSt> _141529_f) {
	if (((*this)._field_cse == 0LL) || (((*this)._field_scope->_field_stmts._method_len() + 1LL) < (*this)._field_scope->_field_stmts._method_len())) {
		(*this)._field_s->_method_push_err(_141529_f->_field_token,jule::Str("fallthrough keyword can only useable at end of the case scopes", 62),jule::Slice<jule::Any>({}));
		return;
	}
	_110af2660_Case* _142117__case = ((_110af2660_Case*)((*this)._field_cse));
	if ((!(jule::real(_142117__case->_field_next)))) {
		(*this)._field_s->_method_push_err(_141529_f->_field_token,jule::Str("fallthrough cannot useable at final case", 40),jule::Slice<jule::Any>({}));
		(*this)._field_s->_method_push_suggestion(jule::Str("remove \"fall\" keyword", 21),jule::Slice<jule::Any>({}));
		return;
	}
	(*this)._field_scope->_field_stmts._method_push(jule::Any(jule::new_struct<_110af2660_FallSt>(new( std::nothrow ) _110af2660_FallSt(static_cast<jule::Uintptr>(((jule::Uintptr)((_142117__case->_field_next).alloc)))))));
}



inline jule::Ref<_110af2660_BreakSt> _110af2660_ScopeChecker::_method_check_break_with_label(jule::Ref<_11054f670_BreakSt> _143342_b) {
	jule::Ref<_110af2660_BreakSt> _143417_brk = this->self->_method_check_plain_break(_143342_b);
	if ((!(jule::real(_143417_brk)))) {
		return jule::new_ref<_110af2660_BreakSt>();
	}
	_143417_brk->_field_it=0LL;
	_143417_brk->_field_mtch=0LL;
	jule::Ref<_110af2660_ScopeLabel> _144417_label = _110af2660_find_label_parent(_143342_b->_field_label._field_kind,this->self->_field_parent);
	if ((!(jule::real(_144417_label)))) {
		this->self->_field_s->_method_push_err(_143342_b->_field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any(_143342_b->_field_label._field_kind)}));
		return jule::new_ref<_110af2660_BreakSt>();
	}
	_144417_label->_field_used=true;
	if ((_144417_label->_field_pos + 1LL) >= _144417_label->_field_scope->_field_scope->_field_stmts._method_len()) {
		this->self->_field_s->_method_push_err(_143342_b->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
		return jule::new_ref<_110af2660_BreakSt>();
	}
	jule::Int _145713_i = _144417_label->_field_pos + 1LL;
	if (_145713_i >= _144417_label->_field_scope->_field_scope->_field_stmts._method_len()) {
		this->self->_field_s->_method_push_err(_143342_b->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
	} else {
		jule::Any _146121_st = _144417_label->_field_scope->_field_scope->_field_stmts._method_at(_145713_i);
		{
			auto _match_expr{ _146121_st };
			if (!(_match_expr.type_is<jule::Ref<_110af2660_InfIter>>())) { goto _case_end_4609356496; }
			_case_begin_4609356496:;
			{
				_143417_brk->_field_it=((jule::Uintptr)((_146121_st.operator jule::Ref<_110af2660_InfIter>()).alloc));
			}
			goto _match_end_4609353312;
			_case_end_4609356496:;
			if (!(_match_expr.type_is<jule::Ref<_110af2660_RangeIter>>())) { goto _case_end_4609354224; }
			_case_begin_4609354224:;
			{
				_143417_brk->_field_it=((jule::Uintptr)((_146121_st.operator jule::Ref<_110af2660_RangeIter>()).alloc));
			}
			goto _match_end_4609353312;
			_case_end_4609354224:;
			if (!(_match_expr.type_is<jule::Ref<_110af2660_WhileIter>>())) { goto _case_end_4609354336; }
			_case_begin_4609354336:;
			{
				_143417_brk->_field_it=((jule::Uintptr)((_146121_st.operator jule::Ref<_110af2660_WhileIter>()).alloc));
			}
			goto _match_end_4609353312;
			_case_end_4609354336:;
			if (!(_match_expr.type_is<jule::Ref<_110af2660_Match>>())) { goto _case_end_4609354448; }
			_case_begin_4609354448:;
			{
				_143417_brk->_field_mtch=((jule::Uintptr)((_146121_st.operator jule::Ref<_110af2660_Match>()).alloc));
			}
			goto _match_end_4609353312;
			_case_end_4609354448:;
			_case_begin_4609353808:;
			{
				this->self->_field_s->_method_push_err(_143342_b->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4609353312;
			_case_end_4609353808:;
			_match_end_4609353312:;
		}
	}
	if (_143417_brk->_field_it != 0LL) {
		if ((!(this->self->_method_check_valid_break_label(_143417_brk->_field_it)))) {
			this->self->_field_s->_method_push_err(_143342_b->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
		}
	}
	if (_143417_brk->_field_mtch != 0LL) {
		if ((!(this->self->_method_check_valid_break_label(_143417_brk->_field_mtch)))) {
			this->self->_field_s->_method_push_err(_143342_b->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
		}
	}
	return _143417_brk;
}



inline jule::Ref<_110af2660_BreakSt> _110af2660_ScopeChecker::_method_check_plain_break(jule::Ref<_11054f670_BreakSt> _148637_b) {
	jule::Ref<_110af2660_ScopeChecker> _148717_scope = this->self;
	_julec_label_iter:;
	{
		if (!(((((_148717_scope->_field_it == 0LL) && (_148717_scope->_field_cse == 0LL)) && jule::real(_148717_scope->_field_parent)) && (!(jule::real(_148717_scope->_field_owner)))))) { goto _case_end_4609373632; }
		_case_begin_4609373632:;
		{
			_148717_scope=_148717_scope->_field_parent;
			goto _julec_label_iter;
		}
		goto _match_end_4609373440;
		_case_end_4609373632:;
		if (!((_148717_scope->_field_it != 0LL))) { goto _case_end_4609373760; }
		_case_begin_4609373760:;
		{
			return jule::new_struct<_110af2660_BreakSt>(new( std::nothrow ) _110af2660_BreakSt(_148717_scope->_field_it,jule::Uintptr()));
		}
		goto _match_end_4609373440;
		_case_end_4609373760:;
		if (!((_148717_scope->_field_cse != 0LL))) { goto _case_end_4609373888; }
		_case_begin_4609373888:;
		{
			return jule::new_struct<_110af2660_BreakSt>(new( std::nothrow ) _110af2660_BreakSt(jule::Uintptr(),static_cast<jule::Uintptr>(((jule::Uintptr)((((_110af2660_Case*)(_148717_scope->_field_cse))->_field_owner).alloc)))));
		}
		goto _match_end_4609373440;
		_case_end_4609373888:;
		_match_end_4609373440:;
	}
	this->self->_field_s->_method_push_err(_148637_b->_field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>({}));
	return jule::new_ref<_110af2660_BreakSt>();
}



inline void _110af2660_ScopeChecker::_method_check_break(jule::Ref<_11054f670_BreakSt> _150531_b) {
	if (_150531_b->_field_label._field_id != 0LLU) {
		jule::Ref<_110af2660_BreakSt> _150721_brk = this->self->_method_check_break_with_label(_150531_b);
		this->self->_field_scope->_field_stmts._method_push(jule::Any(_150721_brk));
		return;
	}
	jule::Ref<_110af2660_BreakSt> _151217_brk = this->self->_method_check_plain_break(_150531_b);
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_151217_brk));
}



inline void _110af2660_ScopeChecker::_method_check_ret(jule::Ref<_11054f670_RetSt> _151633_r) {
	jule::Ref<_110af2660_RetSt> _151717_rt = jule::new_struct<_110af2660_RetSt>(new( std::nothrow ) _110af2660_RetSt());
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_151717_rt));
	jule::Ref<_1111c0be0_RetTypeChecker> _152017_rtc = jule::new_struct<_1111c0be0_RetTypeChecker>(new( std::nothrow ) _1111c0be0_RetTypeChecker(this->self,this->self->_method_get_root()->_field_owner,jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11054f670_Expr>>(),jule::Slice<jule::Ref<_110e92c80_Var>>(),_151633_r->_field_token,jule::Any()));
	jule::Bool _152513_ok = _152017_rtc->_method_check(_151633_r->_field_expr);
	if ((!(_152513_ok))) {
		return;
	}
	if ((!(jule::real(_151633_r->_field_expr))) && (_152017_rtc->_field_vars.len() == 0LL)) {
		return;
	}
	_151717_rt->_field_vars=_152017_rtc->_field_vars;
	if (jule::real(_151633_r->_field_expr)) {
		_151717_rt->_field_expr=_152017_rtc->_field_model;
	}
}



inline void _110af2660_ScopeChecker::_method_check_node(jule::Any _154134_node) {
	{
		auto _match_expr{ _154134_node };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_Comment>>())) { goto _case_end_4609415808; }
		_case_begin_4609415808:;
		{
			goto _match_end_4609414592;
		}
		goto _match_end_4609414592;
		_case_end_4609415808:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_ScopeTree>>())) { goto _case_end_4609415520; }
		_case_begin_4609415520:;
		{
			this->self->_method_check_anon_scope(_154134_node.operator jule::Ref<_11054f670_ScopeTree>());
		}
		goto _match_end_4609414592;
		_case_end_4609415520:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_VarDecl>>())) { goto _case_end_4609416000; }
		_case_begin_4609416000:;
		{
			this->self->_method_check_var_decl(_154134_node.operator jule::Ref<_11054f670_VarDecl>());
		}
		goto _match_end_4609414592;
		_case_end_4609416000:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_TypeAliasDecl>>())) { goto _case_end_4609416512; }
		_case_begin_4609416512:;
		{
			this->self->_method_check_type_alias_decl(_154134_node.operator jule::Ref<_11054f670_TypeAliasDecl>());
		}
		goto _match_end_4609414592;
		_case_end_4609416512:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_Expr>>())) { goto _case_end_4609417056; }
		_case_begin_4609417056:;
		{
			this->self->_method_check_expr(_154134_node.operator jule::Ref<_11054f670_Expr>());
		}
		goto _match_end_4609414592;
		_case_end_4609417056:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_Conditional>>())) { goto _case_end_4609417168; }
		_case_begin_4609417168:;
		{
			this->self->_method_check_conditional(_154134_node.operator jule::Ref<_11054f670_Conditional>());
		}
		goto _match_end_4609414592;
		_case_end_4609417168:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_Iter>>())) { goto _case_end_4609417280; }
		_case_begin_4609417280:;
		{
			this->self->_method_check_iter(_154134_node.operator jule::Ref<_11054f670_Iter>());
		}
		goto _match_end_4609414592;
		_case_end_4609417280:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_ContSt>>())) { goto _case_end_4609417392; }
		_case_begin_4609417392:;
		{
			this->self->_method_check_cont(_154134_node.operator jule::Ref<_11054f670_ContSt>());
		}
		goto _match_end_4609414592;
		_case_end_4609417392:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_LabelSt>>())) { goto _case_end_4609417504; }
		_case_begin_4609417504:;
		{
			this->self->_method_check_label(_154134_node.operator jule::Ref<_11054f670_LabelSt>());
		}
		goto _match_end_4609414592;
		_case_end_4609417504:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_GotoSt>>())) { goto _case_end_4609417616; }
		_case_begin_4609417616:;
		{
			this->self->_method_push_goto(_154134_node.operator jule::Ref<_11054f670_GotoSt>());
		}
		goto _match_end_4609414592;
		_case_end_4609417616:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_AssignSt>>())) { goto _case_end_4609417728; }
		_case_begin_4609417728:;
		{
			this->self->_method_check_assign_st(_154134_node.operator jule::Ref<_11054f670_AssignSt>());
		}
		goto _match_end_4609414592;
		_case_end_4609417728:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_MatchCase>>())) { goto _case_end_4609417840; }
		_case_begin_4609417840:;
		{
			this->self->_method_check_match(_154134_node.operator jule::Ref<_11054f670_MatchCase>());
		}
		goto _match_end_4609414592;
		_case_end_4609417840:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_FallSt>>())) { goto _case_end_4609417952; }
		_case_begin_4609417952:;
		{
			this->self->_method_check_fall(_154134_node.operator jule::Ref<_11054f670_FallSt>());
		}
		goto _match_end_4609414592;
		_case_end_4609417952:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_BreakSt>>())) { goto _case_end_4609418064; }
		_case_begin_4609418064:;
		{
			this->self->_method_check_break(_154134_node.operator jule::Ref<_11054f670_BreakSt>());
		}
		goto _match_end_4609414592;
		_case_end_4609418064:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_RetSt>>())) { goto _case_end_4609418176; }
		_case_begin_4609418176:;
		{
			this->self->_method_check_ret(_154134_node.operator jule::Ref<_11054f670_RetSt>());
		}
		goto _match_end_4609414592;
		_case_end_4609418176:;
		_case_begin_4609414768:;
		{
			jule::outln(jule::Str("error <unimplemented scope node>", 32));
		}
		goto _match_end_4609414592;
		_case_end_4609414768:;
		_match_end_4609414592:;
	}
}



inline void _110af2660_ScopeChecker::_method_check_tree(void) {
	this->self->_field_i=0LL;
	_iter_begin_4609445488:;
	if (!(this->self->_field_i < this->self->_field_tree->_field_stmts.len())) { goto _iter_end_4609445488; }
	{
		this->self->_method_check_node(this->self->_field_tree->_field_stmts[static_cast<jule::Int>(this->self->_field_i)]);
	}
	_iter_next_4609445488:;
	(this->self->_field_i)++;
	goto _iter_begin_4609445488;
	_iter_end_4609445488:;
}



inline void _110af2660_ScopeChecker::_method_check_same_scope_goto(jule::Ref<_110af2660_ScopeGoto> _156940_gt,jule::Ref<_110af2660_ScopeLabel> _156960_label) {
	if (_156960_label->_field_pos < _156940_gt->_field_pos) {
		return;
	}
	jule::Int _157417_i = _156960_label->_field_pos;
	_iter_begin_4609453056:;
	if (!(_157417_i > _156940_gt->_field_pos)) { goto _iter_end_4609453056; }
	{
		jule::Any _157617_s = _156960_label->_field_scope->_field_scope->_field_stmts._method_at(_157417_i);
		if (_110af2660_st_is_def(_157617_s)) {
			(*this)._field_s->_method_push_err(_156940_gt->_field_gt->_field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any(_156940_gt->_field_gt->_field_label._field_kind)}));
			goto _iter_end_4609453056;
		}
	}
	_iter_next_4609453056:;
	(_157417_i)--;
	goto _iter_begin_4609453056;
	_iter_end_4609453056:;
}



inline jule::Bool _110af2660_ScopeChecker::_method_check_label_parents(jule::Ref<_110af2660_ScopeGoto> _158438_gt,jule::Ref<_110af2660_ScopeLabel> _158458_label) {
	jule::Ref<_110af2660_ScopeChecker> _158517_scope = _158458_label->_field_scope;
	_julec_label_parent_scopes:;
	if (jule::real(_158517_scope->_field_parent) && ((_158517_scope->_field_parent).alloc != (_158438_gt->_field_scope).alloc)) {
		_158517_scope=_158517_scope->_field_parent;
		jule::Int _159021_i = 0LL;
		_iter_begin_4609468272:;
		if (!(_159021_i < _158517_scope->_field_scope->_field_stmts._method_len())) { goto _iter_end_4609468272; }
		{
			{
				if (!((_159021_i >= _158458_label->_field_pos))) { goto _case_end_4609469584; }
				_case_begin_4609469584:;
				{
					return true;
				}
				goto _match_end_4609469392;
				_case_end_4609469584:;
				if (!((_110af2660_st_is_def(_158517_scope->_field_scope->_field_stmts._method_at(_159021_i))))) { goto _case_end_4609469712; }
				_case_begin_4609469712:;
				{
					(*this)._field_s->_method_push_err(_158438_gt->_field_gt->_field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any(_158438_gt->_field_gt->_field_label._field_kind)}));
					return false;
				}
				goto _match_end_4609469392;
				_case_end_4609469712:;
				_match_end_4609469392:;
			}
		}
		_iter_next_4609468272:;
		(_159021_i)++;
		goto _iter_begin_4609468272;
		_iter_end_4609468272:;
		goto _julec_label_parent_scopes;
	}
	return true;
}



inline void _110af2660_ScopeChecker::_method_check_goto_scope(jule::Ref<_110af2660_ScopeGoto> _160839_gt,jule::Ref<_110af2660_ScopeLabel> _160855_label) {
	jule::Int _160917_i = _160839_gt->_field_pos;
	_iter_begin_4609482224:;
	if (!(_160917_i < _160839_gt->_field_scope->_field_scope->_field_stmts._method_len())) { goto _iter_end_4609482224; }
	{
		{
			if (!((_160917_i >= _160855_label->_field_pos))) { goto _case_end_4609484032; }
			_case_begin_4609484032:;
			{
				return;
			}
			goto _match_end_4609483840;
			_case_end_4609484032:;
			if (!((_110af2660_st_is_def(_160839_gt->_field_scope->_field_scope->_field_stmts._method_at(_160917_i))))) { goto _case_end_4609484160; }
			_case_begin_4609484160:;
			{
				(*this)._field_s->_method_push_err(_160839_gt->_field_gt->_field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any(_160839_gt->_field_gt->_field_label._field_kind)}));
				return;
			}
			goto _match_end_4609483840;
			_case_end_4609484160:;
			_match_end_4609483840:;
		}
	}
	_iter_next_4609482224:;
	(_160917_i)++;
	goto _iter_begin_4609482224;
	_iter_end_4609482224:;
}



inline void _110af2660_ScopeChecker::_method_check_diff_scope_goto(jule::Ref<_110af2660_ScopeGoto> _162244_gt,jule::Ref<_110af2660_ScopeLabel> _162264_label) {
	{
		if (!(((_162264_label->_field_scope->_field_child_index > 0LL) && (_162244_gt->_field_scope->_field_child_index == 0LL)))) { goto _case_end_4609494112; }
		_case_begin_4609494112:;
		{
			if ((!((*this)._method_check_label_parents(_162244_gt,_162264_label)))) {
				return;
			}
		}
		goto _match_end_4609493904;
		_case_end_4609494112:;
		if (!((_162264_label->_field_scope->_field_child_index < _162244_gt->_field_scope->_field_child_index))) { goto _case_end_4609494240; }
		_case_begin_4609494240:;
		{
			return;
		}
		goto _match_end_4609493904;
		_case_end_4609494240:;
		_match_end_4609493904:;
	}
	jule::Ref<_110af2660_ScopeChecker> _163317_scope = _162264_label->_field_scope;
	jule::Int _163417_i = _162264_label->_field_pos - 1LL;
	_iter_begin_4609499936:;
	if (!(_163417_i >= 0LL)) { goto _iter_end_4609499936; }
	{
		jule::Any _163617_s = _163317_scope->_field_scope->_field_stmts._method_at(_163417_i);
		{
			auto _match_expr{ _163617_s };
			if (!(_match_expr.type_is<jule::Ref<_110af2660_Scope>>())) { goto _case_end_4609503872; }
			_case_begin_4609503872:;
			{
				if (_163417_i <= _162244_gt->_field_pos) {
					return;
				}
			}
			goto _match_end_4609502096;
			_case_end_4609503872:;
			_match_end_4609502096:;
		}
		if (_110af2660_st_is_def(_163617_s)) {
			(*this)._field_s->_method_push_err(_162244_gt->_field_gt->_field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any(_162244_gt->_field_gt->_field_label._field_kind)}));
			goto _iter_end_4609499936;
		}
	}
	_iter_next_4609499936:;
	(_163417_i)--;
	goto _iter_begin_4609499936;
	_iter_end_4609499936:;
	if (jule::real(_163317_scope->_field_parent) && ((_163317_scope->_field_parent).alloc != (_162244_gt->_field_scope).alloc)) {
		(*this)._method_check_label_parents(_162244_gt,_162264_label);
	} else {
		(*this)._method_check_goto_scope(_162244_gt,_162264_label);
	}
}



inline void _110af2660_ScopeChecker::_method_check_goto(jule::Ref<_110af2660_ScopeGoto> _165833_gt,jule::Ref<_110af2660_ScopeLabel> _165853_label) {
	{
		if (!(((_165833_gt->_field_scope).alloc == (_165853_label->_field_scope).alloc))) { goto _case_end_4609515536; }
		_case_begin_4609515536:;
		{
			(*this)._method_check_same_scope_goto(_165833_gt,_165853_label);
		}
		goto _match_end_4609515328;
		_case_end_4609515536:;
		if (!((_165853_label->_field_scope->_field_child_index > 0LL))) { goto _case_end_4609515664; }
		_case_begin_4609515664:;
		{
			(*this)._method_check_diff_scope_goto(_165833_gt,_165853_label);
		}
		goto _match_end_4609515328;
		_case_end_4609515664:;
		_match_end_4609515328:;
	}
}



inline void _110af2660_ScopeChecker::_method_check_gotos(void) {
	{
		auto __julec_range_expr = (*this)._field_gotos.get();
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110af2660_ScopeGoto> _110af2660_gt = *__julec_range_begin;
			_iter_begin_4609521120:;
			{
				jule::Ref<_110af2660_ScopeLabel> _167021_label = (*this)._method_find_label_all(_110af2660_gt->_field_gt->_field_label._field_kind);
				if ((!(jule::real(_167021_label)))) {
					(*this)._field_s->_method_push_err(_110af2660_gt->_field_gt->_field_token,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any(_110af2660_gt->_field_gt->_field_label._field_kind)}));
					goto _iter_next_4609521120;
				}
				_167021_label->_field_used=true;
				(*this)._method_check_goto(_110af2660_gt,_167021_label);
			}
			_iter_next_4609521120:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110af2660_gt = *__julec_range_begin; goto _iter_begin_4609521120; }
			_iter_end_4609521120:;
		}
	}
}



inline void _110af2660_ScopeChecker::_method_check_labels(void) {
	{
		auto __julec_range_expr = (*this)._field_labels.get();
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110af2660_ScopeLabel> _110af2660_l = *__julec_range_begin;
			_iter_begin_4609531776:;
			{
				if ((!(_110af2660_l->_field_used))) {
					(*this)._field_s->_method_push_err(_110af2660_l->_field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any(_110af2660_l->_field_label->_field_ident)}));
				}
			}
			_iter_next_4609531776:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110af2660_l = *__julec_range_begin; goto _iter_begin_4609531776; }
			_iter_end_4609531776:;
		}
	}
}



inline void _110af2660_ScopeChecker::_method_check_vars(void) {
	jule::Int _169017_i = 0LL;
	_iter_begin_4609537200:;
	if (!(_169017_i < (*this)._field_table->_field_vars._method_len())) { goto _iter_end_4609537200; }
	{
		jule::Ref<_110e92c80_Var> _169217_v = (*this)._field_table->_field_vars._method_at(_169017_i);
		if ((((!(_169217_v->_field_used)) && (!(_1106ec050_is_ignore_ident(_169217_v->_field_ident)))) && (!(_1106ec050_is_anon_ident(_169217_v->_field_ident)))) && (_169217_v->_field_ident != jule::Str("self", 4))) {
			(*this)._field_s->_method_push_err(_169217_v->_field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any(_169217_v->_field_ident)}));
		}
	}
	_iter_next_4609537200:;
	(_169017_i)++;
	goto _iter_begin_4609537200;
	_iter_end_4609537200:;
}



inline void _110af2660_ScopeChecker::_method_check_aliases(void) {
	jule::Int _170017_i = 0LL;
	_iter_begin_4609564000:;
	if (!(_170017_i < (*this)._field_table->_field_type_aliases._method_len())) { goto _iter_end_4609564000; }
	{
		jule::Ref<_1116aff70_TypeAlias> _170217_a = (*this)._field_table->_field_type_aliases._method_at(_170017_i);
		if (((!(_170217_a->_field_used)) && (!(_1106ec050_is_ignore_ident(_170217_a->_field_ident)))) && (!(_1106ec050_is_anon_ident(_170217_a->_field_ident)))) {
			(*this)._field_s->_method_push_err(_170217_a->_field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any(_170217_a->_field_ident)}));
		}
	}
	_iter_next_4609564000:;
	(_170017_i)++;
	goto _iter_begin_4609564000;
	_iter_end_4609564000:;
}



inline void _110af2660_ScopeChecker::_method_check(jule::Ref<_11054f670_ScopeTree> _171029_tree,jule::Ref<_110af2660_Scope> _171051_s) {
	_171051_s->_field_deferred=_171029_tree->_field_deferred;
	_171051_s->_field_unsafety=_171029_tree->_field_unsafety;
	jule::I64 _171413_errors = this->self->_field_s->_field_errors.len();
	this->self->_field_tree=_171029_tree;
	this->self->_field_scope=_171051_s;
	this->self->_method_check_tree();
	if (_171413_errors == this->self->_field_s->_field_errors.len()) {
		this->self->_method_check_vars();
		this->self->_method_check_aliases();
	}
	if (this->self->_method_is_root()) {
		this->self->_method_check_gotos();
		this->self->_method_check_labels();
	}
}



inline jule::Ref<_110af2660_ScopeChecker> _110af2660_ScopeChecker::_method_new_child_checker(void) {
	jule::Ref<_110af2660_ScopeChecker> _173417_base = _110af2660_new_scope_checker_base(this->self->_field_s,jule::new_ref<_11072eb20_FnIns>());
	_173417_base->_field_parent=this->self;
	_173417_base->_field_labels=this->self->_field_labels;
	_173417_base->_field_gotos=this->self->_field_gotos;
	_173417_base->_field_child_index=static_cast<jule::Int>(this->self->_field_child_index + 1LL);
	return _173417_base;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_ScopeChecker &_Src) {
	_Stream << "ScopeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "child_index:" << _Src._field_child_index << ", ";
	_Stream << "table:" << _Src._field_table << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "tree:" << _Src._field_tree << ", ";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "cse:" << _Src._field_cse << ", ";
	_Stream << "labels:" << _Src._field_labels << ", ";
	_Stream << "gotos:" << _Src._field_gotos << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_BinopExprModel &_Src) {
	_Stream << "BinopExprModel{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_UnaryExprModel &_Src) {
	_Stream << "UnaryExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_GetRefPtrExprModel &_Src) {
	_Stream << "GetRefPtrExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_StructArgExprModel &_Src) {
	_Stream << "StructArgExprModel{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_StructLitExprModel &_Src) {
	_Stream << "StructLitExprModel{";
	_Stream << "strct:" << _Src._field_strct << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_AllocStructLitExprModel &_Src) {
	_Stream << "AllocStructLitExprModel{";
	_Stream << "lit:" << _Src._field_lit;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_CastingExprModel &_Src) {
	_Stream << "CastingExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_FnCallExprModel &_Src) {
	_Stream << "FnCallExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "is_co:" << _Src._field_is_co << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_SliceExprModel &_Src) {
	_Stream << "SliceExprModel{";
	_Stream << "elem_kind:" << _Src._field_elem_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_IndexigExprModel &_Src) {
	_Stream << "IndexigExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_AnonFnExprModel &_Src) {
	_Stream << "AnonFnExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "global:" << _Src._field_global;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_KeyValPairExprModel &_Src) {
	_Stream << "KeyValPairExprModel{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_MapExprModel &_Src) {
	_Stream << "MapExprModel{";
	_Stream << "key_kind:" << _Src._field_key_kind << ", ";
	_Stream << "val_kind:" << _Src._field_val_kind << ", ";
	_Stream << "entries:" << _Src._field_entries;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_SlicingExprModel &_Src) {
	_Stream << "SlicingExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_TraitSubIdentExprModel &_Src) {
	_Stream << "TraitSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_StructSubIdentExprModel &_Src) {
	_Stream << "StructSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "method:" << _Src._field_method << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_StructStaticIdentExprModel &_Src) {
	_Stream << "StructStaticIdentExprModel{";
	_Stream << "structure:" << _Src._field_structure << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "method:" << _Src._field_method;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_ArrayExprModel &_Src) {
	_Stream << "ArrayExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_CommonIdentExprModel &_Src) {
	_Stream << "CommonIdentExprModel{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_CommonSubIdentExprModel &_Src) {
	_Stream << "CommonSubIdentExprModel{";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_TupleExprModel &_Src) {
	_Stream << "TupleExprModel{";
	_Stream << "datas:" << _Src._field_datas;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_BuiltinOutCallExprModel &_Src) {
	_Stream << "BuiltinOutCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_BuiltinOutlnCallExprModel &_Src) {
	_Stream << "BuiltinOutlnCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_BuiltinCloneCallExprModel &_Src) {
	_Stream << "BuiltinCloneCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_BuiltinNewCallExprModel &_Src) {
	_Stream << "BuiltinNewCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "init:" << _Src._field_init;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_BuiltinRealCallExprModel &_Src) {
	_Stream << "BuiltinRealCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_BuiltinDropCallExprModel &_Src) {
	_Stream << "BuiltinDropCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_BuiltinPanicCallExprModel &_Src) {
	_Stream << "BuiltinPanicCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_BuiltinMakeCallExprModel &_Src) {
	_Stream << "BuiltinMakeCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "len:" << _Src._field_len << ", ";
	_Stream << "cap:" << _Src._field_cap;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_BuiltinAppendCallExprModel &_Src) {
	_Stream << "BuiltinAppendCallExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "elements:" << _Src._field_elements;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_BuiltinErrorTraitSubIdentExprModel &_Src) {
	_Stream << "BuiltinErrorTraitSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_SizeofExprModel &_Src) {
	_Stream << "SizeofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_AlignofExprModel &_Src) {
	_Stream << "AlignofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_RuneExprModel &_Src) {
	_Stream << "RuneExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4e8a0_ExplicitDerefExprModel &_Src) {
	_Stream << "ExplicitDerefExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_110e4edc0_ImportInfo> _110e4edc0_Package::_method_find_package(jule::Str ) {
	return jule::new_ref<_110e4edc0_ImportInfo>();
}



inline jule::Ref<_110e4edc0_ImportInfo> _110e4edc0_Package::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)> ) {
	return jule::new_ref<_110e4edc0_ImportInfo>();
}



inline jule::Ref<_110e92c80_Var> _110e4edc0_Package::_method_find_var(jule::Str _26631_ident,jule::Bool _26643_cpp_linked) {
	return _110e4edc0_find_var_in_package((*this)._field_files,_26631_ident,_26643_cpp_linked);
}



inline jule::Ref<_1116aff70_TypeAlias> _110e4edc0_Package::_method_find_type_alias(jule::Str _27238_ident,jule::Bool _27250_cpp_linked) {
	return _110e4edc0_find_type_alias_in_package((*this)._field_files,_27238_ident,_27250_cpp_linked);
}



inline jule::Ref<_1109372e0_Struct> _110e4edc0_Package::_method_find_struct(jule::Str _27834_ident,jule::Bool _27846_cpp_linked) {
	return _110e4edc0_find_struct_in_package((*this)._field_files,_27834_ident,_27846_cpp_linked);
}



inline jule::Ref<_11072eb20_Fn> _110e4edc0_Package::_method_find_fn(jule::Str _28430_ident,jule::Bool _28442_cpp_linked) {
	return _110e4edc0_find_fn_in_package((*this)._field_files,_28430_ident,_28442_cpp_linked);
}



inline jule::Ref<_110e3f160_Trait> _110e4edc0_Package::_method_find_trait(jule::Str _29033_ident) {
	return _110e4edc0_find_trait_in_package((*this)._field_files,_29033_ident);
}



inline jule::Ref<_110e453c0_Enum> _110e4edc0_Package::_method_find_enum(jule::Str _29632_ident) {
	return _110e4edc0_find_enum_in_package((*this)._field_files,_29632_ident);
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4edc0_Package &_Src) {
	_Stream << "Package{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_110e4edc0_ImportInfo> _110e92bc0_Sema::_method_find_package(jule::Str _30735_ident) {
	return (*this)._field_file->_method_find_package(_30735_ident);
}



inline jule::Ref<_110e4edc0_ImportInfo> _110e92bc0_Sema::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)> _31737_selector) {
	return (*this)._field_file->_method_select_package(_31737_selector);
}



inline jule::Ref<_110e92c80_Var> _110e92bc0_Sema::_method_find_var(jule::Str _32731_ident,jule::Bool _32743_cpp_linked) {
	jule::Ref<_110e92c80_Var> _32917_v = _110e4edc0_find_var_in_package((*this)._field_files,_32731_ident,_32743_cpp_linked);
	if (jule::real(_32917_v)) {
		return _32917_v;
	}
	jule::Int _33517_i = 0LL;
	_iter_begin_4609683328:;
	if (!(_33517_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4609683328; }
	{
		jule::Ref<_110e4edc0_ImportInfo> _33721_imp = (*this)._field_file->_field_imports._method_at(_33517_i);
		if ((!(_110e92bc0_imp_is_lookupable(_33721_imp,_32731_ident)))) {
			goto _iter_next_4609683328;
		}
		jule::Ref<_110e92c80_Var> _34121_v = _33721_imp->_method_find_var(_32731_ident,_32743_cpp_linked);
		if (jule::real(_34121_v) && (*this)._method_is_accessible_define(_34121_v->_field_public,_34121_v->_field_token)) {
			return _34121_v;
		}
	}
	_iter_next_4609683328:;
	(_33517_i)++;
	goto _iter_begin_4609683328;
	_iter_end_4609683328:;
	return jule::new_ref<_110e92c80_Var>();
}



inline jule::Ref<_1116aff70_TypeAlias> _110e92bc0_Sema::_method_find_type_alias(jule::Str _35638_ident,jule::Bool _35650_cpp_linked) {
	jule::Ref<_1116aff70_TypeAlias> _35817_ta = _110e4edc0_find_type_alias_in_package((*this)._field_files,_35638_ident,_35650_cpp_linked);
	if (jule::real(_35817_ta)) {
		return _35817_ta;
	}
	jule::Int _36417_i = 0LL;
	_iter_begin_4609698672:;
	if (!(_36417_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4609698672; }
	{
		jule::Ref<_110e4edc0_ImportInfo> _36621_imp = (*this)._field_file->_field_imports._method_at(_36417_i);
		if ((!(_110e92bc0_imp_is_lookupable(_36621_imp,_35638_ident)))) {
			goto _iter_next_4609698672;
		}
		jule::Ref<_1116aff70_TypeAlias> _37021_ta = _36621_imp->_method_find_type_alias(_35638_ident,_35650_cpp_linked);
		if (jule::real(_37021_ta) && (*this)._method_is_accessible_define(_37021_ta->_field_public,_37021_ta->_field_token)) {
			return _37021_ta;
		}
	}
	_iter_next_4609698672:;
	(_36417_i)++;
	goto _iter_begin_4609698672;
	_iter_end_4609698672:;
	return jule::new_ref<_1116aff70_TypeAlias>();
}



inline jule::Ref<_1109372e0_Struct> _110e92bc0_Sema::_method_find_struct(jule::Str _38534_ident,jule::Bool _38546_cpp_linked) {
	jule::Ref<_1109372e0_Struct> _38717_strct = _110e4edc0_find_struct_in_package((*this)._field_files,_38534_ident,_38546_cpp_linked);
	if (jule::real(_38717_strct)) {
		return _38717_strct;
	}
	jule::Int _39317_i = 0LL;
	_iter_begin_4609711936:;
	if (!(_39317_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4609711936; }
	{
		jule::Ref<_110e4edc0_ImportInfo> _39521_imp = (*this)._field_file->_field_imports._method_at(_39317_i);
		if ((!(_110e92bc0_imp_is_lookupable(_39521_imp,_38534_ident)))) {
			goto _iter_next_4609711936;
		}
		jule::Ref<_1109372e0_Struct> _39921_strct = _39521_imp->_method_find_struct(_38534_ident,_38546_cpp_linked);
		if (jule::real(_39921_strct) && (*this)._method_is_accessible_define(_39921_strct->_field_public,_39921_strct->_field_token)) {
			return _39921_strct;
		}
	}
	_iter_next_4609711936:;
	(_39317_i)++;
	goto _iter_begin_4609711936;
	_iter_end_4609711936:;
	return jule::new_ref<_1109372e0_Struct>();
}



inline jule::Ref<_11072eb20_Fn> _110e92bc0_Sema::_method_find_fn(jule::Str _41430_ident,jule::Bool _41442_cpp_linked) {
	jule::Ref<_11072eb20_Fn> _41617_f = _110e4edc0_find_fn_in_package((*this)._field_files,_41430_ident,_41442_cpp_linked);
	if (jule::real(_41617_f)) {
		return _41617_f;
	}
	jule::Int _42217_i = 0LL;
	_iter_begin_4609725600:;
	if (!(_42217_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4609725600; }
	{
		jule::Ref<_110e4edc0_ImportInfo> _42421_imp = (*this)._field_file->_field_imports._method_at(_42217_i);
		if ((!(_110e92bc0_imp_is_lookupable(_42421_imp,_41430_ident)))) {
			goto _iter_next_4609725600;
		}
		jule::Ref<_11072eb20_Fn> _42821_f = _42421_imp->_method_find_fn(_41430_ident,_41442_cpp_linked);
		if (jule::real(_42821_f) && (*this)._method_is_accessible_define(_42821_f->_field_public,_42821_f->_field_token)) {
			return _42821_f;
		}
	}
	_iter_next_4609725600:;
	(_42217_i)++;
	goto _iter_begin_4609725600;
	_iter_end_4609725600:;
	return jule::new_ref<_11072eb20_Fn>();
}



inline jule::Ref<_110e3f160_Trait> _110e92bc0_Sema::_method_find_trait(jule::Str _44333_ident) {
	jule::Ref<_110e3f160_Trait> _44517_t = _110e4edc0_find_trait_in_package((*this)._field_files,_44333_ident);
	if (jule::real(_44517_t)) {
		return _44517_t;
	}
	jule::Int _45117_i = 0LL;
	_iter_begin_4609737248:;
	if (!(_45117_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4609737248; }
	{
		jule::Ref<_110e4edc0_ImportInfo> _45321_imp = (*this)._field_file->_field_imports._method_at(_45117_i);
		if ((!(_110e92bc0_imp_is_lookupable(_45321_imp,_44333_ident)))) {
			goto _iter_next_4609737248;
		}
		jule::Ref<_110e3f160_Trait> _45721_t = _45321_imp->_method_find_trait(_44333_ident);
		if (jule::real(_45721_t) && (*this)._method_is_accessible_define(_45721_t->_field_public,_45721_t->_field_token)) {
			return _45721_t;
		}
	}
	_iter_next_4609737248:;
	(_45117_i)++;
	goto _iter_begin_4609737248;
	_iter_end_4609737248:;
	return jule::new_ref<_110e3f160_Trait>();
}



inline jule::Ref<_110e453c0_Enum> _110e92bc0_Sema::_method_find_enum(jule::Str _47232_ident) {
	jule::Ref<_110e453c0_Enum> _47417_e = _110e4edc0_find_enum_in_package((*this)._field_files,_47232_ident);
	if (jule::real(_47417_e)) {
		return _47417_e;
	}
	jule::Int _48017_i = 0LL;
	_iter_begin_4609749968:;
	if (!(_48017_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4609749968; }
	{
		jule::Ref<_110e4edc0_ImportInfo> _48221_imp = (*this)._field_file->_field_imports._method_at(_48017_i);
		if ((!(_110e92bc0_imp_is_lookupable(_48221_imp,_47232_ident)))) {
			goto _iter_next_4609749968;
		}
		jule::Ref<_110e453c0_Enum> _48621_e = _48221_imp->_method_find_enum(_47232_ident);
		if (jule::real(_48621_e) && (*this)._method_is_accessible_define(_48621_e->_field_public,_48621_e->_field_token)) {
			return _48621_e;
		}
	}
	_iter_next_4609749968:;
	(_48017_i)++;
	goto _iter_begin_4609749968;
	_iter_end_4609749968:;
	return jule::new_ref<_110e453c0_Enum>();
}



inline void _110e92bc0_Sema::_method_set_current_file(jule::Ref<_1111c15d0_SymbolTable> _49739_f) {
	(*this)._field_file=_49739_f;
}



inline void _110e92bc0_Sema::_method_push_err(_1106ec050_Token _49927_token,jule::Str _49941_fmt,jule::Slice<jule::Any> _49954_args) {
	(*this)._field_errors=jule::append((*this)._field_errors,jule::Slice<_127e05da0_Log>({_110e92bc0_compiler_err(_49927_token,true,_49941_fmt,_49954_args)}));
}



inline void _110e92bc0_Sema::_method_push_suggestion(jule::Str _50434_fmt,jule::Slice<jule::Any> _50447_args) {
	{
		_110e92bc0_push_suggestion((&((*this)._field_errors[static_cast<jule::Int>((*this)._field_errors.len() - 1LL)])),_50434_fmt,_50447_args);
	}
}



inline jule::Bool _110e92bc0_Sema::_method_is_accessible_define(jule::Bool _50935_public,_1106ec050_Token _50949_token) {
	return (_50935_public || (!(jule::real(_50949_token._field_file)))) || ((*this)._field_file->_field_file->_method_dir() == _50949_token._field_file->_method_dir());
}



inline jule::Bool _110e92bc0_Sema::_method_is_duplicated_ident(jule::Uintptr _51634_itself,jule::Str _51651_ident,jule::Bool _51663_cpp_linked) {
	{
		auto __julec_range_expr = (*this)._field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4609781104:;
			{
				if (_110e92bc0_f->_method_is_duplicated_ident(_51634_itself,_51651_ident,_51663_cpp_linked)) {
					return true;
				}
				jule::Int _52221_i = 0LL;
				_iter_begin_4609786320:;
				if (!(_52221_i < _110e92bc0_f->_field_imports._method_len())) { goto _iter_end_4609786320; }
				{
					jule::Ref<_110e4edc0_ImportInfo> _52421_imp = (&(_110e92bc0_f->_field_imports))->_method_at(_52221_i);
					{
						auto __julec_range_expr = _52421_imp->_field_selected;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							_1106ec050_Token _110e92bc0_selected = *__julec_range_begin;
							_iter_begin_4609789536:;
							{
								if (_110e92bc0_selected._field_kind == _51651_ident) {
									return true;
								}
							}
							_iter_next_4609789536:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _110e92bc0_selected = *__julec_range_begin; goto _iter_begin_4609789536; }
							_iter_end_4609789536:;
						}
					}
				}
				_iter_next_4609786320:;
				(_52221_i)++;
				goto _iter_begin_4609786320;
				_iter_end_4609786320:;
			}
			_iter_next_4609781104:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4609781104; }
			_iter_end_4609781104:;
		}
	}
	return false;
}



inline jule::Bool _110e92bc0_Sema::_method_check_generic_quantity(jule::Int _53541_required,jule::Int _53556_given,_1106ec050_Token _53568_error_token) {
	jule::Bool _53590_ok = jule::Bool();
	{
		if (!(((_53541_required == 0LL) && (_53556_given > 0LL)))) { goto _case_end_4609797552; }
		_case_begin_4609797552:;
		{
			(*this)._method_push_err(_53568_error_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
			_53590_ok = false;
			return _53590_ok;
		}
		goto _match_end_4609796432;
		_case_end_4609797552:;
		if (!(((_53541_required > 0LL) && (_53556_given == 0LL)))) { goto _case_end_4609797664; }
		_case_begin_4609797664:;
		{
			(*this)._method_push_err(_53568_error_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>({}));
			_53590_ok = false;
			return _53590_ok;
		}
		goto _match_end_4609796432;
		_case_end_4609797664:;
		if (!((_53541_required < _53556_given))) { goto _case_end_4609797776; }
		_case_begin_4609797776:;
		{
			(*this)._method_push_err(_53568_error_token,jule::Str("overflow generics", 17),jule::Slice<jule::Any>({}));
			_53590_ok = false;
			return _53590_ok;
		}
		goto _match_end_4609796432;
		_case_end_4609797776:;
		if (!((_53541_required > _53556_given))) { goto _case_end_4609796848; }
		_case_begin_4609796848:;
		{
			(*this)._method_push_err(_53568_error_token,jule::Str("missing generics", 16),jule::Slice<jule::Any>({}));
			_53590_ok = false;
			return _53590_ok;
		}
		goto _match_end_4609796432;
		_case_end_4609796848:;
		_case_begin_4609796544:;
		{
			_53590_ok = true;
			return _53590_ok;
		}
		goto _match_end_4609796432;
		_case_end_4609796544:;
		_match_end_4609796432:;
	}
}



inline jule::Bool _110e92bc0_Sema::_method_is_duplicated_import_selection(jule::Uintptr _55845_itself,jule::Str _55862_ident) {
	jule::Int _55917_i = 0LL;
	_iter_begin_4609808848:;
	if (!(_55917_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4609808848; }
	{
		jule::Ref<_110e4edc0_ImportInfo> _56117_imp = ((*this)._field_file).alloc->_field_imports._method_at(_55917_i);
		if (((jule::Uintptr)((_56117_imp).alloc)) == _55845_itself) {
			goto _iter_end_4609808848;
		}
		if (_56117_imp->_method_exist_ident(_55862_ident)) {
			return true;
		}
	}
	_iter_next_4609808848:;
	(_55917_i)++;
	goto _iter_begin_4609808848;
	_iter_end_4609808848:;
	return false;
}



inline jule::Any _110e92bc0_Sema::_method_get_import_def(jule::Str _57529_ident,jule::Ref<_110e4edc0_ImportInfo>& _57546_imp) {
	if (_1113198e0_find_package_builtin_def(_57546_imp->_field_link_path,_57529_ident) != nullptr) {
		return jule::Any(true);
	}
	{
		auto __julec_range_expr = _57546_imp->_field_package->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4609821088:;
			{
				
				jule::Any _58221_def = _110e92bc0_f->_method_def_by_ident(_57529_ident,false);
				if (_58221_def != nullptr) {
					return _58221_def;
				}
			}
			_iter_next_4609821088:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4609821088; }
			_iter_end_4609821088:;
		}
	}
	return jule::Any(nullptr);
}



inline void _110e92bc0_Sema::_method_check_import_selections(jule::Ref<_110e4edc0_ImportInfo> _59146_imp) {
	{
		auto __julec_range_expr = _59146_imp->_field_selected;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_1106ec050_Token _110e92bc0_ident = *__julec_range_begin;
			_iter_begin_4609827216:;
			{
				if (_110e92bc0_ident._field_kind == jule::Str("self", 4)) {
					goto _iter_next_4609827216;
				}
				if ((*this)._method_is_duplicated_import_selection(((jule::Uintptr)((_59146_imp).alloc)),_110e92bc0_ident._field_kind)) {
					(*this)._method_push_err(_110e92bc0_ident,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_110e92bc0_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
					goto _iter_next_4609827216;
				}
				jule::Any _60321_def = (*this)._method_get_import_def(_110e92bc0_ident._field_kind,_59146_imp);
				{
					auto _match_expr{ _60321_def };
					if (!(_match_expr.type_is<jule::Bool>())) { goto _case_end_4609836512; }
					_case_begin_4609836512:;
					{
						goto _iter_next_4609827216;
					}
					goto _match_end_4609835152;
					_case_end_4609836512:;
					if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4609836624; }
					_case_begin_4609836624:;
					{
						jule::Ref<_110e92c80_Var> _61025_v = _60321_def.operator jule::Ref<_110e92c80_Var>();
						if ((*this)._method_is_accessible_define(_61025_v->_field_public,_61025_v->_field_token)) {
							goto _iter_next_4609827216;
						}
					}
					goto _match_end_4609835152;
					_case_end_4609836624:;
					if (!(_match_expr.type_is<jule::Ref<_1116aff70_TypeAlias>>())) { goto _case_end_4609838752; }
					_case_begin_4609838752:;
					{
						jule::Ref<_1116aff70_TypeAlias> _61625_ta = _60321_def.operator jule::Ref<_1116aff70_TypeAlias>();
						if ((*this)._method_is_accessible_define(_61625_ta->_field_public,_61625_ta->_field_token)) {
							goto _iter_next_4609827216;
						}
					}
					goto _match_end_4609835152;
					_case_end_4609838752:;
					if (!(_match_expr.type_is<jule::Ref<_1109372e0_Struct>>())) { goto _case_end_4609838864; }
					_case_begin_4609838864:;
					{
						jule::Ref<_1109372e0_Struct> _62225_strct = _60321_def.operator jule::Ref<_1109372e0_Struct>();
						if ((*this)._method_is_accessible_define(_62225_strct->_field_public,_62225_strct->_field_token)) {
							goto _iter_next_4609827216;
						}
					}
					goto _match_end_4609835152;
					_case_end_4609838864:;
					if (!(_match_expr.type_is<jule::Ref<_110e3f160_Trait>>())) { goto _case_end_4609838976; }
					_case_begin_4609838976:;
					{
						jule::Ref<_110e3f160_Trait> _62825_t = _60321_def.operator jule::Ref<_110e3f160_Trait>();
						if ((*this)._method_is_accessible_define(_62825_t->_field_public,_62825_t->_field_token)) {
							goto _iter_next_4609827216;
						}
					}
					goto _match_end_4609835152;
					_case_end_4609838976:;
					if (!(_match_expr.type_is<jule::Ref<_110e453c0_Enum>>())) { goto _case_end_4609839088; }
					_case_begin_4609839088:;
					{
						jule::Ref<_110e453c0_Enum> _63425_e = _60321_def.operator jule::Ref<_110e453c0_Enum>();
						if ((*this)._method_is_accessible_define(_63425_e->_field_public,_63425_e->_field_token)) {
							goto _iter_next_4609827216;
						}
					}
					goto _match_end_4609835152;
					_case_end_4609839088:;
					if (!(_match_expr.type_is<jule::Ref<_11072eb20_Fn>>())) { goto _case_end_4609839200; }
					_case_begin_4609839200:;
					{
						jule::Ref<_11072eb20_Fn> _64025_f = _60321_def.operator jule::Ref<_11072eb20_Fn>();
						if ((*this)._method_is_accessible_define(_64025_f->_field_public,_64025_f->_field_token)) {
							goto _iter_next_4609827216;
						}
					}
					goto _match_end_4609835152;
					_case_end_4609839200:;
					_case_begin_4609835984:;
					{
						(*this)._method_push_err(_110e92bc0_ident,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_110e92bc0_ident._field_kind)}));
						goto _iter_next_4609827216;
					}
					goto _match_end_4609835152;
					_case_end_4609835984:;
					_match_end_4609835152:;
				}
				(*this)._method_push_err(_110e92bc0_ident,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_110e92bc0_ident._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
			}
			_iter_next_4609827216:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_ident = *__julec_range_begin; goto _iter_begin_4609827216; }
			_iter_end_4609827216:;
		}
	}
}



inline jule::Bool _110e92bc0_Sema::_method_is_use_alias_duplication(jule::Ref<_110e4edc0_ImportInfo>& _65544_imp) {
	if (_65544_imp->_field_alias.len() == 0LL) {
		return false;
	}
	jule::Int _66017_i = 0LL;
	_iter_begin_4609866096:;
	if (!(_66017_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4609866096; }
	{
		jule::Ref<_110e4edc0_ImportInfo> _66217_imp2 = (*this)._field_file->_field_imports._method_at(_66017_i);
		if ((_66217_imp2).alloc == (_65544_imp).alloc) {
			goto _iter_end_4609866096;
		}
		if (_66217_imp2->_field_alias == _65544_imp->_field_alias) {
			return true;
		}
	}
	_iter_next_4609866096:;
	(_66017_i)++;
	goto _iter_begin_4609866096;
	_iter_end_4609866096:;
	return false;
}



inline jule::Bool _110e92bc0_Sema::_method_check_import(jule::Ref<_110e4edc0_ImportInfo> _67335_imp) {
	if (_67335_imp->_field_cpp_linked || (_67335_imp->_field_package->_field_files.len() == 0LL)) {
		return true;
	}
	if ((*this)._method_is_use_alias_duplication(_67335_imp)) {
		(*this)._method_push_err(_67335_imp->_field_token,jule::Str("identifier \"@\" is already used for another use declaration", 58),jule::Slice<jule::Any>({jule::Any(_67335_imp->_field_alias)}));
		(*this)._method_push_suggestion(jule::Str("rename alias for this use declaration to avoid duplication", 58),jule::Slice<jule::Any>({}));
	}
	if (_67335_imp->_field_duplicate) {
		return true;
	}
	jule::Ref<_110e92bc0_Sema> _68717_sema = jule::new_struct<_110e92bc0_Sema>(new( std::nothrow ) _110e92bc0_Sema());
	_68717_sema->_method_check(_67335_imp->_field_package->_field_files);
	if (_68717_sema->_field_errors.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_68717_sema->_field_errors);
		return false;
	}
	(*this)._method_check_import_selections(_67335_imp);
	return true;
}



inline void _110e92bc0_Sema::_method_check_imports(void) {
	{
		auto __julec_range_expr = (*this)._field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_file = *__julec_range_begin;
			_iter_begin_4609887904:;
			{
				(*this)._method_set_current_file(_110e92bc0_file);
				jule::Int _70221_i = 0LL;
				_iter_begin_4609891104:;
				if (!(_70221_i < _110e92bc0_file->_field_imports._method_len())) { goto _iter_end_4609891104; }
				{
					jule::Ref<_110e4edc0_ImportInfo> _70425_imp = _110e92bc0_file->_field_imports._method_at(_70221_i);
					jule::Bool _70521_ok = (*this)._method_check_import(_70425_imp);
					if ((!(_70521_ok))) {
						(*this)._method_push_err(_70425_imp->_field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any(_70425_imp->_field_link_path)}));
						return;
					}
				}
				_iter_next_4609891104:;
				(_70221_i)++;
				goto _iter_begin_4609891104;
				_iter_end_4609891104:;
			}
			_iter_next_4609887904:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_file = *__julec_range_begin; goto _iter_begin_4609887904; }
			_iter_end_4609887904:;
		}
	}
}



inline void _110e92bc0_Sema::_method_impl_file_impls(void) {
	jule::Int _71717_i = 0LL;
	_iter_begin_4609898656:;
	if (!(_71717_i < this->self->_field_file->_field_impls._method_len())) { goto _iter_end_4609898656; }
	{
		jule::Ref<_110e4c050_Impl> _71921_imp = this->self->_field_file->_field_impls._method_at(_71717_i);
		this->self->_method_impl_impl(_71921_imp);
	}
	_iter_next_4609898656:;
	(_71717_i)++;
	goto _iter_begin_4609898656;
	_iter_end_4609898656:;
}



inline void _110e92bc0_Sema::_method_impl_impls(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_file = *__julec_range_begin;
			_iter_begin_4609906192:;
			{
				this->self->_method_set_current_file(_110e92bc0_file);
				this->self->_method_impl_file_impls();
			}
			_iter_next_4609906192:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_file = *__julec_range_begin; goto _iter_begin_4609906192; }
			_iter_end_4609906192:;
		}
	}
}



inline void _110e92bc0_Sema::_method_check_enums(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_file = *__julec_range_begin;
			_iter_begin_4609910560:;
			{
				this->self->_method_set_current_file(_110e92bc0_file);
				this->self->_method_check_enum_decls();
			}
			_iter_next_4609910560:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_file = *__julec_range_begin; goto _iter_begin_4609910560; }
			_iter_end_4609910560:;
		}
	}
}



inline jule::Bool _110e92bc0_Sema::_method_check_type_with_refers(jule::Ref<_1116aff70_TypeSymbol> _74046_t,jule::Trait<_111732860_Lookup> _7419_l,jule::Ref<_1116aff70_Referencer> _74120_referencer) {
	jule::Bool _74147_ok = jule::Bool();
	if (_74046_t->_method_checked()) {
		_74147_ok = true;
		return _74147_ok;
	}
	_1116aff70_TypeChecker _74517_tc = _1116aff70_TypeChecker(this->self,_7419_l,_74120_referencer,_1106ec050_Token(),jule::Slice<jule::Ref<_11054f670_GenericDecl>>(),jule::Slice<jule::Ref<_1116aff70_TypeAlias>>(),jule::Bool());
	_74517_tc._method_check(_74046_t);
	_74147_ok = _74046_t->_method_checked();
	return _74147_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_type(jule::Ref<_1116aff70_TypeSymbol> _75634_t,jule::Trait<_111732860_Lookup> _75650_l) {
	jule::Bool _75663_ok = jule::Bool();
	_75663_ok = this->self->_method_check_type_with_refers(_75634_t,_75650_l,jule::new_ref<_1116aff70_Referencer>());
	return _75663_ok;
}



inline jule::Ref<_1116aff70_TypeKind> _110e92bc0_Sema::_method_build_type_with_generics(jule::Ref<_11054f670_TypeDecl> _76248_t,jule::Slice<jule::Ref<_1116aff70_TypeAlias>> _7639_generics) {
	jule::Ref<_1116aff70_TypeChecker> _76417_tc = jule::new_struct<_1116aff70_TypeChecker>(new( std::nothrow ) _1116aff70_TypeChecker(this->self,this->self,jule::Ref<_1116aff70_Referencer>(),_1106ec050_Token(),jule::Slice<jule::Ref<_11054f670_GenericDecl>>(),_7639_generics,jule::Bool()));
	return _76417_tc->_method_check_decl(_76248_t);
}



inline jule::Ref<_1116aff70_TypeKind> _110e92bc0_Sema::_method_build_type(jule::Ref<_11054f670_TypeDecl> _77334_t) {
	return this->self->_method_build_type_with_generics(_77334_t,nullptr);
}



inline jule::Ref<_1112d7f10_Data> _110e92bc0_Sema::_method_evalpd(jule::Ref<_11054f670_Expr> _77930_expr,jule::Trait<_111732860_Lookup> _77947_l,jule::Ref<_1116aff70_TypeKind> _78013_p,jule::Ref<_110e92c80_Var> _78027_owner) {
	jule::Ref<_1112d7f10_Eval> _78117_e = jule::new_struct<_1112d7f10_Eval>(new( std::nothrow ) _1112d7f10_Eval(this->self,_77947_l,jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),_78027_owner));
	{
		auto _match_expr{ _77947_l };
		if (!(_match_expr.type_is<jule::Ref<_110af2660_ScopeChecker>>())) { goto _case_end_4609963472; }
		_case_begin_4609963472:;
		{
			_78117_e->_field_unsafety=_77947_l.operator jule::Ref<_110af2660_ScopeChecker>()->_method_is_unsafe();
		}
		goto _match_end_4609957696;
		_case_end_4609963472:;
		_match_end_4609957696:;
	}
	_78117_e->_field_prefix=_78013_p;
	return _78117_e->_method_eval_expr(_77930_expr);
}



inline jule::Ref<_1112d7f10_Data> _110e92bc0_Sema::_method_evalp(jule::Ref<_11054f670_Expr> _79829_expr,jule::Trait<_111732860_Lookup> _79846_l,jule::Ref<_1116aff70_TypeKind> _79861_p) {
	return this->self->_method_evalpd(_79829_expr,_79846_l,_79861_p,jule::new_ref<_110e92c80_Var>());
}



inline jule::Ref<_1112d7f10_Data> _110e92bc0_Sema::_method_eval(jule::Ref<_11054f670_Expr> _80328_expr,jule::Trait<_111732860_Lookup> _80345_l) {
	return this->self->_method_evalp(_80328_expr,_80345_l,jule::new_ref<_1116aff70_TypeKind>());
}



inline void _110e92bc0_Sema::_method_check_assign_type(jule::Ref<_1116aff70_TypeKind> _80741_dest,jule::Ref<_1112d7f10_Data> _80762_d,_1106ec050_Token _8089_error_token,jule::Bool _80829_deref) {
	jule::Ref<_1111c0be0_AssignTypeChecker> _80917_atc = jule::new_struct<_1111c0be0_AssignTypeChecker>(new( std::nothrow ) _1111c0be0_AssignTypeChecker(this->self,_80741_dest,_80762_d,_8089_error_token,_80829_deref));
	jule::Bool _81613_ok = _80917_atc->_method_check();
	if ((!(_81613_ok))) {
		return;
	}
	if ((!(_80762_d->_method_is_const())) || (!(jule::real(_80741_dest->_method_prim())))) {
		return;
	}
	jule::Str _82517_kind = _80741_dest->_method_prim()->_field_kind;
	{
		if (!((_1118e4c20_is_sig_int(_82517_kind)))) { goto _case_end_4609984128; }
		_case_begin_4609984128:;
		{
			_80762_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_80762_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4609983936;
		_case_end_4609984128:;
		if (!((_1118e4c20_is_unsig_int(_82517_kind)))) { goto _case_end_4609984256; }
		_case_begin_4609984256:;
		{
			_80762_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_80762_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4609983936;
		_case_end_4609984256:;
		if (!((_1118e4c20_is_float(_82517_kind)))) { goto _case_end_4609984384; }
		_case_begin_4609984384:;
		{
			_80762_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_80762_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4609983936;
		_case_end_4609984384:;
		_match_end_4609983936:;
	}
}



inline jule::Bool _110e92bc0_Sema::_method_check_type_compatibility(jule::Ref<_1116aff70_TypeKind> _83948_dest,jule::Ref<_1116aff70_TypeKind> _84013_src,_1106ec050_Token _84029_error_token,jule::Bool _84049_deref) {
	if (jule::real(_84013_src->_method_tup())) {
		this->self->_method_push_err(_84029_error_token,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_83948_dest->_method_to_str()),jule::Any(_84013_src->_method_to_str())}));
		return false;
	}
	jule::Ref<_1111c0be0_TypeCompatibilityChecker> _84817_tcc = jule::new_struct<_1111c0be0_TypeCompatibilityChecker>(new( std::nothrow ) _1111c0be0_TypeCompatibilityChecker(this->self,_83948_dest,_84013_src,_84029_error_token,jule::Bool(),_84049_deref,jule::Bool()));
	jule::Bool _85513_ok = _84817_tcc->_method_check();
	if ((!(_85513_ok))) {
		this->self->_method_push_err(_84029_error_token,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_83948_dest->_method_to_str()),jule::Any(_84013_src->_method_to_str())}));
	}
	return _85513_ok;
}



inline jule::Ref<_1116aff70_TypeKind> _110e92bc0_Sema::_method_build_non_generic_type_kind(jule::Ref<_11054f670_TypeDecl> _86951_ast,jule::Slice<jule::Ref<_11054f670_GenericDecl>> _8709_generics) {
	jule::Ref<_1116aff70_TypeChecker> _87117_tc = jule::new_struct<_1116aff70_TypeChecker>(new( std::nothrow ) _1116aff70_TypeChecker(this->self,this->self,jule::Ref<_1116aff70_Referencer>(),_1106ec050_Token(),_8709_generics,jule::Slice<jule::Ref<_1116aff70_TypeAlias>>(),jule::Bool()));
	return _87117_tc->_method_check_decl(_86951_ast);
}



inline void _110e92bc0_Sema::_method_build_fn_non_generic_type_kinds(jule::Ref<_11072eb20_FnIns> _87955_f) {
	jule::Slice<jule::Ref<_11054f670_GenericDecl>> _88017_generics = nullptr;
	if (_87955_f->_field_decl->_method_is_method()) {
		_88017_generics=jule::append(_87955_f->_field_decl->_field_generics,_87955_f->_field_decl->_field_owner->_field_generics);
	} else {
		_88017_generics=_87955_f->_field_decl->_field_generics;
	}
	{
		auto __julec_range_expr = _87955_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_ParamIns> _110e92bc0_p = *__julec_range_begin;
			_iter_begin_4610022272:;
			{
				if ((!(_110e92bc0_p->_field_decl->_method_is_self()))) {
					_110e92bc0_p->_field_kind=this->self->_method_build_non_generic_type_kind(_110e92bc0_p->_field_decl->_field_kind->_field_decl,_88017_generics);
				}
			}
			_iter_next_4610022272:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_p = *__julec_range_begin; goto _iter_begin_4610022272; }
			_iter_end_4610022272:;
		}
	}
	if ((!(_87955_f->_field_decl->_method_is_void()))) {
		_87955_f->_field_result=this->self->_method_build_non_generic_type_kind(_87955_f->_field_decl->_field_result->_field_kind->_field_decl,_88017_generics);
	}
}



inline jule::Ref<_11072eb20_FnIns> _110e92bc0_Sema::_method_get_trait_check_fn_kind(jule::Ref<_11072eb20_Fn> _89747_f) {
	jule::Ref<_11072eb20_FnIns> _89817_ins = _89747_f->_method_instance_force();
	this->self->_method_build_fn_non_generic_type_kinds(_89817_ins);
	return _89817_ins;
}



inline jule::Bool _110e92bc0_Sema::_method_reload_fn_ins_types(jule::Ref<_11072eb20_FnIns> _90343_f) {
	jule::Bool _90356_ok = jule::Bool();
	if (_90343_f->_method_is_builtin() || _90343_f->_method_is_anon()) {
		_90356_ok = true;
		return _90356_ok;
	}
	jule::Ref<_110e92bc0_Sema> _90817_sema = _90343_f->_field_decl->_field_sema;
	jule::Ref<_1111c15d0_SymbolTable> _91017_old = _90343_f->_field_decl->_field_sema->_field_file;
	__JULE_DEFER({
		_90343_f->_field_decl->_field_sema->_method_set_current_file(_91017_old);
	});
	jule::Ref<_1111c15d0_SymbolTable> _91217_file = _110e92bc0_find_file(_90343_f->_field_decl->_field_sema->_field_files,_90343_f->_field_decl->_field_token._field_file);
	if (jule::real(_91217_file)) {
		_90343_f->_field_decl->_field_sema->_method_set_current_file(_91217_file);
	}
	jule::I64 _91717_size = _90343_f->_field_generics.len();
	if (jule::real(_90343_f->_field_decl) && jule::real(_90343_f->_field_decl->_field_owner)) {
		_91717_size+=static_cast<jule::I64>(_90343_f->_field_decl->_field_owner->_field_generics.len());
	}
	jule::Slice<jule::Ref<_1116aff70_TypeAlias>> _92217_generics = jule::Slice<jule::Ref<_1116aff70_TypeAlias>>::alloc(0LL,static_cast<jule::Int>(_91717_size));
	{
		auto __julec_range_expr = _90343_f->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110e92bc0_i = 0;
			jule::Ref<_1116aff70_TypeKind> _110e92bc0_g = *__julec_range_begin;
			_iter_begin_4610056032:;
			{
				_92217_generics=jule::append(_92217_generics,jule::Slice<jule::Ref<_1116aff70_TypeAlias>>({jule::new_struct<_1116aff70_TypeAlias>(new( std::nothrow ) _1116aff70_TypeAlias(jule::Ref<_11054f670_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),_1106ec050_Token(),_90343_f->_field_decl->_field_generics[static_cast<jule::Int>(_110e92bc0_i)]->_field_ident,jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),_110e92bc0_g)),jule::Str(),jule::Slice<jule::Any>()))}));
			}
			_iter_next_4610056032:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_i; _110e92bc0_g = *__julec_range_begin; goto _iter_begin_4610056032; }
			_iter_end_4610056032:;
		}
	}
	if (jule::real(_90343_f->_field_decl) && jule::real(_90343_f->_field_decl->_field_owner)) {
		jule::Ref<_1109372e0_StructIns> _93421_owner = _90343_f->_field_owner;
		{
			auto __julec_range_expr = _93421_owner->_field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _110e92bc0_i = 0;
				jule::Ref<_1116aff70_TypeKind> _110e92bc0_g = *__julec_range_begin;
				_iter_begin_4610059824:;
				{
					_92217_generics=jule::append(_92217_generics,jule::Slice<jule::Ref<_1116aff70_TypeAlias>>({jule::new_struct<_1116aff70_TypeAlias>(new( std::nothrow ) _1116aff70_TypeAlias(jule::Ref<_11054f670_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),_1106ec050_Token(),_93421_owner->_field_decl->_field_generics[static_cast<jule::Int>(_110e92bc0_i)]->_field_ident,jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),_110e92bc0_g)),jule::Str(),jule::Slice<jule::Any>()))}));
				}
				_iter_next_4610059824:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_i; _110e92bc0_g = *__julec_range_begin; goto _iter_begin_4610059824; }
				_iter_end_4610059824:;
			}
		}
	}
	_90356_ok=true;
	{
		auto __julec_range_expr = _90343_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_ParamIns> _110e92bc0_p = *__julec_range_begin;
			_iter_begin_4610065616:;
			{
				if ((!(_110e92bc0_p->_field_decl->_method_is_self()))) {
					_110e92bc0_p->_field_kind=_90817_sema->_method_build_type_with_generics(_110e92bc0_p->_field_decl->_field_kind->_field_decl,_92217_generics);
					_90356_ok=jule::real(_110e92bc0_p->_field_kind) && _90356_ok;
				}
			}
			_iter_next_4610065616:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_p = *__julec_range_begin; goto _iter_begin_4610065616; }
			_iter_end_4610065616:;
		}
	}
	if ((!(_90343_f->_field_decl->_method_is_void()))) {
		_90343_f->_field_result=_90817_sema->_method_build_type_with_generics(_90343_f->_field_decl->_field_result->_field_kind->_field_decl,_92217_generics);
		_90356_ok=jule::real(_90343_f->_field_result) && _90356_ok;
	}
	if ((_90817_sema).alloc != (this->self).alloc) {
		this->self->_field_errors=jule::append(this->self->_field_errors,_90817_sema->_field_errors);
	}
	_90356_ok = _90356_ok;
	return _90356_ok;
}



inline void _110e92bc0_Sema::_method_check_validity_for_init_expr(jule::Bool _96548_left_mut,jule::Bool _96564_left_ref,jule::Ref<_1116aff70_TypeKind> _9669_left_kind,jule::Ref<_1112d7f10_Data> _96635_d,_1106ec050_Token _96645_error_token) {
	if ((_96548_left_mut && (!(_96635_d->_field_mutable))) && _1116aff70_is_mut(_96635_d->_field_kind)) {
		this->self->_method_push_err(_96645_error_token,jule::Str("cannot assign mutable type used immutable define to mutable define", 66),jule::Slice<jule::Any>({}));
	}
	if (_96564_left_ref) {
		{
			auto _match_expr{ _96635_d->_field_model };
			if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>() || _match_expr.type_is<jule::Ref<_110e4e8a0_TraitSubIdentExprModel>>() || _match_expr.type_is<jule::Ref<_110e4e8a0_CommonIdentExprModel>>() || _match_expr.type_is<jule::Ref<_110e4e8a0_StructSubIdentExprModel>>() || _match_expr.type_is<jule::Ref<_110e4e8a0_CommonSubIdentExprModel>>())) { goto _case_end_4610086688; }
			goto _match_end_4610084480;
			_case_end_4610086688:;
			if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_UnaryExprModel>>())) { goto _case_end_4610086160; }
			_case_begin_4610086160:;
			{
				jule::Ref<_110e4e8a0_UnaryExprModel> _98021_unary = _96635_d->_field_model.operator jule::Ref<_110e4e8a0_UnaryExprModel>();
				if (_98021_unary->_field_op == jule::Str("*", 1)) {
					goto _match_end_4610084480;
				}
				goto _case_begin_4610085840;
			}
			goto _match_end_4610084480;
			_case_end_4610086160:;
			_case_begin_4610085840:;
			{
				this->self->_method_push_err(_96645_error_token,jule::Str("references requires variable for assignment", 43),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4610084480;
			_case_end_4610085840:;
			_match_end_4610084480:;
		}
		if (_96548_left_mut && (!(_96635_d->_field_mutable))) {
			this->self->_method_push_err(_96645_error_token,jule::Str("mutable reference cannot point to immutable data", 48),jule::Slice<jule::Any>({}));
		}
	}
	jule::Ref<_1111c0be0_AssignTypeChecker> _99617_atc = jule::new_struct<_1111c0be0_AssignTypeChecker>(new( std::nothrow ) _1111c0be0_AssignTypeChecker(this->self,jule::Ref<_1116aff70_TypeKind>(),_96635_d,_96645_error_token,jule::Bool()));
	_99617_atc->_method_check_validity();
}



inline jule::Bool _110e92bc0_Sema::_method_check_type_alias_decl_kind(jule::Ref<_1116aff70_TypeAlias> _100450_ta,jule::Trait<_111732860_Lookup> _100466_l) {
	jule::Bool _100479_ok = jule::Bool();
	jule::Ref<_1111c15d0_SymbolTable> _100517_old = this->self->_field_file;
	__JULE_DEFER({
		this->self->_method_set_current_file(_100517_old);
	});
	jule::Ref<_1111c15d0_SymbolTable> _100717_file = _110e92bc0_find_file(this->self->_field_files,_100450_ta->_field_token._field_file);
	if (jule::real(_100717_file)) {
		this->self->_method_set_current_file(_100717_file);
	}
	_100479_ok=this->self->_method_check_type_with_refers(_100450_ta->_field_kind,_100466_l,jule::new_struct<_1116aff70_Referencer>(new( std::nothrow ) _1116aff70_Referencer(_100450_ta->_field_ident,jule::Any(_100450_ta),(&(_100450_ta->_field_refers)))));
	if ((_100479_ok && jule::real(_100450_ta->_field_kind->_field_kind->_method_arr())) && _100450_ta->_field_kind->_field_kind->_method_arr()->_field_auto) {
		this->self->_method_push_err(_100450_ta->_field_kind->_field_decl->_field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>({}));
		_100479_ok=false;
	}
	return _100479_ok;
}



inline void _110e92bc0_Sema::_method_check_type_alias_decl(jule::Ref<_1116aff70_TypeAlias> _102445_ta,jule::Trait<_111732860_Lookup> _102461_l) {
	if (_1106ec050_is_ignore_ident(_102445_ta->_field_ident)) {
		this->self->_method_push_err(_102445_ta->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_type_alias_decl_kind(_102445_ta,_102461_l);
}



inline void _110e92bc0_Sema::_method_check_type_alias_decl_dup(jule::Ref<_1116aff70_TypeAlias> _103249_ta) {
	if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_103249_ta).alloc)),_103249_ta->_field_ident,_103249_ta->_field_cpp_linked)) {
		this->self->_method_push_err(_103249_ta->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_103249_ta->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_type_alias_decl_kind(_103249_ta,this->self);
}



inline jule::Bool _110e92bc0_Sema::_method_check_type_alias_decls(void) {
	jule::Bool _104144_ok = jule::Bool();
	jule::Int _104217_i = 0LL;
	_iter_begin_4610128896:;
	if (!(_104217_i < this->self->_field_file->_field_type_aliases._method_len())) { goto _iter_end_4610128896; }
	{
		jule::Ref<_1116aff70_TypeAlias> _104421_ta = this->self->_field_file->_field_type_aliases._method_at(_104217_i);
		this->self->_method_check_type_alias_decl_dup(_104421_ta);
		if (this->self->_field_errors.len() > 0LL) {
			_104144_ok = false;
			return _104144_ok;
		}
	}
	_iter_next_4610128896:;
	(_104217_i)++;
	goto _iter_begin_4610128896;
	_iter_end_4610128896:;
	_104144_ok = true;
	return _104144_ok;
}



inline void _110e92bc0_Sema::_method_check_enum_items_dup(jule::Ref<_110e453c0_Enum> _105539_e) {
	{
		auto __julec_range_expr = _105539_e->_field_items;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e453c0_EnumItem> _110e92bc0_item = *__julec_range_begin;
			_iter_begin_4610137280:;
			{
				if (_1106ec050_is_ignore_ident(_110e92bc0_item->_field_ident)) {
					(*this)._method_push_err(_110e92bc0_item->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
				} else {
					{
						auto __julec_range_expr = _105539_e->_field_items;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Ref<_110e453c0_EnumItem> _110e92bc0_citem = *__julec_range_begin;
							_iter_begin_4610142192:;
							{
								if (_110e92bc0_item == _110e92bc0_citem) {
									goto _iter_end_4610142192;
								} else if (_110e92bc0_item->_field_ident == _110e92bc0_citem->_field_ident) {
									(*this)._method_push_err(_110e92bc0_item->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_110e92bc0_item->_field_ident)}));
									(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
									goto _iter_end_4610142192;
								}
							}
							_iter_next_4610142192:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _110e92bc0_citem = *__julec_range_begin; goto _iter_begin_4610142192; }
							_iter_end_4610142192:;
						}
					}
				}
			}
			_iter_next_4610137280:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_item = *__julec_range_begin; goto _iter_begin_4610137280; }
			_iter_end_4610137280:;
		}
	}
}



inline void _110e92bc0_Sema::_method_check_enum_items_str(jule::Ref<_110e453c0_Enum> _107344_e) {
	{
		auto __julec_range_expr = _107344_e->_field_items;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e453c0_EnumItem> _110e92bc0_item = *__julec_range_begin;
			_iter_begin_4610149072:;
			{
				if (_110e92bc0_item->_method_auto_expr()) {
					_110e92bc0_item->_field_value=jule::new_struct<_1112d7f10_Value>(new( std::nothrow ) _1112d7f10_Value(jule::Ref<_11054f670_Expr>(),jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::Ref<_1116aff70_TypeKind>(),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1118cee40_Const::_static_method_new_str(_110e92bc0_item->_field_ident)))));
					_110e92bc0_item->_field_value->_field_data->_field_model=jule::Any(_110e92bc0_item->_field_value->_field_data->_field_constant);
				} else {
					jule::Ref<_1112d7f10_Data> _108325_d = this->self->_method_eval(_110e92bc0_item->_field_value->_field_expr,this->self);
					if ((!(jule::real(_108325_d)))) {
						goto _iter_next_4610149072;
					}
					if ((!(_108325_d->_method_is_const()))) {
						this->self->_method_push_err(_110e92bc0_item->_field_value->_field_expr->_field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>({}));
					}
					this->self->_method_check_assign_type(_107344_e->_field_kind->_field_kind,_108325_d,_110e92bc0_item->_field_token,false);
					_110e92bc0_item->_field_value->_field_data=_108325_d;
				}
			}
			_iter_next_4610149072:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_item = *__julec_range_begin; goto _iter_begin_4610149072; }
			_iter_end_4610149072:;
		}
	}
}



inline void _110e92bc0_Sema::_method_check_enum_items_int(jule::Ref<_110e453c0_Enum> _109844_e) {
	jule::U64 _109917_max = static_cast<jule::U64>(_1118d0df0_max(_109844_e->_field_kind->_field_kind->_method_prim()->_method_to_str()));
	{
		auto __julec_range_expr = _109844_e->_field_items;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110e92bc0_i = 0;
			jule::Ref<_110e453c0_EnumItem> _110e92bc0_item = *__julec_range_begin;
			_iter_begin_4610168272:;
			{
				if (_109917_max == 0LL) {
					this->self->_method_push_err(_110e92bc0_item->_field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>({}));
				} else {
					(_109917_max)--;
				}
				if (_110e92bc0_item->_method_auto_expr()) {
					_110e92bc0_item->_field_value=jule::new_struct<_1112d7f10_Value>(new( std::nothrow ) _1112d7f10_Value(jule::Ref<_11054f670_Expr>(),jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::Ref<_1116aff70_TypeKind>(),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1118cee40_Const::_static_method_new_u64(static_cast<jule::U64>(_109917_max - (_109917_max - static_cast<jule::U64>(_110e92bc0_i))))))));
					_110e92bc0_item->_field_value->_field_data->_field_model=jule::Any(_110e92bc0_item->_field_value->_field_data->_field_constant);
				} else {
					jule::Ref<_1112d7f10_Data> _111525_d = this->self->_method_eval(_110e92bc0_item->_field_value->_field_expr,this->self);
					if ((!(jule::real(_111525_d)))) {
						goto _iter_next_4610168272;
					}
					if ((!(_111525_d->_method_is_const()))) {
						this->self->_method_push_err(_110e92bc0_item->_field_value->_field_expr->_field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>({}));
					}
					this->self->_method_check_assign_type(_109844_e->_field_kind->_field_kind,_111525_d,_110e92bc0_item->_field_token,false);
					_110e92bc0_item->_field_value->_field_data=_111525_d;
				}
			}
			_iter_next_4610168272:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_i; _110e92bc0_item = *__julec_range_begin; goto _iter_begin_4610168272; }
			_iter_end_4610168272:;
		}
	}
}



inline void _110e92bc0_Sema::_method_check_enum_decl(jule::Ref<_110e453c0_Enum> _113039_e) {
	if (_1106ec050_is_ignore_ident(_113039_e->_field_ident)) {
		this->self->_method_push_err(_113039_e->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	} else if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_113039_e).alloc)),_113039_e->_field_ident,false)) {
		this->self->_method_push_err(_113039_e->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_113039_e->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	if (_113039_e->_field_items.len() == 0LL) {
		this->self->_method_push_err(_113039_e->_field_token,jule::Str("there is no member for enum: @", 30),jule::Slice<jule::Any>({jule::Any(_113039_e->_field_ident)}));
	}
	this->self->_method_check_enum_items_dup(_113039_e);
	if (jule::real(_113039_e->_field_kind)) {
		if ((!(this->self->_method_check_type(_113039_e->_field_kind,this->self)))) {
			return;
		}
	} else {
		_113039_e->_field_kind=jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("int", 3))))));
	}
	jule::Ref<_1116aff70_Prim> _115717_t = _113039_e->_field_kind->_field_kind->_method_prim();
	if ((!(jule::real(_115717_t)))) {
		this->self->_method_push_err(_113039_e->_field_token,jule::Str("invalid data-type source", 24),jule::Slice<jule::Any>({}));
		return;
	}
	{
		if (!((_115717_t->_method_is_str()))) { goto _case_end_4610209024; }
		_case_begin_4610209024:;
		{
			this->self->_method_check_enum_items_str(_113039_e);
		}
		goto _match_end_4610204352;
		_case_end_4610209024:;
		if (!((_1118e4c20_is_int(_115717_t->_method_to_str())))) { goto _case_end_4610206928; }
		_case_begin_4610206928:;
		{
			this->self->_method_check_enum_items_int(_113039_e);
		}
		goto _match_end_4610204352;
		_case_end_4610206928:;
		_case_begin_4610204480:;
		{
			this->self->_method_push_err(_113039_e->_field_token,jule::Str("invalid data-type source", 24),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4610204352;
		_case_end_4610204480:;
		_match_end_4610204352:;
	}
}



inline jule::Bool _110e92bc0_Sema::_method_check_enum_decls(void) {
	jule::Bool _117738_ok = jule::Bool();
	jule::Int _117817_i = 0LL;
	_iter_begin_4610214928:;
	if (!(_117817_i < this->self->_field_file->_field_enums._method_len())) { goto _iter_end_4610214928; }
	{
		jule::Ref<_110e453c0_Enum> _118021_e = this->self->_field_file->_field_enums._method_at(_117817_i);
		this->self->_method_check_enum_decl(_118021_e);
		if (this->self->_field_errors.len() > 0LL) {
			_117738_ok = false;
			return _117738_ok;
		}
	}
	_iter_next_4610214928:;
	(_117817_i)++;
	goto _iter_begin_4610214928;
	_iter_end_4610214928:;
	_117738_ok = true;
	return _117738_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_decl_generics(jule::Slice<jule::Ref<_11054f670_GenericDecl>> _119138_generics) {
	jule::Bool _119166_ok = jule::Bool();
	_119166_ok=true;
	{
		auto __julec_range_expr = _119138_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110e92bc0_i = 0;
			jule::Ref<_11054f670_GenericDecl> _110e92bc0_g = *__julec_range_begin;
			_iter_begin_4610224048:;
			{
				if (_1106ec050_is_ignore_ident(_110e92bc0_g->_field_ident)) {
					(*this)._method_push_err(_110e92bc0_g->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
					_119166_ok=false;
					goto _iter_next_4610224048;
				}
				_julec_label_duplication_lookup:;
				{
					auto __julec_range_expr = _119138_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _110e92bc0_j = 0;
						jule::Ref<_11054f670_GenericDecl> _110e92bc0_ct = *__julec_range_begin;
						_iter_begin_4610226928:;
						{
							{
								if (!((_110e92bc0_j >= _110e92bc0_i))) { goto _case_end_4610232160; }
								_case_begin_4610232160:;
								{
									goto _iter_end_4610226928;
								}
								goto _match_end_4610231968;
								_case_end_4610232160:;
								if (!((_110e92bc0_g->_field_ident == _110e92bc0_ct->_field_ident))) { goto _case_end_4610232288; }
								_case_begin_4610232288:;
								{
									(*this)._method_push_err(_110e92bc0_g->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_110e92bc0_g->_field_ident)}));
									(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
									_119166_ok=false;
									goto _iter_end_4610226928;
								}
								goto _match_end_4610231968;
								_case_end_4610232288:;
								_match_end_4610231968:;
							}
						}
						_iter_next_4610226928:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_j; _110e92bc0_ct = *__julec_range_begin; goto _iter_begin_4610226928; }
						_iter_end_4610226928:;
					}
				}
			}
			_iter_next_4610224048:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_i; _110e92bc0_g = *__julec_range_begin; goto _iter_begin_4610224048; }
			_iter_end_4610224048:;
		}
	}
	return _119166_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_fn_decl_params_dup(jule::Ref<_11072eb20_Fn> _121943_f) {
	jule::Bool _121953_ok = jule::Bool();
	_121953_ok=true;
	_julec_label_check:;
	{
		auto __julec_range_expr = _121943_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110e92bc0_i = 0;
			jule::Ref<_11072eb20_Param> _110e92bc0_p = *__julec_range_begin;
			_iter_begin_4610241664:;
			{
				{
					auto __julec_range_expr = _121943_f->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_11054f670_GenericDecl> _110e92bc0_g = *__julec_range_begin;
						_iter_begin_4610244224:;
						{
							if (_110e92bc0_p->_field_ident == _110e92bc0_g->_field_ident) {
								_121953_ok=false;
								(*this)._method_push_err(_110e92bc0_p->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_110e92bc0_p->_field_ident)}));
								(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
								goto _iter_next_4610241664;
							}
						}
						_iter_next_4610244224:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _110e92bc0_g = *__julec_range_begin; goto _iter_begin_4610244224; }
						_iter_end_4610244224:;
					}
				}
				_julec_label_params_lookup:;
				{
					auto __julec_range_expr = _121943_f->_field_params;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _110e92bc0_j = 0;
						jule::Ref<_11072eb20_Param> _110e92bc0_jp = *__julec_range_begin;
						_iter_begin_4610244992:;
						{
							{
								if (!((_110e92bc0_j >= _110e92bc0_i))) { goto _case_end_4610252528; }
								_case_begin_4610252528:;
								{
									goto _iter_end_4610244992;
								}
								goto _match_end_4610252320;
								_case_end_4610252528:;
								if (!((_1106ec050_is_anon_ident(_110e92bc0_p->_field_ident) || _1106ec050_is_anon_ident(_110e92bc0_jp->_field_ident)))) { goto _case_end_4610252656; }
								_case_begin_4610252656:;
								{
									goto _iter_end_4610244992;
								}
								goto _match_end_4610252320;
								_case_end_4610252656:;
								if (!((_110e92bc0_p->_field_ident == _110e92bc0_jp->_field_ident))) { goto _case_end_4610252784; }
								_case_begin_4610252784:;
								{
									_121953_ok=false;
									(*this)._method_push_err(_110e92bc0_p->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_110e92bc0_p->_field_ident)}));
									(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
									goto _iter_next_4610241664;
								}
								goto _match_end_4610252320;
								_case_end_4610252784:;
								_match_end_4610252320:;
							}
						}
						_iter_next_4610244992:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_j; _110e92bc0_jp = *__julec_range_begin; goto _iter_begin_4610244992; }
						_iter_end_4610244992:;
					}
				}
			}
			_iter_next_4610241664:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_i; _110e92bc0_p = *__julec_range_begin; goto _iter_begin_4610241664; }
			_iter_end_4610241664:;
		}
	}
	return _121953_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_fn_decl_result_dup(jule::Ref<_11072eb20_Fn> _125543_f) {
	jule::Bool _125553_ok = jule::Bool();
	_125553_ok=true;
	if (_125543_f->_method_is_void()) {
		return _125553_ok;
	}
	{
		auto __julec_range_expr = _125543_f->_field_result->_field_idents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110e92bc0_i = 0;
			_1106ec050_Token _110e92bc0_v = *__julec_range_begin;
			_iter_begin_4610264448:;
			{
				if (_1106ec050_is_ignore_ident(_110e92bc0_v._field_kind)) {
					goto _iter_next_4610264448;
				}
				{
					auto __julec_range_expr = _125543_f->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_11054f670_GenericDecl> _110e92bc0_g = *__julec_range_begin;
						_iter_begin_4610267952:;
						{
							if (_110e92bc0_v._field_kind == _110e92bc0_g->_field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_4610267952:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _110e92bc0_g = *__julec_range_begin; goto _iter_begin_4610267952; }
						_iter_end_4610267952:;
					}
				}
				{
					auto __julec_range_expr = _125543_f->_field_params;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_11072eb20_Param> _110e92bc0_p = *__julec_range_begin;
						_iter_begin_4610271440:;
						{
							if (_110e92bc0_v._field_kind == _110e92bc0_p->_field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_4610271440:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _110e92bc0_p = *__julec_range_begin; goto _iter_begin_4610271440; }
						_iter_end_4610271440:;
					}
				}
				_julec_label_itself_lookup:;
				{
					auto __julec_range_expr = _125543_f->_field_result->_field_idents;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _110e92bc0_j = 0;
						_1106ec050_Token _110e92bc0_jv = *__julec_range_begin;
						_iter_begin_4610275840:;
						{
							{
								if (!((_110e92bc0_j >= _110e92bc0_i))) { goto _case_end_4610278352; }
								_case_begin_4610278352:;
								{
									goto _iter_end_4610275840;
								}
								goto _match_end_4610278160;
								_case_end_4610278352:;
								if (!((_110e92bc0_jv._field_kind == _110e92bc0_v._field_kind))) { goto _case_end_4610278480; }
								_case_begin_4610278480:;
								{
									goto _julec_label_exist;
								}
								goto _match_end_4610278160;
								_case_end_4610278480:;
								_match_end_4610278160:;
							}
						}
						_iter_next_4610275840:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_j; _110e92bc0_jv = *__julec_range_begin; goto _iter_begin_4610275840; }
						_iter_end_4610275840:;
					}
				}
				goto _iter_next_4610264448;
				_julec_label_exist:;
				(*this)._method_push_err(_110e92bc0_v,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_110e92bc0_v._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
				_125553_ok=false;
			}
			_iter_next_4610264448:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_i; _110e92bc0_v = *__julec_range_begin; goto _iter_begin_4610264448; }
			_iter_end_4610264448:;
		}
	}
	return _125553_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_fn_decl_types(jule::Ref<_11072eb20_Fn> _130443_f) {
	jule::Bool _130453_ok = jule::Bool();
	_130453_ok=true;
	jule::Slice<jule::Ref<_11054f670_GenericDecl>> _130717_generics = _130443_f->_field_generics;
	if (jule::real(_130443_f->_field_owner)) {
		_130717_generics=jule::append(_130717_generics,_130443_f->_field_owner->_field_generics);
	}
	{
		auto __julec_range_expr = _130443_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_Param> _110e92bc0_p = *__julec_range_begin;
			_iter_begin_4610290400:;
			{
				if ((!(_110e92bc0_p->_method_is_self()))) {
					jule::Ref<_1116aff70_TypeKind> _131425_kind = this->self->_method_build_non_generic_type_kind(_110e92bc0_p->_field_kind->_field_decl,_130717_generics);
					_130453_ok=jule::real(_131425_kind) && _130453_ok;
					_110e92bc0_p->_field_kind->_field_kind=_131425_kind;
				}
			}
			_iter_next_4610290400:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_p = *__julec_range_begin; goto _iter_begin_4610290400; }
			_iter_end_4610290400:;
		}
	}
	if ((!(_130443_f->_method_is_void()))) {
		jule::Ref<_1116aff70_TypeKind> _132121_kind = this->self->_method_build_non_generic_type_kind(_130443_f->_field_result->_field_kind->_field_decl,_130717_generics);
		_130453_ok=jule::real(_132121_kind) && _130453_ok;
		_130443_f->_field_result->_field_kind->_field_kind=_132121_kind;
	}
	_130453_ok = _130453_ok;
	return _130453_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_fn_decl_prototype(jule::Ref<_11072eb20_Fn> _133147_f) {
	jule::Bool _133157_ok = jule::Bool();
	{
		if (!(((!(this->self->_method_check_decl_generics(_133147_f->_field_generics)))))) { goto _case_end_4610304976; }
		_case_begin_4610304976:;
		{
			_133157_ok = false;
			return _133157_ok;
		}
		goto _match_end_4610303824;
		_case_end_4610304976:;
		if (!(((!(this->self->_method_check_fn_decl_params_dup(_133147_f)))))) { goto _case_end_4610305088; }
		_case_begin_4610305088:;
		{
			_133157_ok = false;
			return _133157_ok;
		}
		goto _match_end_4610303824;
		_case_end_4610305088:;
		if (!(((!(this->self->_method_check_fn_decl_result_dup(_133147_f)))))) { goto _case_end_4610305200; }
		_case_begin_4610305200:;
		{
			_133157_ok = false;
			return _133157_ok;
		}
		goto _match_end_4610303824;
		_case_end_4610305200:;
		if (!(((!(this->self->_method_check_fn_decl_types(_133147_f)))))) { goto _case_end_4610304272; }
		_case_begin_4610304272:;
		{
			_133157_ok = false;
			return _133157_ok;
		}
		goto _match_end_4610303824;
		_case_end_4610304272:;
		_case_begin_4610303968:;
		{
			_133157_ok = true;
			return _133157_ok;
		}
		goto _match_end_4610303824;
		_case_end_4610303968:;
		_match_end_4610303824:;
	}
}



inline void _110e92bc0_Sema::_method_check_trait_decl_method(jule::Ref<_11072eb20_Fn> _135047_f) {
	if (_1106ec050_is_ignore_ident(_135047_f->_field_ident)) {
		this->self->_method_push_err(_135047_f->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_fn_decl_prototype(_135047_f);
	_135047_f->_field_sema=this->self;
}



inline void _110e92bc0_Sema::_method_check_trait_decl_methods(jule::Ref<_110e3f160_Trait> _135948_t) {
	{
		auto __julec_range_expr = _135948_t->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110e92bc0_i = 0;
			jule::Ref<_11072eb20_Fn> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610318368:;
			{
				this->self->_method_check_trait_decl_method(_110e92bc0_f);
				if (this->self->_field_errors.len() > 0LL) {
					return;
				}
				_julec_label_duplicate_lookup:;
				{
					auto __julec_range_expr = _135948_t->_field_methods;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _110e92bc0_j = 0;
						jule::Ref<_11072eb20_Fn> _110e92bc0_jf = *__julec_range_begin;
						_iter_begin_4610323424:;
						{
							{
								if (!((_110e92bc0_j >= _110e92bc0_i))) { goto _case_end_4610325888; }
								_case_begin_4610325888:;
								{
									goto _iter_end_4610323424;
								}
								goto _match_end_4610325696;
								_case_end_4610325888:;
								if (!((_110e92bc0_f->_field_ident == _110e92bc0_jf->_field_ident))) { goto _case_end_4610326016; }
								_case_begin_4610326016:;
								{
									this->self->_method_push_err(_110e92bc0_f->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_110e92bc0_f->_field_ident)}));
									this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
									goto _iter_end_4610323424;
								}
								goto _match_end_4610325696;
								_case_end_4610326016:;
								_match_end_4610325696:;
							}
						}
						_iter_next_4610323424:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_j; _110e92bc0_jf = *__julec_range_begin; goto _iter_begin_4610323424; }
						_iter_end_4610323424:;
					}
				}
			}
			_iter_next_4610318368:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_i; _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610318368; }
			_iter_end_4610318368:;
		}
	}
}



inline void _110e92bc0_Sema::_method_check_trait_decl(jule::Ref<_110e3f160_Trait> _139040_t) {
	if (_1106ec050_is_ignore_ident(_139040_t->_field_ident)) {
		this->self->_method_push_err(_139040_t->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	} else if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_139040_t).alloc)),_139040_t->_field_ident,false)) {
		this->self->_method_push_err(_139040_t->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_139040_t->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_trait_decl_methods(_139040_t);
}



inline jule::Bool _110e92bc0_Sema::_method_check_trait_decls(void) {
	jule::Bool _140239_ok = jule::Bool();
	jule::Int _140317_i = 0LL;
	_iter_begin_4610344368:;
	if (!(_140317_i < this->self->_field_file->_field_traits._method_len())) { goto _iter_end_4610344368; }
	{
		jule::Ref<_110e3f160_Trait> _140521_t = this->self->_field_file->_field_traits._method_at(_140317_i);
		this->self->_method_check_trait_decl(_140521_t);
		if (this->self->_field_errors.len() > 0LL) {
			_140239_ok = false;
			return _140239_ok;
		}
	}
	_iter_next_4610344368:;
	(_140317_i)++;
	goto _iter_begin_4610344368;
	_iter_end_4610344368:;
	_140239_ok = true;
	return _140239_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_trait_impl_methods(jule::Ref<_110e3f160_Trait> _141647_base,jule::Ref<_110e4c050_Impl> _141661_ipl) {
	jule::Bool _141675_ok = jule::Bool();
	_141675_ok=true;
	{
		auto __julec_range_expr = _141661_ipl->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_Fn> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610354736:;
			{
				if ((!(jule::real(_141647_base->_method_find_method(_110e92bc0_f->_field_ident))))) {
					(*this)._method_push_err(_110e92bc0_f->_field_token,jule::Str("trait @ have not any define in this identifier: @", 49),jule::Slice<jule::Any>({jule::Any(_141647_base->_field_ident),jule::Any(_110e92bc0_f->_field_ident)}));
					_141675_ok=false;
				}
			}
			_iter_next_4610354736:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610354736; }
			_iter_end_4610354736:;
		}
	}
	return _141675_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_impl_to_struct(jule::Ref<_1109372e0_Struct> _142738_dest,jule::Ref<_110e4c050_Impl> _142757_ipl) {
	jule::Bool _142771_ok = jule::Bool();
	_142771_ok=true;
	{
		auto __julec_range_expr = _142757_ipl->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_Fn> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610364624:;
			{
				if (jule::real(_142738_dest->_method_find_method(_110e92bc0_f->_field_ident,_110e92bc0_f->_field_statically)) || jule::real(_142738_dest->_method_find_field(_110e92bc0_f->_field_ident))) {
					this->self->_method_push_err(_110e92bc0_f->_field_token,jule::Str("struct @ already have a define in this identifier: @", 52),jule::Slice<jule::Any>({jule::Any(_142738_dest->_field_ident),jule::Any(_110e92bc0_f->_field_ident)}));
					_142771_ok=false;
					goto _iter_next_4610364624;
				}
				if ((_142738_dest->_field_generics.len() > 0LL) && (_110e92bc0_f->_field_generics.len() > 0LL)) {
					{
						auto __julec_range_expr = _110e92bc0_f->_field_generics;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Ref<_11054f670_GenericDecl> _110e92bc0_fg = *__julec_range_begin;
							_iter_begin_4610372704:;
							{
								{
									auto __julec_range_expr = _142738_dest->_field_generics;
									if (__julec_range_expr.begin() != __julec_range_expr.end()) {
										auto __julec_range_begin = __julec_range_expr.begin();
										const auto __julec_range_end = __julec_range_expr.end();
										jule::Ref<_11054f670_GenericDecl> _110e92bc0_dg = *__julec_range_begin;
										_iter_begin_4610374624:;
										{
											if (_110e92bc0_fg->_field_ident == _110e92bc0_dg->_field_ident) {
												this->self->_method_push_err(_110e92bc0_fg->_field_token,jule::Str("methods cannot have same generic identifier with owner same time", 64),jule::Slice<jule::Any>({}));
												_142771_ok=false;
											}
										}
										_iter_next_4610374624:;
										++__julec_range_begin;
										if (__julec_range_begin != __julec_range_end) { _110e92bc0_dg = *__julec_range_begin; goto _iter_begin_4610374624; }
										_iter_end_4610374624:;
									}
								}
							}
							_iter_next_4610372704:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _110e92bc0_fg = *__julec_range_begin; goto _iter_begin_4610372704; }
							_iter_end_4610372704:;
						}
					}
				}
				_110e92bc0_f->_field_sema=this->self;
				_110e92bc0_f->_field_owner=_142738_dest;
				_142738_dest->_field_methods._method_push(_110e92bc0_f);
			}
			_iter_next_4610364624:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610364624; }
			_iter_end_4610364624:;
		}
	}
	return _142771_ok;
}



inline void _110e92bc0_Sema::_method_impl_trait(jule::Ref<_110e4c050_Impl> _145534_decl) {
	jule::Ref<_110e3f160_Trait> _145617_base = this->self->_method_find_trait(_145534_decl->_field_base._field_kind);
	if ((!(jule::real(_145617_base)))) {
		_145617_base=_1113198e0_find_builtin_trait(_145534_decl->_field_base._field_kind);
	}
	if ((!(jule::real(_145617_base)))) {
		this->self->_method_push_err(_145534_decl->_field_base,jule::Str("any valid base definition is not exist in this identifier: @", 60),jule::Slice<jule::Any>({jule::Any(_145534_decl->_field_base._field_kind)}));
		return;
	}
	
	jule::Ref<_1109372e0_Struct> _146917_dest = this->self->_method_find_struct(_145534_decl->_field_dest._field_kind,false);
	if ((!(jule::real(_146917_dest)))) {
		this->self->_method_push_err(_145534_decl->_field_dest,jule::Str("any valid destination definition is not exist in this identifier: @", 67),jule::Slice<jule::Any>({jule::Any(_145534_decl->_field_dest._field_kind)}));
		return;
	}
	if (_146917_dest->_field_token._field_file->_method_dir() != this->self->_field_file->_field_file->_method_dir()) {
		this->self->_method_push_err(_145534_decl->_field_dest,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>({}));
		return;
	}
	_145617_base->_field_implemented=jule::append(_145617_base->_field_implemented,jule::Slice<jule::Ref<_1109372e0_Struct>>({_146917_dest}));
	_146917_dest->_field_implements=jule::append(_146917_dest->_field_implements,jule::Slice<jule::Ref<_110e3f160_Trait>>({_145617_base}));
	{
		if (!(((!(this->self->_method_check_trait_impl_methods(_145617_base,_145534_decl)))))) { goto _case_end_4610401616; }
		_case_begin_4610401616:;
		{
			return;
		}
		goto _match_end_4610401520;
		_case_end_4610401616:;
		if (!(((!(this->self->_method_impl_to_struct(_146917_dest,_145534_decl)))))) { goto _case_end_4610402624; }
		_case_begin_4610402624:;
		{
			return;
		}
		goto _match_end_4610401520;
		_case_end_4610402624:;
		_match_end_4610401520:;
	}
}



inline void _110e92bc0_Sema::_method_impl_struct(jule::Ref<_110e4c050_Impl> _149235_decl) {
	
	jule::Ref<_1109372e0_Struct> _149717_dest = this->self->_method_find_struct(_149235_decl->_field_dest._field_kind,false);
	if ((!(jule::real(_149717_dest)))) {
		this->self->_method_push_err(_149235_decl->_field_dest,jule::Str("any valid destination definition is not exist in this identifier: @", 67),jule::Slice<jule::Any>({jule::Any(_149235_decl->_field_dest._field_kind)}));
		return;
	}
	if (_149717_dest->_field_token._field_file->_method_dir() != this->self->_field_file->_field_file->_method_dir()) {
		this->self->_method_push_err(_149235_decl->_field_dest,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>({}));
		return;
	}
	{
		if (!(((!(this->self->_method_impl_to_struct(_149717_dest,_149235_decl)))))) { goto _case_end_4610415600; }
		_case_begin_4610415600:;
		{
			return;
		}
		goto _match_end_4610414320;
		_case_end_4610415600:;
		_match_end_4610414320:;
	}
}



inline void _110e92bc0_Sema::_method_impl_impl(jule::Ref<_110e4c050_Impl> _151533_decl) {
	{
		if (!((_151533_decl->_method_is_trait_impl()))) { goto _case_end_4610418672; }
		_case_begin_4610418672:;
		{
			this->self->_method_impl_trait(_151533_decl);
		}
		goto _match_end_4610418480;
		_case_end_4610418672:;
		if (!((_151533_decl->_method_is_struct_impl()))) { goto _case_end_4610418800; }
		_case_begin_4610418800:;
		{
			this->self->_method_impl_struct(_151533_decl);
		}
		goto _match_end_4610418480;
		_case_end_4610418800:;
		_match_end_4610418480:;
	}
}



inline void _110e92bc0_Sema::_method_check_var_decl(jule::Ref<_110e92c80_Var> _152738_decl,jule::Trait<_111732860_Lookup> _152750_l) {
	if (_1106ec050_is_ignore_ident(_152738_decl->_field_ident)) {
		this->self->_method_push_err(_152738_decl->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	}
	if (_152738_decl->_method_is_type_inferred()) {
		if (_152738_decl->_field_statically) {
			this->self->_method_push_err(_152738_decl->_field_token,jule::Str("static variables must be have type annotation", 45),jule::Slice<jule::Any>({}));
		}
		if ((!(_152738_decl->_method_is_initialized()))) {
			this->self->_method_push_err(_152738_decl->_field_token,jule::Str("type inference declarations should have a initializer", 53),jule::Slice<jule::Any>({}));
		}
	} else {
		this->self->_method_check_type(_152738_decl->_field_kind,_152750_l);
	}
	if (_152738_decl->_field_constant && _152738_decl->_field_reference) {
		this->self->_method_push_err(_152738_decl->_field_token,jule::Str("references cannot be constant", 29),jule::Slice<jule::Any>({}));
	}
	if ((!(_152738_decl->_method_is_initialized()))) {
		if (_152738_decl->_field_constant) {
			this->self->_method_push_err(_152738_decl->_field_token,jule::Str("constant variable must have initialize expression", 49),jule::Slice<jule::Any>({}));
		}
		if (_152738_decl->_field_statically) {
			this->self->_method_push_err(_152738_decl->_field_token,jule::Str("static variables must be have initialize expression", 51),jule::Slice<jule::Any>({}));
		}
		if (_152738_decl->_field_reference) {
			this->self->_method_push_err(_152738_decl->_field_token,jule::Str("reference variables must be have lvalue initialize expression", 61),jule::Slice<jule::Any>({}));
		}
	}
}



inline void _110e92bc0_Sema::_method_check_global_var_decl(jule::Ref<_110e92c80_Var> _156445_decl) {
	if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_156445_decl).alloc)),_156445_decl->_field_ident,_156445_decl->_field_cpp_linked)) {
		this->self->_method_push_err(_156445_decl->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_156445_decl->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	if (_156445_decl->_field_cpp_linked && _156445_decl->_field_constant) {
		this->self->_method_push_err(_156445_decl->_field_token,jule::Str("cpp linked variables cannot constant", 36),jule::Slice<jule::Any>({}));
	}
	if (((!(_156445_decl->_field_cpp_linked)) && (!(_156445_decl->_field_constant))) && (!(_156445_decl->_field_statically))) {
		this->self->_method_push_err(_156445_decl->_field_token,jule::Str("global variables must be static", 31),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("use \"static\" keyword to define", 30),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_var_decl(_156445_decl,this->self);
}



inline jule::Bool _110e92bc0_Sema::_method_check_global_decls(void) {
	jule::Bool _158140_ok = jule::Bool();
	jule::Int _158217_i = 0LL;
	_iter_begin_4610460352:;
	if (!(_158217_i < this->self->_field_file->_field_vars._method_len())) { goto _iter_end_4610460352; }
	{
		jule::Ref<_110e92c80_Var> _158421_decl = this->self->_field_file->_field_vars._method_at(_158217_i);
		this->self->_method_check_global_var_decl(_158421_decl);
		if (this->self->_field_errors.len() > 0LL) {
			_158140_ok = false;
			return _158140_ok;
		}
	}
	_iter_next_4610460352:;
	(_158217_i)++;
	goto _iter_begin_4610460352;
	_iter_end_4610460352:;
	_158140_ok = true;
	return _158140_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_struct_trait_impl(jule::Ref<_1109372e0_Struct> _159547_strct,jule::Ref<_110e3f160_Trait> _159567_trt) {
	jule::Bool _159582_ok = jule::Bool();
	{
		auto __julec_range_expr = _159567_trt->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_Fn> _110e92bc0_tf = *__julec_range_begin;
			_iter_begin_4610470912:;
			{
				jule::Bool _159721_exist = false;
				jule::Ref<_11072eb20_Fn> _159821_sf = _159547_strct->_method_find_method(_110e92bc0_tf->_field_ident,_110e92bc0_tf->_field_statically);
				jule::Ref<_11072eb20_FnIns> _159917_tf_k = this->self->_method_get_trait_check_fn_kind(_110e92bc0_tf);
				if (jule::real(_159821_sf)) {
					jule::Ref<_11072eb20_FnIns> _160121_sf_k = this->self->_method_get_trait_check_fn_kind(_159821_sf);
					_159721_exist=((_159917_tf_k->_field_decl->_field_public == _160121_sf_k->_field_decl->_field_public) && (_159917_tf_k->_field_decl->_field_ident == _160121_sf_k->_field_decl->_field_ident)) && _159917_tf_k->_method_equals(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_160121_sf_k)));
				}
				if ((!(_159721_exist))) {
					
					jule::Str _161025_s = _159917_tf_k->_method_get_kind_str(true);
					if (_110e92bc0_tf->_field_public) {
						_161025_s=jule::Str("pub ", 4) + _161025_s;
					}
					this->self->_method_push_err(_159547_strct->_field_token,jule::Str("trait @ derived but not implemented trait's \"@\" define", 54),jule::Slice<jule::Any>({jule::Any(_159567_trt->_field_ident),jule::Any(_161025_s)}));
					_159582_ok=false;
				}
			}
			_iter_next_4610470912:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_tf = *__julec_range_begin; goto _iter_begin_4610470912; }
			_iter_end_4610470912:;
		}
	}
	return _159582_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_struct_impls(jule::Ref<_1109372e0_Struct> _162142_strct) {
	jule::Bool _162160_ok = jule::Bool();
	_162160_ok=true;
	{
		auto __julec_range_expr = _162142_strct->_field_implements;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e3f160_Trait> _110e92bc0_trt = *__julec_range_begin;
			_iter_begin_4610490416:;
			{
				_162160_ok=this->self->_method_check_struct_trait_impl(_162142_strct,_110e92bc0_trt) && _162160_ok;
			}
			_iter_next_4610490416:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_trt = *__julec_range_begin; goto _iter_begin_4610490416; }
			_iter_end_4610490416:;
		}
	}
	_162160_ok = _162160_ok;
	return _162160_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_struct_fields(jule::Ref<_1109372e0_Struct> _162943_st) {
	jule::Bool _162958_ok = jule::Bool();
	_162958_ok=true;
	jule::Ref<_1116aff70_TypeChecker> _163217_tc = jule::new_struct<_1116aff70_TypeChecker>(new( std::nothrow ) _1116aff70_TypeChecker(this->self,this->self,jule::new_struct<_1116aff70_Referencer>(new( std::nothrow ) _1116aff70_Referencer(_162943_st->_field_ident,jule::Any(_162943_st),nullptr)),_1106ec050_Token(),_162943_st->_field_generics,jule::Slice<jule::Ref<_1116aff70_TypeAlias>>(),jule::Bool()));
	jule::I64 _164213_n = _162943_st->_field_instances.len();
	{
		auto __julec_range_expr = _162943_st->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_Field> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610500768:;
			{
				_110e92bc0_f->_field_owner=_162943_st;
				_110e92bc0_f->_field_kind->_field_kind=_163217_tc->_method_check_decl(_110e92bc0_f->_field_kind->_field_decl);
				_162958_ok=jule::real(_110e92bc0_f->_field_kind->_field_kind) && _162958_ok;
				{
					auto __julec_range_expr = _162943_st->_field_fields;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1109372e0_Field> _110e92bc0_cf = *__julec_range_begin;
						_iter_begin_4610505600:;
						{
							if (_110e92bc0_f == _110e92bc0_cf) {
								goto _iter_end_4610505600;
							} else if (_110e92bc0_f->_field_ident == _110e92bc0_cf->_field_ident) {
								this->self->_method_push_err(_110e92bc0_f->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_110e92bc0_f->_field_ident)}));
								this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
								_162958_ok=false;
							}
						}
						_iter_next_4610505600:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _110e92bc0_cf = *__julec_range_begin; goto _iter_begin_4610505600; }
						_iter_end_4610505600:;
					}
				}
			}
			_iter_next_4610500768:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610500768; }
			_iter_end_4610500768:;
		}
	}
	if (_162958_ok && (_164213_n != _162943_st->_field_instances.len())) {
		jule::drop(_163217_tc->_field_referencer);
		_162943_st->_field_instances=_162943_st->_field_instances.slice(0LL,static_cast<jule::Int>(_164213_n));
		{
			auto __julec_range_expr = _162943_st->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1109372e0_Field> _110e92bc0_f = *__julec_range_begin;
				_iter_begin_4610512768:;
				{
					_110e92bc0_f->_field_kind->_field_kind=_163217_tc->_method_check_decl(_110e92bc0_f->_field_kind->_field_decl);
				}
				_iter_next_4610512768:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610512768; }
				_iter_end_4610512768:;
			}
		}
	}
	_162958_ok = _162958_ok;
	return _162958_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_struct_decl_methods(jule::Ref<_1109372e0_Struct> _167149_strct) {
	jule::Bool _167167_ok = jule::Bool();
	jule::Int _167217_i = 0LL;
	_iter_begin_4610519616:;
	if (!(_167217_i < _167149_strct->_field_methods._method_len())) { goto _iter_end_4610519616; }
	{
		if ((!(this->self->_method_check_fn_decl_types(_167149_strct->_field_methods._method_at(_167217_i))))) {
			_167167_ok = false;
			return _167167_ok;
		}
	}
	_iter_next_4610519616:;
	(_167217_i)++;
	goto _iter_begin_4610519616;
	_iter_end_4610519616:;
	_167167_ok = true;
	return _167167_ok;
}



inline void _110e92bc0_Sema::_method_check_struct_decl(jule::Ref<_1109372e0_Struct> _168141_strct) {
	if (_1106ec050_is_ignore_ident(_168141_strct->_field_ident)) {
		this->self->_method_push_err(_168141_strct->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	} else if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_168141_strct).alloc)),_168141_strct->_field_ident,_168141_strct->_field_cpp_linked)) {
		this->self->_method_push_err(_168141_strct->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_168141_strct->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	_168141_strct->_field_sema=this->self;
	{
		if (!(((!(this->self->_method_check_decl_generics(_168141_strct->_field_generics)))))) { goto _case_end_4610533856; }
		_case_begin_4610533856:;
		{
			return;
		}
		goto _match_end_4610533568;
		_case_end_4610533856:;
		if (!(((!(this->self->_method_check_struct_fields(_168141_strct)))))) { goto _case_end_4610533968; }
		_case_begin_4610533968:;
		{
			return;
		}
		goto _match_end_4610533568;
		_case_end_4610533968:;
		if (!(((!(this->self->_method_check_struct_decl_methods(_168141_strct)))))) { goto _case_end_4610534160; }
		_case_begin_4610534160:;
		{
			return;
		}
		goto _match_end_4610533568;
		_case_end_4610534160:;
		if (!(((!(this->self->_method_check_struct_impls(_168141_strct)))))) { goto _case_end_4610534272; }
		_case_begin_4610534272:;
		{
			return;
		}
		goto _match_end_4610533568;
		_case_end_4610534272:;
		_match_end_4610533568:;
	}
}



inline jule::Bool _110e92bc0_Sema::_method_check_struct_decls(void) {
	jule::Bool _169940_ok = jule::Bool();
	jule::Int _170017_i = 0LL;
	_iter_begin_4610541536:;
	if (!(_170017_i < this->self->_field_file->_field_structs._method_len())) { goto _iter_end_4610541536; }
	{
		jule::Ref<_1109372e0_Struct> _170221_strct = this->self->_field_file->_field_structs._method_at(_170017_i);
		this->self->_method_check_struct_decl(_170221_strct);
		if (this->self->_field_errors.len() > 0LL) {
			_169940_ok = false;
			return _169940_ok;
		}
	}
	_iter_next_4610541536:;
	(_170017_i)++;
	goto _iter_begin_4610541536;
	_iter_end_4610541536:;
	_169940_ok = true;
	return _169940_ok;
}



inline void _110e92bc0_Sema::_method_check_fn_decl(jule::Ref<_11072eb20_Fn> _171437_f) {
	if (_1106ec050_is_ignore_ident(_171437_f->_field_ident)) {
		this->self->_method_push_err(_171437_f->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	} else if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_171437_f).alloc)),_171437_f->_field_ident,_171437_f->_field_cpp_linked)) {
		this->self->_method_push_err(_171437_f->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_171437_f->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	_171437_f->_field_sema=this->self;
	this->self->_method_check_fn_decl_prototype(_171437_f);
}



inline jule::Bool _110e92bc0_Sema::_method_check_fn_decls(void) {
	jule::Bool _172736_ok = jule::Bool();
	jule::Int _172817_i = 0LL;
	_iter_begin_4610560864:;
	if (!(_172817_i < this->self->_field_file->_field_funcs._method_len())) { goto _iter_end_4610560864; }
	{
		jule::Ref<_11072eb20_Fn> _173021_f = this->self->_field_file->_field_funcs._method_at(_172817_i);
		this->self->_method_check_fn_decl(_173021_f);
		if (this->self->_field_errors.len() > 0LL) {
			_172736_ok = false;
			return _172736_ok;
		}
	}
	_iter_next_4610560864:;
	(_172817_i)++;
	goto _iter_begin_4610560864;
	_iter_end_4610560864:;
	_172736_ok = true;
	return _172736_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_directive_pass(_110d9ce90_Pass _174139_pass) {
	jule::Bool _174153_ok = jule::Bool();
	if (_174139_pass._field_text == jule::Str("", 0)) {
		_174153_ok = true;
		return _174153_ok;
	}
	if (_174139_pass._field_text[0LL] != '-') {
		(*this)._method_push_err(_174139_pass._field_token,jule::Str("the pass directive must be start with dash", 42),jule::Slice<jule::Any>({}));
		_174153_ok = false;
		return _174153_ok;
	}
	_174153_ok = true;
	return _174153_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_passes(void) {
	jule::Bool _175433_ok = jule::Bool();
	_175433_ok=true;
	jule::Int _175617_i = 0LL;
	_iter_begin_4610576720:;
	if (!(_175617_i < (*this)._field_file->_field_passes._method_len())) { goto _iter_end_4610576720; }
	{
		_110d9ce90_Pass _175817_pass = (*this)._field_file->_field_passes._method_at(_175617_i);
		_175433_ok=(*this)._method_check_directive_pass(_175817_pass) && _175433_ok;
	}
	_iter_next_4610576720:;
	(_175617_i)++;
	goto _iter_begin_4610576720;
	_iter_end_4610576720:;
	return _175433_ok;
}



inline void _110e92bc0_Sema::_method_push_cycle_error(jule::Ref<_1109372e0_Struct> _176431_st1,jule::Ref<_1109372e0_Struct> _176445_st2,jule::Str& _176464_message) {
	
	jule::Str _176713_refers_to = _127e05da0_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_176431_st1->_field_ident),jule::Any(_176445_st2->_field_ident)}));
	_176464_message=((_110d9ce90_str_repeat(jule::Str(" ", 1),4LL) + _176713_refers_to) + jule::Str("\n", 1)) + _176464_message;
}



inline jule::Bool _110e92bc0_Sema::_method_check_cross_cycle(jule::Ref<_1109372e0_Struct> _177132_st1,jule::Ref<_1109372e0_Struct> _177146_st2,jule::Str& _177165_message) {
	{
		auto __julec_range_expr = _177146_st2->_field_uses;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_Struct> _110e92bc0_u = *__julec_range_begin;
			_iter_begin_4610610544:;
			{
				if ((_110e92bc0_u).alloc == (_177132_st1).alloc) {
					(*this)._method_push_cycle_error(_177146_st2,_110e92bc0_u,_177165_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_177132_st1,_110e92bc0_u,_177165_message)))) {
					(*this)._method_push_cycle_error(_177146_st2,_110e92bc0_u,_177165_message);
					return false;
				}
			}
			_iter_next_4610610544:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_u = *__julec_range_begin; goto _iter_begin_4610610544; }
			_iter_end_4610610544:;
		}
	}
	return true;
}



inline jule::Bool _110e92bc0_Sema::_method_check_struct_derive_illegal_cycles(jule::Str _178753_derive,jule::Ref<_1109372e0_Struct> _178766_st1,jule::Ref<_1116aff70_TypeKind> _178784_k) {
	jule::Bool _1787100_ok = jule::Bool();
	jule::Ref<_1109372e0_Struct> _178817_st2 = _1116aff70_get_struct_from_kind(_178784_k);
	if ((!(jule::real(_178817_st2)))) {
		_1787100_ok = true;
		return _1787100_ok;
	}
	if ((_178766_st1).alloc == (_178817_st2).alloc) {
		(*this)._method_push_err(_178766_st1->_field_token,jule::Str("illegal cycle for \"@\" derive, struct \"@\" refers to itself", 57),jule::Slice<jule::Any>({jule::Any(_178753_derive),jule::Any(_178766_st1->_field_ident)}));
		_1787100_ok = false;
		return _1787100_ok;
	}
	jule::Str _180017_message = jule::Str("", 0);
	if ((!((*this)._method_check_cross_cycle(_178766_st1,_178817_st2,_180017_message)))) {
		jule::Str _180321_err_msg = _180017_message;
		_180017_message=jule::Str("", 0);
		(*this)._method_push_cycle_error(_178766_st1,_178817_st2,_180017_message);
		_180321_err_msg=_180321_err_msg + _180017_message;
		(*this)._method_push_err(_178766_st1->_field_token,jule::Str("illegal cross cycle for \"@\" derive;\n@", 37),jule::Slice<jule::Any>({jule::Any(_178753_derive),jule::Any(_180321_err_msg)}));
		_1787100_ok = false;
		return _1787100_ok;
	}
	_1787100_ok = true;
	return _1787100_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_struct_ins_derive_clone(jule::Ref<_1109372e0_StructIns> _181452_st) {
	jule::Bool _181470_ok = jule::Bool();
	if ((!(_181452_st->_field_decl->_method_is_derives(jule::Str("Clone", 5))))) {
		_181470_ok = true;
		return _181470_ok;
	}
	{
		auto __julec_range_expr = _181452_st->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_FieldIns> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610635600:;
			{
				if ((!(jule::real(_110e92bc0_f->_field_kind))) || (!(_1116aff70_is_mut(_110e92bc0_f->_field_kind)))) {
					goto _iter_next_4610635600;
				}
				if ((!(_1116aff70_supports_cloning(_110e92bc0_f->_field_kind)))) {
					(*this)._method_push_err(_181452_st->_field_decl->_field_token,jule::Str("type \"@\" is not compatible to derive \"@\"", 40),jule::Slice<jule::Any>({jule::Any(_110e92bc0_f->_field_kind->_method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					_181470_ok = false;
					return _181470_ok;
				}
				if ((!((*this)._method_check_struct_derive_illegal_cycles(jule::Str("Clone", 5),_181452_st->_field_decl,_110e92bc0_f->_field_kind)))) {
					_181470_ok = false;
					return _181470_ok;
				}
			}
			_iter_next_4610635600:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610635600; }
			_iter_end_4610635600:;
		}
	}
	_181470_ok = true;
	return _181470_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_struct_derive_clone(jule::Ref<_1109372e0_Struct> _183748_st) {
	jule::Bool _183763_ok = jule::Bool();
	_183763_ok = (*this)._method_check_struct_ins_derive_clone(_183748_st->_method_instance());
	return _183763_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_file_derives(void) {
	jule::Bool _184139_ok = jule::Bool();
	jule::Int _184317_i = 0LL;
	_iter_begin_4610654624:;
	if (!(_184317_i < (*this)._field_file->_field_structs._method_len())) { goto _iter_end_4610654624; }
	{
		jule::Ref<_1109372e0_Struct> _184521_st = (*this)._field_file->_field_structs._method_at(_184317_i);
		jule::Bool _184617_ok = (*this)._method_check_struct_derive_clone(_184521_st);
		if ((!(_184617_ok))) {
			_184139_ok = false;
			return _184139_ok;
		}
	}
	_iter_next_4610654624:;
	(_184317_i)++;
	goto _iter_begin_4610654624;
	_iter_end_4610654624:;
	_184139_ok = true;
	return _184139_ok;
}



inline void _110e92bc0_Sema::_method_check_package_derives(void) {
	{
		auto __julec_range_expr = (*this)._field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610661760:;
			{
				(*this)._method_set_current_file(_110e92bc0_f);
				jule::Bool _185817_ok = (*this)._method_check_file_derives();
				if ((!(_185817_ok))) {
					return;
				}
			}
			_iter_next_4610661760:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610661760; }
			_iter_end_4610661760:;
		}
	}
}



inline void _110e92bc0_Sema::_method_check_package_decls(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610667072:;
			{
				this->self->_method_set_current_file(_110e92bc0_f);
				if ((!(this->self->_method_check_passes()))) {
					return;
				}
			}
			_iter_next_4610667072:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610667072; }
			_iter_end_4610667072:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610667936:;
			{
				this->self->_method_set_current_file(_110e92bc0_f);
				if ((!(this->self->_method_check_type_alias_decls()))) {
					return;
				}
			}
			_iter_next_4610667936:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610667936; }
			_iter_end_4610667936:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610671056:;
			{
				this->self->_method_set_current_file(_110e92bc0_f);
				if ((!(this->self->_method_check_trait_decls()))) {
					return;
				}
			}
			_iter_next_4610671056:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610671056; }
			_iter_end_4610671056:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610674160:;
			{
				this->self->_method_set_current_file(_110e92bc0_f);
				if ((!(this->self->_method_check_global_decls()))) {
					return;
				}
			}
			_iter_next_4610674160:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610674160; }
			_iter_end_4610674160:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610677328:;
			{
				this->self->_method_set_current_file(_110e92bc0_f);
				if ((!(this->self->_method_check_fn_decls()))) {
					return;
				}
			}
			_iter_next_4610677328:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610677328; }
			_iter_end_4610677328:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610680304:;
			{
				this->self->_method_set_current_file(_110e92bc0_f);
				if ((!(this->self->_method_check_struct_decls()))) {
					return;
				}
			}
			_iter_next_4610680304:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610680304; }
			_iter_end_4610680304:;
		}
	}
	this->self->_method_check_package_derives();
}



inline void _110e92bc0_Sema::_method_check_data_for_type_inference(jule::Ref<_1112d7f10_Data> _191348_d,_1106ec050_Token _191358_err_token) {
	{
		if (!((_191348_d->_method_is_nil()))) { goto _case_end_4610689536; }
		_case_begin_4610689536:;
		{
			(*this)._method_push_err(_191358_err_token,jule::Str("nil is cannot use with type inferred definitions", 48),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4610689312;
		_case_end_4610689536:;
		if (!((_191348_d->_method_is_void()))) { goto _case_end_4610689664; }
		_case_begin_4610689664:;
		{
			(*this)._method_push_err(_191358_err_token,jule::Str("void data is cannot use for type inferred definitions", 53),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4610689312;
		_case_end_4610689664:;
		if (!((_191348_d->_field_kind->_field_variadic))) { goto _case_end_4610689792; }
		_case_begin_4610689792:;
		{
			(*this)._method_push_err(_191358_err_token,jule::Str("invalid expression for type inference", 37),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4610689312;
		_case_end_4610689792:;
		_match_end_4610689312:;
	}
}



inline void _110e92bc0_Sema::_method_check_var(jule::Ref<_110e92c80_Var> _192633_v) {
	if (_192633_v->_field_cpp_linked) {
		return;
	}
	if (_192633_v->_method_is_type_inferred()) {
		_192633_v->_field_kind=jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),_192633_v->_field_value->_field_data->_field_kind));
		this->self->_method_check_data_for_type_inference(_192633_v->_field_value->_field_data,_192633_v->_field_value->_field_expr->_field_token);
	} else {
		jule::Ref<_1116aff70_Arr> _193821_arr = _192633_v->_field_kind->_field_kind->_method_arr();
		if (jule::real(_193821_arr)) {
			if (_193821_arr->_field_auto) {
				jule::Ref<_1116aff70_Arr> _194125_data_arr = _192633_v->_field_value->_field_data->_field_kind->_method_arr();
				if (jule::real(_194125_data_arr)) {
					_193821_arr->_field_n=_194125_data_arr->_field_n;
				}
			}
		}
		this->self->_method_check_assign_type(_192633_v->_field_kind->_field_kind,_192633_v->_field_value->_field_data,_192633_v->_field_value->_field_expr->_field_token,false);
	}
	this->self->_method_check_validity_for_init_expr(_192633_v->_field_mutable,_192633_v->_field_reference,_192633_v->_field_kind->_field_kind,_192633_v->_field_value->_field_data,_192633_v->_field_value->_field_expr->_field_token);
	if ((!(_192633_v->_field_constant))) {
		jule::drop(_192633_v->_field_value->_field_data->_field_constant);
	}
	if (jule::real(_192633_v->_field_kind->_field_kind->_method_tup())) {
		jule::drop(_192633_v->_field_kind->_field_kind);
	}
}



inline void _110e92bc0_Sema::_method_check_type_var(jule::Ref<_110e92c80_Var> _196938_decl,jule::Trait<_111732860_Lookup> _196950_l) {
	if (_196938_decl->_field_cpp_linked || (!(_196938_decl->_method_is_initialized()))) {
		return;
	}
	if (jule::real(_196938_decl->_field_kind)) {
		_196938_decl->_field_value->_field_data=this->self->_method_evalpd(_196938_decl->_field_value->_field_expr,_196950_l,_196938_decl->_field_kind->_field_kind,_196938_decl);
	} else {
		_196938_decl->_field_value->_field_data=this->self->_method_evalpd(_196938_decl->_field_value->_field_expr,_196950_l,jule::new_ref<_1116aff70_TypeKind>(),_196938_decl);
	}
	if ((!(jule::real(_196938_decl->_field_value->_field_data)))) {
		return;
	}
	this->self->_method_check_var(_196938_decl);
}



inline void _110e92bc0_Sema::_method_check_global_types(void) {
	jule::Int _199017_i = 0LL;
	_iter_begin_4610729632:;
	if (!(_199017_i < this->self->_field_file->_field_vars._method_len())) { goto _iter_end_4610729632; }
	{
		jule::Ref<_110e92c80_Var> _199221_decl = this->self->_field_file->_field_vars._method_at(_199017_i);
		this->self->_method_check_type_var(_199221_decl,this->self);
	}
	_iter_next_4610729632:;
	(_199017_i)++;
	goto _iter_begin_4610729632;
	_iter_end_4610729632:;
	_199017_i=0LL;
	_iter_begin_4610733904:;
	if (!(_199017_i < this->self->_field_file->_field_vars._method_len())) { goto _iter_end_4610733904; }
	{
		jule::Ref<_110e92c80_Var> _199921_decl = this->self->_field_file->_field_vars._method_at(_199017_i);
		if (_199921_decl->_method_is_initialized() && (_199921_decl->_field_depends.len() > 0LL)) {
			this->self->_method_check_type_var(_199921_decl,this->self);
		}
	}
	_iter_next_4610733904:;
	(_199017_i)++;
	goto _iter_begin_4610733904;
	_iter_end_4610733904:;
}



inline void _110e92bc0_Sema::_method_check_type_method(jule::Ref<_1109372e0_StructIns> _200641_strct,jule::Ref<_11072eb20_Fn> _200664_f) {
	if (_200664_f->_field_cpp_linked) {
		return;
	}
	if (_200664_f->_field_generics.len() > 0LL) {
		return;
	}
	if (_200664_f->_field_instances.len() == 0LL) {
		jule::Ref<_11072eb20_FnIns> _201721_ins = _200664_f->_method_instance();
		_201721_ins->_field_owner=_200641_strct;
		_200664_f->_method_append_instance(_201721_ins);
		this->self->_method_reload_fn_ins_types(_201721_ins);
		_201721_ins->_field_reloaded=true;
	}
	{
		auto __julec_range_expr = _200664_f->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_FnIns> _110e92bc0_ins = *__julec_range_begin;
			_iter_begin_4610745488:;
			{
				if (_110e92bc0_ins->_field_scope->_field_stmts._method_len() > 0LL) {
					goto _iter_next_4610745488;
				}
				this->self->_method_check_fn_ins(_110e92bc0_ins);
			}
			_iter_next_4610745488:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_ins = *__julec_range_begin; goto _iter_begin_4610745488; }
			_iter_end_4610745488:;
		}
	}
}



inline void _110e92bc0_Sema::_method_check_type_struct(jule::Ref<_1109372e0_Struct> _203341_strct) {
	if (_203341_strct->_field_cpp_linked) {
		return;
	}
	if ((_203341_strct->_field_generics.len() == 0LL) && (_203341_strct->_field_instances.len() == 0LL)) {
		jule::Ref<_1109372e0_StructIns> _203921_ins = _203341_strct->_method_instance();
		_203921_ins->_field_checked=true;
		_203341_strct->_method_append_instance(_203921_ins);
	}
	{
		auto __julec_range_expr = _203341_strct->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_StructIns> _110e92bc0_ins = *__julec_range_begin;
			_iter_begin_4610763168:;
			{
				{
					auto __julec_range_expr = _110e92bc0_ins->_field_methods;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_11072eb20_Fn> _110e92bc0_f = *__julec_range_begin;
						_iter_begin_4610765280:;
						{
							this->self->_method_check_type_method(_110e92bc0_ins,_110e92bc0_f);
						}
						_iter_next_4610765280:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610765280; }
						_iter_end_4610765280:;
					}
				}
			}
			_iter_next_4610763168:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_ins = *__julec_range_begin; goto _iter_begin_4610763168; }
			_iter_end_4610763168:;
		}
	}
}



inline void _110e92bc0_Sema::_method_check_struct_types(void) {
	jule::Int _205217_i = 0LL;
	_iter_begin_4610768080:;
	if (!(_205217_i < this->self->_field_file->_field_structs._method_len())) { goto _iter_end_4610768080; }
	{
		jule::Ref<_1109372e0_Struct> _205421_strct = this->self->_field_file->_field_structs._method_at(_205217_i);
		this->self->_method_check_type_struct(_205421_strct);
	}
	_iter_next_4610768080:;
	(_205217_i)++;
	goto _iter_begin_4610768080;
	_iter_end_4610768080:;
}



inline void _110e92bc0_Sema::_method_check_rets(jule::Ref<_11072eb20_FnIns> _205933_f) {
	if (_205933_f->_field_decl->_method_is_void()) {
		return;
	}
	jule::Bool _206413_ok = _110e92bc0_has_ret(_205933_f->_field_scope);
	if ((!(_206413_ok))) {
		(*this)._method_push_err(_205933_f->_field_decl->_field_token,jule::Str("missing return at end of function", 33),jule::Slice<jule::Any>({}));
	}
}



inline void _110e92bc0_Sema::_method_check_fn_ins_sc(jule::Ref<_11072eb20_FnIns> _207038_f,jule::Ref<_110af2660_ScopeChecker> _207053_sc) {
	if (_207038_f->_field_decl->_field_cpp_linked) {
		return;
	}
	jule::Slice<jule::Ref<_110e92c80_Var>> _207517_vars = _110e92bc0_build_ret_vars(_207038_f);
	_207053_sc->_field_table->_field_vars._method_append(_207517_vars);
	_207053_sc->_field_table->_field_vars._method_append(_110e92bc0_build_param_vars(_207038_f));
	_207053_sc->_field_table->_field_type_aliases._method_append(_110e92bc0_build_generic_type_aliases(_207038_f));
	_207053_sc->_method_check(_207038_f->_field_decl->_field_scope,_207038_f->_field_scope);
	if (_207517_vars.len() > 0LL) {
		{
			auto __julec_range_expr = _207517_vars;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_110e92c80_Var> _110e92bc0_v = *__julec_range_begin;
				_iter_begin_4610791904:;
				{
					_207038_f->_field_scope->_field_stmts._method_push_front(jule::Any(_110e92bc0_v));
				}
				_iter_next_4610791904:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _110e92bc0_v = *__julec_range_begin; goto _iter_begin_4610791904; }
				_iter_end_4610791904:;
			}
		}
	}
	(*this)._method_check_rets(_207038_f);
}



inline void _110e92bc0_Sema::_method_check_fn_ins(jule::Ref<_11072eb20_FnIns> _209335_f) {
	if (_209335_f->_field_decl->_field_cpp_linked) {
		return;
	}
	jule::Ref<_1111c15d0_SymbolTable> _209817_old = _209335_f->_field_decl->_field_sema->_field_file;
	__JULE_DEFER({
		_209335_f->_field_decl->_field_sema->_method_set_current_file(_209817_old);
	});
	jule::Ref<_1111c15d0_SymbolTable> _210017_file = _110e92bc0_find_file(_209335_f->_field_decl->_field_sema->_field_files,_209335_f->_field_decl->_field_token._field_file);
	if (jule::real(_210017_file)) {
		_209335_f->_field_decl->_field_sema->_method_set_current_file(_210017_file);
	}
	jule::Ref<_110af2660_ScopeChecker> _210517_sc = _110af2660_new_scope_checker(_209335_f->_field_decl->_field_sema,_209335_f);
	(*this)._method_check_fn_ins_sc(_209335_f,_210517_sc);
	if ((_209335_f->_field_decl->_field_sema).alloc != (&((*this)))) {
		(*this)._field_errors=jule::append((*this)._field_errors,_209335_f->_field_decl->_field_sema->_field_errors);
	}
}



inline void _110e92bc0_Sema::_method_check_type_fn(jule::Ref<_11072eb20_Fn> _211337_f) {
	if (_211337_f->_field_cpp_linked) {
		return;
	}
	if (_211337_f->_field_generics.len() > 0LL) {
		return;
	}
	{
		auto __julec_range_expr = _211337_f->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_FnIns> _110e92bc0_ins = *__julec_range_begin;
			_iter_begin_4610813376:;
			{
				this->self->_method_check_fn_ins(_110e92bc0_ins);
			}
			_iter_next_4610813376:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_ins = *__julec_range_begin; goto _iter_begin_4610813376; }
			_iter_end_4610813376:;
		}
	}
}



inline void _110e92bc0_Sema::_method_precheck_type_fn(jule::Ref<_11072eb20_Fn> _212840_f) {
	if (_212840_f->_field_cpp_linked) {
		return;
	}
	if (_212840_f->_field_generics.len() > 0LL) {
		return;
	}
	if (_212840_f->_field_instances.len() == 0LL) {
		jule::Ref<_11072eb20_FnIns> _213921_ins = _212840_f->_method_instance();
		_212840_f->_field_instances=jule::append(_212840_f->_field_instances,jule::Slice<jule::Ref<_11072eb20_FnIns>>({_213921_ins}));
		this->self->_method_reload_fn_ins_types(_213921_ins);
		_213921_ins->_field_reloaded=true;
	}
}



inline jule::Bool _110e92bc0_Sema::_method_precheck_fn_types(void) {
	jule::Bool _214739_ok = jule::Bool();
	jule::Int _214817_i = 0LL;
	_iter_begin_4610827680:;
	if (!(_214817_i < this->self->_field_file->_field_funcs._method_len())) { goto _iter_end_4610827680; }
	{
		jule::Ref<_11072eb20_Fn> _215021_decl = this->self->_field_file->_field_funcs._method_at(_214817_i);
		this->self->_method_precheck_type_fn(_215021_decl);
	}
	_iter_next_4610827680:;
	(_214817_i)++;
	goto _iter_begin_4610827680;
	_iter_end_4610827680:;
	_214739_ok = true;
	return _214739_ok;
}



inline jule::Bool _110e92bc0_Sema::_method_check_fn_types(void) {
	jule::Bool _215836_ok = jule::Bool();
	jule::Int _215917_i = 0LL;
	_iter_begin_4610835120:;
	if (!(_215917_i < this->self->_field_file->_field_funcs._method_len())) { goto _iter_end_4610835120; }
	{
		jule::Ref<_11072eb20_Fn> _216121_decl = this->self->_field_file->_field_funcs._method_at(_215917_i);
		this->self->_method_check_type_fn(_216121_decl);
	}
	_iter_next_4610835120:;
	(_215917_i)++;
	goto _iter_begin_4610835120;
	_iter_end_4610835120:;
	_215836_ok = true;
	return _215836_ok;
}



inline void _110e92bc0_Sema::_method_check_package_types(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610841264:;
			{
				this->self->_method_set_current_file(_110e92bc0_f);
				this->self->_method_check_global_types();
			}
			_iter_next_4610841264:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610841264; }
			_iter_end_4610841264:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610842336:;
			{
				this->self->_method_set_current_file(_110e92bc0_f);
				this->self->_method_precheck_fn_types();
			}
			_iter_next_4610842336:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610842336; }
			_iter_end_4610842336:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610845264:;
			{
				this->self->_method_set_current_file(_110e92bc0_f);
				this->self->_method_check_fn_types();
			}
			_iter_next_4610845264:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610845264; }
			_iter_end_4610845264:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_f = *__julec_range_begin;
			_iter_begin_4610847952:;
			{
				this->self->_method_set_current_file(_110e92bc0_f);
				this->self->_method_check_struct_types();
			}
			_iter_next_4610847952:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_f = *__julec_range_begin; goto _iter_begin_4610847952; }
			_iter_end_4610847952:;
		}
	}
}



inline void _110e92bc0_Sema::_method_set_file_sema_fields(void) {
	jule::Int _219317_i = 0LL;
	_iter_begin_4610853632:;
	if (!(_219317_i < this->self->_field_file->_field_funcs._method_len())) { goto _iter_end_4610853632; }
	{
		jule::Ref<_11072eb20_Fn> _219521_f = this->self->_field_file->_field_funcs._method_at(_219317_i);
		_219521_f->_field_sema=this->self;
	}
	_iter_next_4610853632:;
	(_219317_i)++;
	goto _iter_begin_4610853632;
	_iter_end_4610853632:;
	_219317_i=0LL;
	_iter_begin_4610854880:;
	if (!(_219317_i < this->self->_field_file->_field_structs._method_len())) { goto _iter_end_4610854880; }
	{
		jule::Ref<_1109372e0_Struct> _220121_st = this->self->_field_file->_field_structs._method_at(_219317_i);
		_220121_st->_field_sema=this->self;
	}
	_iter_next_4610854880:;
	(_219317_i)++;
	goto _iter_begin_4610854880;
	_iter_end_4610854880:;
}



inline void _110e92bc0_Sema::_method_set_sema_fields(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_file = *__julec_range_begin;
			_iter_begin_4610863328:;
			{
				this->self->_method_set_current_file(_110e92bc0_file);
				this->self->_method_set_file_sema_fields();
			}
			_iter_next_4610863328:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_file = *__julec_range_begin; goto _iter_begin_4610863328; }
			_iter_end_4610863328:;
		}
	}
}



inline void _110e92bc0_Sema::_method_check(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> _221329_files) {
	this->self->_field_files=_221329_files;
	this->self->_method_check_imports();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_check_enums();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_set_sema_fields();
	this->self->_method_impl_impls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_check_package_decls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_check_package_types();
}







std::ostream &operator<<(std::ostream &_Stream, const _110e92bc0_Sema &_Src) {
	_Stream << "Sema{";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "files:" << _Src._field_files << ", ";
	_Stream << "file:" << _Src._field_file;
	_Stream << "}";
	return _Stream;
}



inline void _1111c0be0_DynamicTypeAnnotation::_method_push_generic(jule::Ref<_1116aff70_TypeKind> _53435_k,jule::Int _53449_i) {
	(*this)._field_f->_field_generics[static_cast<jule::Int>(_53449_i)]=_53435_k;
}



inline jule::Bool _1111c0be0_DynamicTypeAnnotation::_method_annotate_prim(jule::Ref<_1116aff70_TypeKind> _53843_k) {
	jule::Bool _53859_ok = jule::Bool();
	jule::Str _53913_kind = (*((*this)._field_k))->_method_to_str();
	{
		auto __julec_range_expr = (*this)._field_f->_field_decl->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1111c0be0_i = 0;
			jule::Ref<_11054f670_GenericDecl> _1111c0be0_g = *__julec_range_begin;
			_iter_begin_4611098112:;
			{
				if (_53913_kind != _1111c0be0_g->_field_ident) {
					goto _iter_next_4611098112;
				}
				jule::Ref<_1116aff70_TypeKind> _54517_t = (*this)._field_f->_field_generics[static_cast<jule::Int>(_1111c0be0_i)];
				{
					if (!(((!(jule::real(_54517_t)))))) { goto _case_end_4611103312; }
					_case_begin_4611103312:;
					{
						(*this)._method_push_generic(_53843_k,_1111c0be0_i);
					}
					goto _match_end_4611103168;
					_case_end_4611103312:;
					if (!((_54517_t->_method_to_str() != _53843_k->_method_to_str()))) { goto _case_end_4611103424; }
					_case_begin_4611103424:;
					{
						_53859_ok = false;
						return _53859_ok;
					}
					goto _match_end_4611103168;
					_case_end_4611103424:;
					_match_end_4611103168:;
				}
				(*((*this)._field_k))->_field_kind=_53843_k->_field_kind;
				_53859_ok = true;
				return _53859_ok;
			}
			_iter_next_4611098112:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1111c0be0_i; _1111c0be0_g = *__julec_range_begin; goto _iter_begin_4611098112; }
			_iter_end_4611098112:;
		}
	}
	_53859_ok = false;
	return _53859_ok;
}



inline jule::Bool _1111c0be0_DynamicTypeAnnotation::_method_annotate_slc(jule::Ref<_1116aff70_TypeKind> _56242_k) {
	jule::Bool _56258_ok = jule::Bool();
	jule::Ref<_1116aff70_Slc> _56317_pslc = (*((*this)._field_k))->_method_slc();
	if ((!(jule::real(_56317_pslc)))) {
		_56258_ok = false;
		return _56258_ok;
	}
	jule::Ref<_1116aff70_Slc> _56817_slc = _56242_k->_method_slc();
	_1116aff70_TypeKind* _56917_kk = (_56317_pslc->_field_elem).alloc;
	(*this)._field_k=(&(_56917_kk));
	_56258_ok = (*this)._method_annotate_kind(_56817_slc->_field_elem);
	return _56258_ok;
}



inline jule::Bool _1111c0be0_DynamicTypeAnnotation::_method_check_map_key(_1116aff70_TypeKind** _57443_k,jule::Ref<_1116aff70_TypeKind> _57462_ck) {
	jule::Bool _57479_ok = jule::Bool();
	_1116aff70_TypeKind** _57517_old = (*this)._field_k;
	(*this)._field_k=_57443_k;
	_57479_ok=(*this)._method_annotate_kind(_57462_ck);
	(*this)._field_k=_57517_old;
	_57479_ok = _57479_ok;
	return _57479_ok;
}



inline jule::Bool _1111c0be0_DynamicTypeAnnotation::_method_annotate_map(jule::Ref<_1116aff70_TypeKind> _58242_k) {
	jule::Bool _58258_ok = jule::Bool();
	jule::Ref<_1116aff70_Map> _58317_pmap = (*((*this)._field_k))->_method_map();
	if ((!(jule::real(_58317_pmap)))) {
		_58258_ok = false;
		return _58258_ok;
	}
	jule::Ref<_1116aff70_Map> _58817_m = _58242_k->_method_map();
	_1116aff70_TypeKind* _59017_key = (_58317_pmap->_field_key).alloc;
	_1116aff70_TypeKind* _59117_val = (_58317_pmap->_field_val).alloc;
	_58258_ok = (*this)._method_check_map_key((&(_59017_key)),_58817_m->_field_key) && (*this)._method_check_map_key((&(_59117_val)),_58817_m->_field_val);
	return _58258_ok;
}



inline jule::Bool _1111c0be0_DynamicTypeAnnotation::_method_annotate_fn(jule::Ref<_1116aff70_TypeKind> _59541_k) {
	jule::Bool _59557_ok = jule::Bool();
	jule::Ref<_11072eb20_FnIns> _59617_pf = (*((*this)._field_k))->_method_fnc();
	if ((!(jule::real(_59617_pf)))) {
		_59557_ok = false;
		return _59557_ok;
	}
	jule::Ref<_11072eb20_FnIns> _60017_f = _59541_k->_method_fnc();
	{
		if (!((_59617_pf->_field_params.len() != _60017_f->_field_params.len()))) { goto _case_end_4611143776; }
		_case_begin_4611143776:;
		{
			_59557_ok = false;
			return _59557_ok;
		}
		goto _match_end_4611143488;
		_case_end_4611143776:;
		if (!((_59617_pf->_field_decl->_method_is_void() != _60017_f->_field_decl->_method_is_void()))) { goto _case_end_4611143888; }
		_case_begin_4611143888:;
		{
			_59557_ok = false;
			return _59557_ok;
		}
		goto _match_end_4611143488;
		_case_end_4611143888:;
		_match_end_4611143488:;
	}
	_59557_ok=true;
	_1116aff70_TypeKind** _61017_old = (*this)._field_k;
	{
		auto __julec_range_expr = _60017_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1111c0be0_i = 0;
			jule::Ref<_11072eb20_ParamIns> _1111c0be0_fp = *__julec_range_begin;
			_iter_begin_4611149088:;
			{
				_1116aff70_TypeKind* _61221_pfp = (_59617_pf->_field_params[static_cast<jule::Int>(_1111c0be0_i)]->_field_kind).alloc;
				(*this)._field_k=(&(_61221_pfp));
				_59557_ok=(*this)._method_annotate_kind(_1111c0be0_fp->_field_kind) && _59557_ok;
			}
			_iter_next_4611149088:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1111c0be0_i; _1111c0be0_fp = *__julec_range_begin; goto _iter_begin_4611149088; }
			_iter_end_4611149088:;
		}
	}
	if ((!(_59617_pf->_field_decl->_method_is_void()))) {
		_1116aff70_TypeKind* _61821_result = (_59617_pf->_field_result).alloc;
		(*this)._field_k=(&(_61821_result));
		_59557_ok=(*this)._method_annotate_kind(_60017_f->_field_result) && _59557_ok;
	}
	(*this)._field_k=_61017_old;
	_59557_ok = _59557_ok;
	return _59557_ok;
}



inline jule::Bool _1111c0be0_DynamicTypeAnnotation::_method_annotate_ptr(jule::Ref<_1116aff70_TypeKind> _62742_k) {
	jule::Bool _62758_ok = jule::Bool();
	jule::Ref<_1116aff70_Ptr> _62817_pptr = (*((*this)._field_k))->_method_ptr();
	if ((!(jule::real(_62817_pptr)))) {
		_62758_ok = false;
		return _62758_ok;
	}
	jule::Ref<_1116aff70_Ptr> _63317_ptr = _62742_k->_method_ptr();
	_1116aff70_TypeKind* _63417_cpptr = (_62817_pptr->_field_elem).alloc;
	(*this)._field_k=(&(_63417_cpptr));
	_62758_ok = (*this)._method_annotate_kind(_63317_ptr->_field_elem);
	return _62758_ok;
}



inline jule::Bool _1111c0be0_DynamicTypeAnnotation::_method_annotate_any(jule::Ref<_1116aff70_TypeKind> _63942_k) {
	jule::Bool _63958_ok = jule::Bool();
	jule::Str _64013_kind = (*((*this)._field_k))->_method_to_str();
	{
		auto __julec_range_expr = (*this)._field_f->_field_decl->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1111c0be0_i = 0;
			jule::Ref<_11054f670_GenericDecl> _1111c0be0_g = *__julec_range_begin;
			_iter_begin_4611173104:;
			{
				if (_64013_kind != _1111c0be0_g->_field_ident) {
					goto _iter_next_4611173104;
				}
				jule::Ref<_1116aff70_TypeKind> _64617_t = (*this)._field_f->_field_generics[static_cast<jule::Int>(_1111c0be0_i)];
				{
					if (!(((!(jule::real(_64617_t)))))) { goto _case_end_4611178304; }
					_case_begin_4611178304:;
					{
						(*this)._method_push_generic(_63942_k,_1111c0be0_i);
					}
					goto _match_end_4611178160;
					_case_end_4611178304:;
					if (!((_64617_t->_method_to_str() != _63942_k->_method_to_str()))) { goto _case_end_4611178416; }
					_case_begin_4611178416:;
					{
						_63958_ok = false;
						return _63958_ok;
					}
					goto _match_end_4611178160;
					_case_end_4611178416:;
					_match_end_4611178160:;
				}
				(*((*this)._field_k))->_field_kind=_63942_k->_field_kind;
				_63958_ok = true;
				return _63958_ok;
			}
			_iter_next_4611173104:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1111c0be0_i; _1111c0be0_g = *__julec_range_begin; goto _iter_begin_4611173104; }
			_iter_end_4611173104:;
		}
	}
	_63958_ok = false;
	return _63958_ok;
}



inline jule::Bool _1111c0be0_DynamicTypeAnnotation::_method_annotate_kind(jule::Ref<_1116aff70_TypeKind> _66343_k) {
	jule::Bool _66359_ok = jule::Bool();
	if (((*this)._field_k == nullptr) || ((*((*this)._field_k)) == nullptr)) {
		return _66359_ok;
	}
	{
		if (!(((*this)._method_annotate_any(_66343_k)))) { goto _case_end_4611189088; }
		_case_begin_4611189088:;
		{
			_66359_ok = true;
			return _66359_ok;
		}
		goto _match_end_4611186704;
		_case_end_4611189088:;
		if (!((jule::real(_66343_k->_method_prim())))) { goto _case_end_4611189200; }
		_case_begin_4611189200:;
		{
			_66359_ok = (*this)._method_annotate_prim(_66343_k);
			return _66359_ok;
		}
		goto _match_end_4611186704;
		_case_end_4611189200:;
		if (!((jule::real(_66343_k->_method_slc())))) { goto _case_end_4611189312; }
		_case_begin_4611189312:;
		{
			_66359_ok = (*this)._method_annotate_slc(_66343_k);
			return _66359_ok;
		}
		goto _match_end_4611186704;
		_case_end_4611189312:;
		if (!((jule::real(_66343_k->_method_map())))) { goto _case_end_4611189424; }
		_case_begin_4611189424:;
		{
			_66359_ok = (*this)._method_annotate_map(_66343_k);
			return _66359_ok;
		}
		goto _match_end_4611186704;
		_case_end_4611189424:;
		if (!((jule::real(_66343_k->_method_fnc())))) { goto _case_end_4611188016; }
		_case_begin_4611188016:;
		{
			_66359_ok = (*this)._method_annotate_fn(_66343_k);
			return _66359_ok;
		}
		goto _match_end_4611186704;
		_case_end_4611188016:;
		if (!((jule::real(_66343_k->_method_ptr())))) { goto _case_end_4611188128; }
		_case_begin_4611188128:;
		{
			_66359_ok = (*this)._method_annotate_ptr(_66343_k);
			return _66359_ok;
		}
		goto _match_end_4611186704;
		_case_end_4611188128:;
		_case_begin_4611187344:;
		{
			_66359_ok = false;
			return _66359_ok;
		}
		goto _match_end_4611186704;
		_case_end_4611187344:;
		_match_end_4611186704:;
	}
}



inline jule::Bool _1111c0be0_DynamicTypeAnnotation::_method_annotate(void) {
	jule::Bool _67936_ok = jule::Bool();
	_1116aff70_TypeKind* _68017_pk = ((*this)._field_p->_field_kind).alloc;
	(*this)._field_k=(&(_68017_pk));
	_67936_ok = (*this)._method_annotate_kind((*this)._field_a->_field_kind);
	return _67936_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _1111c0be0_DynamicTypeAnnotation &_Src) {
	_Stream << "DynamicTypeAnnotation{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "a:" << _Src._field_a << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "k:" << _Src._field_k;
	_Stream << "}";
	return _Stream;
}



inline void _1111c0be0_StructLitChecker::_method_push_err(_1106ec050_Token _91027_token,jule::Str _91041_fmt,jule::Slice<jule::Any> _91054_args) {
	(*this)._field_e->_method_push_err(_91027_token,_91041_fmt,_91054_args);
}



inline void _1111c0be0_StructLitChecker::_method_push_suggestion(jule::Str _91534_fmt,jule::Slice<jule::Any> _91547_args) {
	(*this)._field_e->_method_push_suggestion(_91534_fmt,_91547_args);
}



inline void _1111c0be0_StructLitChecker::_method_push_match(jule::Ref<_1109372e0_FieldIns> _91933_f,jule::Ref<_1112d7f10_Data> _91951_d,_1106ec050_Token _91961_error_token) {
	(*this)._field_args=jule::append((*this)._field_args,jule::Slice<jule::Ref<_110e4e8a0_StructArgExprModel>>({jule::new_struct<_110e4e8a0_StructArgExprModel>(new( std::nothrow ) _110e4e8a0_StructArgExprModel(_91933_f,_91951_d->_field_model))}));
	
	(*this)._field_e->_field_s->_method_check_validity_for_init_expr(_91933_f->_field_decl->_field_mutable,false,_91933_f->_field_kind,_91951_d,_91961_error_token);
	(*this)._field_e->_field_s->_method_check_assign_type(_91933_f->_field_kind,_91951_d,_91961_error_token,false);
}



inline void _1111c0be0_StructLitChecker::_method_check_pair(jule::Ref<_11054f670_FieldExprPair> _93033_pair,jule::Slice<jule::Any> _93059_exprs) {
	jule::Ref<_1109372e0_FieldIns> _93217_f = (*this)._field_s->_method_find_field(_93033_pair->_field_field._field_kind);
	if ((!(jule::real(_93217_f)))) {
		(*this)._method_push_err(_93033_pair->_field_field,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_93033_pair->_field_field._field_kind)}));
		return;
	}
	if ((!((*this)._field_e->_field_s->_method_is_accessible_define(_93217_f->_field_decl->_field_public,_93217_f->_field_decl->_field_token)))) {
		(*this)._method_push_err(_93033_pair->_field_field,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_93033_pair->_field_field._field_kind)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
	}
	_julec_label_dup_lookup:;
	{
		auto __julec_range_expr = _93059_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1111c0be0_expr = *__julec_range_begin;
			_iter_begin_4611370608:;
			{
				{
					auto _match_expr{ _1111c0be0_expr };
					if (!(_match_expr.type_is<jule::Ref<_11054f670_FieldExprPair>>())) { goto _case_end_4611372496; }
					_case_begin_4611372496:;
					{
						jule::Ref<_11054f670_FieldExprPair> _94825_dpair = _1111c0be0_expr.operator jule::Ref<_11054f670_FieldExprPair>();
						{
							if (!((_93033_pair == _94825_dpair))) { goto _case_end_4611375584; }
							_case_begin_4611375584:;
							{
								goto _iter_end_4611370608;
							}
							goto _match_end_4611375344;
							_case_end_4611375584:;
							if (!((_93033_pair->_field_field._field_kind == _94825_dpair->_field_field._field_kind))) { goto _case_end_4611375696; }
							_case_begin_4611375696:;
							{
								(*this)._method_push_err(_93033_pair->_field_field,jule::Str("@ already has expression", 24),jule::Slice<jule::Any>({jule::Any(_93033_pair->_field_field._field_kind)}));
								goto _iter_end_4611370608;
							}
							goto _match_end_4611375344;
							_case_end_4611375696:;
							_match_end_4611375344:;
						}
					}
					goto _match_end_4611371408;
					_case_end_4611372496:;
					_match_end_4611371408:;
				}
			}
			_iter_next_4611370608:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1111c0be0_expr = *__julec_range_begin; goto _iter_begin_4611370608; }
			_iter_end_4611370608:;
		}
	}
	jule::Ref<_1116aff70_TypeKind> _96017_prefix = (*this)._field_e->_field_prefix;
	__JULE_DEFER({
		(*this)._field_e->_field_prefix=_96017_prefix;
	});
	(*this)._field_e->_field_prefix=_93217_f->_field_kind;
	jule::Ref<_1112d7f10_Data> _96417_d = (*this)._field_e->_method_eval_expr_kind(_93033_pair->_field_expr);
	if ((!(jule::real(_96417_d)))) {
		return;
	}
	(*this)._method_push_match(_93217_f,_96417_d,_93033_pair->_field_field);
}



inline jule::Bool _1111c0be0_StructLitChecker::_method_ready_exprs(jule::Slice<jule::Any> _97134_exprs) {
	jule::Bool _97217_ok = true;
	{
		auto __julec_range_expr = _97134_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1111c0be0_i = 0;
			jule::Any _1111c0be0_expr = *__julec_range_begin;
			_iter_begin_4611389696:;
			{
				{
					auto _match_expr{ _1111c0be0_expr };
					if (!(_match_expr.type_is<jule::Ref<_11054f670_KeyValPair>>())) { goto _case_end_4611392016; }
					_case_begin_4611392016:;
					{
						jule::Ref<_11054f670_KeyValPair> _97625_pair = _1111c0be0_expr.operator jule::Ref<_11054f670_KeyValPair>();
						{
							auto _match_expr{ _97625_pair->_field_key };
							if (!(_match_expr.type_is<jule::Ref<_11054f670_IdentExpr>>())) { goto _case_end_4611396000; }
							goto _match_end_4611392224;
							_case_end_4611396000:;
							_case_begin_4611395200:;
							{
								(*this)._method_push_err(_97625_pair->_field_colon,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
								_97217_ok=false;
								goto _iter_next_4611389696;
							}
							goto _match_end_4611392224;
							_case_end_4611395200:;
							_match_end_4611392224:;
						}
						_97134_exprs[static_cast<jule::Int>(_1111c0be0_i)]=jule::Any(jule::new_struct<_11054f670_FieldExprPair>(new( std::nothrow ) _11054f670_FieldExprPair(_97625_pair->_field_key.operator jule::Ref<_11054f670_IdentExpr>()->_field_token,_97625_pair->_field_val)));
					}
					goto _match_end_4611391584;
					_case_end_4611392016:;
					_match_end_4611391584:;
				}
			}
			_iter_next_4611389696:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1111c0be0_i; _1111c0be0_expr = *__julec_range_begin; goto _iter_begin_4611389696; }
			_iter_end_4611389696:;
		}
	}
	return _97217_ok;
}



inline void _1111c0be0_StructLitChecker::_method_check(jule::Slice<jule::Any> _99728_exprs) {
	if (_99728_exprs.len() == 0LL) {
		return;
	}
	if ((!((*this)._method_ready_exprs(_99728_exprs)))) {
		return;
	}
	jule::Bool _100617_paired = false;
	{
		auto __julec_range_expr = _99728_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1111c0be0_i = 0;
			jule::Any _1111c0be0_expr = *__julec_range_begin;
			_iter_begin_4611406464:;
			{
				{
					auto _match_expr{ _1111c0be0_expr };
					if (!(_match_expr.type_is<jule::Ref<_11054f670_FieldExprPair>>())) { goto _case_end_4611408880; }
					_case_begin_4611408880:;
					{
						jule::Ref<_11054f670_FieldExprPair> _101025_pair = _1111c0be0_expr.operator jule::Ref<_11054f670_FieldExprPair>();
						if ((_1111c0be0_i > 0LL) && (!(_100617_paired))) {
							(*this)._method_push_err(_101025_pair->_field_field,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
						}
						_100617_paired=true;
						(*this)._method_check_pair(_101025_pair,_99728_exprs);
					}
					goto _match_end_4611408416;
					_case_end_4611408880:;
					if (!(_match_expr.type_is<jule::Ref<_11054f670_Expr>>())) { goto _case_end_4611409072; }
					_case_begin_4611409072:;
					{
						jule::Ref<_11054f670_Expr> _101825_e = _1111c0be0_expr.operator jule::Ref<_11054f670_Expr>();
						if (_100617_paired) {
							(*this)._method_push_err(_101825_e->_field_token,jule::Str("argument must target to field", 29),jule::Slice<jule::Any>({}));
						}
						if (_1111c0be0_i >= (*this)._field_s->_field_fields.len()) {
							(*this)._method_push_err(_101825_e->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
							goto _iter_next_4611406464;
						}
						jule::Ref<_1109372e0_FieldIns> _102725_field = (*this)._field_s->_field_fields[static_cast<jule::Int>(_1111c0be0_i)];
						jule::Ref<_1116aff70_TypeKind> _102925_prefix = (*this)._field_e->_field_prefix;
						__JULE_DEFER({
							(*this)._field_e->_field_prefix=_102925_prefix;
						});
						(*this)._field_e->_field_prefix=_102725_field->_field_kind;
						jule::Ref<_1112d7f10_Data> _103325_d = (*this)._field_e->_method_eval_expr_kind(_101825_e->_field_kind);
						if ((!(jule::real(_103325_d)))) {
							goto _iter_next_4611406464;
						}
						(*this)._method_push_match(_102725_field,_103325_d,_101825_e->_field_token);
					}
					goto _match_end_4611408416;
					_case_end_4611409072:;
					_match_end_4611408416:;
				}
			}
			_iter_next_4611406464:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1111c0be0_i; _1111c0be0_expr = *__julec_range_begin; goto _iter_begin_4611406464; }
			_iter_end_4611406464:;
		}
	}
	if ((!(_100617_paired))) {
		jule::I64 _104417_n = (*this)._field_s->_field_fields.len();
		jule::I64 _104521_diff = _104417_n - _99728_exprs.len();
		{
			if (!((_104521_diff <= 0LL))) { goto _case_end_4611432640; }
			_case_begin_4611432640:;
			{
				return;
			}
			goto _match_end_4611432512;
			_case_end_4611432640:;
			_match_end_4611432512:;
		}
		jule::Str _105121_idents = jule::Str("", 0);
		_iter_begin_4611431808:;
		if (!(_104521_diff > 0LL)) { goto _iter_end_4611431808; }
		{
			_105121_idents+=jule::Str(", ", 2) + (*this)._field_s->_field_fields[static_cast<jule::Int>(_104417_n - _104521_diff)]->_field_decl->_field_ident;
		}
		_iter_next_4611431808:;
		(_104521_diff)--;
		goto _iter_begin_4611431808;
		_iter_end_4611431808:;
		_105121_idents=_105121_idents.slice(2LL);
		(*this)._method_push_err((*this)._field_error_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_105121_idents)}));
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1111c0be0_StructLitChecker &_Src) {
	_Stream << "StructLitChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_110e92c80_Var> _1111c0be0_RangeChecker::_method_build_var(jule::Ref<_11054f670_VarDecl> _107028_decl) {
	jule::Ref<_110e92c80_Var> _107117_v = _110d9ce90_build_var(_107028_decl);
	return _107117_v;
}



inline void _1111c0be0_RangeChecker::_method_set_size_key(void) {
	if ((!(jule::real((*this)._field_rang->_field_key_a))) || _1106ec050_is_ignore_ident((*this)._field_rang->_field_key_a->_field_ident)) {
		return;
	}
	(*this)._field_kind->_field_key_a=(*this)._method_build_var((*this)._field_rang->_field_key_a);
	(*this)._field_kind->_field_key_a->_field_kind=jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("int", 3))))));
}



inline void _1111c0be0_RangeChecker::_method_check_slice(void) {
	(*this)._method_set_size_key();
	if ((!(jule::real((*this)._field_rang->_field_key_b))) || _1106ec050_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	jule::Ref<_1116aff70_Slc> _109417_slc = (*this)._field_d->_field_kind->_method_slc();
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),_109417_slc->_field_elem));
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr((*this)._field_kind->_field_key_b->_field_mutable,(*this)._field_kind->_field_key_b->_field_reference,(*this)._field_kind->_field_key_b->_field_kind->_field_kind,(*this)._field_d,(*this)._field_rang->_field_in_token);
}



inline void _1111c0be0_RangeChecker::_method_check_array(void) {
	(*this)._method_set_size_key();
	if ((!(jule::real((*this)._field_rang->_field_key_b))) || _1106ec050_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	jule::Ref<_1116aff70_Arr> _111117_arr = (*this)._field_d->_field_kind->_method_arr();
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),_111117_arr->_field_elem));
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr((*this)._field_kind->_field_key_b->_field_mutable,(*this)._field_kind->_field_key_b->_field_reference,(*this)._field_kind->_field_key_b->_field_kind->_field_kind,(*this)._field_d,(*this)._field_rang->_field_in_token);
}



inline void _1111c0be0_RangeChecker::_method_check_map_key_a(void) {
	if ((!(jule::real((*this)._field_rang->_field_key_a))) || _1106ec050_is_ignore_ident((*this)._field_rang->_field_key_a->_field_ident)) {
		return;
	}
	jule::Ref<_1116aff70_Map> _112717_m = (*this)._field_d->_field_kind->_method_map();
	(*this)._field_kind->_field_key_a=(*this)._method_build_var((*this)._field_rang->_field_key_a);
	(*this)._field_kind->_field_key_a->_field_kind=jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),_112717_m->_field_key));
	jule::Ref<_1112d7f10_Data> _113117_d = jule::new_ref<_1112d7f10_Data>((*this)._field_d.get());
	_113117_d->_field_kind=_112717_m->_field_key;
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr((*this)._field_kind->_field_key_a->_field_mutable,(*this)._field_kind->_field_key_a->_field_reference,(*this)._field_kind->_field_key_a->_field_kind->_field_kind,_113117_d,(*this)._field_rang->_field_in_token);
}



inline void _1111c0be0_RangeChecker::_method_check_map_key_b(void) {
	if ((!(jule::real((*this)._field_rang->_field_key_b))) || _1106ec050_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	jule::Ref<_1116aff70_Map> _114617_m = (*this)._field_d->_field_kind->_method_map();
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),_114617_m->_field_val));
	jule::Ref<_1112d7f10_Data> _115017_d = jule::new_ref<_1112d7f10_Data>((*this)._field_d.get());
	_115017_d->_field_kind=_114617_m->_field_val;
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr((*this)._field_kind->_field_key_b->_field_mutable,(*this)._field_kind->_field_key_b->_field_reference,(*this)._field_kind->_field_key_b->_field_kind->_field_kind,_115017_d,(*this)._field_rang->_field_in_token);
}



inline void _1111c0be0_RangeChecker::_method_check_map(void) {
	(*this)._method_check_map_key_a();
	(*this)._method_check_map_key_b();
}



inline void _1111c0be0_RangeChecker::_method_check_str(void) {
	(*this)._method_set_size_key();
	if ((!(jule::real((*this)._field_rang->_field_key_b))) || _1106ec050_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("u8", 2))))));
}



inline jule::Bool _1111c0be0_RangeChecker::_method_check(void) {
	if (jule::real((*this)._field_d->_field_kind->_method_ref())) {
		(*this)._field_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_ExplicitDerefExprModel>(new( std::nothrow ) _110e4e8a0_ExplicitDerefExprModel((*this)._field_d->_field_model)));
		(*this)._field_d->_field_kind=(*this)._field_d->_field_kind->_method_ref()->_field_elem;
	}
	{
		if (!((jule::real((*this)._field_d->_field_kind->_method_slc())))) { goto _case_end_4611519872; }
		_case_begin_4611519872:;
		{
			(*this)._method_check_slice();
			return true;
		}
		goto _match_end_4611519264;
		_case_end_4611519872:;
		if (!((jule::real((*this)._field_d->_field_kind->_method_arr())))) { goto _case_end_4611519984; }
		_case_begin_4611519984:;
		{
			(*this)._method_check_array();
			return true;
		}
		goto _match_end_4611519264;
		_case_end_4611519984:;
		if (!((jule::real((*this)._field_d->_field_kind->_method_map())))) { goto _case_end_4611520096; }
		_case_begin_4611520096:;
		{
			(*this)._method_check_map();
			return true;
		}
		goto _match_end_4611519264;
		_case_end_4611520096:;
		_match_end_4611519264:;
	}
	jule::Ref<_1116aff70_Prim> _120113_prim = (*this)._field_d->_field_kind->_method_prim();
	if (jule::real(_120113_prim) && _120113_prim->_method_is_str()) {
		(*this)._method_check_str();
		return true;
	}
	(*this)._field_sc->_field_s->_method_push_err((*this)._field_rang->_field_in_token,jule::Str("range iterations must be have enumerable expression", 51),jule::Slice<jule::Any>({}));
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1111c0be0_RangeChecker &_Src) {
	_Stream << "RangeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "rang:" << _Src._field_rang << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1112d7f10_Data::_method_is_nil(void) {
	return (*this)._field_kind->_method_is_nil();
}



inline jule::Bool _1112d7f10_Data::_method_is_void(void) {
	return (*this)._field_kind->_method_is_void();
}



inline jule::Bool _1112d7f10_Data::_method_is_const(void) {
	return jule::real((*this)._field_constant);
}







std::ostream &operator<<(std::ostream &_Stream, const _1112d7f10_Data &_Src) {
	_Stream << "Data{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "cast_kind:" << _Src._field_cast_kind << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "lvalue:" << _Src._field_lvalue << ", ";
	_Stream << "variadiced:" << _Src._field_variadiced << ", ";
	_Stream << "is_rune:" << _Src._field_is_rune << ", ";
	_Stream << "model:" << _Src._field_model << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "constant:" << _Src._field_constant;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1112d7f10_Value &_Src) {
	_Stream << "Value{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline void _1112d7f10_Eval::_method_push_err(_1106ec050_Token _25327_token,jule::Str _25341_fmt,jule::Slice<jule::Any> _25354_args) {
	(*this)._field_s->_method_push_err(_25327_token,_25341_fmt,_25354_args);
}



inline void _1112d7f10_Eval::_method_push_suggestion(jule::Str _25834_fmt,jule::Slice<jule::Any> _25847_args) {
	(*this)._field_s->_method_push_suggestion(_25834_fmt,_25847_args);
}



inline jule::Bool _1112d7f10_Eval::_method_is_unsafe(void) {
	return (*this)._field_unsafety;
}



inline jule::Bool _1112d7f10_Eval::_method_is_global(void) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_110e92bc0_Sema>>())) { goto _case_end_4611771424; }
		_case_begin_4611771424:;
		{
			return true;
		}
		goto _match_end_4611770480;
		_case_end_4611771424:;
		_case_begin_4611771088:;
		{
			return false;
		}
		goto _match_end_4611770480;
		_case_end_4611771088:;
		_match_end_4611770480:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_lit_nil(void) {
	jule::Ref<_1118cee40_Const> _27717_constant = _1118cee40_Const::_static_method_new_nil();
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),nullptr)),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_27717_constant),false,_27717_constant));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_lit_str(jule::Ref<_11054f670_LitExpr> _28822_lt) {
	jule::Str _28917_s = _28822_lt->_field_value.slice(1LL,static_cast<jule::Int>(_28822_lt->_field_value.len() - 1LL));
	if (_1106ec050_is_raw_str(_28822_lt->_field_value)) {
		_28917_s=_111a1efb0_to_raw_str(static_cast<jule::Slice<jule::U8>>(_28917_s));
	} else {
		_28917_s=_111a1efb0_to_str(static_cast<jule::Slice<jule::U8>>(_28917_s));
	}
	jule::Ref<_1118cee40_Const> _29517_constant = _1118cee40_Const::_static_method_new_str(_28917_s);
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("str", 3)))),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_29517_constant),false,_29517_constant));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_lit_bool(jule::Ref<_11054f670_LitExpr> _30923_lit) {
	jule::Ref<_1118cee40_Const> _31017_constant = _1118cee40_Const::_static_method_new_bool(_30923_lit->_field_value == jule::Str("true", 4));
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_31017_constant),false,_31017_constant));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_lit_rune(jule::Ref<_11054f670_LitExpr> _32323_l) {
	
	
	jule::Str _32713_lt = _32323_l->_field_value.slice(1LL,static_cast<jule::Int>(_32323_l->_field_value.len() - 1LL));
	jule::I32 _32813_r = _111a1efb0_to_rune(static_cast<jule::Slice<jule::U8>>(_32713_lt));
	jule::Ref<_1112d7f10_Data> _32917_data = jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::Ref<_1116aff70_TypeKind>(),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,_1118cee40_Const::_static_method_new_i64(static_cast<jule::I64>(_32813_r))));
	jule::Bool _33617_is_byte;
	std::tie(std::ignore,_33617_is_byte) = _111a1efb0_is_byte_lit(_32323_l->_field_value);
	if (_33617_is_byte) {
		_32917_data->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("u8", 2))));
	} else {
		_32917_data->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i32", 3))));
	}
	_32917_data->_field_model=jule::Any(jule::new_struct<_110e4e8a0_RuneExprModel>(new( std::nothrow ) _110e4e8a0_RuneExprModel(_32813_r)));
	_32917_data->_field_is_rune=true;
	return _32917_data;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_lit_float(jule::Ref<_11054f670_LitExpr> _35224_l) {
	
	jule::F64 _35514_f;
	std::tie(_35514_f,std::ignore) = _107ec5260_parse_float(_35224_l->_field_value,64LL);
	jule::Ref<_1118cee40_Const> _35617_constant = _1118cee40_Const::_static_method_new_f64(_35514_f);
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("f64", 3)))),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_35617_constant),false,_35617_constant));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_lit_int(jule::Ref<_11054f670_LitExpr> _37026_l) {
	
	jule::Str _37317_lit = _37026_l->_field_value;
	jule::Int _37417_base = 0LL;
	{
		if (!((_37317_lit.has_prefix(jule::Str("0x", 2))))) { goto _case_end_4611823632; }
		_case_begin_4611823632:;
		{
			_37317_lit=_37317_lit.slice(2LL);
			_37417_base=16LL;
		}
		goto _match_end_4611821936;
		_case_end_4611823632:;
		if (!((_37317_lit.has_prefix(jule::Str("0b", 2))))) { goto _case_end_4611823296; }
		_case_begin_4611823296:;
		{
			_37317_lit=_37317_lit.slice(2LL);
			_37417_base=2LL;
		}
		goto _match_end_4611821936;
		_case_end_4611823296:;
		if (!((_37317_lit.has_prefix(jule::Str("0o", 2))))) { goto _case_end_4611823408; }
		_case_begin_4611823408:;
		{
			_37317_lit=_37317_lit.slice(2LL);
			_37417_base=8LL;
		}
		goto _match_end_4611821936;
		_case_end_4611823408:;
		if (!(((_37317_lit[0LL] == '0') && (_37317_lit.len() > 1LL)))) { goto _case_end_4611822528; }
		_case_begin_4611822528:;
		{
			_37317_lit=_37317_lit.slice(1LL);
			_37417_base=8LL;
		}
		goto _match_end_4611821936;
		_case_end_4611822528:;
		_case_begin_4611822224:;
		{
			_37417_base=10LL;
		}
		goto _match_end_4611821936;
		_case_end_4611822224:;
		_match_end_4611821936:;
	}
	jule::Ref<_1112d7f10_Data> _39717_d = jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::Ref<_1116aff70_TypeKind>(),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,jule::Ref<_1118cee40_Const>()));
	jule::Any _40317_value = jule::Any(nullptr);
	jule::I64 _40414_sig;
	jule::Int _40419_err;
	std::tie(_40414_sig,_40419_err) = _117e872d0_parse_int(_37317_lit,_37417_base,64LL);
	if (_40419_err == 0LLU) {
		_40317_value=jule::Any(_40414_sig);
		_39717_d->_field_constant=_1118cee40_Const::_static_method_new_i64(_40414_sig);
	} else {
		jule::U64 _40918_unsig;
		jule::Int _40925_err;
		std::tie(_40918_unsig,_40925_err) = _117e872d0_parse_uint(_37317_lit,_37417_base,64LL);
		if (_40925_err != 0LLU) {
			(*this)._method_push_err(_37026_l->_field_token,jule::Str("arithmetic value overflow", 25),jule::Slice<jule::Any>({}));
			(*this)._method_push_suggestion(jule::Str("floating-point literals may solve your problem", 46),jule::Slice<jule::Any>({}));
		}
		_39717_d->_field_constant=_1118cee40_Const::_static_method_new_u64(_40918_unsig);
		_40317_value=jule::Any(_40918_unsig);
	}
	_39717_d->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(_1112d7f10_kind_by_bitsize(_40317_value))));
	_1112d7f10_normalize_bitsize(_39717_d);
	_39717_d->_field_model=jule::Any(_39717_d->_field_constant);
	return _39717_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_lit_num(jule::Ref<_11054f670_LitExpr> _42826_l) {
	{
		if (!((_1106ec050_is_float(_42826_l->_field_value)))) { goto _case_end_4611851936; }
		_case_begin_4611851936:;
		{
			return (*this)._method_lit_float(_42826_l);
		}
		goto _match_end_4611850048;
		_case_end_4611851936:;
		_case_begin_4611850192:;
		{
			return (*this)._method_lit_int(_42826_l);
		}
		goto _match_end_4611850048;
		_case_end_4611850192:;
		_match_end_4611850048:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_lit(jule::Ref<_11054f670_LitExpr> _43527_lit) {
	{
		if (!((_43527_lit->_method_is_nil()))) { goto _case_end_4611858208; }
		_case_begin_4611858208:;
		{
			return (*this)._method_lit_nil();
		}
		goto _match_end_4611855664;
		_case_end_4611858208:;
		if (!((_1106ec050_is_str(_43527_lit->_field_value)))) { goto _case_end_4611857216; }
		_case_begin_4611857216:;
		{
			return (*this)._method_lit_str(_43527_lit);
		}
		goto _match_end_4611855664;
		_case_end_4611857216:;
		if (!((_1106ec050_is_bool(_43527_lit->_field_value)))) { goto _case_end_4611857424; }
		_case_begin_4611857424:;
		{
			return (*this)._method_lit_bool(_43527_lit);
		}
		goto _match_end_4611855664;
		_case_end_4611857424:;
		if (!((_1106ec050_is_rune(_43527_lit->_field_value)))) { goto _case_end_4611857872; }
		_case_begin_4611857872:;
		{
			return (*this)._method_lit_rune(_43527_lit);
		}
		goto _match_end_4611855664;
		_case_end_4611857872:;
		if (!((_1106ec050_is_num(_43527_lit->_field_value)))) { goto _case_end_4611857984; }
		_case_begin_4611857984:;
		{
			return (*this)._method_lit_num(_43527_lit);
		}
		goto _match_end_4611855664;
		_case_end_4611857984:;
		_case_begin_4611855808:;
		{
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4611855664;
		_case_end_4611855808:;
		_match_end_4611855664:;
	}
}



inline jule::Any _1112d7f10_Eval::_method_find_builtins(jule::Str _44632_ident) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_110e4edc0_ImportInfo>>())) { goto _case_end_4611866704; }
		_case_begin_4611866704:;
		{
			jule::Any _44921_def = _1112d7f10_find_builtins_import(_44632_ident,(*this)._field_lookup.operator jule::Ref<_110e4edc0_ImportInfo>());
			if (_44921_def != nullptr) {
				return _44921_def;
			}
		}
		goto _match_end_4611866080;
		_case_end_4611866704:;
		if (!(_match_expr.type_is<jule::Ref<_110e92bc0_Sema>>())) { goto _case_end_4611866832; }
		_case_begin_4611866832:;
		{
			jule::Any _45521_def = _1112d7f10_find_builtins_sema(_44632_ident,(*this)._field_lookup.operator jule::Ref<_110e92bc0_Sema>());
			if (_45521_def != nullptr) {
				return _45521_def;
			}
		}
		goto _match_end_4611866080;
		_case_end_4611866832:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_ScopeChecker>>())) { goto _case_end_4611866992; }
		_case_begin_4611866992:;
		{
			jule::Any _46121_def = _1112d7f10_find_builtins_sema(_44632_ident,(*this)._field_lookup.operator jule::Ref<_110af2660_ScopeChecker>()->_field_s);
			if (_46121_def != nullptr) {
				return _46121_def;
			}
		}
		goto _match_end_4611866080;
		_case_end_4611866992:;
		_match_end_4611866080:;
	}
	return _1113198e0_find_builtin_def(_44632_ident);
}



inline jule::Any _1112d7f10_Eval::_method_get_def(jule::Str _47026_ident,jule::Bool _47038_cpp_linked) {
	if ((!(_47038_cpp_linked))) {
		jule::Ref<_110e453c0_Enum> _47221_enm = (*this)._field_lookup.get()._method_find_enum(_47026_ident);
		if (jule::real(_47221_enm)) {
			return jule::Any(_47221_enm);
		}
	}
	jule::Ref<_110e92c80_Var> _47817_v = (*this)._field_lookup.get()._method_find_var(_47026_ident,_47038_cpp_linked);
	if (jule::real(_47817_v)) {
		return jule::Any(_47817_v);
	}
	jule::Ref<_11072eb20_Fn> _48317_f = (*this)._field_lookup.get()._method_find_fn(_47026_ident,_47038_cpp_linked);
	if (jule::real(_48317_f)) {
		return jule::Any(_48317_f);
	}
	jule::Ref<_1109372e0_Struct> _48817_s = (*this)._field_lookup.get()._method_find_struct(_47026_ident,_47038_cpp_linked);
	if (jule::real(_48817_s)) {
		return jule::Any(_48817_s);
	}
	jule::Ref<_1116aff70_TypeAlias> _49317_ta = (*this)._field_lookup.get()._method_find_type_alias(_47026_ident,_47038_cpp_linked);
	if (jule::real(_49317_ta)) {
		return jule::Any(_49317_ta);
	}
	return (*this)._method_find_builtins(_47026_ident);
}



inline void _1112d7f10_Eval::_method_push_reference(jule::Ref<_110d9ce90_ReferenceStack> _50137_references) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_110af2660_ScopeChecker>>())) { goto _case_end_4611914272; }
		_case_begin_4611914272:;
		{
			jule::Ref<_110af2660_ScopeChecker> _50421_sc = (*this)._field_lookup.operator jule::Ref<_110af2660_ScopeChecker>()->_method_get_root();
			if ((!(_50137_references->_method_exist_1(_50421_sc->_field_owner)))) {
				_50137_references->_method_push(jule::Any(_50421_sc->_field_owner));
			}
		}
		goto _match_end_4611901104;
		_case_end_4611914272:;
		_case_begin_4611901696:;
		{
			if (jule::real((*this)._field_owner) && (!(_50137_references->_method_exist_0((*this)._field_owner)))) {
				_50137_references->_method_push(jule::Any((*this)._field_owner));
			}
		}
		goto _match_end_4611901104;
		_case_end_4611901696:;
		_match_end_4611901104:;
	}
}



inline void _1112d7f10_Eval::_method_push_reference_to_fn(jule::Ref<_11072eb20_FnIns> _51643_f) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_110af2660_ScopeChecker>>())) { goto _case_end_4611924560; }
		_case_begin_4611924560:;
		{
			jule::Ref<_110af2660_ScopeChecker> _51921_sc = (*this)._field_lookup.operator jule::Ref<_110af2660_ScopeChecker>()->_method_get_root();
			if (_51921_sc->_field_owner->_field_decl->_method_is_init() && (!(_51921_sc->_field_owner->_field_references->_method_exist_1(_51643_f)))) {
				_51921_sc->_field_owner->_field_refers->_method_push(jule::Any(_51643_f));
			}
		}
		goto _match_end_4611877120;
		_case_end_4611924560:;
		_match_end_4611877120:;
	}
	(*this)._method_push_reference(_51643_f->_field_references);
}



inline void _1112d7f10_Eval::_method_push_reference_to_var(jule::Ref<_110e92c80_Var> _52744_v) {
	if ((!(jule::real(_52744_v->_field_references)))) {
		return;
	}
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_110af2660_ScopeChecker>>())) { goto _case_end_4611943072; }
		_case_begin_4611943072:;
		{
			jule::Ref<_110af2660_ScopeChecker> _53421_sc = (*this)._field_lookup.operator jule::Ref<_110af2660_ScopeChecker>()->_method_get_root();
			if (_53421_sc->_field_owner->_field_decl->_method_is_init() && (!(_53421_sc->_field_owner->_field_references->_method_exist_0(_52744_v)))) {
				_53421_sc->_field_owner->_field_refers->_method_push(jule::Any(_52744_v));
			}
		}
		goto _match_end_4611942560;
		_case_end_4611943072:;
		_match_end_4611942560:;
	}
	(*this)._method_push_reference(_52744_v->_field_references);
}



inline void _1112d7f10_Eval::_method_push_reference_to_struct(jule::Ref<_1109372e0_StructIns> _54347_s) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_110af2660_ScopeChecker>>())) { goto _case_end_4611954544; }
		_case_begin_4611954544:;
		{
			jule::Ref<_110af2660_ScopeChecker> _54621_sc = (*this)._field_lookup.operator jule::Ref<_110af2660_ScopeChecker>()->_method_get_root();
			if (_54621_sc->_field_owner->_field_decl->_method_is_init() && (!(_54621_sc->_field_owner->_field_references->_method_exist_2(_54347_s)))) {
				_54621_sc->_field_owner->_field_refers->_method_push(jule::Any(_54347_s));
			}
		}
		goto _match_end_4611953920;
		_case_end_4611954544:;
		_match_end_4611953920:;
	}
	(*this)._method_push_reference(_54347_s->_field_references);
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_enum(jule::Ref<_110e453c0_Enum> _55428_enm,_1106ec050_Token _55440_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_55428_enm->_field_public,_55428_enm->_field_token)))) {
		(*this)._method_push_err(_55440_error_token,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_55428_enm->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_55428_enm)),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),true,jule::new_ref<_1118cee40_Const>()));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_struct(jule::Ref<_1109372e0_StructIns> _57234_s,_1106ec050_Token _57249_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_57234_s->_field_decl->_field_public,_57234_s->_field_decl->_field_token)))) {
		(*this)._method_push_err(_57249_error_token,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_57234_s->_field_decl->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_57234_s)),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_57234_s),true,jule::new_ref<_1118cee40_Const>()));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_fn_ins(jule::Ref<_11072eb20_FnIns> _59130_f) {
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_59130_f)),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_59130_f),false,jule::new_ref<_1118cee40_Const>()));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_fn(jule::Ref<_11072eb20_Fn> _60430_f,_1106ec050_Token _60438_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_60430_f->_field_public,_60430_f->_field_token)))) {
		(*this)._method_push_err(_60438_error_token,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_60430_f->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_11072eb20_FnIns> _61217_ins = _60430_f->_method_instance();
	(*this)._method_push_reference_to_fn(_61217_ins);
	return (*this)._method_eval_fn_ins(_61217_ins);
}



inline void _1112d7f10_Eval::_method_push_illegal_cycle_error(jule::Ref<_110e92c80_Var> _61743_v1,jule::Ref<_110e92c80_Var> _61753_v2,jule::Str& _61768_message) {
	
	jule::Str _62013_refers_to = _127e05da0_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_61743_v1->_field_ident),jule::Any(_61753_v2->_field_ident)}));
	_61768_message=((_110d9ce90_str_repeat(jule::Str(" ", 1),4LL) + _62013_refers_to) + jule::Str("\n", 1)) + _61768_message;
}



inline jule::Bool _1112d7f10_Eval::_method_check_cross_cycle(jule::Ref<_110e92c80_Var> _62436_v,jule::Str& _62450_message) {
	{
		auto __julec_range_expr = _62436_v->_field_depends;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e92c80_Var> _1112d7f10_d = *__julec_range_begin;
			_iter_begin_4612017680:;
			{
				if ((_1112d7f10_d).alloc == ((*this)._field_owner).alloc) {
					(*this)._method_push_illegal_cycle_error(_62436_v,_1112d7f10_d,_62450_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_1112d7f10_d,_62450_message)))) {
					(*this)._method_push_illegal_cycle_error(_62436_v,_1112d7f10_d,_62450_message);
					return false;
				}
			}
			_iter_next_4612017680:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1112d7f10_d = *__julec_range_begin; goto _iter_begin_4612017680; }
			_iter_end_4612017680:;
		}
	}
	return true;
}



inline jule::Bool _1112d7f10_Eval::_method_check_illegal_cycles(jule::Ref<_110e92c80_Var> _64343_v,_1106ec050_Token _64352_decl_token) {
	jule::Bool _64373_ok = jule::Bool();
	if ((!(jule::real((*this)._field_owner)))) {
		_64373_ok = true;
		return _64373_ok;
	}
	if (((*this)._field_owner).alloc == (_64343_v).alloc) {
		(*this)._method_push_err((*this)._field_owner->_field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*this)._field_owner->_field_ident)}));
		_64373_ok = false;
		return _64373_ok;
	}
	jule::Str _65517_message = jule::Str("", 0);
	if ((!((*this)._method_check_cross_cycle(_64343_v,_65517_message)))) {
		jule::Str _65821_err_msg = _65517_message;
		_65517_message=jule::Str("", 0);
		(*this)._method_push_illegal_cycle_error((*this)._field_owner,_64343_v,_65517_message);
		_65821_err_msg=_65821_err_msg + _65517_message;
		(*this)._method_push_err(_64352_decl_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_65821_err_msg)}));
		_64373_ok = false;
		return _64373_ok;
	}
	(*this)._field_owner->_field_depends=jule::append((*this)._field_owner->_field_depends,jule::Slice<jule::Ref<_110e92c80_Var>>({_64343_v}));
	_64373_ok = true;
	return _64373_ok;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_var(jule::Ref<_110e92c80_Var> _67031_v,_1106ec050_Token _67040_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_67031_v->_field_public,_67031_v->_field_token)))) {
		(*this)._method_push_err(_67040_error_token,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_67031_v->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	_67031_v->_field_used=true;
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_110e92bc0_Sema>>())) { goto _case_end_4612048672; }
		_case_begin_4612048672:;
		{
			jule::Bool _68217_ok = (*this)._method_check_illegal_cycles(_67031_v,_67040_error_token);
			if ((!(_68217_ok))) {
				return jule::new_ref<_1112d7f10_Data>();
			}
		}
		goto _match_end_4612043568;
		_case_end_4612048672:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_ScopeChecker>>())) { goto _case_end_4612048864; }
		_case_begin_4612048864:;
		{
			if ((!(_67031_v->_field_reference)) || (*this)._method_is_unsafe()) {
				goto _match_end_4612043568;
			}
			jule::Ref<_110af2660_ScopeChecker> _69221_s = (*this)._field_lookup.operator jule::Ref<_110af2660_ScopeChecker>();
			_iter_begin_4612051888:;
			if (!((!(jule::real(_69221_s->_field_owner))) && jule::real(_69221_s->_field_parent))) { goto _iter_end_4612051888; }
			{
				_69221_s=_69221_s->_field_parent;
			}
			_iter_next_4612051888:;
			goto _iter_begin_4612051888;
			_iter_end_4612051888:;
			if ((jule::real(_69221_s->_field_owner) && _69221_s->_field_owner->_field_anon) && ((_67031_v->_field_scope).alloc != (_69221_s->_field_owner->_field_scope).alloc)) {
				(*this)._method_push_err(_67040_error_token,jule::Str("anonymous functions cannot access to reference \"@\" definition of parent scope", 77),jule::Slice<jule::Any>({jule::Any(_67031_v->_field_ident)}));
			}
		}
		goto _match_end_4612043568;
		_case_end_4612048864:;
		_match_end_4612043568:;
	}
	(*this)._method_push_reference_to_var(_67031_v);
	if ((!(_67031_v->_field_cpp_linked)) && ((!(jule::real(_67031_v->_field_value))) || (!(jule::real(_67031_v->_field_value->_field_data))))) {
		if (_67031_v->_field_constant) {
			(*this)._field_s->_method_check_type_var(_67031_v,(*this)._field_s);
			if ((!(jule::real(_67031_v->_field_value->_field_data)))) {
				return jule::new_ref<_1112d7f10_Data>();
			}
		}
	}
	if ((!(jule::real(_67031_v->_field_kind))) || (!(jule::real(_67031_v->_field_kind->_field_kind)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_1112d7f10_Data> _71817_d = jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(_67031_v->_field_kind->_field_kind->_method_clone(),jule::Ref<_1116aff70_TypeKind>(),_67031_v->_field_mutable,_67031_v->_field_reference,(!(_67031_v->_field_constant)),jule::Bool(),jule::Bool(),jule::Any(_67031_v),false,jule::Ref<_1118cee40_Const>()));
	if (((!(_67031_v->_field_cpp_linked)) && _67031_v->_method_is_initialized()) && jule::real(_67031_v->_field_value->_field_data)) {
		_71817_d->_field_is_rune=_67031_v->_field_value->_field_data->_field_is_rune;
	}
	if (_67031_v->_field_constant) {
		_71817_d->_field_constant=jule::new_ref<_1118cee40_Const>(_67031_v->_field_value->_field_data->_field_constant.get());
		_71817_d->_field_model=jule::Any(_71817_d->_field_constant);
	}
	if (jule::real(_71817_d->_field_kind->_method_fnc())) {
		jule::Ref<_11072eb20_FnIns> _73721_f = _71817_d->_field_kind->_method_fnc();
		if (jule::real(_73721_f->_field_decl)) {
			_73721_f->_field_decl->_field_ident=_67031_v->_field_ident;
		}
	}
	return _71817_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_type_alias(jule::Ref<_1116aff70_TypeAlias> _74838_ta,_1106ec050_Token _74854_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_74838_ta->_field_public,_74838_ta->_field_token)))) {
		(*this)._method_push_err(_74854_error_token,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_74838_ta->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	_74838_ta->_field_used=true;
	jule::Trait<_1116aff70_Kind> _75717_kind = _74838_ta->_field_kind->_field_kind->_field_kind;
	{
		auto _match_expr{ _75717_kind };
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_StructIns>>())) { goto _case_end_4612092480; }
		_case_begin_4612092480:;
		{
			return (*this)._method_eval_struct(_75717_kind.operator jule::Ref<_1109372e0_StructIns>(),_74854_error_token);
		}
		goto _match_end_4612090096;
		_case_end_4612092480:;
		if (!(_match_expr.type_is<jule::Ref<_110e453c0_Enum>>())) { goto _case_end_4612092592; }
		_case_begin_4612092592:;
		{
			return (*this)._method_eval_enum(_75717_kind.operator jule::Ref<_110e453c0_Enum>(),_74854_error_token);
		}
		goto _match_end_4612090096;
		_case_end_4612092592:;
		_case_begin_4612092176:;
		{
			jule::Ref<_1112d7f10_Data> _76621_d = jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(_74838_ta->_field_kind->_field_kind->_method_clone(),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),true,jule::Ref<_1118cee40_Const>()));
			if (_74838_ta->_field_cpp_linked) {
				_76621_d->_field_kind->_field_cpp_ident=_74838_ta->_field_ident;
			}
			_76621_d->_field_model=jule::Any(_76621_d->_field_kind);
			return _76621_d;
		}
		goto _match_end_4612090096;
		_case_end_4612092176:;
		_match_end_4612090096:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_def(jule::Any _78131_def,_1106ec050_Token _78141_ident) {
	{
		auto _match_expr{ _78131_def };
		if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4612108640; }
		_case_begin_4612108640:;
		{
			return (*this)._method_eval_var(_78131_def.operator jule::Ref<_110e92c80_Var>(),_78141_ident);
		}
		goto _match_end_4612104272;
		_case_end_4612108640:;
		if (!(_match_expr.type_is<jule::Ref<_110e453c0_Enum>>())) { goto _case_end_4612108304; }
		_case_begin_4612108304:;
		{
			return (*this)._method_eval_enum(_78131_def.operator jule::Ref<_110e453c0_Enum>(),_78141_ident);
		}
		goto _match_end_4612104272;
		_case_end_4612108304:;
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_Struct>>())) { goto _case_end_4612108416; }
		_case_begin_4612108416:;
		{
			return (*this)._method_eval_struct(_78131_def.operator jule::Ref<_1109372e0_Struct>()->_method_instance(),_78141_ident);
		}
		goto _match_end_4612104272;
		_case_end_4612108416:;
		if (!(_match_expr.type_is<jule::Ref<_11072eb20_Fn>>())) { goto _case_end_4612105040; }
		_case_begin_4612105040:;
		{
			return (*this)._method_eval_fn(_78131_def.operator jule::Ref<_11072eb20_Fn>(),_78141_ident);
		}
		goto _match_end_4612104272;
		_case_end_4612105040:;
		if (!(_match_expr.type_is<jule::Ref<_11072eb20_FnIns>>())) { goto _case_end_4612105152; }
		_case_begin_4612105152:;
		{
			return (*this)._method_eval_fn_ins(_78131_def.operator jule::Ref<_11072eb20_FnIns>());
		}
		goto _match_end_4612104272;
		_case_end_4612105152:;
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_TypeAlias>>())) { goto _case_end_4612105264; }
		_case_begin_4612105264:;
		{
			return (*this)._method_eval_type_alias(_78131_def.operator jule::Ref<_1116aff70_TypeAlias>(),_78141_ident);
		}
		goto _match_end_4612104272;
		_case_end_4612105264:;
		_case_begin_4612104656:;
		{
			(*this)._method_push_err(_78141_ident,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_78141_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4612104272;
		_case_end_4612104656:;
		_match_end_4612104272:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_ident(jule::Ref<_11054f670_IdentExpr> _80729_ident) {
	jule::Any _80817_def = (*this)._method_get_def(_80729_ident->_field_ident,_80729_ident->_field_cpp_linked);
	return (*this)._method_eval_def(_80817_def,_80729_ident->_field_token);
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_unary_minus(jule::Ref<_1112d7f10_Data> _81235_d) {
	jule::Ref<_1116aff70_Prim> _81313_t = _81235_d->_field_kind->_method_prim();
	if ((!(jule::real(_81313_t))) || (!(_1118e4c20_is_num(_81313_t->_method_to_str())))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_81235_d->_method_is_const()) {
		{
			if (!((_81235_d->_field_constant->_method_is_f64()))) { goto _case_end_4612130112; }
			_case_begin_4612130112:;
			{
				_81235_d->_field_constant->_method_set_f64(static_cast<jule::F64>((-(_81235_d->_field_constant->_method_read_f64()))));
			}
			goto _match_end_4612129904;
			_case_end_4612130112:;
			if (!((_81235_d->_field_constant->_method_is_i64()))) { goto _case_end_4612130240; }
			_case_begin_4612130240:;
			{
				_81235_d->_field_constant->_method_set_f64(static_cast<jule::F64>((-(_81235_d->_field_constant->_method_as_f64()))));
			}
			goto _match_end_4612129904;
			_case_end_4612130240:;
			if (!((_81235_d->_field_constant->_method_is_u64()))) { goto _case_end_4612130368; }
			_case_begin_4612130368:;
			{
				_81235_d->_field_constant->_method_set_f64(static_cast<jule::F64>((-(_81235_d->_field_constant->_method_as_f64()))));
			}
			goto _match_end_4612129904;
			_case_end_4612130368:;
			_match_end_4612129904:;
		}
		_1112d7f10_normalize_type(_81235_d);
	}
	_81235_d->_field_lvalue=false;
	_81235_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_UnaryExprModel>(new( std::nothrow ) _110e4e8a0_UnaryExprModel(_81235_d->_field_model,jule::Str("-", 1))));
	return _81235_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_unary_plus(jule::Ref<_1112d7f10_Data> _83534_d) {
	jule::Ref<_1116aff70_Prim> _83613_t = _83534_d->_field_kind->_method_prim();
	if ((!(jule::real(_83613_t))) || (!(_1118e4c20_is_num(_83613_t->_method_to_str())))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_83534_d->_method_is_const()) {
		{
			if (!((_83534_d->_field_constant->_method_is_f64()))) { goto _case_end_4612147504; }
			_case_begin_4612147504:;
			{
				_83534_d->_field_constant->_method_set_f64(static_cast<jule::F64>((+(_83534_d->_field_constant->_method_read_f64()))));
			}
			goto _match_end_4612147296;
			_case_end_4612147504:;
			if (!((_83534_d->_field_constant->_method_is_i64()))) { goto _case_end_4612147632; }
			_case_begin_4612147632:;
			{
				_83534_d->_field_constant->_method_set_f64(static_cast<jule::F64>((+(_83534_d->_field_constant->_method_as_f64()))));
			}
			goto _match_end_4612147296;
			_case_end_4612147632:;
			if (!((_83534_d->_field_constant->_method_is_u64()))) { goto _case_end_4612147760; }
			_case_begin_4612147760:;
			{
				_83534_d->_field_constant->_method_set_f64(static_cast<jule::F64>((+(_83534_d->_field_constant->_method_as_f64()))));
			}
			goto _match_end_4612147296;
			_case_end_4612147760:;
			_match_end_4612147296:;
		}
		_1112d7f10_normalize_type(_83534_d);
	}
	_83534_d->_field_lvalue=false;
	_83534_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_UnaryExprModel>(new( std::nothrow ) _110e4e8a0_UnaryExprModel(_83534_d->_field_model,jule::Str("+", 1))));
	return _83534_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_unary_caret(jule::Ref<_1112d7f10_Data> _85835_d) {
	jule::Ref<_1116aff70_Prim> _85913_t = _85835_d->_field_kind->_method_prim();
	if ((!(jule::real(_85913_t))) || (!(_1118e4c20_is_int(_85913_t->_method_to_str())))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_85835_d->_method_is_const()) {
		{
			if (!((_85835_d->_field_constant->_method_is_i64()))) { goto _case_end_4612164848; }
			_case_begin_4612164848:;
			{
				_85835_d->_field_constant->_method_set_i64(static_cast<jule::I64>((~(_85835_d->_field_constant->_method_read_i64()))));
			}
			goto _match_end_4612164656;
			_case_end_4612164848:;
			if (!((_85835_d->_field_constant->_method_is_u64()))) { goto _case_end_4612164976; }
			_case_begin_4612164976:;
			{
				_85835_d->_field_constant->_method_set_u64(static_cast<jule::U64>((~(_85835_d->_field_constant->_method_read_u64()))));
			}
			goto _match_end_4612164656;
			_case_end_4612164976:;
			_match_end_4612164656:;
		}
	}
	_85835_d->_field_lvalue=false;
	_85835_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_UnaryExprModel>(new( std::nothrow ) _110e4e8a0_UnaryExprModel(_85835_d->_field_model,jule::Str("^", 1))));
	return _85835_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_unary_excl(jule::Ref<_1112d7f10_Data> _88234_d) {
	jule::Ref<_1116aff70_Prim> _88313_t = _88234_d->_field_kind->_method_prim();
	if ((!(jule::real(_88313_t))) || (!(_88313_t->_method_is_bool()))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_88234_d->_method_is_const()) {
		{
			if (!((_88234_d->_field_constant->_method_is_bool()))) { goto _case_end_4612178512; }
			_case_begin_4612178512:;
			{
				_88234_d->_field_constant->_method_set_bool((!(_88234_d->_field_constant->_method_read_bool())));
			}
			goto _match_end_4612178336;
			_case_end_4612178512:;
			_match_end_4612178336:;
		}
	}
	_88234_d->_field_lvalue=false;
	_88234_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_UnaryExprModel>(new( std::nothrow ) _110e4e8a0_UnaryExprModel(_88234_d->_field_model,jule::Str("!", 1))));
	return _88234_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_unary_star(jule::Ref<_1112d7f10_Data> _90338_d,_1106ec050_Token _90348_op) {
	if ((!((*this)._method_is_unsafe()))) {
		(*this)._method_push_err(_90348_op,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1116aff70_Ptr> _90817_t = _90338_d->_field_kind->_method_ptr();
	if ((!(jule::real(_90817_t))) || _90817_t->_method_is_unsafe()) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::drop(_90338_d->_field_constant);
	_90338_d->_field_lvalue=true;
	_90338_d->_field_kind=_90817_t->_field_elem;
	_90338_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_UnaryExprModel>(new( std::nothrow ) _110e4e8a0_UnaryExprModel(_90338_d->_field_model,jule::Str("*", 1))));
	return _90338_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_unary_amper(jule::Ref<_1112d7f10_Data> _92235_d) {
	{
		auto _match_expr{ _92235_d->_field_model };
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_StructLitExprModel>>())) { goto _case_end_4612201472; }
		_case_begin_4612201472:;
		{
			jule::Ref<_110e4e8a0_StructLitExprModel> _92521_lit = _92235_d->_field_model.operator jule::Ref<_110e4e8a0_StructLitExprModel>();
			_92235_d->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1116aff70_Ref>(new( std::nothrow ) _1116aff70_Ref(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_92521_lit->_field_strct))))));
			_92235_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_AllocStructLitExprModel>(new( std::nothrow ) _110e4e8a0_AllocStructLitExprModel(_92521_lit)));
		}
		goto _match_end_4612197104;
		_case_end_4612201472:;
		_case_begin_4612197760:;
		{
			{
				if (!((jule::real(_92235_d->_field_kind->_method_ref())))) { goto _case_end_4612200496; }
				_case_begin_4612200496:;
				{
					_92235_d->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1116aff70_Ptr>(new( std::nothrow ) _1116aff70_Ptr(_92235_d->_field_kind->_method_ref()->_field_elem->_method_clone()))));
					_92235_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_GetRefPtrExprModel>(new( std::nothrow ) _110e4e8a0_GetRefPtrExprModel(_92235_d->_field_model)));
				}
				goto _match_end_4612198928;
				_case_end_4612200496:;
				if (!((_1116aff70_can_get_ptr(_92235_d)))) { goto _case_end_4612200080; }
				_case_begin_4612200080:;
				{
					_92235_d->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1116aff70_Ptr>(new( std::nothrow ) _1116aff70_Ptr(_92235_d->_field_kind->_method_clone()))));
					_92235_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_UnaryExprModel>(new( std::nothrow ) _110e4e8a0_UnaryExprModel(_92235_d->_field_model,jule::Str("&", 1))));
				}
				goto _match_end_4612198928;
				_case_end_4612200080:;
				_case_begin_4612199072:;
				{
					jule::drop(_92235_d);
				}
				goto _match_end_4612198928;
				_case_end_4612199072:;
				_match_end_4612198928:;
			}
		}
		goto _match_end_4612197104;
		_case_end_4612197760:;
		_match_end_4612197104:;
	}
	if (jule::real(_92235_d)) {
		jule::drop(_92235_d->_field_constant);
		_92235_d->_field_lvalue=true;
		_92235_d->_field_mutable=true;
	}
	return _92235_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_unary_type_decl(jule::Ref<_1112d7f10_Data> _96943_d,jule::Ref<_11054f670_UnaryExpr> _96953_u) {
	_1116aff70_TypeChecker _97017_tc = _1116aff70_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ref<_1116aff70_Referencer>(),_96953_u->_field_op,jule::Slice<jule::Ref<_11054f670_GenericDecl>>(),jule::Slice<jule::Ref<_1116aff70_TypeAlias>>(),jule::Bool());
	{
		auto _match_expr{ _96953_u->_field_op._field_kind };
		if (!((jule::Str("*", 1)) == _match_expr)) { goto _case_end_4612224304; }
		_case_begin_4612224304:;
		{
			_96943_d->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_97017_tc._method_build_ptr_from_type(_96943_d->_field_kind)));
		}
		goto _match_end_4612218000;
		_case_end_4612224304:;
		if (!((jule::Str("&", 1)) == _match_expr)) { goto _case_end_4612224864; }
		_case_begin_4612224864:;
		{
			_96943_d->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_97017_tc._method_build_ref_from_type(_96943_d->_field_kind)));
		}
		goto _match_end_4612218000;
		_case_end_4612224864:;
		_case_begin_4612220432:;
		{
			(*this)._method_push_err(_96953_u->_field_op,jule::Str("invalid expression for unary @ operator", 39),jule::Slice<jule::Any>({jule::Any(_96953_u->_field_op._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4612218000;
		_case_end_4612220432:;
		_match_end_4612218000:;
	}
	_96943_d->_field_decl=true;
	return _96943_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_unary(jule::Ref<_11054f670_UnaryExpr> _99234_u) {
	jule::Ref<_1116aff70_TypeKind> _99317_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_99317_prefix;
	});
	jule::Ref<_1112d7f10_Data> _99717_d = this->self->_method_eval_expr_kind(_99234_u->_field_expr);
	if ((!(jule::real(_99717_d)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_99717_d->_field_decl) {
		return this->self->_method_eval_unary_type_decl(_99717_d,_99234_u);
	}
	jule::Ref<_1116aff70_TypeKind> _100617_cast_kind = _99717_d->_field_cast_kind;
	{
		auto _match_expr{ _99234_u->_field_op._field_kind };
		if (!((jule::Str("-", 1)) == _match_expr)) { goto _case_end_4612241968; }
		_case_begin_4612241968:;
		{
			_99717_d=this->self->_method_eval_unary_minus(_99717_d);
		}
		goto _match_end_4612239584;
		_case_end_4612241968:;
		if (!((jule::Str("+", 1)) == _match_expr)) { goto _case_end_4612241600; }
		_case_begin_4612241600:;
		{
			_99717_d=this->self->_method_eval_unary_plus(_99717_d);
		}
		goto _match_end_4612239584;
		_case_end_4612241600:;
		if (!((jule::Str("^", 1)) == _match_expr)) { goto _case_end_4612241712; }
		_case_begin_4612241712:;
		{
			_99717_d=this->self->_method_eval_unary_caret(_99717_d);
		}
		goto _match_end_4612239584;
		_case_end_4612241712:;
		if (!((jule::Str("!", 1)) == _match_expr)) { goto _case_end_4612241008; }
		_case_begin_4612241008:;
		{
			_99717_d=this->self->_method_eval_unary_excl(_99717_d);
		}
		goto _match_end_4612239584;
		_case_end_4612241008:;
		if (!((jule::Str("*", 1)) == _match_expr)) { goto _case_end_4612241120; }
		_case_begin_4612241120:;
		{
			_99717_d=this->self->_method_eval_unary_star(_99717_d,_99234_u->_field_op);
		}
		goto _match_end_4612239584;
		_case_end_4612241120:;
		if (!((jule::Str("&", 1)) == _match_expr)) { goto _case_end_4612241232; }
		_case_begin_4612241232:;
		{
			_99717_d=this->self->_method_eval_unary_amper(_99717_d);
		}
		goto _match_end_4612239584;
		_case_end_4612241232:;
		_case_begin_4612236688:;
		{
			jule::drop(_99717_d);
		}
		goto _match_end_4612239584;
		_case_end_4612236688:;
		_match_end_4612239584:;
	}
	if ((!(jule::real(_99717_d)))) {
		this->self->_method_push_err(_99234_u->_field_op,jule::Str("invalid expression for unary @ operator", 39),jule::Slice<jule::Any>({jule::Any(_99234_u->_field_op._field_kind)}));
	} else if (_99717_d->_method_is_const()) {
		_99717_d->_field_model=jule::Any(_99717_d->_field_constant);
	} else if (jule::real(_100617_cast_kind)) {
		_99717_d->_field_cast_kind=_100617_cast_kind;
		_1112d7f10_apply_cast_kind(_99717_d);
	}
	return _99717_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_variadic(jule::Ref<_11054f670_VariadicExpr> _102937_v) {
	jule::Ref<_1116aff70_TypeKind> _103017_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_103017_prefix;
	});
	jule::Ref<_1112d7f10_Data> _103417_d = this->self->_method_eval_expr_kind(_102937_v->_field_expr);
	if ((!(jule::real(_103417_d)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (jule::real(_103417_d->_field_kind->_method_ref())) {
		_103417_d->_field_kind=_103417_d->_field_kind->_method_ref()->_field_elem;
		_103417_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_ExplicitDerefExprModel>(new( std::nothrow ) _110e4e8a0_ExplicitDerefExprModel(_103417_d->_field_model)));
	}
	if ((!(_1116aff70_is_variadicable(_103417_d->_field_kind)))) {
		this->self->_method_push_err(_102937_v->_field_token,jule::Str("@ data-type is not variadicable", 31),jule::Slice<jule::Any>({jule::Any(_103417_d->_field_kind->_method_to_str())}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	_103417_d->_field_variadiced=true;
	_103417_d->_field_kind=_103417_d->_field_kind->_method_slc()->_field_elem;
	_103417_d->_field_kind->_field_variadic=true;
	return _103417_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_unsafe(jule::Ref<_11054f670_UnsafeExpr> _105735_u) {
	jule::Bool _105813_unsafety = this->self->_field_unsafety;
	this->self->_field_unsafety=true;
	jule::Ref<_1112d7f10_Data> _106117_d = this->self->_method_eval_expr_kind(_105735_u->_field_expr);
	this->self->_field_unsafety=_105813_unsafety;
	return _106117_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_arr(jule::Ref<_11054f670_SliceExpr> _106832_s) {
	jule::Ref<_1116aff70_Arr> _107017_pt = this->self->_field_prefix->_method_arr();
	jule::Ref<_1116aff70_Arr> _107217_arr = jule::new_struct<_1116aff70_Arr>(new( std::nothrow ) _1116aff70_Arr(false,0LL,_107017_pt->_field_elem));
	if (_107017_pt->_field_auto) {
		_107217_arr->_field_n=static_cast<jule::I64>(_106832_s->_field_elems.len());
	} else {
		_107217_arr->_field_n=static_cast<jule::I64>(_106832_s->_field_elems.len());
		if (_107217_arr->_field_n > _107017_pt->_field_n) {
			this->self->_method_push_err(_106832_s->_field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>({}));
		} else if (_107217_arr->_field_n < _107017_pt->_field_n) {
			_107217_arr->_field_n=_107017_pt->_field_n;
		}
	}
	jule::Ref<_110e4e8a0_ArrayExprModel> _108917_model = jule::new_struct<_110e4e8a0_ArrayExprModel>(new( std::nothrow ) _110e4e8a0_ArrayExprModel(_107217_arr,jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_106832_s->_field_elems.len())))));
	jule::Ref<_1116aff70_TypeKind> _109417_prefix = this->self->_field_prefix;
	this->self->_field_prefix=_107217_arr->_field_elem;
	{
		auto __julec_range_expr = _106832_s->_field_elems;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1112d7f10_i = 0;
			jule::Any _1112d7f10_elem = *__julec_range_begin;
			_iter_begin_4612294528:;
			{
				jule::Ref<_1112d7f10_Data> _109721_d = this->self->_method_eval_expr_kind(_1112d7f10_elem);
				if ((!(jule::real(_109721_d)))) {
					goto _iter_next_4612294528;
				}
				this->self->_field_s->_method_check_assign_type(_107217_arr->_field_elem,_109721_d,_106832_s->_field_token,true);
				_108917_model->_field_elems[static_cast<jule::Int>(_1112d7f10_i)]=_109721_d->_field_model;
			}
			_iter_next_4612294528:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1112d7f10_i; _1112d7f10_elem = *__julec_range_begin; goto _iter_begin_4612294528; }
			_iter_end_4612294528:;
		}
	}
	this->self->_field_prefix=_109417_prefix;
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_107217_arr)),jule::Ref<_1116aff70_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_108917_model),jule::Bool(),jule::Ref<_1118cee40_Const>()));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_exp_slc(jule::Ref<_11054f670_SliceExpr> _111436_s,jule::Ref<_1116aff70_TypeKind> _111451_elem_type) {
	jule::Ref<_1116aff70_Slc> _111517_slc = jule::new_struct<_1116aff70_Slc>(new( std::nothrow ) _1116aff70_Slc(_111451_elem_type));
	jule::Ref<_110e4e8a0_SliceExprModel> _111917_model = jule::new_struct<_110e4e8a0_SliceExprModel>(new( std::nothrow ) _110e4e8a0_SliceExprModel(_111451_elem_type,jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_111436_s->_field_elems.len())))));
	jule::Ref<_1116aff70_TypeKind> _112417_prefix = this->self->_field_prefix;
	this->self->_field_prefix=_111517_slc->_field_elem;
	{
		auto __julec_range_expr = _111436_s->_field_elems;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1112d7f10_i = 0;
			jule::Any _1112d7f10_elem = *__julec_range_begin;
			_iter_begin_4612313104:;
			{
				jule::Ref<_1112d7f10_Data> _112721_d = this->self->_method_eval_expr_kind(_1112d7f10_elem);
				if ((!(jule::real(_112721_d)))) {
					goto _iter_next_4612313104;
				}
				this->self->_field_s->_method_check_assign_type(_111517_slc->_field_elem,_112721_d,_111436_s->_field_token,true);
				_111917_model->_field_elems[static_cast<jule::Int>(_1112d7f10_i)]=_112721_d->_field_model;
			}
			_iter_next_4612313104:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1112d7f10_i; _1112d7f10_elem = *__julec_range_begin; goto _iter_begin_4612313104; }
			_iter_end_4612313104:;
		}
	}
	this->self->_field_prefix=_112417_prefix;
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_111517_slc)),jule::Ref<_1116aff70_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_111917_model),jule::Bool(),jule::Ref<_1118cee40_Const>()));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_slice_expr(jule::Ref<_11054f670_SliceExpr> _114439_s) {
	if (jule::real(this->self->_field_prefix)) {
		{
			if (!((jule::real(this->self->_field_prefix->_method_arr())))) { goto _case_end_4612327328; }
			_case_begin_4612327328:;
			{
				return this->self->_method_eval_arr(_114439_s);
			}
			goto _match_end_4612327136;
			_case_end_4612327328:;
			if (!((jule::real(this->self->_field_prefix->_method_slc())))) { goto _case_end_4612327456; }
			_case_begin_4612327456:;
			{
				jule::Ref<_1116aff70_Slc> _115125_pt = this->self->_field_prefix->_method_slc();
				return this->self->_method_eval_exp_slc(_114439_s,_115125_pt->_field_elem);
			}
			goto _match_end_4612327136;
			_case_end_4612327456:;
			_match_end_4612327136:;
		}
	}
	jule::Ref<_1116aff70_TypeKind> _115617_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	if (_114439_s->_field_elems.len() == 0LL) {
		this->self->_method_push_err(_114439_s->_field_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_1112d7f10_Data> _116417_first_elem = this->self->_method_eval_expr_kind(_114439_s->_field_elems[0LL]);
	if ((!(jule::real(_116417_first_elem)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_1112d7f10_Data> _116917_d = this->self->_method_eval_exp_slc(_114439_s,_116417_first_elem->_field_kind);
	this->self->_field_prefix=_115617_prefix;
	return _116917_d;
}



inline void _1112d7f10_Eval::_method_check_integer_indexing_by_data(jule::Ref<_1112d7f10_Data> _117553_d,_1106ec050_Token _117563_token) {
	jule::Str _117613_err_key = _1112d7f10_check_data_for_integer_indexing(_117553_d);
	if (_117613_err_key != jule::Str("", 0)) {
		(*this)._method_push_err(_117563_token,_117613_err_key,jule::Slice<jule::Any>({}));
	}
}



inline void _1112d7f10_Eval::_method_indexing_ptr(jule::Ref<_1112d7f10_Data> _118235_d,jule::Ref<_1112d7f10_Data> _118249_index,jule::Ref<_11054f670_IndexingExpr> _118263_i) {
	(*this)._method_check_integer_indexing_by_data(_118249_index,_118263_i->_field_token);
	jule::Ref<_1116aff70_Ptr> _118517_ptr = _118235_d->_field_kind->_method_ptr();
	{
		if (!((_118517_ptr->_method_is_unsafe()))) { goto _case_end_4612352992; }
		_case_begin_4612352992:;
		{
			(*this)._method_push_err(_118263_i->_field_token,jule::Str("unsafe pointers not supports indexing", 37),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4612352816;
		_case_end_4612352992:;
		if (!(((!((*this)._method_is_unsafe()))))) { goto _case_end_4612353120; }
		_case_begin_4612353120:;
		{
			(*this)._method_push_err(_118263_i->_field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4612352816;
		_case_end_4612353120:;
		_match_end_4612352816:;
	}
	_118235_d->_field_kind=_118517_ptr->_field_elem->_method_clone();
}



inline void _1112d7f10_Eval::_method_indexing_arr(jule::Ref<_1112d7f10_Data> _119835_d,jule::Ref<_1112d7f10_Data> _119849_index,jule::Ref<_11054f670_IndexingExpr> _119863_i) {
	jule::Ref<_1116aff70_Arr> _119917_arr = _119835_d->_field_kind->_method_arr();
	_119835_d->_field_kind=_119917_arr->_field_elem->_method_clone();
	(*this)._method_check_integer_indexing_by_data(_119849_index,_119863_i->_field_token);
	if (_119849_index->_method_is_const() && (_119849_index->_field_constant->_method_as_f64() >= _119917_arr->_field_n)) {
		(*this)._method_push_err(_119863_i->_field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>({}));
	}
}



inline void _1112d7f10_Eval::_method_indexing_slc(jule::Ref<_1112d7f10_Data> _120735_d,jule::Ref<_1112d7f10_Data> _120748_index,jule::Ref<_11054f670_IndexingExpr> _120762_i) {
	jule::Ref<_1116aff70_Slc> _120817_slc = _120735_d->_field_kind->_method_slc();
	_120735_d->_field_kind=_120817_slc->_field_elem->_method_clone();
	(*this)._method_check_integer_indexing_by_data(_120748_index,_120762_i->_field_token);
}



inline void _1112d7f10_Eval::_method_indexing_map(jule::Ref<_1112d7f10_Data> _121335_d,jule::Ref<_1112d7f10_Data> _121349_index,jule::Ref<_11054f670_IndexingExpr> _121367_i) {
	if ((!(jule::real(_121349_index)))) {
		return;
	}
	jule::Ref<_1116aff70_Map> _121817_m = _121335_d->_field_kind->_method_map();
	_1111c0be0_AssignTypeChecker _121917_atc = _1111c0be0_AssignTypeChecker((*this)._field_s,_121817_m->_field_key,_121349_index,_121367_i->_field_token,true);
	_121917_atc._method_check();
	_121335_d->_field_kind=_121817_m->_field_val->_method_clone();
}



inline void _1112d7f10_Eval::_method_indexing_str(jule::Ref<_1112d7f10_Data> _123135_d,jule::Ref<_1112d7f10_Data> _123149_index,jule::Ref<_11054f670_IndexingExpr> _123163_i) {
	
	_123135_d->_field_kind->_field_kind=_1116aff70_build_prim_type(jule::Str("u8", 2));
	if ((!(jule::real(_123149_index)))) {
		return;
	}
	(*this)._method_check_integer_indexing_by_data(_123149_index,_123163_i->_field_token);
	if ((!(_123149_index->_method_is_const()))) {
		jule::drop(_123135_d->_field_constant);
		return;
	}
	if (_123135_d->_method_is_const()) {
		_1106ec050_Token _124717_error_token = _123163_i->_field_token;
		jule::I64 _124817_i = _123149_index->_field_constant->_method_as_i64();
		jule::Str _124917_s = _123135_d->_field_constant->_method_read_str();
		if (static_cast<jule::Int>(_124817_i) >= _124917_s.len()) {
			(*this)._method_push_err(_124717_error_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>({}));
		} else {
			_123135_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_124917_s[static_cast<jule::Int>(_124817_i)]));
		}
	}
}



inline void _1112d7f10_Eval::_method_to_indexing(jule::Ref<_1112d7f10_Data> _125834_d,jule::Ref<_1112d7f10_Data> _125848_index,jule::Ref<_11054f670_IndexingExpr> _125866_i) {
	{
		if (!((jule::real(_125834_d->_field_kind->_method_ptr())))) { goto _case_end_4612411232; }
		_case_begin_4612411232:;
		{
			(*this)._method_indexing_ptr(_125834_d,_125848_index,_125866_i);
			return;
		}
		goto _match_end_4612411024;
		_case_end_4612411232:;
		if (!((jule::real(_125834_d->_field_kind->_method_arr())))) { goto _case_end_4612411360; }
		_case_begin_4612411360:;
		{
			(*this)._method_indexing_arr(_125834_d,_125848_index,_125866_i);
			return;
		}
		goto _match_end_4612411024;
		_case_end_4612411360:;
		if (!((jule::real(_125834_d->_field_kind->_method_slc())))) { goto _case_end_4612411488; }
		_case_begin_4612411488:;
		{
			(*this)._method_indexing_slc(_125834_d,_125848_index,_125866_i);
			return;
		}
		goto _match_end_4612411024;
		_case_end_4612411488:;
		if (!((jule::real(_125834_d->_field_kind->_method_map())))) { goto _case_end_4612411616; }
		_case_begin_4612411616:;
		{
			(*this)._method_indexing_map(_125834_d,_125848_index,_125866_i);
			return;
		}
		goto _match_end_4612411024;
		_case_end_4612411616:;
		if (!((jule::real(_125834_d->_field_kind->_method_prim())))) { goto _case_end_4612411744; }
		_case_begin_4612411744:;
		{
			jule::Ref<_1116aff70_Prim> _127717_prim = _125834_d->_field_kind->_method_prim();
			{
				if (!((_127717_prim->_method_is_str()))) { goto _case_end_4612422992; }
				_case_begin_4612422992:;
				{
					(*this)._method_indexing_str(_125834_d,_125848_index,_125866_i);
					return;
				}
				goto _match_end_4612422800;
				_case_end_4612422992:;
				_match_end_4612422800:;
			}
		}
		goto _match_end_4612411024;
		_case_end_4612411744:;
		_match_end_4612411024:;
	}
	(*this)._method_push_err(_125866_i->_field_token,jule::Str("@ data type is not support indexing", 35),jule::Slice<jule::Any>({jule::Any(_125834_d->_field_kind->_method_to_str())}));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_ident_decl_from_indexing(jule::Ref<_11054f670_IndexingExpr> _128853_i) {
	{
		auto _match_expr{ _128853_i->_field_expr };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_IdentExpr>>())) { goto _case_end_4612430816; }
		goto _match_end_4612429376;
		_case_end_4612430816:;
		_case_begin_4612430032:;
		{
			this->self->_method_push_err(_128853_i->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4612429376;
		_case_end_4612430032:;
		_match_end_4612429376:;
	}
	jule::Ref<_11054f670_IdentTypeDecl> _129617_decl = jule::new_struct<_11054f670_IdentTypeDecl>(new( std::nothrow ) _11054f670_IdentTypeDecl(_1106ec050_Token(),_128853_i->_field_expr.operator jule::Ref<_11054f670_IdentExpr>()->_field_ident,jule::Bool(),jule::Slice<jule::Ref<_11054f670_TypeDecl>>()));
	{
		auto _match_expr{ _128853_i->_field_index };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_UnaryExpr>>())) { goto _case_end_4612437712; }
		_case_begin_4612437712:;
		{
			jule::Ref<_1112d7f10_Data> _130421_d = this->self->_method_eval_unary(_128853_i->_field_index.operator jule::Ref<_11054f670_UnaryExpr>());
			if ((!(_130421_d->_field_decl))) {
				this->self->_method_push_err(_128853_i->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return jule::new_ref<_1112d7f10_Data>();
			}
			_129617_decl->_field_generics=jule::append(_129617_decl->_field_generics,jule::Slice<jule::Ref<_11054f670_TypeDecl>>({jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_1106ec050_Token(),jule::Any(_130421_d->_field_kind)))}));
		}
		goto _match_end_4612434704;
		_case_end_4612437712:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_TypeDecl>>())) { goto _case_end_4612438560; }
		_case_begin_4612438560:;
		{
			_129617_decl->_field_generics=jule::append(_129617_decl->_field_generics,jule::Slice<jule::Ref<_11054f670_TypeDecl>>({_128853_i->_field_index.operator jule::Ref<_11054f670_TypeDecl>()}));
		}
		goto _match_end_4612434704;
		_case_end_4612438560:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_IdentExpr>>())) { goto _case_end_4612438672; }
		_case_begin_4612438672:;
		{
			_129617_decl->_field_generics=jule::append(_129617_decl->_field_generics,jule::Slice<jule::Ref<_11054f670_TypeDecl>>({jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_1106ec050_Token(),jule::Any(jule::new_struct<_11054f670_IdentTypeDecl>(new( std::nothrow ) _11054f670_IdentTypeDecl(_1106ec050_Token(),_128853_i->_field_index.operator jule::Ref<_11054f670_IdentExpr>()->_field_ident,jule::Bool(),jule::Slice<jule::Ref<_11054f670_TypeDecl>>())))))}));
		}
		goto _match_end_4612434704;
		_case_end_4612438672:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_TupleExpr>>())) { goto _case_end_4612435616; }
		_case_begin_4612435616:;
		{
			{
				auto __julec_range_expr = _128853_i->_field_index.operator jule::Ref<_11054f670_TupleExpr>()->_field_expr;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Ref<_11054f670_Expr> _1112d7f10_expr = *__julec_range_begin;
					_iter_begin_4612452944:;
					{
						{
							auto _match_expr{ _1112d7f10_expr->_field_kind };
							if (!(_match_expr.type_is<jule::Ref<_11054f670_TypeDecl>>())) { goto _case_end_4612453920; }
							_case_begin_4612453920:;
							{
								_129617_decl->_field_generics=jule::append(_129617_decl->_field_generics,jule::Slice<jule::Ref<_11054f670_TypeDecl>>({_1112d7f10_expr->_field_kind.operator jule::Ref<_11054f670_TypeDecl>()}));
							}
							goto _match_end_4612444768;
							_case_end_4612453920:;
							if (!(_match_expr.type_is<jule::Ref<_11054f670_IdentExpr>>())) { goto _case_end_4612454032; }
							_case_begin_4612454032:;
							{
								_129617_decl->_field_generics=jule::append(_129617_decl->_field_generics,jule::Slice<jule::Ref<_11054f670_TypeDecl>>({jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_1106ec050_Token(),jule::Any(jule::new_struct<_11054f670_IdentTypeDecl>(new( std::nothrow ) _11054f670_IdentTypeDecl(_1106ec050_Token(),_1112d7f10_expr->_field_kind.operator jule::Ref<_11054f670_IdentExpr>()->_field_ident,jule::Bool(),jule::Slice<jule::Ref<_11054f670_TypeDecl>>())))))}));
							}
							goto _match_end_4612444768;
							_case_end_4612454032:;
							_match_end_4612444768:;
						}
					}
					_iter_next_4612452944:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _1112d7f10_expr = *__julec_range_begin; goto _iter_begin_4612452944; }
					_iter_end_4612452944:;
				}
			}
		}
		goto _match_end_4612434704;
		_case_end_4612435616:;
		_case_begin_4612435312:;
		{
			this->self->_method_push_err(_128853_i->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4612434704;
		_case_end_4612435312:;
		_match_end_4612434704:;
	}
	return this->self->_method_eval_type(jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_1106ec050_Token(),jule::Any(_129617_decl))));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_indexing(jule::Ref<_11054f670_IndexingExpr> _134037_i) {
	jule::Ref<_1116aff70_TypeKind> _134117_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_134117_prefix;
	});
	jule::Ref<_1112d7f10_Data> _134517_d = this->self->_method_eval_expr_kind(_134037_i->_field_expr);
	if ((!(jule::real(_134517_d)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_134517_d->_field_decl) {
		return this->self->_method_eval_ident_decl_from_indexing(_134037_i);
	}
	jule::Any _135517_expr_model = _134517_d->_field_model;
	jule::Ref<_1112d7f10_Data> _135617_index = this->self->_method_eval_expr_kind(_134037_i->_field_index);
	this->self->_method_to_indexing(_134517_d,_135617_index,_134037_i);
	if (jule::real(_135617_index)) {
		if (_134517_d->_method_is_const()) {
			_134517_d->_field_model=jule::Any(_134517_d->_field_constant);
		} else {
			_134517_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_IndexigExprModel>(new( std::nothrow ) _110e4e8a0_IndexigExprModel(_135517_expr_model,_135617_index->_field_model)));
		}
	}
	return _134517_d;
}



inline std::tuple<jule::Ref<_1112d7f10_Data>,jule::Ref<_1112d7f10_Data>> _1112d7f10_Eval::_method_eval_slicing_exprs(jule::Ref<_11054f670_SlicingExpr> _137742_s) {
	jule::Ref<_1116aff70_TypeKind> _137817_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_137817_prefix;
	});
	jule::Ref<_1112d7f10_Data> _138217_l = jule::new_ref<_1112d7f10_Data>();
	jule::Ref<_1112d7f10_Data> _138317_r = jule::new_ref<_1112d7f10_Data>();
	if (_137742_s->_field_start != nullptr) {
		_138217_l=this->self->_method_eval_expr_kind(_137742_s->_field_start);
		if (jule::real(_138217_l)) {
			this->self->_method_check_integer_indexing_by_data(_138217_l,_137742_s->_field_token);
		} else {
			return std::make_tuple(jule::new_ref<_1112d7f10_Data>(),jule::new_ref<_1112d7f10_Data>());
		}
	} else {
		_138217_l=jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1118cee40_Const::_static_method_new_i64(0LL)));
		_138217_l->_field_model=jule::Any(_138217_l->_field_constant);
	}
	if (_137742_s->_field_to != nullptr) {
		_138317_r=this->self->_method_eval_expr_kind(_137742_s->_field_to);
		if (jule::real(_138317_r)) {
			this->self->_method_check_integer_indexing_by_data(_138317_r,_137742_s->_field_token);
		} else {
			return std::make_tuple(jule::new_ref<_1112d7f10_Data>(),jule::new_ref<_1112d7f10_Data>());
		}
	}
	return std::make_tuple(_138217_l,_138317_r);
}



inline void _1112d7f10_Eval::_method_slicing_arr(jule::Ref<_1112d7f10_Data> _141230_d) {
	jule::Ref<_1116aff70_TypeKind> _141317_elem_type = _141230_d->_field_kind->_method_arr()->_field_elem->_method_clone();
	_141230_d->_field_kind->_field_kind=jule::new_struct<_1116aff70_Slc>(new( std::nothrow ) _1116aff70_Slc(_141317_elem_type));
	_141230_d->_field_lvalue=false;
	_141230_d->_field_mutable=_141230_d->_field_mutable || (!(_1116aff70_is_mut(_141317_elem_type)));
}



inline void _1112d7f10_Eval::_method_slicing_slc(jule::Ref<_1112d7f10_Data> _142330_d) {
	_142330_d->_field_lvalue=false;
}



inline void _1112d7f10_Eval::_method_slicing_str(jule::Ref<_1112d7f10_Data> _142730_d,jule::Ref<_1112d7f10_Data> _142740_l,jule::Ref<_1112d7f10_Data> _142750_r) {
	_142730_d->_field_lvalue=false;
	_142730_d->_field_mutable=true;
	if ((!(_142730_d->_method_is_const()))) {
		return;
	}
	if ((!(jule::real(_142740_l))) || (!(jule::real(_142750_r)))) {
		jule::drop(_142730_d->_field_constant);
		return;
	}
	if (_142740_l->_method_is_const() && _142750_r->_method_is_const()) {
		jule::I64 _144017_left = _142740_l->_field_constant->_method_as_i64();
		if (_144017_left < 0LL) {
			return;
		}
		jule::Str _144517_s = _142730_d->_field_constant->_method_read_str();
		jule::I64 _144621_right = 0LL;
		if ((!(jule::real(_142750_r)))) {
			_144621_right=static_cast<jule::I64>(_144517_s.len());
		} else {
			_144621_right=static_cast<jule::I64>(_142750_r->_field_constant->_method_as_i64());
		}
		if (_144017_left > _144621_right) {
			return;
		}
		_142730_d->_field_constant->_method_set_str(_144517_s.slice(static_cast<jule::Int>(_144017_left),static_cast<jule::Int>(_144621_right)));
	} else {
		jule::drop(_142730_d->_field_constant);
	}
}



inline void _1112d7f10_Eval::_method_check_slicing(jule::Ref<_1112d7f10_Data> _146236_d,jule::Ref<_1112d7f10_Data> _146246_l,jule::Ref<_1112d7f10_Data> _146256_r,jule::Ref<_11054f670_SlicingExpr> _146266_s) {
	{
		if (!((jule::real(_146236_d->_field_kind->_method_arr())))) { goto _case_end_4612531488; }
		_case_begin_4612531488:;
		{
			(*this)._method_slicing_arr(_146236_d);
			return;
		}
		goto _match_end_4612531264;
		_case_end_4612531488:;
		if (!((jule::real(_146236_d->_field_kind->_method_slc())))) { goto _case_end_4612531616; }
		_case_begin_4612531616:;
		{
			(*this)._method_slicing_slc(_146236_d);
			return;
		}
		goto _match_end_4612531264;
		_case_end_4612531616:;
		if (!((jule::real(_146236_d->_field_kind->_method_prim())))) { goto _case_end_4612531744; }
		_case_begin_4612531744:;
		{
			jule::Ref<_1116aff70_Prim> _147317_prim = _146236_d->_field_kind->_method_prim();
			{
				if (!((_147317_prim->_method_is_str()))) { goto _case_end_4612539184; }
				_case_begin_4612539184:;
				{
					(*this)._method_slicing_str(_146236_d,_146246_l,_146256_r);
					return;
				}
				goto _match_end_4612538992;
				_case_end_4612539184:;
				_match_end_4612538992:;
			}
		}
		goto _match_end_4612531264;
		_case_end_4612531744:;
		_match_end_4612531264:;
	}
	(*this)._method_push_err(_146266_s->_field_token,jule::Str("@ data type is not support slicing", 34),jule::Slice<jule::Any>({jule::Any(_146236_d->_field_kind->_method_to_str())}));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_slicing(jule::Ref<_11054f670_SlicingExpr> _148436_s) {
	jule::Ref<_1112d7f10_Data> _148517_d = this->self->_method_eval_expr_kind(_148436_s->_field_expr);
	if ((!(jule::real(_148517_d)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_1112d7f10_Data> _149018_l;
	jule::Ref<_1112d7f10_Data> _149025_r;
	std::tie(_149018_l,_149025_r) = this->self->_method_eval_slicing_exprs(_148436_s);
	if ((!(jule::real(_149018_l)))) {
		return _148517_d;
	}
	this->self->_method_check_slicing(_148517_d,_149018_l,_149025_r,_148436_s);
	jule::drop(_148517_d->_field_cast_kind);
	jule::Ref<_110e4e8a0_SlicingExprModel> _149817_model = jule::new_struct<_110e4e8a0_SlicingExprModel>(new( std::nothrow ) _110e4e8a0_SlicingExprModel(_148517_d->_field_model,_149018_l->_field_model,jule::Any()));
	if (jule::real(_149025_r)) {
		_149817_model->_field_right=_149025_r->_field_model;
	}
	_148517_d->_field_model=jule::Any(_149817_model);
	return _148517_d;
}



inline void _1112d7f10_Eval::_method_cast_ptr(jule::Ref<_1116aff70_TypeKind> _151127_t,jule::Ref<_1112d7f10_Data> _151145_d,_1106ec050_Token _151155_error_token) {
	if ((!((*this)._method_is_unsafe()))) {
		(*this)._method_push_err(_151155_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
		return;
	}
	jule::Ref<_1116aff70_Prim> _151713_prim = _151145_d->_field_kind->_method_prim();
	if ((!(jule::real(_151145_d->_field_kind->_method_ptr()))) && ((!(jule::real(_151713_prim))) || (!(_1118e4c20_is_int(_151713_prim->_method_to_str()))))) {
		(*this)._method_push_err(_151155_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_151145_d->_field_kind->_method_to_str()),jule::Any(_151127_t->_method_to_str())}));
	}
	jule::drop(_151145_d->_field_constant);
}



inline void _1112d7f10_Eval::_method_cast_struct(jule::Ref<_1116aff70_TypeKind> _152534_t,jule::Ref<_1112d7f10_Data> _152552_d,_1106ec050_Token _152562_error_token) {
	jule::Ref<_110e3f160_Trait> _152617_tr = _152552_d->_field_kind->_method_trt();
	if ((!(jule::real(_152617_tr)))) {
		(*this)._method_push_err(_152562_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_152552_d->_field_kind->_method_to_str()),jule::Any(_152534_t->_method_to_str())}));
		return;
	}
	jule::Ref<_1109372e0_StructIns> _153217_s = jule::new_ref<_1109372e0_StructIns>();
	if (jule::real(_152534_t->_method_ref())) {
		_153217_s=_152534_t->_method_ref()->_field_elem->_method_strct();
	} else {
		_153217_s=_152534_t->_method_strct();
	}
	(*this)._method_push_reference_to_struct(_153217_s);
	if ((!(_153217_s->_field_decl->_method_is_implements(_152617_tr)))) {
		(*this)._method_push_err(_152562_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_152552_d->_field_kind->_method_to_str()),jule::Any(_152534_t->_method_to_str())}));
	}
}



inline void _1112d7f10_Eval::_method_cast_ref(jule::Ref<_1116aff70_TypeKind> _154631_t,jule::Ref<_1112d7f10_Data> _154649_d,_1106ec050_Token _154659_error_token) {
	jule::Ref<_1116aff70_Ref> _154717_ref = _154631_t->_method_ref();
	if (jule::real(_154717_ref->_field_elem->_method_strct())) {
		(*this)._method_cast_struct(_154631_t,_154649_d,_154659_error_token);
		return;
	}
	(*this)._method_push_err(_154659_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_154649_d->_field_kind->_method_to_str()),jule::Any(_154631_t->_method_to_str())}));
}



inline void _1112d7f10_Eval::_method_cast_slc(jule::Ref<_1116aff70_TypeKind> _155631_t,jule::Ref<_1112d7f10_Data> _155649_d,_1106ec050_Token _155659_error_token) {
	if (jule::real(_155649_d->_field_kind->_method_enm())) {
		if ((!(jule::real(_155649_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_prim()))) || (!(_155649_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_prim()->_method_is_str()))) {
			(*this)._method_push_err(_155659_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_155649_d->_field_kind->_method_to_str()),jule::Any(_155631_t->_method_to_str())}));
			return;
		}
	} else if ((!(jule::real(_155649_d->_field_kind->_method_prim()))) || (!(_155649_d->_field_kind->_method_prim()->_method_is_str()))) {
		(*this)._method_push_err(_155659_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_155649_d->_field_kind->_method_to_str()),jule::Any(_155631_t->_method_to_str())}));
		return;
	}
	_155631_t=_155631_t->_method_slc()->_field_elem;
	jule::Ref<_1116aff70_Prim> _156813_prim = _155631_t->_method_prim();
	if ((!(jule::real(_156813_prim))) || ((!(_156813_prim->_method_is_u8())) && (!(_156813_prim->_method_is_i32())))) {
		(*this)._method_push_err(_155659_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_155649_d->_field_kind->_method_to_str()),jule::Any(_155631_t->_method_to_str())}));
	}
}



inline void _1112d7f10_Eval::_method_cast_str(jule::Ref<_1112d7f10_Data> _157431_d,_1106ec050_Token _157441_error_token) {
	if (jule::real(_157431_d->_field_kind->_method_enm())) {
		jule::Ref<_110e453c0_Enum> _157621_e = _157431_d->_field_kind->_method_enm();
		if (jule::real(_157621_e->_field_kind->_field_kind->_method_prim()) && _157621_e->_field_kind->_field_kind->_method_prim()->_method_is_str()) {
			return;
		}
	}
	if (jule::real(_157431_d->_field_kind->_method_prim())) {
		jule::Ref<_1116aff70_Prim> _158317_prim = _157431_d->_field_kind->_method_prim();
		if ((!(_158317_prim->_method_is_u8())) && (!(_158317_prim->_method_is_i32()))) {
			(*this)._method_push_err(_157441_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_157431_d->_field_kind->_method_to_str())}));
		}
		return;
	}
	if ((!(jule::real(_157431_d->_field_kind->_method_slc())))) {
		(*this)._method_push_err(_157441_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_157431_d->_field_kind->_method_to_str())}));
		return;
	}
	jule::Ref<_1116aff70_TypeKind> _159517_t = _157431_d->_field_kind->_method_slc()->_field_elem;
	jule::Ref<_1116aff70_Prim> _159613_prim = _159517_t->_method_prim();
	if ((!(jule::real(_159613_prim))) || ((!(_159613_prim->_method_is_u8())) && (!(_159613_prim->_method_is_i32())))) {
		(*this)._method_push_err(_157441_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_157431_d->_field_kind->_method_to_str())}));
	}
}



inline void _1112d7f10_Eval::_method_cast_int(jule::Ref<_1116aff70_TypeKind> _160231_t,jule::Ref<_1112d7f10_Data> _160249_d,_1106ec050_Token _160259_error_token) {
	if (_160249_d->_method_is_const()) {
		jule::Ref<_1116aff70_Prim> _160417_prim = _160231_t->_method_prim();
		{
			if (!((_1118e4c20_is_sig_int(_160417_prim->_field_kind)))) { goto _case_end_4612650512; }
			_case_begin_4612650512:;
			{
				_160249_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_160249_d->_field_constant->_method_as_i64()));
			}
			goto _match_end_4612650272;
			_case_end_4612650512:;
			if (!((_1118e4c20_is_unsig_int(_160417_prim->_field_kind)))) { goto _case_end_4612650624; }
			_case_begin_4612650624:;
			{
				_160249_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_160249_d->_field_constant->_method_as_u64()));
			}
			goto _match_end_4612650272;
			_case_end_4612650624:;
			_match_end_4612650272:;
		}
	}
	if (jule::real(_160249_d->_field_kind->_method_enm())) {
		jule::Ref<_110e453c0_Enum> _161517_e = _160249_d->_field_kind->_method_enm();
		if (_1118e4c20_is_num(_161517_e->_field_kind->_field_kind->_method_to_str())) {
			return;
		}
	}
	if (jule::real(_160249_d->_field_kind->_method_ptr())) {
		jule::Ref<_1116aff70_Prim> _162217_prim = _160231_t->_method_prim();
		if (_162217_prim->_method_is_uintptr()) {
		} else if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_160259_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
		} else if (((((!(_162217_prim->_method_is_i32())) && (!(_162217_prim->_method_is_i64()))) && (!(_162217_prim->_method_is_u16()))) && (!(_162217_prim->_method_is_u32()))) && (!(_162217_prim->_method_is_u64()))) {
			(*this)._method_push_err(_160259_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_160249_d->_field_kind->_method_to_str()),jule::Any(_160231_t->_method_to_str())}));
		}
		return;
	}
	jule::Ref<_1116aff70_Prim> _163313_prim = _160249_d->_field_kind->_method_prim();
	if (jule::real(_163313_prim) && _1118e4c20_is_num(_163313_prim->_method_to_str())) {
		return;
	}
	(*this)._method_push_err(_160259_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_160249_d->_field_kind->_method_to_str()),jule::Any(_160231_t->_method_to_str())}));
}



inline void _1112d7f10_Eval::_method_cast_num(jule::Ref<_1116aff70_TypeKind> _164131_t,jule::Ref<_1112d7f10_Data> _164149_d,_1106ec050_Token _164159_error_token) {
	if (_164149_d->_method_is_const()) {
		jule::Ref<_1116aff70_Prim> _164317_prim = _164131_t->_method_prim();
		{
			if (!((_1118e4c20_is_float(_164317_prim->_field_kind)))) { goto _case_end_4612702464; }
			_case_begin_4612702464:;
			{
				_164149_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_164149_d->_field_constant->_method_as_f64()));
			}
			goto _match_end_4612685696;
			_case_end_4612702464:;
			if (!((_1118e4c20_is_sig_int(_164317_prim->_field_kind)))) { goto _case_end_4612702576; }
			_case_begin_4612702576:;
			{
				_164149_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_164149_d->_field_constant->_method_as_i64()));
			}
			goto _match_end_4612685696;
			_case_end_4612702576:;
			if (!((_1118e4c20_is_unsig_int(_164317_prim->_field_kind)))) { goto _case_end_4612702688; }
			_case_begin_4612702688:;
			{
				_164149_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_164149_d->_field_constant->_method_as_u64()));
			}
			goto _match_end_4612685696;
			_case_end_4612702688:;
			_match_end_4612685696:;
		}
	}
	if (jule::real(_164149_d->_field_kind->_method_enm())) {
		jule::Ref<_110e453c0_Enum> _165717_e = _164149_d->_field_kind->_method_enm();
		if (_1118e4c20_is_num(_165717_e->_field_kind->_field_kind->_method_to_str())) {
			return;
		}
	}
	jule::Ref<_1116aff70_Prim> _166313_prim = _164149_d->_field_kind->_method_prim();
	if (jule::real(_166313_prim) && _1118e4c20_is_num(_166313_prim->_method_to_str())) {
		return;
	}
	(*this)._method_push_err(_164159_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_164149_d->_field_kind->_method_to_str()),jule::Any(_164131_t->_method_to_str())}));
}



inline void _1112d7f10_Eval::_method_cast_prim(jule::Ref<_1116aff70_TypeKind> _167132_t,jule::Ref<_1112d7f10_Data> _167150_d,_1106ec050_Token _167160_error_token) {
	jule::Ref<_1116aff70_Prim> _167213_prim = _167132_t->_method_prim();
	{
		if (!((_167213_prim->_method_is_any()))) { goto _case_end_4612725312; }
		goto _match_end_4612724304;
		_case_end_4612725312:;
		if (!((_167213_prim->_method_is_str()))) { goto _case_end_4612724800; }
		_case_begin_4612724800:;
		{
			(*this)._method_cast_str(_167150_d,_167160_error_token);
		}
		goto _match_end_4612724304;
		_case_end_4612724800:;
		if (!((_1118e4c20_is_int(_167213_prim->_method_to_str())))) { goto _case_end_4612724912; }
		_case_begin_4612724912:;
		{
			(*this)._method_cast_int(_167132_t,_167150_d,_167160_error_token);
		}
		goto _match_end_4612724304;
		_case_end_4612724912:;
		if (!((_1118e4c20_is_num(_167213_prim->_method_to_str())))) { goto _case_end_4612725024; }
		_case_begin_4612725024:;
		{
			(*this)._method_cast_num(_167132_t,_167150_d,_167160_error_token);
		}
		goto _match_end_4612724304;
		_case_end_4612725024:;
		_case_begin_4612724496:;
		{
			(*this)._method_push_err(_167160_error_token,jule::Str("@ data-type not supports casting", 32),jule::Slice<jule::Any>({jule::Any(_167132_t->_method_to_str())}));
		}
		goto _match_end_4612724304;
		_case_end_4612724496:;
		_match_end_4612724304:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_cast_by_type_n_data(jule::Ref<_1116aff70_TypeKind> _169147_t,jule::Ref<_1112d7f10_Data> _169165_d,_1106ec050_Token _169175_error_token) {
	{
		if (!((jule::real(_169165_d->_field_kind->_method_prim()) && _169165_d->_field_kind->_method_prim()->_method_is_any()))) { goto _case_end_4612740784; }
		_case_begin_4612740784:;
		{
			if (jule::real(_169147_t->_method_enm())) {
				(*this)._method_push_err(_169175_error_token,jule::Str("enum cannot casted from any type", 32),jule::Slice<jule::Any>({}));
				(*this)._method_push_suggestion(jule::Str("try cast to type of enum fields instead of enum", 47),jule::Slice<jule::Any>({}));
			}
		}
		goto _match_end_4612737584;
		_case_end_4612740784:;
		if (!((jule::real(_169147_t->_method_ptr())))) { goto _case_end_4612738000; }
		_case_begin_4612738000:;
		{
			(*this)._method_cast_ptr(_169147_t,_169165_d,_169175_error_token);
		}
		goto _match_end_4612737584;
		_case_end_4612738000:;
		if (!((jule::real(_169147_t->_method_ref())))) { goto _case_end_4612738112; }
		_case_begin_4612738112:;
		{
			(*this)._method_cast_ref(_169147_t,_169165_d,_169175_error_token);
		}
		goto _match_end_4612737584;
		_case_end_4612738112:;
		if (!((jule::real(_169147_t->_method_slc())))) { goto _case_end_4612738224; }
		_case_begin_4612738224:;
		{
			(*this)._method_cast_slc(_169147_t,_169165_d,_169175_error_token);
		}
		goto _match_end_4612737584;
		_case_end_4612738224:;
		if (!((jule::real(_169147_t->_method_strct())))) { goto _case_end_4612741248; }
		_case_begin_4612741248:;
		{
			(*this)._method_cast_struct(_169147_t,_169165_d,_169175_error_token);
		}
		goto _match_end_4612737584;
		_case_end_4612741248:;
		if (!((jule::real(_169147_t->_method_prim())))) { goto _case_end_4612741360; }
		_case_begin_4612741360:;
		{
			(*this)._method_cast_prim(_169147_t,_169165_d,_169175_error_token);
		}
		goto _match_end_4612737584;
		_case_end_4612741360:;
		_case_begin_4612737696:;
		{
			(*this)._method_push_err(_169175_error_token,jule::Str("@ data-type not supports casting", 32),jule::Slice<jule::Any>({jule::Any(_169147_t->_method_to_str())}));
			jule::drop(_169165_d);
		}
		goto _match_end_4612737584;
		_case_end_4612737696:;
		_match_end_4612737584:;
	}
	if ((!(jule::real(_169165_d)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	_169165_d->_field_mutable=_169165_d->_field_mutable || ((!(_1116aff70_is_mut(_169165_d->_field_kind))) && _1116aff70_is_mut(_169147_t));
	_169165_d->_field_lvalue=_1116aff70_is_lvalue(_169147_t);
	_169165_d->_field_decl=false;
	if (jule::real(_169147_t->_method_prim()) && _169165_d->_method_is_const()) {
		_169165_d->_field_model=jule::Any(_169165_d->_field_constant);
	}
	if ((!(jule::real(_169165_d->_field_kind->_method_enm()))) || (_169165_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_to_str() != _169147_t->_method_to_str())) {
		_169165_d->_field_cast_kind=_169147_t;
	} else {
		_169165_d->_field_kind=_169147_t;
	}
	return _169165_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_cast(jule::Ref<_11054f670_CastExpr> _174333_c) {
	jule::Ref<_1116aff70_TypeSymbol> _174417_t = _110d9ce90_build_type(_174333_c->_field_kind);
	jule::Bool _174513_ok = this->self->_field_s->_method_check_type(_174417_t,this->self->_field_lookup);
	if ((!(_174513_ok))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_1116aff70_TypeKind> _175017_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_175017_prefix;
	});
	jule::Ref<_1112d7f10_Data> _175417_d = this->self->_method_eval_expr_kind(_174333_c->_field_expr);
	if ((!(jule::real(_175417_d)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	_175417_d=this->self->_method_eval_cast_by_type_n_data(_174417_t->_field_kind,_175417_d,_174333_c->_field_kind->_field_token);
	return _175417_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_ns_selection(jule::Ref<_11054f670_NsSelectionExpr> _176436_s) {
	jule::Str _176513_path = _1116aff70_build_link_path_by_tokens(_176436_s->_field_ns);
	jule::Ref<_110e4edc0_ImportInfo> _176617_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)>([=](jule::Ref<_110e4edc0_ImportInfo> _176653_p) mutable -> jule::Bool {
		if ((_176436_s->_field_ns.len() == 1LL) && (_176653_p->_field_alias == _176513_path)) {
			return true;
		}
		return _176653_p->_field_link_path == _176513_path;
	}));
	if ((!(jule::real(_176617_imp))) || (!(_176617_imp->_method_is_lookupable(jule::Str("self", 4))))) {
		(*this)._method_push_err(_176436_s->_field_ident,jule::Str("namespace not exist: @", 22),jule::Slice<jule::Any>({jule::Any(_176513_path)}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Trait<_111732860_Lookup> _177817_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_176617_imp;
	
	jule::Any _178217_def = (*this)._method_get_def(_176436_s->_field_ident._field_kind,false);
	(*this)._field_lookup=_177817_lookup;
	jule::Ref<_1112d7f10_Data> _178517_d = (*this)._method_eval_def(_178217_def,_176436_s->_field_ident);
	return _178517_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_struct_lit_explicit(jule::Ref<_1109372e0_StructIns> _179048_s,jule::Slice<jule::Any> _179067_exprs,_1106ec050_Token _179086_error_token) {
	jule::Bool _179113_ok = this->self->_field_s->_method_check_generic_quantity(static_cast<jule::I64>(_179048_s->_field_decl->_field_generics.len()),static_cast<jule::I64>(_179048_s->_field_generics.len()),_179086_error_token);
	if ((!(_179113_ok))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	this->self->_method_push_reference_to_struct(_179048_s);
	_1111c0be0_StructLitChecker _179917_slc = _1111c0be0_StructLitChecker(this->self,_179086_error_token,_179048_s,jule::Slice<jule::Ref<_110e4e8a0_StructArgExprModel>>());
	_179917_slc._method_check(_179067_exprs);
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_179048_s)),jule::Ref<_1116aff70_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_StructLitExprModel>(new( std::nothrow ) _110e4e8a0_StructLitExprModel(_179048_s,_179917_slc._field_args))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_struct_lit(jule::Ref<_11054f670_StructLit> _181639_lit) {
	jule::Ref<_1116aff70_TypeSymbol> _181717_t = _110d9ce90_build_type(_181639_lit->_field_kind);
	jule::Bool _181813_ok = this->self->_field_s->_method_check_type(_181717_t,this->self->_field_lookup);
	if ((!(_181813_ok))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_1109372e0_StructIns> _182317_s = _181717_t->_field_kind->_method_strct();
	if ((!(jule::real(_182317_s)))) {
		this->self->_method_push_err(_181639_lit->_field_kind->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	return this->self->_method_eval_struct_lit_explicit(_182317_s,_181639_lit->_field_exprs,_181639_lit->_field_kind->_field_token);
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_type(jule::Ref<_11054f670_TypeDecl> _183232_t) {
	jule::Ref<_1116aff70_TypeSymbol> _183317_tk = _110d9ce90_build_type(_183232_t);
	jule::Bool _183413_ok = (*this)._field_s->_method_check_type(_183317_tk,(*this)._field_lookup);
	if ((!(_183413_ok))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(_183317_tk->_field_kind,jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_183317_tk->_field_kind),true,jule::Ref<_1118cee40_Const>()));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_call_type_fn(jule::Ref<_11054f670_FnCallExpr> _184636_fc,jule::Ref<_1112d7f10_Data> _184657_d) {
	if (_184636_fc->_field_generics.len() > 0LL) {
		this->self->_method_push_err(_184636_fc->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_184657_d->_field_kind->_method_to_str())}));
	} else if (_184636_fc->_field_args.len() < 1LL) {
		this->self->_method_push_err(_184636_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
	} else if (_184636_fc->_field_args.len() > 1LL) {
		this->self->_method_push_err(_184636_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	if (_184636_fc->_field_args.len() > 0LL) {
		jule::Ref<_1112d7f10_Data> _185621_arg = this->self->_method_eval_expr_kind(_184636_fc->_field_args[0LL]->_field_kind);
		if (jule::real(_185621_arg)) {
			_184657_d=this->self->_method_eval_cast_by_type_n_data(_184657_d->_field_kind,_185621_arg,_184636_fc->_field_args[0LL]->_field_token);
		}
	}
	_184657_d->_field_decl=false;
	return _184657_d;
}



inline std::tuple<jule::Bool,jule::Bool> _1112d7f10_Eval::_method_check_fn_call_generics(jule::Ref<_11072eb20_FnIns> _186745_f,jule::Ref<_11054f670_FnCallExpr> _186813_fc) {
	jule::Bool _186842_dynamic_annotation = jule::Bool();
	jule::Bool _186832_ok = jule::Bool();
	{
		if (!((((_186745_f->_field_decl->_field_generics.len() > 0LL) && (_186813_fc->_field_generics.len() == 0LL)) && (_186745_f->_field_params.len() > 0LL)))) { goto _case_end_4612859904; }
		_case_begin_4612859904:;
		{
			_186842_dynamic_annotation=true;
			_186745_f->_field_generics=jule::Slice<jule::Ref<_1116aff70_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_186745_f->_field_decl->_field_generics.len())));
			_186832_ok = true;
			_186842_dynamic_annotation = true;
			return std::make_tuple(_186832_ok,_186842_dynamic_annotation);
		}
		goto _match_end_4612854288;
		_case_end_4612859904:;
		if (!(((!((*this)._field_s->_method_check_generic_quantity(static_cast<jule::I64>(_186745_f->_field_decl->_field_generics.len()),static_cast<jule::I64>(_186813_fc->_field_generics.len()),_186813_fc->_field_token)))))) { goto _case_end_4612859472; }
		_case_begin_4612859472:;
		{
			_186832_ok = false;
			_186842_dynamic_annotation = false;
			return std::make_tuple(_186832_ok,_186842_dynamic_annotation);
		}
		goto _match_end_4612854288;
		_case_end_4612859472:;
		_case_begin_4612854448:;
		{
			_186745_f->_field_generics=jule::Slice<jule::Ref<_1116aff70_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_186745_f->_field_decl->_field_generics.len())));
			{
				auto __julec_range_expr = _186813_fc->_field_generics;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Int _1112d7f10_i = 0;
					jule::Ref<_11054f670_TypeDecl> _1112d7f10_g = *__julec_range_begin;
					_iter_begin_4612855888:;
					{
						jule::Ref<_1116aff70_TypeSymbol> _188325_k = _110d9ce90_build_type(_1112d7f10_g);
						jule::Bool _188421_ok = (*this)._field_s->_method_check_type(_188325_k,(*this)._field_lookup);
						if ((!(_188421_ok))) {
							_186832_ok = false;
							_186842_dynamic_annotation = false;
							return std::make_tuple(_186832_ok,_186842_dynamic_annotation);
						}
						_186745_f->_field_generics[static_cast<jule::Int>(_1112d7f10_i)]=_188325_k->_field_kind;
					}
					_iter_next_4612855888:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { ++_1112d7f10_i; _1112d7f10_g = *__julec_range_begin; goto _iter_begin_4612855888; }
					_iter_end_4612855888:;
				}
			}
			_186832_ok = true;
			_186842_dynamic_annotation = false;
			return std::make_tuple(_186832_ok,_186842_dynamic_annotation);
		}
		goto _match_end_4612854288;
		_case_end_4612854448:;
		_match_end_4612854288:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_call_builtin_fn(jule::Ref<_11054f670_FnCallExpr> _189539_fc,jule::Ref<_1112d7f10_Data> _189560_d) {
	jule::Ref<_11072eb20_FnIns> _189617_f = _189560_d->_field_kind->_method_fnc();
	_189560_d=_189617_f->_field_caller(this->self,_189539_fc,_189560_d);
	if ((!(jule::real(_189560_d)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	_189560_d->_field_mutable=true;
	return _189560_d;
}



inline void _1112d7f10_Eval::_method_check_fn_of_concurrent_call(jule::Ref<_11072eb20_FnIns>& _190747_f,_1106ec050_Token _190758_error_token) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	{
		auto __julec_range_expr = _190747_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_ParamIns> _1112d7f10_p = *__julec_range_begin;
			_iter_begin_4612888416:;
			{
				if (_1112d7f10_p->_field_decl->_field_reference) {
					(*this)._method_push_err(_190758_error_token,jule::Str("concurrent calls does not support functions which is has reference parameter(s)", 79),jule::Slice<jule::Any>({}));
					return;
				}
			}
			_iter_next_4612888416:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1112d7f10_p = *__julec_range_begin; goto _iter_begin_4612888416; }
			_iter_end_4612888416:;
		}
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_call_fn(jule::Ref<_11054f670_FnCallExpr> _192031_fc,jule::Ref<_1112d7f10_Data> _192052_d) {
	jule::Ref<_11072eb20_FnIns> _192117_f = _192052_d->_field_kind->_method_fnc();
	if (_192117_f->_method_is_builtin()) {
		return this->self->_method_call_builtin_fn(_192031_fc,_192052_d);
	}
	if (_192031_fc->_field_concurrent) {
		this->self->_method_check_fn_of_concurrent_call(_192117_f,_192031_fc->_field_token);
	}
	if ((((!(_192052_d->_field_mutable)) && _192117_f->_field_decl->_method_is_method()) && (!(_192117_f->_field_decl->_field_statically))) && _192117_f->_field_decl->_field_params[0LL]->_field_mutable) {
		this->self->_method_push_err(_192031_fc->_field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>({}));
	} else if ((!(this->self->_method_is_unsafe())) && _192117_f->_field_decl->_field_unsafety) {
		this->self->_method_push_err(_192031_fc->_field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
	}
	jule::Bool _193618_ok;
	jule::Bool _193622_dynamic_annotation;
	std::tie(_193618_ok,_193622_dynamic_annotation) = this->self->_method_check_fn_call_generics(_192117_f,_192031_fc);
	if ((!(_193618_ok))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_110e92bc0_Sema> _194117_old = this->self->_field_s;
	if (jule::real(_192117_f->_field_decl->_field_owner)) {
		this->self->_field_s=_192117_f->_field_decl->_field_owner->_field_sema;
	}
	__JULE_DEFER({
		if ((_194117_old).alloc != (this->self->_field_s).alloc) {
			_194117_old->_field_errors=jule::append(_194117_old->_field_errors,this->self->_field_s->_field_errors);
		}
		this->self->_field_s=_194117_old;
	});
	if ((!(_193622_dynamic_annotation))) {
		if ((!(_192117_f->_field_reloaded))) {
			jule::Bool _195521_ok = this->self->_field_s->_method_reload_fn_ins_types(_192117_f);
			if ((!(_195521_ok))) {
				return jule::new_ref<_1112d7f10_Data>();
			}
			_192117_f->_field_reloaded=true;
		}
	} else {
		this->self->_field_s->_method_build_fn_non_generic_type_kinds(_192117_f);
	}
	_1111c0be0_FnCallArgChecker _196517_fcac = _1111c0be0_FnCallArgChecker(this->self,_192031_fc->_field_args,_192031_fc->_field_token,_192117_f,_193622_dynamic_annotation,jule::Slice<jule::Any>());
	if (jule::real(_192117_f->_field_decl->_field_owner)) {
		std::tie(_194117_old,this->self->_field_s) = std::make_tuple(this->self->_field_s,_194117_old);
		_193618_ok=_196517_fcac._method_check();
		std::tie(_194117_old,this->self->_field_s) = std::make_tuple(this->self->_field_s,_194117_old);
	} else {
		_193618_ok=_196517_fcac._method_check();
	}
	if ((!(_193618_ok)) && _193622_dynamic_annotation) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Bool _198414_is_unique_ins;
	jule::Int _198429_pos;
	std::tie(_198414_is_unique_ins,_198429_pos) = _192117_f->_field_decl->_method_append_instance(_192117_f);
	if ((!(_198414_is_unique_ins))) {
		_192117_f=_192117_f->_field_decl->_field_instances[static_cast<jule::Int>(_198429_pos)];
	}
	jule::Any _198917_call_model = _192052_d->_field_model;
	if (_192117_f->_field_decl->_method_is_void()) {
		_192052_d=_1112d7f10_build_void_data();
	} else {
		if (_193622_dynamic_annotation) {
			_193618_ok=this->self->_field_s->_method_reload_fn_ins_types(_192117_f);
			if ((!(_193618_ok))) {
				return jule::new_ref<_1112d7f10_Data>();
			}
			_192117_f->_field_reloaded=true;
		}
		_192052_d->_field_kind=_192117_f->_field_result;
		_192052_d->_field_lvalue=_1116aff70_is_lvalue(_192117_f->_field_result);
	}
	_192052_d->_field_mutable=true;
	_192052_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_FnCallExprModel>(new( std::nothrow ) _110e4e8a0_FnCallExprModel(_192117_f,_192031_fc->_field_concurrent,_198917_call_model,_196517_fcac._field_arg_models)));
	if ((_192117_f->_field_generics.len() > 0LL) && _198414_is_unique_ins) {
		this->self->_field_s->_method_check_fn_ins(_192117_f);
	}
	return _192052_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_fn_call(jule::Ref<_11054f670_FnCallExpr> _202236_fc) {
	jule::Ref<_1116aff70_TypeKind> _202317_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_202317_prefix;
	});
	jule::Ref<_1112d7f10_Data> _202717_d = this->self->_method_eval_expr_kind(_202236_fc->_field_expr->_field_kind);
	if ((!(jule::real(_202717_d)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_202717_d->_field_decl) {
		return this->self->_method_call_type_fn(_202236_fc,_202717_d);
	}
	if ((!(jule::real(_202717_d->_field_kind->_method_fnc())))) {
		this->self->_method_push_err(_202236_fc->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	return this->self->_method_call_fn(_202236_fc,_202717_d);
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_enum_static(jule::Ref<_110e453c0_Enum> _204439_enm,_1106ec050_Token _204451_ident) {
	jule::Ref<_1112d7f10_Data> _204517_d = jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_204439_enm)),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,jule::Ref<_1118cee40_Const>()));
	jule::Ref<_110e453c0_EnumItem> _205217_item = _204439_enm->_method_find_item(_204451_ident._field_kind);
	if ((!(jule::real(_205217_item)))) {
		(*this)._method_push_err(_204451_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_204451_ident._field_kind)}));
	} else {
		_204517_d->_field_constant=jule::new_ref<_1118cee40_Const>(_205217_item->_field_value->_field_data->_field_constant.get());
		_204517_d->_field_model=jule::Any(_204517_d->_field_constant);
	}
	return _204517_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_struct_static(jule::Ref<_1109372e0_StructIns> _206341_s,_1106ec050_Token _206356_ident) {
	
	jule::Ref<_11072eb20_Fn> _206517_method = _206341_s->_method_find_method(_206356_ident._field_kind,true);
	if ((!(jule::real(_206517_method)))) {
		(*this)._method_push_err(_206356_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_206356_ident._field_kind)}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_1112d7f10_Data> _207117_d = jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::Ref<_1116aff70_TypeKind>(),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,jule::Ref<_1118cee40_Const>()));
	jule::Ref<_11072eb20_FnIns> _207817_ins = _206517_method->_method_instance();
	_207817_ins->_field_owner=_206341_s;
	(*this)._method_push_reference_to_fn(_207817_ins);
	_207117_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_StructStaticIdentExprModel>(new( std::nothrow ) _110e4e8a0_StructStaticIdentExprModel(_206341_s,_207117_d->_field_model,_207817_ins)));
	_207117_d->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_207817_ins));
	return _207117_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_trait_sub_ident(jule::Ref<_1112d7f10_Data> _209139_d,jule::Ref<_110e3f160_Trait> _209153_trt,_1106ec050_Token _209166_ident) {
	jule::Ref<_11072eb20_Fn> _209217_f = _209153_trt->_method_find_method(_209166_ident._field_kind);
	if ((!(jule::real(_209217_f)))) {
		(*this)._method_push_err(_209166_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_209166_ident._field_kind)}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Any _209817_model = jule::Any(nullptr);
	if ((_209153_trt).alloc == (_1113198e0_BUILTIN_TRAIT_ERROR).alloc) {
		_209817_model=jule::Any(jule::new_struct<_110e4e8a0_BuiltinErrorTraitSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_BuiltinErrorTraitSubIdentExprModel(_209139_d->_field_model,_209166_ident._field_kind)));
	} else {
		_209817_model=jule::Any(jule::new_struct<_110e4e8a0_TraitSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_TraitSubIdentExprModel(_209139_d->_field_model,_209166_ident._field_kind)));
	}
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_209217_f->_method_instance())),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),_209817_model,false,jule::Ref<_1118cee40_Const>()));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_struct_sub_ident(jule::Ref<_1112d7f10_Data> _212044_d,jule::Ref<_1109372e0_StructIns> _212058_s,jule::Ref<_11054f670_SubIdentExpr> _212073_si,jule::Bool _212092_ref) {
	jule::Ref<_1109372e0_FieldIns> _212117_f = _212058_s->_method_find_field(_212073_si->_field_ident._field_kind);
	if (jule::real(_212117_f)) {
		if ((!((*this)._field_s->_method_is_accessible_define(_212117_f->_field_decl->_field_public,_212117_f->_field_decl->_field_token)))) {
			(*this)._method_push_err(_212073_si->_field_ident,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_212117_f->_field_decl->_field_ident)}));
			(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
		}
		jule::Ref<_110e4e8a0_StructSubIdentExprModel> _212821_model = jule::new_struct<_110e4e8a0_StructSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_StructSubIdentExprModel(_212044_d->_field_model,_212044_d->_field_kind,jule::Ref<_11072eb20_FnIns>(),_212117_f));
		_212044_d->_field_model=jule::Any(_212821_model);
		_212044_d->_field_kind=_212117_f->_field_kind->_method_clone();
		if (_212117_f->_field_decl->_field_mutable && (!(_212044_d->_field_mutable))) {
			{
				auto _match_expr{ (*this)._field_lookup };
				if (!(_match_expr.type_is<jule::Ref<_110af2660_ScopeChecker>>())) { goto _case_end_4613016480; }
				_case_begin_4613016480:;
				{
					jule::Ref<_110af2660_ScopeChecker> _214025_scope = (*this)._field_lookup.operator jule::Ref<_110af2660_ScopeChecker>();
					_212044_d->_field_mutable=jule::real(_214025_scope->_field_owner) && ((_214025_scope->_field_owner->_field_owner).alloc == (_212058_s).alloc);
					if (_212044_d->_field_mutable) {
						jule::Ref<_110e92c80_Var> _214333_field = _212821_model->_field_expr.operator jule::Ref<_110e92c80_Var>();
						jule::Ref<_110e92c80_Var> _214433_v = jule::new_struct<_110e92c80_Var>(new( std::nothrow ) _110e92c80_Var(_214333_field->_field_scope,_214333_field->_field_token,_214333_field->_field_ident,_214333_field->_field_cpp_linked,_214333_field->_field_constant,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),_214333_field->_field_kind,_214333_field->_field_value,jule::Ref<_110d9ce90_ReferenceStack>(),jule::Slice<jule::Ref<_11054f670_Directive>>(),jule::Slice<jule::Ref<_110e92c80_Var>>()));
						_214433_v->_field_mutable=true;
						_212821_model->_field_expr=jule::Any(_214433_v);
					}
				}
				goto _match_end_4613014496;
				_case_end_4613016480:;
				_match_end_4613014496:;
			}
		}
		return _212044_d;
	}
	
	jule::Ref<_11072eb20_Fn> _216317_m = _212058_s->_method_find_method(_212073_si->_field_ident._field_kind,false);
	if ((!(jule::real(_216317_m)))) {
		(*this)._method_push_err(_212073_si->_field_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_212073_si->_field_ident._field_kind)}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_216317_m->_field_params[0LL]->_method_is_ref() && (!(_212092_ref))) {
		(*this)._method_push_err(_212073_si->_field_ident,jule::Str("reference method cannot use with non-reference instance", 55),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_11072eb20_FnIns> _217417_ins = _216317_m->_method_instance();
	_217417_ins->_field_owner=_212058_s;
	(*this)._method_push_reference_to_fn(_217417_ins);
	_212044_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_StructSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_StructSubIdentExprModel(_212044_d->_field_model,_212044_d->_field_kind,_217417_ins,jule::Ref<_1109372e0_FieldIns>())));
	_212044_d->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_217417_ins));
	return _212044_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_slice_sub_ident(jule::Ref<_1112d7f10_Data> _218643_d,_1106ec050_Token _218653_ident) {
	{
		auto _match_expr{ _218653_ident._field_kind };
		if (!((jule::Str("len", 3)) == _match_expr)) { goto _case_end_4613047792; }
		_case_begin_4613047792:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_218643_d->_field_kind,_218643_d->_field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613043744;
		_case_end_4613047792:;
		if (!((jule::Str("cap", 3)) == _match_expr)) { goto _case_end_4613048352; }
		_case_begin_4613048352:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_218643_d->_field_kind,_218643_d->_field_model,jule::Str("cap()", 5)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613043744;
		_case_end_4613048352:;
		_case_begin_4613044336:;
		{
			(*this)._method_push_err(_218653_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_218653_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613043744;
		_case_end_4613044336:;
		_match_end_4613043744:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_array_sub_ident(jule::Ref<_1112d7f10_Data> _221643_d,_1106ec050_Token _221653_ident) {
	{
		auto _match_expr{ _221653_ident._field_kind };
		if (!((jule::Str("len", 3)) == _match_expr)) { goto _case_end_4613060560; }
		_case_begin_4613060560:;
		{
			jule::Ref<_1118cee40_Const> _221921_c = _1118cee40_Const::_static_method_new_i64(static_cast<jule::I64>(_221643_d->_field_kind->_method_arr()->_field_n));
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_221921_c),jule::Bool(),_221921_c));
		}
		goto _match_end_4613056512;
		_case_end_4613060560:;
		_case_begin_4613057104:;
		{
			(*this)._method_push_err(_221653_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_221653_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613056512;
		_case_end_4613057104:;
		_match_end_4613056512:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_map_sub_ident(jule::Ref<_1112d7f10_Data> _223341_d,_1106ec050_Token _223351_ident) {
	{
		auto _match_expr{ _223351_ident._field_kind };
		if (!((jule::Str("len", 3)) == _match_expr)) { goto _case_end_4613071888; }
		_case_begin_4613071888:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_223341_d->_field_kind,_223341_d->_field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613067280;
		_case_end_4613071888:;
		if (!((jule::Str("clear", 5)) == _match_expr)) { goto _case_end_4613071552; }
		_case_begin_4613071552:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>(),jule::Ref<_1116aff70_TypeKind>(),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common_mut,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),_223341_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_223341_d->_field_kind,_223341_d->_field_model,jule::Str("clear", 5)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613067280;
		_case_end_4613071552:;
		if (!((jule::Str("keys", 4)) == _match_expr)) { goto _case_end_4613071664; }
		_case_begin_4613071664:;
		{
			jule::Ref<_1116aff70_Map> _226221_m = _223341_d->_field_kind->_method_map();
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>(),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1116aff70_Slc>(new( std::nothrow ) _1116aff70_Slc(_226221_m->_field_key)))),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common_mut,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),_223341_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_223341_d->_field_kind,_223341_d->_field_model,jule::Str("keys", 4)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613067280;
		_case_end_4613071664:;
		if (!((jule::Str("values", 6)) == _match_expr)) { goto _case_end_4613068176; }
		_case_begin_4613068176:;
		{
			jule::Ref<_1116aff70_Map> _228321_m = _223341_d->_field_kind->_method_map();
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>(),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1116aff70_Slc>(new( std::nothrow ) _1116aff70_Slc(_228321_m->_field_val)))),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common_mut,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),_223341_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_223341_d->_field_kind,_223341_d->_field_model,jule::Str("values", 6)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613067280;
		_case_end_4613068176:;
		if (!((jule::Str("has", 3)) == _match_expr)) { goto _case_end_4613068288; }
		_case_begin_4613068288:;
		{
			jule::Ref<_1116aff70_Map> _230421_m = _223341_d->_field_kind->_method_map();
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("key", 3))),_230421_m->_field_key))}),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),_223341_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_223341_d->_field_kind,_223341_d->_field_model,jule::Str("has", 3)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613067280;
		_case_end_4613068288:;
		if (!((jule::Str("del", 3)) == _match_expr)) { goto _case_end_4613068400; }
		_case_begin_4613068400:;
		{
			jule::Ref<_1116aff70_Map> _232921_m = _223341_d->_field_kind->_method_map();
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("key", 3))),_232921_m->_field_key))}),jule::Ref<_1116aff70_TypeKind>(),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common_mut,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),_223341_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_223341_d->_field_kind,_223341_d->_field_model,jule::Str("del", 3)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613067280;
		_case_end_4613068400:;
		_case_begin_4613067872:;
		{
			(*this)._method_push_err(_223351_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_223351_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613067280;
		_case_end_4613067872:;
		_match_end_4613067280:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_str_sub_ident(jule::Ref<_1112d7f10_Data> _235841_d,_1106ec050_Token _235851_ident) {
	{
		auto _match_expr{ _235851_ident._field_kind };
		if (!((jule::Str("len", 3)) == _match_expr)) { goto _case_end_4613107728; }
		_case_begin_4613107728:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613103280;
		_case_end_4613107728:;
		if (!((jule::Str("has_prefix", 10)) == _match_expr)) { goto _case_end_4613107328; }
		_case_begin_4613107328:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("sub", 3))),_235841_d->_field_kind))}),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("has_prefix", 10)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613103280;
		_case_end_4613107328:;
		if (!((jule::Str("has_suffix", 10)) == _match_expr)) { goto _case_end_4613107888; }
		_case_begin_4613107888:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("sub", 3))),_235841_d->_field_kind))}),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("has_suffix", 10)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613103280;
		_case_end_4613107888:;
		if (!((jule::Str("find", 4)) == _match_expr)) { goto _case_end_4613104176; }
		_case_begin_4613104176:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("sub", 3))),_235841_d->_field_kind))}),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("int", 3)))),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("find", 4)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613103280;
		_case_end_4613104176:;
		if (!((jule::Str("rfind", 5)) == _match_expr)) { goto _case_end_4613104288; }
		_case_begin_4613104288:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("sub", 3))),_235841_d->_field_kind))}),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("int", 3)))),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("rfind", 5)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613103280;
		_case_end_4613104288:;
		if (!((jule::Str("trim", 4)) == _match_expr)) { goto _case_end_4613104400; }
		_case_begin_4613104400:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("bytes", 5))),_235841_d->_field_kind))}),_235841_d->_field_kind,jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("trim", 4)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613103280;
		_case_end_4613104400:;
		if (!((jule::Str("ltrim", 5)) == _match_expr)) { goto _case_end_4613106720; }
		_case_begin_4613106720:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("bytes", 5))),_235841_d->_field_kind))}),_235841_d->_field_kind,jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("ltrim", 5)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613103280;
		_case_end_4613106720:;
		if (!((jule::Str("rtrim", 5)) == _match_expr)) { goto _case_end_4613106832; }
		_case_begin_4613106832:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("bytes", 5))),_235841_d->_field_kind))}),_235841_d->_field_kind,jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("rtrim", 5)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613103280;
		_case_end_4613106832:;
		if (!((jule::Str("split", 5)) == _match_expr)) { goto _case_end_4613106944; }
		_case_begin_4613106944:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("sub", 3))),_235841_d->_field_kind)),jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("n", 1))),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("int", 3))))))}),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1116aff70_Slc>(new( std::nothrow ) _1116aff70_Slc(_235841_d->_field_kind)))),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("split", 5)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613103280;
		_case_end_4613106944:;
		if (!((jule::Str("replace", 7)) == _match_expr)) { goto _case_end_4613107056; }
		_case_begin_4613107056:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("sub", 3))),_235841_d->_field_kind)),jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("new", 3))),_235841_d->_field_kind)),jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str("n", 1))),jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("int", 3))))))}),_235841_d->_field_kind,jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_CommonSubIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("replace", 7)))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613103280;
		_case_end_4613107056:;
		_case_begin_4613103872:;
		{
			(*this)._method_push_err(_235851_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_235851_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613103280;
		_case_end_4613103872:;
		_match_end_4613103280:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_int_type_static(_1106ec050_Token _260639_ident) {
	
	{
		auto _match_expr{ _260639_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4613163312; }
		_case_begin_4613163312:;
		{
			jule::Ref<_1118cee40_Const> _261121_c = _1118cee40_Const::_static_method_new_i64(static_cast<jule::I64>(_1118d0df0_max(jule::Str("int", 3))));
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("int", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_261121_c),jule::Bool(),_261121_c));
		}
		goto _match_end_4613158320;
		_case_end_4613163312:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4613163888; }
		_case_begin_4613163888:;
		{
			jule::Ref<_1118cee40_Const> _261921_c = _1118cee40_Const::_static_method_new_i64(static_cast<jule::I64>(_1118d0df0_min(jule::Str("int", 3))));
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("int", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_261921_c),jule::Bool(),_261921_c));
		}
		goto _match_end_4613158320;
		_case_end_4613163888:;
		_case_begin_4613159568:;
		{
			(*this)._method_push_err(_260639_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("int", 3)),jule::Any(_260639_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613158320;
		_case_end_4613159568:;
		_match_end_4613158320:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_uint_type_static(_1106ec050_Token _263240_ident) {
	
	{
		auto _match_expr{ _263240_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4613177152; }
		_case_begin_4613177152:;
		{
			jule::Ref<_1118cee40_Const> _263721_c = _1118cee40_Const::_static_method_new_u64(static_cast<jule::U64>(_1118d0df0_max(jule::Str("uint", 4))));
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("uint", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_263721_c),jule::Bool(),_263721_c));
		}
		goto _match_end_4613172160;
		_case_end_4613177152:;
		_case_begin_4613173408:;
		{
			(*this)._method_push_err(_263240_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("uint", 4)),jule::Any(_263240_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613172160;
		_case_end_4613173408:;
		_match_end_4613172160:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_i8_type_static(_1106ec050_Token _265038_ident) {
	
	
	
	{
		auto _match_expr{ _265038_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4613190048; }
		_case_begin_4613190048:;
		{
			jule::Ref<_1118cee40_Const> _265721_c = _1118cee40_Const::_static_method_new_i64(127LL);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i8", 2)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_265721_c),jule::Bool(),_265721_c));
		}
		goto _match_end_4613184496;
		_case_end_4613190048:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4613189712; }
		_case_begin_4613189712:;
		{
			jule::Ref<_1118cee40_Const> _266521_c = _1118cee40_Const::_static_method_new_i64(-128LL);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i8", 2)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_266521_c),jule::Bool(),_266521_c));
		}
		goto _match_end_4613184496;
		_case_end_4613189712:;
		_case_begin_4613185808:;
		{
			(*this)._method_push_err(_265038_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("i8", 2)),jule::Any(_265038_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613184496;
		_case_end_4613185808:;
		_match_end_4613184496:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_i16_type_static(_1106ec050_Token _267839_ident) {
	
	
	
	{
		auto _match_expr{ _267839_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4613204528; }
		_case_begin_4613204528:;
		{
			jule::Ref<_1118cee40_Const> _268521_c = _1118cee40_Const::_static_method_new_i64(32767LL);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i16", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_268521_c),jule::Bool(),_268521_c));
		}
		goto _match_end_4613199264;
		_case_end_4613204528:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4613204640; }
		_case_begin_4613204640:;
		{
			jule::Ref<_1118cee40_Const> _269321_c = _1118cee40_Const::_static_method_new_i64(-32768LL);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i16", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_269321_c),jule::Bool(),_269321_c));
		}
		goto _match_end_4613199264;
		_case_end_4613204640:;
		_case_begin_4613200576:;
		{
			(*this)._method_push_err(_267839_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("i16", 3)),jule::Any(_267839_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613199264;
		_case_end_4613200576:;
		_match_end_4613199264:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_i32_type_static(_1106ec050_Token _270639_ident) {
	
	
	
	{
		auto _match_expr{ _270639_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4613219584; }
		_case_begin_4613219584:;
		{
			jule::Ref<_1118cee40_Const> _271321_c = _1118cee40_Const::_static_method_new_i64(2147483647LL);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i32", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_271321_c),jule::Bool(),_271321_c));
		}
		goto _match_end_4613214032;
		_case_end_4613219584:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4613219248; }
		_case_begin_4613219248:;
		{
			jule::Ref<_1118cee40_Const> _272121_c = _1118cee40_Const::_static_method_new_i64(-2147483648LL);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i32", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_272121_c),jule::Bool(),_272121_c));
		}
		goto _match_end_4613214032;
		_case_end_4613219248:;
		_case_begin_4613215344:;
		{
			(*this)._method_push_err(_270639_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("i32", 3)),jule::Any(_270639_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613214032;
		_case_end_4613215344:;
		_match_end_4613214032:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_i64_type_static(_1106ec050_Token _273439_ident) {
	
	
	
	{
		auto _match_expr{ _273439_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4613234544; }
		_case_begin_4613234544:;
		{
			jule::Ref<_1118cee40_Const> _274121_c = _1118cee40_Const::_static_method_new_i64(jule::MIN_I64);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_274121_c),jule::Bool(),_274121_c));
		}
		goto _match_end_4613228944;
		_case_end_4613234544:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4613234208; }
		_case_begin_4613234208:;
		{
			jule::Ref<_1118cee40_Const> _274921_c = _1118cee40_Const::_static_method_new_i64(jule::MAX_I64);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_274921_c),jule::Bool(),_274921_c));
		}
		goto _match_end_4613228944;
		_case_end_4613234208:;
		_case_begin_4613230304:;
		{
			(*this)._method_push_err(_273439_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("i64", 3)),jule::Any(_273439_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613228944;
		_case_end_4613230304:;
		_match_end_4613228944:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_u8_type_static(_1106ec050_Token _276238_ident) {
	
	
	{
		auto _match_expr{ _276238_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4613247120; }
		_case_begin_4613247120:;
		{
			jule::Ref<_1118cee40_Const> _276821_c = _1118cee40_Const::_static_method_new_u64(255LLU);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("u8", 2)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_276821_c),jule::Bool(),_276821_c));
		}
		goto _match_end_4613242768;
		_case_end_4613247120:;
		_case_begin_4613243376:;
		{
			(*this)._method_push_err(_276238_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("u8", 2)),jule::Any(_276238_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613242768;
		_case_end_4613243376:;
		_match_end_4613242768:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_u16_type_static(_1106ec050_Token _278139_ident) {
	
	
	{
		auto _match_expr{ _278139_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4613257920; }
		_case_begin_4613257920:;
		{
			jule::Ref<_1118cee40_Const> _278721_c = _1118cee40_Const::_static_method_new_u64(65535LLU);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("u16", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_278721_c),jule::Bool(),_278721_c));
		}
		goto _match_end_4613253568;
		_case_end_4613257920:;
		_case_begin_4613254176:;
		{
			(*this)._method_push_err(_278139_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("u16", 3)),jule::Any(_278139_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613253568;
		_case_end_4613254176:;
		_match_end_4613253568:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_u32_type_static(_1106ec050_Token _280039_ident) {
	
	
	{
		auto _match_expr{ _280039_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4613268656; }
		_case_begin_4613268656:;
		{
			jule::Ref<_1118cee40_Const> _280621_c = _1118cee40_Const::_static_method_new_u64(4294967295LLU);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("u32", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_280621_c),jule::Bool(),_280621_c));
		}
		goto _match_end_4613264304;
		_case_end_4613268656:;
		_case_begin_4613264912:;
		{
			(*this)._method_push_err(_280039_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("u32", 3)),jule::Any(_280039_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613264304;
		_case_end_4613264912:;
		_match_end_4613264304:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_u64_type_static(_1106ec050_Token _281939_ident) {
	
	
	{
		auto _match_expr{ _281939_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4613279424; }
		_case_begin_4613279424:;
		{
			jule::Ref<_1118cee40_Const> _282521_c = _1118cee40_Const::_static_method_new_u64(jule::MAX_U64);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("u64", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_282521_c),jule::Bool(),_282521_c));
		}
		goto _match_end_4613275056;
		_case_end_4613279424:;
		_case_begin_4613275664:;
		{
			(*this)._method_push_err(_281939_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("u64", 3)),jule::Any(_281939_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613275056;
		_case_end_4613275664:;
		_match_end_4613275056:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_f32_type_tatic(_1106ec050_Token _283838_ident) {
	
	
	
	{
		auto _match_expr{ _283838_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4613291104; }
		_case_begin_4613291104:;
		{
			jule::Ref<_1118cee40_Const> _284521_c = _1118cee40_Const::_static_method_new_f64(340282346638528860000000000000000000000.0);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("f32", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_284521_c),jule::Bool(),_284521_c));
		}
		goto _match_end_4613285808;
		_case_end_4613291104:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4613291680; }
		_case_begin_4613291680:;
		{
			jule::Ref<_1118cee40_Const> _285321_c = _1118cee40_Const::_static_method_new_f64(-340282346638528860000000000000000000000.0);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("f32", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_285321_c),jule::Bool(),_285321_c));
		}
		goto _match_end_4613285808;
		_case_end_4613291680:;
		_case_begin_4613287456:;
		{
			(*this)._method_push_err(_283838_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("f32", 3)),jule::Any(_283838_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613285808;
		_case_end_4613287456:;
		_match_end_4613285808:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_f64_type_static(_1106ec050_Token _286639_ident) {
	
	
	
	{
		auto _match_expr{ _286639_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4613305808; }
		_case_begin_4613305808:;
		{
			jule::Ref<_1118cee40_Const> _287321_c = _1118cee40_Const::_static_method_new_f64(jule::MAX_F64);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("f64", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_287321_c),jule::Bool(),_287321_c));
		}
		goto _match_end_4613300480;
		_case_end_4613305808:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4613306384; }
		_case_begin_4613306384:;
		{
			jule::Ref<_1118cee40_Const> _288121_c = _1118cee40_Const::_static_method_new_f64(jule::MIN_F64);
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("f64", 3)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_288121_c),jule::Bool(),_288121_c));
		}
		goto _match_end_4613300480;
		_case_end_4613306384:;
		_case_begin_4613302160:;
		{
			(*this)._method_push_err(_286639_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("f64", 3)),jule::Any(_286639_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613300480;
		_case_end_4613302160:;
		_match_end_4613300480:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_prim_static(jule::Str _289435_kind,_1106ec050_Token _289446_ident) {
	{
		auto _match_expr{ _289435_kind };
		if (!((jule::Str("int", 3)) == _match_expr)) { goto _case_end_4613318176; }
		_case_begin_4613318176:;
		{
			return (*this)._method_eval_int_type_static(_289446_ident);
		}
		goto _match_end_4613314128;
		_case_end_4613318176:;
		if (!((jule::Str("uint", 4)) == _match_expr)) { goto _case_end_4613318736; }
		_case_begin_4613318736:;
		{
			return (*this)._method_eval_uint_type_static(_289446_ident);
		}
		goto _match_end_4613314128;
		_case_end_4613318736:;
		if (!((jule::Str("i8", 2)) == _match_expr)) { goto _case_end_4613314896; }
		_case_begin_4613314896:;
		{
			return (*this)._method_eval_i8_type_static(_289446_ident);
		}
		goto _match_end_4613314128;
		_case_end_4613314896:;
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4613315008; }
		_case_begin_4613315008:;
		{
			return (*this)._method_eval_i16_type_static(_289446_ident);
		}
		goto _match_end_4613314128;
		_case_end_4613315008:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4613315120; }
		_case_begin_4613315120:;
		{
			return (*this)._method_eval_i32_type_static(_289446_ident);
		}
		goto _match_end_4613314128;
		_case_end_4613315120:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4613317568; }
		_case_begin_4613317568:;
		{
			return (*this)._method_eval_i64_type_static(_289446_ident);
		}
		goto _match_end_4613314128;
		_case_end_4613317568:;
		if (!((jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4613317680; }
		_case_begin_4613317680:;
		{
			return (*this)._method_eval_u8_type_static(_289446_ident);
		}
		goto _match_end_4613314128;
		_case_end_4613317680:;
		if (!((jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4613317792; }
		_case_begin_4613317792:;
		{
			return (*this)._method_eval_u16_type_static(_289446_ident);
		}
		goto _match_end_4613314128;
		_case_end_4613317792:;
		if (!((jule::Str("u32", 3)) == _match_expr)) { goto _case_end_4613317904; }
		_case_begin_4613317904:;
		{
			return (*this)._method_eval_u32_type_static(_289446_ident);
		}
		goto _match_end_4613314128;
		_case_end_4613317904:;
		if (!((jule::Str("u64", 3)) == _match_expr)) { goto _case_end_4613318016; }
		_case_begin_4613318016:;
		{
			return (*this)._method_eval_u64_type_static(_289446_ident);
		}
		goto _match_end_4613314128;
		_case_end_4613318016:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4613318896; }
		_case_begin_4613318896:;
		{
			return (*this)._method_eval_f32_type_tatic(_289446_ident);
		}
		goto _match_end_4613314128;
		_case_end_4613318896:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4613319008; }
		_case_begin_4613319008:;
		{
			return (*this)._method_eval_f64_type_static(_289446_ident);
		}
		goto _match_end_4613314128;
		_case_end_4613319008:;
		_case_begin_4613314512:;
		{
			(*this)._method_push_err(_289446_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_289435_kind),jule::Any(_289446_ident._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613314128;
		_case_end_4613314512:;
		_match_end_4613314128:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_type_static(jule::Ref<_1112d7f10_Data> _291439_d,jule::Ref<_11054f670_SubIdentExpr> _291453_si) {
	{
		if (!((jule::real(_291439_d->_field_kind->_method_prim())))) { goto _case_end_4613337824; }
		_case_begin_4613337824:;
		{
			return (*this)._method_eval_prim_static(_291439_d->_field_kind->_method_prim()->_method_to_str(),_291453_si->_field_ident);
		}
		goto _match_end_4613333696;
		_case_end_4613337824:;
		if (!((jule::real(_291439_d->_field_kind->_method_enm())))) { goto _case_end_4613338384; }
		_case_begin_4613338384:;
		{
			return (*this)._method_eval_enum_static(_291439_d->_field_kind->_method_enm(),_291453_si->_field_ident);
		}
		goto _match_end_4613333696;
		_case_end_4613338384:;
		if (!((jule::real(_291439_d->_field_kind->_method_strct())))) { goto _case_end_4613338048; }
		_case_begin_4613338048:;
		{
			return (*this)._method_eval_struct_static(_291439_d->_field_kind->_method_strct(),_291453_si->_field_ident);
		}
		goto _match_end_4613333696;
		_case_end_4613338048:;
		_case_begin_4613333856:;
		{
			(*this)._method_push_err(_291453_si->_field_ident,jule::Str("type @ is not supports sub fields", 33),jule::Slice<jule::Any>({jule::Any(_291439_d->_field_kind->_method_to_str())}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613333696;
		_case_end_4613333856:;
		_match_end_4613333696:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_obj_sub_ident(jule::Ref<_1112d7f10_Data> _293141_d,jule::Ref<_11054f670_SubIdentExpr> _293155_si) {
	jule::Ref<_1116aff70_TypeKind> _293217_kind = _293141_d->_field_kind;
	if (jule::real(_293141_d->_field_kind->_method_ptr())) {
		jule::Ref<_1116aff70_Ptr> _293417_ptr = _293141_d->_field_kind->_method_ptr();
		if ((!(_293417_ptr->_method_is_unsafe()))) {
			if ((!(_293155_si->_field_is_self)) && (!((*this)._method_is_unsafe()))) {
				(*this)._method_push_err(_293155_si->_field_ident,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
			}
			_293217_kind=_293141_d->_field_kind->_method_ptr()->_field_elem;
		}
	} else if (jule::real(_293141_d->_field_kind->_method_ref())) {
		_293217_kind=_293141_d->_field_kind->_method_ref()->_field_elem;
	}
	{
		if (!((jule::real(_293141_d->_field_kind->_method_trt())))) { goto _case_end_4613358496; }
		_case_begin_4613358496:;
		{
			return (*this)._method_eval_trait_sub_ident(_293141_d,_293141_d->_field_kind->_method_trt(),_293155_si->_field_ident);
		}
		goto _match_end_4613357024;
		_case_end_4613358496:;
		if (!((jule::real(_293217_kind->_method_strct())))) { goto _case_end_4613358608; }
		_case_begin_4613358608:;
		{
			jule::Ref<_1109372e0_StructIns> _295017_s = _293217_kind->_method_strct();
			if (_1112d7f10_is_instanced_struct(_295017_s)) {
				jule::Bool _295225_used_reference_elem = jule::real(_293141_d->_field_kind->_method_ref());
				return (*this)._method_eval_struct_sub_ident(_293141_d,_293217_kind->_method_strct(),_293155_si,_295225_used_reference_elem);
			}
		}
		goto _match_end_4613357024;
		_case_end_4613358608:;
		if (!((jule::real(_293217_kind->_method_slc())))) { goto _case_end_4613358720; }
		_case_begin_4613358720:;
		{
			return (*this)._method_eval_slice_sub_ident(_293141_d,_293155_si->_field_ident);
		}
		goto _match_end_4613357024;
		_case_end_4613358720:;
		if (!((jule::real(_293217_kind->_method_arr())))) { goto _case_end_4613358832; }
		_case_begin_4613358832:;
		{
			return (*this)._method_eval_array_sub_ident(_293141_d,_293155_si->_field_ident);
		}
		goto _match_end_4613357024;
		_case_end_4613358832:;
		if (!((jule::real(_293217_kind->_method_map())))) { goto _case_end_4613358944; }
		_case_begin_4613358944:;
		{
			return (*this)._method_eval_map_sub_ident(_293141_d,_293155_si->_field_ident);
		}
		goto _match_end_4613357024;
		_case_end_4613358944:;
		if (!((jule::real(_293217_kind->_method_prim())))) { goto _case_end_4613359072; }
		_case_begin_4613359072:;
		{
			jule::Ref<_1116aff70_Prim> _296617_p = _293217_kind->_method_prim();
			{
				auto _match_expr{ _296617_p->_field_kind };
				if (!((jule::Str("str", 3)) == _match_expr)) { goto _case_end_4613373712; }
				_case_begin_4613373712:;
				{
					return (*this)._method_eval_str_sub_ident(_293141_d,_293155_si->_field_ident);
				}
				goto _match_end_4611190048;
				_case_end_4613373712:;
				_match_end_4611190048:;
			}
		}
		goto _match_end_4613357024;
		_case_end_4613359072:;
		_match_end_4613357024:;
	}
	(*this)._method_push_err(_293155_si->_field_ident,jule::Str("object @ is not supports sub fields", 35),jule::Slice<jule::Any>({jule::Any(_293141_d->_field_kind->_method_to_str())}));
	return jule::new_ref<_1112d7f10_Data>();
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_sub_ident(jule::Ref<_11054f670_SubIdentExpr> _297738_si) {
	jule::Ref<_1116aff70_TypeKind> _297817_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_297817_prefix;
	});
	jule::Ref<_1112d7f10_Data> _298217_d = this->self->_method_eval_expr_kind(_297738_si->_field_expr);
	if ((!(jule::real(_298217_d)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_298217_d->_field_decl) {
		return this->self->_method_eval_type_static(_298217_d,_297738_si);
	}
	return this->self->_method_eval_obj_sub_ident(_298217_d,_297738_si);
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_tuple(jule::Ref<_11054f670_TupleExpr> _299434_tup) {
	jule::Ref<_1116aff70_Tuple> _299517_tup_t = jule::new_struct<_1116aff70_Tuple>(new( std::nothrow ) _1116aff70_Tuple());
	_299517_tup_t->_field_types=jule::Slice<jule::Ref<_1116aff70_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_299434_tup->_field_expr.len())));
	jule::Ref<_110e4e8a0_TupleExprModel> _299817_model = jule::new_struct<_110e4e8a0_TupleExprModel>(new( std::nothrow ) _110e4e8a0_TupleExprModel(jule::Slice<jule::Ref<_1112d7f10_Data>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_299434_tup->_field_expr.len())))));
	jule::Bool _300217_ok = true;
	{
		auto __julec_range_expr = _299434_tup->_field_expr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1112d7f10_i = 0;
			jule::Ref<_11054f670_Expr> _1112d7f10_expr = *__julec_range_begin;
			_iter_begin_4613388848:;
			{
				jule::Ref<_1112d7f10_Data> _300421_d = this->self->_method_eval_expr_kind(_1112d7f10_expr->_field_kind);
				if ((!(jule::real(_300421_d)))) {
					_300217_ok=false;
					goto _iter_next_4613388848;
				}
				_299517_tup_t->_field_types[static_cast<jule::Int>(_1112d7f10_i)]=_300421_d->_field_kind;
				_299817_model->_field_datas[static_cast<jule::Int>(_1112d7f10_i)]=_300421_d;
			}
			_iter_next_4613388848:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1112d7f10_i; _1112d7f10_expr = *__julec_range_begin; goto _iter_begin_4613388848; }
			_iter_end_4613388848:;
		}
	}
	if ((!(_300217_ok))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_299517_tup_t)),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_299817_model),jule::Bool(),jule::Ref<_1118cee40_Const>()));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_map(jule::Ref<_1116aff70_Map> _302332_m,jule::Ref<_11054f670_BraceLit> _302345_lit) {
	jule::Ref<_110e4e8a0_MapExprModel> _302417_model = jule::new_struct<_110e4e8a0_MapExprModel>(new( std::nothrow ) _110e4e8a0_MapExprModel(_302332_m->_field_key,_302332_m->_field_val,jule::Slice<jule::Ref<_110e4e8a0_KeyValPairExprModel>>()));
	{
		auto __julec_range_expr = _302345_lit->_field_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1112d7f10_expr = *__julec_range_begin;
			_iter_begin_4613412288:;
			{
				{
					auto _match_expr{ _1112d7f10_expr };
					if (!(_match_expr.type_is<jule::Ref<_11054f670_KeyValPair>>())) { goto _case_end_4613416432; }
					goto _match_end_4613413472;
					_case_end_4613416432:;
					_case_begin_4613413936:;
					{
						this->self->_method_push_err(_302345_lit->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
						return jule::new_ref<_1112d7f10_Data>();
					}
					goto _match_end_4613413472;
					_case_end_4613413936:;
					_match_end_4613413472:;
				}
				jule::Ref<_11054f670_KeyValPair> _303921_pair = _1112d7f10_expr.operator jule::Ref<_11054f670_KeyValPair>();
				jule::Ref<_1112d7f10_Data> _304121_key = this->self->_method_eval_expr_kind(_303921_pair->_field_key);
				if ((!(jule::real(_304121_key)))) {
					return jule::new_ref<_1112d7f10_Data>();
				}
				jule::Ref<_1112d7f10_Data> _304621_val = this->self->_method_eval_expr_kind(_303921_pair->_field_val);
				if ((!(jule::real(_304621_val)))) {
					return jule::new_ref<_1112d7f10_Data>();
				}
				this->self->_field_s->_method_check_assign_type(_302332_m->_field_key,_304121_key,_303921_pair->_field_colon,true);
				this->self->_field_s->_method_check_assign_type(_302332_m->_field_val,_304621_val,_303921_pair->_field_colon,true);
				_302417_model->_field_entries=jule::append(_302417_model->_field_entries,jule::Slice<jule::Ref<_110e4e8a0_KeyValPairExprModel>>({jule::new_struct<_110e4e8a0_KeyValPairExprModel>(new( std::nothrow ) _110e4e8a0_KeyValPairExprModel(_304121_key->_field_model,_304621_val->_field_model))}));
			}
			_iter_next_4613412288:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1112d7f10_expr = *__julec_range_begin; goto _iter_begin_4613412288; }
			_iter_end_4613412288:;
		}
	}
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_302332_m)),jule::Ref<_1116aff70_TypeKind>(),true,jule::Bool(),false,false,jule::Bool(),jule::Any(_302417_model),false,jule::Ref<_1118cee40_Const>()));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_brace_lit(jule::Ref<_11054f670_BraceLit> _307038_lit) {
	{
		if (!(((!(jule::real(this->self->_field_prefix)))))) { goto _case_end_4613434336; }
		_case_begin_4613434336:;
		{
			this->self->_method_push_err(_307038_lit->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613431648;
		_case_end_4613434336:;
		if (!((jule::real(this->self->_field_prefix->_method_map())))) { goto _case_end_4613435168; }
		_case_begin_4613435168:;
		{
			return this->self->_method_eval_map(this->self->_field_prefix->_method_map(),_307038_lit);
		}
		goto _match_end_4613431648;
		_case_end_4613435168:;
		if (!((jule::real(this->self->_field_prefix->_method_strct())))) { goto _case_end_4613435280; }
		_case_begin_4613435280:;
		{
			return this->self->_method_eval_struct_lit_explicit(this->self->_field_prefix->_method_strct(),_307038_lit->_field_exprs,_307038_lit->_field_token);
		}
		goto _match_end_4613431648;
		_case_end_4613435280:;
		_case_begin_4613431792:;
		{
			this->self->_method_push_err(_307038_lit->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613431648;
		_case_end_4613431792:;
		_match_end_4613431648:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_anon_fn(jule::Ref<_11054f670_FnDecl> _308835_decl) {
	_1116aff70_TypeChecker _308917_tc = _1116aff70_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ref<_1116aff70_Referencer>(),_1106ec050_Token(),jule::Slice<jule::Ref<_11054f670_GenericDecl>>(),jule::Slice<jule::Ref<_1116aff70_TypeAlias>>(),jule::Bool());
	jule::Ref<_11072eb20_FnIns> _309317_ins = _308917_tc._method_build_fn(_308835_decl);
	_309317_ins->_field_anon=true;
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_110af2660_ScopeChecker>>())) { goto _case_end_4613451520; }
		_case_begin_4613451520:;
		{
			jule::Ref<_110af2660_ScopeChecker> _309821_sc = (*this)._field_lookup.operator jule::Ref<_110af2660_ScopeChecker>();
			jule::Ref<_110af2660_ScopeChecker> _309921_scc = _309821_sc->_method_new_child_checker();
			_309921_scc->_field_labels=jule::new_ref<jule::Slice<jule::Ref<_110af2660_ScopeLabel>>>(nullptr);
			_309921_scc->_field_gotos=jule::new_ref<jule::Slice<jule::Ref<_110af2660_ScopeGoto>>>(nullptr);
			jule::drop(_309921_scc->_field_owner);
			_309921_scc->_field_child_index=0LL;
			_309921_scc->_field_it=0LL;
			_309921_scc->_field_cse=0LL;
			_309921_scc->_field_owner=_309317_ins;
			(*this)._field_s->_method_check_fn_ins_sc(_309317_ins,_309921_scc);
		}
		goto _match_end_4613448352;
		_case_end_4613451520:;
		_case_begin_4613448880:;
		{
			(*this)._field_s->_method_check_fn_ins(_309317_ins);
		}
		goto _match_end_4613448352;
		_case_end_4613448880:;
		_match_end_4613448352:;
	}
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_309317_ins)),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_110e4e8a0_AnonFnExprModel>(new( std::nothrow ) _110e4e8a0_AnonFnExprModel(_309317_ins,(*this)._method_is_global()))),jule::Bool(),jule::Ref<_1118cee40_Const>()));
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_binop(jule::Ref<_11054f670_BinopExpr> _312234_op) {
	jule::Ref<_1116aff70_TypeKind> _312317_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_312317_prefix;
	});
	_1112d7f10_BinopSolver _312717_bs = _1112d7f10_BinopSolver(this->self,jule::Ref<_1112d7f10_Data>(),jule::Ref<_1112d7f10_Data>(),_1106ec050_Token());
	return _312717_bs._method_solve(_312234_op);
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_expr_kind(jule::Any _313338_kind) {
	jule::Ref<_1112d7f10_Data> _313417_d = jule::new_ref<_1112d7f10_Data>();
	{
		auto _match_expr{ _313338_kind };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_LitExpr>>())) { goto _case_end_4613473488; }
		_case_begin_4613473488:;
		{
			_313417_d=this->self->_method_eval_lit(_313338_kind.operator jule::Ref<_11054f670_LitExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613473488:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_IdentExpr>>())) { goto _case_end_4613473696; }
		_case_begin_4613473696:;
		{
			_313417_d=this->self->_method_eval_ident(_313338_kind.operator jule::Ref<_11054f670_IdentExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613473696:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_UnaryExpr>>())) { goto _case_end_4613473808; }
		_case_begin_4613473808:;
		{
			_313417_d=this->self->_method_eval_unary(_313338_kind.operator jule::Ref<_11054f670_UnaryExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613473808:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_VariadicExpr>>())) { goto _case_end_4613474032; }
		_case_begin_4613474032:;
		{
			_313417_d=this->self->_method_eval_variadic(_313338_kind.operator jule::Ref<_11054f670_VariadicExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613474032:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_UnsafeExpr>>())) { goto _case_end_4613474144; }
		_case_begin_4613474144:;
		{
			_313417_d=this->self->_method_eval_unsafe(_313338_kind.operator jule::Ref<_11054f670_UnsafeExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613474144:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_SliceExpr>>())) { goto _case_end_4613474608; }
		_case_begin_4613474608:;
		{
			_313417_d=this->self->_method_eval_slice_expr(_313338_kind.operator jule::Ref<_11054f670_SliceExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613474608:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_IndexingExpr>>())) { goto _case_end_4613474720; }
		_case_begin_4613474720:;
		{
			_313417_d=this->self->_method_eval_indexing(_313338_kind.operator jule::Ref<_11054f670_IndexingExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613474720:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_SlicingExpr>>())) { goto _case_end_4613474832; }
		_case_begin_4613474832:;
		{
			_313417_d=this->self->_method_eval_slicing(_313338_kind.operator jule::Ref<_11054f670_SlicingExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613474832:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_CastExpr>>())) { goto _case_end_4613474944; }
		_case_begin_4613474944:;
		{
			_313417_d=this->self->_method_eval_cast(_313338_kind.operator jule::Ref<_11054f670_CastExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613474944:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_NsSelectionExpr>>())) { goto _case_end_4613475056; }
		_case_begin_4613475056:;
		{
			_313417_d=this->self->_method_eval_ns_selection(_313338_kind.operator jule::Ref<_11054f670_NsSelectionExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613475056:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_StructLit>>())) { goto _case_end_4613475168; }
		_case_begin_4613475168:;
		{
			_313417_d=this->self->_method_eval_struct_lit(_313338_kind.operator jule::Ref<_11054f670_StructLit>());
		}
		goto _match_end_4613471984;
		_case_end_4613475168:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_TypeDecl>>())) { goto _case_end_4613475280; }
		_case_begin_4613475280:;
		{
			_313417_d=this->self->_method_eval_type(_313338_kind.operator jule::Ref<_11054f670_TypeDecl>());
		}
		goto _match_end_4613471984;
		_case_end_4613475280:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_FnCallExpr>>())) { goto _case_end_4613475408; }
		_case_begin_4613475408:;
		{
			_313417_d=this->self->_method_eval_fn_call(_313338_kind.operator jule::Ref<_11054f670_FnCallExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613475408:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_SubIdentExpr>>())) { goto _case_end_4613475536; }
		_case_begin_4613475536:;
		{
			_313417_d=this->self->_method_eval_sub_ident(_313338_kind.operator jule::Ref<_11054f670_SubIdentExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613475536:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_TupleExpr>>())) { goto _case_end_4613475664; }
		_case_begin_4613475664:;
		{
			_313417_d=this->self->_method_eval_tuple(_313338_kind.operator jule::Ref<_11054f670_TupleExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613475664:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_BraceLit>>())) { goto _case_end_4613475792; }
		_case_begin_4613475792:;
		{
			_313417_d=this->self->_method_eval_brace_lit(_313338_kind.operator jule::Ref<_11054f670_BraceLit>());
		}
		goto _match_end_4613471984;
		_case_end_4613475792:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_FnDecl>>())) { goto _case_end_4613475920; }
		_case_begin_4613475920:;
		{
			_313417_d=this->self->_method_eval_anon_fn(_313338_kind.operator jule::Ref<_11054f670_FnDecl>());
		}
		goto _match_end_4613471984;
		_case_end_4613475920:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_BinopExpr>>())) { goto _case_end_4613476048; }
		_case_begin_4613476048:;
		{
			_313417_d=this->self->_method_eval_binop(_313338_kind.operator jule::Ref<_11054f670_BinopExpr>());
		}
		goto _match_end_4613471984;
		_case_end_4613476048:;
		_case_begin_4613472736:;
		{
			jule::drop(_313417_d);
		}
		goto _match_end_4613471984;
		_case_end_4613472736:;
		_match_end_4613471984:;
	}
	if ((!(jule::real(_313417_d)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if ((!(jule::real(_313417_d->_field_kind)))) {
		return _313417_d;
	}
	if ((((!(jule::real(_313417_d->_field_cast_kind))) && _313417_d->_method_is_const()) && (!(_313417_d->_field_is_rune))) && jule::real(_313417_d->_field_kind->_method_prim())) {
		{
			if (!((_313417_d->_field_constant->_method_is_i64()))) { goto _case_end_4613508576; }
			_case_begin_4613508576:;
			{
				if (_1111c0be0_int_assignable(jule::Str("int", 3),_313417_d)) {
					_313417_d->_field_kind->_field_kind=_1116aff70_build_prim_type(jule::Str("int", 3));
				}
			}
			goto _match_end_4613508384;
			_case_end_4613508576:;
			if (!((_313417_d->_field_constant->_method_is_u64()))) { goto _case_end_4613508704; }
			_case_begin_4613508704:;
			{
				if (_1111c0be0_int_assignable(jule::Str("uint", 4),_313417_d)) {
					_313417_d->_field_kind->_field_kind=_1116aff70_build_prim_type(jule::Str("uint", 4));
				}
			}
			goto _match_end_4613508384;
			_case_end_4613508704:;
			_match_end_4613508384:;
		}
	}
	if ((!(_313417_d->_field_decl))) {
		if ((((((jule::real(this->self->_field_prefix) && (!(jule::real(_313417_d->_field_cast_kind)))) && (!(_313417_d->_field_variadiced))) && (!(_313417_d->_field_lvalue))) && (!(_313417_d->_method_is_const()))) && jule::real(_313417_d->_field_kind->_method_prim())) && _1118e4c20_is_num(_313417_d->_field_kind->_method_prim()->_field_kind)) {
			_313417_d->_field_cast_kind=_313417_d->_field_kind;
		}
		_1112d7f10_apply_cast_kind(_313417_d);
		if ((!(jule::real(_313417_d->_field_kind->_method_prim()))) || (!(_313417_d->_field_kind->_method_prim()->_method_is_any()))) {
			if ((jule::real(this->self->_field_prefix) && jule::real(this->self->_field_prefix->_method_prim())) && this->self->_field_prefix->_method_prim()->_method_is_any()) {
				_313417_d->_field_cast_kind=this->self->_field_prefix;
				_1112d7f10_apply_cast_kind_model(_313417_d);
				jule::drop(_313417_d->_field_cast_kind);
			}
		}
	}
	return _313417_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval(jule::Ref<_11054f670_Expr> _320728_expr) {
	jule::Ref<_1112d7f10_Data> _320817_d = this->self->_method_eval_expr_kind(_320728_expr->_field_kind);
	if ((!(jule::real(_320817_d))) || (!(jule::real(_320817_d->_field_kind)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		if (!((jule::real(_320817_d->_field_kind->_method_fnc())))) { goto _case_end_4613532384; }
		_case_begin_4613532384:;
		{
			jule::Ref<_11072eb20_FnIns> _321521_f = _320817_d->_field_kind->_method_fnc();
			if (_321521_f->_method_is_builtin()) {
				goto _match_end_4613532288;
			}
			if (_321521_f->_field_generics.len() != _321521_f->_field_decl->_field_generics.len()) {
				this->self->_field_s->_method_push_err(_320728_expr->_field_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>({}));
			}
			if (_321521_f->_field_decl->_method_is_method()) {
				this->self->_field_s->_method_push_err(_320728_expr->_field_token,jule::Str("methods should be invoked", 25),jule::Slice<jule::Any>({}));
			}
		}
		goto _match_end_4613532288;
		_case_end_4613532384:;
		_match_end_4613532288:;
	}
	return _320817_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_Eval::_method_eval_expr(jule::Ref<_11054f670_Expr> _323533_expr) {
	jule::Ref<_1112d7f10_Data> _323617_d = this->self->_method_eval(_323533_expr);
	{
		if (!(((!(jule::real(_323617_d)))))) { goto _case_end_4613546992; }
		_case_begin_4613546992:;
		{
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613545424;
		_case_end_4613546992:;
		if (!((_323617_d->_field_decl))) { goto _case_end_4613547104; }
		_case_begin_4613547104:;
		{
			this->self->_method_push_err(_323533_expr->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613545424;
		_case_end_4613547104:;
		_case_begin_4613545680:;
		{
			return _323617_d;
		}
		goto _match_end_4613545424;
		_case_end_4613545680:;
		_match_end_4613545424:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1112d7f10_Eval &_Src) {
	_Stream << "Eval{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "prefix:" << _Src._field_prefix << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "owner:" << _Src._field_owner;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1116aff70_TypeKind::_method_to_str(void) {
	if ((*this)._method_is_nil()) {
		return jule::Str("nil", 3);
	}
	jule::Str _6317_kind = jule::Str("", 0);
	if ((*this)._field_variadic) {
		_6317_kind+=jule::Str("...", 3);
	}
	if ((*this)._method_is_cpp_linked()) {
		_6317_kind+=jule::Str("cpp.", 4) + (*this)._field_cpp_ident;
	} else {
		_6317_kind+=(*this)._field_kind.get()._method_to_str();
	}
	return _6317_kind;
}



inline jule::Bool _1116aff70_TypeKind::_method_equals(jule::Ref<_1116aff70_TypeKind> _7821_other) {
	if ((*this)._method_is_nil()) {
		return _7821_other->_method_is_nil();
	}
	if ((*this)._method_is_cpp_linked()) {
		if ((!(_7821_other->_method_is_cpp_linked()))) {
			return false;
		}
		return (*this)._field_cpp_ident == _7821_other->_field_cpp_ident;
	}
	return (*this)._field_kind.get()._method_equals(_7821_other);
}



inline jule::Ref<_1116aff70_TypeKind> _1116aff70_TypeKind::_method_clone(void) {
	if ((!(jule::real(this->self)))) {
		return jule::new_ref<_1116aff70_TypeKind>();
	}
	jule::Ref<_1116aff70_TypeKind> _10117_kind = jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(this->self->_field_cpp_ident,jule::Bool(),this->self->_field_kind));
	return _10117_kind;
}



inline jule::Bool _1116aff70_TypeKind::_method_is_cpp_linked(void) {
	return (*this)._field_cpp_ident.len() != 0LL;
}



inline jule::Bool _1116aff70_TypeKind::_method_is_nil(void) {
	return (*this)._field_kind == nullptr;
}



inline jule::Bool _1116aff70_TypeKind::_method_is_void(void) {
	jule::Ref<_1116aff70_Prim> _11613_prim = (*((&((*this)))))._method_prim();
	return jule::real(_11613_prim) && (_11613_prim->_method_to_str() == jule::Str("void", 4));
}



inline jule::Ref<_1116aff70_Prim> _1116aff70_TypeKind::_method_prim(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_Prim>>())) { goto _case_end_4614035088; }
		_case_begin_4614035088:;
		{
			return (*this)._field_kind.operator jule::Ref<_1116aff70_Prim>();
		}
		goto _match_end_4614030992;
		_case_end_4614035088:;
		_case_begin_4614033456:;
		{
			return jule::new_ref<_1116aff70_Prim>();
		}
		goto _match_end_4614030992;
		_case_end_4614033456:;
		_match_end_4614030992:;
	}
}



inline jule::Ref<_1116aff70_Ref> _1116aff70_TypeKind::_method_ref(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_Ref>>())) { goto _case_end_4614038512; }
		_case_begin_4614038512:;
		{
			return (*this)._field_kind.operator jule::Ref<_1116aff70_Ref>();
		}
		goto _match_end_4614035680;
		_case_end_4614038512:;
		_case_begin_4614034368:;
		{
			return jule::new_ref<_1116aff70_Ref>();
		}
		goto _match_end_4614035680;
		_case_end_4614034368:;
		_match_end_4614035680:;
	}
}



inline jule::Ref<_1116aff70_Ptr> _1116aff70_TypeKind::_method_ptr(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_Ptr>>())) { goto _case_end_4614042000; }
		_case_begin_4614042000:;
		{
			return (*this)._field_kind.operator jule::Ref<_1116aff70_Ptr>();
		}
		goto _match_end_4614040272;
		_case_end_4614042000:;
		_case_begin_4614037136:;
		{
			return jule::new_ref<_1116aff70_Ptr>();
		}
		goto _match_end_4614040272;
		_case_end_4614037136:;
		_match_end_4614040272:;
	}
}



inline jule::Ref<_110e453c0_Enum> _1116aff70_TypeKind::_method_enm(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_110e453c0_Enum>>())) { goto _case_end_4614045392; }
		_case_begin_4614045392:;
		{
			return (*this)._field_kind.operator jule::Ref<_110e453c0_Enum>();
		}
		goto _match_end_4614040912;
		_case_end_4614045392:;
		_case_begin_4614041248:;
		{
			return jule::new_ref<_110e453c0_Enum>();
		}
		goto _match_end_4614040912;
		_case_end_4614041248:;
		_match_end_4614040912:;
	}
}



inline jule::Ref<_1116aff70_Arr> _1116aff70_TypeKind::_method_arr(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_Arr>>())) { goto _case_end_4614048784; }
		_case_begin_4614048784:;
		{
			return (*this)._field_kind.operator jule::Ref<_1116aff70_Arr>();
		}
		goto _match_end_4614045632;
		_case_end_4614048784:;
		_case_begin_4614044016:;
		{
			return jule::new_ref<_1116aff70_Arr>();
		}
		goto _match_end_4614045632;
		_case_end_4614044016:;
		_match_end_4614045632:;
	}
}



inline jule::Ref<_1116aff70_Slc> _1116aff70_TypeKind::_method_slc(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_Slc>>())) { goto _case_end_4614052208; }
		_case_begin_4614052208:;
		{
			return (*this)._field_kind.operator jule::Ref<_1116aff70_Slc>();
		}
		goto _match_end_4614049376;
		_case_end_4614052208:;
		_case_begin_4614048064:;
		{
			return jule::new_ref<_1116aff70_Slc>();
		}
		goto _match_end_4614049376;
		_case_end_4614048064:;
		_match_end_4614049376:;
	}
}



inline jule::Ref<_11072eb20_FnIns> _1116aff70_TypeKind::_method_fnc(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_11072eb20_FnIns>>())) { goto _case_end_4614055600; }
		_case_begin_4614055600:;
		{
			return (*this)._field_kind.operator jule::Ref<_11072eb20_FnIns>();
		}
		goto _match_end_4614052448;
		_case_end_4614055600:;
		_case_begin_4614050832:;
		{
			return jule::new_ref<_11072eb20_FnIns>();
		}
		goto _match_end_4614052448;
		_case_end_4614050832:;
		_match_end_4614052448:;
	}
}



inline jule::Ref<_1109372e0_StructIns> _1116aff70_TypeKind::_method_strct(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_StructIns>>())) { goto _case_end_4614058992; }
		_case_begin_4614058992:;
		{
			return (*this)._field_kind.operator jule::Ref<_1109372e0_StructIns>();
		}
		goto _match_end_4614056192;
		_case_end_4614058992:;
		_case_begin_4614054880:;
		{
			return jule::new_ref<_1109372e0_StructIns>();
		}
		goto _match_end_4614056192;
		_case_end_4614054880:;
		_match_end_4614056192:;
	}
}



inline jule::Ref<_110e3f160_Trait> _1116aff70_TypeKind::_method_trt(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_110e3f160_Trait>>())) { goto _case_end_4614062384; }
		_case_begin_4614062384:;
		{
			return (*this)._field_kind.operator jule::Ref<_110e3f160_Trait>();
		}
		goto _match_end_4614059584;
		_case_end_4614062384:;
		_case_begin_4614058272:;
		{
			return jule::new_ref<_110e3f160_Trait>();
		}
		goto _match_end_4614059584;
		_case_end_4614058272:;
		_match_end_4614059584:;
	}
}



inline jule::Ref<_1116aff70_Map> _1116aff70_TypeKind::_method_map(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_Map>>())) { goto _case_end_4614065776; }
		_case_begin_4614065776:;
		{
			return (*this)._field_kind.operator jule::Ref<_1116aff70_Map>();
		}
		goto _match_end_4614062976;
		_case_end_4614065776:;
		_case_begin_4614061664:;
		{
			return jule::new_ref<_1116aff70_Map>();
		}
		goto _match_end_4614062976;
		_case_end_4614061664:;
		_match_end_4614062976:;
	}
}



inline jule::Ref<_1116aff70_Tuple> _1116aff70_TypeKind::_method_tup(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_Tuple>>())) { goto _case_end_4614069200; }
		_case_begin_4614069200:;
		{
			return (*this)._field_kind.operator jule::Ref<_1116aff70_Tuple>();
		}
		goto _match_end_4614066992;
		_case_end_4614069200:;
		_case_begin_4614065056:;
		{
			return jule::new_ref<_1116aff70_Tuple>();
		}
		goto _match_end_4614066992;
		_case_end_4614065056:;
		_match_end_4614066992:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1116aff70_TypeKind &_Src) {
	_Stream << "TypeKind{";
	_Stream << "cpp_ident:" << _Src._field_cpp_ident << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1116aff70_TypeSymbol::_method_checked(void) {
	return jule::real((*this)._field_kind);
}



inline void _1116aff70_TypeSymbol::_method_remove_kind(void) {
	jule::drop((*this)._field_kind);
}







std::ostream &operator<<(std::ostream &_Stream, const _1116aff70_TypeSymbol &_Src) {
	_Stream << "TypeSymbol{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1116aff70_Prim::_method_to_str(void) {
	return (*this)._field_kind;
}



inline jule::Bool _1116aff70_Prim::_method_equals(jule::Ref<_1116aff70_TypeKind> _23421_other) {
	jule::Ref<_1116aff70_Prim> _23513_prim = (_23421_other).alloc->_method_prim();
	if ((!(jule::real(_23513_prim)))) {
		return false;
	}
	return (*this)._field_kind == _23513_prim->_field_kind;
}



inline jule::Bool _1116aff70_Prim::_method_is_i8(void) {
	return (*this)._field_kind == jule::Str("i8", 2);
}



inline jule::Bool _1116aff70_Prim::_method_is_i16(void) {
	return (*this)._field_kind == jule::Str("i16", 3);
}



inline jule::Bool _1116aff70_Prim::_method_is_i32(void) {
	return (*this)._field_kind == jule::Str("i32", 3);
}



inline jule::Bool _1116aff70_Prim::_method_is_i64(void) {
	return (*this)._field_kind == jule::Str("i64", 3);
}



inline jule::Bool _1116aff70_Prim::_method_is_u8(void) {
	return (*this)._field_kind == jule::Str("u8", 2);
}



inline jule::Bool _1116aff70_Prim::_method_is_u16(void) {
	return (*this)._field_kind == jule::Str("u16", 3);
}



inline jule::Bool _1116aff70_Prim::_method_is_u32(void) {
	return (*this)._field_kind == jule::Str("u32", 3);
}



inline jule::Bool _1116aff70_Prim::_method_is_u64(void) {
	return (*this)._field_kind == jule::Str("u64", 3);
}



inline jule::Bool _1116aff70_Prim::_method_is_f32(void) {
	return (*this)._field_kind == jule::Str("f32", 3);
}



inline jule::Bool _1116aff70_Prim::_method_is_f64(void) {
	return (*this)._field_kind == jule::Str("f64", 3);
}



inline jule::Bool _1116aff70_Prim::_method_is_int(void) {
	return (*this)._field_kind == jule::Str("int", 3);
}



inline jule::Bool _1116aff70_Prim::_method_is_uint(void) {
	return (*this)._field_kind == jule::Str("uint", 4);
}



inline jule::Bool _1116aff70_Prim::_method_is_uintptr(void) {
	return (*this)._field_kind == jule::Str("uintptr", 7);
}



inline jule::Bool _1116aff70_Prim::_method_is_bool(void) {
	return (*this)._field_kind == jule::Str("bool", 4);
}



inline jule::Bool _1116aff70_Prim::_method_is_str(void) {
	return (*this)._field_kind == jule::Str("str", 3);
}



inline jule::Bool _1116aff70_Prim::_method_is_any(void) {
	return (*this)._field_kind == jule::Str("any", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _1116aff70_Prim &_Src) {
	_Stream << "Prim{";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1116aff70_Ref::_method_to_str(void) {
	return jule::Str("&", 1) + (*this)._field_elem->_method_to_str();
}



inline jule::Bool _1116aff70_Ref::_method_equals(jule::Ref<_1116aff70_TypeKind> _30321_other) {
	jule::Ref<_1116aff70_Ref> _30413_ref = (_30321_other).alloc->_method_ref();
	if ((!(jule::real(_30413_ref)))) {
		return false;
	}
	return (*this)._field_elem->_method_equals(_30413_ref->_field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1116aff70_Ref &_Src) {
	_Stream << "Ref{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1116aff70_Slc::_method_to_str(void) {
	return jule::Str("[]", 2) + (*this)._field_elem->_method_to_str();
}



inline jule::Bool _1116aff70_Slc::_method_equals(jule::Ref<_1116aff70_TypeKind> _32221_other) {
	jule::Ref<_1116aff70_Slc> _32313_slc = (_32221_other).alloc->_method_slc();
	if ((!(jule::real(_32313_slc)))) {
		return false;
	}
	return (*this)._field_elem->_method_equals(_32313_slc->_field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1116aff70_Slc &_Src) {
	_Stream << "Slc{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1116aff70_Tuple::_method_to_str(void) {
	jule::Str _33917_s = jule::Str("(", 1);
	_33917_s+=(*this)._field_types[0LL]->_method_to_str();
	{
		auto __julec_range_expr = (*this)._field_types.slice(1LL);
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1116aff70_TypeKind> _1116aff70_t = *__julec_range_begin;
			_iter_begin_4614124896:;
			{
				_33917_s+=jule::Str(",", 1);
				_33917_s+=_1116aff70_t->_method_to_str();
			}
			_iter_next_4614124896:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1116aff70_t = *__julec_range_begin; goto _iter_begin_4614124896; }
			_iter_end_4614124896:;
		}
	}
	_33917_s+=jule::Str(")", 1);
	return _33917_s;
}



inline jule::Bool _1116aff70_Tuple::_method_equals(jule::Ref<_1116aff70_TypeKind> _35021_other) {
	jule::Ref<_1116aff70_Tuple> _35113_tup = (_35021_other).alloc->_method_tup();
	if ((!(jule::real(_35113_tup)))) {
		return false;
	}
	if ((*this)._field_types.len() != _35113_tup->_field_types.len()) {
		return false;
	}
	jule::Int _36017_i = 0LL;
	_iter_begin_4614131024:;
	if (!(_36017_i < (*this)._field_types.len())) { goto _iter_end_4614131024; }
	{
		if ((!((*this)._field_types[static_cast<jule::Int>(_36017_i)]->_method_equals(_35113_tup->_field_types[static_cast<jule::Int>(_36017_i)])))) {
			return false;
		}
	}
	_iter_next_4614131024:;
	(_36017_i)++;
	goto _iter_begin_4614131024;
	_iter_end_4614131024:;
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1116aff70_Tuple &_Src) {
	_Stream << "Tuple{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1116aff70_Map::_method_to_str(void) {
	jule::Str _38017_s = jule::Str("[", 1);
	_38017_s+=(*this)._field_key->_method_to_str();
	_38017_s+=jule::Str(":", 1);
	_38017_s+=(*this)._field_val->_method_to_str();
	_38017_s+=jule::Str("]", 1);
	return _38017_s;
}



inline jule::Bool _1116aff70_Map::_method_equals(jule::Ref<_1116aff70_TypeKind> _38921_other) {
	jule::Ref<_1116aff70_Map> _39013_map = (_38921_other).alloc->_method_map();
	if ((!(jule::real(_39013_map)))) {
		return false;
	}
	return (*this)._field_key->_method_equals(_39013_map->_field_key) && (*this)._field_val->_method_equals(_39013_map->_field_val);
}







std::ostream &operator<<(std::ostream &_Stream, const _1116aff70_Map &_Src) {
	_Stream << "Map{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1116aff70_Arr::_method_to_str(void) {
	jule::Str _40817_s = jule::Str("[", 1);
	_40817_s+=_110054e40_itoa((*this)._field_n);
	_40817_s+=jule::Str("]", 1);
	_40817_s+=(*this)._field_elem->_method_to_str();
	return _40817_s;
}



inline jule::Bool _1116aff70_Arr::_method_equals(jule::Ref<_1116aff70_TypeKind> _41621_other) {
	jule::Ref<_1116aff70_Arr> _41713_arr = (_41621_other).alloc->_method_arr();
	if ((!(jule::real(_41713_arr)))) {
		return false;
	}
	return ((*this)._field_n == _41713_arr->_field_n) && (*this)._field_elem->_method_equals(_41713_arr->_field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1116aff70_Arr &_Src) {
	_Stream << "Arr{";
	_Stream << "auto:" << _Src._field_auto << ", ";
	_Stream << "n:" << _Src._field_n << ", ";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1116aff70_Ptr::_method_to_str(void) {
	if ((*this)._method_is_unsafe()) {
		return jule::Str("*unsafe", 7);
	}
	return jule::Str("*", 1) + (*this)._field_elem->_method_to_str();
}



inline jule::Bool _1116aff70_Ptr::_method_equals(jule::Ref<_1116aff70_TypeKind> _44021_other) {
	jule::Ref<_1116aff70_Ptr> _44113_ptr = (_44021_other).alloc->_method_ptr();
	if ((!(jule::real(_44113_ptr)))) {
		return false;
	}
	return (*this)._field_elem->_method_equals(_44113_ptr->_field_elem);
}



inline jule::Bool _1116aff70_Ptr::_method_is_unsafe(void) {
	return (!(jule::real((*this)._field_elem)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1116aff70_Ptr &_Src) {
	_Stream << "Ptr{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1116aff70_Referencer &_Src) {
	_Stream << "Referencer{";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "refs:" << _Src._field_refs;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_110e4edc0_ImportInfo> _110194230_PlainImporter::_method_get_import(jule::Str _10333_path) {
	{
		auto __julec_range_expr = (*this)._field_all_packages;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _110194230_p = *__julec_range_begin;
			_iter_begin_4614733360:;
			{
				if (_110194230_p->_field_path == _10333_path) {
					return _110194230_p;
				}
			}
			_iter_next_4614733360:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110194230_p = *__julec_range_begin; goto _iter_begin_4614733360; }
			_iter_end_4614733360:;
		}
	}
	return jule::new_ref<_110e4edc0_ImportInfo>();
}



inline std::tuple<jule::Slice<jule::Ref<_1104fada0_Ast>>,jule::Slice<_127e05da0_Log>> _110194230_PlainImporter::_method_import_package(jule::Str _11337_path) {
	jule::Slice<jule::Ref<_110473c30_DirEntry>> _11414_dirents;
	jule::Str _11423_err_msg;
	std::tie(_11414_dirents,_11423_err_msg) = _110194230_read_package_dirents(_11337_path);
	if (_11423_err_msg != jule::Str("", 0)) {
		jule::Slice<_127e05da0_Log> _11621_errors = jule::Slice<_127e05da0_Log>({_110194230_flat_compiler_err(_11423_err_msg)});
		return std::make_tuple(nullptr,_11621_errors);
	}
	jule::Slice<jule::Ref<_1104fada0_Ast>> _12017_asts = jule::Slice<jule::Ref<_1104fada0_Ast>>::alloc(0LL,static_cast<jule::Int>(static_cast<jule::I64>(_11414_dirents.len())));
	{
		auto __julec_range_expr = _11414_dirents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110473c30_DirEntry> _110194230_dirent = *__julec_range_begin;
			_iter_begin_4614738560:;
			{
				jule::Str _12217_path = _117e1d320_join(jule::Slice<jule::Str>({_11337_path,_110194230_dirent->_field_name}));
				jule::Ref<_11054ec70_File> _12321_file = _11054ec70_new_file_set(_12217_path);
				_12321_file->_method_fill(_110194230_read_buff(_12321_file->_method_path()));
				jule::Slice<_127e05da0_Log> _12521_errors = _11054eff0_lex(_12321_file);
				if (_12521_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_12521_errors);
				}
				jule::Ref<_1106f8b50_FileInfo> _13021_finfo = _1106f8b50_parse_file(_12321_file);
				if (_13021_finfo->_field_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_13021_finfo->_field_errors);
				}
				if ((!(_127e05990_is_pass_file_annotation(_110194230_dirent->_field_name)))) {
					goto _iter_next_4614738560;
				}
				if ((!(_110194230_is_pass_build_directives(_13021_finfo->_field_ast)))) {
					goto _iter_next_4614738560;
				}
				_12017_asts=jule::append(_12017_asts,jule::Slice<jule::Ref<_1104fada0_Ast>>({_13021_finfo->_field_ast}));
			}
			_iter_next_4614738560:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110194230_dirent = *__julec_range_begin; goto _iter_begin_4614738560; }
			_iter_end_4614738560:;
		}
	}
	return std::make_tuple(_12017_asts,nullptr);
}



inline void _110194230_PlainImporter::_method_imported(jule::Ref<_110e4edc0_ImportInfo> _15135_imp) {
	{
		auto __julec_range_expr = (*this)._field_all_packages;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _110194230_p = *__julec_range_begin;
			_iter_begin_4614764288:;
			{
				if ((_110194230_p->_field_cpp_linked == _15135_imp->_field_cpp_linked) && (_110194230_p->_field_link_path == _15135_imp->_field_link_path)) {
					return;
				}
			}
			_iter_next_4614764288:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110194230_p = *__julec_range_begin; goto _iter_begin_4614764288; }
			_iter_end_4614764288:;
		}
	}
	(*this)._field_all_packages=jule::append((*this)._field_all_packages,jule::Slice<jule::Ref<_110e4edc0_ImportInfo>>({_15135_imp}));
}







std::ostream &operator<<(std::ostream &_Stream, const _110194230_PlainImporter &_Src) {
	_Stream << "PlainImporter{";
	_Stream << "all_packages:" << _Src._field_all_packages;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Ref<_110254280_IR>,jule::Slice<_127e05da0_Log>> _110254280_IR::_static_method_build(jule::Str _2425_path) {
	jule::Ref<_110194230_PlainImporter> _2517_importer = jule::new_struct<_110194230_PlainImporter>(new( std::nothrow ) _110194230_PlainImporter());
	jule::Slice<jule::Ref<_1104fada0_Ast>> _2618_files;
	jule::Slice<_127e05da0_Log> _2629_logs;
	std::tie(_2618_files,_2629_logs) = _2517_importer->_method_import_package(_2425_path);
	if (_2629_logs.len() > 0LL) {
		return std::make_tuple(jule::new_ref<_110254280_IR>(),_2629_logs);
	}
	if (_2618_files.len() == 0LL) {
		return std::make_tuple(jule::new_ref<_110254280_IR>(),nullptr);
	}
	jule::Ref<_110e4edc0_Package> _3518_pkg;
	std::tie(_3518_pkg,_2629_logs) = _1117d9ee0_analyze_package(_2618_files,_2517_importer);
	if (_2629_logs.len() > 0LL) {
		return std::make_tuple(jule::new_ref<_110254280_IR>(),_2629_logs);
	}
	jule::Ref<_110254280_IR> _4017_ir = jule::new_struct<_110254280_IR>(new( std::nothrow ) _110254280_IR(jule::Slice<jule::Str>(),_3518_pkg,_2517_importer->_field_all_packages));
	_4017_ir->_field_passes=_110254280_get_all_unique_passes(_4017_ir->_field_main,_4017_ir->_field_used);
	return std::make_tuple(_4017_ir,nullptr);
}



inline void _110254280_IR::_method_append_structs(jule::Ref<_110e4edc0_Package> _5133_p,jule::Slice<jule::Ref<_1109372e0_Struct>>& _5157_buffer) {
	{
		auto __julec_range_expr = _5133_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110254280_f = *__julec_range_begin;
			_iter_begin_4614836688:;
			{
				jule::Int _5321_i = 0LL;
				_iter_begin_4614838512:;
				if (!(_5321_i < _110254280_f->_field_structs._method_len())) { goto _iter_end_4614838512; }
				{
					jule::Ref<_1109372e0_Struct> _5525_s = _110254280_f->_field_structs._method_at(_5321_i);
					if ((!(_5525_s->_field_cpp_linked))) {
						_5157_buffer=jule::append(_5157_buffer,jule::Slice<jule::Ref<_1109372e0_Struct>>({_5525_s}));
					}
				}
				_iter_next_4614838512:;
				(_5321_i)++;
				goto _iter_begin_4614838512;
				_iter_end_4614838512:;
			}
			_iter_next_4614836688:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110254280_f = *__julec_range_begin; goto _iter_begin_4614836688; }
			_iter_end_4614836688:;
		}
	}
}



inline jule::Slice<jule::Ref<_1109372e0_Struct>> _110254280_IR::_method_get_all_structures(void) {
	jule::Slice<jule::Ref<_1109372e0_Struct>> _6617_buffer = nullptr;
	(*this)._method_append_structs((*this)._field_main,_6617_buffer);
	{
		auto __julec_range_expr = (*this)._field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _110254280_u = *__julec_range_begin;
			_iter_begin_4614846624:;
			{
				if ((!(_110254280_u->_field_cpp_linked))) {
					(*this)._method_append_structs(_110254280_u->_field_package,_6617_buffer);
				}
			}
			_iter_next_4614846624:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110254280_u = *__julec_range_begin; goto _iter_begin_4614846624; }
			_iter_end_4614846624:;
		}
	}
	return _6617_buffer;
}



inline void _110254280_IR::_method_append_vars(jule::Ref<_110e4edc0_Package> _7930_p,jule::Slice<jule::Ref<_110e92c80_Var>>& _7954_buffer) {
	{
		auto __julec_range_expr = _7930_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110254280_f = *__julec_range_begin;
			_iter_begin_4614853296:;
			{
				jule::Int _8121_i = 0LL;
				_iter_begin_4614855120:;
				if (!(_8121_i < _110254280_f->_field_vars._method_len())) { goto _iter_end_4614855120; }
				{
					jule::Ref<_110e92c80_Var> _8325_v = _110254280_f->_field_vars._method_at(_8121_i);
					if ((!(_8325_v->_field_cpp_linked))) {
						_7954_buffer=jule::append(_7954_buffer,jule::Slice<jule::Ref<_110e92c80_Var>>({_8325_v}));
					}
				}
				_iter_next_4614855120:;
				(_8121_i)++;
				goto _iter_begin_4614855120;
				_iter_end_4614855120:;
			}
			_iter_next_4614853296:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110254280_f = *__julec_range_begin; goto _iter_begin_4614853296; }
			_iter_end_4614853296:;
		}
	}
}



inline jule::Slice<jule::Ref<_110e92c80_Var>> _110254280_IR::_method_get_all_variables(void) {
	jule::Slice<jule::Ref<_110e92c80_Var>> _9417_buffer = nullptr;
	(*this)._method_append_vars((*this)._field_main,_9417_buffer);
	{
		auto __julec_range_expr = (*this)._field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _110254280_u = *__julec_range_begin;
			_iter_begin_4614863104:;
			{
				if ((!(_110254280_u->_field_cpp_linked))) {
					(*this)._method_append_vars(_110254280_u->_field_package,_9417_buffer);
				}
			}
			_iter_next_4614863104:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110254280_u = *__julec_range_begin; goto _iter_begin_4614863104; }
			_iter_end_4614863104:;
		}
	}
	return _9417_buffer;
}







std::ostream &operator<<(std::ostream &_Stream, const _110254280_IR &_Src) {
	_Stream << "IR{";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "main:" << _Src._field_main << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}



inline void _1102a20b0_ScopeDeadCode::_method_optimize_child(jule::Ref<_110af2660_Scope> _2338_s) {
	jule::Ref<_1102a20b0_ScopeDeadCode> _2417_sdc = jule::new_struct<_1102a20b0_ScopeDeadCode>(new( std::nothrow ) _1102a20b0_ScopeDeadCode(this->self,_2338_s,(&(_2338_s->_field_stmts)),jule::Int()));
	{
		_2417_sdc->_method_optimize_stmts();
	}
}



inline void _1102a20b0_ScopeDeadCode::_method_eliminate_followed(void) {
	(*this)._field_stmts->_method_remove_range(static_cast<jule::Int>((*this)._field_i + 1LL),static_cast<jule::Int>(((*this)._field_stmts->_method_len() - (*this)._field_i) - 1LL));
	jule::Ref<_1102a20b0_ScopeDeadCode> _3417_parent = (*this)._field_parent;
	_iter_begin_4615141936:;
	if (!(jule::real(_3417_parent))) { goto _iter_end_4615141936; }
	{
		_3417_parent->_field_stmts->_method_remove_range(static_cast<jule::Int>(_3417_parent->_field_i + 1LL),static_cast<jule::Int>((_3417_parent->_field_stmts->_method_len() - _3417_parent->_field_i) - 1LL));
		_3417_parent=_3417_parent->_field_parent;
	}
	_iter_next_4615141936:;
	goto _iter_begin_4615141936;
	_iter_end_4615141936:;
}



inline void _1102a20b0_ScopeDeadCode::_method_optimize_stmt(jule::Any _4144_st) {
	{
		auto _match_expr{ _4144_st };
		if (!(_match_expr.type_is<jule::Ref<_110af2660_Scope>>())) { goto _case_end_4615148544; }
		_case_begin_4615148544:;
		{
			jule::Ref<_110af2660_Scope> _4421_scope = _4144_st.operator jule::Ref<_110af2660_Scope>();
			if (_4421_scope->_field_deferred) {
				_1102a20b0_eliminate_dead_code_of_scope(_4421_scope);
			} else {
				this->self->_method_optimize_child(_4421_scope);
			}
		}
		goto _match_end_4615148288;
		_case_end_4615148544:;
		if (!(_match_expr.type_is<jule::Ref<_1112d7f10_Data>>())) { goto _case_end_4615148656; }
		_case_begin_4615148656:;
		{
			{
				auto _match_expr{ _4144_st.operator jule::Ref<_1112d7f10_Data>()->_field_model };
				if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinPanicCallExprModel>>())) { goto _case_end_4615155232; }
				_case_begin_4615155232:;
				{
					this->self->_method_eliminate_followed();
				}
				goto _match_end_4615152688;
				_case_end_4615155232:;
				_match_end_4615152688:;
			}
		}
		goto _match_end_4615148288;
		_case_end_4615148656:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_RetSt>>())) { goto _case_end_4615148944; }
		_case_begin_4615148944:;
		{
			this->self->_method_eliminate_followed();
		}
		goto _match_end_4615148288;
		_case_end_4615148944:;
		_match_end_4615148288:;
	}
}



inline void _1102a20b0_ScopeDeadCode::_method_optimize_stmts(void) {
	this->self->_field_i=0LL;
	_iter_begin_4615158528:;
	if (!(this->self->_field_i < this->self->_field_stmts->_method_len())) { goto _iter_end_4615158528; }
	{
		this->self->_method_optimize_stmt(this->self->_field_stmts->_method_at(this->self->_field_i));
	}
	_iter_next_4615158528:;
	(this->self->_field_i)++;
	goto _iter_begin_4615158528;
	_iter_end_4615158528:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1102a20b0_ScopeDeadCode &_Src) {
	_Stream << "ScopeDeadCode{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1114d55f0_IndexRangeSetter::_method_setup_vars(jule::Ref<_110e92c80_Var> _4629_key_a,jule::Ref<_110e92c80_Var> _4646_key_b) {
	jule::Str _4713_indent = _111b4cab0_indent();
	jule::Str _4917_obj = jule::Str("", 0);
	if (jule::real(_4629_key_a)) {
		_4917_obj+=_111b4cab0_gen_var_init_expr(_4629_key_a,jule::Str("0", 1));
		_4917_obj+=jule::Str("\n", 1);
		_4917_obj+=_4713_indent;
	}
	if (jule::real(_4646_key_b)) {
		_4917_obj+=_111b4cab0_gen_var_init_expr(_4646_key_b,jule::Str("*__julec_range_begin", 20));
		_4917_obj+=jule::Str("\n", 1);
		_4917_obj+=_4713_indent;
	}
	return _4917_obj;
}



inline jule::Str _1114d55f0_IndexRangeSetter::_method_next_steps(jule::Ref<_110e92c80_Var> _6529_key_a,jule::Ref<_110e92c80_Var> _6546_key_b,jule::Str _6559_begin) {
	jule::Str _6613_indent = _111b4cab0_indent();
	jule::Str _6817_obj = jule::Str("++__julec_range_begin;\n", 23);
	_6817_obj+=_6613_indent;
	_6817_obj+=jule::Str("if (__julec_range_begin != __julec_range_end) { ", 48);
	if (jule::real(_6529_key_a)) {
		_6817_obj+=(jule::Str("++", 2) + _111b4b010_var_out_ident(_6529_key_a)) + jule::Str("; ", 2);
	}
	if (jule::real(_6546_key_b)) {
		_6817_obj+=_111b4b010_var_out_ident(_6546_key_b) + jule::Str(" = *__julec_range_begin; ", 25);
	}
	_6817_obj+=(jule::Str("goto ", 5) + _6559_begin) + jule::Str("; }\n", 4);
	return _6817_obj;
}







std::ostream &operator<<(std::ostream &_Stream, const _1114d55f0_IndexRangeSetter &_Src) {
	_Stream << "IndexRangeSetter{";
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1114d55f0_MapRangeSetter::_method_setup_vars(jule::Ref<_110e92c80_Var> _8729_key_a,jule::Ref<_110e92c80_Var> _8746_key_b) {
	jule::Str _8813_indent = _111b4cab0_indent();
	jule::Str _8917_obj = jule::Str("", 0);
	if (jule::real(_8729_key_a)) {
		_8917_obj+=_111b4cab0_gen_var_init_expr(_8729_key_a,jule::Str("__julec_range_begin->first", 26));
		_8917_obj+=jule::Str("\n", 1);
		_8917_obj+=_8813_indent;
	}
	if (jule::real(_8746_key_b)) {
		_8917_obj+=_111b4cab0_gen_var_init_expr(_8746_key_b,jule::Str("__julec_range_begin->second", 27));
		_8917_obj+=jule::Str("\n", 1);
		_8917_obj+=_8813_indent;
	}
	return _8917_obj;
}



inline jule::Str _1114d55f0_MapRangeSetter::_method_next_steps(jule::Ref<_110e92c80_Var> _10629_key_a,jule::Ref<_110e92c80_Var> _10646_key_b,jule::Str _10659_begin) {
	jule::Str _10713_indent = _111b4cab0_indent();
	jule::Str _10917_obj = jule::Str("++__julec_range_begin;\n", 23);
	_10917_obj+=_10713_indent;
	_10917_obj+=jule::Str("if (__julec_range_begin != __julec_range_end) { ", 48);
	if (jule::real(_10629_key_a)) {
		_10917_obj+=_111b4b010_var_out_ident(_10629_key_a);
		_10917_obj+=jule::Str(" = __julec_range_begin->first; ", 31);
	}
	if (jule::real(_10646_key_b)) {
		_10917_obj+=_111b4b010_var_out_ident(_10646_key_b);
		_10917_obj+=jule::Str(" = __julec_range_begin->second; ", 32);
	}
	_10917_obj+=(jule::Str("goto ", 5) + _10659_begin) + jule::Str("; }\n", 4);
	return _10917_obj;
}







std::ostream &operator<<(std::ostream &_Stream, const _1114d55f0_MapRangeSetter &_Src) {
	_Stream << "MapRangeSetter{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111b4cab0_OrderedDecls &_Src) {
	_Stream << "OrderedDecls{";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "globals:" << _Src._field_globals;
	_Stream << "}";
	return _Stream;
}



inline void _1116aff70_TypeChecker::_method_push_err(_1106ec050_Token _65427_token,jule::Str _65441_fmt,jule::Slice<jule::Any> _65454_args) {
	(*this)._field_s->_method_push_err(_65427_token,_65441_fmt,_65454_args);
}



inline jule::Ref<_1116aff70_Prim> _1116aff70_TypeChecker::_method_build_prim(jule::Ref<_11054f670_IdentTypeDecl> _65829_decl) {
	if ((!(_1116aff70_is_prim(_65829_decl->_field_ident)))) {
		(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid data-type", 17),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1116aff70_Prim>();
	}
	if (_65829_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_65829_decl->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_65829_decl->_field_ident)}));
		return jule::new_ref<_1116aff70_Prim>();
	}
	return _1116aff70_build_prim_type(_65829_decl->_field_ident);
}



inline void _1116aff70_TypeChecker::_method_push_cycle_error(jule::Any _67231_def1,jule::Any _67242_def2,jule::Str& _67258_message) {
	
	jule::Fn<jule::Str(jule::Any&)> _67513_get_ident = jule::Fn<jule::Str(jule::Any&)>([=](jule::Any& _67529_def) mutable -> jule::Str {
		{
			auto _match_expr{ _67529_def };
			if (!(_match_expr.type_is<jule::Ref<_1116aff70_TypeAlias>>())) { goto _case_end_4614195248; }
			_case_begin_4614195248:;
			{
				return _67529_def.operator jule::Ref<_1116aff70_TypeAlias>()->_field_ident;
			}
			goto _match_end_4614194320;
			_case_end_4614195248:;
			if (!(_match_expr.type_is<jule::Ref<_1109372e0_Struct>>())) { goto _case_end_4614195360; }
			_case_begin_4614195360:;
			{
				return _67529_def.operator jule::Ref<_1109372e0_Struct>()->_field_ident;
			}
			goto _match_end_4614194320;
			_case_end_4614195360:;
			if (!(_match_expr.type_is<jule::Ref<_110e453c0_Enum>>())) { goto _case_end_4614195472; }
			_case_begin_4614195472:;
			{
				return _67529_def.operator jule::Ref<_110e453c0_Enum>()->_field_ident;
			}
			goto _match_end_4614194320;
			_case_end_4614195472:;
			_case_begin_4614194800:;
			{
				return jule::Str("", 0);
			}
			goto _match_end_4614194320;
			_case_end_4614194800:;
			_match_end_4614194320:;
		}
	});
	jule::Str _68413_def1_ident = _67513_get_ident(_67231_def1);
	jule::Str _68513_def2_ident = _67513_get_ident(_67242_def2);
	jule::Str _68613_refers_to = _127e05da0_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_68413_def1_ident),jule::Any(_68513_def2_ident)}));
	_67258_message=((_110d9ce90_str_repeat(jule::Str(" ", 1),4LL) + _68613_refers_to) + jule::Str("\n", 1)) + _67258_message;
}



inline jule::Bool _1116aff70_TypeChecker::_method_are_equals_cross_cycle_data_0(jule::Any _69045_a,jule::Any _69053_b) {
	{
		auto _match_expr{ _69045_a };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_TypeAlias>>())) { goto _case_end_4614221632; }
		_case_begin_4614221632:;
		{
			{
				auto _match_expr{ _69053_b };
				if (!(_match_expr.type_is<jule::Ref<_1116aff70_TypeAlias>>())) { goto _case_end_4614223760; }
				_case_begin_4614223760:;
				{
					return (_69045_a.operator jule::Ref<_1116aff70_TypeAlias>()).alloc == (_69053_b.operator jule::Ref<_1116aff70_TypeAlias>()).alloc;
				}
				goto _match_end_4614221792;
				_case_end_4614223760:;
				_case_begin_4614223344:;
				{
					return false;
				}
				goto _match_end_4614221792;
				_case_end_4614223344:;
				_match_end_4614221792:;
			}
		}
		goto _match_end_4614220832;
		_case_end_4614221632:;
		_case_begin_4614221248:;
		{
			return false;
		}
		goto _match_end_4614220832;
		_case_end_4614221248:;
		_match_end_4614220832:;
	}
}

inline jule::Bool _1116aff70_TypeChecker::_method_are_equals_cross_cycle_data_1(jule::Any _69045_a,jule::Any _69053_b) {
	{
		auto _match_expr{ _69045_a };
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_Struct>>())) { goto _case_end_4614236496; }
		_case_begin_4614236496:;
		{
			{
				auto _match_expr{ _69053_b };
				if (!(_match_expr.type_is<jule::Ref<_1109372e0_Struct>>())) { goto _case_end_4614238624; }
				_case_begin_4614238624:;
				{
					return (_69045_a.operator jule::Ref<_1109372e0_Struct>()).alloc == (_69053_b.operator jule::Ref<_1109372e0_Struct>()).alloc;
				}
				goto _match_end_4614236656;
				_case_end_4614238624:;
				_case_begin_4614238208:;
				{
					return false;
				}
				goto _match_end_4614236656;
				_case_end_4614238208:;
				_match_end_4614236656:;
			}
		}
		goto _match_end_4614235696;
		_case_end_4614236496:;
		_case_begin_4614236112:;
		{
			return false;
		}
		goto _match_end_4614235696;
		_case_end_4614236112:;
		_match_end_4614235696:;
	}
}



inline jule::Bool _1116aff70_TypeChecker::_method_check_cross_cycle(jule::Any _70332_decl,jule::Str& _70348_message) {
	{
		auto _match_expr{ _70332_decl };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_TypeAlias>>())) { goto _case_end_4614206784; }
		_case_begin_4614206784:;
		{
			jule::Ref<_1116aff70_TypeAlias> _70617_ta = _70332_decl.operator jule::Ref<_1116aff70_TypeAlias>();
			{
				auto __julec_range_expr = _70617_ta->_field_refers;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Any _1116aff70_d = *__julec_range_begin;
					_iter_begin_4614210016:;
					{
						{
							auto _match_expr{ _1116aff70_d };
							if (!(_match_expr.type_is<jule::Ref<_1116aff70_TypeAlias>>())) { goto _case_end_4614211776; }
							_case_begin_4614211776:;
							{
								if ((*this)._method_are_equals_cross_cycle_data_0(_1116aff70_d,(*this)._field_referencer->_field_owner)) {
									(*this)._method_push_cycle_error(jule::Any(_70617_ta),_1116aff70_d,_70348_message);
									return false;
								}
							}
							goto _match_end_4614211312;
							_case_end_4614211776:;
							_match_end_4614211312:;
						}
						if ((!((*this)._method_check_cross_cycle(_1116aff70_d,_70348_message)))) {
							(*this)._method_push_cycle_error(jule::Any(_70617_ta),_1116aff70_d,_70348_message);
							return false;
						}
					}
					_iter_next_4614210016:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _1116aff70_d = *__julec_range_begin; goto _iter_begin_4614210016; }
					_iter_end_4614210016:;
				}
			}
		}
		goto _match_end_4614206400;
		_case_end_4614206784:;
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_Struct>>())) { goto _case_end_4614206976; }
		_case_begin_4614206976:;
		{
			jule::Ref<_1109372e0_Struct> _72317_s = _70332_decl.operator jule::Ref<_1109372e0_Struct>();
			{
				auto __julec_range_expr = _72317_s->_field_depends;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Ref<_1109372e0_Struct> _1116aff70_d = *__julec_range_begin;
					_iter_begin_4614211232:;
					{
						if ((*this)._method_are_equals_cross_cycle_data_1(jule::Any(_1116aff70_d),(*this)._field_referencer->_field_owner)) {
							(*this)._method_push_cycle_error(jule::Any(_72317_s),jule::Any(_1116aff70_d),_70348_message);
							return false;
						}
						if ((!((*this)._method_check_cross_cycle(jule::Any(_1116aff70_d),_70348_message)))) {
							(*this)._method_push_cycle_error(jule::Any(_72317_s),jule::Any(_1116aff70_d),_70348_message);
							return false;
						}
					}
					_iter_next_4614211232:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _1116aff70_d = *__julec_range_begin; goto _iter_begin_4614211232; }
					_iter_end_4614211232:;
				}
			}
		}
		goto _match_end_4614206400;
		_case_end_4614206976:;
		_match_end_4614206400:;
	}
	return true;
}



inline jule::Bool _1116aff70_TypeChecker::_method_check_illegal_cycles(jule::Ref<_11054f670_IdentTypeDecl> _74539_ident,jule::Any _74566_decl) {
	jule::Bool _74579_ok = jule::Bool();
	if ((!(jule::real((*this)._field_referencer)))) {
		_74579_ok = true;
		return _74579_ok;
	}
	{
		auto _match_expr{ _74566_decl };
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_Struct>>())) { goto _case_end_4614245632; }
		_case_begin_4614245632:;
		{
			if ((*this)._field_not_plain) {
				_74579_ok = true;
				return _74579_ok;
			}
		}
		goto _match_end_4614244624;
		_case_end_4614245632:;
		_match_end_4614244624:;
	}
	if ((*this)._field_referencer->_field_owner == _74566_decl) {
		(*this)._method_push_err(_74539_ident->_field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*this)._field_referencer->_field_ident)}));
		_74579_ok = false;
		return _74579_ok;
	}
	jule::Str _76417_message = jule::Str("", 0);
	if ((!((*this)._method_check_cross_cycle(_74566_decl,_76417_message)))) {
		jule::Str _76721_err_msg = _76417_message;
		_76417_message=jule::Str("", 0);
		(*this)._method_push_cycle_error((*this)._field_referencer->_field_owner,_74566_decl,_76417_message);
		_76721_err_msg=_76721_err_msg + _76417_message;
		(*this)._method_push_err(_74539_ident->_field_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_76721_err_msg)}));
		_74579_ok = false;
		return _74579_ok;
	}
	{
		auto _match_expr{ (*this)._field_referencer->_field_owner };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_TypeAlias>>())) { goto _case_end_4614257360; }
		_case_begin_4614257360:;
		{
			{
				(*((*this)._field_referencer->_field_refs))=jule::append((*((*this)._field_referencer->_field_refs)),jule::Slice<jule::Any>({_74566_decl}));
			}
		}
		goto _match_end_4614255520;
		_case_end_4614257360:;
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_Struct>>())) { goto _case_end_4614257472; }
		_case_begin_4614257472:;
		{
			{
				auto _match_expr{ _74566_decl };
				if (!(_match_expr.type_is<jule::Ref<_1109372e0_Struct>>())) { goto _case_end_4614263760; }
				_case_begin_4614263760:;
				{
					jule::Ref<_1109372e0_Struct> _78225_s = (*this)._field_referencer->_field_owner.operator jule::Ref<_1109372e0_Struct>();
					_78225_s->_field_depends=jule::append(_78225_s->_field_depends,jule::Slice<jule::Ref<_1109372e0_Struct>>({_74566_decl.operator jule::Ref<_1109372e0_Struct>()}));
				}
				goto _match_end_4614259776;
				_case_end_4614263760:;
				_match_end_4614259776:;
			}
		}
		goto _match_end_4614255520;
		_case_end_4614257472:;
		_match_end_4614255520:;
	}
	_74579_ok = true;
	return _74579_ok;
}



inline jule::Trait<_1116aff70_Kind> _1116aff70_TypeChecker::_method_from_type_alias(jule::Ref<_11054f670_IdentTypeDecl> _79034_decl,jule::Ref<_1116aff70_TypeAlias> _79060_ta) {
	if ((!((*this)._field_s->_method_is_accessible_define(_79060_ta->_field_public,_79060_ta->_field_token)))) {
		(*this)._method_push_err(_79034_decl->_field_token,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_79034_decl->_field_ident)}));
		return nullptr;
	}
	_79060_ta->_field_used=true;
	if (_79034_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_79034_decl->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_79034_decl->_field_ident)}));
		return nullptr;
	}
	jule::Bool _80317_ok = (*this)._method_check_illegal_cycles(_79034_decl,jule::Any(_79060_ta));
	if ((!(_80317_ok))) {
		return nullptr;
	}
	_80317_ok=(*this)._field_s->_method_check_type_alias_decl_kind(_79060_ta,(*this)._field_lookup);
	if ((!(_80317_ok))) {
		return nullptr;
	}
	jule::Ref<_1116aff70_TypeKind> _81417_kind = _79060_ta->_field_kind->_field_kind->_method_clone();
	if (_79060_ta->_field_cpp_linked) {
		_81417_kind->_field_cpp_ident=_79060_ta->_field_ident;
	}
	return _81417_kind;
}



inline jule::Ref<_110e453c0_Enum> _1116aff70_TypeChecker::_method_from_enum(jule::Ref<_11054f670_IdentTypeDecl> _82328_decl,jule::Ref<_110e453c0_Enum> _82354_e) {
	if ((!((*this)._field_s->_method_is_accessible_define(_82354_e->_field_public,_82354_e->_field_token)))) {
		(*this)._method_push_err(_82328_decl->_field_token,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_82328_decl->_field_ident)}));
		return jule::new_ref<_110e453c0_Enum>();
	}
	if (_82328_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_82328_decl->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_82328_decl->_field_ident)}));
		return jule::new_ref<_110e453c0_Enum>();
	}
	return _82354_e;
}



inline jule::Bool _1116aff70_TypeChecker::_method_check_struct_ins(jule::Ref<_1109372e0_StructIns> _83739_ins,_1106ec050_Token _83756_error_token) {
	jule::Bool _83778_ok = jule::Bool();
	if (_83739_ins->_field_checked) {
		_83778_ok = true;
		return _83778_ok;
	}
	_83739_ins->_field_checked=true;
	if (jule::real((*this)._field_referencer) && ((*this)._field_referencer->_field_owner == _83739_ins->_field_decl)) {
		_83778_ok = true;
		return _83778_ok;
	}
	jule::Ref<_1111c15d0_SymbolTable> _85117_old_file = (*this)._field_s->_field_file;
	__JULE_DEFER({
		(*this)._field_s->_method_set_current_file(_85117_old_file);
	});
	jule::Ref<_1111c15d0_SymbolTable> _85417_f = _110e92bc0_find_file((*this)._field_s->_field_files,_83739_ins->_field_decl->_field_token._field_file);
	if (jule::real(_85417_f)) {
		(*this)._field_s->_method_set_current_file(_85417_f);
	}
	jule::Ref<_1116aff70_Referencer> _85917_referencer = jule::new_struct<_1116aff70_Referencer>(new( std::nothrow ) _1116aff70_Referencer(_83739_ins->_field_decl->_field_ident,jule::Any(_83739_ins->_field_decl),nullptr));
	jule::Slice<jule::Ref<_1116aff70_TypeAlias>> _86417_generics = jule::Slice<jule::Ref<_1116aff70_TypeAlias>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_83739_ins->_field_generics.len())));
	{
		auto __julec_range_expr = _83739_ins->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1116aff70_i = 0;
			jule::Ref<_1116aff70_TypeKind> _1116aff70_g = *__julec_range_begin;
			_iter_begin_4614312160:;
			{
				_86417_generics[static_cast<jule::Int>(_1116aff70_i)]=jule::new_struct<_1116aff70_TypeAlias>(new( std::nothrow ) _1116aff70_TypeAlias(jule::Ref<_11054f670_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),_1106ec050_Token(),_83739_ins->_field_decl->_field_generics[static_cast<jule::Int>(_1116aff70_i)]->_field_ident,jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),_1116aff70_g)),jule::Str(),jule::Slice<jule::Any>()));
			}
			_iter_next_4614312160:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1116aff70_i; _1116aff70_g = *__julec_range_begin; goto _iter_begin_4614312160; }
			_iter_end_4614312160:;
		}
	}
	jule::Ref<_1111c15d0_SymbolTable> _87417_old_sema_file = _83739_ins->_field_decl->_field_sema->_field_file;
	__JULE_DEFER({
		_83739_ins->_field_decl->_field_sema->_method_set_current_file(_87417_old_sema_file);
	});
	_1116aff70_TypeChecker _87717_tc = _1116aff70_TypeChecker(_83739_ins->_field_decl->_field_sema,_83739_ins->_field_decl->_field_sema,_85917_referencer,_1106ec050_Token(),jule::Slice<jule::Ref<_11054f670_GenericDecl>>(),_86417_generics,jule::Bool());
	{
		auto __julec_range_expr = _83739_ins->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_FieldIns> _1116aff70_f = *__julec_range_begin;
			_iter_begin_4614322080:;
			{
				jule::Ref<_1116aff70_TypeKind> _88621_kind = _87717_tc._method_check_decl(_1116aff70_f->_field_decl->_field_kind->_field_decl);
				_83778_ok=jule::real(_88621_kind);
				if ((jule::real(_83739_ins->_field_decl->_field_sema) && ((*this)._field_s != _83739_ins->_field_decl->_field_sema)) && (_83739_ins->_field_decl->_field_sema->_field_errors.len() > 0LL)) {
					(*this)._field_s->_field_errors=jule::append((*this)._field_s->_field_errors,_83739_ins->_field_decl->_field_sema->_field_errors);
				}
				if ((!(_83778_ok))) {
					_83778_ok = false;
					return _83778_ok;
				}
				_1116aff70_f->_field_kind=_88621_kind;
				if (_1116aff70_is_mut(_1116aff70_f->_field_kind)) {
					_83739_ins->_field_has_mut=true;
					(*this)._field_s->_method_check_struct_ins_derive_clone(_83739_ins);
				}
			}
			_iter_next_4614322080:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1116aff70_f = *__julec_range_begin; goto _iter_begin_4614322080; }
			_iter_end_4614322080:;
		}
	}
	if (_83739_ins->_field_generics.len() > 0LL) {
		{
			auto __julec_range_expr = _83739_ins->_field_methods;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_11072eb20_Fn> _1116aff70_m = *__julec_range_begin;
				_iter_begin_4614334624:;
				{
					if (_1116aff70_m->_field_generics.len() > 0LL) {
						goto _iter_next_4614334624;
					}
					(*this)._field_s->_method_check_type_method(_83739_ins,_1116aff70_m);
				}
				_iter_next_4614334624:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1116aff70_m = *__julec_range_begin; goto _iter_begin_4614334624; }
				_iter_end_4614334624:;
			}
		}
	}
	_83778_ok = true;
	return _83778_ok;
}



inline void _1116aff70_TypeChecker::_method_append_used_struct_reference(jule::Ref<_1109372e0_Struct> _91851_s) {
	if ((!(jule::real((*this)._field_referencer)))) {
		return;
	}
	{
		auto _match_expr{ (*this)._field_referencer->_field_owner };
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_Struct>>())) { goto _case_end_4614344192; }
		_case_begin_4614344192:;
		{
			jule::Ref<_1109372e0_Struct> _92521_ref_s = (*this)._field_referencer->_field_owner.operator jule::Ref<_1109372e0_Struct>();
			if ((!(_92521_ref_s->_method_is_uses(_91851_s)))) {
				_92521_ref_s->_field_uses=jule::append(_92521_ref_s->_field_uses,jule::Slice<jule::Ref<_1109372e0_Struct>>({_91851_s}));
			}
		}
		goto _match_end_4614343600;
		_case_end_4614344192:;
		_match_end_4614343600:;
	}
}



inline jule::Ref<_1109372e0_StructIns> _1116aff70_TypeChecker::_method_from_struct(jule::Ref<_11054f670_IdentTypeDecl> _93234_decl,jule::Ref<_1109372e0_Struct> _93260_s) {
	if ((!((*this)._field_s->_method_is_accessible_define(_93260_s->_field_public,_93260_s->_field_token)))) {
		(*this)._method_push_err(_93234_decl->_field_token,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_93234_decl->_field_ident)}));
		return jule::new_ref<_1109372e0_StructIns>();
	}
	if ((*this)._field_ignore_generics.len() > 0LL) {
		return jule::new_ref<_1109372e0_StructIns>();
	}
	jule::Bool _94317_ok = (*this)._field_not_plain || (*this)._method_check_illegal_cycles(_93234_decl,jule::Any(_93260_s));
	if ((!(_94317_ok))) {
		return jule::new_ref<_1109372e0_StructIns>();
	}
	(*this)._method_append_used_struct_reference(_93260_s);
	jule::Ref<_1109372e0_StructIns> _94917_ins = _93260_s->_method_instance();
	_94917_ins->_field_generics=jule::Slice<jule::Ref<_1116aff70_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_93234_decl->_field_generics.len())));
	jule::Ref<_1116aff70_Referencer> _95117_referencer = (*this)._field_referencer;
	jule::drop((*this)._field_referencer);
	{
		auto __julec_range_expr = _93234_decl->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1116aff70_i = 0;
			jule::Ref<_11054f670_TypeDecl> _1116aff70_g = *__julec_range_begin;
			_iter_begin_4614366432:;
			{
				jule::Ref<_1116aff70_TypeKind> _95421_kind = (*this)._method_build(_1116aff70_g->_field_kind);
				if ((!(jule::real(_95421_kind)))) {
					_94317_ok=false;
					goto _iter_next_4614366432;
				}
				_94917_ins->_field_generics[static_cast<jule::Int>(_1116aff70_i)]=_95421_kind;
			}
			_iter_next_4614366432:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1116aff70_i; _1116aff70_g = *__julec_range_begin; goto _iter_begin_4614366432; }
			_iter_end_4614366432:;
		}
	}
	(*this)._field_referencer=_95117_referencer;
	if ((!(_94317_ok))) {
		return jule::new_ref<_1109372e0_StructIns>();
	}
	_94317_ok=(*this)._field_s->_method_check_generic_quantity(static_cast<jule::I64>(_94917_ins->_field_decl->_field_generics.len()),static_cast<jule::I64>(_94917_ins->_field_generics.len()),_93234_decl->_field_token);
	if ((!(_94317_ok))) {
		return jule::new_ref<_1109372e0_StructIns>();
	}
	jule::Ref<_1109372e0_StructIns> _97317_exist_instance = _93260_s->_method_append_instance(_94917_ins);
	if (jule::real(_97317_exist_instance)) {
		return _97317_exist_instance;
	}
	_94317_ok=(*this)._method_check_struct_ins(_94917_ins,_93234_decl->_field_token);
	if ((!(_94317_ok))) {
		return jule::new_ref<_1109372e0_StructIns>();
	}
	return _94917_ins;
}



inline jule::Trait<_1116aff70_Kind> _1116aff70_TypeChecker::_method_get_def(jule::Ref<_11054f670_IdentTypeDecl> _98830_decl) {
	{
		auto __julec_range_expr = (*this)._field_ignore_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11054f670_GenericDecl> _1116aff70_g = *__julec_range_begin;
			_iter_begin_4614385424:;
			{
				if (_1116aff70_g->_field_ident == _98830_decl->_field_ident) {
					return _1116aff70_build_prim_type(_1116aff70_g->_field_ident);
				}
			}
			_iter_next_4614385424:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1116aff70_g = *__julec_range_begin; goto _iter_begin_4614385424; }
			_iter_end_4614385424:;
		}
	}
	{
		auto __julec_range_expr = (*this)._field_use_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1116aff70_TypeAlias> _1116aff70_g = *__julec_range_begin;
			_iter_begin_4614388016:;
			{
				if (_1116aff70_g->_field_ident == _98830_decl->_field_ident) {
					jule::Ref<_1109372e0_StructIns> _99725_st = _1116aff70_g->_field_kind->_field_kind->_method_strct();
					if (jule::real(_99725_st)) {
						jule::Bool _99925_ok = (*this)._method_check_illegal_cycles(_98830_decl,jule::Any(_99725_st->_field_decl));
						if ((!(_99925_ok))) {
							return nullptr;
						}
					}
					return _1116aff70_g->_field_kind->_field_kind->_field_kind;
				}
			}
			_iter_next_4614388016:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1116aff70_g = *__julec_range_begin; goto _iter_begin_4614388016; }
			_iter_end_4614388016:;
		}
	}
	if ((!(_98830_decl->_field_cpp_linked))) {
		jule::Ref<_110e453c0_Enum> _100921_e = (*this)._field_lookup.get()._method_find_enum(_98830_decl->_field_ident);
		if (jule::real(_100921_e)) {
			return (*this)._method_from_enum(_98830_decl,_100921_e);
		}
		jule::Ref<_110e3f160_Trait> _101421_t = (*this)._field_lookup.get()._method_find_trait(_98830_decl->_field_ident);
		if ((!(jule::real(_101421_t)))) {
			_101421_t=_1113198e0_find_builtin_trait(_98830_decl->_field_ident);
		}
		if (jule::real(_101421_t)) {
			if ((!((*this)._field_s->_method_is_accessible_define(_101421_t->_field_public,_101421_t->_field_token)))) {
				(*this)._method_push_err(_98830_decl->_field_token,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_98830_decl->_field_ident)}));
				return nullptr;
			}
			if (_98830_decl->_field_generics.len() > 0LL) {
				(*this)._method_push_err(_98830_decl->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_98830_decl->_field_ident)}));
				return nullptr;
			}
			return _101421_t;
		}
	}
	jule::Ref<_1109372e0_Struct> _103217_s = (*this)._field_lookup.get()._method_find_struct(_98830_decl->_field_ident,_98830_decl->_field_cpp_linked);
	if (jule::real(_103217_s)) {
		return (*this)._method_from_struct(_98830_decl,_103217_s);
	}
	jule::Ref<_1116aff70_TypeAlias> _103717_ta = (*this)._field_lookup.get()._method_find_type_alias(_98830_decl->_field_ident,_98830_decl->_field_cpp_linked);
	if ((!(jule::real(_103717_ta)))) {
		_103717_ta=_1113198e0_find_builtin_type_alias(_98830_decl->_field_ident);
	}
	if (jule::real(_103717_ta)) {
		return (*this)._method_from_type_alias(_98830_decl,_103717_ta);
	}
	(*this)._method_push_err(_98830_decl->_field_token,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_98830_decl->_field_ident)}));
	return nullptr;
}



inline jule::Trait<_1116aff70_Kind> _1116aff70_TypeChecker::_method_build_ident(jule::Ref<_11054f670_IdentTypeDecl> _104934_decl) {
	{
		if (!((_1116aff70_is_prim(_104934_decl->_field_ident)))) { goto _case_end_4614423120; }
		_case_begin_4614423120:;
		{
			return (*this)._method_build_prim(_104934_decl);
		}
		goto _match_end_4614421232;
		_case_end_4614423120:;
		_case_begin_4614421376:;
		{
			return (*this)._method_get_def(_104934_decl);
		}
		goto _match_end_4614421232;
		_case_end_4614421376:;
		_match_end_4614421232:;
	}
}



inline jule::Ref<_1116aff70_Ref> _1116aff70_TypeChecker::_method_build_ref_from_type(jule::Ref<_1116aff70_TypeKind> _105642_elem) {
	{
		if (!(((!(jule::real(_105642_elem)))))) { goto _case_end_4614425808; }
		_case_begin_4614425808:;
		{
			return jule::new_ref<_1116aff70_Ref>();
		}
		goto _match_end_4614425536;
		_case_end_4614425808:;
		if (!((jule::real(_105642_elem->_method_strct())))) { goto _case_end_4614425920; }
		_case_begin_4614425920:;
		{
			jule::Ref<_1109372e0_StructIns> _106317_s = _105642_elem->_method_strct();
			if (jule::real(_106317_s->_field_decl) && _106317_s->_field_decl->_field_cpp_linked) {
				(*this)._method_push_err((*this)._field_error_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>({}));
				return jule::new_ref<_1116aff70_Ref>();
			}
		}
		goto _match_end_4614425536;
		_case_end_4614425920:;
		if (!((jule::real(_105642_elem->_method_ref())))) { goto _case_end_4614426048; }
		_case_begin_4614426048:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("references cannot reference to another reference", 48),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_Ref>();
		}
		goto _match_end_4614425536;
		_case_end_4614426048:;
		if (!((jule::real(_105642_elem->_method_ptr())))) { goto _case_end_4614426176; }
		_case_begin_4614426176:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("references cannot reference to pointer", 38),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_Ref>();
		}
		goto _match_end_4614425536;
		_case_end_4614426176:;
		if (!((jule::real(_105642_elem->_method_enm())))) { goto _case_end_4614426304; }
		_case_begin_4614426304:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("references cannot reference to enum", 35),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_Ref>();
		}
		goto _match_end_4614425536;
		_case_end_4614426304:;
		if (!((jule::real(_105642_elem->_method_arr())))) { goto _case_end_4614426432; }
		_case_begin_4614426432:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("references cannot reference to array", 36),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_Ref>();
		}
		goto _match_end_4614425536;
		_case_end_4614426432:;
		_match_end_4614425536:;
	}
	return jule::new_struct<_1116aff70_Ref>(new( std::nothrow ) _1116aff70_Ref(_105642_elem));
}



inline jule::Ref<_1116aff70_Ref> _1116aff70_TypeChecker::_method_build_ref(jule::Ref<_11054f670_RefTypeDecl> _109132_decl) {
	jule::Bool _109213_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_109213_not_plain;
	});
	jule::Ref<_1116aff70_TypeKind> _109617_elem = (*this)._method_check_decl(_109132_decl->_field_elem);
	return (*this)._method_build_ref_from_type(_109617_elem);
}



inline jule::Ref<_1116aff70_Ptr> _1116aff70_TypeChecker::_method_build_ptr_from_type(jule::Ref<_1116aff70_TypeKind> _110042_elem) {
	{
		if (!(((!(jule::real(_110042_elem)))))) { goto _case_end_4614450528; }
		_case_begin_4614450528:;
		{
			return jule::new_ref<_1116aff70_Ptr>();
		}
		goto _match_end_4614450304;
		_case_end_4614450528:;
		if (!((jule::real(_110042_elem->_method_ref())))) { goto _case_end_4614450656; }
		_case_begin_4614450656:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("pointers cannot point to reference", 34),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_Ptr>();
		}
		goto _match_end_4614450304;
		_case_end_4614450656:;
		if (!((jule::real(_110042_elem->_method_enm())))) { goto _case_end_4614450784; }
		_case_begin_4614450784:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("pointers cannot point to enum", 29),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_Ptr>();
		}
		goto _match_end_4614450304;
		_case_end_4614450784:;
		if (!((jule::real(_110042_elem->_method_arr()) && _110042_elem->_method_arr()->_field_auto))) { goto _case_end_4614450912; }
		_case_begin_4614450912:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_Ptr>();
		}
		goto _match_end_4614450304;
		_case_end_4614450912:;
		_match_end_4614450304:;
	}
	return jule::new_struct<_1116aff70_Ptr>(new( std::nothrow ) _1116aff70_Ptr(_110042_elem));
}



inline jule::Ref<_1116aff70_Ptr> _1116aff70_TypeChecker::_method_build_ptr(jule::Ref<_11054f670_PtrTypeDecl> _112432_decl) {
	jule::Bool _112513_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_112513_not_plain;
	});
	jule::Ref<_1116aff70_TypeKind> _112917_elem = jule::new_ref<_1116aff70_TypeKind>();
	if ((!(_112432_decl->_method_is_unsafe()))) {
		_112917_elem=(*this)._method_check_decl(_112432_decl->_field_elem);
		return (*this)._method_build_ptr_from_type(_112917_elem);
	}
	return jule::new_struct<_1116aff70_Ptr>(new( std::nothrow ) _1116aff70_Ptr(_112917_elem));
}



inline jule::Ref<_1116aff70_Slc> _1116aff70_TypeChecker::_method_build_slc(jule::Ref<_11054f670_SlcTypeDecl> _114132_decl) {
	jule::Bool _114213_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_114213_not_plain;
	});
	jule::Ref<_1116aff70_TypeKind> _114617_elem = (*this)._method_check_decl(_114132_decl->_field_elem);
	{
		if (!(((!(jule::real(_114617_elem)))))) { goto _case_end_4614475344; }
		_case_begin_4614475344:;
		{
			return jule::new_ref<_1116aff70_Slc>();
		}
		goto _match_end_4614475136;
		_case_end_4614475344:;
		if (!((jule::real(_114617_elem->_method_arr()) && _114617_elem->_method_arr()->_field_auto))) { goto _case_end_4614475456; }
		_case_begin_4614475456:;
		{
			(*this)._method_push_err(_114132_decl->_field_elem->_field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_Slc>();
		}
		goto _match_end_4614475136;
		_case_end_4614475456:;
		_match_end_4614475136:;
	}
	return jule::new_struct<_1116aff70_Slc>(new( std::nothrow ) _1116aff70_Slc(_114617_elem));
}



inline jule::Ref<_1116aff70_Arr> _1116aff70_TypeChecker::_method_build_arr(jule::Ref<_11054f670_ArrTypeDecl> _116332_decl) {
	jule::Bool _116413_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_116413_not_plain;
	});
	jule::Int _116817_n = 0LL;
	if ((!(_116332_decl->_method_auto_sized()))) {
		jule::Ref<_1112d7f10_Data> _117121_size = (*this)._field_s->_method_eval(_116332_decl->_field_size,(*this)._field_lookup);
		if ((!(jule::real(_117121_size)))) {
			return jule::new_ref<_1116aff70_Arr>();
		}
		if ((!(_117121_size->_method_is_const()))) {
			(*this)._method_push_err(_116332_decl->_field_elem->_field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_Arr>();
		} else if ((!(_1118e4c20_is_int(_117121_size->_field_kind->_method_prim()->_field_kind)))) {
			(*this)._method_push_err(_116332_decl->_field_elem->_field_token,jule::Str("array size must be integer", 26),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_Arr>();
		}
		_116817_n=static_cast<jule::Int>(_117121_size->_field_constant->_method_as_i64());
		if (_116817_n < 0LL) {
			(*this)._method_push_err(_116332_decl->_field_elem->_field_token,jule::Str("array size must be positive integer", 35),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_Arr>();
		}
	}
	jule::Ref<_1116aff70_TypeKind> _119117_elem = (*this)._method_check_decl(_116332_decl->_field_elem);
	{
		if (!(((!(jule::real(_119117_elem)))))) { goto _case_end_4614500864; }
		_case_begin_4614500864:;
		{
			return jule::new_ref<_1116aff70_Arr>();
		}
		goto _match_end_4614499776;
		_case_end_4614500864:;
		if (!((jule::real(_119117_elem->_method_arr()) && _119117_elem->_method_arr()->_field_auto))) { goto _case_end_4614500976; }
		_case_begin_4614500976:;
		{
			(*this)._method_push_err(_116332_decl->_field_elem->_field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_Arr>();
		}
		goto _match_end_4614499776;
		_case_end_4614500976:;
		_match_end_4614499776:;
	}
	return jule::new_struct<_1116aff70_Arr>(new( std::nothrow ) _1116aff70_Arr(_116332_decl->_method_auto_sized(),_116817_n,_119117_elem));
}



inline jule::Ref<_1116aff70_Map> _1116aff70_TypeChecker::_method_build_map(jule::Ref<_11054f670_MapTypeDecl> _121032_decl) {
	jule::Bool _121113_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_121113_not_plain;
	});
	jule::Ref<_1116aff70_TypeKind> _121517_key = (*this)._method_check_decl(_121032_decl->_field_key);
	if ((!(jule::real(_121517_key)))) {
		return jule::new_ref<_1116aff70_Map>();
	}
	jule::Ref<_1116aff70_TypeKind> _122017_val = (*this)._method_check_decl(_121032_decl->_field_val);
	if ((!(jule::real(_122017_val)))) {
		return jule::new_ref<_1116aff70_Map>();
	}
	if (jule::real(_122017_val->_method_enm())) {
		(*this)._method_push_err(_121032_decl->_field_val->_field_token,jule::Str("maps do not support enums as map key type", 41),jule::Slice<jule::Any>({}));
	}
	return jule::new_struct<_1116aff70_Map>(new( std::nothrow ) _1116aff70_Map(_121517_key,_122017_val));
}



inline jule::Ref<_1116aff70_Tuple> _1116aff70_TypeChecker::_method_build_tuple(jule::Ref<_11054f670_TupleTypeDecl> _123434_decl) {
	jule::Slice<jule::Ref<_1116aff70_TypeKind>> _123517_types = jule::Slice<jule::Ref<_1116aff70_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_123434_decl->_field_types.len())));
	{
		auto __julec_range_expr = _123434_decl->_field_types;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1116aff70_i = 0;
			jule::Ref<_11054f670_TypeDecl> _1116aff70_t = *__julec_range_begin;
			_iter_begin_4614523872:;
			{
				jule::Ref<_1116aff70_TypeKind> _123721_kind = (*this)._method_check_decl(_1116aff70_t);
				if ((!(jule::real(_123721_kind)))) {
					return jule::new_ref<_1116aff70_Tuple>();
				}
				_123517_types[static_cast<jule::Int>(_1116aff70_i)]=_123721_kind;
			}
			_iter_next_4614523872:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1116aff70_i; _1116aff70_t = *__julec_range_begin; goto _iter_begin_4614523872; }
			_iter_end_4614523872:;
		}
	}
	return jule::new_struct<_1116aff70_Tuple>(new( std::nothrow ) _1116aff70_Tuple(_123517_types));
}



inline jule::Bool _1116aff70_TypeChecker::_method_check_fn_types(jule::Ref<_11072eb20_FnIns> _124737_f) {
	jule::Bool _124750_ok = jule::Bool();
	{
		auto __julec_range_expr = _124737_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_ParamIns> _1116aff70_p = *__julec_range_begin;
			_iter_begin_4614532224:;
			{
				_1116aff70_p->_field_kind=(*this)._method_build(_1116aff70_p->_field_decl->_field_kind->_field_decl->_field_kind);
				_124750_ok=jule::real(_1116aff70_p->_field_kind);
				if ((!(_124750_ok))) {
					_124750_ok = false;
					return _124750_ok;
				}
			}
			_iter_next_4614532224:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1116aff70_p = *__julec_range_begin; goto _iter_begin_4614532224; }
			_iter_end_4614532224:;
		}
	}
	if ((!(_124737_f->_field_decl->_method_is_void()))) {
		_124737_f->_field_result=(*this)._method_build(_124737_f->_field_decl->_field_result->_field_kind->_field_decl->_field_kind);
		_124750_ok = jule::real(_124737_f->_field_result);
		return _124750_ok;
	}
	_124750_ok = true;
	return _124750_ok;
}



inline jule::Ref<_11072eb20_FnIns> _1116aff70_TypeChecker::_method_build_fn(jule::Ref<_11054f670_FnDecl> _126431_decl) {
	if (_126431_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_126431_decl->_field_token,jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>({}));
		return jule::new_ref<_11072eb20_FnIns>();
	}
	jule::Ref<_11072eb20_Fn> _127017_f = _110d9ce90_build_fn(_126431_decl);
	jule::Ref<_11072eb20_FnIns> _127117_ins = _127017_f->_method_instance_force();
	_127117_ins->_field_anon=true;
	jule::Bool _127413_ok = (*this)._method_check_fn_types(_127117_ins);
	if ((!(_127413_ok))) {
		return jule::new_ref<_11072eb20_FnIns>();
	}
	return _127117_ins;
}



inline jule::Trait<_1116aff70_Kind> _1116aff70_TypeChecker::_method_build_by_namespace(jule::Ref<_11054f670_NamespaceTypeDecl> _128241_decl) {
	jule::Str _128313_path = _1116aff70_build_link_path_by_tokens(_128241_decl->_field_idents);
	jule::Ref<_110e4edc0_ImportInfo> _128417_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)>([=](jule::Ref<_110e4edc0_ImportInfo> _128453_imp) mutable -> jule::Bool {
		if ((_128241_decl->_field_idents.len() == 1LL) && (_128453_imp->_field_alias == _128313_path)) {
			return true;
		}
		return _128453_imp->_field_std && (_128453_imp->_field_link_path == _128313_path);
	}));
	if ((!(jule::real(_128417_imp))) || (!(_128417_imp->_method_is_lookupable(jule::Str("self", 4))))) {
		(*this)._method_push_err(_128241_decl->_field_idents[0LL],jule::Str("namespace not exist: @", 22),jule::Slice<jule::Any>({jule::Any(_128313_path)}));
		return nullptr;
	}
	jule::Trait<_111732860_Lookup> _129617_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_128417_imp;
	jule::Trait<_1116aff70_Kind> _129917_kind = (*this)._method_build_ident(_128241_decl->_field_kind);
	(*this)._field_lookup=_129617_lookup;
	return _129917_kind;
}



inline jule::Ref<_1116aff70_TypeKind> _1116aff70_TypeChecker::_method_build(jule::Any _130628_decl_kind) {
	jule::Trait<_1116aff70_Kind> _130717_kind = nullptr;
	{
		auto _match_expr{ _130628_decl_kind };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_TypeKind>>())) { goto _case_end_4614571904; }
		_case_begin_4614571904:;
		{
			_130717_kind=_130628_decl_kind.operator jule::Ref<_1116aff70_TypeKind>();
		}
		goto _match_end_4614568032;
		_case_end_4614571904:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_IdentTypeDecl>>())) { goto _case_end_4614571504; }
		_case_begin_4614571504:;
		{
			jule::Trait<_1116aff70_Kind> _131421_t = (*this)._method_build_ident(_130628_decl_kind.operator jule::Ref<_11054f670_IdentTypeDecl>());
			if (_131421_t != nullptr) {
				_130717_kind=_131421_t;
			}
		}
		goto _match_end_4614568032;
		_case_end_4614571504:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_RefTypeDecl>>())) { goto _case_end_4614572064; }
		_case_begin_4614572064:;
		{
			jule::Ref<_1116aff70_Ref> _132021_t = (*this)._method_build_ref(_130628_decl_kind.operator jule::Ref<_11054f670_RefTypeDecl>());
			if (jule::real(_132021_t)) {
				_130717_kind=_132021_t;
			}
		}
		goto _match_end_4614568032;
		_case_end_4614572064:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_PtrTypeDecl>>())) { goto _case_end_4614568864; }
		_case_begin_4614568864:;
		{
			jule::Ref<_1116aff70_Ptr> _132621_t = (*this)._method_build_ptr(_130628_decl_kind.operator jule::Ref<_11054f670_PtrTypeDecl>());
			if (jule::real(_132621_t)) {
				_130717_kind=_132621_t;
			}
		}
		goto _match_end_4614568032;
		_case_end_4614568864:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_SlcTypeDecl>>())) { goto _case_end_4614568976; }
		_case_begin_4614568976:;
		{
			jule::Ref<_1116aff70_Slc> _133221_t = (*this)._method_build_slc(_130628_decl_kind.operator jule::Ref<_11054f670_SlcTypeDecl>());
			if (jule::real(_133221_t)) {
				_130717_kind=_133221_t;
			}
		}
		goto _match_end_4614568032;
		_case_end_4614568976:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_ArrTypeDecl>>())) { goto _case_end_4614569088; }
		_case_begin_4614569088:;
		{
			jule::Ref<_1116aff70_Arr> _133821_t = (*this)._method_build_arr(_130628_decl_kind.operator jule::Ref<_11054f670_ArrTypeDecl>());
			if (jule::real(_133821_t)) {
				_130717_kind=_133821_t;
			}
		}
		goto _match_end_4614568032;
		_case_end_4614569088:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_MapTypeDecl>>())) { goto _case_end_4614570896; }
		_case_begin_4614570896:;
		{
			jule::Ref<_1116aff70_Map> _134421_t = (*this)._method_build_map(_130628_decl_kind.operator jule::Ref<_11054f670_MapTypeDecl>());
			if (jule::real(_134421_t)) {
				_130717_kind=_134421_t;
			}
		}
		goto _match_end_4614568032;
		_case_end_4614570896:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_TupleTypeDecl>>())) { goto _case_end_4614571008; }
		_case_begin_4614571008:;
		{
			jule::Ref<_1116aff70_Tuple> _135021_t = (*this)._method_build_tuple(_130628_decl_kind.operator jule::Ref<_11054f670_TupleTypeDecl>());
			if (jule::real(_135021_t)) {
				_130717_kind=_135021_t;
			}
		}
		goto _match_end_4614568032;
		_case_end_4614571008:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_FnDecl>>())) { goto _case_end_4614571120; }
		_case_begin_4614571120:;
		{
			jule::Ref<_11072eb20_FnIns> _135621_t = (*this)._method_build_fn(_130628_decl_kind.operator jule::Ref<_11054f670_FnDecl>());
			if (jule::real(_135621_t)) {
				_130717_kind=_135621_t;
			}
		}
		goto _match_end_4614568032;
		_case_end_4614571120:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_NamespaceTypeDecl>>())) { goto _case_end_4614571232; }
		_case_begin_4614571232:;
		{
			jule::Trait<_1116aff70_Kind> _136221_t = (*this)._method_build_by_namespace(_130628_decl_kind.operator jule::Ref<_11054f670_NamespaceTypeDecl>());
			if (_136221_t != nullptr) {
				_130717_kind=_136221_t;
			}
		}
		goto _match_end_4614568032;
		_case_end_4614571232:;
		_case_begin_4614568448:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid data-type", 17),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1116aff70_TypeKind>();
		}
		goto _match_end_4614568032;
		_case_end_4614568448:;
		_match_end_4614568032:;
	}
	if (_130717_kind == nullptr) {
		return jule::new_ref<_1116aff70_TypeKind>();
	}
	{
		auto _match_expr{ _130717_kind };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_TypeKind>>())) { goto _case_end_4614601632; }
		_case_begin_4614601632:;
		{
			return _130717_kind.operator jule::Ref<_1116aff70_TypeKind>();
		}
		goto _match_end_4614600176;
		_case_end_4614601632:;
		_case_begin_4614600944:;
		{
			return jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_130717_kind));
		}
		goto _match_end_4614600176;
		_case_end_4614600944:;
		_match_end_4614600176:;
	}
}



inline jule::Ref<_1116aff70_TypeKind> _1116aff70_TypeChecker::_method_check_decl(jule::Ref<_11054f670_TypeDecl> _138733_decl) {
	_1106ec050_Token _138917_error_token = (*this)._field_error_token;
	(*this)._field_error_token=_138733_decl->_field_token;
	jule::Ref<_1116aff70_TypeKind> _139217_kind = (*this)._method_build(_138733_decl->_field_kind);
	(*this)._field_error_token=_138917_error_token;
	return _139217_kind;
}



inline void _1116aff70_TypeChecker::_method_check(jule::Ref<_1116aff70_TypeSymbol> _139828_t) {
	if ((!(jule::real(_139828_t->_field_decl)))) {
		return;
	}
	jule::Ref<_1116aff70_TypeKind> _140317_kind = (*this)._method_check_decl(_139828_t->_field_decl);
	if ((!(jule::real(_140317_kind)))) {
		_139828_t->_method_remove_kind();
		return;
	}
	_139828_t->_field_kind=_140317_kind;
}







std::ostream &operator<<(std::ostream &_Stream, const _1116aff70_TypeChecker &_Src) {
	_Stream << "TypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "referencer:" << _Src._field_referencer << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "ignore_generics:" << _Src._field_ignore_generics << ", ";
	_Stream << "use_generics:" << _Src._field_use_generics << ", ";
	_Stream << "not_plain:" << _Src._field_not_plain;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1116aff70_TypeAlias &_Src) {
	_Stream << "TypeAlias{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "refers:" << _Src._field_refers;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1112d7f10_BinopSolver::_method_check_type_compatibility(void) {
	_1111c0be0_TypeCompatibilityChecker _326017_tcc = _1111c0be0_TypeCompatibilityChecker((*this)._field_e->_field_s,(*this)._field_l->_field_kind,(*this)._field_r->_field_kind,(*this)._field_op,jule::Bool(),true,jule::Bool());
	return _326017_tcc._method_check();
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_nil(void) {
	if ((!(_1116aff70_is_nil_compatible((*this)._field_r->_field_kind)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("nil", 3)),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4613565728; }
		_case_begin_4613565728:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613561328;
		_case_end_4613565728:;
		_case_begin_4613556496:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("nil", 3))}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613561328;
		_case_end_4613556496:;
		_match_end_4613561328:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_enum(void) {
	jule::Ref<_110e453c0_Enum> _329217_enm = (*this)._field_l->_field_kind->_method_enm();
	if ((!(jule::real((*this)._field_r->_field_kind->_method_enm()))) || ((_329217_enm).alloc != ((*this)._field_r->_field_kind->_method_enm()).alloc)) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_329217_enm->_field_ident),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4613580528; }
		_case_begin_4613580528:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613574176;
		_case_end_4613580528:;
		if (!((jule::Str("&", 1)) == _match_expr || (jule::Str("|", 1)) == _match_expr)) { goto _case_end_4613581088; }
		_case_begin_4613581088:;
		{
			if ((!(jule::real(_329217_enm->_field_kind->_field_kind->_method_prim()))) || (!(_1118e4c20_is_int(_329217_enm->_field_kind->_field_kind->_method_prim()->_method_to_str())))) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(_329217_enm->_field_ident)}));
			}
			return (*this)._field_l;
		}
		goto _match_end_4613574176;
		_case_end_4613581088:;
		_case_begin_4613575888:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(_329217_enm->_field_ident)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613574176;
		_case_end_4613575888:;
		_match_end_4613574176:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_ptr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str("<=", 2)) == _match_expr || (jule::Str(">=", 2)) == _match_expr)) { goto _case_end_4613599024; }
		_case_begin_4613599024:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613594368;
		_case_end_4613599024:;
		_case_begin_4613589216:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613594368;
		_case_end_4613589216:;
		_match_end_4613594368:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_arr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4613611984; }
		_case_begin_4613611984:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613607360;
		_case_end_4613611984:;
		_case_begin_4613606304:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613607360;
		_case_end_4613606304:;
		_match_end_4613607360:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_slc(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4613624464; }
		_case_begin_4613624464:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613619872;
		_case_end_4613624464:;
		_case_begin_4613618784:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613619872;
		_case_end_4613618784:;
		_match_end_4613619872:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_fn(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4613637008; }
		_case_begin_4613637008:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613632352;
		_case_end_4613637008:;
		_case_begin_4613631296:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613632352;
		_case_end_4613631296:;
		_match_end_4613632352:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_struct(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4613649488; }
		_case_begin_4613649488:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613644960;
		_case_end_4613649488:;
		_case_begin_4613643744:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613644960;
		_case_end_4613643744:;
		_match_end_4613644960:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_trait(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4613661968; }
		_case_begin_4613661968:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613657376;
		_case_end_4613661968:;
		_case_begin_4613656224:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613657376;
		_case_end_4613656224:;
		_match_end_4613657376:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_any(void) {
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4613665936; }
		_case_begin_4613665936:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613663952;
		_case_end_4613665936:;
		_case_begin_4613664896:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("any", 3))}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613663952;
		_case_end_4613664896:;
		_match_end_4613663952:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_bool(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("&&", 2)) == _match_expr || (jule::Str("||", 2)) == _match_expr)) { goto _case_end_4613681760; }
		_case_begin_4613681760:;
		{
			return (*this)._field_l;
		}
		goto _match_end_4613677168;
		_case_end_4613681760:;
		_case_begin_4613676080:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613677168;
		_case_end_4613676080:;
		_match_end_4613677168:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_str(void) {
	jule::Str _348617_rk = (*this)._field_r->_field_kind->_method_to_str();
	if (_348617_rk != jule::Str("str", 3)) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any(_348617_rk)}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("+", 1)) == _match_expr)) { goto _case_end_4613692992; }
		_case_begin_4613692992:;
		{
			return (*this)._field_l;
		}
		goto _match_end_4613686016;
		_case_end_4613692992:;
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4613694416; }
		_case_begin_4613694416:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613686016;
		_case_end_4613694416:;
		_case_begin_4613689824:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("any", 3))}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613686016;
		_case_end_4613689824:;
		_match_end_4613686016:;
	}
}



inline void _1112d7f10_BinopSolver::_method_set_type_to_greater(void) {
	if (((*this)._field_l->_method_is_const() && (*this)._field_r->_method_is_const()) || ((!((*this)._field_l->_method_is_const())) && (!((*this)._field_r->_method_is_const())))) {
		jule::Str _351217_lk = (*this)._field_l->_field_kind->_method_to_str();
		jule::Str _351317_rk = (*this)._field_r->_field_kind->_method_to_str();
		if (_111954bc0_is_greater(_351317_rk,_351217_lk)) {
			(*this)._field_l->_field_kind=(*this)._field_r->_field_kind;
		}
		return;
	}
	if ((*this)._field_l->_method_is_const()) {
		(*this)._field_l->_field_kind=(*this)._field_r->_field_kind;
		return;
	}
	(*this)._field_r->_field_kind=(*this)._field_l->_field_kind;
}



inline void _1112d7f10_BinopSolver::_method_check_mod_data(jule::Ref<_1112d7f10_Data> _352837_d) {
	if ((!(_352837_d->_method_is_const()))) {
		if ((!(jule::real(_352837_d->_field_kind->_method_prim()))) || (!(_1118e4c20_is_int(_352837_d->_field_kind->_method_prim()->_field_kind)))) {
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>({}));
		}
		return;
	}
	{
		if (!((_1111c0be0_sig_assignable(jule::Str("i64", 3),_352837_d)))) { goto _case_end_4613718320; }
		_case_begin_4613718320:;
		{
			_352837_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_352837_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4613710608;
		_case_end_4613718320:;
		if (!((_1111c0be0_unsig_assignable(jule::Str("u64", 3),_352837_d)))) { goto _case_end_4613718432; }
		_case_begin_4613718432:;
		{
			_352837_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_352837_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4613710608;
		_case_end_4613718432:;
		_case_begin_4613710800:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4613710608;
		_case_end_4613710800:;
		_match_end_4613710608:;
	}
}



inline void _1112d7f10_BinopSolver::_method_mod(void) {
	(*this)._method_check_mod_data((*this)._field_l);
	(*this)._method_check_mod_data((*this)._field_r);
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_float(void) {
	jule::Str _355413_lk = (*this)._field_l->_field_kind->_method_to_str();
	jule::Str _355513_rk = (*this)._field_r->_field_kind->_method_to_str();
	if ((!(_1118e4c20_is_num(_355413_lk))) || (!(_1118e4c20_is_num(_355513_rk)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_355413_lk),jule::Any(_355513_rk)}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str(">=", 2)) == _match_expr || (jule::Str("<=", 2)) == _match_expr)) { goto _case_end_4613730816; }
		_case_begin_4613730816:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613750912;
		_case_end_4613730816:;
		_match_end_4613750912:;
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("+", 1)) == _match_expr || (jule::Str("-", 1)) == _match_expr || (jule::Str("*", 1)) == _match_expr || (jule::Str("/", 1)) == _match_expr)) { goto _case_end_4613758240; }
		_case_begin_4613758240:;
		{
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4613754128;
		_case_end_4613758240:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4613758816; }
		_case_begin_4613758816:;
		{
			if ((!(_1118e4c20_is_int(_355513_rk)))) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_355413_lk),jule::Any(_355513_rk)}));
				return jule::new_ref<_1112d7f10_Data>();
			}
			(*this)._method_mod();
			return (*this)._field_r;
		}
		goto _match_end_4613754128;
		_case_end_4613758816:;
		_case_begin_4613751904:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for floating-point type(s)", 52),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613754128;
		_case_end_4613751904:;
		_match_end_4613754128:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_unsig_int(void) {
	jule::Str _360013_lk = (*this)._field_l->_field_kind->_method_to_str();
	jule::Str _360113_rk = (*this)._field_r->_field_kind->_method_to_str();
	if ((!(_1118e4c20_is_num(_360013_lk))) || (!(_1118e4c20_is_num(_360113_rk)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_360013_lk),jule::Any(_360113_rk)}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str(">=", 2)) == _match_expr || (jule::Str("<=", 2)) == _match_expr)) { goto _case_end_4613768912; }
		_case_begin_4613768912:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613772256;
		_case_end_4613768912:;
		_match_end_4613772256:;
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("+", 1)) == _match_expr || (jule::Str("-", 1)) == _match_expr || (jule::Str("*", 1)) == _match_expr || (jule::Str("/", 1)) == _match_expr || (jule::Str("&", 1)) == _match_expr || (jule::Str("|", 1)) == _match_expr || (jule::Str("^", 1)) == _match_expr)) { goto _case_end_4613779712; }
		_case_begin_4613779712:;
		{
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4613775600;
		_case_end_4613779712:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4613780288; }
		_case_begin_4613780288:;
		{
			(*this)._method_mod();
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4613775600;
		_case_end_4613780288:;
		if (!((jule::Str("<<", 2)) == _match_expr || (jule::Str(">>", 2)) == _match_expr)) { goto _case_end_4613779952; }
		_case_begin_4613779952:;
		{
			if ((!(_1112d7f10_is_ok_for_shifting((*this)._field_r)))) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>({}));
				return jule::new_ref<_1112d7f10_Data>();
			}
			if ((*this)._field_l->_method_is_const()) {
				(*this)._field_l->_field_kind=(*this)._field_r->_field_kind;
			}
			return (*this)._field_l;
		}
		goto _match_end_4613775600;
		_case_end_4613779952:;
		_case_begin_4613773200:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for unsigned integer type(s)", 54),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613775600;
		_case_end_4613773200:;
		_match_end_4613775600:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_sig_int(void) {
	jule::Str _365913_lk = (*this)._field_l->_field_kind->_method_to_str();
	jule::Str _366013_rk = (*this)._field_r->_field_kind->_method_to_str();
	if ((!(_1118e4c20_is_num(_365913_lk))) || (!(_1118e4c20_is_num(_366013_rk)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_365913_lk),jule::Any(_366013_rk)}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str(">=", 2)) == _match_expr || (jule::Str("<=", 2)) == _match_expr)) { goto _case_end_4613794032; }
		_case_begin_4613794032:;
		{
			return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
		}
		goto _match_end_4613797376;
		_case_end_4613794032:;
		_match_end_4613797376:;
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("+", 1)) == _match_expr || (jule::Str("-", 1)) == _match_expr || (jule::Str("*", 1)) == _match_expr || (jule::Str("/", 1)) == _match_expr || (jule::Str("&", 1)) == _match_expr || (jule::Str("|", 1)) == _match_expr || (jule::Str("^", 1)) == _match_expr)) { goto _case_end_4613804832; }
		_case_begin_4613804832:;
		{
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4613800720;
		_case_end_4613804832:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4613805392; }
		_case_begin_4613805392:;
		{
			(*this)._method_mod();
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4613800720;
		_case_end_4613805392:;
		if (!((jule::Str("<<", 2)) == _match_expr || (jule::Str(">>", 2)) == _match_expr)) { goto _case_end_4613805056; }
		_case_begin_4613805056:;
		{
			if ((!(_1112d7f10_is_ok_for_shifting((*this)._field_r)))) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>({}));
				return jule::new_ref<_1112d7f10_Data>();
			}
			return (*this)._field_l;
		}
		goto _match_end_4613800720;
		_case_end_4613805056:;
		_case_begin_4613798320:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for integer type(s)", 45),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613800720;
		_case_end_4613798320:;
		_match_end_4613800720:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval_prim(void) {
	jule::Ref<_1116aff70_Prim> _371413_prim = (*this)._field_l->_field_kind->_method_prim();
	{
		if (!((_371413_prim->_method_is_any()))) { goto _case_end_4613815408; }
		_case_begin_4613815408:;
		{
			return (*this)._method_eval_any();
		}
		goto _match_end_4613815152;
		_case_end_4613815408:;
		if (!((_371413_prim->_method_is_bool()))) { goto _case_end_4613815520; }
		_case_begin_4613815520:;
		{
			return (*this)._method_eval_bool();
		}
		goto _match_end_4613815152;
		_case_end_4613815520:;
		if (!((_371413_prim->_method_is_str()))) { goto _case_end_4613815632; }
		_case_begin_4613815632:;
		{
			return (*this)._method_eval_str();
		}
		goto _match_end_4613815152;
		_case_end_4613815632:;
		_match_end_4613815152:;
	}
	jule::Ref<_1116aff70_Prim> _372113_rprim = (*this)._field_r->_field_kind->_method_prim();
	if ((!(jule::real(_372113_rprim)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_371413_prim->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Str _372713_lk = _371413_prim->_method_to_str();
	{
		if (!((_1118e4c20_is_float(_372713_lk)))) { goto _case_end_4613828864; }
		_case_begin_4613828864:;
		{
			return (*this)._method_eval_float();
		}
		goto _match_end_4613821584;
		_case_end_4613828864:;
		if (!((_1118e4c20_is_unsig_int(_372713_lk)))) { goto _case_end_4613827872; }
		_case_begin_4613827872:;
		{
			return (*this)._method_eval_unsig_int();
		}
		goto _match_end_4613821584;
		_case_end_4613827872:;
		if (!((_1118e4c20_is_sig_int(_372713_lk)))) { goto _case_end_4613828080; }
		_case_begin_4613828080:;
		{
			return (*this)._method_eval_sig_int();
		}
		goto _match_end_4613821584;
		_case_end_4613828080:;
		_case_begin_4613821712:;
		{
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613821584;
		_case_end_4613821712:;
		_match_end_4613821584:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_eval(void) {
	{
		if (!(((*this)._field_l->_field_kind->_method_is_void()))) { goto _case_end_4613834384; }
		_case_begin_4613834384:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("void", 4))}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613832400;
		_case_end_4613834384:;
		if (!(((*this)._field_l->_field_kind->_method_is_nil()))) { goto _case_end_4613834960; }
		_case_begin_4613834960:;
		{
			return (*this)._method_eval_nil();
		}
		goto _match_end_4613832400;
		_case_end_4613834960:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_enm())))) { goto _case_end_4613834176; }
		_case_begin_4613834176:;
		{
			return (*this)._method_eval_enum();
		}
		goto _match_end_4613832400;
		_case_end_4613834176:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_ptr())))) { goto _case_end_4613834624; }
		_case_begin_4613834624:;
		{
			return (*this)._method_eval_ptr();
		}
		goto _match_end_4613832400;
		_case_end_4613834624:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_arr())))) { goto _case_end_4613834736; }
		_case_begin_4613834736:;
		{
			return (*this)._method_eval_arr();
		}
		goto _match_end_4613832400;
		_case_end_4613834736:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_slc())))) { goto _case_end_4613833568; }
		_case_begin_4613833568:;
		{
			return (*this)._method_eval_slc();
		}
		goto _match_end_4613832400;
		_case_end_4613833568:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_fnc())))) { goto _case_end_4613833680; }
		_case_begin_4613833680:;
		{
			return (*this)._method_eval_fn();
		}
		goto _match_end_4613832400;
		_case_end_4613833680:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_trt()) || jule::real((*this)._field_r->_field_kind->_method_trt())))) { goto _case_end_4613833792; }
		_case_begin_4613833792:;
		{
			if (jule::real((*this)._field_r->_field_kind->_method_trt())) {
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
			}
			return (*this)._method_eval_trait();
		}
		goto _match_end_4613832400;
		_case_end_4613833792:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_strct())))) { goto _case_end_4613832864; }
		_case_begin_4613832864:;
		{
			return (*this)._method_eval_struct();
		}
		goto _match_end_4613832400;
		_case_end_4613832864:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_prim())))) { goto _case_end_4613832976; }
		_case_begin_4613832976:;
		{
			return (*this)._method_eval_prim();
		}
		goto _match_end_4613832400;
		_case_end_4613832976:;
		_case_begin_4613832560:;
		{
			return jule::new_ref<_1112d7f10_Data>();
		}
		goto _match_end_4613832400;
		_case_end_4613832560:;
		_match_end_4613832400:;
	}
}



inline void _1112d7f10_BinopSolver::_method_assign_shift(jule::Ref<_1112d7f10_Data> _377731_d,jule::F64 _377741_r) {
	{
		if (!((_377741_r <= 6LL))) { goto _case_end_4613862080; }
		_case_begin_4613862080:;
		{
			_377731_d->_field_kind->_method_prim()->_field_kind=jule::Str("i8", 2);
			_377731_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_377731_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4613861072;
		_case_end_4613862080:;
		if (!((_377741_r <= 7LL))) { goto _case_end_4613861696; }
		_case_begin_4613861696:;
		{
			_377731_d->_field_kind->_method_prim()->_field_kind=jule::Str("u8", 2);
			_377731_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_377731_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4613861072;
		_case_end_4613861696:;
		if (!((_377741_r <= 14LL))) { goto _case_end_4613861808; }
		_case_begin_4613861808:;
		{
			_377731_d->_field_kind->_method_prim()->_field_kind=jule::Str("i16", 3);
			_377731_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_377731_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4613861072;
		_case_end_4613861808:;
		if (!((_377741_r <= 15LL))) { goto _case_end_4613865136; }
		_case_begin_4613865136:;
		{
			_377731_d->_field_kind->_method_prim()->_field_kind=jule::Str("u16", 3);
			_377731_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_377731_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4613861072;
		_case_end_4613865136:;
		if (!((_377741_r <= 30LL))) { goto _case_end_4613865248; }
		_case_begin_4613865248:;
		{
			_377731_d->_field_kind->_method_prim()->_field_kind=jule::Str("i32", 3);
			_377731_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_377731_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4613861072;
		_case_end_4613865248:;
		if (!((_377741_r <= 31LL))) { goto _case_end_4613865360; }
		_case_begin_4613865360:;
		{
			_377731_d->_field_kind->_method_prim()->_field_kind=jule::Str("u32", 3);
			_377731_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_377731_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4613861072;
		_case_end_4613865360:;
		if (!((_377741_r <= 62LL))) { goto _case_end_4613865472; }
		_case_begin_4613865472:;
		{
			_377731_d->_field_kind->_method_prim()->_field_kind=jule::Str("i64", 3);
			_377731_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_377731_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4613861072;
		_case_end_4613865472:;
		if (!((_377741_r <= 63LL))) { goto _case_end_4613865584; }
		_case_begin_4613865584:;
		{
			_377731_d->_field_kind->_method_prim()->_field_kind=jule::Str("u64", 3);
			_377731_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_377731_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4613861072;
		_case_end_4613865584:;
		if (!((_377741_r <= 127LL))) { goto _case_end_4613865696; }
		_case_begin_4613865696:;
		{
			_377731_d->_field_kind->_method_prim()->_field_kind=jule::Str("f32", 3);
			_377731_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_377731_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4613861072;
		_case_end_4613865696:;
		_case_begin_4613861232:;
		{
			_377731_d->_field_kind->_method_prim()->_field_kind=jule::Str("f64", 3);
			_377731_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_377731_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4613861072;
		_case_end_4613861232:;
		_match_end_4613861072:;
	}
}



inline void _1112d7f10_BinopSolver::_method_solve_const(jule::Ref<_1112d7f10_Data> _382134_d) {
	{
		if (!(((!(jule::real(_382134_d)))))) { goto _case_end_4613895216; }
		_case_begin_4613895216:;
		{
			return;
		}
		goto _match_end_4613895024;
		_case_end_4613895216:;
		if (!(((!((*this)._field_l->_method_is_const()))) || ((!((*this)._field_r->_method_is_const()))))) { goto _case_end_4613895344; }
		_case_begin_4613895344:;
		{
			jule::drop(_382134_d->_field_constant);
			return;
		}
		goto _match_end_4613895024;
		_case_end_4613895344:;
		_match_end_4613895024:;
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr)) { goto _case_end_4613899664; }
		_case_begin_4613899664:;
		{
			_382134_d->_field_constant=_1118cee40_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_eqs((*this)._field_r->_field_constant));
		}
		goto _match_end_4613898976;
		_case_end_4613899664:;
		if (!((jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4613899776; }
		_case_begin_4613899776:;
		{
			_382134_d->_field_constant=_1118cee40_Const::_static_method_new_bool((!((*this)._field_l->_field_constant->_method_eqs((*this)._field_r->_field_constant))));
		}
		goto _match_end_4613898976;
		_case_end_4613899776:;
		if (!((jule::Str("::", 2)) == _match_expr)) { goto _case_end_4613899888; }
		_case_begin_4613899888:;
		{
			_382134_d->_field_constant=_1118cee40_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_or((*this)._field_r->_field_constant));
		}
		goto _match_end_4613898976;
		_case_end_4613899888:;
		if (!((jule::Str("&&", 2)) == _match_expr)) { goto _case_end_4613900000; }
		_case_begin_4613900000:;
		{
			_382134_d->_field_constant=_1118cee40_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_and((*this)._field_r->_field_constant));
		}
		goto _match_end_4613898976;
		_case_end_4613900000:;
		if (!((jule::Str(">", 1)) == _match_expr)) { goto _case_end_4613900112; }
		_case_begin_4613900112:;
		{
			_382134_d->_field_constant=_1118cee40_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_gt((*this)._field_r->_field_constant));
		}
		goto _match_end_4613898976;
		_case_end_4613900112:;
		if (!((jule::Str("<", 1)) == _match_expr)) { goto _case_end_4613900224; }
		_case_begin_4613900224:;
		{
			_382134_d->_field_constant=_1118cee40_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_lt((*this)._field_r->_field_constant));
		}
		goto _match_end_4613898976;
		_case_end_4613900224:;
		if (!((jule::Str(">=", 2)) == _match_expr)) { goto _case_end_4613900336; }
		_case_begin_4613900336:;
		{
			_382134_d->_field_constant=_1118cee40_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_gt((*this)._field_r->_field_constant) || (*this)._field_l->_field_constant->_method_eqs((*this)._field_r->_field_constant));
		}
		goto _match_end_4613898976;
		_case_end_4613900336:;
		if (!((jule::Str("<=", 2)) == _match_expr)) { goto _case_end_4613900448; }
		_case_begin_4613900448:;
		{
			_382134_d->_field_constant=_1118cee40_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_lt((*this)._field_r->_field_constant) || (*this)._field_l->_field_constant->_method_eqs((*this)._field_r->_field_constant));
		}
		goto _match_end_4613898976;
		_case_end_4613900448:;
		if (!((jule::Str("+", 1)) == _match_expr)) { goto _case_end_4613900560; }
		_case_begin_4613900560:;
		{
			(*this)._field_l->_field_constant->_method_add((*this)._field_r->_field_constant);
			_382134_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4613898976;
		_case_end_4613900560:;
		if (!((jule::Str("-", 1)) == _match_expr)) { goto _case_end_4613900672; }
		_case_begin_4613900672:;
		{
			(*this)._field_l->_field_constant->_method_sub((*this)._field_r->_field_constant);
			_382134_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4613898976;
		_case_end_4613900672:;
		if (!((jule::Str("*", 1)) == _match_expr)) { goto _case_end_4613900784; }
		_case_begin_4613900784:;
		{
			(*this)._field_l->_field_constant->_method_mul((*this)._field_r->_field_constant);
			_382134_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4613898976;
		_case_end_4613900784:;
		if (!((jule::Str("/", 1)) == _match_expr)) { goto _case_end_4613900896; }
		_case_begin_4613900896:;
		{
			jule::Bool _387117_ok = (*this)._field_l->_field_constant->_method_div((*this)._field_r->_field_constant);
			if ((!(_387117_ok)) && ((*this)._field_r->_field_constant->_method_as_f64() == 0LL)) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>({}));
			}
			_382134_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4613898976;
		_case_end_4613900896:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4613901008; }
		_case_begin_4613901008:;
		{
			jule::Bool _387817_ok = (*this)._field_l->_field_constant->_method_mod((*this)._field_r->_field_constant);
			if ((!(_387817_ok)) && ((*this)._field_r->_field_constant->_method_as_f64() == 0LL)) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>({}));
			}
			_382134_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4613898976;
		_case_end_4613901008:;
		if (!((jule::Str("|", 1)) == _match_expr)) { goto _case_end_4613901120; }
		_case_begin_4613901120:;
		{
			(*this)._field_l->_field_constant->_method_bitwise_or((*this)._field_r->_field_constant);
			_382134_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4613898976;
		_case_end_4613901120:;
		if (!((jule::Str("&", 1)) == _match_expr)) { goto _case_end_4613901248; }
		_case_begin_4613901248:;
		{
			(*this)._field_l->_field_constant->_method_bitwise_and((*this)._field_r->_field_constant);
			_382134_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4613898976;
		_case_end_4613901248:;
		if (!((jule::Str("^", 1)) == _match_expr)) { goto _case_end_4613901376; }
		_case_begin_4613901376:;
		{
			(*this)._field_l->_field_constant->_method_xor((*this)._field_r->_field_constant);
			_382134_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4613898976;
		_case_end_4613901376:;
		if (!((jule::Str("<<", 2)) == _match_expr)) { goto _case_end_4613901504; }
		_case_begin_4613901504:;
		{
			_382134_d->_field_constant=(*this)._field_l->_field_constant;
			(*this)._field_l->_field_constant->_method_lshift((*this)._field_r->_field_constant);
			(*this)._method_assign_shift(_382134_d,static_cast<jule::F64>((*this)._field_r->_field_constant->_method_as_f64()));
		}
		goto _match_end_4613898976;
		_case_end_4613901504:;
		if (!((jule::Str(">>", 2)) == _match_expr)) { goto _case_end_4613901632; }
		_case_begin_4613901632:;
		{
			_382134_d->_field_constant=(*this)._field_l->_field_constant;
			(*this)._field_l->_field_constant->_method_rshift((*this)._field_r->_field_constant);
			(*this)._method_assign_shift(_382134_d,static_cast<jule::F64>((*this)._field_r->_field_constant->_method_as_f64()));
		}
		goto _match_end_4613898976;
		_case_end_4613901632:;
		_match_end_4613898976:;
	}
	_382134_d->_field_model=jule::Any(_382134_d->_field_constant);
}



inline void _1112d7f10_BinopSolver::_method_post_const(jule::Ref<_1112d7f10_Data> _391029_d) {
	if ((!(jule::real(_391029_d)))) {
		return;
	}
	if ((!(_391029_d->_method_is_const()))) {
		return;
	}
	_1112d7f10_normalize_bitsize(_391029_d);
}



inline void _1112d7f10_BinopSolver::_method_prepare_data(jule::Ref<_1112d7f10_Data> _392131_d) {
	if (jule::real(_392131_d) && jule::real(_392131_d->_field_kind->_method_ref())) {
		_392131_d->_field_kind=_392131_d->_field_kind->_method_ref()->_field_elem;
	}
}



inline void _1112d7f10_BinopSolver::_method_prepare_eval(void) {
	(*this)._method_prepare_data((*this)._field_r);
	(*this)._method_prepare_data((*this)._field_l);
}



inline void _1112d7f10_BinopSolver::_method_check_data(jule::Ref<_1112d7f10_Data> _393233_d) {
	jule::Ref<_11072eb20_FnIns> _393313_f = _393233_d->_field_kind->_method_fnc();
	if ((jule::real(_393313_f) && jule::real(_393313_f->_field_decl)) && _393313_f->_field_decl->_method_is_method()) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("invalid expression used for binary operation", 44),jule::Slice<jule::Any>({}));
	}
}



inline void _1112d7f10_BinopSolver::_method_check_datas(void) {
	(*this)._method_check_data((*this)._field_l);
	(*this)._method_check_data((*this)._field_r);
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_solve_explicit(jule::Ref<_1112d7f10_Data> _394437_l,jule::Ref<_1112d7f10_Data> _394451_r) {
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_394437_l,_394451_r);
	(*this)._method_prepare_eval();
	(*this)._method_check_datas();
	jule::Ref<_1112d7f10_Data> _395017_d = (*this)._method_eval();
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_394437_l,_394451_r);
	(*this)._method_solve_const(_395017_d);
	(*this)._method_post_const(_395017_d);
	if (jule::real(_395017_d)) {
		_395017_d->_field_lvalue=_1116aff70_is_lvalue(_395017_d->_field_kind);
		if ((!(_395017_d->_method_is_const()))) {
			_395017_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_BinopExprModel>(new( std::nothrow ) _110e4e8a0_BinopExprModel(_394437_l->_field_model,_394451_r->_field_model,(*this)._field_op._field_kind)));
		}
	}
	return _395017_d;
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_BinopSolver::_method_solve(jule::Ref<_11054f670_BinopExpr> _397028_op) {
	jule::Ref<_1112d7f10_Data> _397117_l = (*this)._field_e->_method_eval_expr_kind(_397028_op->_field_left);
	if ((!(jule::real(_397117_l))) || (!(jule::real(_397117_l->_field_kind)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_1112d7f10_Data> _397617_r = (*this)._field_e->_method_eval_expr_kind(_397028_op->_field_right);
	if ((!(jule::real(_397617_r))) || (!(jule::real(_397617_r->_field_kind)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	(*this)._field_op=_397028_op->_field_op;
	jule::Ref<_1112d7f10_Data> _398317_d = (*this)._method_solve_explicit(_397117_l,_397617_r);
	if ((jule::real(_398317_d) && _397117_l->_field_is_rune) && _397617_r->_field_is_rune) {
		_398317_d->_field_is_rune=true;
	}
	return _398317_d;
}







std::ostream &operator<<(std::ostream &_Stream, const _1112d7f10_BinopSolver &_Src) {
	_Stream << "BinopSolver{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline void _1111c0be0_RetTypeChecker::_method_prepare_types(void) {
	(*this)._field_types=_1111c0be0_get_fn_result_types((*this)._field_f);
}



inline void _1111c0be0_RetTypeChecker::_method_prepare_exprs(jule::Ref<_11054f670_Expr> _122836_e) {
	if ((!(jule::real(_122836_e)))) {
		return;
	}
	{
		auto _match_expr{ _122836_e->_field_kind };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_TupleExpr>>())) { goto _case_end_4611539408; }
		_case_begin_4611539408:;
		{
			(*this)._field_exprs=_122836_e->_field_kind.operator jule::Ref<_11054f670_TupleExpr>()->_field_expr;
		}
		goto _match_end_4611538272;
		_case_end_4611539408:;
		_case_begin_4611538464:;
		{
			(*this)._field_exprs=jule::append((*this)._field_exprs,jule::Slice<jule::Ref<_11054f670_Expr>>({_122836_e}));
		}
		goto _match_end_4611538272;
		_case_end_4611538464:;
		_match_end_4611538272:;
	}
}



inline void _1111c0be0_RetTypeChecker::_method_ret_vars(void) {
	if ((*this)._field_f->_field_decl->_method_is_void()) {
		return;
	}
	(*this)._field_vars=jule::Slice<jule::Ref<_110e92c80_Var>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>((*this)._field_f->_field_decl->_field_result->_field_idents.len())));
	jule::Ref<_110af2660_ScopeChecker> _124817_root_scope = (*this)._field_sc->_method_get_root();
	jule::Int _125017_j = 0LL;
	{
		auto __julec_range_expr = (*this)._field_f->_field_decl->_field_result->_field_idents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1111c0be0_i = 0;
			_1106ec050_Token _1111c0be0_ident = *__julec_range_begin;
			_iter_begin_4611550368:;
			{
				if ((!(_1106ec050_is_ignore_ident(_1111c0be0_ident._field_kind)))) {
					(*this)._field_vars[static_cast<jule::Int>(_1111c0be0_i)]=_124817_root_scope->_field_table->_field_vars._method_at(_125017_j);
					(_125017_j)++;
				} else {
					(*this)._field_vars[static_cast<jule::Int>(_1111c0be0_i)]=jule::new_struct<_110e92c80_Var>(new( std::nothrow ) _110e92c80_Var(jule::Ref<_110af2660_Scope>(),_1106ec050_Token(),jule::Str("_", 1),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),(*this)._field_types[static_cast<jule::Int>(_1111c0be0_i)])),jule::Ref<_1112d7f10_Value>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Slice<jule::Ref<_11054f670_Directive>>(),jule::Slice<jule::Ref<_110e92c80_Var>>()));
				}
			}
			_iter_next_4611550368:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1111c0be0_i; _1111c0be0_ident = *__julec_range_begin; goto _iter_begin_4611550368; }
			_iter_end_4611550368:;
		}
	}
	if (_125017_j == 0LL) {
		(*this)._field_vars=nullptr;
	}
}



inline void _1111c0be0_RetTypeChecker::_method_check_exprs(void) {
	if ((*this)._field_exprs.len() == 0LL) {
		return;
	}
	jule::Slice<jule::Ref<_1112d7f10_Data>> _127417_datas = jule::Slice<jule::Ref<_1112d7f10_Data>>::alloc(0LL,static_cast<jule::Int>(static_cast<jule::I64>((*this)._field_exprs.len())));
	{
		auto __julec_range_expr = (*this)._field_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1111c0be0_i = 0;
			jule::Ref<_11054f670_Expr> _1111c0be0_expr = *__julec_range_begin;
			_iter_begin_4611563824:;
			{
				if (_1111c0be0_i >= (*this)._field_types.len()) {
					goto _iter_end_4611563824;
				}
				jule::Ref<_1116aff70_TypeKind> _128121_t = (*this)._field_types[static_cast<jule::Int>(_1111c0be0_i)];
				jule::Ref<_1112d7f10_Data> _128321_d = (*this)._field_sc->_field_s->_method_evalp(_1111c0be0_expr,(*this)._field_sc,_128121_t);
				if ((!(jule::real(_128321_d)))) {
					goto _iter_next_4611563824;
				}
				_127417_datas=jule::append(_127417_datas,jule::Slice<jule::Ref<_1112d7f10_Data>>({_128321_d}));
				if ((!(_128321_d->_field_mutable)) && _1116aff70_is_mut(_128321_d->_field_kind)) {
					(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("mutable typed return expressions should be mutable", 50),jule::Slice<jule::Any>({}));
					return;
				}
				_1111c0be0_AssignTypeChecker _129521_ac = _1111c0be0_AssignTypeChecker((*this)._field_sc->_field_s,_128121_t,_128321_d,(*this)._field_error_token,jule::Bool());
				_129521_ac._method_check();
			}
			_iter_next_4611563824:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1111c0be0_i; _1111c0be0_expr = *__julec_range_begin; goto _iter_begin_4611563824; }
			_iter_end_4611563824:;
		}
	}
	if (_127417_datas.len() > 1LL) {
		(*this)._field_model=jule::Any(jule::new_struct<_110e4e8a0_TupleExprModel>(new( std::nothrow ) _110e4e8a0_TupleExprModel(_127417_datas)));
	} else if (_127417_datas.len() == 1LL) {
		(*this)._field_model=_127417_datas[0LL]->_field_model;
	}
}



inline jule::Bool _1111c0be0_RetTypeChecker::_method_check(jule::Ref<_11054f670_Expr> _131428_e) {
	(*this)._method_prepare_types();
	(*this)._method_prepare_exprs(_131428_e);
	(*this)._method_ret_vars();
	jule::I64 _131913_n = (*this)._field_exprs.len();
	if ((_131913_n == 0LL) && (!((*this)._field_f->_field_decl->_method_is_void()))) {
		if ((!((*this)._field_f->_field_decl->_method_any_var()))) {
			(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("return statements of non-void functions should have return expression", 69),jule::Slice<jule::Any>({}));
			return false;
		}
		return true;
	}
	if ((_131913_n > 0LL) && (*this)._field_f->_field_decl->_method_is_void()) {
		(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("void functions is cannot returns any value", 42),jule::Slice<jule::Any>({}));
		return false;
	}
	if (_131913_n > (*this)._field_types.len()) {
		(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("overflow return expressions", 27),jule::Slice<jule::Any>({}));
	} else if (_131913_n < (*this)._field_types.len()) {
		(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("missing return expressions for multi return", 43),jule::Slice<jule::Any>({}));
	}
	(*this)._method_check_exprs();
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1111c0be0_RetTypeChecker &_Src) {
	_Stream << "RetTypeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "types:" << _Src._field_types << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}



inline void _1111c0be0_FnCallArgChecker::_method_push_err_token(_1106ec050_Token _69733_token,jule::Str _69747_fmt,jule::Slice<jule::Any> _69760_args) {
	(*this)._field_e->_field_s->_method_push_err(_69733_token,_69747_fmt,_69760_args);
}



inline void _1111c0be0_FnCallArgChecker::_method_push_err(jule::Str _70127_fmt,jule::Slice<jule::Any> _70140_args) {
	(*this)._method_push_err_token((*this)._field_error_token,_70127_fmt,_70140_args);
}



inline jule::Slice<jule::Ref<_11072eb20_ParamIns>> _1111c0be0_FnCallArgChecker::_method_get_params(void) {
	if ((((*this)._field_f->_field_params.len() > 0LL) && jule::real((*this)._field_f->_field_params[0LL]->_field_decl)) && (*this)._field_f->_field_params[0LL]->_field_decl->_method_is_self()) {
		return (*this)._field_f->_field_params.slice(1LL);
	}
	return (*this)._field_f->_field_params;
}



inline jule::Bool _1111c0be0_FnCallArgChecker::_method_check_counts(jule::Slice<jule::Ref<_11072eb20_ParamIns>> _71231_params) {
	jule::Bool _71254_ok = jule::Bool();
	jule::I64 _71317_n = _71231_params.len();
	if ((_71317_n > 0LL) && _71231_params[0LL]->_field_decl->_method_is_self()) {
		(_71317_n)--;
	}
	jule::I64 _71817_diff = _71317_n - (*this)._field_args.len();
	{
		if (!((_71817_diff == 0LL))) { goto _case_end_4611226960; }
		_case_begin_4611226960:;
		{
			_71254_ok = true;
			return _71254_ok;
		}
		goto _match_end_4611226688;
		_case_end_4611226960:;
		if (!(((_71317_n > 0LL) && _71231_params[static_cast<jule::Int>(_71317_n - 1LL)]->_field_decl->_field_variadic))) { goto _case_end_4611227072; }
		_case_begin_4611227072:;
		{
			_71254_ok = true;
			return _71254_ok;
		}
		goto _match_end_4611226688;
		_case_end_4611227072:;
		if (!(((_71817_diff < 0LL) || (_71817_diff > _71231_params.len())))) { goto _case_end_4611227184; }
		_case_begin_4611227184:;
		{
			(*this)._method_push_err(jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
			_71254_ok = false;
			return _71254_ok;
		}
		goto _match_end_4611226688;
		_case_end_4611227184:;
		_match_end_4611226688:;
	}
	jule::Str _73117_idents = jule::Str("", 0);
	_iter_begin_4611231280:;
	if (!(_71817_diff > 0LL)) { goto _iter_end_4611231280; }
	{
		_73117_idents+=jule::Str(", ", 2) + _71231_params[static_cast<jule::Int>(_71317_n - _71817_diff)]->_field_decl->_field_ident;
	}
	_iter_next_4611231280:;
	(_71817_diff)--;
	goto _iter_begin_4611231280;
	_iter_end_4611231280:;
	_73117_idents=_73117_idents.slice(2LL);
	(*this)._method_push_err(jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_73117_idents)}));
	_71254_ok = false;
	return _71254_ok;
}



inline jule::Bool _1111c0be0_FnCallArgChecker::_method_check_arg(jule::Ref<_11072eb20_ParamIns> _74132_p,jule::Ref<_1112d7f10_Data> _74150_arg,_1106ec050_Token _74166_error_token) {
	jule::Bool _74188_ok = jule::Bool();
	if ((*this)._field_dynamic_annotation) {
		_1111c0be0_DynamicTypeAnnotation _74321_dta = _1111c0be0_DynamicTypeAnnotation((*this)._field_e,(*this)._field_f,_74132_p,_74150_arg,_74166_error_token,nullptr);
		_74188_ok=_74321_dta._method_annotate();
		if ((!(_74188_ok))) {
			(*this)._method_push_err_token(_74166_error_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>({}));
			_74188_ok = false;
			return _74188_ok;
		}
	}
	(*this)._field_e->_field_s->_method_check_validity_for_init_expr(_74132_p->_field_decl->_field_mutable,_74132_p->_field_decl->_field_reference,_74132_p->_field_kind,_74150_arg,_74166_error_token);
	(*this)._field_e->_field_s->_method_check_assign_type(_74132_p->_field_kind,_74150_arg,_74166_error_token,false);
	_74188_ok = true;
	return _74188_ok;
}



inline jule::Bool _1111c0be0_FnCallArgChecker::_method_push(jule::Ref<_11072eb20_ParamIns> _76327_p,jule::Ref<_11054f670_Expr> _76345_arg) {
	jule::Bool _76359_ok = jule::Bool();
	jule::Ref<_1112d7f10_Data> _76417_d = jule::new_ref<_1112d7f10_Data>();
	if ((!((*this)._field_dynamic_annotation)) && (!(_76327_p->_field_decl->_field_variadic))) {
		jule::Ref<_1116aff70_TypeKind> _76621_old = (*this)._field_e->_field_prefix;
		(*this)._field_e->_field_prefix=_76327_p->_field_kind;
		_76417_d=(*this)._field_e->_method_eval_expr_kind(_76345_arg->_field_kind);
		(*this)._field_e->_field_prefix=_76621_old;
	} else {
		jule::Ref<_1116aff70_TypeKind> _77121_old = (*this)._field_e->_field_prefix;
		jule::drop((*this)._field_e->_field_prefix);
		_76417_d=(*this)._field_e->_method_eval_expr_kind(_76345_arg->_field_kind);
		(*this)._field_e->_field_prefix=_77121_old;
	}
	if ((!(jule::real(_76417_d)))) {
		_76359_ok = false;
		return _76359_ok;
	}
	(*this)._field_arg_models=jule::append((*this)._field_arg_models,jule::Slice<jule::Any>({_76417_d->_field_model}));
	_76359_ok = (*this)._method_check_arg(_76327_p,_76417_d,_76345_arg->_field_token);
	return _76359_ok;
}



inline jule::Bool _1111c0be0_FnCallArgChecker::_method_push_variadic(jule::Ref<_11072eb20_ParamIns> _78336_p,jule::Int _78354_i) {
	jule::Bool _78364_ok = jule::Bool();
	_78364_ok=true;
	jule::Bool _78517_variadiced = false;
	jule::Bool _78613_more = (_78354_i + 1LL) < (*this)._field_args.len();
	jule::Ref<_110e4e8a0_SliceExprModel> _78717_model = jule::new_struct<_110e4e8a0_SliceExprModel>(new( std::nothrow ) _110e4e8a0_SliceExprModel(_78336_p->_field_kind,jule::Slice<jule::Any>()));
	jule::Ref<_1116aff70_TypeKind> _79117_old = (*this)._field_e->_field_prefix;
	_iter_begin_4611278256:;
	if (!(_78354_i < (*this)._field_args.len())) { goto _iter_end_4611278256; }
	{
		jule::Ref<_11054f670_Expr> _79321_arg = (*this)._field_args[static_cast<jule::Int>(_78354_i)];
		{
			auto _match_expr{ _79321_arg->_field_kind };
			if (!(_match_expr.type_is<jule::Ref<_11054f670_VariadicExpr>>())) { goto _case_end_4611283280; }
			_case_begin_4611283280:;
			{
				(*this)._field_e->_field_prefix=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1116aff70_Slc>(new( std::nothrow ) _1116aff70_Slc(_78336_p->_field_kind))));
			}
			goto _match_end_4611281424;
			_case_end_4611283280:;
			_case_begin_4611282496:;
			{
				(*this)._field_e->_field_prefix=_78336_p->_field_kind;
			}
			goto _match_end_4611281424;
			_case_end_4611282496:;
			_match_end_4611281424:;
		}
		jule::Ref<_1112d7f10_Data> _80321_d = (*this)._field_e->_method_eval_expr_kind(_79321_arg->_field_kind);
		if ((!(jule::real(_80321_d)))) {
			_78364_ok=false;
			goto _iter_next_4611278256;
		}
		if (_80321_d->_field_variadiced) {
			_78517_variadiced=true;
			_80321_d->_field_variadiced=false;
			_78336_p->_field_kind->_field_variadic=true;
			_80321_d->_field_kind->_field_variadic=true;
			__JULE_DEFER({
				_80321_d->_field_kind->_field_variadic=false;
				_78336_p->_field_kind->_field_variadic=false;
			});
			{
				auto _match_expr{ _80321_d->_field_model };
				if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_SliceExprModel>>())) { goto _case_end_4611293568; }
				_case_begin_4611293568:;
				{
					_78717_model=_80321_d->_field_model.operator jule::Ref<_110e4e8a0_SliceExprModel>();
					_78717_model->_field_elem_kind=_78336_p->_field_kind;
				}
				goto _match_end_4611289376;
				_case_end_4611293568:;
				_case_begin_4611293456:;
				{
					jule::drop(_78717_model);
					(*this)._field_arg_models=jule::append((*this)._field_arg_models,jule::Slice<jule::Any>({_80321_d->_field_model}));
				}
				goto _match_end_4611289376;
				_case_end_4611293456:;
				_match_end_4611289376:;
			}
			_78364_ok=(*this)._method_check_arg(_78336_p,_80321_d,_79321_arg->_field_token) && _78364_ok;
			goto _iter_next_4611278256;
		}
		_78717_model->_field_elems=jule::append(_78717_model->_field_elems,jule::Slice<jule::Any>({_80321_d->_field_model}));
		_78364_ok=(*this)._method_check_arg(_78336_p,_80321_d,_79321_arg->_field_token) && _78364_ok;
	}
	_iter_next_4611278256:;
	(_78354_i)++;
	goto _iter_begin_4611278256;
	_iter_end_4611278256:;
	(*this)._field_e->_field_prefix=_79117_old;
	if (_78517_variadiced && _78613_more) {
		(*this)._method_push_err(jule::Str("variadic argument can't use with more argument", 46),jule::Slice<jule::Any>({}));
	}
	if (jule::real(_78717_model)) {
		(*this)._field_arg_models=jule::append((*this)._field_arg_models,jule::Slice<jule::Any>({jule::Any(_78717_model)}));
	}
	_78364_ok = _78364_ok;
	return _78364_ok;
}



inline jule::Bool _1111c0be0_FnCallArgChecker::_method_check_args(jule::Slice<jule::Ref<_11072eb20_ParamIns>> _84933_params) {
	jule::Bool _84956_ok = jule::Bool();
	_84956_ok=true;
	jule::Int _85117_i = 0LL;
	_julec_label_iter:;
	_iter_begin_4611310912:;
	if (!(_85117_i < _84933_params.len())) { goto _iter_end_4611310912; }
	{
		jule::Ref<_11072eb20_ParamIns> _85421_p = _84933_params[static_cast<jule::Int>(_85117_i)];
		{
			if (!((_85421_p->_field_decl->_method_is_self()))) { goto _case_end_4611314736; }
			goto _match_end_4611313728;
			_case_end_4611314736:;
			if (!((_85421_p->_field_decl->_field_variadic))) { goto _case_end_4611315040; }
			_case_begin_4611315040:;
			{
				_84956_ok=(*this)._method_push_variadic(_85421_p,_85117_i) && _84956_ok;
				goto _iter_end_4611310912;
			}
			goto _match_end_4611313728;
			_case_end_4611315040:;
			if (!(((*this)._field_args.len() <= _85117_i))) { goto _case_end_4611315152; }
			_case_begin_4611315152:;
			{
				_84956_ok=false;
				goto _iter_end_4611310912;
			}
			goto _match_end_4611313728;
			_case_end_4611315152:;
			_case_begin_4611313920:;
			{
				_84956_ok=(*this)._method_push(_85421_p,(*this)._field_args[static_cast<jule::Int>(_85117_i)]) && _84956_ok;
			}
			goto _match_end_4611313728;
			_case_end_4611313920:;
			_match_end_4611313728:;
		}
		(_85117_i)++;
	}
	_iter_next_4611310912:;
	goto _iter_begin_4611310912;
	_iter_end_4611310912:;
	_84956_ok = _84956_ok;
	return _84956_ok;
}



inline jule::Bool _1111c0be0_FnCallArgChecker::_method_check_dynamic_type_annotation(void) {
	jule::Bool _87650_ok = jule::Bool();
	{
		auto __julec_range_expr = (*this)._field_f->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1116aff70_TypeKind> _1111c0be0_g = *__julec_range_begin;
			_iter_begin_4611323232:;
			{
				if ((!(jule::real(_1111c0be0_g)))) {
					(*this)._method_push_err(jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>({}));
					_87650_ok = false;
					return _87650_ok;
				}
			}
			_iter_next_4611323232:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1111c0be0_g = *__julec_range_begin; goto _iter_begin_4611323232; }
			_iter_end_4611323232:;
		}
	}
	_87650_ok = true;
	return _87650_ok;
}



inline jule::Bool _1111c0be0_FnCallArgChecker::_method_check(void) {
	jule::Bool _88626_ok = jule::Bool();
	jule::Slice<jule::Ref<_11072eb20_ParamIns>> _88717_params = (*this)._method_get_params();
	_88626_ok=(*this)._method_check_counts(_88717_params);
	if ((!(_88626_ok))) {
		_88626_ok = false;
		return _88626_ok;
	}
	_88626_ok=(*this)._method_check_args(_88717_params);
	if (_88626_ok && (*this)._field_dynamic_annotation) {
		_88626_ok=(*this)._method_check_dynamic_type_annotation();
	}
	_88626_ok = _88626_ok;
	return _88626_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _1111c0be0_FnCallArgChecker &_Src) {
	_Stream << "FnCallArgChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "dynamic_annotation:" << _Src._field_dynamic_annotation << ", ";
	_Stream << "arg_models:" << _Src._field_arg_models;
	_Stream << "}";
	return _Stream;
}



inline void _1111c0be0_AssignTypeChecker::_method_push_err(jule::Str _44327_fmt,jule::Slice<jule::Any> _44340_args) {
	(*this)._field_s->_method_push_err((*this)._field_error_token,_44327_fmt,_44340_args);
}



inline jule::Bool _1111c0be0_AssignTypeChecker::_method_check_validity(void) {
	jule::Bool _44817_valid = true;
	{
		if (!((jule::real((*this)._field_d->_field_kind->_method_fnc())))) { goto _case_end_4611048976; }
		_case_begin_4611048976:;
		{
			jule::Ref<_11072eb20_FnIns> _45217_f = (*this)._field_d->_field_kind->_method_fnc();
			{
				if (!((_45217_f->_method_is_builtin()))) { goto _case_end_4611053088; }
				_case_begin_4611053088:;
				{
					(*this)._method_push_err(jule::Str("built-in define cannot use as anonymous function", 48),jule::Slice<jule::Any>({}));
					_44817_valid=false;
				}
				goto _match_end_4611052832;
				_case_end_4611053088:;
				if (!((_45217_f->_field_decl->_method_is_method()))) { goto _case_end_4611053200; }
				_case_begin_4611053200:;
				{
					(*this)._method_push_err(jule::Str("methods cannot use as anonymous function", 40),jule::Slice<jule::Any>({}));
					_44817_valid=false;
				}
				goto _match_end_4611052832;
				_case_end_4611053200:;
				if (!((_45217_f->_field_decl->_field_generics.len() > 0LL))) { goto _case_end_4611053312; }
				_case_begin_4611053312:;
				{
					(*this)._method_push_err(jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>({}));
					_44817_valid=false;
				}
				goto _match_end_4611052832;
				_case_end_4611053312:;
				_match_end_4611052832:;
			}
		}
		goto _match_end_4611048736;
		_case_end_4611048976:;
		if (!((jule::real((*this)._field_d->_field_kind->_method_tup())))) { goto _case_end_4611049088; }
		_case_begin_4611049088:;
		{
			(*this)._method_push_err(jule::Str("tuples cannot assign to single define in same time", 50),jule::Slice<jule::Any>({}));
			_44817_valid=false;
		}
		goto _match_end_4611048736;
		_case_end_4611049088:;
		_match_end_4611048736:;
	}
	return _44817_valid;
}



inline jule::Bool _1111c0be0_AssignTypeChecker::_method_check_const(void) {
	if ((((!((*this)._field_d->_method_is_const())) || (!(jule::real((*this)._field_dest->_method_prim())))) || (!(jule::real((*this)._field_d->_field_kind->_method_prim())))) || (!(_1118e4c20_is_num((*this)._field_d->_field_kind->_method_prim()->_field_kind)))) {
		return false;
	}
	jule::Str _48413_kind = (*this)._field_dest->_method_prim()->_field_kind;
	{
		if (!((_1118e4c20_is_float(_48413_kind)))) { goto _case_end_4611070192; }
		_case_begin_4611070192:;
		{
			if ((!(_1111c0be0_float_assignable(_48413_kind,(*this)._field_d)))) {
				(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>({}));
				return false;
			}
		}
		goto _match_end_4611069712;
		_case_end_4611070192:;
		if (!((_1118e4c20_is_int(_48413_kind)))) { goto _case_end_4611070304; }
		_case_begin_4611070304:;
		{
			if ((!(_1111c0be0_int_assignable(_48413_kind,(*this)._field_d)))) {
				(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>({}));
				return false;
			}
		}
		goto _match_end_4611069712;
		_case_end_4611070304:;
		_case_begin_4611069840:;
		{
			return false;
		}
		goto _match_end_4611069712;
		_case_end_4611069840:;
		_match_end_4611069712:;
	}
	return true;
}



inline jule::Bool _1111c0be0_AssignTypeChecker::_method_check(void) {
	{
		if (!(((!(jule::real((*this)._field_d)))))) { goto _case_end_4611078912; }
		_case_begin_4611078912:;
		{
			return false;
		}
		goto _match_end_4611072176;
		_case_end_4611078912:;
		if (!(((!((*this)._method_check_validity()))))) { goto _case_end_4611078512; }
		_case_begin_4611078512:;
		{
			return false;
		}
		goto _match_end_4611072176;
		_case_end_4611078512:;
		if (!(((*this)._method_check_const()))) { goto _case_end_4611078624; }
		_case_begin_4611078624:;
		{
			return true;
		}
		goto _match_end_4611072176;
		_case_end_4611078624:;
		_case_begin_4611072336:;
		{
			return (*this)._field_s->_method_check_type_compatibility((*this)._field_dest,(*this)._field_d->_field_kind,(*this)._field_error_token,(*this)._field_deref);
		}
		goto _match_end_4611072176;
		_case_end_4611072336:;
		_match_end_4611072176:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1111c0be0_AssignTypeChecker &_Src) {
	_Stream << "AssignTypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "deref:" << _Src._field_deref;
	_Stream << "}";
	return _Stream;
}



inline void _1111c0be0_TypeCompatibilityChecker::_method_push_err(jule::Str _13927_fmt,jule::Slice<jule::Any> _13940_args) {
	(*this)._field_s->_method_push_err((*this)._field_error_token,_13927_fmt,_13940_args);
}



inline jule::Bool _1111c0be0_TypeCompatibilityChecker::_method_check_trait(void) {
	jule::Bool _14332_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_14332_ok = true;
		return _14332_ok;
	}
	jule::Ref<_110e3f160_Trait> _14813_trt = (*this)._field_dest->_method_trt();
	jule::Bool _14917_ref = false;
	{
		if (!((jule::real((*this)._field_src->_method_ref())))) { goto _case_end_4610892416; }
		_case_begin_4610892416:;
		{
			_14917_ref=true;
			(*this)._field_src=(*this)._field_src->_method_ref()->_field_elem;
			if (jule::real((*this)._field_src->_method_strct())) {
				_14332_ok = false;
				return _14332_ok;
			}
			goto _case_begin_4610891920;
		}
		goto _match_end_4610890720;
		_case_end_4610892416:;
		if (!((jule::real((*this)._field_src->_method_strct())))) { goto _case_end_4610891920; }
		_case_begin_4610891920:;
		{
			jule::Ref<_1109372e0_StructIns> _16017_s = (*this)._field_src->_method_strct();
			if ((!(_16017_s->_field_decl->_method_is_implements(_14813_trt)))) {
				_14332_ok = false;
				return _14332_ok;
			}
			if (_1111c0be0_trait_has_reference_receiver(_14813_trt) && (!(_14917_ref))) {
				(*this)._method_push_err(jule::Str("trait has reference receiver parameter used method, cannot assign non-reference instance", 88),jule::Slice<jule::Any>({}));
				_14332_ok = false;
				return _14332_ok;
			}
			_14332_ok = true;
			return _14332_ok;
		}
		goto _match_end_4610890720;
		_case_end_4610891920:;
		if (!((jule::real((*this)._field_src->_method_trt())))) { goto _case_end_4610892032; }
		_case_begin_4610892032:;
		{
			_14332_ok = _14813_trt == (*this)._field_src->_method_trt();
			return _14332_ok;
		}
		goto _match_end_4610890720;
		_case_end_4610892032:;
		_case_begin_4610891008:;
		{
			_14332_ok = false;
			return _14332_ok;
		}
		goto _match_end_4610890720;
		_case_end_4610891008:;
		_match_end_4610890720:;
	}
}



inline jule::Bool _1111c0be0_TypeCompatibilityChecker::_method_check_ref(void) {
	jule::Bool _18030_ok = jule::Bool();
	if ((*this)._field_dest->_method_to_str() == (*this)._field_src->_method_to_str()) {
		_18030_ok = true;
		return _18030_ok;
	} else if ((!((*this)._field_deref))) {
		_18030_ok = false;
		return _18030_ok;
	} else if ((!(jule::real((*this)._field_src->_method_ref())))) {
		(*this)._field_dest=(*this)._field_dest->_method_ref()->_field_elem;
		_18030_ok = (*this)._method_check();
		return _18030_ok;
	}
	(*this)._field_src=(*this)._field_src->_method_ref()->_field_elem;
	_18030_ok = (*this)._method_check();
	return _18030_ok;
}



inline jule::Bool _1111c0be0_TypeCompatibilityChecker::_method_check_ptr(void) {
	jule::Bool _19430_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_19430_ok = true;
		return _19430_ok;
	}
	jule::Ref<_1116aff70_Ptr> _19917_src = (*this)._field_src->_method_ptr();
	if ((!(jule::real(_19917_src)))) {
		_19430_ok = false;
		return _19430_ok;
	}
	jule::Ref<_1116aff70_Ptr> _20417_dest = (*this)._field_dest->_method_ptr();
	if (_20417_dest->_method_is_unsafe()) {
		_19430_ok = true;
		return _19430_ok;
	}
	_1111c0be0_TypeCompatibilityChecker _21017_sub = _1111c0be0_TypeCompatibilityChecker((*this)._field_s,_20417_dest->_field_elem,_19917_src->_field_elem,(*this)._field_error_token,true,jule::Bool(),true);
	_19430_ok = _21017_sub._method_check();
	return _19430_ok;
}



inline jule::Bool _1111c0be0_TypeCompatibilityChecker::_method_check_slc(void) {
	jule::Bool _22130_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_22130_ok = true;
		return _22130_ok;
	}
	jule::Ref<_1116aff70_Slc> _22617_src = (*this)._field_src->_method_slc();
	if ((!(jule::real(_22617_src)))) {
		_22130_ok = false;
		return _22130_ok;
	}
	jule::Ref<_1116aff70_Slc> _23017_dest = (*this)._field_dest->_method_slc();
	_1111c0be0_TypeCompatibilityChecker _23217_sub = _1111c0be0_TypeCompatibilityChecker((*this)._field_s,_23017_dest->_field_elem,_22617_src->_field_elem,(*this)._field_error_token,true,jule::Bool(),true);
	_22130_ok = _23217_sub._method_check();
	return _22130_ok;
}



inline jule::Bool _1111c0be0_TypeCompatibilityChecker::_method_check_arr(void) {
	jule::Bool _24330_ok = jule::Bool();
	jule::Ref<_1116aff70_Arr> _24417_src = (*this)._field_src->_method_arr();
	if ((!(jule::real(_24417_src)))) {
		_24330_ok = false;
		return _24330_ok;
	}
	jule::Ref<_1116aff70_Arr> _24817_dest = (*this)._field_dest->_method_arr();
	if (_24817_dest->_field_n != _24417_src->_field_n) {
		_24330_ok = false;
		return _24330_ok;
	}
	_1111c0be0_TypeCompatibilityChecker _25317_sub = _1111c0be0_TypeCompatibilityChecker((*this)._field_s,_24817_dest->_field_elem,_24417_src->_field_elem,(*this)._field_error_token,true,jule::Bool(),true);
	_24330_ok = _25317_sub._method_check();
	return _24330_ok;
}



inline jule::Bool _1111c0be0_TypeCompatibilityChecker::_method_check_map(void) {
	jule::Bool _26430_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_26430_ok = true;
		return _26430_ok;
	}
	jule::Ref<_1116aff70_Map> _26917_src = (*this)._field_src->_method_map();
	if ((!(jule::real(_26917_src)))) {
		_26430_ok = false;
		return _26430_ok;
	}
	jule::Ref<_1116aff70_Map> _27417_dest = (*this)._field_dest->_method_map();
	_1111c0be0_TypeCompatibilityChecker _27617_sub = _1111c0be0_TypeCompatibilityChecker((*this)._field_s,_27417_dest->_field_key,_26917_src->_field_key,(*this)._field_error_token,jule::Bool(),jule::Bool(),true);
	if ((!(_27617_sub._method_check()))) {
		_26430_ok = false;
		return _26430_ok;
	}
	_27617_sub._field_src=_26917_src->_field_val;
	_27617_sub._field_dest=_27417_dest->_field_val;
	_26430_ok = _27617_sub._method_check();
	return _26430_ok;
}



inline jule::Bool _1111c0be0_TypeCompatibilityChecker::_method_check_struct(void) {
	jule::Bool _29233_ok = jule::Bool();
	jule::Ref<_1109372e0_StructIns> _29317_src = (*this)._field_src->_method_strct();
	if ((!(jule::real(_29317_src)))) {
		_29233_ok = false;
		return _29233_ok;
	}
	jule::Ref<_1109372e0_StructIns> _29717_dest = (*this)._field_dest->_method_strct();
	{
		if (!(((_29717_dest->_field_decl).alloc != (_29317_src->_field_decl).alloc))) { goto _case_end_4610962288; }
		_case_begin_4610962288:;
		{
			_29233_ok = false;
			return _29233_ok;
		}
		goto _match_end_4610962064;
		_case_end_4610962288:;
		if (!((_29717_dest->_field_generics.len() == 0LL))) { goto _case_end_4610962400; }
		_case_begin_4610962400:;
		{
			_29233_ok = true;
			return _29233_ok;
		}
		goto _match_end_4610962064;
		_case_end_4610962400:;
		_match_end_4610962064:;
	}
	{
		auto __julec_range_expr = _29717_dest->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1111c0be0_i = 0;
			jule::Ref<_1116aff70_TypeKind> _1111c0be0_dg = *__julec_range_begin;
			_iter_begin_4610965504:;
			{
				jule::Ref<_1116aff70_TypeKind> _30721_sg = _29317_src->_field_generics[static_cast<jule::Int>(_1111c0be0_i)];
				_1111c0be0_TypeCompatibilityChecker _30821_sub = _1111c0be0_TypeCompatibilityChecker((*this)._field_s,_1111c0be0_dg,_30721_sg,(*this)._field_error_token,jule::Bool(),jule::Bool(),jule::Bool());
				if ((!(_30821_sub._method_check()))) {
					_29233_ok = false;
					return _29233_ok;
				}
			}
			_iter_next_4610965504:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1111c0be0_i; _1111c0be0_dg = *__julec_range_begin; goto _iter_begin_4610965504; }
			_iter_end_4610965504:;
		}
	}
	_29233_ok = true;
	return _29233_ok;
}



inline jule::Bool _1111c0be0_TypeCompatibilityChecker::_method_check_fn(void) {
	jule::Bool _32129_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_32129_ok = true;
		return _32129_ok;
	}
	jule::Ref<_11072eb20_FnIns> _32617_src = (*this)._field_src->_method_fnc();
	if ((!(jule::real(_32617_src)))) {
		_32129_ok = false;
		return _32129_ok;
	}
	jule::Ref<_11072eb20_FnIns> _33117_dest = (*this)._field_dest->_method_fnc();
	if (jule::real(_32617_src->_field_result) != jule::real(_33117_dest->_field_result)) {
		_32129_ok = false;
		return _32129_ok;
	}
	if (_32617_src->_field_params.len() != _33117_dest->_field_params.len()) {
		_32129_ok = false;
		return _32129_ok;
	}
	{
		auto __julec_range_expr = _32617_src->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1111c0be0_i = 0;
			_iter_begin_4610981728:;
			{
				jule::Ref<_11072eb20_ParamIns> _34021_srcp = _32617_src->_field_params[static_cast<jule::Int>(_1111c0be0_i)];
				jule::Ref<_11072eb20_ParamIns> _34121_destp = _33117_dest->_field_params[static_cast<jule::Int>(_1111c0be0_i)];
				if (jule::real(_34021_srcp) != jule::real(_34121_destp)) {
					_32129_ok = false;
					return _32129_ok;
				}
				_1111c0be0_TypeCompatibilityChecker _34621_sub = _1111c0be0_TypeCompatibilityChecker((*this)._field_s,_34121_destp->_field_kind,_34021_srcp->_field_kind,(*this)._field_error_token,jule::Bool(),jule::Bool(),jule::Bool());
				if ((!(_34621_sub._method_check()))) {
					_32129_ok = false;
					return _32129_ok;
				}
			}
			_iter_next_4610981728:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1111c0be0_i; goto _iter_begin_4610981728; }
			_iter_end_4610981728:;
		}
	}
	if (jule::real(_32617_src->_field_result)) {
		_1111c0be0_TypeCompatibilityChecker _35821_sub = _1111c0be0_TypeCompatibilityChecker((*this)._field_s,_33117_dest->_field_result,_32617_src->_field_result,(*this)._field_error_token,jule::Bool(),jule::Bool(),jule::Bool());
		if ((!(_35821_sub._method_check()))) {
			_32129_ok = false;
			return _32129_ok;
		}
	}
	_32129_ok = true;
	return _32129_ok;
}



inline jule::Bool _1111c0be0_TypeCompatibilityChecker::_method_check_enum(void) {
	jule::Bool _37231_ok = jule::Bool();
	jule::Ref<_110e453c0_Enum> _37313_r = (*this)._field_src->_method_enm();
	if ((!(jule::real(_37313_r)))) {
		_37231_ok = false;
		return _37231_ok;
	}
	_37231_ok = ((*this)._field_dest->_method_enm()).alloc == (_37313_r).alloc;
	return _37231_ok;
}



inline jule::Bool _1111c0be0_TypeCompatibilityChecker::_method_check_prim(void) {
	jule::Bool _38031_ok = jule::Bool();
	jule::Ref<_1116aff70_Prim> _38113_dest = (*this)._field_dest->_method_prim();
	jule::Ref<_1116aff70_Prim> _38217_src = (*this)._field_src->_method_prim();
	if ((!(jule::real(_38217_src)))) {
		_38031_ok = _38113_dest->_method_is_any();
		return _38031_ok;
	}
	if (_38113_dest->_method_is_any()) {
		_38031_ok = (!((*this)._field_ignore_any)) || _38217_src->_method_is_any();
		return _38031_ok;
	}
	_38031_ok = _111954bc0_types_are_compatible(_38113_dest->_method_to_str(),_38217_src->_method_to_str());
	return _38031_ok;
}



inline jule::Bool _1111c0be0_TypeCompatibilityChecker::_method_check_cpp_linked(void) {
	jule::Bool _39237_ok = jule::Bool();
	_39237_ok = (*this)._field_src->_method_is_cpp_linked() && ((*this)._field_dest->_field_cpp_ident == (*this)._field_src->_field_cpp_ident);
	return _39237_ok;
}



inline jule::Bool _1111c0be0_TypeCompatibilityChecker::_method_check(void) {
	jule::Bool _39726_ok = jule::Bool();
	if ((!(jule::real((*this)._field_src)))) {
		_39726_ok = false;
		return _39726_ok;
	}
	if ((*this)._field_dest->_field_variadic != (*this)._field_src->_field_variadic) {
		_39726_ok = false;
		return _39726_ok;
	} else if ((*this)._field_dest->_field_variadic) {
		(*this)._field_ignore_any=true;
	}
	if (jule::real((*this)._field_dest->_method_ref())) {
		_39726_ok = (*this)._method_check_ref();
		return _39726_ok;
	}
	if ((!((*this)._field_sub_check)) && jule::real((*this)._field_src->_method_ref())) {
		(*this)._field_src=(*this)._field_src->_method_ref()->_field_elem;
	}
	{
		if (!((jule::real((*this)._field_dest->_method_prim())))) { goto _case_end_4611025248; }
		_case_begin_4611025248:;
		{
			_39726_ok = (*this)._method_check_prim();
			return _39726_ok;
		}
		goto _match_end_4611021488;
		_case_end_4611025248:;
		if (!(((*this)._field_dest->_method_is_cpp_linked()))) { goto _case_end_4611024816; }
		_case_begin_4611024816:;
		{
			_39726_ok = (*this)._method_check_cpp_linked();
			return _39726_ok;
		}
		goto _match_end_4611021488;
		_case_end_4611024816:;
		if (!((jule::real((*this)._field_dest->_method_trt())))) { goto _case_end_4611024928; }
		_case_begin_4611024928:;
		{
			_39726_ok = (*this)._method_check_trait();
			return _39726_ok;
		}
		goto _match_end_4611021488;
		_case_end_4611024928:;
		if (!((jule::real((*this)._field_dest->_method_ptr())))) { goto _case_end_4611025040; }
		_case_begin_4611025040:;
		{
			_39726_ok = (*this)._method_check_ptr();
			return _39726_ok;
		}
		goto _match_end_4611021488;
		_case_end_4611025040:;
		if (!((jule::real((*this)._field_dest->_method_slc())))) { goto _case_end_4611024160; }
		_case_begin_4611024160:;
		{
			_39726_ok = (*this)._method_check_slc();
			return _39726_ok;
		}
		goto _match_end_4611021488;
		_case_end_4611024160:;
		if (!((jule::real((*this)._field_dest->_method_arr())))) { goto _case_end_4611024272; }
		_case_begin_4611024272:;
		{
			_39726_ok = (*this)._method_check_arr();
			return _39726_ok;
		}
		goto _match_end_4611021488;
		_case_end_4611024272:;
		if (!((jule::real((*this)._field_dest->_method_map())))) { goto _case_end_4611024384; }
		_case_begin_4611024384:;
		{
			_39726_ok = (*this)._method_check_map();
			return _39726_ok;
		}
		goto _match_end_4611021488;
		_case_end_4611024384:;
		if (!((jule::real((*this)._field_dest->_method_enm())))) { goto _case_end_4611025504; }
		_case_begin_4611025504:;
		{
			_39726_ok = (*this)._method_check_enum();
			return _39726_ok;
		}
		goto _match_end_4611021488;
		_case_end_4611025504:;
		if (!((jule::real((*this)._field_dest->_method_strct())))) { goto _case_end_4611025616; }
		_case_begin_4611025616:;
		{
			_39726_ok = (*this)._method_check_struct();
			return _39726_ok;
		}
		goto _match_end_4611021488;
		_case_end_4611025616:;
		if (!((jule::real((*this)._field_dest->_method_fnc())))) { goto _case_end_4611025728; }
		_case_begin_4611025728:;
		{
			_39726_ok = (*this)._method_check_fn();
			return _39726_ok;
		}
		goto _match_end_4611021488;
		_case_end_4611025728:;
		if (!((_1116aff70_is_nil_compatible((*this)._field_dest)))) { goto _case_end_4611025840; }
		_case_begin_4611025840:;
		{
			_39726_ok = (*this)._field_src->_method_is_nil();
			return _39726_ok;
		}
		goto _match_end_4611021488;
		_case_end_4611025840:;
		_case_begin_4611021584:;
		{
			_39726_ok = false;
			return _39726_ok;
		}
		goto _match_end_4611021488;
		_case_end_4611021584:;
		_match_end_4611021488:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1111c0be0_TypeCompatibilityChecker &_Src) {
	_Stream << "TypeCompatibilityChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "src:" << _Src._field_src << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "ignore_any:" << _Src._field_ignore_any << ", ";
	_Stream << "deref:" << _Src._field_deref << ", ";
	_Stream << "sub_check:" << _Src._field_sub_check;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _110e92c80_Var::_method_is_initialized(void) {
	return jule::real((*this)._field_value);
}



inline jule::Bool _110e92c80_Var::_method_is_type_inferred(void) {
	return (!(jule::real((*this)._field_kind))) || (!(jule::real((*this)._field_kind->_field_decl)));
}







std::ostream &operator<<(std::ostream &_Stream, const _110e92c80_Var &_Src) {
	_Stream << "Var{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "value:" << _Src._field_value << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "depends:" << _Src._field_depends;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_110e4edc0_ImportInfo> _110e4edc0_ImportInfo::_method_find_package(jule::Str ) {
	return jule::new_ref<_110e4edc0_ImportInfo>();
}



inline jule::Ref<_110e4edc0_ImportInfo> _110e4edc0_ImportInfo::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)> ) {
	return jule::new_ref<_110e4edc0_ImportInfo>();
}



inline jule::Ref<_110e92c80_Var> _110e4edc0_ImportInfo::_method_find_var(jule::Str _14731_ident,jule::Bool _14743_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_14731_ident)))) {
		return jule::new_ref<_110e92c80_Var>();
	}
	return _110e4edc0_find_var_in_package((*this)._field_package->_field_files,_14731_ident,false);
}



inline jule::Ref<_1116aff70_TypeAlias> _110e4edc0_ImportInfo::_method_find_type_alias(jule::Str _16038_ident,jule::Bool _16050_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_16038_ident)))) {
		return jule::new_ref<_1116aff70_TypeAlias>();
	}
	return _110e4edc0_find_type_alias_in_package((*this)._field_package->_field_files,_16038_ident,false);
}



inline jule::Ref<_1109372e0_Struct> _110e4edc0_ImportInfo::_method_find_struct(jule::Str _17334_ident,jule::Bool _17346_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_17334_ident)))) {
		return jule::new_ref<_1109372e0_Struct>();
	}
	return _110e4edc0_find_struct_in_package((*this)._field_package->_field_files,_17334_ident,false);
}



inline jule::Ref<_11072eb20_Fn> _110e4edc0_ImportInfo::_method_find_fn(jule::Str _18630_ident,jule::Bool _18642_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_18630_ident)))) {
		return jule::new_ref<_11072eb20_Fn>();
	}
	return _110e4edc0_find_fn_in_package((*this)._field_package->_field_files,_18630_ident,false);
}



inline jule::Ref<_110e3f160_Trait> _110e4edc0_ImportInfo::_method_find_trait(jule::Str _19833_ident) {
	if ((!((*this)._method_is_lookupable(_19833_ident)))) {
		return jule::new_ref<_110e3f160_Trait>();
	}
	return _110e4edc0_find_trait_in_package((*this)._field_package->_field_files,_19833_ident);
}



inline jule::Ref<_110e453c0_Enum> _110e4edc0_ImportInfo::_method_find_enum(jule::Str _21032_ident) {
	if ((!((*this)._method_is_lookupable(_21032_ident)))) {
		return jule::new_ref<_110e453c0_Enum>();
	}
	return _110e4edc0_find_enum_in_package((*this)._field_package->_field_files,_21032_ident);
}



inline jule::Bool _110e4edc0_ImportInfo::_method_is_lookupable(jule::Str _22028_ident) {
	if ((*this)._field_cpp_linked) {
		return false;
	}
	if ((!((*this)._field_import_all))) {
		if ((*this)._method_exist_ident(jule::Str("self", 4))) {
			return true;
		}
		if ((*this)._field_selected.len() > 0LL) {
			if ((!((*this)._method_exist_ident(_22028_ident)))) {
				return false;
			}
		}
	}
	return true;
}



inline jule::Bool _110e4edc0_ImportInfo::_method_exist_ident(jule::Str _24026_ident) {
	{
		auto __julec_range_expr = (*this)._field_selected;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_1106ec050_Token _110e4edc0_sident = *__julec_range_begin;
			_iter_begin_4609642704:;
			{
				if (_110e4edc0_sident._field_kind == _24026_ident) {
					return true;
				}
			}
			_iter_next_4609642704:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e4edc0_sident = *__julec_range_begin; goto _iter_begin_4609642704; }
			_iter_end_4609642704:;
		}
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4edc0_ImportInfo &_Src) {
	_Stream << "ImportInfo{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "duplicate:" << _Src._field_duplicate << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std << ", ";
	_Stream << "import_all:" << _Src._field_import_all << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "package:" << _Src._field_package;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_ScopeLabel &_Src) {
	_Stream << "ScopeLabel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _110e4c050_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base._field_id != 0LLU;
}



inline jule::Bool _110e4c050_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base._field_id == 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _110e4c050_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _110e453c0_Enum::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _110e453c0_Enum::_method_equals(jule::Ref<_1116aff70_TypeKind> _3521_other) {
	jule::Ref<_110e453c0_Enum> _3613_enm = (_3521_other).alloc->_method_enm();
	if ((!(jule::real(_3613_enm)))) {
		return false;
	}
	return (&((*this))) == (_3613_enm).alloc;
}



inline jule::Ref<_110e453c0_EnumItem> _110e453c0_Enum::_method_find_item(jule::Str _4732_ident) {
	{
		auto __julec_range_expr = (*this)._field_items;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e453c0_EnumItem> _110e453c0_item = *__julec_range_begin;
			_iter_begin_4608590432:;
			{
				if (_110e453c0_item->_field_ident == _4732_ident) {
					return _110e453c0_item;
				}
			}
			_iter_next_4608590432:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e453c0_item = *__julec_range_begin; goto _iter_begin_4608590432; }
			_iter_end_4608590432:;
		}
	}
	return jule::new_ref<_110e453c0_EnumItem>();
}







std::ostream &operator<<(std::ostream &_Stream, const _110e453c0_Enum &_Src) {
	_Stream << "Enum{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc:" << _Src._field_doc;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _110e453c0_EnumItem::_method_auto_expr(void) {
	return (!(jule::real((*this)._field_value)));
}







std::ostream &operator<<(std::ostream &_Stream, const _110e453c0_EnumItem &_Src) {
	_Stream << "EnumItem{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _110e3f160_Trait::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _110e3f160_Trait::_method_equals(jule::Ref<_1116aff70_TypeKind> _2421_other) {
	jule::Ref<_110e3f160_Trait> _2513_trt = (_2421_other).alloc->_method_trt();
	if ((!(jule::real(_2513_trt)))) {
		return false;
	}
	return (&((*this))) == (_2513_trt).alloc;
}



inline jule::Bool _110e3f160_Trait::_method_is_builtin(void) {
	return (*this)._field_token._field_id == 0LLU;
}



inline jule::Ref<_11072eb20_Fn> _110e3f160_Trait::_method_find_method(jule::Str _3934_ident) {
	{
		auto __julec_range_expr = (*this)._field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_Fn> _110e3f160_f = *__julec_range_begin;
			_iter_begin_4608576384:;
			{
				if (_110e3f160_f->_field_ident == _3934_ident) {
					return _110e3f160_f;
				}
			}
			_iter_next_4608576384:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e3f160_f = *__julec_range_begin; goto _iter_begin_4608576384; }
			_iter_end_4608576384:;
		}
	}
	return jule::new_ref<_11072eb20_Fn>();
}







std::ostream &operator<<(std::ostream &_Stream, const _110e3f160_Trait &_Src) {
	_Stream << "Trait{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "implemented:" << _Src._field_implemented;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110d9ce90_Pass &_Src) {
	_Stream << "Pass{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11072eb20_Fn::_method_is_void(void) {
	return (!(jule::real((*this)._field_result)));
}



inline jule::Bool _11072eb20_Fn::_method_is_method(void) {
	return jule::real((*this)._field_owner);
}



inline jule::Bool _11072eb20_Fn::_method_is_entry_point(void) {
	return (*this)._field_ident == jule::Str("main", 4);
}



inline jule::Bool _11072eb20_Fn::_method_is_init(void) {
	return (*this)._field_ident == jule::Str("init", 4);
}



inline jule::Bool _11072eb20_Fn::_method_is_anon(void) {
	return _1106ec050_is_anon_ident((*this)._field_ident);
}



inline jule::Bool _11072eb20_Fn::_method_any_var(void) {
	return jule::real((*this)._field_result) && ((*this)._field_result->_field_idents.len() > 0LL);
}



inline jule::Bool _11072eb20_Fn::_method_parameters_uses_generics(void) {
	if ((*this)._field_generics.len() == 0LL) {
		return false;
	}
	{
		auto __julec_range_expr = (*this)._field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_Param> _11072eb20_p = *__julec_range_begin;
			_iter_begin_4608097648:;
			{
				if (_11072eb20_p->_method_is_self()) {
					goto _iter_next_4608097648;
				}
				jule::Str _9317_pk = _11072eb20_p->_field_kind->_field_kind->_method_to_str();
				{
					auto __julec_range_expr = (*this)._field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_11054f670_GenericDecl> _11072eb20_g = *__julec_range_begin;
						_iter_begin_4608102704:;
						{
							if (_9317_pk.find(_11072eb20_g->_field_ident) != -1LL) {
								return true;
							}
						}
						_iter_next_4608102704:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _11072eb20_g = *__julec_range_begin; goto _iter_begin_4608102704; }
						_iter_end_4608102704:;
					}
				}
			}
			_iter_next_4608097648:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11072eb20_p = *__julec_range_begin; goto _iter_begin_4608097648; }
			_iter_end_4608097648:;
		}
	}
	return false;
}



inline jule::Bool _11072eb20_Fn::_method_result_uses_generics(void) {
	if ((*this)._method_is_void()) {
		return false;
	} else if ((!(jule::real((*this)._field_result->_field_kind))) || (!(jule::real((*this)._field_result->_field_kind->_field_kind)))) {
		return false;
	}
	jule::Str _11213_rk = (*this)._field_result->_field_kind->_field_kind->_method_to_str();
	{
		auto __julec_range_expr = (*this)._field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11054f670_GenericDecl> _11072eb20_g = *__julec_range_begin;
			_iter_begin_4608113312:;
			{
				if (_11213_rk.find(_11072eb20_g->_field_ident) != -1LL) {
					return true;
				}
			}
			_iter_next_4608113312:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11072eb20_g = *__julec_range_begin; goto _iter_begin_4608113312; }
			_iter_end_4608113312:;
		}
	}
	return false;
}



inline jule::Ref<_11072eb20_FnIns> _11072eb20_Fn::_method_instance_force(void) {
	jule::Ref<_11072eb20_FnIns> _12417_ins = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),this->self,jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>(),jule::Ref<_1116aff70_TypeKind>(),jule::new_struct<_110af2660_Scope>(new( std::nothrow ) _110af2660_Scope()),_110d9ce90_new_reference_stack(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Fn<jule::Ref<_1112d7f10_Data>(jule::Ref<_1112d7f10_Eval>,jule::Ref<_11054f670_FnCallExpr>,jule::Ref<_1112d7f10_Data>)>(),jule::Bool(),jule::Bool()));
	if (this->self->_method_is_init()) {
		_12417_ins->_field_refers=_110d9ce90_new_reference_stack();
	}
	_12417_ins->_field_params=jule::Slice<jule::Ref<_11072eb20_ParamIns>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(this->self->_field_params.len())));
	{
		auto __julec_range_expr = this->self->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11072eb20_i = 0;
			jule::Ref<_11072eb20_Param> _11072eb20_p = *__julec_range_begin;
			_iter_begin_4608121088:;
			{
				_12417_ins->_field_params[static_cast<jule::Int>(_11072eb20_i)]=_11072eb20_p->_method_instance();
			}
			_iter_next_4608121088:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11072eb20_i; _11072eb20_p = *__julec_range_begin; goto _iter_begin_4608121088; }
			_iter_end_4608121088:;
		}
	}
	if (jule::real(_12417_ins->_field_decl->_field_result)) {
		_12417_ins->_field_result=_12417_ins->_field_decl->_field_result->_field_kind->_field_kind;
	}
	return _12417_ins;
}



inline jule::Ref<_11072eb20_FnIns> _11072eb20_Fn::_method_instance(void) {
	if ((this->self->_field_generics.len() == 0LL) && (this->self->_field_instances.len() == 1LL)) {
		return this->self->_field_instances[0LL];
	}
	return this->self->_method_instance_force();
}



inline std::tuple<jule::Bool,jule::Int> _11072eb20_Fn::_method_append_instance(jule::Ref<_11072eb20_FnIns> _15538_ins) {
	if ((*this)._field_generics.len() == 0LL) {
		if ((*this)._field_instances.len() == 1LL) {
			return std::make_tuple(false,0LL);
		}
		(*this)._field_instances=jule::append((*this)._field_instances,jule::Slice<jule::Ref<_11072eb20_FnIns>>({_15538_ins}));
		return std::make_tuple(true,-1LL);
	}
	if ((*this)._field_instances.len() == 0LL) {
		(*this)._field_instances=jule::append((*this)._field_instances,jule::Slice<jule::Ref<_11072eb20_FnIns>>({_15538_ins}));
		return std::make_tuple(true,-1LL);
	}
	{
		auto __julec_range_expr = (*this)._field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11072eb20_j = 0;
			jule::Ref<_11072eb20_FnIns> _11072eb20_ains = *__julec_range_begin;
			_iter_begin_4608141584:;
			{
				{
					auto __julec_range_expr = _11072eb20_ains->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _11072eb20_i = 0;
						jule::Ref<_1116aff70_TypeKind> _11072eb20_ag = *__julec_range_begin;
						_iter_begin_4608145872:;
						{
							if (_11072eb20_ag->_method_equals(_15538_ins->_field_generics[static_cast<jule::Int>(_11072eb20_i)])) {
								return std::make_tuple(false,_11072eb20_j);
							}
						}
						_iter_next_4608145872:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_11072eb20_i; _11072eb20_ag = *__julec_range_begin; goto _iter_begin_4608145872; }
						_iter_end_4608145872:;
					}
				}
			}
			_iter_next_4608141584:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11072eb20_j; _11072eb20_ains = *__julec_range_begin; goto _iter_begin_4608141584; }
			_iter_end_4608141584:;
		}
	}
	(*this)._field_instances=jule::append((*this)._field_instances,jule::Slice<jule::Ref<_11072eb20_FnIns>>({_15538_ins}));
	return std::make_tuple(true,-1LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _11072eb20_Fn &_Src) {
	_Stream << "Fn{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_11072eb20_ParamIns> _11072eb20_Param::_method_instance(void) {
	return jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(this->self,jule::Ref<_1116aff70_TypeKind>()));
}



inline jule::Bool _11072eb20_Param::_method_is_self(void) {
	return ((*this)._field_ident == jule::Str("&self", 5)) || ((*this)._field_ident == jule::Str("self", 4));
}



inline jule::Bool _11072eb20_Param::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str("", 0)) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _11072eb20_Param &_Src) {
	_Stream << "Param{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_1109372e0_FieldIns> _1109372e0_Field::_method_instance(void) {
	return jule::new_struct<_1109372e0_FieldIns>(new( std::nothrow ) _1109372e0_FieldIns(this->self,this->self->_field_kind->_field_kind));
}







std::ostream &operator<<(std::ostream &_Stream, const _1109372e0_Field &_Src) {
	_Stream << "Field{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110711f30_AssignInfo &_Src) {
	_Stream << "AssignInfo{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "ok:" << _Src._field_ok;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base._field_id != 0LLU;
}



inline jule::Bool _11054f670_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base._field_id == 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_TraitDecl &_Src) {
	_Stream << "TraitDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_StructDecl &_Src) {
	_Stream << "StructDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_FieldDecl &_Src) {
	_Stream << "FieldDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_EnumDecl::_method_default_typed(void) {
	return (!(jule::real((*this)._field_kind)));
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_EnumDecl &_Src) {
	_Stream << "EnumDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_EnumItemDecl::_method_auto_expr(void) {
	return (!(jule::real((*this)._field_expr)));
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_EnumItemDecl &_Src) {
	_Stream << "EnumItemDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_UseDecl &_Src) {
	_Stream << "UseDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "full:" << _Src._field_full << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_Case &_Src) {
	_Stream << "Case{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_TypeAliasDecl &_Src) {
	_Stream << "TypeAliasDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_Else &_Src) {
	_Stream << "Else{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_If &_Src) {
	_Stream << "If{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_VarDecl &_Src) {
	_Stream << "VarDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_FnDecl::_method_is_anon(void) {
	return (*this)._field_ident == jule::Str("<anonymous>", 11);
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_FnDecl &_Src) {
	_Stream << "FnDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_ParamDecl::_method_is_self(void) {
	return (*this)._field_ident.has_suffix(jule::Str("self", 4));
}



inline jule::Bool _11054f670_ParamDecl::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str("", 0)) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_ParamDecl &_Src) {
	_Stream << "ParamDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_AssignLeft &_Src) {
	_Stream << "AssignLeft{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_GenericDecl &_Src) {
	_Stream << "GenericDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_FnCallExpr &_Src) {
	_Stream << "FnCallExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "concurrent:" << _Src._field_concurrent;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_Expr::_method_is_fn_call(void) {
	if ((*this)._field_kind == nullptr) {
		return false;
	}
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_FnCallExpr>>())) { goto _case_end_4600490560; }
		_case_begin_4600490560:;
		{
			return true;
		}
		goto _match_end_4600488720;
		_case_end_4600490560:;
		_case_begin_4600490080:;
		{
			return false;
		}
		goto _match_end_4600488720;
		_case_end_4600490080:;
		_match_end_4600488720:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_Expr &_Src) {
	_Stream << "Expr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_IdentTypeDecl::_method_is_prim(void) {
	return (*this)._field_token._field_id == 1LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_IdentTypeDecl &_Src) {
	_Stream << "IdentTypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_TypeDecl &_Src) {
	_Stream << "TypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_Directive &_Src) {
	_Stream << "Directive{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "tag:" << _Src._field_tag << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_Comment::_method_is_directive(void) {
	return (*this)._field_text.has_prefix(jule::Str("jule:", 5));
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_Comment &_Src) {
	_Stream << "Comment{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054f670_Node::_method_is_decl(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_EnumDecl>>() || _match_expr.type_is<jule::Ref<_11054f670_FnDecl>>() || _match_expr.type_is<jule::Ref<_11054f670_StructDecl>>() || _match_expr.type_is<jule::Ref<_11054f670_TraitDecl>>() || _match_expr.type_is<jule::Ref<_11054f670_TypeAliasDecl>>() || _match_expr.type_is<jule::Ref<_11054f670_FieldDecl>>() || _match_expr.type_is<jule::Ref<_11054f670_UseDecl>>() || _match_expr.type_is<jule::Ref<_11054f670_VarDecl>>() || _match_expr.type_is<jule::Ref<_11054f670_TypeDecl>>())) { goto _case_end_4600447584; }
		_case_begin_4600447584:;
		{
			return true;
		}
		goto _match_end_4600446624;
		_case_end_4600447584:;
		_case_begin_4600447232:;
		{
			return false;
		}
		goto _match_end_4600446624;
		_case_end_4600447232:;
		_match_end_4600446624:;
	}
}



inline jule::Bool _11054f670_Node::_method_is_comment(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_Comment>>() || _match_expr.type_is<jule::Ref<_11054f670_CommentGroup>>())) { goto _case_end_4600464576; }
		_case_begin_4600464576:;
		{
			return true;
		}
		goto _match_end_4600462544;
		_case_end_4600464576:;
		_case_begin_4600464224:;
		{
			return false;
		}
		goto _match_end_4600462544;
		_case_end_4600464224:;
		_match_end_4600462544:;
	}
}



inline jule::Bool _11054f670_Node::_method_is_impl(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_Impl>>())) { goto _case_end_4600468320; }
		_case_begin_4600468320:;
		{
			return true;
		}
		goto _match_end_4600466864;
		_case_end_4600468320:;
		_case_begin_4600467968:;
		{
			return false;
		}
		goto _match_end_4600466864;
		_case_end_4600467968:;
		_match_end_4600466864:;
	}
}



inline jule::Bool _11054f670_Node::_method_is_use_decl(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_UseDecl>>())) { goto _case_end_4600471744; }
		_case_begin_4600471744:;
		{
			return true;
		}
		goto _match_end_4600470224;
		_case_end_4600471744:;
		_case_begin_4600471392:;
		{
			return false;
		}
		goto _match_end_4600470224;
		_case_end_4600471392:;
		_match_end_4600470224:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _11054f670_Node &_Src) {
	_Stream << "Node{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline _1108ddf20_Vector_0 _1108ddf20_Vector_0::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_0 _4417_vec = _1108ddf20_Vector_0();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_0::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_0::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<_1106ec050_Token>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<_1106ec050_Token>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<_1106ec050_Token>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_0::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_0::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_0::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_0::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_0::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline _1106ec050_Token _1108ddf20_Vector_0::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<_1106ec050_Token>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_0::_method_set(jule::Int _12326_i,_1106ec050_Token _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<_1106ec050_Token>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_0::_method_push(_1106ec050_Token _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<_1106ec050_Token>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_0::_method_push_front(_1106ec050_Token _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4598725600:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4598725600; }
	{
		{
			__jule_std_vector_heap_move<_1106ec050_Token>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4598725600:;
	(_15217_i)--;
	goto _iter_begin_4598725600;
	_iter_end_4598725600:;
	{
		__jule_std_vector_heap_assign<_1106ec050_Token>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_0::_method_append(jule::Slice<_1106ec050_Token> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<_1106ec050_Token>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_1106ec050_Token) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<_1106ec050_Token>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_0::_method_merge(_1108ddf20_Vector_0 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<_1106ec050_Token>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_1106ec050_Token) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_0::_method_merge_front(_1108ddf20_Vector_0 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4598760624:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4598760624; }
	{
		{
			__jule_std_vector_heap_move<_1106ec050_Token>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4598760624:;
	(_20517_i)--;
	goto _iter_begin_4598760624;
	_iter_end_4598760624:;
	{
		__jule_std_vector_copy_range<_1106ec050_Token>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_0::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4598777664:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4598777664; }
	{
		{
			__jule_std_vector_heap_move<_1106ec050_Token>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4598777664:;
	(_23917_i)++;
	goto _iter_begin_4598777664;
	_iter_end_4598777664:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_0::_method_insert(jule::Int _24829_i,_1106ec050_Token _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4598788048:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4598788048; }
	{
		{
			__jule_std_vector_heap_move<_1106ec050_Token>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4598788048:;
	(_26117_j)--;
	goto _iter_begin_4598788048;
	_iter_end_4598788048:;
	{
		__jule_std_vector_heap_assign<_1106ec050_Token>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_0 _1108ddf20_Vector_0::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_0::_static_method_new(0LL);
	}
	_1108ddf20_Vector_0 _29317_vec = _1108ddf20_Vector_0::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<_1106ec050_Token>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_1106ec050_Token) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_0 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_1 _1108ddf20_Vector_1::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_1 _4417_vec = _1108ddf20_Vector_1();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_1::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_1::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_11054f670_Directive>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_11054f670_Directive>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_11054f670_Directive>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_1::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_1::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_1::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_1::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_1::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_11054f670_Directive> _1108ddf20_Vector_1::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_11054f670_Directive>>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_1::_method_set(jule::Int _12326_i,jule::Ref<_11054f670_Directive> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_Directive>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_1::_method_push(jule::Ref<_11054f670_Directive> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_Directive>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_1::_method_push_front(jule::Ref<_11054f670_Directive> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4599531696:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4599531696; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_Directive>>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4599531696:;
	(_15217_i)--;
	goto _iter_begin_4599531696;
	_iter_end_4599531696:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_Directive>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_1::_method_append(jule::Slice<jule::Ref<_11054f670_Directive>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_Directive>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11054f670_Directive>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_11054f670_Directive>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_1::_method_merge(_1108ddf20_Vector_1 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_Directive>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11054f670_Directive>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_1::_method_merge_front(_1108ddf20_Vector_1 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4599566816:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4599566816; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_Directive>>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4599566816:;
	(_20517_i)--;
	goto _iter_begin_4599566816;
	_iter_end_4599566816:;
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_Directive>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_1::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4599583856:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4599583856; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_Directive>>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4599583856:;
	(_23917_i)++;
	goto _iter_begin_4599583856;
	_iter_end_4599583856:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_1::_method_insert(jule::Int _24829_i,jule::Ref<_11054f670_Directive> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4599594240:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4599594240; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_Directive>>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4599594240:;
	(_26117_j)--;
	goto _iter_begin_4599594240;
	_iter_end_4599594240:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_Directive>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_1 _1108ddf20_Vector_1::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_1::_static_method_new(0LL);
	}
	_1108ddf20_Vector_1 _29317_vec = _1108ddf20_Vector_1::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_Directive>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11054f670_Directive>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_1 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_2 _1108ddf20_Vector_2::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_2 _4417_vec = _1108ddf20_Vector_2();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_2::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_2::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_11054f670_UseDecl>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_11054f670_UseDecl>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_11054f670_UseDecl>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_2::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_2::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_2::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_2::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_2::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_11054f670_UseDecl> _1108ddf20_Vector_2::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_11054f670_UseDecl>>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_2::_method_set(jule::Int _12326_i,jule::Ref<_11054f670_UseDecl> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_UseDecl>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_2::_method_push(jule::Ref<_11054f670_UseDecl> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_UseDecl>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_2::_method_push_front(jule::Ref<_11054f670_UseDecl> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4599711520:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4599711520; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_UseDecl>>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4599711520:;
	(_15217_i)--;
	goto _iter_begin_4599711520;
	_iter_end_4599711520:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_UseDecl>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_2::_method_append(jule::Slice<jule::Ref<_11054f670_UseDecl>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_UseDecl>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11054f670_UseDecl>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_11054f670_UseDecl>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_2::_method_merge(_1108ddf20_Vector_2 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_UseDecl>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11054f670_UseDecl>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_2::_method_merge_front(_1108ddf20_Vector_2 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4599746768:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4599746768; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_UseDecl>>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4599746768:;
	(_20517_i)--;
	goto _iter_begin_4599746768;
	_iter_end_4599746768:;
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_UseDecl>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_2::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4599763808:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4599763808; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_UseDecl>>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4599763808:;
	(_23917_i)++;
	goto _iter_begin_4599763808;
	_iter_end_4599763808:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_2::_method_insert(jule::Int _24829_i,jule::Ref<_11054f670_UseDecl> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4599774192:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4599774192; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_UseDecl>>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4599774192:;
	(_26117_j)--;
	goto _iter_begin_4599774192;
	_iter_end_4599774192:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_UseDecl>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_2 _1108ddf20_Vector_2::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_2::_static_method_new(0LL);
	}
	_1108ddf20_Vector_2 _29317_vec = _1108ddf20_Vector_2::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_UseDecl>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11054f670_UseDecl>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_2 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_3 _1108ddf20_Vector_3::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_3 _4417_vec = _1108ddf20_Vector_3();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_3::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_3::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_11054f670_Impl>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_11054f670_Impl>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_11054f670_Impl>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_3::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_3::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_3::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_3::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_3::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_11054f670_Impl> _1108ddf20_Vector_3::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_11054f670_Impl>>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_3::_method_set(jule::Int _12326_i,jule::Ref<_11054f670_Impl> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_Impl>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_3::_method_push(jule::Ref<_11054f670_Impl> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_Impl>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_3::_method_push_front(jule::Ref<_11054f670_Impl> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4599907184:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4599907184; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_Impl>>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4599907184:;
	(_15217_i)--;
	goto _iter_begin_4599907184;
	_iter_end_4599907184:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_Impl>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_3::_method_append(jule::Slice<jule::Ref<_11054f670_Impl>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_Impl>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11054f670_Impl>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_11054f670_Impl>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_3::_method_merge(_1108ddf20_Vector_3 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_Impl>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11054f670_Impl>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_3::_method_merge_front(_1108ddf20_Vector_3 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4599942304:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4599942304; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_Impl>>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4599942304:;
	(_20517_i)--;
	goto _iter_begin_4599942304;
	_iter_end_4599942304:;
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_Impl>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_3::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4599959344:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4599959344; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_Impl>>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4599959344:;
	(_23917_i)++;
	goto _iter_begin_4599959344;
	_iter_end_4599959344:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_3::_method_insert(jule::Int _24829_i,jule::Ref<_11054f670_Impl> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4599969728:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4599969728; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_Impl>>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4599969728:;
	(_26117_j)--;
	goto _iter_begin_4599969728;
	_iter_end_4599969728:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_Impl>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_3 _1108ddf20_Vector_3::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_3::_static_method_new(0LL);
	}
	_1108ddf20_Vector_3 _29317_vec = _1108ddf20_Vector_3::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_Impl>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11054f670_Impl>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_3 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_4 _1108ddf20_Vector_4::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_4 _4417_vec = _1108ddf20_Vector_4();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_4::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_4::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_11054f670_Comment>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_11054f670_Comment>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_11054f670_Comment>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_4::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_4::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_4::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_4::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_4::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_11054f670_Comment> _1108ddf20_Vector_4::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_11054f670_Comment>>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_4::_method_set(jule::Int _12326_i,jule::Ref<_11054f670_Comment> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_Comment>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_4::_method_push(jule::Ref<_11054f670_Comment> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_Comment>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_4::_method_push_front(jule::Ref<_11054f670_Comment> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4600084128:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4600084128; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_Comment>>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4600084128:;
	(_15217_i)--;
	goto _iter_begin_4600084128;
	_iter_end_4600084128:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_Comment>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_4::_method_append(jule::Slice<jule::Ref<_11054f670_Comment>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_Comment>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11054f670_Comment>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_11054f670_Comment>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_4::_method_merge(_1108ddf20_Vector_4 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_Comment>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11054f670_Comment>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_4::_method_merge_front(_1108ddf20_Vector_4 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4600135760:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4600135760; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_Comment>>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4600135760:;
	(_20517_i)--;
	goto _iter_begin_4600135760;
	_iter_end_4600135760:;
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_Comment>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_4::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4600152800:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4600152800; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_Comment>>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4600152800:;
	(_23917_i)++;
	goto _iter_begin_4600152800;
	_iter_end_4600152800:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_4::_method_insert(jule::Int _24829_i,jule::Ref<_11054f670_Comment> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4600163184:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4600163184; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11054f670_Comment>>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4600163184:;
	(_26117_j)--;
	goto _iter_begin_4600163184;
	_iter_end_4600163184:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11054f670_Comment>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_4 _1108ddf20_Vector_4::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_4::_static_method_new(0LL);
	}
	_1108ddf20_Vector_4 _29317_vec = _1108ddf20_Vector_4::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Ref<_11054f670_Comment>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11054f670_Comment>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_4 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_5 _1108ddf20_Vector_5::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_5 _4417_vec = _1108ddf20_Vector_5();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_5::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_5::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<_11054f670_Node>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<_11054f670_Node>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<_11054f670_Node>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_5::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_5::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_5::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_5::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_5::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline _11054f670_Node _1108ddf20_Vector_5::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<_11054f670_Node>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_5::_method_set(jule::Int _12326_i,_11054f670_Node _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<_11054f670_Node>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_5::_method_push(_11054f670_Node _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<_11054f670_Node>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_5::_method_push_front(_11054f670_Node _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4600279840:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4600279840; }
	{
		{
			__jule_std_vector_heap_move<_11054f670_Node>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4600279840:;
	(_15217_i)--;
	goto _iter_begin_4600279840;
	_iter_end_4600279840:;
	{
		__jule_std_vector_heap_assign<_11054f670_Node>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_5::_method_append(jule::Slice<_11054f670_Node> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<_11054f670_Node>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_11054f670_Node) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<_11054f670_Node>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_5::_method_merge(_1108ddf20_Vector_5 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<_11054f670_Node>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_11054f670_Node) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_5::_method_merge_front(_1108ddf20_Vector_5 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4600314736:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4600314736; }
	{
		{
			__jule_std_vector_heap_move<_11054f670_Node>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4600314736:;
	(_20517_i)--;
	goto _iter_begin_4600314736;
	_iter_end_4600314736:;
	{
		__jule_std_vector_copy_range<_11054f670_Node>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_5::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4600331776:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4600331776; }
	{
		{
			__jule_std_vector_heap_move<_11054f670_Node>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4600331776:;
	(_23917_i)++;
	goto _iter_begin_4600331776;
	_iter_end_4600331776:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_5::_method_insert(jule::Int _24829_i,_11054f670_Node _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4600342160:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4600342160; }
	{
		{
			__jule_std_vector_heap_move<_11054f670_Node>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4600342160:;
	(_26117_j)--;
	goto _iter_begin_4600342160;
	_iter_end_4600342160:;
	{
		__jule_std_vector_heap_assign<_11054f670_Node>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_5 _1108ddf20_Vector_5::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_5::_static_method_new(0LL);
	}
	_1108ddf20_Vector_5 _29317_vec = _1108ddf20_Vector_5::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<_11054f670_Node>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_11054f670_Node) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_5 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_6 _1108ddf20_Vector_6::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_6 _4417_vec = _1108ddf20_Vector_6();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_6::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_6::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<_110d9ce90_Pass>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<_110d9ce90_Pass>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<_110d9ce90_Pass>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_6::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_6::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_6::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_6::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_6::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline _110d9ce90_Pass _1108ddf20_Vector_6::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<_110d9ce90_Pass>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_6::_method_set(jule::Int _12326_i,_110d9ce90_Pass _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<_110d9ce90_Pass>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_6::_method_push(_110d9ce90_Pass _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<_110d9ce90_Pass>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_6::_method_push_front(_110d9ce90_Pass _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4604414368:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4604414368; }
	{
		{
			__jule_std_vector_heap_move<_110d9ce90_Pass>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4604414368:;
	(_15217_i)--;
	goto _iter_begin_4604414368;
	_iter_end_4604414368:;
	{
		__jule_std_vector_heap_assign<_110d9ce90_Pass>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_6::_method_append(jule::Slice<_110d9ce90_Pass> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<_110d9ce90_Pass>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_110d9ce90_Pass) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<_110d9ce90_Pass>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_6::_method_merge(_1108ddf20_Vector_6 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<_110d9ce90_Pass>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_110d9ce90_Pass) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_6::_method_merge_front(_1108ddf20_Vector_6 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4604449520:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4604449520; }
	{
		{
			__jule_std_vector_heap_move<_110d9ce90_Pass>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4604449520:;
	(_20517_i)--;
	goto _iter_begin_4604449520;
	_iter_end_4604449520:;
	{
		__jule_std_vector_copy_range<_110d9ce90_Pass>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_6::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4604466560:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4604466560; }
	{
		{
			__jule_std_vector_heap_move<_110d9ce90_Pass>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4604466560:;
	(_23917_i)++;
	goto _iter_begin_4604466560;
	_iter_end_4604466560:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_6::_method_insert(jule::Int _24829_i,_110d9ce90_Pass _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4604476944:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4604476944; }
	{
		{
			__jule_std_vector_heap_move<_110d9ce90_Pass>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4604476944:;
	(_26117_j)--;
	goto _iter_begin_4604476944;
	_iter_end_4604476944:;
	{
		__jule_std_vector_heap_assign<_110d9ce90_Pass>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_6 _1108ddf20_Vector_6::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_6::_static_method_new(0LL);
	}
	_1108ddf20_Vector_6 _29317_vec = _1108ddf20_Vector_6::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<_110d9ce90_Pass>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_110d9ce90_Pass) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_6 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_7 _1108ddf20_Vector_7::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_7 _4417_vec = _1108ddf20_Vector_7();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_7::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_7::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_110e4edc0_ImportInfo>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_110e4edc0_ImportInfo>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_110e4edc0_ImportInfo>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_7::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_7::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_7::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_7::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_7::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_110e4edc0_ImportInfo> _1108ddf20_Vector_7::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_110e4edc0_ImportInfo>>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_7::_method_set(jule::Int _12326_i,jule::Ref<_110e4edc0_ImportInfo> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e4edc0_ImportInfo>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_7::_method_push(jule::Ref<_110e4edc0_ImportInfo> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e4edc0_ImportInfo>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_7::_method_push_front(jule::Ref<_110e4edc0_ImportInfo> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4604603488:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4604603488; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e4edc0_ImportInfo>>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4604603488:;
	(_15217_i)--;
	goto _iter_begin_4604603488;
	_iter_end_4604603488:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e4edc0_ImportInfo>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_7::_method_append(jule::Slice<jule::Ref<_110e4edc0_ImportInfo>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_110e4edc0_ImportInfo>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e4edc0_ImportInfo>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_110e4edc0_ImportInfo>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_7::_method_merge(_1108ddf20_Vector_7 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_110e4edc0_ImportInfo>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e4edc0_ImportInfo>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_7::_method_merge_front(_1108ddf20_Vector_7 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4604638608:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4604638608; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e4edc0_ImportInfo>>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4604638608:;
	(_20517_i)--;
	goto _iter_begin_4604638608;
	_iter_end_4604638608:;
	{
		__jule_std_vector_copy_range<jule::Ref<_110e4edc0_ImportInfo>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_7::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4604655648:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4604655648; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e4edc0_ImportInfo>>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4604655648:;
	(_23917_i)++;
	goto _iter_begin_4604655648;
	_iter_end_4604655648:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_7::_method_insert(jule::Int _24829_i,jule::Ref<_110e4edc0_ImportInfo> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4604666032:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4604666032; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e4edc0_ImportInfo>>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4604666032:;
	(_26117_j)--;
	goto _iter_begin_4604666032;
	_iter_end_4604666032:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e4edc0_ImportInfo>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_7 _1108ddf20_Vector_7::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_7::_static_method_new(0LL);
	}
	_1108ddf20_Vector_7 _29317_vec = _1108ddf20_Vector_7::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Ref<_110e4edc0_ImportInfo>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e4edc0_ImportInfo>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_7 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_8 _1108ddf20_Vector_8::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_8 _4417_vec = _1108ddf20_Vector_8();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_8::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_8::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Any>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Any>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Any>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_8::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_8::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_8::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_8::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_8::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Any _1108ddf20_Vector_8::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Any>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_8::_method_set(jule::Int _12326_i,jule::Any _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Any>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_8::_method_push(jule::Any _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Any>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_8::_method_push_front(jule::Any _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4604792400:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4604792400; }
	{
		{
			__jule_std_vector_heap_move<jule::Any>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4604792400:;
	(_15217_i)--;
	goto _iter_begin_4604792400;
	_iter_end_4604792400:;
	{
		__jule_std_vector_heap_assign<jule::Any>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_8::_method_append(jule::Slice<jule::Any> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Any>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Any) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Any>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_8::_method_merge(_1108ddf20_Vector_8 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Any>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Any) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_8::_method_merge_front(_1108ddf20_Vector_8 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4604827520:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4604827520; }
	{
		{
			__jule_std_vector_heap_move<jule::Any>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4604827520:;
	(_20517_i)--;
	goto _iter_begin_4604827520;
	_iter_end_4604827520:;
	{
		__jule_std_vector_copy_range<jule::Any>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_8::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4604844560:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4604844560; }
	{
		{
			__jule_std_vector_heap_move<jule::Any>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4604844560:;
	(_23917_i)++;
	goto _iter_begin_4604844560;
	_iter_end_4604844560:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_8::_method_insert(jule::Int _24829_i,jule::Any _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4604854944:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4604854944; }
	{
		{
			__jule_std_vector_heap_move<jule::Any>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4604854944:;
	(_26117_j)--;
	goto _iter_begin_4604854944;
	_iter_end_4604854944:;
	{
		__jule_std_vector_heap_assign<jule::Any>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_8 _1108ddf20_Vector_8::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_8::_static_method_new(0LL);
	}
	_1108ddf20_Vector_8 _29317_vec = _1108ddf20_Vector_8::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Any>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Any) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_8 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_9 _1108ddf20_Vector_9::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_9 _4417_vec = _1108ddf20_Vector_9();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_9::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_9::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_110e92c80_Var>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_110e92c80_Var>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_110e92c80_Var>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_9::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_9::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_9::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_9::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_9::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_110e92c80_Var> _1108ddf20_Vector_9::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_110e92c80_Var>>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_9::_method_set(jule::Int _12326_i,jule::Ref<_110e92c80_Var> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e92c80_Var>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_9::_method_push(jule::Ref<_110e92c80_Var> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e92c80_Var>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_9::_method_push_front(jule::Ref<_110e92c80_Var> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4604984624:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4604984624; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e92c80_Var>>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4604984624:;
	(_15217_i)--;
	goto _iter_begin_4604984624;
	_iter_end_4604984624:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e92c80_Var>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_9::_method_append(jule::Slice<jule::Ref<_110e92c80_Var>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_110e92c80_Var>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e92c80_Var>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_110e92c80_Var>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_9::_method_merge(_1108ddf20_Vector_9 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_110e92c80_Var>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e92c80_Var>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_9::_method_merge_front(_1108ddf20_Vector_9 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605019744:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4605019744; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e92c80_Var>>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4605019744:;
	(_20517_i)--;
	goto _iter_begin_4605019744;
	_iter_end_4605019744:;
	{
		__jule_std_vector_copy_range<jule::Ref<_110e92c80_Var>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_9::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4605036784:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4605036784; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e92c80_Var>>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4605036784:;
	(_23917_i)++;
	goto _iter_begin_4605036784;
	_iter_end_4605036784:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_9::_method_insert(jule::Int _24829_i,jule::Ref<_110e92c80_Var> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605047168:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4605047168; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e92c80_Var>>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4605047168:;
	(_26117_j)--;
	goto _iter_begin_4605047168;
	_iter_end_4605047168:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e92c80_Var>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_9 _1108ddf20_Vector_9::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_9::_static_method_new(0LL);
	}
	_1108ddf20_Vector_9 _29317_vec = _1108ddf20_Vector_9::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Ref<_110e92c80_Var>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e92c80_Var>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_9 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_10 _1108ddf20_Vector_10::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_10 _4417_vec = _1108ddf20_Vector_10();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_10::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_10::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_1116aff70_TypeAlias>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_1116aff70_TypeAlias>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_1116aff70_TypeAlias>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_10::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_10::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_10::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_10::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_10::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_1116aff70_TypeAlias> _1108ddf20_Vector_10::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_1116aff70_TypeAlias>>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_10::_method_set(jule::Int _12326_i,jule::Ref<_1116aff70_TypeAlias> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_1116aff70_TypeAlias>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_10::_method_push(jule::Ref<_1116aff70_TypeAlias> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_1116aff70_TypeAlias>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_10::_method_push_front(jule::Ref<_1116aff70_TypeAlias> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605164688:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4605164688; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1116aff70_TypeAlias>>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4605164688:;
	(_15217_i)--;
	goto _iter_begin_4605164688;
	_iter_end_4605164688:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_1116aff70_TypeAlias>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_10::_method_append(jule::Slice<jule::Ref<_1116aff70_TypeAlias>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_1116aff70_TypeAlias>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_1116aff70_TypeAlias>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_1116aff70_TypeAlias>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_10::_method_merge(_1108ddf20_Vector_10 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_1116aff70_TypeAlias>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_1116aff70_TypeAlias>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_10::_method_merge_front(_1108ddf20_Vector_10 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605199808:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4605199808; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1116aff70_TypeAlias>>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4605199808:;
	(_20517_i)--;
	goto _iter_begin_4605199808;
	_iter_end_4605199808:;
	{
		__jule_std_vector_copy_range<jule::Ref<_1116aff70_TypeAlias>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_10::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4605216848:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4605216848; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1116aff70_TypeAlias>>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4605216848:;
	(_23917_i)++;
	goto _iter_begin_4605216848;
	_iter_end_4605216848:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_10::_method_insert(jule::Int _24829_i,jule::Ref<_1116aff70_TypeAlias> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605227232:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4605227232; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1116aff70_TypeAlias>>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4605227232:;
	(_26117_j)--;
	goto _iter_begin_4605227232;
	_iter_end_4605227232:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_1116aff70_TypeAlias>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_10 _1108ddf20_Vector_10::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_10::_static_method_new(0LL);
	}
	_1108ddf20_Vector_10 _29317_vec = _1108ddf20_Vector_10::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Ref<_1116aff70_TypeAlias>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_1116aff70_TypeAlias>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_10 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_11 _1108ddf20_Vector_11::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_11 _4417_vec = _1108ddf20_Vector_11();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_11::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_11::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_11072eb20_Fn>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_11072eb20_Fn>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_11072eb20_Fn>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_11::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_11::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_11::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_11::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_11::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_11072eb20_Fn> _1108ddf20_Vector_11::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_11072eb20_Fn>>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_11::_method_set(jule::Int _12326_i,jule::Ref<_11072eb20_Fn> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11072eb20_Fn>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_11::_method_push(jule::Ref<_11072eb20_Fn> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11072eb20_Fn>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_11::_method_push_front(jule::Ref<_11072eb20_Fn> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605410272:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4605410272; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11072eb20_Fn>>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4605410272:;
	(_15217_i)--;
	goto _iter_begin_4605410272;
	_iter_end_4605410272:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11072eb20_Fn>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_11::_method_append(jule::Slice<jule::Ref<_11072eb20_Fn>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_11072eb20_Fn>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11072eb20_Fn>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_11072eb20_Fn>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_11::_method_merge(_1108ddf20_Vector_11 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_11072eb20_Fn>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11072eb20_Fn>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_11::_method_merge_front(_1108ddf20_Vector_11 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605445392:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4605445392; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11072eb20_Fn>>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4605445392:;
	(_20517_i)--;
	goto _iter_begin_4605445392;
	_iter_end_4605445392:;
	{
		__jule_std_vector_copy_range<jule::Ref<_11072eb20_Fn>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_11::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4605462432:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4605462432; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11072eb20_Fn>>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4605462432:;
	(_23917_i)++;
	goto _iter_begin_4605462432;
	_iter_end_4605462432:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_11::_method_insert(jule::Int _24829_i,jule::Ref<_11072eb20_Fn> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605472816:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4605472816; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11072eb20_Fn>>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4605472816:;
	(_26117_j)--;
	goto _iter_begin_4605472816;
	_iter_end_4605472816:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11072eb20_Fn>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_11 _1108ddf20_Vector_11::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_11::_static_method_new(0LL);
	}
	_1108ddf20_Vector_11 _29317_vec = _1108ddf20_Vector_11::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Ref<_11072eb20_Fn>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11072eb20_Fn>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_11 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_12 _1108ddf20_Vector_12::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_12 _4417_vec = _1108ddf20_Vector_12();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_12::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_12::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_1109372e0_Struct>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_1109372e0_Struct>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_1109372e0_Struct>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_12::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_12::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_12::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_12::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_12::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_1109372e0_Struct> _1108ddf20_Vector_12::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_1109372e0_Struct>>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_12::_method_set(jule::Int _12326_i,jule::Ref<_1109372e0_Struct> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_1109372e0_Struct>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_12::_method_push(jule::Ref<_1109372e0_Struct> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_1109372e0_Struct>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_12::_method_push_front(jule::Ref<_1109372e0_Struct> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605585536:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4605585536; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1109372e0_Struct>>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4605585536:;
	(_15217_i)--;
	goto _iter_begin_4605585536;
	_iter_end_4605585536:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_1109372e0_Struct>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_12::_method_append(jule::Slice<jule::Ref<_1109372e0_Struct>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_1109372e0_Struct>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_1109372e0_Struct>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_1109372e0_Struct>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_12::_method_merge(_1108ddf20_Vector_12 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_1109372e0_Struct>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_1109372e0_Struct>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_12::_method_merge_front(_1108ddf20_Vector_12 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605620656:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4605620656; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1109372e0_Struct>>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4605620656:;
	(_20517_i)--;
	goto _iter_begin_4605620656;
	_iter_end_4605620656:;
	{
		__jule_std_vector_copy_range<jule::Ref<_1109372e0_Struct>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_12::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4605637696:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4605637696; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1109372e0_Struct>>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4605637696:;
	(_23917_i)++;
	goto _iter_begin_4605637696;
	_iter_end_4605637696:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_12::_method_insert(jule::Int _24829_i,jule::Ref<_1109372e0_Struct> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605648080:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4605648080; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1109372e0_Struct>>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4605648080:;
	(_26117_j)--;
	goto _iter_begin_4605648080;
	_iter_end_4605648080:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_1109372e0_Struct>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_12 _1108ddf20_Vector_12::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_12::_static_method_new(0LL);
	}
	_1108ddf20_Vector_12 _29317_vec = _1108ddf20_Vector_12::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Ref<_1109372e0_Struct>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_1109372e0_Struct>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_12 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_13 _1108ddf20_Vector_13::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_13 _4417_vec = _1108ddf20_Vector_13();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_13::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_13::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_110e3f160_Trait>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_110e3f160_Trait>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_110e3f160_Trait>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_13::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_13::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_13::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_13::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_13::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_110e3f160_Trait> _1108ddf20_Vector_13::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_110e3f160_Trait>>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_13::_method_set(jule::Int _12326_i,jule::Ref<_110e3f160_Trait> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e3f160_Trait>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_13::_method_push(jule::Ref<_110e3f160_Trait> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e3f160_Trait>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_13::_method_push_front(jule::Ref<_110e3f160_Trait> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605762464:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4605762464; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e3f160_Trait>>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4605762464:;
	(_15217_i)--;
	goto _iter_begin_4605762464;
	_iter_end_4605762464:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e3f160_Trait>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_13::_method_append(jule::Slice<jule::Ref<_110e3f160_Trait>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_110e3f160_Trait>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e3f160_Trait>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_110e3f160_Trait>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_13::_method_merge(_1108ddf20_Vector_13 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_110e3f160_Trait>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e3f160_Trait>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_13::_method_merge_front(_1108ddf20_Vector_13 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605797584:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4605797584; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e3f160_Trait>>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4605797584:;
	(_20517_i)--;
	goto _iter_begin_4605797584;
	_iter_end_4605797584:;
	{
		__jule_std_vector_copy_range<jule::Ref<_110e3f160_Trait>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_13::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4605814624:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4605814624; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e3f160_Trait>>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4605814624:;
	(_23917_i)++;
	goto _iter_begin_4605814624;
	_iter_end_4605814624:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_13::_method_insert(jule::Int _24829_i,jule::Ref<_110e3f160_Trait> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605825008:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4605825008; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e3f160_Trait>>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4605825008:;
	(_26117_j)--;
	goto _iter_begin_4605825008;
	_iter_end_4605825008:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e3f160_Trait>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_13 _1108ddf20_Vector_13::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_13::_static_method_new(0LL);
	}
	_1108ddf20_Vector_13 _29317_vec = _1108ddf20_Vector_13::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Ref<_110e3f160_Trait>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e3f160_Trait>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_13 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_14 _1108ddf20_Vector_14::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_14 _4417_vec = _1108ddf20_Vector_14();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_14::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_14::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_110e453c0_Enum>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_110e453c0_Enum>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_110e453c0_Enum>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_14::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_14::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_14::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_14::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_14::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_110e453c0_Enum> _1108ddf20_Vector_14::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_110e453c0_Enum>>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_14::_method_set(jule::Int _12326_i,jule::Ref<_110e453c0_Enum> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e453c0_Enum>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_14::_method_push(jule::Ref<_110e453c0_Enum> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e453c0_Enum>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_14::_method_push_front(jule::Ref<_110e453c0_Enum> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605946896:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4605946896; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e453c0_Enum>>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4605946896:;
	(_15217_i)--;
	goto _iter_begin_4605946896;
	_iter_end_4605946896:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e453c0_Enum>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_14::_method_append(jule::Slice<jule::Ref<_110e453c0_Enum>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_110e453c0_Enum>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e453c0_Enum>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_110e453c0_Enum>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_14::_method_merge(_1108ddf20_Vector_14 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_110e453c0_Enum>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e453c0_Enum>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_14::_method_merge_front(_1108ddf20_Vector_14 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4605982528:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4605982528; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e453c0_Enum>>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4605982528:;
	(_20517_i)--;
	goto _iter_begin_4605982528;
	_iter_end_4605982528:;
	{
		__jule_std_vector_copy_range<jule::Ref<_110e453c0_Enum>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_14::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4605999568:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4605999568; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e453c0_Enum>>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4605999568:;
	(_23917_i)++;
	goto _iter_begin_4605999568;
	_iter_end_4605999568:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_14::_method_insert(jule::Int _24829_i,jule::Ref<_110e453c0_Enum> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4606009952:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4606009952; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e453c0_Enum>>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4606009952:;
	(_26117_j)--;
	goto _iter_begin_4606009952;
	_iter_end_4606009952:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e453c0_Enum>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_14 _1108ddf20_Vector_14::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_14::_static_method_new(0LL);
	}
	_1108ddf20_Vector_14 _29317_vec = _1108ddf20_Vector_14::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Ref<_110e453c0_Enum>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e453c0_Enum>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_14 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _1108ddf20_Vector_15 _1108ddf20_Vector_15::_static_method_new(jule::Int _4319_cap) {
	_1108ddf20_Vector_15 _4417_vec = _1108ddf20_Vector_15();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _1108ddf20_Vector_15::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return static_cast<jule::Int>(_5413_t * 2LL);
}



inline void _1108ddf20_Vector_15::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_110e4c050_Impl>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_110e4c050_Impl>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_110e4c050_Impl>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _1108ddf20_Vector_15::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _1108ddf20_Vector_15::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _1108ddf20_Vector_15::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _1108ddf20_Vector_15::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _1108ddf20_Vector_15::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_110e4c050_Impl> _1108ddf20_Vector_15::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_110e4c050_Impl>>((*this)._field__buffer.heap,_11525_i);
}



inline void _1108ddf20_Vector_15::_method_set(jule::Int _12326_i,jule::Ref<_110e4c050_Impl> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e4c050_Impl>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _1108ddf20_Vector_15::_method_push(jule::Ref<_110e4c050_Impl> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e4c050_Impl>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_15::_method_push_front(jule::Ref<_110e4c050_Impl> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4606126464:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4606126464; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e4c050_Impl>>((*this)._field__buffer.heap,_15217_i,static_cast<jule::Int>(_15217_i + 1LL));
		}
	}
	_iter_next_4606126464:;
	(_15217_i)--;
	goto _iter_begin_4606126464;
	_iter_end_4606126464:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e4c050_Impl>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _1108ddf20_Vector_15::_method_append(jule::Slice<jule::Ref<_110e4c050_Impl>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_110e4c050_Impl>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e4c050_Impl>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_110e4c050_Impl>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _1108ddf20_Vector_15::_method_merge(_1108ddf20_Vector_15 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_110e4c050_Impl>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e4c050_Impl>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_15::_method_merge_front(_1108ddf20_Vector_15 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4606161584:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4606161584; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e4c050_Impl>>((*this)._field__buffer.heap,_20517_i,static_cast<jule::Int>(_20517_i + _19738_vec._field__buffer.len));
		}
	}
	_iter_next_4606161584:;
	(_20517_i)--;
	goto _iter_begin_4606161584;
	_iter_end_4606161584:;
	{
		__jule_std_vector_copy_range<jule::Ref<_110e4c050_Impl>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _1108ddf20_Vector_15::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4606178624:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4606178624; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e4c050_Impl>>((*this)._field__buffer.heap,_23917_i,static_cast<jule::Int>(_23917_i - _22347_n));
		}
	}
	_iter_next_4606178624:;
	(_23917_i)++;
	goto _iter_begin_4606178624;
	_iter_end_4606178624:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _1108ddf20_Vector_15::_method_insert(jule::Int _24829_i,jule::Ref<_110e4c050_Impl> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>(((*this)._field__buffer.cap * 2LL) + 1LL));
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4606189008:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4606189008; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_110e4c050_Impl>>((*this)._field__buffer.heap,_26117_j,static_cast<jule::Int>(_26117_j + 1LL));
		}
	}
	_iter_next_4606189008:;
	(_26117_j)--;
	goto _iter_begin_4606189008;
	_iter_end_4606189008:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_110e4c050_Impl>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _1108ddf20_Vector_15 _1108ddf20_Vector_15::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _1108ddf20_Vector_15::_static_method_new(0LL);
	}
	_1108ddf20_Vector_15 _29317_vec = _1108ddf20_Vector_15::_static_method_new(static_cast<jule::Int>(_27240_end - _27228_start));
	{
		__jule_std_vector_copy_range<jule::Ref<_110e4c050_Impl>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_110e4c050_Impl>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _1108ddf20_Vector_15 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11054ec70_File::_method_is_ok(void) {
	jule::Int _2017_err;
	std::tie(std::ignore,_2017_err) = _1104fc7d0_stat((*this)._field__path);
	return _2017_err == 0LLU;
}



inline void _11054ec70_File::_method_fill(jule::Slice<jule::U8> _2531_data) {
	(*this)._field_data=_2531_data;
}



inline jule::Str _11054ec70_File::_method_path(void) {
	return (*this)._field__path;
}



inline jule::Str _11054ec70_File::_method_dir(void) {
	return _117e1d320_dir((*this)._field__path);
}



inline jule::Str _11054ec70_File::_method_name(void) {
	return _117e1d320_base((*this)._field__path);
}



inline jule::Uintptr _11054ec70_File::_method_addr(void) {
	return ((jule::Uintptr)((&((*this)))));
}



inline _1108ddf20_Vector_0 _11054ec70_File::_method_tokens(void) {
	return (*this)._field__tokens;
}



inline jule::Str _11054ec70_File::_method_get_row(jule::Int _4526_row) {
	jule::Int _4617_n = 0LL;
	jule::Int _4717_line_start = 0LL;
	jule::Int _4817_i = 0LL;
	_iter_begin_4599222176:;
	if (!(_4817_i < (*this)._field_data.len())) { goto _iter_end_4599222176; }
	{
		if ((*this)._field_data[static_cast<jule::Int>(_4817_i)] != '\n') {
			goto _iter_next_4599222176;
		}
		(_4617_n)++;
		if (_4617_n == _4526_row) {
			return static_cast<jule::Str>((*this)._field_data.slice(static_cast<jule::Int>(_4717_line_start),static_cast<jule::Int>(_4817_i)));
		}
		_4717_line_start=static_cast<jule::Int>(_4817_i + 1LL);
	}
	_iter_next_4599222176:;
	(_4817_i)++;
	goto _iter_begin_4599222176;
	_iter_end_4599222176:;
	return jule::Str("", 0);
}







std::ostream &operator<<(std::ostream &_Stream, const _11054ec70_File &_Src) {
	_Stream << "File{";
	_Stream << "data:" << _Src._field_data << ", ";
	_Stream << "_path:" << _Src._field__path << ", ";
	_Stream << "_tokens:" << _Src._field__tokens;
	_Stream << "}";
	return _Stream;
}



inline void _11054eff0_Lex::_method_push_err(jule::Str _40327_fmt,jule::Slice<jule::Any> _40340_args) {
	(*this)._field_errors=jule::append((*this)._field_errors,jule::Slice<_127e05da0_Log>({_11054eff0_make_err((*this)._field_row,(*this)._field_column,(*this)._field_file,_40327_fmt,_40340_args)}));
}



inline void _11054eff0_Lex::_method_push_err_tok(_1106ec050_Token _40831_token,jule::Str _40845_fmt) {
	(*this)._field_errors=jule::append((*this)._field_errors,jule::Slice<_127e05da0_Log>({_11054eff0_make_err(_40831_token._field_row,_40831_token._field_column,(*this)._field_file,_40845_fmt,jule::Slice<jule::Any>({}))}));
}



inline void _11054eff0_Lex::_method_lex(void) {
	(*this)._field_errors=nullptr;
	(*this)._method_new_line();
	_iter_begin_4599240752:;
	if (!((*this)._field_pos < (*this)._field_file->_field_data.len())) { goto _iter_end_4599240752; }
	{
		_1106ec050_Token _41821_token = (*this)._method_token();
		if (_41821_token._field_id != 0LLU) {
			(*this)._field_tokens._method_push(_41821_token);
		}
	}
	_iter_next_4599240752:;
	goto _iter_begin_4599240752;
	_iter_end_4599240752:;
}



inline jule::Str _11054eff0_Lex::_method_id(jule::Slice<jule::U8> _42721_ln) {
	if (_42721_ln.len() == 0LL) {
		return jule::Str("", 0);
	}
	if ((_42721_ln[0LL] != '_') && (!(_1106ec050_is_letter(static_cast<jule::I32>(_42721_ln[0LL]))))) {
		return jule::Str("", 0);
	}
	{
		auto __julec_range_expr = _42721_ln;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11054eff0_i = 0;
			jule::U8 _11054eff0_r = *__julec_range_begin;
			_iter_begin_4599256272:;
			{
				if (((_11054eff0_r != '_') && (!(_1106ec050_is_decimal(static_cast<jule::U8>(_11054eff0_r))))) && (!(_1106ec050_is_letter(_11054eff0_r)))) {
					return static_cast<jule::Str>(_42721_ln.slice(0LL,static_cast<jule::Int>(_11054eff0_i)));
				}
				((*this)._field_pos)++;
			}
			_iter_next_4599256272:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11054eff0_i; _11054eff0_r = *__julec_range_begin; goto _iter_begin_4599256272; }
			_iter_end_4599256272:;
		}
	}
	return static_cast<jule::Str>(_42721_ln);
}



inline jule::Slice<jule::U8> _11054eff0_Lex::_method_resume(void) {
	jule::Int _44817_i = (*this)._field_pos;
	_iter_begin_4599263008:;
	if (!(_44817_i < (*this)._field_file->_field_data.len())) { goto _iter_end_4599263008; }
	{
		jule::I32 _45017_r = static_cast<jule::I32>((*this)._field_file->_field_data[static_cast<jule::Int>(_44817_i)]);
		if (_1106ec050_is_space(_45017_r)) {
			((*this)._field_pos)++;
			{
				auto _match_expr{ _45017_r };
				if (!(('\n') == _match_expr)) { goto _case_end_4599269488; }
				_case_begin_4599269488:;
				{
					(*this)._method_new_line();
				}
				goto _match_end_4599267920;
				_case_end_4599269488:;
				if (!(('\t') == _match_expr)) { goto _case_end_4599269776; }
				_case_begin_4599269776:;
				{
					(*this)._field_column+=8LL;
				}
				goto _match_end_4599267920;
				_case_end_4599269776:;
				_case_begin_4599268240:;
				{
					((*this)._field_column)++;
				}
				goto _match_end_4599267920;
				_case_end_4599268240:;
				_match_end_4599267920:;
			}
			goto _iter_next_4599263008;
		}
		jule::Int _46121_j = _44817_i;
		_iter_begin_4599271040:;
		if (!(_46121_j < (*this)._field_file->_field_data.len())) { goto _iter_end_4599271040; }
		{
			if ((*this)._field_file->_field_data[static_cast<jule::Int>(_46121_j)] == '\n') {
				goto _iter_end_4599271040;
			}
		}
		_iter_next_4599271040:;
		(_46121_j)++;
		goto _iter_begin_4599271040;
		_iter_end_4599271040:;
		return (*this)._field_file->_field_data.slice(static_cast<jule::Int>(_44817_i),static_cast<jule::Int>(_46121_j));
	}
	_iter_next_4599263008:;
	(_44817_i)++;
	goto _iter_begin_4599263008;
	_iter_end_4599263008:;
	return nullptr;
}



inline void _11054eff0_Lex::_method_lex_line_comment(_1106ec050_Token& _47340_token) {
	jule::Int _47413_start = (*this)._field_pos;
	(*this)._field_pos+=2LL;
	_iter_begin_4599281712:;
	if (!((*this)._field_pos < (*this)._field_file->_field_data.len())) { goto _iter_end_4599281712; }
	{
		jule::U8 _47817_r = (*this)._field_file->_field_data[static_cast<jule::Int>((*this)._field_pos)];
		if ((_47817_r == '\n') || (_47817_r == '\r')) {
			if ((*this)._method_is_first_token_of_line()) {
				_47340_token._field_id=18LLU;
				_47340_token._field_kind=static_cast<jule::Str>((*this)._field_file->_field_data.slice(static_cast<jule::Int>(_47413_start),static_cast<jule::Int>((*this)._field_pos)));
			}
			return;
		}
	}
	_iter_next_4599281712:;
	((*this)._field_pos)++;
	goto _iter_begin_4599281712;
	_iter_end_4599281712:;
	if ((*this)._method_is_first_token_of_line()) {
		_47340_token._field_id=18LLU;
		_47340_token._field_kind=static_cast<jule::Str>((*this)._field_file->_field_data.slice(static_cast<jule::Int>(_47413_start)));
	}
}



inline void _11054eff0_Lex::_method_lex_range_comment(void) {
	(*this)._field_pos+=2LL;
	_iter_begin_4599294848:;
	if (!((*this)._field_pos < (*this)._field_file->_field_data.len())) { goto _iter_end_4599294848; }
	{
		jule::U8 _49717_r = (*this)._field_file->_field_data[static_cast<jule::Int>((*this)._field_pos)];
		if (_49717_r == '\r') {
			goto _iter_next_4599294848;
		}
		if (_49717_r == '\n') {
			(*this)._method_new_line();
			goto _iter_next_4599294848;
		}
		(*this)._field_column+=1LL;
		if (((((*this)._field_pos + 1LL) < (*this)._field_file->_field_data.len()) && (_49717_r == '*')) && ((*this)._field_file->_field_data[static_cast<jule::Int>((*this)._field_pos + 1LL)] == '/')) {
			(*this)._field_column+=2LL;
			(*this)._field_pos+=2LL;
			return;
		}
	}
	_iter_next_4599294848:;
	((*this)._field_pos)++;
	goto _iter_begin_4599294848;
	_iter_end_4599294848:;
	(*this)._method_push_err(jule::Str("missing block comment close", 27),jule::Slice<jule::Any>({}));
}



inline jule::Str _11054eff0_Lex::_method_num(jule::Slice<jule::U8> _51822_txt) {
	jule::Str _51837_lit = jule::Str();
	_51837_lit=_11054eff0_hex_num(_51822_txt);
	if (_51837_lit != jule::Str("", 0)) {
		goto _julec_label_end;
	}
	_51837_lit=_11054eff0_octal_num(_51822_txt);
	if (_51837_lit != jule::Str("", 0)) {
		goto _julec_label_end;
	}
	_51837_lit=_11054eff0_binary_num(_51822_txt);
	if (_51837_lit != jule::Str("", 0)) {
		goto _julec_label_end;
	}
	_51837_lit=_11054eff0_common_num(_51822_txt);
	_julec_label_end:;
	(*this)._field_pos+=static_cast<jule::I64>(_51837_lit.len());
	return _51837_lit;
}



inline jule::Str _11054eff0_Lex::_method_escape_seq(jule::Slice<jule::U8> _53729_txt) {
	jule::Str _53817_seq = jule::Str("", 0);
	if (_53729_txt.len() < 2LL) {
		goto _julec_label_end;
	}
	{
		auto _match_expr{ _53729_txt[1LL] };
		if (!(('\\') == _match_expr || ('\'') == _match_expr || ('\"') == _match_expr || ('a') == _match_expr || ('b') == _match_expr || ('f') == _match_expr || ('n') == _match_expr || ('r') == _match_expr || ('t') == _match_expr || ('v') == _match_expr)) { goto _case_end_4599327712; }
		_case_begin_4599327712:;
		{
			(*this)._field_pos+=2LL;
			return static_cast<jule::Str>(_53729_txt.slice(0LL,2LL));
		}
		goto _match_end_4599324752;
		_case_end_4599327712:;
		if (!(('U') == _match_expr)) { goto _case_end_4599327824; }
		_case_begin_4599327824:;
		{
			_53817_seq=_11054eff0_big_unicode_point_escape(_53729_txt);
		}
		goto _match_end_4599324752;
		_case_end_4599327824:;
		if (!(('u') == _match_expr)) { goto _case_end_4599327936; }
		_case_begin_4599327936:;
		{
			_53817_seq=_11054eff0_little_unicode_point_escape(_53729_txt);
		}
		goto _match_end_4599324752;
		_case_end_4599327936:;
		if (!(('x') == _match_expr)) { goto _case_end_4599326480; }
		_case_begin_4599326480:;
		{
			_53817_seq=_11054eff0_hex_byte_escape(_53729_txt);
		}
		goto _match_end_4599324752;
		_case_end_4599326480:;
		_case_begin_4599325632:;
		{
			_53817_seq=_11054eff0_byte_escape(_53729_txt);
		}
		goto _match_end_4599324752;
		_case_end_4599325632:;
		_match_end_4599324752:;
	}
	_julec_label_end:;
	if (_53817_seq == jule::Str("", 0)) {
		((*this)._field_pos)++;
		(*this)._method_push_err(jule::Str("invalid escape sequence", 23),jule::Slice<jule::Any>({}));
		return jule::Str("", 0);
	}
	(*this)._field_pos+=static_cast<jule::I64>(_53817_seq.len());
	return _53817_seq;
}



inline jule::Str _11054eff0_Lex::_method_get_rune(jule::Slice<jule::U8> _57127_txt,jule::Bool _57140_raw) {
	if ((!(_57140_raw)) && (_57127_txt[0LL] == '\\')) {
		return (*this)._method_escape_seq(_57127_txt);
	}
	jule::I32 _57614_r;
	jule::Int _57617_n;
	std::tie(_57614_r,_57617_n) = _1106ed100_decode_rune(_57127_txt);
	(*this)._field_pos+=_57617_n;
	return static_cast<jule::Str>(_57614_r);
}



inline jule::Str _11054eff0_Lex::_method_lex_rune(jule::Slice<jule::U8> _58127_txt) {
	jule::Str _58217_run = jule::Str("'", 1);
	((*this)._field_column)++;
	jule::Int _58417_n = 0LL;
	jule::Int _58517_i = 1LL;
	_iter_begin_4599347776:;
	if (!(_58517_i < _58127_txt.len())) { goto _iter_end_4599347776; }
	{
		if (_58127_txt[static_cast<jule::Int>(_58517_i)] == '\r') {
			goto _iter_next_4599347776;
		}
		if (_58127_txt[static_cast<jule::Int>(_58517_i)] == '\n') {
			(*this)._method_push_err(jule::Str("rune is not finished", 20),jule::Slice<jule::Any>({}));
			((*this)._field_pos)++;
			(*this)._method_new_line();
			return jule::Str("", 0);
		}
		jule::Str _59717_r = (*this)._method_get_rune(_58127_txt.slice(static_cast<jule::Int>(_58517_i)),false);
		_58217_run+=_59717_r;
		jule::I64 _59917_length = _59717_r.len();
		(*this)._field_column+=_59917_length;
		if (_59717_r == jule::Str("'", 1)) {
			((*this)._field_pos)++;
			goto _iter_end_4599347776;
		}
		if (_59917_length > 1LL) {
			_58517_i+=static_cast<jule::I64>(_59917_length - 1LL);
		}
		(_58417_n)++;
	}
	_iter_next_4599347776:;
	(_58517_i)++;
	goto _iter_begin_4599347776;
	_iter_end_4599347776:;
	if (_58417_n == 0LL) {
		(*this)._method_push_err(jule::Str("rune is cannot empty", 20),jule::Slice<jule::Any>({}));
	} else if (_58417_n > 1LL) {
		(*this)._method_push_err(jule::Str("rune is should be single", 24),jule::Slice<jule::Any>({}));
	}
	return _58217_run;
}



inline jule::Str _11054eff0_Lex::_method_lex_str(void) {
	jule::Str _62117_s = jule::Str("", 0);
	jule::U8 _62213_mark = (*this)._field_file->_field_data[static_cast<jule::Int>((*this)._field_pos)];
	((*this)._field_pos)++;
	jule::Bool _62413_raw = _62213_mark == '`';
	_62117_s+=static_cast<jule::Str>(_62213_mark);
	((*this)._field_column)++;
	_iter_begin_4599370480:;
	if (!((*this)._field_pos < (*this)._field_file->_field_data.len())) { goto _iter_end_4599370480; }
	{
		jule::U8 _62917_ch = (*this)._field_file->_field_data[static_cast<jule::Int>((*this)._field_pos)];
		if (_62917_ch == '\r') {
			goto _iter_next_4599370480;
		}
		if (_62917_ch == '\n') {
			(*this)._method_new_line();
			if ((!(_62413_raw))) {
				(*this)._method_push_err(jule::Str("string is not finished", 22),jule::Slice<jule::Any>({}));
				((*this)._field_pos)++;
				return jule::Str("", 0);
			}
		}
		jule::Str _64117_r = (*this)._method_get_rune((*this)._field_file->_field_data.slice(static_cast<jule::Int>((*this)._field_pos)),_62413_raw);
		_62117_s+=_64117_r;
		(*this)._field_column+=static_cast<jule::I64>(_64117_r.len());
		if (_62917_ch == _62213_mark) {
			goto _iter_end_4599370480;
		}
	}
	_iter_next_4599370480:;
	goto _iter_begin_4599370480;
	_iter_end_4599370480:;
	return _62117_s;
}



inline jule::Bool _11054eff0_Lex::_method_is_first_token_of_line(void) {
	return (*this)._field_column == 1LL;
}



inline void _11054eff0_Lex::_method_new_line(void) {
	((*this)._field_row)++;
	(*this)._field_column=1LL;
}



inline jule::Bool _11054eff0_Lex::_method_is_op(jule::Slice<jule::U8> _66124_txt,jule::Str _66137_kind,jule::Uint _66148_id,_1106ec050_Token& _66166_t) {
	if ((!(_11054eff0_bytes_has_prefix(_66124_txt,_66137_kind)))) {
		return false;
	}
	_66166_t._field_kind=_66137_kind;
	_66166_t._field_id=_66148_id;
	(*this)._field_pos+=static_cast<jule::I64>(_66137_kind.len());
	return true;
}



inline jule::Bool _11054eff0_Lex::_method_lex_basic_ops(jule::Slice<jule::U8> _67232_txt,_1106ec050_Token& _67250_tok) {
	{
		auto __julec_range_expr = _11054eff0_BASIC_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_11054eff0_KindPair _11054eff0_pair = *__julec_range_begin;
			_iter_begin_4599400320:;
			{
				if ((*this)._method_is_op(_67232_txt,_11054eff0_pair._field_kind,_11054eff0_pair._field_id,_67250_tok)) {
					return true;
				}
			}
			_iter_next_4599400320:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11054eff0_pair = *__julec_range_begin; goto _iter_begin_4599400320; }
			_iter_end_4599400320:;
		}
	}
	return false;
}



inline jule::Bool _11054eff0_Lex::_method_lex_id(jule::Slice<jule::U8> _68225_txt,_1106ec050_Token& _68243_t) {
	jule::Str _68313_lex = (*this)._method_id(_68225_txt);
	if (_68313_lex == jule::Str("", 0)) {
		return false;
	}
	_68243_t._field_kind=_68313_lex;
	_68243_t._field_id=2LLU;
	return true;
}



inline jule::Bool _11054eff0_Lex::_method_lex_num(jule::Slice<jule::U8> _69326_txt,_1106ec050_Token& _69344_t) {
	jule::Str _69413_lex = (*this)._method_num(_69326_txt);
	if (_69413_lex == jule::Str("", 0)) {
		return false;
	}
	_69344_t._field_kind=_69413_lex;
	_69344_t._field_id=6LLU;
	return true;
}



inline _1106ec050_Token _11054eff0_Lex::_method_token(void) {
	_1106ec050_Token _70617_t = _1106ec050_Token((*this)._field_file,jule::Int(),jule::Int(),jule::Str(),0LLU);
	jule::Slice<jule::U8> _70813_txt = (*this)._method_resume();
	if (_70813_txt == nullptr) {
		return _70617_t;
	}
	_70617_t._field_column=(*this)._field_column;
	_70617_t._field_row=(*this)._field_row;
	{
		if (!(((*this)._method_lex_num(_70813_txt,_70617_t)))) { goto _case_end_4599426816; }
		goto _match_end_4599421040;
		_case_end_4599426816:;
		if (!((_70813_txt[0LL] == '\''))) { goto _case_end_4599422384; }
		_case_begin_4599422384:;
		{
			_70617_t._field_kind=(*this)._method_lex_rune(_70813_txt);
			_70617_t._field_id=6LLU;
			return _70617_t;
		}
		goto _match_end_4599421040;
		_case_end_4599422384:;
		if (!(((_70813_txt[0LL] == '\"') || (_70813_txt[0LL] == '`')))) { goto _case_end_4599422496; }
		_case_begin_4599422496:;
		{
			_70617_t._field_kind=(*this)._method_lex_str();
			_70617_t._field_id=6LLU;
			return _70617_t;
		}
		goto _match_end_4599421040;
		_case_end_4599422496:;
		if (!((_11054eff0_bytes_has_prefix(_70813_txt,jule::Str("//", 2))))) { goto _case_end_4599422608; }
		_case_begin_4599422608:;
		{
			(*this)._method_lex_line_comment(_70617_t);
			return _70617_t;
		}
		goto _match_end_4599421040;
		_case_end_4599422608:;
		if (!((_11054eff0_bytes_has_prefix(_70813_txt,jule::Str("/*", 2))))) { goto _case_end_4599427120; }
		_case_begin_4599427120:;
		{
			(*this)._method_lex_range_comment();
			return _70617_t;
		}
		goto _match_end_4599421040;
		_case_end_4599427120:;
		if (!(((*this)._method_is_op(_70813_txt,jule::Str("(", 1),3LLU,_70617_t)) || ((*this)._method_is_op(_70813_txt,jule::Str(")", 1),3LLU,_70617_t)) || ((*this)._method_is_op(_70813_txt,jule::Str("{", 1),3LLU,_70617_t)) || ((*this)._method_is_op(_70813_txt,jule::Str("}", 1),3LLU,_70617_t)) || ((*this)._method_is_op(_70813_txt,jule::Str("[", 1),3LLU,_70617_t)) || ((*this)._method_is_op(_70813_txt,jule::Str("]", 1),3LLU,_70617_t)) || ((*this)._method_lex_basic_ops(_70813_txt,_70617_t)))) { goto _case_end_4599427232; }
		goto _match_end_4599421040;
		_case_end_4599427232:;
		if (!(((*this)._method_lex_id(_70813_txt,_70617_t)))) { goto _case_end_4599427344; }
		_case_begin_4599427344:;
		{
			{
				auto __julec_range_expr = _11054eff0_KEYWORDS;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					_11054eff0_KindPair _11054eff0_pair = *__julec_range_begin;
					_iter_begin_4599441872:;
					{
						if (_11054eff0_pair._field_kind == _70617_t._field_kind) {
							_70617_t._field_id=_11054eff0_pair._field_id;
							goto _iter_end_4599441872;
						}
					}
					_iter_next_4599441872:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _11054eff0_pair = *__julec_range_begin; goto _iter_begin_4599441872; }
					_iter_end_4599441872:;
				}
			}
		}
		goto _match_end_4599421040;
		_case_end_4599427344:;
		_case_begin_4599421904:;
		{
			jule::I32 _75818_r;
			jule::Int _75821_sz;
			std::tie(_75818_r,_75821_sz) = _1106ed100_decode_rune(_70813_txt);
			(*this)._method_push_err(jule::Str("undefined code content: @", 25),jule::Slice<jule::Any>({jule::Any(_75818_r)}));
			((*this)._field_column)++;
			(*this)._field_pos+=_75821_sz;
			return _70617_t;
		}
		goto _match_end_4599421040;
		_case_end_4599421904:;
		_match_end_4599421040:;
	}
	(*this)._field_column+=static_cast<jule::I64>(_70617_t._field_kind.len());
	return _70617_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _11054eff0_Lex &_Src) {
	_Stream << "Lex{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1104fada0_Ast &_Src) {
	_Stream << "Ast{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "top_directives:" << _Src._field_top_directives << ", ";
	_Stream << "use_decls:" << _Src._field_use_decls << ", ";
	_Stream << "impls:" << _Src._field_impls << ", ";
	_Stream << "comments:" << _Src._field_comments << ", ";
	_Stream << "decls:" << _Src._field_decls;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_1109372e0_StructIns> _1109372e0_Struct::_method_instance(void) {
	if ((this->self->_field_generics.len() == 0LL) && (this->self->_field_instances.len() == 1LL)) {
		return this->self->_field_instances[0LL];
	}
	jule::Ref<_1109372e0_StructIns> _6717_ins = jule::new_struct<_1109372e0_StructIns>(new( std::nothrow ) _1109372e0_StructIns(jule::Bool(),this->self,jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_1109372e0_FieldIns>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(this->self->_field_fields.len()))),jule::Slice<jule::Ref<_11072eb20_Fn>>::alloc(static_cast<jule::Int>(static_cast<jule::Int>(this->self->_field_methods._method_len()))),jule::Bool(),_110d9ce90_new_reference_stack()));
	{
		auto __julec_range_expr = this->self->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1109372e0_i = 0;
			jule::Ref<_1109372e0_Field> _1109372e0_f = *__julec_range_begin;
			_iter_begin_4607988096:;
			{
				_6717_ins->_field_fields[static_cast<jule::Int>(_1109372e0_i)]=_1109372e0_f->_method_instance();
				if (jule::real(_1109372e0_f->_field_kind->_field_kind) && _1116aff70_is_mut(_1109372e0_f->_field_kind->_field_kind)) {
					_6717_ins->_field_has_mut=true;
				}
			}
			_iter_next_4607988096:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1109372e0_i; _1109372e0_f = *__julec_range_begin; goto _iter_begin_4607988096; }
			_iter_end_4607988096:;
		}
	}
	jule::Int _8117_i = 0LL;
	_iter_begin_4607982480:;
	if (!(_8117_i < this->self->_field_methods._method_len())) { goto _iter_end_4607982480; }
	{
		jule::Ref<_11072eb20_Fn> _8321_f = this->self->_field_methods._method_at(_8117_i);
		jule::Ref<_11072eb20_Fn> _8421_fins = jule::new_struct<_11072eb20_Fn>(new( std::nothrow ) _11072eb20_Fn(_8321_f->_field_sema,_8321_f->_field_token,_8321_f->_field_global,_8321_f->_field_unsafety,_8321_f->_field_public,_8321_f->_field_cpp_linked,_8321_f->_field_statically,_8321_f->_field_ident,_8321_f->_field_directives,_8321_f->_field_doc,_8321_f->_field_scope,_8321_f->_field_generics,_8321_f->_field_result,_8321_f->_field_params,_8321_f->_field_owner,nullptr));
		_6717_ins->_field_methods[static_cast<jule::Int>(_8117_i)]=_8421_fins;
	}
	_iter_next_4607982480:;
	(_8117_i)++;
	goto _iter_begin_4607982480;
	_iter_end_4607982480:;
	return _6717_ins;
}



inline jule::Ref<_1109372e0_StructIns> _1109372e0_Struct::_method_append_instance(jule::Ref<_1109372e0_StructIns> _11038_ins) {
	if (((*this)._field_generics.len() == 0LL) && ((*this)._field_instances.len() == 1LL)) {
		return (*this)._field_instances[0LL];
	}
	{
		auto __julec_range_expr = (*this)._field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_StructIns> _1109372e0_ains = *__julec_range_begin;
			_iter_begin_4608009536:;
			{
				{
					auto __julec_range_expr = _1109372e0_ains->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _1109372e0_i = 0;
						jule::Ref<_1116aff70_TypeKind> _1109372e0_ag = *__julec_range_begin;
						_iter_begin_4608011488:;
						{
							if (_1109372e0_ag->_method_equals(_11038_ins->_field_generics[static_cast<jule::Int>(_1109372e0_i)])) {
								return _1109372e0_ains;
							}
						}
						_iter_next_4608011488:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_1109372e0_i; _1109372e0_ag = *__julec_range_begin; goto _iter_begin_4608011488; }
						_iter_end_4608011488:;
					}
				}
			}
			_iter_next_4608009536:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1109372e0_ains = *__julec_range_begin; goto _iter_begin_4608009536; }
			_iter_end_4608009536:;
		}
	}
	(*this)._field_instances=jule::append((*this)._field_instances,jule::Slice<jule::Ref<_1109372e0_StructIns>>({_11038_ins}));
	return jule::new_ref<_1109372e0_StructIns>();
}



inline jule::Ref<_11072eb20_Fn> _1109372e0_Struct::_method_find_method(jule::Str _13134_ident,jule::Bool _13146_statically) {
	jule::Int _13217_i = 0LL;
	_iter_begin_4608020464:;
	if (!(_13217_i < (*this)._field_methods._method_len())) { goto _iter_end_4608020464; }
	{
		jule::Ref<_11072eb20_Fn> _13421_f = (*this)._field_methods._method_at(_13217_i);
		if ((_13421_f->_field_statically == _13146_statically) && (_13421_f->_field_ident == _13134_ident)) {
			return _13421_f;
		}
	}
	_iter_next_4608020464:;
	(_13217_i)++;
	goto _iter_begin_4608020464;
	_iter_end_4608020464:;
	return jule::new_ref<_11072eb20_Fn>();
}



inline jule::Ref<_1109372e0_Field> _1109372e0_Struct::_method_find_field(jule::Str _14433_ident) {
	{
		auto __julec_range_expr = (*this)._field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_Field> _1109372e0_f = *__julec_range_begin;
			_iter_begin_4608028384:;
			{
				if (_1109372e0_f->_field_ident == _14433_ident) {
					return _1109372e0_f;
				}
			}
			_iter_next_4608028384:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1109372e0_f = *__julec_range_begin; goto _iter_begin_4608028384; }
			_iter_end_4608028384:;
		}
	}
	return jule::new_ref<_1109372e0_Field>();
}



inline jule::Bool _1109372e0_Struct::_method_is_implements(jule::Ref<_110e3f160_Trait> _15432_t) {
	{
		auto __julec_range_expr = (*this)._field_implements;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e3f160_Trait> _1109372e0_it = *__julec_range_begin;
			_iter_begin_4608032208:;
			{
				if ((_15432_t).alloc == (_1109372e0_it).alloc) {
					return true;
				}
			}
			_iter_next_4608032208:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1109372e0_it = *__julec_range_begin; goto _iter_begin_4608032208; }
			_iter_end_4608032208:;
		}
	}
	return false;
}



inline jule::Bool _1109372e0_Struct::_method_is_derives(jule::Str _16429_ident) {
	{
		auto __julec_range_expr = (*this)._field_directives;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11054f670_Directive> _1109372e0_d = *__julec_range_begin;
			_iter_begin_4608036016:;
			{
				if (_1109372e0_d->_field_tag == jule::Str("derive", 6)) {
					if ((_1109372e0_d->_field_args.len() == 1LL) && (_1109372e0_d->_field_args[0LL] == _16429_ident)) {
						return true;
					}
				}
			}
			_iter_next_4608036016:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1109372e0_d = *__julec_range_begin; goto _iter_begin_4608036016; }
			_iter_end_4608036016:;
		}
	}
	return false;
}



inline jule::Bool _1109372e0_Struct::_method_is_uses(jule::Ref<_1109372e0_Struct> _17626_s) {
	{
		auto __julec_range_expr = (*this)._field_uses;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_Struct> _1109372e0_u = *__julec_range_begin;
			_iter_begin_4608042576:;
			{
				_iter_begin_4608043856:;
				if (!((_17626_s).alloc == (_1109372e0_u).alloc)) { goto _iter_end_4608043856; }
				{
					return true;
				}
				_iter_next_4608043856:;
				goto _iter_begin_4608043856;
				_iter_end_4608043856:;
			}
			_iter_next_4608042576:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1109372e0_u = *__julec_range_begin; goto _iter_begin_4608042576; }
			_iter_end_4608042576:;
		}
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1109372e0_Struct &_Src) {
	_Stream << "Struct{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "depends:" << _Src._field_depends << ", ";
	_Stream << "uses:" << _Src._field_uses << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "implements:" << _Src._field_implements << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}



inline jule::Int _110d9ce90_ReferenceStack::_method_len(void) {
	return static_cast<jule::Int>((*this)._field_buffer._method_len());
}



inline jule::Any _110d9ce90_ReferenceStack::_method_at(jule::Int _5225_i) {
	return (*this)._field_buffer._method_at(_5225_i);
}



inline void _110d9ce90_ReferenceStack::_method_push(jule::Any _5731_ref) {
	(*this)._field_buffer._method_push(_5731_ref);
}



inline void _110d9ce90_ReferenceStack::_method_push_front(jule::Any _6237_ref) {
	(*this)._field_buffer._method_push_front(_6237_ref);
}



inline void _110d9ce90_ReferenceStack::_method_remove(jule::Int _6729_i) {
	(*this)._field_buffer._method_remove_range(_6729_i,1LL);
}



inline jule::Bool _110d9ce90_ReferenceStack::_method_exist_0(jule::Ref<_110e92c80_Var> _7227_t) {
	jule::Int _7317_i = 0LL;
	_iter_begin_4611910064:;
	if (!(_7317_i < (*this)._method_len())) { goto _iter_end_4611910064; }
	{
		jule::Any _7517_ref = (&((*this)._field_buffer))->_method_at(_7317_i);
		{
			auto _match_expr{ _7517_ref };
			if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4611913632; }
			_case_begin_4611913632:;
			{
				if ((_7517_ref.operator jule::Ref<_110e92c80_Var>()).alloc == (_7227_t).alloc) {
					return true;
				}
			}
			goto _match_end_4611911856;
			_case_end_4611913632:;
			_match_end_4611911856:;
		}
	}
	_iter_next_4611910064:;
	(_7317_i)++;
	goto _iter_begin_4611910064;
	_iter_end_4611910064:;
	return false;
}

inline jule::Bool _110d9ce90_ReferenceStack::_method_exist_1(jule::Ref<_11072eb20_FnIns> _7227_t) {
	jule::Int _7317_i = 0LL;
	_iter_begin_4611923856:;
	if (!(_7317_i < (*this)._method_len())) { goto _iter_end_4611923856; }
	{
		jule::Any _7517_ref = (&((*this)._field_buffer))->_method_at(_7317_i);
		{
			auto _match_expr{ _7517_ref };
			if (!(_match_expr.type_is<jule::Ref<_11072eb20_FnIns>>())) { goto _case_end_4611927424; }
			_case_begin_4611927424:;
			{
				if ((_7517_ref.operator jule::Ref<_11072eb20_FnIns>()).alloc == (_7227_t).alloc) {
					return true;
				}
			}
			goto _match_end_4611925648;
			_case_end_4611927424:;
			_match_end_4611925648:;
		}
	}
	_iter_next_4611923856:;
	(_7317_i)++;
	goto _iter_begin_4611923856;
	_iter_end_4611923856:;
	return false;
}

inline jule::Bool _110d9ce90_ReferenceStack::_method_exist_2(jule::Ref<_1109372e0_StructIns> _7227_t) {
	jule::Int _7317_i = 0LL;
	_iter_begin_4611966112:;
	if (!(_7317_i < (*this)._method_len())) { goto _iter_end_4611966112; }
	{
		jule::Any _7517_ref = (&((*this)._field_buffer))->_method_at(_7317_i);
		{
			auto _match_expr{ _7517_ref };
			if (!(_match_expr.type_is<jule::Ref<_1109372e0_StructIns>>())) { goto _case_end_4611969680; }
			_case_begin_4611969680:;
			{
				if ((_7517_ref.operator jule::Ref<_1109372e0_StructIns>()).alloc == (_7227_t).alloc) {
					return true;
				}
			}
			goto _match_end_4611967904;
			_case_end_4611969680:;
			_match_end_4611967904:;
		}
	}
	_iter_next_4611966112:;
	(_7317_i)++;
	goto _iter_begin_4611966112;
	_iter_end_4611966112:;
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _110d9ce90_ReferenceStack &_Src) {
	_Stream << "ReferenceStack{";
	_Stream << "buffer:" << _Src._field_buffer;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _110af2660_Scope &_Src) {
	_Stream << "Scope{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_110e4edc0_ImportInfo> _1111c15d0_SymbolTable::_method_find_package(jule::Str _2635_ident) {
	jule::Int _2717_i = 0LL;
	_iter_begin_4611603760:;
	if (!(_2717_i < (*this)._field_imports._method_len())) { goto _iter_end_4611603760; }
	{
		jule::Ref<_110e4edc0_ImportInfo> _2921_pkg = (*this)._field_imports._method_at(_2717_i);
		if (_2921_pkg->_field_ident == _2635_ident) {
			return _2921_pkg;
		}
	}
	_iter_next_4611603760:;
	(_2717_i)++;
	goto _iter_begin_4611603760;
	_iter_end_4611603760:;
	return jule::new_ref<_110e4edc0_ImportInfo>();
}



inline jule::Ref<_110e4edc0_ImportInfo> _1111c15d0_SymbolTable::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_110e4edc0_ImportInfo>)> _4037_selector) {
	if (_4037_selector == nullptr) {
		return jule::new_ref<_110e4edc0_ImportInfo>();
	}
	jule::Int _4517_i = 0LL;
	_iter_begin_4611611584:;
	if (!(_4517_i < (*this)._field_imports._method_len())) { goto _iter_end_4611611584; }
	{
		jule::Ref<_110e4edc0_ImportInfo> _4721_pkg = (*this)._field_imports._method_at(_4517_i);
		if (_4037_selector(_4721_pkg)) {
			return _4721_pkg;
		}
	}
	_iter_next_4611611584:;
	(_4517_i)++;
	goto _iter_begin_4611611584;
	_iter_end_4611611584:;
	return jule::new_ref<_110e4edc0_ImportInfo>();
}



inline jule::Ref<_110e92c80_Var> _1111c15d0_SymbolTable::_method_find_var(jule::Str _5731_ident,jule::Bool _5743_cpp_linked) {
	return (*this)._method___find_var(_5731_ident,_5743_cpp_linked,false);
}



inline jule::Ref<_1116aff70_TypeAlias> _1111c15d0_SymbolTable::_method_find_type_alias(jule::Str _6338_ident,jule::Bool _6350_cpp_linked) {
	return (*this)._method___find_type_alias(_6338_ident,_6350_cpp_linked,false);
}



inline jule::Ref<_1109372e0_Struct> _1111c15d0_SymbolTable::_method_find_struct(jule::Str _6934_ident,jule::Bool _6946_cpp_linked) {
	jule::Int _7017_i = 0LL;
	_iter_begin_4611623264:;
	if (!(_7017_i < (*this)._field_structs._method_len())) { goto _iter_end_4611623264; }
	{
		jule::Ref<_1109372e0_Struct> _7221_s = (*this)._field_structs._method_at(_7017_i);
		if ((_7221_s->_field_ident == _6934_ident) && (_7221_s->_field_cpp_linked == _6946_cpp_linked)) {
			return _7221_s;
		}
	}
	_iter_next_4611623264:;
	(_7017_i)++;
	goto _iter_begin_4611623264;
	_iter_end_4611623264:;
	return jule::new_ref<_1109372e0_Struct>();
}



inline jule::Ref<_11072eb20_Fn> _1111c15d0_SymbolTable::_method_find_fn(jule::Str _8230_ident,jule::Bool _8242_cpp_linked) {
	jule::Int _8317_i = 0LL;
	_iter_begin_4611629040:;
	if (!(_8317_i < (*this)._field_funcs._method_len())) { goto _iter_end_4611629040; }
	{
		jule::Ref<_11072eb20_Fn> _8521_f = (*this)._field_funcs._method_at(_8317_i);
		if ((_8521_f->_field_ident == _8230_ident) && (_8521_f->_field_cpp_linked == _8242_cpp_linked)) {
			return _8521_f;
		}
	}
	_iter_next_4611629040:;
	(_8317_i)++;
	goto _iter_begin_4611629040;
	_iter_end_4611629040:;
	return jule::new_ref<_11072eb20_Fn>();
}



inline jule::Ref<_110e3f160_Trait> _1111c15d0_SymbolTable::_method_find_trait(jule::Str _9533_ident) {
	jule::Int _9617_i = 0LL;
	_iter_begin_4611635984:;
	if (!(_9617_i < (*this)._field_traits._method_len())) { goto _iter_end_4611635984; }
	{
		jule::Ref<_110e3f160_Trait> _9821_t = (*this)._field_traits._method_at(_9617_i);
		if (_9821_t->_field_ident == _9533_ident) {
			return _9821_t;
		}
	}
	_iter_next_4611635984:;
	(_9617_i)++;
	goto _iter_begin_4611635984;
	_iter_end_4611635984:;
	return jule::new_ref<_110e3f160_Trait>();
}



inline jule::Ref<_110e453c0_Enum> _1111c15d0_SymbolTable::_method_find_enum(jule::Str _10832_ident) {
	jule::Int _10917_i = 0LL;
	_iter_begin_4611659152:;
	if (!(_10917_i < (*this)._field_enums._method_len())) { goto _iter_end_4611659152; }
	{
		jule::Ref<_110e453c0_Enum> _11121_e = (*this)._field_enums._method_at(_10917_i);
		if (_11121_e->_field_ident == _10832_ident) {
			return _11121_e;
		}
	}
	_iter_next_4611659152:;
	(_10917_i)++;
	goto _iter_begin_4611659152;
	_iter_end_4611659152:;
	return jule::new_ref<_110e453c0_Enum>();
}



inline jule::Ref<_110e92c80_Var> _1111c15d0_SymbolTable::_method___find_var(jule::Str _12129_ident,jule::Bool _12141_cpp_linked,jule::Bool _12159_reverse) {
	if (_12159_reverse) {
		jule::Int _12321_i = (*this)._field_vars._method_len() - 1LL;
		_iter_begin_4611669584:;
		if (!(_12321_i >= 0LL)) { goto _iter_end_4611669584; }
		{
			jule::Ref<_110e92c80_Var> _12525_v = (*this)._field_vars._method_at(_12321_i);
			if ((_12525_v->_field_ident == _12129_ident) && (_12525_v->_field_cpp_linked == _12141_cpp_linked)) {
				return _12525_v;
			}
		}
		_iter_next_4611669584:;
		(_12321_i)--;
		goto _iter_begin_4611669584;
		_iter_end_4611669584:;
	} else {
		jule::Int _13121_i = 0LL;
		_iter_begin_4611673968:;
		if (!(_13121_i < (*this)._field_vars._method_len())) { goto _iter_end_4611673968; }
		{
			jule::Ref<_110e92c80_Var> _13325_v = (*this)._field_vars._method_at(_13121_i);
			if ((_13325_v->_field_ident == _12129_ident) && (_13325_v->_field_cpp_linked == _12141_cpp_linked)) {
				return _13325_v;
			}
		}
		_iter_next_4611673968:;
		(_13121_i)++;
		goto _iter_begin_4611673968;
		_iter_end_4611673968:;
	}
	return jule::new_ref<_110e92c80_Var>();
}



inline jule::Ref<_1116aff70_TypeAlias> _1111c15d0_SymbolTable::_method___find_type_alias(jule::Str _14236_ident,jule::Bool _14248_cpp_linked,jule::Bool _14266_reverse) {
	if (_14266_reverse) {
		jule::Int _14421_i = (*this)._field_type_aliases._method_len() - 1LL;
		_iter_begin_4611682912:;
		if (!(_14421_i >= 0LL)) { goto _iter_end_4611682912; }
		{
			jule::Ref<_1116aff70_TypeAlias> _14625_ta = (*this)._field_type_aliases._method_at(_14421_i);
			if ((_14625_ta->_field_ident == _14236_ident) && (_14625_ta->_field_cpp_linked == _14248_cpp_linked)) {
				return _14625_ta;
			}
		}
		_iter_next_4611682912:;
		(_14421_i)--;
		goto _iter_begin_4611682912;
		_iter_end_4611682912:;
	} else {
		jule::Int _15221_i = 0LL;
		_iter_begin_4611687360:;
		if (!(_15221_i < (*this)._field_type_aliases._method_len())) { goto _iter_end_4611687360; }
		{
			jule::Ref<_1116aff70_TypeAlias> _15425_ta = (*this)._field_type_aliases._method_at(_15221_i);
			if ((_15425_ta->_field_ident == _14236_ident) && (_15425_ta->_field_cpp_linked == _14248_cpp_linked)) {
				return _15425_ta;
			}
		}
		_iter_next_4611687360:;
		(_15221_i)++;
		goto _iter_begin_4611687360;
		_iter_end_4611687360:;
	}
	return jule::new_ref<_1116aff70_TypeAlias>();
}



inline jule::Any _1111c15d0_SymbolTable::_method_def_by_ident(jule::Str _16531_ident,jule::Bool _16543_cpp_linked) {
	jule::Int _16617_i = 0LL;
	_iter_begin_4611693728:;
	if (!(_16617_i < (*this)._field_vars._method_len())) { goto _iter_end_4611693728; }
	{
		jule::Ref<_110e92c80_Var> _16821_v = (*this)._field_vars._method_at(_16617_i);
		if ((_16821_v->_field_ident == _16531_ident) && (_16821_v->_field_cpp_linked == _16543_cpp_linked)) {
			return jule::Any(_16821_v);
		}
	}
	_iter_next_4611693728:;
	(_16617_i)++;
	goto _iter_begin_4611693728;
	_iter_end_4611693728:;
	_16617_i=0LL;
	_iter_begin_4611697088:;
	if (!(_16617_i < (*this)._field_type_aliases._method_len())) { goto _iter_end_4611697088; }
	{
		jule::Ref<_1116aff70_TypeAlias> _17621_ta = (*this)._field_type_aliases._method_at(_16617_i);
		if ((_17621_ta->_field_ident == _16531_ident) && (_17621_ta->_field_cpp_linked == _16543_cpp_linked)) {
			return jule::Any(_17621_ta);
		}
	}
	_iter_next_4611697088:;
	(_16617_i)++;
	goto _iter_begin_4611697088;
	_iter_end_4611697088:;
	_16617_i=0LL;
	_iter_begin_4611701184:;
	if (!(_16617_i < (*this)._field_structs._method_len())) { goto _iter_end_4611701184; }
	{
		jule::Ref<_1109372e0_Struct> _18421_s = (*this)._field_structs._method_at(_16617_i);
		if ((_18421_s->_field_ident == _16531_ident) && (_18421_s->_field_cpp_linked == _16543_cpp_linked)) {
			return jule::Any(_18421_s);
		}
	}
	_iter_next_4611701184:;
	(_16617_i)++;
	goto _iter_begin_4611701184;
	_iter_end_4611701184:;
	_16617_i=0LL;
	_iter_begin_4611707840:;
	if (!(_16617_i < (*this)._field_funcs._method_len())) { goto _iter_end_4611707840; }
	{
		jule::Ref<_11072eb20_Fn> _19221_f = (*this)._field_funcs._method_at(_16617_i);
		if ((_19221_f->_field_ident == _16531_ident) && (_19221_f->_field_cpp_linked == _16543_cpp_linked)) {
			return jule::Any(_19221_f);
		}
	}
	_iter_next_4611707840:;
	(_16617_i)++;
	goto _iter_begin_4611707840;
	_iter_end_4611707840:;
	if (_16543_cpp_linked) {
		return jule::Any(nullptr);
	}
	_16617_i=0LL;
	_iter_begin_4611713536:;
	if (!(_16617_i < (*this)._field_traits._method_len())) { goto _iter_end_4611713536; }
	{
		jule::Ref<_110e3f160_Trait> _20421_t = (*this)._field_traits._method_at(_16617_i);
		if (_20421_t->_field_ident == _16531_ident) {
			return jule::Any(_20421_t);
		}
	}
	_iter_next_4611713536:;
	(_16617_i)++;
	goto _iter_begin_4611713536;
	_iter_end_4611713536:;
	_16617_i=0LL;
	_iter_begin_4611712720:;
	if (!(_16617_i < (*this)._field_enums._method_len())) { goto _iter_end_4611712720; }
	{
		jule::Ref<_110e453c0_Enum> _21221_e = (*this)._field_enums._method_at(_16617_i);
		if (_21221_e->_field_ident == _16531_ident) {
			return jule::Any(_21221_e);
		}
	}
	_iter_next_4611712720:;
	(_16617_i)++;
	goto _iter_begin_4611712720;
	_iter_end_4611712720:;
	return jule::Any(nullptr);
}



inline jule::Bool _1111c15d0_SymbolTable::_method_is_duplicated_ident(jule::Uintptr _22434_itself,jule::Str _22451_ident,jule::Bool _22463_cpp_linked) {
	jule::Int _22517_i = 0LL;
	_iter_begin_4611723472:;
	if (!(_22517_i < (*this)._field_vars._method_len())) { goto _iter_end_4611723472; }
	{
		jule::Ref<_110e92c80_Var> _22717_v = (&((*this)._field_vars))->_method_at(_22517_i);
		if (((((jule::Uintptr)((_22717_v).alloc)) != _22434_itself) && (_22717_v->_field_ident == _22451_ident)) && (_22717_v->_field_cpp_linked == _22463_cpp_linked)) {
			return true;
		}
	}
	_iter_next_4611723472:;
	(_22517_i)++;
	goto _iter_begin_4611723472;
	_iter_end_4611723472:;
	_22517_i=0LL;
	_iter_begin_4611727840:;
	if (!(_22517_i < (*this)._field_type_aliases._method_len())) { goto _iter_end_4611727840; }
	{
		jule::Ref<_1116aff70_TypeAlias> _23517_ta = (&((*this)._field_type_aliases))->_method_at(_22517_i);
		if (((((jule::Uintptr)((_23517_ta).alloc)) != _22434_itself) && (_23517_ta->_field_ident == _22451_ident)) && (_23517_ta->_field_cpp_linked == _22463_cpp_linked)) {
			return true;
		}
	}
	_iter_next_4611727840:;
	(_22517_i)++;
	goto _iter_begin_4611727840;
	_iter_end_4611727840:;
	_22517_i=0LL;
	_iter_begin_4611733184:;
	if (!(_22517_i < (*this)._field_structs._method_len())) { goto _iter_end_4611733184; }
	{
		jule::Ref<_1109372e0_Struct> _24317_s = (&((*this)._field_structs))->_method_at(_22517_i);
		if (((((jule::Uintptr)((_24317_s).alloc)) != _22434_itself) && (_24317_s->_field_ident == _22451_ident)) && (_24317_s->_field_cpp_linked == _22463_cpp_linked)) {
			return true;
		}
	}
	_iter_next_4611733184:;
	(_22517_i)++;
	goto _iter_begin_4611733184;
	_iter_end_4611733184:;
	_22517_i=0LL;
	_iter_begin_4611738464:;
	if (!(_22517_i < (*this)._field_funcs._method_len())) { goto _iter_end_4611738464; }
	{
		jule::Ref<_11072eb20_Fn> _25117_f = (&((*this)._field_funcs))->_method_at(_22517_i);
		if (((((jule::Uintptr)((_25117_f).alloc)) != _22434_itself) && (_25117_f->_field_ident == _22451_ident)) && (_25117_f->_field_cpp_linked == _22463_cpp_linked)) {
			return true;
		}
	}
	_iter_next_4611738464:;
	(_22517_i)++;
	goto _iter_begin_4611738464;
	_iter_end_4611738464:;
	if (_22463_cpp_linked) {
		return false;
	}
	_22517_i=0LL;
	_iter_begin_4611743808:;
	if (!(_22517_i < (*this)._field_traits._method_len())) { goto _iter_end_4611743808; }
	{
		jule::Ref<_110e3f160_Trait> _26317_t = (&((*this)._field_traits))->_method_at(_22517_i);
		if ((((jule::Uintptr)((_26317_t).alloc)) != _22434_itself) && (_26317_t->_field_ident == _22451_ident)) {
			return true;
		}
	}
	_iter_next_4611743808:;
	(_22517_i)++;
	goto _iter_begin_4611743808;
	_iter_end_4611743808:;
	_22517_i=0LL;
	_iter_begin_4611746080:;
	if (!(_22517_i < (*this)._field_enums._method_len())) { goto _iter_end_4611746080; }
	{
		jule::Ref<_110e453c0_Enum> _27117_e = (&((*this)._field_enums))->_method_at(_22517_i);
		if ((((jule::Uintptr)((_27117_e).alloc)) != _22434_itself) && (_27117_e->_field_ident == _22451_ident)) {
			return true;
		}
	}
	_iter_next_4611746080:;
	(_22517_i)++;
	goto _iter_begin_4611746080;
	_iter_end_4611746080:;
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1111c15d0_SymbolTable &_Src) {
	_Stream << "SymbolTable{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "imports:" << _Src._field_imports << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "type_aliases:" << _Src._field_type_aliases << ", ";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "funcs:" << _Src._field_funcs << ", ";
	_Stream << "traits:" << _Src._field_traits << ", ";
	_Stream << "enums:" << _Src._field_enums << ", ";
	_Stream << "impls:" << _Src._field_impls;
	_Stream << "}";
	return _Stream;
}



inline jule::Int _117e8bf60_get_last_errno(void) {
	return errno;
}



inline jule::Str _117e8d290_byte_ptr_to_str(jule::U8* _4831_s) {
	if (_4831_s == nullptr) {
		return jule::Str("", 0);
	}
	return __jule_str_from_byte_ptr(_4831_s);
}



inline jule::Int _117e8d290_stat(jule::U8* _5620_path,struct stat* _5637_stat) {
	return static_cast<jule::Int>(__jule_stat(((char*)(_5620_path)),_5637_stat));
}



inline jule::Int _117e8d290_open(jule::U8* _6120_path,jule::Int _6133_flag,jule::Int _6144_mode) {
	return static_cast<jule::Int>(open(((char*)(_6120_path)),_6133_flag,_6144_mode));
}



inline jule::U8* _117e8d290_getcwd(jule::U8* _6722_buff,jule::Uint _6735_bufflen) {
	return ((jule::U8*)(getcwd(((char*)(_6722_buff)),_6735_bufflen)));
}



inline DIR* _117e8d290_opendir(jule::U8* _7223_path) {
	return opendir(((char*)(_7223_path)));
}



inline struct dirent* _117e8d290_readdir(DIR* _7527_dir) {
	return readdir(_7527_dir);
}



inline jule::Int _117e8d290_closedir(DIR* _7828_dir) {
	return static_cast<jule::Int>(closedir(_7828_dir));
}



inline jule::Int _117e8d290_chdir(jule::U8* _8121_path) {
	return static_cast<jule::Int>(chdir(((char*)(_8121_path))));
}



inline jule::Int _117e8d290_remove(jule::U8* _8422_path) {
	return static_cast<jule::Int>(remove(((char*)(_8422_path))));
}



inline jule::Int _117e8d290_mkdir(jule::U8* _8721_path,jule::Int _8734_mode) {
	return static_cast<jule::Int>(mkdir(((char*)(_8721_path)),_8734_mode));
}



inline jule::Int _117e8d290_rmdir(jule::U8* _9221_path) {
	return static_cast<jule::Int>(rmdir(((char*)(_9221_path))));
}



inline jule::Int _117e8d290_unlink(jule::U8* _9522_path) {
	return static_cast<jule::Int>(unlink(((char*)(_9522_path))));
}



inline jule::I64 _117eb6970_seek(jule::Int _2613_handle,jule::I64 _2626_offset,jule::Int _2639_origin) {
	return static_cast<jule::I64>(lseek(_2613_handle,_2626_offset,_2639_origin));
}



inline jule::Int _117eb6970_read(jule::Int _3120_handle,void* _3137_buff,jule::Uint _3152_n) {
	return static_cast<jule::Int>(read(_3120_handle,_3137_buff,_3152_n));
}



inline jule::Int _117eb6970_close(jule::Int _3614_handle) {
	return static_cast<jule::Int>(close(_3614_handle));
}



inline jule::Int _117eb6970_write(jule::Int _3921_handle,void* _3934_buff,jule::Uint _3949_n) {
	return static_cast<jule::Int>(write(_3921_handle,_3934_buff,_3949_n));
}



inline void _117eb6970_exit(jule::Int _4413_code) {
	exit(_4413_code);
}



inline void* _117e92660_malloc(jule::Uint _1515_size) {
	return malloc(_1515_size);
}



inline void* _117e92660_calloc(jule::Uint _1915_size,jule::Uint _1927_n) {
	return calloc(_1915_size,_1927_n);
}



inline void* _117e92660_realloc(void* _2427_ptr,jule::Uint _2441_size) {
	return realloc(_2427_ptr,_2441_size);
}



inline void _117e92660_free(void* _2924_ptr) {
	free(_2924_ptr);
}



inline jule::Int _117e750c0_get_last_os_error(void) {
	jule::Int _319_err = _117e8bf60_get_last_errno();
	{
		auto _match_expr{ _319_err };
		if (!((13LL) == _match_expr)) { goto _case_end_4593572096; }
		_case_begin_4593572096:;
		{
			return 1LLU;
		}
		goto _match_end_4593570704;
		_case_end_4593572096:;
		if (!((5LL) == _match_expr)) { goto _case_end_4593572208; }
		_case_begin_4593572208:;
		{
			return 2LLU;
		}
		goto _match_end_4593570704;
		_case_end_4593572208:;
		if (!((62LL) == _match_expr)) { goto _case_end_4593572320; }
		_case_begin_4593572320:;
		{
			return 3LLU;
		}
		goto _match_end_4593570704;
		_case_end_4593572320:;
		if (!((63LL) == _match_expr)) { goto _case_end_4593571536; }
		_case_begin_4593571536:;
		{
			return 4LLU;
		}
		goto _match_end_4593570704;
		_case_end_4593571536:;
		if (!((2LL) == _match_expr)) { goto _case_end_4593571648; }
		_case_begin_4593571648:;
		{
			return 5LLU;
		}
		goto _match_end_4593570704;
		_case_end_4593571648:;
		if (!((20LL) == _match_expr)) { goto _case_end_4593571760; }
		_case_begin_4593571760:;
		{
			return 6LLU;
		}
		goto _match_end_4593570704;
		_case_end_4593571760:;
		if (!((12LL) == _match_expr)) { goto _case_end_4593572704; }
		_case_begin_4593572704:;
		{
			return 7LLU;
		}
		goto _match_end_4593570704;
		_case_end_4593572704:;
		_case_begin_4593571232:;
		{
			return 0LLU;
		}
		goto _match_end_4593570704;
		_case_end_4593571232:;
		_match_end_4593570704:;
	}
}



inline std::tuple<jule::Str,jule::Int> _117e7c8c0_working_dir(void) {
	jule::Str _3410_p;
	jule::Int _3413_err;
	std::tie(_3410_p,_3413_err) = _117e79ab0___getwd();
	return std::make_tuple(_3410_p,_3413_err);
}



inline jule::Int _117e7c8c0_set_working_dir(jule::Str _4324_path) {
	if (_4324_path == jule::Str("", 0)) {
		return 6LLU;
	}
	return _117e79ab0___chdir(_4324_path);
}



inline void _117e7c8c0_init(void) {
	{
		(*((&(_117e7c8c0_ARGS))))=jule::command_line_args;
		(*((&(_117e7c8c0_ENV))))=jule::environment_variables;
	}
}



inline std::tuple<jule::Str,jule::Int> _117e79ab0___getwd(void) {
	jule::U8* _1513_buff = _117e8d290_getcwd(nullptr,0LLU);
	if (_1513_buff == nullptr) {
		return std::make_tuple(jule::Str("", 0),_117e750c0_get_last_os_error());
	}
	jule::Str _199_pwd = _117e8d290_byte_ptr_to_str(_1513_buff);
	{
		_117e92660_free(_1513_buff);
	}
	return std::make_tuple(_199_pwd,0LLU);
}



inline jule::Int _117e79ab0___chdir(jule::Str _2612_path) {
	if (_117e8d290_chdir((&(_2612_path[0LL]))) == 0LL) {
		return 0LLU;
	}
	return _117e750c0_get_last_os_error();
}



inline jule::Str _117e1d320_clean(jule::Str _10718_path) {
	jule::Str _1089_original_path = _10718_path;
	jule::Int _1099_vol_len = _117e12d90_volume_name_len(_10718_path);
	_10718_path=_10718_path.slice(static_cast<jule::Int>(_1099_vol_len));
	if (_10718_path == jule::Str("", 0)) {
		if (((_1099_vol_len > 1LL) && _117e12d90_is_path_sep(_1089_original_path[0LL])) && _117e12d90_is_path_sep(_1089_original_path[1LL])) {
			return _117e1d320_from_slash(_1089_original_path);
		}
		return _1089_original_path + jule::Str(".", 1);
	}
	jule::Bool _1189_rooted = _117e12d90_is_path_sep(_10718_path[0LL]);
	jule::I64 _1259_n = _10718_path.len();
	_117e1d320_LazyBuff _12613_out = _117e1d320_LazyBuff(_10718_path,jule::Slice<jule::U8>(),jule::Int(),_1089_original_path,_1099_vol_len);
	jule::Int _13114_r = 0LL;
	jule::Int _13121_dotdot = 0LL;
	std::tie(_13114_r,_13121_dotdot) = std::make_tuple(0LL,0LL);
	if (_1189_rooted) {
		_12613_out._method_append(47LLU);
		std::tie(_13114_r,_13121_dotdot) = std::make_tuple(1LL,1LL);
	}
	_iter_begin_4593634672:;
	if (!(_13114_r < _1259_n)) { goto _iter_end_4593634672; }
	{
		{
			if (!((_117e12d90_is_path_sep(_10718_path[static_cast<jule::Int>(_13114_r)])))) { goto _case_end_4593649776; }
			_case_begin_4593649776:;
			{
				(_13114_r)++;
			}
			goto _match_end_4593635840;
			_case_end_4593649776:;
			if (!(((_10718_path[static_cast<jule::Int>(_13114_r)] == '.') && (((_13114_r + 1LL) == _1259_n) || _117e12d90_is_path_sep(_10718_path[static_cast<jule::Int>(_13114_r + 1LL)]))))) { goto _case_end_4593649888; }
			_case_begin_4593649888:;
			{
				(_13114_r)++;
			}
			goto _match_end_4593635840;
			_case_end_4593649888:;
			if (!((((_10718_path[static_cast<jule::Int>(_13114_r)] == '.') && (_10718_path[static_cast<jule::Int>(_13114_r + 1LL)] == '.')) && (((_13114_r + 2LL) == _1259_n) || _117e12d90_is_path_sep(_10718_path[static_cast<jule::Int>(_13114_r + 2LL)]))))) { goto _case_end_4593650000; }
			_case_begin_4593650000:;
			{
				_13114_r+=2LL;
				{
					if (!((_12613_out._field_w > _13121_dotdot))) { goto _case_end_4593654032; }
					_case_begin_4593654032:;
					{
						(_12613_out._field_w)--;
						_iter_begin_4593659408:;
						if (!((_12613_out._field_w > _13121_dotdot) && (!(_117e12d90_is_path_sep(static_cast<jule::U8>(_12613_out._method_index(_12613_out._field_w))))))) { goto _iter_end_4593659408; }
						{
							(_12613_out._field_w)--;
						}
						_iter_next_4593659408:;
						goto _iter_begin_4593659408;
						_iter_end_4593659408:;
					}
					goto _match_end_4593654864;
					_case_end_4593654032:;
					if (!(((!(_1189_rooted))))) { goto _case_end_4593657472; }
					_case_begin_4593657472:;
					{
						if (_12613_out._field_w > 0LL) {
							_12613_out._method_append(47LLU);
						}
						_12613_out._method_append('.');
						_12613_out._method_append('.');
						_13121_dotdot=_12613_out._field_w;
					}
					goto _match_end_4593654864;
					_case_end_4593657472:;
					_match_end_4593654864:;
				}
			}
			goto _match_end_4593635840;
			_case_end_4593650000:;
			_case_begin_4593635936:;
			{
				if ((_1189_rooted && (_12613_out._field_w != 1LL)) || ((!(_1189_rooted)) && (_12613_out._field_w != 0LL))) {
					_12613_out._method_append(47LLU);
				}
				if (((false && (_12613_out._field_w == 0LL)) && (_12613_out._field_vol_len == 0LL)) && (_13114_r != 0LL)) {
					jule::Int _17425_i = _13114_r;
					_iter_begin_4593640176:;
					if (!((_17425_i < _1259_n) && (!(_117e12d90_is_path_sep(_10718_path[static_cast<jule::Int>(_17425_i)]))))) { goto _iter_end_4593640176; }
					{
						if (_10718_path[static_cast<jule::Int>(_17425_i)] == ':') {
							_12613_out._method_append('.');
							_12613_out._method_append(47LLU);
							goto _iter_end_4593640176;
						}
					}
					_iter_next_4593640176:;
					(_17425_i)++;
					goto _iter_begin_4593640176;
					_iter_end_4593640176:;
				}
				_iter_begin_4593640496:;
				if (!((_13114_r < _1259_n) && (!(_117e12d90_is_path_sep(_10718_path[static_cast<jule::Int>(_13114_r)]))))) { goto _iter_end_4593640496; }
				{
					_12613_out._method_append(_10718_path[static_cast<jule::Int>(_13114_r)]);
				}
				_iter_next_4593640496:;
				(_13114_r)++;
				goto _iter_begin_4593640496;
				_iter_end_4593640496:;
			}
			goto _match_end_4593635840;
			_case_end_4593635936:;
			_match_end_4593635840:;
		}
	}
	_iter_next_4593634672:;
	goto _iter_begin_4593634672;
	_iter_end_4593634672:;
	if (_12613_out._field_w == 0LL) {
		_12613_out._method_append('.');
	}
	return _117e1d320_from_slash(_12613_out._method_string());
}



inline jule::Str _117e1d320_to_slash(jule::Str _20017_path) {
	if (true) {
		return _20017_path;
	}
	return _20017_path.replace(static_cast<jule::Str>(47LL),jule::Str("/", 1),-1LL);
}



inline jule::Str _117e1d320_from_slash(jule::Str _21019_path) {
	if (true) {
		return _21019_path;
	}
	return _21019_path.replace(jule::Str("/", 1),static_cast<jule::Str>(47LL),-1LL);
}



inline jule::Str _117e1d320_join(jule::Slice<jule::Str> _22413_elem) {
	return _117e12d90___join(_22413_elem);
}



inline jule::Str _117e1d320_ext(jule::Str _22912_path) {
	jule::I64 _23013_i = _22912_path.len() - 1LL;
	_iter_begin_4593673520:;
	if (!((_23013_i >= 0LL) && (!(_117e12d90_is_path_sep(_22912_path[static_cast<jule::Int>(_23013_i)]))))) { goto _iter_end_4593673520; }
	{
		if (_22912_path[static_cast<jule::Int>(_23013_i)] == '.') {
			return _22912_path.slice(static_cast<jule::Int>(_23013_i));
		}
	}
	_iter_next_4593673520:;
	(_23013_i)--;
	goto _iter_begin_4593673520;
	_iter_end_4593673520:;
	return jule::Str("", 0);
}



inline std::tuple<jule::Str,jule::Bool> _117e1d320_abs(jule::Str _24412_path) {
	jule::Str _24510_abs_path;
	jule::Bool _24520_ok;
	std::tie(_24510_abs_path,_24520_ok) = _117e12d90___abs(_24412_path);
	return std::make_tuple(_24510_abs_path,_24520_ok);
}



inline jule::Str _117e1d320_base(jule::Str _25317_path) {
	if (_25317_path == jule::Str("", 0)) {
		return jule::Str(".", 1);
	}
	_iter_begin_4593687568:;
	if (!((_25317_path.len() > 0LL) && _117e12d90_is_path_sep(_25317_path[static_cast<jule::Int>(_25317_path.len() - 1LL)]))) { goto _iter_end_4593687568; }
	{
		_25317_path=_25317_path.slice(0LL,static_cast<jule::Int>(_25317_path.len() - 1LL));
	}
	_iter_next_4593687568:;
	goto _iter_begin_4593687568;
	_iter_end_4593687568:;
	_25317_path=_25317_path.slice(static_cast<jule::Int>(_117e1d320_volume_name(_25317_path).len()));
	jule::I64 _26413_i = _25317_path.len() - 1LL;
	_iter_begin_4593687648:;
	if (!((_26413_i >= 0LL) && (!(_117e12d90_is_path_sep(_25317_path[static_cast<jule::Int>(_26413_i)]))))) { goto _iter_end_4593687648; }
	{
		(_26413_i)--;
	}
	_iter_next_4593687648:;
	goto _iter_begin_4593687648;
	_iter_end_4593687648:;
	if (_26413_i >= 0LL) {
		_25317_path=_25317_path.slice(static_cast<jule::Int>(_26413_i + 1LL));
	}
	if (_25317_path == jule::Str("", 0)) {
		return static_cast<jule::Str>(47LL);
	}
	return _25317_path;
}



inline jule::Str _117e1d320_dir(jule::Str _28412_path) {
	jule::Str _2859_vol = _117e1d320_volume_name(_28412_path);
	jule::I64 _28613_i = _28412_path.len() - 1LL;
	_iter_begin_4593699392:;
	if (!((_28613_i >= _2859_vol.len()) && (!(_117e12d90_is_path_sep(_28412_path[static_cast<jule::Int>(_28613_i)]))))) { goto _iter_end_4593699392; }
	{
		(_28613_i)--;
	}
	_iter_next_4593699392:;
	goto _iter_begin_4593699392;
	_iter_end_4593699392:;
	jule::Str _2909_dir = _117e1d320_clean(_28412_path.slice(static_cast<jule::Int>(_2859_vol.len()),static_cast<jule::Int>(_28613_i + 1LL)));
	if ((_2909_dir == jule::Str(".", 1)) && (_2859_vol.len() > 2LL)) {
		return _2859_vol;
	}
	return _2859_vol + _2909_dir;
}



inline jule::Str _117e1d320_volume_name(jule::Str _30220_path) {
	return _117e1d320_from_slash(_30220_path.slice(0LL,static_cast<jule::Int>(_117e12d90_volume_name_len(_30220_path))));
}



inline jule::Bool _117e12d90_is_path_sep(jule::U8 _4720_c) {
	return 47LL == _4720_c;
}



inline jule::Bool _117e12d90_is_abs(jule::Str _5215_path) {
	return _5215_path.has_prefix(jule::Str("/", 1));
}



inline jule::Int _117e12d90_volume_name_len(jule::Str _5620_path) {
	return 0LL;
}



inline std::tuple<jule::Str,jule::Bool> _117e12d90___abs(jule::Str _5810_path) {
	jule::Bool _5828_ok = jule::Bool();
	if (_117e12d90_is_abs(_5810_path)) {
		_5828_ok = true;
		return std::make_tuple(_117e1d320_clean(_5810_path),_5828_ok);
	}
	jule::Str _6210_wd;
	jule::Int _6214_err;
	std::tie(_6210_wd,_6214_err) = _117e7c8c0_working_dir();
	if (_6214_err != 0LLU) {
		_5828_ok = false;
		return std::make_tuple(jule::Str("", 0),_5828_ok);
	}
	_5828_ok = true;
	return std::make_tuple(_117e12d90___join(jule::Slice<jule::Str>({_6210_wd,_5810_path})),_5828_ok);
}



inline jule::Str _117e12d90_str_join(jule::Slice<jule::Str> _6913_elems,jule::Str _6927_sep) {
	{
		auto _match_expr{ _6913_elems.len() };
		if (!((0LL) == _match_expr)) { goto _case_end_4593722432; }
		_case_begin_4593722432:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4593721664;
		_case_end_4593722432:;
		if (!((1LL) == _match_expr)) { goto _case_end_4593722544; }
		_case_begin_4593722544:;
		{
			return _6913_elems[0LL];
		}
		goto _match_end_4593721664;
		_case_end_4593722544:;
		_match_end_4593721664:;
	}
	jule::Str _7513_s = _6913_elems[0LL];
	{
		auto __julec_range_expr = _6913_elems.slice(1LL);
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _117e12d90_elem = *__julec_range_begin;
			_iter_begin_4593724688:;
			{
				_7513_s+=_6927_sep + _117e12d90_elem;
			}
			_iter_next_4593724688:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _117e12d90_elem = *__julec_range_begin; goto _iter_begin_4593724688; }
			_iter_end_4593724688:;
		}
	}
	return _7513_s;
}



inline jule::Str _117e12d90___join(jule::Slice<jule::Str> _8211_elem) {
	{
		auto __julec_range_expr = _8211_elem;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _117e12d90_i = 0;
			jule::Str _117e12d90_e = *__julec_range_begin;
			_iter_begin_4593727504:;
			{
				if (_117e12d90_e != jule::Str("", 0)) {
					return _117e1d320_clean(_117e12d90_str_join(_8211_elem.slice(static_cast<jule::Int>(_117e12d90_i)),static_cast<jule::Str>(47LL)));
				}
			}
			_iter_next_4593727504:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_117e12d90_i; _117e12d90_e = *__julec_range_begin; goto _iter_begin_4593727504; }
			_iter_end_4593727504:;
		}
	}
	return jule::Str("", 0);
}



inline jule::Int _110621fc0_leading_zeros(jule::Uint _4922_x) {
	return static_cast<jule::Int>(64LL - _110621fc0_len(_4922_x));
}



inline jule::Int _110621fc0_leading_zeros8(jule::U8 _5223_x) {
	return static_cast<jule::Int>(8LL - _110621fc0_len8(_5223_x));
}



inline jule::Int _110621fc0_leading_zeros16(jule::U16 _5524_x) {
	return static_cast<jule::Int>(16LL - _110621fc0_len16(_5524_x));
}



inline jule::Int _110621fc0_leading_zeros32(jule::U32 _5824_x) {
	return static_cast<jule::Int>(32LL - _110621fc0_len32(_5824_x));
}



inline jule::Int _110621fc0_leading_zeros64(jule::U64 _6124_x) {
	return static_cast<jule::Int>(64LL - _110621fc0_len64(_6124_x));
}



inline jule::Int _110621fc0_trailing_zeros(jule::Uint _8323_x) {
	if (false) {
		return static_cast<jule::Int>(_110621fc0_trailing_zeros32(static_cast<jule::U32>(_8323_x)));
	}
	return static_cast<jule::Int>(_110621fc0_trailing_zeros64(static_cast<jule::U64>(_8323_x)));
}



inline jule::Int _110621fc0_trailing_zeros8(jule::U8 _9124_x) {
	return static_cast<jule::Int>(jule::Str("\b\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\5\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\6\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\5\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\a\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\5\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\6\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\5\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00", 256)[static_cast<jule::Int>(_9124_x)]);
}



inline jule::Int _110621fc0_trailing_zeros16(jule::U16 _9625_x) {
	if (_9625_x == 0LL) {
		return 16LL;
	}
	return static_cast<jule::Int>(_110621fc0_DE_BRUIJN32_TAB[static_cast<jule::Int>((static_cast<jule::U32>(_9625_x & (-(_9625_x))) * 125613361LL) >> 27LL)]);
}



inline jule::Int _110621fc0_trailing_zeros32(jule::U32 _10525_x) {
	if (_10525_x == 0LL) {
		return 32LL;
	}
	return static_cast<jule::Int>(_110621fc0_DE_BRUIJN32_TAB[static_cast<jule::Int>(((_10525_x & (-(_10525_x))) * 125613361LL) >> 27LL)]);
}



inline jule::Int _110621fc0_trailing_zeros64(jule::U64 _11425_x) {
	if (_11425_x == 0LL) {
		return 64LL;
	}
	return static_cast<jule::Int>(_110621fc0_DE_BRUIJN64_TAB[static_cast<jule::Int>(((_11425_x & (-(_11425_x))) * 285870213051353865LL) >> 58LL)]);
}



inline jule::Int _110621fc0_ones_count(jule::Uint _14119_x) {
	if (false) {
		return static_cast<jule::Int>(_110621fc0_ones_count32(static_cast<jule::U32>(_14119_x)));
	}
	return static_cast<jule::Int>(_110621fc0_ones_count64(static_cast<jule::U64>(_14119_x)));
}



inline jule::Int _110621fc0_ones_count8(jule::U8 _14920_x) {
	return static_cast<jule::Int>(jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_14920_x)]);
}



inline jule::Int _110621fc0_ones_count16(jule::U16 _15421_x) {
	return static_cast<jule::Int>(jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_15421_x >> 8LL)] + jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_15421_x & 255LL)]);
}



inline jule::Int _110621fc0_ones_count32(jule::U32 _15921_x) {
	return static_cast<jule::Int>(((jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_15921_x >> 24LL)] + jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>((_15921_x >> 16LL) & 255LL)]) + jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>((_15921_x >> 8LL) & 255LL)]) + jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_15921_x & 255LL)]);
}



inline jule::Int _110621fc0_ones_count64(jule::U64 _16425_x) {
	
	_16425_x=static_cast<jule::U64>(((_16425_x >> 1LL) & 6148914691236517205LL) + (_16425_x & 6148914691236517205LL));
	_16425_x=static_cast<jule::U64>(((_16425_x >> 2LL) & 3689348814741910323LL) + (_16425_x & 3689348814741910323LL));
	_16425_x=static_cast<jule::U64>(((_16425_x >> 4LL) + _16425_x) & 1085102592571150095LL);
	_16425_x+=static_cast<jule::U64>(_16425_x >> 8LL);
	_16425_x+=static_cast<jule::U64>(_16425_x >> 16LL);
	_16425_x+=static_cast<jule::U64>(_16425_x >> 32LL);
	return static_cast<jule::Int>(static_cast<jule::Int>(_16425_x) & 127LLU);
}



inline jule::Uint _110621fc0_rotate_left(jule::Uint _20020_x,jule::Int _20029_k) {
	if (false) {
		return static_cast<jule::Uint>(_110621fc0_rotate_left32(static_cast<jule::U32>(_20020_x),_20029_k));
	}
	return static_cast<jule::Uint>(_110621fc0_rotate_left64(static_cast<jule::U64>(_20020_x),_20029_k));
}



inline jule::U8 _110621fc0_rotate_left8(jule::U8 _21121_x,jule::Int _21128_k) {
	
	jule::Uint _2139_s = static_cast<jule::Uint>(_21128_k) & 7LL;
	return static_cast<jule::U8>((_21121_x << _2139_s) | (_21121_x >> (8LL - _2139_s)));
}



inline jule::U16 _110621fc0_rotate_left16(jule::U16 _22122_x,jule::Int _22130_k) {
	
	jule::Uint _2239_s = static_cast<jule::Uint>(_22130_k) & 15LL;
	return static_cast<jule::U16>((_22122_x << _2239_s) | (_22122_x >> (16LL - _2239_s)));
}



inline jule::U32 _110621fc0_rotate_left32(jule::U32 _23122_x,jule::Int _23130_k) {
	
	jule::Uint _2339_s = static_cast<jule::Uint>(_23130_k) & 31LL;
	return static_cast<jule::U32>((_23122_x << _2339_s) | (_23122_x >> (32LL - _2339_s)));
}



inline jule::U64 _110621fc0_rotate_left64(jule::U64 _24122_x,jule::Int _24130_k) {
	
	jule::Uint _2439_s = static_cast<jule::Uint>(_24130_k) & 63LL;
	return static_cast<jule::U64>((_24122_x << _2439_s) | (_24122_x >> (64LL - _2439_s)));
}



inline jule::Uint _110621fc0_reverse(jule::Uint _25016_x) {
	if (false) {
		return static_cast<jule::Uint>(_110621fc0_reverse32(static_cast<jule::U32>(_25016_x)));
	}
	return static_cast<jule::Uint>(_110621fc0_reverse64(static_cast<jule::U64>(_25016_x)));
}



inline jule::U8 _110621fc0_reverse8(jule::U8 _25817_x) {
	return static_cast<jule::U8>(jule::Str("\x00\302\200@\303\200 \302\240`\303\240\020\302\220P\303\2200\302\260p\303\260\b\302\210H\303\210(\302\250h\303\250\030\302\230X\303\2308\302\270x\303\270\4\302\204D\303\204$\302\244d\303\244\024\302\224T\303\2244\302\264t\303\264\f\302\214L\303\214,\302\254l\303\254\034\302\234\\\303\234<\302\274|\303\274\2\302\202B\303\202\"\302\242b\303\242\022\302\222R\303\2222\302\262r\303\262\n\302\212J\303\212*\302\252j\303\252\032\302\232Z\303\232:\302\272z\303\272\6\302\206F\303\206&\302\246f\303\246\026\302\226V\303\2266\302\266v\303\266\016\302\216N\303\216.\302\256n\303\256\036\302\236^\303\236>\302\276~\303\276\1\302\201A\303\201!\302\241a\303\241\021\302\221Q\303\2211\302\261q\303\261\t\302\211I\303\211)\302\251i\303\251\031\302\231Y\303\2319\302\271y\303\271\5\302\205E\303\205%\302\245e\303\245\025\302\225U\303\2255\302\265u\303\265\r\302\215M\303\215-\302\255m\303\255\035\302\235]\303\235=\302\275}\303\275\3\302\203C\303\203#\302\243c\303\243\023\302\223S\303\2233\302\263s\303\263\v\302\213K\303\213+\302\253k\303\253\033\302\233[\303\233;\302\273{\303\273\a\302\207G\303\207'\302\247g\303\247\027\302\227W\303\2277\302\267w\303\267\017\302\217O\303\217/\302\257o\303\257\037\302\237_\303\237?\302\277\177\303\277", 384)[static_cast<jule::Int>(_25817_x)]);
}



inline jule::U16 _110621fc0_reverse16(jule::U16 _26318_x) {
	return static_cast<jule::U16>(static_cast<jule::U16>(jule::Str("\x00\302\200@\303\200 \302\240`\303\240\020\302\220P\303\2200\302\260p\303\260\b\302\210H\303\210(\302\250h\303\250\030\302\230X\303\2308\302\270x\303\270\4\302\204D\303\204$\302\244d\303\244\024\302\224T\303\2244\302\264t\303\264\f\302\214L\303\214,\302\254l\303\254\034\302\234\\\303\234<\302\274|\303\274\2\302\202B\303\202\"\302\242b\303\242\022\302\222R\303\2222\302\262r\303\262\n\302\212J\303\212*\302\252j\303\252\032\302\232Z\303\232:\302\272z\303\272\6\302\206F\303\206&\302\246f\303\246\026\302\226V\303\2266\302\266v\303\266\016\302\216N\303\216.\302\256n\303\256\036\302\236^\303\236>\302\276~\303\276\1\302\201A\303\201!\302\241a\303\241\021\302\221Q\303\2211\302\261q\303\261\t\302\211I\303\211)\302\251i\303\251\031\302\231Y\303\2319\302\271y\303\271\5\302\205E\303\205%\302\245e\303\245\025\302\225U\303\2255\302\265u\303\265\r\302\215M\303\215-\302\255m\303\255\035\302\235]\303\235=\302\275}\303\275\3\302\203C\303\203#\302\243c\303\243\023\302\223S\303\2233\302\263s\303\263\v\302\213K\303\213+\302\253k\303\253\033\302\233[\303\233;\302\273{\303\273\a\302\207G\303\207'\302\247g\303\247\027\302\227W\303\2277\302\267w\303\267\017\302\217O\303\217/\302\257o\303\257\037\302\237_\303\237?\302\277\177\303\277", 384)[static_cast<jule::Int>(_26318_x >> 8LL)]) | (static_cast<jule::U16>(jule::Str("\x00\302\200@\303\200 \302\240`\303\240\020\302\220P\303\2200\302\260p\303\260\b\302\210H\303\210(\302\250h\303\250\030\302\230X\303\2308\302\270x\303\270\4\302\204D\303\204$\302\244d\303\244\024\302\224T\303\2244\302\264t\303\264\f\302\214L\303\214,\302\254l\303\254\034\302\234\\\303\234<\302\274|\303\274\2\302\202B\303\202\"\302\242b\303\242\022\302\222R\303\2222\302\262r\303\262\n\302\212J\303\212*\302\252j\303\252\032\302\232Z\303\232:\302\272z\303\272\6\302\206F\303\206&\302\246f\303\246\026\302\226V\303\2266\302\266v\303\266\016\302\216N\303\216.\302\256n\303\256\036\302\236^\303\236>\302\276~\303\276\1\302\201A\303\201!\302\241a\303\241\021\302\221Q\303\2211\302\261q\303\261\t\302\211I\303\211)\302\251i\303\251\031\302\231Y\303\2319\302\271y\303\271\5\302\205E\303\205%\302\245e\303\245\025\302\225U\303\2255\302\265u\303\265\r\302\215M\303\215-\302\255m\303\255\035\302\235]\303\235=\302\275}\303\275\3\302\203C\303\203#\302\243c\303\243\023\302\223S\303\2233\302\263s\303\263\v\302\213K\303\213+\302\253k\303\253\033\302\233[\303\233;\302\273{\303\273\a\302\207G\303\207'\302\247g\303\247\027\302\227W\303\2277\302\267w\303\267\017\302\217O\303\217/\302\257o\303\257\037\302\237_\303\237?\302\277\177\303\277", 384)[static_cast<jule::Int>(_26318_x & 255LL)]) << 8LL));
}



inline jule::U32 _110621fc0_reverse32(jule::U32 _26822_x) {
	
	_26822_x=static_cast<jule::U32>(((_26822_x >> 1LL) & 1431655765LL) | ((_26822_x & 1431655765LL) << 1LL));
	_26822_x=static_cast<jule::U32>(((_26822_x >> 2LL) & 858993459LL) | ((_26822_x & 858993459LL) << 2LL));
	_26822_x=static_cast<jule::U32>(((_26822_x >> 4LL) & 252645135LL) | ((_26822_x & 252645135LL) << 4LL));
	return static_cast<jule::U32>(_110621fc0_reverse_bytes32(_26822_x));
}



inline jule::U64 _110621fc0_reverse64(jule::U64 _27722_x) {
	
	_27722_x=static_cast<jule::U64>(((_27722_x >> 1LL) & 6148914691236517205LL) | ((_27722_x & 6148914691236517205LL) << 1LL));
	_27722_x=static_cast<jule::U64>(((_27722_x >> 2LL) & 3689348814741910323LL) | ((_27722_x & 3689348814741910323LL) << 2LL));
	_27722_x=static_cast<jule::U64>(((_27722_x >> 4LL) & 1085102592571150095LL) | ((_27722_x & 1085102592571150095LL) << 4LL));
	return static_cast<jule::U64>(_110621fc0_reverse_bytes64(_27722_x));
}



inline jule::Uint _110621fc0_reverse_bytes(jule::Uint _29022_x) {
	if (false) {
		return static_cast<jule::Uint>(_110621fc0_reverse_bytes32(static_cast<jule::U32>(_29022_x)));
	}
	return static_cast<jule::Uint>(_110621fc0_reverse_bytes64(static_cast<jule::U64>(_29022_x)));
}



inline jule::U16 _110621fc0_reverse_bytes16(jule::U16 _30024_x) {
	return static_cast<jule::U16>((_30024_x >> 8LL) | (_30024_x << 8LL));
}



inline jule::U32 _110621fc0_reverse_bytes32(jule::U32 _30728_x) {
	
	_30728_x=static_cast<jule::U32>(((_30728_x >> 8LL) & 16711935LL) | ((_30728_x & 16711935LL) << 8LL));
	return static_cast<jule::U32>((_30728_x >> 16LL) | (_30728_x << 16LL));
}



inline jule::U64 _110621fc0_reverse_bytes64(jule::U64 _31628_x) {
	
	_31628_x=static_cast<jule::U64>(((_31628_x >> 8LL) & 71777214294589695LL) | ((_31628_x & 71777214294589695LL) << 8LL));
	_31628_x=static_cast<jule::U64>(((_31628_x >> 16LL) & 281470681808895LL) | ((_31628_x & 281470681808895LL) << 16LL));
	return static_cast<jule::U64>((_31628_x >> 32LL) | (_31628_x << 32LL));
}



inline jule::Int _110621fc0_len(jule::Uint _32712_x) {
	if (false) {
		return static_cast<jule::Int>(_110621fc0_len32(static_cast<jule::U32>(_32712_x)));
	}
	return static_cast<jule::Int>(_110621fc0_len64(static_cast<jule::U64>(_32712_x)));
}



inline jule::Int _110621fc0_len8(jule::U8 _33613_x) {
	return static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_33613_x)]);
}



inline jule::Int _110621fc0_len16(jule::U16 _34218_x) {
	jule::Int _34228_n = jule::Int();
	if (_34218_x >= 256LL) {
		_34218_x>>=8LL;
		_34228_n=8LL;
	}
	_34228_n = static_cast<jule::Int>(_34228_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_34218_x)]));
	return _34228_n;
}



inline jule::Int _110621fc0_len32(jule::U32 _35218_x) {
	jule::Int _35228_n = jule::Int();
	if (_35218_x >= 65536LL) {
		_35218_x>>=16LL;
		_35228_n=16LL;
	}
	if (_35218_x >= 256LL) {
		_35218_x>>=8LL;
		_35228_n+=8LL;
	}
	_35228_n = static_cast<jule::Int>(_35228_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_35218_x)]));
	return _35228_n;
}



inline jule::Int _110621fc0_len64(jule::U64 _36618_x) {
	jule::Int _36628_n = jule::Int();
	if (_36618_x >= 4294967296LL) {
		_36618_x>>=32LL;
		_36628_n=32LL;
	}
	if (_36618_x >= 65536LL) {
		_36618_x>>=16LL;
		_36628_n+=16LL;
	}
	if (_36618_x >= 256LL) {
		_36618_x>>=8LL;
		_36628_n+=8LL;
	}
	_36628_n = static_cast<jule::Int>(_36628_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_36618_x)]));
	return _36628_n;
}



inline std::tuple<jule::Uint,jule::Uint> _110621fc0_add(jule::Uint _38912_x,jule::Uint _38921_y,jule::Uint _38930_carry) {
	jule::Uint _38956_carry_out = jule::Uint();
	jule::Uint _38945_sum = jule::Uint();
	if (false) {
		jule::U32 _39114_s32;
		jule::U32 _39119_c32;
		std::tie(_39114_s32,_39119_c32) = _110621fc0_add32(static_cast<jule::U32>(_38912_x),static_cast<jule::U32>(_38921_y),static_cast<jule::U32>(_38930_carry));
		_38945_sum = static_cast<jule::Uint>(_39114_s32);
		_38956_carry_out = static_cast<jule::Uint>(_39119_c32);
		return std::make_tuple(_38945_sum,_38956_carry_out);
	}
	jule::U64 _39410_s64;
	jule::U64 _39415_c64;
	std::tie(_39410_s64,_39415_c64) = _110621fc0_add64(static_cast<jule::U64>(_38912_x),static_cast<jule::U64>(_38921_y),static_cast<jule::U64>(_38930_carry));
	_38945_sum = static_cast<jule::Uint>(_39410_s64);
	_38956_carry_out = static_cast<jule::Uint>(_39415_c64);
	return std::make_tuple(_38945_sum,_38956_carry_out);
}



inline std::tuple<jule::U32,jule::U32> _110621fc0_add32(jule::U32 _40314_x,jule::U32 _40322_y,jule::U32 _40330_carry) {
	jule::U32 _40354_carryout = jule::U32();
	jule::U32 _40344_sum = jule::U32();
	jule::U64 _4049_sum64 = (static_cast<jule::U64>(_40314_x) + static_cast<jule::U64>(_40322_y)) + static_cast<jule::U64>(_40330_carry);
	_40344_sum=static_cast<jule::U32>(_4049_sum64);
	_40354_carryout=static_cast<jule::U32>(_4049_sum64 >> 32LL);
	return std::make_tuple(_40344_sum,_40354_carryout);
}



inline std::tuple<jule::U64,jule::U64> _110621fc0_add64(jule::U64 _41514_x,jule::U64 _41522_y,jule::U64 _41530_carry) {
	jule::U64 _41554_carryout = jule::U64();
	jule::U64 _41544_sum = jule::U64();
	_41544_sum=static_cast<jule::U64>((_41514_x + _41522_y) + _41530_carry);
	_41554_carryout=static_cast<jule::U64>(((_41514_x & _41522_y) | ((_41514_x | _41522_y) & (~(_41544_sum)))) >> 63LL);
	return std::make_tuple(_41544_sum,_41554_carryout);
}



inline std::tuple<jule::Uint,jule::Uint> _110621fc0_sub(jule::Uint _43112_x,jule::Uint _43121_y,jule::Uint _43130_borrow) {
	jule::Uint _43158_borrow_out = jule::Uint();
	jule::Uint _43146_diff = jule::Uint();
	if (false) {
		jule::U32 _43314_d32;
		jule::U32 _43319_b32;
		std::tie(_43314_d32,_43319_b32) = _110621fc0_sub32(static_cast<jule::U32>(_43112_x),static_cast<jule::U32>(_43121_y),static_cast<jule::U32>(_43130_borrow));
		_43146_diff = static_cast<jule::Uint>(_43314_d32);
		_43158_borrow_out = static_cast<jule::Uint>(_43319_b32);
		return std::make_tuple(_43146_diff,_43158_borrow_out);
	}
	jule::U64 _43610_d64;
	jule::U64 _43615_b64;
	std::tie(_43610_d64,_43615_b64) = _110621fc0_sub64(static_cast<jule::U64>(_43112_x),static_cast<jule::U64>(_43121_y),static_cast<jule::U64>(_43130_borrow));
	_43146_diff = static_cast<jule::Uint>(_43610_d64);
	_43158_borrow_out = static_cast<jule::Uint>(_43615_b64);
	return std::make_tuple(_43146_diff,_43158_borrow_out);
}



inline std::tuple<jule::U32,jule::U32> _110621fc0_sub32(jule::U32 _44514_x,jule::U32 _44522_y,jule::U32 _44530_borrow) {
	jule::U32 _44556_borrowout = jule::U32();
	jule::U32 _44545_diff = jule::U32();
	_44545_diff=static_cast<jule::U32>((_44514_x - _44522_y) - _44530_borrow);
	_44556_borrowout=static_cast<jule::U32>((((~(_44514_x)) & _44522_y) | ((~(_44514_x ^ _44522_y)) & _44545_diff)) >> 31LL);
	return std::make_tuple(_44545_diff,_44556_borrowout);
}



inline std::tuple<jule::U64,jule::U64> _110621fc0_sub64(jule::U64 _46014_x,jule::U64 _46022_y,jule::U64 _46030_borrow) {
	jule::U64 _46056_borrowout = jule::U64();
	jule::U64 _46045_diff = jule::U64();
	_46045_diff=static_cast<jule::U64>((_46014_x - _46022_y) - _46030_borrow);
	_46056_borrowout=static_cast<jule::U64>((((~(_46014_x)) & _46022_y) | ((~(_46014_x ^ _46022_y)) & _46045_diff)) >> 63LL);
	return std::make_tuple(_46045_diff,_46056_borrowout);
}



inline std::tuple<jule::Uint,jule::Uint> _110621fc0_mul(jule::Uint _47412_x,jule::Uint _47421_y) {
	jule::Uint _47442_lo = jule::Uint();
	jule::Uint _47432_hi = jule::Uint();
	if (false) {
		jule::U32 _47614_h;
		jule::U32 _47617_l;
		std::tie(_47614_h,_47617_l) = _110621fc0_mul32(static_cast<jule::U32>(_47412_x),static_cast<jule::U32>(_47421_y));
		_47432_hi = static_cast<jule::Uint>(_47614_h);
		_47442_lo = static_cast<jule::Uint>(_47617_l);
		return std::make_tuple(_47432_hi,_47442_lo);
	}
	jule::U64 _47910_h;
	jule::U64 _47913_l;
	std::tie(_47910_h,_47913_l) = _110621fc0_mul64(static_cast<jule::U64>(_47412_x),static_cast<jule::U64>(_47421_y));
	_47432_hi = static_cast<jule::Uint>(_47910_h);
	_47442_lo = static_cast<jule::Uint>(_47913_l);
	return std::make_tuple(_47432_hi,_47442_lo);
}



inline std::tuple<jule::U32,jule::U32> _110621fc0_mul32(jule::U32 _48814_x,jule::U32 _48822_y) {
	jule::U32 _48841_lo = jule::U32();
	jule::U32 _48832_hi = jule::U32();
	jule::U64 _4899_tmp = static_cast<jule::U64>(_48814_x) * static_cast<jule::U64>(_48822_y);
	std::tie(_48832_hi,_48841_lo) = std::make_tuple(static_cast<jule::U32>(_4899_tmp >> 32LL),static_cast<jule::U32>(_4899_tmp));
	return std::make_tuple(_48832_hi,_48841_lo);
}



inline std::tuple<jule::U64,jule::U64> _110621fc0_mul64(jule::U64 _49914_x,jule::U64 _49922_y) {
	jule::U64 _49941_lo = jule::U64();
	jule::U64 _49932_hi = jule::U64();
	
	jule::U64 _5019_x0 = _49914_x & 4294967295LL;
	jule::U64 _5029_x1 = _49914_x >> 32LL;
	jule::U64 _5039_y0 = _49922_y & 4294967295LL;
	jule::U64 _5049_y1 = _49922_y >> 32LL;
	jule::U64 _5059_w0 = _5019_x0 * _5039_y0;
	jule::U64 _5069_t = (_5029_x1 * _5039_y0) + (_5059_w0 >> 32LL);
	jule::U64 _50713_w1 = _5069_t & 4294967295LL;
	jule::U64 _5089_w2 = _5069_t >> 32LL;
	_50713_w1+=static_cast<jule::U64>(_5019_x0 * _5049_y1);
	_49932_hi=static_cast<jule::U64>(((_5029_x1 * _5049_y1) + _5089_w2) + (_50713_w1 >> 32LL));
	_49941_lo=static_cast<jule::U64>(_49914_x * _49922_y);
	return std::make_tuple(_49932_hi,_49941_lo);
}



inline std::tuple<jule::Uint,jule::Uint> _110621fc0_div(jule::Uint _52112_hi,jule::Uint _52122_lo,jule::Uint _52132_y) {
	jule::Uint _52154_rem = jule::Uint();
	jule::Uint _52143_quo = jule::Uint();
	if (false) {
		jule::U32 _52314_q;
		jule::U32 _52317_r;
		std::tie(_52314_q,_52317_r) = _110621fc0_div32(static_cast<jule::U32>(_52112_hi),static_cast<jule::U32>(_52122_lo),static_cast<jule::U32>(_52132_y));
		_52143_quo = static_cast<jule::Uint>(_52314_q);
		_52154_rem = static_cast<jule::Uint>(_52317_r);
		return std::make_tuple(_52143_quo,_52154_rem);
	}
	jule::U64 _52610_q;
	jule::U64 _52613_r;
	std::tie(_52610_q,_52613_r) = _110621fc0_div64(static_cast<jule::U64>(_52112_hi),static_cast<jule::U64>(_52122_lo),static_cast<jule::U64>(_52132_y));
	_52143_quo = static_cast<jule::Uint>(_52610_q);
	_52154_rem = static_cast<jule::Uint>(_52613_r);
	return std::make_tuple(_52143_quo,_52154_rem);
}



inline std::tuple<jule::U32,jule::U32> _110621fc0_div32(jule::U32 _53414_hi,jule::U32 _53423_lo,jule::U32 _53432_y) {
	jule::U32 _53452_rem = jule::U32();
	jule::U32 _53442_quo = jule::U32();
	if (_53432_y == 0LL) {
		jule::panic(_110621ed0_DIVIDE_ERROR);
	}
	if ((_53432_y != 0LL) && (_53432_y <= _53414_hi)) {
		jule::panic(_110621ed0_OVERFLOW_ERROR);
	}
	jule::U64 _5419_z = (static_cast<jule::U64>(_53414_hi) << 32LL) | static_cast<jule::U64>(_53423_lo);
	std::tie(_53442_quo,_53452_rem) = std::make_tuple(static_cast<jule::U32>(jule::div(_5419_z,static_cast<jule::U64>(_53432_y))),static_cast<jule::U32>(jule::mod(_5419_z,static_cast<jule::U64>(_53432_y))));
	return std::make_tuple(_53442_quo,_53452_rem);
}



inline std::tuple<jule::U64,jule::U64> _110621fc0_div64(jule::U64 _55014_hi,jule::U64 _55023_lo,jule::U64 _55036_y) {
	jule::U64 _55056_rem = jule::U64();
	jule::U64 _55046_quo = jule::U64();
	
	
	if (_55036_y == 0LL) {
		jule::panic(_110621ed0_DIVIDE_ERROR);
	}
	if (_55036_y <= _55014_hi) {
		jule::panic(_110621ed0_OVERFLOW_ERROR);
	}
	jule::Uint _5609_s = static_cast<jule::Uint>(_110621fc0_leading_zeros64(_55036_y));
	_55036_y<<=_5609_s;
	jule::U64 _5639_yn1 = _55036_y >> 32LL;
	jule::U64 _5649_yn0 = _55036_y & 4294967295LL;
	jule::U64 _5659_un32 = (_55014_hi << _5609_s) | (_55023_lo >> (64LL - _5609_s));
	jule::U64 _5669_un10 = _55023_lo << _5609_s;
	jule::U64 _5679_un1 = _5669_un10 >> 32LL;
	jule::U64 _5689_un0 = _5669_un10 & 4294967295LL;
	jule::U64 _56913_q1 = jule::div(_5659_un32,_5639_yn1);
	jule::U64 _57013_rhat = _5659_un32 - (_56913_q1 * _5639_yn1);
	_iter_begin_4594138048:;
	if (!((_56913_q1 >= 4294967296LL) || ((_56913_q1 * _5649_yn0) > ((4294967296LL * _57013_rhat) + _5679_un1)))) { goto _iter_end_4594138048; }
	{
		(_56913_q1)--;
		_57013_rhat+=_5639_yn1;
		if (_57013_rhat >= 4294967296LL) {
			goto _iter_end_4594138048;
		}
	}
	_iter_next_4594138048:;
	goto _iter_begin_4594138048;
	_iter_end_4594138048:;
	jule::U64 _5809_un21 = ((_5659_un32 * 4294967296LL) + _5679_un1) - (_56913_q1 * _55036_y);
	jule::U64 _58113_q0 = jule::div(_5809_un21,_5639_yn1);
	_57013_rhat=static_cast<jule::U64>(_5809_un21 - (_58113_q0 * _5639_yn1));
	_iter_begin_4594141712:;
	if (!((_58113_q0 >= 4294967296LL) || ((_58113_q0 * _5649_yn0) > ((4294967296LL * _57013_rhat) + _5689_un0)))) { goto _iter_end_4594141712; }
	{
		(_58113_q0)--;
		_57013_rhat+=_5639_yn1;
		if (_57013_rhat >= 4294967296LL) {
			goto _iter_end_4594141712;
		}
	}
	_iter_next_4594141712:;
	goto _iter_begin_4594141712;
	_iter_end_4594141712:;
	_55046_quo = static_cast<jule::U64>((_56913_q1 * 4294967296LL) + _58113_q0);
	_55056_rem = static_cast<jule::U64>((((_5809_un21 * 4294967296LL) + _5689_un0) - (_58113_q0 * _55036_y)) >> _5609_s);
	return std::make_tuple(_55046_quo,_55056_rem);
}



inline jule::Uint _110621fc0_rem(jule::Uint _59812_hi,jule::Uint _59822_lo,jule::Uint _59832_y) {
	if (false) {
		return static_cast<jule::Uint>(_110621fc0_rem32(static_cast<jule::U32>(_59812_hi),static_cast<jule::U32>(_59822_lo),static_cast<jule::U32>(_59832_y)));
	}
	return static_cast<jule::Uint>(_110621fc0_rem64(static_cast<jule::U64>(_59812_hi),static_cast<jule::U64>(_59822_lo),static_cast<jule::U64>(_59832_y)));
}



inline jule::U32 _110621fc0_rem32(jule::U32 _60814_hi,jule::U32 _60823_lo,jule::U32 _60832_y) {
	return static_cast<jule::U32>(jule::mod((static_cast<jule::U64>(_60814_hi) << 32LL) | static_cast<jule::U64>(_60823_lo),static_cast<jule::U64>(_60832_y)));
}



inline jule::U64 _110621fc0_rem64(jule::U64 _61514_hi,jule::U64 _61523_lo,jule::U64 _61532_y) {
	jule::U64 _62213_rem;
	std::tie(std::ignore,_62213_rem) = _110621fc0_div64(static_cast<jule::U64>(jule::mod(_61514_hi,_61532_y)),_61523_lo,_61532_y);
	return _62213_rem;
}



inline jule::F64 _110059190_atanh(jule::F64 _7818_x) {
	
	{
		if (!((_7818_x < -1LL) || (_7818_x > 1LL) || (_110193400_is_nan(_7818_x)))) { goto _case_end_4594445344; }
		_case_begin_4594445344:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4594444912;
		_case_end_4594445344:;
		if (!((_7818_x == 1LL))) { goto _case_end_4594445472; }
		_case_begin_4594445472:;
		{
			return static_cast<jule::F64>(_110193400_inf(1LL));
		}
		goto _match_end_4594444912;
		_case_end_4594445472:;
		if (!((_7818_x == -1LL))) { goto _case_end_4594445584; }
		_case_begin_4594445584:;
		{
			return static_cast<jule::F64>(_110193400_inf(-1LL));
		}
		goto _match_end_4594444912;
		_case_end_4594445584:;
		_match_end_4594444912:;
	}
	jule::Bool _8913_sign = false;
	if (_7818_x < 0LL) {
		_7818_x=static_cast<jule::F64>((-(_7818_x)));
		_8913_sign=true;
	}
	jule::F64 _9413_temp = 0LL;
	{
		if (!((_7818_x < 0.000000003725290298461914))) { goto _case_end_4594454352; }
		_case_begin_4594454352:;
		{
			_9413_temp=_7818_x;
		}
		goto _match_end_4594452784;
		_case_end_4594454352:;
		if (!((_7818_x < 0.5))) { goto _case_end_4594453936; }
		_case_begin_4594453936:;
		{
			_9413_temp=static_cast<jule::F64>(_7818_x + _7818_x);
			_9413_temp=static_cast<jule::F64>(0.5 * _1103f8320_log1p(static_cast<jule::F64>(_9413_temp + jule::div(_9413_temp * _7818_x,1LL - _7818_x))));
		}
		goto _match_end_4594452784;
		_case_end_4594453936:;
		_case_begin_4594452912:;
		{
			_9413_temp=static_cast<jule::F64>(0.5 * _1103f8320_log1p(static_cast<jule::F64>(jule::div(_7818_x + _7818_x,1LL - _7818_x))));
		}
		goto _match_end_4594452784;
		_case_end_4594452912:;
		_match_end_4594452784:;
	}
	if (_8913_sign) {
		_9413_temp=static_cast<jule::F64>((-(_9413_temp)));
	}
	return _9413_temp;
}



inline jule::U32 _1100c9ac0_f32_bits(jule::F32 _4117_f) {
	return (*(((jule::U32*)((&(_4117_f))))));
}



inline jule::F32 _1100c9ac0_f32_from_bits(jule::U32 _4722_b) {
	return (*(((jule::F32*)((&(_4722_b))))));
}



inline jule::U64 _1100c9ac0_f64_bits(jule::F64 _5217_f) {
	return (*(((jule::U64*)((&(_5217_f))))));
}



inline jule::F64 _1100c9ac0_f64_from_bits(jule::U64 _5822_b) {
	return (*(((jule::F64*)((&(_5822_b))))));
}



inline jule::F64 _1100cd0d0_cos(jule::F64 _14816_x) {
	
	
	
	if (_110193400_is_nan(_14816_x) || _110193400_is_inf(_14816_x,0LL)) {
		return static_cast<jule::F64>(_110193400_nan());
	}
	jule::Bool _15813_sign = false;
	_14816_x=static_cast<jule::F64>(_1101dd560_abs(_14816_x));
	jule::U64 _16113_j = 0LLU;
	jule::F64 _16213_y = 0LL;
	jule::F64 _16313_z = 0LL;
	if (_14816_x >= 536870912LL) {
		std::tie(_16113_j,_16313_z) = _110149e20_trig_reduce(_14816_x);
	} else {
		_16113_j=static_cast<jule::U64>(_14816_x * 1.2732395447351628);
		_16213_y=static_cast<jule::F64>(_16113_j);
		if ((_16113_j & 1LL) == 1LL) {
			(_16113_j)++;
			(_16213_y)++;
		}
		_16113_j&=7LL;
		_16313_z=static_cast<jule::F64>(((_14816_x - (_16213_y * 0.7853981256484985)) - (_16213_y * 0.00000003774894707930798)) - (_16213_y * 0.0000000000000026951514290790595));
	}
	if (_16113_j > 3LL) {
		_16113_j-=4LL;
		_15813_sign=(!(_15813_sign));
	}
	if (_16113_j > 1LL) {
		_15813_sign=(!(_15813_sign));
	}
	jule::F64 _1879_zz = _16313_z * _16313_z;
	if ((_16113_j == 1LL) || (_16113_j == 2LL)) {
		_16213_y=static_cast<jule::F64>(_16313_z + ((_16313_z * _1879_zz) * ((((((((((_1100cd0d0__SIN[0LL] * _1879_zz) + _1100cd0d0__SIN[1LL]) * _1879_zz) + _1100cd0d0__SIN[2LL]) * _1879_zz) + _1100cd0d0__SIN[3LL]) * _1879_zz) + _1100cd0d0__SIN[4LL]) * _1879_zz) + _1100cd0d0__SIN[5LL])));
	} else {
		_16213_y=static_cast<jule::F64>((1LL - (0.5 * _1879_zz)) + ((_1879_zz * _1879_zz) * ((((((((((_1100cd0d0__COS[0LL] * _1879_zz) + _1100cd0d0__COS[1LL]) * _1879_zz) + _1100cd0d0__COS[2LL]) * _1879_zz) + _1100cd0d0__COS[3LL]) * _1879_zz) + _1100cd0d0__COS[4LL]) * _1879_zz) + _1100cd0d0__COS[5LL])));
	}
	if (_15813_sign) {
		_16213_y=static_cast<jule::F64>((-(_16213_y)));
	}
	return _16213_y;
}



inline jule::F64 _1100cd0d0_sin(jule::F64 _20516_x) {
	
	
	
	{
		if (!((_20516_x == 0LL) || (_110193400_is_nan(_20516_x)))) { goto _case_end_4594497568; }
		_case_begin_4594497568:;
		{
			return _20516_x;
		}
		goto _match_end_4594497280;
		_case_end_4594497568:;
		if (!((_110193400_is_inf(_20516_x,0LL)))) { goto _case_end_4594497680; }
		_case_begin_4594497680:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4594497280;
		_case_end_4594497680:;
		_match_end_4594497280:;
	}
	jule::Bool _21813_sign = false;
	if (_20516_x < 0LL) {
		_20516_x=static_cast<jule::F64>((-(_20516_x)));
		_21813_sign=true;
	}
	jule::U64 _22413_j = 0LLU;
	jule::F64 _22513_y = 0LL;
	jule::F64 _22613_z = 0LL;
	if (_20516_x >= 536870912LL) {
		std::tie(_22413_j,_22613_z) = _110149e20_trig_reduce(_20516_x);
	} else {
		_22413_j=static_cast<jule::U64>(_20516_x * 1.2732395447351628);
		_22513_y=static_cast<jule::F64>(_22413_j);
		if ((_22413_j & 1LL) == 1LL) {
			(_22413_j)++;
			(_22513_y)++;
		}
		_22413_j&=7LL;
		_22613_z=static_cast<jule::F64>(((_20516_x - (_22513_y * 0.7853981256484985)) - (_22513_y * 0.00000003774894707930798)) - (_22513_y * 0.0000000000000026951514290790595));
	}
	if (_22413_j > 3LL) {
		_21813_sign=(!(_21813_sign));
		_22413_j-=4LL;
	}
	jule::F64 _2469_zz = _22613_z * _22613_z;
	if ((_22413_j == 1LL) || (_22413_j == 2LL)) {
		_22513_y=static_cast<jule::F64>((1LL - (0.5 * _2469_zz)) + ((_2469_zz * _2469_zz) * ((((((((((_1100cd0d0__COS[0LL] * _2469_zz) + _1100cd0d0__COS[1LL]) * _2469_zz) + _1100cd0d0__COS[2LL]) * _2469_zz) + _1100cd0d0__COS[3LL]) * _2469_zz) + _1100cd0d0__COS[4LL]) * _2469_zz) + _1100cd0d0__COS[5LL])));
	} else {
		_22513_y=static_cast<jule::F64>(_22613_z + ((_22613_z * _2469_zz) * ((((((((((_1100cd0d0__SIN[0LL] * _2469_zz) + _1100cd0d0__SIN[1LL]) * _2469_zz) + _1100cd0d0__SIN[2LL]) * _2469_zz) + _1100cd0d0__SIN[3LL]) * _2469_zz) + _1100cd0d0__SIN[4LL]) * _2469_zz) + _1100cd0d0__SIN[5LL])));
	}
	if (_21813_sign) {
		_22513_y=static_cast<jule::F64>((-(_22513_y)));
	}
	return _22513_y;
}



inline jule::F64 _1100eaf20_tan(jule::F64 _11316_x) {
	
	
	
	{
		if (!((_11316_x == 0LL) || (_110193400_is_nan(_11316_x)))) { goto _case_end_4594525440; }
		_case_begin_4594525440:;
		{
			return _11316_x;
		}
		goto _match_end_4594525152;
		_case_end_4594525440:;
		if (!((_110193400_is_inf(_11316_x,0LL)))) { goto _case_end_4594525552; }
		_case_begin_4594525552:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4594525152;
		_case_end_4594525552:;
		_match_end_4594525152:;
	}
	jule::Bool _12613_sign = false;
	if (_11316_x < 0LL) {
		_11316_x=static_cast<jule::F64>((-(_11316_x)));
		_12613_sign=true;
	}
	jule::U64 _13113_j = 0LLU;
	jule::F64 _13213_y = 0LL;
	jule::F64 _13313_z = 0LL;
	if (_11316_x >= 536870912LL) {
		std::tie(_13113_j,_13313_z) = _110149e20_trig_reduce(_11316_x);
	} else {
		_13113_j=static_cast<jule::U64>(_11316_x * 1.2732395447351628);
		_13213_y=static_cast<jule::F64>(_13113_j);
		if ((_13113_j & 1LL) == 1LL) {
			(_13113_j)++;
			(_13213_y)++;
		}
		_13313_z=static_cast<jule::F64>(((_11316_x - (_13213_y * 0.7853981256484985)) - (_13213_y * 0.00000003774894707930798)) - (_13213_y * 0.0000000000000026951514290790595));
	}
	jule::F64 _1489_zz = _13313_z * _13313_z;
	if (_1489_zz > 0.00000000000001) {
		_13213_y=static_cast<jule::F64>(_13313_z + (_13313_z * jule::div(_1489_zz * ((((_1100eaf20__TAN_P[0LL] * _1489_zz) + _1100eaf20__TAN_P[1LL]) * _1489_zz) + _1100eaf20__TAN_P[2LL]),((((((_1489_zz + _1100eaf20__TAN_Q[1LL]) * _1489_zz) + _1100eaf20__TAN_Q[2LL]) * _1489_zz) + _1100eaf20__TAN_Q[3LL]) * _1489_zz) + _1100eaf20__TAN_Q[4LL])));
	} else {
		_13213_y=_13313_z;
	}
	if ((_13113_j & 2LL) == 2LL) {
		_13213_y=static_cast<jule::F64>(jule::div(-1LL,_13213_y));
	}
	if (_12613_sign) {
		_13213_y=static_cast<jule::F64>((-(_13213_y)));
	}
	return _13213_y;
}



inline jule::F64 _1100eaa90_mod(jule::F64 _5212_x,jule::F64 _5224_y) {
	if ((((_5224_y == 0LL) || _110193400_is_inf(_5212_x,0LL)) || _110193400_is_nan(_5212_x)) || _110193400_is_nan(_5224_y)) {
		return static_cast<jule::F64>(_110193400_nan());
	}
	_5224_y=static_cast<jule::F64>(_1101dd560_abs(_5224_y));
	jule::F64 _5810_yfr;
	jule::Int _5815_yexp;
	std::tie(_5810_yfr,_5815_yexp) = _1100ebd60_frexp(_5224_y);
	jule::F64 _5913_r = _5212_x;
	if (_5212_x < 0LL) {
		_5913_r=static_cast<jule::F64>((-(_5212_x)));
	}
	_iter_begin_4594554576:;
	if (!(_5913_r >= _5224_y)) { goto _iter_end_4594554576; }
	{
		jule::F64 _6514_rfr;
		jule::Int _6523_rexp;
		std::tie(_6514_rfr,_6523_rexp) = _1100ebd60_frexp(_5913_r);
		if (_6514_rfr < _5810_yfr) {
			_6523_rexp=static_cast<jule::Int>(_6523_rexp - 1LL);
		}
		_5913_r=static_cast<jule::F64>(_5913_r - _1101ed150_ldexp(_5224_y,static_cast<jule::Int>(_6523_rexp - _5815_yexp)));
	}
	_iter_next_4594554576:;
	goto _iter_begin_4594554576;
	_iter_end_4594554576:;
	if (_5212_x < 0LL) {
		_5913_r=static_cast<jule::F64>((-(_5913_r)));
	}
	return _5913_r;
}



inline std::tuple<jule::F64,jule::Int> _1100ebd60_frexp(jule::F64 _4718_f) {
	jule::Int _4739_exp = jule::Int();
	jule::F64 _4728_frac = jule::F64();
	{
		if (!((_4718_f == 0LL))) { goto _case_end_4594561520; }
		_case_begin_4594561520:;
		{
			_4728_frac = _4718_f;
			_4739_exp = 0LL;
			return std::make_tuple(_4728_frac,_4739_exp);
		}
		goto _match_end_4594561312;
		_case_end_4594561520:;
		if (!((_110193400_is_inf(_4718_f,0LL)) || (_110193400_is_nan(_4718_f)))) { goto _case_end_4594561648; }
		_case_begin_4594561648:;
		{
			_4728_frac = _4718_f;
			_4739_exp = 0LL;
			return std::make_tuple(_4728_frac,_4739_exp);
		}
		goto _match_end_4594561312;
		_case_end_4594561648:;
		_match_end_4594561312:;
	}
	std::tie(_4718_f,_4739_exp) = _110193400_normalize(_4718_f);
	jule::U64 _5613_x = _1100c9ac0_f64_bits(_4718_f);
	_4739_exp+=static_cast<jule::Int>((static_cast<jule::Int>((_5613_x >> 52LL) & 2047LL) - 1023LL) + 1LL);
	_5613_x=static_cast<jule::U64>(_5613_x & -9218868437227405313LL);
	_5613_x|=4602678819172646912LL;
	_4728_frac=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(_5613_x));
	return std::make_tuple(_4728_frac,_4739_exp);
}



inline jule::F32 _1100ecf40_nextafter32(jule::F32 _4420_x,jule::F32 _4428_y) {
	jule::F32 _4438_r = jule::F32();
	{
		if (!((_110193400_is_nan(static_cast<jule::F64>(_4420_x))) || (_110193400_is_nan(static_cast<jule::F64>(_4428_y))))) { goto _case_end_4594573200; }
		_case_begin_4594573200:;
		{
			_4438_r=static_cast<jule::F32>(_110193400_nan());
		}
		goto _match_end_4594572032;
		_case_end_4594573200:;
		if (!((_4420_x == _4428_y))) { goto _case_end_4594573440; }
		_case_begin_4594573440:;
		{
			_4438_r=_4420_x;
		}
		goto _match_end_4594572032;
		_case_end_4594573440:;
		if (!((_4420_x == 0LL))) { goto _case_end_4594574672; }
		_case_begin_4594574672:;
		{
			_4438_r=static_cast<jule::F32>(_110159c10_copysign(static_cast<jule::F64>(_1100c9ac0_f32_from_bits(1LLU)),static_cast<jule::F64>(_4428_y)));
		}
		goto _match_end_4594572032;
		_case_end_4594574672:;
		if (!(((_4428_y > _4420_x) == (_4420_x > 0LL)))) { goto _case_end_4594572480; }
		_case_begin_4594572480:;
		{
			_4438_r=static_cast<jule::F32>(_1100c9ac0_f32_from_bits(static_cast<jule::U32>(_1100c9ac0_f32_bits(_4420_x) + 1LL)));
		}
		goto _match_end_4594572032;
		_case_end_4594572480:;
		_case_begin_4594572176:;
		{
			_4438_r=static_cast<jule::F32>(_1100c9ac0_f32_from_bits(static_cast<jule::U32>(_1100c9ac0_f32_bits(_4420_x) - 1LL)));
		}
		goto _match_end_4594572032;
		_case_end_4594572176:;
		_match_end_4594572032:;
	}
	return _4438_r;
}



inline jule::F64 _1100ecf40_nextafter(jule::F64 _6618_x,jule::F64 _6626_y) {
	jule::F64 _6636_r = jule::F64();
	{
		if (!((_110193400_is_nan(_6618_x)) || (_110193400_is_nan(_6626_y)))) { goto _case_end_4594584032; }
		_case_begin_4594584032:;
		{
			_6636_r=static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4594582864;
		_case_end_4594584032:;
		if (!((_6618_x == _6626_y))) { goto _case_end_4594584368; }
		_case_begin_4594584368:;
		{
			_6636_r=_6618_x;
		}
		goto _match_end_4594582864;
		_case_end_4594584368:;
		if (!((_6618_x == 0LL))) { goto _case_end_4594585440; }
		_case_begin_4594585440:;
		{
			_6636_r=static_cast<jule::F64>(_110159c10_copysign(static_cast<jule::F64>(_1100c9ac0_f64_from_bits(1LLU)),_6626_y));
		}
		goto _match_end_4594582864;
		_case_end_4594585440:;
		if (!(((_6626_y > _6618_x) == (_6618_x > 0LL)))) { goto _case_end_4594585552; }
		_case_begin_4594585552:;
		{
			_6636_r=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>(_1100c9ac0_f64_bits(_6618_x) + 1LL)));
		}
		goto _match_end_4594582864;
		_case_end_4594585552:;
		_case_begin_4594583008:;
		{
			_6636_r=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>(_1100c9ac0_f64_bits(_6618_x) - 1LL)));
		}
		goto _match_end_4594582864;
		_case_end_4594583008:;
		_match_end_4594582864:;
	}
	return _6636_r;
}



inline jule::F64 _110159c10_copysign(jule::F64 _3917_f,jule::F64 _3925_sign) {
	
	return static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>((_1100c9ac0_f64_bits(_3917_f) & 9223372036854775807LLU) | (_1100c9ac0_f64_bits(_3925_sign) & 9223372036854775808LLU))));
}



inline std::tuple<jule::U64,jule::F64> _110149e20_trig_reduce(jule::F64 _6020_x) {
	jule::F64 _6038_z = jule::F64();
	jule::U64 _6030_j = jule::U64();
	
	if (_6020_x < 0.7853981633974483) {
		_6030_j = 0LL;
		_6038_z = _6020_x;
		return std::make_tuple(_6030_j,_6038_z);
	}
	jule::U64 _6713_ix = _1100c9ac0_f64_bits(_6020_x);
	jule::Int _689_exp = (static_cast<jule::Int>((_6713_ix >> 52LL) & 2047LL) - 1023LL) - 52LL;
	_6713_ix=static_cast<jule::U64>(_6713_ix & -9218868437227405313LL);
	_6713_ix|=4503599627370496LL;
	jule::Uint _7410_digit = jule::div(static_cast<jule::Uint>(_689_exp + 61LL),64LL);
	jule::Uint _7417_bitshift = jule::mod(static_cast<jule::Uint>(_689_exp + 61LL),64LL);
	std::tie(_7410_digit,_7417_bitshift) = std::make_tuple(jule::div(static_cast<jule::Uint>(_689_exp + 61LL),64LL),jule::mod(static_cast<jule::Uint>(_689_exp + 61LL),64LL));
	jule::U64 _759_z0 = (_110149e20_M_PI4[static_cast<jule::Int>(_7410_digit)] << _7417_bitshift) | (_110149e20_M_PI4[static_cast<jule::Int>(_7410_digit + 1LL)] >> (64LL - _7417_bitshift));
	jule::U64 _769_z1 = (_110149e20_M_PI4[static_cast<jule::Int>(_7410_digit + 1LL)] << _7417_bitshift) | (_110149e20_M_PI4[static_cast<jule::Int>(_7410_digit + 2LL)] >> (64LL - _7417_bitshift));
	jule::U64 _779_z2 = (_110149e20_M_PI4[static_cast<jule::Int>(_7410_digit + 2LL)] << _7417_bitshift) | (_110149e20_M_PI4[static_cast<jule::Int>(_7410_digit + 3LL)] >> (64LL - _7417_bitshift));
	jule::U64 _7910_z2hi;
	std::tie(_7910_z2hi,std::ignore) = _110621fc0_mul64(_779_z2,_6713_ix);
	jule::U64 _8010_z1hi;
	jule::U64 _8016_z1lo;
	std::tie(_8010_z1hi,_8016_z1lo) = _110621fc0_mul64(_769_z1,_6713_ix);
	jule::U64 _819_z0lo = _759_z0 * _6713_ix;
	jule::U64 _8210_lo;
	jule::U64 _8214_c;
	std::tie(_8210_lo,_8214_c) = _110621fc0_add64(_8016_z1lo,_7910_z2hi,0LLU);
	jule::U64 _8314_hi;
	std::tie(_8314_hi,std::ignore) = _110621fc0_add64(_819_z0lo,_8010_z1hi,_8214_c);
	_6030_j=static_cast<jule::U64>(_8314_hi >> 61LL);
	_8314_hi=static_cast<jule::U64>((_8314_hi << 3LL) | (_8210_lo >> 61LL));
	jule::Uint _889_lz = static_cast<jule::Uint>(_110621fc0_leading_zeros64(_8314_hi));
	jule::U64 _899_e = static_cast<jule::U64>(1023LL - (_889_lz + 1LL));
	_8314_hi=static_cast<jule::U64>((_8314_hi << (_889_lz + 1LL)) | (_8210_lo >> (64LL - (_889_lz + 1LL))));
	_8314_hi>>=12LL;
	_8314_hi|=static_cast<jule::U64>(_899_e << 52LL);
	_6038_z=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(_8314_hi));
	if ((_6030_j & 1LL) == 1LL) {
		(_6030_j)++;
		_6030_j&=7LL;
		(_6038_z)--;
	}
	_6030_j = _6030_j;
	_6038_z = static_cast<jule::F64>(_6038_z * 0.7853981633974483);
	return std::make_tuple(_6030_j,_6038_z);
}



inline jule::F64 _110149c20_atan2(jule::F64 _6014_y,jule::F64 _6022_x) {
	{
		if (!((_110193400_is_nan(_6014_y)) || (_110193400_is_nan(_6022_x)))) { goto _case_end_4594630960; }
		_case_begin_4594630960:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4594630720;
		_case_end_4594630960:;
		if (!((_6014_y == 0LL))) { goto _case_end_4594631088; }
		_case_begin_4594631088:;
		{
			if ((_6022_x >= 0LL) && (!(_11030a600_signbit(_6022_x)))) {
				return static_cast<jule::F64>(_110159c10_copysign(0LL,_6014_y));
			}
			return static_cast<jule::F64>(_110159c10_copysign(3.141592653589793,_6014_y));
		}
		goto _match_end_4594630720;
		_case_end_4594631088:;
		if (!((_6022_x == 0LL))) { goto _case_end_4594631216; }
		_case_begin_4594631216:;
		{
			return static_cast<jule::F64>(_110159c10_copysign(1.5707963267948966,_6014_y));
		}
		goto _match_end_4594630720;
		_case_end_4594631216:;
		if (!((_110193400_is_inf(_6022_x,0LL)))) { goto _case_end_4594631344; }
		_case_begin_4594631344:;
		{
			if (_110193400_is_inf(_6022_x,1LL)) {
				{
					if (!((_110193400_is_inf(_6014_y,0LL)))) { goto _case_end_4594640256; }
					_case_begin_4594640256:;
					{
						return static_cast<jule::F64>(_110159c10_copysign(0.7853981633974483,_6014_y));
					}
					goto _match_end_4594638704;
					_case_end_4594640256:;
					_case_begin_4594638848:;
					{
						return static_cast<jule::F64>(_110159c10_copysign(0LL,_6014_y));
					}
					goto _match_end_4594638704;
					_case_end_4594638848:;
					_match_end_4594638704:;
				}
			}
			{
				if (!((_110193400_is_inf(_6014_y,0LL)))) { goto _case_end_4594641728; }
				_case_begin_4594641728:;
				{
					return static_cast<jule::F64>(_110159c10_copysign(2.356194490192345,_6014_y));
				}
				goto _match_end_4594641216;
				_case_end_4594641728:;
				_case_begin_4594641936:;
				{
					return static_cast<jule::F64>(_110159c10_copysign(3.141592653589793,_6014_y));
				}
				goto _match_end_4594641216;
				_case_end_4594641936:;
				_match_end_4594641216:;
			}
		}
		goto _match_end_4594630720;
		_case_end_4594631344:;
		if (!((_110193400_is_inf(_6014_y,0LL)))) { goto _case_end_4594631472; }
		_case_begin_4594631472:;
		{
			return static_cast<jule::F64>(_110159c10_copysign(1.5707963267948966,_6014_y));
		}
		goto _match_end_4594630720;
		_case_end_4594631472:;
		_match_end_4594630720:;
	}
	jule::F64 _929_q = _1104f3f30_atan(static_cast<jule::F64>(jule::div(_6014_y,_6022_x)));
	if (_6022_x < 0LL) {
		if (_929_q <= 0LL) {
			return static_cast<jule::F64>(_929_q + 3.141592653589793);
		}
		return static_cast<jule::F64>(_929_q - 3.141592653589793);
	}
	return _929_q;
}



inline jule::F64 _11015fbf0_floor(jule::F64 _4414_x) {
	if (((_4414_x == 0LL) || _110193400_is_nan(_4414_x)) || _110193400_is_inf(_4414_x,0LL)) {
		return _4414_x;
	}
	if (_4414_x < 0LL) {
		jule::F64 _4918_d;
		jule::F64 _4921_fract;
		std::tie(_4918_d,_4921_fract) = _110254f60_modf(static_cast<jule::F64>((-(_4414_x))));
		if (_4921_fract != 0LL) {
			_4918_d=static_cast<jule::F64>(_4918_d + 1LL);
		}
		return static_cast<jule::F64>((-(_4918_d)));
	}
	jule::F64 _5510_d;
	std::tie(_5510_d,std::ignore) = _110254f60_modf(_4414_x);
	return _5510_d;
}



inline jule::F64 _11015fbf0_ceil(jule::F64 _6513_x) {
	return static_cast<jule::F64>((-(_11015fbf0_floor(static_cast<jule::F64>((-(_6513_x)))))));
}



inline jule::F64 _11015fbf0_trunc(jule::F64 _7314_x) {
	if (((_7314_x == 0LL) || _110193400_is_nan(_7314_x)) || _110193400_is_inf(_7314_x,0LL)) {
		return _7314_x;
	}
	jule::F64 _7710_d;
	std::tie(_7710_d,std::ignore) = _110254f60_modf(_7314_x);
	return _7710_d;
}



inline jule::F64 _11015fbf0_round(jule::F64 _8714_x) {
	jule::U64 _9713_bits = _1100c9ac0_f64_bits(_8714_x);
	jule::Uint _9813_e = static_cast<jule::Uint>(_9713_bits >> 52LL) & 2047LL;
	if (_9813_e < 1023LL) {
		_9713_bits&=9223372036854775808LLU;
		if (_9813_e == 1022LL) {
			_9713_bits|=4607182418800017408LL;
		}
	} else if (_9813_e < 1075LL) {
		
		_9813_e-=1023LL;
		_9713_bits+=static_cast<jule::Int>(2251799813685248LL >> _9813_e);
		_9713_bits&=static_cast<jule::Int>((~(4503599627370495LL >> _9813_e)));
	}
	return static_cast<jule::F64>(_1100c9ac0_f64_from_bits(_9713_bits));
}



inline jule::F64 _11015fbf0_round_even(jule::F64 _12419_x) {
	jule::U64 _13613_bits = _1100c9ac0_f64_bits(_12419_x);
	jule::Uint _13713_e = static_cast<jule::Uint>(_13613_bits >> 52LL) & 2047LL;
	if (_13713_e >= 1023LL) {
		
		_13713_e-=1023LL;
		_13613_bits+=static_cast<jule::U64>((2251799813685247LL + ((_13613_bits >> (52LL - _13713_e)) & 1LL)) >> _13713_e);
		_13613_bits&=static_cast<jule::Int>((~(4503599627370495LL >> _13713_e)));
	} else if ((_13713_e == 1022LL) && ((_13613_bits & 4503599627370495LL) != 0LL)) {
		_13613_bits=static_cast<jule::U64>((_13613_bits & 9223372036854775808LLU) | 4607182418800017408LL);
	} else {
		_13613_bits&=9223372036854775808LLU;
	}
	return static_cast<jule::F64>(_1100c9ac0_f64_from_bits(_13613_bits));
}



inline jule::F64 _110193400_nan(void) {
	return static_cast<jule::F64>(_1100c9ac0_f64_from_bits(9221120237041090561LLU));
}



inline jule::Bool _110193400_is_nan(jule::F64 _5215_f) {
	return _5215_f != _5215_f;
}



inline jule::F64 _110193400_inf(jule::Int _6112_sign) {
	if (_6112_sign >= 0LL) {
		return static_cast<jule::F64>(_1100c9ac0_f64_from_bits(9218868437227405312LLU));
	}
	return static_cast<jule::F64>(_1100c9ac0_f64_from_bits(18442240474082181120LLU));
}



inline jule::Bool _110193400_is_inf(jule::F64 _7215_f,jule::Int _7223_sign) {
	return ((_7223_sign >= 0LL) && (_7215_f > jule::MAX_F64)) || ((_7223_sign <= 0LL) && (_7215_f < jule::MIN_F64));
}



inline std::tuple<jule::F64,jule::Int> _110193400_normalize(jule::F64 _8214_x) {
	jule::Int _8232_exp = jule::Int();
	jule::F64 _8224_y = jule::F64();
	
	if (_1101dd560_abs(_8214_x) < 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014) {
		_8224_y = static_cast<jule::F64>(_8214_x * 4503599627370496LL);
		_8232_exp = -52LL;
		return std::make_tuple(_8224_y,_8232_exp);
	}
	_8224_y = _8214_x;
	_8232_exp = 0LL;
	return std::make_tuple(_8224_y,_8232_exp);
}



inline std::tuple<jule::F64,jule::F64> _110166080_sincos(jule::F64 _4619_x) {
	jule::F64 _4639_cos = jule::F64();
	jule::F64 _4629_sin = jule::F64();
	
	
	
	{
		if (!((_4619_x == 0LL))) { goto _case_end_4594697392; }
		_case_begin_4594697392:;
		{
			_4629_sin = _4619_x;
			_4639_cos = 1LL;
			return std::make_tuple(_4629_sin,_4639_cos);
		}
		goto _match_end_4594697104;
		_case_end_4594697392:;
		if (!((_110193400_is_nan(_4619_x)) || (_110193400_is_inf(_4619_x,0LL)))) { goto _case_end_4594697504; }
		_case_begin_4594697504:;
		{
			_4629_sin = static_cast<jule::F64>(_110193400_nan());
			_4639_cos = static_cast<jule::F64>(_110193400_nan());
			return std::make_tuple(_4629_sin,_4639_cos);
		}
		goto _match_end_4594697104;
		_case_end_4594697504:;
		_match_end_4594697104:;
	}
	jule::Bool _5914_sin_sign = false;
	jule::Bool _5928_cos_sign = false;
	std::tie(_5914_sin_sign,_5928_cos_sign) = std::make_tuple(false,false);
	if (_4619_x < 0LL) {
		_4619_x=static_cast<jule::F64>((-(_4619_x)));
		_5914_sin_sign=true;
	}
	jule::U64 _6513_j = 0LLU;
	jule::F64 _6613_y = 0LL;
	jule::F64 _6713_z = 0LL;
	if (_4619_x >= 536870912LL) {
		std::tie(_6513_j,_6713_z) = _110149e20_trig_reduce(_4619_x);
	} else {
		_6513_j=static_cast<jule::U64>(_4619_x * 1.2732395447351628);
		_6613_y=static_cast<jule::F64>(_6513_j);
		if ((_6513_j & 1LL) == 1LL) {
			(_6513_j)++;
			(_6613_y)++;
		}
		_6513_j&=7LL;
		_6713_z=static_cast<jule::F64>(((_4619_x - (_6613_y * 0.7853981256484985)) - (_6613_y * 0.00000003774894707930798)) - (_6613_y * 0.0000000000000026951514290790595));
	}
	if (_6513_j > 3LL) {
		_6513_j-=4LL;
		std::tie(_5914_sin_sign,_5928_cos_sign) = std::make_tuple((!(_5914_sin_sign)),(!(_5928_cos_sign)));
	}
	if (_6513_j > 1LL) {
		_5928_cos_sign=(!(_5928_cos_sign));
	}
	jule::F64 _899_zz = _6713_z * _6713_z;
	_4639_cos=static_cast<jule::F64>((1LL - (0.5 * _899_zz)) + ((_899_zz * _899_zz) * ((((((((((_1100cd0d0__COS[0LL] * _899_zz) + _1100cd0d0__COS[1LL]) * _899_zz) + _1100cd0d0__COS[2LL]) * _899_zz) + _1100cd0d0__COS[3LL]) * _899_zz) + _1100cd0d0__COS[4LL]) * _899_zz) + _1100cd0d0__COS[5LL])));
	_4629_sin=static_cast<jule::F64>(_6713_z + ((_6713_z * _899_zz) * ((((((((((_1100cd0d0__SIN[0LL] * _899_zz) + _1100cd0d0__SIN[1LL]) * _899_zz) + _1100cd0d0__SIN[2LL]) * _899_zz) + _1100cd0d0__SIN[3LL]) * _899_zz) + _1100cd0d0__SIN[4LL]) * _899_zz) + _1100cd0d0__SIN[5LL])));
	if ((_6513_j == 1LL) || (_6513_j == 2LL)) {
		std::tie(_4629_sin,_4639_cos) = std::make_tuple(_4639_cos,_4629_sin);
	}
	if (_5928_cos_sign) {
		_4639_cos=static_cast<jule::F64>((-(_4639_cos)));
	}
	if (_5914_sin_sign) {
		_4629_sin=static_cast<jule::F64>((-(_4629_sin)));
	}
	return std::make_tuple(_4629_sin,_4639_cos);
}



inline jule::F64 _1101abc90_dim(jule::F64 _4412_x,jule::F64 _4420_y) {
	jule::F64 _509_v = _4412_x - _4420_y;
	if (_509_v <= 0LL) {
		return 0LL;
	}
	return _509_v;
}



inline jule::F64 _1101abc90_max(jule::F64 _6612_x,jule::F64 _6620_y) {
	{
		if (!((_110193400_is_inf(_6612_x,1LL)) || (_110193400_is_inf(_6620_y,1LL)))) { goto _case_end_4594732128; }
		_case_begin_4594732128:;
		{
			return static_cast<jule::F64>(_110193400_inf(1LL));
		}
		goto _match_end_4594731920;
		_case_end_4594732128:;
		if (!((_110193400_is_nan(_6612_x)) || (_110193400_is_nan(_6620_y)))) { goto _case_end_4594732256; }
		_case_begin_4594732256:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4594731920;
		_case_end_4594732256:;
		if (!(((_6612_x == 0LL) && (_6612_x == _6620_y)))) { goto _case_end_4594732384; }
		_case_begin_4594732384:;
		{
			if (_11030a600_signbit(_6612_x)) {
				return _6620_y;
			}
			return _6612_x;
		}
		goto _match_end_4594731920;
		_case_end_4594732384:;
		_match_end_4594731920:;
	}
	if (_6612_x > _6620_y) {
		return _6612_x;
	}
	return _6620_y;
}



inline jule::F64 _1101abc90_min(jule::F64 _9212_x,jule::F64 _9220_y) {
	{
		if (!((_110193400_is_inf(_9212_x,-1LL)) || (_110193400_is_inf(_9220_y,-1LL)))) { goto _case_end_4594739232; }
		_case_begin_4594739232:;
		{
			return static_cast<jule::F64>(_110193400_inf(-1LL));
		}
		goto _match_end_4594739024;
		_case_end_4594739232:;
		if (!((_110193400_is_nan(_9212_x)) || (_110193400_is_nan(_9220_y)))) { goto _case_end_4594739360; }
		_case_begin_4594739360:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4594739024;
		_case_end_4594739360:;
		if (!(((_9212_x == 0LL) && (_9212_x == _9220_y)))) { goto _case_end_4594739488; }
		_case_begin_4594739488:;
		{
			if (_11030a600_signbit(_9212_x)) {
				return _9212_x;
			}
			return _9220_y;
		}
		goto _match_end_4594739024;
		_case_end_4594739488:;
		_match_end_4594739024:;
	}
	if (_9212_x < _9220_y) {
		return _9212_x;
	}
	return _9220_y;
}



inline jule::F64 _1101abe90_log(jule::F64 _11112_x) {
	
	
	
	
	
	
	
	
	
	{
		if (!((_110193400_is_nan(_11112_x)) || (_110193400_is_inf(_11112_x,1LL)))) { goto _case_end_4594754416; }
		_case_begin_4594754416:;
		{
			return _11112_x;
		}
		goto _match_end_4594754224;
		_case_end_4594754416:;
		if (!((_11112_x < 0LL))) { goto _case_end_4594754544; }
		_case_begin_4594754544:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4594754224;
		_case_end_4594754544:;
		if (!((_11112_x == 0LL))) { goto _case_end_4594754672; }
		_case_begin_4594754672:;
		{
			return static_cast<jule::F64>(_110193400_inf(-1LL));
		}
		goto _match_end_4594754224;
		_case_end_4594754672:;
		_match_end_4594754224:;
	}
	jule::F64 _13314_f1;
	jule::Int _13322_ki;
	std::tie(_13314_f1,_13322_ki) = _1100ebd60_frexp(_11112_x);
	if (_13314_f1 < 0.7071067811865476) {
		_13314_f1*=2LL;
		(_13322_ki)--;
	}
	jule::F64 _1389_f = _13314_f1 - 1LL;
	jule::F64 _1399_k = static_cast<jule::F64>(_13322_ki);
	jule::F64 _1429_s = jule::div(_1389_f,2LL + _1389_f);
	jule::F64 _1439_s2 = _1429_s * _1429_s;
	jule::F64 _1449_s4 = _1439_s2 * _1439_s2;
	jule::F64 _1459_t1 = _1439_s2 * (0.6666666666666735 + (_1449_s4 * (0.2857142874366239 + (_1449_s4 * (0.1818357216161805 + (_1449_s4 * 0.14798198605116586))))));
	jule::F64 _1469_t2 = _1449_s4 * (0.3999999999940942 + (_1449_s4 * (0.22222198432149784 + (_1449_s4 * 0.15313837699209373))));
	jule::F64 _1479_R = _1459_t1 + _1469_t2;
	jule::F64 _1489_hfsq = (0.5 * _1389_f) * _1389_f;
	return static_cast<jule::F64>((_1399_k * 0.6931471803691238) - ((_1489_hfsq - ((_1429_s * (_1489_hfsq + _1479_R)) + (_1399_k * 0.00000000019082149292705877))) - _1389_f));
}



inline jule::F64 _1101bb320_expm1(jule::F64 _15618_x) {
	
	
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_110193400_is_inf(_15618_x,1LL)) || (_110193400_is_nan(_15618_x)))) { goto _case_end_4594787488; }
		_case_begin_4594787488:;
		{
			return _15618_x;
		}
		goto _match_end_4594787312;
		_case_end_4594787488:;
		if (!((_110193400_is_inf(_15618_x,-1LL)))) { goto _case_end_4594787616; }
		_case_begin_4594787616:;
		{
			return -1LL;
		}
		goto _match_end_4594787312;
		_case_end_4594787616:;
		_match_end_4594787312:;
	}
	jule::F64 _18013_absx = _15618_x;
	jule::Bool _18113_sign = false;
	if (_15618_x < 0LL) {
		_18013_absx=static_cast<jule::F64>((-(_18013_absx)));
		_18113_sign=true;
	}
	if (_18013_absx >= 38.816242111356935) {
		if (_18113_sign) {
			return -1LL;
		}
		if (_18013_absx >= 709.782712893384) {
			return static_cast<jule::F64>(_110193400_inf(1LL));
		}
	}
	jule::F64 _19813_c = 0LL;
	jule::Int _19913_k = 0LL;
	if (_18013_absx > 0.34657359027997264) {
		jule::F64 _20117_hi = 0LL;
		jule::F64 _20217_lo = 0LL;
		if (_18013_absx < 1.0397207708399179) {
			if ((!(_18113_sign))) {
				_20117_hi=static_cast<jule::F64>(_15618_x - 0.6931471803691238);
				_20217_lo=0.00000000019082149292705877;
				_19913_k=1LL;
			} else {
				_20117_hi=static_cast<jule::F64>(_15618_x + 0.6931471803691238);
				_20217_lo=-0.00000000019082149292705877;
				_19913_k=-1LL;
			}
		} else {
			if ((!(_18113_sign))) {
				_19913_k=static_cast<jule::Int>((1.4426950408889634 * _15618_x) + 0.5);
			} else {
				_19913_k=static_cast<jule::Int>((1.4426950408889634 * _15618_x) - 0.5);
			}
			jule::F64 _21917_t = static_cast<jule::F64>(_19913_k);
			_20117_hi=static_cast<jule::F64>(_15618_x - (_21917_t * 0.6931471803691238));
			_20217_lo=static_cast<jule::F64>(_21917_t * 0.00000000019082149292705877);
		}
		_15618_x=static_cast<jule::F64>(_20117_hi - _20217_lo);
		_19813_c=static_cast<jule::F64>((_20117_hi - _15618_x) - _20217_lo);
	} else if (_18013_absx < 0.00000000000000005551115123125783) {
		return _15618_x;
	} else {
		_19913_k=0LL;
	}
	jule::F64 _2329_hfx = 0.5 * _15618_x;
	jule::F64 _2339_hxs = _15618_x * _2329_hfx;
	jule::F64 _2349_r1 = 1LL + (_2339_hxs * (-0.03333333333333313 + (_2339_hxs * (0.0015873015872548146 + (_2339_hxs * (-0.0000793650757867488 + (_2339_hxs * (0.000004008217827329362 + (_2339_hxs * -0.00000020109921818362437)))))))));
	jule::F64 _23513_t = 3LL - (_2349_r1 * _2329_hfx);
	jule::F64 _23613_e = _2339_hxs * jule::div(_2349_r1 - _23513_t,6LL - (_15618_x * _23513_t));
	if (_19913_k == 0LL) {
		return static_cast<jule::F64>(_15618_x - ((_15618_x * _23613_e) - _2339_hxs));
	}
	_23613_e=static_cast<jule::F64>((_15618_x * (_23613_e - _19813_c)) - _19813_c);
	_23613_e-=_2339_hxs;
	{
		if (!((_19913_k == -1LL))) { goto _case_end_4594818272; }
		_case_begin_4594818272:;
		{
			return static_cast<jule::F64>((0.5 * (_15618_x - _23613_e)) - 0.5);
		}
		goto _match_end_4594820176;
		_case_end_4594818272:;
		if (!((_19913_k == 1LL))) { goto _case_end_4594821616; }
		_case_begin_4594821616:;
		{
			if (_15618_x < -0.25) {
				return static_cast<jule::F64>(-2LL * (_23613_e - (_15618_x + 0.5)));
			}
			return static_cast<jule::F64>(1LL + (2LL * (_15618_x - _23613_e)));
		}
		goto _match_end_4594820176;
		_case_end_4594821616:;
		if (!((_19913_k <= -2LL) || (_19913_k > 56LL))) { goto _case_end_4594821728; }
		_case_begin_4594821728:;
		{
			jule::F64 _25117_y = 1LL - (_23613_e - _15618_x);
			_25117_y=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>(_1100c9ac0_f64_bits(_25117_y) + (static_cast<jule::U64>(_19913_k) << 52LL))));
			return static_cast<jule::F64>(_25117_y - 1LL);
		}
		goto _match_end_4594820176;
		_case_end_4594821728:;
		_match_end_4594820176:;
	}
	if (_19913_k < 20LL) {
		jule::F64 _25613_t = _1100c9ac0_f64_from_bits(static_cast<jule::U64>(4607182418800017408LL - (9007199254740992LL >> static_cast<jule::Uint>(_19913_k))));
		jule::F64 _25717_y = _25613_t - (_23613_e - _15618_x);
		_25717_y=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>(_1100c9ac0_f64_bits(_25717_y) + (static_cast<jule::U64>(_19913_k) << 52LL))));
		return _25717_y;
	}
	_23513_t=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>(static_cast<jule::U64>(1023LL - _19913_k) << 52LL)));
	jule::F64 _26213_y = _15618_x - (_23613_e + _23513_t);
	(_26213_y)++;
	_26213_y=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>(_1100c9ac0_f64_bits(_26213_y) + (static_cast<jule::U64>(_19913_k) << 52LL))));
	return _26213_y;
}



inline jule::F64 _1101dd560_abs(jule::F64 _4312_x) {
	return static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>(_1100c9ac0_f64_bits(_4312_x) & 9223372036854775807LLU)));
}



inline jule::F64 _1101ab0a0_j1(jule::F64 _10515_x) {
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_110193400_is_nan(_10515_x)))) { goto _case_end_4594852688; }
		_case_begin_4594852688:;
		{
			return _10515_x;
		}
		goto _match_end_4594852128;
		_case_end_4594852688:;
		if (!((_110193400_is_inf(_10515_x,0LL)) || (_10515_x == 0LL))) { goto _case_end_4594852816; }
		_case_begin_4594852816:;
		{
			return 0LL;
		}
		goto _match_end_4594852128;
		_case_end_4594852816:;
		_match_end_4594852128:;
	}
	jule::Bool _12613_sign = false;
	if (_10515_x < 0LL) {
		_10515_x=static_cast<jule::F64>((-(_10515_x)));
		_12613_sign=true;
	}
	if (_10515_x >= 2LL) {
		jule::F64 _13214_s;
		jule::F64 _13217_c;
		std::tie(_13214_s,_13217_c) = _110166080_sincos(_10515_x);
		jule::F64 _13317_ss = (-(_13214_s)) - _13217_c;
		jule::F64 _13417_cc = _13214_s - _13217_c;
		if (_10515_x < 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) {
			jule::F64 _13817_z = _1100cd0d0_cos(static_cast<jule::F64>(_10515_x + _10515_x));
			if ((_13214_s * _13217_c) > 0LL) {
				_13417_cc=static_cast<jule::F64>(jule::div(_13817_z,_13317_ss));
			} else {
				_13317_ss=static_cast<jule::F64>(jule::div(_13817_z,_13417_cc));
			}
		}
		jule::F64 _14917_z = 0LL;
		if (_10515_x > 5188146770730811392LL) {
			_14917_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * _13417_cc,_1104d53b0_sqrt(_10515_x)));
		} else {
			jule::F64 _15317_u = _1101ab0a0_pone(_10515_x);
			jule::F64 _15417_v = _1101ab0a0_qone(_10515_x);
			_14917_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * ((_15317_u * _13417_cc) - (_15417_v * _13317_ss)),_1104d53b0_sqrt(_10515_x)));
		}
		if (_12613_sign) {
			return static_cast<jule::F64>((-(_14917_z)));
		}
		return _14917_z;
	}
	if (_10515_x < 0.000000007450580596923828) {
		return static_cast<jule::F64>(0.5 * _10515_x);
	}
	jule::F64 _16613_z = _10515_x * _10515_x;
	jule::F64 _16713_r = _16613_z * (-0.0625 + (_16613_z * (0.001407056669551897 + (_16613_z * (-0.00001599556310840356 + (_16613_z * 0.000000049672799960958445))))));
	jule::F64 _1689_s = 1LL + (_16613_z * (0.019153759953836346 + (_16613_z * (0.00018594678558863092 + (_16613_z * (0.0000011771846404262368 + (_16613_z * (0.0000000050463625707621704 + (_16613_z * 0.000000000012354227442613791)))))))));
	_16713_r*=_10515_x;
	_16613_z=static_cast<jule::F64>((0.5 * _10515_x) + jule::div(_16713_r,_1689_s));
	if (_12613_sign) {
		return static_cast<jule::F64>((-(_16613_z)));
	}
	return _16613_z;
}



inline jule::F64 _1101ab0a0_y1(jule::F64 _18411_x) {
	
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_18411_x < 0LL) || (_110193400_is_nan(_18411_x)))) { goto _case_end_4594910720; }
		_case_begin_4594910720:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4594910528;
		_case_end_4594910720:;
		if (!((_110193400_is_inf(_18411_x,1LL)))) { goto _case_end_4594910848; }
		_case_begin_4594910848:;
		{
			return 0LL;
		}
		goto _match_end_4594910528;
		_case_end_4594910848:;
		if (!((_18411_x == 0LL))) { goto _case_end_4594910976; }
		_case_begin_4594910976:;
		{
			return static_cast<jule::F64>(_110193400_inf(-1LL));
		}
		goto _match_end_4594910528;
		_case_end_4594910976:;
		_match_end_4594910528:;
	}
	if (_18411_x >= 2LL) {
		jule::F64 _20814_s;
		jule::F64 _20817_c;
		std::tie(_20814_s,_20817_c) = _110166080_sincos(_18411_x);
		jule::F64 _20917_ss = (-(_20814_s)) - _20817_c;
		jule::F64 _21017_cc = _20814_s - _20817_c;
		if (_18411_x < 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) {
			jule::F64 _21417_z = _1100cd0d0_cos(static_cast<jule::F64>(_18411_x + _18411_x));
			if ((_20814_s * _20817_c) > 0LL) {
				_21017_cc=static_cast<jule::F64>(jule::div(_21417_z,_20917_ss));
			} else {
				_20917_ss=static_cast<jule::F64>(jule::div(_21417_z,_21017_cc));
			}
		}
		jule::F64 _23217_z = 0LL;
		if (_18411_x > 5188146770730811392LL) {
			_23217_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * _20917_ss,_1104d53b0_sqrt(_18411_x)));
		} else {
			jule::F64 _23617_u = _1101ab0a0_pone(_18411_x);
			jule::F64 _23717_v = _1101ab0a0_qone(_18411_x);
			_23217_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * ((_23617_u * _20917_ss) + (_23717_v * _21017_cc)),_1104d53b0_sqrt(_18411_x)));
		}
		return _23217_z;
	}
	if (_18411_x <= 0.00000000000000005551115123125783) {
		return static_cast<jule::F64>(jule::div(-0.6366197723675814,_18411_x));
	}
	jule::F64 _2459_z = _18411_x * _18411_x;
	jule::F64 _2469_u = -0.19605709064623894 + (_2459_z * (0.05044387166398113 + (_2459_z * (-0.0019125689587576355 + (_2459_z * (0.00002352526005616105 + (_2459_z * -0.00000009190991580398789)))))));
	jule::F64 _2479_v = 1LL + (_2459_z * (0.01991673182366499 + (_2459_z * (0.00020255258102513517 + (_2459_z * (0.0000013560880109751623 + (_2459_z * (0.000000006227414523646215 + (_2459_z * 0.000000000016655924620799208)))))))));
	return static_cast<jule::F64>((_18411_x * jule::div(_2469_u,_2479_v)) + (0.6366197723675814 * ((_1101ab0a0_j1(_18411_x) * _1101abe90_log(_18411_x)) - jule::div(1LL,_18411_x))));
}



inline jule::F64 _1101ab0a0_pone(jule::F64 _3289_x) {
	jule::Array<jule::F64,6>* _32913_p = nullptr;
	jule::Array<jule::F64,5>* _33013_q = nullptr;
	if (_3289_x >= 8LL) {
		_32913_p=(&(_1101ab0a0_P_1R8));
		_33013_q=(&(_1101ab0a0_P_1S8));
	} else if (_3289_x >= 4.5454) {
		_32913_p=(&(_1101ab0a0_P_1R5));
		_33013_q=(&(_1101ab0a0_P_1S5));
	} else if (_3289_x >= 2.8571) {
		_32913_p=(&(_1101ab0a0_P_1R3));
		_33013_q=(&(_1101ab0a0_P_1S3));
	} else if (_3289_x >= 2LL) {
		_32913_p=(&(_1101ab0a0_P_1R2));
		_33013_q=(&(_1101ab0a0_P_1S2));
	}
	{
		jule::F64 _34513_z = jule::div(1LL,_3289_x * _3289_x);
		jule::F64 _34613_r = (*(_32913_p))[0LL] + (_34513_z * ((*(_32913_p))[1LL] + (_34513_z * ((*(_32913_p))[2LL] + (_34513_z * ((*(_32913_p))[3LL] + (_34513_z * ((*(_32913_p))[4LL] + (_34513_z * (*(_32913_p))[5LL])))))))));
		jule::F64 _34713_s = 1LL + (_34513_z * ((*(_33013_q))[0LL] + (_34513_z * ((*(_33013_q))[1LL] + (_34513_z * ((*(_33013_q))[2LL] + (_34513_z * ((*(_33013_q))[3LL] + (_34513_z * (*(_33013_q))[4LL])))))))));
		return static_cast<jule::F64>(1LL + jule::div(_34613_r,_34713_s));
	}
}



inline jule::F64 _1101ab0a0_qone(jule::F64 _4339_x) {
	jule::Array<jule::F64,6>* _43413_p = nullptr;
	jule::Array<jule::F64,6>* _43513_q = nullptr;
	if (_4339_x >= 8LL) {
		_43413_p=(&(_1101ab0a0_Q_1R8));
		_43513_q=(&(_1101ab0a0_Q_1S8));
	} else if (_4339_x >= 4.5454) {
		_43413_p=(&(_1101ab0a0_Q_1R5));
		_43513_q=(&(_1101ab0a0_Q_1S5));
	} else if (_4339_x >= 2.8571) {
		_43413_p=(&(_1101ab0a0_Q_1R3));
		_43513_q=(&(_1101ab0a0_Q_1S3));
	} else if (_4339_x >= 2LL) {
		_43413_p=(&(_1101ab0a0_Q_1R2));
		_43513_q=(&(_1101ab0a0_Q_1S2));
	}
	{
		jule::F64 _45013_z = jule::div(1LL,_4339_x * _4339_x);
		jule::F64 _45113_r = (*(_43413_p))[0LL] + (_45013_z * ((*(_43413_p))[1LL] + (_45013_z * ((*(_43413_p))[2LL] + (_45013_z * ((*(_43413_p))[3LL] + (_45013_z * ((*(_43413_p))[4LL] + (_45013_z * (*(_43413_p))[5LL])))))))));
		jule::F64 _45213_s = 1LL + (_45013_z * ((*(_43513_q))[0LL] + (_45013_z * ((*(_43513_q))[1LL] + (_45013_z * ((*(_43513_q))[2LL] + (_45013_z * ((*(_43513_q))[3LL] + (_45013_z * ((*(_43513_q))[4LL] + (_45013_z * (*(_43513_q))[5LL])))))))))));
		return static_cast<jule::F64>(jule::div(0.375 + jule::div(_45113_r,_45213_s),_4339_x));
	}
}



inline jule::U64 _1102af770_zero(jule::U64 _409_x) {
	if (_409_x == 0LL) {
		return 1LL;
	}
	return 0LL;
}



inline jule::U64 _1102af770_nonzero(jule::U64 _4912_x) {
	if (_4912_x != 0LL) {
		return 1LL;
	}
	return 0LL;
}



inline std::tuple<jule::U64,jule::U64> _1102af770_shl(jule::U64 _588_u1,jule::U64 _5817_u2,jule::Uint _5826_n) {
	jule::U64 _5846_r2 = jule::U64();
	jule::U64 _5837_r1 = jule::U64();
	_5837_r1=static_cast<jule::U64>(((_588_u1 << _5826_n) | (_5817_u2 >> (64LL - _5826_n))) | (_5817_u2 << (_5826_n - 64LL)));
	_5846_r2=static_cast<jule::U64>(_5817_u2 << _5826_n);
	return std::make_tuple(_5837_r1,_5846_r2);
}



inline std::tuple<jule::U64,jule::U64> _1102af770_shr(jule::U64 _648_u1,jule::U64 _6417_u2,jule::Uint _6426_n) {
	jule::U64 _6446_r2 = jule::U64();
	jule::U64 _6437_r1 = jule::U64();
	jule::U64 _7113_shift = _648_u1;
	jule::Uint _7213_shift_n = _6426_n - 64LL;
	_iter_begin_4594986128:;
	if (!((_7113_shift > 0LL) && (_7213_shift_n > 0LL))) { goto _iter_end_4594986128; }
	{
		(_7213_shift_n)--;
		_7113_shift>>=1LL;
	}
	_iter_next_4594986128:;
	goto _iter_begin_4594986128;
	_iter_end_4594986128:;
	_6446_r2=static_cast<jule::U64>(((_6417_u2 >> _6426_n) | (_648_u1 << (64LL - _6426_n))) | _7113_shift);
	_6437_r1=static_cast<jule::U64>(_648_u1 >> _6426_n);
	return std::make_tuple(_6437_r1,_6446_r2);
}



inline std::tuple<jule::U64,jule::U64> _1102af770_shrcompress(jule::U64 _8716_u1,jule::U64 _8725_u2,jule::Uint _8734_n) {
	jule::U64 _8754_r2 = jule::U64();
	jule::U64 _8745_r1 = jule::U64();
	{
		if (!((_8734_n == 0LL))) { goto _case_end_4594993344; }
		_case_begin_4594993344:;
		{
			_8745_r1 = _8716_u1;
			_8754_r2 = _8725_u2;
			return std::make_tuple(_8745_r1,_8754_r2);
		}
		goto _match_end_4594993088;
		_case_end_4594993344:;
		if (!((_8734_n == 64LL))) { goto _case_end_4594993472; }
		_case_begin_4594993472:;
		{
			_8745_r1 = 0LL;
			_8754_r2 = static_cast<jule::U64>(_8716_u1 | _1102af770_nonzero(_8725_u2));
			return std::make_tuple(_8745_r1,_8754_r2);
		}
		goto _match_end_4594993088;
		_case_end_4594993472:;
		if (!((_8734_n >= 128LL))) { goto _case_end_4594993600; }
		_case_begin_4594993600:;
		{
			_8745_r1 = 0LL;
			_8754_r2 = static_cast<jule::U64>(_1102af770_nonzero(static_cast<jule::U64>(_8716_u1 | _8725_u2)));
			return std::make_tuple(_8745_r1,_8754_r2);
		}
		goto _match_end_4594993088;
		_case_end_4594993600:;
		if (!((_8734_n < 64LL))) { goto _case_end_4594993728; }
		_case_begin_4594993728:;
		{
			std::tie(_8745_r1,_8754_r2) = _1102af770_shr(_8716_u1,_8725_u2,_8734_n);
			_8754_r2|=static_cast<jule::U64>(_1102af770_nonzero(static_cast<jule::U64>(_8725_u2 & ((1LL << _8734_n) - 1LL))));
		}
		goto _match_end_4594993088;
		_case_end_4594993728:;
		if (!((_8734_n < 128LL))) { goto _case_end_4594993856; }
		_case_begin_4594993856:;
		{
			std::tie(_8745_r1,_8754_r2) = _1102af770_shr(_8716_u1,_8725_u2,_8734_n);
			_8754_r2|=static_cast<jule::U64>(_1102af770_nonzero(static_cast<jule::U64>((_8716_u1 & ((1LL << (_8734_n - 64LL)) - 1LL)) | _8725_u2)));
		}
		goto _match_end_4594993088;
		_case_end_4594993856:;
		_match_end_4594993088:;
	}
	return std::make_tuple(_8745_r1,_8754_r2);
}



inline jule::I32 _1102af770_lz(jule::U64 _1057_u1,jule::U64 _10516_u2) {
	jule::I32 _10527_l = jule::I32();
	_10527_l=static_cast<jule::I32>(_110621fc0_leading_zeros64(_1057_u1));
	if (_10527_l == 64LL) {
		_10527_l+=static_cast<jule::I32>(_110621fc0_leading_zeros64(_10516_u2));
	}
	_10527_l = _10527_l;
	return _10527_l;
}



inline std::tuple<jule::U32,jule::I32,jule::U64> _1102af770_split(jule::U64 _11610_b) {
	jule::U64 _11641_mantissa = jule::U64();
	jule::I32 _11631_exp = jule::I32();
	jule::U32 _11620_sign = jule::U32();
	_11620_sign=static_cast<jule::U32>(_11610_b >> 63LL);
	_11631_exp=static_cast<jule::I32>(static_cast<jule::I32>(_11610_b >> 52LL) & 2047LL);
	_11641_mantissa=static_cast<jule::U64>(_11610_b & 4503599627370495LL);
	if (_11631_exp == 0LL) {
		jule::Uint _12313_shift = static_cast<jule::Uint>(_110621fc0_leading_zeros64(_11641_mantissa) - 11LL);
		_11641_mantissa<<=_12313_shift;
		_11631_exp=static_cast<jule::I32>(1LL - static_cast<jule::I32>(_12313_shift));
	} else {
		_11641_mantissa|=4503599627370496LL;
	}
	return std::make_tuple(_11620_sign,_11631_exp,_11641_mantissa);
}



inline jule::F64 _1102af770_fma(jule::F64 _13512_x,jule::F64 _13520_y,jule::F64 _13528_z) {
	jule::U64 _13610_bx = _1100c9ac0_f64_bits(_13512_x);
	jule::U64 _13614_by = _1100c9ac0_f64_bits(_13520_y);
	jule::U64 _13618_bz = _1100c9ac0_f64_bits(_13528_z);
	std::tie(_13610_bx,_13614_by,_13618_bz) = std::make_tuple(_1100c9ac0_f64_bits(_13512_x),_1100c9ac0_f64_bits(_13520_y),_1100c9ac0_f64_bits(_13528_z));
	if (((((_13512_x == 0LL) || (_13520_y == 0LL)) || (_13528_z == 0LL)) || ((_13610_bx & 9218868437227405312LL) == 9218868437227405312LL)) || ((_13614_by & 9218868437227405312LL) == 9218868437227405312LL)) {
		return static_cast<jule::F64>((_13512_x * _13520_y) + _13528_z);
	}
	if ((_13618_bz & 9218868437227405312LL) == 9218868437227405312LL) {
		return _13528_z;
	}
	jule::U32 _15010_xs;
	jule::I32 _15014_xe;
	jule::U64 _15018_xm;
	std::tie(_15010_xs,_15014_xe,_15018_xm) = _1102af770_split(_13610_bx);
	jule::U32 _15110_ys;
	jule::I32 _15114_ye;
	jule::U64 _15118_ym;
	std::tie(_15110_ys,_15114_ye,_15118_ym) = _1102af770_split(_13614_by);
	jule::U32 _15214_zs;
	jule::I32 _15222_ze;
	jule::U64 _15226_zm;
	std::tie(_15214_zs,_15222_ze,_15226_zm) = _1102af770_split(_13618_bz);
	jule::I32 _15613_pe = ((_15014_xe + _15114_ye) - 1023LL) + 1LL;
	jule::U64 _16114_pm1;
	jule::U64 _16123_pm2;
	std::tie(_16114_pm1,_16123_pm2) = _110621fc0_mul64(static_cast<jule::U64>(_15018_xm << 10LL),static_cast<jule::U64>(_15118_ym << 11LL));
	jule::U64 _16214_zm1 = _15226_zm << 10LL;
	jule::U64 _16223_zm2 = static_cast<jule::U64>(0LLU);
	std::tie(_16214_zm1,_16223_zm2) = std::make_tuple(_15226_zm << 10LL,static_cast<jule::U64>(0LLU));
	jule::U32 _16313_ps = _15010_xs ^ _15110_ys;
	jule::Uint _1669_is62zero = static_cast<jule::Uint>(((~(_16114_pm1)) >> 62LL) & 1LL);
	std::tie(_16114_pm1,_16123_pm2) = _1102af770_shl(_16114_pm1,_16123_pm2,_1669_is62zero);
	_15613_pe-=static_cast<jule::I32>(_1669_is62zero);
	if ((_15613_pe < _15222_ze) || ((_15613_pe == _15222_ze) && (_16114_pm1 < _16214_zm1))) {
		std::tie(_16313_ps,_15613_pe,_16114_pm1,_16123_pm2,_15214_zs,_15222_ze,_16214_zm1,_16223_zm2) = std::make_tuple(_15214_zs,_15222_ze,_16214_zm1,_16223_zm2,_16313_ps,static_cast<jule::I32>(_15613_pe),_16114_pm1,_16123_pm2);
	}
	std::tie(_16214_zm1,_16223_zm2) = _1102af770_shrcompress(_16214_zm1,_16223_zm2,static_cast<jule::Uint>(_15613_pe - _15222_ze));
	jule::U64 _17913_m = 0LLU;
	jule::U64 _18013_c = 0LLU;
	if (_16313_ps == _15214_zs) {
		std::tie(_16123_pm2,_18013_c) = _110621fc0_add64(_16123_pm2,_16223_zm2,0LLU);
		std::tie(_16114_pm1,std::ignore) = _110621fc0_add64(_16114_pm1,_16214_zm1,_18013_c);
		_15613_pe-=static_cast<jule::I32>((~(_16114_pm1)) >> 63LL);
		std::tie(_16114_pm1,_17913_m) = _1102af770_shrcompress(_16114_pm1,_16123_pm2,static_cast<jule::Uint>(64LL + (_16114_pm1 >> 63LL)));
	} else {
		std::tie(_16123_pm2,_18013_c) = _110621fc0_sub64(_16123_pm2,_16223_zm2,0LLU);
		std::tie(_16114_pm1,std::ignore) = _110621fc0_sub64(_16114_pm1,_16214_zm1,_18013_c);
		jule::I32 _19113_nz = _1102af770_lz(_16114_pm1,_16123_pm2);
		_15613_pe-=_19113_nz;
		std::tie(_17913_m,_16123_pm2) = _1102af770_shl(_16114_pm1,_16123_pm2,static_cast<jule::Uint>(_19113_nz - 1LL));
		_17913_m|=static_cast<jule::U64>(_1102af770_nonzero(_16123_pm2));
	}
	if ((_15613_pe > 2045LL) || ((_15613_pe == 2045LL) && (((_17913_m + 512LL) >> 63LL) == 1LL))) {
		return static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>((static_cast<jule::U64>(_16313_ps) << 63LL) | 9218868437227405312LL)));
	}
	if (_15613_pe < 0LL) {
		jule::Uint _20313_n = static_cast<jule::Uint>((-(_15613_pe)));
		_17913_m=static_cast<jule::U64>((_17913_m >> _20313_n) | _1102af770_nonzero(static_cast<jule::U64>(_17913_m & ((1LL << _20313_n) - 1LL))));
		_15613_pe=0LL;
	}
	_17913_m=static_cast<jule::U64>(((_17913_m + 512LL) >> 10LL) & (~(_1102af770_zero(static_cast<jule::U64>((_17913_m & 1023LL) ^ 512LL)))));
	_15613_pe&=static_cast<jule::I32>((-(static_cast<jule::I32>(_1102af770_nonzero(_17913_m)))));
	return static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>(((static_cast<jule::U64>(_16313_ps) << 63LL) + (static_cast<jule::U64>(_15613_pe) << 52LL)) + _17913_m)));
}



inline std::tuple<jule::F64,jule::F64> _110254f60_modf(jule::F64 _4413_f) {
	jule::F64 _4437_frac = jule::F64();
	jule::F64 _4423_integer = jule::F64();
	
	jule::F64 _469_abs_f = _1101dd560_abs(_4413_f);
	jule::F64 _4713_i = 0LL;
	if (_469_abs_f > 4503599627370496LL) {
		_4713_i=_4413_f;
	} else {
		_4713_i=static_cast<jule::F64>(_469_abs_f + 4503599627370496LL);
		_4713_i-=4503599627370496LL;
		_iter_begin_4595076816:;
		if (!(_4713_i > _469_abs_f)) { goto _iter_end_4595076816; }
		{
			(_4713_i)--;
		}
		_iter_next_4595076816:;
		goto _iter_begin_4595076816;
		_iter_end_4595076816:;
		if (_4413_f < 0LL) {
			_4713_i=static_cast<jule::F64>((-(_4713_i)));
		}
	}
	_4423_integer = _4713_i;
	_4437_frac = static_cast<jule::F64>(_4413_f - _4713_i);
	return std::make_tuple(_4423_integer,_4437_frac);
}



inline jule::F64 _11020f800_log10(jule::F64 _4014_x) {
	return static_cast<jule::F64>(_1101abe90_log(_4014_x) * 0.43429448190325176);
}



inline jule::F64 _11020f800_log2(jule::F64 _4413_x) {
	jule::F64 _4510_frac;
	jule::Int _4516_exp;
	std::tie(_4510_frac,_4516_exp) = _1100ebd60_frexp(_4413_x);
	if (_4510_frac == 0.5) {
		return static_cast<jule::F64>(_4516_exp - 1LL);
	}
	return static_cast<jule::F64>((_1101abe90_log(_4510_frac) * 1.4426950408889634) + static_cast<jule::F64>(_4516_exp));
}



inline jule::F64 _110219170_hypot(jule::F64 _5018_p,jule::F64 _5030_q) {
	{
		if (!((_110193400_is_inf(_5018_p,0LL)) || (_110193400_is_inf(_5030_q,0LL)))) { goto _case_end_4595087024; }
		_case_begin_4595087024:;
		{
			return static_cast<jule::F64>(_110193400_inf(1LL));
		}
		goto _match_end_4595086832;
		_case_end_4595087024:;
		if (!((_110193400_is_nan(_5018_p)) || (_110193400_is_nan(_5030_q)))) { goto _case_end_4595087152; }
		_case_begin_4595087152:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4595086832;
		_case_end_4595087152:;
		_match_end_4595086832:;
	}
	std::tie(_5018_p,_5030_q) = std::make_tuple(static_cast<jule::F64>(_1101dd560_abs(_5018_p)),static_cast<jule::F64>(_1101dd560_abs(_5030_q)));
	if (_5018_p < _5030_q) {
		std::tie(_5018_p,_5030_q) = std::make_tuple(_5030_q,_5018_p);
	}
	if (_5018_p == 0LL) {
		return 0LL;
	}
	_5030_q=static_cast<jule::F64>(jule::div(_5030_q,_5018_p));
	return static_cast<jule::F64>(_5018_p * _1104d53b0_sqrt(static_cast<jule::F64>(1LL + (_5030_q * _5030_q))));
}



inline jule::F64 _1102aaee0_j0(jule::F64 _10715_x) {
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_110193400_is_nan(_10715_x)))) { goto _case_end_4595107392; }
		_case_begin_4595107392:;
		{
			return _10715_x;
		}
		goto _match_end_4595106816;
		_case_end_4595107392:;
		if (!((_110193400_is_inf(_10715_x,0LL)))) { goto _case_end_4595107520; }
		_case_begin_4595107520:;
		{
			return 0LL;
		}
		goto _match_end_4595106816;
		_case_end_4595107520:;
		if (!((_10715_x == 0LL))) { goto _case_end_4595107648; }
		_case_begin_4595107648:;
		{
			return 1LL;
		}
		goto _match_end_4595106816;
		_case_end_4595107648:;
		_match_end_4595106816:;
	}
	_10715_x=static_cast<jule::F64>(_1101dd560_abs(_10715_x));
	if (_10715_x >= 2LL) {
		jule::F64 _13214_s;
		jule::F64 _13217_c;
		std::tie(_13214_s,_13217_c) = _110166080_sincos(_10715_x);
		jule::F64 _13317_ss = _13214_s - _13217_c;
		jule::F64 _13417_cc = _13214_s + _13217_c;
		if (_10715_x < 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) {
			jule::F64 _13817_z = (-(_1100cd0d0_cos(static_cast<jule::F64>(_10715_x + _10715_x))));
			if ((_13214_s * _13217_c) < 0LL) {
				_13417_cc=static_cast<jule::F64>(jule::div(_13817_z,_13317_ss));
			} else {
				_13317_ss=static_cast<jule::F64>(jule::div(_13817_z,_13417_cc));
			}
		}
		jule::F64 _14917_z = 0LL;
		if (_10715_x > 5188146770730811392LL) {
			_14917_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * _13417_cc,_1104d53b0_sqrt(_10715_x)));
		} else {
			jule::F64 _15317_u = _1102aaee0_pzero(_10715_x);
			jule::F64 _15417_v = _1102aaee0_qzero(_10715_x);
			_14917_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * ((_15317_u * _13417_cc) - (_15417_v * _13317_ss)),_1104d53b0_sqrt(_10715_x)));
		}
		return _14917_z;
	}
	if (_10715_x < 0.0001220703125) {
		if (_10715_x < 0.000000007450580596923828) {
			return 1LL;
		}
		return static_cast<jule::F64>(1LL - ((0.25 * _10715_x) * _10715_x));
	}
	jule::F64 _1659_z = _10715_x * _10715_x;
	jule::F64 _1669_r = _1659_z * (0.015624999999999995 + (_1659_z * (-0.00018997929423885472 + (_1659_z * (0.0000018295404953270067 + (_1659_z * -0.000000004618326885321032))))));
	jule::F64 _1679_s = 1LL + (_1659_z * (0.015619102946489001 + (_1659_z * (0.00011692678466333745 + (_1659_z * (0.0000005135465502073181 + (_1659_z * 0.0000000011661400333379)))))));
	if (_10715_x < 1LL) {
		return static_cast<jule::F64>(1LL + (_1659_z * (-0.25 + jule::div(_1669_r,_1679_s))));
	}
	jule::F64 _1719_u = 0.5 * _10715_x;
	return static_cast<jule::F64>(((1LL + _1719_u) * (1LL - _1719_u)) + (_1659_z * jule::div(_1669_r,_1679_s)));
}



inline jule::F64 _1102aaee0_y0(jule::F64 _18211_x) {
	
	
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_18211_x < 0LL) || (_110193400_is_nan(_18211_x)))) { goto _case_end_4595150320; }
		_case_begin_4595150320:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4595150128;
		_case_end_4595150320:;
		if (!((_110193400_is_inf(_18211_x,1LL)))) { goto _case_end_4595150448; }
		_case_begin_4595150448:;
		{
			return 0LL;
		}
		goto _match_end_4595150128;
		_case_end_4595150448:;
		if (!((_18211_x == 0LL))) { goto _case_end_4595150576; }
		_case_begin_4595150576:;
		{
			return static_cast<jule::F64>(_110193400_inf(-1LL));
		}
		goto _match_end_4595150128;
		_case_end_4595150576:;
		_match_end_4595150128:;
	}
	if (_18211_x >= 2LL) {
		jule::F64 _21814_s;
		jule::F64 _21817_c;
		std::tie(_21814_s,_21817_c) = _110166080_sincos(_18211_x);
		jule::F64 _21917_ss = _21814_s - _21817_c;
		jule::F64 _22017_cc = _21814_s + _21817_c;
		if (_18211_x < 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) {
			jule::F64 _22717_z = (-(_1100cd0d0_cos(static_cast<jule::F64>(_18211_x + _18211_x))));
			if ((_21814_s * _21817_c) < 0LL) {
				_22017_cc=static_cast<jule::F64>(jule::div(_22717_z,_21917_ss));
			} else {
				_21917_ss=static_cast<jule::F64>(jule::div(_22717_z,_22017_cc));
			}
		}
		jule::F64 _23417_z = 0LL;
		if (_18211_x > 5188146770730811392LL) {
			_23417_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * _21917_ss,_1104d53b0_sqrt(_18211_x)));
		} else {
			jule::F64 _23817_u = _1102aaee0_pzero(_18211_x);
			jule::F64 _23917_v = _1102aaee0_qzero(_18211_x);
			_23417_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * ((_23817_u * _21917_ss) + (_23917_v * _22017_cc)),_1104d53b0_sqrt(_18211_x)));
		}
		return _23417_z;
	}
	if (_18211_x <= 0.000000007450580596923828) {
		return static_cast<jule::F64>(-0.07380429510868723 + (0.6366197723675814 * _1101abe90_log(_18211_x)));
	}
	jule::F64 _2479_z = _18211_x * _18211_x;
	jule::F64 _2489_u = -0.07380429510868723 + (_2479_z * (0.17666645250918112 + (_2479_z * (-0.01381856719455969 + (_2479_z * (0.00034745343209368365 + (_2479_z * (-0.0000038140705372436416 + (_2479_z * (0.000000019559013703502292 + (_2479_z * -0.00000000003982051941321034)))))))))));
	jule::F64 _2499_v = 1LL + (_2479_z * (0.01273048348341237 + (_2479_z * (0.00007600686273503533 + (_2479_z * (0.0000002591508518404578 + (_2479_z * 0.00000000044111031133267547)))))));
	return static_cast<jule::F64>(jule::div(_2489_u,_2499_v) + ((0.6366197723675814 * _1102aaee0_j0(_18211_x)) * _1101abe90_log(_18211_x)));
}



inline jule::F64 _1102aaee0_pzero(jule::F64 _33010_x) {
	jule::Array<jule::F64,6>* _33113_p = nullptr;
	jule::Array<jule::F64,5>* _33213_q = nullptr;
	if (_33010_x >= 8LL) {
		_33113_p=(&(_1102aaee0_P_0R8));
		_33213_q=(&(_1102aaee0_P_0S8));
	} else if (_33010_x >= 4.5454) {
		_33113_p=(&(_1102aaee0_P_0R5));
		_33213_q=(&(_1102aaee0_P_0S5));
	} else if (_33010_x >= 2.8571) {
		_33113_p=(&(_1102aaee0_P_0R3));
		_33213_q=(&(_1102aaee0_P_0S3));
	} else if (_33010_x >= 2LL) {
		_33113_p=(&(_1102aaee0_P_0R2));
		_33213_q=(&(_1102aaee0_P_0S2));
	}
	{
		jule::F64 _34713_z = jule::div(1LL,_33010_x * _33010_x);
		jule::F64 _34813_r = (*(_33113_p))[0LL] + (_34713_z * ((*(_33113_p))[1LL] + (_34713_z * ((*(_33113_p))[2LL] + (_34713_z * ((*(_33113_p))[3LL] + (_34713_z * ((*(_33113_p))[4LL] + (_34713_z * (*(_33113_p))[5LL])))))))));
		jule::F64 _34913_s = 1LL + (_34713_z * ((*(_33213_q))[0LL] + (_34713_z * ((*(_33213_q))[1LL] + (_34713_z * ((*(_33213_q))[2LL] + (_34713_z * ((*(_33213_q))[3LL] + (_34713_z * (*(_33213_q))[4LL])))))))));
		return static_cast<jule::F64>(1LL + jule::div(_34813_r,_34913_s));
	}
}



inline jule::F64 _1102aaee0_qzero(jule::F64 _43510_x) {
	jule::Array<jule::F64,6>* _43613_p = nullptr;
	jule::Array<jule::F64,6>* _43713_q = nullptr;
	if (_43510_x >= 8LL) {
		_43613_p=(&(_1102aaee0_Q_0R8));
		_43713_q=(&(_1102aaee0_Q_0S8));
	} else if (_43510_x >= 4.5454) {
		_43613_p=(&(_1102aaee0_Q_0R5));
		_43713_q=(&(_1102aaee0_Q_0S5));
	} else if (_43510_x >= 2.8571) {
		_43613_p=(&(_1102aaee0_Q_0R3));
		_43713_q=(&(_1102aaee0_Q_0S3));
	} else if (_43510_x >= 2LL) {
		_43613_p=(&(_1102aaee0_Q_0R2));
		_43713_q=(&(_1102aaee0_Q_0S2));
	}
	{
		jule::F64 _45213_z = jule::div(1LL,_43510_x * _43510_x);
		jule::F64 _45313_r = (*(_43613_p))[0LL] + (_45213_z * ((*(_43613_p))[1LL] + (_45213_z * ((*(_43613_p))[2LL] + (_45213_z * ((*(_43613_p))[3LL] + (_45213_z * ((*(_43613_p))[4LL] + (_45213_z * (*(_43613_p))[5LL])))))))));
		jule::F64 _45413_s = 1LL + (_45213_z * ((*(_43713_q))[0LL] + (_45213_z * ((*(_43713_q))[1LL] + (_45213_z * ((*(_43713_q))[2LL] + (_45213_z * ((*(_43713_q))[3LL] + (_45213_z * ((*(_43713_q))[4LL] + (_45213_z * (*(_43713_q))[5LL])))))))))));
		return static_cast<jule::F64>(jule::div(-0.125 + jule::div(_45313_r,_45413_s),_43510_x));
	}
}



inline jule::F64 _1101ed150_ldexp(jule::F64 _4518_frac,jule::Int _4533_exp) {
	{
		if (!((_4518_frac == 0LL))) { goto _case_end_4595214064; }
		_case_begin_4595214064:;
		{
			return _4518_frac;
		}
		goto _match_end_4595202080;
		_case_end_4595214064:;
		if (!((_110193400_is_inf(_4518_frac,0LL)) || (_110193400_is_nan(_4518_frac)))) { goto _case_end_4595214176; }
		_case_begin_4595214176:;
		{
			return _4518_frac;
		}
		goto _match_end_4595202080;
		_case_end_4595214176:;
		_match_end_4595202080:;
	}
	jule::Int _5313_e = 0LL;
	std::tie(_4518_frac,_5313_e) = _110193400_normalize(_4518_frac);
	_4533_exp+=_5313_e;
	jule::U64 _5613_x = _1100c9ac0_f64_bits(_4518_frac);
	_4533_exp+=static_cast<jule::Int>((static_cast<jule::Int>(_5613_x >> 52LL) & 2047LL) - 1023LL);
	if (_4533_exp < -1075LL) {
		return static_cast<jule::F64>(_110159c10_copysign(0LL,_4518_frac));
	}
	if (_4533_exp > 1023LL) {
		if (_4518_frac < 0LL) {
			return static_cast<jule::F64>(_110193400_inf(-1LL));
		}
		return static_cast<jule::F64>(_110193400_inf(1LL));
	}
	jule::F64 _6713_m = 1LL;
	if (_4533_exp < -1022LL) {
		_4533_exp+=53LL;
		_6713_m=0.00000000000000011102230246251565;
	}
	_5613_x=static_cast<jule::U64>(_5613_x & -9218868437227405313LL);
	_5613_x|=static_cast<jule::U64>(static_cast<jule::U64>(_4533_exp + 1023LL) << 52LL);
	return static_cast<jule::F64>(_6713_m * _1100c9ac0_f64_from_bits(_5613_x));
}



inline jule::Bool _11030a600_signbit(jule::F64 _3916_x) {
	return (_1100c9ac0_f64_bits(_3916_x) & 9223372036854775808LLU) != 0LL;
}



inline jule::F64 _110372030_sinh(jule::F64 _5617_x) {
	
	
	
	
	
	
	
	jule::Bool _6613_sign = false;
	if (_5617_x < 0LL) {
		_5617_x=static_cast<jule::F64>((-(_5617_x)));
		_6613_sign=true;
	}
	jule::F64 _7213_temp = 0LL;
	{
		if (!((_5617_x > 21LL))) { goto _case_end_4595246832; }
		_case_begin_4595246832:;
		{
			_7213_temp=static_cast<jule::F64>(_1103f42c0_exp(_5617_x) * 0.5);
		}
		goto _match_end_4595240944;
		_case_end_4595246832:;
		if (!((_5617_x > 0.5))) { goto _case_end_4595241376; }
		_case_begin_4595241376:;
		{
			jule::F64 _7713_ex = _1103f42c0_exp(_5617_x);
			_7213_temp=static_cast<jule::F64>((_7713_ex - jule::div(1LL,_7713_ex)) * 0.5);
		}
		goto _match_end_4595240944;
		_case_end_4595241376:;
		_case_begin_4595241072:;
		{
			jule::F64 _8013_sq = _5617_x * _5617_x;
			_7213_temp=static_cast<jule::F64>(((((((-26.30563213397497 * _8013_sq) + -2894.211355989564) * _8013_sq) + -89912.72022039509) * _8013_sq) + -630767.3640497717) * _5617_x);
			_7213_temp=static_cast<jule::F64>(jule::div(_7213_temp,((((_8013_sq + -173.6789535582337) * _8013_sq) + 15215.17378790019) * _8013_sq) + -630767.3640497717));
		}
		goto _match_end_4595240944;
		_case_end_4595241072:;
		_match_end_4595240944:;
	}
	if (_6613_sign) {
		_7213_temp=static_cast<jule::F64>((-(_7213_temp)));
	}
	return _7213_temp;
}



inline jule::F64 _110372030_cosh(jule::F64 _9717_x) {
	_9717_x=static_cast<jule::F64>(_1101dd560_abs(_9717_x));
	if (_9717_x > 21LL) {
		return static_cast<jule::F64>(_1103f42c0_exp(_9717_x) * 0.5);
	}
	jule::F64 _1029_ex = _1103f42c0_exp(_9717_x);
	return static_cast<jule::F64>((_1029_ex + jule::div(1LL,_1029_ex)) * 0.5);
}



inline std::tuple<jule::F64,jule::Int> _11037b0d0_lgamma(jule::F64 _20519_x) {
	jule::Int _20542_sign = jule::Int();
	jule::F64 _20529_lgamma = jule::F64();
	
	
	
	
	
	
	
	_20542_sign=1LL;
	{
		if (!((_110193400_is_nan(_20519_x)))) { goto _case_end_4595263872; }
		_case_begin_4595263872:;
		{
			_20529_lgamma=_20519_x;
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		goto _match_end_4595263232;
		_case_end_4595263872:;
		if (!((_110193400_is_inf(_20519_x,0LL)))) { goto _case_end_4595263984; }
		_case_begin_4595263984:;
		{
			_20529_lgamma=_20519_x;
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		goto _match_end_4595263232;
		_case_end_4595263984:;
		if (!((_20519_x == 0LL))) { goto _case_end_4595264576; }
		_case_begin_4595264576:;
		{
			_20529_lgamma=static_cast<jule::F64>(_110193400_inf(1LL));
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		goto _match_end_4595263232;
		_case_end_4595264576:;
		_match_end_4595263232:;
	}
	jule::Bool _22813_neg = false;
	if (_20519_x < 0LL) {
		_20519_x=static_cast<jule::F64>((-(_20519_x)));
		_22813_neg=true;
	}
	if (_20519_x < 0.000000000000000000000847033) {
		if (_22813_neg) {
			_20542_sign=-1LL;
		}
		_20529_lgamma=static_cast<jule::F64>((-(_1101abe90_log(_20519_x))));
		return std::make_tuple(_20529_lgamma,_20542_sign);
	}
	jule::F64 _24113_nadj = 0LL;
	if (_22813_neg) {
		if (_20519_x >= 4503599627370496LL) {
			_20529_lgamma=static_cast<jule::F64>(_110193400_inf(1LL));
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		jule::F64 _24713_t = _11037b0d0_sin_pi(_20519_x);
		if (_24713_t == 0LL) {
			_20529_lgamma=static_cast<jule::F64>(_110193400_inf(1LL));
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		_24113_nadj=static_cast<jule::F64>(_1101abe90_log(static_cast<jule::F64>(jule::div(3.141592653589793,_1101dd560_abs(static_cast<jule::F64>(_24713_t * _20519_x))))));
		if (_24713_t < 0LL) {
			_20542_sign=-1LL;
		}
	}
	{
		if (!((_20519_x == 1LL) || (_20519_x == 2LL))) { goto _case_end_4595281872; }
		_case_begin_4595281872:;
		{
			_20529_lgamma=0LL;
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		goto _match_end_4595279504;
		_case_end_4595281872:;
		if (!((_20519_x < 2LL))) { goto _case_end_4595279984; }
		_case_begin_4595279984:;
		{
			jule::F64 _26317_y = 0LL;
			jule::Int _26417_i = 0LL;
			if (_20519_x <= 0.9) {
				_20529_lgamma=static_cast<jule::F64>((-(_1101abe90_log(_20519_x))));
				{
					if (!((_20519_x >= 0.7316321449683623))) { goto _case_end_4595289104; }
					_case_begin_4595289104:;
					{
						_26317_y=static_cast<jule::F64>(1LL - _20519_x);
						_26417_i=0LL;
					}
					goto _match_end_4595286720;
					_case_end_4595289104:;
					if (!((_20519_x >= 0.19163214496836223))) { goto _case_end_4595288144; }
					_case_begin_4595288144:;
					{
						_26317_y=static_cast<jule::F64>(_20519_x - 0.46163214496836225);
						_26417_i=1LL;
					}
					goto _match_end_4595286720;
					_case_end_4595288144:;
					_case_begin_4595287664:;
					{
						_26317_y=_20519_x;
						_26417_i=2LL;
					}
					goto _match_end_4595286720;
					_case_end_4595287664:;
					_match_end_4595286720:;
				}
			} else {
				_20529_lgamma=0LL;
				{
					if (!((_20519_x >= 1.7316321449683623))) { goto _case_end_4595293440; }
					_case_begin_4595293440:;
					{
						_26317_y=static_cast<jule::F64>(2LL - _20519_x);
						_26417_i=0LL;
					}
					goto _match_end_4595290320;
					_case_end_4595293440:;
					if (!((_20519_x >= 1.1916321449683622))) { goto _case_end_4595294544; }
					_case_begin_4595294544:;
					{
						_26317_y=static_cast<jule::F64>(_20519_x - 1.4616321449683622);
						_26417_i=1LL;
					}
					goto _match_end_4595290320;
					_case_end_4595294544:;
					_case_begin_4595286304:;
					{
						_26317_y=static_cast<jule::F64>(_20519_x - 1LL);
						_26417_i=2LL;
					}
					goto _match_end_4595290320;
					_case_end_4595286304:;
					_match_end_4595290320:;
				}
			}
			{
				auto _match_expr{ _26417_i };
				if (!((0LL) == _match_expr)) { goto _case_end_4595290128; }
				_case_begin_4595290128:;
				{
					jule::F64 _29417_z = _26317_y * _26317_y;
					jule::F64 _29517_p1 = _11037b0d0__LGAM_A[0LL] + (_29417_z * (_11037b0d0__LGAM_A[2LL] + (_29417_z * (_11037b0d0__LGAM_A[4LL] + (_29417_z * (_11037b0d0__LGAM_A[6LL] + (_29417_z * (_11037b0d0__LGAM_A[8LL] + (_29417_z * _11037b0d0__LGAM_A[10LL])))))))));
					jule::F64 _29617_p2 = _29417_z * (_11037b0d0__LGAM_A[1LL] + (_29417_z * ((+(_11037b0d0__LGAM_A[3LL])) + (_29417_z * (_11037b0d0__LGAM_A[5LL] + (_29417_z * (_11037b0d0__LGAM_A[7LL] + (_29417_z * (_11037b0d0__LGAM_A[9LL] + (_29417_z * _11037b0d0__LGAM_A[11LL]))))))))));
					jule::F64 _29717_p = (_26317_y * _29517_p1) + _29617_p2;
					_20529_lgamma+=static_cast<jule::F64>(_29717_p - (0.5 * _26317_y));
				}
				goto _match_end_4595296048;
				_case_end_4595290128:;
				if (!((1LL) == _match_expr)) { goto _case_end_4595295296; }
				_case_begin_4595295296:;
				{
					jule::F64 _30017_z = _26317_y * _26317_y;
					jule::F64 _30117_w = _30017_z * _26317_y;
					jule::F64 _30217_p1 = _11037b0d0__LGAM_T[0LL] + (_30117_w * (_11037b0d0__LGAM_T[3LL] + (_30117_w * (_11037b0d0__LGAM_T[6LL] + (_30117_w * (_11037b0d0__LGAM_T[9LL] + (_30117_w * _11037b0d0__LGAM_T[12LL])))))));
					jule::F64 _30317_p2 = _11037b0d0__LGAM_T[1LL] + (_30117_w * (_11037b0d0__LGAM_T[4LL] + (_30117_w * (_11037b0d0__LGAM_T[7LL] + (_30117_w * (_11037b0d0__LGAM_T[10LL] + (_30117_w * _11037b0d0__LGAM_T[13LL])))))));
					jule::F64 _30417_p3 = _11037b0d0__LGAM_T[2LL] + (_30117_w * (_11037b0d0__LGAM_T[5LL] + (_30117_w * (_11037b0d0__LGAM_T[8LL] + (_30117_w * (_11037b0d0__LGAM_T[11LL] + (_30117_w * _11037b0d0__LGAM_T[14LL])))))));
					jule::F64 _30517_p = (_30017_z * _30217_p1) - (-0.000000000000000003638676997039505 - (_30117_w * (_30317_p2 + (_26317_y * _30417_p3))));
					_20529_lgamma+=static_cast<jule::F64>(-0.12148629053584961 + _30517_p);
				}
				goto _match_end_4595296048;
				_case_end_4595295296:;
				if (!((2LL) == _match_expr)) { goto _case_end_4595285904; }
				_case_begin_4595285904:;
				{
					jule::F64 _30817_p1 = _26317_y * (_11037b0d0__LGAM_U[0LL] + (_26317_y * (_11037b0d0__LGAM_U[1LL] + (_26317_y * (_11037b0d0__LGAM_U[2LL] + (_26317_y * (_11037b0d0__LGAM_U[3LL] + (_26317_y * (_11037b0d0__LGAM_U[4LL] + (_26317_y * _11037b0d0__LGAM_U[5LL]))))))))));
					jule::F64 _30917_p2 = 1LL + (_26317_y * (_11037b0d0__LGAM_V[1LL] + (_26317_y * (_11037b0d0__LGAM_V[2LL] + (_26317_y * (_11037b0d0__LGAM_V[3LL] + (_26317_y * (_11037b0d0__LGAM_V[4LL] + (_26317_y * _11037b0d0__LGAM_V[5LL])))))))));
					_20529_lgamma+=static_cast<jule::F64>((-0.5 * _26317_y) + jule::div(_30817_p1,_30917_p2));
				}
				goto _match_end_4595296048;
				_case_end_4595285904:;
				_match_end_4595296048:;
			}
		}
		goto _match_end_4595279504;
		_case_end_4595279984:;
		if (!((_20519_x < 8LL))) { goto _case_end_4595280096; }
		_case_begin_4595280096:;
		{
			jule::Int _31313_i = static_cast<jule::Int>(_20519_x);
			jule::F64 _31413_y = _20519_x - static_cast<jule::F64>(_31313_i);
			jule::F64 _31513_p = _31413_y * (_11037b0d0__LGAM_S[0LL] + (_31413_y * (_11037b0d0__LGAM_S[1LL] + (_31413_y * (_11037b0d0__LGAM_S[2LL] + (_31413_y * (_11037b0d0__LGAM_S[3LL] + (_31413_y * (_11037b0d0__LGAM_S[4LL] + (_31413_y * (_11037b0d0__LGAM_S[5LL] + (_31413_y * _11037b0d0__LGAM_S[6LL]))))))))))));
			jule::F64 _31613_q = 1LL + (_31413_y * (_11037b0d0__LGAM_R[1LL] + (_31413_y * (_11037b0d0__LGAM_R[2LL] + (_31413_y * (_11037b0d0__LGAM_R[3LL] + (_31413_y * (_11037b0d0__LGAM_R[4LL] + (_31413_y * (_11037b0d0__LGAM_R[5LL] + (_31413_y * _11037b0d0__LGAM_R[6LL])))))))))));
			_20529_lgamma=static_cast<jule::F64>((0.5 * _31413_y) + jule::div(_31513_p,_31613_q));
			jule::F64 _31817_z = 1LL;
			{
				auto _match_expr{ _31313_i };
				if (!((7LL) == _match_expr)) { goto _case_end_4595338752; }
				_case_begin_4595338752:;
				{
					_31817_z*=static_cast<jule::F64>(_31413_y + 6LL);
					goto _case_begin_4595338864;
				}
				goto _match_end_4595332960;
				_case_end_4595338752:;
				if (!((6LL) == _match_expr)) { goto _case_end_4595338864; }
				_case_begin_4595338864:;
				{
					_31817_z*=static_cast<jule::F64>(_31413_y + 5LL);
					goto _case_begin_4595338976;
				}
				goto _match_end_4595332960;
				_case_end_4595338864:;
				if (!((5LL) == _match_expr)) { goto _case_end_4595338976; }
				_case_begin_4595338976:;
				{
					_31817_z*=static_cast<jule::F64>(_31413_y + 4LL);
					goto _case_begin_4595339088;
				}
				goto _match_end_4595332960;
				_case_end_4595338976:;
				if (!((4LL) == _match_expr)) { goto _case_end_4595339088; }
				_case_begin_4595339088:;
				{
					_31817_z*=static_cast<jule::F64>(_31413_y + 3LL);
					goto _case_begin_4595339200;
				}
				goto _match_end_4595332960;
				_case_end_4595339088:;
				if (!((3LL) == _match_expr)) { goto _case_end_4595339200; }
				_case_begin_4595339200:;
				{
					_31817_z*=static_cast<jule::F64>(_31413_y + 2LL);
					_20529_lgamma+=static_cast<jule::F64>(_1101abe90_log(_31817_z));
				}
				goto _match_end_4595332960;
				_case_end_4595339200:;
				_match_end_4595332960:;
			}
		}
		goto _match_end_4595279504;
		_case_end_4595280096:;
		if (!((_20519_x < 288230376151711744LL))) { goto _case_end_4595280784; }
		_case_begin_4595280784:;
		{
			jule::F64 _33713_t = _1101abe90_log(_20519_x);
			jule::F64 _33813_z = jule::div(1LL,_20519_x);
			jule::F64 _33913_y = _33813_z * _33813_z;
			jule::F64 _34013_w = _11037b0d0__LGAM_W[0LL] + (_33813_z * (_11037b0d0__LGAM_W[1LL] + (_33913_y * (_11037b0d0__LGAM_W[2LL] + (_33913_y * (_11037b0d0__LGAM_W[3LL] + (_33913_y * (_11037b0d0__LGAM_W[4LL] + (_33913_y * (_11037b0d0__LGAM_W[5LL] + (_33913_y * _11037b0d0__LGAM_W[6LL])))))))))));
			_20529_lgamma=static_cast<jule::F64>(((_20519_x - 0.5) * (_33713_t - 1LL)) + _34013_w);
		}
		goto _match_end_4595279504;
		_case_end_4595280784:;
		_case_begin_4595279600:;
		{
			_20529_lgamma=static_cast<jule::F64>(_20519_x * (_1101abe90_log(_20519_x) - 1LL));
		}
		goto _match_end_4595279504;
		_case_end_4595279600:;
		_match_end_4595279504:;
	}
	if (_22813_neg) {
		_20529_lgamma=static_cast<jule::F64>(_24113_nadj - _20529_lgamma);
	}
	return std::make_tuple(_20529_lgamma,_20542_sign);
}



inline jule::F64 _11037b0d0_sin_pi(jule::F64 _35215_x) {
	
	
	if (_35215_x < 0.25) {
		return static_cast<jule::F64>((-(_1100cd0d0_sin(static_cast<jule::F64>(3.141592653589793 * _35215_x)))));
	}
	jule::F64 _36013_z = _11015fbf0_floor(_35215_x);
	jule::Int _36113_n = 0LL;
	if (_36013_z != _35215_x) {
		_35215_x=static_cast<jule::F64>(_1100eaa90_mod(_35215_x,2LL));
		_36113_n=static_cast<jule::Int>(_35215_x * 4LL);
	} else {
		if (_35215_x >= 9007199254740992LL) {
			_35215_x=0LL;
			_36113_n=0LL;
		} else {
			if (_35215_x < 4503599627370496LL) {
				_36013_z=static_cast<jule::F64>(_35215_x + 4503599627370496LL);
			}
			_36113_n=static_cast<jule::Int>(1LL & _1100c9ac0_f64_bits(_36013_z));
			_35215_x=static_cast<jule::F64>(_36113_n);
			_36113_n<<=2LL;
		}
	}
	{
		auto _match_expr{ _36113_n };
		if (!((0LL) == _match_expr)) { goto _case_end_4595367920; }
		_case_begin_4595367920:;
		{
			_35215_x=static_cast<jule::F64>(_1100cd0d0_sin(static_cast<jule::F64>(3.141592653589793 * _35215_x)));
		}
		goto _match_end_4595364752;
		_case_end_4595367920:;
		if (!((1LL) == _match_expr || (2LL) == _match_expr)) { goto _case_end_4595362176; }
		_case_begin_4595362176:;
		{
			_35215_x=static_cast<jule::F64>(_1100cd0d0_cos(static_cast<jule::F64>(3.141592653589793 * (0.5 - _35215_x))));
		}
		goto _match_end_4595364752;
		_case_end_4595362176:;
		if (!((3LL) == _match_expr || (4LL) == _match_expr)) { goto _case_end_4595362288; }
		_case_begin_4595362288:;
		{
			_35215_x=static_cast<jule::F64>(_1100cd0d0_sin(static_cast<jule::F64>(3.141592653589793 * (1LL - _35215_x))));
		}
		goto _match_end_4595364752;
		_case_end_4595362288:;
		if (!((5LL) == _match_expr || (6LL) == _match_expr)) { goto _case_end_4595368128; }
		_case_begin_4595368128:;
		{
			_35215_x=static_cast<jule::F64>((-(_1100cd0d0_cos(static_cast<jule::F64>(3.141592653589793 * (_35215_x - 1.5))))));
		}
		goto _match_end_4595364752;
		_case_end_4595368128:;
		_case_begin_4595366688:;
		{
			_35215_x=static_cast<jule::F64>(_1100cd0d0_sin(static_cast<jule::F64>(3.141592653589793 * (_35215_x - 2LL))));
		}
		goto _match_end_4595364752;
		_case_end_4595366688:;
		_match_end_4595364752:;
	}
	return static_cast<jule::F64>((-(_35215_x)));
}



inline jule::F64 _1102f17c0_acosh(jule::F64 _7314_x) {
	
	{
		if (!((_7314_x < 1LL) || (_110193400_is_nan(_7314_x)))) { goto _case_end_4595375792; }
		_case_begin_4595375792:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4595375552;
		_case_end_4595375792:;
		if (!((_7314_x == 1LL))) { goto _case_end_4595375904; }
		_case_begin_4595375904:;
		{
			return 0LL;
		}
		goto _match_end_4595375552;
		_case_end_4595375904:;
		if (!((_7314_x >= 268435456LL))) { goto _case_end_4595376016; }
		_case_begin_4595376016:;
		{
			return static_cast<jule::F64>(_1101abe90_log(_7314_x) + 0.6931471805599453);
		}
		goto _match_end_4595375552;
		_case_end_4595376016:;
		if (!((_7314_x > 2LL))) { goto _case_end_4595376128; }
		_case_begin_4595376128:;
		{
			return static_cast<jule::F64>(_1101abe90_log(static_cast<jule::F64>((2LL * _7314_x) - jule::div(1LL,_7314_x + _1104d53b0_sqrt(static_cast<jule::F64>((_7314_x * _7314_x) - 1LL))))));
		}
		goto _match_end_4595375552;
		_case_end_4595376128:;
		_match_end_4595375552:;
	}
	jule::F64 _869_t = _7314_x - 1LL;
	return static_cast<jule::F64>(_1103f8320_log1p(static_cast<jule::F64>(_869_t + _1104d53b0_sqrt(static_cast<jule::F64>((2LL * _869_t) + (_869_t * _869_t))))));
}



inline jule::F64 _110305650_tanh(jule::F64 _10613_x) {
	
	jule::F64 _10813_z = _1101dd560_abs(_10613_x);
	{
		if (!((_10813_z > 44.014845965556525))) { goto _case_end_4595393664; }
		_case_begin_4595393664:;
		{
			if (_10613_x < 0LL) {
				return -1LL;
			}
			return 1LL;
		}
		goto _match_end_4595387216;
		_case_end_4595393664:;
		if (!((_10813_z >= 0.625))) { goto _case_end_4595393808; }
		_case_begin_4595393808:;
		{
			jule::F64 _11613_s = _1103f42c0_exp(static_cast<jule::F64>(2LL * _10813_z));
			_10813_z=static_cast<jule::F64>(1LL - jule::div(2LL,_11613_s + 1LL));
			if (_10613_x < 0LL) {
				_10813_z=static_cast<jule::F64>((-(_10813_z)));
			}
		}
		goto _match_end_4595387216;
		_case_end_4595393808:;
		_case_begin_4595387344:;
		{
			if (_10613_x == 0LL) {
				return _10613_x;
			}
			jule::F64 _12513_s = _10613_x * _10613_x;
			_10813_z=static_cast<jule::F64>(_10613_x + jule::div((_10613_x * _12513_s) * ((((_110305650_TANH_P[0LL] * _12513_s) + _110305650_TANH_P[1LL]) * _12513_s) + _110305650_TANH_P[2LL]),((((_12513_s + _110305650_TANH_Q[0LL]) * _12513_s) + _110305650_TANH_Q[1LL]) * _12513_s) + _110305650_TANH_Q[2LL]));
		}
		goto _match_end_4595387216;
		_case_end_4595387344:;
		_match_end_4595387216:;
	}
	return _10813_z;
}



inline jule::F64 _110377070_cbrt(jule::F64 _5617_x) {
	
	
	
	
	
	
	
	
	if (((_5617_x == 0LL) || _110193400_is_nan(_5617_x)) || _110193400_is_inf(_5617_x,0LL)) {
		return _5617_x;
	}
	jule::Bool _7113_sign = false;
	if (_5617_x < 0LL) {
		_5617_x=static_cast<jule::F64>((-(_5617_x)));
		_7113_sign=true;
	}
	jule::F64 _7813_t = _1100c9ac0_f64_from_bits(static_cast<jule::U64>(jule::div(_1100c9ac0_f64_bits(_5617_x),3LL) + 3071306043645493248LL));
	if (_5617_x < 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014) {
		_7813_t=static_cast<jule::F64>(18014398509481984LL);
		_7813_t*=_5617_x;
		_7813_t=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>(jule::div(_1100c9ac0_f64_bits(_7813_t),3LL) + 2990241250352824320LL)));
	}
	jule::F64 _8713_r = jule::div(_7813_t * _7813_t,_5617_x);
	jule::F64 _8813_s = 0.5428571428571428 + (_8713_r * _7813_t);
	_7813_t*=static_cast<jule::F64>(0.35714285714285715 + jule::div(1.6071428571428572,(_8813_s + 1.4142857142857144) + jule::div(-0.7053061224489796,_8813_s)));
	_7813_t=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>((_1100c9ac0_f64_bits(_7813_t) & -1073741824LL) + 1073741824LL)));
	_8813_s=static_cast<jule::F64>(_7813_t * _7813_t);
	_8713_r=static_cast<jule::F64>(jule::div(_5617_x,_8813_s));
	jule::F64 _979_w = _7813_t + _7813_t;
	_8713_r=static_cast<jule::F64>(jule::div(_8713_r - _7813_t,_979_w + _8713_r));
	_7813_t=static_cast<jule::F64>(_7813_t + (_7813_t * _8713_r));
	if (_7113_sign) {
		_7813_t=static_cast<jule::F64>((-(_7813_t)));
	}
	return _7813_t;
}



inline jule::F64 _1103e69a0_pow(jule::F64 _6412_x,jule::F64 _6420_y) {
	{
		if (!((_6420_y == 0LL) || (_6412_x == 1LL))) { goto _case_end_4595426368; }
		_case_begin_4595426368:;
		{
			return 1LL;
		}
		goto _match_end_4595426080;
		_case_end_4595426368:;
		if (!((_6420_y == 1LL))) { goto _case_end_4595426496; }
		_case_begin_4595426496:;
		{
			return _6412_x;
		}
		goto _match_end_4595426080;
		_case_end_4595426496:;
		if (!((_110193400_is_nan(_6412_x)) || (_110193400_is_nan(_6420_y)))) { goto _case_end_4595426624; }
		_case_begin_4595426624:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4595426080;
		_case_end_4595426624:;
		if (!((_6412_x == 0LL))) { goto _case_end_4595426752; }
		_case_begin_4595426752:;
		{
			{
				if (!((_6420_y < 0LL))) { goto _case_end_4595429840; }
				_case_begin_4595429840:;
				{
					if (_1103e69a0_is_odd_int(_6420_y)) {
						return static_cast<jule::F64>(_110159c10_copysign(static_cast<jule::F64>(_110193400_inf(1LL)),_6412_x));
					}
					return static_cast<jule::F64>(_110193400_inf(1LL));
				}
				goto _match_end_4595430592;
				_case_end_4595429840:;
				if (!((_6420_y > 0LL))) { goto _case_end_4595429952; }
				_case_begin_4595429952:;
				{
					if (_1103e69a0_is_odd_int(_6420_y)) {
						return _6412_x;
					}
					return 0LL;
				}
				goto _match_end_4595430592;
				_case_end_4595429952:;
				_match_end_4595430592:;
			}
		}
		goto _match_end_4595426080;
		_case_end_4595426752:;
		if (!((_110193400_is_inf(_6420_y,0LL)))) { goto _case_end_4595426880; }
		_case_begin_4595426880:;
		{
			{
				if (!((_6412_x == -1LL))) { goto _case_end_4595438624; }
				_case_begin_4595438624:;
				{
					return 1LL;
				}
				goto _match_end_4595436480;
				_case_end_4595438624:;
				if (!(((_1101dd560_abs(_6412_x) < 1LL) == _110193400_is_inf(_6420_y,1LL)))) { goto _case_end_4595438368; }
				_case_begin_4595438368:;
				{
					return 0LL;
				}
				goto _match_end_4595436480;
				_case_end_4595438368:;
				_case_begin_4595431280:;
				{
					return static_cast<jule::F64>(_110193400_inf(1LL));
				}
				goto _match_end_4595436480;
				_case_end_4595431280:;
				_match_end_4595436480:;
			}
		}
		goto _match_end_4595426080;
		_case_end_4595426880:;
		if (!((_110193400_is_inf(_6412_x,0LL)))) { goto _case_end_4595427008; }
		_case_begin_4595427008:;
		{
			if (_110193400_is_inf(_6412_x,-1LL)) {
				return static_cast<jule::F64>(_1103e69a0_pow(static_cast<jule::F64>(jule::div(1LL,_6412_x)),static_cast<jule::F64>((-(_6420_y)))));
			}
			{
				if (!((_6420_y < 0LL))) { goto _case_end_4595441104; }
				_case_begin_4595441104:;
				{
					return 0LL;
				}
				goto _match_end_4595440864;
				_case_end_4595441104:;
				if (!((_6420_y > 0LL))) { goto _case_end_4595439856; }
				_case_begin_4595439856:;
				{
					return static_cast<jule::F64>(_110193400_inf(1LL));
				}
				goto _match_end_4595440864;
				_case_end_4595439856:;
				_match_end_4595440864:;
			}
		}
		goto _match_end_4595426080;
		_case_end_4595427008:;
		if (!((_6420_y == 0.5))) { goto _case_end_4595427136; }
		_case_begin_4595427136:;
		{
			return static_cast<jule::F64>(_1104d53b0_sqrt(_6412_x));
		}
		goto _match_end_4595426080;
		_case_end_4595427136:;
		if (!((_6420_y == -0.5))) { goto _case_end_4595427264; }
		_case_begin_4595427264:;
		{
			return static_cast<jule::F64>(jule::div(1LL,_1104d53b0_sqrt(_6412_x)));
		}
		goto _match_end_4595426080;
		_case_end_4595427264:;
		_match_end_4595426080:;
	}
	jule::F64 _10814_yi;
	jule::F64 _10822_yf;
	std::tie(_10814_yi,_10822_yf) = _110254f60_modf(static_cast<jule::F64>(_1101dd560_abs(_6420_y)));
	if ((_10822_yf != 0LL) && (_6412_x < 0LL)) {
		return static_cast<jule::F64>(_110193400_nan());
	}
	if (_10814_yi >= 9223372036854775808LLU) {
		{
			if (!((_6412_x == -1LL))) { goto _case_end_4595452080; }
			_case_begin_4595452080:;
			{
				return 1LL;
			}
			goto _match_end_4595447728;
			_case_end_4595452080:;
			if (!(((_1101dd560_abs(_6412_x) < 1LL) == (_6420_y > 0LL)))) { goto _case_end_4595451824; }
			_case_begin_4595451824:;
			{
				return 0LL;
			}
			goto _match_end_4595447728;
			_case_end_4595451824:;
			_case_begin_4595447872:;
			{
				return static_cast<jule::F64>(_110193400_inf(1LL));
			}
			goto _match_end_4595447728;
			_case_end_4595447872:;
			_match_end_4595447728:;
		}
	}
	jule::F64 _12613_a1 = 1LL;
	jule::Int _12713_ae = 0LL;
	if (_10822_yf != 0LL) {
		if (_10822_yf > 0.5) {
			(_10822_yf)--;
			(_10814_yi)++;
		}
		_12613_a1=static_cast<jule::F64>(_1103f42c0_exp(static_cast<jule::F64>(_10822_yf * _1101abe90_log(_6412_x))));
	}
	jule::F64 _14214_x1;
	jule::Int _14222_xe;
	std::tie(_14214_x1,_14222_xe) = _1100ebd60_frexp(_6412_x);
	jule::I64 _14313_i = static_cast<jule::I64>(_10814_yi);
	_iter_begin_4595459344:;
	if (!(_14313_i != 0LL)) { goto _iter_end_4595459344; }
	{
		if ((_14222_xe < -4096LL) || (4096LL < _14222_xe)) {
			_12713_ae+=_14222_xe;
			goto _iter_end_4595459344;
		}
		if ((_14313_i & 1LL) == 1LL) {
			_12613_a1*=_14214_x1;
			_12713_ae+=_14222_xe;
		}
		_14214_x1*=_14214_x1;
		_14222_xe<<=1LL;
		if (_14214_x1 < 0.5) {
			_14214_x1+=_14214_x1;
			(_14222_xe)--;
		}
	}
	_iter_next_4595459344:;
	_14313_i>>=1LL;
	goto _iter_begin_4595459344;
	_iter_end_4595459344:;
	if (_6420_y < 0LL) {
		_12613_a1=static_cast<jule::F64>(jule::div(1LL,_12613_a1));
		_12713_ae=static_cast<jule::Int>((-(_12713_ae)));
	}
	return static_cast<jule::F64>(_1101ed150_ldexp(_12613_a1,_12713_ae));
}



inline jule::Bool _1103e69a0_is_odd_int(jule::F64 _17615_x) {
	jule::F64 _17710_xi;
	jule::F64 _17714_xf;
	std::tie(_17710_xi,_17714_xf) = _110254f60_modf(_17615_x);
	return (_17714_xf == 0LL) && ((static_cast<jule::I64>(_17710_xi) & 1LL) == 1LL);
}



inline jule::F64 _1103f42c0_exp(jule::F64 _12212_x) {
	
	
	
	
	
	
	{
		if (!((_110193400_is_nan(_12212_x)) || (_110193400_is_inf(_12212_x,1LL)))) { goto _case_end_4595477248; }
		_case_begin_4595477248:;
		{
			return _12212_x;
		}
		goto _match_end_4595476832;
		_case_end_4595477248:;
		if (!((_110193400_is_inf(_12212_x,-1LL)))) { goto _case_end_4595477424; }
		_case_begin_4595477424:;
		{
			return 0LL;
		}
		goto _match_end_4595476832;
		_case_end_4595477424:;
		if (!((_12212_x > 709.782712893384))) { goto _case_end_4595477536; }
		_case_begin_4595477536:;
		{
			return static_cast<jule::F64>(_110193400_inf(1LL));
		}
		goto _match_end_4595476832;
		_case_end_4595477536:;
		if (!((_12212_x < -745.1332191019411))) { goto _case_end_4595477648; }
		_case_begin_4595477648:;
		{
			return 0LL;
		}
		goto _match_end_4595476832;
		_case_end_4595477648:;
		if (!(((-0.000000003725290298461914 < _12212_x) && (_12212_x < 0.000000003725290298461914)))) { goto _case_end_4595477760; }
		_case_begin_4595477760:;
		{
			return static_cast<jule::F64>(1LL + _12212_x);
		}
		goto _match_end_4595476832;
		_case_end_4595477760:;
		_match_end_4595476832:;
	}
	jule::Int _14613_k = 0LL;
	{
		if (!((_12212_x < 0LL))) { goto _case_end_4595484208; }
		_case_begin_4595484208:;
		{
			_14613_k=static_cast<jule::Int>((1.4426950408889634 * _12212_x) - 0.5);
		}
		goto _match_end_4595483184;
		_case_end_4595484208:;
		if (!((_12212_x > 0LL))) { goto _case_end_4595484320; }
		_case_begin_4595484320:;
		{
			_14613_k=static_cast<jule::Int>((1.4426950408889634 * _12212_x) + 0.5);
		}
		goto _match_end_4595483184;
		_case_end_4595484320:;
		_match_end_4595483184:;
	}
	jule::F64 _1519_hi = _12212_x - (static_cast<jule::F64>(_14613_k) * 0.6931471803691238);
	jule::F64 _1529_lo = static_cast<jule::F64>(_14613_k) * 0.00000000019082149292705877;
	return static_cast<jule::F64>(_1103f42c0_expmulti(_1519_hi,_1529_lo,_14613_k));
}



inline jule::F64 _1103f42c0_exp2(jule::F64 _16013_x) {
	
	
	
	
	{
		if (!((_110193400_is_nan(_16013_x)) || (_110193400_is_inf(_16013_x,1LL)))) { goto _case_end_4595495696; }
		_case_begin_4595495696:;
		{
			return _16013_x;
		}
		goto _match_end_4595495520;
		_case_end_4595495696:;
		if (!((_110193400_is_inf(_16013_x,-1LL)))) { goto _case_end_4595495808; }
		_case_begin_4595495808:;
		{
			return 0LL;
		}
		goto _match_end_4595495520;
		_case_end_4595495808:;
		if (!((_16013_x > 1023.9999999999999))) { goto _case_end_4595495936; }
		_case_begin_4595495936:;
		{
			return static_cast<jule::F64>(_110193400_inf(1LL));
		}
		goto _match_end_4595495520;
		_case_end_4595495936:;
		if (!((_16013_x < -1074LL))) { goto _case_end_4595496064; }
		_case_begin_4595496064:;
		{
			return 0LL;
		}
		goto _match_end_4595495520;
		_case_end_4595496064:;
		_match_end_4595495520:;
	}
	jule::Int _18113_k = 0LL;
	{
		if (!((_16013_x > 0LL))) { goto _case_end_4595501120; }
		_case_begin_4595501120:;
		{
			_18113_k=static_cast<jule::Int>(_16013_x + 0.5);
		}
		goto _match_end_4595500752;
		_case_end_4595501120:;
		if (!((_16013_x < 0LL))) { goto _case_end_4595501248; }
		_case_begin_4595501248:;
		{
			_18113_k=static_cast<jule::Int>(_16013_x - 0.5);
		}
		goto _match_end_4595500752;
		_case_end_4595501248:;
		_match_end_4595500752:;
	}
	jule::F64 _1869_t = _16013_x - static_cast<jule::F64>(_18113_k);
	jule::F64 _1879_hi = _1869_t * 0.6931471803691238;
	jule::F64 _1889_lo = (-(_1869_t)) * 0.00000000019082149292705877;
	return static_cast<jule::F64>(_1103f42c0_expmulti(_1879_hi,_1889_lo,_18113_k));
}



inline jule::F64 _1103f42c0_expmulti(jule::F64 _19513_hi,jule::F64 _19522_lo,jule::Int _19531_k) {
	
	
	
	
	
	jule::F64 _2029_r = _19513_hi - _19522_lo;
	jule::F64 _2039_t = _2029_r * _2029_r;
	jule::F64 _2049_c = _2029_r - (_2039_t * (0.16666666666666666 + (_2039_t * (-0.0027777777777015593 + (_2039_t * (0.00006613756321437934 + (_2039_t * (-0.0000016533902205465252 + (_2039_t * 0.000000041381367970572385)))))))));
	jule::F64 _2059_y = 1LL - ((_19522_lo - jule::div(_2029_r * _2049_c,2LL - _2049_c)) - _19513_hi);
	return static_cast<jule::F64>(_1101ed150_ldexp(_2059_y,_19531_k));
}



inline jule::F64 _1103f8320_log1p(jule::F64 _12614_x) {
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_12614_x < -1LL) || (_110193400_is_nan(_12614_x)))) { goto _case_end_4595537056; }
		_case_begin_4595537056:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4595536864;
		_case_end_4595537056:;
		if (!((_12614_x == -1LL))) { goto _case_end_4595537184; }
		_case_begin_4595537184:;
		{
			return static_cast<jule::F64>(_110193400_inf(-1LL));
		}
		goto _match_end_4595536864;
		_case_end_4595537184:;
		if (!((_110193400_is_inf(_12614_x,1LL)))) { goto _case_end_4595537312; }
		_case_begin_4595537312:;
		{
			return static_cast<jule::F64>(_110193400_inf(1LL));
		}
		goto _match_end_4595536864;
		_case_end_4595537312:;
		_match_end_4595536864:;
	}
	jule::F64 _1529_absx = _1101dd560_abs(_12614_x);
	jule::F64 _15413_f = 0LL;
	jule::U64 _15513_iu = 0LLU;
	jule::Int _15613_k = 1LL;
	if (_1529_absx < 0.41421356237309503) {
		if (_1529_absx < 0.000000001862645149230957) {
			if (_1529_absx < 0.00000000000000005551115123125783) {
				return _12614_x;
			}
			return static_cast<jule::F64>(_12614_x - ((_12614_x * _12614_x) * 0.5));
		}
		if (_12614_x > -0.2928932188134525) {
			_15613_k=0LL;
			_15413_f=_12614_x;
			_15513_iu=1LL;
		}
	}
	jule::F64 _17113_c = 0LL;
	if (_15613_k != 0LL) {
		jule::F64 _17317_u = 0LL;
		if (_1529_absx < 9007199254740992LL) {
			_17317_u=static_cast<jule::F64>(1LL + _12614_x);
			_15513_iu=static_cast<jule::U64>(_1100c9ac0_f64_bits(_17317_u));
			_15613_k=static_cast<jule::Int>((_15513_iu >> 52LL) - 1023LL);
			if (_15613_k > 0LL) {
				_17113_c=static_cast<jule::F64>(1LL - (_17317_u - _12614_x));
			} else {
				_17113_c=static_cast<jule::F64>(_12614_x - (_17317_u - 1LL));
			}
			_17113_c/=_17317_u;
		} else {
			_17317_u=_12614_x;
			_15513_iu=static_cast<jule::U64>(_1100c9ac0_f64_bits(_17317_u));
			_15613_k=static_cast<jule::Int>((_15513_iu >> 52LL) - 1023LL);
			_17113_c=0LL;
		}
		_15513_iu&=4503599627370495LL;
		if (_15513_iu < 1865452045155277LL) {
			_17317_u=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>(_15513_iu | 4607182418800017408LL)));
		} else {
			(_15613_k)++;
			_17317_u=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(static_cast<jule::U64>(_15513_iu | 4602678819172646912LL)));
			_15513_iu=static_cast<jule::U64>((4503599627370496LL - _15513_iu) >> 2LL);
		}
		_15413_f=static_cast<jule::F64>(_17317_u - 1LL);
	}
	jule::F64 _2029_hfsq = (0.5 * _15413_f) * _15413_f;
	jule::F64 _20313_s = 0LL;
	jule::F64 _20413_R = 0LL;
	jule::F64 _20513_z = 0LL;
	if (_15513_iu == 0LL) {
		if (_15413_f == 0LL) {
			if (_15613_k == 0LL) {
				return 0LL;
			}
			_17113_c+=static_cast<jule::F64>(static_cast<jule::F64>(_15613_k) * 0.00000000019082149292705877);
			return static_cast<jule::F64>((static_cast<jule::F64>(_15613_k) * 0.6931471803691238) + _17113_c);
		}
		_20413_R=static_cast<jule::F64>(_2029_hfsq * (1LL - (0.6666666666666666 * _15413_f)));
		if (_15613_k == 0LL) {
			return static_cast<jule::F64>(_15413_f - _20413_R);
		}
		return static_cast<jule::F64>((static_cast<jule::F64>(_15613_k) * 0.6931471803691238) - ((_20413_R - ((static_cast<jule::F64>(_15613_k) * 0.00000000019082149292705877) + _17113_c)) - _15413_f));
	}
	_20313_s=static_cast<jule::F64>(jule::div(_15413_f,2LL + _15413_f));
	_20513_z=static_cast<jule::F64>(_20313_s * _20313_s);
	_20413_R=static_cast<jule::F64>(_20513_z * (0.6666666666666735 + (_20513_z * (0.3999999999940942 + (_20513_z * (0.2857142874366239 + (_20513_z * (0.22222198432149784 + (_20513_z * (0.1818357216161805 + (_20513_z * (0.15313837699209373 + (_20513_z * 0.14798198605116586)))))))))))));
	if (_15613_k == 0LL) {
		return static_cast<jule::F64>(_15413_f - (_2029_hfsq - (_20313_s * (_2029_hfsq + _20413_R))));
	}
	return static_cast<jule::F64>((static_cast<jule::F64>(_15613_k) * 0.6931471803691238) - ((_2029_hfsq - ((_20313_s * (_2029_hfsq + _20413_R)) + ((static_cast<jule::F64>(_15613_k) * 0.00000000019082149292705877) + _17113_c))) - _15413_f));
}



inline std::tuple<jule::F64,jule::F64> _1104ab510_stirling(jule::F64 _13113_x) {
	if (_13113_x > 200LL) {
		return std::make_tuple(static_cast<jule::F64>(_110193400_inf(1LL)),1LL);
	}
	
	
	jule::F64 _13713_w = jule::div(1LL,_13113_x);
	_13713_w=static_cast<jule::F64>(1LL + (_13713_w * ((((((((_1104ab510__GAM_S[0LL] * _13713_w) + _1104ab510__GAM_S[1LL]) * _13713_w) + _1104ab510__GAM_S[2LL]) * _13713_w) + _1104ab510__GAM_S[3LL]) * _13713_w) + _1104ab510__GAM_S[4LL])));
	jule::F64 _13913_y1 = _1103f42c0_exp(_13113_x);
	jule::F64 _14013_y2 = 1LL;
	if (_13113_x > 143.01608) {
		jule::F64 _14213_v = _1103e69a0_pow(_13113_x,static_cast<jule::F64>((0.5 * _13113_x) - 0.25));
		std::tie(_13913_y1,_14013_y2) = std::make_tuple(_14213_v,static_cast<jule::F64>(jule::div(_14213_v,_13913_y1)));
	} else {
		_13913_y1=static_cast<jule::F64>(jule::div(_1103e69a0_pow(_13113_x,static_cast<jule::F64>(_13113_x - 0.5)),_13913_y1));
	}
	return std::make_tuple(_13913_y1,static_cast<jule::F64>((2.5066282746310007 * _13713_w) * _14013_y2));
}



inline jule::F64 _1104ab510_gamma(jule::F64 _15918_x) {
	
	{
		if (!((_1104ab510_is_neg_int(_15918_x)) || (_110193400_is_inf(_15918_x,-1LL)) || (_110193400_is_nan(_15918_x)))) { goto _case_end_4595600656; }
		_case_begin_4595600656:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4595600416;
		_case_end_4595600656:;
		if (!((_110193400_is_inf(_15918_x,1LL)))) { goto _case_end_4595600768; }
		_case_begin_4595600768:;
		{
			return static_cast<jule::F64>(_110193400_inf(1LL));
		}
		goto _match_end_4595600416;
		_case_end_4595600768:;
		if (!((_15918_x == 0LL))) { goto _case_end_4595600880; }
		_case_begin_4595600880:;
		{
			if (_11030a600_signbit(_15918_x)) {
				return static_cast<jule::F64>(_110193400_inf(-1LL));
			}
			return static_cast<jule::F64>(_110193400_inf(1LL));
		}
		goto _match_end_4595600416;
		_case_end_4595600880:;
		_match_end_4595600416:;
	}
	jule::F64 _17313_q = _1101dd560_abs(_15918_x);
	jule::F64 _17413_p = _11015fbf0_floor(_17313_q);
	if (_17313_q > 33LL) {
		if (_15918_x >= 0LL) {
			jule::F64 _17718_y1;
			jule::F64 _17722_y2;
			std::tie(_17718_y1,_17722_y2) = _1104ab510_stirling(_15918_x);
			return static_cast<jule::F64>(_17718_y1 * _17722_y2);
		}
		jule::Int _18317_signgam = 1LL;
		jule::I64 _18413_ip = static_cast<jule::I64>(_17413_p);
		if ((_18413_ip & 1LL) == 0LL) {
			_18317_signgam=-1LL;
		}
		jule::F64 _18817_z = _17313_q - _17413_p;
		if (_18817_z > 0.5) {
			_17413_p=static_cast<jule::F64>(_17413_p + 1LL);
			_18817_z=static_cast<jule::F64>(_17313_q - _17413_p);
		}
		_18817_z=static_cast<jule::F64>(_17313_q * _1100cd0d0_sin(static_cast<jule::F64>(3.141592653589793 * _18817_z)));
		if (_18817_z == 0LL) {
			return static_cast<jule::F64>(_110193400_inf(_18317_signgam));
		}
		jule::F64 _19714_sq1;
		jule::F64 _19719_sq2;
		std::tie(_19714_sq1,_19719_sq2) = _1104ab510_stirling(_17313_q);
		jule::F64 _19813_absz = _1101dd560_abs(_18817_z);
		jule::F64 _19913_d = (_19813_absz * _19714_sq1) * _19719_sq2;
		if (_110193400_is_inf(_19913_d,0LL)) {
			_18817_z=static_cast<jule::F64>(jule::div(jule::div(jule::div(3.141592653589793,_19813_absz),_19714_sq1),_19719_sq2));
		} else {
			_18817_z=static_cast<jule::F64>(jule::div(3.141592653589793,_19913_d));
		}
		return static_cast<jule::F64>(static_cast<jule::F64>(_18317_signgam) * _18817_z);
	}
	jule::F64 _20913_z = 1LL;
	_iter_begin_4595608240:;
	if (!(_15918_x >= 3LL)) { goto _iter_end_4595608240; }
	{
		_15918_x=static_cast<jule::F64>(_15918_x - 1LL);
		_20913_z=static_cast<jule::F64>(_20913_z * _15918_x);
	}
	_iter_next_4595608240:;
	goto _iter_begin_4595608240;
	_iter_end_4595608240:;
	_iter_begin_4595627200:;
	if (!(_15918_x < 0LL)) { goto _iter_end_4595627200; }
	{
		if (_15918_x > -0.000000001) {
			goto _julec_label_small;
		}
		_20913_z=static_cast<jule::F64>(jule::div(_20913_z,_15918_x));
		_15918_x=static_cast<jule::F64>(_15918_x + 1LL);
	}
	_iter_next_4595627200:;
	goto _iter_begin_4595627200;
	_iter_end_4595627200:;
	_iter_begin_4595630928:;
	if (!(_15918_x < 2LL)) { goto _iter_end_4595630928; }
	{
		if (_15918_x < 0.000000001) {
			goto _julec_label_small;
		}
		_20913_z=static_cast<jule::F64>(jule::div(_20913_z,_15918_x));
		_15918_x=static_cast<jule::F64>(_15918_x + 1LL);
	}
	_iter_next_4595630928:;
	goto _iter_begin_4595630928;
	_iter_end_4595630928:;
	if (_15918_x == 2LL) {
		return _20913_z;
	}
	_15918_x=static_cast<jule::F64>(_15918_x - 2LL);
	_17413_p=static_cast<jule::F64>((((((((((((_15918_x * _1104ab510__GAM_P[0LL]) + _1104ab510__GAM_P[1LL]) * _15918_x) + _1104ab510__GAM_P[2LL]) * _15918_x) + _1104ab510__GAM_P[3LL]) * _15918_x) + _1104ab510__GAM_P[4LL]) * _15918_x) + _1104ab510__GAM_P[5LL]) * _15918_x) + _1104ab510__GAM_P[6LL]);
	_17313_q=static_cast<jule::F64>((((((((((((((_15918_x * _1104ab510__GAM_Q[0LL]) + _1104ab510__GAM_Q[1LL]) * _15918_x) + _1104ab510__GAM_Q[2LL]) * _15918_x) + _1104ab510__GAM_Q[3LL]) * _15918_x) + _1104ab510__GAM_Q[4LL]) * _15918_x) + _1104ab510__GAM_Q[5LL]) * _15918_x) + _1104ab510__GAM_Q[6LL]) * _15918_x) + _1104ab510__GAM_Q[7LL]);
	return static_cast<jule::F64>(jule::div(_20913_z * _17413_p,_17313_q));
	_julec_label_small:;
	if (_15918_x == 0LL) {
		return static_cast<jule::F64>(_110193400_inf(1LL));
	}
	return static_cast<jule::F64>(jule::div(_20913_z,(1LL + (0.5772156649015329 * _15918_x)) * _15918_x));
}



inline jule::Bool _1104ab510_is_neg_int(jule::F64 _24515_x) {
	if (_24515_x < 0LL) {
		jule::F64 _24717_xf;
		std::tie(std::ignore,_24717_xf) = _110254f60_modf(_24515_x);
		return _24717_xf == 0LL;
	}
	return false;
}



inline jule::F64 _1104bda20_erfinv(jule::F64 _10519_x) {
	if ((_110193400_is_nan(_10519_x) || (_10519_x <= -1LL)) || (_10519_x >= 1LL)) {
		if ((_10519_x == -1LL) || (_10519_x == 1LL)) {
			return static_cast<jule::F64>(_110193400_inf(static_cast<jule::Int>(_10519_x)));
		}
		return static_cast<jule::F64>(_110193400_nan());
	}
	jule::Bool _11413_sign = false;
	if (_10519_x < 0LL) {
		_10519_x=static_cast<jule::F64>((-(_10519_x)));
		_11413_sign=true;
	}
	jule::F64 _12013_ans = 0LL;
	if (_10519_x <= 0.85) {
		jule::F64 _12213_r = 0.180625 - ((0.25 * _10519_x) * _10519_x);
		jule::F64 _12313_z1 = (((((((((((((887.0940696254552 * _12213_r) + 11819.493347062295) * _12213_r) + 23782.041382114385) * _12213_r) + 16235.862515167575) * _12213_r) + 4854.886889384388) * _12213_r) + 697.062665343896) * _12213_r) + 47.07268811238398) * _12213_r) + 1.1975323115670913;
		jule::F64 _12413_z2 = (((((((((((((5226.495278852854 * _12213_r) + 28729.085735721943) * _12213_r) + 39307.89580009271) * _12213_r) + 21213.794301586597) * _12213_r) + 5394.196021424751) * _12213_r) + 687.1870074920579) * _12213_r) + 42.31333070160091) * _12213_r) + 1LL;
		_12013_ans=static_cast<jule::F64>(jule::div(_10519_x * _12313_z1,_12413_z2));
	} else {
		jule::F64 _12717_z1 = 0LL;
		jule::F64 _12817_z2 = 0LL;
		jule::F64 _12917_r = _1104d53b0_sqrt(static_cast<jule::F64>(0.6931471805599453 - _1101abe90_log(static_cast<jule::F64>(1LL - _10519_x))));
		if (_12917_r <= 5LL) {
			_12917_r-=1.6;
			_12717_z1=static_cast<jule::F64>((((((((((((((0.0007745450142783414 * _12917_r) + 0.022723844989269184) * _12917_r) + 0.2417807251774506) * _12917_r) + 1.2704582524523684) * _12917_r) + 3.6478483247632045) * _12917_r) + 5.769497221460691) * _12917_r) + 4.630337846156546) * _12917_r) + 1.4234371107496835);
			_12817_z2=static_cast<jule::F64>((((((((((((((0.0000000014859850019840355 * _12917_r) + 0.0007744145906515771) * _12917_r) + 0.021494160384252878) * _12917_r) + 0.2094506521051275) * _12917_r) + 0.9754783200178743) * _12917_r) + 2.3707661626024534) * _12917_r) + 2.9036514445419948) * _12917_r) + 1.4142135623730951);
		} else {
			_12917_r-=5LL;
			_12717_z1=static_cast<jule::F64>((((((((((((((0.00000020103343992922881 * _12917_r) + 0.000027115555687434876) * _12917_r) + 0.0012426609473880784) * _12917_r) + 0.026532189526576124) * _12917_r) + 0.29656057182850487) * _12917_r) + 1.7848265399172913) * _12917_r) + 5.463784911164114) * _12917_r) + 6.657904643501103);
			_12817_z2=static_cast<jule::F64>((((((((((((((0.0000000000000028910246058729655 * _12917_r) + 0.0000002010321207683943) * _12917_r) + 0.000026110884050805935) * _12917_r) + 0.0011128009970788597) * _12917_r) + 0.02103693768272069) * _12917_r) + 0.19364809469506591) * _12917_r) + 0.8482908416595164) * _12917_r) + 1.4142135623730951);
		}
		_12013_ans=static_cast<jule::F64>(jule::div(_12717_z1,_12817_z2));
	}
	if (_11413_sign) {
		return static_cast<jule::F64>((-(_12013_ans)));
	}
	return _12013_ans;
}



inline jule::F64 _1104bda20_erfcinv(jule::F64 _15516_x) {
	return static_cast<jule::F64>(_1104bda20_erfinv(static_cast<jule::F64>(1LL - _15516_x)));
}



inline jule::F64 _1104f4a00_erf(jule::F64 _21716_x) {
	
	
	{
		if (!((_110193400_is_nan(_21716_x)))) { goto _case_end_4595692080; }
		_case_begin_4595692080:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4595691920;
		_case_end_4595692080:;
		if (!((_110193400_is_inf(_21716_x,1LL)))) { goto _case_end_4595692192; }
		_case_begin_4595692192:;
		{
			return 1LL;
		}
		goto _match_end_4595691920;
		_case_end_4595692192:;
		if (!((_110193400_is_inf(_21716_x,-1LL)))) { goto _case_end_4595692304; }
		_case_begin_4595692304:;
		{
			return -1LL;
		}
		goto _match_end_4595691920;
		_case_end_4595692304:;
		_match_end_4595691920:;
	}
	jule::Bool _22913_sign = false;
	if (_21716_x < 0LL) {
		_21716_x=static_cast<jule::F64>((-(_21716_x)));
		_22913_sign=true;
	}
	if (_21716_x < 0.84375) {
		jule::F64 _23517_temp = 0LL;
		if (_21716_x < 0.000000003725290298461914) {
			if (_21716_x < 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002848094538889218) {
				_23517_temp=static_cast<jule::F64>(0.125 * ((8LL * _21716_x) + (1.0270333367641007 * _21716_x)));
			} else {
				_23517_temp=static_cast<jule::F64>(_21716_x + (0.1283791670955126 * _21716_x));
			}
		} else {
			jule::F64 _24317_z = _21716_x * _21716_x;
			jule::F64 _24417_r = 0.12837916709551256 + (_24317_z * (-0.3250421072470015 + (_24317_z * (-0.02848174957559851 + (_24317_z * (-0.005770270296489442 + (_24317_z * -0.000023763016656650163)))))));
			jule::F64 _24517_s = 1LL + (_24317_z * (0.39791722395915535 + (_24317_z * (0.0650222499887673 + (_24317_z * (0.005081306281875766 + (_24317_z * (0.00013249473800432164 + (_24317_z * -0.000003960228278775368)))))))));
			jule::F64 _24617_y = jule::div(_24417_r,_24517_s);
			_23517_temp=static_cast<jule::F64>(_21716_x + (_21716_x * _24617_y));
		}
		if (_22913_sign) {
			return static_cast<jule::F64>((-(_23517_temp)));
		}
		return _23517_temp;
	}
	if (_21716_x < 1.25) {
		jule::F64 _25513_s = _21716_x - 1LL;
		jule::F64 _25613_P = -0.0023621185607526594 + (_25513_s * (0.41485611868374833 + (_25513_s * (-0.3722078760357013 + (_25513_s * (0.31834661990116175 + (_25513_s * (-0.11089469428239668 + (_25513_s * (0.035478304325618236 + (_25513_s * -0.002166375594868791)))))))))));
		jule::F64 _25713_Q = 1LL + (_25513_s * (0.10642088040084423 + (_25513_s * (0.540397917702171 + (_25513_s * (0.07182865441419627 + (_25513_s * (0.12617121980876164 + (_25513_s * (0.01363708391202905 + (_25513_s * 0.011984499846799107)))))))))));
		if (_22913_sign) {
			return static_cast<jule::F64>(-0.8450629115104675 - jule::div(_25613_P,_25713_Q));
		}
		return static_cast<jule::F64>(0.8450629115104675 + jule::div(_25613_P,_25713_Q));
	}
	if (_21716_x >= 6LL) {
		if (_22913_sign) {
			return -1LL;
		}
		return 1LL;
	}
	jule::F64 _2699_s = jule::div(1LL,_21716_x * _21716_x);
	jule::F64 _27013_R = 0LL;
	jule::F64 _27113_S = 0LL;
	if (_21716_x < 2.857142857142857) {
		_27013_R=static_cast<jule::F64>(-0.009864944034847148 + (_2699_s * (-0.6938585727071818 + (_2699_s * (-10.558626225323291 + (_2699_s * (-62.375332450326006 + (_2699_s * (-162.39666946257347 + (_2699_s * (-184.60509290671104 + (_2699_s * (-81.2874355063066 + (_2699_s * -9.814329344169145))))))))))))));
		_27113_S=static_cast<jule::F64>(1LL + (_2699_s * (19.651271667439257 + (_2699_s * (137.65775414351904 + (_2699_s * (434.56587747522923 + (_2699_s * (645.3872717332679 + (_2699_s * (429.00814002756783 + (_2699_s * (108.63500554177944 + (_2699_s * (6.570249770319282 + (_2699_s * -0.0604244152148581))))))))))))))));
	} else {
		_27013_R=static_cast<jule::F64>(-0.0098649429247001 + (_2699_s * (-0.799283237680523 + (_2699_s * (-17.757954917754752 + (_2699_s * (-160.63638485582192 + (_2699_s * (-637.5664433683896 + (_2699_s * (-1025.0951316110772 + (_2699_s * -483.5191916086514))))))))))));
		_27113_S=static_cast<jule::F64>(1LL + (_2699_s * (30.33806074348246 + (_2699_s * (325.7925129965739 + (_2699_s * (1536.729586084437 + (_2699_s * (3199.8582195085955 + (_2699_s * (2553.0504064331644 + (_2699_s * (474.52854120695537 + (_2699_s * -22.44095244658582))))))))))))));
	}
	jule::F64 _2799_z = _1100c9ac0_f64_from_bits(static_cast<jule::U64>(_1100c9ac0_f64_bits(_21716_x) & 18446744069414584320LLU));
	jule::F64 _2809_r = _1103f42c0_exp(static_cast<jule::F64>(((-(_2799_z)) * _2799_z) - 0.5625)) * _1103f42c0_exp(static_cast<jule::F64>(((_2799_z - _21716_x) * (_2799_z + _21716_x)) + jule::div(_27013_R,_27113_S)));
	if (_22913_sign) {
		return static_cast<jule::F64>(jule::div(_2809_r,_21716_x) - 1LL);
	}
	return static_cast<jule::F64>(1LL - jule::div(_2809_r,_21716_x));
}



inline jule::F64 _1104f4a00_erfc(jule::F64 _29317_x) {
	
	{
		if (!((_110193400_is_nan(_29317_x)))) { goto _case_end_4595746592; }
		_case_begin_4595746592:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4595746160;
		_case_end_4595746592:;
		if (!((_110193400_is_inf(_29317_x,1LL)))) { goto _case_end_4595746720; }
		_case_begin_4595746720:;
		{
			return 0LL;
		}
		goto _match_end_4595746160;
		_case_end_4595746720:;
		if (!((_110193400_is_inf(_29317_x,-1LL)))) { goto _case_end_4595746832; }
		_case_begin_4595746832:;
		{
			return 2LL;
		}
		goto _match_end_4595746160;
		_case_end_4595746832:;
		_match_end_4595746160:;
	}
	jule::Bool _30413_sign = false;
	if (_29317_x < 0LL) {
		_29317_x=static_cast<jule::F64>((-(_29317_x)));
		_30413_sign=true;
	}
	if (_29317_x < 0.84375) {
		jule::F64 _31017_temp = 0LL;
		if (_29317_x < 0.000000000000000013877787807814457) {
			_31017_temp=_29317_x;
		} else {
			jule::F64 _31417_z = _29317_x * _29317_x;
			jule::F64 _31517_r = 0.12837916709551256 + (_31417_z * (-0.3250421072470015 + (_31417_z * (-0.02848174957559851 + (_31417_z * (-0.005770270296489442 + (_31417_z * -0.000023763016656650163)))))));
			jule::F64 _31617_s = 1LL + (_31417_z * (0.39791722395915535 + (_31417_z * (0.0650222499887673 + (_31417_z * (0.005081306281875766 + (_31417_z * (0.00013249473800432164 + (_31417_z * -0.000003960228278775368)))))))));
			jule::F64 _31717_y = jule::div(_31517_r,_31617_s);
			if (_29317_x < 0.25) {
				_31017_temp=static_cast<jule::F64>(_29317_x + (_29317_x * _31717_y));
			} else {
				_31017_temp=static_cast<jule::F64>(0.5 + ((_29317_x * _31717_y) + (_29317_x - 0.5)));
			}
		}
		if (_30413_sign) {
			return static_cast<jule::F64>(1LL + _31017_temp);
		}
		return static_cast<jule::F64>(1LL - _31017_temp);
	}
	if (_29317_x < 1.25) {
		jule::F64 _33013_s = _29317_x - 1LL;
		jule::F64 _33113_P = -0.0023621185607526594 + (_33013_s * (0.41485611868374833 + (_33013_s * (-0.3722078760357013 + (_33013_s * (0.31834661990116175 + (_33013_s * (-0.11089469428239668 + (_33013_s * (0.035478304325618236 + (_33013_s * -0.002166375594868791)))))))))));
		jule::F64 _33213_Q = 1LL + (_33013_s * (0.10642088040084423 + (_33013_s * (0.540397917702171 + (_33013_s * (0.07182865441419627 + (_33013_s * (0.12617121980876164 + (_33013_s * (0.01363708391202905 + (_33013_s * 0.011984499846799107)))))))))));
		if (_30413_sign) {
			return static_cast<jule::F64>(1.8450629115104675 + jule::div(_33113_P,_33213_Q));
		}
		return static_cast<jule::F64>(0.15493708848953247 - jule::div(_33113_P,_33213_Q));
	}
	if (_29317_x < 28LL) {
		jule::F64 _34013_s = jule::div(1LL,_29317_x * _29317_x);
		jule::F64 _34117_R = 0LL;
		jule::F64 _34217_S = 0LL;
		if (_29317_x < 2.857142857142857) {
			_34117_R=static_cast<jule::F64>(-0.009864944034847148 + (_34013_s * (-0.6938585727071818 + (_34013_s * (-10.558626225323291 + (_34013_s * (-62.375332450326006 + (_34013_s * (-162.39666946257347 + (_34013_s * (-184.60509290671104 + (_34013_s * (-81.2874355063066 + (_34013_s * -9.814329344169145))))))))))))));
			_34217_S=static_cast<jule::F64>(1LL + (_34013_s * (19.651271667439257 + (_34013_s * (137.65775414351904 + (_34013_s * (434.56587747522923 + (_34013_s * (645.3872717332679 + (_34013_s * (429.00814002756783 + (_34013_s * (108.63500554177944 + (_34013_s * (6.570249770319282 + (_34013_s * -0.0604244152148581))))))))))))))));
		} else {
			if (_30413_sign && (_29317_x > 6LL)) {
				return 2LL;
			}
			_34117_R=static_cast<jule::F64>(-0.0098649429247001 + (_34013_s * (-0.799283237680523 + (_34013_s * (-17.757954917754752 + (_34013_s * (-160.63638485582192 + (_34013_s * (-637.5664433683896 + (_34013_s * (-1025.0951316110772 + (_34013_s * -483.5191916086514))))))))))));
			_34217_S=static_cast<jule::F64>(1LL + (_34013_s * (30.33806074348246 + (_34013_s * (325.7925129965739 + (_34013_s * (1536.729586084437 + (_34013_s * (3199.8582195085955 + (_34013_s * (2553.0504064331644 + (_34013_s * (474.52854120695537 + (_34013_s * -22.44095244658582))))))))))))));
		}
		jule::F64 _35313_z = _1100c9ac0_f64_from_bits(static_cast<jule::U64>(_1100c9ac0_f64_bits(_29317_x) & 18446744069414584320LLU));
		jule::F64 _35413_r = _1103f42c0_exp(static_cast<jule::F64>(((-(_35313_z)) * _35313_z) - 0.5625)) * _1103f42c0_exp(static_cast<jule::F64>(((_35313_z - _29317_x) * (_35313_z + _29317_x)) + jule::div(_34117_R,_34217_S)));
		if (_30413_sign) {
			return static_cast<jule::F64>(2LL - jule::div(_35413_r,_29317_x));
		}
		return static_cast<jule::F64>(jule::div(_35413_r,_29317_x));
	}
	if (_30413_sign) {
		return 2LL;
	}
	return 0LL;
}



inline jule::F64 _11052ac10_pow10(jule::Int _6114_n) {
	if ((0LL <= _6114_n) && (_6114_n <= 308LL)) {
		return static_cast<jule::F64>(_11052ac10_POW10_POSTAB32[static_cast<jule::Int>(jule::div(static_cast<jule::Uint>(_6114_n),32LL))] * _11052ac10_POW10_TAB[static_cast<jule::Int>(jule::mod(static_cast<jule::Uint>(_6114_n),32LL))]);
	}
	if ((-323LL <= _6114_n) && (_6114_n <= 0LL)) {
		return static_cast<jule::F64>(jule::div(_11052ac10_POW10_NEGTAB32[static_cast<jule::Int>(jule::div(static_cast<jule::Uint>((-(_6114_n))),32LL))],_11052ac10_POW10_TAB[static_cast<jule::Int>(jule::mod(static_cast<jule::Uint>((-(_6114_n))),32LL))]));
	}
	if (_6114_n > 0LL) {
		return static_cast<jule::F64>(_110193400_inf(1LL));
	}
	return 0LL;
}



inline jule::F64 _1104d53b0_sqrt(jule::F64 _12313_x) {
	{
		if (!((_12313_x == 0LL) || (_110193400_is_nan(_12313_x)) || (_110193400_is_inf(_12313_x,1LL)))) { goto _case_end_4595810416; }
		_case_begin_4595810416:;
		{
			return _12313_x;
		}
		goto _match_end_4595809984;
		_case_end_4595810416:;
		if (!((_12313_x < 0LL))) { goto _case_end_4595810544; }
		_case_begin_4595810544:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4595809984;
		_case_end_4595810544:;
		_match_end_4595809984:;
	}
	jule::U64 _13113_ix = _1100c9ac0_f64_bits(_12313_x);
	jule::Int _13313_exp = static_cast<jule::Int>((_13113_ix >> 52LL) & 2047LL);
	if (_13313_exp == 0LL) {
		_iter_begin_4595810992:;
		if (!((_13113_ix & 4503599627370496LL) == 0LL)) { goto _iter_end_4595810992; }
		{
			_13113_ix<<=1LL;
			(_13313_exp)--;
		}
		_iter_next_4595810992:;
		goto _iter_begin_4595810992;
		_iter_end_4595810992:;
		(_13313_exp)++;
	}
	_13313_exp-=1023LL;
	_13113_ix=static_cast<jule::U64>(_13113_ix & -9218868437227405313LL);
	_13113_ix|=4503599627370496LL;
	if ((_13313_exp & 1LL) == 1LL) {
		_13113_ix<<=1LL;
	}
	_13313_exp>>=1LL;
	_13113_ix<<=1LL;
	jule::U64 _15013_q = 0LLU;
	jule::U64 _15113_s = 0LLU;
	jule::U64 _15213_r = static_cast<jule::U64>(9007199254740992LLU);
	_iter_begin_4595814064:;
	if (!(_15213_r != 0LL)) { goto _iter_end_4595814064; }
	{
		jule::U64 _15413_t = _15113_s + _15213_r;
		if (_15413_t <= _13113_ix) {
			_15113_s=static_cast<jule::U64>(_15413_t + _15213_r);
			_13113_ix-=_15413_t;
			_15013_q+=_15213_r;
		}
		_13113_ix<<=1LL;
		_15213_r>>=1LL;
	}
	_iter_next_4595814064:;
	goto _iter_begin_4595814064;
	_iter_end_4595814064:;
	if (_13113_ix != 0LL) {
		_15013_q+=static_cast<jule::U64>(_15013_q & 1LL);
	}
	_13113_ix=static_cast<jule::U64>((_15013_q >> 1LL) + (static_cast<jule::U64>((_13313_exp - 1LL) + 1023LL) << 52LL));
	return static_cast<jule::F64>(_1100c9ac0_f64_from_bits(_13113_ix));
}



inline jule::F64 _110542580_logb(jule::F64 _4413_x) {
	{
		if (!((_4413_x == 0LL))) { goto _case_end_4595830992; }
		_case_begin_4595830992:;
		{
			return static_cast<jule::F64>(_110193400_inf(-1LL));
		}
		goto _match_end_4595830768;
		_case_end_4595830992:;
		if (!((_110193400_is_inf(_4413_x,0LL)))) { goto _case_end_4595831168; }
		_case_begin_4595831168:;
		{
			return static_cast<jule::F64>(_110193400_inf(1LL));
		}
		goto _match_end_4595830768;
		_case_end_4595831168:;
		if (!((_110193400_is_nan(_4413_x)))) { goto _case_end_4595831280; }
		_case_begin_4595831280:;
		{
			return _4413_x;
		}
		goto _match_end_4595830768;
		_case_end_4595831280:;
		_match_end_4595830768:;
	}
	return static_cast<jule::F64>(_110542580__ilogb(_4413_x));
}



inline jule::Int _110542580_ilogb(jule::F64 _6314_x) {
	{
		if (!((_6314_x == 0LL))) { goto _case_end_4595835856; }
		_case_begin_4595835856:;
		{
			return -2147483648LL;
		}
		goto _match_end_4595835632;
		_case_end_4595835856:;
		if (!((_110193400_is_nan(_6314_x)))) { goto _case_end_4595835984; }
		_case_begin_4595835984:;
		{
			return 2147483647LL;
		}
		goto _match_end_4595835632;
		_case_end_4595835984:;
		if (!((_110193400_is_inf(_6314_x,0LL)))) { goto _case_end_4595836112; }
		_case_begin_4595836112:;
		{
			return 2147483647LL;
		}
		goto _match_end_4595835632;
		_case_end_4595836112:;
		_match_end_4595835632:;
	}
	return static_cast<jule::Int>(_110542580__ilogb(_6314_x));
}



inline jule::Int _110542580__ilogb(jule::F64 _7715_x) {
	jule::Int _7813_exp = 0LL;
	std::tie(_7715_x,_7813_exp) = _110193400_normalize(_7715_x);
	return static_cast<jule::Int>((static_cast<jule::Int>((_1100c9ac0_f64_bits(_7715_x) >> 52LL) & 2047LL) - 1023LL) + _7813_exp);
}



inline jule::F64 _110475f70_jn(jule::Int _8415_n,jule::F64 _8427_x) {
	
	
	{
		if (!((_110193400_is_nan(_8427_x)))) { goto _case_end_4595846944; }
		_case_begin_4595846944:;
		{
			return _8427_x;
		}
		goto _match_end_4595846768;
		_case_end_4595846944:;
		if (!((_110193400_is_inf(_8427_x,0LL)))) { goto _case_end_4595847072; }
		_case_begin_4595847072:;
		{
			return 0LL;
		}
		goto _match_end_4595846768;
		_case_end_4595847072:;
		_match_end_4595846768:;
	}
	if (_8415_n == 0LL) {
		return static_cast<jule::F64>(_1102aaee0_j0(_8427_x));
	}
	if (_8427_x == 0LL) {
		return 0LL;
	}
	if (_8415_n < 0LL) {
		std::tie(_8415_n,_8427_x) = std::make_tuple(static_cast<jule::Int>((-(_8415_n))),static_cast<jule::F64>((-(_8427_x))));
	}
	if (_8415_n == 1LL) {
		return static_cast<jule::F64>(_1101ab0a0_j1(_8427_x));
	}
	jule::Bool _10913_sign = false;
	if (_8427_x < 0LL) {
		_8427_x=static_cast<jule::F64>((-(_8427_x)));
		if ((_8415_n & 1LL) == 1LL) {
			_10913_sign=true;
		}
	}
	jule::F64 _11613_b = 0LL;
	if (static_cast<jule::F64>(_8415_n) <= _8427_x) {
		if (_8427_x >= 5967269506265907200LL) {
			jule::F64 _13321_temp = 0LL;
			jule::F64 _13418_s;
			jule::F64 _13421_c;
			std::tie(_13418_s,_13421_c) = _110166080_sincos(_8427_x);
			{
				auto _match_expr{ _8415_n & 3LL };
				if (!((0LL) == _match_expr)) { goto _case_end_4595862432; }
				_case_begin_4595862432:;
				{
					_13321_temp=static_cast<jule::F64>(_13421_c + _13418_s);
				}
				goto _match_end_4595860192;
				_case_end_4595862432:;
				if (!((1LL) == _match_expr)) { goto _case_end_4595862592; }
				_case_begin_4595862592:;
				{
					_13321_temp=static_cast<jule::F64>((-(_13421_c)) + _13418_s);
				}
				goto _match_end_4595860192;
				_case_end_4595862592:;
				if (!((2LL) == _match_expr)) { goto _case_end_4595862704; }
				_case_begin_4595862704:;
				{
					_13321_temp=static_cast<jule::F64>((-(_13421_c)) - _13418_s);
				}
				goto _match_end_4595860192;
				_case_end_4595862704:;
				if (!((3LL) == _match_expr)) { goto _case_end_4595862816; }
				_case_begin_4595862816:;
				{
					_13321_temp=static_cast<jule::F64>(_13421_c - _13418_s);
				}
				goto _match_end_4595860192;
				_case_end_4595862816:;
				_match_end_4595860192:;
			}
			_11613_b=static_cast<jule::F64>(jule::div(0.5641895835477563 * _13321_temp,_1104d53b0_sqrt(_8427_x)));
		} else {
			_11613_b=static_cast<jule::F64>(_1101ab0a0_j1(_8427_x));
			jule::Int _14422_i = 1LL;
			jule::F64 _14429_a = _1102aaee0_j0(_8427_x);
			std::tie(_14422_i,_14429_a) = std::make_tuple(1LL,_1102aaee0_j0(_8427_x));
			_iter_begin_4595869136:;
			if (!(_14422_i < _8415_n)) { goto _iter_end_4595869136; }
			{
				std::tie(_14429_a,_11613_b) = std::make_tuple(_11613_b,static_cast<jule::F64>((_11613_b * jule::div(static_cast<jule::F64>(_14422_i + _14422_i),_8427_x)) - _14429_a));
			}
			_iter_next_4595869136:;
			(_14422_i)++;
			goto _iter_begin_4595869136;
			_iter_end_4595869136:;
		}
	} else {
		if (_8427_x < 0.000000001862645149230957) {
			if (_8415_n > 33LL) {
				_11613_b=0LL;
			} else {
				jule::F64 _15721_temp = _8427_x * 0.5;
				_11613_b=_15721_temp;
				jule::F64 _15925_a = 1LL;
				jule::Int _16025_i = 2LL;
				_iter_begin_4595876592:;
				if (!(_16025_i <= _8415_n)) { goto _iter_end_4595876592; }
				{
					_15925_a*=static_cast<jule::F64>(_16025_i);
					_11613_b*=_15721_temp;
				}
				_iter_next_4595876592:;
				(_16025_i)++;
				goto _iter_begin_4595876592;
				_iter_end_4595876592:;
				_11613_b/=_15925_a;
			}
		} else {
			jule::F64 _19717_w = jule::div(static_cast<jule::F64>(_8415_n + _8415_n),_8427_x);
			jule::F64 _19817_h = jule::div(2LL,_8427_x);
			jule::F64 _19921_q0 = _19717_w;
			jule::F64 _20021_z = _19717_w + _19817_h;
			jule::F64 _20121_q1 = (_19717_w * _20021_z) - 1LL;
			jule::Int _20221_k = 1LL;
			_iter_begin_4595885184:;
			if (!(_20121_q1 < 1000000000LL)) { goto _iter_end_4595885184; }
			{
				(_20221_k)++;
				_20021_z+=_19817_h;
				std::tie(_19921_q0,_20121_q1) = std::make_tuple(_20121_q1,static_cast<jule::F64>((_20021_z * _20121_q1) - _19921_q0));
			}
			_iter_next_4595885184:;
			goto _iter_begin_4595885184;
			_iter_end_4595885184:;
			jule::Int _20817_m = _8415_n + _8415_n;
			jule::F64 _20921_t = 0LL;
			jule::Int _21021_i = 2LL * (_8415_n + _20221_k);
			_iter_begin_4595890144:;
			if (!(_21021_i >= _20817_m)) { goto _iter_end_4595890144; }
			{
				_20921_t=static_cast<jule::F64>(jule::div(1LL,jule::div(static_cast<jule::F64>(_21021_i),_8427_x) - _20921_t));
			}
			_iter_next_4595890144:;
			_21021_i-=2LL;
			goto _iter_begin_4595890144;
			_iter_end_4595890144:;
			jule::F64 _21421_a = _20921_t;
			_11613_b=1LL;
			jule::F64 _22421_tmp = static_cast<jule::F64>(_8415_n);
			jule::F64 _22517_v = jule::div(2LL,_8427_x);
			_22421_tmp=static_cast<jule::F64>(_22421_tmp * _1101abe90_log(static_cast<jule::F64>(_1101dd560_abs(static_cast<jule::F64>(_22517_v * _22421_tmp)))));
			if (_22421_tmp < 709.782712893384) {
				jule::Int _22825_i = _8415_n - 1LL;
				_iter_begin_4595889552:;
				if (!(_22825_i > 0LL)) { goto _iter_end_4595889552; }
				{
					jule::F64 _23025_di = static_cast<jule::F64>(_22825_i + _22825_i);
					std::tie(_21421_a,_11613_b) = std::make_tuple(_11613_b,static_cast<jule::F64>(jule::div(_11613_b * _23025_di,_8427_x) - _21421_a));
				}
				_iter_next_4595889552:;
				(_22825_i)--;
				goto _iter_begin_4595889552;
				_iter_end_4595889552:;
			} else {
				jule::Int _23425_i = _8415_n - 1LL;
				_iter_begin_4595902512:;
				if (!(_23425_i > 0LL)) { goto _iter_end_4595902512; }
				{
					jule::F64 _23625_di = static_cast<jule::F64>(_23425_i + _23425_i);
					std::tie(_21421_a,_11613_b) = std::make_tuple(_11613_b,static_cast<jule::F64>(jule::div(_11613_b * _23625_di,_8427_x) - _21421_a));
					if (_11613_b > 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) {
						_21421_a/=_11613_b;
						_20921_t/=_11613_b;
						_11613_b=1LL;
					}
				}
				_iter_next_4595902512:;
				(_23425_i)--;
				goto _iter_begin_4595902512;
				_iter_end_4595902512:;
			}
			_11613_b=static_cast<jule::F64>(jule::div(_20921_t * _1102aaee0_j0(_8427_x),_11613_b));
		}
	}
	if (_10913_sign) {
		return static_cast<jule::F64>((-(_11613_b)));
	}
	return _11613_b;
}



inline jule::F64 _110475f70_yn(jule::Int _26315_n,jule::F64 _26323_x) {
	
	{
		if (!((_26323_x < 0LL) || (_110193400_is_nan(_26323_x)))) { goto _case_end_4595927968; }
		_case_begin_4595927968:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4595927728;
		_case_end_4595927968:;
		if (!((_110193400_is_inf(_26323_x,1LL)))) { goto _case_end_4595928080; }
		_case_begin_4595928080:;
		{
			return 0LL;
		}
		goto _match_end_4595927728;
		_case_end_4595928080:;
		_match_end_4595927728:;
	}
	if (_26315_n == 0LL) {
		return static_cast<jule::F64>(_1102aaee0_y0(_26323_x));
	}
	if (_26323_x == 0LL) {
		if ((_26315_n < 0LL) && ((_26315_n & 1LL) == 1LL)) {
			return static_cast<jule::F64>(_110193400_inf(1LL));
		}
		return static_cast<jule::F64>(_110193400_inf(-1LL));
	}
	jule::Bool _28213_sign = false;
	if (_26315_n < 0LL) {
		_26315_n=static_cast<jule::Int>((-(_26315_n)));
		if ((_26315_n & 1LL) == 1LL) {
			_28213_sign=true;
		}
	}
	if (_26315_n == 1LL) {
		if (_28213_sign) {
			return static_cast<jule::F64>((-(_1101ab0a0_y1(_26323_x))));
		}
		return static_cast<jule::F64>(_1101ab0a0_y1(_26323_x));
	}
	jule::F64 _29513_b = 0LL;
	if (_26323_x >= 5967269506265907200LL) {
		jule::F64 _31017_temp = 0LL;
		jule::F64 _31114_s;
		jule::F64 _31117_c;
		std::tie(_31114_s,_31117_c) = _110166080_sincos(_26323_x);
		{
			auto _match_expr{ _26315_n & 3LL };
			if (!((0LL) == _match_expr)) { goto _case_end_4595944592; }
			_case_begin_4595944592:;
			{
				_31017_temp=static_cast<jule::F64>(_31114_s - _31117_c);
			}
			goto _match_end_4595942352;
			_case_end_4595944592:;
			if (!((1LL) == _match_expr)) { goto _case_end_4595944752; }
			_case_begin_4595944752:;
			{
				_31017_temp=static_cast<jule::F64>((-(_31114_s)) - _31117_c);
			}
			goto _match_end_4595942352;
			_case_end_4595944752:;
			if (!((2LL) == _match_expr)) { goto _case_end_4595944864; }
			_case_begin_4595944864:;
			{
				_31017_temp=static_cast<jule::F64>((-(_31114_s)) + _31117_c);
			}
			goto _match_end_4595942352;
			_case_end_4595944864:;
			if (!((3LL) == _match_expr)) { goto _case_end_4595944976; }
			_case_begin_4595944976:;
			{
				_31017_temp=static_cast<jule::F64>(_31114_s + _31117_c);
			}
			goto _match_end_4595942352;
			_case_end_4595944976:;
			_match_end_4595942352:;
		}
		_29513_b=static_cast<jule::F64>(jule::div(0.5641895835477563 * _31017_temp,_1104d53b0_sqrt(_26323_x)));
	} else {
		jule::F64 _32017_a = _1102aaee0_y0(_26323_x);
		_29513_b=static_cast<jule::F64>(_1101ab0a0_y1(_26323_x));
		jule::Int _32317_i = 1LL;
		_iter_begin_4595951968:;
		if (!((_32317_i < _26315_n) && (!(_110193400_is_inf(_29513_b,-1LL))))) { goto _iter_end_4595951968; }
		{
			std::tie(_32017_a,_29513_b) = std::make_tuple(_29513_b,static_cast<jule::F64>((jule::div(static_cast<jule::F64>(_32317_i + _32317_i),_26323_x) * _29513_b) - _32017_a));
		}
		_iter_next_4595951968:;
		(_32317_i)++;
		goto _iter_begin_4595951968;
		_iter_end_4595951968:;
	}
	if (_28213_sign) {
		return static_cast<jule::F64>((-(_29513_b)));
	}
	return _29513_b;
}



inline jule::F64 _1105ade10_remainder(jule::F64 _6822_x,jule::F64 _6834_y) {
	
	
	{
		if (!((_110193400_is_nan(_6822_x)) || (_110193400_is_nan(_6834_y)) || (_110193400_is_inf(_6822_x,0LL)) || (_6834_y == 0LL))) { goto _case_end_4595959072; }
		_case_begin_4595959072:;
		{
			return static_cast<jule::F64>(_110193400_nan());
		}
		goto _match_end_4595958896;
		_case_end_4595959072:;
		if (!((_110193400_is_inf(_6834_y,0LL)))) { goto _case_end_4595959184; }
		_case_begin_4595959184:;
		{
			return _6822_x;
		}
		goto _match_end_4595958896;
		_case_end_4595959184:;
		_match_end_4595958896:;
	}
	jule::Bool _7913_sign = false;
	if (_6822_x < 0LL) {
		_6822_x=static_cast<jule::F64>((-(_6822_x)));
		_7913_sign=true;
	}
	if (_6834_y < 0LL) {
		_6834_y=static_cast<jule::F64>((-(_6834_y)));
	}
	if (_6822_x == _6834_y) {
		if (_7913_sign) {
			jule::F64 _8917_zero = 0LL;
			return static_cast<jule::F64>((-(_8917_zero)));
		}
		return 0LL;
	}
	if (_6834_y <= 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) {
		_6822_x=static_cast<jule::F64>(_1100eaa90_mod(_6822_x,static_cast<jule::F64>(_6834_y + _6834_y)));
	}
	if (_6834_y < 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403) {
		if ((_6822_x + _6822_x) > _6834_y) {
			_6822_x-=_6834_y;
			if ((_6822_x + _6822_x) >= _6834_y) {
				_6822_x-=_6834_y;
			}
		}
	} else {
		jule::F64 _10513_y_half = 0.5 * _6834_y;
		if (_6822_x > _10513_y_half) {
			_6822_x-=_6834_y;
			if (_6822_x >= _10513_y_half) {
				_6822_x-=_6834_y;
			}
		}
	}
	if (_7913_sign) {
		_6822_x=static_cast<jule::F64>((-(_6822_x)));
	}
	return _6822_x;
}



inline jule::F64 _1104f3f30_xatan(jule::F64 _8610_x) {
	
	
	
	
	
	
	
	
	
	
	jule::F64 _9813_z = _8610_x * _8610_x;
	_9813_z=static_cast<jule::F64>(jule::div(_9813_z * ((((((((-0.8750608600031904 * _9813_z) + -16.157537187333652) * _9813_z) + -75.00855792314705) * _9813_z) + -122.88666844901361) * _9813_z) + -64.85021904942025),((((((((_9813_z + 24.858464901423062) * _9813_z) + 165.02700983169885) * _9813_z) + 432.88106049129027) * _9813_z) + 485.3903996359137) * _9813_z) + 194.5506571482614));
	_9813_z=static_cast<jule::F64>((_8610_x * _9813_z) + _8610_x);
	return _9813_z;
}



inline jule::F64 _1104f3f30_satan(jule::F64 _10610_x) {
	
	
	if (_10610_x <= 0.66) {
		return static_cast<jule::F64>(_1104f3f30_xatan(_10610_x));
	}
	if (_10610_x > 2.414213562373095) {
		return static_cast<jule::F64>((1.5707963267948966 - _1104f3f30_xatan(static_cast<jule::F64>(jule::div(1LL,_10610_x)))) + 0.00000000000000006123233995736766);
	}
	return static_cast<jule::F64>((0.7853981633974483 + _1104f3f30_xatan(static_cast<jule::F64>(jule::div(_10610_x - 1LL,_10610_x + 1LL)))) + 0.00000000000000003061616997868383);
}



inline jule::F64 _1104f3f30_atan(jule::F64 _12413_x) {
	if (_12413_x == 0LL) {
		return _12413_x;
	}
	if (_12413_x > 0LL) {
		return static_cast<jule::F64>(_1104f3f30_satan(_12413_x));
	}
	return static_cast<jule::F64>((-(_1104f3f30_satan(static_cast<jule::F64>((-(_12413_x)))))));
}



inline jule::F64 _1105e3e90_asin(jule::F64 _5017_x) {
	if (_5017_x == 0LL) {
		return _5017_x;
	}
	jule::Bool _5413_sign = false;
	if (_5017_x < 0LL) {
		_5017_x=static_cast<jule::F64>((-(_5017_x)));
		_5413_sign=true;
	}
	if (_5017_x > 1LL) {
		return static_cast<jule::F64>(_110193400_nan());
	}
	jule::F64 _6313_temp = _1104d53b0_sqrt(static_cast<jule::F64>(1LL - (_5017_x * _5017_x)));
	if (_5017_x > 0.7) {
		_6313_temp=static_cast<jule::F64>(1.5707963267948966 - _1104f3f30_satan(static_cast<jule::F64>(jule::div(_6313_temp,_5017_x))));
	} else {
		_6313_temp=static_cast<jule::F64>(_1104f3f30_satan(static_cast<jule::F64>(jule::div(_5017_x,_6313_temp))));
	}
	if (_5413_sign) {
		_6313_temp=static_cast<jule::F64>((-(_6313_temp)));
	}
	return _6313_temp;
}



inline jule::F64 _1105e3e90_acos(jule::F64 _8013_x) {
	return static_cast<jule::F64>(1.5707963267948966 - _1105e3e90_asin(_8013_x));
}



inline jule::F64 _1105ca980_asinh(jule::F64 _7018_x) {
	
	
	
	if (_110193400_is_nan(_7018_x) || _110193400_is_inf(_7018_x,0LL)) {
		return _7018_x;
	}
	jule::Bool _7913_sign = false;
	if (_7018_x < 0LL) {
		_7018_x=static_cast<jule::F64>((-(_7018_x)));
		_7913_sign=true;
	}
	jule::F64 _8413_temp = 0LL;
	{
		if (!((_7018_x > 268435456LL))) { goto _case_end_4596023216; }
		_case_begin_4596023216:;
		{
			_8413_temp=static_cast<jule::F64>(_1101abe90_log(_7018_x) + 0.6931471805599453);
		}
		goto _match_end_4596021584;
		_case_end_4596023216:;
		if (!((_7018_x > 2LL))) { goto _case_end_4596024656; }
		_case_begin_4596024656:;
		{
			_8413_temp=static_cast<jule::F64>(_1101abe90_log(static_cast<jule::F64>((2LL * _7018_x) + jule::div(1LL,_1104d53b0_sqrt(static_cast<jule::F64>((_7018_x * _7018_x) + 1LL)) + _7018_x))));
		}
		goto _match_end_4596021584;
		_case_end_4596024656:;
		if (!((_7018_x < 0.000000003725290298461914))) { goto _case_end_4596023760; }
		_case_begin_4596023760:;
		{
			_8413_temp=_7018_x;
		}
		goto _match_end_4596021584;
		_case_end_4596023760:;
		_case_begin_4596016592:;
		{
			_8413_temp=static_cast<jule::F64>(_1103f8320_log1p(static_cast<jule::F64>(_7018_x + jule::div(_7018_x * _7018_x,1LL + _1104d53b0_sqrt(static_cast<jule::F64>(1LL + (_7018_x * _7018_x)))))));
		}
		goto _match_end_4596021584;
		_case_end_4596016592:;
		_match_end_4596021584:;
	}
	if (_7913_sign) {
		_8413_temp=static_cast<jule::F64>((-(_8413_temp)));
	}
	return _8413_temp;
}



inline std::tuple<jule::Bool,jule::Int> _117e51220_conv_bool(jule::Str _4118_s) {
	{
		auto _match_expr{ _4118_s };
		if (!((jule::Str("1", 1)) == _match_expr || (jule::Str("t", 1)) == _match_expr || (jule::Str("T", 1)) == _match_expr || (jule::Str("true", 4)) == _match_expr || (jule::Str("TRUE", 4)) == _match_expr || (jule::Str("True", 4)) == _match_expr)) { goto _case_end_4596529456; }
		_case_begin_4596529456:;
		{
			return std::make_tuple(true,0LLU);
		}
		goto _match_end_4596529120;
		_case_end_4596529456:;
		if (!((jule::Str("0", 1)) == _match_expr || (jule::Str("f", 1)) == _match_expr || (jule::Str("F", 1)) == _match_expr || (jule::Str("false", 5)) == _match_expr || (jule::Str("FALSE", 5)) == _match_expr || (jule::Str("False", 5)) == _match_expr)) { goto _case_end_4596529712; }
		_case_begin_4596529712:;
		{
			return std::make_tuple(false,0LLU);
		}
		goto _match_end_4596529120;
		_case_end_4596529712:;
		_match_end_4596529120:;
	}
	return std::make_tuple(false,2LLU);
}



inline jule::Str _117e51220_fmt_bool(jule::Bool _5217_b) {
	if (_5217_b) {
		return jule::Str("true", 4);
	}
	return jule::Str("false", 5);
}



inline jule::Str _117e12d10_fmt_float(jule::F64 _7818_f,jule::U8 _7826_fmt,jule::Int _7837_prec,jule::Int _7848_bit_size) {
	return static_cast<jule::Str>(_117e12d10_generic_ftoa(nullptr,_7818_f,_7826_fmt,_7837_prec,_7848_bit_size));
}



inline jule::Slice<jule::U8> _117e12d10_generic_ftoa(jule::Slice<jule::U8> _8221_dst,jule::F64 _8234_val,jule::U8 _8244_fmt,jule::Int _8259_prec,jule::Int _8270_bit_size) {
	jule::U64 _8313_bits = 0LLU;
	_117e12d10_FloatInfo* _8413_flt = nullptr;
	{
		auto _match_expr{ _8270_bit_size };
		if (!((32LL) == _match_expr)) { goto _case_end_4596546720; }
		_case_begin_4596546720:;
		{
			_8313_bits=static_cast<jule::U64>(_1100c9ac0_f32_bits(static_cast<jule::F32>(_8234_val)));
			_8413_flt=(&(_117e12d10_F32_INFO));
		}
		goto _match_end_4596545584;
		_case_end_4596546720:;
		if (!((64LL) == _match_expr)) { goto _case_end_4596546912; }
		_case_begin_4596546912:;
		{
			_8313_bits=static_cast<jule::U64>(_1100c9ac0_f64_bits(_8234_val));
			_8413_flt=(&(_117e12d10_F64_INFO));
		}
		goto _match_end_4596545584;
		_case_end_4596546912:;
		_case_begin_4596545808:;
		{
			jule::panic(jule::Str("std::conv: illegal bit_size", 27));
		}
		goto _match_end_4596545584;
		_case_end_4596545808:;
		_match_end_4596545584:;
	}
	jule::Bool _969_neg = (_8313_bits >> (_8413_flt->_field_expbits + _8413_flt->_field_mantbits)) != 0LL;
	jule::Int _9713_exp = static_cast<jule::Int>(_8313_bits >> _8413_flt->_field_mantbits) & ((1LL << _8413_flt->_field_expbits) - 1LL);
	jule::U64 _9813_mant = _8313_bits & ((static_cast<jule::U64>(1LLU) << _8413_flt->_field_mantbits) - 1LL);
	{
		auto _match_expr{ _9713_exp };
		if (!(((1LL << _8413_flt->_field_expbits) - 1LL) == _match_expr)) { goto _case_end_4596557232; }
		_case_begin_4596557232:;
		{
			jule::Str _10317_s = jule::Str("", 0);
			{
				if (!((_9813_mant != 0LL))) { goto _case_end_4596562112; }
				_case_begin_4596562112:;
				{
					_10317_s=jule::Str("nan", 3);
				}
				goto _match_end_4596561136;
				_case_end_4596562112:;
				if (!((_969_neg))) { goto _case_end_4596563120; }
				_case_begin_4596563120:;
				{
					_10317_s=jule::Str("-inf", 4);
				}
				goto _match_end_4596561136;
				_case_end_4596563120:;
				_case_begin_4596561296:;
				{
					_10317_s=jule::Str("+inf", 4);
				}
				goto _match_end_4596561136;
				_case_end_4596561296:;
				_match_end_4596561136:;
			}
			return jule::append(_8221_dst,static_cast<jule::Slice<jule::U8>>(_10317_s));
		}
		goto _match_end_4596551744;
		_case_end_4596557232:;
		if (!((0LL) == _match_expr)) { goto _case_end_4596557344; }
		_case_begin_4596557344:;
		{
			(_9713_exp)++;
		}
		goto _match_end_4596551744;
		_case_end_4596557344:;
		_case_begin_4596556272:;
		{
			_9813_mant|=static_cast<jule::Uint>(static_cast<jule::U64>(1LLU) << _8413_flt->_field_mantbits);
		}
		goto _match_end_4596551744;
		_case_end_4596556272:;
		_match_end_4596551744:;
	}
	_9713_exp+=_8413_flt->_field_bias;
	if (_8244_fmt == 'b') {
		return _117e12d10_fmt_b(_8221_dst,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if ((_8244_fmt == 'x') || (_8244_fmt == 'X')) {
		return _117e12d10_fmt_x(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if (false) {
		return _117e12d10_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	_117e12d10_DecimalSlice _13413_digs = _117e12d10_DecimalSlice();
	jule::Bool _13513_ok = false;
	jule::Bool _1379_shortest = _8259_prec < 0LL;
	if (_1379_shortest) {
		jule::Array<jule::U8,32> _14013_buf = jule::Array<jule::U8,32>({});
		_13413_digs._field_d=_14013_buf.slice(0LL);
		_107ea21d0_ryu_ftoa_shortest(_13413_digs,_9813_mant,static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>(_8413_flt->_field_mantbits))),(*(_8413_flt)));
		_13513_ok=true;
		{
			auto _match_expr{ _8244_fmt };
			if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4596576576; }
			_case_begin_4596576576:;
			{
				_8259_prec=static_cast<jule::Int>(_117e12d10_max(static_cast<jule::Int>(_13413_digs._field_nd - 1LL),0LL));
			}
			goto _match_end_4596574944;
			_case_end_4596576576:;
			if (!(('f') == _match_expr)) { goto _case_end_4596577296; }
			_case_begin_4596577296:;
			{
				_8259_prec=static_cast<jule::Int>(_117e12d10_max(static_cast<jule::Int>(_13413_digs._field_nd - _13413_digs._field_dp),0LL));
			}
			goto _match_end_4596574944;
			_case_end_4596577296:;
			if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4596577408; }
			_case_begin_4596577408:;
			{
				_8259_prec=_13413_digs._field_nd;
			}
			goto _match_end_4596574944;
			_case_end_4596577408:;
			_match_end_4596574944:;
		}
	} else if (_8244_fmt != 'f') {
		jule::Int _15517_digits = _8259_prec;
		{
			auto _match_expr{ _8244_fmt };
			if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4596584080; }
			_case_begin_4596584080:;
			{
				(_15517_digits)++;
			}
			goto _match_end_4596582288;
			_case_end_4596584080:;
			if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4596583104; }
			_case_begin_4596583104:;
			{
				if (_8259_prec == 0LL) {
					_8259_prec=1LL;
				}
				_15517_digits=_8259_prec;
			}
			goto _match_end_4596582288;
			_case_end_4596583104:;
			_case_begin_4596582800:;
			{
				_15517_digits=1LL;
			}
			goto _match_end_4596582288;
			_case_end_4596582800:;
			_match_end_4596582288:;
		}
		jule::Array<jule::U8,24> _16813_buf = jule::Array<jule::U8,24>({});
		if ((_8270_bit_size == 32LL) && (_15517_digits <= 9LL)) {
			_13413_digs._field_d=_16813_buf.slice(0LL);
			_107ea21d0_ryu_ftoa_fixed32(_13413_digs,static_cast<jule::U32>(_9813_mant),static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>(_8413_flt->_field_mantbits))),_15517_digits);
			_13513_ok=true;
		} else if (_15517_digits <= 18LL) {
			_13413_digs._field_d=_16813_buf.slice(0LL);
			_107ea21d0_ryu_ftoa_fixed64(_13413_digs,_9813_mant,static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>(_8413_flt->_field_mantbits))),_15517_digits);
			_13513_ok=true;
		}
	}
	if ((!(_13513_ok))) {
		return _117e12d10_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	return _117e12d10_fmt_digits(_8221_dst,_1379_shortest,_969_neg,_13413_digs,_8259_prec,_8244_fmt);
}



inline jule::Slice<jule::U8> _117e12d10_big_ftoa(jule::Slice<jule::U8> _18617_dst,jule::Int _18634_prec,jule::U8 _18645_fmt,jule::Bool _18656_neg,jule::U64 _18713_mant,jule::Int _18724_exp,_117e12d10_FloatInfo& _18735_flt) {
	_110057cd0_Decimal _18813_d = _110057cd0_Decimal();
	_18813_d._method_assign(_18713_mant);
	_18813_d._method_shift(static_cast<jule::Int>(_18724_exp - static_cast<jule::Int>(_18735_flt._field_mantbits)));
	_117e12d10_DecimalSlice _19113_digs = _117e12d10_DecimalSlice();
	jule::Bool _1929_shortest = _18634_prec < 0LL;
	if (_1929_shortest) {
		_117e12d10_round_shortest(_18813_d,_18713_mant,_18724_exp,_18735_flt);
		_19113_digs=_117e12d10_DecimalSlice(_18813_d._field_d.slice(0LL),_18813_d._field_nd,_18813_d._field_dp,jule::Bool());
		{
			auto _match_expr{ _18645_fmt };
			if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4596607088; }
			_case_begin_4596607088:;
			{
				_18634_prec=static_cast<jule::Int>(_19113_digs._field_nd - 1LL);
			}
			goto _match_end_4596609296;
			_case_end_4596607088:;
			if (!(('f') == _match_expr)) { goto _case_end_4596611104; }
			_case_begin_4596611104:;
			{
				_18634_prec=static_cast<jule::Int>(_117e12d10_max(static_cast<jule::Int>(_19113_digs._field_nd - _19113_digs._field_dp),0LL));
			}
			goto _match_end_4596609296;
			_case_end_4596611104:;
			if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4596611216; }
			_case_begin_4596611216:;
			{
				_18634_prec=_19113_digs._field_nd;
			}
			goto _match_end_4596609296;
			_case_end_4596611216:;
			_match_end_4596609296:;
		}
	} else {
		{
			auto _match_expr{ _18645_fmt };
			if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4596615232; }
			_case_begin_4596615232:;
			{
				_18813_d._method_round(static_cast<jule::Int>(_18634_prec + 1LL));
			}
			goto _match_end_4596613776;
			_case_end_4596615232:;
			if (!(('f') == _match_expr)) { goto _case_end_4596615344; }
			_case_begin_4596615344:;
			{
				_18813_d._method_round(static_cast<jule::Int>(_18813_d._field_dp + _18634_prec));
			}
			goto _match_end_4596613776;
			_case_end_4596615344:;
			if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4596611952; }
			_case_begin_4596611952:;
			{
				if (_18634_prec == 0LL) {
					_18634_prec=1LL;
				}
				_18813_d._method_round(_18634_prec);
			}
			goto _match_end_4596613776;
			_case_end_4596611952:;
			_match_end_4596613776:;
		}
		_19113_digs=_117e12d10_DecimalSlice(_18813_d._field_d.slice(0LL),_18813_d._field_nd,_18813_d._field_dp,jule::Bool());
	}
	return _117e12d10_fmt_digits(_18617_dst,_1929_shortest,_18656_neg,_19113_digs,_18634_prec,_18645_fmt);
}



inline jule::Slice<jule::U8> _117e12d10_fmt_digits(jule::Slice<jule::U8> _22319_dst,jule::Bool _22332_shortest,jule::Bool _22348_neg,_117e12d10_DecimalSlice _22413_digs,jule::Int _22437_prec,jule::U8 _22448_fmt) {
	{
		auto _match_expr{ _22448_fmt };
		if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4596627664; }
		_case_begin_4596627664:;
		{
			return _117e12d10_fmt_e(_22319_dst,_22348_neg,_22413_digs,_22437_prec,_22448_fmt);
		}
		goto _match_end_4596627328;
		_case_end_4596627664:;
		if (!(('f') == _match_expr)) { goto _case_end_4596627792; }
		_case_begin_4596627792:;
		{
			return _117e12d10_fmt_f(_22319_dst,_22348_neg,_22413_digs,_22437_prec);
		}
		goto _match_end_4596627328;
		_case_end_4596627792:;
		if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4596627920; }
		_case_begin_4596627920:;
		{
			jule::Int _23217_eprec = _22437_prec;
			if ((_23217_eprec > _22413_digs._field_nd) && (_22413_digs._field_nd >= _22413_digs._field_dp)) {
				_23217_eprec=_22413_digs._field_nd;
			}
			if (_22332_shortest) {
				_23217_eprec=6LL;
			}
			jule::Int _24213_exp = _22413_digs._field_dp - 1LL;
			if ((_24213_exp < -4LL) || (_24213_exp >= _23217_eprec)) {
				if (_22437_prec > _22413_digs._field_nd) {
					_22437_prec=_22413_digs._field_nd;
				}
				return _117e12d10_fmt_e(_22319_dst,_22348_neg,_22413_digs,static_cast<jule::Int>(_22437_prec - 1LL),static_cast<jule::U8>((_22448_fmt + 'e') - 'g'));
			}
			if (_22437_prec > _22413_digs._field_dp) {
				_22437_prec=_22413_digs._field_nd;
			}
			return _117e12d10_fmt_f(_22319_dst,_22348_neg,_22413_digs,static_cast<jule::Int>(_117e12d10_max(static_cast<jule::Int>(_22437_prec - _22413_digs._field_dp),0LL)));
		}
		goto _match_end_4596627328;
		_case_end_4596627920:;
		_match_end_4596627328:;
	}
	return jule::append(_22319_dst,jule::Slice<jule::U8>({'%',_22448_fmt}));
}



inline void _117e12d10_round_shortest(_110057cd0_Decimal& _26124_d,jule::U64 _26136_mant,jule::Int _26147_exp,_117e12d10_FloatInfo& _26158_flt) {
	if (_26136_mant == 0LL) {
		_26124_d._field_nd=0LL;
		return;
	}
	jule::Int _2829_minexp = _26158_flt._field_bias + 1LL;
	if ((_26147_exp > _2829_minexp) && ((332LL * (_26124_d._field_dp - _26124_d._field_nd)) >= (100LL * (_26147_exp - static_cast<jule::Int>(_26158_flt._field_mantbits))))) {
		return;
	}
	_110057cd0_Decimal _29113_upper = _110057cd0_Decimal();
	_29113_upper._method_assign(static_cast<jule::U64>((_26136_mant * 2LL) + 1LL));
	_29113_upper._method_shift(static_cast<jule::Int>((_26147_exp - static_cast<jule::Int>(_26158_flt._field_mantbits)) - 1LL));
	jule::U64 _30113_mantlo = 0LLU;
	jule::Int _30213_explo = 0LL;
	if ((_26136_mant > (1LL << _26158_flt._field_mantbits)) || (_26147_exp == _2829_minexp)) {
		_30113_mantlo=static_cast<jule::U64>(_26136_mant - 1LL);
		_30213_explo=_26147_exp;
	} else {
		_30113_mantlo=static_cast<jule::U64>((_26136_mant * 2LL) - 1LL);
		_30213_explo=static_cast<jule::Int>(_26147_exp - 1LL);
	}
	_110057cd0_Decimal _31013_lower = _110057cd0_Decimal();
	_31013_lower._method_assign(static_cast<jule::U64>((_30113_mantlo * 2LL) + 1LL));
	_31013_lower._method_shift(static_cast<jule::Int>((_30213_explo - static_cast<jule::Int>(_26158_flt._field_mantbits)) - 1LL));
	jule::Bool _3179_inclusive = jule::mod(_26136_mant,2LL) == 0LL;
	jule::U8 _33013_upperdelta = 0LLU;
	jule::Int _33413_ui = 0LL;
	_iter_begin_4596666048:;
	{
		jule::Int _33913_mi = (_33413_ui - _29113_upper._field_dp) + _26124_d._field_dp;
		if (_33913_mi >= _26124_d._field_nd) {
			goto _iter_end_4596666048;
		}
		jule::Int _34313_li = (_33413_ui - _29113_upper._field_dp) + _31013_lower._field_dp;
		jule::U8 _34417_l = static_cast<jule::U8>(48LLU);
		if ((_34313_li >= 0LL) && (_34313_li < _31013_lower._field_nd)) {
			_34417_l=_31013_lower._field_d[static_cast<jule::Int>(_34313_li)];
		}
		jule::U8 _34817_m = static_cast<jule::U8>(48LLU);
		if (_33913_mi >= 0LL) {
			_34817_m=_26124_d._field_d[static_cast<jule::Int>(_33913_mi)];
		}
		jule::U8 _35217_u = static_cast<jule::U8>(48LLU);
		if (_33413_ui < _29113_upper._field_nd) {
			_35217_u=_29113_upper._field_d[static_cast<jule::Int>(_33413_ui)];
		}
		jule::Bool _36013_okdown = (_34417_l != _34817_m) || (_3179_inclusive && ((_34313_li + 1LL) == _31013_lower._field_nd));
		{
			if (!(((_33013_upperdelta == 0LL) && ((_34817_m + 1LL) < _35217_u)))) { goto _case_end_4596682896; }
			_case_begin_4596682896:;
			{
				_33013_upperdelta=2LL;
			}
			goto _match_end_4596680304;
			_case_end_4596682896:;
			if (!(((_33013_upperdelta == 0LL) && (_34817_m != _35217_u)))) { goto _case_end_4596683008; }
			_case_begin_4596683008:;
			{
				_33013_upperdelta=1LL;
			}
			goto _match_end_4596680304;
			_case_end_4596683008:;
			if (!(((_33013_upperdelta == 1LL) && ((_34817_m != '9') || (_35217_u != '0'))))) { goto _case_end_4596683472; }
			_case_begin_4596683472:;
			{
				_33013_upperdelta=2LL;
			}
			goto _match_end_4596680304;
			_case_end_4596683472:;
			_match_end_4596680304:;
		}
		jule::Bool _38113_okup = (_33013_upperdelta > 0LL) && ((_3179_inclusive || (_33013_upperdelta > 1LL)) || ((_33413_ui + 1LL) < _29113_upper._field_nd));
		{
			if (!((_36013_okdown && _38113_okup))) { goto _case_end_4596689248; }
			_case_begin_4596689248:;
			{
				_26124_d._method_round(static_cast<jule::Int>(_33913_mi + 1LL));
				return;
			}
			goto _match_end_4596688672;
			_case_end_4596689248:;
			if (!((_36013_okdown))) { goto _case_end_4596689360; }
			_case_begin_4596689360:;
			{
				_26124_d._method_round_down(static_cast<jule::Int>(_33913_mi + 1LL));
				return;
			}
			goto _match_end_4596688672;
			_case_end_4596689360:;
			if (!((_38113_okup))) { goto _case_end_4596689776; }
			_case_begin_4596689776:;
			{
				_26124_d._method_round_up(static_cast<jule::Int>(_33913_mi + 1LL));
				return;
			}
			goto _match_end_4596688672;
			_case_end_4596689776:;
			_match_end_4596688672:;
		}
	}
	_iter_next_4596666048:;
	(_33413_ui)++;
	goto _iter_begin_4596666048;
	_iter_end_4596666048:;
}



inline jule::Slice<jule::U8> _117e12d10_fmt_e(jule::Slice<jule::U8> _40014_dst,jule::Bool _40027_neg,_117e12d10_DecimalSlice _40038_d,jule::Int _40055_prec,jule::U8 _40066_fmt) {
	if (_40027_neg) {
		_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({'-'}));
	}
	jule::U8 _40713_ch = '0';
	if (_40038_d._field_nd != 0LL) {
		_40713_ch=_40038_d._field_d[0LL];
	}
	_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({_40713_ch}));
	if (_40055_prec > 0LL) {
		_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({'.'}));
		jule::Int _41617_i = 1LL;
		jule::Int _41713_m = _117e12d10_min(_40038_d._field_nd,static_cast<jule::Int>(_40055_prec + 1LL));
		if (_41617_i < _41713_m) {
			_40014_dst=jule::append(_40014_dst,_40038_d._field_d.slice(static_cast<jule::Int>(_41617_i),static_cast<jule::Int>(_41713_m)));
			_41617_i=_41713_m;
		}
		_iter_begin_4596711936:;
		if (!(_41617_i <= _40055_prec)) { goto _iter_end_4596711936; }
		{
			_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({'0'}));
		}
		_iter_next_4596711936:;
		(_41617_i)++;
		goto _iter_begin_4596711936;
		_iter_end_4596711936:;
	}
	_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({_40066_fmt}));
	jule::Int _42913_exp = _40038_d._field_dp - 1LL;
	if (_40038_d._field_nd == 0LL) {
		_42913_exp=0LL;
	}
	if (_42913_exp < 0LL) {
		_40713_ch='-';
		_42913_exp=static_cast<jule::Int>((-(_42913_exp)));
	} else {
		_40713_ch='+';
	}
	_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({_40713_ch}));
	{
		if (!((_42913_exp < 10LL))) { goto _case_end_4596717184; }
		_case_begin_4596717184:;
		{
			_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({'0',static_cast<jule::U8>(static_cast<jule::U8>(_42913_exp) + '0')}));
		}
		goto _match_end_4596714288;
		_case_end_4596717184:;
		if (!((_42913_exp < 100LL))) { goto _case_end_4596716624; }
		_case_begin_4596716624:;
		{
			_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_42913_exp,10LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(_42913_exp,10LL)) + '0')}));
		}
		goto _match_end_4596714288;
		_case_end_4596716624:;
		_case_begin_4596717072:;
		{
			_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_42913_exp,100LL)) + '0'),static_cast<jule::U8>(jule::mod(static_cast<jule::U8>(jule::div(_42913_exp,10LL)),10LL) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(_42913_exp,10LL)) + '0')}));
		}
		goto _match_end_4596714288;
		_case_end_4596717072:;
		_match_end_4596714288:;
	}
	return _40014_dst;
}



inline jule::Slice<jule::U8> _117e12d10_fmt_f(jule::Slice<jule::U8> _45514_dst,jule::Bool _45527_neg,_117e12d10_DecimalSlice _45538_d,jule::Int _45555_prec) {
	if (_45527_neg) {
		_45514_dst=jule::append(_45514_dst,jule::Slice<jule::U8>({'-'}));
	}
	if (_45538_d._field_dp > 0LL) {
		jule::Int _46317_m = _117e12d10_min(_45538_d._field_nd,_45538_d._field_dp);
		_45514_dst=jule::append(_45514_dst,_45538_d._field_d.slice(0LL,static_cast<jule::Int>(_46317_m)));
		_iter_begin_4596729056:;
		if (!(_46317_m < _45538_d._field_dp)) { goto _iter_end_4596729056; }
		{
			_45514_dst=jule::append(_45514_dst,jule::Slice<jule::U8>({'0'}));
		}
		_iter_next_4596729056:;
		(_46317_m)++;
		goto _iter_begin_4596729056;
		_iter_end_4596729056:;
	} else {
		_45514_dst=jule::append(_45514_dst,jule::Slice<jule::U8>({'0'}));
	}
	if (_45555_prec > 0LL) {
		_45514_dst=jule::append(_45514_dst,jule::Slice<jule::U8>({'.'}));
		jule::Int _47417_i = 0LL;
		_iter_begin_4596731264:;
		if (!(_47417_i < _45555_prec)) { goto _iter_end_4596731264; }
		{
			jule::U8 _47621_ch = static_cast<jule::U8>(48LLU);
			jule::Int _47717_j = _45538_d._field_dp + _47417_i;
			if ((0LL <= _47717_j) && (_47717_j < _45538_d._field_nd)) {
				_47621_ch=_45538_d._field_d[static_cast<jule::Int>(_47717_j)];
			}
			_45514_dst=jule::append(_45514_dst,jule::Slice<jule::U8>({_47621_ch}));
		}
		_iter_next_4596731264:;
		(_47417_i)++;
		goto _iter_begin_4596731264;
		_iter_end_4596731264:;
	}
	return _45514_dst;
}



inline jule::Slice<jule::U8> _117e12d10_fmt_b(jule::Slice<jule::U8> _48814_dst,jule::Bool _48827_neg,jule::U64 _48838_mant,jule::Int _48853_exp,_117e12d10_FloatInfo& _48864_flt) {
	if (_48827_neg) {
		_48814_dst=jule::append(_48814_dst,jule::Slice<jule::U8>({'-'}));
	}
	std::tie(_48814_dst,std::ignore) = _110054e40_fmt_bits(_48814_dst,_48838_mant,10LL,false,true);
	_48814_dst=jule::append(_48814_dst,jule::Slice<jule::U8>({'p'}));
	_48853_exp-=static_cast<jule::Int>(_48864_flt._field_mantbits);
	if (_48853_exp >= 0LL) {
		_48814_dst=jule::append(_48814_dst,jule::Slice<jule::U8>({'+'}));
	}
	std::tie(_48814_dst,std::ignore) = _110054e40_fmt_bits(_48814_dst,static_cast<jule::U64>(_48853_exp),10LL,_48853_exp < 0LL,true);
	return _48814_dst;
}



inline jule::Slice<jule::U8> _117e12d10_fmt_x(jule::Slice<jule::U8> _51014_dst,jule::Int _51027_prec,jule::U8 _51038_fmt,jule::Bool _51049_neg,jule::U64 _51113_mant,jule::Int _51128_exp,_117e12d10_FloatInfo& _51139_flt) {
	if (_51113_mant == 0LL) {
		_51128_exp=0LL;
	}
	_51113_mant<<=static_cast<jule::Uint>(60LL - _51139_flt._field_mantbits);
	_iter_begin_4596755648:;
	if (!((_51113_mant != 0LL) && ((_51113_mant & 1152921504606846976LL) == 0LL))) { goto _iter_end_4596755648; }
	{
		_51113_mant<<=1LL;
		(_51128_exp)--;
	}
	_iter_next_4596755648:;
	goto _iter_begin_4596755648;
	_iter_end_4596755648:;
	if ((_51027_prec >= 0LL) && (_51027_prec < 15LL)) {
		jule::Uint _52513_shift = static_cast<jule::Uint>(_51027_prec * 4LL);
		jule::U64 _52613_extra = (_51113_mant << _52513_shift) & 1152921504606846976LL;
		_51113_mant>>=static_cast<jule::Uint>(60LL - _52513_shift);
		if ((_52613_extra | (_51113_mant & 1LL)) > 576460752303423488LL) {
			(_51113_mant)++;
		}
		_51113_mant<<=static_cast<jule::Uint>(60LL - _52513_shift);
		if ((_51113_mant & 2305843009213693952LL) != 0LL) {
			_51113_mant>>=1LL;
			(_51128_exp)++;
		}
	}
	jule::Str _53913_hex = jule::Str("0123456789abcdef", 16);
	if (_51038_fmt == 'X') {
		_53913_hex=jule::Str("0123456789ABCDEF", 16);
	}
	if (_51049_neg) {
		_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({'-'}));
	}
	_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({'0',_51038_fmt,static_cast<jule::U8>('0' + static_cast<jule::U8>((_51113_mant >> 60LL) & 1LL))}));
	_51113_mant<<=4LL;
	if ((_51027_prec < 0LL) && (_51113_mant != 0LL)) {
		_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({'.'}));
		_iter_begin_4596771264:;
		if (!(_51113_mant != 0LL)) { goto _iter_end_4596771264; }
		{
			_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({_53913_hex[static_cast<jule::Int>((_51113_mant >> 60LL) & 15LL)]}));
			_51113_mant<<=4LL;
		}
		_iter_next_4596771264:;
		goto _iter_begin_4596771264;
		_iter_end_4596771264:;
	} else if (_51027_prec > 0LL) {
		_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({'.'}));
		jule::Int _56017_i = 0LL;
		_iter_begin_4596774384:;
		if (!(_56017_i < _51027_prec)) { goto _iter_end_4596774384; }
		{
			_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({_53913_hex[static_cast<jule::Int>((_51113_mant >> 60LL) & 15LL)]}));
			_51113_mant<<=4LL;
		}
		_iter_next_4596774384:;
		(_56017_i)++;
		goto _iter_begin_4596774384;
		_iter_end_4596774384:;
	}
	jule::U8 _56813_ch = static_cast<jule::U8>(80LLU);
	if (_51038_fmt == _117e872d0_lower(_51038_fmt)) {
		_56813_ch='p';
	}
	_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({_56813_ch}));
	if (_51128_exp < 0LL) {
		_56813_ch='-';
		_51128_exp=static_cast<jule::Int>((-(_51128_exp)));
	} else {
		_56813_ch='+';
	}
	_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({_56813_ch}));
	{
		if (!((_51128_exp < 100LL))) { goto _case_end_4596783568; }
		_case_begin_4596783568:;
		{
			_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_51128_exp,10LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(_51128_exp,10LL)) + '0')}));
		}
		goto _match_end_4596780608;
		_case_end_4596783568:;
		if (!((_51128_exp < 1000LL))) { goto _case_end_4596783680; }
		_case_begin_4596783680:;
		{
			_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_51128_exp,100LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(jule::div(_51128_exp,10LL),10LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(_51128_exp,10LL)) + '0')}));
		}
		goto _match_end_4596780608;
		_case_end_4596783680:;
		_case_begin_4596769904:;
		{
			_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_51128_exp,1000LL)) + '0'),static_cast<jule::U8>(jule::mod(static_cast<jule::U8>(jule::div(_51128_exp,100LL)),10LL) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(jule::div(_51128_exp,10LL),10LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(_51128_exp,10LL)) + '0')}));
		}
		goto _match_end_4596780608;
		_case_end_4596769904:;
		_match_end_4596780608:;
	}
	return _51014_dst;
}



inline jule::Int _117e12d10_min(jule::Int _5938_a,jule::Int _59316_b) {
	if (_5938_a < _59316_b) {
		return _5938_a;
	}
	return _59316_b;
}



inline jule::Int _117e12d10_max(jule::Int _6008_a,jule::Int _60016_b) {
	if (_6008_a > _60016_b) {
		return _6008_a;
	}
	return _60016_b;
}



inline jule::U8 _117e872d0_lower(jule::U8 _4910_c) {
	return static_cast<jule::U8>(_4910_c | 32LL);
}



inline std::tuple<jule::U64,jule::Int> _117e872d0_parse_uint(jule::Str _5423_s,jule::Int _5435_base,jule::Int _5450_bit_size) {
	if (_5423_s == jule::Str("", 0)) {
		return std::make_tuple(0LL,2LLU);
	}
	{
		if (!(((2LL <= _5435_base) && (_5435_base <= 36LL)))) { goto _case_end_4596805616; }
		goto _match_end_4596801712;
		_case_end_4596805616:;
		if (!((_5435_base == 0LL))) { goto _case_end_4596804624; }
		_case_begin_4596804624:;
		{
			_5435_base=10LL;
			if (_5423_s[0LL] == '0') {
				{
					if (!(((_5423_s.len() >= 3LL) && (_117e872d0_lower(_5423_s[1LL]) == 'b')))) { goto _case_end_4596809392; }
					_case_begin_4596809392:;
					{
						_5435_base=2LL;
						_5423_s=_5423_s.slice(2LL);
					}
					goto _match_end_4596808400;
					_case_end_4596809392:;
					if (!(((_5423_s.len() >= 3LL) && (_117e872d0_lower(_5423_s[1LL]) == 'o')))) { goto _case_end_4596810336; }
					_case_begin_4596810336:;
					{
						_5435_base=8LL;
						_5423_s=_5423_s.slice(2LL);
					}
					goto _match_end_4596808400;
					_case_end_4596810336:;
					if (!(((_5423_s.len() >= 3LL) && (_117e872d0_lower(_5423_s[1LL]) == 'x')))) { goto _case_end_4596810544; }
					_case_begin_4596810544:;
					{
						_5435_base=16LL;
						_5423_s=_5423_s.slice(2LL);
					}
					goto _match_end_4596808400;
					_case_end_4596810544:;
					_case_begin_4596808544:;
					{
						_5435_base=8LL;
						_5423_s=_5423_s.slice(1LL);
					}
					goto _match_end_4596808400;
					_case_end_4596808544:;
					_match_end_4596808400:;
				}
			}
		}
		goto _match_end_4596801712;
		_case_end_4596804624:;
		_case_begin_4596801808:;
		{
			return std::make_tuple(0LL,3LLU);
		}
		goto _match_end_4596801712;
		_case_end_4596801808:;
		_match_end_4596801712:;
	}
	if (_5450_bit_size == 0LL) {
		_5450_bit_size=64LL;
	} else if ((_5450_bit_size < 0LL) || (_5450_bit_size > 64LL)) {
		return std::make_tuple(0LL,4LLU);
	}
	jule::U64 _9313_cutoff = 0LLU;
	{
		auto _match_expr{ _5435_base };
		if (!((10LL) == _match_expr)) { goto _case_end_4596819584; }
		_case_begin_4596819584:;
		{
			_9313_cutoff=1844674407370955264LL;
		}
		goto _match_end_4596817872;
		_case_end_4596819584:;
		if (!((16LL) == _match_expr)) { goto _case_end_4596821152; }
		_case_begin_4596821152:;
		{
			_9313_cutoff=1152921504606846976LL;
		}
		goto _match_end_4596817872;
		_case_end_4596821152:;
		_case_begin_4596818800:;
		{
			_9313_cutoff=static_cast<jule::U64>(jule::div(jule::MAX_U64,static_cast<jule::U64>(_5435_base)) + 1LL);
		}
		goto _match_end_4596817872;
		_case_end_4596818800:;
		_match_end_4596817872:;
	}
	jule::U64 _10013_max_val = 0LLU;
	{
		auto _match_expr{ _5450_bit_size };
		if (!((32LL) == _match_expr)) { goto _case_end_4596819344; }
		_case_begin_4596819344:;
		{
			_10013_max_val=4294967295LLU;
		}
		goto _match_end_4596822256;
		_case_end_4596819344:;
		if (!((64LL) == _match_expr)) { goto _case_end_4596823184; }
		_case_begin_4596823184:;
		{
			_10013_max_val=jule::MAX_U64;
		}
		goto _match_end_4596822256;
		_case_end_4596823184:;
		_match_end_4596822256:;
	}
	jule::U64 _11213_n = 0LLU;
	{
		auto __julec_range_expr = _5423_s;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::U8 _117e872d0_c = *__julec_range_begin;
			_iter_begin_4596826032:;
			{
				jule::U8 _11417_d = 0LLU;
				{
					if (!((('0' <= _117e872d0_c) && (_117e872d0_c <= '9')))) { goto _case_end_4596831008; }
					_case_begin_4596831008:;
					{
						_11417_d=static_cast<jule::U8>(_117e872d0_c - '0');
					}
					goto _match_end_4596828848;
					_case_end_4596831008:;
					if (!((('a' <= _117e872d0_lower(_117e872d0_c)) && (_117e872d0_lower(_117e872d0_c) <= 'z')))) { goto _case_end_4596830016; }
					_case_begin_4596830016:;
					{
						_11417_d=static_cast<jule::U8>((_117e872d0_lower(_117e872d0_c) - 'a') + 10LL);
					}
					goto _match_end_4596828848;
					_case_end_4596830016:;
					_case_begin_4596829040:;
					{
						return std::make_tuple(0LL,2LLU);
					}
					goto _match_end_4596828848;
					_case_end_4596829040:;
					_match_end_4596828848:;
				}
				if (_11417_d >= static_cast<jule::U8>(_5435_base)) {
					return std::make_tuple(0LL,2LLU);
				}
				if (_11213_n >= _9313_cutoff) {
					return std::make_tuple(_10013_max_val,1LLU);
				}
				_11213_n*=static_cast<jule::U64>(_5435_base);
				jule::U64 _13413_n1 = _11213_n + static_cast<jule::U64>(_11417_d);
				if ((_13413_n1 < _11213_n) || (_13413_n1 > _10013_max_val)) {
					return std::make_tuple(_10013_max_val,1LLU);
				}
				_11213_n=_13413_n1;
			}
			_iter_next_4596826032:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _117e872d0_c = *__julec_range_begin; goto _iter_begin_4596826032; }
			_iter_end_4596826032:;
		}
	}
	return std::make_tuple(_11213_n,0LLU);
}



inline std::tuple<jule::I64,jule::Int> _117e872d0_parse_int(jule::Str _16522_s,jule::Int _16530_base,jule::Int _16545_bit_size) {
	jule::Int _16570_err = 0LLU;
	jule::I64 _16562_i = jule::I64();
	if (_16522_s == jule::Str("", 0)) {
		_16562_i = 0LL;
		_16570_err = 2LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	jule::Bool _17113_neg = false;
	if (_16522_s[0LL] == '+') {
		_16522_s=_16522_s.slice(1LL);
	} else if (_16522_s[0LL] == '-') {
		_17113_neg=true;
		_16522_s=_16522_s.slice(1LL);
	}
	jule::Uint _18013_un = 0LLU;
	std::tie(_18013_un,_16570_err) = _117e872d0_parse_uint(_16522_s,_16530_base,_16545_bit_size);
	if ((_16570_err != 0LLU) && (_16570_err != 1LLU)) {
		_16562_i = 0LL;
		_16570_err = _16570_err;
		return std::make_tuple(_16562_i,_16570_err);
	}
	if (_16545_bit_size == 0LL) {
		_16545_bit_size=64LL;
	}
	jule::U64 _1909_cutoff = static_cast<jule::U64>(1LL << static_cast<jule::Uint>(_16545_bit_size - 1LL));
	if ((!(_17113_neg)) && (_18013_un >= _1909_cutoff)) {
		_16562_i = static_cast<jule::I64>(_1909_cutoff - 1LL);
		_16570_err = 1LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	if (_17113_neg && (_18013_un > _1909_cutoff)) {
		_16562_i = static_cast<jule::I64>((-(static_cast<jule::I64>(_1909_cutoff))));
		_16570_err = 1LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	jule::I64 _19713_n = static_cast<jule::I64>(_18013_un);
	if (_17113_neg) {
		_19713_n=static_cast<jule::I64>((-(_19713_n)));
	}
	_16562_i = _19713_n;
	_16570_err = 0LLU;
	return std::make_tuple(_16562_i,_16570_err);
}



inline std::tuple<jule::F64,jule::Bool> _117e95220_eisel_lemire64(jule::U64 _4123_man,jule::Int _4133_exp10,jule::Bool _4145_neg) {
	jule::Bool _4166_ok = jule::Bool();
	jule::F64 _4158_f = jule::F64();
	if (_4123_man == 0LL) {
		if (_4145_neg) {
			_4158_f=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(9223372036854775808LLU));
		}
		_4158_f = _4158_f;
		_4166_ok = true;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	if ((_4133_exp10 < -348LL) || (347LL < _4133_exp10)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::Int _579_clz = _110621fc0_leading_zeros64(_4123_man);
	_4123_man<<=static_cast<jule::Uint>(_579_clz);
	
	jule::U64 _6013_ret_exp2 = static_cast<jule::U64>((((217706LL * _4133_exp10) >> 16LL) + 64LL) + 1023LL) - static_cast<jule::U64>(_579_clz);
	jule::U64 _6314_x_hi;
	jule::U64 _6324_x_lo;
	std::tie(_6314_x_hi,_6324_x_lo) = _110621fc0_mul64(_4123_man,_117e95220_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_4133_exp10 - -348LL)][1LL]);
	if (((_6314_x_hi & 511LL) == 511LL) && ((_6324_x_lo + _4123_man) < _4123_man)) {
		jule::U64 _6714_y_hi;
		jule::U64 _6720_y_lo;
		std::tie(_6714_y_hi,_6720_y_lo) = _110621fc0_mul64(_4123_man,_117e95220_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_4133_exp10 - -348LL)][0LL]);
		jule::U64 _6818_merged_hi = _6314_x_hi;
		jule::U64 _6829_merged_lo = _6324_x_lo + _6714_y_hi;
		std::tie(_6818_merged_hi,_6829_merged_lo) = std::make_tuple(_6314_x_hi,_6324_x_lo + _6714_y_hi);
		if (_6829_merged_lo < _6324_x_lo) {
			(_6818_merged_hi)++;
		}
		if ((((_6818_merged_hi & 511LL) == 511LL) && ((_6829_merged_lo + 1LL) == 0LL)) && ((_6720_y_lo + _4123_man) < _4123_man)) {
			_4158_f = 0LL;
			_4166_ok = false;
			return std::make_tuple(_4158_f,_4166_ok);
		}
		std::tie(_6314_x_hi,_6324_x_lo) = std::make_tuple(_6818_merged_hi,_6829_merged_lo);
	}
	jule::U64 _799_msb = _6314_x_hi >> 63LL;
	jule::U64 _8013_ret_mantissa = _6314_x_hi >> (_799_msb + 9LL);
	_6013_ret_exp2-=static_cast<jule::U64>(1LL ^ _799_msb);
	if (((_6324_x_lo == 0LL) && ((_6314_x_hi & 511LL) == 0LL)) && ((_8013_ret_mantissa & 3LL) == 1LL)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	_8013_ret_mantissa+=static_cast<jule::U64>(_8013_ret_mantissa & 1LL);
	_8013_ret_mantissa>>=1LL;
	if ((_8013_ret_mantissa >> 53LL) > 0LL) {
		_8013_ret_mantissa>>=1LL;
		_6013_ret_exp2+=1LL;
	}
	if ((_6013_ret_exp2 - 1LL) >= 2046LL) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::U64 _10313_ret_bits = (_6013_ret_exp2 << 52LL) | (_8013_ret_mantissa & 4503599627370495LL);
	if (_4145_neg) {
		_10313_ret_bits|=9223372036854775808LLU;
	}
	_4158_f = static_cast<jule::F64>(_1100c9ac0_f64_from_bits(_10313_ret_bits));
	_4166_ok = true;
	return std::make_tuple(_4158_f,_4166_ok);
}



inline std::tuple<jule::F32,jule::Bool> _117e95220_eisel_lemire32(jule::U64 _11023_man,jule::Int _11033_exp10,jule::Bool _11045_neg) {
	jule::Bool _11066_ok = jule::Bool();
	jule::F32 _11058_f = jule::F32();
	if (_11023_man == 0LL) {
		if (_11045_neg) {
			_11058_f=static_cast<jule::F32>(_1100c9ac0_f32_from_bits(2147483648LLU));
		}
		_11058_f = _11058_f;
		_11066_ok = true;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	if ((_11033_exp10 < -348LL) || (347LL < _11033_exp10)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::Int _1329_clz = _110621fc0_leading_zeros64(_11023_man);
	_11023_man<<=static_cast<jule::Uint>(_1329_clz);
	
	jule::U64 _13513_ret_exp2 = static_cast<jule::U64>((((217706LL * _11033_exp10) >> 16LL) + 64LL) + 127LL) - static_cast<jule::U64>(_1329_clz);
	jule::U64 _13814_x_hi;
	jule::U64 _13824_x_lo;
	std::tie(_13814_x_hi,_13824_x_lo) = _110621fc0_mul64(_11023_man,_117e95220_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_11033_exp10 - -348LL)][1LL]);
	if (((_13814_x_hi & 274877906943LL) == 274877906943LL) && ((_13824_x_lo + _11023_man) < _11023_man)) {
		jule::U64 _14214_y_hi;
		jule::U64 _14220_y_lo;
		std::tie(_14214_y_hi,_14220_y_lo) = _110621fc0_mul64(_11023_man,_117e95220_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_11033_exp10 - -348LL)][0LL]);
		jule::U64 _14318_merged_hi = _13814_x_hi;
		jule::U64 _14329_merged_lo = _13824_x_lo + _14214_y_hi;
		std::tie(_14318_merged_hi,_14329_merged_lo) = std::make_tuple(_13814_x_hi,_13824_x_lo + _14214_y_hi);
		if (_14329_merged_lo < _13824_x_lo) {
			(_14318_merged_hi)++;
		}
		if ((((_14318_merged_hi & 274877906943LL) == 274877906943LL) && ((_14329_merged_lo + 1LL) == 0LL)) && ((_14220_y_lo + _11023_man) < _11023_man)) {
			_11058_f = 0LL;
			_11066_ok = false;
			return std::make_tuple(_11058_f,_11066_ok);
		}
		std::tie(_13814_x_hi,_13824_x_lo) = std::make_tuple(_14318_merged_hi,_14329_merged_lo);
	}
	jule::U64 _1549_msb = _13814_x_hi >> 63LL;
	jule::U64 _15513_ret_mantissa = _13814_x_hi >> (_1549_msb + 38LL);
	_13513_ret_exp2-=static_cast<jule::U64>(1LL ^ _1549_msb);
	if (((_13824_x_lo == 0LL) && ((_13814_x_hi & 274877906943LL) == 0LL)) && ((_15513_ret_mantissa & 3LL) == 1LL)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	_15513_ret_mantissa+=static_cast<jule::U64>(_15513_ret_mantissa & 1LL);
	_15513_ret_mantissa>>=1LL;
	if ((_15513_ret_mantissa >> 24LL) > 0LL) {
		_15513_ret_mantissa>>=1LL;
		_13513_ret_exp2+=1LL;
	}
	if ((_13513_ret_exp2 - 1LL) >= 254LL) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::U64 _17813_ret_bits = (_13513_ret_exp2 << 23LL) | (_15513_ret_mantissa & 8388607LL);
	if (_11045_neg) {
		_17813_ret_bits|=2147483648LL;
	}
	_11058_f = static_cast<jule::F32>(_1100c9ac0_f32_from_bits(static_cast<jule::U32>(_17813_ret_bits)));
	_11066_ok = true;
	return std::make_tuple(_11058_f,_11066_ok);
}



inline jule::Int _107ec5260_common_prefix_len_ignore_case(jule::Str _4534_s,jule::Str _4542_prefix) {
	jule::I64 _4613_n = _4542_prefix.len();
	if (_4613_n > _4534_s.len()) {
		_4613_n=static_cast<jule::I64>(_4534_s.len());
	}
	jule::Int _5013_i = 0LL;
	_iter_begin_4596943344:;
	if (!(_5013_i < _4613_n)) { goto _iter_end_4596943344; }
	{
		jule::U8 _5217_c = _4534_s[static_cast<jule::Int>(_5013_i)];
		if (('A' <= _5217_c) && (_5217_c <= 'Z')) {
			_5217_c+=32LL;
		}
		if (_5217_c != _4542_prefix[static_cast<jule::Int>(_5013_i)]) {
			return _5013_i;
		}
	}
	_iter_next_4596943344:;
	(_5013_i)++;
	goto _iter_begin_4596943344;
	_iter_end_4596943344:;
	return _4613_n;
}



inline std::tuple<jule::F64,jule::Int,jule::Bool> _107ec5260_special(jule::Str _6816_s) {
	jule::Bool _6842_ok = jule::Bool();
	jule::Int _6834_n = jule::Int();
	jule::F64 _6826_f = jule::F64();
	if (_6816_s == jule::Str("", 0)) {
		_6826_f = 0LL;
		_6834_n = 0LL;
		_6842_ok = false;
		return std::make_tuple(_6826_f,_6834_n,_6842_ok);
	}
	jule::Int _7213_sign = 1LL;
	jule::Int _7313_nsign = 0LL;
	{
		auto _match_expr{ _6816_s[0LL] };
		if (!(('+') == _match_expr || ('-') == _match_expr)) { goto _case_end_4596955424; }
		_case_begin_4596955424:;
		{
			if (_6816_s[0LL] == '-') {
				_7213_sign=-1LL;
			}
			_7313_nsign=1LL;
			_6816_s=_6816_s.slice(1LL);
			goto _case_begin_4596956080;
		}
		goto _match_end_4596954320;
		_case_end_4596955424:;
		if (!(('i') == _match_expr || ('I') == _match_expr)) { goto _case_end_4596956080; }
		_case_begin_4596956080:;
		{
			jule::Int _8317_case_n = _107ec5260_common_prefix_len_ignore_case(_6816_s,jule::Str("infinity", 8));
			if ((3LL < _8317_case_n) && (_8317_case_n < 8LL)) {
				_8317_case_n=3LL;
			}
			if ((_8317_case_n == 3LL) || (_8317_case_n == 8LL)) {
				_6826_f = static_cast<jule::F64>(_110193400_inf(_7213_sign));
				_6834_n = static_cast<jule::Int>(_7313_nsign + _6834_n);
				_6842_ok = true;
				return std::make_tuple(_6826_f,_6834_n,_6842_ok);
			}
		}
		goto _match_end_4596954320;
		_case_end_4596956080:;
		if (!(('n') == _match_expr || ('N') == _match_expr)) { goto _case_end_4596956192; }
		_case_begin_4596956192:;
		{
			if (_107ec5260_common_prefix_len_ignore_case(_6816_s,jule::Str("nan", 3)) == 3LL) {
				_6826_f = static_cast<jule::F64>(_110193400_nan());
				_6834_n = 3LL;
				_6842_ok = true;
				return std::make_tuple(_6826_f,_6834_n,_6842_ok);
			}
		}
		goto _match_end_4596954320;
		_case_end_4596956192:;
		_match_end_4596954320:;
	}
	_6826_f = 0LL;
	_6834_n = 0LL;
	_6842_ok = false;
	return std::make_tuple(_6826_f,_6834_n,_6842_ok);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _107ec5260_read_float(jule::Str _10315_s) {
	jule::Bool _10457_ok = jule::Bool();
	jule::Int _10449_i = jule::Int();
	jule::Bool _10438_hex = jule::Bool();
	jule::Bool _10425_trunc = jule::Bool();
	jule::Bool _10350_neg = jule::Bool();
	jule::Int _10340_exp = jule::Int();
	jule::U64 _10325_mantissa = jule::U64();
	if (_10449_i >= _10315_s.len()) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	{
		if (!((_10315_s[static_cast<jule::Int>(_10449_i)] == '+'))) { goto _case_end_4596989424; }
		_case_begin_4596989424:;
		{
			(_10449_i)++;
		}
		goto _match_end_4596989792;
		_case_end_4596989424:;
		if (!((_10315_s[static_cast<jule::Int>(_10449_i)] == '-'))) { goto _case_end_4596989536; }
		_case_begin_4596989536:;
		{
			_10350_neg=true;
			(_10449_i)++;
		}
		goto _match_end_4596989792;
		_case_end_4596989536:;
		_match_end_4596989792:;
	}
	jule::U64 _11813_base = 10LLU;
	jule::Int _11913_max_mant_digits = 19LL;
	jule::U8 _12013_exp_char = 'e';
	if ((((_10449_i + 2LL) < _10315_s.len()) && (_10315_s[static_cast<jule::Int>(_10449_i)] == '0')) && (_117e872d0_lower(_10315_s[static_cast<jule::Int>(_10449_i + 1LL)]) == 'x')) {
		_11813_base=16LL;
		_11913_max_mant_digits=16LL;
		_10449_i+=2LL;
		_12013_exp_char='p';
		_10438_hex=true;
	}
	jule::Bool _12813_sawdot = false;
	jule::Bool _12913_sawdigits = false;
	jule::Int _13013_nd = 0LL;
	jule::Int _13113_nd_mant = 0LL;
	jule::Int _13213_dp = 0LL;
	_iter_begin_4597004656:;
	if (!(_10449_i < _10315_s.len())) { goto _iter_end_4597004656; }
	{
		jule::U8 _13413_c = _10315_s[static_cast<jule::Int>(_10449_i)];
		{
			if (!((_13413_c == '.'))) { goto _case_end_4597008560; }
			_case_begin_4597008560:;
			{
				if (_12813_sawdot) {
					goto _julec_label_loop_end;
				}
				_12813_sawdot=true;
				_13213_dp=_13013_nd;
				goto _iter_next_4597004656;
			}
			goto _match_end_4597007712;
			_case_end_4597008560:;
			if (!((('0' <= _13413_c) && (_13413_c <= '9')))) { goto _case_end_4597008672; }
			_case_begin_4597008672:;
			{
				_12913_sawdigits=true;
				if ((_13413_c == '0') && (_13013_nd == 0LL)) {
					(_13213_dp)--;
					goto _iter_next_4597004656;
				}
				(_13013_nd)++;
				if (_13113_nd_mant < _11913_max_mant_digits) {
					_10325_mantissa*=_11813_base;
					_10325_mantissa+=static_cast<jule::U64>(_13413_c - '0');
					(_13113_nd_mant)++;
				} else if (_13413_c != '0') {
					_10425_trunc=true;
				}
				goto _iter_next_4597004656;
			}
			goto _match_end_4597007712;
			_case_end_4597008672:;
			if (!((((_11813_base == 16LL) && ('a' <= _117e872d0_lower(_13413_c))) && (_117e872d0_lower(_13413_c) <= 'f')))) { goto _case_end_4597008784; }
			_case_begin_4597008784:;
			{
				_12913_sawdigits=true;
				(_13013_nd)++;
				if (_13113_nd_mant < _11913_max_mant_digits) {
					_10325_mantissa*=16LL;
					_10325_mantissa+=static_cast<jule::U64>((_117e872d0_lower(_13413_c) - 'a') + 10LL);
					(_13113_nd_mant)++;
				} else {
					_10425_trunc=true;
				}
				goto _iter_next_4597004656;
			}
			goto _match_end_4597007712;
			_case_end_4597008784:;
			_match_end_4597007712:;
		}
		goto _iter_end_4597004656;
	}
	_iter_next_4597004656:;
	(_10449_i)++;
	goto _iter_begin_4597004656;
	_iter_end_4597004656:;
	_julec_label_loop_end:;
	if ((!(_12913_sawdigits))) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if ((!(_12813_sawdot))) {
		_13213_dp=_13013_nd;
	}
	if (_11813_base == 16LL) {
		_13213_dp*=4LL;
		_13113_nd_mant*=4LL;
	}
	if ((_10449_i < _10315_s.len()) && (_117e872d0_lower(_10315_s[static_cast<jule::Int>(_10449_i)]) == _12013_exp_char)) {
		(_10449_i)++;
		if (_10449_i >= _10315_s.len()) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _19517_esign = 1LL;
		if (_10315_s[static_cast<jule::Int>(_10449_i)] == '+') {
			(_10449_i)++;
		} else if (_10315_s[static_cast<jule::Int>(_10449_i)] == '-') {
			(_10449_i)++;
			_19517_esign=-1LL;
		}
		if (((_10449_i >= _10315_s.len()) || (_10315_s[static_cast<jule::Int>(_10449_i)] < '0')) || (_10315_s[static_cast<jule::Int>(_10449_i)] > '9')) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _20517_e = 0LL;
		_iter_begin_4597032560:;
		if (!((_10449_i < _10315_s.len()) && (('0' <= _10315_s[static_cast<jule::Int>(_10449_i)]) && (_10315_s[static_cast<jule::Int>(_10449_i)] <= '9')))) { goto _iter_end_4597032560; }
		{
			if (_20517_e < 10000LL) {
				_20517_e=static_cast<jule::Int>(((_20517_e * 10LL) + static_cast<jule::Int>(_10315_s[static_cast<jule::Int>(_10449_i)])) - '0');
			}
		}
		_iter_next_4597032560:;
		(_10449_i)++;
		goto _iter_begin_4597032560;
		_iter_end_4597032560:;
		_13213_dp+=static_cast<jule::Int>(_20517_e * _19517_esign);
	} else if (_11813_base == 16LL) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if (_10325_mantissa != 0LL) {
		_10340_exp=static_cast<jule::Int>(_13213_dp - _13113_nd_mant);
	}
	_10457_ok=true;
	return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
}



inline std::tuple<jule::F64,jule::Bool> _107ec5260_atof64_exact(jule::U64 _43317_mantissa,jule::Int _43336_exp,jule::Bool _43346_neg) {
	jule::Bool _43367_ok = jule::Bool();
	jule::F64 _43359_f = jule::F64();
	if ((_43317_mantissa >> _117e12d10_F64_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_43359_f,_43367_ok);
	}
	_43359_f=static_cast<jule::F64>(_43317_mantissa);
	if (_43346_neg) {
		_43359_f=static_cast<jule::F64>((-(_43359_f)));
	}
	{
		if (!((_43336_exp == 0LL))) { goto _case_end_4597047968; }
		_case_begin_4597047968:;
		{
			_43359_f = _43359_f;
			_43367_ok = true;
			return std::make_tuple(_43359_f,_43367_ok);
		}
		goto _match_end_4597047680;
		_case_end_4597047968:;
		if (!(((_43336_exp > 0LL) && (_43336_exp <= 37LL)))) { goto _case_end_4597048080; }
		_case_begin_4597048080:;
		{
			if (_43336_exp > 22LL) {
				_43359_f*=_107ec5260_F64_POW10[static_cast<jule::Int>(_43336_exp - 22LL)];
				_43336_exp=22LL;
			}
			if ((_43359_f > 1000000000000000LL) || (_43359_f < -1000000000000000LL)) {
				return std::make_tuple(_43359_f,_43367_ok);
			}
			_43359_f = static_cast<jule::F64>(_43359_f * _107ec5260_F64_POW10[static_cast<jule::Int>(_43336_exp)]);
			_43367_ok = true;
			return std::make_tuple(_43359_f,_43367_ok);
		}
		goto _match_end_4597047680;
		_case_end_4597048080:;
		if (!(((_43336_exp < 0LL) && (_43336_exp >= -22LL)))) { goto _case_end_4597048192; }
		_case_begin_4597048192:;
		{
			_43359_f = static_cast<jule::F64>(jule::div(_43359_f,_107ec5260_F64_POW10[static_cast<jule::Int>((-(_43336_exp)))]));
			_43367_ok = true;
			return std::make_tuple(_43359_f,_43367_ok);
		}
		goto _match_end_4597047680;
		_case_end_4597048192:;
		_match_end_4597047680:;
	}
	return std::make_tuple(_43359_f,_43367_ok);
}



inline std::tuple<jule::F64,jule::Bool> _107ec5260_atof64exact(jule::U64 _47216_mantissa,jule::Int _47235_exp,jule::Bool _47245_neg) {
	jule::Bool _47266_ok = jule::Bool();
	jule::F64 _47258_f = jule::F64();
	if ((_47216_mantissa >> _117e12d10_F64_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_47258_f,_47266_ok);
	}
	_47258_f=static_cast<jule::F64>(_47216_mantissa);
	if (_47245_neg) {
		_47258_f=static_cast<jule::F64>((-(_47258_f)));
	}
	{
		if (!((_47235_exp == 0LL))) { goto _case_end_4597063824; }
		_case_begin_4597063824:;
		{
			_47258_f = _47258_f;
			_47266_ok = true;
			return std::make_tuple(_47258_f,_47266_ok);
		}
		goto _match_end_4597064864;
		_case_end_4597063824:;
		if (!(((_47235_exp > 0LL) && (_47235_exp <= 37LL)))) { goto _case_end_4597063936; }
		_case_begin_4597063936:;
		{
			if (_47235_exp > 22LL) {
				_47258_f*=_107ec5260_F64_POW10[static_cast<jule::Int>(_47235_exp - 22LL)];
				_47235_exp=22LL;
			}
			if ((_47258_f > 1000000000000000LL) || (_47258_f < -1000000000000000LL)) {
				return std::make_tuple(_47258_f,_47266_ok);
			}
			_47258_f = static_cast<jule::F64>(_47258_f * _107ec5260_F64_POW10[static_cast<jule::Int>(_47235_exp)]);
			_47266_ok = true;
			return std::make_tuple(_47258_f,_47266_ok);
		}
		goto _match_end_4597064864;
		_case_end_4597063936:;
		if (!(((_47235_exp < 0LL) && (_47235_exp >= -22LL)))) { goto _case_end_4597064048; }
		_case_begin_4597064048:;
		{
			_47258_f = static_cast<jule::F64>(jule::div(_47258_f,_107ec5260_F64_POW10[static_cast<jule::Int>((-(_47235_exp)))]));
			_47266_ok = true;
			return std::make_tuple(_47258_f,_47266_ok);
		}
		goto _match_end_4597064864;
		_case_end_4597064048:;
		_match_end_4597064864:;
	}
	return std::make_tuple(_47258_f,_47266_ok);
}



inline std::tuple<jule::F32,jule::Bool> _107ec5260_atof32exact(jule::U64 _50616_mantissa,jule::Int _50635_exp,jule::Bool _50649_neg) {
	jule::Bool _50670_ok = jule::Bool();
	jule::F32 _50662_f = jule::F32();
	if ((_50616_mantissa >> _117e12d10_F32_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_50662_f,_50670_ok);
	}
	_50662_f=static_cast<jule::F32>(_50616_mantissa);
	if (_50649_neg) {
		_50662_f=static_cast<jule::F32>((-(_50662_f)));
	}
	{
		if (!((_50635_exp == 0LL))) { goto _case_end_4597080064; }
		_case_begin_4597080064:;
		{
			_50662_f = _50662_f;
			_50670_ok = true;
			return std::make_tuple(_50662_f,_50670_ok);
		}
		goto _match_end_4597079776;
		_case_end_4597080064:;
		if (!(((_50635_exp > 0LL) && (_50635_exp <= 17LL)))) { goto _case_end_4597080176; }
		_case_begin_4597080176:;
		{
			if (_50635_exp > 10LL) {
				_50662_f*=_107ec5260_F32_POW10[static_cast<jule::Int>(_50635_exp - 10LL)];
				_50635_exp=10LL;
			}
			if ((_50662_f > 10000000LL) || (_50662_f < -10000000LL)) {
				return std::make_tuple(_50662_f,_50670_ok);
			}
			_50662_f = static_cast<jule::F32>(_50662_f * _107ec5260_F32_POW10[static_cast<jule::Int>(_50635_exp)]);
			_50670_ok = true;
			return std::make_tuple(_50662_f,_50670_ok);
		}
		goto _match_end_4597079776;
		_case_end_4597080176:;
		if (!(((_50635_exp < 0LL) && (_50635_exp >= -10LL)))) { goto _case_end_4597080288; }
		_case_begin_4597080288:;
		{
			_50662_f = static_cast<jule::F32>(jule::div(_50662_f,_107ec5260_F32_POW10[static_cast<jule::Int>((-(_50635_exp)))]));
			_50670_ok = true;
			return std::make_tuple(_50662_f,_50670_ok);
		}
		goto _match_end_4597079776;
		_case_end_4597080288:;
		_match_end_4597079776:;
	}
	return std::make_tuple(_50662_f,_50670_ok);
}



inline std::tuple<jule::F64,jule::Int> _107ec5260_atof_hex(jule::Str _54213_s,_117e12d10_FloatInfo& _54222_flt,jule::U64 _54242_mantissa,jule::Int _54261_exp,jule::Bool _54271_neg,jule::Bool _54282_trunc) {
	jule::Int _5439_max_exp = ((1LL << _54222_flt._field_expbits) + _54222_flt._field_bias) - 2LL;
	jule::Int _5449_min_exp = _54222_flt._field_bias + 1LL;
	_54261_exp+=static_cast<jule::Int>(_54222_flt._field_mantbits);
	_iter_begin_4597097920:;
	if (!((_54242_mantissa != 0LL) && ((_54242_mantissa >> (_54222_flt._field_mantbits + 2LL)) == 0LL))) { goto _iter_end_4597097920; }
	{
		_54242_mantissa<<=1LL;
		(_54261_exp)--;
	}
	_iter_next_4597097920:;
	goto _iter_begin_4597097920;
	_iter_end_4597097920:;
	if (_54282_trunc) {
		_54242_mantissa|=1LL;
	}
	_iter_begin_4597099472:;
	if (!((_54242_mantissa >> ((1LL + _54222_flt._field_mantbits) + 2LL)) != 0LL)) { goto _iter_end_4597099472; }
	{
		_54242_mantissa=static_cast<jule::U64>((_54242_mantissa >> 1LL) | (_54242_mantissa & 1LL));
		(_54261_exp)++;
	}
	_iter_next_4597099472:;
	goto _iter_begin_4597099472;
	_iter_end_4597099472:;
	_iter_begin_4597101872:;
	if (!((_54242_mantissa > 1LL) && (_54261_exp < (_5449_min_exp - 2LL)))) { goto _iter_end_4597101872; }
	{
		_54242_mantissa=static_cast<jule::U64>((_54242_mantissa >> 1LL) | (_54242_mantissa & 1LL));
		(_54261_exp)++;
	}
	_iter_next_4597101872:;
	goto _iter_begin_4597101872;
	_iter_end_4597101872:;
	jule::U64 _57413_round = _54242_mantissa & 3LL;
	_54242_mantissa>>=2LL;
	_57413_round|=static_cast<jule::U64>(_54242_mantissa & 1LL);
	_54261_exp+=2LL;
	if (_57413_round == 3LL) {
		(_54242_mantissa)++;
		if (_54242_mantissa == (1LL << (1LL + _54222_flt._field_mantbits))) {
			_54242_mantissa>>=1LL;
			(_54261_exp)++;
		}
	}
	if ((_54242_mantissa >> _54222_flt._field_mantbits) == 0LL) {
		_54261_exp=_54222_flt._field_bias;
	}
	jule::Int _58913_err = 0LLU;
	if (_54261_exp > _5439_max_exp) {
		_54242_mantissa=static_cast<jule::U64>(1LL << _54222_flt._field_mantbits);
		_54261_exp=static_cast<jule::Int>(_5439_max_exp + 1LL);
		_58913_err=1LLU;
	}
	jule::U64 _59613_bits = _54242_mantissa & ((1LL << _54222_flt._field_mantbits) - 1LL);
	_59613_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_54261_exp - _54222_flt._field_bias) & ((1LL << _54222_flt._field_expbits) - 1LL)) << _54222_flt._field_mantbits);
	if (_54271_neg) {
		_59613_bits|=static_cast<jule::Int>((1LL << _54222_flt._field_mantbits) << _54222_flt._field_expbits);
	}
	if (_54222_flt == _117e12d10_F32_INFO) {
		return std::make_tuple(static_cast<jule::F64>(_1100c9ac0_f32_from_bits(static_cast<jule::U32>(_59613_bits))),_58913_err);
	}
	return std::make_tuple(static_cast<jule::F64>(_1100c9ac0_f64_from_bits(_59613_bits)),_58913_err);
}



inline std::tuple<jule::F32,jule::Int,jule::Int> _107ec5260_atof32(jule::Str _60711_s) {
	jule::Int _60745_err = 0LLU;
	jule::Int _60733_n = jule::Int();
	jule::F32 _60721_f = jule::F32();
	{
		jule::F64 _60914_val;
		jule::Int _60919__n;
		jule::Bool _60923_ok;
		std::tie(_60914_val,_60919__n,_60923_ok) = _107ec5260_special(_60711_s);
		if (_60923_ok) {
			_60721_f = static_cast<jule::F32>(_60914_val);
			_60733_n = _60919__n;
			_60745_err = 0LLU;
			return std::make_tuple(_60721_f,_60733_n,_60745_err);
		}
	}
	jule::U64 _61510_mantissa;
	jule::Int _61520_exp;
	jule::Bool _61525_neg;
	jule::Bool _61530_trunc;
	jule::Bool _61537_hex;
	jule::Int _61542__n;
	jule::Bool _61550_ok;
	std::tie(_61510_mantissa,_61520_exp,_61525_neg,_61530_trunc,_61537_hex,_61542__n,_61550_ok) = _107ec5260_read_float(_60711_s);
	_60733_n=_61542__n;
	if ((!(_61550_ok))) {
		_60721_f = 0LL;
		_60733_n = _60733_n;
		_60745_err = 2LLU;
		return std::make_tuple(_60721_f,_60733_n,_60745_err);
	}
	if (_61537_hex) {
		jule::F64 _62217_ff = 0LL;
		std::tie(_62217_ff,_60745_err) = _107ec5260_atof_hex(_60711_s.slice(0LL,static_cast<jule::Int>(_60733_n)),_117e12d10_F32_INFO,_61510_mantissa,_61520_exp,_61525_neg,_61530_trunc);
		_60721_f = static_cast<jule::F32>(_62217_ff);
		_60733_n = _60733_n;
		_60745_err = _60745_err;
		return std::make_tuple(_60721_f,_60733_n,_60745_err);
	}
	if (true) {
		if ((!(_61530_trunc))) {
			std::tie(_60721_f,_61550_ok) = _107ec5260_atof32exact(_61510_mantissa,_61520_exp,_61525_neg);
			if (_61550_ok) {
				_60721_f = _60721_f;
				_60733_n = _60733_n;
				_60745_err = 0LLU;
				return std::make_tuple(_60721_f,_60733_n,_60745_err);
			}
		}
		std::tie(_60721_f,_61550_ok) = _117e95220_eisel_lemire32(_61510_mantissa,_61520_exp,_61525_neg);
		if (_61550_ok) {
			if ((!(_61530_trunc))) {
				_60721_f = _60721_f;
				_60733_n = _60733_n;
				_60745_err = 0LLU;
				return std::make_tuple(_60721_f,_60733_n,_60745_err);
			}
			jule::F32 _64421_f_up = 0LL;
			std::tie(_64421_f_up,_61550_ok) = _117e95220_eisel_lemire32(static_cast<jule::U64>(_61510_mantissa + 1LL),_61520_exp,_61525_neg);
			if (_61550_ok && (_60721_f == _64421_f_up)) {
				_60721_f = _60721_f;
				_60733_n = _60733_n;
				_60745_err = 0LLU;
				return std::make_tuple(_60721_f,_60733_n,_60745_err);
			}
		}
	}
	_110057cd0_Decimal _65313_d = _110057cd0_Decimal();
	if ((!(_65313_d._method_set(_60711_s.slice(0LL,static_cast<jule::Int>(_60733_n)))))) {
		_60721_f = 0LL;
		_60733_n = _60733_n;
		_60745_err = 2LLU;
		return std::make_tuple(_60721_f,_60733_n,_60745_err);
	}
	jule::U64 _65710_b;
	jule::Bool _65713_ovf;
	std::tie(_65710_b,_65713_ovf) = _65313_d._method_float_bits(_117e12d10_F32_INFO);
	_60721_f=static_cast<jule::F32>(_1100c9ac0_f32_from_bits(static_cast<jule::U32>(_65710_b)));
	if (_65713_ovf) {
		_60745_err=1LLU;
	}
	_60721_f = _60721_f;
	_60733_n = _60733_n;
	_60745_err = _60745_err;
	return std::make_tuple(_60721_f,_60733_n,_60745_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _107ec5260_atof64(jule::Str _66511_s) {
	jule::Int _66545_err = 0LLU;
	jule::Int _66537_n = jule::Int();
	jule::F64 _66525_f = jule::F64();
	{
		jule::F64 _66714_val;
		jule::Int _66719__n;
		jule::Bool _66723_ok;
		std::tie(_66714_val,_66719__n,_66723_ok) = _107ec5260_special(_66511_s);
		if (_66723_ok) {
			_66525_f = _66714_val;
			_66537_n = _66719__n;
			_66545_err = 0LLU;
			return std::make_tuple(_66525_f,_66537_n,_66545_err);
		}
	}
	jule::U64 _67310_mantissa;
	jule::Int _67320_exp;
	jule::Bool _67325_neg;
	jule::Bool _67330_trunc;
	jule::Bool _67337_hex;
	jule::Int _67342__n;
	jule::Bool _67350_ok;
	std::tie(_67310_mantissa,_67320_exp,_67325_neg,_67330_trunc,_67337_hex,_67342__n,_67350_ok) = _107ec5260_read_float(_66511_s);
	_66537_n=_67342__n;
	if ((!(_67350_ok))) {
		_66525_f = 0LL;
		_66537_n = _66537_n;
		_66545_err = 2LLU;
		return std::make_tuple(_66525_f,_66537_n,_66545_err);
	}
	if (_67337_hex) {
		std::tie(_66525_f,_66545_err) = _107ec5260_atof_hex(_66511_s.slice(0LL,static_cast<jule::Int>(_66537_n)),_117e12d10_F64_INFO,_67310_mantissa,_67320_exp,_67325_neg,_67330_trunc);
		_66525_f = _66525_f;
		_66537_n = _66537_n;
		_66545_err = _66545_err;
		return std::make_tuple(_66525_f,_66537_n,_66545_err);
	}
	if (true) {
		if ((!(_67330_trunc))) {
			std::tie(_66525_f,_67350_ok) = _107ec5260_atof64exact(_67310_mantissa,_67320_exp,_67325_neg);
			if (_67350_ok) {
				_66525_f = _66525_f;
				_66537_n = _66537_n;
				_66545_err = 0LLU;
				return std::make_tuple(_66525_f,_66537_n,_66545_err);
			}
		}
		std::tie(_66525_f,_67350_ok) = _117e95220_eisel_lemire64(_67310_mantissa,_67320_exp,_67325_neg);
		if (_67350_ok) {
			if ((!(_67330_trunc))) {
				_66525_f = _66525_f;
				_66537_n = _66537_n;
				_66545_err = 0LLU;
				return std::make_tuple(_66525_f,_66537_n,_66545_err);
			}
			jule::F64 _70121_f_up = 0LL;
			std::tie(_70121_f_up,_67350_ok) = _117e95220_eisel_lemire64(static_cast<jule::U64>(_67310_mantissa + 1LL),_67320_exp,_67325_neg);
			if (_67350_ok && (_66525_f == _70121_f_up)) {
				_66525_f = _66525_f;
				_66537_n = _66537_n;
				_66545_err = 0LLU;
				return std::make_tuple(_66525_f,_66537_n,_66545_err);
			}
		}
	}
	_110057cd0_Decimal _71013_d = _110057cd0_Decimal();
	if ((!(_71013_d._method_set(_66511_s.slice(0LL,static_cast<jule::Int>(_66537_n)))))) {
		_66525_f = 0LL;
		_66537_n = _66537_n;
		_66545_err = 2LLU;
		return std::make_tuple(_66525_f,_66537_n,_66545_err);
	}
	jule::U64 _71410_b;
	jule::Bool _71413_ovf;
	std::tie(_71410_b,_71413_ovf) = _71013_d._method_float_bits(_117e12d10_F64_INFO);
	_66525_f=static_cast<jule::F64>(_1100c9ac0_f64_from_bits(_71410_b));
	if (_71413_ovf) {
		_66545_err=1LLU;
	}
	_66525_f = _66525_f;
	_66537_n = _66537_n;
	_66545_err = _66545_err;
	return std::make_tuple(_66525_f,_66537_n,_66545_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _107ec5260_parse_float_prefix(jule::Str _72223_s,jule::Int _72231_bit_size) {
	if (_72231_bit_size == 32LL) {
		jule::F32 _72414_f;
		jule::Int _72417_n;
		jule::Int _72420_err;
		std::tie(_72414_f,_72417_n,_72420_err) = _107ec5260_atof32(_72223_s);
		return std::make_tuple(static_cast<jule::F64>(_72414_f),_72417_n,_72420_err);
	}
	jule::F64 _72810_f;
	jule::Int _72813_n;
	jule::Int _72816_err;
	std::tie(_72810_f,_72813_n,_72816_err) = _107ec5260_atof64(_72223_s);
	return std::make_tuple(_72810_f,_72813_n,_72816_err);
}



inline std::tuple<jule::F64,jule::Int> _107ec5260_parse_float(jule::Str _75620_s,jule::Int _75628_bit_size) {
	jule::F64 _75710_f;
	jule::Int _75713_n;
	jule::Int _75716_err;
	std::tie(_75710_f,_75713_n,_75716_err) = _107ec5260_parse_float_prefix(_75620_s,_75628_bit_size);
	if ((_75713_n != _75620_s.len()) && ((_75716_err == 0LLU) || (_75716_err != 2LLU))) {
		return std::make_tuple(0LL,2LLU);
	}
	return std::make_tuple(_75710_f,_75716_err);
}



inline void _107ea21d0_ryu_ftoa_fixed32(_117e12d10_DecimalSlice& _4926_d,jule::U32 _4947_mant,jule::Int _4958_exp,jule::Int _4968_prec) {
	if (_4968_prec < 0LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with negative prec", 42));
	}
	if (_4968_prec > 9LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with prec > 9", 37));
	}
	if (_4947_mant == 0LL) {
		std::tie(_4926_d._field_nd,_4926_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _6213_e2 = _4958_exp;
	jule::Int _639_b = _110621fc0_len32(_4947_mant);
	if (_639_b < 25LL) {
		_4947_mant<<=static_cast<jule::Uint>(25LL - _639_b);
		_6213_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_639_b) - 25LL);
	}
	jule::Int _749_q = ((-(_107ea21d0_mul_by_log2_log10(static_cast<jule::Int>(_6213_e2 + 24LL)))) + _4968_prec) - 1LL;
	jule::Bool _7913_exact = (_749_q <= 27LL) && (_749_q >= 0LL);
	jule::U32 _8114_di;
	jule::Int _8118_dexp2;
	jule::Bool _8129_d0;
	std::tie(_8114_di,_8118_dexp2,_8129_d0) = _107ea21d0_mult64bit_pow10(_4947_mant,_6213_e2,_749_q);
	if (_8118_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult64bit_pow10", 49));
	}
	if (((_749_q < 0LL) && (_749_q >= -10LL)) && _107ea21d0_divisible_by_pow5(static_cast<jule::U64>(_4947_mant),static_cast<jule::Int>((-(_749_q))))) {
		_7913_exact=true;
		_8129_d0=true;
	}
	jule::Uint _949_extra = static_cast<jule::Uint>((-(_8118_dexp2)));
	jule::U32 _959_extra_mask = static_cast<jule::U32>((1LL << _949_extra) - 1LL);
	jule::U32 _9713_dfrac = 0LLU;
	std::tie(_8114_di,_9713_dfrac) = std::make_tuple(static_cast<jule::U32>(_8114_di >> _949_extra),static_cast<jule::U32>(_8114_di & _959_extra_mask));
	jule::Bool _9913_round_up = false;
	if (_7913_exact) {
		_9913_round_up=((_9713_dfrac > (1LL << (_949_extra - 1LL))) || ((_9713_dfrac == (1LL << (_949_extra - 1LL))) && (!(_8129_d0)))) || (((_9713_dfrac == (1LL << (_949_extra - 1LL))) && _8129_d0) && ((_8114_di & 1LL) == 1LL));
	} else {
		_9913_round_up=(_9713_dfrac >> (_949_extra - 1LL)) == 1LL;
	}
	if (_9713_dfrac != 0LL) {
		_8129_d0=false;
	}
	_107ea21d0_format_decimal(_4926_d,static_cast<jule::U64>(_8114_di),(!(_8129_d0)),_9913_round_up,_4968_prec);
	_4926_d._field_dp-=_749_q;
}



inline void _107ea21d0_ryu_ftoa_fixed64(_117e12d10_DecimalSlice& _12326_d,jule::U64 _12347_mant,jule::Int _12358_exp,jule::Int _12368_prec) {
	if (_12368_prec > 18LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed64 called with prec > 18", 38));
	}
	if (_12347_mant == 0LL) {
		std::tie(_12326_d._field_nd,_12326_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _13313_e2 = _12358_exp;
	jule::Int _1349_b = _110621fc0_len64(_12347_mant);
	if (_1349_b < 55LL) {
		_12347_mant=static_cast<jule::U64>(_12347_mant << static_cast<jule::Uint>(55LL - _1349_b));
		_13313_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_1349_b) - 55LL);
	}
	jule::Int _1489_q = ((-(_107ea21d0_mul_by_log2_log10(static_cast<jule::Int>(_13313_e2 + 54LL)))) + _12368_prec) - 1LL;
	jule::Bool _15313_exact = (_1489_q <= 55LL) && (_1489_q >= 0LL);
	jule::U64 _15514_di;
	jule::Int _15518_dexp2;
	jule::Bool _15529_d0;
	std::tie(_15514_di,_15518_dexp2,_15529_d0) = _107ea21d0_mult128bit_pow10(_12347_mant,_13313_e2,_1489_q);
	if (_15518_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50));
	}
	if (((_1489_q < 0LL) && (_1489_q >= -22LL)) && _107ea21d0_divisible_by_pow5(_12347_mant,static_cast<jule::Int>((-(_1489_q))))) {
		_15313_exact=true;
		_15529_d0=true;
	}
	jule::Uint _1689_extra = static_cast<jule::Uint>((-(_15518_dexp2)));
	jule::U64 _1699_extra_mask = static_cast<jule::U64>((1LL << _1689_extra) - 1LL);
	jule::U64 _17113_dfrac = 0LLU;
	std::tie(_15514_di,_17113_dfrac) = std::make_tuple(static_cast<jule::U64>(_15514_di >> _1689_extra),static_cast<jule::U64>(_15514_di & _1699_extra_mask));
	jule::Bool _17313_round_up = false;
	if (_15313_exact) {
		_17313_round_up=((_17113_dfrac > (1LL << (_1689_extra - 1LL))) || ((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && (!(_15529_d0)))) || (((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && _15529_d0) && ((_15514_di & 1LL) == 1LL));
	} else {
		_17313_round_up=(_17113_dfrac >> (_1689_extra - 1LL)) == 1LL;
	}
	if (_17113_dfrac != 0LL) {
		_15529_d0=false;
	}
	_107ea21d0_format_decimal(_12326_d,_15514_di,(!(_15529_d0)),_17313_round_up,_12368_prec);
	_12326_d._field_dp-=_1489_q;
}



inline void _107ea21d0_format_decimal(_117e12d10_DecimalSlice& _20424_d,jule::U64 _20445_m,jule::Bool _20457_trunc,jule::Bool _20474_round_up,jule::Int _20490_prec) {
	jule::U64 _2059_max = _107ea21d0_U64_POW10[static_cast<jule::Int>(_20490_prec)];
	jule::Int _20613_trimmed = 0LL;
	_iter_begin_4597282384:;
	if (!(_20445_m >= _2059_max)) { goto _iter_end_4597282384; }
	{
		jule::U64 _20814_a = jule::div(_20445_m,10LL);
		jule::U64 _20817_b = jule::mod(_20445_m,10LL);
		std::tie(_20814_a,_20817_b) = std::make_tuple(jule::div(_20445_m,10LL),jule::mod(_20445_m,10LL));
		_20445_m=_20814_a;
		(_20613_trimmed)++;
		if (_20817_b > 5LL) {
			_20474_round_up=true;
		} else if (_20817_b < 5LL) {
			_20474_round_up=false;
		} else {
			_20474_round_up=_20457_trunc || ((_20445_m & 1LL) == 1LL);
		}
		if (_20817_b != 0LL) {
			_20457_trunc=true;
		}
	}
	_iter_next_4597282384:;
	goto _iter_begin_4597282384;
	_iter_end_4597282384:;
	if (_20474_round_up) {
		(_20445_m)++;
	}
	if (_20445_m >= _2059_max) {
		_20445_m/=10LL;
		(_20613_trimmed)++;
	}
	jule::Uint _23313_n = static_cast<jule::Uint>(_20490_prec);
	_20424_d._field_nd=static_cast<jule::Int>(_20490_prec);
	jule::U64 _23513_v = _20445_m;
	_iter_begin_4597291760:;
	if (!(_23513_v >= 100LL)) { goto _iter_end_4597291760; }
	{
		jule::U64 _23717_v1 = 0LLU;
		jule::U64 _23817_v2 = 0LLU;
		if ((_23513_v >> 32LL) == 0LL) {
			std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(jule::div(static_cast<jule::U32>(_23513_v),100LL)),static_cast<jule::U64>(jule::mod(static_cast<jule::U32>(_23513_v),100LL)));
		} else {
			std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(jule::div(_23513_v,100LL)),static_cast<jule::U64>(jule::mod(_23513_v,100LL)));
		}
		_23313_n-=2LL;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 1LL)]);
		_20424_d._field_d[static_cast<jule::Int>(_23313_n + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 0LL)]);
		_23513_v=_23717_v1;
	}
	_iter_next_4597291760:;
	goto _iter_begin_4597291760;
	_iter_end_4597291760:;
	if (_23513_v > 0LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23513_v) + 1LL)]);
	}
	if (_23513_v >= 10LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(2LL * _23513_v)]);
	}
	_iter_begin_4597307584:;
	if (!(_20424_d._field_d[static_cast<jule::Int>(_20424_d._field_nd - 1LL)] == '0')) { goto _iter_end_4597307584; }
	{
		(_20424_d._field_nd)--;
		(_20613_trimmed)++;
	}
	_iter_next_4597307584:;
	goto _iter_begin_4597307584;
	_iter_end_4597307584:;
	_20424_d._field_dp=static_cast<jule::Int>(_20424_d._field_nd + _20613_trimmed);
}



inline void _107ea21d0_ryu_ftoa_shortest(_117e12d10_DecimalSlice& _26527_d,jule::U64 _26548_mant,jule::Int _26559_exp,_117e12d10_FloatInfo& _26570_flt) {
	if (_26548_mant == 0LL) {
		std::tie(_26527_d._field_nd,_26527_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	if ((_26559_exp <= 0LL) && (_110621fc0_trailing_zeros64(_26548_mant) >= (-(_26559_exp)))) {
		_26548_mant>>=static_cast<jule::Uint>((-(_26559_exp)));
		_107ea21d0_ryu_digits(_26527_d,_26548_mant,_26548_mant,_26548_mant,true,false);
		return;
	}
	jule::U64 _27710_ml;
	jule::U64 _27714_mc;
	jule::U64 _27718_mu;
	jule::Int _27726_e2;
	std::tie(_27710_ml,_27714_mc,_27718_mu,_27726_e2) = _107ea21d0_compute_bounds(_26548_mant,_26559_exp,_26570_flt);
	if (_27726_e2 == 0LL) {
		_107ea21d0_ryu_digits(_26527_d,_27710_ml,_27714_mc,_27718_mu,true,false);
		return;
	}
	jule::Int _2839_q = _107ea21d0_mul_by_log2_log10(static_cast<jule::Int>((-(_27726_e2)))) + 1LL;
	jule::U64 _28713_dl = 0LLU;
	jule::U64 _28813_dc = 0LLU;
	jule::U64 _28913_du = 0LLU;
	jule::Bool _29013_dl0 = false;
	jule::Bool _29113_dc0 = false;
	jule::Bool _29213_du0 = false;
	if (_26570_flt == _117e12d10_F32_INFO) {
		jule::U32 _29417_dl32 = 0LLU;
		jule::U32 _29517_dc32 = 0LLU;
		jule::U32 _29617_du32 = 0LLU;
		std::tie(_29417_dl32,std::ignore,_29013_dl0) = _107ea21d0_mult64bit_pow10(static_cast<jule::U32>(_27710_ml),_27726_e2,_2839_q);
		std::tie(_29517_dc32,std::ignore,_29113_dc0) = _107ea21d0_mult64bit_pow10(static_cast<jule::U32>(_27714_mc),_27726_e2,_2839_q);
		std::tie(_29617_du32,_27726_e2,_29213_du0) = _107ea21d0_mult64bit_pow10(static_cast<jule::U32>(_27718_mu),_27726_e2,_2839_q);
		std::tie(_28713_dl,_28813_dc,_28913_du) = std::make_tuple(static_cast<jule::U64>(_29417_dl32),static_cast<jule::U64>(_29517_dc32),static_cast<jule::U64>(_29617_du32));
	} else {
		std::tie(_28713_dl,std::ignore,_29013_dl0) = _107ea21d0_mult128bit_pow10(_27710_ml,_27726_e2,_2839_q);
		std::tie(_28813_dc,std::ignore,_29113_dc0) = _107ea21d0_mult128bit_pow10(_27714_mc,_27726_e2,_2839_q);
		std::tie(_28913_du,_27726_e2,_29213_du0) = _107ea21d0_mult128bit_pow10(_27718_mu,_27726_e2,_2839_q);
	}
	if (_27726_e2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50));
	}
	if (_2839_q > 55LL) {
		std::tie(_29013_dl0,_29113_dc0,_29213_du0) = std::make_tuple(false,false,false);
	}
	if ((_2839_q < 0LL) && (_2839_q >= -24LL)) {
		if (_107ea21d0_divisible_by_pow5(_27710_ml,static_cast<jule::Int>((-(_2839_q))))) {
			_29013_dl0=true;
		}
		if (_107ea21d0_divisible_by_pow5(_27714_mc,static_cast<jule::Int>((-(_2839_q))))) {
			_29113_dc0=true;
		}
		if (_107ea21d0_divisible_by_pow5(_27718_mu,static_cast<jule::Int>((-(_2839_q))))) {
			_29213_du0=true;
		}
	}
	jule::Uint _3299_extra = static_cast<jule::Uint>((-(_27726_e2)));
	jule::U64 _3309_extra_mask = static_cast<jule::U64>((1LL << _3299_extra) - 1LL);
	jule::U64 _33213_fracl = 0LLU;
	std::tie(_28713_dl,_33213_fracl) = std::make_tuple(static_cast<jule::U64>(_28713_dl >> _3299_extra),static_cast<jule::U64>(_28713_dl & _3309_extra_mask));
	jule::U64 _33413_fracc = 0LLU;
	std::tie(_28813_dc,_33413_fracc) = std::make_tuple(static_cast<jule::U64>(_28813_dc >> _3299_extra),static_cast<jule::U64>(_28813_dc & _3309_extra_mask));
	jule::U64 _33613_fracu = 0LLU;
	std::tie(_28913_du,_33613_fracu) = std::make_tuple(static_cast<jule::U64>(_28913_du >> _3299_extra),static_cast<jule::U64>(_28913_du & _3309_extra_mask));
	jule::Bool _34213_uok = (!(_29213_du0)) || (_33613_fracu > 0LL);
	if (_29213_du0 && (_33613_fracu == 0LL)) {
		_34213_uok=(_26548_mant & 1LL) == 0LL;
	}
	if ((!(_34213_uok))) {
		(_28913_du)--;
	}
	jule::Bool _35113_cup = false;
	if (_29113_dc0) {
		_35113_cup=(_33413_fracc > (1LL << (_3299_extra - 1LL))) || ((_33413_fracc == (1LL << (_3299_extra - 1LL))) && ((_28813_dc & 1LL) == 1LL));
	} else {
		_35113_cup=(_33413_fracc >> (_3299_extra - 1LL)) == 1LL;
	}
	jule::Bool _3679_lok = (_29013_dl0 && (_33213_fracl == 0LL)) && ((_26548_mant & 1LL) == 0LL);
	if ((!(_3679_lok))) {
		(_28713_dl)++;
	}
	jule::Bool _3729_c0 = _29113_dc0 && (_33413_fracc == 0LL);
	_107ea21d0_ryu_digits(_26527_d,_28713_dl,_28813_dc,_28913_du,_3729_c0,_35113_cup);
	_26527_d._field_dp-=_2839_q;
}



inline jule::Int _107ea21d0_mul_by_log2_log10(jule::Int _38322_x) {
	return static_cast<jule::Int>((_38322_x * 78913LL) >> 18LL);
}



inline jule::Int _107ea21d0_mul_by_log10_log2(jule::Int _39322_x) {
	return static_cast<jule::Int>((_39322_x * 108853LL) >> 15LL);
}



inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _107ea21d0_compute_bounds(jule::U64 _40119_mant,jule::Int _40130_exp,_117e12d10_FloatInfo& _40218_flt) {
	jule::Int _40274_e2 = jule::Int();
	jule::U64 _40262_upper = jule::U64();
	jule::U64 _40248_central = jule::U64();
	jule::U64 _40236_lower = jule::U64();
	if ((_40119_mant != (1LL << _40218_flt._field_mantbits)) || (_40130_exp == ((_40218_flt._field_bias + 1LL) - static_cast<jule::Int>(_40218_flt._field_mantbits)))) {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((2LL * _40119_mant) - 1LL),static_cast<jule::U64>(2LL * _40119_mant),static_cast<jule::U64>((2LL * _40119_mant) + 1LL));
		_40274_e2=static_cast<jule::Int>(_40130_exp - 1LL);
	} else {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((4LL * _40119_mant) - 1LL),static_cast<jule::U64>(4LL * _40119_mant),static_cast<jule::U64>((4LL * _40119_mant) + 2LL));
		_40274_e2=static_cast<jule::Int>(_40130_exp - 2LL);
	}
	return std::make_tuple(_40236_lower,_40248_central,_40262_upper,_40274_e2);
}



inline void _107ea21d0_ryu_digits(_117e12d10_DecimalSlice& _41520_d,jule::U64 _41537_lower,jule::U64 _41549_central,jule::U64 _41563_upper,jule::Bool _41579_c0,jule::Bool _41593_cup) {
	jule::U32 _41614_lhi;
	jule::U32 _41619_llo;
	std::tie(_41614_lhi,_41619_llo) = _107ea21d0_divmod1e9(_41537_lower);
	jule::U32 _41710_chi;
	jule::U32 _41715_clo;
	std::tie(_41710_chi,_41715_clo) = _107ea21d0_divmod1e9(_41549_central);
	jule::U32 _41810_uhi;
	jule::U32 _41815_ulo;
	std::tie(_41810_uhi,_41815_ulo) = _107ea21d0_divmod1e9(_41563_upper);
	if (_41810_uhi == 0LL) {
		_107ea21d0_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,8LL);
	} else if (_41614_lhi < _41810_uhi) {
		if (_41619_llo != 0LL) {
			(_41614_lhi)++;
		}
		_41579_c0=_41579_c0 && (_41715_clo == 0LL);
		_41593_cup=(_41715_clo > 500000000LL) || ((_41715_clo == 500000000LL) && _41593_cup);
		_107ea21d0_ryu_digits32(_41520_d,_41614_lhi,_41710_chi,_41810_uhi,_41579_c0,_41593_cup,8LL);
		_41520_d._field_dp+=9LL;
	} else {
		_41520_d._field_nd=0LL;
		jule::Uint _43417_n = static_cast<jule::Uint>(9LLU);
		jule::U32 _43517_v = _41710_chi;
		_iter_begin_4597409792:;
		if (!(_43517_v > 0LL)) { goto _iter_end_4597409792; }
		{
			jule::U32 _43718_v1 = jule::div(_43517_v,10LL);
			jule::U32 _43722_v2 = jule::mod(_43517_v,10LL);
			std::tie(_43718_v1,_43722_v2) = std::make_tuple(jule::div(_43517_v,10LL),jule::mod(_43517_v,10LL));
			_43517_v=_43718_v1;
			(_43417_n)--;
			_41520_d._field_d[static_cast<jule::Int>(_43417_n)]=static_cast<jule::U8>(_43722_v2 + '0');
		}
		_iter_next_4597409792:;
		goto _iter_begin_4597409792;
		_iter_end_4597409792:;
		_41520_d._field_d=_41520_d._field_d.slice(static_cast<jule::Int>(_43417_n));
		_41520_d._field_nd=static_cast<jule::Int>(9LL - _43417_n);
		_107ea21d0_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,static_cast<jule::Int>(_41520_d._field_nd + 8LL));
	}
	_iter_begin_4597409136:;
	if (!((_41520_d._field_nd > 0LL) && (_41520_d._field_d[static_cast<jule::Int>(_41520_d._field_nd - 1LL)] == '0'))) { goto _iter_end_4597409136; }
	{
		(_41520_d._field_nd)--;
	}
	_iter_next_4597409136:;
	goto _iter_begin_4597409136;
	_iter_end_4597409136:;
	_iter_begin_4597407840:;
	if (!((_41520_d._field_nd > 0LL) && (_41520_d._field_d[0LL] == '0'))) { goto _iter_end_4597407840; }
	{
		(_41520_d._field_nd)--;
		(_41520_d._field_dp)--;
		_41520_d._field_d=_41520_d._field_d.slice(1LL);
	}
	_iter_next_4597407840:;
	goto _iter_begin_4597407840;
	_iter_end_4597407840:;
}



inline void _107ea21d0_ryu_digits32(_117e12d10_DecimalSlice& _46022_d,jule::U32 _46043_lower,jule::U32 _46059_central,jule::U32 _46121_upper,jule::Bool _46137_c0,jule::Bool _46151_cup,jule::Int _46166_endindex) {
	if (_46121_upper == 0LL) {
		_46022_d._field_dp=static_cast<jule::Int>(_46166_endindex + 1LL);
		return;
	}
	jule::Int _46613_trimmed = 0LL;
	jule::Int _46913_c_next_digit = 0LL;
	_iter_begin_4597429936:;
	if (!(_46121_upper > 0LL)) { goto _iter_end_4597429936; }
	{
		jule::U32 _47613_l = jule::div(_46043_lower + 9LL,10LL);
		jule::U32 _47718_c = jule::div(_46059_central,10LL);
		jule::U32 _47725_cdigit = jule::mod(_46059_central,10LL);
		std::tie(_47718_c,_47725_cdigit) = std::make_tuple(jule::div(_46059_central,10LL),jule::mod(_46059_central,10LL));
		jule::U32 _47813_u = jule::div(_46121_upper,10LL);
		if (_47613_l > _47813_u) {
			goto _iter_end_4597429936;
		}
		if ((_47613_l == (_47718_c + 1LL)) && (_47718_c < _47813_u)) {
			(_47718_c)++;
			_47725_cdigit=0LL;
			_46151_cup=false;
		}
		(_46613_trimmed)++;
		_46137_c0=_46137_c0 && (_46913_c_next_digit == 0LL);
		_46913_c_next_digit=static_cast<jule::Int>(_47725_cdigit);
		std::tie(_46043_lower,_46059_central,_46121_upper) = std::make_tuple(_47613_l,_47718_c,_47813_u);
	}
	_iter_next_4597429936:;
	goto _iter_begin_4597429936;
	_iter_end_4597429936:;
	if (_46613_trimmed > 0LL) {
		_46151_cup=((_46913_c_next_digit > 5LL) || ((_46913_c_next_digit == 5LL) && (!(_46137_c0)))) || (((_46913_c_next_digit == 5LL) && _46137_c0) && ((_46059_central & 1LL) == 1LL));
	}
	if ((_46059_central < _46121_upper) && _46151_cup) {
		(_46059_central)++;
	}
	_46166_endindex-=_46613_trimmed;
	jule::U32 _51713_v = _46059_central;
	jule::Int _51813_n = _46166_endindex;
	_iter_begin_4597430800:;
	if (!(_51813_n > _46022_d._field_nd)) { goto _iter_end_4597430800; }
	{
		jule::U32 _52014_v1 = jule::div(_51713_v,100LL);
		jule::U32 _52018_v2 = jule::mod(_51713_v,100LL);
		std::tie(_52014_v1,_52018_v2) = std::make_tuple(jule::div(_51713_v,100LL),jule::mod(_51713_v,100LL));
		_46022_d._field_d[static_cast<jule::Int>(_51813_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 1LL)]);
		_46022_d._field_d[static_cast<jule::Int>(_51813_n - 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 0LL)]);
		_51813_n-=2LL;
		_51713_v=_52014_v1;
	}
	_iter_next_4597430800:;
	goto _iter_begin_4597430800;
	_iter_end_4597430800:;
	if (_51813_n == _46022_d._field_nd) {
		_46022_d._field_d[static_cast<jule::Int>(_51813_n)]=static_cast<jule::U8>(_51713_v + '0');
	}
	_46022_d._field_nd=static_cast<jule::Int>(_46166_endindex + 1LL);
	_46022_d._field_dp=static_cast<jule::Int>(_46022_d._field_nd + _46613_trimmed);
}



inline std::tuple<jule::U32,jule::Int,jule::Bool> _107ea21d0_mult64bit_pow10(jule::U32 _54220_m,jule::Int _54232_e2,jule::Int _54241_q) {
	jule::Bool _54273_exact = jule::Bool();
	jule::Int _54262_resE = jule::Int();
	jule::U32 _54251_resM = jule::U32();
	if (_54241_q == 0LL) {
		_54251_resM = static_cast<jule::U32>(_54220_m << 6LL);
		_54262_resE = static_cast<jule::Int>(_54232_e2 - 6LL);
		_54273_exact = true;
		return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
	}
	if ((_54241_q < -348LL) || (347LL < _54241_q)) {
		jule::panic(jule::Str("mult64bit_pow10: power of 10 is out of range", 44));
	}
	jule::U64 _55113_pow = _117e95220_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_54241_q - -348LL)][1LL];
	if (_54241_q < 0LL) {
		_55113_pow+=1LL;
	}
	jule::U64 _55610_hi;
	jule::U64 _55614_lo;
	std::tie(_55610_hi,_55614_lo) = _110621fc0_mul64(static_cast<jule::U64>(_54220_m),_55113_pow);
	_54232_e2+=static_cast<jule::Int>((_107ea21d0_mul_by_log10_log2(_54241_q) - 63LL) + 57LL);
	_54251_resM = static_cast<jule::U32>((_55610_hi << 7LL) | (_55614_lo >> 57LL));
	_54262_resE = _54232_e2;
	_54273_exact = (_55614_lo << 7LL) == 0LL;
	return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool> _107ea21d0_mult128bit_pow10(jule::U64 _57021_m,jule::Int _57033_e2,jule::Int _57042_q) {
	jule::Bool _57074_exact = jule::Bool();
	jule::Int _57063_resE = jule::Int();
	jule::U64 _57052_resM = jule::U64();
	if (_57042_q == 0LL) {
		_57052_resM = static_cast<jule::U64>(_57021_m << 8LL);
		_57063_resE = static_cast<jule::Int>(_57033_e2 - 8LL);
		_57074_exact = true;
		return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
	}
	if ((_57042_q < -348LL) || (347LL < _57042_q)) {
		jule::panic(jule::Str("mult128bit_pow10: power of 10 is out of range", 45));
	}
	jule::Array<jule::U64,2> _57913_pow = _117e95220_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_57042_q - -348LL)];
	if (_57042_q < 0LL) {
		_57913_pow[0LL]+=1LL;
	}
	_57033_e2+=static_cast<jule::Int>((_107ea21d0_mul_by_log10_log2(_57042_q) - 127LL) + 119LL);
	jule::U64 _58710_l1;
	jule::U64 _58714_l0;
	std::tie(_58710_l1,_58714_l0) = _110621fc0_mul64(_57021_m,_57913_pow[0LL]);
	jule::U64 _58814_h1;
	jule::U64 _58818_h0;
	std::tie(_58814_h1,_58818_h0) = _110621fc0_mul64(_57021_m,_57913_pow[1LL]);
	jule::U64 _58910_mid;
	jule::U64 _58915_carry;
	std::tie(_58910_mid,_58915_carry) = _110621fc0_add64(_58710_l1,_58818_h0,0LLU);
	_58814_h1+=_58915_carry;
	_57052_resM = static_cast<jule::U64>((_58814_h1 << 9LL) | (_58910_mid >> 55LL));
	_57063_resE = _57033_e2;
	_57074_exact = ((_58910_mid << 9LL) == 0LL) && (_58714_l0 == 0LL);
	return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
}



inline jule::Bool _107ea21d0_divisible_by_pow5(jule::U64 _59426_m,jule::Int _59434_k) {
	if (_59426_m == 0LL) {
		return true;
	}
	jule::Int _59813_i = 0LL;
	_iter_begin_4597495360:;
	if (!(_59813_i < _59434_k)) { goto _iter_end_4597495360; }
	{
		if (jule::mod(_59426_m,5LL) != 0LL) {
			return false;
		}
		_59426_m/=5LL;
	}
	_iter_next_4597495360:;
	(_59813_i)++;
	goto _iter_begin_4597495360;
	_iter_end_4597495360:;
	return true;
}



inline std::tuple<jule::U32,jule::U32> _107ea21d0_divmod1e9(jule::U64 _61014_x) {
	if (true) {
		return std::make_tuple(static_cast<jule::U32>(jule::div(_61014_x,1000000000LL)),static_cast<jule::U32>(jule::mod(_61014_x,1000000000LL)));
	}
	jule::U64 _61510_hi;
	std::tie(_61510_hi,std::ignore) = _110621fc0_mul64(static_cast<jule::U64>(_61014_x >> 1LL),9903520314283042200LLU);
	jule::U64 _6169_q = _61510_hi >> 28LL;
	return std::make_tuple(static_cast<jule::U32>(_6169_q),static_cast<jule::U32>(_61014_x - (_6169_q * 1000000000LL)));
}



inline jule::Int _110057cd0_digit_zero(jule::Slice<jule::U8> _26519_dst) {
	{
		auto __julec_range_expr = _26519_dst;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110057cd0_i = 0;
			_iter_begin_4597503840:;
			{
				_26519_dst[static_cast<jule::Int>(_110057cd0_i)]='0';
			}
			_iter_next_4597503840:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110057cd0_i; goto _iter_begin_4597503840; }
			_iter_end_4597503840:;
		}
	}
	return static_cast<jule::I64>(_26519_dst.len());
}



inline void _110057cd0_trim(_110057cd0_Decimal& _27514_a) {
	_iter_begin_4597507648:;
	if (!((_27514_a._field_nd > 0LL) && (_27514_a._field_d[static_cast<jule::Int>(_27514_a._field_nd - 1LL)] == '0'))) { goto _iter_end_4597507648; }
	{
		(_27514_a._field_nd)--;
	}
	_iter_next_4597507648:;
	goto _iter_begin_4597507648;
	_iter_end_4597507648:;
	if (_27514_a._field_nd == 0LL) {
		_27514_a._field_dp=0LL;
	}
}



inline void _110057cd0_right_shift(_110057cd0_Decimal& _28521_a,jule::Uint _28533_k) {
	jule::Int _28613_r = 0LL;
	jule::Int _28713_w = 0LL;
	jule::Uint _29013_n = 0LLU;
	_iter_begin_4597517376:;
	if (!((_29013_n >> _28533_k) == 0LL)) { goto _iter_end_4597517376; }
	{
		if (_28613_r >= _28521_a._field_nd) {
			if (_29013_n == 0LL) {
				_28521_a._field_nd=0LL;
				return;
			}
			_iter_begin_4597519856:;
			if (!((_29013_n >> _28533_k) == 0LL)) { goto _iter_end_4597519856; }
			{
				_29013_n=static_cast<jule::Uint>(_29013_n * 10LL);
				(_28613_r)++;
			}
			_iter_next_4597519856:;
			goto _iter_begin_4597519856;
			_iter_end_4597519856:;
			goto _iter_end_4597517376;
		}
		jule::Uint _30413_c = static_cast<jule::Uint>(_28521_a._field_d[static_cast<jule::Int>(_28613_r)]);
		_29013_n=static_cast<jule::Uint>(((_29013_n * 10LL) + _30413_c) - '0');
	}
	_iter_next_4597517376:;
	(_28613_r)++;
	goto _iter_begin_4597517376;
	_iter_end_4597517376:;
	_28521_a._field_dp-=static_cast<jule::Int>(_28613_r - 1LL);
	jule::Uint _3099_mask = static_cast<jule::Uint>(static_cast<jule::Uint>(1LL << _28533_k) - 1LL);
	_iter_begin_4597526848:;
	if (!(_28613_r < _28521_a._field_nd)) { goto _iter_end_4597526848; }
	{
		jule::Uint _31313_c = static_cast<jule::Uint>(_28521_a._field_d[static_cast<jule::Int>(_28613_r)]);
		jule::Uint _31413_dig = _29013_n >> _28533_k;
		_29013_n&=_3099_mask;
		_28521_a._field_d[static_cast<jule::Int>(_28713_w)]=static_cast<jule::U8>(_31413_dig + '0');
		(_28713_w)++;
		_29013_n=static_cast<jule::Uint>(((_29013_n * 10LL) + _31313_c) - '0');
	}
	_iter_next_4597526848:;
	(_28613_r)++;
	goto _iter_begin_4597526848;
	_iter_end_4597526848:;
	_iter_begin_4597531712:;
	if (!(_29013_n > 0LL)) { goto _iter_end_4597531712; }
	{
		jule::Uint _32313_dig = _29013_n >> _28533_k;
		_29013_n&=_3099_mask;
		if (_28713_w < 800LL) {
			_28521_a._field_d[static_cast<jule::Int>(_28713_w)]=static_cast<jule::U8>(_32313_dig + '0');
			(_28713_w)++;
		} else if (_32313_dig > 0LL) {
			_28521_a._field_trunc=true;
		}
		_29013_n=static_cast<jule::Uint>(_29013_n * 10LL);
	}
	_iter_next_4597531712:;
	goto _iter_begin_4597531712;
	_iter_end_4597531712:;
	_28521_a._field_nd=_28713_w;
	_110057cd0_trim(_28521_a);
}



inline jule::Bool _110057cd0_prefix_is_less_than(jule::Slice<jule::U8> _33924_b,jule::Str _33935_s) {
	jule::Int _34013_i = 0LL;
	_iter_begin_4597540928:;
	if (!(_34013_i < _33935_s.len())) { goto _iter_end_4597540928; }
	{
		if (_34013_i >= _33924_b.len()) {
			return true;
		}
		if (_33924_b[static_cast<jule::Int>(_34013_i)] != _33935_s[static_cast<jule::Int>(_34013_i)]) {
			return _33924_b[static_cast<jule::Int>(_34013_i)] < _33935_s[static_cast<jule::Int>(_34013_i)];
		}
	}
	_iter_next_4597540928:;
	(_34013_i)++;
	goto _iter_begin_4597540928;
	_iter_end_4597540928:;
	return false;
}



inline void _110057cd0_left_shift(_110057cd0_Decimal& _35320_a,jule::Uint _35332_k) {
	jule::Int _35413_delta = _110057cd0_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_delta;
	if (_110057cd0_prefix_is_less_than(_35320_a._field_d.slice(0LL,static_cast<jule::Int>(_35320_a._field_nd)),_110057cd0_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_cutoff)) {
		(_35413_delta)--;
	}
	jule::Int _35913_r = _35320_a._field_nd;
	jule::Int _36013_w = _35320_a._field_nd + _35413_delta;
	jule::Uint _36313_n = 0LLU;
	(_35913_r)--;
	_iter_begin_4597555232:;
	if (!(_35913_r >= 0LL)) { goto _iter_end_4597555232; }
	{
		_36313_n+=static_cast<jule::Uint>((static_cast<jule::Uint>(_35320_a._field_d[static_cast<jule::Int>(_35913_r)]) - '0') << _35332_k);
		jule::Uint _36713_quo = jule::div(_36313_n,10LL);
		jule::Uint _36813_rem = _36313_n - (10LL * _36713_quo);
		(_36013_w)--;
		if (_36013_w < 800LL) {
			_35320_a._field_d[static_cast<jule::Int>(_36013_w)]=static_cast<jule::U8>(_36813_rem + '0');
		} else if (_36813_rem != 0LL) {
			_35320_a._field_trunc=true;
		}
		_36313_n=_36713_quo;
	}
	_iter_next_4597555232:;
	(_35913_r)--;
	goto _iter_begin_4597555232;
	_iter_end_4597555232:;
	_iter_begin_4597562192:;
	if (!(_36313_n > 0LL)) { goto _iter_end_4597562192; }
	{
		jule::Uint _38013_quo = jule::div(_36313_n,10LL);
		jule::Uint _38113_rem = _36313_n - (10LL * _38013_quo);
		(_36013_w)--;
		if (_36013_w < 800LL) {
			_35320_a._field_d[static_cast<jule::Int>(_36013_w)]=static_cast<jule::U8>(_38113_rem + '0');
		} else if (_38113_rem != 0LL) {
			_35320_a._field_trunc=true;
		}
		_36313_n=_38013_quo;
	}
	_iter_next_4597562192:;
	goto _iter_begin_4597562192;
	_iter_end_4597562192:;
	_35320_a._field_nd+=_35413_delta;
	if (_35320_a._field_nd >= 800LL) {
		_35320_a._field_nd=800LL;
	}
	_35320_a._field_dp+=_35413_delta;
	_110057cd0_trim(_35320_a);
}



inline jule::Bool _110057cd0_should_round_up(_110057cd0_Decimal& _40021_a,jule::Int _40033_nd) {
	if ((_40033_nd < 0LL) || (_40033_nd >= _40021_a._field_nd)) {
		return false;
	}
	if ((_40021_a._field_d[static_cast<jule::Int>(_40033_nd)] == '5') && ((_40033_nd + 1LL) == _40021_a._field_nd)) {
		if (_40021_a._field_trunc) {
			return true;
		}
		return (_40033_nd > 0LL) && (jule::mod(_40021_a._field_d[static_cast<jule::Int>(_40033_nd - 1LL)] - '0',2LL) != 0LL);
	}
	return _40021_a._field_d[static_cast<jule::Int>(_40033_nd)] >= '5';
}



inline jule::Str _110054e40_fmt_uint(jule::U64 _6217_i,jule::Int _6225_base) {
	if ((true && (_6217_i < 100LL)) && (_6225_base == 10LL)) {
		return _110054e40_small(static_cast<jule::Int>(_6217_i));
	}
	jule::Str _6613_s;
	std::tie(std::ignore,_6613_s) = _110054e40_fmt_bits(nullptr,_6217_i,_6225_base,false,false);
	return _6613_s;
}



inline jule::Str _110054e40_fmt_int(jule::I64 _7316_i,jule::Int _7324_base) {
	if (((true && (0LL <= _7316_i)) && (_7316_i < 100LL)) && (_7324_base == 10LL)) {
		return _110054e40_small(static_cast<jule::Int>(_7316_i));
	}
	jule::Str _7713_s;
	std::tie(std::ignore,_7713_s) = _110054e40_fmt_bits(nullptr,static_cast<jule::U64>(_7316_i),_7324_base,_7316_i < 0LL,false);
	return _7713_s;
}



inline jule::Str _110054e40_itoa(jule::Int _8213_i) {
	return _110054e40_fmt_int(static_cast<jule::I64>(_8213_i),10LL);
}



inline jule::Str _110054e40_small(jule::Int _8510_i) {
	if (_8510_i < 10LL) {
		return jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).slice(static_cast<jule::Int>(_8510_i),static_cast<jule::Int>(_8510_i + 1LL));
	}
	return jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200).slice(static_cast<jule::Int>(_8510_i * 2LL),static_cast<jule::Int>((_8510_i * 2LL) + 2LL));
}



inline jule::Bool _110054e40_is_power_of_two(jule::Int _9220_x) {
	return (_9220_x & (_9220_x - 1LL)) == 0LL;
}



inline std::tuple<jule::Slice<jule::U8>,jule::Str> _110054e40_fmt_bits(jule::Slice<jule::U8> _9917_dst,jule::U64 _9934_u,jule::Int _9942_base,jule::Bool _9953_neg,jule::Bool _9964_append_) {
	jule::Str _9992_s = jule::Str();
	jule::Slice<jule::U8> _9981_d = jule::Slice<jule::U8>();
	if ((_9942_base < 2LL) || (_9942_base > jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).len())) {
		jule::panic(jule::Str("std::conv: illegal base", 23));
	}
	jule::Array<jule::U8,65> _10513_a = jule::Array<jule::U8,65>({});
	jule::Int _10613_i = 65LL;
	if (_9953_neg) {
		_9934_u=static_cast<jule::U64>((-(_9934_u)));
	}
	if (_9942_base == 10LL) {
		if (false) {
			_iter_begin_4597609728:;
			if (!(_9934_u >= 1000000000LL)) { goto _iter_end_4597609728; }
			{
				jule::U64 _12521_q = jule::div(_9934_u,1000000000LL);
				jule::Uint _12625_us = static_cast<jule::Uint>(_9934_u - (_12521_q * 1000000000LL));
				jule::Int _12725_j = 4LL;
				_iter_begin_4597613520:;
				if (!(_12725_j > 0LL)) { goto _iter_end_4597613520; }
				{
					jule::Uint _12925_is = jule::mod(_12625_us,100LL) * 2LL;
					_12625_us/=100LL;
					_10613_i-=2LL;
					_10513_a[static_cast<jule::Int>(_10613_i + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_12925_is + 1LL)]);
					_10513_a[static_cast<jule::Int>(_10613_i + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_12925_is + 0LL)]);
				}
				_iter_next_4597613520:;
				(_12725_j)--;
				goto _iter_begin_4597613520;
				_iter_end_4597613520:;
				(_10613_i)--;
				_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((_12625_us * 2LL) + 1LL)]);
				_9934_u=_12521_q;
			}
			_iter_next_4597609728:;
			goto _iter_begin_4597609728;
			_iter_end_4597609728:;
		}
		jule::Uint _14717_us = static_cast<jule::Uint>(_9934_u);
		_iter_begin_4597623888:;
		if (!(_14717_us >= 100LL)) { goto _iter_end_4597623888; }
		{
			jule::Uint _14917_is = jule::mod(_14717_us,100LL) * 2LL;
			_14717_us/=100LL;
			_10613_i-=2LL;
			_10513_a[static_cast<jule::Int>(_10613_i + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_14917_is + 1LL)]);
			_10513_a[static_cast<jule::Int>(_10613_i + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_14917_is + 0LL)]);
		}
		_iter_next_4597623888:;
		goto _iter_begin_4597623888;
		_iter_end_4597623888:;
		jule::Uint _15713_is = _14717_us * 2LL;
		(_10613_i)--;
		_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15713_is + 1LL)]);
		if (_14717_us >= 10LL) {
			(_10613_i)--;
			_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15713_is)]);
		}
	} else if (_110054e40_is_power_of_two(_9942_base)) {
		jule::Uint _17213_shift = static_cast<jule::Uint>(_110621fc0_trailing_zeros(static_cast<jule::Uint>(_9942_base))) & 7LL;
		jule::U64 _17313_b = static_cast<jule::U64>(_9942_base);
		jule::Uint _17413_m = static_cast<jule::Uint>(_9942_base) - 1LL;
		_iter_begin_4597639040:;
		if (!(_9934_u >= _17313_b)) { goto _iter_end_4597639040; }
		{
			(_10613_i)--;
			_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u) & _17413_m)]);
			_9934_u>>=_17213_shift;
		}
		_iter_next_4597639040:;
		goto _iter_begin_4597639040;
		_iter_end_4597639040:;
		(_10613_i)--;
		_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u))]);
	} else {
		jule::U64 _18513_b = static_cast<jule::U64>(_9942_base);
		_iter_begin_4597643792:;
		if (!(_9934_u >= _18513_b)) { goto _iter_end_4597643792; }
		{
			(_10613_i)--;
			jule::U64 _19117_q = jule::div(_9934_u,_18513_b);
			_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u - (_19117_q * _18513_b)))]);
			_9934_u=_19117_q;
		}
		_iter_next_4597643792:;
		goto _iter_begin_4597643792;
		_iter_end_4597643792:;
		(_10613_i)--;
		_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u))]);
	}
	if (_9953_neg) {
		(_10613_i)--;
		_10513_a[static_cast<jule::Int>(_10613_i)]='-';
	}
	if (_9964_append_) {
		_9981_d=jule::append(_9917_dst,_10513_a.slice(static_cast<jule::Int>(_10613_i)));
		return std::make_tuple(_9981_d,_9992_s);
	}
	_9992_s=static_cast<jule::Str>(_10513_a.slice(static_cast<jule::Int>(_10613_i)));
	return std::make_tuple(_9981_d,_9992_s);
}



inline void _107ec3010_exit(jule::Int _1213_code) {
	_117eb6970_exit(_1213_code);
}



inline jule::Str _107ec3010_executable(void) {
	return jule::executable();
}



inline jule::Bool _127e05470_is_std_header_path(jule::Str _2627_p) {
	return (_2627_p[0LL] == '<') && (_2627_p[static_cast<jule::Int>(_2627_p.len() - 1LL)] == '>');
}



inline jule::Bool _127e05470_is_valid_header_ext(jule::Str _3128_ext) {
	{
		auto __julec_range_expr = _127e05470_CPP_HEADER_EXTS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _127e05470_valid_ext = *__julec_range_begin;
			_iter_begin_4597957056:;
			{
				if (_3128_ext == _127e05470_valid_ext) {
					return true;
				}
			}
			_iter_next_4597957056:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _127e05470_valid_ext = *__julec_range_begin; goto _iter_begin_4597957056; }
			_iter_end_4597957056:;
		}
	}
	return false;
}



inline jule::Bool _127e05470_is_valid_cpp_ext(jule::Str _4225_ext) {
	{
		auto __julec_range_expr = _127e05470_CPP_EXTS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _127e05470_e = *__julec_range_begin;
			_iter_begin_4597955472:;
			{
				if (_4225_ext == _127e05470_e) {
					return true;
				}
			}
			_iter_next_4597955472:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _127e05470_e = *__julec_range_begin; goto _iter_begin_4597955472; }
			_iter_end_4597955472:;
		}
	}
	{
		auto __julec_range_expr = _127e05470_OBJECTIVE_CPP_EXTS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _127e05470_e = *__julec_range_begin;
			_iter_begin_4597963728:;
			{
				if (_4225_ext == _127e05470_e) {
					return true;
				}
			}
			_iter_next_4597963728:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _127e05470_e = *__julec_range_begin; goto _iter_begin_4597963728; }
			_iter_end_4597963728:;
		}
	}
	return false;
}



inline std::tuple<jule::Bool,jule::Bool> _127e05990_check_os(jule::Str _713_arg) {
	jule::Bool _735_exist = jule::Bool();
	jule::Bool _725_ok = jule::Bool();
	_725_ok=false;
	_735_exist=true;
	{
		auto _match_expr{ _713_arg };
		if (!((jule::Str("windows", 7)) == _match_expr)) { goto _case_end_4597970160; }
		_case_begin_4597970160:;
		{
			_725_ok=_127eb0d70_is_windows(_127ebf120_OS);
		}
		goto _match_end_4597967840;
		_case_end_4597970160:;
		if (!((jule::Str("darwin", 6)) == _match_expr)) { goto _case_end_4597968608; }
		_case_begin_4597968608:;
		{
			_725_ok=_127eb0d70_is_darwin(_127ebf120_OS);
		}
		goto _match_end_4597967840;
		_case_end_4597968608:;
		if (!((jule::Str("linux", 5)) == _match_expr)) { goto _case_end_4597968720; }
		_case_begin_4597968720:;
		{
			_725_ok=_127eb0d70_is_linux(_127ebf120_OS);
		}
		goto _match_end_4597967840;
		_case_end_4597968720:;
		if (!((jule::Str("unix", 4)) == _match_expr)) { goto _case_end_4597968832; }
		_case_begin_4597968832:;
		{
			_725_ok=_127eb0d70_is_unix(_127ebf120_OS);
		}
		goto _match_end_4597967840;
		_case_end_4597968832:;
		_case_begin_4597967552:;
		{
			_725_ok=true;
			_735_exist=false;
		}
		goto _match_end_4597967840;
		_case_end_4597967552:;
		_match_end_4597967840:;
	}
	return std::make_tuple(_725_ok,_735_exist);
}



inline std::tuple<jule::Bool,jule::Bool> _127e05990_check_arch(jule::Str _2415_arg) {
	jule::Bool _2437_exist = jule::Bool();
	jule::Bool _2427_ok = jule::Bool();
	_2427_ok=false;
	_2437_exist=true;
	{
		auto _match_expr{ _2415_arg };
		if (!((jule::Str("i386", 4)) == _match_expr)) { goto _case_end_4597977296; }
		_case_begin_4597977296:;
		{
			_2427_ok=_127eb0d70_is_i386(_127ebf120_ARCH);
		}
		goto _match_end_4597974976;
		_case_end_4597977296:;
		if (!((jule::Str("amd64", 5)) == _match_expr)) { goto _case_end_4597975744; }
		_case_begin_4597975744:;
		{
			_2427_ok=_127eb0d70_is_amd64(_127ebf120_ARCH);
		}
		goto _match_end_4597974976;
		_case_end_4597975744:;
		if (!((jule::Str("arm64", 5)) == _match_expr)) { goto _case_end_4597975856; }
		_case_begin_4597975856:;
		{
			_2427_ok=_127eb0d70_is_arm64(_127ebf120_ARCH);
		}
		goto _match_end_4597974976;
		_case_end_4597975856:;
		if (!((jule::Str("64bit", 5)) == _match_expr)) { goto _case_end_4597975968; }
		_case_begin_4597975968:;
		{
			_2427_ok=_127eb0d70_is_64bit(_127ebf120_ARCH);
		}
		goto _match_end_4597974976;
		_case_end_4597975968:;
		if (!((jule::Str("32bit", 5)) == _match_expr)) { goto _case_end_4597976224; }
		_case_begin_4597976224:;
		{
			_2427_ok=_127eb0d70_is_32bit(_127ebf120_ARCH);
		}
		goto _match_end_4597974976;
		_case_end_4597976224:;
		_case_begin_4597974688:;
		{
			_2427_ok=true;
			_2437_exist=false;
		}
		goto _match_end_4597974976;
		_case_end_4597974688:;
		_match_end_4597974976:;
	}
	return std::make_tuple(_2427_ok,_2437_exist);
}



inline jule::Bool _127e05990_is_pass_file_annotation(jule::Str _4336_p) {
	_4336_p=_117e1d320_base(_4336_p);
	jule::I64 _459_n = _4336_p.len();
	_4336_p=_4336_p.slice(0LL,static_cast<jule::Int>(_459_n - _117e1d320_ext(_4336_p).len()));
	jule::Str _5113_a1 = jule::Str("", 0);
	jule::Str _5413_a2 = jule::Str("", 0);
	jule::Int _5713_i = _4336_p.rfind(jule::Str("_", 1));
	if (_5713_i == -1LL) {
		jule::Bool _6018_ok;
		jule::Bool _6026_exist;
		std::tie(_6018_ok,_6026_exist) = _127e05990_check_os(_4336_p);
		if (_6026_exist) {
			return _6018_ok;
		}
		std::tie(_6018_ok,_6026_exist) = _127e05990_check_arch(_4336_p);
		return (!(_6026_exist)) || _6018_ok;
	}
	if ((_5713_i + 1LL) >= _459_n) {
		return true;
	}
	_5113_a1=_4336_p.slice(static_cast<jule::Int>(_5713_i + 1LL));
	_4336_p=_4336_p.slice(0LL,static_cast<jule::Int>(_5713_i));
	_5713_i=static_cast<jule::Int>(_4336_p.rfind(jule::Str("_", 1)));
	if (_5713_i != -1LL) {
		_5413_a2=_4336_p.slice(static_cast<jule::Int>(_5713_i + 1LL));
	}
	if (_5413_a2 == jule::Str("", 0)) {
		jule::Bool _8118_ok;
		jule::Bool _8126_exist;
		std::tie(_8118_ok,_8126_exist) = _127e05990_check_os(_5113_a1);
		if (_8126_exist) {
			return _8118_ok;
		}
		std::tie(_8118_ok,_8126_exist) = _127e05990_check_arch(_5113_a1);
		return (!(_8126_exist)) || _8118_ok;
	}
	jule::Bool _8914_ok;
	jule::Bool _8922_exist;
	std::tie(_8914_ok,_8922_exist) = _127e05990_check_arch(_5113_a1);
	if (_8922_exist) {
		if ((!(_8914_ok))) {
			return false;
		}
		jule::Bool _9414_ok;
		jule::Bool _9418_exist;
		std::tie(_9414_ok,_9418_exist) = _127e05990_check_os(_5413_a2);
		return (!(_9418_exist)) || _9414_ok;
	}
	std::tie(_8914_ok,_8922_exist) = _127e05990_check_os(_5113_a1);
	return (!(_8922_exist)) || _8914_ok;
}



inline jule::Str _127e05da0_logf(jule::Str _25113_fmt,jule::Slice<jule::Any> _25126_args) {
	return _127e05da0_apply_fmt(_25113_fmt,_25126_args);
}



inline jule::Str _127e05da0_arg_to_str(jule::Any _25515_arg) {
	{
		auto _match_expr{ _25515_arg };
		if (!(_match_expr.type_is<jule::Str>())) { goto _case_end_4598027952; }
		_case_begin_4598027952:;
		{
			return _25515_arg.operator jule::Str();
		}
		goto _match_end_4598025856;
		_case_end_4598027952:;
		if (!(_match_expr.type_is<jule::U8>())) { goto _case_end_4598028064; }
		_case_begin_4598028064:;
		{
			return static_cast<jule::Str>(_25515_arg.operator jule::U8());
		}
		goto _match_end_4598025856;
		_case_end_4598028064:;
		if (!(_match_expr.type_is<jule::I32>())) { goto _case_end_4598028176; }
		_case_begin_4598028176:;
		{
			return static_cast<jule::Str>(_25515_arg.operator jule::I32());
		}
		goto _match_end_4598025856;
		_case_end_4598028176:;
		_case_begin_4598024976:;
		{
			return jule::Str("<fmt?>", 6);
		}
		goto _match_end_4598025856;
		_case_end_4598024976:;
		_match_end_4598025856:;
	}
}



inline jule::Int _127e05da0_find_next_fmt(jule::Str _26418_fmt) {
	{
		auto __julec_range_expr = _26418_fmt;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _127e05da0_i = 0;
			jule::U8 _127e05da0_b = *__julec_range_begin;
			_iter_begin_4598031632:;
			{
				if (_127e05da0_b == '@') {
					return _127e05da0_i;
				}
			}
			_iter_next_4598031632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_127e05da0_i; _127e05da0_b = *__julec_range_begin; goto _iter_begin_4598031632; }
			_iter_end_4598031632:;
		}
	}
	return -1LL;
}



inline jule::Str _127e05da0_apply_fmt(jule::Str _27318_fmt,jule::Slice<jule::Any> _27328_args) {
	jule::Str _27413_s = jule::Str("", 0);
	{
		auto __julec_range_expr = _27328_args;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _127e05da0_arg = *__julec_range_begin;
			_iter_begin_4598036752:;
			{
				jule::Int _27713_i = _127e05da0_find_next_fmt(_27318_fmt);
				if (_27713_i == -1LL) {
					goto _iter_end_4598036752;
				}
				_27413_s+=_27318_fmt.slice(0LL,static_cast<jule::Int>(_27713_i));
				_27413_s+=_127e05da0_arg_to_str(_127e05da0_arg);
				_27318_fmt=_27318_fmt.slice(static_cast<jule::Int>(_27713_i + 1LL));
			}
			_iter_next_4598036752:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _127e05da0_arg = *__julec_range_begin; goto _iter_begin_4598036752; }
			_iter_end_4598036752:;
		}
	}
	_27413_s+=_27318_fmt;
	return _27413_s;
}



inline jule::Bool _127e7c3f0_is_top_directive(jule::Str _3625_directive) {
	return (_3625_directive == jule::Str("pass", 4)) || (_3625_directive == jule::Str("build", 5));
}



inline jule::Bool _127eb0d70_is_windows(jule::Str _5119_os) {
	return _5119_os == jule::Str("windows", 7);
}



inline jule::Bool _127eb0d70_is_darwin(jule::Str _5318_os) {
	return _5318_os == jule::Str("darwin", 6);
}



inline jule::Bool _127eb0d70_is_linux(jule::Str _5517_os) {
	return _5517_os == jule::Str("linux", 5);
}



inline jule::Bool _127eb0d70_is_i386(jule::Str _5716_arch) {
	return _5716_arch == jule::Str("i386", 4);
}



inline jule::Bool _127eb0d70_is_amd64(jule::Str _5917_arch) {
	return _5917_arch == jule::Str("amd64", 5);
}



inline jule::Bool _127eb0d70_is_arm64(jule::Str _6117_arch) {
	return _6117_arch == jule::Str("arm64", 5);
}



inline jule::Bool _127eb0d70_is_unix(jule::Str _6316_os) {
	return _127eb0d70_is_darwin(_6316_os) || _127eb0d70_is_linux(_6316_os);
}



inline jule::Bool _127eb0d70_is_32bit(jule::Str _6517_arch) {
	return _127eb0d70_is_i386(_6517_arch);
}



inline jule::Bool _127eb0d70_is_64bit(jule::Str _6717_arch) {
	return _127eb0d70_is_amd64(_6717_arch) || _127eb0d70_is_arm64(_6717_arch);
}



inline void _127ebf120_exit_err(jule::Str _2513_msg) {
	
	jule::outln(_2513_msg);
	_107ec3010_exit(1LL);
}



inline void _127ebf120_init(void) {
	jule::Str _3313_path = _107ec3010_executable();
	if (_3313_path == jule::Str("", 0)) {
		_127ebf120_exit_err(jule::Str("std::jule::build: executable file cannot found", 46));
	}
	jule::Str _3810_pwd;
	jule::Int _3815_err;
	std::tie(_3810_pwd,_3815_err) = _117e7c8c0_working_dir();
	if (_3815_err != 0LLU) {
		_127ebf120_exit_err(jule::Str("std::jule::build: working directory path cannot found", 53));
	}
	jule::Str _439_path_exec = _117e1d320_dir(_3313_path);
	_3313_path=_117e1d320_join(jule::Slice<jule::Str>({_439_path_exec,jule::Str("..", 2)}));
	{
		(*((&(_127ebf120_PATH_WD))))=_3810_pwd;
		(*((&(_127ebf120_PATH_EXEC))))=_439_path_exec;
		(*((&(_127ebf120_PATH_STDLIB))))=_117e1d320_join(jule::Slice<jule::Str>({_3313_path,jule::Str("std", 3)}));
		(*((&(_127ebf120_PATH_API))))=_117e1d320_join(jule::Slice<jule::Str>({_127ebf120_PATH_EXEC,jule::Str("..", 2)}));
		(*((&(_127ebf120_PATH_API))))=_117e1d320_join(jule::Slice<jule::Str>({_127ebf120_PATH_API,jule::Str("api", 3)}));
		(*((&(_127ebf120_PATH_API))))=_117e1d320_join(jule::Slice<jule::Str>({_127ebf120_PATH_API,jule::Str("jule.hpp", 8)}));
	}
}



inline jule::Bool _117e0af70_is_jule(jule::Str _2316_path) {
	return _117e1d320_ext(_2316_path) == jule::Str(".jule", 5);
}



inline jule::Int _110471290_get_last_fs_error(void) {
	jule::Int _739_err = _117e8bf60_get_last_errno();
	{
		auto _match_expr{ _739_err };
		if (!((13LL) == _match_expr)) { goto _case_end_4598111040; }
		_case_begin_4598111040:;
		{
			return 1LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598111040:;
		if (!((5LL) == _match_expr)) { goto _case_end_4598110640; }
		_case_begin_4598110640:;
		{
			return 2LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598110640:;
		if (!((62LL) == _match_expr)) { goto _case_end_4598110752; }
		_case_begin_4598110752:;
		{
			return 3LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598110752:;
		if (!((63LL) == _match_expr)) { goto _case_end_4598110864; }
		_case_begin_4598110864:;
		{
			return 4LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598110864:;
		if (!((2LL) == _match_expr)) { goto _case_end_4598110080; }
		_case_begin_4598110080:;
		{
			return 5LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598110080:;
		if (!((20LL) == _match_expr)) { goto _case_end_4598110192; }
		_case_begin_4598110192:;
		{
			return 6LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598110192:;
		if (!((84LL) == _match_expr)) { goto _case_end_4598110304; }
		_case_begin_4598110304:;
		{
			return 7LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598110304:;
		if (!((9LL) == _match_expr)) { goto _case_end_4598111248; }
		_case_begin_4598111248:;
		{
			return 8LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598111248:;
		if (!((24LL) == _match_expr)) { goto _case_end_4598111360; }
		_case_begin_4598111360:;
		{
			return 9LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598111360:;
		if (!((23LL) == _match_expr)) { goto _case_end_4598111472; }
		_case_begin_4598111472:;
		{
			return 10LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598111472:;
		if (!((12LL) == _match_expr)) { goto _case_end_4598112208; }
		_case_begin_4598112208:;
		{
			return 11LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598112208:;
		if (!((17LL) == _match_expr)) { goto _case_end_4598112320; }
		_case_begin_4598112320:;
		{
			return 12LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598112320:;
		if (!((4LL) == _match_expr)) { goto _case_end_4598112432; }
		_case_begin_4598112432:;
		{
			return 13LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598112432:;
		if (!((22LL) == _match_expr)) { goto _case_end_4598112544; }
		_case_begin_4598112544:;
		{
			return 14LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598112544:;
		if (!((21LL) == _match_expr)) { goto _case_end_4598112656; }
		_case_begin_4598112656:;
		{
			return 15LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598112656:;
		if (!((98LL) == _match_expr)) { goto _case_end_4598112768; }
		_case_begin_4598112768:;
		{
			return 16LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598112768:;
		if (!((28LL) == _match_expr)) { goto _case_end_4598112880; }
		_case_begin_4598112880:;
		{
			return 17LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598112880:;
		if (!((6LL) == _match_expr)) { goto _case_end_4598112992; }
		_case_begin_4598112992:;
		{
			return 18LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598112992:;
		if (!((30LL) == _match_expr)) { goto _case_end_4598113104; }
		_case_begin_4598113104:;
		{
			return 19LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598113104:;
		if (!((35LL) == _match_expr)) { goto _case_end_4598113216; }
		_case_begin_4598113216:;
		{
			return 20LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598113216:;
		if (!((26LL) == _match_expr || (16LL) == _match_expr)) { goto _case_end_4598113328; }
		_case_begin_4598113328:;
		{
			return 21LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598113328:;
		if (!((27LL) == _match_expr)) { goto _case_end_4598113440; }
		_case_begin_4598113440:;
		{
			return 22LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598113440:;
		if (!((32LL) == _match_expr)) { goto _case_end_4598113552; }
		_case_begin_4598113552:;
		{
			return 23LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598113552:;
		if (!((34LL) == _match_expr)) { goto _case_end_4598113680; }
		_case_begin_4598113680:;
		{
			return 24LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598113680:;
		if (!((29LL) == _match_expr)) { goto _case_end_4598113808; }
		_case_begin_4598113808:;
		{
			return 25LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598113808:;
		if (!((55LL) == _match_expr)) { goto _case_end_4598113936; }
		_case_begin_4598113936:;
		{
			return 26LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598113936:;
		if (!((94LL) == _match_expr)) { goto _case_end_4598114064; }
		_case_begin_4598114064:;
		{
			return 27LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598114064:;
		if (!((66LL) == _match_expr)) { goto _case_end_4598114192; }
		_case_begin_4598114192:;
		{
			return 28LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598114192:;
		_case_begin_4598109776:;
		{
			return 0LLU;
		}
		goto _match_end_4598109248;
		_case_end_4598109776:;
		_match_end_4598109248:;
	}
}



inline std::tuple<jule::Ref<_1104f8ac0_File>,jule::Int> _110471730_open(jule::Str _1813_path,jule::Int _1824_flag,jule::Int _1837_mode) {
	jule::Int _199_handle = _117e8d290_open((&(_1813_path[0LL])),static_cast<jule::Int>(_1824_flag),_1837_mode);
	if (_199_handle == -1LL) {
		return std::make_tuple(jule::new_ref<_1104f8ac0_File>(),_110471290_get_last_fs_error());
	}
	return std::make_tuple(jule::new_struct<_1104f8ac0_File>(new( std::nothrow ) _1104f8ac0_File(_199_handle)),0LLU);
}



inline jule::Int _110471730_remove_file(jule::Str _3020_path) {
	if (_117e8d290_unlink((&(_3020_path[0LL]))) == 0LL) {
		return 0LLU;
	}
	return _110471290_get_last_fs_error();
}



inline std::tuple<jule::Ref<_11054d9e0_Status>,jule::Int> _1104fc7d0_stat(jule::Str _1113_path) {
	jule::Int _1138_err = 0LLU;
	jule::Ref<_11054d9e0_Status> _1126_s = jule::Ref<_11054d9e0_Status>();
	struct stat _1213_handle = (struct stat){};
	jule::Int _139_code = _117e8d290_stat((&(_1113_path[0LL])),(&(_1213_handle)));
	if (_139_code != -1LL) {
		_1138_err=0LLU;
		_1126_s=jule::new_struct<_11054d9e0_Status>(new( std::nothrow ) _11054d9e0_Status(static_cast<jule::Uint>(_1213_handle.st_mode),static_cast<jule::Uint>(_1213_handle.st_size)));
	} else {
		_1138_err=_110471290_get_last_fs_error();
	}
	return std::make_tuple(_1126_s,_1138_err);
}



inline std::tuple<jule::Slice<jule::U8>,jule::Int> _1104f8ac0_read_file(jule::Str _12118_path) {
	jule::Ref<_11054d9e0_Status> _12210_s;
	jule::Int _12217_err;
	std::tie(_12210_s,_12217_err) = _1104fc7d0_stat(_12118_path);
	if (_12217_err != 0LLU) {
		return std::make_tuple(nullptr,_12217_err);
	}
	if ((!(_12210_s->_method_is_reg()))) {
		return std::make_tuple(nullptr,15LLU);
	}
	if (_12210_s->_field_size == 0LL) {
		return std::make_tuple(jule::Slice<jule::U8>::alloc(0LL),0LLU);
	}
	jule::Ref<_1104f8ac0_File> _13514_f;
	std::tie(_13514_f,_12217_err) = _110471730_open(_12118_path,0LL,0LL);
	if (_12217_err != 0LLU) {
		return std::make_tuple(nullptr,_12217_err);
	}
	__JULE_DEFER({
		_13514_f->_method_close();
	});
	jule::Slice<jule::U8> _14113_buff = jule::Slice<jule::U8>::alloc(static_cast<jule::Int>(_12210_s->_field_size));
	jule::Int _14210_n;
	std::tie(_14210_n,_12217_err) = _13514_f->_method_read(_14113_buff);
	if (_12217_err != 0LLU) {
		return std::make_tuple(nullptr,_12217_err);
	}
	return std::make_tuple(_14113_buff.slice(0LL,static_cast<jule::Int>(_14210_n)),0LLU);
}



inline std::tuple<jule::Slice<jule::Ref<_110473c30_DirEntry>>,jule::Int> _11060cca0_read_dir(jule::Str _2117_path) {
	jule::Int _2152_err = 0LLU;
	jule::Slice<jule::Ref<_110473c30_DirEntry>> _2130_dirents = jule::Slice<jule::Ref<_110473c30_DirEntry>>();
	DIR* _2213_dir = _117e8d290_opendir((&(_2117_path[0LL])));
	if (_2213_dir == nullptr) {
		_2152_err=_110471290_get_last_fs_error();
		return std::make_tuple(_2130_dirents,_2152_err);
	}
	_iter_begin_4598169248:;
	{
		struct dirent* _2813_dirent = _117e8d290_readdir(_2213_dir);
		if (_2813_dirent == nullptr) {
			goto _iter_end_4598169248;
		}
		jule::Str _3213_name = _117e8d290_byte_ptr_to_str(((jule::U8*)(_2813_dirent->d_name)));
		jule::Ref<_11054d9e0_Status> _3314_stat;
		jule::Int _3320_serr;
		std::tie(_3314_stat,_3320_serr) = _1104fc7d0_stat(_117e1d320_join(jule::Slice<jule::Str>({_2117_path,_3213_name})));
		if (_3320_serr != 0LLU) {
			_2152_err=_3320_serr;
			_2130_dirents=nullptr;
			goto _iter_end_4598169248;
		}
		_2130_dirents=jule::append(_2130_dirents,jule::Slice<jule::Ref<_110473c30_DirEntry>>({jule::new_struct<_110473c30_DirEntry>(new( std::nothrow ) _110473c30_DirEntry(_3213_name,_3314_stat))}));
	}
	_iter_next_4598169248:;
	goto _iter_begin_4598169248;
	_iter_end_4598169248:;
	_117e8d290_closedir(_2213_dir);
	return std::make_tuple(_2130_dirents,_2152_err);
}



inline jule::Int _11060cca0_create_dir(jule::Str _5119_path) {
	if (_117e8d290_mkdir((&(_5119_path[0LL])),448LL) == 0LL) {
		return 0LLU;
	}
	return _110471290_get_last_fs_error();
}



inline jule::Int _11060cca0_remove_dir(jule::Str _6419_path) {
	if (_117e8d290_rmdir((&(_6419_path[0LL]))) == 0LL) {
		return 0LLU;
	}
	return _110471290_get_last_fs_error();
}



inline jule::Bool _1106ed100_full_rune(jule::Slice<jule::U8> _13718_p) {
	if (_13718_p.len() == 0LL) {
		return false;
	}
	jule::U8 _1419_x = _1106ed100_FIRST[static_cast<jule::Int>(_13718_p[0LL])];
	if (_13718_p.len() >= static_cast<jule::Int>(_1419_x & 7LL)) {
		return true;
	}
	_1106ed100_accept_range _1469_accept = _1106ed100_ACCEPT_RANGES[static_cast<jule::Int>(_1419_x >> 4LL)];
	if ((_13718_p.len() > 1LL) && ((_13718_p[1LL] < _1469_accept._field_lo) || (_1469_accept._field_hi < _13718_p[1LL]))) {
		return true;
	} else if ((_13718_p.len() > 2LL) && ((_13718_p[2LL] < 128LL) || (191LL < _13718_p[2LL]))) {
		return true;
	}
	return false;
}



inline jule::Bool _1106ed100_full_rune_str(jule::Str _15622_s) {
	if (_15622_s.len() == 0LL) {
		return false;
	}
	jule::U8 _1609_x = _1106ed100_FIRST[static_cast<jule::Int>(_15622_s[0LL])];
	if (_15622_s.len() >= static_cast<jule::Int>(_1609_x & 7LL)) {
		return true;
	}
	_1106ed100_accept_range _1659_accept = _1106ed100_ACCEPT_RANGES[static_cast<jule::Int>(_1609_x >> 4LL)];
	if ((_15622_s.len() > 1LL) && ((_15622_s[1LL] < _1659_accept._field_lo) || (_1659_accept._field_hi < _15622_s[1LL]))) {
		return true;
	} else if ((_15622_s.len() > 2LL) && ((_15622_s[2LL] < 128LL) || (191LL < _15622_s[2LL]))) {
		return true;
	}
	return false;
}



inline std::tuple<jule::I32,jule::Int> _1106ed100_decode_rune(jule::Slice<jule::U8> _18220_p) {
	jule::Int _18242_size = jule::Int();
	jule::I32 _18233_r = jule::I32();
	if (_18220_p.len() < 1LL) {
		_18233_r = 65533LL;
		_18242_size = 0LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _1869_p0 = _18220_p[0LL];
	jule::U8 _1879_x = _1106ed100_FIRST[static_cast<jule::Int>(_1869_p0)];
	if (_1879_x >= 240LL) {
		jule::I32 _19213_mask = static_cast<jule::U8>((_1879_x << 31LL) >> 31LL);
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_18220_p[0LL]) & (~(_19213_mask))) | (65533LL & _19213_mask));
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::Int _1959_sz = static_cast<jule::Int>(_1879_x & 7LL);
	_1106ed100_accept_range _1969_accept = _1106ed100_ACCEPT_RANGES[static_cast<jule::Int>(_1879_x >> 4LL)];
	if (_18220_p.len() < _1959_sz) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2009_b1 = _18220_p[1LL];
	if ((_2009_b1 < _1969_accept._field_lo) || (_1969_accept._field_hi < _2009_b1)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 2LL) {
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_1869_p0 & 31LL) << 6LL) | static_cast<jule::I32>(_2009_b1 & 63LL));
		_18242_size = 2LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2079_b2 = _18220_p[2LL];
	if ((_2079_b2 < 128LL) || (191LL < _2079_b2)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 3LL) {
		_18233_r = static_cast<jule::I32>(((static_cast<jule::I32>(_1869_p0 & 15LL) << 12LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 6LL)) | static_cast<jule::I32>(_2079_b2 & 63LL));
		_18242_size = 3LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2149_b3 = _18220_p[3LL];
	if ((_2149_b3 < 128LL) || (191LL < _2149_b3)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	_18233_r = static_cast<jule::I32>((((static_cast<jule::I32>(_1869_p0 & 7LL) << 18LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 12LL)) | (static_cast<jule::I32>(_2079_b2 & 63LL) << 6LL)) | static_cast<jule::I32>(_2149_b3 & 63LL));
	_18242_size = 4LL;
	return std::make_tuple(_18233_r,_18242_size);
}



inline std::tuple<jule::I32,jule::Int> _1106ed100_decode_rune_str(jule::Str _22924_s) {
	jule::Int _22943_size = jule::Int();
	jule::I32 _22934_r = jule::I32();
	if (_22924_s.len() < 1LL) {
		_22934_r = 65533LL;
		_22943_size = 0LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::U8 _2339_s0 = _22924_s[0LL];
	jule::U8 _2349_x = _1106ed100_FIRST[static_cast<jule::Int>(_2339_s0)];
	if (_2349_x >= 240LL) {
		jule::I32 _23913_mask = static_cast<jule::U8>((_2349_x << 31LL) >> 31LL);
		_22934_r = static_cast<jule::I32>((static_cast<jule::I32>(_22924_s[0LL]) & (~(_23913_mask))) | (65533LL & _23913_mask));
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::Int _2429_sz = static_cast<jule::Int>(_2349_x & 7LL);
	_1106ed100_accept_range _2439_accept = _1106ed100_ACCEPT_RANGES[static_cast<jule::Int>(_2349_x >> 4LL)];
	if (_22924_s.len() < _2429_sz) {
		_22934_r = 65533LL;
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::U8 _2479_s1 = _22924_s[1LL];
	if ((_2479_s1 < _2439_accept._field_lo) || (_2439_accept._field_hi < _2479_s1)) {
		_22934_r = 65533LL;
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	if (_2429_sz <= 2LL) {
		_22934_r = static_cast<jule::I32>((static_cast<jule::I32>(_2339_s0 & 31LL) << 6LL) | static_cast<jule::I32>(_2479_s1 & 63LL));
		_22943_size = 2LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::U8 _2549_s2 = _22924_s[2LL];
	if ((_2549_s2 < 128LL) || (191LL < _2549_s2)) {
		_22934_r = 65533LL;
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	if (_2429_sz <= 3LL) {
		_22934_r = static_cast<jule::I32>(((static_cast<jule::I32>(_2339_s0 & 15LL) << 12LL) | (static_cast<jule::I32>(_2479_s1 & 63LL) << 6LL)) | static_cast<jule::I32>(_2549_s2 & 63LL));
		_22943_size = 3LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::U8 _2619_s3 = _22924_s[3LL];
	if ((_2619_s3 < 128LL) || (191LL < _2619_s3)) {
		_22934_r = 65533LL;
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	_22934_r = static_cast<jule::I32>((((static_cast<jule::I32>(_2339_s0 & 7LL) << 18LL) | (static_cast<jule::I32>(_2479_s1 & 63LL) << 12LL)) | (static_cast<jule::I32>(_2549_s2 & 63LL) << 6LL)) | static_cast<jule::I32>(_2619_s3 & 63LL));
	_22943_size = 4LL;
	return std::make_tuple(_22934_r,_22943_size);
}



inline std::tuple<jule::I32,jule::Int> _1106ed100_decode_last_rune(jule::Slice<jule::U8> _27625_p) {
	jule::Int _27647_size = jule::Int();
	jule::I32 _27638_r = jule::I32();
	if (_27625_p.len() == 0LL) {
		_27638_r = 65533LL;
		_27647_size = 0LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I64 _2809_end = _27625_p.len();
	jule::I64 _28113_start = _2809_end - 1LL;
	_27638_r=static_cast<jule::I32>(_27625_p[static_cast<jule::Int>(_28113_start)]);
	if (_27638_r < 128LL) {
		_27638_r = _27638_r;
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I64 _28913_lim = _2809_end - 4LL;
	if (_28913_lim < 0LL) {
		_28913_lim=0LL;
	}
	(_28113_start)--;
	_iter_begin_4598386880:;
	if (!(_28113_start >= _28913_lim)) { goto _iter_end_4598386880; }
	{
		if (_1106ed100_rune_start(_27625_p[static_cast<jule::Int>(_28113_start)])) {
			goto _iter_end_4598386880;
		}
	}
	_iter_next_4598386880:;
	(_28113_start)--;
	goto _iter_begin_4598386880;
	_iter_end_4598386880:;
	if (_28113_start < 0LL) {
		_28113_start=0LL;
	}
	std::tie(_27638_r,_27647_size) = _1106ed100_decode_rune(_27625_p.slice(static_cast<jule::Int>(_28113_start),static_cast<jule::Int>(_2809_end)));
	if ((_28113_start + _27647_size) != _2809_end) {
		_27638_r = 65533LL;
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	_27638_r = _27638_r;
	_27647_size = _27647_size;
	return std::make_tuple(_27638_r,_27647_size);
}



inline std::tuple<jule::I32,jule::Int> _1106ed100_decode_last_rune_str(jule::Str _31729_s) {
	jule::Int _31748_size = jule::Int();
	jule::I32 _31739_r = jule::I32();
	if (_31729_s.len() == 0LL) {
		_31739_r = 65533LL;
		_31748_size = 0LL;
		return std::make_tuple(_31739_r,_31748_size);
	}
	jule::I64 _3219_end = _31729_s.len();
	jule::I64 _32213_start = _3219_end - 1LL;
	_31739_r=static_cast<jule::I32>(_31729_s[static_cast<jule::Int>(_32213_start)]);
	if (_31739_r < 128LL) {
		_31739_r = _31739_r;
		_31748_size = 1LL;
		return std::make_tuple(_31739_r,_31748_size);
	}
	jule::I64 _33013_lim = _3219_end - 4LL;
	if (_33013_lim < 0LL) {
		_33013_lim=0LL;
	}
	(_32213_start)--;
	_iter_begin_4598404320:;
	if (!(_32213_start >= _33013_lim)) { goto _iter_end_4598404320; }
	{
		if (_1106ed100_rune_start(_31729_s[static_cast<jule::Int>(_32213_start)])) {
			goto _iter_end_4598404320;
		}
	}
	_iter_next_4598404320:;
	(_32213_start)--;
	goto _iter_begin_4598404320;
	_iter_end_4598404320:;
	if (_32213_start < 0LL) {
		_32213_start=0LL;
	}
	std::tie(_31739_r,_31748_size) = _1106ed100_decode_rune_str(_31729_s.slice(static_cast<jule::Int>(_32213_start),static_cast<jule::Int>(_3219_end)));
	if ((_32213_start + _31748_size) != _3219_end) {
		_31739_r = 65533LL;
		_31748_size = 1LL;
		return std::make_tuple(_31739_r,_31748_size);
	}
	_31739_r = _31739_r;
	_31748_size = _31748_size;
	return std::make_tuple(_31739_r,_31748_size);
}



inline jule::Int _1106ed100_rune_len(jule::I32 _35217_r) {
	{
		if (!((_35217_r < 0LL))) { goto _case_end_4598413120; }
		_case_begin_4598413120:;
		{
			return -1LL;
		}
		goto _match_end_4598410704;
		_case_end_4598413120:;
		if (!((_35217_r <= 127LLU))) { goto _case_end_4598413392; }
		_case_begin_4598413392:;
		{
			return 1LL;
		}
		goto _match_end_4598410704;
		_case_end_4598413392:;
		if (!((_35217_r <= 2047LL))) { goto _case_end_4598413504; }
		_case_begin_4598413504:;
		{
			return 2LL;
		}
		goto _match_end_4598410704;
		_case_end_4598413504:;
		if (!(((55296LL <= _35217_r) && (_35217_r <= 57343LL)))) { goto _case_end_4598413616; }
		_case_begin_4598413616:;
		{
			return -1LL;
		}
		goto _match_end_4598410704;
		_case_end_4598413616:;
		if (!((_35217_r <= 65535LL))) { goto _case_end_4598412608; }
		_case_begin_4598412608:;
		{
			return 3LL;
		}
		goto _match_end_4598410704;
		_case_end_4598412608:;
		if (!((_35217_r <= 1114111LL))) { goto _case_end_4598412720; }
		_case_begin_4598412720:;
		{
			return 4LL;
		}
		goto _match_end_4598410704;
		_case_end_4598412720:;
		_case_begin_4598411600:;
		{
			return -1LL;
		}
		goto _match_end_4598410704;
		_case_end_4598411600:;
		_match_end_4598410704:;
	}
}



inline jule::Int _1106ed100_encode_rune(jule::Slice<jule::U8> _36724_p,jule::I32 _36739_r) {
	jule::U32 _3699_i = static_cast<jule::U32>(_36739_r);
	{
		if (!((_3699_i <= 127LLU))) { goto _case_end_4598425664; }
		_case_begin_4598425664:;
		{
			_36724_p[0LL]=static_cast<jule::U8>(_36739_r);
			return 1LL;
		}
		goto _match_end_4598419936;
		_case_end_4598425664:;
		if (!((_3699_i <= 2047LL))) { goto _case_end_4598420416; }
		_case_begin_4598420416:;
		{
			_36724_p[0LL]=static_cast<jule::U8>(192LL | static_cast<jule::U8>(_36739_r >> 6LL));
			_36724_p[1LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
			return 2LL;
		}
		goto _match_end_4598419936;
		_case_end_4598420416:;
		if (!((_3699_i > 1114111LL) || ((55296LL <= _3699_i) && (_3699_i <= 57343LL)))) { goto _case_end_4598420528; }
		_case_begin_4598420528:;
		{
			_36739_r=65533LL;
			goto _case_begin_4598420640;
		}
		goto _match_end_4598419936;
		_case_end_4598420528:;
		if (!((_3699_i <= 65535LL))) { goto _case_end_4598420640; }
		_case_begin_4598420640:;
		{
			_36724_p[0LL]=static_cast<jule::U8>(224LL | static_cast<jule::U8>(_36739_r >> 12LL));
			_36724_p[1LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 6LL) & 63LL));
			_36724_p[2LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
			return 3LL;
		}
		goto _match_end_4598419936;
		_case_end_4598420640:;
		_case_begin_4598420112:;
		{
			_36724_p[0LL]=static_cast<jule::U8>(240LL | static_cast<jule::U8>(_36739_r >> 18LL));
			_36724_p[1LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 12LL) & 63LL));
			_36724_p[2LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 6LL) & 63LL));
			_36724_p[3LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
			return 4LL;
		}
		goto _match_end_4598419936;
		_case_end_4598420112:;
		_match_end_4598419936:;
	}
}



inline jule::Slice<jule::U8> _1106ed100_append_rune(jule::Slice<jule::U8> _39824_p,jule::I32 _39835_r) {
	if (static_cast<jule::U32>(_39835_r) <= 127LLU) {
		return jule::append(_39824_p,jule::Slice<jule::U8>({static_cast<jule::U8>(_39835_r)}));
	}
	return _1106ed100_append_rune_non_ascii(_39824_p,_39835_r);
}



inline jule::Slice<jule::U8> _1106ed100_append_rune_non_ascii(jule::Slice<jule::U8> _40530_p,jule::I32 _40545_r) {
	jule::U32 _4079_i = static_cast<jule::U32>(_40545_r);
	{
		if (!((_4079_i <= 2047LL))) { goto _case_end_4598443120; }
		_case_begin_4598443120:;
		{
			return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(192LL | static_cast<jule::U8>(_40545_r >> 6LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
		}
		goto _match_end_4598442656;
		_case_end_4598443120:;
		if (!((_4079_i > 1114111LL) || ((55296LL <= _4079_i) && (_4079_i <= 57343LL)))) { goto _case_end_4598443232; }
		_case_begin_4598443232:;
		{
			_40545_r=65533LL;
			goto _case_begin_4598443344;
		}
		goto _match_end_4598442656;
		_case_end_4598443232:;
		if (!((_4079_i <= 65535LL))) { goto _case_end_4598443344; }
		_case_begin_4598443344:;
		{
			return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(224LL | static_cast<jule::U8>(_40545_r >> 12LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
		}
		goto _match_end_4598442656;
		_case_end_4598443344:;
		_case_begin_4598442816:;
		{
			return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(240LL | static_cast<jule::U8>(_40545_r >> 18LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 12LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
		}
		goto _match_end_4598442656;
		_case_end_4598442816:;
		_match_end_4598442656:;
	}
}



inline jule::Int _1106ed100_rune_count(jule::Slice<jule::U8> _42319_p) {
	jule::Int _42332_n = jule::Int();
	jule::Int _42413_i = 0LL;
	_iter_begin_4598443920:;
	if (!(_42413_i < _42319_p.len())) { goto _iter_end_4598443920; }
	{
		(_42332_n)++;
		jule::U8 _42717_c = _42319_p[static_cast<jule::Int>(_42413_i)];
		if (_42717_c < 128LL) {
			(_42413_i)++;
			goto _iter_next_4598443920;
		}
		jule::U8 _43313_x = _1106ed100_FIRST[static_cast<jule::Int>(_42717_c)];
		if (_43313_x == 241LL) {
			(_42413_i)++;
			goto _iter_next_4598443920;
		}
		jule::Int _43817_size = static_cast<jule::Int>(_43313_x & 7LL);
		if ((_42413_i + _43817_size) > _42319_p.len()) {
			(_42413_i)++;
			goto _iter_next_4598443920;
		}
		_1106ed100_accept_range _44313_accept = _1106ed100_ACCEPT_RANGES[static_cast<jule::Int>(_43313_x >> 4LL)];
		_42717_c=_42319_p[static_cast<jule::Int>(_42413_i + 1LL)];
		if ((_42717_c < _44313_accept._field_lo) || (_44313_accept._field_hi < _42717_c)) {
			_43817_size=1LL;
		} else if (_43817_size == 2LL) {
		} else {
			_42717_c=_42319_p[static_cast<jule::Int>(_42413_i + 2LL)];
			if ((_42717_c < 128LL) || (191LL < _42717_c)) {
				_43817_size=1LL;
			} else if (_43817_size == 3LL) {
			} else {
				_42717_c=_42319_p[static_cast<jule::Int>(_42413_i + 3LL)];
				if ((_42717_c < 128LL) || (191LL < _42717_c)) {
					_43817_size=1LL;
				}
			}
		}
		_42413_i+=_43817_size;
	}
	_iter_next_4598443920:;
	goto _iter_begin_4598443920;
	_iter_end_4598443920:;
	_42332_n = _42332_n;
	return _42332_n;
}



inline jule::Int _1106ed100_rune_count_str(jule::Str _46623_s) {
	jule::Int _46633_n = jule::Int();
	jule::Int _46713_i = 0LL;
	_iter_begin_4598478624:;
	if (!(_46713_i < _46623_s.len())) { goto _iter_end_4598478624; }
	{
		jule::U8 _46917_c = _46623_s[static_cast<jule::Int>(_46713_i)];
		if (_46917_c < 128LL) {
			(_46713_i)++;
			goto _iter_next_4598478624;
		}
		jule::U8 _47513_x = _1106ed100_FIRST[static_cast<jule::Int>(_46917_c)];
		if (_47513_x == 241LL) {
			(_46713_i)++;
			goto _iter_next_4598478624;
		}
		jule::Int _48017_size = static_cast<jule::Int>(_47513_x & 7LL);
		if ((_46713_i + _48017_size) > _46623_s.len()) {
			(_46713_i)++;
			goto _iter_next_4598478624;
		}
		_1106ed100_accept_range _48513_accept = _1106ed100_ACCEPT_RANGES[static_cast<jule::Int>(_47513_x >> 4LL)];
		_46917_c=_46623_s[static_cast<jule::Int>(_46713_i + 1LL)];
		if ((_46917_c < _48513_accept._field_lo) || (_48513_accept._field_hi < _46917_c)) {
			_48017_size=1LL;
		} else if (_48017_size == 2LL) {
		} else {
			_46917_c=_46623_s[static_cast<jule::Int>(_46713_i + 2LL)];
			if ((_46917_c < 128LL) || (191LL < _46917_c)) {
				_48017_size=1LL;
			} else if (_48017_size == 3LL) {
			} else {
				_46917_c=_46623_s[static_cast<jule::Int>(_46713_i + 3LL)];
				if ((_46917_c < 128LL) || (191LL < _46917_c)) {
					_48017_size=1LL;
				}
			}
		}
		_46713_i+=_48017_size;
	}
	_iter_next_4598478624:;
	(_46633_n)++;
	goto _iter_begin_4598478624;
	_iter_end_4598478624:;
	_46633_n = _46633_n;
	return _46633_n;
}



inline jule::Bool _1106ed100_rune_start(jule::U8 _51019_b) {
	return (_51019_b & 192LL) != 128LL;
}



inline jule::Bool _1106ed100_valid(jule::Slice<jule::U8> _51314_p) {
	jule::Slice<jule::U8> _51613_cp = (*((&(_51314_p))));
	_iter_begin_4598498928:;
	if (!(_51613_cp.len() >= 8LL)) { goto _iter_end_4598498928; }
	{
		jule::U32 _52213_first32 = ((static_cast<jule::U32>(_51613_cp[0LL]) | (static_cast<jule::U32>(_51613_cp[1LL]) << 8LL)) | (static_cast<jule::U32>(_51613_cp[2LL]) << 16LL)) | (static_cast<jule::U32>(_51613_cp[3LL]) << 24LL);
		jule::U32 _52313_second32 = ((static_cast<jule::U32>(_51613_cp[4LL]) | (static_cast<jule::U32>(_51613_cp[5LL]) << 8LL)) | (static_cast<jule::U32>(_51613_cp[6LL]) << 16LL)) | (static_cast<jule::U32>(_51613_cp[7LL]) << 24LL);
		if (((_52213_first32 | _52313_second32) & 2155905152LL) != 0LL) {
			goto _iter_end_4598498928;
		}
		_51613_cp=_51613_cp.slice(8LL);
	}
	_iter_next_4598498928:;
	goto _iter_begin_4598498928;
	_iter_end_4598498928:;
	jule::Int _53013_i = 0LL;
	_iter_begin_4598509520:;
	if (!(_53013_i < _51613_cp.len())) { goto _iter_end_4598509520; }
	{
		jule::U8 _53213_pi = _51613_cp[static_cast<jule::Int>(_53013_i)];
		if (_53213_pi < 128LL) {
			(_53013_i)++;
			goto _iter_next_4598509520;
		}
		jule::U8 _53713_x = _1106ed100_FIRST[static_cast<jule::Int>(_53213_pi)];
		if (_53713_x == 241LL) {
			return false;
		}
		jule::Int _54113_size = static_cast<jule::Int>(_53713_x & 7LL);
		if ((_53013_i + _54113_size) > _51613_cp.len()) {
			return false;
		}
		_1106ed100_accept_range _54513_accept = _1106ed100_ACCEPT_RANGES[static_cast<jule::Int>(_53713_x >> 4LL)];
		jule::U8 _54617_c = _51613_cp[static_cast<jule::Int>(_53013_i + 1LL)];
		if ((_54617_c < _54513_accept._field_lo) || (_54513_accept._field_hi < _54617_c)) {
			return false;
		} else if (_54113_size == 2LL) {
		} else {
			_54617_c=_51613_cp[static_cast<jule::Int>(_53013_i + 2LL)];
			if ((_54617_c < 128LL) || (191LL < _54617_c)) {
				return false;
			} else if (_54113_size == 3LL) {
			} else {
				_54617_c=_51613_cp[static_cast<jule::Int>(_53013_i + 3LL)];
				if ((_54617_c < 128LL) || (191LL < _54617_c)) {
					return false;
				}
			}
		}
		_53013_i+=_54113_size;
	}
	_iter_next_4598509520:;
	goto _iter_begin_4598509520;
	_iter_end_4598509520:;
	return true;
}



inline jule::Bool _1106ed100_valid_str(jule::Str _56822_s) {
	_iter_begin_4598530368:;
	if (!(_56822_s.len() >= 8LL)) { goto _iter_end_4598530368; }
	{
		jule::U32 _57313_first32 = ((static_cast<jule::U32>(_56822_s[0LL]) | (static_cast<jule::U32>(_56822_s[1LL]) << 8LL)) | (static_cast<jule::U32>(_56822_s[2LL]) << 16LL)) | (static_cast<jule::U32>(_56822_s[3LL]) << 24LL);
		jule::U32 _57413_second32 = ((static_cast<jule::U32>(_56822_s[4LL]) | (static_cast<jule::U32>(_56822_s[5LL]) << 8LL)) | (static_cast<jule::U32>(_56822_s[6LL]) << 16LL)) | (static_cast<jule::U32>(_56822_s[7LL]) << 24LL);
		if (((_57313_first32 | _57413_second32) & 2155905152LL) != 0LL) {
			goto _iter_end_4598530368;
		}
		_56822_s=_56822_s.slice(8LL);
	}
	_iter_next_4598530368:;
	goto _iter_begin_4598530368;
	_iter_end_4598530368:;
	jule::Int _58113_i = 0LL;
	_iter_begin_4598541712:;
	if (!(_58113_i < _56822_s.len())) { goto _iter_end_4598541712; }
	{
		jule::U8 _58313_si = _56822_s[static_cast<jule::Int>(_58113_i)];
		if (_58313_si < 128LL) {
			(_58113_i)++;
			goto _iter_next_4598541712;
		}
		jule::U8 _58813_x = _1106ed100_FIRST[static_cast<jule::Int>(_58313_si)];
		if (_58813_x == 241LL) {
			return false;
		}
		jule::Int _59213_size = static_cast<jule::Int>(_58813_x & 7LL);
		if ((_58113_i + _59213_size) > _56822_s.len()) {
			return false;
		}
		_1106ed100_accept_range _59613_accept = _1106ed100_ACCEPT_RANGES[static_cast<jule::Int>(_58813_x >> 4LL)];
		jule::U8 _59717_c = _56822_s[static_cast<jule::Int>(_58113_i + 1LL)];
		if ((_59717_c < _59613_accept._field_lo) || (_59613_accept._field_hi < _59717_c)) {
			return false;
		} else if (_59213_size == 2LL) {
		} else {
			_59717_c=_56822_s[static_cast<jule::Int>(_58113_i + 2LL)];
			if ((_59717_c < 128LL) || (191LL < _59717_c)) {
				return false;
			} else if (_59213_size == 3LL) {
			} else {
				_59717_c=_56822_s[static_cast<jule::Int>(_58113_i + 3LL)];
				if ((_59717_c < 128LL) || (191LL < _59717_c)) {
					return false;
				}
			}
		}
		_58113_i+=_59213_size;
	}
	_iter_next_4598541712:;
	goto _iter_begin_4598541712;
	_iter_end_4598541712:;
	return true;
}



inline jule::Bool _1106ed100_valid_rune(jule::I32 _62019_r) {
	{
		if (!(((0LL <= _62019_r) && (_62019_r < 55296LL)))) { goto _case_end_4598563552; }
		_case_begin_4598563552:;
		{
			return true;
		}
		goto _match_end_4598563088;
		_case_end_4598563552:;
		if (!(((57343LL < _62019_r) && (_62019_r <= 1114111LL)))) { goto _case_end_4598563664; }
		_case_begin_4598563664:;
		{
			return true;
		}
		goto _match_end_4598563088;
		_case_end_4598563664:;
		_case_begin_4598563200:;
		{
			return false;
		}
		goto _match_end_4598563088;
		_case_end_4598563200:;
		_match_end_4598563088:;
	}
}



inline jule::Bool _1106ec050_is_unary_op(jule::Str _31020_kind) {
	{
		auto __julec_range_expr = _1106ec050_UNARY_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1106ec050_op = *__julec_range_begin;
			_iter_begin_4598953696:;
			{
				if (_31020_kind == _1106ec050_op) {
					return true;
				}
			}
			_iter_next_4598953696:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1106ec050_op = *__julec_range_begin; goto _iter_begin_4598953696; }
			_iter_end_4598953696:;
		}
	}
	return false;
}



inline jule::Bool _1106ec050_is_bin_op(jule::Str _32118_kind) {
	{
		auto __julec_range_expr = _1106ec050_BIN_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1106ec050_op = *__julec_range_begin;
			_iter_begin_4598955296:;
			{
				if (_32118_kind == _1106ec050_op) {
					return true;
				}
			}
			_iter_next_4598955296:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1106ec050_op = *__julec_range_begin; goto _iter_begin_4598955296; }
			_iter_end_4598955296:;
		}
	}
	return false;
}



inline jule::Bool _1106ec050_is_weak_op(jule::Str _33219_kind) {
	{
		auto __julec_range_expr = _1106ec050_WEAK_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1106ec050_op = *__julec_range_begin;
			_iter_begin_4598957984:;
			{
				if (_33219_kind == _1106ec050_op) {
					return true;
				}
			}
			_iter_next_4598957984:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1106ec050_op = *__julec_range_begin; goto _iter_begin_4598957984; }
			_iter_end_4598957984:;
		}
	}
	return false;
}



inline jule::Bool _1106ec050_is_str(jule::Str _34315_k) {
	return (_34315_k != jule::Str("", 0)) && ((_34315_k[0LL] == '\"') || _1106ec050_is_raw_str(_34315_k));
}



inline jule::Bool _1106ec050_is_raw_str(jule::Str _34519_k) {
	return (_34519_k != jule::Str("", 0)) && (_34519_k[0LL] == '`');
}



inline jule::Bool _1106ec050_is_rune(jule::Str _34816_k) {
	return (_34816_k != jule::Str("", 0)) && (_34816_k[0LL] == '\'');
}



inline jule::Bool _1106ec050_is_nil(jule::Str _35015_k) {
	return _35015_k == jule::Str("nil", 3);
}



inline jule::Bool _1106ec050_is_bool(jule::Str _35216_k) {
	return (_35216_k == jule::Str("true", 4)) || (_35216_k == jule::Str("false", 5));
}



inline jule::Bool _1106ec050_contains_any(jule::Str _35417_s,jule::Str _35425_bytes) {
	{
		auto __julec_range_expr = _35425_bytes;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::U8 _1106ec050_b = *__julec_range_begin;
			_iter_begin_4598967472:;
			{
				jule::Int _35613_i = _35417_s.find(static_cast<jule::Str>(_1106ec050_b));
				if (_35613_i >= 0LL) {
					return true;
				}
			}
			_iter_next_4598967472:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1106ec050_b = *__julec_range_begin; goto _iter_begin_4598967472; }
			_iter_end_4598967472:;
		}
	}
	return false;
}



inline jule::Bool _1106ec050_is_float(jule::Str _36617_k) {
	if (_36617_k.has_prefix(jule::Str("0x", 2))) {
		return _1106ec050_contains_any(_36617_k,jule::Str(".pP", 3));
	}
	return _1106ec050_contains_any(_36617_k,jule::Str(".eE", 3));
}



inline jule::Bool _1106ec050_is_num(jule::Str _37515_k) {
	if (_37515_k == jule::Str("", 0)) {
		return false;
	}
	jule::U8 _3809_b = _37515_k[0LL];
	return (_3809_b == '.') || (('0' <= _3809_b) && (_3809_b <= '9'));
}



inline jule::Bool _1106ec050_is_lit(jule::Str _38515_k) {
	return (((_1106ec050_is_num(_38515_k) || _1106ec050_is_str(_38515_k)) || _1106ec050_is_rune(_38515_k)) || _1106ec050_is_nil(_38515_k)) || _1106ec050_is_bool(_38515_k);
}



inline jule::Bool _1106ec050_is_ignore_ident(jule::Str _39024_ident) {
	return _39024_ident == jule::Str("_", 1);
}



inline jule::Bool _1106ec050_is_anon_ident(jule::Str _39222_ident) {
	return _39222_ident == jule::Str("<anonymous>", 11);
}



inline jule::Bool _1106ec050_is_punct(jule::I32 _39517_r) {
	{
		auto __julec_range_expr = _1106ec050_PUNCTS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::I32 _1106ec050_cr = *__julec_range_begin;
			_iter_begin_4598985984:;
			{
				if (_39517_r == _1106ec050_cr) {
					return true;
				}
			}
			_iter_next_4598985984:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1106ec050_cr = *__julec_range_begin; goto _iter_begin_4598985984; }
			_iter_end_4598985984:;
		}
	}
	return false;
}



inline jule::Bool _1106ec050_is_space(jule::I32 _40617_r) {
	{
		auto __julec_range_expr = _1106ec050_SPACES;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::I32 _1106ec050_cr = *__julec_range_begin;
			_iter_begin_4598970944:;
			{
				if (_40617_r == _1106ec050_cr) {
					return true;
				}
			}
			_iter_next_4598970944:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1106ec050_cr = *__julec_range_begin; goto _iter_begin_4598970944; }
			_iter_end_4598970944:;
		}
	}
	return false;
}



inline jule::Bool _1106ec050_is_letter(jule::I32 _41718_r) {
	return (('a' <= _41718_r) && (_41718_r <= 'z')) || (('A' <= _41718_r) && (_41718_r <= 'Z'));
}



inline jule::Bool _1106ec050_is_ident_rune(jule::Str _42322_s) {
	if (_42322_s == jule::Str("", 0)) {
		return false;
	}
	if (_42322_s[0LL] != '_') {
		jule::I32 _42914_r;
		std::tie(_42914_r,std::ignore) = _1106ed100_decode_rune_str(_42322_s);
		if ((!(_1106ec050_is_letter(_42914_r)))) {
			return false;
		}
	}
	return true;
}



inline jule::Bool _1106ec050_is_decimal(jule::U8 _43919_b) {
	return ('0' <= _43919_b) && (_43919_b <= '9');
}



inline jule::Bool _1106ec050_is_binary(jule::U8 _44118_b) {
	return (_44118_b == '0') || (_44118_b == '1');
}



inline jule::Bool _1106ec050_is_octal(jule::U8 _44317_b) {
	return ('0' <= _44317_b) && (_44317_b <= '7');
}



inline jule::Bool _1106ec050_is_hex(jule::U8 _44615_b) {
	{
		if (!((('0' <= _44615_b) && (_44615_b <= '9')))) { goto _case_end_4599003296; }
		_case_begin_4599003296:;
		{
			return true;
		}
		goto _match_end_4599001376;
		_case_end_4599003296:;
		if (!((('a' <= _44615_b) && (_44615_b <= 'f')))) { goto _case_end_4599003408; }
		_case_begin_4599003408:;
		{
			return true;
		}
		goto _match_end_4599001376;
		_case_end_4599003408:;
		if (!((('A' <= _44615_b) && (_44615_b <= 'F')))) { goto _case_end_4599003520; }
		_case_begin_4599003520:;
		{
			return true;
		}
		goto _match_end_4599001376;
		_case_end_4599003520:;
		_case_begin_4599001472:;
		{
			return false;
		}
		goto _match_end_4599001376;
		_case_end_4599001472:;
		_match_end_4599001376:;
	}
}



inline jule::Bool _1106ec050_is_assign(jule::Uint _45818_id) {
	return ((((((_45818_id == 2LLU) || (_45818_id == 31LLU)) || (_45818_id == 34LLU)) || (_45818_id == 20LLU)) || (_45818_id == 28LLU)) || (_45818_id == 3LLU)) || (_45818_id == 7LLU);
}



inline jule::Bool _1106ec050_is_postfix_op(jule::Str _47122_kind) {
	{
		auto __julec_range_expr = _1106ec050_POSTFIX_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1106ec050_op = *__julec_range_begin;
			_iter_begin_4599008064:;
			{
				if (_47122_kind == _1106ec050_op) {
					return true;
				}
			}
			_iter_next_4599008064:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1106ec050_op = *__julec_range_begin; goto _iter_begin_4599008064; }
			_iter_end_4599008064:;
		}
	}
	return false;
}



inline jule::Bool _1106ec050_is_assign_op(jule::Str _48221_kind) {
	if (_1106ec050_is_postfix_op(_48221_kind)) {
		return true;
	}
	{
		auto __julec_range_expr = _1106ec050_ASSING_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1106ec050_op = *__julec_range_begin;
			_iter_begin_4599013808:;
			{
				if (_48221_kind == _1106ec050_op) {
					return true;
				}
			}
			_iter_next_4599013808:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1106ec050_op = *__julec_range_begin; goto _iter_begin_4599013808; }
			_iter_end_4599013808:;
		}
	}
	return false;
}



inline jule::Ref<_11054ec70_File> _11054ec70_new_file_set(jule::Str _6521_path) {
	return jule::new_struct<_11054ec70_File>(new( std::nothrow ) _11054ec70_File(jule::Slice<jule::U8>(),_6521_path,_1108ddf20_Vector_0()));
}



inline _127e05da0_Log _11054eff0_make_err(jule::Int _10413_row,jule::Int _10423_col,jule::Ref<_11054ec70_File> _10433_f,jule::Str _10443_fmt,jule::Slice<jule::Any> _10456_args) {
	return _127e05da0_Log(1LLU,_10413_row,_10423_col,_10433_f->_method_path(),_127e05da0_logf(_10443_fmt,_10456_args),jule::Str(),jule::Str());
}



inline jule::Bool _11054eff0_bytes_has_prefix(jule::Slice<jule::U8> _11421_bytes,jule::Str _11436_prefix) {
	if (_11421_bytes.len() < _11436_prefix.len()) {
		return false;
	}
	{
		auto __julec_range_expr = _11436_prefix;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11054eff0_i = 0;
			_iter_begin_4599025136:;
			{
				if (_11421_bytes[static_cast<jule::Int>(_11054eff0_i)] != _11436_prefix[static_cast<jule::Int>(_11054eff0_i)]) {
					return false;
				}
			}
			_iter_next_4599025136:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11054eff0_i; goto _iter_begin_4599025136; }
			_iter_end_4599025136:;
		}
	}
	return true;
}



inline jule::Str _11054eff0_float_fmt_e(jule::Slice<jule::U8> _12616_txt,jule::Int _12633_i) {
	jule::Str _12643_lit = jule::Str();
	(_12633_i)++;
	if (_12633_i >= _12616_txt.len()) {
		return _12643_lit;
	}
	jule::U8 _1329_b = _12616_txt[static_cast<jule::Int>(_12633_i)];
	if ((_1329_b == '+') || (_1329_b == '-')) {
		(_12633_i)++;
		if (_12633_i >= _12616_txt.len()) {
			return _12643_lit;
		}
	}
	jule::Int _1409_first = _12633_i;
	_iter_begin_4599033920:;
	if (!(_12633_i < _12616_txt.len())) { goto _iter_end_4599033920; }
	{
		jule::U8 _14213_b = _12616_txt[static_cast<jule::Int>(_12633_i)];
		if ((!(_1106ec050_is_decimal(_14213_b)))) {
			goto _iter_end_4599033920;
		}
	}
	_iter_next_4599033920:;
	(_12633_i)++;
	goto _iter_begin_4599033920;
	_iter_end_4599033920:;
	if (_12633_i == _1409_first) {
		_12643_lit = jule::Str("", 0);
		return _12643_lit;
	}
	_12643_lit = static_cast<jule::Str>(_12616_txt.slice(0LL,static_cast<jule::Int>(_12633_i)));
	return _12643_lit;
}



inline jule::Str _11054eff0_float_fmt_p(jule::Slice<jule::U8> _15416_txt,jule::Int _15429_i) {
	return _11054eff0_float_fmt_e(_15416_txt,_15429_i);
}



inline jule::Str _11054eff0_float_fmt_dotnp(jule::Slice<jule::U8> _15620_txt,jule::Int _15637_i) {
	if (_15620_txt[static_cast<jule::Int>(_15637_i)] != '.') {
		return jule::Str("", 0);
	}
	(_15637_i)++;
	_julec_label_loop:;
	_iter_begin_4599044720:;
	if (!(_15637_i < _15620_txt.len())) { goto _iter_end_4599044720; }
	{
		jule::U8 _16413_b = _15620_txt[static_cast<jule::Int>(_15637_i)];
		{
			if (!((_1106ec050_is_decimal(_16413_b)))) { goto _case_end_4599048576; }
			_case_begin_4599048576:;
			{
				goto _iter_next_4599044720;
			}
			goto _match_end_4599048032;
			_case_end_4599048576:;
			if (!((_11054eff0_is_float_fmt_p(_16413_b,_15637_i)))) { goto _case_end_4599048688; }
			_case_begin_4599048688:;
			{
				return _11054eff0_float_fmt_p(_15620_txt,_15637_i);
			}
			goto _match_end_4599048032;
			_case_end_4599048688:;
			_case_begin_4599048224:;
			{
				goto _iter_end_4599044720;
			}
			goto _match_end_4599048032;
			_case_end_4599048224:;
			_match_end_4599048032:;
		}
	}
	_iter_next_4599044720:;
	(_15637_i)++;
	goto _iter_begin_4599044720;
	_iter_end_4599044720:;
	return jule::Str("", 0);
}



inline jule::Str _11054eff0_float_fmt_dotfp(jule::Slice<jule::U8> _17420_txt,jule::Int _17437_i) {
	_17437_i+=2LL;
	return _11054eff0_float_fmt_e(_17420_txt,_17437_i);
}



inline jule::Str _11054eff0_float_fmt_dotp(jule::Slice<jule::U8> _18119_txt,jule::Int _18136_i) {
	(_18136_i)++;
	return _11054eff0_float_fmt_e(_18119_txt,_18136_i);
}



inline jule::Str _11054eff0_float_num(jule::Slice<jule::U8> _18814_txt,jule::Int _18831_i) {
	jule::Str _18841_lit = jule::Str();
	(_18831_i)++;
	_iter_begin_4599074848:;
	if (!(_18831_i < _18814_txt.len())) { goto _iter_end_4599074848; }
	{
		jule::U8 _19113_b = _18814_txt[static_cast<jule::Int>(_18831_i)];
		if ((_18831_i > 1LL) && ((_19113_b == 'e') || (_19113_b == 'E'))) {
			_18841_lit = _11054eff0_float_fmt_e(_18814_txt,_18831_i);
			return _18841_lit;
		}
		if ((!(_1106ec050_is_decimal(_19113_b)))) {
			goto _iter_end_4599074848;
		}
	}
	_iter_next_4599074848:;
	(_18831_i)++;
	goto _iter_begin_4599074848;
	_iter_end_4599074848:;
	if (_18831_i == 1LL) {
		return _18841_lit;
	}
	_18841_lit = static_cast<jule::Str>(_18814_txt.slice(0LL,static_cast<jule::Int>(_18831_i)));
	return _18841_lit;
}



inline jule::Str _11054eff0_common_num(jule::Slice<jule::U8> _20615_txt) {
	jule::Str _20630_lit = jule::Str();
	jule::Int _20713_i = 0LL;
	_julec_label_loop:;
	_iter_begin_4599083568:;
	if (!(_20713_i < _20615_txt.len())) { goto _iter_end_4599083568; }
	{
		jule::U8 _21013_b = _20615_txt[static_cast<jule::Int>(_20713_i)];
		{
			if (!((_21013_b == '.'))) { goto _case_end_4599086432; }
			_case_begin_4599086432:;
			{
				_20630_lit = _11054eff0_float_num(_20615_txt,_20713_i);
				return _20630_lit;
			}
			goto _match_end_4599086176;
			_case_end_4599086432:;
			if (!((_11054eff0_is_float_fmt_e(_21013_b,_20713_i)))) { goto _case_end_4599086544; }
			_case_begin_4599086544:;
			{
				_20630_lit = _11054eff0_float_fmt_e(_20615_txt,_20713_i);
				return _20630_lit;
			}
			goto _match_end_4599086176;
			_case_end_4599086544:;
			if (!(((!(_1106ec050_is_decimal(_21013_b)))))) { goto _case_end_4599086656; }
			_case_begin_4599086656:;
			{
				goto _iter_end_4599083568;
			}
			goto _match_end_4599086176;
			_case_end_4599086656:;
			_match_end_4599086176:;
		}
	}
	_iter_next_4599083568:;
	(_20713_i)++;
	goto _iter_begin_4599083568;
	_iter_end_4599083568:;
	if (_20713_i == 0LL) {
		return _20630_lit;
	}
	_20630_lit = static_cast<jule::Str>(_20615_txt.slice(0LL,static_cast<jule::Int>(_20713_i)));
	return _20630_lit;
}



inline jule::Str _11054eff0_binary_num(jule::Slice<jule::U8> _22415_txt) {
	jule::Str _22430_lit = jule::Str();
	if ((!(_11054eff0_bytes_has_prefix(_22415_txt,jule::Str("0b", 2))))) {
		_22430_lit = jule::Str("", 0);
		return _22430_lit;
	}
	if (_22415_txt.len() < 2LL) {
		return _22430_lit;
	}
	
	jule::Int _23313_i = 2LL;
	_iter_begin_4599094592:;
	if (!(_23313_i < _22415_txt.len())) { goto _iter_end_4599094592; }
	{
		if ((!(_1106ec050_is_binary(_22415_txt[static_cast<jule::Int>(_23313_i)])))) {
			goto _iter_end_4599094592;
		}
	}
	_iter_next_4599094592:;
	(_23313_i)++;
	goto _iter_begin_4599094592;
	_iter_end_4599094592:;
	if (_23313_i == 2LL) {
		return _22430_lit;
	}
	_22430_lit = static_cast<jule::Str>(_22415_txt.slice(0LL,static_cast<jule::Int>(_23313_i)));
	return _22430_lit;
}



inline jule::Bool _11054eff0_is_float_fmt_e(jule::U8 _24619_b,jule::Int _24628_i) {
	return (_24628_i > 0LL) && ((_24619_b == 'e') || (_24619_b == 'E'));
}



inline jule::Bool _11054eff0_is_float_fmt_p(jule::U8 _24719_b,jule::Int _24728_i) {
	return (_24728_i > 0LL) && ((_24719_b == 'p') || (_24719_b == 'P'));
}



inline jule::Bool _11054eff0_is_float_fmt_dotnp(jule::Slice<jule::U8> _24923_txt,jule::Int _24940_i) {
	if (_24923_txt[static_cast<jule::Int>(_24940_i)] != '.') {
		return false;
	}
	(_24940_i)++;
	_julec_label_loop:;
	_iter_begin_4599108784:;
	if (!(_24940_i < _24923_txt.len())) { goto _iter_end_4599108784; }
	{
		jule::U8 _25713_b = _24923_txt[static_cast<jule::Int>(_24940_i)];
		{
			if (!((_1106ec050_is_decimal(_25713_b)))) { goto _case_end_4599112224; }
			_case_begin_4599112224:;
			{
				goto _iter_next_4599108784;
			}
			goto _match_end_4599111680;
			_case_end_4599112224:;
			if (!((_11054eff0_is_float_fmt_p(_25713_b,_24940_i)))) { goto _case_end_4599112336; }
			_case_begin_4599112336:;
			{
				return true;
			}
			goto _match_end_4599111680;
			_case_end_4599112336:;
			_case_begin_4599111872:;
			{
				goto _iter_end_4599108784;
			}
			goto _match_end_4599111680;
			_case_end_4599111872:;
			_match_end_4599111680:;
		}
	}
	_iter_next_4599108784:;
	(_24940_i)++;
	goto _iter_begin_4599108784;
	_iter_end_4599108784:;
	return false;
}



inline jule::Bool _11054eff0_is_float_fmt_dotp(jule::Slice<jule::U8> _26822_txt,jule::Int _26835_i) {
	{
		if (!((_26822_txt.len() < 3LL))) { goto _case_end_4599117440; }
		_case_begin_4599117440:;
		{
			goto _case_begin_4599117552;
		}
		goto _match_end_4599116928;
		_case_end_4599117440:;
		if (!((_26822_txt[static_cast<jule::Int>(_26835_i)] != '.'))) { goto _case_end_4599117552; }
		_case_begin_4599117552:;
		{
			goto _case_begin_4599117680;
		}
		goto _match_end_4599116928;
		_case_end_4599117552:;
		if (!(((_26822_txt[static_cast<jule::Int>(_26835_i + 1LL)] != 'p') && (_26822_txt[static_cast<jule::Int>(_26835_i + 1LL)] != 'P')))) { goto _case_end_4599117680; }
		_case_begin_4599117680:;
		{
			return false;
		}
		goto _match_end_4599116928;
		_case_end_4599117680:;
		_case_begin_4599117072:;
		{
			return true;
		}
		goto _match_end_4599116928;
		_case_end_4599117072:;
		_match_end_4599116928:;
	}
}



inline jule::Bool _11054eff0_is_float_fmt_dotfp(jule::Slice<jule::U8> _27723_txt,jule::Int _27736_i) {
	{
		if (!((_27723_txt.len() < 4LL))) { goto _case_end_4599124128; }
		_case_begin_4599124128:;
		{
			goto _case_begin_4599124240;
		}
		goto _match_end_4599123600;
		_case_end_4599124128:;
		if (!((_27723_txt[static_cast<jule::Int>(_27736_i)] != '.'))) { goto _case_end_4599124240; }
		_case_begin_4599124240:;
		{
			goto _case_begin_4599124368;
		}
		goto _match_end_4599123600;
		_case_end_4599124240:;
		if (!(((_27723_txt[static_cast<jule::Int>(_27736_i + 1LL)] != 'f') && (_27723_txt[static_cast<jule::Int>(_27736_i + 1LL)] != 'F')))) { goto _case_end_4599124368; }
		_case_begin_4599124368:;
		{
			goto _case_begin_4599125408;
		}
		goto _match_end_4599123600;
		_case_end_4599124368:;
		if (!(((_27723_txt[static_cast<jule::Int>(_27736_i + 2LL)] != 'p') && (_27723_txt[static_cast<jule::Int>(_27736_i + 1LL)] != 'P')))) { goto _case_end_4599125408; }
		_case_begin_4599125408:;
		{
			return false;
		}
		goto _match_end_4599123600;
		_case_end_4599125408:;
		_case_begin_4599123744:;
		{
			return true;
		}
		goto _match_end_4599123600;
		_case_end_4599123744:;
		_match_end_4599123600:;
	}
}



inline jule::Str _11054eff0_octal_num(jule::Slice<jule::U8> _28714_txt) {
	jule::Str _28729_lit = jule::Str();
	if (_28714_txt[0LL] != '0') {
		_28729_lit = jule::Str("", 0);
		return _28729_lit;
	}
	if (_28714_txt.len() < 2LL) {
		return _28729_lit;
	}
	jule::Int _29513_octal_start = 1LL;
	if (_28714_txt[1LL] == 'o') {
		if (_28714_txt.len() < 3LL) {
			return _28729_lit;
		}
		(_29513_octal_start)++;
	}
	jule::Int _30413_i = _29513_octal_start;
	_iter_begin_4599136368:;
	if (!(_30413_i < _28714_txt.len())) { goto _iter_end_4599136368; }
	{
		jule::U8 _30613_b = _28714_txt[static_cast<jule::Int>(_30413_i)];
		if (_11054eff0_is_float_fmt_e(_30613_b,_30413_i)) {
			_28729_lit = _11054eff0_float_fmt_e(_28714_txt,_30413_i);
			return _28729_lit;
		}
		if ((!(_1106ec050_is_octal(_30613_b)))) {
			goto _iter_end_4599136368;
		}
	}
	_iter_next_4599136368:;
	(_30413_i)++;
	goto _iter_begin_4599136368;
	_iter_end_4599136368:;
	if (_30413_i == _29513_octal_start) {
		return _28729_lit;
	}
	_28729_lit = static_cast<jule::Str>(_28714_txt.slice(0LL,static_cast<jule::Int>(_30413_i)));
	return _28729_lit;
}



inline jule::Str _11054eff0_hex_num(jule::Slice<jule::U8> _32112_txt) {
	jule::Str _32127_lit = jule::Str();
	if (_32112_txt.len() < 3LL) {
		return _32127_lit;
	}
	if ((_32112_txt[0LL] != '0') || ((_32112_txt[1LL] != 'x') && (_32112_txt[1LL] != 'X'))) {
		return _32127_lit;
	}
	
	jule::Int _33013_i = 2LL;
	_julec_label_loop:;
	_iter_begin_4599150080:;
	if (!(_33013_i < _32112_txt.len())) { goto _iter_end_4599150080; }
	{
		jule::U8 _33313_b = _32112_txt[static_cast<jule::Int>(_33013_i)];
		{
			if (!((_11054eff0_is_float_fmt_dotp(_32112_txt,_33013_i)))) { goto _case_end_4599152976; }
			_case_begin_4599152976:;
			{
				_32127_lit = _11054eff0_float_fmt_dotp(_32112_txt,_33013_i);
				return _32127_lit;
			}
			goto _match_end_4599152688;
			_case_end_4599152976:;
			if (!((_11054eff0_is_float_fmt_dotfp(_32112_txt,_33013_i)))) { goto _case_end_4599153088; }
			_case_begin_4599153088:;
			{
				_32127_lit = _11054eff0_float_fmt_dotfp(_32112_txt,_33013_i);
				return _32127_lit;
			}
			goto _match_end_4599152688;
			_case_end_4599153088:;
			if (!((_11054eff0_is_float_fmt_p(_33313_b,_33013_i)))) { goto _case_end_4599153200; }
			_case_begin_4599153200:;
			{
				_32127_lit = _11054eff0_float_fmt_p(_32112_txt,_33013_i);
				return _32127_lit;
			}
			goto _match_end_4599152688;
			_case_end_4599153200:;
			if (!((_11054eff0_is_float_fmt_dotnp(_32112_txt,_33013_i)))) { goto _case_end_4599153328; }
			_case_begin_4599153328:;
			{
				_32127_lit = _11054eff0_float_fmt_dotnp(_32112_txt,_33013_i);
				return _32127_lit;
			}
			goto _match_end_4599152688;
			_case_end_4599153328:;
			if (!(((!(_1106ec050_is_hex(_33313_b)))))) { goto _case_end_4599153456; }
			_case_begin_4599153456:;
			{
				goto _iter_end_4599150080;
			}
			goto _match_end_4599152688;
			_case_end_4599153456:;
			_match_end_4599152688:;
		}
	}
	_iter_next_4599150080:;
	(_33013_i)++;
	goto _iter_begin_4599150080;
	_iter_end_4599150080:;
	if (_33013_i == 2LL) {
		return _32127_lit;
	}
	_32127_lit = static_cast<jule::Str>(_32112_txt.slice(0LL,static_cast<jule::Int>(_33013_i)));
	return _32127_lit;
}



inline jule::Str _11054eff0_hex_escape(jule::Slice<jule::U8> _35815_txt,jule::Int _35828_n) {
	jule::Str _35838_seq = jule::Str();
	if (_35815_txt.len() < _35828_n) {
		return _35838_seq;
	}
	
	jule::Int _36413_i = 2LL;
	_iter_begin_4599164352:;
	if (!(_36413_i < _35828_n)) { goto _iter_end_4599164352; }
	{
		if ((!(_1106ec050_is_hex(_35815_txt[static_cast<jule::Int>(_36413_i)])))) {
			return _35838_seq;
		}
	}
	_iter_next_4599164352:;
	(_36413_i)++;
	goto _iter_begin_4599164352;
	_iter_end_4599164352:;
	_35838_seq=static_cast<jule::Str>(_35815_txt.slice(0LL,static_cast<jule::Int>(_35828_n)));
	return _35838_seq;
}



inline jule::Str _11054eff0_big_unicode_point_escape(jule::Slice<jule::U8> _37629_txt) {
	return _11054eff0_hex_escape(_37629_txt,10LL);
}



inline jule::Str _11054eff0_little_unicode_point_escape(jule::Slice<jule::U8> _37832_txt) {
	return _11054eff0_hex_escape(_37832_txt,6LL);
}



inline jule::Str _11054eff0_hex_byte_escape(jule::Slice<jule::U8> _38020_txt) {
	return _11054eff0_hex_escape(_38020_txt,4LL);
}



inline jule::Str _11054eff0_byte_escape(jule::Slice<jule::U8> _38316_txt) {
	jule::Str _38331_seq = jule::Str();
	if (_38316_txt.len() < 4LL) {
		return _38331_seq;
	}
	if (((!(_1106ec050_is_octal(_38316_txt[1LL]))) || (!(_1106ec050_is_octal(_38316_txt[2LL])))) || (!(_1106ec050_is_octal(_38316_txt[3LL])))) {
		return _38331_seq;
	}
	_38331_seq = static_cast<jule::Str>(_38316_txt.slice(0LL,4LL));
	return _38331_seq;
}



inline jule::Slice<_127e05da0_Log> _11054eff0_lex(jule::Ref<_11054ec70_File> _77316_f) {
	if ((!(jule::real(_77316_f)))) {
		return nullptr;
	}
	_11054eff0_Lex _77813_lex = _11054eff0_Lex(_1108ddf20_Vector_0(),_77316_f,0LL,jule::Int(),-1LL,jule::Slice<_127e05da0_Log>());
	_77813_lex._method_new_line();
	_77813_lex._method_lex();
	if (_77813_lex._field_errors.len() > 0LL) {
		return _77813_lex._field_errors;
	}
	_77316_f->_field__tokens=_77813_lex._field_tokens;
	return nullptr;
}



inline jule::Ref<_1106f8b50_FileInfo> _1106f8b50_parse_file(jule::Ref<_11054ec70_File> _2223_f) {
	if ((!(jule::real(_2223_f)))) {
		return jule::new_ref<_1106f8b50_FileInfo>();
	}
	jule::Ref<_1106f8b50_FileInfo> _2713_finf = jule::new_struct<_1106f8b50_FileInfo>(new( std::nothrow ) _1106f8b50_FileInfo());
	std::tie(_2713_finf->_field_ast,_2713_finf->_field_errors) = _1106f8b50_parse_fileset(_2223_f);
	if (_2713_finf->_field_errors.len() > 0LL) {
		jule::drop(_2713_finf->_field_ast);
	}
	return _2713_finf;
}



inline jule::Ref<_1106f8b50_PackageInfo> _1106f8b50_parse_package(jule::Slice<jule::Ref<_11054ec70_File>> _3926_filesets) {
	if (_3926_filesets == nullptr) {
		return jule::new_ref<_1106f8b50_PackageInfo>();
	}
	jule::Ref<_1106f8b50_PackageInfo> _4413_pinf = jule::new_struct<_1106f8b50_PackageInfo>(new( std::nothrow ) _1106f8b50_PackageInfo());
	_4413_pinf->_field_files=jule::Slice<jule::Ref<_1106f8b50_FileInfo>>::alloc(0LL,static_cast<jule::Int>(static_cast<jule::I64>(_3926_filesets.len())));
	{
		auto __julec_range_expr = _3926_filesets;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11054ec70_File> _1106f8b50_f = *__julec_range_begin;
			_iter_begin_4600767552:;
			{
				if ((!(jule::real(_1106f8b50_f)))) {
					goto _iter_next_4600767552;
				}
				jule::Ref<_1106f8b50_FileInfo> _5117_finfo = _1106f8b50_parse_file(_1106f8b50_f);
				_4413_pinf->_field_files=jule::append(_4413_pinf->_field_files,jule::Slice<jule::Ref<_1106f8b50_FileInfo>>({_5117_finfo}));
			}
			_iter_next_4600767552:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1106f8b50_f = *__julec_range_begin; goto _iter_begin_4600767552; }
			_iter_end_4600767552:;
		}
	}
	return _4413_pinf;
}



inline std::tuple<jule::Ref<_1104fada0_Ast>,jule::Slice<_127e05da0_Log>> _1106f8b50_parse_fileset(jule::Ref<_11054ec70_File> _5822_f) {
	jule::Ref<_110754df0_Parser> _5913_p = jule::new_struct<_110754df0_Parser>(new( std::nothrow ) _110754df0_Parser());
	_5913_p->_method_parse(_5822_f);
	return std::make_tuple(_5913_p->_field_ast,_5913_p->_field_errors);
}



inline jule::Ref<_11054f670_ScopeTree> _110709a60_new_scope(void) {
	return jule::new_struct<_11054f670_ScopeTree>(new( std::nothrow ) _11054f670_ScopeTree());
}



inline std::tuple<jule::Bool,jule::Bool> _110709a60_is_st(_1106ec050_Token _4410_current,_1106ec050_Token _4426_prev) {
	jule::Bool _4451_terminated = jule::Bool();
	jule::Bool _4441_ok = jule::Bool();
	_4441_ok=(_4410_current._field_id == 5LLU) || (_4426_prev._field_row < _4410_current._field_row);
	_4451_terminated=_4410_current._field_id == 5LLU;
	return std::make_tuple(_4441_ok,_4451_terminated);
}



inline std::tuple<jule::Int,jule::Bool> _110709a60_next_st_pos(jule::Slice<_1106ec050_Token> _5116_tokens,jule::Int _5133_start) {
	jule::Int _5213_brace_n = 0LL;
	jule::Int _5313_i = _5133_start;
	_iter_begin_4600788160:;
	if (!(_5313_i < _5116_tokens.len())) { goto _iter_end_4600788160; }
	{
		jule::Bool _5517_ok = false;
		jule::Bool _5617_terminated = false;
		_1106ec050_Token _5713_tok = _5116_tokens[static_cast<jule::Int>(_5313_i)];
		{
			auto _match_expr{ _5713_tok._field_id };
			if (!((3LLU) == _match_expr)) { goto _case_end_4600794240; }
			_case_begin_4600794240:;
			{
				{
					auto _match_expr{ _5713_tok._field_kind };
					if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4600802272; }
					_case_begin_4600802272:;
					{
						if ((_5213_brace_n == 0LL) && (_5313_i > _5133_start)) {
							std::tie(_5517_ok,_5617_terminated) = _110709a60_is_st(_5713_tok,_5116_tokens[static_cast<jule::Int>(_5313_i - 1LL)]);
							if (_5517_ok) {
								goto _julec_label_return;
							}
						}
						(_5213_brace_n)++;
						goto _iter_next_4600788160;
					}
					goto _match_end_4600794720;
					_case_end_4600802272:;
					_case_begin_4600795840:;
					{
						(_5213_brace_n)--;
						if ((_5213_brace_n == 0LL) && ((_5313_i + 1LL) < _5116_tokens.len())) {
							std::tie(_5517_ok,_5617_terminated) = _110709a60_is_st(_5116_tokens[static_cast<jule::Int>(_5313_i + 1LL)],_5713_tok);
							if (_5517_ok) {
								(_5313_i)++;
								goto _julec_label_return;
							}
						}
						goto _iter_next_4600788160;
					}
					goto _match_end_4600794720;
					_case_end_4600795840:;
					_match_end_4600794720:;
				}
			}
			goto _match_end_4600792208;
			_case_end_4600794240:;
			_match_end_4600792208:;
		}
		if (_5213_brace_n != 0LL) {
			goto _iter_next_4600788160;
		} else if (_5313_i > _5133_start) {
			_1106ec050_Token _8917_prev = _5116_tokens[static_cast<jule::Int>(_5313_i - 1LL)];
			if (((_8917_prev._field_id == 7LLU) && _1106ec050_is_bin_op(_8917_prev._field_kind)) && (_8917_prev._field_row < _5713_tok._field_row)) {
				goto _iter_next_4600788160;
			}
			std::tie(_5517_ok,_5617_terminated) = _110709a60_is_st(_5713_tok,_8917_prev);
		} else {
			std::tie(_5517_ok,_5617_terminated) = _110709a60_is_st(_5713_tok,_5713_tok);
		}
		if ((!(_5517_ok))) {
			goto _iter_next_4600788160;
		}
		_julec_label_return:;
		if (_5617_terminated) {
			(_5313_i)++;
		}
		return std::make_tuple(_5313_i,_5617_terminated);
	}
	_iter_next_4600788160:;
	(_5313_i)++;
	goto _iter_begin_4600788160;
	_iter_end_4600788160:;
	return std::make_tuple(_5313_i,false);
}



inline std::tuple<jule::Slice<_1106ec050_Token>,jule::Bool> _110709a60_skip_st(jule::Int& _11217_i,jule::Slice<_1106ec050_Token> _11229_tokens) {
	jule::Int _1139_start = _11217_i;
	jule::Bool _11413_terminated = false;
	std::tie(_11217_i,_11413_terminated) = _110709a60_next_st_pos(_11229_tokens,_1139_start);
	jule::Slice<_1106ec050_Token> _11613_st_tokens = _11229_tokens.slice(static_cast<jule::Int>(_1139_start),static_cast<jule::Int>(_11217_i));
	if (_11413_terminated) {
		if (_11613_st_tokens.len() == 1LL) {
			std::tie(_11613_st_tokens,_11413_terminated) = _110709a60_skip_st(_11217_i,_11229_tokens);
			return std::make_tuple(_11613_st_tokens,_11413_terminated);
		}
		_11613_st_tokens=_11613_st_tokens.slice(0LL,static_cast<jule::Int>(_11613_st_tokens.len() - 1LL));
	}
	return std::make_tuple(_11613_st_tokens,_11413_terminated);
}



inline jule::Slice<jule::Ref<_110709a60_Stmt>> _110709a60_split_stms(jule::Slice<_1106ec050_Token> _13419_tokens) {
	jule::Slice<jule::Ref<_110709a60_Stmt>> _13513_stms = nullptr;
	jule::Int _13613_pos = 0LL;
	_iter_begin_4600830256:;
	if (!(_13613_pos < _13419_tokens.len())) { goto _iter_end_4600830256; }
	{
		jule::Slice<_1106ec050_Token> _13818_tokens;
		jule::Bool _13826_terminated;
		std::tie(_13818_tokens,_13826_terminated) = _110709a60_skip_st(_13613_pos,_13419_tokens);
		_13513_stms=jule::append(_13513_stms,jule::Slice<jule::Ref<_110709a60_Stmt>>({jule::new_struct<_110709a60_Stmt>(new( std::nothrow ) _110709a60_Stmt(_13818_tokens,_13826_terminated))}));
	}
	_iter_next_4600830256:;
	goto _iter_begin_4600830256;
	_iter_end_4600830256:;
	return _13513_stms;
}



inline jule::Slice<_1106ec050_Token> _11070bfb0_is_fn_call(jule::Slice<_1106ec050_Token> _3919_tokens) {
	{
		auto _match_expr{ _3919_tokens[0LL]._field_id };
		if (!((3LLU) == _match_expr || (2LLU) == _match_expr || (1LLU) == _match_expr)) { goto _case_end_4600838304; }
		goto _match_end_4600835792;
		_case_end_4600838304:;
		_case_begin_4600830688:;
		{
			_1106ec050_Token _4713_tok = _3919_tokens[static_cast<jule::Int>(_3919_tokens.len() - 1LL)];
			if ((_4713_tok._field_id != 3LLU) && (_4713_tok._field_kind != jule::Str(")", 1))) {
				return nullptr;
			}
		}
		goto _match_end_4600835792;
		_case_end_4600830688:;
		_match_end_4600835792:;
	}
	_1106ec050_Token _529_tok = _3919_tokens[static_cast<jule::Int>(_3919_tokens.len() - 1LL)];
	if ((_529_tok._field_id != 3LLU) || (_529_tok._field_kind != jule::Str(")", 1))) {
		return nullptr;
	}
	jule::Int _5613_brace_n = 0LL;
	jule::I64 _5913_i = _3919_tokens.len() - 1LL;
	_iter_begin_4600841600:;
	if (!(_5913_i >= 1LL)) { goto _iter_end_4600841600; }
	{
		_1106ec050_Token _6113_tok = _3919_tokens[static_cast<jule::Int>(_5913_i)];
		if (_6113_tok._field_id == 3LLU) {
			{
				auto _match_expr{ _6113_tok._field_kind };
				if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4600849072; }
				_case_begin_4600849072:;
				{
					(_5613_brace_n)++;
				}
				goto _match_end_4600848336;
				_case_end_4600849072:;
				if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4600849184; }
				_case_begin_4600849184:;
				{
					(_5613_brace_n)--;
				}
				goto _match_end_4600848336;
				_case_end_4600849184:;
				_match_end_4600848336:;
			}
			if (_5613_brace_n == 0LL) {
				return _3919_tokens.slice(0LL,static_cast<jule::Int>(_5913_i));
			}
		}
	}
	_iter_next_4600841600:;
	(_5913_i)--;
	goto _iter_begin_4600841600;
	_iter_end_4600841600:;
	return nullptr;
}



inline jule::Ref<_11070bfb0_CallData> _11070bfb0_get_call_data(jule::Slice<_1106ec050_Token> _8122_tokens) {
	jule::Ref<_11070bfb0_CallData> _8213_data = jule::new_struct<_11070bfb0_CallData>(new( std::nothrow ) _11070bfb0_CallData());
	std::tie(_8213_data->_field_expr_tokens,_8213_data->_field_args_tokens) = _110754df0_range_last(_8122_tokens);
	if (_8213_data->_field_expr_tokens.len() == 0LL) {
		return _8213_data;
	}
	_1106ec050_Token _899_token = _8213_data->_field_expr_tokens[static_cast<jule::Int>(_8213_data->_field_expr_tokens.len() - 1LL)];
	if ((_899_token._field_id == 3LLU) && (_899_token._field_kind == jule::Str("]", 1))) {
		std::tie(_8213_data->_field_expr_tokens,_8213_data->_field_generics_tokens) = _110754df0_range_last(_8213_data->_field_expr_tokens);
	}
	return _8213_data;
}



inline jule::Slice<_1106ec050_Token> _11070bfb0_get_block_expr(jule::Slice<_1106ec050_Token> _9723_tokens) {
	jule::Int _9813_brace_n = 0LL;
	{
		auto __julec_range_expr = _9723_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			_1106ec050_Token _11070bfb0_tok = *__julec_range_begin;
			_iter_begin_4600862208:;
			{
				if (_11070bfb0_tok._field_id == 3LLU) {
					{
						auto _match_expr{ _11070bfb0_tok._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr)) { goto _case_end_4600867088; }
						_case_begin_4600867088:;
						{
							if (_9813_brace_n > 0LL) {
								(_9813_brace_n)++;
								goto _match_end_4600865008;
							}
							return _9723_tokens.slice(0LL,static_cast<jule::Int>(_11070bfb0_i));
						}
						goto _match_end_4600865008;
						_case_end_4600867088:;
						if (!((jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4600866848; }
						_case_begin_4600866848:;
						{
							(_9813_brace_n)++;
						}
						goto _match_end_4600865008;
						_case_end_4600866848:;
						_case_begin_4600865696:;
						{
							(_9813_brace_n)--;
						}
						goto _match_end_4600865008;
						_case_end_4600865696:;
						_match_end_4600865008:;
					}
				}
			}
			_iter_next_4600862208:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_tok = *__julec_range_begin; goto _iter_begin_4600862208; }
			_iter_end_4600862208:;
		}
	}
	return nullptr;
}



inline std::tuple<jule::Slice<_1106ec050_Token>,jule::Slice<_1106ec050_Token>> _11070bfb0_split_colon(jule::Slice<_1106ec050_Token> _12320_tokens) {
	jule::Int _12413_range_n = 0LL;
	{
		auto __julec_range_expr = _12320_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			_1106ec050_Token _11070bfb0_token = *__julec_range_begin;
			_iter_begin_4600864576:;
			{
				{
					auto _match_expr{ _11070bfb0_token._field_id };
					if (!((3LLU) == _match_expr)) { goto _case_end_4600872848; }
					_case_begin_4600872848:;
					{
						{
							auto _match_expr{ _11070bfb0_token._field_kind };
							if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4600875408; }
							_case_begin_4600875408:;
							{
								(_12413_range_n)++;
								goto _iter_next_4600864576;
							}
							goto _match_end_4600873504;
							_case_end_4600875408:;
							_case_begin_4600874624:;
							{
								(_12413_range_n)--;
							}
							goto _match_end_4600873504;
							_case_end_4600874624:;
							_match_end_4600873504:;
						}
					}
					goto _match_end_4600872144;
					_case_end_4600872848:;
					if (!((11LLU) == _match_expr)) { goto _case_end_4600872960; }
					_case_begin_4600872960:;
					{
						if (_12413_range_n < 1LL) {
							jule::Slice<_1106ec050_Token> _14125_l = _12320_tokens.slice(0LL,static_cast<jule::Int>(_11070bfb0_i));
							jule::Slice<_1106ec050_Token> _14225_r = _12320_tokens.slice(static_cast<jule::Int>(_11070bfb0_i + 1LL));
							return std::make_tuple(_14125_l,_14225_r);
						}
					}
					goto _match_end_4600872144;
					_case_end_4600872960:;
					_match_end_4600872144:;
				}
			}
			_iter_next_4600864576:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_token = *__julec_range_begin; goto _iter_begin_4600864576; }
			_iter_end_4600864576:;
		}
	}
	return std::make_tuple(nullptr,nullptr);
}



inline jule::Slice<_1106ec050_Token> _11070bfb0_eliminate_comments(jule::Slice<_1106ec050_Token> _18127_tokens) {
	jule::Slice<_1106ec050_Token> _18213_cutted = nullptr;
	{
		auto __julec_range_expr = _18127_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_1106ec050_Token _11070bfb0_token = *__julec_range_begin;
			_iter_begin_4600883552:;
			{
				if (_11070bfb0_token._field_id != 18LLU) {
					_18213_cutted=jule::append(_18213_cutted,jule::Slice<_1106ec050_Token>({_11070bfb0_token}));
				}
			}
			_iter_next_4600883552:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11070bfb0_token = *__julec_range_begin; goto _iter_begin_4600883552; }
			_iter_end_4600883552:;
		}
	}
	return _18213_cutted;
}



inline jule::Int _11070bfb0_find_lowest_prec_op(jule::Slice<_1106ec050_Token> _19324_tokens) {
	_11070bfb0_Precedencer _19413_prec = _11070bfb0_Precedencer();
	jule::Int _19513_brace_n = 0LL;
	{
		auto __julec_range_expr = _19324_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11070bfb0_i = 0;
			_1106ec050_Token _11070bfb0_token = *__julec_range_begin;
			_iter_begin_4600890704:;
			{
				{
					if (!((_11070bfb0_token._field_id == 3LLU))) { goto _case_end_4600893424; }
					_case_begin_4600893424:;
					{
						{
							auto _match_expr{ _11070bfb0_token._field_kind };
							if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr)) { goto _case_end_4600897264; }
							_case_begin_4600897264:;
							{
								(_19513_brace_n)++;
							}
							goto _match_end_4600894688;
							_case_end_4600897264:;
							_case_begin_4600895952:;
							{
								(_19513_brace_n)--;
							}
							goto _match_end_4600894688;
							_case_end_4600895952:;
							_match_end_4600894688:;
						}
						goto _iter_next_4600890704;
					}
					goto _match_end_4600893200;
					_case_end_4600893424:;
					if (!((_11070bfb0_i == 0LL))) { goto _case_end_4600893552; }
					_case_begin_4600893552:;
					{
						goto _iter_next_4600890704;
					}
					goto _match_end_4600893200;
					_case_end_4600893552:;
					if (!((_11070bfb0_token._field_id != 7LLU))) { goto _case_end_4600893680; }
					_case_begin_4600893680:;
					{
						goto _iter_next_4600890704;
					}
					goto _match_end_4600893200;
					_case_end_4600893680:;
					if (!((_19513_brace_n > 0LL))) { goto _case_end_4600893808; }
					_case_begin_4600893808:;
					{
						goto _iter_next_4600890704;
					}
					goto _match_end_4600893200;
					_case_end_4600893808:;
					_match_end_4600893200:;
				}
				_1106ec050_Token _22013_left = _19324_tokens[static_cast<jule::Int>(_11070bfb0_i - 1LL)];
				if ((_22013_left._field_id == 7LLU) || (_22013_left._field_id == 11LLU)) {
					goto _iter_next_4600890704;
				}
				if (((_11070bfb0_i > 1LL) && (_22013_left._field_id == 3LLU)) && (_22013_left._field_kind == jule::Str("]", 1))) {
					_1106ec050_Token _22817_lleft = _19324_tokens[static_cast<jule::Int>(_11070bfb0_i - 2LL)];
					if ((_22817_lleft._field_id == 3LLU) && (_22817_lleft._field_kind == jule::Str("[", 1))) {
						if ((_11070bfb0_token._field_kind == jule::Str("&", 1)) || (_11070bfb0_token._field_kind == jule::Str("*", 1))) {
							goto _iter_next_4600890704;
						}
					}
				}
				jule::Int _23713_p = _11070bfb0_token._method_prec();
				if (_23713_p != -1LL) {
					_19413_prec._method_set(_23713_p,jule::Any(_11070bfb0_i));
				}
			}
			_iter_next_4600890704:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11070bfb0_i; _11070bfb0_token = *__julec_range_begin; goto _iter_begin_4600890704; }
			_iter_end_4600890704:;
		}
	}
	jule::Any _2439_data = _19413_prec._method_get_lower();
	if (_2439_data == nullptr) {
		return -1LL;
	}
	return _2439_data.operator jule::Int();
}



inline jule::Ref<_11054f670_IdentExpr> _11070bfb0_build_ident_expr(_1106ec050_Token _25025_token) {
	return jule::new_struct<_11054f670_IdentExpr>(new( std::nothrow ) _11054f670_IdentExpr(_25025_token,_25025_token._field_kind,false));
}



inline std::tuple<jule::Slice<_1106ec050_Token>,jule::Int> _11070bfb0_get_range_expr_tokens(jule::Slice<_1106ec050_Token> _25830_tokens) {
	jule::Int _25913_range_n = 0LL;
	jule::I64 _26013_i = _25830_tokens.len() - 1LL;
	_iter_begin_4600918208:;
	if (!(_26013_i >= 0LL)) { goto _iter_end_4600918208; }
	{
		_1106ec050_Token _26213_tok = _25830_tokens[static_cast<jule::Int>(_26013_i)];
		if (_26213_tok._field_id == 3LLU) {
			{
				auto _match_expr{ _26213_tok._field_kind };
				if (!((jule::Str("}", 1)) == _match_expr || (jule::Str("]", 1)) == _match_expr || (jule::Str(")", 1)) == _match_expr)) { goto _case_end_4600924736; }
				_case_begin_4600924736:;
				{
					(_25913_range_n)++;
				}
				goto _match_end_4600923216;
				_case_end_4600924736:;
				_case_begin_4600923904:;
				{
					(_25913_range_n)--;
				}
				goto _match_end_4600923216;
				_case_end_4600923904:;
				_match_end_4600923216:;
			}
		}
		if (_25913_range_n == 0LL) {
			return std::make_tuple(_25830_tokens.slice(0LL,static_cast<jule::Int>(_26013_i)),_25913_range_n);
		}
	}
	_iter_next_4600918208:;
	(_26013_i)--;
	goto _iter_begin_4600918208;
	_iter_end_4600918208:;
	return std::make_tuple(nullptr,_25913_range_n);
}



inline jule::Bool _110711f30_check_assign_tokens(jule::Slice<_1106ec050_Token> _1624_tokens) {
	if ((_1624_tokens.len() == 0LL) || (!(_1106ec050_is_assign(_1624_tokens[0LL]._field_id)))) {
		return false;
	}
	jule::Int _2113_brace_n = 0LL;
	{
		auto __julec_range_expr = _1624_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_1106ec050_Token _110711f30_t = *__julec_range_begin;
			_iter_begin_4600931104:;
			{
				if (_110711f30_t._field_id == 3LLU) {
					{
						auto _match_expr{ _110711f30_t._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4600934928; }
						_case_begin_4600934928:;
						{
							(_2113_brace_n)++;
						}
						goto _match_end_4600933408;
						_case_end_4600934928:;
						_case_begin_4600934096:;
						{
							(_2113_brace_n)--;
						}
						goto _match_end_4600933408;
						_case_end_4600934096:;
						_match_end_4600933408:;
					}
				}
				if (_2113_brace_n < 0LL) {
					return false;
				} else if (_2113_brace_n > 0LL) {
					goto _iter_next_4600931104;
				} else if ((_110711f30_t._field_id == 7LLU) && _1106ec050_is_assign_op(_110711f30_t._field_kind)) {
					return true;
				}
			}
			_iter_next_4600931104:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110711f30_t = *__julec_range_begin; goto _iter_begin_4600931104; }
			_iter_end_4600931104:;
		}
	}
	return false;
}



inline _127e05da0_Log _110754df0_make_err(jule::Int _5613_row,jule::Int _5623_col,jule::Ref<_11054ec70_File> _5633_f,jule::Str _5643_fmt,jule::Slice<jule::Any> _5656_args) {
	return _127e05da0_Log(1LLU,_5613_row,_5623_col,_5633_f->_method_path(),_127e05da0_logf(_5643_fmt,_5656_args),jule::Str(),jule::Str());
}



inline jule::Slice<_1106ec050_Token> _110754df0_range(jule::Int& _7515_i,jule::Str _7523_open,jule::Str _7540_close,jule::Slice<_1106ec050_Token> _7562_tokens) {
	if (_7515_i >= _7562_tokens.len()) {
		return nullptr;
	}
	_1106ec050_Token _809_tok = _7562_tokens[static_cast<jule::Int>(_7515_i)];
	if ((_809_tok._field_id != 3LLU) || (_809_tok._field_kind != _7523_open)) {
		return nullptr;
	}
	(_7515_i)++;
	jule::Int _8613_range_n = 1LL;
	jule::Int _879_start = _7515_i;
	_iter_begin_4600952016:;
	if (!((_8613_range_n != 0LL) && (_7515_i < _7562_tokens.len()))) { goto _iter_end_4600952016; }
	{
		_1106ec050_Token _8913_token = _7562_tokens[static_cast<jule::Int>(_7515_i)];
		if (_8913_token._field_id == 3LLU) {
			{
				auto _match_expr{ _8913_token._field_kind };
				if (!((_7523_open) == _match_expr)) { goto _case_end_4600956464; }
				_case_begin_4600956464:;
				{
					(_8613_range_n)++;
				}
				goto _match_end_4600955728;
				_case_end_4600956464:;
				if (!((_7540_close) == _match_expr)) { goto _case_end_4600956576; }
				_case_begin_4600956576:;
				{
					(_8613_range_n)--;
				}
				goto _match_end_4600955728;
				_case_end_4600956576:;
				_match_end_4600955728:;
			}
		}
	}
	_iter_next_4600952016:;
	(_7515_i)++;
	goto _iter_begin_4600952016;
	_iter_end_4600952016:;
	return _7562_tokens.slice(static_cast<jule::Int>(_879_start),static_cast<jule::Int>(_7515_i - 1LL));
}



inline std::tuple<jule::Slice<_1106ec050_Token>,jule::Slice<_1106ec050_Token>> _110754df0_range_last(jule::Slice<_1106ec050_Token> _10819_tokens) {
	jule::Slice<_1106ec050_Token> _10855_cut = jule::Slice<_1106ec050_Token>();
	jule::Slice<_1106ec050_Token> _10838_cutted = jule::Slice<_1106ec050_Token>();
	if (_10819_tokens.len() == 0LL) {
		_10838_cutted = _10819_tokens;
		_10855_cut = nullptr;
		return std::make_tuple(_10838_cutted,_10855_cut);
	} else if (_10819_tokens[static_cast<jule::Int>(_10819_tokens.len() - 1LL)]._field_id != 3LLU) {
		_10838_cutted = _10819_tokens;
		_10855_cut = nullptr;
		return std::make_tuple(_10838_cutted,_10855_cut);
	}
	jule::Int _11513_brace_n = 0LL;
	jule::I64 _11613_i = _10819_tokens.len() - 1LL;
	_iter_begin_4600955616:;
	if (!(_11613_i >= 0LL)) { goto _iter_end_4600955616; }
	{
		_1106ec050_Token _11813_token = _10819_tokens[static_cast<jule::Int>(_11613_i)];
		if (_11813_token._field_id == 3LLU) {
			{
				auto _match_expr{ _11813_token._field_kind };
				if (!((jule::Str("}", 1)) == _match_expr || (jule::Str("]", 1)) == _match_expr || (jule::Str(")", 1)) == _match_expr)) { goto _case_end_4600971904; }
				_case_begin_4600971904:;
				{
					(_11513_brace_n)++;
					goto _iter_next_4600955616;
				}
				goto _match_end_4600970384;
				_case_end_4600971904:;
				_case_begin_4600971072:;
				{
					(_11513_brace_n)--;
				}
				goto _match_end_4600970384;
				_case_end_4600971072:;
				_match_end_4600970384:;
			}
		}
		if (_11513_brace_n == 0LL) {
			_10838_cutted = _10819_tokens.slice(0LL,static_cast<jule::Int>(_11613_i));
			_10855_cut = _10819_tokens.slice(static_cast<jule::Int>(_11613_i));
			return std::make_tuple(_10838_cutted,_10855_cut);
		}
	}
	_iter_next_4600955616:;
	(_11613_i)--;
	goto _iter_begin_4600955616;
	_iter_end_4600955616:;
	_10838_cutted = _10819_tokens;
	_10855_cut = nullptr;
	return std::make_tuple(_10838_cutted,_10855_cut);
}



inline std::tuple<jule::Slice<jule::Slice<_1106ec050_Token>>,jule::Slice<_127e05da0_Log>> _110754df0_parts(jule::Slice<_1106ec050_Token> _14614_tokens,jule::Uint _14631_id,jule::Bool _14644_expr_must) {
	if (_14614_tokens.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Slice<jule::Slice<_1106ec050_Token>> _15113_parts = nullptr;
	jule::Slice<_127e05da0_Log> _15213_errors = nullptr;
	jule::Int _15413_range_n = 0LL;
	jule::Int _15513_last = 0LL;
	{
		auto __julec_range_expr = _14614_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110754df0_i = 0;
			_1106ec050_Token _110754df0_token = *__julec_range_begin;
			_iter_begin_4600985424:;
			{
				if (_110754df0_token._field_id == 3LLU) {
					{
						auto _match_expr{ _110754df0_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4600989712; }
						_case_begin_4600989712:;
						{
							(_15413_range_n)++;
							goto _iter_next_4600985424;
						}
						goto _match_end_4600988192;
						_case_end_4600989712:;
						_case_begin_4600988880:;
						{
							(_15413_range_n)--;
						}
						goto _match_end_4600988192;
						_case_end_4600988880:;
						_match_end_4600988192:;
					}
				}
				if (_15413_range_n > 0LL) {
					goto _iter_next_4600985424;
				}
				if (_110754df0_token._field_id == _14631_id) {
					if (_14644_expr_must && ((_110754df0_i - _15513_last) <= 0LL)) {
						_127e05da0_Log _17521_err = _110754df0_make_err(_110754df0_token._field_row,_110754df0_token._field_column,_110754df0_token._field_file,jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
						_15213_errors=jule::append(_15213_errors,jule::Slice<_127e05da0_Log>({_17521_err}));
					}
					_15113_parts=jule::append(_15113_parts,jule::Slice<jule::Slice<_1106ec050_Token>>({_14614_tokens.slice(static_cast<jule::Int>(_15513_last),static_cast<jule::Int>(_110754df0_i))}));
					_15513_last=static_cast<jule::Int>(_110754df0_i + 1LL);
				}
			}
			_iter_next_4600985424:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110754df0_i; _110754df0_token = *__julec_range_begin; goto _iter_begin_4600985424; }
			_iter_end_4600985424:;
		}
	}
	if (_15513_last < _14614_tokens.len()) {
		_15113_parts=jule::append(_15113_parts,jule::Slice<jule::Slice<_1106ec050_Token>>({_14614_tokens.slice(static_cast<jule::Int>(_15513_last))}));
	} else if ((!(_14644_expr_must))) {
		_15113_parts=jule::append(_15113_parts,jule::Slice<jule::Slice<_1106ec050_Token>>({jule::Slice<_1106ec050_Token>({})}));
	}
	return std::make_tuple(_15113_parts,_15213_errors);
}



inline jule::Str _110754df0_get_close_kind_of_brace(jule::Str _19228_left) {
	{
		auto _match_expr{ _19228_left };
		if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4601002848; }
		_case_begin_4601002848:;
		{
			return jule::Str("(", 1);
		}
		goto _match_end_4600999136;
		_case_end_4601002848:;
		if (!((jule::Str("}", 1)) == _match_expr)) { goto _case_end_4601002960; }
		_case_begin_4601002960:;
		{
			return jule::Str("{", 1);
		}
		goto _match_end_4600999136;
		_case_end_4601002960:;
		if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4601003072; }
		_case_begin_4601003072:;
		{
			return jule::Str("[", 1);
		}
		goto _match_end_4600999136;
		_case_end_4601003072:;
		_case_begin_4600999328:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4600999136;
		_case_end_4600999328:;
		_match_end_4600999136:;
	}
}



inline _127e05da0_Log _110754df0_compiler_err(_1106ec050_Token _20117_token,jule::Str _20131_fmt,jule::Slice<jule::Any> _20144_args) {
	return _127e05da0_Log(1LLU,_20117_token._field_row,_20117_token._field_column,_20117_token._field_file->_method_path(),_127e05da0_logf(_20131_fmt,_20144_args),_20117_token._field_file->_method_get_row(_20117_token._field_row),jule::Str());
}



inline void _110754df0_push_suggestion(_127e05da0_Log* _21231_log,jule::Str _21242_fmt,jule::Slice<jule::Any> _21255_args) {
	_21231_log->_field_suggestion=_127e05da0_logf(_21242_fmt,_21255_args);
}



inline jule::Ref<_11054f670_Comment> _110754df0_build_comment(_1106ec050_Token _21622_token) {
	_21622_token._field_kind=_21622_token._field_kind.slice(2LL).trim(jule::Str(" \n\r\t\v", 5));
	return jule::new_struct<_11054f670_Comment>(new( std::nothrow ) _11054f670_Comment(_21622_token,_21622_token._field_kind));
}



inline jule::Str _110754df0_tokstoa(jule::Slice<_1106ec050_Token> _22512_tokens) {
	jule::Str _22613_s = jule::Str("", 0);
	{
		auto __julec_range_expr = _22512_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_1106ec050_Token _110754df0_token = *__julec_range_begin;
			_iter_begin_4601018720:;
			{
				_22613_s+=_110754df0_token._field_kind;
			}
			_iter_next_4601018720:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110754df0_token = *__julec_range_begin; goto _iter_begin_4601018720; }
			_iter_end_4601018720:;
		}
	}
	return _22613_s;
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_build_void_type(void) {
	return jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl());
}



inline jule::Ref<_11054f670_TypeDecl> _110a15a10_build_prim_type(_1106ec050_Token _2024_token) {
	return jule::new_struct<_11054f670_TypeDecl>(new( std::nothrow ) _11054f670_TypeDecl(_2024_token,jule::Any(jule::new_struct<_11054f670_IdentTypeDecl>(new( std::nothrow ) _11054f670_IdentTypeDecl(_2024_token,_2024_token._field_kind,false,nullptr)))));
}



inline std::tuple<jule::Slice<_1106ec050_Token>,jule::Int> _110a15a10_split_map_range(jule::Slice<_1106ec050_Token> _3524_tokens,jule::Int& _3546_i) {
	jule::Int _3579_colon = jule::Int();
	jule::Slice<_1106ec050_Token> _3556_range_tokens = jule::Slice<_1106ec050_Token>();
	_3579_colon=-1LL;
	jule::Int _3713_range_n = 0LL;
	jule::Int _389_start = _3546_i;
	_iter_begin_4601027472:;
	if (!(_3546_i < _3524_tokens.len())) { goto _iter_end_4601027472; }
	{
		_1106ec050_Token _4013_token = _3524_tokens[static_cast<jule::Int>(_3546_i)];
		if (_4013_token._field_id == 3LLU) {
			{
				auto _match_expr{ _4013_token._field_kind };
				if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4601032240; }
				_case_begin_4601032240:;
				{
					(_3713_range_n)++;
					goto _iter_next_4601027472;
				}
				goto _match_end_4601030720;
				_case_end_4601032240:;
				_case_begin_4601031408:;
				{
					(_3713_range_n)--;
				}
				goto _match_end_4601030720;
				_case_end_4601031408:;
				_match_end_4601030720:;
			}
		}
		if (_3713_range_n == 0LL) {
			if ((_389_start + 1LL) > _3546_i) {
				return std::make_tuple(_3556_range_tokens,_3579_colon);
			}
			_3556_range_tokens=_3524_tokens.slice(static_cast<jule::Int>(_389_start + 1LL),static_cast<jule::Int>(_3546_i));
			goto _iter_end_4601027472;
		} else if (_3713_range_n != 1LL) {
			goto _iter_next_4601027472;
		}
		if ((_3579_colon == -1LL) && (_4013_token._field_id == 11LLU)) {
			_3579_colon=static_cast<jule::Int>((_3546_i - _389_start) - 1LL);
		}
	}
	_iter_next_4601027472:;
	(_3546_i)++;
	goto _iter_begin_4601027472;
	_iter_end_4601027472:;
	return std::make_tuple(_3556_range_tokens,_3579_colon);
}



inline void _1118cee40_lshift_unsig(_1118cee40_Const& _53222_c,_1118cee40_Const& _53233_x) {
	jule::U64 _5339_l = _53222_c._method_as_u64();
	jule::U64 _5349_r = _53233_x._method_as_u64();
	_53222_c._method_set_u64(static_cast<jule::U64>(_5339_l << _5349_r));
}



inline void _1118cee40_rshift_unsig(_1118cee40_Const& _53822_c,_1118cee40_Const& _53833_x) {
	jule::U64 _5399_l = _53822_c._method_as_u64();
	jule::U64 _5409_r = _53833_x._method_as_u64();
	_53822_c._method_set_u64(static_cast<jule::U64>(_5399_l >> _5409_r));
}



inline jule::Bool _1118ceb10_check_bit(jule::Str _914_v,jule::Int _922_bit,jule::Fn<jule::Bool(jule::Str,jule::Int,jule::Int)> _932_checker) {
	{
		if (!((_914_v == jule::Str("", 0)))) { goto _case_end_4603972736; }
		_case_begin_4603972736:;
		{
			return false;
		}
		goto _match_end_4603970400;
		_case_end_4603972736:;
		if (!((_914_v.len() == 1LL))) { goto _case_end_4603971568; }
		_case_begin_4603971568:;
		{
			return true;
		}
		goto _match_end_4603970400;
		_case_end_4603971568:;
		if (!((_914_v.has_prefix(jule::Str("0x", 2))))) { goto _case_end_4603971680; }
		_case_begin_4603971680:;
		{
			return _932_checker(_914_v.slice(2LL),16LL,_922_bit);
		}
		goto _match_end_4603970400;
		_case_end_4603971680:;
		if (!((_914_v.has_prefix(jule::Str("0b", 2))))) { goto _case_end_4603971792; }
		_case_begin_4603971792:;
		{
			return _932_checker(_914_v.slice(2LL),2LL,_922_bit);
		}
		goto _match_end_4603970400;
		_case_end_4603971792:;
		if (!((_914_v.has_prefix(jule::Str("0o", 2))))) { goto _case_end_4603970864; }
		_case_begin_4603970864:;
		{
			return _932_checker(_914_v.slice(2LL),8LL,_922_bit);
		}
		goto _match_end_4603970400;
		_case_end_4603970864:;
		if (!((_914_v[0LL] == '0'))) { goto _case_end_4603970976; }
		_case_begin_4603970976:;
		{
			return _932_checker(_914_v.slice(1LL),8LL,_922_bit);
		}
		goto _match_end_4603970400;
		_case_end_4603970976:;
		_case_begin_4603970560:;
		{
			return _932_checker(_914_v,10LL,_922_bit);
		}
		goto _match_end_4603970400;
		_case_end_4603970560:;
		_match_end_4603970400:;
	}
}



inline jule::Str _1118ceb10_real_kind_of(jule::Str _2421_kind) {
	{
		auto _match_expr{ _2421_kind };
		if (!((jule::Str("int", 3)) == _match_expr)) { goto _case_end_4603983376; }
		_case_begin_4603983376:;
		{
			return jule::Str("i64", 3);
		}
		goto _match_end_4603978608;
		_case_end_4603983376:;
		if (!((jule::Str("uint", 4)) == _match_expr || (jule::Str("uintptr", 7)) == _match_expr)) { goto _case_end_4603983488; }
		_case_begin_4603983488:;
		{
			return jule::Str("u64", 3);
		}
		goto _match_end_4603978608;
		_case_end_4603983488:;
		_case_begin_4603978368:;
		{
			return _2421_kind;
		}
		goto _match_end_4603978608;
		_case_end_4603978368:;
		_match_end_4603978608:;
	}
}



inline jule::Int _1118ceb10_bitsize_of(jule::Str _4019_k) {
	{
		auto _match_expr{ _4019_k };
		if (!((jule::Str("i8", 2)) == _match_expr || (jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4603986768; }
		_case_begin_4603986768:;
		{
			return 8LL;
		}
		goto _match_end_4603985680;
		_case_end_4603986768:;
		if (!((jule::Str("i16", 3)) == _match_expr || (jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4603986880; }
		_case_begin_4603986880:;
		{
			return 16LL;
		}
		goto _match_end_4603985680;
		_case_end_4603986880:;
		if (!((jule::Str("i32", 3)) == _match_expr || (jule::Str("u32", 3)) == _match_expr || (jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4603987056; }
		_case_begin_4603987056:;
		{
			return 32LL;
		}
		goto _match_end_4603985680;
		_case_end_4603987056:;
		if (!((jule::Str("i64", 3)) == _match_expr || (jule::Str("u64", 3)) == _match_expr || (jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4603987168; }
		_case_begin_4603987168:;
		{
			return 64LL;
		}
		goto _match_end_4603985680;
		_case_end_4603987168:;
		if (!((jule::Str("uint", 4)) == _match_expr || (jule::Str("int", 3)) == _match_expr)) { goto _case_end_4603987296; }
		_case_begin_4603987296:;
		{
			return 64LL;
		}
		goto _match_end_4603985680;
		_case_end_4603987296:;
		_case_begin_4603984032:;
		{
			return -1LL;
		}
		goto _match_end_4603985680;
		_case_end_4603984032:;
		_match_end_4603985680:;
	}
}



inline jule::Str _1118ceb10_int_from_bits(jule::U64 _7222_bits) {
	{
		auto _match_expr{ _7222_bits };
		if (!((8LL) == _match_expr)) { goto _case_end_4603991232; }
		_case_begin_4603991232:;
		{
			return jule::Str("i8", 2);
		}
		goto _match_end_4603989232;
		_case_end_4603991232:;
		if (!((16LL) == _match_expr)) { goto _case_end_4603991344; }
		_case_begin_4603991344:;
		{
			return jule::Str("i16", 3);
		}
		goto _match_end_4603989232;
		_case_end_4603991344:;
		if (!((32LL) == _match_expr)) { goto _case_end_4603991456; }
		_case_begin_4603991456:;
		{
			return jule::Str("i32", 3);
		}
		goto _match_end_4603989232;
		_case_end_4603991456:;
		if (!((64LL) == _match_expr)) { goto _case_end_4603992400; }
		_case_begin_4603992400:;
		{
			return jule::Str("i64", 3);
		}
		goto _match_end_4603989232;
		_case_end_4603992400:;
		_case_begin_4603990592:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4603989232;
		_case_end_4603990592:;
		_match_end_4603989232:;
	}
}



inline jule::Str _1118ceb10_uint_from_bits(jule::U64 _8523_bits) {
	{
		auto _match_expr{ _8523_bits };
		if (!((8LL) == _match_expr)) { goto _case_end_4603985232; }
		_case_begin_4603985232:;
		{
			return jule::Str("u8", 2);
		}
		goto _match_end_4603994416;
		_case_end_4603985232:;
		if (!((16LL) == _match_expr)) { goto _case_end_4603985344; }
		_case_begin_4603985344:;
		{
			return jule::Str("u16", 3);
		}
		goto _match_end_4603994416;
		_case_end_4603985344:;
		if (!((32LL) == _match_expr)) { goto _case_end_4603985456; }
		_case_begin_4603985456:;
		{
			return jule::Str("u32", 3);
		}
		goto _match_end_4603994416;
		_case_end_4603985456:;
		if (!((64LL) == _match_expr)) { goto _case_end_4603996416; }
		_case_begin_4603996416:;
		{
			return jule::Str("u64", 3);
		}
		goto _match_end_4603994416;
		_case_end_4603996416:;
		_case_begin_4603995232:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4603994416;
		_case_end_4603995232:;
		_match_end_4603994416:;
	}
}



inline jule::Str _1118ceb10_float_from_bits(jule::U64 _9924_bits) {
	{
		auto _match_expr{ _9924_bits };
		if (!((32LL) == _match_expr)) { goto _case_end_4603997808; }
		_case_begin_4603997808:;
		{
			return jule::Str("f32", 3);
		}
		goto _match_end_4603998352;
		_case_end_4603997808:;
		if (!((64LL) == _match_expr)) { goto _case_end_4603997920; }
		_case_begin_4603997920:;
		{
			return jule::Str("f64", 3);
		}
		goto _match_end_4603998352;
		_case_end_4603997920:;
		_case_begin_4603999216:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4603998352;
		_case_end_4603999216:;
		_match_end_4603998352:;
	}
}



inline jule::Bool _1118ceb10_check_bit_int(jule::Str _10822_v,jule::Int _10830_bit) {
	return _1118ceb10_check_bit(_10822_v,_10830_bit,jule::Fn<jule::Bool(jule::Str,jule::Int,jule::Int)>([=](jule::Str _10930_v,jule::Int _10938_base,jule::Int _10949_bit) mutable -> jule::Bool {
		jule::Int _11017_err;
		std::tie(std::ignore,_11017_err) = _117e872d0_parse_int(_10930_v,_10938_base,_10949_bit);
		return _11017_err == 0LLU;
	}));
}



inline jule::Bool _1118ceb10_check_bit_uint(jule::Str _11623_v,jule::Int _11631_bit) {
	return _1118ceb10_check_bit(_11623_v,_11631_bit,jule::Fn<jule::Bool(jule::Str,jule::Int,jule::Int)>([=](jule::Str _11730_v,jule::Int _11738_base,jule::Int _11749_bit) mutable -> jule::Bool {
		jule::Int _11817_err;
		std::tie(std::ignore,_11817_err) = _117e872d0_parse_uint(_11730_v,_11738_base,_11749_bit);
		return _11817_err == 0LLU;
	}));
}



inline jule::Bool _1118ceb10_check_bit_float(jule::Str _12424_val,jule::Int _12434_bit) {
	jule::Int _12513_err;
	std::tie(std::ignore,_12513_err) = _107ec5260_parse_float(_12424_val,_12434_bit);
	return _12513_err == 0LLU;
}



inline jule::U64 _1118ceb10_bitsize_of_float(jule::F64 _13425_x) {
	{
		if (!(((-340282346638528860000000000000000000000.0 <= _13425_x) && (_13425_x <= 340282346638528860000000000000000000000.0)))) { goto _case_end_4604023216; }
		_case_begin_4604023216:;
		{
			return 32LL;
		}
		goto _match_end_4604020992;
		_case_end_4604023216:;
		_case_begin_4604021152:;
		{
			return 64LL;
		}
		goto _match_end_4604020992;
		_case_end_4604021152:;
		_match_end_4604020992:;
	}
}



inline jule::U64 _1118ceb10_bitsize_of_int(jule::I64 _14823_x) {
	{
		if (!(((-128LL <= _14823_x) && (_14823_x <= 127LL)))) { goto _case_end_4604026128; }
		_case_begin_4604026128:;
		{
			return 8LL;
		}
		goto _match_end_4604023872;
		_case_end_4604026128:;
		if (!(((-32768LL <= _14823_x) && (_14823_x <= 32767LL)))) { goto _case_end_4604025696; }
		_case_begin_4604025696:;
		{
			return 16LL;
		}
		goto _match_end_4604023872;
		_case_end_4604025696:;
		if (!(((-2147483648LL <= _14823_x) && (_14823_x <= 2147483647LL)))) { goto _case_end_4604025808; }
		_case_begin_4604025808:;
		{
			return 32LL;
		}
		goto _match_end_4604023872;
		_case_end_4604025808:;
		_case_begin_4604023968:;
		{
			return 64LL;
		}
		goto _match_end_4604023872;
		_case_end_4604023968:;
		_match_end_4604023872:;
	}
}



inline jule::U64 _1118ceb10_bitsize_of_uint(jule::U64 _16424_x) {
	{
		if (!((_16424_x <= 255LL))) { goto _case_end_4604031248; }
		_case_begin_4604031248:;
		{
			return 8LL;
		}
		goto _match_end_4604028352;
		_case_end_4604031248:;
		if (!((_16424_x <= 65535LL))) { goto _case_end_4604030816; }
		_case_begin_4604030816:;
		{
			return 16LL;
		}
		goto _match_end_4604028352;
		_case_end_4604030816:;
		if (!((_16424_x <= 4294967295LL))) { goto _case_end_4604030928; }
		_case_begin_4604030928:;
		{
			return 32LL;
		}
		goto _match_end_4604028352;
		_case_end_4604030928:;
		_case_begin_4604029392:;
		{
			return 64LL;
		}
		goto _match_end_4604028352;
		_case_end_4604029392:;
		_match_end_4604028352:;
	}
}



inline jule::F64 _1118d0df0_min(jule::Str _4316_k) {
	_4316_k=_1118ceb10_real_kind_of(_4316_k);
	{
		auto _match_expr{ _4316_k };
		if (!((jule::Str("i8", 2)) == _match_expr)) { goto _case_end_4604035632; }
		_case_begin_4604035632:;
		{
			return -128LL;
		}
		goto _match_end_4604033248;
		_case_end_4604035632:;
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4604035152; }
		_case_begin_4604035152:;
		{
			return -32768LL;
		}
		goto _match_end_4604033248;
		_case_end_4604035152:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4604035264; }
		_case_begin_4604035264:;
		{
			return -2147483648LL;
		}
		goto _match_end_4604033248;
		_case_end_4604035264:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4604034752; }
		_case_begin_4604034752:;
		{
			return jule::MIN_I64;
		}
		goto _match_end_4604033248;
		_case_end_4604034752:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4604034864; }
		_case_begin_4604034864:;
		{
			return -340282346638528860000000000000000000000.0;
		}
		goto _match_end_4604033248;
		_case_end_4604034864:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4604034976; }
		_case_begin_4604034976:;
		{
			return jule::MIN_F64;
		}
		goto _match_end_4604033248;
		_case_end_4604034976:;
		_case_begin_4604033808:;
		{
			return 0LL;
		}
		goto _match_end_4604033248;
		_case_end_4604033808:;
		_match_end_4604033248:;
	}
}



inline jule::F64 _1118d0df0_max(jule::Str _5816_k) {
	_5816_k=_1118ceb10_real_kind_of(_5816_k);
	{
		auto _match_expr{ _5816_k };
		if (!((jule::Str("i8", 2)) == _match_expr)) { goto _case_end_4604041088; }
		_case_begin_4604041088:;
		{
			return 127LL;
		}
		goto _match_end_4604039360;
		_case_end_4604041088:;
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4604041200; }
		_case_begin_4604041200:;
		{
			return 32767LL;
		}
		goto _match_end_4604039360;
		_case_end_4604041200:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4604040288; }
		_case_begin_4604040288:;
		{
			return 2147483647LL;
		}
		goto _match_end_4604039360;
		_case_end_4604040288:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4604040400; }
		_case_begin_4604040400:;
		{
			return jule::MAX_I64;
		}
		goto _match_end_4604039360;
		_case_end_4604040400:;
		if (!((jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4604040512; }
		_case_begin_4604040512:;
		{
			return 255LL;
		}
		goto _match_end_4604039360;
		_case_end_4604040512:;
		if (!((jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4604040624; }
		_case_begin_4604040624:;
		{
			return 65535LL;
		}
		goto _match_end_4604039360;
		_case_end_4604040624:;
		if (!((jule::Str("u32", 3)) == _match_expr)) { goto _case_end_4604040736; }
		_case_begin_4604040736:;
		{
			return 4294967295LL;
		}
		goto _match_end_4604039360;
		_case_end_4604040736:;
		if (!((jule::Str("u64", 3)) == _match_expr)) { goto _case_end_4604040848; }
		_case_begin_4604040848:;
		{
			return jule::MAX_U64;
		}
		goto _match_end_4604039360;
		_case_end_4604040848:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4604040960; }
		_case_begin_4604040960:;
		{
			return 340282346638528860000000000000000000000.0;
		}
		goto _match_end_4604039360;
		_case_end_4604040960:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4604041728; }
		_case_begin_4604041728:;
		{
			return jule::MAX_F64;
		}
		goto _match_end_4604039360;
		_case_end_4604041728:;
		_case_begin_4604037120:;
		{
			return 0LL;
		}
		goto _match_end_4604039360;
		_case_end_4604037120:;
		_match_end_4604039360:;
	}
}



inline jule::Bool _111954bc0_is_i8_compatible(jule::Str _629_k) {
	_629_k=_1118ceb10_real_kind_of(_629_k);
	return _629_k == jule::Str("i8", 2);
}



inline jule::Bool _111954bc0_is_i16_compatible(jule::Str _1230_k) {
	_1230_k=_1118ceb10_real_kind_of(_1230_k);
	return ((_1230_k == jule::Str("i8", 2)) || (_1230_k == jule::Str("i16", 3))) || (_1230_k == jule::Str("u8", 2));
}



inline jule::Bool _111954bc0_is_i32_compatible(jule::Str _2030_k) {
	_2030_k=_1118ceb10_real_kind_of(_2030_k);
	return ((((_2030_k == jule::Str("i8", 2)) || (_2030_k == jule::Str("i16", 3))) || (_2030_k == jule::Str("i32", 3))) || (_2030_k == jule::Str("u8", 2))) || (_2030_k == jule::Str("u16", 3));
}



inline jule::Bool _111954bc0_is_i64_compatible(jule::Str _3030_k) {
	_3030_k=_1118ceb10_real_kind_of(_3030_k);
	return ((((((_3030_k == jule::Str("i8", 2)) || (_3030_k == jule::Str("i16", 3))) || (_3030_k == jule::Str("i32", 3))) || (_3030_k == jule::Str("i64", 3))) || (_3030_k == jule::Str("u8", 2))) || (_3030_k == jule::Str("u16", 3))) || (_3030_k == jule::Str("u32", 3));
}



inline jule::Bool _111954bc0_is_u8_compatible(jule::Str _4229_k) {
	_4229_k=_1118ceb10_real_kind_of(_4229_k);
	return _4229_k == jule::Str("u8", 2);
}



inline jule::Bool _111954bc0_is_u16_compatible(jule::Str _4830_k) {
	_4830_k=_1118ceb10_real_kind_of(_4830_k);
	return (_4830_k == jule::Str("u8", 2)) || (_4830_k == jule::Str("u16", 3));
}



inline jule::Bool _111954bc0_is_u32_compatible(jule::Str _5430_k) {
	_5430_k=_1118ceb10_real_kind_of(_5430_k);
	return ((_5430_k == jule::Str("u8", 2)) || (_5430_k == jule::Str("u16", 3))) || (_5430_k == jule::Str("u32", 3));
}



inline jule::Bool _111954bc0_is_u64_compatible(jule::Str _6230_k) {
	_6230_k=_1118ceb10_real_kind_of(_6230_k);
	return (((_6230_k == jule::Str("u8", 2)) || (_6230_k == jule::Str("u16", 3))) || (_6230_k == jule::Str("u32", 3))) || (_6230_k == jule::Str("u64", 3));
}



inline jule::Bool _111954bc0_is_f32_compatible(jule::Str _7130_k) {
	_7130_k=_1118ceb10_real_kind_of(_7130_k);
	return _7130_k == jule::Str("f32", 3);
}



inline jule::Bool _111954bc0_is_f64_compatible(jule::Str _7730_k) {
	_7730_k=_1118ceb10_real_kind_of(_7730_k);
	return (_7730_k == jule::Str("f64", 3)) || (_7730_k == jule::Str("f32", 3));
}



inline jule::Bool _111954bc0_types_are_compatible(jule::Str _8633_k1,jule::Str _8642_k2) {
	_8633_k1=_1118ceb10_real_kind_of(_8633_k1);
	{
		auto _match_expr{ _8633_k1 };
		if (!((jule::Str("any", 3)) == _match_expr)) { goto _case_end_4604070880; }
		_case_begin_4604070880:;
		{
			return true;
		}
		goto _match_end_4604063616;
		_case_end_4604070880:;
		if (!((jule::Str("i8", 2)) == _match_expr)) { goto _case_end_4604071152; }
		_case_begin_4604071152:;
		{
			return _111954bc0_is_i8_compatible(_8642_k2);
		}
		goto _match_end_4604063616;
		_case_end_4604071152:;
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4604071264; }
		_case_begin_4604071264:;
		{
			return _111954bc0_is_i16_compatible(_8642_k2);
		}
		goto _match_end_4604063616;
		_case_end_4604071264:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4604071376; }
		_case_begin_4604071376:;
		{
			return _111954bc0_is_i32_compatible(_8642_k2);
		}
		goto _match_end_4604063616;
		_case_end_4604071376:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4604071488; }
		_case_begin_4604071488:;
		{
			return _111954bc0_is_i64_compatible(_8642_k2);
		}
		goto _match_end_4604063616;
		_case_end_4604071488:;
		if (!((jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4604071712; }
		_case_begin_4604071712:;
		{
			return _111954bc0_is_u8_compatible(_8642_k2);
		}
		goto _match_end_4604063616;
		_case_end_4604071712:;
		if (!((jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4604071824; }
		_case_begin_4604071824:;
		{
			return _111954bc0_is_u16_compatible(_8642_k2);
		}
		goto _match_end_4604063616;
		_case_end_4604071824:;
		if (!((jule::Str("u32", 3)) == _match_expr)) { goto _case_end_4604071936; }
		_case_begin_4604071936:;
		{
			return _111954bc0_is_u32_compatible(_8642_k2);
		}
		goto _match_end_4604063616;
		_case_end_4604071936:;
		if (!((jule::Str("u64", 3)) == _match_expr)) { goto _case_end_4604072048; }
		_case_begin_4604072048:;
		{
			return _111954bc0_is_u64_compatible(_8642_k2);
		}
		goto _match_end_4604063616;
		_case_end_4604072048:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4604072192; }
		_case_begin_4604072192:;
		{
			return _111954bc0_is_f32_compatible(_8642_k2);
		}
		goto _match_end_4604063616;
		_case_end_4604072192:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4604072304; }
		_case_begin_4604072304:;
		{
			return _111954bc0_is_f64_compatible(_8642_k2);
		}
		goto _match_end_4604063616;
		_case_end_4604072304:;
		if (!((jule::Str("bool", 4)) == _match_expr)) { goto _case_end_4604072416; }
		_case_begin_4604072416:;
		{
			return _8642_k2 == jule::Str("bool", 4);
		}
		goto _match_end_4604063616;
		_case_end_4604072416:;
		if (!((jule::Str("str", 3)) == _match_expr)) { goto _case_end_4604072528; }
		_case_begin_4604072528:;
		{
			return _8642_k2 == jule::Str("str", 3);
		}
		goto _match_end_4604063616;
		_case_end_4604072528:;
		_case_begin_4604068720:;
		{
			return false;
		}
		goto _match_end_4604063616;
		_case_end_4604068720:;
		_match_end_4604063616:;
	}
}



inline jule::Bool _111954bc0_is_i16_greater(jule::Str _10727_k) {
	_10727_k=_1118ceb10_real_kind_of(_10727_k);
	return _10727_k == jule::Str("u8", 2);
}



inline jule::Bool _111954bc0_is_i32_greater(jule::Str _11327_k) {
	_11327_k=_1118ceb10_real_kind_of(_11327_k);
	return (_11327_k == jule::Str("i8", 2)) || (_11327_k == jule::Str("i16", 3));
}



inline jule::Bool _111954bc0_is_i64_greater(jule::Str _11927_k) {
	_11927_k=_1118ceb10_real_kind_of(_11927_k);
	return ((_11927_k == jule::Str("i8", 2)) || (_11927_k == jule::Str("i16", 3))) || (_11927_k == jule::Str("i32", 3));
}



inline jule::Bool _111954bc0_is_u8_greater(jule::Str _12726_k) {
	_12726_k=_1118ceb10_real_kind_of(_12726_k);
	return _12726_k == jule::Str("i8", 2);
}



inline jule::Bool _111954bc0_is_u16_greater(jule::Str _13327_k) {
	_13327_k=_1118ceb10_real_kind_of(_13327_k);
	return ((_13327_k == jule::Str("u8", 2)) || (_13327_k == jule::Str("i8", 2))) || (_13327_k == jule::Str("i16", 3));
}



inline jule::Bool _111954bc0_is_u32_greater(jule::Str _14127_k) {
	_14127_k=_1118ceb10_real_kind_of(_14127_k);
	return ((((_14127_k == jule::Str("u8", 2)) || (_14127_k == jule::Str("u16", 3))) || (_14127_k == jule::Str("i8", 2))) || (_14127_k == jule::Str("i16", 3))) || (_14127_k == jule::Str("i32", 3));
}



inline jule::Bool _111954bc0_is_u64_greater(jule::Str _15127_k) {
	_15127_k=_1118ceb10_real_kind_of(_15127_k);
	return ((((((_15127_k == jule::Str("u8", 2)) || (_15127_k == jule::Str("u16", 3))) || (_15127_k == jule::Str("u32", 3))) || (_15127_k == jule::Str("i8", 2))) || (_15127_k == jule::Str("i16", 3))) || (_15127_k == jule::Str("i32", 3))) || (_15127_k == jule::Str("i64", 3));
}



inline jule::Bool _111954bc0_is_f32_greater(jule::Str _16323_k) {
	return _16323_k != jule::Str("f64", 3);
}



inline jule::Bool _111954bc0_is_f64_greater(jule::Str _16523_k) {
	return true;
}



inline jule::Bool _111954bc0_is_greater(jule::Str _16823_k1,jule::Str _16832_k2) {
	_16823_k1=_1118ceb10_real_kind_of(_16823_k1);
	{
		auto _match_expr{ _16823_k1 };
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4604100688; }
		_case_begin_4604100688:;
		{
			return _111954bc0_is_i16_greater(_16832_k2);
		}
		goto _match_end_4604098736;
		_case_end_4604100688:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4604100800; }
		_case_begin_4604100800:;
		{
			return _111954bc0_is_i32_greater(_16832_k2);
		}
		goto _match_end_4604098736;
		_case_end_4604100800:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4604101568; }
		_case_begin_4604101568:;
		{
			return _111954bc0_is_i64_greater(_16832_k2);
		}
		goto _match_end_4604098736;
		_case_end_4604101568:;
		if (!((jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4604101680; }
		_case_begin_4604101680:;
		{
			return _111954bc0_is_u16_greater(_16832_k2);
		}
		goto _match_end_4604098736;
		_case_end_4604101680:;
		if (!((jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4604101792; }
		_case_begin_4604101792:;
		{
			return _111954bc0_is_u8_greater(_16832_k2);
		}
		goto _match_end_4604098736;
		_case_end_4604101792:;
		if (!((jule::Str("u32", 3)) == _match_expr)) { goto _case_end_4604101920; }
		_case_begin_4604101920:;
		{
			return _111954bc0_is_u32_greater(_16832_k2);
		}
		goto _match_end_4604098736;
		_case_end_4604101920:;
		if (!((jule::Str("u64", 3)) == _match_expr)) { goto _case_end_4604100944; }
		_case_begin_4604100944:;
		{
			return _111954bc0_is_u64_greater(_16832_k2);
		}
		goto _match_end_4604098736;
		_case_end_4604100944:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4604101072; }
		_case_begin_4604101072:;
		{
			return _111954bc0_is_f32_greater(_16832_k2);
		}
		goto _match_end_4604098736;
		_case_end_4604101072:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4604101200; }
		_case_begin_4604101200:;
		{
			return _111954bc0_is_f64_greater(_16832_k2);
		}
		goto _match_end_4604098736;
		_case_end_4604101200:;
		if (!((jule::Str("any", 3)) == _match_expr)) { goto _case_end_4604101328; }
		_case_begin_4604101328:;
		{
			return true;
		}
		goto _match_end_4604098736;
		_case_end_4604101328:;
		_case_begin_4604100048:;
		{
			return false;
		}
		goto _match_end_4604098736;
		_case_end_4604100048:;
		_match_end_4604098736:;
	}
}



inline jule::Bool _1118e4c20_is_sig_int(jule::Str _2723_k) {
	_2723_k=_1118ceb10_real_kind_of(_2723_k);
	return (((_2723_k == jule::Str("i8", 2)) || (_2723_k == jule::Str("i16", 3))) || (_2723_k == jule::Str("i32", 3))) || (_2723_k == jule::Str("i64", 3));
}



inline jule::Bool _1118e4c20_is_unsig_int(jule::Str _3825_k) {
	_3825_k=_1118ceb10_real_kind_of(_3825_k);
	return (((_3825_k == jule::Str("u8", 2)) || (_3825_k == jule::Str("u16", 3))) || (_3825_k == jule::Str("u32", 3))) || (_3825_k == jule::Str("u64", 3));
}



inline jule::Bool _1118e4c20_is_int(jule::Str _4915_k) {
	return _1118e4c20_is_sig_int(_4915_k) || _1118e4c20_is_unsig_int(_4915_k);
}



inline jule::Bool _1118e4c20_is_float(jule::Str _5417_k) {
	return (_5417_k == jule::Str("f32", 3)) || (_5417_k == jule::Str("f64", 3));
}



inline jule::Bool _1118e4c20_is_num(jule::Str _5915_k) {
	return _1118e4c20_is_int(_5915_k) || _1118e4c20_is_float(_5915_k);
}



inline jule::Bool _1118e4c20_is_sig_num(jule::Str _6419_k) {
	return _1118e4c20_is_sig_int(_6419_k) || _1118e4c20_is_float(_6419_k);
}



inline std::tuple<jule::Str,jule::Bool> _111a1efb0_is_byte_lit(jule::Str _1524_kind) {
	if (_1524_kind.len() < 3LL) {
		return std::make_tuple(jule::Str("", 0),false);
	}
	_1524_kind=_1524_kind.slice(1LL,static_cast<jule::Int>(_1524_kind.len() - 1LL));
	jule::Bool _2113_is_byte = false;
	{
		if (!(((_1524_kind.len() == 1LL) && (_1524_kind[0LL] <= 255LL)))) { goto _case_end_4604138096; }
		_case_begin_4604138096:;
		{
			_2113_is_byte=true;
		}
		goto _match_end_4604137840;
		_case_end_4604138096:;
		if (!(((_1524_kind[0LL] == '\\') && (_1524_kind[1LL] == 'x')))) { goto _case_end_4604138208; }
		_case_begin_4604138208:;
		{
			_2113_is_byte=true;
		}
		goto _match_end_4604137840;
		_case_end_4604138208:;
		if (!((((_1524_kind[0LL] == '\\') && (_1524_kind[1LL] >= '0')) && (_1524_kind[1LL] <= '7')))) { goto _case_end_4604138320; }
		_case_begin_4604138320:;
		{
			_2113_is_byte=true;
		}
		goto _match_end_4604137840;
		_case_end_4604138320:;
		_match_end_4604137840:;
	}
	return std::make_tuple(_1524_kind,_2113_is_byte);
}



inline jule::I32 _111a1efb0_to_rune(jule::Slice<jule::U8> _4016_bytes) {
	if (_4016_bytes.len() == 0LL) {
		return 0LL;
	}
	jule::I32 _4513_r = 0LL;
	if ((_4016_bytes[0LL] == '\\') && (_4016_bytes.len() > 1LL)) {
		jule::Int _4717_i = 0LL;
		_4513_r=static_cast<jule::I32>(_111a1efb0_rune_from_esq_seq(_4016_bytes,_4717_i));
	} else {
		std::tie(_4513_r,std::ignore) = _1106ed100_decode_rune(_4016_bytes);
	}
	return _4513_r;
}



inline jule::Str _111a1efb0_to_raw_str(jule::Slice<jule::U8> _5919_bytes) {
	return static_cast<jule::Str>(_5919_bytes);
}



inline jule::Str _111a1efb0_to_str(jule::Slice<jule::U8> _6415_bytes) {
	if (_6415_bytes.len() == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _6913_s = jule::Str("", 0);
	jule::Int _7013_i = 0LL;
	_iter_begin_4604154960:;
	if (!(_7013_i < _6415_bytes.len())) { goto _iter_end_4604154960; }
	{
		jule::U8 _7213_b = _6415_bytes[static_cast<jule::Int>(_7013_i)];
		if (_7213_b == '\\') {
			_6913_s+=_111a1efb0_str_esq_seq(_6415_bytes,_7013_i);
		} else {
			jule::I32 _7618_r;
			jule::Int _7621_size;
			std::tie(_7618_r,_7621_size) = _1106ed100_decode_rune(_6415_bytes.slice(static_cast<jule::Int>(_7013_i)));
			_7013_i+=_7621_size;
			_6913_s+=static_cast<jule::Str>(_7618_r);
		}
	}
	_iter_next_4604154960:;
	goto _iter_begin_4604154960;
	_iter_end_4604154960:;
	return _6913_s;
}



inline std::tuple<jule::U8,jule::Bool> _111a1efb0_try_btoa_common_esq(jule::Slice<jule::U8> _8424_bytes) {
	jule::Bool _8452_ok = jule::Bool();
	jule::U8 _8441_seq = jule::U8();
	if ((_8424_bytes.len() < 2LL) || (_8424_bytes[0LL] != '\\')) {
		return std::make_tuple(_8441_seq,_8452_ok);
	}
	{
		auto _match_expr{ _8424_bytes[1LL] };
		if (!(('\\') == _match_expr)) { goto _case_end_4604165376; }
		_case_begin_4604165376:;
		{
			_8441_seq='\\';
		}
		goto _match_end_4604164192;
		_case_end_4604165376:;
		if (!(('\'') == _match_expr)) { goto _case_end_4604165488; }
		_case_begin_4604165488:;
		{
			_8441_seq='\'';
		}
		goto _match_end_4604164192;
		_case_end_4604165488:;
		if (!(('\"') == _match_expr)) { goto _case_end_4604165808; }
		_case_begin_4604165808:;
		{
			_8441_seq='\"';
		}
		goto _match_end_4604164192;
		_case_end_4604165808:;
		if (!(('a') == _match_expr)) { goto _case_end_4604165920; }
		_case_begin_4604165920:;
		{
			_8441_seq='\a';
		}
		goto _match_end_4604164192;
		_case_end_4604165920:;
		if (!(('b') == _match_expr)) { goto _case_end_4604166032; }
		_case_begin_4604166032:;
		{
			_8441_seq='\b';
		}
		goto _match_end_4604164192;
		_case_end_4604166032:;
		if (!(('f') == _match_expr)) { goto _case_end_4604166144; }
		_case_begin_4604166144:;
		{
			_8441_seq='\f';
		}
		goto _match_end_4604164192;
		_case_end_4604166144:;
		if (!(('n') == _match_expr)) { goto _case_end_4604166256; }
		_case_begin_4604166256:;
		{
			_8441_seq='\n';
		}
		goto _match_end_4604164192;
		_case_end_4604166256:;
		if (!(('r') == _match_expr)) { goto _case_end_4604166368; }
		_case_begin_4604166368:;
		{
			_8441_seq='\r';
		}
		goto _match_end_4604164192;
		_case_end_4604166368:;
		if (!(('t') == _match_expr)) { goto _case_end_4604166480; }
		_case_begin_4604166480:;
		{
			_8441_seq='\t';
		}
		goto _match_end_4604164192;
		_case_end_4604166480:;
		if (!(('v') == _match_expr)) { goto _case_end_4604166592; }
		_case_begin_4604166592:;
		{
			_8441_seq='\v';
		}
		goto _match_end_4604164192;
		_case_end_4604166592:;
		_match_end_4604164192:;
	}
	_8452_ok=_8441_seq != 0LL;
	return std::make_tuple(_8441_seq,_8452_ok);
}



inline jule::I32 _111a1efb0_rune_from_esq_seq(jule::Slice<jule::U8> _10622_bytes,jule::Int& _10642_i) {
	jule::U8 _10710_b;
	jule::Bool _10713_ok;
	std::tie(_10710_b,_10713_ok) = _111a1efb0_try_btoa_common_esq(_10622_bytes.slice(static_cast<jule::Int>(_10642_i)));
	(_10642_i)++;
	if (_10713_ok) {
		(_10642_i)++;
		return static_cast<jule::I32>(_10710_b);
	}
	{
		auto _match_expr{ _10622_bytes[static_cast<jule::Int>(_10642_i)] };
		if (!(('u') == _match_expr)) { goto _case_end_4604181904; }
		_case_begin_4604181904:;
		{
			
			jule::U64 _11714_rc;
			std::tie(_11714_rc,std::ignore) = _117e872d0_parse_uint(static_cast<jule::Str>(_10622_bytes.slice(static_cast<jule::Int>(_10642_i + 1LL),static_cast<jule::Int>(_10642_i + 5LL))),16LL,64LL);
			_10642_i+=5LL;
			jule::I32 _11913_r = static_cast<jule::I32>(_11714_rc);
			return _11913_r;
		}
		goto _match_end_4604177088;
		_case_end_4604181904:;
		if (!(('U') == _match_expr)) { goto _case_end_4604183568; }
		_case_begin_4604183568:;
		{
			
			jule::U64 _12414_rc;
			std::tie(_12414_rc,std::ignore) = _117e872d0_parse_uint(static_cast<jule::Str>(_10622_bytes.slice(static_cast<jule::Int>(_10642_i + 1LL),static_cast<jule::Int>(_10642_i + 9LL))),16LL,64LL);
			_10642_i+=9LL;
			jule::I32 _12613_r = static_cast<jule::I32>(_12414_rc);
			return _12613_r;
		}
		goto _match_end_4604177088;
		_case_end_4604183568:;
		if (!(('x') == _match_expr)) { goto _case_end_4604183680; }
		_case_begin_4604183680:;
		{
			
			jule::Slice<jule::U8> _13113_seq = _10622_bytes.slice(static_cast<jule::Int>(_10642_i + 1LL),static_cast<jule::Int>(_10642_i + 3LL));
			_10642_i+=3LL;
			jule::U64 _13314_b;
			std::tie(_13314_b,std::ignore) = _117e872d0_parse_uint(static_cast<jule::Str>(_13113_seq),16LL,64LL);
			return static_cast<jule::I32>(_13314_b);
		}
		goto _match_end_4604177088;
		_case_end_4604183680:;
		_case_begin_4604176160:;
		{
			
			jule::Slice<jule::U8> _13813_seq = _10622_bytes.slice(static_cast<jule::Int>(_10642_i),static_cast<jule::Int>(_10642_i + 3LL));
			_10642_i+=3LL;
			jule::U64 _14014_b;
			std::tie(_14014_b,std::ignore) = _117e872d0_parse_uint(static_cast<jule::Str>(_13813_seq.slice(1LL)),8LL,64LL);
			return static_cast<jule::I32>(_14014_b);
		}
		goto _match_end_4604177088;
		_case_end_4604176160:;
		_match_end_4604177088:;
	}
}



inline jule::Str _111a1efb0_str_esq_seq(jule::Slice<jule::U8> _14516_bytes,jule::Int& _14536_i) {
	jule::I32 _1469_r = _111a1efb0_rune_from_esq_seq(_14516_bytes,_14536_i);
	if (_1469_r <= 255LL) {
		return static_cast<jule::Str>(_1469_r);
	}
	return _111a1efb0_to_str(static_cast<jule::Slice<jule::U8>>(static_cast<jule::Str>(_1469_r)));
}



inline jule::Ref<_110d9ce90_ReferenceStack> _110d9ce90_new_reference_stack(void) {
	return jule::new_struct<_110d9ce90_ReferenceStack>(new( std::nothrow ) _110d9ce90_ReferenceStack());
}



inline jule::Str _110d9ce90_str_repeat(jule::Str _9715_sub,jule::Int _9729_n) {
	if (_9729_n == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _10213_s = jule::Str("", 0);
	_iter_begin_4606923776:;
	if (!(_9729_n > 0LL)) { goto _iter_end_4606923776; }
	{
		_10213_s+=_9715_sub;
	}
	_iter_next_4606923776:;
	(_9729_n)--;
	goto _iter_begin_4606923776;
	_iter_end_4606923776:;
	return _10213_s;
}



inline jule::Str _110d9ce90_build_doc(jule::Ref<_11054f670_CommentGroup> _10918_cg) {
	if ((!(jule::real(_10918_cg)))) {
		return jule::Str("", 0);
	}
	jule::Str _11413_doc = jule::Str("", 0);
	{
		auto __julec_range_expr = _10918_cg->_field_comments;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11054f670_Comment> _110d9ce90_c = *__julec_range_begin;
			_iter_begin_4606928368:;
			{
				_11413_doc+=_110d9ce90_c->_field_text;
				_11413_doc+=jule::Str(" ", 1);
			}
			_iter_next_4606928368:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110d9ce90_c = *__julec_range_begin; goto _iter_begin_4606928368; }
			_iter_end_4606928368:;
		}
	}
	return _11413_doc;
}



inline jule::Ref<_1116aff70_TypeSymbol> _110d9ce90_build_type(jule::Ref<_11054f670_TypeDecl> _12219_t) {
	if ((!(jule::real(_12219_t)))) {
		return jule::new_ref<_1116aff70_TypeSymbol>();
	}
	return jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(_12219_t,jule::Ref<_1116aff70_TypeKind>()));
}



inline jule::Ref<_1112d7f10_Value> _110d9ce90_build_expr(jule::Ref<_11054f670_Expr> _13119_expr) {
	if ((!(jule::real(_13119_expr)))) {
		return jule::new_ref<_1112d7f10_Value>();
	}
	return jule::new_struct<_1112d7f10_Value>(new( std::nothrow ) _1112d7f10_Value(_13119_expr,jule::Ref<_1112d7f10_Data>()));
}



inline jule::Ref<_1116aff70_TypeAlias> _110d9ce90_build_type_alias(jule::Ref<_11054f670_TypeAliasDecl> _14125_decl) {
	return jule::new_struct<_1116aff70_TypeAlias>(new( std::nothrow ) _1116aff70_TypeAlias(_14125_decl->_field_scope,_14125_decl->_field_public,_14125_decl->_field_cpp_linked,jule::Bool(),_14125_decl->_field_token,_14125_decl->_field_ident,_110d9ce90_build_type(_14125_decl->_field_kind),_110d9ce90_build_doc(_14125_decl->_field_doc_comments),jule::Slice<jule::Any>()));
}



inline jule::Ref<_1109372e0_Field> _110d9ce90_build_field(jule::Ref<_11054f670_FieldDecl> _15320_decl) {
	return jule::new_struct<_1109372e0_Field>(new( std::nothrow ) _1109372e0_Field(jule::Ref<_1109372e0_Struct>(),_15320_decl->_field_token,_15320_decl->_field_public,_15320_decl->_field_mutable,_15320_decl->_field_ident,_110d9ce90_build_type(_15320_decl->_field_kind)));
}



inline jule::Slice<jule::Ref<_1109372e0_Field>> _110d9ce90_build_fields(jule::Slice<jule::Ref<_11054f670_FieldDecl>> _16321_decls) {
	jule::Slice<jule::Ref<_1109372e0_Field>> _16413_fields = jule::Slice<jule::Ref<_1109372e0_Field>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_16321_decls.len())));
	{
		auto __julec_range_expr = _16321_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110d9ce90_i = 0;
			jule::Ref<_11054f670_FieldDecl> _110d9ce90_decl = *__julec_range_begin;
			_iter_begin_4606939040:;
			{
				_16413_fields[static_cast<jule::Int>(_110d9ce90_i)]=_110d9ce90_build_field(_110d9ce90_decl);
			}
			_iter_next_4606939040:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110d9ce90_i; _110d9ce90_decl = *__julec_range_begin; goto _iter_begin_4606939040; }
			_iter_end_4606939040:;
		}
	}
	return _16413_fields;
}



inline jule::Ref<_1109372e0_Struct> _110d9ce90_build_struct(jule::Ref<_11054f670_StructDecl> _17121_decl) {
	return jule::new_struct<_1109372e0_Struct>(new( std::nothrow ) _1109372e0_Struct(jule::Ref<_110e92bc0_Sema>(),jule::Slice<jule::Ref<_1109372e0_Struct>>(),jule::Slice<jule::Ref<_1109372e0_Struct>>(),_17121_decl->_field_token,_17121_decl->_field_ident,_110d9ce90_build_fields(_17121_decl->_field_fields),_1108ddf20_Vector_11(),_17121_decl->_field_public,_17121_decl->_field_cpp_linked,_17121_decl->_field_directives,_110d9ce90_build_doc(_17121_decl->_field_doc_comments),_17121_decl->_field_generics,jule::Slice<jule::Ref<_110e3f160_Trait>>(),jule::Slice<jule::Ref<_1109372e0_StructIns>>()));
}



inline jule::Ref<_11072eb20_Param> _110d9ce90_build_param(jule::Ref<_11054f670_ParamDecl> _18420_decl) {
	return jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_18420_decl->_field_token,_18420_decl->_field_mutable,_18420_decl->_field_variadic,_18420_decl->_field_reference,_110d9ce90_build_type(_18420_decl->_field_kind),_18420_decl->_field_ident));
}



inline jule::Slice<jule::Ref<_11072eb20_Param>> _110d9ce90_build_params(jule::Slice<jule::Ref<_11054f670_ParamDecl>> _19521_decls) {
	jule::Slice<jule::Ref<_11072eb20_Param>> _19613_params = jule::Slice<jule::Ref<_11072eb20_Param>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_19521_decls.len())));
	{
		auto __julec_range_expr = _19521_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110d9ce90_i = 0;
			jule::Ref<_11054f670_ParamDecl> _110d9ce90_decl = *__julec_range_begin;
			_iter_begin_4606957120:;
			{
				_19613_params[static_cast<jule::Int>(_110d9ce90_i)]=_110d9ce90_build_param(_110d9ce90_decl);
			}
			_iter_next_4606957120:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110d9ce90_i; _110d9ce90_decl = *__julec_range_begin; goto _iter_begin_4606957120; }
			_iter_end_4606957120:;
		}
	}
	return _19613_params;
}



inline jule::Ref<_11072eb20_RetType> _110d9ce90_build_ret_type(jule::Ref<_11054f670_RetTypeDecl> _20323_decl) {
	if ((_20323_decl->_field_idents == nullptr) && (!(jule::real(_20323_decl->_field_kind)))) {
		return jule::new_ref<_11072eb20_RetType>();
	}
	return jule::new_struct<_11072eb20_RetType>(new( std::nothrow ) _11072eb20_RetType(_110d9ce90_build_type(_20323_decl->_field_kind),_20323_decl->_field_idents));
}



inline jule::Ref<_11072eb20_Fn> _110d9ce90_build_fn(jule::Ref<_11054f670_FnDecl> _21317_decl) {
	return jule::new_struct<_11072eb20_Fn>(new( std::nothrow ) _11072eb20_Fn(jule::Ref<_110e92bc0_Sema>(),_21317_decl->_field_token,_21317_decl->_field_global,_21317_decl->_field_unsafety,_21317_decl->_field_public,_21317_decl->_field_cpp_linked,_21317_decl->_field_statically,_21317_decl->_field_ident,_21317_decl->_field_directives,_110d9ce90_build_doc(_21317_decl->_field_doc_comments),_21317_decl->_field_scope,_21317_decl->_field_generics,_110d9ce90_build_ret_type(_21317_decl->_field_result),_110d9ce90_build_params(_21317_decl->_field_params),jule::Ref<_1109372e0_Struct>(),jule::Slice<jule::Ref<_11072eb20_FnIns>>()));
}



inline jule::Slice<jule::Ref<_11072eb20_Fn>> _110d9ce90_build_methods(jule::Slice<jule::Ref<_11054f670_FnDecl>> _23122_decls) {
	jule::Slice<jule::Ref<_11072eb20_Fn>> _23213_methods = jule::Slice<jule::Ref<_11072eb20_Fn>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_23122_decls.len())));
	{
		auto __julec_range_expr = _23122_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110d9ce90_i = 0;
			jule::Ref<_11054f670_FnDecl> _110d9ce90_decl = *__julec_range_begin;
			_iter_begin_4606972416:;
			{
				_23213_methods[static_cast<jule::Int>(_110d9ce90_i)]=_110d9ce90_build_fn(_110d9ce90_decl);
			}
			_iter_next_4606972416:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110d9ce90_i; _110d9ce90_decl = *__julec_range_begin; goto _iter_begin_4606972416; }
			_iter_end_4606972416:;
		}
	}
	return _23213_methods;
}



inline jule::Ref<_110e3f160_Trait> _110d9ce90_build_trait(jule::Ref<_11054f670_TraitDecl> _23920_decl) {
	return jule::new_struct<_110e3f160_Trait>(new( std::nothrow ) _110e3f160_Trait(_23920_decl->_field_token,_23920_decl->_field_ident,_23920_decl->_field_public,_110d9ce90_build_doc(_23920_decl->_field_doc_comments),_110d9ce90_build_methods(_23920_decl->_field_methods),jule::Slice<jule::Ref<_1109372e0_Struct>>()));
}



inline jule::Ref<_110e453c0_EnumItem> _110d9ce90_build_enum_item(jule::Ref<_11054f670_EnumItemDecl> _24924_decl) {
	return jule::new_struct<_110e453c0_EnumItem>(new( std::nothrow ) _110e453c0_EnumItem(_24924_decl->_field_token,_24924_decl->_field_ident,_110d9ce90_build_expr(_24924_decl->_field_expr)));
}



inline jule::Slice<jule::Ref<_110e453c0_EnumItem>> _110d9ce90_build_enum_items(jule::Slice<jule::Ref<_11054f670_EnumItemDecl>> _25725_decls) {
	jule::Slice<jule::Ref<_110e453c0_EnumItem>> _25813_items = jule::Slice<jule::Ref<_110e453c0_EnumItem>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_25725_decls.len())));
	{
		auto __julec_range_expr = _25725_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110d9ce90_i = 0;
			jule::Ref<_11054f670_EnumItemDecl> _110d9ce90_decl = *__julec_range_begin;
			_iter_begin_4606983680:;
			{
				_25813_items[static_cast<jule::Int>(_110d9ce90_i)]=_110d9ce90_build_enum_item(_110d9ce90_decl);
			}
			_iter_next_4606983680:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110d9ce90_i; _110d9ce90_decl = *__julec_range_begin; goto _iter_begin_4606983680; }
			_iter_end_4606983680:;
		}
	}
	return _25813_items;
}



inline jule::Ref<_110e453c0_Enum> _110d9ce90_build_enum(jule::Ref<_11054f670_EnumDecl> _26519_decl) {
	return jule::new_struct<_110e453c0_Enum>(new( std::nothrow ) _110e453c0_Enum(_26519_decl->_field_token,_26519_decl->_field_public,_26519_decl->_field_ident,_110d9ce90_build_type(_26519_decl->_field_kind),_110d9ce90_build_enum_items(_26519_decl->_field_items),_110d9ce90_build_doc(_26519_decl->_field_doc_comments)));
}



inline jule::Ref<_110e92c80_Var> _110d9ce90_build_var(jule::Ref<_11054f670_VarDecl> _27618_decl) {
	return jule::new_struct<_110e92c80_Var>(new( std::nothrow ) _110e92c80_Var(jule::Ref<_110af2660_Scope>(),_27618_decl->_field_token,_27618_decl->_field_ident,_27618_decl->_field_cpp_linked,_27618_decl->_field_constant,_27618_decl->_field_mutable,_27618_decl->_field_public,jule::Bool(),_27618_decl->_field_statically,_27618_decl->_field_reference,_110d9ce90_build_doc(_27618_decl->_field_doc_comments),_110d9ce90_build_type(_27618_decl->_field_kind),_110d9ce90_build_expr(_27618_decl->_field_expr),_110d9ce90_new_reference_stack(),_27618_decl->_field_directives,jule::Slice<jule::Ref<_110e92c80_Var>>()));
}



inline jule::Ref<_110e4c050_Impl> _110d9ce90_build_impl(jule::Ref<_11054f670_Impl> _29419_decl) {
	return jule::new_struct<_110e4c050_Impl>(new( std::nothrow ) _110e4c050_Impl(_29419_decl->_field_base,_29419_decl->_field_dest,_110d9ce90_build_methods(_29419_decl->_field_methods)));
}



inline jule::Ref<_110af2660_ScopeChecker> _110af2660_new_scope_checker_base(jule::Ref<_110e92bc0_Sema> _3931_s,jule::Ref<_11072eb20_FnIns> _3945_owner) {
	return jule::new_struct<_110af2660_ScopeChecker>(new( std::nothrow ) _110af2660_ScopeChecker(_3931_s,_3945_owner,jule::Ref<_110af2660_ScopeChecker>(),jule::Int(),jule::new_struct<_1111c15d0_SymbolTable>(new( std::nothrow ) _1111c15d0_SymbolTable()),jule::Ref<_110af2660_Scope>(),jule::Ref<_11054f670_ScopeTree>(),jule::Uintptr(),jule::Uintptr(),jule::Ref<jule::Slice<jule::Ref<_110af2660_ScopeLabel>>>(),jule::Ref<jule::Slice<jule::Ref<_110af2660_ScopeGoto>>>(),jule::Int()));
}



inline jule::Ref<_110af2660_ScopeChecker> _110af2660_new_scope_checker(jule::Ref<_110e92bc0_Sema> _4726_s,jule::Ref<_11072eb20_FnIns> _4740_owner) {
	jule::Ref<_110af2660_ScopeChecker> _4813_base = _110af2660_new_scope_checker_base(_4726_s,_4740_owner);
	_4813_base->_field_labels=jule::new_ref<jule::Slice<jule::Ref<_110af2660_ScopeLabel>>>(nullptr);
	_4813_base->_field_gotos=jule::new_ref<jule::Slice<jule::Ref<_110af2660_ScopeGoto>>>(nullptr);
	return _4813_base;
}



inline jule::Ref<_110af2660_ScopeLabel> _110af2660_find_label_parent(jule::Str _5722_ident,jule::Ref<_110af2660_ScopeChecker> _5738_scope) {
	jule::Ref<_110af2660_ScopeLabel> _5813_label = _5738_scope->_method_find_label_scope(_5722_ident);
	_iter_begin_4607006880:;
	if (!((!(jule::real(_5813_label))))) { goto _iter_end_4607006880; }
	{
		if ((!(jule::real(_5738_scope->_field_parent))) || jule::real(_5738_scope->_field_owner)) {
			return jule::new_ref<_110af2660_ScopeLabel>();
		}
		_5738_scope=_5738_scope->_field_parent;
		_5813_label=_5738_scope->_method_find_label_scope(_5722_ident);
	}
	_iter_next_4607006880:;
	goto _iter_begin_4607006880;
	_iter_end_4607006880:;
	return _5813_label;
}



inline jule::Int _110af2660_count_match_type(jule::Ref<_110af2660_Match> _7121_m,jule::Ref<_1116aff70_TypeKind> _7132_t) {
	jule::Int _7213_n = 0LL;
	jule::Str _739_kind = _7132_t->_method_to_str();
	_julec_label_loop:;
	{
		auto __julec_range_expr = _7121_m->_field_cases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110af2660_Case> _110af2660_c = *__julec_range_begin;
			_iter_begin_4607017072:;
			{
				if ((!(jule::real(_110af2660_c)))) {
					goto _iter_next_4607017072;
				}
				{
					auto __julec_range_expr = _110af2660_c->_field_exprs;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Any _110af2660_expr = *__julec_range_begin;
						_iter_begin_4607019712:;
						{
							if (_110af2660_expr == nullptr) {
								goto _iter_end_4607017072;
							}
							if (_739_kind == _110af2660_expr.operator jule::Ref<_1116aff70_TypeKind>()->_method_to_str()) {
								(_7213_n)++;
							}
						}
						_iter_next_4607019712:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _110af2660_expr = *__julec_range_begin; goto _iter_begin_4607019712; }
						_iter_end_4607019712:;
					}
				}
			}
			_iter_next_4607017072:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110af2660_c = *__julec_range_begin; goto _iter_begin_4607017072; }
			_iter_end_4607017072:;
		}
	}
	return _7213_n;
}



inline jule::Slice<jule::Ref<_1112d7f10_Data>> _110af2660_get_datas_from_tuple_data(jule::Ref<_1112d7f10_Data> _9534_d) {
	if (jule::real(_9534_d->_field_kind->_method_tup())) {
		{
			auto _match_expr{ _9534_d->_field_model };
			if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_TupleExprModel>>())) { goto _case_end_4607035568; }
			_case_begin_4607035568:;
			{
				return _9534_d->_field_model.operator jule::Ref<_110e4e8a0_TupleExprModel>()->_field_datas;
			}
			goto _match_end_4607024912;
			_case_end_4607035568:;
			_case_begin_4607025600:;
			{
				jule::Ref<_1116aff70_Tuple> _10221_t = _9534_d->_field_kind->_method_tup();
				jule::Slice<jule::Ref<_1112d7f10_Data>> _10321_r = jule::Slice<jule::Ref<_1112d7f10_Data>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_10221_t->_field_types.len())));
				{
					auto __julec_range_expr = _10221_t->_field_types;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _110af2660_i = 0;
						jule::Ref<_1116aff70_TypeKind> _110af2660_kind = *__julec_range_begin;
						_iter_begin_4607031840:;
						{
							_10321_r[static_cast<jule::Int>(_110af2660_i)]=jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(_110af2660_kind,jule::Ref<_1116aff70_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
						}
						_iter_next_4607031840:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_110af2660_i; _110af2660_kind = *__julec_range_begin; goto _iter_begin_4607031840; }
						_iter_end_4607031840:;
					}
				}
				return _10321_r;
			}
			goto _match_end_4607024912;
			_case_end_4607025600:;
			_match_end_4607024912:;
		}
	} else {
		return jule::Slice<jule::Ref<_1112d7f10_Data>>({_9534_d});
	}
}



inline jule::Slice<jule::Any> _110af2660_get_expr_models(jule::Any _11724_m) {
	{
		auto _match_expr{ _11724_m };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_TupleExpr>>())) { goto _case_end_4607039360; }
		_case_begin_4607039360:;
		{
			jule::Ref<_11054f670_TupleExpr> _12017_tup = _11724_m.operator jule::Ref<_11054f670_TupleExpr>();
			jule::Slice<jule::Any> _12117_models = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::Int>(static_cast<jule::I64>(_12017_tup->_field_expr.len())));
			{
				auto __julec_range_expr = _12017_tup->_field_expr;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Ref<_11054f670_Expr> _110af2660_expr = *__julec_range_begin;
					_iter_begin_4607044048:;
					{
						_12117_models=jule::append(_12117_models,jule::Slice<jule::Any>({_110af2660_expr->_field_kind}));
					}
					_iter_next_4607044048:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _110af2660_expr = *__julec_range_begin; goto _iter_begin_4607044048; }
					_iter_end_4607044048:;
				}
			}
			return _12117_models;
		}
		goto _match_end_4607038464;
		_case_end_4607039360:;
		_case_begin_4607035984:;
		{
			return jule::Slice<jule::Any>({_11724_m});
		}
		goto _match_end_4607038464;
		_case_end_4607035984:;
		_match_end_4607038464:;
	}
}



inline jule::Bool _110af2660_check_mut(jule::Ref<_110e92bc0_Sema> _13218_s,jule::Ref<_1112d7f10_Data> _13228_left,jule::Ref<_1112d7f10_Data> _13245_right,_1106ec050_Token _13259_error_token) {
	jule::Bool _13281_ok = jule::Bool();
	{
		if (!(((!(_13228_left->_field_mutable))))) { goto _case_end_4607050368; }
		_case_begin_4607050368:;
		{
			_13218_s->_method_push_err(_13259_error_token,jule::Str("cannot assign to immutable define", 33),jule::Slice<jule::Any>({}));
			_13281_ok = false;
			return _13281_ok;
		}
		goto _match_end_4607048768;
		_case_end_4607050368:;
		if (!(((jule::real(_13245_right) && (!(_13245_right->_field_mutable))) && _1116aff70_is_mut(_13245_right->_field_kind)))) { goto _case_end_4607049888; }
		_case_begin_4607049888:;
		{
			_13218_s->_method_push_err(_13259_error_token,jule::Str("cannot assign mutable type used immutable define to mutable define", 66),jule::Slice<jule::Any>({}));
			_13281_ok = false;
			return _13281_ok;
		}
		goto _match_end_4607048768;
		_case_end_4607049888:;
		_case_begin_4607048880:;
		{
			_13281_ok = true;
			return _13281_ok;
		}
		goto _match_end_4607048768;
		_case_end_4607048880:;
		_match_end_4607048768:;
	}
}



inline jule::Bool _110af2660_check_assign(jule::Ref<_110e92bc0_Sema> _14721_s,jule::Ref<_1112d7f10_Data> _14735_left,jule::Ref<_1112d7f10_Data> _14752_right,_1106ec050_Token _14766_error_token) {
	jule::Bool _14788_ok = jule::Bool();
	jule::Ref<_11072eb20_FnIns> _1489_f = _14735_left->_field_kind->_method_fnc();
	if ((jule::real(_1489_f) && jule::real(_1489_f->_field_decl)) && _1489_f->_field_decl->_field_global) {
		_14721_s->_method_push_err(_14766_error_token,jule::Str("type is not support assignment", 30),jule::Slice<jule::Any>({}));
		_14788_ok = false;
		return _14788_ok;
	}
	{
		if (!((_14735_left->_method_is_const()))) { goto _case_end_4607066256; }
		_case_begin_4607066256:;
		{
			_14721_s->_method_push_err(_14766_error_token,jule::Str("constants is can't assign", 25),jule::Slice<jule::Any>({}));
			_14721_s->_method_push_suggestion(jule::Str("remove constant qualifer if you need to assign", 46),jule::Slice<jule::Any>({}));
			_14788_ok = false;
			return _14788_ok;
		}
		goto _match_end_4607064000;
		_case_end_4607066256:;
		if (!(((!(_14735_left->_field_lvalue))))) { goto _case_end_4607065760; }
		_case_begin_4607065760:;
		{
			_14721_s->_method_push_err(_14766_error_token,jule::Str("assignment required lvalue", 26),jule::Slice<jule::Any>({}));
			_14788_ok = false;
			return _14788_ok;
		}
		goto _match_end_4607064000;
		_case_end_4607065760:;
		if (!(((!(_110af2660_check_mut(_14721_s,_14735_left,_14752_right,_14766_error_token)))))) { goto _case_end_4607065888; }
		_case_begin_4607065888:;
		{
			_14788_ok = false;
			return _14788_ok;
		}
		goto _match_end_4607064000;
		_case_end_4607065888:;
		_case_begin_4607064752:;
		{
			_14788_ok = true;
			return _14788_ok;
		}
		goto _match_end_4607064000;
		_case_end_4607064752:;
		_match_end_4607064000:;
	}
}



inline jule::Bool _110af2660_is_valid_ast_st_for_next_st(jule::Any _17236_n) {
	{
		auto _match_expr{ _17236_n };
		if (!(_match_expr.type_is<jule::Ref<_11054f670_AssignSt>>())) { goto _case_end_4607076112; }
		_case_begin_4607076112:;
		{
			return (!(_17236_n.operator jule::Ref<_11054f670_AssignSt>()->_field_declarative));
		}
		goto _match_end_4607074784;
		_case_end_4607076112:;
		if (!(_match_expr.type_is<jule::Ref<_11054f670_FnCallExpr>>() || _match_expr.type_is<jule::Ref<_11054f670_Expr>>())) { goto _case_end_4607076224; }
		_case_begin_4607076224:;
		{
			return true;
		}
		goto _match_end_4607074784;
		_case_end_4607076224:;
		_case_begin_4607074880:;
		{
			return false;
		}
		goto _match_end_4607074784;
		_case_end_4607074880:;
		_match_end_4607074784:;
	}
}



inline jule::Bool _110af2660_is_valid_st_for_next_st(jule::Any _18628_st) {
	{
		auto _match_expr{ _18628_st };
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_FnCallExprModel>>() || _match_expr.type_is<jule::Ref<_110af2660_Postfix>>() || _match_expr.type_is<jule::Ref<_110af2660_Assign>>() || _match_expr.type_is<jule::Ref<_110af2660_MultiAssign>>())) { goto _case_end_4607079232; }
		_case_begin_4607079232:;
		{
			return true;
		}
		goto _match_end_4607078176;
		_case_end_4607079232:;
		if (!(_match_expr.type_is<jule::Ref<_1112d7f10_Data>>())) { goto _case_end_4607079344; }
		_case_begin_4607079344:;
		{
			{
				auto _match_expr{ _18628_st.operator jule::Ref<_1112d7f10_Data>()->_field_model };
				if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_FnCallExprModel>>())) { goto _case_end_4607087184; }
				_case_begin_4607087184:;
				{
					return true;
				}
				goto _match_end_4607084864;
				_case_end_4607087184:;
				_case_begin_4607086880:;
				{
					return false;
				}
				goto _match_end_4607084864;
				_case_end_4607086880:;
				_match_end_4607084864:;
			}
		}
		goto _match_end_4607078176;
		_case_end_4607079344:;
		_case_begin_4607078336:;
		{
			return false;
		}
		goto _match_end_4607078176;
		_case_end_4607078336:;
		_match_end_4607078176:;
	}
}



inline jule::Bool _110af2660_st_is_def(jule::Any _20514_st) {
	{
		auto _match_expr{ _20514_st };
		if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4607088976; }
		_case_begin_4607088976:;
		{
			return true;
		}
		goto _match_end_4607087792;
		_case_end_4607088976:;
		_case_begin_4607089280:;
		{
			return false;
		}
		goto _match_end_4607087792;
		_case_end_4607089280:;
		_match_end_4607087792:;
	}
}



inline jule::Ref<_110e92c80_Var> _110e4edc0_find_var_in_package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> _2728_files,jule::Str _2751_ident,jule::Bool _2763_cpp_linked) {
	{
		auto __julec_range_expr = _2728_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e4edc0_f = *__julec_range_begin;
			_iter_begin_4607092128:;
			{
				jule::Ref<_110e92c80_Var> _2917_v = _110e4edc0_f->_method_find_var(_2751_ident,_2763_cpp_linked);
				if (jule::real(_2917_v)) {
					return _2917_v;
				}
			}
			_iter_next_4607092128:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e4edc0_f = *__julec_range_begin; goto _iter_begin_4607092128; }
			_iter_end_4607092128:;
		}
	}
	return jule::new_ref<_110e92c80_Var>();
}



inline jule::Ref<_1116aff70_TypeAlias> _110e4edc0_find_type_alias_in_package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> _3935_files,jule::Str _3958_ident,jule::Bool _3970_cpp_linked) {
	{
		auto __julec_range_expr = _3935_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e4edc0_f = *__julec_range_begin;
			_iter_begin_4607099216:;
			{
				jule::Ref<_1116aff70_TypeAlias> _4117_ta = _110e4edc0_f->_method_find_type_alias(_3958_ident,_3970_cpp_linked);
				if (jule::real(_4117_ta)) {
					return _4117_ta;
				}
			}
			_iter_next_4607099216:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e4edc0_f = *__julec_range_begin; goto _iter_begin_4607099216; }
			_iter_end_4607099216:;
		}
	}
	return jule::new_ref<_1116aff70_TypeAlias>();
}



inline jule::Ref<_1109372e0_Struct> _110e4edc0_find_struct_in_package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> _5131_files,jule::Str _5154_ident,jule::Bool _5166_cpp_linked) {
	{
		auto __julec_range_expr = _5131_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e4edc0_f = *__julec_range_begin;
			_iter_begin_4607105968:;
			{
				jule::Ref<_1109372e0_Struct> _5317_s = _110e4edc0_f->_method_find_struct(_5154_ident,_5166_cpp_linked);
				if (jule::real(_5317_s)) {
					return _5317_s;
				}
			}
			_iter_next_4607105968:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e4edc0_f = *__julec_range_begin; goto _iter_begin_4607105968; }
			_iter_end_4607105968:;
		}
	}
	return jule::new_ref<_1109372e0_Struct>();
}



inline jule::Ref<_11072eb20_Fn> _110e4edc0_find_fn_in_package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> _6327_files,jule::Str _6350_ident,jule::Bool _6362_cpp_linked) {
	{
		auto __julec_range_expr = _6327_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e4edc0_file = *__julec_range_begin;
			_iter_begin_4607112720:;
			{
				jule::Ref<_11072eb20_Fn> _6517_f = _110e4edc0_file->_method_find_fn(_6350_ident,_6362_cpp_linked);
				if (jule::real(_6517_f)) {
					return _6517_f;
				}
			}
			_iter_next_4607112720:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e4edc0_file = *__julec_range_begin; goto _iter_begin_4607112720; }
			_iter_end_4607112720:;
		}
	}
	return jule::new_ref<_11072eb20_Fn>();
}



inline jule::Ref<_110e3f160_Trait> _110e4edc0_find_trait_in_package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> _7530_files,jule::Str _7553_ident) {
	{
		auto __julec_range_expr = _7530_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e4edc0_f = *__julec_range_begin;
			_iter_begin_4607118912:;
			{
				jule::Ref<_110e3f160_Trait> _7717_t = _110e4edc0_f->_method_find_trait(_7553_ident);
				if (jule::real(_7717_t)) {
					return _7717_t;
				}
			}
			_iter_next_4607118912:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e4edc0_f = *__julec_range_begin; goto _iter_begin_4607118912; }
			_iter_end_4607118912:;
		}
	}
	return jule::new_ref<_110e3f160_Trait>();
}



inline jule::Ref<_110e453c0_Enum> _110e4edc0_find_enum_in_package(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> _8729_files,jule::Str _8752_ident) {
	{
		auto __julec_range_expr = _8729_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e4edc0_f = *__julec_range_begin;
			_iter_begin_4607123088:;
			{
				jule::Ref<_110e453c0_Enum> _8917_e = _110e4edc0_f->_method_find_enum(_8752_ident);
				if (jule::real(_8917_e)) {
					return _8917_e;
				}
			}
			_iter_next_4607123088:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e4edc0_f = *__julec_range_begin; goto _iter_begin_4607123088; }
			_iter_end_4607123088:;
		}
	}
	return jule::new_ref<_110e453c0_Enum>();
}



inline _127e05da0_Log _110e92bc0_compiler_err(_1106ec050_Token _1617_token,jule::Bool _1631_line,jule::Str _1643_fmt,jule::Slice<jule::Any> _1656_args) {
	_127e05da0_Log _1713_log = _127e05da0_Log(1LLU,_1617_token._field_row,_1617_token._field_column,_1617_token._field_file->_method_path(),_127e05da0_logf(_1643_fmt,_1656_args),jule::Str(),jule::Str());
	if (_1631_line) {
		_1713_log._field_line=_1617_token._field_file->_method_get_row(_1617_token._field_row);
	}
	return _1713_log;
}



inline jule::Bool _110e92bc0_imp_is_lookupable(jule::Ref<_110e4edc0_ImportInfo> _3022_i,jule::Str _3038_ident) {
	if (_3022_i->_field_cpp_linked) {
		return false;
	}
	if ((!(_3022_i->_field_import_all))) {
		if (_3022_i->_field_selected.len() > 0LL) {
			return _3022_i->_method_exist_ident(_3038_ident);
		}
	}
	return _3022_i->_field_import_all;
}



inline jule::Slice<jule::Ref<_110e92c80_Var>> _110e92bc0_build_ret_vars(jule::Ref<_11072eb20_FnIns> _4323_f) {
	if (_4323_f->_field_decl->_method_is_void() || (!(jule::real(_4323_f->_field_result)))) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_110e92c80_Var>> _4813_vars = nullptr;
	jule::Slice<jule::Ref<_1116aff70_TypeKind>> _4913_types = _1111c0be0_get_fn_result_types(_4323_f);
	{
		auto __julec_range_expr = _4323_f->_field_decl->_field_result->_field_idents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110e92bc0_i = 0;
			_1106ec050_Token _110e92bc0_ident = *__julec_range_begin;
			_iter_begin_4607148832:;
			{
				if (_1106ec050_is_ignore_ident(_110e92bc0_ident._field_kind)) {
					goto _iter_next_4607148832;
				}
				jule::Ref<_110e92c80_Var> _5517_v = jule::new_struct<_110e92c80_Var>(new( std::nothrow ) _110e92c80_Var(_4323_f->_field_scope,_110e92bc0_ident,_110e92bc0_ident._field_kind,jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),_4913_types[static_cast<jule::Int>(_110e92bc0_i)])),jule::new_struct<_1112d7f10_Value>(new( std::nothrow ) _1112d7f10_Value(jule::Ref<_11054f670_Expr>(),jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data()))),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Slice<jule::Ref<_11054f670_Directive>>(),jule::Slice<jule::Ref<_110e92c80_Var>>()));
				_4813_vars=jule::append(_4813_vars,jule::Slice<jule::Ref<_110e92c80_Var>>({_5517_v}));
			}
			_iter_next_4607148832:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_i; _110e92bc0_ident = *__julec_range_begin; goto _iter_begin_4607148832; }
			_iter_end_4607148832:;
		}
	}
	return _4813_vars;
}



inline jule::Slice<jule::Ref<_110e92c80_Var>> _110e92bc0_build_param_vars(jule::Ref<_11072eb20_FnIns> _7225_f) {
	if (_7225_f->_field_params.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_110e92c80_Var>> _7713_vars = jule::Slice<jule::Ref<_110e92c80_Var>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_7225_f->_field_params.len())));
	{
		auto __julec_range_expr = _7225_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110e92bc0_i = 0;
			jule::Ref<_11072eb20_ParamIns> _110e92bc0_p = *__julec_range_begin;
			_iter_begin_4607162224:;
			{
				jule::Ref<_110e92c80_Var> _7917_v = jule::new_struct<_110e92c80_Var>(new( std::nothrow ) _110e92c80_Var(_7225_f->_field_scope,_110e92bc0_p->_field_decl->_field_token,_110e92bc0_p->_field_decl->_field_ident,jule::Bool(),jule::Bool(),_110e92bc0_p->_field_decl->_field_mutable,jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol()),jule::new_struct<_1112d7f10_Value>(new( std::nothrow ) _1112d7f10_Value(jule::Ref<_11054f670_Expr>(),jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data()))),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Slice<jule::Ref<_11054f670_Directive>>(),jule::Slice<jule::Ref<_110e92c80_Var>>()));
				{
					if (!((_110e92bc0_p->_field_decl->_method_is_self()))) { goto _case_end_4607169760; }
					_case_begin_4607169760:;
					{
						_7917_v->_field_kind->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_7225_f->_field_owner));
						_7917_v->_field_reference=true;
						if (_110e92bc0_p->_field_decl->_method_is_ref()) {
							_7917_v->_field_ident=_7917_v->_field_ident.slice(1LL);
							_7917_v->_field_kind->_field_kind->_field_kind=jule::new_struct<_1116aff70_Ref>(new( std::nothrow ) _1116aff70_Ref(_7917_v->_field_kind->_field_kind->_method_clone()));
						}
					}
					goto _match_end_4607168736;
					_case_end_4607169760:;
					if (!((_110e92bc0_p->_field_decl->_field_variadic))) { goto _case_end_4607172560; }
					_case_begin_4607172560:;
					{
						_7917_v->_field_kind->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1116aff70_Slc>(new( std::nothrow ) _1116aff70_Slc(_110e92bc0_p->_field_kind->_method_clone()))));
					}
					goto _match_end_4607168736;
					_case_end_4607172560:;
					_case_begin_4607168976:;
					{
						_7917_v->_field_kind->_field_kind=_110e92bc0_p->_field_kind->_method_clone();
					}
					goto _match_end_4607168736;
					_case_end_4607168976:;
					_match_end_4607168736:;
				}
				_7713_vars[static_cast<jule::Int>(_110e92bc0_i)]=_7917_v;
			}
			_iter_next_4607162224:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_i; _110e92bc0_p = *__julec_range_begin; goto _iter_begin_4607162224; }
			_iter_end_4607162224:;
		}
	}
	return _7713_vars;
}



inline jule::Slice<jule::Ref<_1116aff70_TypeAlias>> _110e92bc0_build_generic_type_aliases(jule::Ref<_11072eb20_FnIns> _12035_f) {
	jule::I64 _12113_size = _12035_f->_field_generics.len();
	if (jule::real(_12035_f->_field_decl->_field_owner)) {
		_12113_size+=static_cast<jule::I64>(_12035_f->_field_decl->_field_owner->_field_generics.len());
	}
	if (_12113_size == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_1116aff70_TypeAlias>> _13013_aliases = jule::Slice<jule::Ref<_1116aff70_TypeAlias>>::alloc(static_cast<jule::Int>(_12113_size));
	{
		auto __julec_range_expr = _12035_f->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _110e92bc0_i = 0;
			jule::Ref<_1116aff70_TypeKind> _110e92bc0_g = *__julec_range_begin;
			_iter_begin_4607189760:;
			{
				jule::Ref<_11054f670_GenericDecl> _13317_decl = _12035_f->_field_decl->_field_generics[static_cast<jule::Int>(_110e92bc0_i)];
				_13013_aliases[static_cast<jule::Int>(_110e92bc0_i)]=jule::new_struct<_1116aff70_TypeAlias>(new( std::nothrow ) _1116aff70_TypeAlias(_12035_f->_field_decl->_field_scope,jule::Bool(),jule::Bool(),true,_13317_decl->_field_token,_13317_decl->_field_ident,jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),_110e92bc0_g)),jule::Str(),jule::Slice<jule::Any>()));
			}
			_iter_next_4607189760:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_i; _110e92bc0_g = *__julec_range_begin; goto _iter_begin_4607189760; }
			_iter_end_4607189760:;
		}
	}
	if (jule::real(_12035_f->_field_decl->_field_owner)) {
		jule::Ref<_1109372e0_StructIns> _14417_owner = _12035_f->_field_owner;
		{
			auto __julec_range_expr = _14417_owner->_field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _110e92bc0_i = 0;
				jule::Ref<_1116aff70_TypeKind> _110e92bc0_g = *__julec_range_begin;
				_iter_begin_4607198160:;
				{
					jule::Ref<_11054f670_GenericDecl> _14621_decl = _14417_owner->_field_decl->_field_generics[static_cast<jule::Int>(_110e92bc0_i)];
					_13013_aliases[static_cast<jule::Int>(_12035_f->_field_generics.len() + _110e92bc0_i)]=jule::new_struct<_1116aff70_TypeAlias>(new( std::nothrow ) _1116aff70_TypeAlias(_12035_f->_field_decl->_field_scope,jule::Bool(),jule::Bool(),true,_14621_decl->_field_token,_14621_decl->_field_ident,jule::new_struct<_1116aff70_TypeSymbol>(new( std::nothrow ) _1116aff70_TypeSymbol(jule::Ref<_11054f670_TypeDecl>(),_110e92bc0_g)),jule::Str(),jule::Slice<jule::Any>()));
				}
				_iter_next_4607198160:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_110e92bc0_i; _110e92bc0_g = *__julec_range_begin; goto _iter_begin_4607198160; }
				_iter_end_4607198160:;
			}
		}
	}
	return _13013_aliases;
}



inline jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_find_file(jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> _16018_files,jule::Ref<_11054ec70_File> _16041_handler) {
	{
		auto __julec_range_expr = _16018_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110e92bc0_fl = *__julec_range_begin;
			_iter_begin_4607206192:;
			{
				if ((_110e92bc0_fl->_field_file).alloc == (_16041_handler).alloc) {
					return _110e92bc0_fl;
				}
			}
			_iter_next_4607206192:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_fl = *__julec_range_begin; goto _iter_begin_4607206192; }
			_iter_end_4607206192:;
		}
	}
	return jule::new_ref<_1111c15d0_SymbolTable>();
}



inline std::tuple<jule::Bool,jule::Bool> _110e92bc0_conditional_has_ret(jule::Ref<_110af2660_Conditional> _16928_c) {
	jule::Bool _16957_breaking = jule::Bool();
	jule::Bool _16947_ok = jule::Bool();
	jule::Bool _17013_breaked = false;
	{
		auto __julec_range_expr = _16928_c->_field_elifs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110af2660_If> _110e92bc0_elif = *__julec_range_begin;
			_iter_begin_4607211760:;
			{
				if ((!(jule::real(_110e92bc0_elif)))) {
					_16947_ok = false;
					_16957_breaking = false;
					return std::make_tuple(_16947_ok,_16957_breaking);
				}
				std::tie(_16947_ok,std::ignore,_16957_breaking) = _110e92bc0___has_ret(_110e92bc0_elif->_field_scope);
				_17013_breaked=_17013_breaked || _16957_breaking;
				if ((!(_16947_ok))) {
					_16947_ok = false;
					_16957_breaking = _17013_breaked;
					return std::make_tuple(_16947_ok,_16957_breaking);
				}
			}
			_iter_next_4607211760:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_elif = *__julec_range_begin; goto _iter_begin_4607211760; }
			_iter_end_4607211760:;
		}
	}
	if ((!(jule::real(_16928_c->_field_default)))) {
		_16947_ok = false;
		_16957_breaking = _17013_breaked;
		return std::make_tuple(_16947_ok,_16957_breaking);
	}
	std::tie(_16947_ok,std::ignore,_16957_breaking) = _110e92bc0___has_ret(_16928_c->_field_default->_field_scope);
	_17013_breaked=_17013_breaked || _16957_breaking;
	_16947_ok = _16947_ok;
	_16957_breaking = _17013_breaked;
	return std::make_tuple(_16947_ok,_16957_breaking);
}



inline jule::Bool _110e92bc0_match_has_ret(jule::Ref<_110af2660_Match> _19122_m) {
	if ((!(jule::real(_19122_m->_field_default)))) {
		return false;
	}
	jule::Bool _19613_ok = true;
	jule::Bool _19713_falled = false;
	jule::Bool _19813_breaked = false;
	{
		auto __julec_range_expr = _19122_m->_field_cases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110af2660_Case> _110e92bc0_c = *__julec_range_begin;
			_iter_begin_4607225936:;
			{
				if ((!(jule::real(_110e92bc0_c)))) {
					return false;
				}
				std::tie(_19613_ok,_19713_falled,_19813_breaked) = _110e92bc0___has_ret(_110e92bc0_c->_field_scope);
				if (((!(_19613_ok)) && (!(_19713_falled))) || _19813_breaked) {
					return false;
				}
				{
					if (!(((!(_19613_ok))))) { goto _case_end_4607230496; }
					_case_begin_4607230496:;
					{
						if ((!(_19713_falled))) {
							return false;
						}
						goto _case_begin_4607230608;
					}
					goto _match_end_4607229920;
					_case_end_4607230496:;
					if (!((_19713_falled))) { goto _case_end_4607230608; }
					_case_begin_4607230608:;
					{
						if ((!(jule::real(_110e92bc0_c->_field_next)))) {
							return false;
						}
						goto _iter_next_4607225936;
					}
					goto _match_end_4607229920;
					_case_end_4607230608:;
					_match_end_4607229920:;
				}
				_19713_falled=false;
			}
			_iter_next_4607225936:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110e92bc0_c = *__julec_range_begin; goto _iter_begin_4607225936; }
			_iter_end_4607225936:;
		}
	}
	return _110e92bc0_has_ret(_19122_m->_field_default->_field_scope);
}



inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _110e92bc0___has_ret(jule::Ref<_110af2660_Scope> _22718_s) {
	jule::Bool _22755_breaked = jule::Bool();
	jule::Bool _22741_falled = jule::Bool();
	jule::Bool _22731_ok = jule::Bool();
	if ((!(jule::real(_22718_s)))) {
		_22731_ok = false;
		_22741_falled = false;
		_22755_breaked = false;
		return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
	}
	jule::Int _23213_i = 0LL;
	_iter_begin_4607240608:;
	if (!(_23213_i < _22718_s->_field_stmts._method_len())) { goto _iter_end_4607240608; }
	{
		jule::Any _23417_st = _22718_s->_field_stmts._method_at(_23213_i);
		{
			auto _match_expr{ _23417_st };
			if (!(_match_expr.type_is<jule::Ref<_110af2660_FallSt>>())) { goto _case_end_4607243600; }
			_case_begin_4607243600:;
			{
				_22741_falled=true;
			}
			goto _match_end_4607241856;
			_case_end_4607243600:;
			if (!(_match_expr.type_is<jule::Ref<_110af2660_BreakSt>>())) { goto _case_end_4607243712; }
			_case_begin_4607243712:;
			{
				_22731_ok = false;
				_22741_falled = false;
				_22755_breaked = true;
				return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
			}
			goto _match_end_4607241856;
			_case_end_4607243712:;
			if (!(_match_expr.type_is<jule::Ref<_110af2660_RetSt>>())) { goto _case_end_4607243824; }
			_case_begin_4607243824:;
			{
				_22731_ok = true;
				_22741_falled = _22741_falled;
				_22755_breaked = _22755_breaked;
				return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
			}
			goto _match_end_4607241856;
			_case_end_4607243824:;
			if (!(_match_expr.type_is<jule::Ref<_110af2660_Scope>>())) { goto _case_end_4607243936; }
			_case_begin_4607243936:;
			{
				jule::Bool _24617_ok = _110e92bc0_has_ret(_23417_st.operator jule::Ref<_110af2660_Scope>());
				if (_24617_ok) {
					_22731_ok = true;
					_22741_falled = false;
					_22755_breaked = false;
					return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
				}
			}
			goto _match_end_4607241856;
			_case_end_4607243936:;
			if (!(_match_expr.type_is<jule::Ref<_1112d7f10_Data>>())) { goto _case_end_4607244048; }
			_case_begin_4607244048:;
			{
				{
					auto _match_expr{ _23417_st.operator jule::Ref<_1112d7f10_Data>()->_field_model };
					if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinPanicCallExprModel>>())) { goto _case_end_4607256880; }
					_case_begin_4607256880:;
					{
						_22731_ok = true;
						_22741_falled = _22741_falled;
						_22755_breaked = _22755_breaked;
						return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
					}
					goto _match_end_4607256208;
					_case_end_4607256880:;
					_match_end_4607256208:;
				}
			}
			goto _match_end_4607241856;
			_case_end_4607244048:;
			if (!(_match_expr.type_is<jule::Ref<_110af2660_Recover>>())) { goto _case_end_4607244160; }
			_case_begin_4607244160:;
			{
				jule::Bool _25818_ok;
				jule::Bool _25822_falled;
				jule::Bool _25830_breaked;
				std::tie(_25818_ok,_25822_falled,_25830_breaked) = _110e92bc0___has_ret(_23417_st.operator jule::Ref<_110af2660_Recover>()->_field_scope);
				if (_25818_ok) {
					_22731_ok = true;
					_22741_falled = _25822_falled;
					_22755_breaked = _25830_breaked;
					return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
				}
			}
			goto _match_end_4607241856;
			_case_end_4607244160:;
			if (!(_match_expr.type_is<jule::Ref<_110af2660_Conditional>>())) { goto _case_end_4607244272; }
			_case_begin_4607244272:;
			{
				jule::Bool _26418_ok;
				jule::Bool _26422_breaking;
				std::tie(_26418_ok,_26422_breaking) = _110e92bc0_conditional_has_ret(_23417_st.operator jule::Ref<_110af2660_Conditional>());
				if (_26418_ok) {
					_22731_ok = true;
					_22741_falled = false;
					_22755_breaked = false;
					return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
				}
				if (_26422_breaking) {
					_22731_ok = false;
					_22741_falled = false;
					_22755_breaked = _22755_breaked;
					return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
				}
			}
			goto _match_end_4607241856;
			_case_end_4607244272:;
			if (!(_match_expr.type_is<jule::Ref<_110af2660_Match>>())) { goto _case_end_4607244384; }
			_case_begin_4607244384:;
			{
				jule::Bool _27417_ok = _110e92bc0_match_has_ret(_23417_st.operator jule::Ref<_110af2660_Match>());
				if (_27417_ok) {
					_22731_ok = true;
					_22741_falled = false;
					_22755_breaked = false;
					return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
				}
			}
			goto _match_end_4607241856;
			_case_end_4607244384:;
			_match_end_4607241856:;
		}
	}
	_iter_next_4607240608:;
	(_23213_i)++;
	goto _iter_begin_4607240608;
	_iter_end_4607240608:;
	_22731_ok = false;
	_22741_falled = _22741_falled;
	_22755_breaked = _22755_breaked;
	return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
}



inline jule::Bool _110e92bc0_has_ret(jule::Ref<_110af2660_Scope> _28416_s) {
	jule::Bool _28510_ok;
	std::tie(_28510_ok,std::ignore,std::ignore) = _110e92bc0___has_ret(_28416_s);
	return _28510_ok;
}



inline void _110e92bc0_push_suggestion(_127e05da0_Log* _28931_log,jule::Str _28942_fmt,jule::Slice<jule::Any> _28955_args) {
	_28931_log->_field_suggestion=_127e05da0_logf(_28942_fmt,_28955_args);
}



inline jule::Slice<jule::Ref<_1116aff70_TypeKind>> _1111c0be0_get_fn_result_types(jule::Ref<_11072eb20_FnIns> _2528_f) {
	{
		if (!((_2528_f->_field_decl->_method_is_void() || (!(jule::real(_2528_f->_field_result)))))) { goto _case_end_4607284784; }
		_case_begin_4607284784:;
		{
			return nullptr;
		}
		goto _match_end_4607283216;
		_case_end_4607284784:;
		if (!(((!(jule::real(_2528_f->_field_result->_method_tup())))))) { goto _case_end_4607285840; }
		_case_begin_4607285840:;
		{
			return jule::Slice<jule::Ref<_1116aff70_TypeKind>>({_2528_f->_field_result});
		}
		goto _match_end_4607283216;
		_case_end_4607285840:;
		_case_begin_4607283376:;
		{
			return _2528_f->_field_result->_method_tup()->_field_types;
		}
		goto _match_end_4607283216;
		_case_end_4607283376:;
		_match_end_4607283216:;
	}
}



inline jule::Bool _1111c0be0_trait_has_reference_receiver(jule::Ref<_110e3f160_Trait> _3833_t) {
	{
		auto __julec_range_expr = _3833_t->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_Fn> _1111c0be0_f = *__julec_range_begin;
			_iter_begin_4607288016:;
			{
				if (_1111c0be0_f->_field_statically) {
					goto _iter_next_4607288016;
				}
				jule::Ref<_11072eb20_Param> _4513_p = _1111c0be0_f->_field_params[0LL];
				if (_4513_p->_method_is_ref() && _4513_p->_method_is_self()) {
					return true;
				}
			}
			_iter_next_4607288016:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1111c0be0_f = *__julec_range_begin; goto _iter_begin_4607288016; }
			_iter_end_4607288016:;
		}
	}
	return false;
}



inline jule::Bool _1111c0be0_float_assignable(jule::Str _5321_kind,jule::Ref<_1112d7f10_Data> _5332_d) {
	jule::Str _549_value = _117e12d10_fmt_float(static_cast<jule::F64>(_5332_d->_field_constant->_method_read_f64()),'e',-1LL,64LL);
	return _1118ceb10_check_bit_float(_549_value,static_cast<jule::Int>(_1118ceb10_bitsize_of(_5321_kind)));
}



inline jule::Bool _1111c0be0_sig_assignable(jule::Str _5819_kind,jule::Ref<_1112d7f10_Data> _5830_d) {
	jule::F64 _599_min = _1118d0df0_min(_5819_kind);
	jule::F64 _609_max = _1118d0df0_max(_5819_kind);
	{
		if (!((_5830_d->_field_constant->_method_is_f64()))) { goto _case_end_4607303184; }
		_case_begin_4607303184:;
		{
			jule::F64 _6413_x = static_cast<jule::F64>(_5830_d->_field_constant->_method_read_f64());
			jule::F64 _6514_i;
			jule::F64 _6517_frac;
			std::tie(_6514_i,_6517_frac) = _110254f60_modf(_6413_x);
			if (_6517_frac != 0LL) {
				return false;
			}
			return (_6514_i >= _599_min) && (_6514_i <= _609_max);
		}
		goto _match_end_4607302896;
		_case_end_4607303184:;
		if (!((_5830_d->_field_constant->_method_is_u64()))) { goto _case_end_4607303296; }
		_case_begin_4607303296:;
		{
			jule::F64 _7213_x = static_cast<jule::F64>(_5830_d->_field_constant->_method_read_u64());
			if (_7213_x <= _609_max) {
				return true;
			}
		}
		goto _match_end_4607302896;
		_case_end_4607303296:;
		if (!((_5830_d->_field_constant->_method_is_i64()))) { goto _case_end_4607303408; }
		_case_begin_4607303408:;
		{
			jule::F64 _7813_x = static_cast<jule::F64>(_5830_d->_field_constant->_method_read_i64());
			return (_599_min <= _7813_x) && (_7813_x <= _609_max);
		}
		goto _match_end_4607302896;
		_case_end_4607303408:;
		_match_end_4607302896:;
	}
	return false;
}



inline jule::Bool _1111c0be0_unsig_assignable(jule::Str _8521_kind,jule::Ref<_1112d7f10_Data> _8532_d) {
	jule::F64 _869_max = _1118d0df0_max(_8521_kind);
	{
		if (!((_8532_d->_field_constant->_method_is_f64()))) { goto _case_end_4607318592; }
		_case_begin_4607318592:;
		{
			jule::F64 _9013_x = _8532_d->_field_constant->_method_read_f64();
			if (_9013_x < 0LL) {
				return false;
			}
			jule::F64 _9514_i;
			jule::F64 _9517_frac;
			std::tie(_9514_i,_9517_frac) = _110254f60_modf(_9013_x);
			if (_9517_frac != 0LL) {
				return false;
			}
			return _9514_i <= _869_max;
		}
		goto _match_end_4607318288;
		_case_end_4607318592:;
		if (!((_8532_d->_field_constant->_method_is_u64()))) { goto _case_end_4607318704; }
		_case_begin_4607318704:;
		{
			jule::F64 _10213_x = static_cast<jule::F64>(_8532_d->_field_constant->_method_read_u64());
			if (_10213_x <= _869_max) {
				return true;
			}
		}
		goto _match_end_4607318288;
		_case_end_4607318704:;
		if (!((_8532_d->_field_constant->_method_is_i64()))) { goto _case_end_4607318816; }
		_case_begin_4607318816:;
		{
			jule::F64 _10813_x = static_cast<jule::F64>(_8532_d->_field_constant->_method_read_i64());
			return (0LL <= _10813_x) && (_10813_x <= _869_max);
		}
		goto _match_end_4607318288;
		_case_end_4607318816:;
		_match_end_4607318288:;
	}
	return false;
}



inline jule::Bool _1111c0be0_int_assignable(jule::Str _11519_kind,jule::Ref<_1112d7f10_Data> _11530_d) {
	{
		if (!((_1118e4c20_is_sig_int(_11519_kind)))) { goto _case_end_4607333200; }
		_case_begin_4607333200:;
		{
			return _1111c0be0_sig_assignable(_11519_kind,_11530_d);
		}
		goto _match_end_4607328656;
		_case_end_4607333200:;
		if (!((_1118e4c20_is_unsig_int(_11519_kind)))) { goto _case_end_4607333312; }
		_case_begin_4607333312:;
		{
			return _1111c0be0_unsig_assignable(_11519_kind,_11530_d);
		}
		goto _match_end_4607328656;
		_case_end_4607333312:;
		_case_begin_4607328768:;
		{
			return false;
		}
		goto _match_end_4607328656;
		_case_end_4607328768:;
		_match_end_4607328656:;
	}
}



inline jule::Any _1112d7f10_find_builtins_import(jule::Str _4525_ident,jule::Ref<_110e4edc0_ImportInfo> _4537_imp) {
	return _1113198e0_find_package_builtin_def(_4537_imp->_field_link_path,_4525_ident);
}



inline jule::Any _1112d7f10_find_builtins_sema(jule::Str _4923_ident,jule::Ref<_110e92bc0_Sema> _4939_s) {
	jule::Int _5013_i = 0LL;
	_iter_begin_4607336976:;
	if (!(_5013_i < _4939_s->_field_file->_field_imports._method_len())) { goto _iter_end_4607336976; }
	{
		jule::Ref<_110e4edc0_ImportInfo> _5217_imp = _4939_s->_field_file->_field_imports._method_at(_5013_i);
		if (_5217_imp->_field_import_all || _5217_imp->_method_exist_ident(_4923_ident)) {
			jule::Any _5421_def = _1112d7f10_find_builtins_import(_4923_ident,_5217_imp);
			if (_5421_def != nullptr) {
				return _5421_def;
			}
		}
	}
	_iter_next_4607336976:;
	(_5013_i)++;
	goto _iter_begin_4607336976;
	_iter_end_4607336976:;
	return jule::Any(nullptr);
}



inline jule::Bool _1112d7f10_is_ok_for_shifting(jule::Ref<_1112d7f10_Data> _6327_d) {
	jule::Ref<_1116aff70_Prim> _649_prim = _6327_d->_field_kind->_method_prim();
	if ((!(jule::real(_649_prim))) || (!(_1118e4c20_is_int(_649_prim->_method_to_str())))) {
		return false;
	}
	if ((!(_6327_d->_method_is_const()))) {
		return true;
	}
	{
		if (!((_6327_d->_field_constant->_method_is_i64()))) { goto _case_end_4607353888; }
		_case_begin_4607353888:;
		{
			return _6327_d->_field_constant->_method_read_i64() >= 0LL;
		}
		goto _match_end_4607352560;
		_case_end_4607353888:;
		if (!((_6327_d->_field_constant->_method_is_u64()))) { goto _case_end_4607354000; }
		_case_begin_4607354000:;
		{
			return true;
		}
		goto _match_end_4607352560;
		_case_end_4607354000:;
		_case_begin_4607352848:;
		{
			return false;
		}
		goto _match_end_4607352560;
		_case_end_4607352848:;
		_match_end_4607352560:;
	}
}



inline jule::Bool _1112d7f10_is_instanced_struct(jule::Ref<_1109372e0_StructIns> _8024_s) {
	return _8024_s->_field_decl->_field_generics.len() == _8024_s->_field_generics.len();
}



inline void _1112d7f10_normalize_bitsize(jule::Ref<_1112d7f10_Data> _8426_d) {
	if ((!(_8426_d->_method_is_const()))) {
		return;
	}
	jule::Str _8913_kind = jule::Str("", 0);
	{
		if (!((_8426_d->_field_constant->_method_is_f64()))) { goto _case_end_4607363088; }
		_case_begin_4607363088:;
		{
			jule::F64 _9213_x = _8426_d->_field_constant->_method_read_f64();
			_8913_kind=_1118ceb10_float_from_bits(static_cast<jule::U64>(_1118ceb10_bitsize_of_float(_9213_x)));
		}
		goto _match_end_4607361888;
		_case_end_4607363088:;
		if (!((_8426_d->_field_constant->_method_is_i64()))) { goto _case_end_4607362320; }
		_case_begin_4607362320:;
		{
			jule::I64 _9613_x = _8426_d->_field_constant->_method_read_i64();
			_8913_kind=_1118ceb10_int_from_bits(static_cast<jule::U64>(_1118ceb10_bitsize_of_int(_9613_x)));
		}
		goto _match_end_4607361888;
		_case_end_4607362320:;
		if (!((_8426_d->_field_constant->_method_is_u64()))) { goto _case_end_4607362432; }
		_case_begin_4607362432:;
		{
			jule::U64 _10013_x = _8426_d->_field_constant->_method_read_u64();
			_8913_kind=_1118ceb10_uint_from_bits(static_cast<jule::U64>(_1118ceb10_bitsize_of_uint(_10013_x)));
		}
		goto _match_end_4607361888;
		_case_end_4607362432:;
		_case_begin_4607362016:;
		{
			return;
		}
		goto _match_end_4607361888;
		_case_end_4607362016:;
		_match_end_4607361888:;
	}
	if (jule::real(_8426_d->_field_kind->_method_enm())) {
		return;
	}
	_8426_d->_field_kind->_field_kind=_1116aff70_build_prim_type(_8913_kind);
}



inline void _1112d7f10_normalize_type(jule::Ref<_1112d7f10_Data> _11523_d) {
	{
		if (!((_1111c0be0_int_assignable(jule::Str("int", 3),_11523_d)))) { goto _case_end_4607376176; }
		_case_begin_4607376176:;
		{
			_11523_d->_field_kind->_field_kind=_1116aff70_build_prim_type(jule::Str("int", 3));
			_11523_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_11523_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4607375968;
		_case_end_4607376176:;
		if (!((_1111c0be0_int_assignable(jule::Str("uint", 4),_11523_d)))) { goto _case_end_4607376304; }
		_case_begin_4607376304:;
		{
			_11523_d->_field_kind->_field_kind=_1116aff70_build_prim_type(jule::Str("uint", 4));
			_11523_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_11523_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4607375968;
		_case_end_4607376304:;
		_match_end_4607375968:;
	}
}



inline void _1112d7f10_apply_cast_kind_model(jule::Ref<_1112d7f10_Data> _12730_d) {
	_12730_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_CastingExprModel>(new( std::nothrow ) _110e4e8a0_CastingExprModel(_12730_d->_field_model,_12730_d->_field_cast_kind,_12730_d->_field_kind)));
}



inline void _1112d7f10_apply_cast_kind(jule::Ref<_1112d7f10_Data> _13524_d) {
	if ((!(jule::real(_13524_d->_field_cast_kind)))) {
		return;
	}
	_1112d7f10_apply_cast_kind_model(_13524_d);
	_13524_d->_field_kind=_13524_d->_field_cast_kind;
	jule::drop(_13524_d->_field_cast_kind);
}



inline jule::Ref<_1112d7f10_Data> _1112d7f10_build_void_data(void) {
	return jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("void", 4)))),jule::Ref<_1116aff70_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,jule::Ref<_1118cee40_Const>()));
}



inline jule::Str _1112d7f10_kind_by_bitsize(jule::Any _15620_expr) {
	{
		auto _match_expr{ _15620_expr };
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4607394400; }
		_case_begin_4607394400:;
		{
			jule::F64 _15913_x = _15620_expr.operator jule::F64();
			return _1118ceb10_float_from_bits(static_cast<jule::U64>(_1118ceb10_bitsize_of_float(_15913_x)));
		}
		goto _match_end_4607390960;
		_case_end_4607394400:;
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4607394512; }
		_case_begin_4607394512:;
		{
			jule::I64 _16313_x = _15620_expr.operator jule::I64();
			return _1118ceb10_int_from_bits(static_cast<jule::U64>(_1118ceb10_bitsize_of_int(_16313_x)));
		}
		goto _match_end_4607390960;
		_case_end_4607394512:;
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4607394624; }
		_case_begin_4607394624:;
		{
			jule::U64 _16713_x = _15620_expr.operator jule::U64();
			return _1118ceb10_uint_from_bits(static_cast<jule::U64>(_1118ceb10_bitsize_of_uint(_16713_x)));
		}
		goto _match_end_4607390960;
		_case_end_4607394624:;
		_case_begin_4607394224:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4607390960;
		_case_end_4607394224:;
		_match_end_4607390960:;
	}
}



inline jule::Str _1112d7f10_check_data_for_integer_indexing(jule::Ref<_1112d7f10_Data> _17540_d) {
	jule::Str _17552_err_fmt = jule::Str("", 0);
	if ((!(jule::real(_17540_d)))) {
		_17552_err_fmt = jule::Str("", 0);
		return _17552_err_fmt;
	}
	jule::Ref<_1116aff70_TypeKind> _18013_kind = _17540_d->_field_kind;
	if (jule::real(_18013_kind->_method_ref())) {
		_18013_kind=_18013_kind->_method_ref()->_field_elem;
	}
	{
		if (!(((!(jule::real(_18013_kind->_method_prim())))))) { goto _case_end_4607410272; }
		_case_begin_4607410272:;
		{
			_17552_err_fmt = jule::Str("invalid expression", 18);
			return _17552_err_fmt;
		}
		goto _match_end_4607405504;
		_case_end_4607410272:;
		if (!(((!(_1118e4c20_is_int(_18013_kind->_method_prim()->_method_to_str())))))) { goto _case_end_4607410384; }
		_case_begin_4607410384:;
		{
			_17552_err_fmt = jule::Str("invalid expression", 18);
			return _17552_err_fmt;
		}
		goto _match_end_4607405504;
		_case_end_4607410384:;
		if (!((_17540_d->_method_is_const()))) { goto _case_end_4607410496; }
		_case_begin_4607410496:;
		{
			if (_17540_d->_field_constant->_method_as_f64() < 0LL) {
				_17552_err_fmt = jule::Str("overflow the limit of data-type", 31);
				return _17552_err_fmt;
			}
		}
		goto _match_end_4607405504;
		_case_end_4607410496:;
		_case_begin_4607405744:;
		{
			_17540_d->_field_cast_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("int", 3))));
			_1112d7f10_apply_cast_kind(_17540_d);
		}
		goto _match_end_4607405504;
		_case_end_4607405744:;
		_match_end_4607405504:;
	}
	_17552_err_fmt = jule::Str("", 0);
	return _17552_err_fmt;
}



inline jule::Bool _1116aff70_can_get_ptr(jule::Ref<_1112d7f10_Data> _45420_d) {
	if ((!(_45420_d->_field_lvalue)) || _45420_d->_method_is_const()) {
		return false;
	}
	{
		if (!((jule::real(_45420_d->_field_kind->_method_fnc()) || jule::real(_45420_d->_field_kind->_method_enm())))) { goto _case_end_4607418224; }
		_case_begin_4607418224:;
		{
			return false;
		}
		goto _match_end_4607417088;
		_case_end_4607418224:;
		_case_begin_4607417248:;
		{
			return true;
		}
		goto _match_end_4607417088;
		_case_end_4607417248:;
		_match_end_4607417088:;
	}
}



inline jule::Bool _1116aff70_is_lvalue(jule::Ref<_1116aff70_TypeKind> _46818_t) {
	return ((jule::real(_46818_t->_method_ref()) || jule::real(_46818_t->_method_ptr())) || jule::real(_46818_t->_method_slc())) || jule::real(_46818_t->_method_map());
}



inline jule::Bool _1116aff70_is_mut(jule::Ref<_1116aff70_TypeKind> _47215_t) {
	if (jule::real(_47215_t->_method_strct())) {
		return _47215_t->_method_strct()->_field_has_mut;
	}
	if (jule::real(_47215_t->_method_prim())) {
		jule::Ref<_1116aff70_Prim> _47713_p = _47215_t->_method_prim();
		return _47713_p->_method_is_any();
	}
	return (jule::real(_47215_t->_method_slc()) || jule::real(_47215_t->_method_ptr())) || jule::real(_47215_t->_method_ref());
}



inline jule::Bool _1116aff70_supports_cloning(jule::Ref<_1116aff70_TypeKind> _48325_k) {
	{
		if (!((jule::real(_48325_k->_method_prim())))) { goto _case_end_4607436144; }
		_case_begin_4607436144:;
		{
			return (!(_48325_k->_method_prim()->_method_is_any()));
		}
		goto _match_end_4607435376;
		_case_end_4607436144:;
		if (!((jule::real(_48325_k->_method_enm())))) { goto _case_end_4607436256; }
		_case_begin_4607436256:;
		{
			return true;
		}
		goto _match_end_4607435376;
		_case_end_4607436256:;
		if (!((jule::real(_48325_k->_method_fnc())))) { goto _case_end_4607437232; }
		_case_begin_4607437232:;
		{
			return true;
		}
		goto _match_end_4607435376;
		_case_end_4607437232:;
		if (!((jule::real(_48325_k->_method_ptr())))) { goto _case_end_4607437344; }
		_case_begin_4607437344:;
		{
			return true;
		}
		goto _match_end_4607435376;
		_case_end_4607437344:;
		if (!((jule::real(_48325_k->_method_slc())))) { goto _case_end_4607437456; }
		_case_begin_4607437456:;
		{
			return _1116aff70_supports_cloning(_48325_k->_method_slc()->_field_elem);
		}
		goto _match_end_4607435376;
		_case_end_4607437456:;
		if (!((jule::real(_48325_k->_method_map())))) { goto _case_end_4607437584; }
		_case_begin_4607437584:;
		{
			return _1116aff70_supports_cloning(_48325_k->_method_map()->_field_key) && _1116aff70_supports_cloning(_48325_k->_method_map()->_field_val);
		}
		goto _match_end_4607435376;
		_case_end_4607437584:;
		if (!((jule::real(_48325_k->_method_arr())))) { goto _case_end_4607436592; }
		_case_begin_4607436592:;
		{
			return _1116aff70_supports_cloning(_48325_k->_method_arr()->_field_elem);
		}
		goto _match_end_4607435376;
		_case_end_4607436592:;
		if (!((jule::real(_48325_k->_method_ref())))) { goto _case_end_4607436720; }
		_case_begin_4607436720:;
		{
			return _1116aff70_supports_cloning(_48325_k->_method_ref()->_field_elem);
		}
		goto _match_end_4607435376;
		_case_end_4607436720:;
		if (!((jule::real(_48325_k->_method_strct())))) { goto _case_end_4607436848; }
		_case_begin_4607436848:;
		{
			jule::Ref<_1109372e0_StructIns> _51017_s = _48325_k->_method_strct();
			if ((!(_51017_s->_field_has_mut))) {
				return true;
			}
			if (((!(jule::real(_51017_s->_field_decl))) || _51017_s->_field_decl->_field_cpp_linked) || (!(_51017_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))))) {
				return false;
			}
			return true;
		}
		goto _match_end_4607435376;
		_case_end_4607436848:;
		_case_begin_4607431616:;
		{
			return false;
		}
		goto _match_end_4607435376;
		_case_end_4607431616:;
		_match_end_4607435376:;
	}
}



inline jule::Bool _1116aff70_is_nil_compatible(jule::Ref<_1116aff70_TypeKind> _52426_t) {
	jule::Ref<_1116aff70_Prim> _5259_prim = _52426_t->_method_prim();
	if (jule::real(_5259_prim) && _5259_prim->_method_is_any()) {
		return true;
	}
	return ((((_52426_t->_method_is_nil() || jule::real(_52426_t->_method_fnc())) || jule::real(_52426_t->_method_ptr())) || jule::real(_52426_t->_method_trt())) || jule::real(_52426_t->_method_slc())) || jule::real(_52426_t->_method_map());
}



inline jule::Bool _1116aff70_is_valid_for_ref(jule::Ref<_1116aff70_TypeKind> _54025_t) {
	jule::Ref<_1109372e0_StructIns> _54113_s = _54025_t->_method_strct();
	if ((jule::real(_54113_s) && jule::real(_54113_s->_field_decl)) && _54113_s->_field_decl->_field_cpp_linked) {
		return false;
	}
	return (!(((jule::real(_54025_t->_method_enm()) || jule::real(_54025_t->_method_ptr())) || jule::real(_54025_t->_method_ref())) || jule::real(_54025_t->_method_arr())));
}



inline jule::Bool _1116aff70_is_variadicable(jule::Ref<_1116aff70_TypeKind> _54824_tk) {
	return jule::real(_54824_tk->_method_slc());
}



inline jule::Str _1116aff70_build_link_path_by_tokens(jule::Slice<_1106ec050_Token> _55030_tokens) {
	jule::Str _55113_s = _55030_tokens[0LL]._field_kind;
	{
		auto __julec_range_expr = _55030_tokens.slice(1LL);
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_1106ec050_Token _1116aff70_token = *__julec_range_begin;
			_iter_begin_4607489968:;
			{
				_55113_s+=jule::Str("::", 2);
				_55113_s+=_1116aff70_token._field_kind;
			}
			_iter_next_4607489968:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1116aff70_token = *__julec_range_begin; goto _iter_begin_4607489968; }
			_iter_end_4607489968:;
		}
	}
	return _55113_s;
}



inline jule::Ref<_1116aff70_Prim> _1116aff70_build_prim_type(jule::Str _55920_kind) {
	return jule::new_struct<_1116aff70_Prim>(new( std::nothrow ) _1116aff70_Prim(_55920_kind));
}



inline jule::Ref<_1109372e0_Struct> _1116aff70_get_struct_from_kind(jule::Ref<_1116aff70_TypeKind> _56529_k) {
	{
		if (!(((!(jule::real(_56529_k)))))) { goto _case_end_4607496320; }
		_case_begin_4607496320:;
		{
			return jule::new_ref<_1109372e0_Struct>();
		}
		goto _match_end_4607493776;
		_case_end_4607496320:;
		if (!((jule::real(_56529_k->_method_strct())))) { goto _case_end_4607495328; }
		_case_begin_4607495328:;
		{
			return _56529_k->_method_strct()->_field_decl;
		}
		goto _match_end_4607493776;
		_case_end_4607495328:;
		if (!((jule::real(_56529_k->_method_ref())))) { goto _case_end_4607495536; }
		_case_begin_4607495536:;
		{
			return _1116aff70_get_struct_from_kind(_56529_k->_method_ref()->_field_elem);
		}
		goto _match_end_4607493776;
		_case_end_4607495536:;
		if (!((jule::real(_56529_k->_method_slc())))) { goto _case_end_4607495984; }
		_case_begin_4607495984:;
		{
			return _1116aff70_get_struct_from_kind(_56529_k->_method_slc()->_field_elem);
		}
		goto _match_end_4607493776;
		_case_end_4607495984:;
		if (!((jule::real(_56529_k->_method_arr())))) { goto _case_end_4607496096; }
		_case_begin_4607496096:;
		{
			return _1116aff70_get_struct_from_kind(_56529_k->_method_arr()->_field_elem);
		}
		goto _match_end_4607493776;
		_case_end_4607496096:;
		if (!((jule::real(_56529_k->_method_ptr())))) { goto _case_end_4607494928; }
		_case_begin_4607494928:;
		{
			return jule::new_ref<_1109372e0_Struct>();
		}
		goto _match_end_4607493776;
		_case_end_4607494928:;
		_case_begin_4607493920:;
		{
			return jule::new_ref<_1109372e0_Struct>();
		}
		goto _match_end_4607493776;
		_case_end_4607493920:;
		_match_end_4607493776:;
	}
}



inline jule::Bool _1116aff70_is_prim(jule::Str _59412_kind) {
	return (((((((((((((((_59412_kind == jule::Str("i8", 2)) || (_59412_kind == jule::Str("i16", 3))) || (_59412_kind == jule::Str("i32", 3))) || (_59412_kind == jule::Str("i64", 3))) || (_59412_kind == jule::Str("u8", 2))) || (_59412_kind == jule::Str("u16", 3))) || (_59412_kind == jule::Str("u32", 3))) || (_59412_kind == jule::Str("u64", 3))) || (_59412_kind == jule::Str("f32", 3))) || (_59412_kind == jule::Str("f64", 3))) || (_59412_kind == jule::Str("int", 3))) || (_59412_kind == jule::Str("uint", 4))) || (_59412_kind == jule::Str("uintptr", 7))) || (_59412_kind == jule::Str("bool", 4))) || (_59412_kind == jule::Str("str", 3))) || (_59412_kind == jule::Str("any", 3));
}



inline std::tuple<jule::Ref<_1111c15d0_SymbolTable>,jule::Slice<_127e05da0_Log>> _1117d9ee0_build_symbols(jule::Ref<_1104fada0_Ast> _922_ast,jule::Trait<_110e4edc0_Importer> _937_importer,jule::Ref<_110d9ce90_SymbolBuilder> _961_owner) {
	jule::Ref<_110d9ce90_SymbolBuilder> _1013_sb = jule::new_struct<_110d9ce90_SymbolBuilder>(new( std::nothrow ) _110d9ce90_SymbolBuilder(_961_owner,_937_importer,jule::Slice<_127e05da0_Log>(),_922_ast,jule::Ref<_1111c15d0_SymbolTable>()));
	_1013_sb->_method_build();
	if (_1013_sb->_field_errors.len() == 0LL) {
		return std::make_tuple(_1013_sb->_field_table,nullptr);
	}
	return std::make_tuple(jule::new_ref<_1111c15d0_SymbolTable>(),_1013_sb->_field_errors);
}



inline std::tuple<jule::Ref<_110e4edc0_Package>,jule::Slice<_127e05da0_Log>> _1117d9ee0___analyze_package(jule::Slice<jule::Ref<_1104fada0_Ast>> _2326_files,jule::Trait<_110e4edc0_Importer> _2345_importer) {
	jule::Slice<jule::Ref<_1111c15d0_SymbolTable>> _2513_tables = jule::Slice<jule::Ref<_1111c15d0_SymbolTable>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_2326_files.len())));
	{
		auto __julec_range_expr = _2326_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1117d9ee0_i = 0;
			jule::Ref<_1104fada0_Ast> _1117d9ee0_f = *__julec_range_begin;
			_iter_begin_4607521168:;
			{
				jule::Ref<_1111c15d0_SymbolTable> _2718_table;
				jule::Slice<_127e05da0_Log> _2729_errors;
				std::tie(_2718_table,_2729_errors) = _1117d9ee0_build_symbols(_1117d9ee0_f,_2345_importer,jule::new_ref<_110d9ce90_SymbolBuilder>());
				if (_2729_errors.len() > 0LL) {
					return std::make_tuple(jule::new_ref<_110e4edc0_Package>(),_2729_errors);
				}
				_2513_tables[static_cast<jule::Int>(_1117d9ee0_i)]=_2718_table;
			}
			_iter_next_4607521168:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1117d9ee0_i; _1117d9ee0_f = *__julec_range_begin; goto _iter_begin_4607521168; }
			_iter_end_4607521168:;
		}
	}
	jule::Ref<_110e92bc0_Sema> _3413_sema = jule::new_struct<_110e92bc0_Sema>(new( std::nothrow ) _110e92bc0_Sema());
	_3413_sema->_method_check(_2513_tables);
	if (_3413_sema->_field_errors.len() > 0LL) {
		return std::make_tuple(jule::new_ref<_110e4edc0_Package>(),_3413_sema->_field_errors);
	}
	jule::Ref<_110e4edc0_Package> _4013_pkg = jule::new_struct<_110e4edc0_Package>(new( std::nothrow ) _110e4edc0_Package(_3413_sema->_field_files));
	return std::make_tuple(_4013_pkg,nullptr);
}



inline std::tuple<jule::Ref<_110e4edc0_Package>,jule::Slice<_127e05da0_Log>> _1117d9ee0_analyze_package(jule::Slice<jule::Ref<_1104fada0_Ast>> _6428_files,jule::Trait<_110e4edc0_Importer> _6447_importer) {
	if (_6428_files.len() == 0LL) {
		return std::make_tuple(jule::new_ref<_110e4edc0_Package>(),nullptr);
	}
	jule::Ref<_110e4edc0_Package> _6914_package;
	jule::Slice<_127e05da0_Log> _6927_logs;
	std::tie(_6914_package,_6927_logs) = _1117d9ee0___analyze_package(_6428_files,_6447_importer);
	return std::make_tuple(_6914_package,_6927_logs);
}



inline std::tuple<jule::Ref<_1111c15d0_SymbolTable>,jule::Slice<_127e05da0_Log>> _1117d9ee0_analyze_file(jule::Ref<_1104fada0_Ast> _9025_f,jule::Trait<_110e4edc0_Importer> _9038_importer) {
	jule::Slice<jule::Ref<_1104fada0_Ast>> _9113_files = jule::Slice<jule::Ref<_1104fada0_Ast>>({_9025_f});
	jule::Ref<_110e4edc0_Package> _9214_pkg;
	jule::Slice<_127e05da0_Log> _9223_errors;
	std::tie(_9214_pkg,_9223_errors) = _1117d9ee0_analyze_package(_9113_files,_9038_importer);
	if (_9223_errors.len() > 0LL) {
		return std::make_tuple(jule::new_ref<_1111c15d0_SymbolTable>(),_9223_errors);
	}
	jule::Ref<_1111c15d0_SymbolTable> _9913_table = _9214_pkg->_field_files[0LL];
	return std::make_tuple(_9913_table,nullptr);
}



inline void _1113198e0_init(void) {
	_1113198e0_BUILTIN_FN_OUT->_field_caller=_1113198e0_builtin_caller_out;
	_1113198e0_BUILTIN_FN_OUTLN->_field_caller=_1113198e0_builtin_caller_outln;
	_1113198e0_BUILTIN_FN_NEW->_field_caller=_1113198e0_builtin_caller_new;
	_1113198e0_BUILTIN_FN_REAL->_field_caller=_1113198e0_builtin_caller_real;
	_1113198e0_BUILTIN_FN_DROP->_field_caller=_1113198e0_builtin_caller_drop;
	_1113198e0_BUILTIN_FN_PANIC->_field_caller=_1113198e0_builtin_caller_panic;
	_1113198e0_BUILTIN_FN_MAKE->_field_caller=_1113198e0_builtin_caller_make;
	_1113198e0_BUILTIN_FN_APPEND->_field_caller=_1113198e0_builtin_caller_append;
	_1113198e0_BUILTIN_FN_COPY->_field_caller=_1113198e0_builtin_caller_copy;
	_1113198e0_BUILTIN_FN_RECOVER->_field_caller=_1113198e0_builtin_caller_recover;
	_1113198e0_BUILTIN_FN_CLONE->_field_caller=_1113198e0_builtin_caller_clone;
	_1113198e0_BUILTIN_FN_STD_MEM_SIZE_OF->_field_caller=_1113198e0_builtin_caller_std_mem_size_of;
	_1113198e0_BUILTIN_FN_STD_MEM_ALIGN_OF->_field_caller=_1113198e0_builtin_caller_std_mem_align_of;
	jule::Ref<_11072eb20_Fn> _9113_error_method = _1113198e0_BUILTIN_TRAIT_ERROR->_method_find_method(jule::Str("error", 5));
	jule::Ref<_11072eb20_FnIns> _9213_error_method_ins = _9113_error_method->_method_instance();
	_9213_error_method_ins->_field_result=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("str", 3))));
	_9213_error_method_ins->_field_caller=_1113198e0_builtin_caller_common;
	_9113_error_method->_method_append_instance(_9213_error_method_ins);
}



inline jule::Ref<_11072eb20_FnIns> _1113198e0_find_builtin_fn(jule::Str _9820_ident) {
	{
		auto _match_expr{ _9820_ident };
		if (!((jule::Str("out", 3)) == _match_expr)) { goto _case_end_4607568176; }
		_case_begin_4607568176:;
		{
			return _1113198e0_BUILTIN_FN_OUT;
		}
		goto _match_end_4607565984;
		_case_end_4607568176:;
		if (!((jule::Str("outln", 5)) == _match_expr)) { goto _case_end_4607568752; }
		_case_begin_4607568752:;
		{
			return _1113198e0_BUILTIN_FN_OUTLN;
		}
		goto _match_end_4607565984;
		_case_end_4607568752:;
		if (!((jule::Str("new", 3)) == _match_expr)) { goto _case_end_4607567760; }
		_case_begin_4607567760:;
		{
			return _1113198e0_BUILTIN_FN_NEW;
		}
		goto _match_end_4607565984;
		_case_end_4607567760:;
		if (!((jule::Str("real", 4)) == _match_expr)) { goto _case_end_4607567968; }
		_case_begin_4607567968:;
		{
			return _1113198e0_BUILTIN_FN_REAL;
		}
		goto _match_end_4607565984;
		_case_end_4607567968:;
		if (!((jule::Str("drop", 4)) == _match_expr)) { goto _case_end_4607568416; }
		_case_begin_4607568416:;
		{
			return _1113198e0_BUILTIN_FN_DROP;
		}
		goto _match_end_4607565984;
		_case_end_4607568416:;
		if (!((jule::Str("panic", 5)) == _match_expr)) { goto _case_end_4607568528; }
		_case_begin_4607568528:;
		{
			return _1113198e0_BUILTIN_FN_PANIC;
		}
		goto _match_end_4607565984;
		_case_end_4607568528:;
		if (!((jule::Str("make", 4)) == _match_expr)) { goto _case_end_4607567360; }
		_case_begin_4607567360:;
		{
			return _1113198e0_BUILTIN_FN_MAKE;
		}
		goto _match_end_4607565984;
		_case_end_4607567360:;
		if (!((jule::Str("append", 6)) == _match_expr)) { goto _case_end_4607567472; }
		_case_begin_4607567472:;
		{
			return _1113198e0_BUILTIN_FN_APPEND;
		}
		goto _match_end_4607565984;
		_case_end_4607567472:;
		if (!((jule::Str("copy", 4)) == _match_expr)) { goto _case_end_4607567584; }
		_case_begin_4607567584:;
		{
			return _1113198e0_BUILTIN_FN_COPY;
		}
		goto _match_end_4607565984;
		_case_end_4607567584:;
		if (!((jule::Str("recover", 7)) == _match_expr)) { goto _case_end_4607566832; }
		_case_begin_4607566832:;
		{
			return _1113198e0_BUILTIN_FN_RECOVER;
		}
		goto _match_end_4607565984;
		_case_end_4607566832:;
		if (!((jule::Str("clone", 5)) == _match_expr)) { goto _case_end_4607566944; }
		_case_begin_4607566944:;
		{
			return _1113198e0_BUILTIN_FN_CLONE;
		}
		goto _match_end_4607565984;
		_case_end_4607566944:;
		_case_begin_4607566448:;
		{
			return jule::new_ref<_11072eb20_FnIns>();
		}
		goto _match_end_4607565984;
		_case_end_4607566448:;
		_match_end_4607565984:;
	}
}



inline jule::Ref<_1116aff70_TypeAlias> _1113198e0_find_builtin_type_alias(jule::Str _11528_ident) {
	{
		auto _match_expr{ _11528_ident };
		if (!((jule::Str("byte", 4)) == _match_expr)) { goto _case_end_4607576944; }
		_case_begin_4607576944:;
		{
			return _1113198e0_BUILTIN_TYPE_ALIAS_BYTE;
		}
		goto _match_end_4607574400;
		_case_end_4607576944:;
		if (!((jule::Str("rune", 4)) == _match_expr)) { goto _case_end_4607575952; }
		_case_begin_4607575952:;
		{
			return _1113198e0_BUILTIN_TYPE_ALIAS_RUNE;
		}
		goto _match_end_4607574400;
		_case_end_4607575952:;
		_case_begin_4607574752:;
		{
			return jule::new_ref<_1116aff70_TypeAlias>();
		}
		goto _match_end_4607574400;
		_case_end_4607574752:;
		_match_end_4607574400:;
	}
}



inline jule::Ref<_110e3f160_Trait> _1113198e0_find_builtin_trait(jule::Str _12323_ident) {
	{
		auto _match_expr{ _12323_ident };
		if (!((jule::Str("Error", 5)) == _match_expr)) { goto _case_end_4607578016; }
		_case_begin_4607578016:;
		{
			return _1113198e0_BUILTIN_TRAIT_ERROR;
		}
		goto _match_end_4607576160;
		_case_end_4607578016:;
		_case_begin_4607577552:;
		{
			return jule::new_ref<_110e3f160_Trait>();
		}
		goto _match_end_4607576160;
		_case_end_4607577552:;
		_match_end_4607576160:;
	}
}



inline jule::Any _1113198e0_find_builtin_def(jule::Str _13021_ident) {
	jule::Ref<_11072eb20_FnIns> _13113_f = _1113198e0_find_builtin_fn(_13021_ident);
	if (jule::real(_13113_f)) {
		return jule::Any(_13113_f);
	}
	jule::Ref<_1116aff70_TypeAlias> _13613_ta = _1113198e0_find_builtin_type_alias(_13021_ident);
	if (jule::real(_13613_ta)) {
		return jule::Any(_13613_ta);
	}
	jule::Ref<_110e3f160_Trait> _14113_t = _1113198e0_find_builtin_trait(_13021_ident);
	if (jule::real(_14113_t)) {
		return jule::Any(_14113_t);
	}
	return jule::Any(nullptr);
}



inline jule::Any _1113198e0_find_builtin_def_std_mem(jule::Str _14929_ident) {
	{
		auto _match_expr{ _14929_ident };
		if (!((jule::Str("size_of", 7)) == _match_expr)) { goto _case_end_4607587664; }
		_case_begin_4607587664:;
		{
			return jule::Any(_1113198e0_BUILTIN_FN_STD_MEM_SIZE_OF);
		}
		goto _match_end_4607584528;
		_case_end_4607587664:;
		if (!((jule::Str("align_of", 8)) == _match_expr)) { goto _case_end_4607588224; }
		_case_begin_4607588224:;
		{
			return jule::Any(_1113198e0_BUILTIN_FN_STD_MEM_ALIGN_OF);
		}
		goto _match_end_4607584528;
		_case_end_4607588224:;
		_case_begin_4607586064:;
		{
			return jule::Any(nullptr);
		}
		goto _match_end_4607584528;
		_case_end_4607586064:;
		_match_end_4607584528:;
	}
}



inline jule::Any _1113198e0_find_package_builtin_def(jule::Str _15729_link_path,jule::Str _15745_ident) {
	{
		auto _match_expr{ _15729_link_path };
		if (!((jule::Str("std::mem", 8)) == _match_expr)) { goto _case_end_4607591744; }
		_case_begin_4607591744:;
		{
			return _1113198e0_find_builtin_def_std_mem(_15745_ident);
		}
		goto _match_end_4607590000;
		_case_end_4607591744:;
		_case_begin_4607590400:;
		{
			return jule::Any(nullptr);
		}
		goto _match_end_4607590000;
		_case_end_4607590400:;
		_match_end_4607590000:;
	}
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_common_plain(jule::Ref<_1112d7f10_Eval> _16436_e,jule::Ref<_11054f670_FnCallExpr> _16450_fc,jule::Ref<_1112d7f10_Data> _16471_d) {
	jule::Ref<_11072eb20_FnIns> _16513_f = _16471_d->_field_kind->_method_fnc();
	_1111c0be0_FnCallArgChecker _16713_fcac = _1111c0be0_FnCallArgChecker(_16436_e,_16450_fc->_field_args,_16450_fc->_field_token,_16513_f,false,jule::Slice<jule::Any>());
	_16713_fcac._method_check();
	jule::Ref<_110e4e8a0_FnCallExprModel> _17613_model = jule::new_struct<_110e4e8a0_FnCallExprModel>(new( std::nothrow ) _110e4e8a0_FnCallExprModel(_16513_f,_16450_fc->_field_concurrent,_16471_d->_field_model,_16713_fcac._field_arg_models));
	if ((!(jule::real(_16513_f->_field_result)))) {
		_16471_d=_1112d7f10_build_void_data();
	} else {
		_16471_d=jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(_16513_f->_field_result,jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
	}
	_16471_d->_field_model=jule::Any(_17613_model);
	return _16471_d;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_common(jule::Ref<_1112d7f10_Eval> _19530_e,jule::Ref<_11054f670_FnCallExpr> _19544_fc,jule::Ref<_1112d7f10_Data> _19565_d) {
	if (_19544_fc->_field_generics.len() > 0LL) {
		_19530_e->_method_push_err(_19544_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	return _1113198e0_builtin_caller_common_plain(_19530_e,_19544_fc,_19565_d);
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_common_mut(jule::Ref<_1112d7f10_Eval> _20334_e,jule::Ref<_11054f670_FnCallExpr> _20348_fc,jule::Ref<_1112d7f10_Data> _20369_d) {
	if ((!(_20369_d->_field_mutable))) {
		_20334_e->_method_push_err(_20348_fc->_field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>({}));
	}
	return _1113198e0_builtin_caller_common(_20334_e,_20348_fc,_20369_d);
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_out(jule::Ref<_1112d7f10_Eval> _21027_e,jule::Ref<_11054f670_FnCallExpr> _21041_fc,jule::Ref<_1112d7f10_Data> ) {
	if (_21041_fc->_field_generics.len() > 0LL) {
		_21027_e->_method_push_err(_21041_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_21041_fc->_field_args.len() < 1LL) {
		_21027_e->_method_push_err(_21041_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_21041_fc->_field_args.len() > 1LL) {
		_21027_e->_method_push_err(_21041_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _22213_expr = _21027_e->_method_eval_expr(_21041_fc->_field_args[0LL]);
	if ((!(jule::real(_22213_expr)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_22213_expr->_method_is_void() || jule::real(_22213_expr->_field_kind->_method_fnc())) {
		_21027_e->_method_push_err(_21041_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_1112d7f10_Data> _23213_d = _1112d7f10_build_void_data();
	_23213_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_BuiltinOutCallExprModel>(new( std::nothrow ) _110e4e8a0_BuiltinOutCallExprModel(_22213_expr->_field_model)));
	return _23213_d;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_outln(jule::Ref<_1112d7f10_Eval> _23729_e,jule::Ref<_11054f670_FnCallExpr> _23743_fc,jule::Ref<_1112d7f10_Data> ) {
	jule::Ref<_1112d7f10_Data> _23813_d = _1113198e0_builtin_caller_out(_23729_e,_23743_fc,jule::new_ref<_1112d7f10_Data>());
	if ((!(jule::real(_23813_d)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	_23813_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_BuiltinOutlnCallExprModel>(new( std::nothrow ) _110e4e8a0_BuiltinOutlnCallExprModel(_23813_d->_field_model.operator jule::Ref<_110e4e8a0_BuiltinOutCallExprModel>()->_field_expr)));
	return _23813_d;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_new(jule::Ref<_1112d7f10_Eval> _24927_e,jule::Ref<_11054f670_FnCallExpr> _24941_fc,jule::Ref<_1112d7f10_Data> _24962_d) {
	if (_24941_fc->_field_generics.len() > 0LL) {
		_24927_e->_method_push_err(_24941_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_24941_fc->_field_args.len() < 1LL) {
		_24927_e->_method_push_err(_24941_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type", 4))}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_24941_fc->_field_args.len() > 2LL) {
		_24927_e->_method_push_err(_24941_fc->_field_args[2LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _26113_t = _24927_e->_method_eval_expr_kind(_24941_fc->_field_args[0LL]->_field_kind);
	if ((!(jule::real(_26113_t)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if ((!(_26113_t->_field_decl))) {
		_24927_e->_method_push_err(_24941_fc->_field_args[0LL]->_field_token,jule::Str("invalid data-type", 17),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	if ((!(_1116aff70_is_valid_for_ref(_26113_t->_field_kind)))) {
		jule::Ref<_1109372e0_StructIns> _27217_s = _26113_t->_field_kind->_method_strct();
		if ((jule::real(_27217_s) && jule::real(_27217_s->_field_decl)) && _27217_s->_field_decl->_field_cpp_linked) {
			_24927_e->_method_push_err(_24941_fc->_field_args[0LL]->_field_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>({}));
		} else {
			_24927_e->_method_push_err(_24941_fc->_field_args[0LL]->_field_token,jule::Str("invalid data-type", 17),jule::Slice<jule::Any>({}));
		}
		return jule::new_ref<_1112d7f10_Data>();
	}
	_24962_d->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1116aff70_Ref>(new( std::nothrow ) _1116aff70_Ref(_26113_t->_field_kind->_method_clone()))));
	if (_24941_fc->_field_args.len() == 2LL) {
		jule::Ref<_1112d7f10_Data> _28417_init = _24927_e->_field_s->_method_evalp(_24941_fc->_field_args[1LL],_24927_e->_field_lookup,_26113_t->_field_kind);
		if (jule::real(_28417_init)) {
			_26113_t->_field_mutable=true;
			_110af2660_check_mut(_24927_e->_field_s,_26113_t,_28417_init,_24941_fc->_field_args[1LL]->_field_token);
			_24927_e->_field_s->_method_check_assign_type(_26113_t->_field_kind,_28417_init,_24941_fc->_field_args[1LL]->_field_token,false);
			if (jule::real(_28417_init->_field_kind->_method_ref())) {
				_28417_init->_field_model=jule::Any(jule::new_struct<_110e4e8a0_ExplicitDerefExprModel>(new( std::nothrow ) _110e4e8a0_ExplicitDerefExprModel(_28417_init->_field_model)));
			}
			_24962_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_BuiltinNewCallExprModel>(new( std::nothrow ) _110e4e8a0_BuiltinNewCallExprModel(_26113_t->_field_kind,_28417_init->_field_model)));
		}
	} else {
		_24962_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_BuiltinNewCallExprModel>(new( std::nothrow ) _110e4e8a0_BuiltinNewCallExprModel(_26113_t->_field_kind,jule::Any())));
	}
	return _24962_d;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_real(jule::Ref<_1112d7f10_Eval> _30828_e,jule::Ref<_11054f670_FnCallExpr> _30842_fc,jule::Ref<_1112d7f10_Data> _30863_d) {
	if (_30842_fc->_field_generics.len() > 0LL) {
		_30828_e->_method_push_err(_30842_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_30842_fc->_field_args.len() < 1LL) {
		_30828_e->_method_push_err(_30842_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("ref", 3))}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_30842_fc->_field_args.len() > 1LL) {
		_30828_e->_method_push_err(_30842_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _32013_ref = _30828_e->_method_eval_expr(_30842_fc->_field_args[0LL]);
	if ((!(jule::real(_32013_ref)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if ((!(jule::real(_32013_ref->_field_kind->_method_ref())))) {
		_30828_e->_method_push_err(_30842_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		_30828_e->_method_push_suggestion(jule::Str("expression must be reference type", 33),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	_30863_d->_field_kind=_1113198e0_BUILTIN_FN_REAL->_field_result;
	_30863_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_BuiltinRealCallExprModel>(new( std::nothrow ) _110e4e8a0_BuiltinRealCallExprModel(_32013_ref->_field_model)));
	return _30863_d;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_drop(jule::Ref<_1112d7f10_Eval> _33628_e,jule::Ref<_11054f670_FnCallExpr> _33642_fc,jule::Ref<_1112d7f10_Data> ) {
	if (_33642_fc->_field_generics.len() > 0LL) {
		_33628_e->_method_push_err(_33642_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_33642_fc->_field_args.len() < 1LL) {
		_33628_e->_method_push_err(_33642_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("ref", 3))}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_33642_fc->_field_args.len() > 1LL) {
		_33628_e->_method_push_err(_33642_fc->_field_args[2LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _34813_ref = _33628_e->_method_eval_expr(_33642_fc->_field_args[0LL]);
	if ((!(jule::real(_34813_ref)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if ((!(jule::real(_34813_ref->_field_kind->_method_ref())))) {
		_33628_e->_method_push_err(_33642_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		_33628_e->_method_push_suggestion(jule::Str("expression must be reference type", 33),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	_110af2660_check_mut(_33628_e->_field_s,_34813_ref,jule::new_ref<_1112d7f10_Data>(),_33642_fc->_field_args[0LL]->_field_token);
	jule::Ref<_1112d7f10_Data> _36113_d = _1112d7f10_build_void_data();
	_36113_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_BuiltinDropCallExprModel>(new( std::nothrow ) _110e4e8a0_BuiltinDropCallExprModel(_34813_ref->_field_model)));
	return _36113_d;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_panic(jule::Ref<_1112d7f10_Eval> _36629_e,jule::Ref<_11054f670_FnCallExpr> _36643_fc,jule::Ref<_1112d7f10_Data> ) {
	if (_36643_fc->_field_generics.len() > 0LL) {
		_36629_e->_method_push_err(_36643_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_36643_fc->_field_args.len() < 1LL) {
		_36629_e->_method_push_err(_36643_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("error", 5))}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_36643_fc->_field_args.len() > 1LL) {
		_36629_e->_method_push_err(_36643_fc->_field_args[2LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _37813_expr = _36629_e->_method_eval_expr(_36643_fc->_field_args[0LL]);
	if ((!(jule::real(_37813_expr)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (jule::real(_37813_expr->_field_kind->_method_strct())) {
		jule::Ref<_1109372e0_StructIns> _38413_s = _37813_expr->_field_kind->_method_strct();
		if (_38413_s->_field_decl->_method_is_implements(_1113198e0_BUILTIN_TRAIT_ERROR)) {
			_37813_expr->_field_cast_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1113198e0_BUILTIN_TRAIT_ERROR));
			_1112d7f10_apply_cast_kind(_37813_expr);
		}
	}
	jule::Ref<_1112d7f10_Data> _39313_d = _1112d7f10_build_void_data();
	_39313_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_BuiltinPanicCallExprModel>(new( std::nothrow ) _110e4e8a0_BuiltinPanicCallExprModel(_37813_expr->_field_model)));
	return _39313_d;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_make(jule::Ref<_1112d7f10_Eval> _39828_e,jule::Ref<_11054f670_FnCallExpr> _39842_fc,jule::Ref<_1112d7f10_Data> _39863_d) {
	if (_39842_fc->_field_generics.len() > 0LL) {
		_39828_e->_method_push_err(_39842_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_39842_fc->_field_args.len() < 2LL) {
		if (_39842_fc->_field_args.len() == 1LL) {
			_39828_e->_method_push_err(_39842_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("size", 4))}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		_39828_e->_method_push_err(_39842_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type, size", 10))}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_39842_fc->_field_args.len() > 3LL) {
		_39828_e->_method_push_err(_39842_fc->_field_args[3LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _41413_t = _39828_e->_method_eval_expr_kind(_39842_fc->_field_args[0LL]->_field_kind);
	if ((!(jule::real(_41413_t)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if ((!(_41413_t->_field_decl)) || (!(jule::real(_41413_t->_field_kind->_method_slc())))) {
		_39828_e->_method_push_err(_39842_fc->_field_args[0LL]->_field_token,jule::Str("invalid data-type", 17),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	_39863_d->_field_kind=_41413_t->_field_kind;
	jule::Ref<_1112d7f10_Data> _42613_len = _39828_e->_field_s->_method_evalp(_39842_fc->_field_args[1LL],_39828_e->_field_lookup,_41413_t->_field_kind);
	if ((!(jule::real(_42613_len)))) {
		return _39863_d;
	}
	_39828_e->_method_check_integer_indexing_by_data(_42613_len,_39842_fc->_field_args[1LL]->_field_token);
	if (_39842_fc->_field_args.len() == 3LL) {
		jule::Ref<_1112d7f10_Data> _43417_cap = _39828_e->_field_s->_method_evalp(_39842_fc->_field_args[2LL],_39828_e->_field_lookup,_41413_t->_field_kind);
		if ((!(jule::real(_43417_cap)))) {
			return _39863_d;
		}
		_39828_e->_method_check_integer_indexing_by_data(_43417_cap,_39842_fc->_field_args[2LL]->_field_token);
		_39863_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_BuiltinMakeCallExprModel>(new( std::nothrow ) _110e4e8a0_BuiltinMakeCallExprModel(_41413_t->_field_kind,_42613_len->_field_model,_43417_cap->_field_model)));
	} else {
		_39863_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_BuiltinMakeCallExprModel>(new( std::nothrow ) _110e4e8a0_BuiltinMakeCallExprModel(_41413_t->_field_kind,_42613_len->_field_model,jule::Any())));
	}
	return _39863_d;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_append(jule::Ref<_1112d7f10_Eval> _45530_e,jule::Ref<_11054f670_FnCallExpr> _45544_fc,jule::Ref<_1112d7f10_Data> _45565_d) {
	if (_45544_fc->_field_generics.len() > 0LL) {
		_45530_e->_method_push_err(_45544_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_45544_fc->_field_args.len() < 2LL) {
		if (_45544_fc->_field_args.len() == 1LL) {
			_45530_e->_method_push_err(_45544_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		_45530_e->_method_push_err(_45544_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_1112d7f10_Data> _46813_t = _45530_e->_method_eval_expr(_45544_fc->_field_args[0LL]);
	if ((!(jule::real(_46813_t)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Bool _47313_ref = false;
	if (jule::real(_46813_t->_field_kind->_method_ref())) {
		_46813_t->_field_kind=_46813_t->_field_kind->_method_ref()->_field_elem;
		_47313_ref=true;
	}
	if ((!(jule::real(_46813_t->_field_kind->_method_slc())))) {
		_45530_e->_method_push_err(_45544_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Ref<_11072eb20_FnIns> _48413_f = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),true,jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str())),_46813_t->_field_kind->_method_clone())),jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),true,true,jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str())),_46813_t->_field_kind->_method_slc()->_field_elem->_method_clone()))}),_46813_t->_field_kind->_method_clone(),jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common_plain,jule::Bool(),jule::Bool()));
	_45565_d->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_48413_f));
	_45565_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_CommonIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonIdentExprModel(jule::Str("append", 6))));
	_45565_d=_1113198e0_builtin_caller_common_plain(_45530_e,_45544_fc,_45565_d);
	if (jule::real(_45565_d)) {
		jule::Ref<_110e4e8a0_FnCallExprModel> _50817_model = _45565_d->_field_model.operator jule::Ref<_110e4e8a0_FnCallExprModel>();
		if (_47313_ref) {
			_50817_model->_field_args[0LL]=jule::Any(jule::new_struct<_110e4e8a0_ExplicitDerefExprModel>(new( std::nothrow ) _110e4e8a0_ExplicitDerefExprModel(_46813_t->_field_model)));
		}
		_45565_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_BuiltinAppendCallExprModel>(new( std::nothrow ) _110e4e8a0_BuiltinAppendCallExprModel(_50817_model->_field_args[0LL],_50817_model->_field_args[1LL])));
	}
	return _45565_d;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_copy(jule::Ref<_1112d7f10_Eval> _52228_e,jule::Ref<_11054f670_FnCallExpr> _52242_fc,jule::Ref<_1112d7f10_Data> _52263_d) {
	if (_52242_fc->_field_generics.len() > 0LL) {
		_52228_e->_method_push_err(_52242_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_52242_fc->_field_args.len() < 2LL) {
		if (_52242_fc->_field_args.len() == 1LL) {
			_52228_e->_method_push_err(_52242_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return jule::new_ref<_1112d7f10_Data>();
		}
		_52228_e->_method_push_err(_52242_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_52242_fc->_field_args.len() > 2LL) {
		_52228_e->_method_push_err(_52242_fc->_field_args[2LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _53813_t = _52228_e->_method_eval_expr(_52242_fc->_field_args[0LL]);
	if ((!(jule::real(_53813_t)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Bool _54313_ref = false;
	if (jule::real(_53813_t->_field_kind->_method_ref())) {
		_53813_t->_field_kind=_53813_t->_field_kind->_method_ref()->_field_elem;
		_54313_ref=false;
	}
	if ((!(jule::real(_53813_t->_field_kind->_method_slc())))) {
		_52228_e->_method_push_err(_52242_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	if ((!(_53813_t->_field_mutable))) {
		_52228_e->_method_push_err(_52242_fc->_field_args[0LL]->_field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_11072eb20_FnIns> _55813_f = jule::new_struct<_11072eb20_FnIns>(new( std::nothrow ) _11072eb20_FnIns(jule::Ref<_1109372e0_StructIns>(),jule::Ref<_11072eb20_Fn>(),jule::Slice<jule::Ref<_1116aff70_TypeKind>>(),jule::Slice<jule::Ref<_11072eb20_ParamIns>>({jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param()),_53813_t->_field_kind->_method_clone())),jule::new_struct<_11072eb20_ParamIns>(new( std::nothrow ) _11072eb20_ParamIns(jule::new_struct<_11072eb20_Param>(new( std::nothrow ) _11072eb20_Param(_1106ec050_Token(),true,jule::Bool(),jule::Bool(),jule::Ref<_1116aff70_TypeSymbol>(),jule::Str())),_53813_t->_field_kind->_method_clone()))}),_1113198e0_BUILTIN_FN_COPY->_field_result,jule::Ref<_110af2660_Scope>(),jule::Ref<_110d9ce90_ReferenceStack>(),jule::Ref<_110d9ce90_ReferenceStack>(),_1113198e0_builtin_caller_common_plain,jule::Bool(),jule::Bool()));
	_52263_d->_field_kind=jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_55813_f));
	_52263_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_CommonIdentExprModel>(new( std::nothrow ) _110e4e8a0_CommonIdentExprModel(jule::Str("copy", 4))));
	_52263_d=_1113198e0_builtin_caller_common_plain(_52228_e,_52242_fc,_52263_d);
	if (jule::real(_52263_d) && _54313_ref) {
		_52263_d->_field_model.operator jule::Ref<_110e4e8a0_FnCallExprModel>()->_field_args[0LL]=jule::Any(jule::new_struct<_110e4e8a0_ExplicitDerefExprModel>(new( std::nothrow ) _110e4e8a0_ExplicitDerefExprModel(_53813_t->_field_model)));
	}
	return _52263_d;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_recover(jule::Ref<_1112d7f10_Eval> _58731_e,jule::Ref<_11054f670_FnCallExpr> _58745_fc,jule::Ref<_1112d7f10_Data> ) {
	if (_58745_fc->_field_generics.len() > 0LL) {
		_58731_e->_method_push_err(_58745_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	
	if (_58745_fc->_field_args.len() < 1LL) {
		_58731_e->_method_push_err(_58745_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("handler", 7))}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_58745_fc->_field_args.len() > 1LL) {
		_58731_e->_method_push_err(_58745_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _60113_t = _58731_e->_method_eval_expr(_58745_fc->_field_args[0LL]);
	if ((!(jule::real(_60113_t)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	if ((!(jule::real(_60113_t->_field_kind->_method_fnc())))) {
		_58731_e->_method_push_err(_58745_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Str _6119_tkind = _60113_t->_field_kind->_method_fnc()->_method_to_str();
	if (_6119_tkind != jule::Str("fn(Error)", 9)) {
		_58731_e->_method_push_err(_58745_fc->_field_args[0LL]->_field_token,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_6119_tkind),jule::Any(jule::Str("fn(Error)", 9))}));
	}
	jule::Ref<_1112d7f10_Data> _61613_d = _1112d7f10_build_void_data();
	_61613_d->_field_kind=_60113_t->_field_kind->_method_clone();
	_61613_d->_field_model=jule::Any(jule::new_struct<_110af2660_Recover>(new( std::nothrow ) _110af2660_Recover(jule::Ref<_11072eb20_FnIns>(),_60113_t->_field_model,jule::Ref<_110af2660_Scope>(),jule::Ref<_11072eb20_FnIns>())));
	return _61613_d;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_clone(jule::Ref<_1112d7f10_Eval> _62429_e,jule::Ref<_11054f670_FnCallExpr> _62443_fc,jule::Ref<_1112d7f10_Data> ) {
	if (_62443_fc->_field_generics.len() > 0LL) {
		_62429_e->_method_push_err(_62443_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_62443_fc->_field_args.len() < 1LL) {
		_62429_e->_method_push_err(_62443_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return jule::new_ref<_1112d7f10_Data>();
	}
	if (_62443_fc->_field_args.len() > 1LL) {
		_62429_e->_method_push_err(_62443_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _63713_d = _62429_e->_method_eval_expr_kind(_62443_fc->_field_args[0LL]->_field_kind);
	if ((!(jule::real(_63713_d)))) {
		return jule::new_ref<_1112d7f10_Data>();
	}
	jule::Fn<void(jule::Ref<_1116aff70_TypeKind>)> _6429_check_kind = jule::Fn<void(jule::Ref<_1116aff70_TypeKind>)>([=](jule::Ref<_1116aff70_TypeKind> _64229_k) mutable -> void {
		{
			if (!((jule::real(_64229_k->_method_slc())))) { goto _case_end_4607906816; }
			_case_begin_4607906816:;
			{
				if ((!(_1116aff70_supports_cloning(_64229_k->_method_slc()->_field_elem)))) {
					_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("internal types of \"@\" is not supports cloning", 45),jule::Slice<jule::Any>({jule::Any(_64229_k->_method_to_str())}));
				}
			}
			goto _match_end_4607905808;
			_case_end_4607906816:;
			if (!((jule::real(_64229_k->_method_map())))) { goto _case_end_4607909872; }
			_case_begin_4607909872:;
			{
				if ((!(_1116aff70_supports_cloning(_64229_k->_method_map()->_field_key))) || _1116aff70_supports_cloning(_64229_k->_method_map()->_field_val)) {
					_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("internal types of \"@\" is not supports cloning", 45),jule::Slice<jule::Any>({jule::Any(_64229_k->_method_to_str())}));
				}
			}
			goto _match_end_4607905808;
			_case_end_4607909872:;
			if (!((jule::real(_64229_k->_method_arr())))) { goto _case_end_4607906272; }
			_case_begin_4607906272:;
			{
				if ((!(_1116aff70_supports_cloning(_64229_k->_method_arr()->_field_elem)))) {
					_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("internal types of \"@\" is not supports cloning", 45),jule::Slice<jule::Any>({jule::Any(_64229_k->_method_to_str())}));
				}
			}
			goto _match_end_4607905808;
			_case_end_4607906272:;
			if (!((jule::real(_64229_k->_method_ref())))) { goto _case_end_4607906384; }
			_case_begin_4607906384:;
			{
				if ((!(_1116aff70_supports_cloning(_64229_k->_method_ref()->_field_elem)))) {
					_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("internal types of \"@\" is not supports cloning", 45),jule::Slice<jule::Any>({jule::Any(_64229_k->_method_to_str())}));
				}
			}
			goto _match_end_4607905808;
			_case_end_4607906384:;
			if (!((jule::real(_64229_k->_method_strct())))) { goto _case_end_4607906496; }
			_case_begin_4607906496:;
			{
				jule::Ref<_1109372e0_StructIns> _66517_s = _63713_d->_field_kind->_method_strct();
				if ((!(_66517_s->_field_has_mut))) {
					_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("struct \"@\" is not breaks immutability, do not needs cloning", 59),jule::Slice<jule::Any>({jule::Any(_63713_d->_field_kind->_method_to_str())}));
				}
				if (((!(jule::real(_66517_s->_field_decl))) || _66517_s->_field_decl->_field_cpp_linked) || (!(_66517_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))))) {
					_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("type \"@\" is not derives: @", 26),jule::Slice<jule::Any>({jule::Any(_63713_d->_field_kind->_method_to_str()),jule::Any(jule::Str("Clone", 5))}));
				}
			}
			goto _match_end_4607905808;
			_case_end_4607906496:;
			_case_begin_4607905968:;
			{
				_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("type \"@\" is not derives: @", 26),jule::Slice<jule::Any>({jule::Any(_63713_d->_field_kind->_method_to_str()),jule::Any(jule::Str("Clone", 5))}));
			}
			goto _match_end_4607905808;
			_case_end_4607905968:;
			_match_end_4607905808:;
		}
	});
	{
		if (!(((!(_63713_d->_field_lvalue))))) { goto _case_end_4607928240; }
		_case_begin_4607928240:;
		{
			_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("non-lvalue expressions cannot be clone", 38),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4607928096;
		_case_end_4607928240:;
		if (!(((!(_1116aff70_supports_cloning(_63713_d->_field_kind)))))) { goto _case_end_4607928352; }
		_case_begin_4607928352:;
		{
			_6429_check_kind(_63713_d->_field_kind);
		}
		goto _match_end_4607928096;
		_case_end_4607928352:;
		_match_end_4607928096:;
	}
	_63713_d->_field_mutable=true;
	_63713_d->_field_model=jule::Any(jule::new_struct<_110e4e8a0_BuiltinCloneCallExprModel>(new( std::nothrow ) _110e4e8a0_BuiltinCloneCallExprModel(_63713_d->_field_model)));
	return _63713_d;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_std_mem_size_of(jule::Ref<_1112d7f10_Eval> _69139_e,jule::Ref<_11054f670_FnCallExpr> _69153_fc,jule::Ref<_1112d7f10_Data> ) {
	if (_69153_fc->_field_generics.len() > 0LL) {
		_69139_e->_method_push_err(_69153_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _69513_result = jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("uint", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
	if (_69153_fc->_field_args.len() < 1LL) {
		_69139_e->_method_push_err(_69153_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _69513_result;
	}
	if (_69153_fc->_field_args.len() > 1LL) {
		_69139_e->_method_push_err(_69153_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _70713_d = _69139_e->_method_eval_expr_kind(_69153_fc->_field_args[0LL]->_field_kind);
	if ((!(jule::real(_70713_d)))) {
		return _69513_result;
	}
	_69513_result->_field_model=jule::Any(jule::new_struct<_110e4e8a0_SizeofExprModel>(new( std::nothrow ) _110e4e8a0_SizeofExprModel(_70713_d->_field_model)));
	return _69513_result;
}



inline jule::Ref<_1112d7f10_Data> _1113198e0_builtin_caller_std_mem_align_of(jule::Ref<_1112d7f10_Eval> _71640_e,jule::Ref<_11054f670_FnCallExpr> _71654_fc,jule::Ref<_1112d7f10_Data> ) {
	if (_71654_fc->_field_generics.len() > 0LL) {
		_71640_e->_method_push_err(_71654_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _72013_result = jule::new_struct<_1112d7f10_Data>(new( std::nothrow ) _1112d7f10_Data(jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_1116aff70_build_prim_type(jule::Str("uint", 4)))),jule::Ref<_1116aff70_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1118cee40_Const>()));
	if (_71654_fc->_field_args.len() < 1LL) {
		_71640_e->_method_push_err(_71654_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _72013_result;
	}
	if (_71654_fc->_field_args.len() > 1LL) {
		_71640_e->_method_push_err(_71654_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1112d7f10_Data> _73213_d = _71640_e->_method_eval_expr_kind(_71654_fc->_field_args[0LL]->_field_kind);
	if ((!(jule::real(_73213_d)))) {
		return _72013_result;
	}
	_72013_result->_field_model=jule::Any(jule::new_struct<_110e4e8a0_AlignofExprModel>(new( std::nothrow ) _110e4e8a0_AlignofExprModel(_73213_d->_field_model)));
	return _72013_result;
}



inline jule::Bool _117e3bec0_eval_directive_ident(jule::Str _625_ident) {
	if (_625_ident == jule::Str("", 0)) {
		return false;
	}
	{
		auto __julec_range_expr = _11020ca90_FLAGS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _117e3bec0_flag = *__julec_range_begin;
			_iter_begin_4614635840:;
			{
				if (_117e3bec0_flag == _625_ident) {
					return true;
				}
			}
			_iter_next_4614635840:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _117e3bec0_flag = *__julec_range_begin; goto _iter_begin_4614635840; }
			_iter_end_4614635840:;
		}
	}
	return false;
}



inline jule::Bool _117e3bec0_eval_directive_part(jule::Str _2228_part) {
	jule::Bool _239_logical_not = _2228_part[0LL] == '!';
	if (_239_logical_not) {
		_2228_part=_2228_part.slice(1LL);
	}
	jule::Bool _2813_result = _117e3bec0_eval_directive_ident(_2228_part);
	if (_239_logical_not) {
		_2813_result=(!(_2813_result));
	}
	return _2813_result;
}



inline jule::Slice<jule::Str> _117e3bec0_split_operans(jule::Str _3718_op,jule::Str _3727_expr) {
	jule::Slice<jule::Str> _3813_parts = jule::Slice<jule::Str>::alloc(0LL,10LL);
	jule::Int _4013_range_n = 0LL;
	jule::Int _4113_i = 0LL;
	jule::Int _4213_last = 0LL;
	_iter_begin_4614643568:;
	if (!(_4113_i < (_3727_expr.len() - 1LL))) { goto _iter_end_4614643568; }
	{
		jule::U8 _4413_b = _3727_expr[static_cast<jule::Int>(_4113_i)];
		if (_4413_b == '(') {
			(_4013_range_n)++;
			goto _iter_next_4614643568;
		} else if (_4413_b == ')') {
			(_4013_range_n)--;
		}
		if (_4013_range_n > 0LL) {
			goto _iter_next_4614643568;
		}
		{
			auto _match_expr{ _3718_op };
			if (!((jule::Str("||", 2)) == _match_expr)) { goto _case_end_4614652064; }
			_case_begin_4614652064:;
			{
				if ((_4413_b == '|') && (_3727_expr[static_cast<jule::Int>(_4113_i + 1LL)] == '|')) {
					_3813_parts=jule::append(_3813_parts,jule::Slice<jule::Str>({_3727_expr.slice(static_cast<jule::Int>(_4213_last),static_cast<jule::Int>(_4113_i))}));
					_4213_last=static_cast<jule::Int>(_4113_i + 2LL);
				}
			}
			goto _match_end_4614649904;
			_case_end_4614652064:;
			if (!((jule::Str("&&", 2)) == _match_expr)) { goto _case_end_4614652176; }
			_case_begin_4614652176:;
			{
				if ((_4413_b == '&') && (_3727_expr[static_cast<jule::Int>(_4113_i + 1LL)] == '&')) {
					_3813_parts=jule::append(_3813_parts,jule::Slice<jule::Str>({_3727_expr.slice(static_cast<jule::Int>(_4213_last),static_cast<jule::Int>(_4113_i))}));
					_4213_last=static_cast<jule::Int>(_4113_i + 2LL);
				}
			}
			goto _match_end_4614649904;
			_case_end_4614652176:;
			_match_end_4614649904:;
		}
	}
	_iter_next_4614643568:;
	(_4113_i)++;
	goto _iter_begin_4614643568;
	_iter_end_4614643568:;
	if (_4213_last < _3727_expr.len()) {
		_3813_parts=jule::append(_3813_parts,jule::Slice<jule::Str>({_3727_expr.slice(static_cast<jule::Int>(_4213_last))}));
	} else {
		_3813_parts=jule::append(_3813_parts,jule::Slice<jule::Str>({jule::Str("", 0)}));
	}
	return _3813_parts;
}



inline jule::Bool _117e3bec0_eval_directive_expr(jule::Str _8724_expr) {
	if (_8724_expr == jule::Str("", 0)) {
		return false;
	}
	jule::Bool _9213_result = false;
	jule::Slice<jule::Str> _949_logical_or_parts = _117e3bec0_split_operans(jule::Str("||", 2),_8724_expr);
	{
		auto __julec_range_expr = _949_logical_or_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _117e3bec0_part = *__julec_range_begin;
			_iter_begin_4614668240:;
			{
				if (_117e3bec0_part == jule::Str("", 0)) {
					return false;
				}
				jule::Bool _10017_and = true;
				jule::Slice<jule::Str> _10113_logical_and_parts = _117e3bec0_split_operans(jule::Str("&&", 2),_117e3bec0_part);
				{
					auto __julec_range_expr = _10113_logical_and_parts;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Str _117e3bec0_and_part = *__julec_range_begin;
						_iter_begin_4614672752:;
						{
							if (_117e3bec0_and_part.find(jule::Str("(", 1)) != -1LL) {
								if (_117e3bec0_and_part[static_cast<jule::Int>(_117e3bec0_and_part.len() - 1LL)] != ')') {
									return false;
								}
								jule::Str _10721_expr = _117e3bec0_and_part.slice(1LL,static_cast<jule::Int>(_117e3bec0_and_part.len() - 1LL));
								_10017_and=_10017_and && _117e3bec0_eval_directive_expr(_10721_expr);
							} else {
								_10017_and=_10017_and && _117e3bec0_eval_directive_part(_117e3bec0_and_part);
							}
						}
						_iter_next_4614672752:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _117e3bec0_and_part = *__julec_range_begin; goto _iter_begin_4614672752; }
						_iter_end_4614672752:;
					}
				}
				_9213_result=_9213_result || _10017_and;
			}
			_iter_next_4614668240:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _117e3bec0_part = *__julec_range_begin; goto _iter_begin_4614668240; }
			_iter_end_4614668240:;
		}
	}
	return _9213_result;
}



inline void _11020ca90_set_os_flags(void) {
	{
		if (!((jule::Str("windows", 7)) == jule::Str("darwin", 6))) { goto _case_end_4614679136; }
		_case_begin_4614679136:;
		{
			_11020ca90_FLAGS=jule::append(_11020ca90_FLAGS,jule::Slice<jule::Str>({jule::Str("windows", 7)}));
		}
		goto _match_end_4614667152;
		_case_end_4614679136:;
		if (!((jule::Str("linux", 5)) == jule::Str("darwin", 6))) { goto _case_end_4614682528; }
		_case_begin_4614682528:;
		{
			_11020ca90_FLAGS=jule::append(_11020ca90_FLAGS,jule::Slice<jule::Str>({jule::Str("linux", 5)}));
		}
		goto _match_end_4614667152;
		_case_end_4614682528:;
		if (!((jule::Str("darwin", 6)) == jule::Str("darwin", 6))) { goto _case_end_4614669008; }
		_case_begin_4614669008:;
		{
			_11020ca90_FLAGS=jule::append(_11020ca90_FLAGS,jule::Slice<jule::Str>({jule::Str("darwin", 6)}));
		}
		goto _match_end_4614667152;
		_case_end_4614669008:;
		_match_end_4614667152:;
	}
	if (_127eb0d70_is_unix(jule::Str("darwin", 6))) {
		_11020ca90_FLAGS=jule::append(_11020ca90_FLAGS,jule::Slice<jule::Str>({jule::Str("unix", 4)}));
	}
}



inline void _11020ca90_set_arch_flags(void) {
	{
		if (!((jule::Str("i386", 4)) == jule::Str("arm64", 5))) { goto _case_end_4614686272; }
		_case_begin_4614686272:;
		{
			_11020ca90_FLAGS=jule::append(_11020ca90_FLAGS,jule::Slice<jule::Str>({jule::Str("i386", 4)}));
		}
		goto _match_end_4614682800;
		_case_end_4614686272:;
		if (!((jule::Str("amd64", 5)) == jule::Str("arm64", 5))) { goto _case_end_4614683104; }
		_case_begin_4614683104:;
		{
			_11020ca90_FLAGS=jule::append(_11020ca90_FLAGS,jule::Slice<jule::Str>({jule::Str("amd64", 5)}));
		}
		goto _match_end_4614682800;
		_case_end_4614683104:;
		if (!((jule::Str("arm64", 5)) == jule::Str("arm64", 5))) { goto _case_end_4614683216; }
		_case_begin_4614683216:;
		{
			_11020ca90_FLAGS=jule::append(_11020ca90_FLAGS,jule::Slice<jule::Str>({jule::Str("arm64", 5)}));
		}
		goto _match_end_4614682800;
		_case_end_4614683216:;
		_match_end_4614682800:;
	}
	if (_127eb0d70_is_64bit(jule::Str("arm64", 5))) {
		_11020ca90_FLAGS=jule::append(_11020ca90_FLAGS,jule::Slice<jule::Str>({jule::Str("64bit", 5)}));
	}
	if (_127eb0d70_is_32bit(jule::Str("arm64", 5))) {
		_11020ca90_FLAGS=jule::append(_11020ca90_FLAGS,jule::Slice<jule::Str>({jule::Str("32bit", 5)}));
	}
}



inline void _11020ca90_init(void) {
	_11020ca90_set_os_flags();
	_11020ca90_set_arch_flags();
}



inline void _110194230_exit_err(jule::Str _2313_msg) {
	
	jule::outln(_2313_msg);
	_107ec3010_exit(1LL);
}



inline jule::Slice<jule::U8> _110194230_read_buff(jule::Str _3114_path) {
	jule::Slice<jule::U8> _3214_buffer;
	jule::Int _3222_err;
	std::tie(_3214_buffer,_3222_err) = _1104f8ac0_read_file(_3114_path);
	if (_3222_err != 0LLU) {
		_110194230_exit_err(jule::Str("error: file cannot read", 23));
	}
	return _3214_buffer;
}



inline _127e05da0_Log _110194230_flat_compiler_err(jule::Str _4122_text) {
	return _127e05da0_Log(1LLU,jule::Int(),jule::Int(),jule::Str(),_4122_text,jule::Str(),jule::Str());
}



inline std::tuple<jule::Slice<jule::Ref<_110473c30_DirEntry>>,jule::Str> _110194230_read_package_dirents(jule::Str _4925_path) {
	jule::Str _4951_err_msg = jule::Str();
	jule::Slice<jule::Ref<_110473c30_DirEntry>> _5014_dirents;
	jule::Int _5023_err;
	std::tie(_5014_dirents,_5023_err) = _11060cca0_read_dir(_4925_path);
	if (_5023_err != 0LLU) {
		_4951_err_msg = jule::Str("connot read package directory: ", 31) + _4925_path;
		return std::make_tuple(nullptr,_4951_err_msg);
	}
	jule::Slice<jule::Ref<_110473c30_DirEntry>> _5513_passed_dirents = nullptr;
	{
		auto __julec_range_expr = _5014_dirents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110473c30_DirEntry> _110194230_dirent = *__julec_range_begin;
			_iter_begin_4614707488:;
			{
				jule::Str _5713_name = _110194230_dirent->_field_name;
				if (_110194230_dirent->_field_stat->_method_is_dir() || (!(_5713_name.has_suffix(jule::Str(".jule", 5))))) {
					goto _iter_next_4614707488;
				}
				_5513_passed_dirents=jule::append(_5513_passed_dirents,jule::Slice<jule::Ref<_110473c30_DirEntry>>({_110194230_dirent}));
			}
			_iter_next_4614707488:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110194230_dirent = *__julec_range_begin; goto _iter_begin_4614707488; }
			_iter_end_4614707488:;
		}
	}
	_4951_err_msg = jule::Str("", 0);
	return std::make_tuple(_5513_passed_dirents,_4951_err_msg);
}



inline jule::Str _110194230_concat_all_parts(jule::Slice<jule::Str> _7121_parts) {
	jule::Str _7213_s = jule::Str("", 0);
	{
		auto __julec_range_expr = _7121_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _110194230_part = *__julec_range_begin;
			_iter_begin_4614717472:;
			{
				_7213_s+=_110194230_part;
			}
			_iter_next_4614717472:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110194230_part = *__julec_range_begin; goto _iter_begin_4614717472; }
			_iter_end_4614717472:;
		}
	}
	return _7213_s;
}



inline jule::Bool _110194230_is_pass_build_directives(jule::Ref<_1104fada0_Ast>& _8034_file) {
	jule::Int _8113_i = 0LL;
	_iter_begin_4614719936:;
	if (!(_8113_i < _8034_file->_field_top_directives._method_len())) { goto _iter_end_4614719936; }
	{
		jule::Ref<_11054f670_Directive> _8317_td = _8034_file->_field_top_directives._method_at(_8113_i);
		if (_8317_td->_field_tag != jule::Str("build", 5)) {
			goto _iter_next_4614719936;
		}
		jule::Str _8813_expr = _110194230_concat_all_parts(_8317_td->_field_args);
		jule::Bool _8913_result = _117e3bec0_eval_directive_expr(_8813_expr);
		if ((!(_8913_result))) {
			return false;
		}
	}
	_iter_next_4614719936:;
	(_8113_i)++;
	goto _iter_begin_4614719936;
	_iter_end_4614719936:;
	return true;
}



inline void _110254280_push_passes(jule::Ref<_110e4edc0_Package> _10820_p,jule::Slice<jule::Str>& _10844_passes) {
	{
		auto __julec_range_expr = _10820_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _110254280_f = *__julec_range_begin;
			_iter_begin_4614800032:;
			{
				jule::Int _11017_i = 0LL;
				_julec_label_push:;
				_iter_begin_4614802672:;
				if (!(_11017_i < _110254280_f->_field_passes._method_len())) { goto _iter_end_4614802672; }
				{
					_110d9ce90_Pass _11321_pass = _110254280_f->_field_passes._method_at(_11017_i);
					if (_11321_pass._field_text == jule::Str("", 0)) {
						goto _iter_next_4614802672;
					}
					{
						auto __julec_range_expr = _10844_passes;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Str _110254280_cpass = *__julec_range_begin;
							_iter_begin_4614806320:;
							{
								if (_110254280_cpass == _11321_pass._field_text) {
									goto _iter_next_4614802672;
								}
							}
							_iter_next_4614806320:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _110254280_cpass = *__julec_range_begin; goto _iter_begin_4614806320; }
							_iter_end_4614806320:;
						}
					}
					_10844_passes=jule::append(_10844_passes,jule::Slice<jule::Str>({_11321_pass._field_text}));
				}
				_iter_next_4614802672:;
				(_11017_i)++;
				goto _iter_begin_4614802672;
				_iter_end_4614802672:;
			}
			_iter_next_4614800032:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110254280_f = *__julec_range_begin; goto _iter_begin_4614800032; }
			_iter_end_4614800032:;
		}
	}
}



inline jule::Slice<jule::Str> _110254280_get_all_unique_passes(jule::Ref<_110e4edc0_Package> _12730_pkg,jule::Slice<jule::Ref<_110e4edc0_ImportInfo>> _12755_uses) {
	jule::Slice<jule::Str> _12813_passes = nullptr;
	_110254280_push_passes(_12730_pkg,_12813_passes);
	{
		auto __julec_range_expr = _12755_uses;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _110254280_u = *__julec_range_begin;
			_iter_begin_4614814176:;
			{
				if ((!(_110254280_u->_field_cpp_linked))) {
					_110254280_push_passes(_110254280_u->_field_package,_12813_passes);
				}
			}
			_iter_next_4614814176:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _110254280_u = *__julec_range_begin; goto _iter_begin_4614814176; }
			_iter_end_4614814176:;
		}
	}
	return _12813_passes;
}



inline jule::Bool _11034cb30_is_exist_0(jule::Slice<jule::Any> _3116_arr,jule::Ref<_11072eb20_FnIns> _3128_t) {
	{
		auto __julec_range_expr = _3116_arr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _11034cb30_ref = *__julec_range_begin;
			_iter_begin_4614911008:;
			{
				{
					auto _match_expr{ _11034cb30_ref };
					if (!(_match_expr.type_is<jule::Ref<_11072eb20_FnIns>>())) { goto _case_end_4614912720; }
					_case_begin_4614912720:;
					{
						if ((_11034cb30_ref.operator jule::Ref<_11072eb20_FnIns>()).alloc == (_3128_t).alloc) {
							return true;
						}
					}
					goto _match_end_4614912400;
					_case_end_4614912720:;
					_match_end_4614912400:;
				}
			}
			_iter_next_4614911008:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11034cb30_ref = *__julec_range_begin; goto _iter_begin_4614911008; }
			_iter_end_4614911008:;
		}
	}
	return false;
}

inline jule::Bool _11034cb30_is_exist_1(jule::Slice<jule::Any> _3116_arr,jule::Ref<_110e92c80_Var> _3128_t) {
	{
		auto __julec_range_expr = _3116_arr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _11034cb30_ref = *__julec_range_begin;
			_iter_begin_4614919008:;
			{
				{
					auto _match_expr{ _11034cb30_ref };
					if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4614920720; }
					_case_begin_4614920720:;
					{
						if ((_11034cb30_ref.operator jule::Ref<_110e92c80_Var>()).alloc == (_3128_t).alloc) {
							return true;
						}
					}
					goto _match_end_4614920400;
					_case_end_4614920720:;
					_match_end_4614920400:;
				}
			}
			_iter_next_4614919008:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11034cb30_ref = *__julec_range_begin; goto _iter_begin_4614919008; }
			_iter_end_4614919008:;
		}
	}
	return false;
}

inline jule::Bool _11034cb30_is_exist_2(jule::Slice<jule::Any> _3116_arr,jule::Ref<_1109372e0_StructIns> _3128_t) {
	{
		auto __julec_range_expr = _3116_arr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _11034cb30_ref = *__julec_range_begin;
			_iter_begin_4614927072:;
			{
				{
					auto _match_expr{ _11034cb30_ref };
					if (!(_match_expr.type_is<jule::Ref<_1109372e0_StructIns>>())) { goto _case_end_4614928784; }
					_case_begin_4614928784:;
					{
						if ((_11034cb30_ref.operator jule::Ref<_1109372e0_StructIns>()).alloc == (_3128_t).alloc) {
							return true;
						}
					}
					goto _match_end_4614928464;
					_case_end_4614928784:;
					_match_end_4614928464:;
				}
			}
			_iter_next_4614927072:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11034cb30_ref = *__julec_range_begin; goto _iter_begin_4614927072; }
			_iter_end_4614927072:;
		}
	}
	return false;
}

inline jule::Bool _11034cb30_is_exist_3(jule::Slice<jule::Any> _3116_arr,jule::Ref<_110e3f160_Trait> _3128_t) {
	{
		auto __julec_range_expr = _3116_arr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _11034cb30_ref = *__julec_range_begin;
			_iter_begin_4614935072:;
			{
				{
					auto _match_expr{ _11034cb30_ref };
					if (!(_match_expr.type_is<jule::Ref<_110e3f160_Trait>>())) { goto _case_end_4614936784; }
					_case_begin_4614936784:;
					{
						if ((_11034cb30_ref.operator jule::Ref<_110e3f160_Trait>()).alloc == (_3128_t).alloc) {
							return true;
						}
					}
					goto _match_end_4614936464;
					_case_end_4614936784:;
					_match_end_4614936464:;
				}
			}
			_iter_next_4614935072:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11034cb30_ref = *__julec_range_begin; goto _iter_begin_4614935072; }
			_iter_end_4614935072:;
		}
	}
	return false;
}



inline jule::Bool _11034cb30_is_exist_ref(jule::Slice<jule::Any> _4421_refs,jule::Any _4434_ref) {
	{
		auto _match_expr{ _4434_ref };
		if (!(_match_expr.type_is<jule::Ref<_11072eb20_FnIns>>())) { goto _case_end_4614903072; }
		_case_begin_4614903072:;
		{
			return _11034cb30_is_exist_0(_4421_refs,_4434_ref.operator jule::Ref<_11072eb20_FnIns>());
		}
		goto _match_end_4614902304;
		_case_end_4614903072:;
		if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4614903184; }
		_case_begin_4614903184:;
		{
			return _11034cb30_is_exist_1(_4421_refs,_4434_ref.operator jule::Ref<_110e92c80_Var>());
		}
		goto _match_end_4614902304;
		_case_end_4614903184:;
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_StructIns>>())) { goto _case_end_4614904288; }
		_case_begin_4614904288:;
		{
			return _11034cb30_is_exist_2(_4421_refs,_4434_ref.operator jule::Ref<_1109372e0_StructIns>());
		}
		goto _match_end_4614902304;
		_case_end_4614904288:;
		if (!(_match_expr.type_is<jule::Ref<_110e3f160_Trait>>())) { goto _case_end_4614904400; }
		_case_begin_4614904400:;
		{
			return _11034cb30_is_exist_3(_4421_refs,_4434_ref.operator jule::Ref<_110e3f160_Trait>());
		}
		goto _match_end_4614902304;
		_case_end_4614904400:;
		_case_begin_4614902528:;
		{
			return false;
		}
		goto _match_end_4614902304;
		_case_end_4614902528:;
		_match_end_4614902304:;
	}
}



inline jule::Bool _11034cb30_is_dead(jule::Any _5516_ref) {
	jule::Bool _5528_dead = jule::Bool();
	if (_11034cb30_is_exist_ref(_11034cb30_deads,_5516_ref)) {
		_5528_dead = true;
		return _5528_dead;
	}
	{
		auto _match_expr{ _5516_ref };
		if (!(_match_expr.type_is<jule::Ref<_11072eb20_FnIns>>())) { goto _case_end_4614942032; }
		_case_begin_4614942032:;
		{
			if (_5516_ref.operator jule::Ref<_11072eb20_FnIns>()->_field_decl->_method_is_init()) {
				goto _match_end_4614903744;
			}
			goto _case_begin_4614915424;
		}
		goto _match_end_4614903744;
		_case_end_4614942032:;
		_case_begin_4614915424:;
		{
			if (_11034cb30_is_exist_ref(jule::Slice<jule::Any>({_11034cb30_current,_11034cb30_main_current}),_5516_ref)) {
				_5528_dead = true;
				return _5528_dead;
			}
			if (_11034cb30_is_exist_ref(_11034cb30_checking,_5516_ref)) {
				_5528_dead = true;
				return _5528_dead;
			}
		}
		goto _match_end_4614903744;
		_case_end_4614915424:;
		_match_end_4614903744:;
	}
	jule::Any _7613_old = _11034cb30_current;
	_11034cb30_current=_5516_ref;
	jule::I64 _789_len = _11034cb30_checking.len();
	_11034cb30_checking=jule::append(_11034cb30_checking,jule::Slice<jule::Any>({_5516_ref}));
	__JULE_DEFER({
		_11034cb30_current=_7613_old;
		_11034cb30_drop_ref(_11034cb30_checking,_789_len);
	});
	{
		auto _match_expr{ _5516_ref };
		if (!(_match_expr.type_is<jule::Ref<_11072eb20_FnIns>>())) { goto _case_end_4614946032; }
		_case_begin_4614946032:;
		{
			_5528_dead = _11034cb30_is_fn_dead(_5516_ref.operator jule::Ref<_11072eb20_FnIns>());
			return _5528_dead;
		}
		goto _match_end_4614944384;
		_case_end_4614946032:;
		if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4614946144; }
		_case_begin_4614946144:;
		{
			_5528_dead = _11034cb30_is_var_dead(_5516_ref.operator jule::Ref<_110e92c80_Var>());
			return _5528_dead;
		}
		goto _match_end_4614944384;
		_case_end_4614946144:;
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_StructIns>>())) { goto _case_end_4614948160; }
		_case_begin_4614948160:;
		{
			_5528_dead = _11034cb30_is_struct_dead(_5516_ref.operator jule::Ref<_1109372e0_StructIns>());
			return _5528_dead;
		}
		goto _match_end_4614944384;
		_case_end_4614948160:;
		if (!(_match_expr.type_is<jule::Ref<_110e3f160_Trait>>())) { goto _case_end_4614948272; }
		_case_begin_4614948272:;
		{
			_5528_dead = _11034cb30_is_trait_dead(_5516_ref.operator jule::Ref<_110e3f160_Trait>());
			return _5528_dead;
		}
		goto _match_end_4614944384;
		_case_end_4614948272:;
		_case_begin_4614947824:;
		{
			_5528_dead = false;
			return _5528_dead;
		}
		goto _match_end_4614944384;
		_case_end_4614947824:;
		_match_end_4614944384:;
	}
}



inline void _11034cb30_remove_from_slice_0(jule::Slice<jule::Ref<_11072eb20_FnIns>>& _10630_s,jule::Int _10639_pos) {
	if (_10639_pos == _10630_s.len()) {
		return;
	}
	_10630_s=jule::append(_10630_s.slice(0LL,static_cast<jule::Int>(_10639_pos)),_10630_s.slice(static_cast<jule::Int>(_10639_pos + 1LL)));
}

inline void _11034cb30_remove_from_slice_1(jule::Slice<jule::Ref<_1109372e0_StructIns>>& _10630_s,jule::Int _10639_pos) {
	if (_10639_pos == _10630_s.len()) {
		return;
	}
	_10630_s=jule::append(_10630_s.slice(0LL,static_cast<jule::Int>(_10639_pos)),_10630_s.slice(static_cast<jule::Int>(_10639_pos + 1LL)));
}



inline void _11034cb30_drop_ref(jule::Slice<jule::Any>& _11418_refs,jule::Int _11431_pos) {
	_11418_refs=_11418_refs.slice(0LL,static_cast<jule::Int>(_11431_pos));
}



inline jule::Bool _11034cb30_is_all_references_are_dead_0(jule::Ref<_110d9ce90_ReferenceStack> _12438_references) {
	jule::Int _12513_i = 0LL;
	_iter_begin_4614968240:;
	if (!(_12513_i < _12438_references->_method_len())) { goto _iter_end_4614968240; }
	{
		jule::Any _12717_ref = _12438_references->_method_at(_12513_i);
		{
			auto _match_expr{ _11034cb30_current };
			if (!(_match_expr.type_is<jule::Ref<_11072eb20_FnIns>>())) { goto _case_end_4614971040; }
			_case_begin_4614971040:;
			{
				{
					auto _match_expr{ _12717_ref };
					if (!(_match_expr.type_is<jule::Ref<_11072eb20_FnIns>>())) { goto _case_end_4614972928; }
					_case_begin_4614972928:;
					{
						if ((_11034cb30_current.operator jule::Ref<_11072eb20_FnIns>()).alloc == (_12717_ref.operator jule::Ref<_11072eb20_FnIns>()).alloc) {
							goto _iter_next_4614968240;
						}
					}
					goto _match_end_4614971568;
					_case_end_4614972928:;
					_match_end_4614971568:;
				}
			}
			goto _match_end_4614970032;
			_case_end_4614971040:;
			_match_end_4614970032:;
		}
		{
			auto _match_expr{ _11034cb30_main_current };
			if (!(_match_expr.type_is<jule::Ref<_11072eb20_FnIns>>())) { goto _case_end_4614973600; }
			_case_begin_4614973600:;
			{
				{
					auto _match_expr{ _12717_ref };
					if (!(_match_expr.type_is<jule::Ref<_11072eb20_FnIns>>())) { goto _case_end_4614974048; }
					_case_begin_4614974048:;
					{
						if ((_11034cb30_main_current.operator jule::Ref<_11072eb20_FnIns>()).alloc == (_12717_ref.operator jule::Ref<_11072eb20_FnIns>()).alloc) {
							goto _iter_next_4614968240;
						}
					}
					goto _match_end_4614971984;
					_case_end_4614974048:;
					_match_end_4614971984:;
				}
			}
			goto _match_end_4614974720;
			_case_end_4614973600:;
			_match_end_4614974720:;
		}
		if ((!(_11034cb30_is_dead(_12717_ref)))) {
			return false;
		}
	}
	_iter_next_4614968240:;
	(_12513_i)++;
	goto _iter_begin_4614968240;
	_iter_end_4614968240:;
	return true;
}

inline jule::Bool _11034cb30_is_all_references_are_dead_1(jule::Ref<_110d9ce90_ReferenceStack> _12438_references) {
	jule::Int _12513_i = 0LL;
	_iter_begin_4614986864:;
	if (!(_12513_i < _12438_references->_method_len())) { goto _iter_end_4614986864; }
	{
		jule::Any _12717_ref = _12438_references->_method_at(_12513_i);
		{
			auto _match_expr{ _11034cb30_current };
			if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4614989984; }
			_case_begin_4614989984:;
			{
				{
					auto _match_expr{ _12717_ref };
					if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4614991488; }
					_case_begin_4614991488:;
					{
						if ((_11034cb30_current.operator jule::Ref<_110e92c80_Var>()).alloc == (_12717_ref.operator jule::Ref<_110e92c80_Var>()).alloc) {
							goto _iter_next_4614986864;
						}
					}
					goto _match_end_4614990096;
					_case_end_4614991488:;
					_match_end_4614990096:;
				}
			}
			goto _match_end_4614988688;
			_case_end_4614989984:;
			_match_end_4614988688:;
		}
		{
			auto _match_expr{ _11034cb30_main_current };
			if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4614990448; }
			_case_begin_4614990448:;
			{
				{
					auto _match_expr{ _12717_ref };
					if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4614992576; }
					_case_begin_4614992576:;
					{
						if ((_11034cb30_main_current.operator jule::Ref<_110e92c80_Var>()).alloc == (_12717_ref.operator jule::Ref<_110e92c80_Var>()).alloc) {
							goto _iter_next_4614986864;
						}
					}
					goto _match_end_4614992160;
					_case_end_4614992576:;
					_match_end_4614992160:;
				}
			}
			goto _match_end_4614993280;
			_case_end_4614990448:;
			_match_end_4614993280:;
		}
		if ((!(_11034cb30_is_dead(_12717_ref)))) {
			return false;
		}
	}
	_iter_next_4614986864:;
	(_12513_i)++;
	goto _iter_begin_4614986864;
	_iter_end_4614986864:;
	return true;
}

inline jule::Bool _11034cb30_is_all_references_are_dead_2(jule::Ref<_110d9ce90_ReferenceStack> _12438_references) {
	jule::Int _12513_i = 0LL;
	_iter_begin_4615021408:;
	if (!(_12513_i < _12438_references->_method_len())) { goto _iter_end_4615021408; }
	{
		jule::Any _12717_ref = _12438_references->_method_at(_12513_i);
		{
			auto _match_expr{ _11034cb30_current };
			if (!(_match_expr.type_is<jule::Ref<_1109372e0_StructIns>>())) { goto _case_end_4615024528; }
			_case_begin_4615024528:;
			{
				{
					auto _match_expr{ _12717_ref };
					if (!(_match_expr.type_is<jule::Ref<_1109372e0_StructIns>>())) { goto _case_end_4615026064; }
					_case_begin_4615026064:;
					{
						if ((_11034cb30_current.operator jule::Ref<_1109372e0_StructIns>()).alloc == (_12717_ref.operator jule::Ref<_1109372e0_StructIns>()).alloc) {
							goto _iter_next_4615021408;
						}
					}
					goto _match_end_4615024720;
					_case_end_4615026064:;
					_match_end_4615024720:;
				}
			}
			goto _match_end_4615024000;
			_case_end_4615024528:;
			_match_end_4615024000:;
		}
		{
			auto _match_expr{ _11034cb30_main_current };
			if (!(_match_expr.type_is<jule::Ref<_1109372e0_StructIns>>())) { goto _case_end_4615026736; }
			_case_begin_4615026736:;
			{
				{
					auto _match_expr{ _12717_ref };
					if (!(_match_expr.type_is<jule::Ref<_1109372e0_StructIns>>())) { goto _case_end_4615027248; }
					_case_begin_4615027248:;
					{
						if ((_11034cb30_main_current.operator jule::Ref<_1109372e0_StructIns>()).alloc == (_12717_ref.operator jule::Ref<_1109372e0_StructIns>()).alloc) {
							goto _iter_next_4615021408;
						}
					}
					goto _match_end_4615028672;
					_case_end_4615027248:;
					_match_end_4615028672:;
				}
			}
			goto _match_end_4615027856;
			_case_end_4615026736:;
			_match_end_4615027856:;
		}
		if ((!(_11034cb30_is_dead(_12717_ref)))) {
			return false;
		}
	}
	_iter_next_4615021408:;
	(_12513_i)++;
	goto _iter_begin_4615021408;
	_iter_end_4615021408:;
	return true;
}



inline jule::Bool _11034cb30_is_fn_dead(jule::Ref<_11072eb20_FnIns> _15319_f) {
	if (_15319_f->_field_decl->_field_cpp_linked) {
		return false;
	}
	if (_15319_f->_field_decl->_method_is_entry_point() || _15319_f->_field_decl->_method_is_init()) {
		return (!(_15319_f->_field_decl->_field_statically));
	}
	if (jule::real(_15319_f->_field_owner)) {
		if (_11034cb30_is_exist_ref(_11034cb30_checking,jule::Any(_15319_f->_field_owner))) {
			return true;
		}
		return _11034cb30_is_dead(jule::Any(_15319_f->_field_owner));
	}
	return _11034cb30_is_all_references_are_dead_0(_15319_f->_field_references);
}



inline jule::Bool _11034cb30_is_var_dead(jule::Ref<_110e92c80_Var> _17920_v) {
	if (_17920_v->_field_constant) {
		return true;
	}
	if (_17920_v->_field_cpp_linked) {
		return false;
	}
	return _11034cb30_is_all_references_are_dead_1(_17920_v->_field_references);
}



inline jule::Bool _11034cb30_kind_is_dead(jule::Ref<_1116aff70_TypeKind> _19121_k) {
	{
		if (!((jule::real(_19121_k->_method_ref())))) { goto _case_end_4614991104; }
		_case_begin_4614991104:;
		{
			return _11034cb30_kind_is_dead(_19121_k->_method_ref()->_field_elem);
		}
		goto _match_end_4614996608;
		_case_end_4614991104:;
		if (!((jule::real(_19121_k->_method_ptr())))) { goto _case_end_4614999536; }
		_case_begin_4614999536:;
		{
			return _11034cb30_kind_is_dead(_19121_k->_method_ptr()->_field_elem);
		}
		goto _match_end_4614996608;
		_case_end_4614999536:;
		if (!((jule::real(_19121_k->_method_slc())))) { goto _case_end_4614999648; }
		_case_begin_4614999648:;
		{
			return _11034cb30_kind_is_dead(_19121_k->_method_slc()->_field_elem);
		}
		goto _match_end_4614996608;
		_case_end_4614999648:;
		if (!((jule::real(_19121_k->_method_arr())))) { goto _case_end_4614999808; }
		_case_begin_4614999808:;
		{
			return _11034cb30_kind_is_dead(_19121_k->_method_arr()->_field_elem);
		}
		goto _match_end_4614996608;
		_case_end_4614999808:;
		if (!((jule::real(_19121_k->_method_trt())))) { goto _case_end_4614999920; }
		_case_begin_4614999920:;
		{
			jule::Ref<_110e3f160_Trait> _20617_t = _19121_k->_method_trt();
			if (_11034cb30_is_dead(jule::Any(_20617_t))) {
				return true;
			}
		}
		goto _match_end_4614996608;
		_case_end_4614999920:;
		if (!((jule::real(_19121_k->_method_strct())))) { goto _case_end_4615000032; }
		_case_begin_4615000032:;
		{
			jule::Ref<_1109372e0_StructIns> _21217_s = _19121_k->_method_strct();
			if (_11034cb30_is_dead(jule::Any(_21217_s))) {
				return true;
			}
		}
		goto _match_end_4614996608;
		_case_end_4615000032:;
		_match_end_4614996608:;
	}
	return false;
}



inline jule::Bool _11034cb30_is_any_generic_is_dead(jule::Slice<jule::Ref<_1116aff70_TypeKind>>& _22032_generics) {
	{
		auto __julec_range_expr = _22032_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1116aff70_TypeKind> _11034cb30_g = *__julec_range_begin;
			_iter_begin_4615001328:;
			{
				if (_11034cb30_kind_is_dead(_11034cb30_g)) {
					return true;
				}
			}
			_iter_next_4615001328:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11034cb30_g = *__julec_range_begin; goto _iter_begin_4615001328; }
			_iter_end_4615001328:;
		}
	}
	return false;
}



inline jule::Bool _11034cb30_is_struct_dead(jule::Ref<_1109372e0_StructIns> _22923_s) {
	return false;
	if (_22923_s->_field_decl->_field_cpp_linked) {
		return false;
	}
	return _11034cb30_is_all_references_are_dead_2(_22923_s->_field_references);
}



inline jule::Bool _11034cb30_is_trait_dead(jule::Ref<_110e3f160_Trait> _24622_t) {
	return false;
	{
		auto __julec_range_expr = _24622_t->_field_implemented;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_Struct> _11034cb30_imp = *__julec_range_begin;
			_iter_begin_4615031088:;
			{
				jule::Int _25117_i = 0LL;
				_iter_begin_4615035952:;
				if (!(_25117_i < _11034cb30_imp->_field_instances.len())) { goto _iter_end_4615035952; }
				{
					jule::Ref<_1109372e0_StructIns> _25321_ins = _11034cb30_imp->_field_instances[static_cast<jule::Int>(_25117_i)];
					if ((!(_11034cb30_is_struct_dead(_25321_ins)))) {
						return false;
					}
				}
				_iter_next_4615035952:;
				(_25117_i)++;
				goto _iter_begin_4615035952;
				_iter_end_4615035952:;
			}
			_iter_next_4615031088:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11034cb30_imp = *__julec_range_begin; goto _iter_begin_4615031088; }
			_iter_end_4615031088:;
		}
	}
	return true;
}



inline void _11034cb30_eliminate_dead_functions(_1108ddf20_Vector_11& _26434_funcs) {
	jule::Int _26513_i = 0LL;
	_iter_begin_4615039552:;
	if (!(_26513_i < _26434_funcs._method_len())) { goto _iter_end_4615039552; }
	{
		jule::Ref<_11072eb20_Fn> _26717_f = _26434_funcs._method_at(_26513_i);
		jule::Int _26817_j = 0LL;
		_iter_begin_4615042496:;
		if (!(_26817_j < _26717_f->_field_instances.len())) { goto _iter_end_4615042496; }
		{
			jule::Ref<_11072eb20_FnIns> _27021_ins = _26717_f->_field_instances[static_cast<jule::Int>(_26817_j)];
			_11034cb30_main_current=jule::Any(_27021_ins);
			if (_11034cb30_is_fn_dead(_27021_ins)) {
				_11034cb30_deads=jule::append(_11034cb30_deads,jule::Slice<jule::Any>({jule::Any(_27021_ins)}));
				_11034cb30_remove_from_slice_0(_26717_f->_field_instances,_26817_j);
				goto _iter_next_4615042496;
			}
			_1102a20b0_eliminate_dead_code_of_scope(_27021_ins->_field_scope);
			(_26817_j)++;
		}
		_iter_next_4615042496:;
		goto _iter_begin_4615042496;
		_iter_end_4615042496:;
		if (_26717_f->_field_instances.len() == 0LL) {
			_26434_funcs._method_remove_range(_26513_i,1LL);
			goto _iter_next_4615039552;
		}
		(_26513_i)++;
	}
	_iter_next_4615039552:;
	goto _iter_begin_4615039552;
	_iter_end_4615039552:;
}



inline void _11034cb30_eliminate_dead_globals(jule::Ref<_110e4edc0_Package>& _29032_pkg) {
	{
		auto __julec_range_expr = _29032_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _11034cb30_f = *__julec_range_begin;
			_iter_begin_4615061280:;
			{
				jule::Int _29217_i = 0LL;
				_iter_begin_4615063200:;
				if (!(_29217_i < _11034cb30_f->_field_vars._method_len())) { goto _iter_end_4615063200; }
				{
					jule::Ref<_110e92c80_Var> _29421_v = _11034cb30_f->_field_vars._method_at(_29217_i);
					_11034cb30_main_current=jule::Any(_29421_v);
					if (_11034cb30_is_var_dead(_29421_v)) {
						_11034cb30_deads=jule::append(_11034cb30_deads,jule::Slice<jule::Any>({jule::Any(_29421_v)}));
						_11034cb30_f->_field_vars._method_remove_range(_29217_i,1LL);
					} else {
						(_29217_i)++;
					}
				}
				_iter_next_4615063200:;
				goto _iter_begin_4615063200;
				_iter_end_4615063200:;
			}
			_iter_next_4615061280:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11034cb30_f = *__julec_range_begin; goto _iter_begin_4615061280; }
			_iter_end_4615061280:;
		}
	}
}



inline void _11034cb30_eliminate_dead_functions_package(jule::Ref<_110e4edc0_Package>& _30642_pkg) {
	{
		auto __julec_range_expr = _30642_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _11034cb30_f = *__julec_range_begin;
			_iter_begin_4615062512:;
			{
				_11034cb30_eliminate_dead_functions(_11034cb30_f->_field_funcs);
			}
			_iter_next_4615062512:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11034cb30_f = *__julec_range_begin; goto _iter_begin_4615062512; }
			_iter_end_4615062512:;
		}
	}
}



inline void _11034cb30_eliminate_dead_structs(jule::Ref<_110e4edc0_Package>& _31232_pkg) {
	{
		auto __julec_range_expr = _31232_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _11034cb30_f = *__julec_range_begin;
			_iter_begin_4615071616:;
			{
				jule::Int _31417_i = 0LL;
				_iter_begin_4615074832:;
				if (!(_31417_i < _11034cb30_f->_field_structs._method_len())) { goto _iter_end_4615074832; }
				{
					jule::Ref<_1109372e0_Struct> _31621_s = _11034cb30_f->_field_structs._method_at(_31417_i);
					jule::Int _31721_j = 0LL;
					_iter_begin_4615078816:;
					if (!(_31721_j < _31621_s->_field_instances.len())) { goto _iter_end_4615078816; }
					{
						jule::Ref<_1109372e0_StructIns> _31925_ins = _31621_s->_field_instances[static_cast<jule::Int>(_31721_j)];
						_11034cb30_main_current=jule::Any(_31925_ins);
						if (_11034cb30_is_struct_dead(_31925_ins)) {
							_11034cb30_deads=jule::append(_11034cb30_deads,jule::Slice<jule::Any>({jule::Any(_31925_ins)}));
							_11034cb30_remove_from_slice_1(_31621_s->_field_instances,_31721_j);
							goto _iter_next_4615078816;
						}
						(_31721_j)++;
					}
					_iter_next_4615078816:;
					goto _iter_begin_4615078816;
					_iter_end_4615078816:;
					if (_31621_s->_field_instances.len() == 0LL) {
						_11034cb30_f->_field_structs._method_remove_range(_31417_i,1LL);
						goto _iter_next_4615074832;
					}
					(_31417_i)++;
				}
				_iter_next_4615074832:;
				goto _iter_begin_4615074832;
				_iter_end_4615074832:;
			}
			_iter_next_4615071616:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11034cb30_f = *__julec_range_begin; goto _iter_begin_4615071616; }
			_iter_end_4615071616:;
		}
	}
}



inline void _11034cb30_eliminate_dead_traits(jule::Ref<_110e4edc0_Package>& _34931_pkg) {
	{
		auto __julec_range_expr = _34931_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _11034cb30_f = *__julec_range_begin;
			_iter_begin_4615095312:;
			{
				jule::Int _35117_i = 0LL;
				_iter_begin_4615097136:;
				if (!(_35117_i < _11034cb30_f->_field_traits._method_len())) { goto _iter_end_4615097136; }
				{
					jule::Ref<_110e3f160_Trait> _35321_t = _11034cb30_f->_field_traits._method_at(_35117_i);
					_11034cb30_main_current=jule::Any(_35321_t);
					if (_11034cb30_is_trait_dead(_35321_t)) {
						_11034cb30_deads=jule::append(_11034cb30_deads,jule::Slice<jule::Any>({jule::Any(_35321_t)}));
						_11034cb30_f->_field_traits._method_remove_range(_35117_i,1LL);
					} else {
						(_35117_i)++;
					}
				}
				_iter_next_4615097136:;
				goto _iter_begin_4615097136;
				_iter_end_4615097136:;
			}
			_iter_next_4615095312:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11034cb30_f = *__julec_range_begin; goto _iter_begin_4615095312; }
			_iter_end_4615095312:;
		}
	}
}



inline void _11034cb30_catch_alive_init(jule::Ref<_110e4edc0_Package>& _36526_pkg) {
	
	
	jule::Ref<_11072eb20_Fn> _36813_f = _36526_pkg->_method_find_fn(jule::Str("init", 4),false);
	if ((!(jule::real(_36813_f)))) {
		return;
	}
	jule::I64 _3739_n = _11034cb30_deads.len();
	__JULE_DEFER({
		_11034cb30_deads=_11034cb30_deads.slice(0LL,static_cast<jule::Int>(_3739_n));
		_11034cb30_checking=nullptr;
		_11034cb30_current=jule::Any(nullptr);
	});
	jule::Ref<_11072eb20_FnIns> _38113_ins = _36813_f->_field_instances[0LL];
	jule::Int _38213_i = 0LL;
	_iter_begin_4615106848:;
	if (!(_38213_i < _38113_ins->_field_refers->_method_len())) { goto _iter_end_4615106848; }
	{
		if ((!(_11034cb30_is_dead(_38113_ins->_field_refers->_method_at(_38213_i))))) {
			_36813_f->_field_statically=true;
			return;
		}
	}
	_iter_next_4615106848:;
	(_38213_i)++;
	goto _iter_begin_4615106848;
	_iter_end_4615106848:;
}



inline void _11034cb30_eliminate_dead_code_package(jule::Ref<_110e4edc0_Package>& _39137_pkg) {
	_11034cb30_deads=jule::Slice<jule::Any>::alloc(0LL,2000LL);
	_11034cb30_catch_alive_init(_39137_pkg);
	_11034cb30_eliminate_dead_globals(_39137_pkg);
	_11034cb30_eliminate_dead_functions_package(_39137_pkg);
}



inline void _11034cb30_eliminate_dead_code(jule::Ref<_110254280_IR> _40232_ir) {
	jule::I64 _40313_i = _40232_ir->_field_used.len() - 1LL;
	_iter_begin_4615120720:;
	if (!(_40313_i >= 0LL)) { goto _iter_end_4615120720; }
	{
		jule::Ref<_110e4edc0_ImportInfo> _40517_u = _40232_ir->_field_used[static_cast<jule::Int>(_40313_i)];
		if ((!(_40517_u->_field_cpp_linked))) {
			_11034cb30_eliminate_dead_code_package(_40517_u->_field_package);
		}
	}
	_iter_next_4615120720:;
	(_40313_i)--;
	goto _iter_begin_4615120720;
	_iter_end_4615120720:;
	_11034cb30_eliminate_dead_code_package(_40232_ir->_field_main);
	_11034cb30_deads=nullptr;
	_11034cb30_checking=nullptr;
	_11034cb30_current=jule::Any(nullptr);
}



inline void _1102a20b0_eliminate_dead_code_of_scope(jule::Ref<_110af2660_Scope> _7437_s) {
	jule::Ref<_1102a20b0_ScopeDeadCode> _7513_sdc = jule::new_struct<_1102a20b0_ScopeDeadCode>(new( std::nothrow ) _1102a20b0_ScopeDeadCode(jule::Ref<_1102a20b0_ScopeDeadCode>(),_7437_s,(&(_7437_s->_field_stmts)),jule::Int()));
	{
		_7513_sdc->_method_optimize_stmts();
	}
}



inline void _1100e3f70_push_opt_level(jule::Int _2823_level) {
	{
		auto _match_expr{ _2823_level };
		if (!((0LLU) == _match_expr)) { goto _case_end_4615168752; }
		_case_begin_4615168752:;
		{
			_1100e3f70_OPTIMIZATIONS=nullptr;
		}
		goto _match_end_4615167312;
		_case_end_4615168752:;
		if (!((1LLU) == _match_expr)) { goto _case_end_4615168864; }
		_case_begin_4615168864:;
		{
			_1100e3f70_OPTIMIZATIONS=jule::append(_1100e3f70_OPTIMIZATIONS,jule::Slice<jule::Str>({jule::Str("--opt-copy", 10),jule::Str("--opt-deadcode", 14),jule::Str("--opt-append", 12)}));
		}
		goto _match_end_4615167312;
		_case_end_4615168864:;
		_case_begin_4615167792:;
		{
			return;
		}
		goto _match_end_4615167312;
		_case_end_4615167792:;
		_match_end_4615167312:;
	}
}



inline jule::Bool _1100e3f70_is_opt_enabled(jule::Str _4523_opt) {
	{
		auto __julec_range_expr = _1100e3f70_OPTIMIZATIONS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1100e3f70_oopt = *__julec_range_begin;
			_iter_begin_4615171808:;
			{
				if (_4523_opt == _1100e3f70_oopt) {
					return true;
				}
			}
			_iter_next_4615171808:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1100e3f70_oopt = *__julec_range_begin; goto _iter_begin_4615171808; }
			_iter_end_4615171808:;
		}
	}
	return false;
}



inline jule::Str _1114d55f0_gen_if(jule::Ref<_110af2660_If> _12815_i) {
	jule::Str _12913_obj = jule::Str("if (", 4);
	_12913_obj+=_1115eb810_gen_expr(_12815_i->_field_expr);
	_12913_obj+=jule::Str(") ", 2);
	_12913_obj+=_1114d55f0_gen_scope(_12815_i->_field_scope);
	return _12913_obj;
}



inline jule::Str _1114d55f0_gen_conditional(jule::Ref<_110af2660_Conditional> _13624_c) {
	jule::Str _13713_obj = _1114d55f0_gen_if(_13624_c->_field_elifs[0LL]);
	{
		auto __julec_range_expr = _13624_c->_field_elifs.slice(1LL);
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110af2660_If> _1114d55f0_elif = *__julec_range_begin;
			_iter_begin_4615496752:;
			{
				_13713_obj+=jule::Str(" else ", 6);
				_13713_obj+=_1114d55f0_gen_if(_1114d55f0_elif);
			}
			_iter_next_4615496752:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1114d55f0_elif = *__julec_range_begin; goto _iter_begin_4615496752; }
			_iter_end_4615496752:;
		}
	}
	if (jule::real(_13624_c->_field_default)) {
		_13713_obj+=jule::Str(" else ", 6);
		_13713_obj+=_1114d55f0_gen_scope(_13624_c->_field_default->_field_scope);
	}
	return _13713_obj;
}



inline jule::Str _1114d55f0_gen_inf_iter(jule::Ref<_110af2660_InfIter> _15221_it) {
	jule::Str _1539_begin = _111b4b010_iter_begin_label_ident(((jule::Uintptr)((_15221_it).alloc)));
	jule::Str _1549_end = _111b4b010_iter_end_label_ident(((jule::Uintptr)((_15221_it).alloc)));
	jule::Str _1559_next = _111b4b010_iter_next_label_ident(((jule::Uintptr)((_15221_it).alloc)));
	jule::Str _1569_indent = _111b4cab0_indent();
	jule::Str _15813_obj = _1539_begin + jule::Str(":;\n", 3);
	_15813_obj+=_1569_indent;
	_15813_obj+=_1114d55f0_gen_scope(_15221_it->_field_scope);
	_15813_obj+=jule::Str("\n", 1);
	_15813_obj+=_1569_indent;
	_15813_obj+=_1559_next + jule::Str(":;\n", 3);
	_15813_obj+=_1569_indent;
	_15813_obj+=(jule::Str("goto ", 5) + _1539_begin) + jule::Str(";\n", 2);
	_15813_obj+=_1569_indent;
	_15813_obj+=_1549_end + jule::Str(":;", 2);
	return _15813_obj;
}



inline jule::Str _1114d55f0_gen_while_iter(jule::Ref<_110af2660_WhileIter> _17223_it) {
	jule::Str _1739_begin = _111b4b010_iter_begin_label_ident(((jule::Uintptr)((_17223_it).alloc)));
	jule::Str _1749_end = _111b4b010_iter_end_label_ident(((jule::Uintptr)((_17223_it).alloc)));
	jule::Str _1759_next = _111b4b010_iter_next_label_ident(((jule::Uintptr)((_17223_it).alloc)));
	jule::Str _1769_indent = _111b4cab0_indent();
	jule::Str _17813_obj = _1739_begin + jule::Str(":;\n", 3);
	_17813_obj+=_1769_indent;
	if (_17223_it->_field_expr != nullptr) {
		_17813_obj+=jule::Str("if (!(", 6);
		_17813_obj+=_1115eb810_gen_expr(_17223_it->_field_expr);
		_17813_obj+=jule::Str(")) { goto ", 10);
		_17813_obj+=_1749_end;
		_17813_obj+=jule::Str("; }\n", 4);
		_17813_obj+=_1769_indent;
	}
	_17813_obj+=_1114d55f0_gen_scope(_17223_it->_field_scope);
	_17813_obj+=jule::Str("\n", 1);
	_17813_obj+=_1769_indent;
	_17813_obj+=_1759_next + jule::Str(":;\n", 3);
	_17813_obj+=_1769_indent;
	if (_17223_it->_field_next != nullptr) {
		_17813_obj+=_1114d55f0_gen_st(_17223_it->_field_next);
		_17813_obj+=jule::Str("\n", 1);
		_17813_obj+=_1769_indent;
	}
	_17813_obj+=(jule::Str("goto ", 5) + _1739_begin) + jule::Str(";\n", 2);
	_17813_obj+=_1769_indent;
	_17813_obj+=_1749_end + jule::Str(":;", 2);
	return _17813_obj;
}



inline jule::Trait<_1114d55f0_RangeSetter> _1114d55f0_get_range_setter(jule::Ref<_110af2660_RangeIter> _20525_it) {
	{
		if (!((jule::real(_20525_it->_field_expr->_field_kind->_method_slc())))) { goto _case_end_4615531088; }
		_case_begin_4615531088:;
		{
			return jule::new_struct<_1114d55f0_IndexRangeSetter>(new( std::nothrow ) _1114d55f0_IndexRangeSetter());
		}
		goto _match_end_4615527744;
		_case_end_4615531088:;
		if (!((jule::real(_20525_it->_field_expr->_field_kind->_method_arr())))) { goto _case_end_4615529280; }
		_case_begin_4615529280:;
		{
			return jule::new_struct<_1114d55f0_IndexRangeSetter>(new( std::nothrow ) _1114d55f0_IndexRangeSetter());
		}
		goto _match_end_4615527744;
		_case_end_4615529280:;
		if (!((jule::real(_20525_it->_field_expr->_field_kind->_method_map())))) { goto _case_end_4615529392; }
		_case_begin_4615529392:;
		{
			return jule::new_struct<_1114d55f0_MapRangeSetter>(new( std::nothrow ) _1114d55f0_MapRangeSetter());
		}
		goto _match_end_4615527744;
		_case_end_4615529392:;
		_case_begin_4615527872:;
		{
			return jule::new_struct<_1114d55f0_IndexRangeSetter>(new( std::nothrow ) _1114d55f0_IndexRangeSetter());
		}
		goto _match_end_4615527744;
		_case_end_4615527872:;
		_match_end_4615527744:;
	}
}



inline jule::Str _1114d55f0_gen_range_iter(jule::Ref<_110af2660_RangeIter> _21423_it) {
	_111b4cab0_add_indent();
	jule::Str _2179_begin = _111b4b010_iter_begin_label_ident(((jule::Uintptr)((_21423_it).alloc)));
	jule::Str _2189_end = _111b4b010_iter_end_label_ident(((jule::Uintptr)((_21423_it).alloc)));
	jule::Str _2199_next = _111b4b010_iter_next_label_ident(((jule::Uintptr)((_21423_it).alloc)));
	jule::Str _22013__indent = _111b4cab0_indent();
	jule::Trait<_1114d55f0_RangeSetter> _2219_setter = _1114d55f0_get_range_setter(_21423_it);
	jule::Str _22313_obj = jule::Str("{\n", 2);
	_22313_obj+=_22013__indent;
	if (_21423_it->_field_expr->_field_lvalue && _1100e3f70_is_opt_enabled(jule::Str("--opt-copy", 10))) {
		_22313_obj+=jule::Str("auto &__julec_range_expr = ", 27);
	} else {
		_22313_obj+=jule::Str("auto __julec_range_expr = ", 26);
	}
	_22313_obj+=_1115eb810_gen_expr(_21423_it->_field_expr->_field_model) + jule::Str(";\n", 2);
	_22313_obj+=_22013__indent;
	_22313_obj+=jule::Str("if (__julec_range_expr.begin() != __julec_range_expr.end()) {\n", 62);
	_111b4cab0_add_indent();
	_22013__indent=_111b4cab0_indent();
	_22313_obj+=_22013__indent;
	_22313_obj+=jule::Str("auto __julec_range_begin = __julec_range_expr.begin();\n", 55);
	_22313_obj+=_22013__indent;
	_22313_obj+=jule::Str("const auto __julec_range_end = __julec_range_expr.end();\n", 57);
	_22313_obj+=_22013__indent;
	_22313_obj+=_2219_setter.get()._method_setup_vars(_21423_it->_field_key_a,_21423_it->_field_key_b);
	_22313_obj+=_2179_begin + jule::Str(":;\n", 3);
	_22313_obj+=_22013__indent;
	_22313_obj+=_1114d55f0_gen_scope(_21423_it->_field_scope);
	_22313_obj+=jule::Str("\n", 1);
	_22313_obj+=_22013__indent;
	_22313_obj+=_2199_next + jule::Str(":;\n", 3);
	_22313_obj+=_22013__indent;
	_22313_obj+=_2219_setter.get()._method_next_steps(_21423_it->_field_key_a,_21423_it->_field_key_b,_2179_begin);
	_22313_obj+=_22013__indent;
	_22313_obj+=_2189_end + jule::Str(":;\n", 3);
	_111b4cab0_done_indent();
	_22013__indent=_111b4cab0_indent();
	_22313_obj+=_22013__indent;
	_22313_obj+=jule::Str("}\n", 2);
	_111b4cab0_done_indent();
	_22013__indent=_111b4cab0_indent();
	_22313_obj+=_22013__indent;
	_22313_obj+=jule::Str("}", 1);
	return _22313_obj;
}



inline jule::Str _1114d55f0_gen_cont(jule::Ref<_110af2660_ContSt> _26913_c) {
	return (jule::Str("goto ", 5) + _111b4b010_iter_next_label_ident(_26913_c->_field_it)) + jule::Str(";", 1);
}



inline jule::Str _1114d55f0_gen_label(jule::Ref<_110af2660_Label> _27314_l) {
	return _111b4b010_label_ident(_27314_l->_field_ident) + jule::Str(":;", 2);
}



inline jule::Str _1114d55f0_gen_goto(jule::Ref<_110af2660_GotoSt> _27713_gt) {
	return (jule::Str("goto ", 5) + _111b4b010_label_ident(_27713_gt->_field_ident)) + jule::Str(";", 1);
}



inline jule::Str _1114d55f0_gen_postfix(jule::Ref<_110af2660_Postfix> _28120_p) {
	return (((jule::Str("(", 1) + _1115eb810_gen_expr(_28120_p->_field_expr)) + jule::Str(")", 1)) + _28120_p->_field_op) + jule::Str(";", 1);
}



inline jule::Str _1114d55f0_gen_assign(jule::Ref<_110af2660_Assign> _28519_a) {
	jule::Str _28613_obj = _1115eb810_gen_expr(_28519_a->_field_l);
	_28613_obj+=_28519_a->_field_op;
	if (_1100e3f70_is_opt_enabled(jule::Str("--opt-append", 12))) {
		{
			auto _match_expr{ _28519_a->_field_r };
			if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel>>())) { goto _case_end_4615572400; }
			_case_begin_4615572400:;
			{
				jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel> _29121_model = _28519_a->_field_r.operator jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel>();
				jule::Str _29218_expr;
				jule::Bool _29224_optimized;
				std::tie(_29218_expr,_29224_optimized) = _1115eb810_gen_builtin_append_call_expr_model_assign(_28519_a->_field_l,_29121_model);
				if (_29224_optimized) {
					return _29218_expr;
				}
				_28613_obj+=_29218_expr;
			}
			goto _match_end_4615570384;
			_case_end_4615572400:;
			_case_begin_4615571616:;
			{
				_28613_obj+=_1115eb810_gen_expr(_28519_a->_field_r);
			}
			goto _match_end_4615570384;
			_case_end_4615571616:;
			_match_end_4615570384:;
		}
	} else {
		_28613_obj+=_1115eb810_gen_expr(_28519_a->_field_r);
	}
	_28613_obj+=jule::Str(";", 1);
	return _28613_obj;
}



inline jule::Str _1114d55f0_gen_multi_assign(jule::Ref<_110af2660_MultiAssign> _30825_a) {
	jule::Str _30913_obj = jule::Str("std::tie(", 9);
	{
		auto __julec_range_expr = _30825_a->_field_l;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1114d55f0_l = *__julec_range_begin;
			_iter_begin_4615580480:;
			{
				if (_1114d55f0_l == nullptr) {
					_30913_obj+=jule::Str("std::ignore,", 12);
				} else {
					_30913_obj+=_1115eb810_gen_expr(_1114d55f0_l) + jule::Str(",", 1);
				}
			}
			_iter_next_4615580480:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1114d55f0_l = *__julec_range_begin; goto _iter_begin_4615580480; }
			_iter_end_4615580480:;
		}
	}
	_30913_obj=_30913_obj.slice(0LL,static_cast<jule::Int>(_30913_obj.len() - 1LL));
	_30913_obj+=jule::Str(") = ", 4);
	_30913_obj+=_1115eb810_gen_expr(_30825_a->_field_r);
	_30913_obj+=jule::Str(";", 1);
	return _30913_obj;
}



inline jule::Str _1114d55f0_gen_case(jule::Ref<_110af2660_Match> _32617_m,jule::Ref<_110af2660_Case> _32632_c) {
	
	jule::Str _3299_end = _111b4b010_case_end_label_ident(((jule::Uintptr)((_32632_c).alloc)));
	jule::Str _33013_obj = jule::Str("", 0);
	if (_32632_c->_field_exprs.len() > 0LL) {
		_33013_obj+=jule::Str("if (!(", 6);
		{
			auto __julec_range_expr = _32632_c->_field_exprs;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _1114d55f0_i = 0;
				jule::Any _1114d55f0_expr = *__julec_range_begin;
				_iter_begin_4615592000:;
				{
					{
						if (!(((!(_32617_m->_field_type_match))))) { goto _case_end_4615595552; }
						_case_begin_4615595552:;
						{
							_33013_obj+=jule::Str("(", 1);
							_33013_obj+=_1115eb810_gen_expr(_1114d55f0_expr);
							_33013_obj+=jule::Str(")", 1);
							if (_32617_m->_field_expr->_method_is_const()) {
								if ((!(_32617_m->_field_expr->_field_constant->_method_is_bool())) || (!(_32617_m->_field_expr->_field_constant->_method_read_bool()))) {
									_33013_obj+=jule::Str(" == ", 4);
									_33013_obj+=_1115eb810_gen_expr_model(_32617_m->_field_expr->_field_model);
								}
							} else {
								_33013_obj+=jule::Str(" == ", 4);
								_33013_obj+=jule::Str("_match_expr", 11);
							}
						}
						goto _match_end_4615594560;
						_case_end_4615595552:;
						_case_begin_4615594704:;
						{
							_33013_obj+=jule::Str("_match_expr", 11);
							_33013_obj+=(jule::Str(".type_is<", 9) + _1115eb810_gen_expr(_1114d55f0_expr)) + jule::Str(">()", 3);
						}
						goto _match_end_4615594560;
						_case_end_4615594704:;
						_match_end_4615594560:;
					}
					if ((_1114d55f0_i + 1LL) < _32632_c->_field_exprs.len()) {
						_33013_obj+=jule::Str(" || ", 4);
					}
				}
				_iter_next_4615592000:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_1114d55f0_i; _1114d55f0_expr = *__julec_range_begin; goto _iter_begin_4615592000; }
				_iter_end_4615592000:;
			}
		}
		_33013_obj+=jule::Str(")) { goto ", 10);
		_33013_obj+=_3299_end + jule::Str("; }\n", 4);
	}
	if (_32632_c->_field_scope->_field_stmts._method_len() > 0LL) {
		_33013_obj+=_111b4cab0_indent();
		_33013_obj+=_111b4b010_case_begin_label_ident(((jule::Uintptr)((_32632_c).alloc))) + jule::Str(":;\n", 3);
		_33013_obj+=_111b4cab0_indent();
		_33013_obj+=_1114d55f0_gen_scope(_32632_c->_field_scope);
		_33013_obj+=jule::Str("\n", 1);
	}
	_33013_obj+=_111b4cab0_indent();
	_33013_obj+=jule::Str("goto ", 5);
	_33013_obj+=_111b4b010_match_end_label_ident(((jule::Uintptr)((_32617_m).alloc))) + jule::Str(";", 1);
	_33013_obj+=jule::Str("\n", 1);
	_33013_obj+=_111b4cab0_indent();
	_33013_obj+=_3299_end + jule::Str(":;", 2);
	return _33013_obj;
}



inline jule::Str _1114d55f0_gen_match(jule::Ref<_110af2660_Match> _38118_m) {
	jule::Str _38213_obj = jule::Str("{\n", 2);
	_111b4cab0_add_indent();
	_38213_obj+=_111b4cab0_indent();
	if ((!(_38118_m->_field_expr->_method_is_const()))) {
		if (_38118_m->_field_expr->_field_lvalue && _1100e3f70_is_opt_enabled(jule::Str("--opt-copy", 10))) {
			_38213_obj+=jule::Str("auto &_match_expr{ ", 19);
		} else {
			_38213_obj+=jule::Str("auto _match_expr{ ", 18);
		}
		_38213_obj+=_1115eb810_gen_expr(_38118_m->_field_expr->_field_model);
		_38213_obj+=jule::Str(" };\n", 4);
		_38213_obj+=_111b4cab0_indent();
	}
	if (_38118_m->_field_cases.len() > 0LL) {
		_38213_obj+=_1114d55f0_gen_case(_38118_m,_38118_m->_field_cases[0LL]);
		{
			auto __julec_range_expr = _38118_m->_field_cases.slice(1LL);
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_110af2660_Case> _1114d55f0_c = *__julec_range_begin;
				_iter_begin_4615618896:;
				{
					_38213_obj+=jule::Str("\n", 1);
					_38213_obj+=_111b4cab0_indent();
					_38213_obj+=_1114d55f0_gen_case(_38118_m,_1114d55f0_c);
				}
				_iter_next_4615618896:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1114d55f0_c = *__julec_range_begin; goto _iter_begin_4615618896; }
				_iter_end_4615618896:;
			}
		}
	}
	if (jule::real(_38118_m->_field_default)) {
		_38213_obj+=jule::Str("\n", 1);
		_38213_obj+=_1114d55f0_gen_case(_38118_m,_38118_m->_field_default);
	}
	_38213_obj+=jule::Str("\n", 1);
	_38213_obj+=_111b4cab0_indent();
	_38213_obj+=_111b4b010_match_end_label_ident(((jule::Uintptr)((_38118_m).alloc))) + jule::Str(":;", 2);
	_38213_obj+=jule::Str("\n", 1);
	_111b4cab0_done_indent();
	_38213_obj+=_111b4cab0_indent();
	_38213_obj+=jule::Str("}", 1);
	return _38213_obj;
}



inline jule::Str _1114d55f0_gen_fall_st(jule::Ref<_110af2660_FallSt> _42716_f) {
	return (jule::Str("goto ", 5) + _111b4b010_case_begin_label_ident(_42716_f->_field_dest_case)) + jule::Str(";", 1);
}



inline jule::Str _1114d55f0_gen_break_st(jule::Ref<_110af2660_BreakSt> _43117_b) {
	jule::Str _43213_obj = jule::Str("goto ", 5);
	if (_43117_b->_field_it != 0LL) {
		_43213_obj+=_111b4b010_iter_end_label_ident(_43117_b->_field_it);
	} else {
		_43213_obj+=_111b4b010_match_end_label_ident(_43117_b->_field_mtch);
	}
	_43213_obj+=jule::Str(";", 1);
	return _43213_obj;
}



inline jule::Str _1114d55f0_gen_ret_vars(jule::Ref<_110af2660_RetSt> _44321_r) {
	jule::Str _44413_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _44321_r->_field_vars;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e92c80_Var> _1114d55f0_v = *__julec_range_begin;
			_iter_begin_4615635344:;
			{
				if (_1106ec050_is_ignore_ident(_1114d55f0_v->_field_ident)) {
					_44413_obj+=_1115eb810_get_init_expr(_1114d55f0_v->_field_kind->_field_kind);
				} else {
					_44413_obj+=_111b4b010_var_out_ident(_1114d55f0_v);
				}
				_44413_obj+=jule::Str(",", 1);
			}
			_iter_next_4615635344:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1114d55f0_v = *__julec_range_begin; goto _iter_begin_4615635344; }
			_iter_end_4615635344:;
		}
	}
	_44413_obj=_44413_obj.slice(0LL,static_cast<jule::Int>(_44413_obj.len() - 1LL));
	if (_44321_r->_field_vars.len() > 1LL) {
		_44413_obj=(jule::Str("return std::make_tuple(", 23) + _44413_obj) + jule::Str(")", 1);
	} else {
		_44413_obj=jule::Str("return ", 7) + _44413_obj;
	}
	_44413_obj+=jule::Str(";", 1);
	return _44413_obj;
}



inline jule::Str _1114d55f0_gen_ret_expr_tuple(jule::Ref<_110af2660_RetSt> _46727_r) {
	{
		auto _match_expr{ _46727_r->_field_expr };
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_FnCallExprModel>>())) { goto _case_end_4615643712; }
		_case_begin_4615643712:;
		{
			return (jule::Str("return ", 7) + _1115eb810_gen_expr_model(_46727_r->_field_expr)) + jule::Str(";", 1);
		}
		goto _match_end_4615639600;
		_case_end_4615643712:;
		_match_end_4615639600:;
	}
	jule::Slice<jule::Ref<_1112d7f10_Data>> _47313_datas = _46727_r->_field_expr.operator jule::Ref<_110e4e8a0_TupleExprModel>()->_field_datas;
	jule::Str _47413_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _46727_r->_field_vars;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1114d55f0_i = 0;
			jule::Ref<_110e92c80_Var> _1114d55f0_v = *__julec_range_begin;
			_iter_begin_4615648704:;
			{
				if ((!(_1106ec050_is_ignore_ident(_1114d55f0_v->_field_ident)))) {
					jule::Str _47817_ident = _111b4b010_var_out_ident(_1114d55f0_v);
					_47413_obj+=((_47817_ident + jule::Str(" = ", 3)) + _1115eb810_gen_expr(_47313_datas[static_cast<jule::Int>(_1114d55f0_i)]->_field_model)) + jule::Str(";\n", 2);
					_47413_obj+=_111b4cab0_indent();
				}
			}
			_iter_next_4615648704:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1114d55f0_i; _1114d55f0_v = *__julec_range_begin; goto _iter_begin_4615648704; }
			_iter_end_4615648704:;
		}
	}
	_47413_obj+=jule::Str("return std::make_tuple(", 23);
	{
		auto __julec_range_expr = _47313_datas;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1114d55f0_i = 0;
			jule::Ref<_1112d7f10_Data> _1114d55f0_d = *__julec_range_begin;
			_iter_begin_4615650320:;
			{
				jule::Ref<_110e92c80_Var> _48617_v = _46727_r->_field_vars[static_cast<jule::Int>(_1114d55f0_i)];
				if (_1106ec050_is_ignore_ident(_48617_v->_field_ident)) {
					_47413_obj+=_1115eb810_gen_expr(_1114d55f0_d->_field_model);
				} else {
					_47413_obj+=_111b4b010_var_out_ident(_48617_v);
				}
				_47413_obj+=jule::Str(",", 1);
			}
			_iter_next_4615650320:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1114d55f0_i; _1114d55f0_d = *__julec_range_begin; goto _iter_begin_4615650320; }
			_iter_end_4615650320:;
		}
	}
	_47413_obj=_47413_obj.slice(0LL,static_cast<jule::Int>(_47413_obj.len() - 1LL));
	_47413_obj+=jule::Str(");", 2);
	return _47413_obj;
}



inline jule::Str _1114d55f0_gen_ret_expr(jule::Ref<_110af2660_RetSt> _50121_r) {
	if (_50121_r->_field_vars.len() == 0LL) {
		return (jule::Str("return ", 7) + _1115eb810_gen_expr(_50121_r->_field_expr)) + jule::Str(";", 1);
	}
	if (_50121_r->_field_vars.len() > 1LL) {
		return _1114d55f0_gen_ret_expr_tuple(_50121_r);
	}
	if ((!(_1106ec050_is_ignore_ident(_50121_r->_field_vars[0LL]->_field_ident)))) {
		jule::Str _51113_ident = _111b4b010_var_out_ident(_50121_r->_field_vars[0LL]);
		jule::Str _51217_obj = ((_51113_ident + jule::Str(" = ", 3)) + _1115eb810_gen_expr(_50121_r->_field_expr)) + jule::Str(";\n", 2);
		_51217_obj+=_111b4cab0_indent();
		_51217_obj+=(jule::Str("return ", 7) + _51113_ident) + jule::Str(";", 1);
		return _51217_obj;
	}
	return (jule::Str("return ", 7) + _1115eb810_gen_expr(_50121_r->_field_expr)) + jule::Str(";", 1);
}



inline jule::Str _1114d55f0_gen_ret_st(jule::Ref<_110af2660_RetSt> _52119_r) {
	if ((_52119_r->_field_expr == nullptr) && (_52119_r->_field_vars.len() == 0LL)) {
		return jule::Str("return;", 7);
	}
	if (_52119_r->_field_expr == nullptr) {
		return _1114d55f0_gen_ret_vars(_52119_r);
	}
	return _1114d55f0_gen_ret_expr(_52119_r);
}



inline jule::Str _1114d55f0_gen_ret_st_with_defaults(jule::Ref<_1116aff70_TypeKind> _53333_result) {
	jule::Str _53413_obj = jule::Str("return ", 7);
	if (jule::real(_53333_result->_method_tup())) {
		_53413_obj+=jule::Str("std::make_tuple(", 16);
		{
			auto __julec_range_expr = _53333_result->_method_tup()->_field_types;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1116aff70_TypeKind> _1114d55f0_t = *__julec_range_begin;
				_iter_begin_4615680128:;
				{
					_53413_obj+=_1115eb810_get_init_expr(_1114d55f0_t);
					_53413_obj+=jule::Str(",", 1);
				}
				_iter_next_4615680128:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1114d55f0_t = *__julec_range_begin; goto _iter_begin_4615680128; }
				_iter_end_4615680128:;
			}
		}
		_53413_obj=_53413_obj.slice(0LL,static_cast<jule::Int>(_53413_obj.len() - 1LL));
		_53413_obj+=jule::Str(")", 1);
	} else {
		_53413_obj+=_1115eb810_get_init_expr(_53333_result);
	}
	_53413_obj+=jule::Str(";", 1);
	return _53413_obj;
}



inline jule::Str _1114d55f0_gen_recover(jule::Ref<_110af2660_Recover> _55020_r) {
	jule::Str _55113_obj = jule::Str("try ", 4);
	_55113_obj+=_1114d55f0_gen_scope(_55020_r->_field_scope);
	_55113_obj+=jule::Str(" catch(jule::Exception e) ", 26);
	if (_55020_r->_field_handler->_method_is_anon()) {
		_111b4cab0_add_indent();
		_55113_obj+=jule::Str("{\n", 2);
		_55113_obj+=_111b4cab0_indent();
		_55113_obj+=_1115eb810_gen_expr(_55020_r->_field_handler_expr);
		_55113_obj+=jule::Str("(jule::exception_to_error(e));", 30);
		if ((!(_55020_r->_field_scope_owner->_field_decl->_method_is_void()))) {
			_55113_obj+=jule::Str("\n", 1);
			_55113_obj+=_111b4cab0_indent();
			_111b4cab0_done_indent();
			_55113_obj+=_1114d55f0_gen_ret_st_with_defaults(_55020_r->_field_scope_owner->_field_result);
		} else {
			_111b4cab0_done_indent();
		}
		_55113_obj+=jule::Str("\n", 1);
		_55113_obj+=_111b4cab0_indent();
		_55113_obj+=jule::Str("}", 1);
	} else {
		_55113_obj+=jule::Str("{\n", 2);
		_111b4cab0_add_indent();
		_55113_obj+=_111b4cab0_indent();
		_55113_obj+=_1115eb810_gen_expr(_55020_r->_field_handler_expr);
		_55113_obj+=jule::Str("(jule::exception_to_error(e));\n", 31);
		_55113_obj+=_111b4cab0_indent();
		if (_55020_r->_field_scope_owner->_field_decl->_method_is_void()) {
			_111b4cab0_done_indent();
			_55113_obj+=jule::Str(" }", 2);
		} else {
			_55113_obj+=_1114d55f0_gen_ret_st_with_defaults(_55020_r->_field_scope_owner->_field_result);
			_55113_obj+=jule::Str("\n", 1);
			_111b4cab0_done_indent();
			_55113_obj+=_111b4cab0_indent();
			_55113_obj+=jule::Str("}", 1);
		}
	}
	return _55113_obj;
}



inline jule::Str _1114d55f0_gen_data_expr(jule::Ref<_1112d7f10_Data> _59922_d) {
	return _1115eb810_gen_expr(_59922_d->_field_model) + jule::Str(";", 1);
}



inline jule::Str _1114d55f0_gen_st(jule::Any _60415_st) {
	{
		auto _match_expr{ _60415_st };
		if (!(_match_expr.type_is<jule::Ref<_110af2660_Scope>>())) { goto _case_end_4615705088; }
		_case_begin_4615705088:;
		{
			return _1114d55f0_gen_scope(_60415_st.operator jule::Ref<_110af2660_Scope>());
		}
		goto _match_end_4615703584;
		_case_end_4615705088:;
		if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4615704080; }
		_case_begin_4615704080:;
		{
			return _111b4cab0_gen_var(_60415_st.operator jule::Ref<_110e92c80_Var>());
		}
		goto _match_end_4615703584;
		_case_end_4615704080:;
		if (!(_match_expr.type_is<jule::Ref<_1112d7f10_Data>>())) { goto _case_end_4615704192; }
		_case_begin_4615704192:;
		{
			return _1114d55f0_gen_data_expr(_60415_st.operator jule::Ref<_1112d7f10_Data>());
		}
		goto _match_end_4615703584;
		_case_end_4615704192:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_Conditional>>())) { goto _case_end_4615704304; }
		_case_begin_4615704304:;
		{
			return _1114d55f0_gen_conditional(_60415_st.operator jule::Ref<_110af2660_Conditional>());
		}
		goto _match_end_4615703584;
		_case_end_4615704304:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_InfIter>>())) { goto _case_end_4615705360; }
		_case_begin_4615705360:;
		{
			return _1114d55f0_gen_inf_iter(_60415_st.operator jule::Ref<_110af2660_InfIter>());
		}
		goto _match_end_4615703584;
		_case_end_4615705360:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_WhileIter>>())) { goto _case_end_4615705472; }
		_case_begin_4615705472:;
		{
			return _1114d55f0_gen_while_iter(_60415_st.operator jule::Ref<_110af2660_WhileIter>());
		}
		goto _match_end_4615703584;
		_case_end_4615705472:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_RangeIter>>())) { goto _case_end_4615705584; }
		_case_begin_4615705584:;
		{
			return _1114d55f0_gen_range_iter(_60415_st.operator jule::Ref<_110af2660_RangeIter>());
		}
		goto _match_end_4615703584;
		_case_end_4615705584:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_ContSt>>())) { goto _case_end_4615705696; }
		_case_begin_4615705696:;
		{
			return _1114d55f0_gen_cont(_60415_st.operator jule::Ref<_110af2660_ContSt>());
		}
		goto _match_end_4615703584;
		_case_end_4615705696:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_Label>>())) { goto _case_end_4615705856; }
		_case_begin_4615705856:;
		{
			return _1114d55f0_gen_label(_60415_st.operator jule::Ref<_110af2660_Label>());
		}
		goto _match_end_4615703584;
		_case_end_4615705856:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_GotoSt>>())) { goto _case_end_4615705968; }
		_case_begin_4615705968:;
		{
			return _1114d55f0_gen_goto(_60415_st.operator jule::Ref<_110af2660_GotoSt>());
		}
		goto _match_end_4615703584;
		_case_end_4615705968:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_Postfix>>())) { goto _case_end_4615706080; }
		_case_begin_4615706080:;
		{
			return _1114d55f0_gen_postfix(_60415_st.operator jule::Ref<_110af2660_Postfix>());
		}
		goto _match_end_4615703584;
		_case_end_4615706080:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_Assign>>())) { goto _case_end_4615706192; }
		_case_begin_4615706192:;
		{
			return _1114d55f0_gen_assign(_60415_st.operator jule::Ref<_110af2660_Assign>());
		}
		goto _match_end_4615703584;
		_case_end_4615706192:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_MultiAssign>>())) { goto _case_end_4615706304; }
		_case_begin_4615706304:;
		{
			return _1114d55f0_gen_multi_assign(_60415_st.operator jule::Ref<_110af2660_MultiAssign>());
		}
		goto _match_end_4615703584;
		_case_end_4615706304:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_Match>>())) { goto _case_end_4615706416; }
		_case_begin_4615706416:;
		{
			return _1114d55f0_gen_match(_60415_st.operator jule::Ref<_110af2660_Match>());
		}
		goto _match_end_4615703584;
		_case_end_4615706416:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_FallSt>>())) { goto _case_end_4615706528; }
		_case_begin_4615706528:;
		{
			return _1114d55f0_gen_fall_st(_60415_st.operator jule::Ref<_110af2660_FallSt>());
		}
		goto _match_end_4615703584;
		_case_end_4615706528:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_BreakSt>>())) { goto _case_end_4615706640; }
		_case_begin_4615706640:;
		{
			return _1114d55f0_gen_break_st(_60415_st.operator jule::Ref<_110af2660_BreakSt>());
		}
		goto _match_end_4615703584;
		_case_end_4615706640:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_RetSt>>())) { goto _case_end_4615706752; }
		_case_begin_4615706752:;
		{
			return _1114d55f0_gen_ret_st(_60415_st.operator jule::Ref<_110af2660_RetSt>());
		}
		goto _match_end_4615703584;
		_case_end_4615706752:;
		if (!(_match_expr.type_is<jule::Ref<_110af2660_Recover>>())) { goto _case_end_4615706864; }
		_case_begin_4615706864:;
		{
			return _1114d55f0_gen_recover(_60415_st.operator jule::Ref<_110af2660_Recover>());
		}
		goto _match_end_4615703584;
		_case_end_4615706864:;
		_case_begin_4615703680:;
		{
			return jule::Str("<unimplemented_stmt>", 20);
		}
		goto _match_end_4615703584;
		_case_end_4615703680:;
		_match_end_4615703584:;
	}
}



inline jule::Str _1114d55f0_gen_scope(jule::Ref<_110af2660_Scope> _62918_s) {
	jule::Str _63013_obj = jule::Str("{\n", 2);
	_111b4cab0_add_indent();
	jule::Int _63313_i = 0LL;
	_iter_begin_4615735216:;
	if (!(_63313_i < _62918_s->_field_stmts._method_len())) { goto _iter_end_4615735216; }
	{
		jule::Any _63517_st = _62918_s->_field_stmts._method_at(_63313_i);
		_63013_obj+=_111b4cab0_indent();
		_63013_obj+=_1114d55f0_gen_st(_63517_st);
		_63013_obj+=jule::Str("\n", 1);
	}
	_iter_next_4615735216:;
	(_63313_i)++;
	goto _iter_begin_4615735216;
	_iter_end_4615735216:;
	_111b4cab0_done_indent();
	_63013_obj+=_111b4cab0_indent();
	_63013_obj+=jule::Str("}", 1);
	if (_62918_s->_field_deferred) {
		_63013_obj=(jule::Str("__JULE_DEFER(", 13) + _63013_obj) + jule::Str(");", 2);
	}
	return _63013_obj;
}



inline jule::Str _1114d55f0_gen_fn_scope(jule::Ref<_11072eb20_FnIns> _65321_f) {
	if (jule::real(_65321_f->_field_owner)) {
		return _1114d55f0_gen_method_scope(_65321_f);
	}
	return _1114d55f0_gen_scope(_65321_f->_field_scope);
}



inline jule::Str _1114d55f0_gen_method_scope(jule::Ref<_11072eb20_FnIns> _66225_f) {
	return _1114d55f0_gen_scope(_66225_f->_field_scope);
}



inline jule::Str _1115eb810_concat_all_parts(jule::Slice<jule::Str> _7621_parts) {
	jule::Str _7713_s = jule::Str("", 0);
	{
		auto __julec_range_expr = _7621_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1115eb810_part = *__julec_range_begin;
			_iter_begin_4615747200:;
			{
				_7713_s+=_1115eb810_part;
			}
			_iter_next_4615747200:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1115eb810_part = *__julec_range_begin; goto _iter_begin_4615747200; }
			_iter_end_4615747200:;
		}
	}
	return _7713_s;
}



inline jule::Str _1115eb810_get_accessor(jule::Ref<_1116aff70_TypeKind> _8421_t) {
	if (jule::real(_8421_t->_method_ref()) || jule::real(_8421_t->_method_ptr())) {
		return jule::Str("->", 2);
	}
	return jule::Str(".", 1);
}



inline jule::Str _1115eb810_decompose_common_esq(jule::U8 _9125_b) {
	{
		auto _match_expr{ _9125_b };
		if (!(('\\') == _match_expr)) { goto _case_end_4615752672; }
		_case_begin_4615752672:;
		{
			return jule::Str("\\\\", 2);
		}
		goto _match_end_4615751552;
		_case_end_4615752672:;
		if (!(('\'') == _match_expr)) { goto _case_end_4615752784; }
		_case_begin_4615752784:;
		{
			return jule::Str("'", 1);
		}
		goto _match_end_4615751552;
		_case_end_4615752784:;
		if (!(('\"') == _match_expr)) { goto _case_end_4615753664; }
		_case_begin_4615753664:;
		{
			return jule::Str("\\\"", 2);
		}
		goto _match_end_4615751552;
		_case_end_4615753664:;
		if (!(('\a') == _match_expr)) { goto _case_end_4615753776; }
		_case_begin_4615753776:;
		{
			return jule::Str("\\a", 2);
		}
		goto _match_end_4615751552;
		_case_end_4615753776:;
		if (!(('\b') == _match_expr)) { goto _case_end_4615753888; }
		_case_begin_4615753888:;
		{
			return jule::Str("\\b", 2);
		}
		goto _match_end_4615751552;
		_case_end_4615753888:;
		if (!(('\f') == _match_expr)) { goto _case_end_4615754000; }
		_case_begin_4615754000:;
		{
			return jule::Str("\\f", 2);
		}
		goto _match_end_4615751552;
		_case_end_4615754000:;
		if (!(('\n') == _match_expr)) { goto _case_end_4615752976; }
		_case_begin_4615752976:;
		{
			return jule::Str("\\n", 2);
		}
		goto _match_end_4615751552;
		_case_end_4615752976:;
		if (!(('\r') == _match_expr)) { goto _case_end_4615753088; }
		_case_begin_4615753088:;
		{
			return jule::Str("\\r", 2);
		}
		goto _match_end_4615751552;
		_case_end_4615753088:;
		if (!(('\t') == _match_expr)) { goto _case_end_4615753216; }
		_case_begin_4615753216:;
		{
			return jule::Str("\\t", 2);
		}
		goto _match_end_4615751552;
		_case_end_4615753216:;
		if (!(('\v') == _match_expr)) { goto _case_end_4615753344; }
		_case_begin_4615753344:;
		{
			return jule::Str("\\v", 2);
		}
		goto _match_end_4615751552;
		_case_end_4615753344:;
		_case_begin_4615751920:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4615751552;
		_case_end_4615751920:;
		_match_end_4615751552:;
	}
}



inline jule::Str _1115eb810_sbtoa(jule::U8 _10710_b) {
	if (_10710_b == 0LL) {
		return jule::Str("\\x00", 4);
	}
	if (_10710_b <= 127LL) {
		jule::Str _11313_seq = _1115eb810_decompose_common_esq(_10710_b);
		if (_11313_seq != jule::Str("", 0)) {
			return _11313_seq;
		}
		if ((32LL <= _10710_b) && (_10710_b <= 126LL)) {
			return static_cast<jule::Str>(_10710_b);
		}
	}
	jule::Str _1239_seq = _110054e40_fmt_uint(static_cast<jule::U64>(_10710_b),8LL);
	if (_1239_seq.len() == 2LL) {
		return jule::Str("\\0", 2) + _1239_seq;
	}
	return jule::Str("\\", 1) + _1239_seq;
}



inline jule::Str _1115eb810_get_str_model(jule::Ref<_1118cee40_Const> _13018_c) {
	jule::Str _1319_content = _13018_c->_method_read_str();
	jule::Slice<jule::U8> _1329_bytes = static_cast<jule::Slice<jule::U8>>(_1319_content);
	jule::Str _1339_len = _110054e40_fmt_int(static_cast<jule::I64>(_1329_bytes.len()),10LL);
	jule::Str _13513_lit = jule::Str("", 0);
	{
		auto __julec_range_expr = _1329_bytes;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::U8 _1115eb810_b = *__julec_range_begin;
			_iter_begin_4615772992:;
			{
				_13513_lit+=_1115eb810_sbtoa(_1115eb810_b);
			}
			_iter_next_4615772992:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1115eb810_b = *__julec_range_begin; goto _iter_begin_4615772992; }
			_iter_end_4615772992:;
		}
	}
	return ((((_111b4b010_as_jt(jule::Str("str", 3)) + jule::Str("(\"", 2)) + _13513_lit) + jule::Str("\", ", 3)) + _1339_len) + jule::Str(")", 1);
}



inline jule::Str _1115eb810_get_bool_model(jule::Ref<_1118cee40_Const> _14319_c) {
	if (_14319_c->_method_read_bool()) {
		return jule::Str("true", 4);
	}
	return jule::Str("false", 5);
}



inline jule::Str _1115eb810_get_nil_model(void) {
	return jule::Str("nullptr", 7);
}



inline jule::Str _1115eb810_gen_float_special_cases(jule::F64 _15228_x) {
	{
		if (!((_110193400_is_nan(_15228_x)))) { goto _case_end_4615779152; }
		_case_begin_4615779152:;
		{
			return jule::Str("NAN", 3);
		}
		goto _match_end_4615778656;
		_case_end_4615779152:;
		if (!((_110193400_is_inf(_15228_x,1LL)))) { goto _case_end_4615779264; }
		_case_begin_4615779264:;
		{
			return jule::Str("INFINITY", 8);
		}
		goto _match_end_4615778656;
		_case_end_4615779264:;
		if (!((_110193400_is_inf(_15228_x,-1LL)))) { goto _case_end_4615779376; }
		_case_begin_4615779376:;
		{
			return jule::Str("-INFINITY", 9);
		}
		goto _match_end_4615778656;
		_case_end_4615779376:;
		_case_begin_4615778784:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4615778656;
		_case_end_4615778784:;
		_match_end_4615778656:;
	}
}



inline jule::Str _1115eb810_ftoa(jule::F64 _1619_f,jule::Int _16117_bitsize) {
	if (_16117_bitsize != 32LL) {
		if (_1619_f == static_cast<jule::F64>(static_cast<jule::I64>(_1619_f))) {
			return _1115eb810_i64toa(static_cast<jule::I64>(_1619_f));
		}
		if (_1619_f == static_cast<jule::F64>(static_cast<jule::U64>(_1619_f))) {
			return _1115eb810_u64toa(static_cast<jule::U64>(_1619_f));
		}
	}
	jule::Str _17113_m = _117e12d10_fmt_float(_1619_f,'f',-1LL,_16117_bitsize);
	if (_17113_m.find(jule::Str(".", 1)) == -1LL) {
		_17113_m+=jule::Str(".0", 2);
	}
	return _17113_m;
}



inline jule::Str _1115eb810_get_f32_model(jule::Ref<_1118cee40_Const> _17818_c) {
	jule::F64 _1799_x = _17818_c->_method_as_f64();
	jule::Str _1829_f = _1115eb810_gen_float_special_cases(_1799_x);
	if (_1829_f != jule::Str("", 0)) {
		return _1829_f;
	}
	{
		if (!((_1799_x == 340282346638528860000000000000000000000.0))) { goto _case_end_4615796032; }
		_case_begin_4615796032:;
		{
			return jule::Str("jule::MAX_F32", 13);
		}
		goto _match_end_4615794800;
		_case_end_4615796032:;
		if (!((_1799_x == -340282346638528860000000000000000000000.0))) { goto _case_end_4615796144; }
		_case_begin_4615796144:;
		{
			return jule::Str("jule::MIN_F32", 13);
		}
		goto _match_end_4615794800;
		_case_end_4615796144:;
		_match_end_4615794800:;
	}
	return _1115eb810_ftoa(_1799_x,32LL) + jule::Str("f", 1);
}



inline jule::Str _1115eb810_get_f64_model(jule::Ref<_1118cee40_Const> _19518_c) {
	jule::F64 _1969_x = _19518_c->_method_as_f64();
	jule::Str _1999_f = _1115eb810_gen_float_special_cases(_1969_x);
	if (_1999_f != jule::Str("", 0)) {
		return _1999_f;
	}
	{
		if (!((_1969_x == jule::MAX_F64))) { goto _case_end_4615802528; }
		_case_begin_4615802528:;
		{
			return jule::Str("jule::MAX_F64", 13);
		}
		goto _match_end_4615801296;
		_case_end_4615802528:;
		if (!((_1969_x == jule::MIN_F64))) { goto _case_end_4615802640; }
		_case_begin_4615802640:;
		{
			return jule::Str("jule::MIN_F64", 13);
		}
		goto _match_end_4615801296;
		_case_end_4615802640:;
		_match_end_4615801296:;
	}
	return _1115eb810_ftoa(_1969_x,64LL);
}



inline jule::Str _1115eb810_get_float_model(jule::Ref<_1112d7f10_Data> _21224_d) {
	{
		if (!((_21224_d->_field_kind->_method_prim()->_method_is_f32()))) { goto _case_end_4615806512; }
		_case_begin_4615806512:;
		{
			return _1115eb810_get_f32_model(_21224_d->_field_constant);
		}
		goto _match_end_4615804944;
		_case_end_4615806512:;
		_case_begin_4615805168:;
		{
			return _1115eb810_get_f64_model(_21224_d->_field_constant);
		}
		goto _match_end_4615804944;
		_case_end_4615805168:;
		_match_end_4615804944:;
	}
}



inline jule::Str _1115eb810_i64toa(jule::I64 _21911_x) {
	{
		if (!((_21911_x == jule::MAX_I64))) { goto _case_end_4615807984; }
		_case_begin_4615807984:;
		{
			return jule::Str("jule::MAX_I64", 13);
		}
		goto _match_end_4615805296;
		_case_end_4615807984:;
		if (!((_21911_x == jule::MIN_I64))) { goto _case_end_4615808096; }
		_case_begin_4615808096:;
		{
			return jule::Str("jule::MIN_I64", 13);
		}
		goto _match_end_4615805296;
		_case_end_4615808096:;
		_match_end_4615805296:;
	}
	jule::Str _2259_fmt = _110054e40_fmt_int(_21911_x,10LL);
	if (_127eb0d70_is_64bit(jule::Str("arm64", 5))) {
		return _2259_fmt + jule::Str("LL", 2);
	}
	return _2259_fmt + jule::Str("L", 1);
}



inline jule::Str _1115eb810_get_i64_model(jule::Ref<_1118cee40_Const> _23218_c) {
	return _1115eb810_i64toa(static_cast<jule::I64>(_23218_c->_method_read_i64()));
}



inline jule::Str _1115eb810_u64toa(jule::U64 _23611_x) {
	{
		if (!((_23611_x == jule::MAX_U64))) { goto _case_end_4615816016; }
		_case_begin_4615816016:;
		{
			return jule::Str("jule::MAX_U64", 13);
		}
		goto _match_end_4615815888;
		_case_end_4615816016:;
		_match_end_4615815888:;
	}
	jule::Str _2429_fmt = _110054e40_fmt_uint(_23611_x,10LL);
	if (_127eb0d70_is_64bit(jule::Str("arm64", 5))) {
		return _2429_fmt + jule::Str("LLU", 3);
	}
	return _2429_fmt + jule::Str("LU", 2);
}



inline jule::Str _1115eb810_get_u64_model(jule::Ref<_1118cee40_Const> _24918_c) {
	return _1115eb810_u64toa(static_cast<jule::U64>(_24918_c->_method_read_u64()));
}



inline jule::Str _1115eb810_gen_const_expr(jule::Ref<_1112d7f10_Data> _25323_d) {
	{
		if (!((_25323_d->_field_constant->_method_is_str()))) { goto _case_end_4615822640; }
		_case_begin_4615822640:;
		{
			return _1115eb810_get_str_model(_25323_d->_field_constant);
		}
		goto _match_end_4615822128;
		_case_end_4615822640:;
		if (!((_25323_d->_field_constant->_method_is_bool()))) { goto _case_end_4615822752; }
		_case_begin_4615822752:;
		{
			return _1115eb810_get_bool_model(_25323_d->_field_constant);
		}
		goto _match_end_4615822128;
		_case_end_4615822752:;
		if (!((_25323_d->_field_constant->_method_is_f64()))) { goto _case_end_4615823920; }
		_case_begin_4615823920:;
		{
			return _1115eb810_get_float_model(_25323_d);
		}
		goto _match_end_4615822128;
		_case_end_4615823920:;
		if (!((_25323_d->_field_constant->_method_is_i64()))) { goto _case_end_4615824032; }
		_case_begin_4615824032:;
		{
			return _1115eb810_get_i64_model(_25323_d->_field_constant);
		}
		goto _match_end_4615822128;
		_case_end_4615824032:;
		if (!((_25323_d->_field_constant->_method_is_u64()))) { goto _case_end_4615824144; }
		_case_begin_4615824144:;
		{
			return _1115eb810_get_u64_model(_25323_d->_field_constant);
		}
		goto _match_end_4615822128;
		_case_end_4615824144:;
		if (!((_25323_d->_field_constant->_method_is_nil()))) { goto _case_end_4615824256; }
		_case_begin_4615824256:;
		{
			return _1115eb810_get_nil_model();
		}
		goto _match_end_4615822128;
		_case_end_4615824256:;
		_case_begin_4615822224:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4615822128;
		_case_end_4615822224:;
		_match_end_4615822128:;
	}
}



inline jule::Str _1115eb810_gen_const_expr_model(jule::Ref<_1118cee40_Const> _26525_m) {
	{
		if (!((_26525_m->_method_is_str()))) { goto _case_end_4615850192; }
		_case_begin_4615850192:;
		{
			return _1115eb810_get_str_model(_26525_m);
		}
		goto _match_end_4615828704;
		_case_end_4615850192:;
		if (!((_26525_m->_method_is_bool()))) { goto _case_end_4615850304; }
		_case_begin_4615850304:;
		{
			return _1115eb810_get_bool_model(_26525_m);
		}
		goto _match_end_4615828704;
		_case_end_4615850304:;
		if (!((_26525_m->_method_is_f64()))) { goto _case_end_4615851424; }
		_case_begin_4615851424:;
		{
			return _1115eb810_get_f64_model(_26525_m);
		}
		goto _match_end_4615828704;
		_case_end_4615851424:;
		if (!((_26525_m->_method_is_i64()))) { goto _case_end_4615851536; }
		_case_begin_4615851536:;
		{
			return _1115eb810_get_i64_model(_26525_m);
		}
		goto _match_end_4615828704;
		_case_end_4615851536:;
		if (!((_26525_m->_method_is_u64()))) { goto _case_end_4615851648; }
		_case_begin_4615851648:;
		{
			return _1115eb810_get_u64_model(_26525_m);
		}
		goto _match_end_4615828704;
		_case_end_4615851648:;
		if (!((_26525_m->_method_is_nil()))) { goto _case_end_4615851760; }
		_case_begin_4615851760:;
		{
			return _1115eb810_get_nil_model();
		}
		goto _match_end_4615828704;
		_case_end_4615851760:;
		_case_begin_4615848880:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4615828704;
		_case_end_4615848880:;
		_match_end_4615828704:;
	}
}



inline jule::Str _1115eb810_gen_binop_expr_model(jule::Ref<_110e4e8a0_BinopExprModel> _27729_m) {
	{
		auto _match_expr{ _27729_m->_field_op };
		if (!((jule::Str("/", 1)) == _match_expr)) { goto _case_end_4615862304; }
		_case_begin_4615862304:;
		{
			jule::Str _28017_obj = jule::Str("jule::div(", 10);
			_28017_obj+=_1115eb810_gen_expr(_27729_m->_field_left);
			_28017_obj+=jule::Str(",", 1);
			_28017_obj+=_1115eb810_gen_expr(_27729_m->_field_right);
			_28017_obj+=jule::Str(")", 1);
			return _28017_obj;
		}
		goto _match_end_4615857584;
		_case_end_4615862304:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4615861872; }
		_case_begin_4615861872:;
		{
			jule::Str _28817_obj = jule::Str("jule::mod(", 10);
			_28817_obj+=_1115eb810_gen_expr(_27729_m->_field_left);
			_28817_obj+=jule::Str(",", 1);
			_28817_obj+=_1115eb810_gen_expr(_27729_m->_field_right);
			_28817_obj+=jule::Str(")", 1);
			return _28817_obj;
		}
		goto _match_end_4615857584;
		_case_end_4615861872:;
		_case_begin_4615857824:;
		{
			jule::Str _29617_obj = jule::Str("(", 1);
			_29617_obj+=_1115eb810_gen_expr_model(_27729_m->_field_left);
			_29617_obj+=jule::Str(" ", 1);
			_29617_obj+=_27729_m->_field_op;
			_29617_obj+=jule::Str(" ", 1);
			_29617_obj+=_1115eb810_gen_expr_model(_27729_m->_field_right);
			_29617_obj+=jule::Str(")", 1);
			return _29617_obj;
		}
		goto _match_end_4615857584;
		_case_end_4615857824:;
		_match_end_4615857584:;
	}
}



inline jule::Str _1115eb810_gen_var_expr_model(jule::Ref<_110e92c80_Var> _30727_m) {
	if (_30727_m->_field_cpp_linked) {
		jule::Ref<_11054f670_Directive> _30913_d = _111b757c0_find_directive(_30727_m->_field_directives,jule::Str("namespace", 9));
		if (jule::real(_30913_d)) {
			return (_1115eb810_concat_all_parts(_30913_d->_field_args) + jule::Str("::", 2)) + _111b4b010_var_out_ident(_30727_m);
		}
	}
	return _111b4b010_var_out_ident(_30727_m);
}



inline jule::Str _1115eb810_gen_struct_expr_model(jule::Ref<_1109372e0_Struct> _31726_m) {
	return _111b757c0_gen_struct_kind(_31726_m);
}



inline jule::Str _1115eb810_gen_struct_ins_expr_model(jule::Ref<_1109372e0_StructIns> _32134_m) {
	return _111b757c0_gen_struct_kind_ins(_32134_m);
}



inline jule::Str _1115eb810_gen_unary_expr_model(jule::Ref<_110e4e8a0_UnaryExprModel> _32529_m) {
	{
		auto _match_expr{ _32529_m->_field_op };
		if (!((jule::Str("^", 1)) == _match_expr)) { goto _case_end_4615879792; }
		_case_begin_4615879792:;
		{
			return (jule::Str("(~(", 3) + _1115eb810_gen_expr(_32529_m->_field_expr)) + jule::Str("))", 2);
		}
		goto _match_end_4615872576;
		_case_end_4615879792:;
		_case_begin_4615876784:;
		{
			return (((jule::Str("(", 1) + _32529_m->_field_op) + jule::Str("(", 1)) + _1115eb810_gen_expr(_32529_m->_field_expr)) + jule::Str("))", 2);
		}
		goto _match_end_4615872576;
		_case_end_4615876784:;
		_match_end_4615872576:;
	}
}



inline jule::Str _1115eb810_gen_get_ref_ptr_expr_model(jule::Ref<_110e4e8a0_GetRefPtrExprModel> _33235_m) {
	return (jule::Str("(", 1) + _1115eb810_gen_expr(_33235_m->_field_expr)) + jule::Str(").alloc", 7);
}



inline jule::Str _1115eb810_gen_cpp_struct_lit_expr_model(jule::Ref<_110e4e8a0_StructLitExprModel> _33638_m) {
	jule::Str _33713_obj = jule::Str("(", 1) + _111b757c0_gen_struct_kind_ins(_33638_m->_field_strct);
	_33713_obj+=jule::Str("){", 2);
	if (_33638_m->_field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto __julec_range_expr = _33638_m->_field_strct->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1109372e0_FieldIns> _1115eb810_f = *__julec_range_begin;
				_iter_begin_4615886368:;
				{
					if (_33638_m->_field_strct->_field_decl->_field_cpp_linked) {
						{
							auto __julec_range_expr = _33638_m->_field_args;
							if (__julec_range_expr.begin() != __julec_range_expr.end()) {
								auto __julec_range_begin = __julec_range_expr.begin();
								const auto __julec_range_end = __julec_range_expr.end();
								jule::Ref<_110e4e8a0_StructArgExprModel> _1115eb810_arg = *__julec_range_begin;
								_iter_begin_4615889184:;
								{
									if (_1115eb810_arg->_field_field == _1115eb810_f) {
										_33713_obj+=jule::Str(".", 1);
										_33713_obj+=_111b4b010_field_out_ident(_1115eb810_f->_field_decl);
										_33713_obj+=jule::Str("=", 1);
										_33713_obj+=_1115eb810_gen_expr(_1115eb810_arg->_field_expr) + jule::Str(",", 1);
										goto _iter_next_4615886368;
									}
								}
								_iter_next_4615889184:;
								++__julec_range_begin;
								if (__julec_range_begin != __julec_range_end) { _1115eb810_arg = *__julec_range_begin; goto _iter_begin_4615889184; }
								_iter_end_4615889184:;
							}
						}
						goto _iter_next_4615886368;
					}
					_33713_obj+=_111b4b010_field_out_ident(_1115eb810_f->_field_decl) + jule::Str(": ", 2);
					{
						auto __julec_range_expr = _33638_m->_field_args;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Ref<_110e4e8a0_StructArgExprModel> _1115eb810_arg = *__julec_range_begin;
							_iter_begin_4615888032:;
							{
								if (_1115eb810_arg->_field_field == _1115eb810_f) {
									_33713_obj+=_1115eb810_gen_expr(_1115eb810_arg->_field_expr) + jule::Str(",", 1);
									goto _iter_next_4615886368;
								}
							}
							_iter_next_4615888032:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _1115eb810_arg = *__julec_range_begin; goto _iter_begin_4615888032; }
							_iter_end_4615888032:;
						}
					}
					_33713_obj+=_1115eb810_get_init_expr(_1115eb810_f->_field_kind) + jule::Str(",", 1);
				}
				_iter_next_4615886368:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1115eb810_f = *__julec_range_begin; goto _iter_begin_4615886368; }
				_iter_end_4615886368:;
			}
		}
		_33713_obj=_33713_obj.slice(0LL,static_cast<jule::Int>(_33713_obj.len() - 1LL));
	}
	_33713_obj+=jule::Str("}", 1);
	return _33713_obj;
}



inline jule::Str _1115eb810_gen_struct_lit_expr_model(jule::Ref<_110e4e8a0_StructLitExprModel> _37034_m) {
	if (_37034_m->_field_strct->_field_decl->_field_cpp_linked) {
		return _1115eb810_gen_cpp_struct_lit_expr_model(_37034_m);
	}
	jule::Str _37513_obj = _111b4b010_struct_ins_out_ident(_37034_m->_field_strct);
	_37513_obj+=jule::Str("(", 1);
	if (_37034_m->_field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto __julec_range_expr = _37034_m->_field_strct->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1109372e0_FieldIns> _1115eb810_f = *__julec_range_begin;
				_iter_begin_4615906576:;
				{
					{
						auto __julec_range_expr = _37034_m->_field_args;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Ref<_110e4e8a0_StructArgExprModel> _1115eb810_arg = *__julec_range_begin;
							_iter_begin_4615908464:;
							{
								if (_1115eb810_arg->_field_field == _1115eb810_f) {
									_37513_obj+=_1115eb810_gen_expr(_1115eb810_arg->_field_expr) + jule::Str(",", 1);
									goto _iter_next_4615906576;
								}
							}
							_iter_next_4615908464:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _1115eb810_arg = *__julec_range_begin; goto _iter_begin_4615908464; }
							_iter_end_4615908464:;
						}
					}
					_37513_obj+=_1115eb810_get_init_expr(_1115eb810_f->_field_kind) + jule::Str(",", 1);
				}
				_iter_next_4615906576:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1115eb810_f = *__julec_range_begin; goto _iter_begin_4615906576; }
				_iter_end_4615906576:;
			}
		}
		_37513_obj=_37513_obj.slice(0LL,static_cast<jule::Int>(_37513_obj.len() - 1LL));
	}
	_37513_obj+=jule::Str(")", 1);
	return _37513_obj;
}



inline jule::Str _1115eb810_gen_alloc_struct_lit_expr_model(jule::Ref<_110e4e8a0_AllocStructLitExprModel> _39440_m) {
	jule::Str _39513_obj = jule::Str("jule::new_struct<", 17);
	_39513_obj+=_111b4b010_struct_out_ident(_39440_m->_field_lit->_field_strct->_field_decl);
	_39513_obj+=jule::Str(">(new( std::nothrow ) ", 22);
	_39513_obj+=_1115eb810_gen_struct_lit_expr_model(_39440_m->_field_lit);
	_39513_obj+=jule::Str(")", 1);
	return _39513_obj;
}



inline jule::Str _1115eb810_gen_casting_expr_model(jule::Ref<_110e4e8a0_CastingExprModel> _40331_m) {
	jule::Str _40413_obj = jule::Str("", 0);
	{
		if (!((jule::real(_40331_m->_field_kind->_method_prim()) && _40331_m->_field_kind->_method_prim()->_method_is_any()))) { goto _case_end_4615921296; }
		_case_begin_4615921296:;
		{
			_40413_obj+=_111b757c0_gen_type_kind(_40331_m->_field_kind);
			_40413_obj+=jule::Str("(", 1);
			_40413_obj+=_1115eb810_gen_expr_model(_40331_m->_field_expr);
			_40413_obj+=jule::Str(")", 1);
		}
		goto _match_end_4615920288;
		_case_end_4615921296:;
		if (!((jule::real(_40331_m->_field_expr_kind->_method_ptr())) || (jule::real(_40331_m->_field_kind->_method_ptr())))) { goto _case_end_4615923776; }
		_case_begin_4615923776:;
		{
			_40413_obj+=jule::Str("((", 2);
			_40413_obj+=_111b757c0_gen_type_kind(_40331_m->_field_kind);
			_40413_obj+=jule::Str(")(", 2);
			_40413_obj+=_1115eb810_gen_expr(_40331_m->_field_expr);
			_40413_obj+=jule::Str("))", 2);
		}
		goto _match_end_4615920288;
		_case_end_4615923776:;
		if (!((jule::real(_40331_m->_field_expr_kind->_method_trt())) || (jule::real(_40331_m->_field_expr_kind->_method_prim()) && _40331_m->_field_expr_kind->_method_prim()->_method_is_any()))) { goto _case_end_4615924096; }
		_case_begin_4615924096:;
		{
			_40413_obj+=_1115eb810_gen_expr_model(_40331_m->_field_expr);
			_40413_obj+=_1115eb810_get_accessor(_40331_m->_field_expr_kind);
			_40413_obj+=jule::Str("operator ", 9);
			_40413_obj+=_111b757c0_gen_type_kind(_40331_m->_field_kind);
			_40413_obj+=jule::Str("()", 2);
		}
		goto _match_end_4615920288;
		_case_end_4615924096:;
		_case_begin_4615920480:;
		{
			_40413_obj+=jule::Str("static_cast<", 12);
			_40413_obj+=_111b757c0_gen_type_kind(_40331_m->_field_kind);
			_40413_obj+=jule::Str(">(", 2);
			_40413_obj+=_1115eb810_gen_expr(_40331_m->_field_expr);
			_40413_obj+=jule::Str(")", 1);
		}
		goto _match_end_4615920288;
		_case_end_4615920480:;
		_match_end_4615920288:;
	}
	return _40413_obj;
}



inline jule::Str _1115eb810_gen_arg_expr_models(jule::Slice<jule::Any> _43828_models) {
	if (_43828_models.len() == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _44313_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _43828_models;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1115eb810_m = *__julec_range_begin;
			_iter_begin_4615938128:;
			{
				_44313_obj+=_1115eb810_gen_expr(_1115eb810_m) + jule::Str(",", 1);
			}
			_iter_next_4615938128:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1115eb810_m = *__julec_range_begin; goto _iter_begin_4615938128; }
			_iter_end_4615938128:;
		}
	}
	_44313_obj=_44313_obj.slice(0LL,static_cast<jule::Int>(_44313_obj.len() - 1LL));
	return _44313_obj;
}



inline jule::Str _1115eb810_gen_fn_call_expr_model(jule::Ref<_110e4e8a0_FnCallExprModel> _45131_m) {
	jule::Str _45213_obj = _1115eb810_gen_expr_model(_45131_m->_field_expr);
	if ((!(_45131_m->_field_func->_method_is_builtin()))) {
		if (_45131_m->_field_func->_field_decl->_field_cpp_linked && (_45131_m->_field_func->_field_generics.len() > 0LL)) {
			if ((!(_111b757c0_has_directive(_45131_m->_field_func->_field_decl->_field_directives,jule::Str("cdef", 4))))) {
				_45213_obj+=jule::Str("<", 1);
				{
					auto __julec_range_expr = _45131_m->_field_func->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1116aff70_TypeKind> _1115eb810_g = *__julec_range_begin;
						_iter_begin_4615946848:;
						{
							_45213_obj+=_111b757c0_gen_type_kind(_1115eb810_g) + jule::Str(",", 1);
						}
						_iter_next_4615946848:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _1115eb810_g = *__julec_range_begin; goto _iter_begin_4615946848; }
						_iter_end_4615946848:;
					}
				}
				_45213_obj=_45213_obj.slice(0LL,static_cast<jule::Int>(_45213_obj.len() - 1LL));
				_45213_obj+=jule::Str(">", 1);
			}
		}
	}
	_45213_obj+=jule::Str("(", 1);
	_45213_obj+=_1115eb810_gen_arg_expr_models(_45131_m->_field_args);
	_45213_obj+=jule::Str(")", 1);
	if (_45131_m->_field_is_co) {
		_45213_obj=(jule::Str("__JULE_CO(", 10) + _45213_obj) + jule::Str(")", 1);
	}
	return _45213_obj;
}



inline jule::Str _1115eb810_gen_slice_expr_model(jule::Ref<_110e4e8a0_SliceExprModel> _47629_m) {
	jule::Str _47713_obj = _111b757c0_as_slice_kind(_47629_m->_field_elem_kind);
	_47713_obj+=jule::Str("({", 2);
	_47713_obj+=_1115eb810_gen_arg_expr_models(_47629_m->_field_elems);
	_47713_obj+=jule::Str("})", 2);
	return _47713_obj;
}



inline jule::Str _1115eb810_gen_indexing_expr_model(jule::Ref<_110e4e8a0_IndexigExprModel> _48432_m) {
	jule::Str _48513_obj = _1115eb810_gen_expr_model(_48432_m->_field_expr);
	_48513_obj+=jule::Str("[", 1);
	_48513_obj+=_1115eb810_gen_expr(_48432_m->_field_index);
	_48513_obj+=jule::Str("]", 1);
	return _48513_obj;
}



inline jule::Str _1115eb810_gen_anon_fn_expr_model(jule::Ref<_110e4e8a0_AnonFnExprModel> _49231_m) {
	jule::Str _49313_obj = _111b757c0_gen_fn_kind(_49231_m->_field_func);
	_49313_obj+=jule::Str("([=]", 4);
	_49313_obj+=_111b4cab0_gen_params_ins(_49231_m->_field_func->_field_params);
	_49313_obj+=jule::Str(" mutable -> ", 12);
	_49313_obj+=_111b4cab0_gen_fn_ins_result(_49231_m->_field_func);
	_49313_obj+=jule::Str(" ", 1);
	_49313_obj+=_1114d55f0_gen_fn_scope(_49231_m->_field_func);
	_49313_obj+=jule::Str(")", 1);
	return _49313_obj;
}



inline jule::Str _1115eb810_gen_map_expr_model(jule::Ref<_110e4e8a0_MapExprModel> _50927_m) {
	jule::Str _51013_obj = _111b4b010_as_jt(jule::Str("map", 3));
	_51013_obj+=jule::Str("<", 1);
	_51013_obj+=_111b757c0_gen_type_kind(_50927_m->_field_key_kind);
	_51013_obj+=jule::Str(",", 1);
	_51013_obj+=_111b757c0_gen_type_kind(_50927_m->_field_val_kind);
	_51013_obj+=jule::Str(">({", 3);
	if (_50927_m->_field_entries.len() > 0LL) {
		{
			auto __julec_range_expr = _50927_m->_field_entries;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_110e4e8a0_KeyValPairExprModel> _1115eb810_pair = *__julec_range_begin;
				_iter_begin_4615970928:;
				{
					jule::Str _51821_pair_obj = jule::Str("{", 1);
					_51821_pair_obj+=_1115eb810_gen_expr(_1115eb810_pair->_field_key);
					_51821_pair_obj+=jule::Str(",", 1);
					_51821_pair_obj+=_1115eb810_gen_expr(_1115eb810_pair->_field_val);
					_51821_pair_obj+=jule::Str("}", 1);
					_51013_obj+=_51821_pair_obj;
					_51013_obj+=jule::Str(",", 1);
				}
				_iter_next_4615970928:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1115eb810_pair = *__julec_range_begin; goto _iter_begin_4615970928; }
				_iter_end_4615970928:;
			}
		}
		_51013_obj=_51013_obj.slice(0LL,static_cast<jule::Int>(_51013_obj.len() - 1LL));
	}
	_51013_obj+=jule::Str("})", 2);
	return _51013_obj;
}



inline jule::Str _1115eb810_gen_slicing_expr_model(jule::Ref<_110e4e8a0_SlicingExprModel> _53231_m) {
	jule::Str _53313_obj = _1115eb810_gen_expr_model(_53231_m->_field_expr);
	_53313_obj+=jule::Str(".slice(", 7);
	_53313_obj+=_1115eb810_gen_expr(_53231_m->_field_left);
	if (_53231_m->_field_right != nullptr) {
		_53313_obj+=jule::Str(",", 1);
		_53313_obj+=_1115eb810_gen_expr(_53231_m->_field_right);
	}
	_53313_obj+=jule::Str(")", 1);
	return _53313_obj;
}



inline jule::Str _1115eb810_gen_trait_sub_ident_expr_model(jule::Ref<_110e4e8a0_TraitSubIdentExprModel> _54439_m) {
	jule::Str _54513_obj = _1115eb810_gen_expr_model(_54439_m->_field_expr);
	_54513_obj+=jule::Str(".get()._method_", 15);
	_54513_obj+=_54439_m->_field_ident;
	return _54513_obj;
}



inline jule::Str _1115eb810_gen_struct_sub_ident_expr_model(jule::Ref<_110e4e8a0_StructSubIdentExprModel> _55140_m) {
	jule::Str _55213_obj = _1115eb810_gen_expr_model(_55140_m->_field_expr);
	_55213_obj+=_1115eb810_get_accessor(_55140_m->_field_expr_kind);
	if (jule::real(_55140_m->_field_field)) {
		_55213_obj+=_111b4b010_field_out_ident(_55140_m->_field_field->_field_decl);
	} else {
		_55213_obj+=_111b4b010_fn_ins_out_ident(_55140_m->_field_method);
	}
	return _55213_obj;
}



inline jule::Str _1115eb810_gen_common_ident_expr_model(jule::Ref<_110e4e8a0_CommonIdentExprModel> _56232_m) {
	return _56232_m->_field_ident;
}



inline jule::Str _1115eb810_gen_common_sub_ident_expr_model(jule::Ref<_110e4e8a0_CommonSubIdentExprModel> _56640_m) {
	jule::Str _56713_obj = _1115eb810_gen_expr_model(_56640_m->_field_expr);
	_56713_obj+=_1115eb810_get_accessor(_56640_m->_field_expr_kind);
	_56713_obj+=_56640_m->_field_ident;
	return _56713_obj;
}



inline jule::Str _1115eb810_gen_array_expr_model(jule::Ref<_110e4e8a0_ArrayExprModel> _57329_m) {
	jule::Str _57413_obj = _111b757c0_gen_array_kind(_57329_m->_field_kind);
	_57413_obj+=jule::Str("({", 2);
	_57413_obj+=_1115eb810_gen_arg_expr_models(_57329_m->_field_elems);
	_57413_obj+=jule::Str("})", 2);
	return _57413_obj;
}



inline jule::Str _1115eb810_gen_fn_ins_expr_model(jule::Ref<_11072eb20_FnIns> _58130_m) {
	if (jule::real(_58130_m->_field_decl) && _58130_m->_field_decl->_field_cpp_linked) {
		jule::Ref<_11054f670_Directive> _58313_d = _111b757c0_find_directive(_58130_m->_field_decl->_field_directives,jule::Str("namespace", 9));
		if (jule::real(_58313_d)) {
			return (_1115eb810_concat_all_parts(_58313_d->_field_args) + jule::Str("::", 2)) + _111b4b010_fn_ins_out_ident(_58130_m);
		}
	}
	return _111b4b010_fn_ins_out_ident(_58130_m);
}



inline jule::Str _1115eb810_gen_tuple_expr_model(jule::Ref<_110e4e8a0_TupleExprModel> _59129_m) {
	jule::Str _59213_obj = jule::Str("std::make_tuple(", 16);
	{
		auto __julec_range_expr = _59129_m->_field_datas;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1112d7f10_Data> _1115eb810_d = *__julec_range_begin;
			_iter_begin_4616004384:;
			{
				_59213_obj+=_1115eb810_gen_expr(_1115eb810_d->_field_model) + jule::Str(",", 1);
			}
			_iter_next_4616004384:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1115eb810_d = *__julec_range_begin; goto _iter_begin_4616004384; }
			_iter_end_4616004384:;
		}
	}
	_59213_obj=_59213_obj.slice(0LL,static_cast<jule::Int>(_59213_obj.len() - 1LL));
	_59213_obj+=jule::Str(")", 1);
	return _59213_obj;
}



inline jule::Str _1115eb810_gen_builtin_new_call_expr_model(jule::Ref<_110e4e8a0_BuiltinNewCallExprModel> _60140_m) {
	jule::Str _60213_obj = jule::Str("jule::new_ref<", 14);
	_60213_obj+=_111b757c0_gen_type_kind(_60140_m->_field_kind);
	_60213_obj+=jule::Str(">(", 2);
	if (_60140_m->_field_init != nullptr) {
		_60213_obj+=_1115eb810_gen_expr(_60140_m->_field_init);
	}
	_60213_obj+=jule::Str(")", 1);
	return _60213_obj;
}



inline jule::Str _1115eb810_gen_builtin_out_call_expr_model(jule::Ref<_110e4e8a0_BuiltinOutCallExprModel> _61240_m) {
	jule::Str _61313_obj = jule::Str("jule::out(", 10);
	_61313_obj+=_1115eb810_gen_expr(_61240_m->_field_expr);
	_61313_obj+=jule::Str(")", 1);
	return _61313_obj;
}



inline jule::Str _1115eb810_gen_builtin_outln_call_expr_model(jule::Ref<_110e4e8a0_BuiltinOutlnCallExprModel> _61942_m) {
	jule::Str _62013_obj = jule::Str("jule::outln(", 12);
	_62013_obj+=_1115eb810_gen_expr(_61942_m->_field_expr);
	_62013_obj+=jule::Str(")", 1);
	return _62013_obj;
}



inline jule::Str _1115eb810_gen_builtin_real_call_expr_model(jule::Ref<_110e4e8a0_BuiltinRealCallExprModel> _62641_m) {
	jule::Str _62713_obj = jule::Str("jule::real(", 11);
	_62713_obj+=_1115eb810_gen_expr(_62641_m->_field_expr);
	_62713_obj+=jule::Str(")", 1);
	return _62713_obj;
}



inline jule::Str _1115eb810_gen_builtin_drop_call_expr_model(jule::Ref<_110e4e8a0_BuiltinDropCallExprModel> _63341_m) {
	jule::Str _63413_obj = jule::Str("jule::drop(", 11);
	_63413_obj+=_1115eb810_gen_expr(_63341_m->_field_expr);
	_63413_obj+=jule::Str(")", 1);
	return _63413_obj;
}



inline jule::Str _1115eb810_gen_builtin_panic_call_expr_model(jule::Ref<_110e4e8a0_BuiltinPanicCallExprModel> _64042_m) {
	jule::Str _64113_obj = jule::Str("jule::panic(", 12);
	_64113_obj+=_1115eb810_gen_expr(_64042_m->_field_expr);
	_64113_obj+=jule::Str(")", 1);
	return _64113_obj;
}



inline jule::Str _1115eb810_gen_builtin_make_call_expr_model(jule::Ref<_110e4e8a0_BuiltinMakeCallExprModel> _64741_m) {
	jule::Str _64813_obj = jule::Str("", 0);
	if (_64741_m->_field_len != nullptr) {
		_64813_obj+=_1115eb810_gen_expr(_64741_m->_field_len);
	} else {
		_64813_obj+=jule::Str("0", 1);
	}
	if (_64741_m->_field_cap != nullptr) {
		_64813_obj+=jule::Str(",", 1) + _1115eb810_gen_expr(_64741_m->_field_cap);
	}
	if (jule::real(_64741_m->_field_kind->_method_slc()->_field_elem->_method_enm())) {
		_64813_obj+=jule::Str(",", 1);
		_64813_obj+=_1115eb810_get_init_expr(_64741_m->_field_kind->_method_slc()->_field_elem);
		if (_64741_m->_field_cap != nullptr) {
			_64813_obj=(_111b757c0_gen_type_kind(_64741_m->_field_kind) + jule::Str("::alloc(", 8)) + _64813_obj;
		} else {
			_64813_obj=(_111b757c0_gen_type_kind(_64741_m->_field_kind) + jule::Str("::alloc_def(", 12)) + _64813_obj;
		}
	} else {
		_64813_obj=(_111b757c0_gen_type_kind(_64741_m->_field_kind) + jule::Str("::alloc(", 8)) + _64813_obj;
	}
	_64813_obj+=jule::Str(")", 1);
	return _64813_obj;
}



inline jule::Str _1115eb810_gen_builtin_append_call_expr_model_assign_opt(jule::Bool _6755_same_dest,jule::Str& _6766_dest_expr,jule::Ref<_1116aff70_TypeKind>& _67710_dest_kind,jule::Ref<_110e4e8a0_SliceExprModel>& _67810_s,jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel>& _67910_m) {
	jule::Str _68013_obj = jule::Str("", 0);
	if ((!(_6755_same_dest))) {
		_68013_obj+=(((((_6766_dest_expr + jule::Str(" = jule::alloc_for_append(", 26)) + _1115eb810_gen_expr_model(_67910_m->_field_dest)) + jule::Str(",", 1)) + _110054e40_itoa(static_cast<jule::I64>(_67810_s->_field_elems.len()))) + jule::Str(")", 1)) + jule::Str(";", 1);
	}
	{
		auto __julec_range_expr = _67810_s->_field_elems;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1115eb810_e = *__julec_range_begin;
			_iter_begin_4616042720:;
			{
				_68013_obj+=_6766_dest_expr;
				_68013_obj+=_1115eb810_get_accessor(_67710_dest_kind);
				_68013_obj+=jule::Str("push(", 5);
				_68013_obj+=_1115eb810_gen_expr_model(_1115eb810_e);
				_68013_obj+=jule::Str(");", 2);
			}
			_iter_next_4616042720:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1115eb810_e = *__julec_range_begin; goto _iter_begin_4616042720; }
			_iter_end_4616042720:;
		}
	}
	return _68013_obj;
}



inline std::tuple<jule::Str,jule::Bool> _1115eb810_gen_builtin_append_call_expr_model_assign(jule::Any _69450_dest,jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel> _69471_m) {
	jule::Bool _694110_optimized = jule::Bool();
	{
		auto _match_expr{ _69471_m->_field_elements };
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_SliceExprModel>>())) { goto _case_end_4616051296; }
		_case_begin_4616051296:;
		{
			{
				auto _match_expr{ _69450_dest };
				if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4616052976; }
				_case_begin_4616052976:;
				{
					jule::Ref<_110e4e8a0_SliceExprModel> _69921_s = _69471_m->_field_elements.operator jule::Ref<_110e4e8a0_SliceExprModel>();
					jule::Str _70017_dest_expr = _1115eb810_gen_expr_model(_69450_dest);
					jule::Ref<_110e92c80_Var> _70121_dest_var = _69450_dest.operator jule::Ref<_110e92c80_Var>();
					jule::Bool _70217_same_dest = _111b757c0_any_equals_0(_70121_dest_var,_69471_m->_field_dest);
					_694110_optimized = true;
					return std::make_tuple(_1115eb810_gen_builtin_append_call_expr_model_assign_opt(_70217_same_dest,_70017_dest_expr,_70121_dest_var->_field_kind->_field_kind,_69921_s,_69471_m),_694110_optimized);
				}
				goto _match_end_4616051440;
				_case_end_4616052976:;
				if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_StructSubIdentExprModel>>())) { goto _case_end_4616053088; }
				_case_begin_4616053088:;
				{
					jule::Ref<_110e4e8a0_SliceExprModel> _70721_s = _69471_m->_field_elements.operator jule::Ref<_110e4e8a0_SliceExprModel>();
					jule::Str _70817_dest_expr = _1115eb810_gen_expr_model(_69450_dest);
					jule::Ref<_1109372e0_FieldIns> _70921_dest_field = _69450_dest.operator jule::Ref<_110e4e8a0_StructSubIdentExprModel>()->_field_field;
					jule::Bool _71017_same_dest = _111b757c0_any_equals_1(_70921_dest_field,_69471_m->_field_dest);
					_694110_optimized = true;
					return std::make_tuple(_1115eb810_gen_builtin_append_call_expr_model_assign_opt(_71017_same_dest,_70817_dest_expr,_70921_dest_field->_field_kind,_70721_s,_69471_m),_694110_optimized);
				}
				goto _match_end_4616051440;
				_case_end_4616053088:;
				_match_end_4616051440:;
			}
		}
		goto _match_end_4616050816;
		_case_end_4616051296:;
		_match_end_4616050816:;
	}
	_694110_optimized = false;
	return std::make_tuple(_1115eb810_gen_builtin_append_call_expr_model(_69471_m),_694110_optimized);
}



inline jule::Str _1115eb810_gen_builtin_append_call_expr_model(jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel> _71943_m) {
	return (((jule::Str("jule::append(", 13) + _1115eb810_gen_expr_model(_71943_m->_field_dest)) + jule::Str(",", 1)) + _1115eb810_gen_expr_model(_71943_m->_field_elements)) + jule::Str(")", 1);
}



inline jule::Str _1115eb810_gen_builtin_clone_call_expr_model(jule::Ref<_110e4e8a0_BuiltinCloneCallExprModel> _72342_m) {
	jule::Str _72413_obj = jule::Str("jule::clone(", 12);
	_72413_obj+=_1115eb810_gen_expr_model(_72342_m->_field_expr);
	_72413_obj+=jule::Str(")", 1);
	return _72413_obj;
}



inline jule::Str _1115eb810_gen_sizeof_expr_model(jule::Ref<_110e4e8a0_SizeofExprModel> _73030_m) {
	jule::Str _73113_obj = jule::Str("sizeof(", 7);
	_73113_obj+=_1115eb810_gen_expr(_73030_m->_field_expr);
	_73113_obj+=jule::Str(")", 1);
	return _73113_obj;
}



inline jule::Str _1115eb810_gen_alignof_expr_model(jule::Ref<_110e4e8a0_AlignofExprModel> _73731_m) {
	jule::Str _73813_obj = jule::Str("alignof(", 8);
	_73813_obj+=_1115eb810_gen_expr(_73731_m->_field_expr);
	_73813_obj+=jule::Str(")", 1);
	return _73813_obj;
}



inline jule::Str _1115eb810_gen_rune_expr_model(jule::Ref<_110e4e8a0_RuneExprModel> _74424_m) {
	if (_74424_m->_field_code <= 127LL) {
		jule::Str _74617_b = _1115eb810_sbtoa(static_cast<jule::U8>(_74424_m->_field_code));
		if (_74617_b == jule::Str("'", 1)) {
			_74617_b=jule::Str("\\'", 2);
		}
		return (jule::Str("'", 1) + _74617_b) + jule::Str("'", 1);
	}
	return _1115eb810_i64toa(static_cast<jule::I64>(_74424_m->_field_code));
}



inline jule::Str _1115eb810_gen_builtin_error_trait_sub_ident_expr_model(jule::Ref<_110e4e8a0_BuiltinErrorTraitSubIdentExprModel> _75553_m) {
	jule::Str _75613_obj = _1115eb810_gen_expr_model(_75553_m->_field_expr);
	_75613_obj+=jule::Str(".get().", 7);
	_75613_obj+=_75553_m->_field_ident;
	return _75613_obj;
}



inline jule::Str _1115eb810_gen_explicit_deref_expr_model(jule::Ref<_110e4e8a0_ExplicitDerefExprModel> _76238_m) {
	jule::Str _76313_obj = _1115eb810_gen_expr_model(_76238_m->_field_expr);
	_76313_obj+=jule::Str(".get()", 6);
	return _76313_obj;
}



inline jule::Str _1115eb810_gen_struct_static_ident_expr_model(jule::Ref<_110e4e8a0_StructStaticIdentExprModel> _76843_m) {
	jule::Str _76913_obj = _111b4b010_struct_ins_out_ident(_76843_m->_field_structure);
	_76913_obj+=jule::Str("::", 2);
	_76913_obj+=_111b4b010_fn_ins_out_ident(_76843_m->_field_method);
	return _76913_obj;
}



inline jule::Str _1115eb810_gen_expr_model(jule::Any _77523_m) {
	{
		auto _match_expr{ _77523_m };
		if (!(_match_expr.type_is<jule::Ref<_1116aff70_TypeKind>>())) { goto _case_end_4616106032; }
		_case_begin_4616106032:;
		{
			return _111b757c0_gen_type_kind(_77523_m.operator jule::Ref<_1116aff70_TypeKind>());
		}
		goto _match_end_4616104272;
		_case_end_4616106032:;
		if (!(_match_expr.type_is<jule::Ref<_1118cee40_Const>>())) { goto _case_end_4616106144; }
		_case_begin_4616106144:;
		{
			return _1115eb810_gen_const_expr_model(_77523_m.operator jule::Ref<_1118cee40_Const>());
		}
		goto _match_end_4616104272;
		_case_end_4616106144:;
		if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4616105632; }
		_case_begin_4616105632:;
		{
			return _1115eb810_gen_var_expr_model(_77523_m.operator jule::Ref<_110e92c80_Var>());
		}
		goto _match_end_4616104272;
		_case_end_4616105632:;
		if (!(_match_expr.type_is<jule::Ref<_110e3f160_Trait>>())) { goto _case_end_4616105744; }
		_case_begin_4616105744:;
		{
			return _111b4b010_trait_out_ident(_77523_m.operator jule::Ref<_110e3f160_Trait>());
		}
		goto _match_end_4616104272;
		_case_end_4616105744:;
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_Struct>>())) { goto _case_end_4616105856; }
		_case_begin_4616105856:;
		{
			return _1115eb810_gen_struct_expr_model(_77523_m.operator jule::Ref<_1109372e0_Struct>());
		}
		goto _match_end_4616104272;
		_case_end_4616105856:;
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_StructIns>>())) { goto _case_end_4616105152; }
		_case_begin_4616105152:;
		{
			return _1115eb810_gen_struct_ins_expr_model(_77523_m.operator jule::Ref<_1109372e0_StructIns>());
		}
		goto _match_end_4616104272;
		_case_end_4616105152:;
		if (!(_match_expr.type_is<jule::Ref<_11072eb20_FnIns>>())) { goto _case_end_4616105264; }
		_case_begin_4616105264:;
		{
			return _1115eb810_gen_fn_ins_expr_model(_77523_m.operator jule::Ref<_11072eb20_FnIns>());
		}
		goto _match_end_4616104272;
		_case_end_4616105264:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BinopExprModel>>())) { goto _case_end_4616105376; }
		_case_begin_4616105376:;
		{
			return _1115eb810_gen_binop_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_BinopExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616105376:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_UnaryExprModel>>())) { goto _case_end_4616106496; }
		_case_begin_4616106496:;
		{
			return _1115eb810_gen_unary_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_UnaryExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616106496:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_GetRefPtrExprModel>>())) { goto _case_end_4616106608; }
		_case_begin_4616106608:;
		{
			return _1115eb810_gen_get_ref_ptr_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_GetRefPtrExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616106608:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_StructLitExprModel>>())) { goto _case_end_4616106720; }
		_case_begin_4616106720:;
		{
			return _1115eb810_gen_struct_lit_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_StructLitExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616106720:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_AllocStructLitExprModel>>())) { goto _case_end_4616107568; }
		_case_begin_4616107568:;
		{
			return _1115eb810_gen_alloc_struct_lit_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_AllocStructLitExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616107568:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_CastingExprModel>>())) { goto _case_end_4616107680; }
		_case_begin_4616107680:;
		{
			return _1115eb810_gen_casting_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_CastingExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616107680:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_FnCallExprModel>>())) { goto _case_end_4616107792; }
		_case_begin_4616107792:;
		{
			return _1115eb810_gen_fn_call_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_FnCallExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616107792:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_SliceExprModel>>())) { goto _case_end_4616107904; }
		_case_begin_4616107904:;
		{
			return _1115eb810_gen_slice_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_SliceExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616107904:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_ArrayExprModel>>())) { goto _case_end_4616108016; }
		_case_begin_4616108016:;
		{
			return _1115eb810_gen_array_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_ArrayExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616108016:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_IndexigExprModel>>())) { goto _case_end_4616108128; }
		_case_begin_4616108128:;
		{
			return _1115eb810_gen_indexing_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_IndexigExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616108128:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_AnonFnExprModel>>())) { goto _case_end_4616108240; }
		_case_begin_4616108240:;
		{
			return _1115eb810_gen_anon_fn_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_AnonFnExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616108240:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_MapExprModel>>())) { goto _case_end_4616108352; }
		_case_begin_4616108352:;
		{
			return _1115eb810_gen_map_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_MapExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616108352:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_SlicingExprModel>>())) { goto _case_end_4616108464; }
		_case_begin_4616108464:;
		{
			return _1115eb810_gen_slicing_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_SlicingExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616108464:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_TraitSubIdentExprModel>>())) { goto _case_end_4616108576; }
		_case_begin_4616108576:;
		{
			return _1115eb810_gen_trait_sub_ident_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_TraitSubIdentExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616108576:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_StructSubIdentExprModel>>())) { goto _case_end_4616108688; }
		_case_begin_4616108688:;
		{
			return _1115eb810_gen_struct_sub_ident_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_StructSubIdentExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616108688:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_CommonIdentExprModel>>())) { goto _case_end_4616108800; }
		_case_begin_4616108800:;
		{
			return _1115eb810_gen_common_ident_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_CommonIdentExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616108800:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_CommonSubIdentExprModel>>())) { goto _case_end_4616108928; }
		_case_begin_4616108928:;
		{
			return _1115eb810_gen_common_sub_ident_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_CommonSubIdentExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616108928:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_TupleExprModel>>())) { goto _case_end_4616109056; }
		_case_begin_4616109056:;
		{
			return _1115eb810_gen_tuple_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_TupleExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616109056:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinOutCallExprModel>>())) { goto _case_end_4616109184; }
		_case_begin_4616109184:;
		{
			return _1115eb810_gen_builtin_out_call_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_BuiltinOutCallExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616109184:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinOutlnCallExprModel>>())) { goto _case_end_4616109312; }
		_case_begin_4616109312:;
		{
			return _1115eb810_gen_builtin_outln_call_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_BuiltinOutlnCallExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616109312:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinNewCallExprModel>>())) { goto _case_end_4616109440; }
		_case_begin_4616109440:;
		{
			return _1115eb810_gen_builtin_new_call_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_BuiltinNewCallExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616109440:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinRealCallExprModel>>())) { goto _case_end_4616109568; }
		_case_begin_4616109568:;
		{
			return _1115eb810_gen_builtin_real_call_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_BuiltinRealCallExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616109568:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinDropCallExprModel>>())) { goto _case_end_4616109696; }
		_case_begin_4616109696:;
		{
			return _1115eb810_gen_builtin_drop_call_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_BuiltinDropCallExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616109696:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinPanicCallExprModel>>())) { goto _case_end_4616109824; }
		_case_begin_4616109824:;
		{
			return _1115eb810_gen_builtin_panic_call_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_BuiltinPanicCallExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616109824:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinMakeCallExprModel>>())) { goto _case_end_4616109952; }
		_case_begin_4616109952:;
		{
			return _1115eb810_gen_builtin_make_call_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_BuiltinMakeCallExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616109952:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel>>())) { goto _case_end_4616110080; }
		_case_begin_4616110080:;
		{
			return _1115eb810_gen_builtin_append_call_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_BuiltinAppendCallExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616110080:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinCloneCallExprModel>>())) { goto _case_end_4616110208; }
		_case_begin_4616110208:;
		{
			return _1115eb810_gen_builtin_clone_call_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_BuiltinCloneCallExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616110208:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_SizeofExprModel>>())) { goto _case_end_4616110336; }
		_case_begin_4616110336:;
		{
			return _1115eb810_gen_sizeof_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_SizeofExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616110336:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_AlignofExprModel>>())) { goto _case_end_4616110464; }
		_case_begin_4616110464:;
		{
			return _1115eb810_gen_alignof_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_AlignofExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616110464:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_RuneExprModel>>())) { goto _case_end_4616110592; }
		_case_begin_4616110592:;
		{
			return _1115eb810_gen_rune_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_RuneExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616110592:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BuiltinErrorTraitSubIdentExprModel>>())) { goto _case_end_4616110720; }
		_case_begin_4616110720:;
		{
			return _1115eb810_gen_builtin_error_trait_sub_ident_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_BuiltinErrorTraitSubIdentExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616110720:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_ExplicitDerefExprModel>>())) { goto _case_end_4616110848; }
		_case_begin_4616110848:;
		{
			return _1115eb810_gen_explicit_deref_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_ExplicitDerefExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616110848:;
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_StructStaticIdentExprModel>>())) { goto _case_end_4616110976; }
		_case_begin_4616110976:;
		{
			return _1115eb810_gen_struct_static_ident_expr_model(_77523_m.operator jule::Ref<_110e4e8a0_StructStaticIdentExprModel>());
		}
		goto _match_end_4616104272;
		_case_end_4616110976:;
		_case_begin_4616104688:;
		{
			return jule::Str("<unimplemented_expression_model>", 32);
		}
		goto _match_end_4616104272;
		_case_end_4616104688:;
		_match_end_4616104272:;
	}
}



inline jule::Str _1115eb810_gen_expr(jule::Any _90217_e) {
	jule::Str _90313_obj = _1115eb810_gen_expr_model(_90217_e);
	if (_90313_obj[0LL] != '(') {
		return _90313_obj;
	}
	{
		auto _match_expr{ _90217_e };
		if (!(_match_expr.type_is<jule::Ref<_110e4e8a0_BinopExprModel>>())) { goto _case_end_4616168352; }
		_case_begin_4616168352:;
		{
			_90313_obj=_90313_obj.slice(1LL,static_cast<jule::Int>(_90313_obj.len() - 1LL));
		}
		goto _match_end_4616169584;
		_case_end_4616168352:;
		_match_end_4616169584:;
	}
	return _90313_obj;
}



inline jule::Str _1115eb810_gen_val(jule::Ref<_1112d7f10_Value> _91516_v) {
	if (_91516_v->_field_data->_method_is_const()) {
		return _1115eb810_gen_const_expr(_91516_v->_field_data);
	}
	return _1115eb810_gen_expr(_91516_v->_field_data->_field_model);
}



inline jule::Str _1115eb810_get_init_expr(jule::Ref<_1116aff70_TypeKind> _92222_t) {
	if (jule::real(_92222_t->_method_ptr())) {
		return jule::Str("nullptr", 7);
	}
	jule::Ref<_110e453c0_Enum> _92713_enm = _92222_t->_method_enm();
	if ((!(jule::real(_92713_enm)))) {
		return _111b757c0_gen_type_kind(_92222_t) + jule::Str("()", 2);
	}
	return _1115eb810_gen_val(_92713_enm->_field_items[0LL]->_field_value);
}



inline jule::Str _111b4b8a0_get_derive_fn_decl_clone(jule::Ref<_1109372e0_Struct> _729_s) {
	jule::Str _813_obj = _111b757c0_gen_struct_kind(_729_s);
	_813_obj+=jule::Str(" clone(void) const ", 19);
	return _813_obj;
}



inline jule::Str _111b4b8a0_get_derive_fn_def_clone(jule::Ref<_1109372e0_Struct> _1328_s) {
	jule::Str _1413_obj = _111b757c0_gen_struct_kind(_1328_s);
	_1413_obj+=(jule::Str(" ", 1) + _1413_obj) + jule::Str("::clone(void) const ", 20);
	return _1413_obj;
}



inline jule::Str _111b4b010_as_ident(jule::Str _2513_ident) {
	return jule::Str("_", 1) + _2513_ident;
}



inline jule::Str _111b4b010_as_jt(jule::Str _2810_id) {
	jule::Slice<jule::I32> _2913_ident = static_cast<jule::Slice<jule::I32>>(_2810_id);
	if ((97LL <= _2913_ident[0LL]) && (_2913_ident[0LL] <= 122LL)) {
		_2913_ident[0LL]-=32LL;
	}
	return jule::Str("jule::", 6) + static_cast<jule::Str>(_2913_ident);
}



inline jule::Str _111b4b010_get_ptr_as_ident(jule::Uintptr _3721_ptr) {
	jule::Str _3813_addr = jule::Str("_", 1) + _110054e40_fmt_uint(static_cast<jule::U64>(_3721_ptr),16LL);
	{
		auto __julec_range_expr = _3813_addr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _111b4b010_i = 0;
			jule::U8 _111b4b010_r = *__julec_range_begin;
			_iter_begin_4616192464:;
			{
				if (_111b4b010_r != '0') {
					_3813_addr=_3813_addr.slice(static_cast<jule::Int>(_111b4b010_i));
					goto _iter_end_4616192464;
				}
			}
			_iter_next_4616192464:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_111b4b010_i; _111b4b010_r = *__julec_range_begin; goto _iter_begin_4616192464; }
			_iter_end_4616192464:;
		}
	}
	return _3813_addr;
}



inline jule::Str _111b4b010_as_out_ident(jule::Str _5317_ident,jule::Uintptr _5329_ptr) {
	if (_5329_ptr != 0LL) {
		return (_111b4b010_get_ptr_as_ident(_5329_ptr) + jule::Str("_", 1)) + _5317_ident;
	}
	return _111b4b010_as_ident(_5317_ident);
}



inline jule::Str _111b4b010_as_local_ident(jule::Int _6619_row,jule::Int _6629_col,jule::Str _6643_ident) {
	_6643_ident=((_110054e40_itoa(_6619_row) + _110054e40_itoa(_6629_col)) + jule::Str("_", 1)) + _6643_ident;
	return _111b4b010_as_ident(_6643_ident);
}



inline jule::Str _111b4b010_fn_out_ident(jule::Ref<_11072eb20_Fn> _7217_f) {
	{
		if (!((_7217_f->_field_cpp_linked))) { goto _case_end_4616204800; }
		_case_begin_4616204800:;
		{
			return _7217_f->_field_ident;
		}
		goto _match_end_4616202352;
		_case_end_4616204800:;
		if (!((_7217_f->_field_ident == jule::Str("main", 4)))) { goto _case_end_4616206720; }
		_case_begin_4616206720:;
		{
			return jule::Str("entry_point", 11);
		}
		goto _match_end_4616202352;
		_case_end_4616206720:;
		if (!((_7217_f->_method_is_method()))) { goto _case_end_4616206832; }
		_case_begin_4616206832:;
		{
			if (_7217_f->_field_statically) {
				return jule::Str("_static_method_", 15) + _7217_f->_field_ident;
			}
			return jule::Str("_method_", 8) + _7217_f->_field_ident;
		}
		goto _match_end_4616202352;
		_case_end_4616206832:;
		_case_begin_4616202464:;
		{
			return _111b4b010_as_out_ident(_7217_f->_field_ident,static_cast<jule::Uintptr>(_7217_f->_field_token._field_file->_method_addr()));
		}
		goto _match_end_4616202352;
		_case_end_4616202464:;
		_match_end_4616202352:;
	}
}



inline jule::Str _111b4b010_fn_ins_out_ident(jule::Ref<_11072eb20_FnIns> _9221_f) {
	if (_9221_f->_method_is_builtin()) {
		return jule::Str("jule::", 6) + _9221_f->_field_decl->_field_ident;
	}
	if (_9221_f->_field_decl->_field_cpp_linked || (_9221_f->_field_generics.len() == 0LL)) {
		return _111b4b010_fn_out_ident(_9221_f->_field_decl);
	}
	{
		auto __julec_range_expr = _9221_f->_field_decl->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _111b4b010_i = 0;
			jule::Ref<_11072eb20_FnIns> _111b4b010_ins = *__julec_range_begin;
			_iter_begin_4616214928:;
			{
				jule::Ref<_1116aff70_TypeKind> _10213_kind = jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_111b4b010_ins));
				if (_9221_f->_method_equals(_10213_kind)) {
					return (_111b4b010_fn_out_ident(_9221_f->_field_decl) + jule::Str("_", 1)) + _110054e40_itoa(_111b4b010_i);
				}
			}
			_iter_next_4616214928:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_111b4b010_i; _111b4b010_ins = *__julec_range_begin; goto _iter_begin_4616214928; }
			_iter_end_4616214928:;
		}
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _111b4b010_trait_out_ident(jule::Ref<_110e3f160_Trait> _11220_t) {
	if (_11220_t->_method_is_builtin()) {
		return jule::Str("jule::", 6) + _11220_t->_field_ident;
	}
	return _111b4b010_as_out_ident(_11220_t->_field_ident,static_cast<jule::Uintptr>(_11220_t->_field_token._field_file->_method_addr()));
}



inline jule::Str _111b4b010_param_out_ident(jule::Ref<_11072eb20_Param> _12020_p) {
	if (_1106ec050_is_anon_ident(_12020_p->_field_ident) || _1106ec050_is_ignore_ident(_12020_p->_field_ident)) {
		return jule::Str("", 0);
	}
	return _111b4b010_as_local_ident(_12020_p->_field_token._field_row,_12020_p->_field_token._field_column,_12020_p->_field_ident);
}



inline jule::Str _111b4b010_struct_out_ident(jule::Ref<_1109372e0_Struct> _12821_s) {
	if (_12821_s->_field_cpp_linked) {
		if (_111b757c0_has_directive(_12821_s->_field_directives,jule::Str("typedef", 7))) {
			return _12821_s->_field_ident;
		}
		return jule::Str("struct ", 7) + _12821_s->_field_ident;
	}
	return _111b4b010_as_out_ident(_12821_s->_field_ident,static_cast<jule::Uintptr>(_12821_s->_field_token._field_file->_method_addr()));
}



inline jule::Str _111b4b010_struct_ins_out_ident(jule::Ref<_1109372e0_StructIns> _13925_s) {
	if (_13925_s->_field_decl->_field_cpp_linked || (_13925_s->_field_generics.len() == 0LL)) {
		return _111b4b010_struct_out_ident(_13925_s->_field_decl);
	}
	{
		auto __julec_range_expr = _13925_s->_field_decl->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _111b4b010_i = 0;
			jule::Ref<_1109372e0_StructIns> _111b4b010_ins = *__julec_range_begin;
			_iter_begin_4616236224:;
			{
				jule::Ref<_1116aff70_TypeKind> _14513_kind = jule::new_struct<_1116aff70_TypeKind>(new( std::nothrow ) _1116aff70_TypeKind(jule::Str(),jule::Bool(),_111b4b010_ins));
				if (_13925_s->_method_equals(_14513_kind)) {
					return (_111b4b010_struct_out_ident(_13925_s->_field_decl) + jule::Str("_", 1)) + _110054e40_itoa(_111b4b010_i);
				}
			}
			_iter_next_4616236224:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_111b4b010_i; _111b4b010_ins = *__julec_range_begin; goto _iter_begin_4616236224; }
			_iter_end_4616236224:;
		}
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _111b4b010_field_out_ident(jule::Ref<_1109372e0_Field> _15520_f) {
	if (_15520_f->_field_owner->_field_cpp_linked) {
		return _15520_f->_field_ident;
	}
	return jule::Str("_field_", 7) + _15520_f->_field_ident;
}



inline jule::Str _111b4b010_var_out_ident(jule::Ref<_110e92c80_Var> _16322_v) {
	{
		if (!((_16322_v->_field_cpp_linked))) { goto _case_end_4616248192; }
		_case_begin_4616248192:;
		{
			return _16322_v->_field_ident;
		}
		goto _match_end_4616239984;
		_case_end_4616248192:;
		if (!((_16322_v->_field_ident == jule::Str("self", 4)))) { goto _case_end_4616248304; }
		_case_begin_4616248304:;
		{
			if (jule::real(_16322_v->_field_kind->_field_kind->_method_ref())) {
				return jule::Str("this->self", 10);
			}
			return jule::Str("(*this)", 7);
		}
		goto _match_end_4616239984;
		_case_end_4616248304:;
		if (!((jule::real(_16322_v->_field_scope)))) { goto _case_end_4616245232; }
		_case_begin_4616245232:;
		{
			return _111b4b010_as_local_ident(_16322_v->_field_token._field_row,_16322_v->_field_token._field_column,_16322_v->_field_ident);
		}
		goto _match_end_4616239984;
		_case_end_4616245232:;
		_case_begin_4616244928:;
		{
			return _111b4b010_as_out_ident(_16322_v->_field_ident,static_cast<jule::Uintptr>(_16322_v->_field_token._field_file->_method_addr()));
		}
		goto _match_end_4616239984;
		_case_end_4616244928:;
		_match_end_4616239984:;
	}
}



inline jule::Str _111b4b010_iter_begin_label_ident(jule::Uintptr _18327_it) {
	return jule::Str("_iter_begin_", 12) + _110054e40_itoa(static_cast<jule::Int>(_18327_it));
}



inline jule::Str _111b4b010_iter_end_label_ident(jule::Uintptr _18825_it) {
	return jule::Str("_iter_end_", 10) + _110054e40_itoa(static_cast<jule::Int>(_18825_it));
}



inline jule::Str _111b4b010_iter_next_label_ident(jule::Uintptr _19326_it) {
	return jule::Str("_iter_next_", 11) + _110054e40_itoa(static_cast<jule::Int>(_19326_it));
}



inline jule::Str _111b4b010_label_ident(jule::Str _19816_ident) {
	return jule::Str("_julec_label_", 13) + _19816_ident;
}



inline jule::Str _111b4b010_match_end_label_ident(jule::Uintptr _20326_m) {
	return jule::Str("_match_end_", 11) + _110054e40_itoa(static_cast<jule::Int>(_20326_m));
}



inline jule::Str _111b4b010_case_begin_label_ident(jule::Uintptr _20827_c) {
	return jule::Str("_case_begin_", 12) + _110054e40_itoa(static_cast<jule::Int>(_20827_c));
}



inline jule::Str _111b4b010_case_end_label_ident(jule::Uintptr _21325_c) {
	return jule::Str("_case_end_", 10) + _110054e40_itoa(static_cast<jule::Int>(_21325_c));
}



inline jule::Bool _111b757c0_any_equals_0(jule::Ref<_110e92c80_Var>& _2619_first,jule::Any& _2631_other) {
	{
		auto _match_expr{ _2631_other };
		if (!(_match_expr.type_is<jule::Ref<_110e92c80_Var>>())) { goto _case_end_4616064256; }
		_case_begin_4616064256:;
		{
			return (_2619_first).alloc == (_2631_other.operator jule::Ref<_110e92c80_Var>()).alloc;
		}
		goto _match_end_4616063392;
		_case_end_4616064256:;
		_case_begin_4616063872:;
		{
			return false;
		}
		goto _match_end_4616063392;
		_case_end_4616063872:;
		_match_end_4616063392:;
	}
}

inline jule::Bool _111b757c0_any_equals_1(jule::Ref<_1109372e0_FieldIns>& _2619_first,jule::Any& _2631_other) {
	{
		auto _match_expr{ _2631_other };
		if (!(_match_expr.type_is<jule::Ref<_1109372e0_FieldIns>>())) { goto _case_end_4616077264; }
		_case_begin_4616077264:;
		{
			return (_2619_first).alloc == (_2631_other.operator jule::Ref<_1109372e0_FieldIns>()).alloc;
		}
		goto _match_end_4616076400;
		_case_end_4616077264:;
		_case_begin_4616076880:;
		{
			return false;
		}
		goto _match_end_4616076400;
		_case_end_4616076880:;
		_match_end_4616076400:;
	}
}



inline jule::Ref<_11054f670_Directive> _111b757c0_find_directive(jule::Slice<jule::Ref<_11054f670_Directive>> _3423_directives,jule::Str _3465_tag) {
	{
		auto __julec_range_expr = _3423_directives;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11054f670_Directive> _111b757c0_dr = *__julec_range_begin;
			_iter_begin_4616265616:;
			{
				if (_111b757c0_dr->_field_tag == _3465_tag) {
					return _111b757c0_dr;
				}
			}
			_iter_next_4616265616:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b757c0_dr = *__julec_range_begin; goto _iter_begin_4616265616; }
			_iter_end_4616265616:;
		}
	}
	return jule::new_ref<_11054f670_Directive>();
}



inline jule::Bool _111b757c0_has_directive(jule::Slice<jule::Ref<_11054f670_Directive>> _4418_directives,jule::Str _4460_tag) {
	return jule::real(_111b757c0_find_directive((*((&(_4418_directives)))),_4460_tag));
}



inline jule::Str _111b757c0_gen_prim_kind(jule::Ref<_1116aff70_Prim> _4918_p) {
	return _111b4b010_as_jt(_4918_p->_method_to_str());
}



inline jule::Str _111b757c0_gen_tuple_kind(jule::Ref<_1116aff70_Tuple> _5423_t) {
	jule::Str _5513_obj = jule::Str("std::tuple<", 11);
	{
		auto __julec_range_expr = _5423_t->_field_types;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1116aff70_TypeKind> _111b757c0_t = *__julec_range_begin;
			_iter_begin_4616272944:;
			{
				_5513_obj+=_111b757c0_gen_type_kind(_111b757c0_t) + jule::Str(",", 1);
			}
			_iter_next_4616272944:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b757c0_t = *__julec_range_begin; goto _iter_begin_4616272944; }
			_iter_end_4616272944:;
		}
	}
	_5513_obj=_5513_obj.slice(0LL,static_cast<jule::Int>(_5513_obj.len() - 1LL));
	return _5513_obj + jule::Str(">", 1);
}



inline jule::Str _111b757c0_as_ref_kind(jule::Str _6416_elem) {
	jule::Str _659_ref = _111b4b010_as_jt(jule::Str("ref", 3));
	return ((_659_ref + jule::Str("<", 1)) + _6416_elem) + jule::Str(">", 1);
}



inline jule::Str _111b757c0_gen_ref_kind(jule::Ref<_1116aff70_Ref> _7021_r) {
	jule::Str _719_elem = _111b757c0_gen_type_kind(_7021_r->_field_elem);
	return _111b757c0_as_ref_kind(_719_elem);
}



inline jule::Str _111b757c0_gen_ptr_kind(jule::Ref<_1116aff70_Ptr> _7621_p) {
	
	if (_7621_p->_method_is_unsafe()) {
		return jule::Str("void*", 5);
	}
	jule::Str _829_elem = _111b757c0_gen_type_kind(_7621_p->_field_elem);
	return _829_elem + jule::Str("*", 1);
}



inline jule::Str _111b757c0_gen_enum_kind(jule::Ref<_110e453c0_Enum> _8722_e) {
	return _111b757c0_gen_type_kind(_8722_e->_field_kind->_field_kind);
}



inline jule::Str _111b757c0_as_slice_kind(jule::Ref<_1116aff70_TypeKind> _9122_elem) {
	jule::Str _929_elem_s = _111b757c0_gen_type_kind(_9122_elem);
	jule::Str _939_slc = _111b4b010_as_jt(jule::Str("slice", 5));
	return ((_939_slc + jule::Str("<", 1)) + _929_elem_s) + jule::Str(">", 1);
}



inline jule::Str _111b757c0_gen_slice_kind(jule::Ref<_1116aff70_Slc> _9823_s) {
	return _111b757c0_as_slice_kind(_9823_s->_field_elem);
}



inline jule::Str _111b757c0_gen_map_kind(jule::Ref<_1116aff70_Map> _10321_m) {
	jule::Str _1049_key = _111b757c0_gen_type_kind(_10321_m->_field_key);
	jule::Str _1059_val = _111b757c0_gen_type_kind(_10321_m->_field_val);
	jule::Str _1069__map = _111b4b010_as_jt(jule::Str("map", 3));
	return ((((_1069__map + jule::Str("<", 1)) + _1049_key) + jule::Str(",", 1)) + _1059_val) + jule::Str(">", 1);
}



inline jule::Str _111b757c0_gen_trait_kind_from_ident(jule::Str _11030_ident) {
	jule::Str _1119_trt = _111b4b010_as_jt(jule::Str("trait", 5));
	return ((_1119_trt + jule::Str("<", 1)) + _11030_ident) + jule::Str(">", 1);
}



inline jule::Str _111b757c0_gen_trait_kind(jule::Ref<_110e3f160_Trait> _11619_t) {
	jule::Str _1179_ident = _111b4b010_trait_out_ident(_11619_t);
	return _111b757c0_gen_trait_kind_from_ident(_1179_ident);
}



inline jule::Str _111b757c0_gen_struct_kind(jule::Ref<_1109372e0_Struct> _12220_s) {
	jule::Str _12313_rep = jule::Str("", 0);
	if (_12220_s->_field_cpp_linked && (!(_111b757c0_has_directive(_12220_s->_field_directives,jule::Str("typedef", 7))))) {
		_12313_rep+=jule::Str("struct ", 7);
	}
	_12313_rep+=_111b4b010_struct_out_ident(_12220_s);
	return _12313_rep;
}



inline jule::Str _111b757c0_gen_struct_kind_ins(jule::Ref<_1109372e0_StructIns> _13328_s) {
	if (_13328_s->_field_decl->_field_cpp_linked) {
		jule::Str _13517_ident = _111b4b010_struct_ins_out_ident(_13328_s);
		if (_13328_s->_field_generics.len() > 0LL) {
			_13517_ident+=jule::Str("<", 1);
			{
				auto __julec_range_expr = _13328_s->_field_generics;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Ref<_1116aff70_TypeKind> _111b757c0_g = *__julec_range_begin;
					_iter_begin_4616309376:;
					{
						_13517_ident+=_111b757c0_gen_type_kind(_111b757c0_g) + jule::Str(",", 1);
					}
					_iter_next_4616309376:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _111b757c0_g = *__julec_range_begin; goto _iter_begin_4616309376; }
					_iter_end_4616309376:;
				}
			}
			_13517_ident=_13517_ident.slice(0LL,static_cast<jule::Int>(_13517_ident.len() - 1LL));
			_13517_ident+=jule::Str(">", 1);
		}
		jule::Ref<_11054f670_Directive> _14413_d = _111b757c0_find_directive(_13328_s->_field_decl->_field_directives,jule::Str("namespace", 9));
		if (jule::real(_14413_d)) {
			_13517_ident=(_1115eb810_concat_all_parts(_14413_d->_field_args) + jule::Str("::", 2)) + _13517_ident;
		}
		return _13517_ident;
	}
	return _111b4b010_struct_ins_out_ident(_13328_s);
}



inline jule::Str _111b757c0_gen_array_kind(jule::Ref<_1116aff70_Arr> _15423_a) {
	jule::Str _1559_arr = _111b4b010_as_jt(jule::Str("array", 5));
	jule::Str _1569_elem = _111b757c0_gen_type_kind(_15423_a->_field_elem);
	jule::Str _1579_size = _110054e40_itoa(_15423_a->_field_n);
	return ((((_1559_arr + jule::Str("<", 1)) + _1569_elem) + jule::Str(",", 1)) + _1579_size) + jule::Str(">", 1);
}



inline jule::Str _111b757c0_gen_fn_anon_decl(jule::Ref<_11072eb20_FnIns> _16125_f) {
	jule::Str _16213_decl = _111b4cab0_gen_fn_ins_result(_16125_f);
	_16213_decl+=jule::Str("(", 1);
	if (_16125_f->_field_params.len() > 0LL) {
		{
			auto __julec_range_expr = _16125_f->_field_params;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_11072eb20_ParamIns> _111b757c0_param = *__julec_range_begin;
				_iter_begin_4616324736:;
				{
					if (_111b757c0_param->_field_decl->_method_is_self()) {
						goto _iter_next_4616324736;
					}
					_16213_decl+=_111b4cab0_gen_param_ins_prototype(_111b757c0_param);
					_16213_decl+=jule::Str(",", 1);
				}
				_iter_next_4616324736:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _111b757c0_param = *__julec_range_begin; goto _iter_begin_4616324736; }
				_iter_end_4616324736:;
			}
		}
		_16213_decl=_16213_decl.slice(0LL,static_cast<jule::Int>(_16213_decl.len() - 1LL));
	} else {
		_16213_decl+=jule::Str("void", 4);
	}
	_16213_decl+=jule::Str(")", 1);
	return _16213_decl;
}



inline jule::Str _111b757c0_gen_fn_kind(jule::Ref<_11072eb20_FnIns> _18420_f) {
	jule::Str _1859_fnc = _111b4b010_as_jt(jule::Str("fn", 2));
	jule::Str _1869_decl = _111b757c0_gen_fn_anon_decl(_18420_f);
	return ((_1859_fnc + jule::Str("<", 1)) + _1869_decl) + jule::Str(">", 1);
}



inline jule::Str _111b757c0_gen_type_kind(jule::Ref<_1116aff70_TypeKind> _19122_k) {
	{
		if (!((_19122_k->_method_is_cpp_linked()))) { goto _case_end_4616337616; }
		_case_begin_4616337616:;
		{
			return _19122_k->_field_cpp_ident;
		}
		goto _match_end_4616334608;
		_case_end_4616337616:;
		if (!((jule::real(_19122_k->_method_prim())))) { goto _case_end_4616336976; }
		_case_begin_4616336976:;
		{
			return _111b757c0_gen_prim_kind(_19122_k->_method_prim());
		}
		goto _match_end_4616334608;
		_case_end_4616336976:;
		if (!((jule::real(_19122_k->_method_tup())))) { goto _case_end_4616337088; }
		_case_begin_4616337088:;
		{
			return _111b757c0_gen_tuple_kind(_19122_k->_method_tup());
		}
		goto _match_end_4616334608;
		_case_end_4616337088:;
		if (!((jule::real(_19122_k->_method_ref())))) { goto _case_end_4616337216; }
		_case_begin_4616337216:;
		{
			return _111b757c0_gen_ref_kind(_19122_k->_method_ref());
		}
		goto _match_end_4616334608;
		_case_end_4616337216:;
		if (!((jule::real(_19122_k->_method_ptr())))) { goto _case_end_4616336288; }
		_case_begin_4616336288:;
		{
			return _111b757c0_gen_ptr_kind(_19122_k->_method_ptr());
		}
		goto _match_end_4616334608;
		_case_end_4616336288:;
		if (!((jule::real(_19122_k->_method_enm())))) { goto _case_end_4616336400; }
		_case_begin_4616336400:;
		{
			return _111b757c0_gen_enum_kind(_19122_k->_method_enm());
		}
		goto _match_end_4616334608;
		_case_end_4616336400:;
		if (!((jule::real(_19122_k->_method_slc())))) { goto _case_end_4616336528; }
		_case_begin_4616336528:;
		{
			return _111b757c0_gen_slice_kind(_19122_k->_method_slc());
		}
		goto _match_end_4616334608;
		_case_end_4616336528:;
		if (!((jule::real(_19122_k->_method_map())))) { goto _case_end_4616337824; }
		_case_begin_4616337824:;
		{
			return _111b757c0_gen_map_kind(_19122_k->_method_map());
		}
		goto _match_end_4616334608;
		_case_end_4616337824:;
		if (!((jule::real(_19122_k->_method_trt())))) { goto _case_end_4616337936; }
		_case_begin_4616337936:;
		{
			return _111b757c0_gen_trait_kind(_19122_k->_method_trt());
		}
		goto _match_end_4616334608;
		_case_end_4616337936:;
		if (!((jule::real(_19122_k->_method_strct())))) { goto _case_end_4616338048; }
		_case_begin_4616338048:;
		{
			return _111b757c0_gen_struct_kind_ins(_19122_k->_method_strct());
		}
		goto _match_end_4616334608;
		_case_end_4616338048:;
		if (!((jule::real(_19122_k->_method_arr())))) { goto _case_end_4616338240; }
		_case_begin_4616338240:;
		{
			return _111b757c0_gen_array_kind(_19122_k->_method_arr());
		}
		goto _match_end_4616334608;
		_case_end_4616338240:;
		if (!((jule::real(_19122_k->_method_fnc())))) { goto _case_end_4616338352; }
		_case_begin_4616338352:;
		{
			return _111b757c0_gen_fn_kind(_19122_k->_method_fnc());
		}
		goto _match_end_4616334608;
		_case_end_4616338352:;
		_case_begin_4616334976:;
		{
			return jule::Str("[<unimplemented_type_kind>]", 27);
		}
		goto _match_end_4616334608;
		_case_end_4616334976:;
		_match_end_4616334608:;
	}
}



inline void _111b4cab0_add_indent(void) {
	(_111b4cab0_INDENT)++;
}



inline void _111b4cab0_done_indent(void) {
	(_111b4cab0_INDENT)--;
}



inline jule::Str _111b4cab0_indent(void) {
	
	if (_111b4cab0_INDENT == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _7913_s = jule::Str("", 0);
	jule::Int _8013_i = 0LL;
	_iter_begin_4616350528:;
	if (!(_8013_i < _111b4cab0_INDENT)) { goto _iter_end_4616350528; }
	{
		_7913_s+=jule::Str("\t", 1);
	}
	_iter_next_4616350528:;
	(_8013_i)++;
	goto _iter_begin_4616350528;
	_iter_end_4616350528:;
	return _7913_s;
}



inline jule::Bool _111b4cab0_is_cpp_header_file(jule::Str _8723_path) {
	jule::Int _889_offset = _8723_path.rfind(jule::Str(".", 1));
	if (_889_offset == -1LL) {
		return false;
	}
	return _127e05470_is_valid_header_ext(_8723_path.slice(static_cast<jule::Int>(_889_offset)));
}



inline jule::Str _111b4cab0_gen_links(jule::Ref<_110254280_IR> _9618_ir) {
	jule::Str _9713_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _9618_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _111b4cab0_pkg = *__julec_range_begin;
			_iter_begin_4616366128:;
			{
				{
					if (!(((!(_111b4cab0_pkg->_field_cpp_linked))))) { goto _case_end_4616368000; }
					_case_begin_4616368000:;
					{
						goto _iter_next_4616366128;
					}
					goto _match_end_4616367808;
					_case_end_4616368000:;
					if (!((_127e05470_is_std_header_path(_111b4cab0_pkg->_field_path)))) { goto _case_end_4616368128; }
					_case_begin_4616368128:;
					{
						_9713_obj+=(jule::Str("#include ", 9) + _111b4cab0_pkg->_field_path) + jule::Str("\n", 1);
					}
					goto _match_end_4616367808;
					_case_end_4616368128:;
					_match_end_4616367808:;
				}
			}
			_iter_next_4616366128:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_pkg = *__julec_range_begin; goto _iter_begin_4616366128; }
			_iter_end_4616366128:;
		}
	}
	{
		auto __julec_range_expr = _9618_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _111b4cab0_pkg = *__julec_range_begin;
			_iter_begin_4616370144:;
			{
				{
					if (!(((!(_111b4cab0_pkg->_field_cpp_linked))))) { goto _case_end_4616372832; }
					_case_begin_4616372832:;
					{
						goto _iter_next_4616370144;
					}
					goto _match_end_4616372640;
					_case_end_4616372832:;
					if (!((_111b4cab0_is_cpp_header_file(_111b4cab0_pkg->_field_path)))) { goto _case_end_4616372960; }
					_case_begin_4616372960:;
					{
						_9713_obj+=(jule::Str("#include \"", 10) + _111b4cab0_pkg->_field_path) + jule::Str("\"\n", 2);
					}
					goto _match_end_4616372640;
					_case_end_4616372960:;
					_match_end_4616372640:;
				}
			}
			_iter_next_4616370144:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_pkg = *__julec_range_begin; goto _iter_begin_4616370144; }
			_iter_end_4616370144:;
		}
	}
	return _9713_obj;
}



inline jule::Str _111b4cab0_gen_fn_result(jule::Ref<_11072eb20_Fn> _12122_f) {
	if (_12122_f->_method_is_void()) {
		return jule::Str("void", 4);
	}
	return _111b757c0_gen_type_kind(_12122_f->_field_result->_field_kind->_field_kind);
}



inline jule::Str _111b4cab0_gen_fn_ins_result(jule::Ref<_11072eb20_FnIns> _12926_f) {
	if (_12926_f->_field_decl->_method_is_void()) {
		return jule::Str("void", 4);
	}
	return _111b757c0_gen_type_kind(_12926_f->_field_result);
}



inline jule::Str _111b4cab0_gen_param_prototype(jule::Ref<_11072eb20_Param> _13728_p) {
	jule::Str _13813_obj = jule::Str("", 0);
	if (_13728_p->_field_variadic) {
		_13813_obj+=_111b4b010_as_jt(jule::Str("slice", 5));
		_13813_obj+=jule::Str("<", 1);
		_13813_obj+=_111b757c0_gen_type_kind(_13728_p->_field_kind->_field_kind);
		_13813_obj+=jule::Str(">", 1);
	} else {
		_13813_obj+=_111b757c0_gen_type_kind(_13728_p->_field_kind->_field_kind);
	}
	return _13813_obj;
}



inline jule::Str _111b4cab0_gen_param_ins(jule::Ref<_11072eb20_ParamIns> _15122_p) {
	jule::Str _15213_obj = _111b4cab0_gen_param_ins_prototype(_15122_p);
	_15213_obj+=jule::Str(" ", 1);
	_15213_obj+=_111b4b010_param_out_ident(_15122_p->_field_decl);
	return _15213_obj;
}



inline jule::Str _111b4cab0_gen_param_ins_prototype(jule::Ref<_11072eb20_ParamIns> _15932_p) {
	jule::Str _16013_obj = jule::Str("", 0);
	if (_15932_p->_field_decl->_field_variadic) {
		_16013_obj+=_111b4b010_as_jt(jule::Str("slice", 5));
		_16013_obj+=jule::Str("<", 1);
		_16013_obj+=_111b757c0_gen_type_kind(_15932_p->_field_kind);
		_16013_obj+=jule::Str(">", 1);
	} else {
		_16013_obj+=_111b757c0_gen_type_kind(_15932_p->_field_kind);
	}
	if (_15932_p->_field_decl->_field_reference) {
		_16013_obj+=jule::Str("&", 1);
	}
	return _16013_obj;
}



inline jule::Str _111b4cab0_gen_param(jule::Ref<_11072eb20_Param> _17818_p) {
	jule::Str _17913_obj = _111b4cab0_gen_param_prototype(_17818_p);
	if (((_17818_p->_field_ident != jule::Str("", 0)) && (!(_1106ec050_is_ignore_ident(_17818_p->_field_ident)))) && (!(_1106ec050_is_anon_ident(_17818_p->_field_ident)))) {
		_17913_obj+=jule::Str(" ", 1) + _111b4b010_param_out_ident(_17818_p);
	}
	return _17913_obj;
}



inline jule::Str _111b4cab0_gen_params(jule::Slice<jule::Ref<_11072eb20_Param>> _18719_params) {
	{
		if (!((_18719_params.len() == 0LL))) { goto _case_end_4616401824; }
		_case_begin_4616401824:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4616401664;
		_case_end_4616401824:;
		if (!(((_18719_params.len() == 1LL) && _18719_params[0LL]->_method_is_self()))) { goto _case_end_4616401952; }
		_case_begin_4616401952:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4616401664;
		_case_end_4616401952:;
		_match_end_4616401664:;
	}
	jule::Str _19613_obj = jule::Str("(", 1);
	{
		auto __julec_range_expr = _18719_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_Param> _111b4cab0_p = *__julec_range_begin;
			_iter_begin_4616405584:;
			{
				if ((!(_111b4cab0_p->_method_is_self()))) {
					_19613_obj+=_111b4cab0_gen_param(_111b4cab0_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4616405584:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_p = *__julec_range_begin; goto _iter_begin_4616405584; }
			_iter_end_4616405584:;
		}
	}
	_19613_obj=_19613_obj.slice(0LL,static_cast<jule::Int>(_19613_obj.len() - 1LL));
	return _19613_obj + jule::Str(")", 1);
}



inline jule::Str _111b4cab0_gen_params_ins(jule::Slice<jule::Ref<_11072eb20_ParamIns>> _20823_params) {
	{
		if (!((_20823_params.len() == 0LL))) { goto _case_end_4616410816; }
		_case_begin_4616410816:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4616410672;
		_case_end_4616410816:;
		if (!(((_20823_params.len() == 1LL) && _20823_params[0LL]->_field_decl->_method_is_self()))) { goto _case_end_4616410928; }
		_case_begin_4616410928:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4616410672;
		_case_end_4616410928:;
		_match_end_4616410672:;
	}
	jule::Str _21713_obj = jule::Str("(", 1);
	{
		auto __julec_range_expr = _20823_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_ParamIns> _111b4cab0_p = *__julec_range_begin;
			_iter_begin_4616414784:;
			{
				if ((!(_111b4cab0_p->_field_decl->_method_is_self()))) {
					_21713_obj+=_111b4cab0_gen_param_ins(_111b4cab0_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4616414784:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_p = *__julec_range_begin; goto _iter_begin_4616414784; }
			_iter_end_4616414784:;
		}
	}
	_21713_obj=_21713_obj.slice(0LL,static_cast<jule::Int>(_21713_obj.len() - 1LL));
	return _21713_obj + jule::Str(")", 1);
}



inline jule::Str _111b4cab0_gen_params_prototypes(jule::Slice<jule::Ref<_11072eb20_ParamIns>> _23030_params) {
	{
		if (!((_23030_params.len() == 0LL))) { goto _case_end_4616419792; }
		_case_begin_4616419792:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4616416672;
		_case_end_4616419792:;
		if (!(((_23030_params.len() == 1LL) && _23030_params[0LL]->_field_decl->_method_is_self()))) { goto _case_end_4616420416; }
		_case_begin_4616420416:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4616416672;
		_case_end_4616420416:;
		_match_end_4616416672:;
	}
	jule::Str _23913_obj = jule::Str("(", 1);
	{
		auto __julec_range_expr = _23030_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_ParamIns> _111b4cab0_p = *__julec_range_begin;
			_iter_begin_4616424208:;
			{
				if ((!(_111b4cab0_p->_field_decl->_method_is_self()))) {
					_23913_obj+=_111b4cab0_gen_param_ins_prototype(_111b4cab0_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4616424208:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_p = *__julec_range_begin; goto _iter_begin_4616424208; }
			_iter_end_4616424208:;
		}
	}
	_23913_obj=_23913_obj.slice(0LL,static_cast<jule::Int>(_23913_obj.len() - 1LL));
	return _23913_obj + jule::Str(")", 1);
}



inline jule::Str _111b4cab0_gen_trait(jule::Ref<_110e3f160_Trait> _25218_t) {
	
	jule::Str _2549_outid = _111b4b010_trait_out_ident(_25218_t);
	jule::Str _25613_obj = jule::Str("struct ", 7);
	_25613_obj+=_2549_outid;
	_25613_obj+=jule::Str(" {\n", 3);
	_25613_obj+=jule::Str("\t", 1);
	_25613_obj+=jule::Str("virtual ~", 9);
	_25613_obj+=_2549_outid;
	_25613_obj+=jule::Str("(void) {}\n\n", 11);
	{
		auto __julec_range_expr = _25218_t->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_Fn> _111b4cab0_f = *__julec_range_begin;
			_iter_begin_4616433168:;
			{
				_25613_obj+=jule::Str("\t", 1);
				_25613_obj+=jule::Str("virtual ", 8);
				_25613_obj+=_111b4cab0_gen_fn_result(_111b4cab0_f);
				_25613_obj+=jule::Str(" _method_", 9);
				_25613_obj+=_111b4cab0_f->_field_ident;
				_25613_obj+=_111b4cab0_gen_params(_111b4cab0_f->_field_params);
				_25613_obj+=jule::Str(" {", 2);
				if ((!(_111b4cab0_f->_method_is_void()))) {
					_25613_obj+=jule::Str(" return {}; ", 12);
				}
				_25613_obj+=jule::Str("}\n", 2);
			}
			_iter_next_4616433168:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_f = *__julec_range_begin; goto _iter_begin_4616433168; }
			_iter_end_4616433168:;
		}
	}
	_25613_obj+=jule::Str("};", 2);
	return _25613_obj;
}



inline jule::Str _111b4cab0_gen_traits_tbl(jule::Ref<_1111c15d0_SymbolTable> _28123_tbl) {
	jule::Str _28213_obj = jule::Str("", 0);
	jule::Int _28313_i = 0LL;
	_iter_begin_4616441664:;
	if (!(_28313_i < _28123_tbl->_field_traits._method_len())) { goto _iter_end_4616441664; }
	{
		jule::Ref<_110e3f160_Trait> _28517_t = _28123_tbl->_field_traits._method_at(_28313_i);
		_28213_obj+=_111b4cab0_gen_trait(_28517_t) + jule::Str("\n\n", 2);
	}
	_iter_next_4616441664:;
	(_28313_i)++;
	goto _iter_begin_4616441664;
	_iter_end_4616441664:;
	return _28213_obj;
}



inline jule::Str _111b4cab0_gen_traits_pkg(jule::Ref<_110e4edc0_Package> _29223_pkg) {
	jule::Str _29313_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _29223_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _111b4cab0_tbl = *__julec_range_begin;
			_iter_begin_4616447200:;
			{
				_29313_obj+=_111b4cab0_gen_traits_tbl(_111b4cab0_tbl);
			}
			_iter_next_4616447200:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_tbl = *__julec_range_begin; goto _iter_begin_4616447200; }
			_iter_end_4616447200:;
		}
	}
	return _29313_obj;
}



inline jule::Str _111b4cab0_gen_traits(jule::Ref<_110254280_IR> _30119_ir) {
	jule::Str _30213_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _30119_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _111b4cab0_u = *__julec_range_begin;
			_iter_begin_4616450752:;
			{
				if ((!(_111b4cab0_u->_field_cpp_linked))) {
					_30213_obj+=_111b4cab0_gen_traits_pkg(_111b4cab0_u->_field_package);
				}
			}
			_iter_next_4616450752:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_u = *__julec_range_begin; goto _iter_begin_4616450752; }
			_iter_end_4616450752:;
		}
	}
	_30213_obj+=_111b4cab0_gen_traits_pkg(_30119_ir->_field_main);
	return _30213_obj;
}



inline jule::Str _111b4cab0_gen_trait_prototype(jule::Ref<_110e3f160_Trait> _31324_t) {
	return (jule::Str("struct ", 7) + _111b4b010_trait_out_ident(_31324_t)) + jule::Str(";", 1);
}



inline jule::Str _111b4cab0_gen_trait_prototypes(jule::Ref<_110e4edc0_Package> _31829_p) {
	jule::Str _31913_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _31829_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _111b4cab0_f = *__julec_range_begin;
			_iter_begin_4616457696:;
			{
				jule::Int _32117_i = 0LL;
				_iter_begin_4616459504:;
				if (!(_32117_i < _111b4cab0_f->_field_traits._method_len())) { goto _iter_end_4616459504; }
				{
					jule::Ref<_110e3f160_Trait> _32317_t = _111b4cab0_f->_field_traits._method_at(_32117_i);
					if (_32317_t->_field_token._field_id != 0LLU) {
						_31913_obj+=_111b4cab0_gen_trait_prototype(_32317_t) + jule::Str("\n", 1);
					}
				}
				_iter_next_4616459504:;
				(_32117_i)++;
				goto _iter_begin_4616459504;
				_iter_end_4616459504:;
			}
			_iter_next_4616457696:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_f = *__julec_range_begin; goto _iter_begin_4616457696; }
			_iter_end_4616457696:;
		}
	}
	return _31913_obj;
}



inline jule::Str _111b4cab0_gen_struct_plain_prototype(jule::Ref<_1109372e0_Struct> _33331_s) {
	jule::Str _33413_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _33331_s->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_StructIns> _111b4cab0_ins = *__julec_range_begin;
			_iter_begin_4616466000:;
			{
				_33413_obj+=jule::Str("\nstruct ", 8);
				_33413_obj+=_111b4b010_struct_ins_out_ident(_111b4cab0_ins);
				_33413_obj+=jule::Str(";", 1);
				_33413_obj+=jule::Str("\n", 1);
			}
			_iter_next_4616466000:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_ins = *__julec_range_begin; goto _iter_begin_4616466000; }
			_iter_end_4616466000:;
		}
	}
	return _33413_obj;
}



inline jule::Str _111b4cab0_gen_struct_plain_prototypes(jule::Slice<jule::Ref<_1109372e0_Struct>> _34536_structs) {
	jule::Str _34613_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _34536_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_Struct> _111b4cab0_s = *__julec_range_begin;
			_iter_begin_4616470224:;
			{
				if ((!(_111b4cab0_s->_field_cpp_linked)) && (_111b4cab0_s->_field_token._field_id != 0LLU)) {
					_34613_obj+=_111b4cab0_gen_struct_plain_prototype(_111b4cab0_s) + jule::Str("\n", 1);
				}
			}
			_iter_next_4616470224:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_s = *__julec_range_begin; goto _iter_begin_4616470224; }
			_iter_end_4616470224:;
		}
	}
	return _34613_obj;
}



inline jule::Str _111b4cab0_gen_struct_traits(jule::Ref<_1109372e0_Struct> _35622_s) {
	if (_35622_s->_field_implements.len() == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _36113_obj = jule::Str(": ", 2);
	{
		auto __julec_range_expr = _35622_s->_field_implements;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e3f160_Trait> _111b4cab0_i = *__julec_range_begin;
			_iter_begin_4616476608:;
			{
				_36113_obj+=jule::Str("public ", 7);
				_36113_obj+=_111b4b010_trait_out_ident(_111b4cab0_i);
				_36113_obj+=jule::Str(",", 1);
			}
			_iter_next_4616476608:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_i = *__julec_range_begin; goto _iter_begin_4616476608; }
			_iter_end_4616476608:;
		}
	}
	_36113_obj=_36113_obj.slice(0LL,static_cast<jule::Int>(_36113_obj.len() - 1LL));
	return _36113_obj;
}



inline jule::Str _111b4cab0_gen_field_decl(jule::Ref<_1109372e0_FieldIns> _37223_f) {
	jule::Str _37313_obj = _111b757c0_gen_type_kind(_37223_f->_field_kind) + jule::Str(" ", 1);
	_37313_obj+=_111b4b010_field_out_ident(_37223_f->_field_decl);
	_37313_obj+=(jule::Str("{", 1) + _1115eb810_get_init_expr(_37223_f->_field_kind)) + jule::Str("}", 1);
	_37313_obj+=jule::Str(";", 1);
	return _37313_obj;
}



inline jule::Str _111b4cab0_gen_struct_self_field_type_kind(jule::Ref<_1109372e0_StructIns> _38140_s) {
	return _111b757c0_as_ref_kind(_111b757c0_gen_struct_kind_ins(_38140_s));
}



inline jule::Str _111b4cab0_gen_struct_self_field(jule::Ref<_1109372e0_StructIns> _38630_s) {
	jule::Str _38713_obj = _111b4cab0_gen_struct_self_field_type_kind(_38630_s);
	_38713_obj+=jule::Str(" self{};", 8);
	return _38713_obj;
}



inline jule::Str _111b4cab0_gen_struct_self_field_init_st(jule::Ref<_1109372e0_StructIns> _39238_s) {
	jule::Str _39313_obj = jule::Str("this->self = ", 13);
	_39313_obj+=_111b4cab0_gen_struct_self_field_type_kind(_39238_s);
	_39313_obj+=jule::Str("::make(this, nullptr);", 22);
	return _39313_obj;
}



inline jule::Str _111b4cab0_gen_struct_constructor(jule::Ref<_1109372e0_StructIns> _39931_s) {
	jule::Str _40013_obj = _111b4b010_struct_ins_out_ident(_39931_s);
	_40013_obj+=jule::Str("(", 1);
	if (_39931_s->_field_fields.len() > 0LL) {
		{
			auto __julec_range_expr = _39931_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1109372e0_FieldIns> _111b4cab0_f = *__julec_range_begin;
				_iter_begin_4616493360:;
				{
					_40013_obj+=_111b757c0_gen_type_kind(_111b4cab0_f->_field_kind);
					_40013_obj+=(jule::Str(" __param_", 9) + _111b4cab0_f->_field_decl->_field_ident) + jule::Str(", ", 2);
				}
				_iter_next_4616493360:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _111b4cab0_f = *__julec_range_begin; goto _iter_begin_4616493360; }
				_iter_end_4616493360:;
			}
		}
		_40013_obj=_40013_obj.slice(0LL,static_cast<jule::Int>(_40013_obj.len() - 2LL));
	} else {
		_40013_obj+=jule::Str("void", 4);
	}
	_40013_obj+=jule::Str(") {\n", 4);
	_111b4cab0_add_indent();
	_40013_obj+=_111b4cab0_indent();
	_40013_obj+=_111b4cab0_gen_struct_self_field_init_st(_39931_s);
	_40013_obj+=jule::Str("\n", 1);
	if (_39931_s->_field_fields.len() > 0LL) {
		{
			auto __julec_range_expr = _39931_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1109372e0_FieldIns> _111b4cab0_f = *__julec_range_begin;
				_iter_begin_4616500144:;
				{
					_40013_obj+=jule::Str("\n", 1);
					_40013_obj+=_111b4cab0_indent();
					_40013_obj+=jule::Str("this->", 6);
					_40013_obj+=_111b4b010_field_out_ident(_111b4cab0_f->_field_decl);
					_40013_obj+=jule::Str(" = ", 3);
					_40013_obj+=jule::Str("__param_", 8) + _111b4cab0_f->_field_decl->_field_ident;
					_40013_obj+=jule::Str(";", 1);
				}
				_iter_next_4616500144:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _111b4cab0_f = *__julec_range_begin; goto _iter_begin_4616500144; }
				_iter_end_4616500144:;
			}
		}
	}
	_111b4cab0_done_indent();
	_40013_obj+=(jule::Str("\n", 1) + _111b4cab0_indent()) + jule::Str("}", 1);
	return _40013_obj;
}



inline jule::Str _111b4cab0_gen_struct_destructor(jule::Ref<_1109372e0_StructIns> _43626_s) {
	jule::Str _43713_obj = jule::Str("~", 1);
	_43713_obj+=_111b4b010_struct_ins_out_ident(_43626_s);
	_43713_obj+=jule::Str("(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }", 91);
	return _43713_obj;
}



inline jule::Str _111b4cab0_gen_struct_operators(jule::Ref<_1109372e0_StructIns> _44329_s) {
	jule::Str _4449_out_ident = _111b4b010_struct_ins_out_ident(_44329_s);
	jule::Str _44513_obj = jule::Str("", 0);
	_44513_obj+=_111b4cab0_indent();
	_44513_obj+=jule::Str("inline bool operator==(const ", 29);
	_44513_obj+=_4449_out_ident;
	_44513_obj+=jule::Str(" &_Src) const {", 15);
	if (_44329_s->_field_fields.len() > 0LL) {
		_111b4cab0_add_indent();
		_44513_obj+=jule::Str("\n", 1);
		_44513_obj+=_111b4cab0_indent();
		_44513_obj+=jule::Str("return ", 7);
		_111b4cab0_add_indent();
		jule::Int _45717_n = 0LL;
		{
			auto __julec_range_expr = _44329_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1109372e0_FieldIns> _111b4cab0_f = *__julec_range_begin;
				_iter_begin_4616516096:;
				{
					jule::Ref<_1109372e0_StructIns> _46017_strct = _111b4cab0_f->_field_kind->_method_strct();
					if ((jule::real(_46017_strct) && jule::real(_46017_strct->_field_decl)) && _46017_strct->_field_decl->_field_cpp_linked) {
						goto _iter_next_4616516096;
					}
					(_45717_n)++;
					_44513_obj+=jule::Str("\n", 1);
					_44513_obj+=_111b4cab0_indent();
					_44513_obj+=jule::Str("this->", 6);
					jule::Str _46917_f_ident = _111b4b010_field_out_ident(_111b4cab0_f->_field_decl);
					_44513_obj+=_46917_f_ident;
					_44513_obj+=jule::Str(" == _Src.", 9);
					_44513_obj+=_46917_f_ident;
					_44513_obj+=jule::Str(" &&", 3);
				}
				_iter_next_4616516096:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _111b4cab0_f = *__julec_range_begin; goto _iter_begin_4616516096; }
				_iter_end_4616516096:;
			}
		}
		_111b4cab0_done_indent();
		if (_45717_n > 0LL) {
			_44513_obj=_44513_obj.slice(0LL,static_cast<jule::Int>(_44513_obj.len() - 3LL));
		} else {
			_44513_obj+=jule::Str("true", 4);
		}
		_44513_obj+=jule::Str(";\n", 2);
		_111b4cab0_done_indent();
		_44513_obj+=_111b4cab0_indent();
		_44513_obj+=jule::Str("}", 1);
	} else {
		_44513_obj+=jule::Str(" return true; }", 15);
	}
	_44513_obj+=jule::Str("\n\n", 2);
	_44513_obj+=_111b4cab0_indent();
	_44513_obj+=jule::Str("inline bool operator!=(const ", 29);
	_44513_obj+=_4449_out_ident;
	_44513_obj+=jule::Str(" &_Src) const { return !this->operator==(_Src); }", 49);
	return _44513_obj;
}



inline jule::Str _111b4cab0_gen_struct_derive_defs_prototypes(jule::Ref<_1109372e0_StructIns> _49638_s) {
	jule::Str _49713_obj = jule::Str("", 0);
	if (_49638_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))) {
		_49713_obj+=_111b4cab0_indent();
		_49713_obj+=_111b4b8a0_get_derive_fn_decl_clone(_49638_s->_field_decl);
		_49713_obj+=jule::Str(";\n\n", 3);
	}
	return _49713_obj;
}



inline jule::Str _111b4cab0_gen_struct_ins_prototype(jule::Ref<_1109372e0_StructIns> _50833_s) {
	jule::Str _50913_obj = jule::Str("struct ", 7);
	jule::Str _5109_out_ident = _111b4b010_struct_ins_out_ident(_50833_s);
	_50913_obj+=_5109_out_ident;
	_50913_obj+=_111b4cab0_gen_struct_traits(_50833_s->_field_decl);
	_50913_obj+=jule::Str(" {\n", 3);
	_111b4cab0_add_indent();
	_50913_obj+=_111b4cab0_indent();
	_50913_obj+=_111b4cab0_gen_struct_self_field(_50833_s);
	_50913_obj+=jule::Str("\n\n", 2);
	if (_50833_s->_field_fields.len() > 0LL) {
		{
			auto __julec_range_expr = _50833_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1109372e0_FieldIns> _111b4cab0_f = *__julec_range_begin;
				_iter_begin_4616541920:;
				{
					_50913_obj+=_111b4cab0_indent();
					_50913_obj+=_111b4cab0_gen_field_decl(_111b4cab0_f);
					_50913_obj+=jule::Str("\n", 1);
				}
				_iter_next_4616541920:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _111b4cab0_f = *__julec_range_begin; goto _iter_begin_4616541920; }
				_iter_end_4616541920:;
			}
		}
		_50913_obj+=jule::Str("\n\n", 2);
		_50913_obj+=_111b4cab0_indent();
		_50913_obj+=_111b4cab0_gen_struct_constructor(_50833_s);
		_50913_obj+=jule::Str("\n\n", 2);
	}
	_50913_obj+=_111b4cab0_indent();
	_50913_obj+=_111b4cab0_gen_struct_destructor(_50833_s);
	_50913_obj+=jule::Str("\n\n", 2);
	_50913_obj+=_111b4cab0_indent();
	_50913_obj+=_5109_out_ident;
	_50913_obj+=jule::Str("(void) { ", 9);
	_50913_obj+=_111b4cab0_gen_struct_self_field_init_st(_50833_s);
	_50913_obj+=jule::Str(" }\n\n", 4);
	{
		auto __julec_range_expr = _50833_s->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_Fn> _111b4cab0_f = *__julec_range_begin;
			_iter_begin_4616540800:;
			{
				jule::Str _54317_proto = _111b4cab0_gen_fn_prototype(_111b4cab0_f,true);
				if (_111b4cab0_f->_field_statically) {
					_54317_proto=(_111b4cab0_indent() + jule::Str("static ", 7)) + _54317_proto.trim(jule::Str("\t ", 2));
				}
				_50913_obj+=_54317_proto;
				_50913_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4616540800:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_f = *__julec_range_begin; goto _iter_begin_4616540800; }
			_iter_end_4616540800:;
		}
	}
	_50913_obj+=_111b4cab0_gen_struct_derive_defs_prototypes(_50833_s);
	_50913_obj+=_111b4cab0_gen_struct_operators(_50833_s);
	_50913_obj+=jule::Str("\n", 1);
	_111b4cab0_done_indent();
	_50913_obj+=_111b4cab0_indent() + jule::Str("};", 2);
	return _50913_obj;
}



inline jule::Str _111b4cab0_gen_struct_prototype(jule::Ref<_1109372e0_Struct> _56229_s) {
	jule::Str _56313_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _56229_s->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_StructIns> _111b4cab0_ins = *__julec_range_begin;
			_iter_begin_4616556736:;
			{
				_56313_obj+=_111b4cab0_gen_struct_ins_prototype(_111b4cab0_ins) + jule::Str("\n\n", 2);
			}
			_iter_next_4616556736:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_ins = *__julec_range_begin; goto _iter_begin_4616556736; }
			_iter_end_4616556736:;
		}
	}
	return _56313_obj;
}



inline jule::Str _111b4cab0_gen_struct_prototypes(jule::Slice<jule::Ref<_1109372e0_Struct>> _57130_structs) {
	jule::Str _57213_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _57130_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_Struct> _111b4cab0_s = *__julec_range_begin;
			_iter_begin_4616560384:;
			{
				if ((!(_111b4cab0_s->_field_cpp_linked)) && (_111b4cab0_s->_field_token._field_id != 0LLU)) {
					_57213_obj+=_111b4cab0_gen_struct_prototype(_111b4cab0_s) + jule::Str("\n", 1);
				}
			}
			_iter_next_4616560384:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_s = *__julec_range_begin; goto _iter_begin_4616560384; }
			_iter_end_4616560384:;
		}
	}
	return _57213_obj;
}



inline jule::Str _111b4cab0_gen_fn_decl_head(jule::Ref<_11072eb20_FnIns> _58125_f,jule::Bool _58136_method) {
	jule::Str _58213_obj = jule::Str("", 0);
	if ((!(_58125_f->_field_decl->_method_is_entry_point()))) {
		_58213_obj+=jule::Str("inline ", 7);
	}
	_58213_obj+=_111b4cab0_gen_fn_ins_result(_58125_f) + jule::Str(" ", 1);
	if ((!(_58136_method)) && jule::real(_58125_f->_field_decl->_field_owner)) {
		_58213_obj+=_111b4b010_struct_ins_out_ident(_58125_f->_field_owner) + jule::Str("::", 2);
	}
	_58213_obj+=_111b4b010_fn_ins_out_ident(_58125_f);
	return _58213_obj;
}



inline jule::Str _111b4cab0_gen_fn_prototype(jule::Ref<_11072eb20_Fn> _59825_f,jule::Bool _59833_method) {
	jule::Str _59913_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _59825_f->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_FnIns> _111b4cab0_c = *__julec_range_begin;
			_iter_begin_4616573072:;
			{
				_59913_obj+=_111b4cab0_indent();
				_59913_obj+=_111b4cab0_gen_fn_decl_head(_111b4cab0_c,_59833_method);
				_59913_obj+=_111b4cab0_gen_params_prototypes(_111b4cab0_c->_field_params);
				_59913_obj+=jule::Str(";\n", 2);
			}
			_iter_next_4616573072:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_c = *__julec_range_begin; goto _iter_begin_4616573072; }
			_iter_end_4616573072:;
		}
	}
	return _59913_obj;
}



inline jule::Str _111b4cab0_gen_fn_prototypes(jule::Ref<_110e4edc0_Package> _61026_pkg) {
	jule::Str _61113_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _61026_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _111b4cab0_file = *__julec_range_begin;
			_iter_begin_4616577968:;
			{
				jule::Int _61317_i = 0LL;
				_iter_begin_4616579792:;
				if (!(_61317_i < _111b4cab0_file->_field_funcs._method_len())) { goto _iter_end_4616579792; }
				{
					jule::Ref<_11072eb20_Fn> _61521_f = _111b4cab0_file->_field_funcs._method_at(_61317_i);
					if ((!(_61521_f->_field_cpp_linked)) && (_61521_f->_field_token._field_id != 0LLU)) {
						_61113_obj+=_111b4cab0_gen_fn_prototype(_61521_f,false);
					}
				}
				_iter_next_4616579792:;
				(_61317_i)++;
				goto _iter_begin_4616579792;
				_iter_end_4616579792:;
			}
			_iter_next_4616577968:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_file = *__julec_range_begin; goto _iter_begin_4616577968; }
			_iter_end_4616577968:;
		}
	}
	return _61113_obj;
}



inline jule::Str _111b4cab0_gen_prototypes(jule::Ref<_110254280_IR> _62523_ir,jule::Slice<jule::Ref<_1109372e0_Struct>> _62536_structs) {
	jule::Str _62613_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _62523_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _111b4cab0_u = *__julec_range_begin;
			_iter_begin_4616587296:;
			{
				if ((!(_111b4cab0_u->_field_cpp_linked))) {
					_62613_obj+=_111b4cab0_gen_trait_prototypes(_111b4cab0_u->_field_package);
				}
			}
			_iter_next_4616587296:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_u = *__julec_range_begin; goto _iter_begin_4616587296; }
			_iter_end_4616587296:;
		}
	}
	_62613_obj+=_111b4cab0_gen_trait_prototypes(_62523_ir->_field_main);
	_62613_obj+=_111b4cab0_gen_struct_plain_prototypes(_62536_structs);
	_62613_obj+=_111b4cab0_gen_traits(_62523_ir) + jule::Str("\n", 1);
	_62613_obj+=_111b4cab0_gen_struct_prototypes(_62536_structs);
	{
		auto __julec_range_expr = _62523_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _111b4cab0_u = *__julec_range_begin;
			_iter_begin_4616592176:;
			{
				if ((!(_111b4cab0_u->_field_cpp_linked))) {
					_62613_obj+=_111b4cab0_gen_fn_prototypes(_111b4cab0_u->_field_package);
				}
			}
			_iter_next_4616592176:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_u = *__julec_range_begin; goto _iter_begin_4616592176; }
			_iter_end_4616592176:;
		}
	}
	_62613_obj+=_111b4cab0_gen_fn_prototypes(_62523_ir->_field_main);
	return _62613_obj;
}



inline jule::Str _111b4cab0_gen_var_init_expr(jule::Ref<_110e92c80_Var> _65326_v,jule::Str _65335_init) {
	jule::Str _65413_obj = jule::Str("", 0);
	if (_65326_v->_field_statically) {
		_65413_obj+=jule::Str("static ", 7);
	}
	_65413_obj+=_111b757c0_gen_type_kind(_65326_v->_field_kind->_field_kind) + jule::Str(" ", 1);
	if (_65326_v->_field_reference) {
		_65413_obj+=jule::Str("&", 1);
	}
	_65413_obj+=_111b4b010_var_out_ident(_65326_v);
	if (_65335_init != jule::Str("", 0)) {
		_65413_obj+=jule::Str(" = ", 3) + _65335_init;
	}
	_65413_obj+=jule::Str(";", 1);
	return _65413_obj;
}



inline jule::Str _111b4cab0_gen_var(jule::Ref<_110e92c80_Var> _67216_v) {
	if (_1106ec050_is_ignore_ident(_67216_v->_field_ident)) {
		return jule::Str("", 0);
	}
	if (_67216_v->_field_constant) {
		return jule::Str("", 0);
	}
	if (jule::real(_67216_v->_field_value) && jule::real(_67216_v->_field_value->_field_expr)) {
		if (_67216_v->_field_value->_field_data->_field_model != nullptr) {
			return _111b4cab0_gen_var_init_expr(_67216_v,_1115eb810_gen_val(_67216_v->_field_value));
		}
		return _111b4cab0_gen_var_init_expr(_67216_v,jule::Str("", 0));
	}
	return _111b4cab0_gen_var_init_expr(_67216_v,_1115eb810_get_init_expr(_67216_v->_field_kind->_field_kind));
}



inline jule::Str _111b4cab0_gen_globals(jule::Slice<jule::Ref<_110e92c80_Var>> _69020_globals) {
	jule::Str _69113_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _69020_globals;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e92c80_Var> _111b4cab0_v = *__julec_range_begin;
			_iter_begin_4616611040:;
			{
				if ((!(_111b4cab0_v->_field_constant)) && (_111b4cab0_v->_field_token._field_id != 0LLU)) {
					_69113_obj+=_111b4cab0_gen_var(_111b4cab0_v) + jule::Str("\n", 1);
				}
			}
			_iter_next_4616611040:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_v = *__julec_range_begin; goto _iter_begin_4616611040; }
			_iter_end_4616611040:;
		}
	}
	return _69113_obj;
}



inline jule::Str _111b4cab0_gen_fn(jule::Ref<_11072eb20_Fn> _70315_f) {
	jule::Str _70413_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _70315_f->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_FnIns> _111b4cab0_ins = *__julec_range_begin;
			_iter_begin_4616616112:;
			{
				_70413_obj+=_111b4cab0_gen_fn_decl_head(_111b4cab0_ins,false);
				_70413_obj+=_111b4cab0_gen_params_ins(_111b4cab0_ins->_field_params) + jule::Str(" ", 1);
				_70413_obj+=_1114d55f0_gen_fn_scope(_111b4cab0_ins);
				_70413_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4616616112:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_ins = *__julec_range_begin; goto _iter_begin_4616616112; }
			_iter_end_4616616112:;
		}
	}
	return _70413_obj;
}



inline jule::Str _111b4cab0_gen_pkg_fns(jule::Ref<_110e4edc0_Package> _71520_p) {
	jule::Str _71613_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _71520_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1111c15d0_SymbolTable> _111b4cab0_f = *__julec_range_begin;
			_iter_begin_4616621360:;
			{
				jule::Int _71817_i = 0LL;
				_iter_begin_4616623088:;
				if (!(_71817_i < _111b4cab0_f->_field_funcs._method_len())) { goto _iter_end_4616623088; }
				{
					jule::Ref<_11072eb20_Fn> _72021_f = _111b4cab0_f->_field_funcs._method_at(_71817_i);
					if ((!(_72021_f->_field_cpp_linked)) && (_72021_f->_field_token._field_id != 0LLU)) {
						_71613_obj+=_111b4cab0_gen_fn(_72021_f) + jule::Str("\n\n", 2);
					}
				}
				_iter_next_4616623088:;
				(_71817_i)++;
				goto _iter_begin_4616623088;
				_iter_end_4616623088:;
			}
			_iter_next_4616621360:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_f = *__julec_range_begin; goto _iter_begin_4616621360; }
			_iter_end_4616621360:;
		}
	}
	return _71613_obj;
}



inline jule::Str _111b4cab0_gen_struct_method_defs(jule::Ref<_1109372e0_StructIns> _73031_s) {
	jule::Str _73113_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _73031_s->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11072eb20_Fn> _111b4cab0_f = *__julec_range_begin;
			_iter_begin_4616630032:;
			{
				_73113_obj+=_111b4cab0_indent();
				_73113_obj+=_111b4cab0_gen_fn(_111b4cab0_f);
				_73113_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4616630032:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_f = *__julec_range_begin; goto _iter_begin_4616630032; }
			_iter_end_4616630032:;
		}
	}
	return _73113_obj;
}



inline jule::Str _111b4cab0_gen_struct_ostream(jule::Ref<_1109372e0_StructIns> _74127_s) {
	jule::Str _74213_obj = jule::Str("", 0);
	_74213_obj+=_111b4cab0_indent();
	_74213_obj+=jule::Str("std::ostream &operator<<(std::ostream &_Stream, const ", 54);
	_74213_obj+=_111b4b010_struct_ins_out_ident(_74127_s);
	_74213_obj+=jule::Str(" &_Src) {\n", 10);
	_111b4cab0_add_indent();
	_74213_obj+=_111b4cab0_indent();
	_74213_obj+=jule::Str("_Stream << \"", 12);
	_74213_obj+=_74127_s->_field_decl->_field_ident;
	_74213_obj+=jule::Str("{\";\n", 4);
	{
		auto __julec_range_expr = _74127_s->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _111b4cab0_i = 0;
			jule::Ref<_1109372e0_FieldIns> _111b4cab0_f = *__julec_range_begin;
			_iter_begin_4616637632:;
			{
				_74213_obj+=_111b4cab0_indent();
				_74213_obj+=jule::Str("_Stream << \"", 12);
				_74213_obj+=_111b4cab0_f->_field_decl->_field_ident;
				_74213_obj+=jule::Str(":", 1);
				jule::Ref<_1109372e0_StructIns> _76013_strct = _111b4cab0_f->_field_kind->_method_strct();
				if ((jule::real(_76013_strct) && jule::real(_76013_strct->_field_decl)) && _76013_strct->_field_decl->_field_cpp_linked) {
					_74213_obj+=(jule::Str(" cpp.", 5) + _111b4b010_field_out_ident(_111b4cab0_f->_field_decl)) + jule::Str("\"", 1);
				} else {
					_74213_obj+=jule::Str("\" << _Src.", 10);
					_74213_obj+=_111b4b010_field_out_ident(_111b4cab0_f->_field_decl);
				}
				if ((_111b4cab0_i + 1LL) < _74127_s->_field_fields.len()) {
					_74213_obj+=jule::Str(" << \", \"", 8);
				}
				_74213_obj+=jule::Str(";\n", 2);
			}
			_iter_next_4616637632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_111b4cab0_i; _111b4cab0_f = *__julec_range_begin; goto _iter_begin_4616637632; }
			_iter_end_4616637632:;
		}
	}
	_74213_obj+=_111b4cab0_indent();
	_74213_obj+=jule::Str("_Stream << \"}\";\n", 16);
	_74213_obj+=_111b4cab0_indent();
	_74213_obj+=jule::Str("return _Stream;\n", 16);
	_111b4cab0_done_indent();
	_74213_obj+=_111b4cab0_indent();
	_74213_obj+=jule::Str("}", 1);
	return _74213_obj;
}



inline jule::Str _111b4cab0_gen_struct_derive_defs(jule::Ref<_1109372e0_StructIns> _78331_s) {
	jule::Str _78413_obj = jule::Str("", 0);
	if (_78331_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))) {
		_78413_obj+=_111b4cab0_indent();
		_78413_obj+=_111b4b8a0_get_derive_fn_def_clone(_78331_s->_field_decl);
		_78413_obj+=jule::Str("{\n", 2);
		_111b4cab0_add_indent();
		_78413_obj+=_111b4cab0_indent();
		_78413_obj+=_111b757c0_gen_struct_kind_ins(_78331_s);
		_78413_obj+=jule::Str(" clone;\n", 8);
		{
			auto __julec_range_expr = _78331_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1109372e0_FieldIns> _111b4cab0_f = *__julec_range_begin;
				_iter_begin_4616655200:;
				{
					jule::Str _79517_ident = _111b4b010_field_out_ident(_111b4cab0_f->_field_decl);
					_78413_obj+=_111b4cab0_indent();
					_78413_obj+=jule::Str("clone.", 6);
					_78413_obj+=_79517_ident;
					_78413_obj+=jule::Str(" = jule::clone(this->", 21);
					_78413_obj+=_79517_ident;
					_78413_obj+=jule::Str(");\n", 3);
				}
				_iter_next_4616655200:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _111b4cab0_f = *__julec_range_begin; goto _iter_begin_4616655200; }
				_iter_end_4616655200:;
			}
		}
		_78413_obj+=_111b4cab0_indent();
		_78413_obj+=jule::Str("return clone;\n", 14);
		_111b4cab0_done_indent();
		_78413_obj+=_111b4cab0_indent();
		_78413_obj+=jule::Str("}", 1);
	}
	return _78413_obj;
}



inline jule::Str _111b4cab0_gen_struct_ins(jule::Ref<_1109372e0_StructIns> _81523_s) {
	jule::Str _81613_obj = _111b4cab0_gen_struct_method_defs(_81523_s);
	_81613_obj+=jule::Str("\n\n", 2);
	_81613_obj+=_111b4cab0_gen_struct_derive_defs(_81523_s);
	_81613_obj+=jule::Str("\n\n", 2);
	_81613_obj+=_111b4cab0_gen_struct_ostream(_81523_s);
	return _81613_obj;
}



inline jule::Str _111b4cab0_gen_struct(jule::Ref<_1109372e0_Struct> _82519_s) {
	jule::Str _82613_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _82519_s->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_StructIns> _111b4cab0_ins = *__julec_range_begin;
			_iter_begin_4616665952:;
			{
				_82613_obj+=_111b4cab0_gen_struct_ins(_111b4cab0_ins) + jule::Str("\n\n", 2);
			}
			_iter_next_4616665952:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_ins = *__julec_range_begin; goto _iter_begin_4616665952; }
			_iter_end_4616665952:;
		}
	}
	return _82613_obj;
}



inline jule::Str _111b4cab0_gen_structs(jule::Slice<jule::Ref<_1109372e0_Struct>> _83420_structs) {
	jule::Str _83513_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _83420_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_Struct> _111b4cab0_s = *__julec_range_begin;
			_iter_begin_4616669600:;
			{
				if ((!(_111b4cab0_s->_field_cpp_linked)) && (_111b4cab0_s->_field_token._field_id != 0LLU)) {
					_83513_obj+=_111b4cab0_gen_struct(_111b4cab0_s);
					_83513_obj+=jule::Str("\n\n", 2);
				}
			}
			_iter_next_4616669600:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_s = *__julec_range_begin; goto _iter_begin_4616669600; }
			_iter_end_4616669600:;
		}
	}
	return _83513_obj;
}



inline jule::Str _111b4cab0_gen_fns(jule::Ref<_110254280_IR> _84616_ir) {
	jule::Str _84713_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _84616_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _111b4cab0_u = *__julec_range_begin;
			_iter_begin_4616674784:;
			{
				if ((!(_111b4cab0_u->_field_cpp_linked))) {
					_84713_obj+=_111b4cab0_gen_pkg_fns(_111b4cab0_u->_field_package);
				}
			}
			_iter_next_4616674784:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_u = *__julec_range_begin; goto _iter_begin_4616674784; }
			_iter_end_4616674784:;
		}
	}
	_84713_obj+=_111b4cab0_gen_pkg_fns(_84616_ir->_field_main);
	return _84713_obj;
}



inline void _111b4cab0_push_init(jule::Ref<_110e4edc0_Package> _85918_pkg,jule::Str& _85938_obj) {
	
	
	jule::Ref<_11072eb20_Fn> _8639_f = _85918_pkg->_method_find_fn(jule::Str("init", 4),false);
	if ((!(jule::real(_8639_f)))) {
		return;
	}
	_85938_obj+=(jule::Str("\n\t", 2) + _111b4b010_fn_out_ident(_8639_f)) + jule::Str("();", 3);
}



inline jule::Str _111b4cab0_gen_init_caller(jule::Ref<_110254280_IR> _87224_ir) {
	jule::Str _87313_obj = jule::Str("void ", 5);
	_87313_obj+=jule::Str("__jule_call_initializers", 24);
	_87313_obj+=jule::Str("(void) {", 8);
	{
		auto __julec_range_expr = _87224_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _111b4cab0_u = *__julec_range_begin;
			_iter_begin_4616686272:;
			{
				if ((!(_111b4cab0_u->_field_cpp_linked))) {
					_111b4cab0_push_init(_111b4cab0_u->_field_package,_87313_obj);
				}
			}
			_iter_next_4616686272:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111b4cab0_u = *__julec_range_begin; goto _iter_begin_4616686272; }
			_iter_end_4616686272:;
		}
	}
	_111b4cab0_push_init(_87224_ir->_field_main,_87313_obj);
	_87313_obj+=jule::Str("\n}", 2);
	return _87313_obj;
}



inline void _111b4cab0_append_standard(jule::Str& _88829_obj_code,jule::Str _88844_compiler,jule::Str _88859_compiler_cmd) {
	struct JuleCompileTime _8899_time = time_now();
	jule::Str _89113_time_str = jule::Str("", 0);
	_89113_time_str+=_110054e40_itoa(_8899_time.day);
	_89113_time_str+=jule::Str("/", 1);
	_89113_time_str+=_110054e40_itoa(_8899_time.month);
	_89113_time_str+=jule::Str("/", 1);
	_89113_time_str+=_110054e40_itoa(_8899_time.year);
	_89113_time_str+=jule::Str(" ", 1);
	_89113_time_str+=_110054e40_itoa(_8899_time.hour);
	_89113_time_str+=jule::Str(".", 1);
	_89113_time_str+=_110054e40_itoa(_8899_time.minute);
	_89113_time_str+=jule::Str(" (DD/MM/YYYY) (HH.MM)", 21);
	jule::Str _90313_s = jule::Str("", 0);
	_90313_s+=jule::Str("// Auto generated by JuleC.\n", 28);
	_90313_s+=jule::Str("// JuleC version: ", 18);
	_90313_s+=jule::Str("beta 0.0.4 master", 17);
	_90313_s+=jule::Str("\n", 1);
	_90313_s+=jule::Str("// Date: ", 9);
	_90313_s+=_89113_time_str;
	_90313_s+=jule::Str("\n//\n// Recommended Compile Command;\n// ", 39);
	_90313_s+=_88844_compiler;
	_90313_s+=jule::Str(" ", 1);
	_90313_s+=_88859_compiler_cmd;
	_90313_s+=jule::Str("\n\n#include \"", 12);
	_90313_s+=_127ebf120_PATH_API;
	_90313_s+=jule::Str("\"\n\n", 3);
	_90313_s+=_88829_obj_code;
	_90313_s+=jule::Str("\nint main(int argc, char *argv[], char *envp[]) {\n    std::set_terminate(&jule::terminate_handler);\n    jule::set_sig_handler(jule::signal_handler);\n    jule::setup_command_line_args(argc, argv);\n    jule::setup_environment_variables(envp);\n\n    __jule_call_initializers();\n    entry_point();\n\n    return EXIT_SUCCESS;\n}", 320);
	_88829_obj_code=_90313_s;
}



inline jule::Str _111b4cab0_gen(jule::Ref<_110254280_IR> _93716_ir) {
	jule::Ref<_111b4cab0_OrderedDecls> _93813_od = jule::new_struct<_111b4cab0_OrderedDecls>(new( std::nothrow ) _111b4cab0_OrderedDecls());
	_93813_od->_field_structs=_93716_ir->_method_get_all_structures();
	_111c6e920_order_structures(_93813_od->_field_structs);
	_93813_od->_field_globals=_93716_ir->_method_get_all_variables();
	_111c6e920_order_variables(_93813_od->_field_globals);
	jule::Str _94513_obj = jule::Str("", 0);
	_94513_obj+=_111b4cab0_gen_links(_93716_ir) + jule::Str("\n", 1);
	_94513_obj+=_111b4cab0_gen_prototypes(_93716_ir,_93813_od->_field_structs) + jule::Str("\n\n", 2);
	_94513_obj+=_111b4cab0_gen_globals(_93813_od->_field_globals) + jule::Str("\n", 1);
	_94513_obj+=_111b4cab0_gen_structs(_93813_od->_field_structs);
	_94513_obj+=_111b4cab0_gen_fns(_93716_ir) + jule::Str("\n", 1);
	_94513_obj+=_111b4cab0_gen_init_caller(_93716_ir) + jule::Str("\n", 1);
	return _94513_obj;
}



inline jule::Bool _111c6e920_is_struct_ordered(jule::Slice<jule::Ref<_1109372e0_Struct>> _822_structs,jule::Ref<_1109372e0_Struct> _842_s) {
	{
		auto __julec_range_expr = _842_s->_field_depends;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1109372e0_Struct> _111c6e920_d = *__julec_range_begin;
			_iter_begin_4616718608:;
			{
				{
					auto __julec_range_expr = _822_structs;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1109372e0_Struct> _111c6e920_ss = *__julec_range_begin;
						_iter_begin_4616720304:;
						{
							if ((_111c6e920_ss).alloc == (_842_s).alloc) {
								return false;
							} else if ((_111c6e920_ss).alloc == (_111c6e920_d).alloc) {
								goto _iter_end_4616720304;
							}
						}
						_iter_next_4616720304:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _111c6e920_ss = *__julec_range_begin; goto _iter_begin_4616720304; }
						_iter_end_4616720304:;
					}
				}
			}
			_iter_next_4616718608:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111c6e920_d = *__julec_range_begin; goto _iter_begin_4616718608; }
			_iter_end_4616718608:;
		}
	}
	return true;
}



inline void _111c6e920_order_structures(jule::Slice<jule::Ref<_1109372e0_Struct>> _2425_structs) {
	jule::I64 _259_n = _2425_structs.len();
	jule::Int _2613_i = 0LL;
	_iter_begin_4616724752:;
	if (!(_2613_i < _259_n)) { goto _iter_end_4616724752; }
	{
		jule::Bool _2817_swapped = false;
		jule::Int _3017_j = 0LL;
		_iter_begin_4616727616:;
		if (!(_3017_j < ((_259_n - _2613_i) - 1LL))) { goto _iter_end_4616727616; }
		{
			if (_2425_structs[static_cast<jule::Int>(_3017_j)]->_field_depends.len() > 1LL) {
				std::tie(_2425_structs[static_cast<jule::Int>(_3017_j)],_2425_structs[static_cast<jule::Int>(_3017_j + 1LL)]) = std::make_tuple(_2425_structs[static_cast<jule::Int>(_3017_j + 1LL)],_2425_structs[static_cast<jule::Int>(_3017_j)]);
				_2817_swapped=true;
			}
		}
		_iter_next_4616727616:;
		(_3017_j)++;
		goto _iter_begin_4616727616;
		_iter_end_4616727616:;
		if ((!(_2817_swapped))) {
			goto _iter_end_4616724752;
		}
	}
	_iter_next_4616724752:;
	(_2613_i)++;
	goto _iter_begin_4616724752;
	_iter_end_4616724752:;
	_2613_i=0LL;
	_iter_begin_4616725024:;
	if (!(_2613_i < _259_n)) { goto _iter_end_4616725024; }
	{
		jule::Bool _4517_swapped = false;
		jule::Int _4717_j = 0LL;
		_iter_begin_4616725328:;
		if (!(_4717_j < ((_259_n - _2613_i) - 1LL))) { goto _iter_end_4616725328; }
		{
			if ((!(_111c6e920_is_struct_ordered(_2425_structs,_2425_structs[static_cast<jule::Int>(_4717_j)])))) {
				std::tie(_2425_structs[static_cast<jule::Int>(_4717_j)],_2425_structs[static_cast<jule::Int>(_4717_j + 1LL)]) = std::make_tuple(_2425_structs[static_cast<jule::Int>(_4717_j + 1LL)],_2425_structs[static_cast<jule::Int>(_4717_j)]);
				_4517_swapped=true;
			}
		}
		_iter_next_4616725328:;
		(_4717_j)++;
		goto _iter_begin_4616725328;
		_iter_end_4616725328:;
		if ((!(_4517_swapped))) {
			goto _iter_end_4616725024;
		}
	}
	_iter_next_4616725024:;
	(_2613_i)++;
	goto _iter_begin_4616725024;
	_iter_end_4616725024:;
}



inline jule::Bool _111c6e920_is_var_ordered(jule::Slice<jule::Ref<_110e92c80_Var>> _6219_vars,jule::Ref<_110e92c80_Var> _6233_v) {
	{
		auto __julec_range_expr = _6233_v->_field_depends;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e92c80_Var> _111c6e920_d = *__julec_range_begin;
			_iter_begin_4616744480:;
			{
				{
					auto __julec_range_expr = _6219_vars;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_110e92c80_Var> _111c6e920_vv = *__julec_range_begin;
						_iter_begin_4616746176:;
						{
							if ((_111c6e920_vv).alloc == (_6233_v).alloc) {
								return false;
							} else if ((_111c6e920_vv).alloc == (_111c6e920_d).alloc) {
								goto _iter_end_4616746176;
							}
						}
						_iter_next_4616746176:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _111c6e920_vv = *__julec_range_begin; goto _iter_begin_4616746176; }
						_iter_end_4616746176:;
					}
				}
			}
			_iter_next_4616744480:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111c6e920_d = *__julec_range_begin; goto _iter_begin_4616744480; }
			_iter_end_4616744480:;
		}
	}
	return true;
}



inline void _111c6e920_order_variables(jule::Slice<jule::Ref<_110e92c80_Var>> _7824_vars) {
	jule::I64 _799_n = _7824_vars.len();
	jule::Int _8013_i = 0LL;
	_iter_begin_4616750624:;
	if (!(_8013_i < _799_n)) { goto _iter_end_4616750624; }
	{
		jule::Bool _8217_swapped = false;
		jule::Int _8417_j = 0LL;
		_iter_begin_4616753488:;
		if (!(_8417_j < ((_799_n - _8013_i) - 1LL))) { goto _iter_end_4616753488; }
		{
			if ((!(_111c6e920_is_var_ordered(_7824_vars,_7824_vars[static_cast<jule::Int>(_8417_j)])))) {
				std::tie(_7824_vars[static_cast<jule::Int>(_8417_j)],_7824_vars[static_cast<jule::Int>(_8417_j + 1LL)]) = std::make_tuple(_7824_vars[static_cast<jule::Int>(_8417_j + 1LL)],_7824_vars[static_cast<jule::Int>(_8417_j)]);
				_8217_swapped=true;
			}
		}
		_iter_next_4616753488:;
		(_8417_j)++;
		goto _iter_begin_4616753488;
		_iter_end_4616753488:;
		if ((!(_8217_swapped))) {
			goto _iter_end_4616750624;
		}
	}
	_iter_next_4616750624:;
	(_8013_i)++;
	goto _iter_begin_4616750624;
	_iter_end_4616750624:;
}



inline jule::Str _147e094f0_str_repeat(jule::Str _3515_sub,jule::Int _3529_n) {
	if (_3529_n == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _4013_s = jule::Str("", 0);
	_iter_begin_4616853776:;
	if (!(_3529_n > 0LL)) { goto _iter_end_4616853776; }
	{
		_4013_s+=_3515_sub;
	}
	_iter_next_4616853776:;
	(_3529_n)--;
	goto _iter_begin_4616853776;
	_iter_end_4616853776:;
	return _4013_s;
}



inline void _147e094f0_print_error_message(jule::Str _4724_msg) {
	jule::outln(_4724_msg);
}



inline void _147e094f0_help(void) {
	if (_117e7c8c0_ARGS.len() > 2LL) {
		_147e094f0_print_error_message(jule::Str("invalid command: ", 17) + _117e7c8c0_ARGS[2LL]);
		return;
	}
	jule::I64 _5613_max = _147e094f0_HELP_MAP[0LL][0LL].len();
	{
		auto __julec_range_expr = _147e094f0_HELP_MAP;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Array<jule::Str,2> _147e094f0_k = *__julec_range_begin;
			_iter_begin_4616861200:;
			{
				jule::I64 _5813_n = _147e094f0_k[0LL].len();
				if (_5813_n > _5613_max) {
					_5613_max=_5813_n;
				}
			}
			_iter_next_4616861200:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _147e094f0_k = *__julec_range_begin; goto _iter_begin_4616861200; }
			_iter_end_4616861200:;
		}
	}
	jule::Str _6413_s = jule::Str("", 0);
	
	{
		auto __julec_range_expr = _147e094f0_HELP_MAP;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _147e094f0_i = 0;
			jule::Array<jule::Str,2> _147e094f0_part = *__julec_range_begin;
			_iter_begin_4616866128:;
			{
				_6413_s+=_147e094f0_part[0LL];
				_6413_s+=_147e094f0_str_repeat(jule::Str(" ", 1),static_cast<jule::I64>((_5613_max - _147e094f0_part[0LL].len()) + 5LL));
				_6413_s+=_147e094f0_part[1LL];
				if ((_147e094f0_i + 1LL) < 4LL) {
					_6413_s+=jule::Str("\n", 1);
				}
			}
			_iter_next_4616866128:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_147e094f0_i; _147e094f0_part = *__julec_range_begin; goto _iter_begin_4616866128; }
			_iter_end_4616866128:;
		}
	}
	jule::outln(_6413_s);
}



inline void _147e094f0_version(void) {
	if (_117e7c8c0_ARGS.len() > 2LL) {
		_147e094f0_print_error_message(jule::Str("invalid command: ", 17) + _117e7c8c0_ARGS[2LL]);
		return;
	}
	jule::out(jule::Str("julec version ", 14));
	jule::outln(jule::Str("beta 0.0.4 master", 17));
}



inline void _147e094f0_tool_distos(void) {
	jule::out(jule::Str("supported operating systems:\n ", 30));
	{
		auto __julec_range_expr = _127eb0d70_DISTOS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _147e094f0_os = *__julec_range_begin;
			_iter_begin_4616874640:;
			{
				jule::out(_147e094f0_os);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_4616874640:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _147e094f0_os = *__julec_range_begin; goto _iter_begin_4616874640; }
			_iter_end_4616874640:;
		}
	}
	jule::outln(jule::Str("", 0));
}



inline void _147e094f0_tool_distarch(void) {
	jule::out(jule::Str("supported architects:\n ", 23));
	{
		auto __julec_range_expr = _127eb0d70_DISTARCH;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _147e094f0_arch = *__julec_range_begin;
			_iter_begin_4616876208:;
			{
				jule::out(_147e094f0_arch);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_4616876208:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _147e094f0_arch = *__julec_range_begin; goto _iter_begin_4616876208; }
			_iter_end_4616876208:;
		}
	}
	jule::outln(jule::Str("", 0));
}



inline void _147e094f0_tool(void) {
	if (_117e7c8c0_ARGS.len() == 2LL) {
		jule::outln(jule::Str("tool commands:\n distos     Lists all supported operating systems\n distarch   Lists all supported architects", 107));
		return;
	} else if (_117e7c8c0_ARGS.len() > 3LL) {
		_147e094f0_print_error_message(jule::Str("invalid command: ", 17) + _117e7c8c0_ARGS[3LL]);
		return;
	}
	jule::Str _1199_cmd = _117e7c8c0_ARGS[2LL];
	{
		auto _match_expr{ _1199_cmd };
		if (!((jule::Str("distos", 6)) == _match_expr)) { goto _case_end_4616902400; }
		_case_begin_4616902400:;
		{
			_147e094f0_tool_distos();
		}
		goto _match_end_4616899248;
		_case_end_4616902400:;
		if (!((jule::Str("distarch", 8)) == _match_expr)) { goto _case_end_4616903408; }
		_case_begin_4616903408:;
		{
			_147e094f0_tool_distarch();
		}
		goto _match_end_4616899248;
		_case_end_4616903408:;
		_case_begin_4616901488:;
		{
			_147e094f0_print_error_message(jule::Str("Undefined command: ", 19) + _1199_cmd);
		}
		goto _match_end_4616899248;
		_case_end_4616901488:;
		_match_end_4616899248:;
	}
}



inline void _147e094f0_julenv(void) {
	jule::outln(jule::Str("julec version: beta 0.0.4 master", 32));
	jule::outln(jule::Str("architecture: arm64", 19));
	jule::outln(jule::Str("operating system: darwin", 24));
}



inline jule::Bool _147e094f0_process_command(void) {
	{
		auto _match_expr{ _117e7c8c0_ARGS[1LL] };
		if (!((jule::Str("help", 4)) == _match_expr)) { goto _case_end_4616907072; }
		_case_begin_4616907072:;
		{
			_147e094f0_help();
		}
		goto _match_end_4616903952;
		_case_end_4616907072:;
		if (!((jule::Str("version", 7)) == _match_expr)) { goto _case_end_4616907184; }
		_case_begin_4616907184:;
		{
			_147e094f0_version();
		}
		goto _match_end_4616903952;
		_case_end_4616907184:;
		if (!((jule::Str("tool", 4)) == _match_expr)) { goto _case_end_4616907296; }
		_case_begin_4616907296:;
		{
			_147e094f0_tool();
		}
		goto _match_end_4616903952;
		_case_end_4616907296:;
		if (!((jule::Str("julenv", 6)) == _match_expr)) { goto _case_end_4616908240; }
		_case_begin_4616908240:;
		{
			_147e094f0_julenv();
		}
		goto _match_end_4616903952;
		_case_end_4616908240:;
		_case_begin_4616906640:;
		{
			return false;
		}
		goto _match_end_4616903952;
		_case_end_4616906640:;
		_match_end_4616903952:;
	}
	return true;
}



inline void _147e094f0_init(void) {
	_137e06a60_COMPILER=jule::Str("clang", 5);
	_137e06a60_COMPILER_PATH=jule::Str("clang++", 7);
}



inline void _147e094f0_exit_err(jule::Str _15413_msg) {
	jule::outln(_15413_msg);
	_107ec3010_exit(1LL);
}



void entry_point(void) {
	julec_init();
	if (_117e7c8c0_ARGS.len() < 2LL) {
		_107ec3010_exit(0LL);
	}
	if (_147e094f0_process_command()) {
		return;
	}
	_137e06a60_compile_command();
}



inline jule::Int _137e06a60_system(jule::Str _6711_cmd) {
	return static_cast<jule::Int>(static_cast<jule::Int>(system(((char*)((&(_6711_cmd[0LL])))))));
}



inline std::tuple<jule::Str,jule::Str> _137e06a60_get_option(jule::Slice<jule::Str> _7115_args,jule::Int& _7133_i) {
	jule::Str _7153_content = jule::Str();
	jule::Str _7143_arg = jule::Str();
	_iter_begin_4616923920:;
	if (!(_7133_i < _7115_args.len())) { goto _iter_end_4616923920; }
	{
		_7143_arg=_7115_args[static_cast<jule::Int>(_7133_i)];
		jule::Int _7417_j = 0LL;
		jule::Slice<jule::I32> _7517_runes = static_cast<jule::Slice<jule::I32>>(_7143_arg);
		jule::I32 _7617_r = _7517_runes[static_cast<jule::Int>(_7417_j)];
		if (_7617_r != '-') {
			_7153_content+=_7143_arg;
			_7143_arg=jule::Str("", 0);
			goto _iter_next_4616923920;
		}
		(_7417_j)++;
		if (_7417_j >= _7517_runes.len()) {
			_147e094f0_exit_err(jule::Str("undefined syntax: ", 18) + _7143_arg);
		}
		_7617_r=_7517_runes[static_cast<jule::Int>(_7417_j)];
		if (_7617_r == '-') {
			(_7417_j)++;
			if (_7417_j >= _7517_runes.len()) {
				_147e094f0_exit_err(jule::Str("undefined syntax: ", 18) + _7143_arg);
			}
			_7617_r=_7517_runes[static_cast<jule::Int>(_7417_j)];
		}
		if ((!(_1106ec050_is_ident_rune(static_cast<jule::Str>(_7617_r))))) {
			_147e094f0_exit_err(jule::Str("undefined syntax: ", 18) + _7143_arg);
		}
		(_7417_j)++;
		_iter_begin_4616934688:;
		if (!(_7417_j < _7517_runes.len())) { goto _iter_end_4616934688; }
		{
			_7617_r=_7517_runes[static_cast<jule::Int>(_7417_j)];
			if (((((!(_1106ec050_is_space(_7617_r))) && (!(_1106ec050_is_letter(_7617_r)))) && (!(_1106ec050_is_decimal(static_cast<jule::U8>(_7617_r))))) && (_7617_r != '_')) && (_7617_r != '-')) {
				_147e094f0_exit_err(jule::Str("undefined syntax: ", 18) + static_cast<jule::Str>(_7517_runes.slice(static_cast<jule::Int>(_7417_j))));
			}
		}
		_iter_next_4616934688:;
		(_7417_j)++;
		goto _iter_begin_4616934688;
		_iter_end_4616934688:;
		goto _iter_end_4616923920;
	}
	_iter_next_4616923920:;
	(_7133_i)++;
	goto _iter_begin_4616923920;
	_iter_end_4616923920:;
	return std::make_tuple(_7143_arg,_7153_content);
}



inline jule::Str _137e06a60_get_option_value(jule::Slice<jule::Str> _11521_args,jule::Int& _11539_i) {
	(_11539_i)++;
	if (_11539_i < _11521_args.len()) {
		jule::Str _11813_arg = _11521_args[static_cast<jule::Int>(_11539_i)];
		return _11813_arg;
	}
	return jule::Str("", 0);
}



inline void _137e06a60_parse_out_option(jule::Slice<jule::Str> _12421_args,jule::Int& _12439_i) {
	jule::Str _1259_value = _137e06a60_get_option_value(_12421_args,_12439_i);
	if (_1259_value == jule::Str("", 0)) {
		_147e094f0_exit_err(jule::Str("missing option value: -o --out", 30));
	}
	_137e06a60_OUT=_1259_value;
}



inline void _137e06a60_parse_opt_option(jule::Slice<jule::Str> _13221_args,jule::Int& _13239_i) {
	jule::Str _1339_value = _137e06a60_get_option_value(_13221_args,_13239_i);
	if (_1339_value == jule::Str("", 0)) {
		_147e094f0_exit_err(jule::Str("missing option value: --opt", 27));
	}
	{
		auto _match_expr{ _1339_value };
		if (!((jule::Str("L0", 2)) == _match_expr)) { goto _case_end_4616958720; }
		_case_begin_4616958720:;
		{
			_1100e3f70_push_opt_level(0LLU);
		}
		goto _match_end_4616955424;
		_case_end_4616958720:;
		if (!((jule::Str("L1", 2)) == _match_expr)) { goto _case_end_4616958832; }
		_case_begin_4616958832:;
		{
			_1100e3f70_push_opt_level(1LLU);
		}
		goto _match_end_4616955424;
		_case_end_4616958832:;
		_case_begin_4616957184:;
		{
			_147e094f0_exit_err(jule::Str("invalid optimization level: ", 28) + _1339_value);
		}
		goto _match_end_4616955424;
		_case_end_4616957184:;
		_match_end_4616955424:;
	}
}



inline void _137e06a60_check_target_arch(jule::Str _14522_arch) {
	{
		auto __julec_range_expr = _127eb0d70_DISTARCH;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _137e06a60_distarch = *__julec_range_begin;
			_iter_begin_4616960944:;
			{
				if (_14522_arch == _137e06a60_distarch) {
					return;
				}
			}
			_iter_next_4616960944:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _137e06a60_distarch = *__julec_range_begin; goto _iter_begin_4616960944; }
			_iter_end_4616960944:;
		}
	}
	_147e094f0_exit_err(jule::Str("unsupported/undefined architecture: ", 36) + _14522_arch);
}



inline void _137e06a60_check_target_os(jule::Str _15520_os) {
	{
		auto __julec_range_expr = _127eb0d70_DISTOS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _137e06a60_distos = *__julec_range_begin;
			_iter_begin_4616964240:;
			{
				if (_15520_os == _137e06a60_distos) {
					return;
				}
			}
			_iter_next_4616964240:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _137e06a60_distos = *__julec_range_begin; goto _iter_begin_4616964240; }
			_iter_end_4616964240:;
		}
	}
	_147e094f0_exit_err(jule::Str("unsupported/undefined operating system: ", 40) + _15520_os);
}



inline void _137e06a60_parse_target_option(jule::Slice<jule::Str> _16524_args,jule::Int& _16542_i) {
	jule::Str _1669_value = _137e06a60_get_option_value(_16524_args,_16542_i);
	if (_1669_value == jule::Str("", 0)) {
		_147e094f0_exit_err(jule::Str("missing option value: --target", 30));
	}
	jule::Slice<jule::Str> _1719_parts = _1669_value.split(jule::Str("-", 1),-1LL);
	if (_1719_parts.len() != 2LL) {
		_147e094f0_exit_err(jule::Str("undefined platform target format: ", 34) + _1669_value);
	}
	jule::Str _17610_os = _1719_parts[0LL];
	jule::Str _17614_arch = _1719_parts[1LL];
	std::tie(_17610_os,_17614_arch) = std::make_tuple(_1719_parts[0LL],_1719_parts[1LL]);
	if (_17610_os != jule::Str("native", 6)) {
		_137e06a60_check_target_os(_17610_os);
		_127ebf120_OS=_17610_os;
	}
	if (_17614_arch != jule::Str("native", 6)) {
		_137e06a60_check_target_arch(_17614_arch);
		_127ebf120_ARCH=_17614_arch;
	}
}



inline void _137e06a60_parse_compiler_option(jule::Slice<jule::Str> _18926_args,jule::Int& _18944_i) {
	jule::Str _1909_value = _137e06a60_get_option_value(_18926_args,_18944_i);
	{
		auto _match_expr{ _1909_value };
		if (!((jule::Str("", 0)) == _match_expr)) { goto _case_end_4616983312; }
		_case_begin_4616983312:;
		{
			_147e094f0_exit_err(jule::Str("missing option value: --compiler", 32));
		}
		goto _match_end_4616981184;
		_case_end_4616983312:;
		if (!((jule::Str("clang", 5)) == _match_expr)) { goto _case_end_4616984272; }
		_case_begin_4616984272:;
		{
			_137e06a60_COMPILER=jule::Str("clang", 5);
			_137e06a60_COMPILER_PATH=jule::Str("clang++", 7);
		}
		goto _match_end_4616981184;
		_case_end_4616984272:;
		if (!((jule::Str("gcc", 3)) == _match_expr)) { goto _case_end_4616984384; }
		_case_begin_4616984384:;
		{
			_137e06a60_COMPILER=jule::Str("gcc", 3);
			_137e06a60_COMPILER_PATH=jule::Str("g++", 3);
		}
		goto _match_end_4616981184;
		_case_end_4616984384:;
		_case_begin_4616982224:;
		{
			_147e094f0_exit_err(jule::Str("invalid option value for --compiler: ", 37) + _1909_value);
		}
		goto _match_end_4616981184;
		_case_end_4616982224:;
		_match_end_4616981184:;
	}
}



inline jule::Str _137e06a60_parse_options(jule::Slice<jule::Str> _20818_args) {
	jule::Str _20913_cmd = jule::Str("", 0);
	jule::Int _21313_i = 1LL;
	_iter_begin_4616989024:;
	if (!(_21313_i < _20818_args.len())) { goto _iter_end_4616989024; }
	{
		jule::Str _21514_arg;
		jule::Str _21519_content;
		std::tie(_21514_arg,_21519_content) = _137e06a60_get_option(_20818_args,_21313_i);
		_20913_cmd+=_21519_content;
		{
			auto _match_expr{ _21514_arg };
			if (!((jule::Str("", 0)) == _match_expr)) { goto _case_end_4616994624; }
			goto _match_end_4616990000;
			_case_end_4616994624:;
			if (!((jule::Str("-o", 2)) == _match_expr || (jule::Str("--out", 5)) == _match_expr)) { goto _case_end_4616992832; }
			_case_begin_4616992832:;
			{
				_137e06a60_parse_out_option(_20818_args,_21313_i);
			}
			goto _match_end_4616990000;
			_case_end_4616992832:;
			if (!((jule::Str("-t", 2)) == _match_expr || (jule::Str("--transpile", 11)) == _match_expr)) { goto _case_end_4616992944; }
			_case_begin_4616992944:;
			{
				_137e06a60_MODE=1LLU;
			}
			goto _match_end_4616990000;
			_case_end_4616992944:;
			if (!((jule::Str("-c", 2)) == _match_expr || (jule::Str("--compile", 9)) == _match_expr)) { goto _case_end_4616993056; }
			_case_begin_4616993056:;
			{
				_137e06a60_MODE=0LLU;
			}
			goto _match_end_4616990000;
			_case_end_4616993056:;
			if (!((jule::Str("--compiler", 10)) == _match_expr)) { goto _case_end_4616994784; }
			_case_begin_4616994784:;
			{
				_137e06a60_parse_compiler_option(_20818_args,_21313_i);
			}
			goto _match_end_4616990000;
			_case_end_4616994784:;
			if (!((jule::Str("--opt-copy", 10)) == _match_expr)) { goto _case_end_4616994896; }
			_case_begin_4616994896:;
			{
				_1100e3f70_OPTIMIZATIONS=jule::append(_1100e3f70_OPTIMIZATIONS,jule::Slice<jule::Str>({jule::Str("--opt-copy", 10)}));
			}
			goto _match_end_4616990000;
			_case_end_4616994896:;
			if (!((jule::Str("--opt-deadcode", 14)) == _match_expr)) { goto _case_end_4616995008; }
			_case_begin_4616995008:;
			{
				_1100e3f70_OPTIMIZATIONS=jule::append(_1100e3f70_OPTIMIZATIONS,jule::Slice<jule::Str>({jule::Str("--opt-deadcode", 14)}));
			}
			goto _match_end_4616990000;
			_case_end_4616995008:;
			if (!((jule::Str("--opt-append", 12)) == _match_expr)) { goto _case_end_4616995120; }
			_case_begin_4616995120:;
			{
				_1100e3f70_OPTIMIZATIONS=jule::append(_1100e3f70_OPTIMIZATIONS,jule::Slice<jule::Str>({jule::Str("--opt-append", 12)}));
			}
			goto _match_end_4616990000;
			_case_end_4616995120:;
			if (!((jule::Str("--opt", 5)) == _match_expr)) { goto _case_end_4616995232; }
			_case_begin_4616995232:;
			{
				_137e06a60_parse_opt_option(_20818_args,_21313_i);
			}
			goto _match_end_4616990000;
			_case_end_4616995232:;
			if (!((jule::Str("--target", 8)) == _match_expr)) { goto _case_end_4616995344; }
			_case_begin_4616995344:;
			{
				_137e06a60_parse_target_option(_20818_args,_21313_i);
			}
			goto _match_end_4616990000;
			_case_end_4616995344:;
			_case_begin_4616991984:;
			{
				_147e094f0_exit_err(jule::Str("undefined option: ", 18) + _21514_arg);
			}
			goto _match_end_4616990000;
			_case_end_4616991984:;
			_match_end_4616990000:;
		}
	}
	_iter_next_4616989024:;
	(_21313_i)++;
	goto _iter_begin_4616989024;
	_iter_end_4616989024:;
	_20913_cmd=_20913_cmd.trim(jule::Str(" \t\r\n\v", 5));
	return _20913_cmd;
}



inline void _137e06a60_write_output(jule::Str _25517_path,jule::Str _25528_content) {
	jule::Str _2569_dir = _117e1d320_dir(_25517_path);
	jule::Int _25817_err;
	std::tie(std::ignore,_25817_err) = _1104fc7d0_stat(_2569_dir);
	if (_25817_err != 0LLU) {
		jule::Int _26013_err = _11060cca0_create_dir(_2569_dir);
		if (_26013_err != 0LLU) {
			_147e094f0_exit_err(jule::Str("a problem occurs when code generation", 37));
		}
	}
	jule::Ref<_1104f8ac0_File> _26614_f;
	std::tie(_26614_f,_25817_err) = _110471730_open(_25517_path,1538LL,438LL);
	if (_25817_err != 0LLU) {
		_147e094f0_exit_err(jule::Str("a problem occurs when code generation", 37));
	}
	std::tie(std::ignore,_25817_err) = _26614_f->_method_write(static_cast<jule::Slice<jule::U8>>(_25528_content));
	if (_25817_err != 0LLU) {
		_147e094f0_exit_err(jule::Str("a problem occurs when code generation", 37));
	}
	_26614_f->_method_close();
}



inline void _137e06a60_clear_objects(void) {
	if (_110471730_remove_file(_137e06a60_get_compile_path()) != 0LLU) {
		jule::outln(jule::Str("a problem occurs when object cleaning", 37));
		return;
	}
	_11060cca0_remove_dir(_137e06a60_OUT_DIR);
}



inline void _137e06a60_compile_ir(jule::Str _29215_compiler,jule::Str _29230_compiler_cmd) {
	jule::Int _2939_status = _137e06a60_system((_29215_compiler + jule::Str(" ", 1)) + _29230_compiler_cmd);
	if (_2939_status != 0LL) {
		jule::out(jule::Str("external compiler failed with status code: ", 43));
		jule::outln(_2939_status);
		_147e094f0_exit_err(jule::Str("", 0));
	}
	_137e06a60_clear_objects();
}



inline void _137e06a60_do_spell(jule::Str _30413_obj,jule::Str _30423_compiler,jule::Str _30438_compiler_cmd) {
	jule::Str _3059_path = _137e06a60_get_compile_path();
	_137e06a60_write_output(_3059_path,_30413_obj);
	{
		auto _match_expr{ _137e06a60_MODE };
		if (!((0LLU) == _match_expr)) { goto _case_end_4617027920; }
		_case_begin_4617027920:;
		{
			_137e06a60_compile_ir(_30423_compiler,_30438_compiler_cmd);
		}
		goto _match_end_4617026288;
		_case_end_4617027920:;
		_match_end_4617026288:;
	}
}



inline void _137e06a60_check_mode(void) {
	if ((_137e06a60_MODE != 1LLU) && (_137e06a60_MODE != 0LLU)) {
		jule::outln(_127e05da0_logf(jule::Str("\"@\" is invalid value for the \"@\" key", 36),jule::Slice<jule::Any>({jule::Any(_137e06a60_MODE),jule::Any(jule::Str("mode", 4))})));
		_147e094f0_exit_err(jule::Str("", 0));
	}
}



inline void _137e06a60_check_compiler(void) {
	if ((_137e06a60_COMPILER != jule::Str("gcc", 3)) && (_137e06a60_COMPILER != jule::Str("clang", 5))) {
		jule::outln(_127e05da0_logf(jule::Str("\"@\" is invalid value for the \"@\" key", 36),jule::Slice<jule::Any>({jule::Any(_137e06a60_COMPILER),jule::Any(jule::Str("compiler", 8))})));
		_147e094f0_exit_err(jule::Str("", 0));
	}
}



inline void _137e06a60_set(void) {
	_137e06a60_check_mode();
	_137e06a60_check_compiler();
}



inline void _137e06a60_print_logs(jule::Slice<_127e05da0_Log>& _33416_logs) {
	{
		auto __julec_range_expr = _33416_logs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_127e05da0_Log _137e06a60_l = *__julec_range_begin;
			_iter_begin_4617037440:;
			{
				_137e06080_Logger::_static_method_log(_137e06a60_l);
			}
			_iter_next_4617037440:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _137e06a60_l = *__julec_range_begin; goto _iter_begin_4617037440; }
			_iter_end_4617037440:;
		}
	}
}



inline jule::Bool _137e06a60_is_cpp_source_file(jule::Str _34023_path) {
	jule::Int _3419_offset = _34023_path.rfind(jule::Str(".", 1));
	if (_3419_offset == -1LL) {
		return false;
	}
	return _127e05470_is_valid_cpp_ext(_34023_path.slice(static_cast<jule::Int>(_3419_offset)));
}



inline std::tuple<jule::Str,jule::Str> _137e06a60_gen_compile_cmd(jule::Str _34920_source_path,jule::Ref<_110254280_IR> _34938_ir) {
	jule::Str _3509_compiler = _137e06a60_COMPILER_PATH;
	
	
	
	jule::Str _3559_SET_STD = jule::Str("--std=", 6) + _137e06a60_CPP_STD;
	jule::Str _35713_cmd = jule::Str("-O0 ", 4);
	{
		auto _match_expr{ _137e06a60_COMPILER };
		if (!((jule::Str("gcc", 3)) == _match_expr)) { goto _case_end_4617053904; }
		_case_begin_4617053904:;
		{
			_35713_cmd+=jule::Str("-w ", 3);
		}
		goto _match_end_4617052448;
		_case_end_4617053904:;
		if (!((jule::Str("clang", 5)) == _match_expr)) { goto _case_end_4617054016; }
		_case_begin_4617054016:;
		{
			_35713_cmd+=jule::Str("-Wno-everything ", 16);
		}
		goto _match_end_4617052448;
		_case_end_4617054016:;
		_match_end_4617052448:;
	}
	_35713_cmd+=_3559_SET_STD + jule::Str(" ", 1);
	{
		auto __julec_range_expr = _34938_ir->_field_passes;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _137e06a60_pass = *__julec_range_begin;
			_iter_begin_4617056320:;
			{
				_35713_cmd+=_137e06a60_pass + jule::Str(" ", 1);
			}
			_iter_next_4617056320:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _137e06a60_pass = *__julec_range_begin; goto _iter_begin_4617056320; }
			_iter_end_4617056320:;
		}
	}
	{
		auto __julec_range_expr = _34938_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_110e4edc0_ImportInfo> _137e06a60_u = *__julec_range_begin;
			_iter_begin_4617057328:;
			{
				if (_137e06a60_u->_field_cpp_linked && _137e06a60_is_cpp_source_file(_137e06a60_u->_field_path)) {
					_35713_cmd+=_137e06a60_u->_field_path + jule::Str(" ", 1);
				}
			}
			_iter_next_4617057328:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _137e06a60_u = *__julec_range_begin; goto _iter_begin_4617057328; }
			_iter_end_4617057328:;
		}
	}
	if (_137e06a60_OUT != jule::Str("", 0)) {
		_35713_cmd+=(jule::Str("-o ", 3) + _137e06a60_OUT) + jule::Str(" ", 1);
	}
	_35713_cmd+=_34920_source_path;
	return std::make_tuple(_3509_compiler,_35713_cmd);
}



inline jule::Str _137e06a60_get_compile_path(void) {
	return _117e1d320_join(jule::Slice<jule::Str>({_137e06a60_OUT_DIR,_137e06a60_OUT_NAME}));
}



inline void _137e06a60_apply_target_independent_optimizations(jule::Ref<_110254280_IR> _39847_ir) {
	if (_1100e3f70_is_opt_enabled(jule::Str("--opt-deadcode", 14))) {
		_11034cb30_eliminate_dead_code(_39847_ir);
	}
}



inline void _137e06a60_compile_command(void) {
	jule::Str _4069_path = _137e06a60_parse_options(_117e7c8c0_ARGS);
	if (_4069_path == jule::Str("", 0)) {
		_147e094f0_exit_err(_127e05da0_logf(jule::Str("missing compile path", 20),jule::Slice<jule::Any>({})));
	}
	jule::Ref<_11054d9e0_Status> _41210_inf;
	jule::Int _41215_err;
	std::tie(_41210_inf,_41215_err) = _1104fc7d0_stat(_127ebf120_PATH_STDLIB);
	if ((_41215_err != 0LLU) || (!(_41210_inf->_method_is_dir()))) {
		_147e094f0_exit_err(_127e05da0_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>({})));
	}
	_137e06a60_set();
	jule::Ref<_110254280_IR> _41914_ir;
	jule::Slice<_127e05da0_Log> _41918_logs;
	std::tie(_41914_ir,_41918_logs) = _110254280_IR::_static_method_build(_4069_path);
	if ((!(jule::real(_41914_ir))) && (_41918_logs == nullptr)) {
		_147e094f0_exit_err(_127e05da0_logf(jule::Str("there is no Jule source code in this package: @", 47),jule::Slice<jule::Any>({jule::Any(_4069_path)})));
	}
	if (_41918_logs != nullptr) {
		_137e06a60_print_logs(_41918_logs);
		_147e094f0_exit_err(jule::Str("", 0));
	}
	
	jule::Ref<_11072eb20_Fn> _43113_f = _41914_ir->_field_main->_method_find_fn(jule::Str("main", 4),false);
	if ((!(jule::real(_43113_f)))) {
		_147e094f0_exit_err(_127e05da0_logf(jule::Str("entry point (main) function is not defined", 42),jule::Slice<jule::Any>({})));
	}
	_43113_f->_field_statically=true;
	_43113_f=_41914_ir->_field_main->_method_find_fn(jule::Str("init", 4),false);
	if (jule::real(_43113_f)) {
		_43113_f->_field_statically=true;
	}
	_137e06a60_apply_target_independent_optimizations(_41914_ir);
	jule::Str _44410_compiler;
	jule::Str _44420_compiler_cmd;
	std::tie(_44410_compiler,_44420_compiler_cmd) = _137e06a60_gen_compile_cmd(_137e06a60_get_compile_path(),_41914_ir);
	jule::Str _44613_obj = _111b4cab0_gen(_41914_ir);
	_111b4cab0_append_standard(_44613_obj,_44410_compiler,_44420_compiler_cmd);
	_137e06a60_do_spell(_44613_obj,_44410_compiler,_44420_compiler_cmd);
}




void __jule_call_initializers(void) {
	_117e7c8c0_init();
	_127ebf120_init();
	_1113198e0_init();
	_11020ca90_init();
	_147e094f0_init();
}

int main(int argc, char *argv[], char *envp[]) {
    std::set_terminate(&jule::terminate_handler);
    jule::set_sig_handler(jule::signal_handler);
    jule::setup_command_line_args(argc, argv);
    jule::setup_environment_variables(envp);

    __jule_call_initializers();
    entry_point();

    return EXIT_SUCCESS;
}