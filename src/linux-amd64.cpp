// Auto generated by JuleC.
// JuleC version: beta 0.0.4 master
// Date: 22/8/2023 19.42 (DD/MM/YYYY) (HH.MM)
//
// Recommended Compile Command;
// clang++ -O0 -Wno-everything --std=c++17 dist/ir.cpp

#include "api/jule.hpp"                                   

#include <dirent.h>
#include <fcntl.h>
#include <unistd.h>
#include <cstdio>
#include <sys/stat.h>
#include "std/sys/syscall_unix.hpp"                                   
#include "src/julec/julec.hpp"                                   
#include "std/vector/alloc.hpp"                                   
#include "src/julec/obj/cxx/cxx.hpp"                                   

struct _119162660_Importer;
struct _104a21a10_Kind;
struct _10459ee60_Lookup;
struct _104e1b930_RangeSetter;

struct _148624eb0_AnsiEscape;


struct _148624eb0_Logger;


struct _149060fe0_LazyBuff;


struct _108d53590_bits_error;


struct _11863fd30_FloatInfo;


struct _11863fd30_DecimalSlice;


struct _14873e050_LeftCheat;


struct _14873e050_Decimal;


struct _1486379e0_Log;


struct _14877ba40_DirEntry;


struct _1487caab0_File;


struct _1487ca390_Status;


struct _103458e80_accept_range;


struct _108e15ff0_Token;


struct _108e58b50_File;


struct _108e171c0_KindPair;


struct _108e171c0_Lex;


struct _1487f02c0_Ast;


struct _1487f5920_CommentGroup;


struct _1487f5920_NamespaceTypeDecl;


struct _1487f5920_RefTypeDecl;


struct _1487f5920_SlcTypeDecl;


struct _1487f5920_TupleTypeDecl;


struct _1487f5920_PtrTypeDecl;


struct _1487f5920_ArrTypeDecl;


struct _1487f5920_MapTypeDecl;


struct _1487f5920_RetTypeDecl;


struct _1487f5920_TupleExpr;


struct _1487f5920_LitExpr;


struct _1487f5920_UnsafeExpr;


struct _1487f5920_IdentExpr;


struct _1487f5920_UnaryExpr;


struct _1487f5920_VariadicExpr;


struct _1487f5920_CastExpr;


struct _1487f5920_NsSelectionExpr;


struct _1487f5920_SubIdentExpr;


struct _1487f5920_BinopExpr;


struct _1487f5920_FieldExprPair;


struct _1487f5920_StructLit;


struct _1487f5920_BraceLit;


struct _1487f5920_KeyValPair;


struct _1487f5920_SliceExpr;


struct _1487f5920_IndexingExpr;


struct _1487f5920_SlicingExpr;


struct _1487f5920_LabelSt;


struct _1487f5920_FallSt;


struct _1487f5920_AssignSt;


struct _1487f5920_ScopeTree;


struct _1487f5920_RetSt;


struct _1487f5920_Iter;


struct _1487f5920_WhileKind;


struct _1487f5920_RangeKind;


struct _1487f5920_Conditional;


struct _1487f5920_MatchCase;


struct _1190cb490_FileInfo;


struct _1190cb490_PackageInfo;


struct _1190d5970_Stmt;


struct _1190d5970_ScopeParser;


struct _1190cb760_CallData;


struct _1190cb760_Precedencer;


struct _1190cb760_ExprBuilder;


struct _138657c70_Parser;


struct _103796900_TypeBuilder;


struct _104c409b0_Const;



struct _1037370d0_FieldIns;


struct _1037370d0_StructIns;


struct _1037649f0_RetType;


struct _1037649f0_ParamIns;


struct _1037649f0_FnIns;


struct _1036da950_ReferenceStack;


struct _1036da950_SymbolBuilder;


struct _104180810_Scope;


struct _104180810_If;


struct _104180810_Else;


struct _104180810_Conditional;


struct _104180810_InfIter;


struct _104180810_WhileIter;


struct _104180810_RangeIter;


struct _104180810_ContSt;


struct _104180810_BreakSt;


struct _104180810_Label;


struct _104180810_GotoSt;


struct _104180810_Postfix;


struct _104180810_Assign;


struct _104180810_MultiAssign;


struct _104180810_Match;


struct _104180810_Case;


struct _104180810_FallSt;


struct _104180810_RetSt;


struct _104180810_Recover;


struct _104180810_ScopeGoto;


struct _104180810_ScopeChecker;


struct _11911f320_BinopExprModel;


struct _11911f320_UnaryExprModel;


struct _11911f320_GetRefPtrExprModel;


struct _11911f320_StructArgExprModel;


struct _11911f320_StructLitExprModel;


struct _11911f320_AllocStructLitExprModel;


struct _11911f320_CastingExprModel;


struct _11911f320_FnCallExprModel;


struct _11911f320_SliceExprModel;


struct _11911f320_IndexigExprModel;


struct _11911f320_AnonFnExprModel;


struct _11911f320_KeyValPairExprModel;


struct _11911f320_MapExprModel;


struct _11911f320_SlicingExprModel;


struct _11911f320_TraitSubIdentExprModel;


struct _11911f320_StructSubIdentExprModel;


struct _11911f320_StructStaticIdentExprModel;


struct _11911f320_ArrayExprModel;


struct _11911f320_CommonIdentExprModel;


struct _11911f320_CommonSubIdentExprModel;


struct _11911f320_TupleExprModel;


struct _11911f320_BuiltinOutCallExprModel;


struct _11911f320_BuiltinOutlnCallExprModel;


struct _11911f320_BuiltinCloneCallExprModel;


struct _11911f320_BuiltinNewCallExprModel;


struct _11911f320_BuiltinRealCallExprModel;


struct _11911f320_BuiltinDropCallExprModel;


struct _11911f320_BuiltinPanicCallExprModel;


struct _11911f320_BuiltinMakeCallExprModel;


struct _11911f320_BuiltinAppendCallExprModel;


struct _11911f320_BuiltinErrorTraitSubIdentExprModel;


struct _11911f320_SizeofExprModel;


struct _11911f320_AlignofExprModel;


struct _11911f320_RuneExprModel;


struct _11911f320_ExplicitDerefExprModel;


struct _119162660_Package;


struct _119177e90_Sema;


struct _1044463d0_DynamicTypeAnnotation;


struct _1044463d0_StructLitChecker;


struct _1044463d0_RangeChecker;


struct _1191dcd40_SymbolTable;


struct _1191dc300_Data;


struct _1191dc300_Value;


struct _1191dc300_Eval;


struct _104a21a10_TypeKind;


struct _104a21a10_TypeSymbol;


struct _104a21a10_Prim;


struct _104a21a10_Ref;


struct _104a21a10_Slc;


struct _104a21a10_Tuple;


struct _104a21a10_Map;


struct _104a21a10_Arr;


struct _104a21a10_Ptr;


struct _104a21a10_Referencer;


struct _108e14cb0_PlainImporter;


struct _108db2720_IR;


struct _1086aad20_ScopeDeadCode;


struct _104e1b930_IndexRangeSetter;


struct _104e1b930_MapRangeSetter;


struct _1190c5fe0_OrderedDecls;


struct _104a21a10_TypeChecker;


struct _104a21a10_TypeAlias;


struct _1191dc300_BinopSolver;


struct _1044463d0_RetTypeChecker;


struct _1044463d0_FnCallArgChecker;


struct _1044463d0_AssignTypeChecker;


struct _1044463d0_TypeCompatibilityChecker;


struct _104598e40_Var;


struct _119162660_ImportInfo;


struct _104180810_ScopeLabel;


struct _10417abf0_Impl;


struct _1036dad50_Enum;


struct _1036dad50_EnumItem;


struct _1036e5da0_Trait;


struct _1036da950_Pass;


struct _1037649f0_Fn;


struct _1037649f0_Param;


struct _1037370d0_Struct;


struct _1037370d0_Field;


struct _149043a20_AssignInfo;


struct _1487f5920_Impl;


struct _1487f5920_TraitDecl;


struct _1487f5920_StructDecl;


struct _1487f5920_FieldDecl;


struct _1487f5920_EnumDecl;


struct _1487f5920_EnumItemDecl;


struct _1487f5920_UseDecl;


struct _1487f5920_Case;


struct _1487f5920_TypeAliasDecl;


struct _1487f5920_Else;


struct _1487f5920_If;


struct _1487f5920_ContSt;


struct _1487f5920_BreakSt;


struct _1487f5920_VarDecl;


struct _1487f5920_FnDecl;


struct _1487f5920_ParamDecl;


struct _1487f5920_AssignLeft;


struct _1487f5920_GotoSt;


struct _1487f5920_GenericDecl;


struct _1487f5920_FnCallExpr;


struct _1487f5920_Expr;


struct _1487f5920_IdentTypeDecl;


struct _1487f5920_TypeDecl;


struct _1487f5920_Directive;


struct _1487f5920_Comment;


struct _1487f5920_Node;

struct _119162660_Importer {
	virtual ~_119162660_Importer(void) {}

	virtual jule::Ref<_119162660_ImportInfo> _method_get_import(jule::Str _1633_path) { return {}; }
	virtual std::tuple<jule::Slice<jule::Ref<_1487f02c0_Ast>>,jule::Slice<_1486379e0_Log>> _method_import_package(jule::Str _2037_path) { return {}; }
	virtual void _method_imported(jule::Ref<_119162660_ImportInfo>) {}
};

struct _104a21a10_Kind {
	virtual ~_104a21a10_Kind(void) {}

	virtual jule::Str _method_to_str(void) { return {}; }
	virtual jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind> _4621_other) { return {}; }
};

struct _10459ee60_Lookup {
	virtual ~_10459ee60_Lookup(void) {}

	virtual jule::Ref<_119162660_ImportInfo> _method_find_package(jule::Str _935_ident) { return {}; }
	virtual jule::Ref<_119162660_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)> _1337_selector) { return {}; }
	virtual jule::Ref<_104598e40_Var> _method_find_var(jule::Str _1731_ident,jule::Bool _1743_cpp_linked) { return {}; }
	virtual jule::Ref<_104a21a10_TypeAlias> _method_find_type_alias(jule::Str _2138_ident,jule::Bool _2150_cpp_linked) { return {}; }
	virtual jule::Ref<_1037370d0_Struct> _method_find_struct(jule::Str _2534_ident,jule::Bool _2546_cpp_linked) { return {}; }
	virtual jule::Ref<_1037649f0_Fn> _method_find_fn(jule::Str _2930_ident,jule::Bool _2942_cpp_linked) { return {}; }
	virtual jule::Ref<_1036e5da0_Trait> _method_find_trait(jule::Str _3333_ident) { return {}; }
	virtual jule::Ref<_1036dad50_Enum> _method_find_enum(jule::Str _3732_ident) { return {}; }
};

struct _104e1b930_RangeSetter {
	virtual ~_104e1b930_RangeSetter(void) {}

	virtual jule::Str _method_setup_vars(jule::Ref<_104598e40_Var> _3929_key_a,jule::Ref<_104598e40_Var> _3946_key_b) { return {}; }
	virtual jule::Str _method_next_steps(jule::Ref<_104598e40_Var> _4029_key_a,jule::Ref<_104598e40_Var> _4046_key_b,jule::Str _4059_begin) { return {}; }
};


struct _148624eb0_AnsiEscape {
	jule::Ref<_148624eb0_AnsiEscape> self{};

	~_148624eb0_AnsiEscape(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_148624eb0_AnsiEscape(void) { this->self = jule::Ref<_148624eb0_AnsiEscape>::make(this, nullptr); }

	static inline void _static_method_reset(void);


	static inline void _static_method_print(jule::Str,jule::Str);


	inline bool operator==(const _148624eb0_AnsiEscape &_Src) const { return true; }

	inline bool operator!=(const _148624eb0_AnsiEscape &_Src) const { return !this->operator==(_Src); }
};


struct _148624eb0_Logger {
	jule::Ref<_148624eb0_Logger> self{};

	~_148624eb0_Logger(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_148624eb0_Logger(void) { this->self = jule::Ref<_148624eb0_Logger>::make(this, nullptr); }

	static inline void _static_method_log_flat(_1486379e0_Log&);


	static inline void _static_method_log_error(_1486379e0_Log&);


	static inline void _static_method_log(_1486379e0_Log&);


	inline bool operator==(const _148624eb0_Logger &_Src) const { return true; }

	inline bool operator!=(const _148624eb0_Logger &_Src) const { return !this->operator==(_Src); }
};


struct _149060fe0_LazyBuff {
	jule::Ref<_149060fe0_LazyBuff> self{};

	jule::Str _field_path{jule::Str()};
	jule::Slice<jule::U8> _field_buff{jule::Slice<jule::U8>()};
	jule::Int _field_w{jule::Int()};
	jule::Str _field_vol_and_path{jule::Str()};
	jule::Int _field_vol_len{jule::Int()};


	_149060fe0_LazyBuff(jule::Str __param_path, jule::Slice<jule::U8> __param_buff, jule::Int __param_w, jule::Str __param_vol_and_path, jule::Int __param_vol_len) {
		this->self = jule::Ref<_149060fe0_LazyBuff>::make(this, nullptr);

		this->_field_path = __param_path;
		this->_field_buff = __param_buff;
		this->_field_w = __param_w;
		this->_field_vol_and_path = __param_vol_and_path;
		this->_field_vol_len = __param_vol_len;
	}

	~_149060fe0_LazyBuff(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_149060fe0_LazyBuff(void) { this->self = jule::Ref<_149060fe0_LazyBuff>::make(this, nullptr); }

	inline jule::U8 _method_index(jule::Int);


	inline void _method_append(jule::U8);


	inline jule::Str _method_string(void);


	inline bool operator==(const _149060fe0_LazyBuff &_Src) const {
		return 
			this->_field_path == _Src._field_path &&
			this->_field_buff == _Src._field_buff &&
			this->_field_w == _Src._field_w &&
			this->_field_vol_and_path == _Src._field_vol_and_path &&
			this->_field_vol_len == _Src._field_vol_len;
	}

	inline bool operator!=(const _149060fe0_LazyBuff &_Src) const { return !this->operator==(_Src); }
};


struct _108d53590_bits_error: public jule::Error {
	jule::Ref<_108d53590_bits_error> self{};

	jule::Str _field_message{jule::Str()};


	_108d53590_bits_error(jule::Str __param_message) {
		this->self = jule::Ref<_108d53590_bits_error>::make(this, nullptr);

		this->_field_message = __param_message;
	}

	~_108d53590_bits_error(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_108d53590_bits_error(void) { this->self = jule::Ref<_108d53590_bits_error>::make(this, nullptr); }

	inline jule::Str _method_error(void);


	inline bool operator==(const _108d53590_bits_error &_Src) const {
		return 
			this->_field_message == _Src._field_message;
	}

	inline bool operator!=(const _108d53590_bits_error &_Src) const { return !this->operator==(_Src); }
};


struct _11863fd30_FloatInfo {
	jule::Ref<_11863fd30_FloatInfo> self{};

	jule::Uint _field_mantbits{jule::Uint()};
	jule::Uint _field_expbits{jule::Uint()};
	jule::Int _field_bias{jule::Int()};


	_11863fd30_FloatInfo(jule::Uint __param_mantbits, jule::Uint __param_expbits, jule::Int __param_bias) {
		this->self = jule::Ref<_11863fd30_FloatInfo>::make(this, nullptr);

		this->_field_mantbits = __param_mantbits;
		this->_field_expbits = __param_expbits;
		this->_field_bias = __param_bias;
	}

	~_11863fd30_FloatInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11863fd30_FloatInfo(void) { this->self = jule::Ref<_11863fd30_FloatInfo>::make(this, nullptr); }

	inline bool operator==(const _11863fd30_FloatInfo &_Src) const {
		return 
			this->_field_mantbits == _Src._field_mantbits &&
			this->_field_expbits == _Src._field_expbits &&
			this->_field_bias == _Src._field_bias;
	}

	inline bool operator!=(const _11863fd30_FloatInfo &_Src) const { return !this->operator==(_Src); }
};


struct _11863fd30_DecimalSlice {
	jule::Ref<_11863fd30_DecimalSlice> self{};

	jule::Slice<jule::U8> _field_d{jule::Slice<jule::U8>()};
	jule::Int _field_nd{jule::Int()};
	jule::Int _field_dp{jule::Int()};
	jule::Bool _field_neg{jule::Bool()};


	_11863fd30_DecimalSlice(jule::Slice<jule::U8> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg) {
		this->self = jule::Ref<_11863fd30_DecimalSlice>::make(this, nullptr);

		this->_field_d = __param_d;
		this->_field_nd = __param_nd;
		this->_field_dp = __param_dp;
		this->_field_neg = __param_neg;
	}

	~_11863fd30_DecimalSlice(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11863fd30_DecimalSlice(void) { this->self = jule::Ref<_11863fd30_DecimalSlice>::make(this, nullptr); }

	inline bool operator==(const _11863fd30_DecimalSlice &_Src) const {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg;
	}

	inline bool operator!=(const _11863fd30_DecimalSlice &_Src) const { return !this->operator==(_Src); }
};


struct _14873e050_LeftCheat {
	jule::Ref<_14873e050_LeftCheat> self{};

	jule::Int _field_delta{jule::Int()};
	jule::Str _field_cutoff{jule::Str()};


	_14873e050_LeftCheat(jule::Int __param_delta, jule::Str __param_cutoff) {
		this->self = jule::Ref<_14873e050_LeftCheat>::make(this, nullptr);

		this->_field_delta = __param_delta;
		this->_field_cutoff = __param_cutoff;
	}

	~_14873e050_LeftCheat(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_14873e050_LeftCheat(void) { this->self = jule::Ref<_14873e050_LeftCheat>::make(this, nullptr); }

	inline bool operator==(const _14873e050_LeftCheat &_Src) const {
		return 
			this->_field_delta == _Src._field_delta &&
			this->_field_cutoff == _Src._field_cutoff;
	}

	inline bool operator!=(const _14873e050_LeftCheat &_Src) const { return !this->operator==(_Src); }
};


struct _14873e050_Decimal {
	jule::Ref<_14873e050_Decimal> self{};

	jule::Array<jule::U8,800> _field_d{jule::Array<jule::U8,800>()};
	jule::Int _field_nd{jule::Int()};
	jule::Int _field_dp{jule::Int()};
	jule::Bool _field_neg{jule::Bool()};
	jule::Bool _field_trunc{jule::Bool()};


	_14873e050_Decimal(jule::Array<jule::U8,800> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg, jule::Bool __param_trunc) {
		this->self = jule::Ref<_14873e050_Decimal>::make(this, nullptr);

		this->_field_d = __param_d;
		this->_field_nd = __param_nd;
		this->_field_dp = __param_dp;
		this->_field_neg = __param_neg;
		this->_field_trunc = __param_trunc;
	}

	~_14873e050_Decimal(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_14873e050_Decimal(void) { this->self = jule::Ref<_14873e050_Decimal>::make(this, nullptr); }

	inline jule::Bool _method_set(jule::Str);


	inline std::tuple<jule::U64,jule::Bool> _method_float_bits(_11863fd30_FloatInfo&);


	inline void _method_assign(jule::U64);


	inline void _method_shift(jule::Int);


	inline void _method_round_down(jule::Int);


	inline void _method_round_up(jule::Int);


	inline void _method_round(jule::Int);


	inline jule::U64 _method_rounded_integer(void);


	inline bool operator==(const _14873e050_Decimal &_Src) const {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg &&
			this->_field_trunc == _Src._field_trunc;
	}

	inline bool operator!=(const _14873e050_Decimal &_Src) const { return !this->operator==(_Src); }
};


struct _1486379e0_Log {
	jule::Ref<_1486379e0_Log> self{};

	jule::Int _field_kind{0LLU};
	jule::Int _field_row{jule::Int()};
	jule::Int _field_column{jule::Int()};
	jule::Str _field_path{jule::Str()};
	jule::Str _field_text{jule::Str()};
	jule::Str _field_line{jule::Str()};
	jule::Str _field_suggestion{jule::Str()};


	_1486379e0_Log(jule::Int __param_kind, jule::Int __param_row, jule::Int __param_column, jule::Str __param_path, jule::Str __param_text, jule::Str __param_line, jule::Str __param_suggestion) {
		this->self = jule::Ref<_1486379e0_Log>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_row = __param_row;
		this->_field_column = __param_column;
		this->_field_path = __param_path;
		this->_field_text = __param_text;
		this->_field_line = __param_line;
		this->_field_suggestion = __param_suggestion;
	}

	~_1486379e0_Log(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1486379e0_Log(void) { this->self = jule::Ref<_1486379e0_Log>::make(this, nullptr); }

	inline bool operator==(const _1486379e0_Log &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_path == _Src._field_path &&
			this->_field_text == _Src._field_text &&
			this->_field_line == _Src._field_line &&
			this->_field_suggestion == _Src._field_suggestion;
	}

	inline bool operator!=(const _1486379e0_Log &_Src) const { return !this->operator==(_Src); }
};


struct _14877ba40_DirEntry {
	jule::Ref<_14877ba40_DirEntry> self{};

	jule::Str _field_name{jule::Str()};
	jule::Ref<_1487ca390_Status> _field_stat{jule::Ref<_1487ca390_Status>()};


	_14877ba40_DirEntry(jule::Str __param_name, jule::Ref<_1487ca390_Status> __param_stat) {
		this->self = jule::Ref<_14877ba40_DirEntry>::make(this, nullptr);

		this->_field_name = __param_name;
		this->_field_stat = __param_stat;
	}

	~_14877ba40_DirEntry(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_14877ba40_DirEntry(void) { this->self = jule::Ref<_14877ba40_DirEntry>::make(this, nullptr); }

	inline bool operator==(const _14877ba40_DirEntry &_Src) const {
		return 
			this->_field_name == _Src._field_name &&
			this->_field_stat == _Src._field_stat;
	}

	inline bool operator!=(const _14877ba40_DirEntry &_Src) const { return !this->operator==(_Src); }
};


struct _1487caab0_File {
	jule::Ref<_1487caab0_File> self{};

	jule::Int _field_handle{jule::Int()};


	_1487caab0_File(jule::Int __param_handle) {
		this->self = jule::Ref<_1487caab0_File>::make(this, nullptr);

		this->_field_handle = __param_handle;
	}

	~_1487caab0_File(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487caab0_File(void) { this->self = jule::Ref<_1487caab0_File>::make(this, nullptr); }

	inline std::tuple<jule::I64,jule::Int> _method_seek(jule::I64,jule::Int);


	inline std::tuple<jule::Int,jule::Int> _method_read(jule::Slice<jule::U8>);


	inline std::tuple<jule::Int,jule::Int> _method_write(jule::Slice<jule::U8>);


	inline jule::Int _method_close(void);


	inline bool operator==(const _1487caab0_File &_Src) const {
		return 
			this->_field_handle == _Src._field_handle;
	}

	inline bool operator!=(const _1487caab0_File &_Src) const { return !this->operator==(_Src); }
};


struct _1487ca390_Status {
	jule::Ref<_1487ca390_Status> self{};

	jule::Uint _field_mode{jule::Uint()};
	jule::Uint _field_size{jule::Uint()};


	_1487ca390_Status(jule::Uint __param_mode, jule::Uint __param_size) {
		this->self = jule::Ref<_1487ca390_Status>::make(this, nullptr);

		this->_field_mode = __param_mode;
		this->_field_size = __param_size;
	}

	~_1487ca390_Status(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487ca390_Status(void) { this->self = jule::Ref<_1487ca390_Status>::make(this, nullptr); }

	inline jule::Bool _method_is_dir(void);


	inline jule::Bool _method_is_reg(void);


	inline bool operator==(const _1487ca390_Status &_Src) const {
		return 
			this->_field_mode == _Src._field_mode &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _1487ca390_Status &_Src) const { return !this->operator==(_Src); }
};


struct _103458e80_accept_range {
	jule::Ref<_103458e80_accept_range> self{};

	jule::U8 _field_lo{jule::U8()};
	jule::U8 _field_hi{jule::U8()};


	_103458e80_accept_range(jule::U8 __param_lo, jule::U8 __param_hi) {
		this->self = jule::Ref<_103458e80_accept_range>::make(this, nullptr);

		this->_field_lo = __param_lo;
		this->_field_hi = __param_hi;
	}

	~_103458e80_accept_range(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_103458e80_accept_range(void) { this->self = jule::Ref<_103458e80_accept_range>::make(this, nullptr); }

	inline bool operator==(const _103458e80_accept_range &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi;
	}

	inline bool operator!=(const _103458e80_accept_range &_Src) const { return !this->operator==(_Src); }
};


struct _108e15ff0_Token {
	jule::Ref<_108e15ff0_Token> self{};

	jule::Ref<_108e58b50_File> _field_file{jule::Ref<_108e58b50_File>()};
	jule::Int _field_row{jule::Int()};
	jule::Int _field_column{jule::Int()};
	jule::Str _field_kind{jule::Str()};
	jule::Uint _field_id{0LLU};


	_108e15ff0_Token(jule::Ref<_108e58b50_File> __param_file, jule::Int __param_row, jule::Int __param_column, jule::Str __param_kind, jule::Uint __param_id) {
		this->self = jule::Ref<_108e15ff0_Token>::make(this, nullptr);

		this->_field_file = __param_file;
		this->_field_row = __param_row;
		this->_field_column = __param_column;
		this->_field_kind = __param_kind;
		this->_field_id = __param_id;
	}

	~_108e15ff0_Token(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_108e15ff0_Token(void) { this->self = jule::Ref<_108e15ff0_Token>::make(this, nullptr); }

	inline jule::Int _method_prec(void);


	inline bool operator==(const _108e15ff0_Token &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _108e15ff0_Token &_Src) const { return !this->operator==(_Src); }
};


struct _108e58b50_File {
	jule::Ref<_108e58b50_File> self{};

	jule::Slice<jule::U8> _field_data{jule::Slice<jule::U8>()};
	jule::Str _field__path{jule::Str()};
	jule::Slice<_108e15ff0_Token> _field__tokens{jule::Slice<_108e15ff0_Token>()};


	_108e58b50_File(jule::Slice<jule::U8> __param_data, jule::Str __param__path, jule::Slice<_108e15ff0_Token> __param__tokens) {
		this->self = jule::Ref<_108e58b50_File>::make(this, nullptr);

		this->_field_data = __param_data;
		this->_field__path = __param__path;
		this->_field__tokens = __param__tokens;
	}

	~_108e58b50_File(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_108e58b50_File(void) { this->self = jule::Ref<_108e58b50_File>::make(this, nullptr); }

	inline jule::Bool _method_is_ok(void);


	inline void _method_fill(jule::Slice<jule::U8>);


	inline jule::Str _method_path(void);


	inline jule::Str _method_dir(void);


	inline jule::Str _method_name(void);


	inline jule::Uintptr _method_addr(void);


	inline jule::Slice<_108e15ff0_Token> _method_tokens(void);


	inline jule::Str _method_get_row(jule::Int);


	inline bool operator==(const _108e58b50_File &_Src) const {
		return 
			this->_field_data == _Src._field_data &&
			this->_field__path == _Src._field__path &&
			this->_field__tokens == _Src._field__tokens;
	}

	inline bool operator!=(const _108e58b50_File &_Src) const { return !this->operator==(_Src); }
};


struct _108e171c0_KindPair {
	jule::Ref<_108e171c0_KindPair> self{};

	jule::Str _field_kind{jule::Str("::", 2)};
	jule::Uint _field_id{0LLU};


	_108e171c0_KindPair(jule::Str __param_kind, jule::Uint __param_id) {
		this->self = jule::Ref<_108e171c0_KindPair>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_id = __param_id;
	}

	~_108e171c0_KindPair(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_108e171c0_KindPair(void) { this->self = jule::Ref<_108e171c0_KindPair>::make(this, nullptr); }

	inline bool operator==(const _108e171c0_KindPair &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _108e171c0_KindPair &_Src) const { return !this->operator==(_Src); }
};


struct _108e171c0_Lex {
	jule::Ref<_108e171c0_Lex> self{};

	jule::Slice<_108e15ff0_Token> _field_tokens{jule::Slice<_108e15ff0_Token>()};
	jule::Ref<_108e58b50_File> _field_file{jule::Ref<_108e58b50_File>()};
	jule::Int _field_pos{jule::Int()};
	jule::Int _field_column{jule::Int()};
	jule::Int _field_row{jule::Int()};
	jule::Slice<_1486379e0_Log> _field_errors{jule::Slice<_1486379e0_Log>()};


	_108e171c0_Lex(jule::Slice<_108e15ff0_Token> __param_tokens, jule::Ref<_108e58b50_File> __param_file, jule::Int __param_pos, jule::Int __param_column, jule::Int __param_row, jule::Slice<_1486379e0_Log> __param_errors) {
		this->self = jule::Ref<_108e171c0_Lex>::make(this, nullptr);

		this->_field_tokens = __param_tokens;
		this->_field_file = __param_file;
		this->_field_pos = __param_pos;
		this->_field_column = __param_column;
		this->_field_row = __param_row;
		this->_field_errors = __param_errors;
	}

	~_108e171c0_Lex(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_108e171c0_Lex(void) { this->self = jule::Ref<_108e171c0_Lex>::make(this, nullptr); }

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_tok(_108e15ff0_Token,jule::Str);


	inline void _method_lex(void);


	inline jule::Str _method_id(jule::Slice<jule::U8>);


	inline jule::Slice<jule::U8> _method_resume(void);


	inline void _method_lex_line_comment(_108e15ff0_Token&);


	inline void _method_lex_range_comment(void);


	inline jule::Str _method_num(jule::Slice<jule::U8>);


	inline jule::Str _method_escape_seq(jule::Slice<jule::U8>);


	inline jule::Str _method_get_rune(jule::Slice<jule::U8>,jule::Bool);


	inline jule::Str _method_lex_rune(jule::Slice<jule::U8>);


	inline jule::Str _method_lex_str(void);


	inline jule::Bool _method_is_first_token_of_line(void);


	inline void _method_new_line(void);


	inline jule::Bool _method_is_op(jule::Slice<jule::U8>,jule::Str,jule::Uint,_108e15ff0_Token&);


	inline jule::Bool _method_lex_basic_ops(jule::Slice<jule::U8>,_108e15ff0_Token&);


	inline jule::Bool _method_lex_id(jule::Slice<jule::U8>,_108e15ff0_Token&);


	inline jule::Bool _method_lex_num(jule::Slice<jule::U8>,_108e15ff0_Token&);


	inline _108e15ff0_Token _method_token(void);


	inline bool operator==(const _108e171c0_Lex &_Src) const {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_file == _Src._field_file &&
			this->_field_pos == _Src._field_pos &&
			this->_field_column == _Src._field_column &&
			this->_field_row == _Src._field_row &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _108e171c0_Lex &_Src) const { return !this->operator==(_Src); }
};


struct _1487f02c0_Ast {
	jule::Ref<_1487f02c0_Ast> self{};

	jule::Ref<_108e58b50_File> _field_file{jule::Ref<_108e58b50_File>()};
	jule::Slice<jule::Ref<_1487f5920_Directive>> _field_top_directives{jule::Slice<jule::Ref<_1487f5920_Directive>>()};
	jule::Slice<jule::Ref<_1487f5920_UseDecl>> _field_use_decls{jule::Slice<jule::Ref<_1487f5920_UseDecl>>()};
	jule::Slice<jule::Ref<_1487f5920_Impl>> _field_impls{jule::Slice<jule::Ref<_1487f5920_Impl>>()};
	jule::Slice<jule::Ref<_1487f5920_Comment>> _field_comments{jule::Slice<jule::Ref<_1487f5920_Comment>>()};
	jule::Slice<_1487f5920_Node> _field_decls{jule::Slice<_1487f5920_Node>()};


	_1487f02c0_Ast(jule::Ref<_108e58b50_File> __param_file, jule::Slice<jule::Ref<_1487f5920_Directive>> __param_top_directives, jule::Slice<jule::Ref<_1487f5920_UseDecl>> __param_use_decls, jule::Slice<jule::Ref<_1487f5920_Impl>> __param_impls, jule::Slice<jule::Ref<_1487f5920_Comment>> __param_comments, jule::Slice<_1487f5920_Node> __param_decls) {
		this->self = jule::Ref<_1487f02c0_Ast>::make(this, nullptr);

		this->_field_file = __param_file;
		this->_field_top_directives = __param_top_directives;
		this->_field_use_decls = __param_use_decls;
		this->_field_impls = __param_impls;
		this->_field_comments = __param_comments;
		this->_field_decls = __param_decls;
	}

	~_1487f02c0_Ast(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f02c0_Ast(void) { this->self = jule::Ref<_1487f02c0_Ast>::make(this, nullptr); }

	inline bool operator==(const _1487f02c0_Ast &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_top_directives == _Src._field_top_directives &&
			this->_field_use_decls == _Src._field_use_decls &&
			this->_field_impls == _Src._field_impls &&
			this->_field_comments == _Src._field_comments &&
			this->_field_decls == _Src._field_decls;
	}

	inline bool operator!=(const _1487f02c0_Ast &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_CommentGroup {
	jule::Ref<_1487f5920_CommentGroup> self{};

	jule::Slice<jule::Ref<_1487f5920_Comment>> _field_comments{jule::Slice<jule::Ref<_1487f5920_Comment>>()};


	_1487f5920_CommentGroup(jule::Slice<jule::Ref<_1487f5920_Comment>> __param_comments) {
		this->self = jule::Ref<_1487f5920_CommentGroup>::make(this, nullptr);

		this->_field_comments = __param_comments;
	}

	~_1487f5920_CommentGroup(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_CommentGroup(void) { this->self = jule::Ref<_1487f5920_CommentGroup>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_CommentGroup &_Src) const {
		return 
			this->_field_comments == _Src._field_comments;
	}

	inline bool operator!=(const _1487f5920_CommentGroup &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_NamespaceTypeDecl {
	jule::Ref<_1487f5920_NamespaceTypeDecl> self{};

	jule::Slice<_108e15ff0_Token> _field_idents{jule::Slice<_108e15ff0_Token>()};
	jule::Ref<_1487f5920_IdentTypeDecl> _field_kind{jule::Ref<_1487f5920_IdentTypeDecl>()};


	_1487f5920_NamespaceTypeDecl(jule::Slice<_108e15ff0_Token> __param_idents, jule::Ref<_1487f5920_IdentTypeDecl> __param_kind) {
		this->self = jule::Ref<_1487f5920_NamespaceTypeDecl>::make(this, nullptr);

		this->_field_idents = __param_idents;
		this->_field_kind = __param_kind;
	}

	~_1487f5920_NamespaceTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_NamespaceTypeDecl(void) { this->self = jule::Ref<_1487f5920_NamespaceTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_NamespaceTypeDecl &_Src) const {
		return 
			this->_field_idents == _Src._field_idents &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1487f5920_NamespaceTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_RefTypeDecl {
	jule::Ref<_1487f5920_RefTypeDecl> self{};

	jule::Ref<_1487f5920_TypeDecl> _field_elem{jule::Ref<_1487f5920_TypeDecl>()};


	_1487f5920_RefTypeDecl(jule::Ref<_1487f5920_TypeDecl> __param_elem) {
		this->self = jule::Ref<_1487f5920_RefTypeDecl>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_1487f5920_RefTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_RefTypeDecl(void) { this->self = jule::Ref<_1487f5920_RefTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_RefTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1487f5920_RefTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_SlcTypeDecl {
	jule::Ref<_1487f5920_SlcTypeDecl> self{};

	jule::Ref<_1487f5920_TypeDecl> _field_elem{jule::Ref<_1487f5920_TypeDecl>()};


	_1487f5920_SlcTypeDecl(jule::Ref<_1487f5920_TypeDecl> __param_elem) {
		this->self = jule::Ref<_1487f5920_SlcTypeDecl>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_1487f5920_SlcTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_SlcTypeDecl(void) { this->self = jule::Ref<_1487f5920_SlcTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_SlcTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1487f5920_SlcTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_TupleTypeDecl {
	jule::Ref<_1487f5920_TupleTypeDecl> self{};

	jule::Slice<jule::Ref<_1487f5920_TypeDecl>> _field_types{jule::Slice<jule::Ref<_1487f5920_TypeDecl>>()};


	_1487f5920_TupleTypeDecl(jule::Slice<jule::Ref<_1487f5920_TypeDecl>> __param_types) {
		this->self = jule::Ref<_1487f5920_TupleTypeDecl>::make(this, nullptr);

		this->_field_types = __param_types;
	}

	~_1487f5920_TupleTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_TupleTypeDecl(void) { this->self = jule::Ref<_1487f5920_TupleTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_TupleTypeDecl &_Src) const {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _1487f5920_TupleTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_PtrTypeDecl {
	jule::Ref<_1487f5920_PtrTypeDecl> self{};

	jule::Ref<_1487f5920_TypeDecl> _field_elem{jule::Ref<_1487f5920_TypeDecl>()};


	_1487f5920_PtrTypeDecl(jule::Ref<_1487f5920_TypeDecl> __param_elem) {
		this->self = jule::Ref<_1487f5920_PtrTypeDecl>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_1487f5920_PtrTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_PtrTypeDecl(void) { this->self = jule::Ref<_1487f5920_PtrTypeDecl>::make(this, nullptr); }

	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _1487f5920_PtrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1487f5920_PtrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_ArrTypeDecl {
	jule::Ref<_1487f5920_ArrTypeDecl> self{};

	jule::Ref<_1487f5920_TypeDecl> _field_elem{jule::Ref<_1487f5920_TypeDecl>()};
	jule::Ref<_1487f5920_Expr> _field_size{jule::Ref<_1487f5920_Expr>()};


	_1487f5920_ArrTypeDecl(jule::Ref<_1487f5920_TypeDecl> __param_elem, jule::Ref<_1487f5920_Expr> __param_size) {
		this->self = jule::Ref<_1487f5920_ArrTypeDecl>::make(this, nullptr);

		this->_field_elem = __param_elem;
		this->_field_size = __param_size;
	}

	~_1487f5920_ArrTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_ArrTypeDecl(void) { this->self = jule::Ref<_1487f5920_ArrTypeDecl>::make(this, nullptr); }

	inline jule::Bool _method_auto_sized(void);


	inline bool operator==(const _1487f5920_ArrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _1487f5920_ArrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_MapTypeDecl {
	jule::Ref<_1487f5920_MapTypeDecl> self{};

	jule::Ref<_1487f5920_TypeDecl> _field_key{jule::Ref<_1487f5920_TypeDecl>()};
	jule::Ref<_1487f5920_TypeDecl> _field_val{jule::Ref<_1487f5920_TypeDecl>()};


	_1487f5920_MapTypeDecl(jule::Ref<_1487f5920_TypeDecl> __param_key, jule::Ref<_1487f5920_TypeDecl> __param_val) {
		this->self = jule::Ref<_1487f5920_MapTypeDecl>::make(this, nullptr);

		this->_field_key = __param_key;
		this->_field_val = __param_val;
	}

	~_1487f5920_MapTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_MapTypeDecl(void) { this->self = jule::Ref<_1487f5920_MapTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_MapTypeDecl &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _1487f5920_MapTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_RetTypeDecl {
	jule::Ref<_1487f5920_RetTypeDecl> self{};

	jule::Ref<_1487f5920_TypeDecl> _field_kind{jule::Ref<_1487f5920_TypeDecl>()};
	jule::Slice<_108e15ff0_Token> _field_idents{jule::Slice<_108e15ff0_Token>()};


	_1487f5920_RetTypeDecl(jule::Ref<_1487f5920_TypeDecl> __param_kind, jule::Slice<_108e15ff0_Token> __param_idents) {
		this->self = jule::Ref<_1487f5920_RetTypeDecl>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_idents = __param_idents;
	}

	~_1487f5920_RetTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_RetTypeDecl(void) { this->self = jule::Ref<_1487f5920_RetTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_RetTypeDecl &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _1487f5920_RetTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_TupleExpr {
	jule::Ref<_1487f5920_TupleExpr> self{};

	jule::Slice<jule::Ref<_1487f5920_Expr>> _field_expr{jule::Slice<jule::Ref<_1487f5920_Expr>>()};


	_1487f5920_TupleExpr(jule::Slice<jule::Ref<_1487f5920_Expr>> __param_expr) {
		this->self = jule::Ref<_1487f5920_TupleExpr>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_1487f5920_TupleExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_TupleExpr(void) { this->self = jule::Ref<_1487f5920_TupleExpr>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_TupleExpr &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1487f5920_TupleExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_LitExpr {
	jule::Ref<_1487f5920_LitExpr> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_value{jule::Str()};


	_1487f5920_LitExpr(_108e15ff0_Token __param_token, jule::Str __param_value) {
		this->self = jule::Ref<_1487f5920_LitExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_value = __param_value;
	}

	~_1487f5920_LitExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_LitExpr(void) { this->self = jule::Ref<_1487f5920_LitExpr>::make(this, nullptr); }

	inline jule::Bool _method_is_nil(void);


	inline bool operator==(const _1487f5920_LitExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _1487f5920_LitExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_UnsafeExpr {
	jule::Ref<_1487f5920_UnsafeExpr> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Any _field_expr{jule::Any()};


	_1487f5920_UnsafeExpr(_108e15ff0_Token __param_token, jule::Any __param_expr) {
		this->self = jule::Ref<_1487f5920_UnsafeExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
	}

	~_1487f5920_UnsafeExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_UnsafeExpr(void) { this->self = jule::Ref<_1487f5920_UnsafeExpr>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_UnsafeExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1487f5920_UnsafeExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_IdentExpr {
	jule::Ref<_1487f5920_IdentExpr> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_cpp_linked{jule::Bool()};


	_1487f5920_IdentExpr(_108e15ff0_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked) {
		this->self = jule::Ref<_1487f5920_IdentExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_cpp_linked = __param_cpp_linked;
	}

	~_1487f5920_IdentExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_IdentExpr(void) { this->self = jule::Ref<_1487f5920_IdentExpr>::make(this, nullptr); }

	inline jule::Bool _method_is_self(void);


	inline bool operator==(const _1487f5920_IdentExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked;
	}

	inline bool operator!=(const _1487f5920_IdentExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_UnaryExpr {
	jule::Ref<_1487f5920_UnaryExpr> self{};

	_108e15ff0_Token _field_op{_108e15ff0_Token()};
	jule::Any _field_expr{jule::Any()};


	_1487f5920_UnaryExpr(_108e15ff0_Token __param_op, jule::Any __param_expr) {
		this->self = jule::Ref<_1487f5920_UnaryExpr>::make(this, nullptr);

		this->_field_op = __param_op;
		this->_field_expr = __param_expr;
	}

	~_1487f5920_UnaryExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_UnaryExpr(void) { this->self = jule::Ref<_1487f5920_UnaryExpr>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_UnaryExpr &_Src) const {
		return 
			this->_field_op == _Src._field_op &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1487f5920_UnaryExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_VariadicExpr {
	jule::Ref<_1487f5920_VariadicExpr> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Any _field_expr{jule::Any()};


	_1487f5920_VariadicExpr(_108e15ff0_Token __param_token, jule::Any __param_expr) {
		this->self = jule::Ref<_1487f5920_VariadicExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
	}

	~_1487f5920_VariadicExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_VariadicExpr(void) { this->self = jule::Ref<_1487f5920_VariadicExpr>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_VariadicExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1487f5920_VariadicExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_CastExpr {
	jule::Ref<_1487f5920_CastExpr> self{};

	jule::Ref<_1487f5920_TypeDecl> _field_kind{jule::Ref<_1487f5920_TypeDecl>()};
	jule::Any _field_expr{jule::Any()};


	_1487f5920_CastExpr(jule::Ref<_1487f5920_TypeDecl> __param_kind, jule::Any __param_expr) {
		this->self = jule::Ref<_1487f5920_CastExpr>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_expr = __param_expr;
	}

	~_1487f5920_CastExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_CastExpr(void) { this->self = jule::Ref<_1487f5920_CastExpr>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_CastExpr &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1487f5920_CastExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_NsSelectionExpr {
	jule::Ref<_1487f5920_NsSelectionExpr> self{};

	jule::Slice<_108e15ff0_Token> _field_ns{jule::Slice<_108e15ff0_Token>()};
	_108e15ff0_Token _field_ident{_108e15ff0_Token()};


	_1487f5920_NsSelectionExpr(jule::Slice<_108e15ff0_Token> __param_ns, _108e15ff0_Token __param_ident) {
		this->self = jule::Ref<_1487f5920_NsSelectionExpr>::make(this, nullptr);

		this->_field_ns = __param_ns;
		this->_field_ident = __param_ident;
	}

	~_1487f5920_NsSelectionExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_NsSelectionExpr(void) { this->self = jule::Ref<_1487f5920_NsSelectionExpr>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_NsSelectionExpr &_Src) const {
		return 
			this->_field_ns == _Src._field_ns &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1487f5920_NsSelectionExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_SubIdentExpr {
	jule::Ref<_1487f5920_SubIdentExpr> self{};

	jule::Bool _field_is_self{jule::Bool()};
	jule::Any _field_expr{jule::Any()};
	_108e15ff0_Token _field_ident{_108e15ff0_Token()};


	_1487f5920_SubIdentExpr(jule::Bool __param_is_self, jule::Any __param_expr, _108e15ff0_Token __param_ident) {
		this->self = jule::Ref<_1487f5920_SubIdentExpr>::make(this, nullptr);

		this->_field_is_self = __param_is_self;
		this->_field_expr = __param_expr;
		this->_field_ident = __param_ident;
	}

	~_1487f5920_SubIdentExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_SubIdentExpr(void) { this->self = jule::Ref<_1487f5920_SubIdentExpr>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_SubIdentExpr &_Src) const {
		return 
			this->_field_is_self == _Src._field_is_self &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1487f5920_SubIdentExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_BinopExpr {
	jule::Ref<_1487f5920_BinopExpr> self{};

	jule::Any _field_left{jule::Any()};
	jule::Any _field_right{jule::Any()};
	_108e15ff0_Token _field_op{_108e15ff0_Token()};


	_1487f5920_BinopExpr(jule::Any __param_left, jule::Any __param_right, _108e15ff0_Token __param_op) {
		this->self = jule::Ref<_1487f5920_BinopExpr>::make(this, nullptr);

		this->_field_left = __param_left;
		this->_field_right = __param_right;
		this->_field_op = __param_op;
	}

	~_1487f5920_BinopExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_BinopExpr(void) { this->self = jule::Ref<_1487f5920_BinopExpr>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_BinopExpr &_Src) const {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1487f5920_BinopExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_FieldExprPair {
	jule::Ref<_1487f5920_FieldExprPair> self{};

	_108e15ff0_Token _field_field{_108e15ff0_Token()};
	jule::Any _field_expr{jule::Any()};


	_1487f5920_FieldExprPair(_108e15ff0_Token __param_field, jule::Any __param_expr) {
		this->self = jule::Ref<_1487f5920_FieldExprPair>::make(this, nullptr);

		this->_field_field = __param_field;
		this->_field_expr = __param_expr;
	}

	~_1487f5920_FieldExprPair(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_FieldExprPair(void) { this->self = jule::Ref<_1487f5920_FieldExprPair>::make(this, nullptr); }

	inline jule::Bool _method_is_targeted(void);


	inline bool operator==(const _1487f5920_FieldExprPair &_Src) const {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1487f5920_FieldExprPair &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_StructLit {
	jule::Ref<_1487f5920_StructLit> self{};

	jule::Ref<_1487f5920_TypeDecl> _field_kind{jule::Ref<_1487f5920_TypeDecl>()};
	jule::Slice<jule::Any> _field_exprs{jule::Slice<jule::Any>()};


	_1487f5920_StructLit(jule::Ref<_1487f5920_TypeDecl> __param_kind, jule::Slice<jule::Any> __param_exprs) {
		this->self = jule::Ref<_1487f5920_StructLit>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_exprs = __param_exprs;
	}

	~_1487f5920_StructLit(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_StructLit(void) { this->self = jule::Ref<_1487f5920_StructLit>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_StructLit &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _1487f5920_StructLit &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_BraceLit {
	jule::Ref<_1487f5920_BraceLit> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Slice<jule::Any> _field_exprs{jule::Slice<jule::Any>()};


	_1487f5920_BraceLit(_108e15ff0_Token __param_token, jule::Slice<jule::Any> __param_exprs) {
		this->self = jule::Ref<_1487f5920_BraceLit>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_exprs = __param_exprs;
	}

	~_1487f5920_BraceLit(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_BraceLit(void) { this->self = jule::Ref<_1487f5920_BraceLit>::make(this, nullptr); }

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _1487f5920_BraceLit &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _1487f5920_BraceLit &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_KeyValPair {
	jule::Ref<_1487f5920_KeyValPair> self{};

	jule::Any _field_key{jule::Any()};
	jule::Any _field_val{jule::Any()};
	_108e15ff0_Token _field_colon{_108e15ff0_Token()};


	_1487f5920_KeyValPair(jule::Any __param_key, jule::Any __param_val, _108e15ff0_Token __param_colon) {
		this->self = jule::Ref<_1487f5920_KeyValPair>::make(this, nullptr);

		this->_field_key = __param_key;
		this->_field_val = __param_val;
		this->_field_colon = __param_colon;
	}

	~_1487f5920_KeyValPair(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_KeyValPair(void) { this->self = jule::Ref<_1487f5920_KeyValPair>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_KeyValPair &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val &&
			this->_field_colon == _Src._field_colon;
	}

	inline bool operator!=(const _1487f5920_KeyValPair &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_SliceExpr {
	jule::Ref<_1487f5920_SliceExpr> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Slice<jule::Any> _field_elems{jule::Slice<jule::Any>()};


	_1487f5920_SliceExpr(_108e15ff0_Token __param_token, jule::Slice<jule::Any> __param_elems) {
		this->self = jule::Ref<_1487f5920_SliceExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_elems = __param_elems;
	}

	~_1487f5920_SliceExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_SliceExpr(void) { this->self = jule::Ref<_1487f5920_SliceExpr>::make(this, nullptr); }

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _1487f5920_SliceExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _1487f5920_SliceExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_IndexingExpr {
	jule::Ref<_1487f5920_IndexingExpr> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Any _field_expr{jule::Any()};
	jule::Any _field_index{jule::Any()};


	_1487f5920_IndexingExpr(_108e15ff0_Token __param_token, jule::Any __param_expr, jule::Any __param_index) {
		this->self = jule::Ref<_1487f5920_IndexingExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
		this->_field_index = __param_index;
	}

	~_1487f5920_IndexingExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_IndexingExpr(void) { this->self = jule::Ref<_1487f5920_IndexingExpr>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_IndexingExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _1487f5920_IndexingExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_SlicingExpr {
	jule::Ref<_1487f5920_SlicingExpr> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Any _field_expr{jule::Any()};
	jule::Any _field_start{jule::Any()};
	jule::Any _field_to{jule::Any()};


	_1487f5920_SlicingExpr(_108e15ff0_Token __param_token, jule::Any __param_expr, jule::Any __param_start, jule::Any __param_to) {
		this->self = jule::Ref<_1487f5920_SlicingExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
		this->_field_start = __param_start;
		this->_field_to = __param_to;
	}

	~_1487f5920_SlicingExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_SlicingExpr(void) { this->self = jule::Ref<_1487f5920_SlicingExpr>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_SlicingExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_start == _Src._field_start &&
			this->_field_to == _Src._field_to;
	}

	inline bool operator!=(const _1487f5920_SlicingExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_LabelSt {
	jule::Ref<_1487f5920_LabelSt> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};


	_1487f5920_LabelSt(_108e15ff0_Token __param_token, jule::Str __param_ident) {
		this->self = jule::Ref<_1487f5920_LabelSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
	}

	~_1487f5920_LabelSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_LabelSt(void) { this->self = jule::Ref<_1487f5920_LabelSt>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_LabelSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1487f5920_LabelSt &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_FallSt {
	jule::Ref<_1487f5920_FallSt> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};


	_1487f5920_FallSt(_108e15ff0_Token __param_token) {
		this->self = jule::Ref<_1487f5920_FallSt>::make(this, nullptr);

		this->_field_token = __param_token;
	}

	~_1487f5920_FallSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_FallSt(void) { this->self = jule::Ref<_1487f5920_FallSt>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_FallSt &_Src) const {
		return 
			this->_field_token == _Src._field_token;
	}

	inline bool operator!=(const _1487f5920_FallSt &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_AssignSt {
	jule::Ref<_1487f5920_AssignSt> self{};

	jule::Bool _field_declarative{jule::Bool()};
	_108e15ff0_Token _field_setter{_108e15ff0_Token()};
	jule::Slice<jule::Ref<_1487f5920_AssignLeft>> _field_left{jule::Slice<jule::Ref<_1487f5920_AssignLeft>>()};
	jule::Ref<_1487f5920_Expr> _field_right{jule::Ref<_1487f5920_Expr>()};


	_1487f5920_AssignSt(jule::Bool __param_declarative, _108e15ff0_Token __param_setter, jule::Slice<jule::Ref<_1487f5920_AssignLeft>> __param_left, jule::Ref<_1487f5920_Expr> __param_right) {
		this->self = jule::Ref<_1487f5920_AssignSt>::make(this, nullptr);

		this->_field_declarative = __param_declarative;
		this->_field_setter = __param_setter;
		this->_field_left = __param_left;
		this->_field_right = __param_right;
	}

	~_1487f5920_AssignSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_AssignSt(void) { this->self = jule::Ref<_1487f5920_AssignSt>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_AssignSt &_Src) const {
		return 
			this->_field_declarative == _Src._field_declarative &&
			this->_field_setter == _Src._field_setter &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _1487f5920_AssignSt &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_ScopeTree {
	jule::Ref<_1487f5920_ScopeTree> self{};

	jule::Ref<_1487f5920_ScopeTree> _field_parent{jule::Ref<_1487f5920_ScopeTree>()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Bool _field_deferred{jule::Bool()};
	jule::Slice<jule::Any> _field_stmts{jule::Slice<jule::Any>()};


	_1487f5920_ScopeTree(jule::Ref<_1487f5920_ScopeTree> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts) {
		this->self = jule::Ref<_1487f5920_ScopeTree>::make(this, nullptr);

		this->_field_parent = __param_parent;
		this->_field_unsafety = __param_unsafety;
		this->_field_deferred = __param_deferred;
		this->_field_stmts = __param_stmts;
	}

	~_1487f5920_ScopeTree(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_ScopeTree(void) { this->self = jule::Ref<_1487f5920_ScopeTree>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_ScopeTree &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _1487f5920_ScopeTree &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_RetSt {
	jule::Ref<_1487f5920_RetSt> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Ref<_1487f5920_Expr> _field_expr{jule::Ref<_1487f5920_Expr>()};


	_1487f5920_RetSt(_108e15ff0_Token __param_token, jule::Ref<_1487f5920_Expr> __param_expr) {
		this->self = jule::Ref<_1487f5920_RetSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
	}

	~_1487f5920_RetSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_RetSt(void) { this->self = jule::Ref<_1487f5920_RetSt>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_RetSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1487f5920_RetSt &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_Iter {
	jule::Ref<_1487f5920_Iter> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Any _field_kind{jule::Any()};
	jule::Ref<_1487f5920_ScopeTree> _field_scope{jule::Ref<_1487f5920_ScopeTree>()};


	_1487f5920_Iter(_108e15ff0_Token __param_token, jule::Any __param_kind, jule::Ref<_1487f5920_ScopeTree> __param_scope) {
		this->self = jule::Ref<_1487f5920_Iter>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_kind = __param_kind;
		this->_field_scope = __param_scope;
	}

	~_1487f5920_Iter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_Iter(void) { this->self = jule::Ref<_1487f5920_Iter>::make(this, nullptr); }

	inline jule::Bool _method_is_inf(void);


	inline bool operator==(const _1487f5920_Iter &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1487f5920_Iter &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_WhileKind {
	jule::Ref<_1487f5920_WhileKind> self{};

	jule::Ref<_1487f5920_Expr> _field_expr{jule::Ref<_1487f5920_Expr>()};
	jule::Any _field_next{jule::Any()};
	_108e15ff0_Token _field_next_token{_108e15ff0_Token()};


	_1487f5920_WhileKind(jule::Ref<_1487f5920_Expr> __param_expr, jule::Any __param_next, _108e15ff0_Token __param_next_token) {
		this->self = jule::Ref<_1487f5920_WhileKind>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_next = __param_next;
		this->_field_next_token = __param_next_token;
	}

	~_1487f5920_WhileKind(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_WhileKind(void) { this->self = jule::Ref<_1487f5920_WhileKind>::make(this, nullptr); }

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _1487f5920_WhileKind &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_next_token == _Src._field_next_token;
	}

	inline bool operator!=(const _1487f5920_WhileKind &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_RangeKind {
	jule::Ref<_1487f5920_RangeKind> self{};

	_108e15ff0_Token _field_in_token{_108e15ff0_Token()};
	jule::Ref<_1487f5920_Expr> _field_expr{jule::Ref<_1487f5920_Expr>()};
	jule::Ref<_1487f5920_VarDecl> _field_key_a{jule::Ref<_1487f5920_VarDecl>()};
	jule::Ref<_1487f5920_VarDecl> _field_key_b{jule::Ref<_1487f5920_VarDecl>()};


	_1487f5920_RangeKind(_108e15ff0_Token __param_in_token, jule::Ref<_1487f5920_Expr> __param_expr, jule::Ref<_1487f5920_VarDecl> __param_key_a, jule::Ref<_1487f5920_VarDecl> __param_key_b) {
		this->self = jule::Ref<_1487f5920_RangeKind>::make(this, nullptr);

		this->_field_in_token = __param_in_token;
		this->_field_expr = __param_expr;
		this->_field_key_a = __param_key_a;
		this->_field_key_b = __param_key_b;
	}

	~_1487f5920_RangeKind(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_RangeKind(void) { this->self = jule::Ref<_1487f5920_RangeKind>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_RangeKind &_Src) const {
		return 
			this->_field_in_token == _Src._field_in_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _1487f5920_RangeKind &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_Conditional {
	jule::Ref<_1487f5920_Conditional> self{};

	jule::Ref<_1487f5920_If> _field_head{jule::Ref<_1487f5920_If>()};
	jule::Slice<jule::Ref<_1487f5920_If>> _field_tail{jule::Slice<jule::Ref<_1487f5920_If>>()};
	jule::Ref<_1487f5920_Else> _field_default{jule::Ref<_1487f5920_Else>()};


	_1487f5920_Conditional(jule::Ref<_1487f5920_If> __param_head, jule::Slice<jule::Ref<_1487f5920_If>> __param_tail, jule::Ref<_1487f5920_Else> __param_default) {
		this->self = jule::Ref<_1487f5920_Conditional>::make(this, nullptr);

		this->_field_head = __param_head;
		this->_field_tail = __param_tail;
		this->_field_default = __param_default;
	}

	~_1487f5920_Conditional(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_Conditional(void) { this->self = jule::Ref<_1487f5920_Conditional>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_Conditional &_Src) const {
		return 
			this->_field_head == _Src._field_head &&
			this->_field_tail == _Src._field_tail &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1487f5920_Conditional &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_MatchCase {
	jule::Ref<_1487f5920_MatchCase> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Bool _field_type_match{jule::Bool()};
	jule::Ref<_1487f5920_Expr> _field_expr{jule::Ref<_1487f5920_Expr>()};
	jule::Slice<jule::Ref<_1487f5920_Case>> _field_cases{jule::Slice<jule::Ref<_1487f5920_Case>>()};
	jule::Ref<_1487f5920_Else> _field_default{jule::Ref<_1487f5920_Else>()};


	_1487f5920_MatchCase(_108e15ff0_Token __param_token, jule::Bool __param_type_match, jule::Ref<_1487f5920_Expr> __param_expr, jule::Slice<jule::Ref<_1487f5920_Case>> __param_cases, jule::Ref<_1487f5920_Else> __param_default) {
		this->self = jule::Ref<_1487f5920_MatchCase>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_type_match = __param_type_match;
		this->_field_expr = __param_expr;
		this->_field_cases = __param_cases;
		this->_field_default = __param_default;
	}

	~_1487f5920_MatchCase(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_MatchCase(void) { this->self = jule::Ref<_1487f5920_MatchCase>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_MatchCase &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_expr == _Src._field_expr &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1487f5920_MatchCase &_Src) const { return !this->operator==(_Src); }
};


struct _1190cb490_FileInfo {
	jule::Ref<_1190cb490_FileInfo> self{};

	jule::Ref<_1487f02c0_Ast> _field_ast{jule::Ref<_1487f02c0_Ast>()};
	jule::Slice<_1486379e0_Log> _field_errors{jule::Slice<_1486379e0_Log>()};


	_1190cb490_FileInfo(jule::Ref<_1487f02c0_Ast> __param_ast, jule::Slice<_1486379e0_Log> __param_errors) {
		this->self = jule::Ref<_1190cb490_FileInfo>::make(this, nullptr);

		this->_field_ast = __param_ast;
		this->_field_errors = __param_errors;
	}

	~_1190cb490_FileInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1190cb490_FileInfo(void) { this->self = jule::Ref<_1190cb490_FileInfo>::make(this, nullptr); }

	inline bool operator==(const _1190cb490_FileInfo &_Src) const {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _1190cb490_FileInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1190cb490_PackageInfo {
	jule::Ref<_1190cb490_PackageInfo> self{};

	jule::Slice<jule::Ref<_1190cb490_FileInfo>> _field_files{jule::Slice<jule::Ref<_1190cb490_FileInfo>>()};


	_1190cb490_PackageInfo(jule::Slice<jule::Ref<_1190cb490_FileInfo>> __param_files) {
		this->self = jule::Ref<_1190cb490_PackageInfo>::make(this, nullptr);

		this->_field_files = __param_files;
	}

	~_1190cb490_PackageInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1190cb490_PackageInfo(void) { this->self = jule::Ref<_1190cb490_PackageInfo>::make(this, nullptr); }

	inline bool operator==(const _1190cb490_PackageInfo &_Src) const {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _1190cb490_PackageInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1190d5970_Stmt {
	jule::Ref<_1190d5970_Stmt> self{};

	jule::Slice<_108e15ff0_Token> _field_tokens{jule::Slice<_108e15ff0_Token>()};
	jule::Bool _field_terminated{jule::Bool()};


	_1190d5970_Stmt(jule::Slice<_108e15ff0_Token> __param_tokens, jule::Bool __param_terminated) {
		this->self = jule::Ref<_1190d5970_Stmt>::make(this, nullptr);

		this->_field_tokens = __param_tokens;
		this->_field_terminated = __param_terminated;
	}

	~_1190d5970_Stmt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1190d5970_Stmt(void) { this->self = jule::Ref<_1190d5970_Stmt>::make(this, nullptr); }

	inline bool operator==(const _1190d5970_Stmt &_Src) const {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_terminated == _Src._field_terminated;
	}

	inline bool operator!=(const _1190d5970_Stmt &_Src) const { return !this->operator==(_Src); }
};


struct _1190d5970_ScopeParser {
	jule::Ref<_1190d5970_ScopeParser> self{};

	jule::Ref<_138657c70_Parser> _field_p{jule::Ref<_138657c70_Parser>()};
	jule::Ref<_1487f5920_ScopeTree> _field_s{jule::Ref<_1487f5920_ScopeTree>()};
	jule::Slice<jule::Ref<_1190d5970_Stmt>> _field_stms{jule::Slice<jule::Ref<_1190d5970_Stmt>>()};
	jule::Int _field_pos{jule::Int()};


	_1190d5970_ScopeParser(jule::Ref<_138657c70_Parser> __param_p, jule::Ref<_1487f5920_ScopeTree> __param_s, jule::Slice<jule::Ref<_1190d5970_Stmt>> __param_stms, jule::Int __param_pos) {
		this->self = jule::Ref<_1190d5970_ScopeParser>::make(this, nullptr);

		this->_field_p = __param_p;
		this->_field_s = __param_s;
		this->_field_stms = __param_stms;
		this->_field_pos = __param_pos;
	}

	~_1190d5970_ScopeParser(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1190d5970_ScopeParser(void) { this->self = jule::Ref<_1190d5970_ScopeParser>::make(this, nullptr); }

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline jule::Bool _method_finished(void);


	inline jule::Bool _method_is_last_st(void);


	inline void _method_push_err(_108e15ff0_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_insert_as_next(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1190d5970_Stmt> _method_next(void);


	inline jule::Ref<_1487f5920_ScopeTree> _method_build_scope(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_var_st(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_ret_st(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_while_next_iter(jule::Ref<_1190d5970_Stmt>);


	inline jule::Ref<_1487f5920_WhileKind> _method_build_while_iter_kind(jule::Slice<_108e15ff0_Token>);


	inline jule::Slice<jule::Slice<_108e15ff0_Token>> _method_get_range_kind_keys_tokens(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_VarDecl> _method_build_range_kind_key(jule::Slice<_108e15ff0_Token>);


	inline jule::Slice<jule::Ref<_1487f5920_VarDecl>> _method_build_range_kind_keys(jule::Slice<jule::Slice<_108e15ff0_Token>>);


	inline void _method_setup_range_kind_keys_plain(jule::Ref<_1487f5920_RangeKind>,jule::Slice<_108e15ff0_Token>);


	inline void _method_setup_range_kind_keys_explicit(jule::Ref<_1487f5920_RangeKind>,jule::Slice<_108e15ff0_Token>);


	inline void _method_setup_range_kind_keys(jule::Ref<_1487f5920_RangeKind>,jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_RangeKind> _method_build_range_iter_kind(jule::Slice<_108e15ff0_Token>,jule::Slice<_108e15ff0_Token>,_108e15ff0_Token);


	inline jule::Any _method_build_common_iter_kind(jule::Slice<_108e15ff0_Token>,_108e15ff0_Token);


	inline jule::Any _method_build_common_iter(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_buid_iter_st(jule::Ref<_1190d5970_Stmt>);


	inline jule::Any _method_build_break_st(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_cont_st(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_If> _method_build_if(jule::Slice<_108e15ff0_Token>&);


	inline jule::Ref<_1487f5920_Else> _method_build_else(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_if_else_chain(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_comment_st(_108e15ff0_Token);


	inline jule::Any _method_build_call_st(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_co_call_st(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_goto_st(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_fall_st(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_type_alias_st(jule::Slice<_108e15ff0_Token>);


	inline void _method_push_case_expr(jule::Slice<_108e15ff0_Token>,_108e15ff0_Token,jule::Bool,jule::Slice<jule::Ref<_1487f5920_Expr>>&);


	inline jule::Slice<jule::Ref<_1487f5920_Expr>> _method_build_case_exprs(jule::Slice<_108e15ff0_Token>&,jule::Bool);


	inline jule::Ref<_1487f5920_ScopeTree> _method_build_case_scope(jule::Slice<_108e15ff0_Token>&);


	inline std::tuple<jule::Ref<_1487f5920_Case>,jule::Bool> _method_build_case(jule::Slice<_108e15ff0_Token>&,jule::Bool);


	inline std::tuple<jule::Slice<jule::Ref<_1487f5920_Case>>,jule::Ref<_1487f5920_Else>> _method_build_cases(jule::Slice<_108e15ff0_Token>,jule::Bool);


	inline jule::Ref<_1487f5920_MatchCase> _method_build_match_case(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_ScopeTree> _method_build_scope_st(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_LabelSt> _method_build_label_st(jule::Slice<_108e15ff0_Token>);


	inline std::tuple<jule::Any,jule::Bool> _method_build_id_st(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_149043a20_AssignInfo> _method_build_assign_info(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_AssignLeft> _method_build_assign_l(jule::Slice<_108e15ff0_Token>);


	inline jule::Slice<jule::Ref<_1487f5920_AssignLeft>> _method_build_assign_ls(jule::Slice<jule::Slice<_108e15ff0_Token>>);


	inline std::tuple<jule::Ref<_1487f5920_AssignSt>,jule::Bool> _method_build_plain_assign(jule::Slice<_108e15ff0_Token>);


	inline std::tuple<jule::Ref<_1487f5920_AssignSt>,jule::Bool> _method_build_decl_assign(jule::Slice<_108e15ff0_Token>);


	inline std::tuple<jule::Ref<_1487f5920_AssignSt>,jule::Bool> _method_build_assign_st(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_st(jule::Ref<_1190d5970_Stmt>);


	inline void _method_build(jule::Slice<_108e15ff0_Token>,jule::Ref<_1487f5920_ScopeTree>);


	inline bool operator==(const _1190d5970_ScopeParser &_Src) const {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_s == _Src._field_s &&
			this->_field_stms == _Src._field_stms &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _1190d5970_ScopeParser &_Src) const { return !this->operator==(_Src); }
};


struct _1190cb760_CallData {
	jule::Ref<_1190cb760_CallData> self{};

	jule::Slice<_108e15ff0_Token> _field_expr_tokens{jule::Slice<_108e15ff0_Token>()};
	jule::Slice<_108e15ff0_Token> _field_args_tokens{jule::Slice<_108e15ff0_Token>()};
	jule::Slice<_108e15ff0_Token> _field_generics_tokens{jule::Slice<_108e15ff0_Token>()};


	_1190cb760_CallData(jule::Slice<_108e15ff0_Token> __param_expr_tokens, jule::Slice<_108e15ff0_Token> __param_args_tokens, jule::Slice<_108e15ff0_Token> __param_generics_tokens) {
		this->self = jule::Ref<_1190cb760_CallData>::make(this, nullptr);

		this->_field_expr_tokens = __param_expr_tokens;
		this->_field_args_tokens = __param_args_tokens;
		this->_field_generics_tokens = __param_generics_tokens;
	}

	~_1190cb760_CallData(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1190cb760_CallData(void) { this->self = jule::Ref<_1190cb760_CallData>::make(this, nullptr); }

	inline bool operator==(const _1190cb760_CallData &_Src) const {
		return 
			this->_field_expr_tokens == _Src._field_expr_tokens &&
			this->_field_args_tokens == _Src._field_args_tokens &&
			this->_field_generics_tokens == _Src._field_generics_tokens;
	}

	inline bool operator!=(const _1190cb760_CallData &_Src) const { return !this->operator==(_Src); }
};


struct _1190cb760_Precedencer {
	jule::Ref<_1190cb760_Precedencer> self{};

	jule::Slice<jule::Slice<jule::Any>> _field_pairs{jule::Slice<jule::Slice<jule::Any>>()};


	_1190cb760_Precedencer(jule::Slice<jule::Slice<jule::Any>> __param_pairs) {
		this->self = jule::Ref<_1190cb760_Precedencer>::make(this, nullptr);

		this->_field_pairs = __param_pairs;
	}

	~_1190cb760_Precedencer(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1190cb760_Precedencer(void) { this->self = jule::Ref<_1190cb760_Precedencer>::make(this, nullptr); }

	inline void _method_set(jule::Int,jule::Any);


	inline jule::Any _method_get_lower(void);


	inline bool operator==(const _1190cb760_Precedencer &_Src) const {
		return 
			this->_field_pairs == _Src._field_pairs;
	}

	inline bool operator!=(const _1190cb760_Precedencer &_Src) const { return !this->operator==(_Src); }
};


struct _1190cb760_ExprBuilder {
	jule::Ref<_1190cb760_ExprBuilder> self{};

	jule::Ref<_138657c70_Parser> _field_p{jule::Ref<_138657c70_Parser>()};


	_1190cb760_ExprBuilder(jule::Ref<_138657c70_Parser> __param_p) {
		this->self = jule::Ref<_1190cb760_ExprBuilder>::make(this, nullptr);

		this->_field_p = __param_p;
	}

	~_1190cb760_ExprBuilder(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1190cb760_ExprBuilder(void) { this->self = jule::Ref<_1190cb760_ExprBuilder>::make(this, nullptr); }

	inline void _method_push_err(_108e15ff0_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ref<_1487f5920_TupleExpr> _method_build_tuple(jule::Slice<jule::Slice<_108e15ff0_Token>>);


	inline jule::Ref<_1487f5920_LitExpr> _method_build_lit(_108e15ff0_Token);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_primitive_type(_108e15ff0_Token);


	inline jule::Any _method_build_single(_108e15ff0_Token);


	inline jule::Ref<_1487f5920_IdentExpr> _method_build_cpp_linked_ident(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_UnaryExpr> _method_build_unary(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_SubIdentExpr> _method_build_obj_sub_ident(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_NsSelectionExpr> _method_build_ns_sub_ident(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_type(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_sub_ident(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_VariadicExpr> _method_build_variadic(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_op_right(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_between_parentheses(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_CastExpr> _method_try_build_cast(jule::Slice<_108e15ff0_Token>);


	inline void _method_push_arg(jule::Slice<jule::Ref<_1487f5920_Expr>>&,jule::Slice<_108e15ff0_Token>,_108e15ff0_Token);


	inline jule::Slice<jule::Ref<_1487f5920_Expr>> _method_build_args(jule::Slice<_108e15ff0_Token>);


	inline jule::Slice<jule::Ref<_1487f5920_TypeDecl>> _method_build_call_generics(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_FnCallExpr> _method_build_fn_call(_108e15ff0_Token,jule::Ref<_1190cb760_CallData>);


	inline jule::Any _method_build_parentheses_range(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_UnsafeExpr> _method_build_unsafe_expr(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_FnDecl> _method_build_anon_fn(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_unsafe(jule::Slice<_108e15ff0_Token>);


	inline void _method_push_range_lit_part(jule::Slice<_108e15ff0_Token>,_108e15ff0_Token,jule::Slice<jule::Slice<_108e15ff0_Token>>&);


	inline jule::Slice<jule::Slice<_108e15ff0_Token>> _method_get_brace_range_lit_expr_parts(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_FieldExprPair> _method_build_field_expr_pair(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_struct_lit_expr(jule::Slice<_108e15ff0_Token>);


	inline jule::Slice<jule::Any> _method_build_struct_lit_exprs(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_StructLit> _method_build_typed_struct_literal(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_brace_lit_part(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_BraceLit> _method_build_brace_lit(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_brace_range(jule::Slice<_108e15ff0_Token>);


	inline jule::Slice<jule::Slice<_108e15ff0_Token>> _method_get_enumerable_parts(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_SliceExpr> _method_build_slice(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_IndexingExpr> _method_build_indexing(jule::Slice<_108e15ff0_Token>,jule::Slice<_108e15ff0_Token>,_108e15ff0_Token);


	inline jule::Ref<_1487f5920_SlicingExpr> _method_build_slicing(jule::Slice<_108e15ff0_Token>,jule::Slice<_108e15ff0_Token>,jule::Int,_108e15ff0_Token);


	inline jule::Any _method_build_bracket_range(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_data(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_BinopExpr> _method_build_binop(jule::Slice<_108e15ff0_Token>,jule::Int);


	inline jule::Any _method_build(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_kind(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_Expr> _method_build_from_tokens(jule::Slice<_108e15ff0_Token>);


	inline bool operator==(const _1190cb760_ExprBuilder &_Src) const {
		return 
			this->_field_p == _Src._field_p;
	}

	inline bool operator!=(const _1190cb760_ExprBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _138657c70_Parser {
	jule::Ref<_138657c70_Parser> self{};

	jule::Ref<_1487f02c0_Ast> _field_ast{jule::Ref<_1487f02c0_Ast>()};
	jule::Slice<jule::Ref<_1487f5920_Directive>> _field_directives{jule::Slice<jule::Ref<_1487f5920_Directive>>()};
	jule::Ref<_1487f5920_CommentGroup> _field_comment_group{jule::Ref<_1487f5920_CommentGroup>()};
	jule::Slice<_1486379e0_Log> _field_errors{jule::Slice<_1486379e0_Log>()};


	_138657c70_Parser(jule::Ref<_1487f02c0_Ast> __param_ast, jule::Slice<jule::Ref<_1487f5920_Directive>> __param_directives, jule::Ref<_1487f5920_CommentGroup> __param_comment_group, jule::Slice<_1486379e0_Log> __param_errors) {
		this->self = jule::Ref<_138657c70_Parser>::make(this, nullptr);

		this->_field_ast = __param_ast;
		this->_field_directives = __param_directives;
		this->_field_comment_group = __param_comment_group;
		this->_field_errors = __param_errors;
	}

	~_138657c70_Parser(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_138657c70_Parser(void) { this->self = jule::Ref<_138657c70_Parser>::make(this, nullptr); }

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline void _method_push_err(_108e15ff0_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ref<_1487f5920_Expr> _method_build_expr(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_Directive> _method_get_directive(jule::Ref<_1487f5920_Comment>);


	inline void _method_push_directive(jule::Ref<_1487f5920_Comment>);


	inline void _method_process_comment(jule::Ref<_1487f5920_Comment>);


	inline jule::Ref<_1487f5920_ScopeTree> _method_build_scope(jule::Slice<_108e15ff0_Token>);


	inline std::tuple<jule::Ref<_1487f5920_TypeDecl>,jule::Bool> _method___build_type(jule::Slice<_108e15ff0_Token>,jule::Int*,jule::Bool);


	inline std::tuple<jule::Ref<_1487f5920_TypeDecl>,jule::Bool> _method_build_type(jule::Slice<_108e15ff0_Token>,jule::Int*,jule::Bool);


	inline jule::Ref<_1487f5920_TypeAliasDecl> _method_build_type_alias_decl(jule::Slice<_108e15ff0_Token>);


	inline void _method_build_var_type_and_expr(jule::Ref<_1487f5920_VarDecl>,jule::Slice<_108e15ff0_Token>);


	inline void _method_build_var_common(jule::Ref<_1487f5920_VarDecl>,jule::Slice<_108e15ff0_Token>);


	inline void _method_build_var_begin(jule::Ref<_1487f5920_VarDecl>,jule::Ref<jule::Int>,jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_VarDecl> _method_build_var(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_GenericDecl> _method_build_generic(jule::Slice<_108e15ff0_Token>);


	inline jule::Slice<jule::Ref<_1487f5920_GenericDecl>> _method_build_generics(jule::Slice<_108e15ff0_Token>,_108e15ff0_Token);


	inline jule::Ref<_1487f5920_ParamDecl> _method_build_self_param(jule::Slice<_108e15ff0_Token>);


	inline void _method_param_type_begin(jule::Ref<_1487f5920_ParamDecl>,jule::Int&,jule::Slice<_108e15ff0_Token>);


	inline void _method_build_param_type(jule::Ref<_1487f5920_ParamDecl>,jule::Slice<_108e15ff0_Token>,jule::Bool);


	inline void _method_param_body_id(jule::Ref<_1487f5920_ParamDecl>,_108e15ff0_Token);


	inline void _method_build_param_body(jule::Ref<_1487f5920_ParamDecl>,jule::Ref<jule::Int>,jule::Slice<_108e15ff0_Token>,jule::Bool);


	inline jule::Ref<_1487f5920_ParamDecl> _method_build_param(jule::Slice<_108e15ff0_Token>,jule::Bool);


	inline void _method_check_params(jule::Slice<jule::Ref<_1487f5920_ParamDecl>>);


	inline jule::Slice<jule::Ref<_1487f5920_ParamDecl>> _method_build_params(jule::Slice<_108e15ff0_Token>,jule::Bool,jule::Bool);


	inline std::tuple<jule::Ref<_1487f5920_RetTypeDecl>,jule::Bool> _method_build_multi_ret_type(jule::Slice<_108e15ff0_Token>,jule::Int&);


	inline std::tuple<jule::Ref<_1487f5920_RetTypeDecl>,jule::Bool> _method_build_ret_type(jule::Slice<_108e15ff0_Token>,jule::Int&);


	inline jule::Ref<_1487f5920_FnDecl> _method_build_fn_prototype(jule::Slice<_108e15ff0_Token>,jule::Int&,jule::Bool);


	inline jule::Ref<_1487f5920_FnDecl> _method_build_fn(jule::Slice<_108e15ff0_Token>,jule::Bool,jule::Bool);


	inline jule::Slice<_108e15ff0_Token> _method_get_use_decl_selectors(jule::Slice<_108e15ff0_Token>);


	inline void _method_build_cpp_use_decl(jule::Ref<_1487f5920_UseDecl>,jule::Slice<_108e15ff0_Token>);


	inline void _method_build_std_use_decl(jule::Ref<_1487f5920_UseDecl>,jule::Slice<_108e15ff0_Token>);


	inline void _method_build_ident_use_decl(jule::Ref<_1487f5920_UseDecl>,jule::Slice<_108e15ff0_Token>);


	inline void _method_parse_use_decl(jule::Ref<_1487f5920_UseDecl>,jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_UseDecl> _method_build_use_decl(jule::Slice<_108e15ff0_Token>,jule::Bool);


	inline jule::Ref<_1487f5920_Expr> _method_build_enum_item_expr(jule::Ref<jule::Int>,jule::Slice<_108e15ff0_Token>);


	inline jule::Slice<jule::Ref<_1487f5920_EnumItemDecl>> _method_build_enum_items(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_EnumDecl> _method_build_enum_decl(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_FieldDecl> _method_build_field(jule::Slice<_108e15ff0_Token>);


	inline jule::Slice<jule::Ref<_1487f5920_FieldDecl>> _method_build_struct_decl_fields(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_StructDecl> _method_build_struct_decl(jule::Slice<_108e15ff0_Token>);


	inline void _method_check_method_receiver(jule::Ref<_1487f5920_FnDecl>);


	inline jule::Slice<jule::Ref<_1487f5920_FnDecl>> _method_build_trait_methods(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_TraitDecl> _method_build_trait_decl(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_FnDecl> _method_build_cpp_link_fn(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_VarDecl> _method_build_cpp_link_var(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_StructDecl> _method_build_cpp_link_struct(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_TypeAliasDecl> _method_build_cpp_link_type_alias(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_UseDecl> _method_build_cpp_link_use(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_cpp_link(jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_FnDecl> _method_get_method(jule::Slice<_108e15ff0_Token>);


	inline void _method_parse_impl_trait(jule::Ref<_1487f5920_Impl>,jule::Slice<_108e15ff0_Token>);


	inline void _method_parse_impl_struct(jule::Ref<_1487f5920_Impl>,jule::Slice<_108e15ff0_Token>);


	inline void _method_parse_impl_body(jule::Ref<_1487f5920_Impl>,jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_Impl> _method_build_impl(jule::Slice<_108e15ff0_Token>);


	inline jule::Any _method_build_node_data(jule::Slice<_108e15ff0_Token>);


	inline void _method_check_comment_group(_1487f5920_Node);


	inline void _method_check_directive(_1487f5920_Node);


	inline void _method_apply_meta(_1487f5920_Node,jule::Bool);


	inline void _method_check_use_decl(_1487f5920_Node);


	inline std::tuple<jule::Bool,jule::Any> _method_build_general_scope_node_data(jule::Slice<_108e15ff0_Token>);


	inline _1487f5920_Node _method_parse_node(jule::Slice<_108e15ff0_Token>);


	inline void _method_append_node(jule::Slice<_108e15ff0_Token>);


	inline void _method_remove_range(jule::Int,jule::Str,jule::Slice<_108e15ff0_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_wrong_order_close_err(_108e15ff0_Token,jule::Slice<_108e15ff0_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_range_close(_108e15ff0_Token,jule::Str,jule::Slice<_108e15ff0_Token>&,jule::Slice<jule::Int>&);


	inline void _method_check_ranges(jule::Slice<_108e15ff0_Token>&);


	inline void _method_parse(jule::Ref<_108e58b50_File>);


	inline bool operator==(const _138657c70_Parser &_Src) const {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_directives == _Src._field_directives &&
			this->_field_comment_group == _Src._field_comment_group &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _138657c70_Parser &_Src) const { return !this->operator==(_Src); }
};


struct _103796900_TypeBuilder {
	jule::Ref<_103796900_TypeBuilder> self{};

	jule::Ref<_138657c70_Parser> _field_p{jule::Ref<_138657c70_Parser>()};
	jule::Slice<_108e15ff0_Token> _field_tokens{jule::Slice<_108e15ff0_Token>()};
	jule::Int* _field_i{nullptr};
	jule::Bool _field_err{jule::Bool()};


	_103796900_TypeBuilder(jule::Ref<_138657c70_Parser> __param_p, jule::Slice<_108e15ff0_Token> __param_tokens, jule::Int* __param_i, jule::Bool __param_err) {
		this->self = jule::Ref<_103796900_TypeBuilder>::make(this, nullptr);

		this->_field_p = __param_p;
		this->_field_tokens = __param_tokens;
		this->_field_i = __param_i;
		this->_field_err = __param_err;
	}

	~_103796900_TypeBuilder(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_103796900_TypeBuilder(void) { this->self = jule::Ref<_103796900_TypeBuilder>::make(this, nullptr); }

	inline void _method_push_err(_108e15ff0_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_prim(void);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_namespace(void);


	inline jule::Slice<jule::Ref<_1487f5920_TypeDecl>> _method_build_generics(void);


	inline jule::Slice<jule::Slice<_108e15ff0_Token>> _method_ident_generics(void);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_ident(void);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_cpp_link(void);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_fn(void);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_ptr(void);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_ref(void);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_op(void);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_slc(void);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_arr(void);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_map(jule::Int,jule::Slice<_108e15ff0_Token>);


	inline jule::Ref<_1487f5920_TypeDecl> _method_build_enumerable(void);


	inline jule::Ref<_1487f5920_TypeDecl> _method_step(void);


	inline std::tuple<jule::Ref<_1487f5920_TypeDecl>,jule::Bool> _method_build(void);


	inline bool operator==(const _103796900_TypeBuilder &_Src) const {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_tokens == _Src._field_tokens &&
			this->_field_i == _Src._field_i &&
			this->_field_err == _Src._field_err;
	}

	inline bool operator!=(const _103796900_TypeBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _104c409b0_Const {
	jule::Ref<_104c409b0_Const> self{};

	jule::Any _field_data{jule::Any()};


	_104c409b0_Const(jule::Any __param_data) {
		this->self = jule::Ref<_104c409b0_Const>::make(this, nullptr);

		this->_field_data = __param_data;
	}

	~_104c409b0_Const(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104c409b0_Const(void) { this->self = jule::Ref<_104c409b0_Const>::make(this, nullptr); }

	static inline jule::Ref<_104c409b0_Const> _static_method_new_i64(jule::I64);


	static inline jule::Ref<_104c409b0_Const> _static_method_new_u64(jule::U64);


	static inline jule::Ref<_104c409b0_Const> _static_method_new_bool(jule::Bool);


	static inline jule::Ref<_104c409b0_Const> _static_method_new_str(jule::Str);


	static inline jule::Ref<_104c409b0_Const> _static_method_new_f64(jule::F64);


	static inline jule::Ref<_104c409b0_Const> _static_method_new_nil(void);


	inline jule::I64 _method_read_i64(void);


	inline jule::U64 _method_read_u64(void);


	inline jule::Bool _method_read_bool(void);


	inline jule::Str _method_read_str(void);


	inline jule::F64 _method_read_f64(void);


	inline jule::I64 _method_as_i64(void);


	inline jule::U64 _method_as_u64(void);


	inline jule::F64 _method_as_f64(void);


	inline void _method_set_i64(jule::I64);


	inline void _method_set_u64(jule::U64);


	inline void _method_set_bool(jule::Bool);


	inline void _method_set_str(jule::Str);


	inline void _method_set_f64(jule::F64);


	inline void _method_set_nil(void);


	inline void _method_set_by_type(jule::F64,_104c409b0_Const);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_are_same_types(_104c409b0_Const);


	inline jule::Bool _method_and(_104c409b0_Const);


	inline jule::Bool _method_or(_104c409b0_Const);


	inline jule::Bool _method_eqs(_104c409b0_Const);


	inline jule::Bool _method_lt(_104c409b0_Const);


	inline jule::Bool _method_gt(_104c409b0_Const);


	inline jule::Bool _method_add(_104c409b0_Const);


	inline jule::Bool _method_sub(_104c409b0_Const);


	inline jule::Bool _method_mul(_104c409b0_Const);


	inline jule::Bool _method_div(_104c409b0_Const);


	inline jule::Bool _method_mod(_104c409b0_Const);


	inline jule::Bool _method_bitwise_and(_104c409b0_Const);


	inline jule::Bool _method_bitwise_or(_104c409b0_Const);


	inline jule::Bool _method_xor(_104c409b0_Const);


	inline jule::Bool _method_lshift(_104c409b0_Const);


	inline jule::Bool _method_rshift(_104c409b0_Const);


	inline bool operator==(const _104c409b0_Const &_Src) const {
		return 
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _104c409b0_Const &_Src) const { return !this->operator==(_Src); }
};



struct _1037370d0_FieldIns {
	jule::Ref<_1037370d0_FieldIns> self{};

	jule::Ref<_1037370d0_Field> _field_decl{jule::Ref<_1037370d0_Field>()};
	jule::Ref<_104a21a10_TypeKind> _field_kind{jule::Ref<_104a21a10_TypeKind>()};


	_1037370d0_FieldIns(jule::Ref<_1037370d0_Field> __param_decl, jule::Ref<_104a21a10_TypeKind> __param_kind) {
		this->self = jule::Ref<_1037370d0_FieldIns>::make(this, nullptr);

		this->_field_decl = __param_decl;
		this->_field_kind = __param_kind;
	}

	~_1037370d0_FieldIns(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1037370d0_FieldIns(void) { this->self = jule::Ref<_1037370d0_FieldIns>::make(this, nullptr); }

	inline bool operator==(const _1037370d0_FieldIns &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1037370d0_FieldIns &_Src) const { return !this->operator==(_Src); }
};


struct _1037370d0_StructIns: public _104a21a10_Kind {
	jule::Ref<_1037370d0_StructIns> self{};

	jule::Bool _field_checked{jule::Bool()};
	jule::Ref<_1037370d0_Struct> _field_decl{jule::Ref<_1037370d0_Struct>()};
	jule::Slice<jule::Ref<_104a21a10_TypeKind>> _field_generics{jule::Slice<jule::Ref<_104a21a10_TypeKind>>()};
	jule::Slice<jule::Ref<_1037370d0_FieldIns>> _field_fields{jule::Slice<jule::Ref<_1037370d0_FieldIns>>()};
	jule::Slice<jule::Ref<_1037649f0_Fn>> _field_methods{jule::Slice<jule::Ref<_1037649f0_Fn>>()};
	jule::Bool _field_has_mut{jule::Bool()};
	jule::Ref<_1036da950_ReferenceStack> _field_references{jule::Ref<_1036da950_ReferenceStack>()};


	_1037370d0_StructIns(jule::Bool __param_checked, jule::Ref<_1037370d0_Struct> __param_decl, jule::Slice<jule::Ref<_104a21a10_TypeKind>> __param_generics, jule::Slice<jule::Ref<_1037370d0_FieldIns>> __param_fields, jule::Slice<jule::Ref<_1037649f0_Fn>> __param_methods, jule::Bool __param_has_mut, jule::Ref<_1036da950_ReferenceStack> __param_references) {
		this->self = jule::Ref<_1037370d0_StructIns>::make(this, nullptr);

		this->_field_checked = __param_checked;
		this->_field_decl = __param_decl;
		this->_field_generics = __param_generics;
		this->_field_fields = __param_fields;
		this->_field_methods = __param_methods;
		this->_field_has_mut = __param_has_mut;
		this->_field_references = __param_references;
	}

	~_1037370d0_StructIns(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1037370d0_StructIns(void) { this->self = jule::Ref<_1037370d0_StructIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Ref<_1037649f0_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ref<_1037370d0_FieldIns> _method_find_field(jule::Str);


	inline bool operator==(const _1037370d0_StructIns &_Src) const {
		return 
			this->_field_checked == _Src._field_checked &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_has_mut == _Src._field_has_mut &&
			this->_field_references == _Src._field_references;
	}

	inline bool operator!=(const _1037370d0_StructIns &_Src) const { return !this->operator==(_Src); }
};


struct _1037649f0_RetType {
	jule::Ref<_1037649f0_RetType> self{};

	jule::Ref<_104a21a10_TypeSymbol> _field_kind{jule::Ref<_104a21a10_TypeSymbol>()};
	jule::Slice<_108e15ff0_Token> _field_idents{jule::Slice<_108e15ff0_Token>()};


	_1037649f0_RetType(jule::Ref<_104a21a10_TypeSymbol> __param_kind, jule::Slice<_108e15ff0_Token> __param_idents) {
		this->self = jule::Ref<_1037649f0_RetType>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_idents = __param_idents;
	}

	~_1037649f0_RetType(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1037649f0_RetType(void) { this->self = jule::Ref<_1037649f0_RetType>::make(this, nullptr); }

	inline bool operator==(const _1037649f0_RetType &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _1037649f0_RetType &_Src) const { return !this->operator==(_Src); }
};


struct _1037649f0_ParamIns {
	jule::Ref<_1037649f0_ParamIns> self{};

	jule::Ref<_1037649f0_Param> _field_decl{jule::Ref<_1037649f0_Param>()};
	jule::Ref<_104a21a10_TypeKind> _field_kind{jule::Ref<_104a21a10_TypeKind>()};


	_1037649f0_ParamIns(jule::Ref<_1037649f0_Param> __param_decl, jule::Ref<_104a21a10_TypeKind> __param_kind) {
		this->self = jule::Ref<_1037649f0_ParamIns>::make(this, nullptr);

		this->_field_decl = __param_decl;
		this->_field_kind = __param_kind;
	}

	~_1037649f0_ParamIns(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1037649f0_ParamIns(void) { this->self = jule::Ref<_1037649f0_ParamIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline bool operator==(const _1037649f0_ParamIns &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1037649f0_ParamIns &_Src) const { return !this->operator==(_Src); }
};


struct _1037649f0_FnIns: public _104a21a10_Kind {
	jule::Ref<_1037649f0_FnIns> self{};

	jule::Ref<_1037370d0_StructIns> _field_owner{jule::Ref<_1037370d0_StructIns>()};
	jule::Ref<_1037649f0_Fn> _field_decl{jule::Ref<_1037649f0_Fn>()};
	jule::Slice<jule::Ref<_104a21a10_TypeKind>> _field_generics{jule::Slice<jule::Ref<_104a21a10_TypeKind>>()};
	jule::Slice<jule::Ref<_1037649f0_ParamIns>> _field_params{jule::Slice<jule::Ref<_1037649f0_ParamIns>>()};
	jule::Ref<_104a21a10_TypeKind> _field_result{jule::Ref<_104a21a10_TypeKind>()};
	jule::Ref<_104180810_Scope> _field_scope{jule::Ref<_104180810_Scope>()};
	jule::Ref<_1036da950_ReferenceStack> _field_references{jule::Ref<_1036da950_ReferenceStack>()};
	jule::Ref<_1036da950_ReferenceStack> _field_refers{jule::Ref<_1036da950_ReferenceStack>()};
	jule::Fn<jule::Ref<_1191dc300_Data>(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>)> _field_caller{jule::Fn<jule::Ref<_1191dc300_Data>(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>)>()};
	jule::Bool _field_reloaded{jule::Bool()};
	jule::Bool _field_anon{jule::Bool()};


	_1037649f0_FnIns(jule::Ref<_1037370d0_StructIns> __param_owner, jule::Ref<_1037649f0_Fn> __param_decl, jule::Slice<jule::Ref<_104a21a10_TypeKind>> __param_generics, jule::Slice<jule::Ref<_1037649f0_ParamIns>> __param_params, jule::Ref<_104a21a10_TypeKind> __param_result, jule::Ref<_104180810_Scope> __param_scope, jule::Ref<_1036da950_ReferenceStack> __param_references, jule::Ref<_1036da950_ReferenceStack> __param_refers, jule::Fn<jule::Ref<_1191dc300_Data>(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>)> __param_caller, jule::Bool __param_reloaded, jule::Bool __param_anon) {
		this->self = jule::Ref<_1037649f0_FnIns>::make(this, nullptr);

		this->_field_owner = __param_owner;
		this->_field_decl = __param_decl;
		this->_field_generics = __param_generics;
		this->_field_params = __param_params;
		this->_field_result = __param_result;
		this->_field_scope = __param_scope;
		this->_field_references = __param_references;
		this->_field_refers = __param_refers;
		this->_field_caller = __param_caller;
		this->_field_reloaded = __param_reloaded;
		this->_field_anon = __param_anon;
	}

	~_1037649f0_FnIns(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1037649f0_FnIns(void) { this->self = jule::Ref<_1037649f0_FnIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Str _method_get_kind_str(jule::Bool);


	inline bool operator==(const _1037649f0_FnIns &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_params == _Src._field_params &&
			this->_field_result == _Src._field_result &&
			this->_field_scope == _Src._field_scope &&
			this->_field_references == _Src._field_references &&
			this->_field_refers == _Src._field_refers &&
			this->_field_caller == _Src._field_caller &&
			this->_field_reloaded == _Src._field_reloaded &&
			this->_field_anon == _Src._field_anon;
	}

	inline bool operator!=(const _1037649f0_FnIns &_Src) const { return !this->operator==(_Src); }
};


struct _1036da950_ReferenceStack {
	jule::Ref<_1036da950_ReferenceStack> self{};

	jule::Slice<jule::Any> _field_buffer{jule::Slice<jule::Any>()};


	_1036da950_ReferenceStack(jule::Slice<jule::Any> __param_buffer) {
		this->self = jule::Ref<_1036da950_ReferenceStack>::make(this, nullptr);

		this->_field_buffer = __param_buffer;
	}

	~_1036da950_ReferenceStack(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1036da950_ReferenceStack(void) { this->self = jule::Ref<_1036da950_ReferenceStack>::make(this, nullptr); }

	static inline jule::Ref<_1036da950_ReferenceStack> _static_method_new(void);


	inline jule::Int _method_len(void);


	inline jule::Any _method_at(jule::Int);


	inline void _method_push(jule::Any);


	inline jule::Bool _method_exist_0(jule::Ref<_104598e40_Var>);
	inline jule::Bool _method_exist_1(jule::Ref<_1037649f0_FnIns>);
	inline jule::Bool _method_exist_2(jule::Ref<_1037370d0_StructIns>);


	inline bool operator==(const _1036da950_ReferenceStack &_Src) const {
		return 
			this->_field_buffer == _Src._field_buffer;
	}

	inline bool operator!=(const _1036da950_ReferenceStack &_Src) const { return !this->operator==(_Src); }
};


struct _1036da950_SymbolBuilder {
	jule::Ref<_1036da950_SymbolBuilder> self{};

	jule::Ref<_1036da950_SymbolBuilder> _field_owner{jule::Ref<_1036da950_SymbolBuilder>()};
	jule::Trait<_119162660_Importer> _field_importer{jule::Trait<_119162660_Importer>()};
	jule::Slice<_1486379e0_Log> _field_errors{jule::Slice<_1486379e0_Log>()};
	jule::Ref<_1487f02c0_Ast> _field_ast{jule::Ref<_1487f02c0_Ast>()};
	jule::Ref<_1191dcd40_SymbolTable> _field_table{jule::Ref<_1191dcd40_SymbolTable>()};


	_1036da950_SymbolBuilder(jule::Ref<_1036da950_SymbolBuilder> __param_owner, jule::Trait<_119162660_Importer> __param_importer, jule::Slice<_1486379e0_Log> __param_errors, jule::Ref<_1487f02c0_Ast> __param_ast, jule::Ref<_1191dcd40_SymbolTable> __param_table) {
		this->self = jule::Ref<_1036da950_SymbolBuilder>::make(this, nullptr);

		this->_field_owner = __param_owner;
		this->_field_importer = __param_importer;
		this->_field_errors = __param_errors;
		this->_field_ast = __param_ast;
		this->_field_table = __param_table;
	}

	~_1036da950_SymbolBuilder(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1036da950_SymbolBuilder(void) { this->self = jule::Ref<_1036da950_SymbolBuilder>::make(this, nullptr); }

	inline jule::Ref<_1036da950_SymbolBuilder> _method_get_root(void);


	inline void _method_push_err(_108e15ff0_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_text(_108e15ff0_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_cpp_use_decl_path(jule::Ref<_1487f5920_UseDecl>);


	inline jule::Ref<_119162660_ImportInfo> _method_build_cpp_header_import(jule::Ref<_1487f5920_UseDecl>);


	inline jule::Ref<_119162660_ImportInfo> _method_build_std_import(jule::Ref<_1487f5920_UseDecl>);


	inline jule::Ref<_119162660_ImportInfo> _method_build_ident_import(jule::Ref<_1487f5920_UseDecl>);


	inline jule::Ref<_119162660_ImportInfo> _method_build_import(jule::Ref<_1487f5920_UseDecl>);


	inline jule::Bool _method_check_duplicate_use_decl(jule::Ref<_119162660_ImportInfo>);


	inline void _method_impl_import_selections(jule::Ref<_119162660_ImportInfo>,jule::Ref<_1487f5920_UseDecl>);


	inline jule::Str _method_get_as_link_path(jule::Str);


	inline void _method_push_cycle_error(jule::Ref<_1036da950_SymbolBuilder>,jule::Str,jule::Str&);


	inline void _method_push_cross_cycle_error(jule::Ref<_1036da950_SymbolBuilder>,jule::Ref<_119162660_ImportInfo>,_108e15ff0_Token);


	inline jule::Bool _method_check_import_cycles(jule::Ref<_119162660_ImportInfo>,jule::Ref<_1487f5920_UseDecl>);


	inline jule::Bool _method_import_package(jule::Ref<_119162660_ImportInfo>&,jule::Ref<_1487f5920_UseDecl>);


	inline jule::Ref<_119162660_ImportInfo> _method_import_use_decl(jule::Ref<_1487f5920_UseDecl>);


	inline void _method_import_use_decls(void);


	inline void _method_append_decl(_1487f5920_Node);


	inline void _method_append_decls(void);


	inline void _method_append_impls(void);


	inline void _method_push_directive_pass(jule::Ref<_1487f5920_Directive>);


	inline void _method_append_top_directives(void);


	inline void _method_build(void);


	inline bool operator==(const _1036da950_SymbolBuilder &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_importer == _Src._field_importer &&
			this->_field_errors == _Src._field_errors &&
			this->_field_ast == _Src._field_ast &&
			this->_field_table == _Src._field_table;
	}

	inline bool operator!=(const _1036da950_SymbolBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_Scope {
	jule::Ref<_104180810_Scope> self{};

	jule::Ref<_104180810_Scope> _field_parent{jule::Ref<_104180810_Scope>()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Bool _field_deferred{jule::Bool()};
	jule::Slice<jule::Any> _field_stmts{jule::Slice<jule::Any>()};


	_104180810_Scope(jule::Ref<_104180810_Scope> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts) {
		this->self = jule::Ref<_104180810_Scope>::make(this, nullptr);

		this->_field_parent = __param_parent;
		this->_field_unsafety = __param_unsafety;
		this->_field_deferred = __param_deferred;
		this->_field_stmts = __param_stmts;
	}

	~_104180810_Scope(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_Scope(void) { this->self = jule::Ref<_104180810_Scope>::make(this, nullptr); }

	inline bool operator==(const _104180810_Scope &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _104180810_Scope &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_If {
	jule::Ref<_104180810_If> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Ref<_104180810_Scope> _field_scope{jule::Ref<_104180810_Scope>()};


	_104180810_If(jule::Any __param_expr, jule::Ref<_104180810_Scope> __param_scope) {
		this->self = jule::Ref<_104180810_If>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_scope = __param_scope;
	}

	~_104180810_If(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_If(void) { this->self = jule::Ref<_104180810_If>::make(this, nullptr); }

	inline bool operator==(const _104180810_If &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _104180810_If &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_Else {
	jule::Ref<_104180810_Else> self{};

	jule::Ref<_104180810_Scope> _field_scope{jule::Ref<_104180810_Scope>()};


	_104180810_Else(jule::Ref<_104180810_Scope> __param_scope) {
		this->self = jule::Ref<_104180810_Else>::make(this, nullptr);

		this->_field_scope = __param_scope;
	}

	~_104180810_Else(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_Else(void) { this->self = jule::Ref<_104180810_Else>::make(this, nullptr); }

	inline bool operator==(const _104180810_Else &_Src) const {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _104180810_Else &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_Conditional {
	jule::Ref<_104180810_Conditional> self{};

	jule::Slice<jule::Ref<_104180810_If>> _field_elifs{jule::Slice<jule::Ref<_104180810_If>>()};
	jule::Ref<_104180810_Else> _field_default{jule::Ref<_104180810_Else>()};


	_104180810_Conditional(jule::Slice<jule::Ref<_104180810_If>> __param_elifs, jule::Ref<_104180810_Else> __param_default) {
		this->self = jule::Ref<_104180810_Conditional>::make(this, nullptr);

		this->_field_elifs = __param_elifs;
		this->_field_default = __param_default;
	}

	~_104180810_Conditional(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_Conditional(void) { this->self = jule::Ref<_104180810_Conditional>::make(this, nullptr); }

	inline bool operator==(const _104180810_Conditional &_Src) const {
		return 
			this->_field_elifs == _Src._field_elifs &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _104180810_Conditional &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_InfIter {
	jule::Ref<_104180810_InfIter> self{};

	jule::Ref<_104180810_Scope> _field_scope{jule::Ref<_104180810_Scope>()};


	_104180810_InfIter(jule::Ref<_104180810_Scope> __param_scope) {
		this->self = jule::Ref<_104180810_InfIter>::make(this, nullptr);

		this->_field_scope = __param_scope;
	}

	~_104180810_InfIter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_InfIter(void) { this->self = jule::Ref<_104180810_InfIter>::make(this, nullptr); }

	inline bool operator==(const _104180810_InfIter &_Src) const {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _104180810_InfIter &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_WhileIter {
	jule::Ref<_104180810_WhileIter> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Any _field_next{jule::Any()};
	jule::Ref<_104180810_Scope> _field_scope{jule::Ref<_104180810_Scope>()};


	_104180810_WhileIter(jule::Any __param_expr, jule::Any __param_next, jule::Ref<_104180810_Scope> __param_scope) {
		this->self = jule::Ref<_104180810_WhileIter>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_next = __param_next;
		this->_field_scope = __param_scope;
	}

	~_104180810_WhileIter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_WhileIter(void) { this->self = jule::Ref<_104180810_WhileIter>::make(this, nullptr); }

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _104180810_WhileIter &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _104180810_WhileIter &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_RangeIter {
	jule::Ref<_104180810_RangeIter> self{};

	jule::Ref<_1191dc300_Data> _field_expr{jule::Ref<_1191dc300_Data>()};
	jule::Ref<_104180810_Scope> _field_scope{jule::Ref<_104180810_Scope>()};
	jule::Ref<_104598e40_Var> _field_key_a{jule::Ref<_104598e40_Var>()};
	jule::Ref<_104598e40_Var> _field_key_b{jule::Ref<_104598e40_Var>()};


	_104180810_RangeIter(jule::Ref<_1191dc300_Data> __param_expr, jule::Ref<_104180810_Scope> __param_scope, jule::Ref<_104598e40_Var> __param_key_a, jule::Ref<_104598e40_Var> __param_key_b) {
		this->self = jule::Ref<_104180810_RangeIter>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_scope = __param_scope;
		this->_field_key_a = __param_key_a;
		this->_field_key_b = __param_key_b;
	}

	~_104180810_RangeIter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_RangeIter(void) { this->self = jule::Ref<_104180810_RangeIter>::make(this, nullptr); }

	inline bool operator==(const _104180810_RangeIter &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _104180810_RangeIter &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_ContSt {
	jule::Ref<_104180810_ContSt> self{};

	jule::Uintptr _field_it{jule::Uintptr()};


	_104180810_ContSt(jule::Uintptr __param_it) {
		this->self = jule::Ref<_104180810_ContSt>::make(this, nullptr);

		this->_field_it = __param_it;
	}

	~_104180810_ContSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_ContSt(void) { this->self = jule::Ref<_104180810_ContSt>::make(this, nullptr); }

	inline bool operator==(const _104180810_ContSt &_Src) const {
		return 
			this->_field_it == _Src._field_it;
	}

	inline bool operator!=(const _104180810_ContSt &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_BreakSt {
	jule::Ref<_104180810_BreakSt> self{};

	jule::Uintptr _field_it{jule::Uintptr()};
	jule::Uintptr _field_mtch{jule::Uintptr()};


	_104180810_BreakSt(jule::Uintptr __param_it, jule::Uintptr __param_mtch) {
		this->self = jule::Ref<_104180810_BreakSt>::make(this, nullptr);

		this->_field_it = __param_it;
		this->_field_mtch = __param_mtch;
	}

	~_104180810_BreakSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_BreakSt(void) { this->self = jule::Ref<_104180810_BreakSt>::make(this, nullptr); }

	inline bool operator==(const _104180810_BreakSt &_Src) const {
		return 
			this->_field_it == _Src._field_it &&
			this->_field_mtch == _Src._field_mtch;
	}

	inline bool operator!=(const _104180810_BreakSt &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_Label {
	jule::Ref<_104180810_Label> self{};

	jule::Str _field_ident{jule::Str()};


	_104180810_Label(jule::Str __param_ident) {
		this->self = jule::Ref<_104180810_Label>::make(this, nullptr);

		this->_field_ident = __param_ident;
	}

	~_104180810_Label(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_Label(void) { this->self = jule::Ref<_104180810_Label>::make(this, nullptr); }

	inline bool operator==(const _104180810_Label &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _104180810_Label &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_GotoSt {
	jule::Ref<_104180810_GotoSt> self{};

	jule::Str _field_ident{jule::Str()};


	_104180810_GotoSt(jule::Str __param_ident) {
		this->self = jule::Ref<_104180810_GotoSt>::make(this, nullptr);

		this->_field_ident = __param_ident;
	}

	~_104180810_GotoSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_GotoSt(void) { this->self = jule::Ref<_104180810_GotoSt>::make(this, nullptr); }

	inline bool operator==(const _104180810_GotoSt &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _104180810_GotoSt &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_Postfix {
	jule::Ref<_104180810_Postfix> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Str _field_op{jule::Str()};


	_104180810_Postfix(jule::Any __param_expr, jule::Str __param_op) {
		this->self = jule::Ref<_104180810_Postfix>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_op = __param_op;
	}

	~_104180810_Postfix(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_Postfix(void) { this->self = jule::Ref<_104180810_Postfix>::make(this, nullptr); }

	inline bool operator==(const _104180810_Postfix &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _104180810_Postfix &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_Assign {
	jule::Ref<_104180810_Assign> self{};

	jule::Any _field_l{jule::Any()};
	jule::Any _field_r{jule::Any()};
	jule::Str _field_op{jule::Str()};


	_104180810_Assign(jule::Any __param_l, jule::Any __param_r, jule::Str __param_op) {
		this->self = jule::Ref<_104180810_Assign>::make(this, nullptr);

		this->_field_l = __param_l;
		this->_field_r = __param_r;
		this->_field_op = __param_op;
	}

	~_104180810_Assign(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_Assign(void) { this->self = jule::Ref<_104180810_Assign>::make(this, nullptr); }

	inline bool operator==(const _104180810_Assign &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _104180810_Assign &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_MultiAssign {
	jule::Ref<_104180810_MultiAssign> self{};

	jule::Slice<jule::Any> _field_l{jule::Slice<jule::Any>()};
	jule::Any _field_r{jule::Any()};


	_104180810_MultiAssign(jule::Slice<jule::Any> __param_l, jule::Any __param_r) {
		this->self = jule::Ref<_104180810_MultiAssign>::make(this, nullptr);

		this->_field_l = __param_l;
		this->_field_r = __param_r;
	}

	~_104180810_MultiAssign(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_MultiAssign(void) { this->self = jule::Ref<_104180810_MultiAssign>::make(this, nullptr); }

	inline bool operator==(const _104180810_MultiAssign &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r;
	}

	inline bool operator!=(const _104180810_MultiAssign &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_Match {
	jule::Ref<_104180810_Match> self{};

	jule::Ref<_1191dc300_Data> _field_expr{jule::Ref<_1191dc300_Data>()};
	jule::Bool _field_type_match{jule::Bool()};
	jule::Slice<jule::Ref<_104180810_Case>> _field_cases{jule::Slice<jule::Ref<_104180810_Case>>()};
	jule::Ref<_104180810_Case> _field_default{jule::Ref<_104180810_Case>()};


	_104180810_Match(jule::Ref<_1191dc300_Data> __param_expr, jule::Bool __param_type_match, jule::Slice<jule::Ref<_104180810_Case>> __param_cases, jule::Ref<_104180810_Case> __param_default) {
		this->self = jule::Ref<_104180810_Match>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_type_match = __param_type_match;
		this->_field_cases = __param_cases;
		this->_field_default = __param_default;
	}

	~_104180810_Match(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_Match(void) { this->self = jule::Ref<_104180810_Match>::make(this, nullptr); }

	inline bool operator==(const _104180810_Match &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _104180810_Match &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_Case {
	jule::Ref<_104180810_Case> self{};

	jule::Ref<_104180810_Match> _field_owner{jule::Ref<_104180810_Match>()};
	jule::Ref<_104180810_Scope> _field_scope{jule::Ref<_104180810_Scope>()};
	jule::Slice<jule::Any> _field_exprs{jule::Slice<jule::Any>()};
	jule::Ref<_104180810_Case> _field_next{jule::Ref<_104180810_Case>()};


	_104180810_Case(jule::Ref<_104180810_Match> __param_owner, jule::Ref<_104180810_Scope> __param_scope, jule::Slice<jule::Any> __param_exprs, jule::Ref<_104180810_Case> __param_next) {
		this->self = jule::Ref<_104180810_Case>::make(this, nullptr);

		this->_field_owner = __param_owner;
		this->_field_scope = __param_scope;
		this->_field_exprs = __param_exprs;
		this->_field_next = __param_next;
	}

	~_104180810_Case(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_Case(void) { this->self = jule::Ref<_104180810_Case>::make(this, nullptr); }

	inline jule::Bool _method_is_default(void);


	inline bool operator==(const _104180810_Case &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_next == _Src._field_next;
	}

	inline bool operator!=(const _104180810_Case &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_FallSt {
	jule::Ref<_104180810_FallSt> self{};

	jule::Uintptr _field_dest_case{jule::Uintptr()};


	_104180810_FallSt(jule::Uintptr __param_dest_case) {
		this->self = jule::Ref<_104180810_FallSt>::make(this, nullptr);

		this->_field_dest_case = __param_dest_case;
	}

	~_104180810_FallSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_FallSt(void) { this->self = jule::Ref<_104180810_FallSt>::make(this, nullptr); }

	inline bool operator==(const _104180810_FallSt &_Src) const {
		return 
			this->_field_dest_case == _Src._field_dest_case;
	}

	inline bool operator!=(const _104180810_FallSt &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_RetSt {
	jule::Ref<_104180810_RetSt> self{};

	jule::Slice<jule::Ref<_104598e40_Var>> _field_vars{jule::Slice<jule::Ref<_104598e40_Var>>()};
	jule::Any _field_expr{jule::Any()};


	_104180810_RetSt(jule::Slice<jule::Ref<_104598e40_Var>> __param_vars, jule::Any __param_expr) {
		this->self = jule::Ref<_104180810_RetSt>::make(this, nullptr);

		this->_field_vars = __param_vars;
		this->_field_expr = __param_expr;
	}

	~_104180810_RetSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_RetSt(void) { this->self = jule::Ref<_104180810_RetSt>::make(this, nullptr); }

	inline bool operator==(const _104180810_RetSt &_Src) const {
		return 
			this->_field_vars == _Src._field_vars &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _104180810_RetSt &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_Recover {
	jule::Ref<_104180810_Recover> self{};

	jule::Ref<_1037649f0_FnIns> _field_handler{jule::Ref<_1037649f0_FnIns>()};
	jule::Any _field_handler_expr{jule::Any()};
	jule::Ref<_104180810_Scope> _field_scope{jule::Ref<_104180810_Scope>()};
	jule::Ref<_1037649f0_FnIns> _field_scope_owner{jule::Ref<_1037649f0_FnIns>()};


	_104180810_Recover(jule::Ref<_1037649f0_FnIns> __param_handler, jule::Any __param_handler_expr, jule::Ref<_104180810_Scope> __param_scope, jule::Ref<_1037649f0_FnIns> __param_scope_owner) {
		this->self = jule::Ref<_104180810_Recover>::make(this, nullptr);

		this->_field_handler = __param_handler;
		this->_field_handler_expr = __param_handler_expr;
		this->_field_scope = __param_scope;
		this->_field_scope_owner = __param_scope_owner;
	}

	~_104180810_Recover(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_Recover(void) { this->self = jule::Ref<_104180810_Recover>::make(this, nullptr); }

	inline bool operator==(const _104180810_Recover &_Src) const {
		return 
			this->_field_handler == _Src._field_handler &&
			this->_field_handler_expr == _Src._field_handler_expr &&
			this->_field_scope == _Src._field_scope &&
			this->_field_scope_owner == _Src._field_scope_owner;
	}

	inline bool operator!=(const _104180810_Recover &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_ScopeGoto {
	jule::Ref<_104180810_ScopeGoto> self{};

	jule::Ref<_1487f5920_GotoSt> _field_gt{jule::Ref<_1487f5920_GotoSt>()};
	jule::Ref<_104180810_ScopeChecker> _field_scope{jule::Ref<_104180810_ScopeChecker>()};
	jule::Int _field_pos{jule::Int()};


	_104180810_ScopeGoto(jule::Ref<_1487f5920_GotoSt> __param_gt, jule::Ref<_104180810_ScopeChecker> __param_scope, jule::Int __param_pos) {
		this->self = jule::Ref<_104180810_ScopeGoto>::make(this, nullptr);

		this->_field_gt = __param_gt;
		this->_field_scope = __param_scope;
		this->_field_pos = __param_pos;
	}

	~_104180810_ScopeGoto(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_ScopeGoto(void) { this->self = jule::Ref<_104180810_ScopeGoto>::make(this, nullptr); }

	inline bool operator==(const _104180810_ScopeGoto &_Src) const {
		return 
			this->_field_gt == _Src._field_gt &&
			this->_field_scope == _Src._field_scope &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _104180810_ScopeGoto &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_ScopeChecker: public _10459ee60_Lookup {
	jule::Ref<_104180810_ScopeChecker> self{};

	jule::Ref<_119177e90_Sema> _field_s{jule::Ref<_119177e90_Sema>()};
	jule::Ref<_1037649f0_FnIns> _field_owner{jule::Ref<_1037649f0_FnIns>()};
	jule::Ref<_104180810_ScopeChecker> _field_parent{jule::Ref<_104180810_ScopeChecker>()};
	jule::Int _field_child_index{jule::Int()};
	jule::Ref<_1191dcd40_SymbolTable> _field_table{jule::Ref<_1191dcd40_SymbolTable>()};
	jule::Ref<_104180810_Scope> _field_scope{jule::Ref<_104180810_Scope>()};
	jule::Ref<_1487f5920_ScopeTree> _field_tree{jule::Ref<_1487f5920_ScopeTree>()};
	jule::Uintptr _field_it{jule::Uintptr()};
	jule::Uintptr _field_cse{jule::Uintptr()};
	jule::Ref<jule::Slice<jule::Ref<_104180810_ScopeLabel>>> _field_labels{jule::Ref<jule::Slice<jule::Ref<_104180810_ScopeLabel>>>()};
	jule::Ref<jule::Slice<jule::Ref<_104180810_ScopeGoto>>> _field_gotos{jule::Ref<jule::Slice<jule::Ref<_104180810_ScopeGoto>>>()};
	jule::Int _field_i{jule::Int()};


	_104180810_ScopeChecker(jule::Ref<_119177e90_Sema> __param_s, jule::Ref<_1037649f0_FnIns> __param_owner, jule::Ref<_104180810_ScopeChecker> __param_parent, jule::Int __param_child_index, jule::Ref<_1191dcd40_SymbolTable> __param_table, jule::Ref<_104180810_Scope> __param_scope, jule::Ref<_1487f5920_ScopeTree> __param_tree, jule::Uintptr __param_it, jule::Uintptr __param_cse, jule::Ref<jule::Slice<jule::Ref<_104180810_ScopeLabel>>> __param_labels, jule::Ref<jule::Slice<jule::Ref<_104180810_ScopeGoto>>> __param_gotos, jule::Int __param_i) {
		this->self = jule::Ref<_104180810_ScopeChecker>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_owner = __param_owner;
		this->_field_parent = __param_parent;
		this->_field_child_index = __param_child_index;
		this->_field_table = __param_table;
		this->_field_scope = __param_scope;
		this->_field_tree = __param_tree;
		this->_field_it = __param_it;
		this->_field_cse = __param_cse;
		this->_field_labels = __param_labels;
		this->_field_gotos = __param_gotos;
		this->_field_i = __param_i;
	}

	~_104180810_ScopeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_ScopeChecker(void) { this->self = jule::Ref<_104180810_ScopeChecker>::make(this, nullptr); }

	inline jule::Ref<_119162660_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_119162660_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)>);


	inline jule::Ref<_104598e40_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_104a21a10_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_1037370d0_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_1037649f0_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_1036e5da0_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_1036dad50_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_root(void);


	inline jule::Ref<_104180810_ScopeChecker> _method_get_root(void);


	inline jule::Ref<_104180810_Label> _method_find_label(jule::Str);


	inline jule::Ref<_104180810_ScopeLabel> _method_find_label_scope(jule::Str);


	inline jule::Ref<_104180810_ScopeLabel> _method_find_label_all(jule::Str);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str);


	inline void _method_check_var_decl(jule::Ref<_1487f5920_VarDecl>);


	inline void _method_check_type_alias_decl(jule::Ref<_1487f5920_TypeAliasDecl>);


	inline jule::Ref<_104180810_Scope> _method_get_child(void);


	inline void _method_check_child_ssc(jule::Ref<_1487f5920_ScopeTree>,jule::Ref<_104180810_Scope>,jule::Ref<_104180810_ScopeChecker>);


	inline jule::Ref<_104180810_Scope> _method_check_child_sc(jule::Ref<_1487f5920_ScopeTree>,jule::Ref<_104180810_ScopeChecker>);


	inline jule::Ref<_104180810_Scope> _method_check_child(jule::Ref<_1487f5920_ScopeTree>);


	inline void _method_check_anon_scope(jule::Ref<_1487f5920_ScopeTree>);


	inline jule::Bool _method_try_call_recover(jule::Ref<_1191dc300_Data>);


	inline void _method_check_expr(jule::Ref<_1487f5920_Expr>);


	inline jule::Ref<_104180810_If> _method_check_if(jule::Ref<_1487f5920_If>);


	inline jule::Ref<_104180810_Else> _method_check_else(jule::Ref<_1487f5920_Else>);


	inline void _method_check_conditional(jule::Ref<_1487f5920_Conditional>);


	inline jule::Ref<_104180810_Scope> _method_check_iter_scope_sc(jule::Uintptr,jule::Ref<_1487f5920_ScopeTree>,jule::Ref<_104180810_ScopeChecker>);


	inline jule::Ref<_104180810_Scope> _method_check_iter_scope(jule::Uintptr,jule::Ref<_1487f5920_ScopeTree>);


	inline void _method_check_inf_iter(jule::Ref<_1487f5920_Iter>);


	inline void _method_check_while_iter(jule::Ref<_1487f5920_Iter>);


	inline void _method_check_range_iter(jule::Ref<_1487f5920_Iter>);


	inline void _method_check_iter(jule::Ref<_1487f5920_Iter>);


	inline jule::Bool _method_check_valid_cont_label(jule::Uintptr);


	inline jule::Bool _method_check_valid_break_label(jule::Uintptr);


	inline jule::Ref<_104180810_ContSt> _method_check_cont_valid_scope(jule::Ref<_1487f5920_ContSt>);


	inline void _method_check_cont(jule::Ref<_1487f5920_ContSt>);


	inline void _method_check_label(jule::Ref<_1487f5920_LabelSt>);


	inline void _method_push_goto(jule::Ref<_1487f5920_GotoSt>);


	inline void _method_check_postfix(jule::Ref<_1487f5920_AssignSt>);


	inline jule::Bool _method_is_new_assign_ident(jule::Str);


	inline void _method_check_single_assign(jule::Ref<_1487f5920_AssignSt>);


	inline void _method___process_end_part_of_multi_assign(jule::Ref<_104180810_MultiAssign>,jule::Ref<_1487f5920_AssignSt>,jule::Ref<_1487f5920_AssignLeft>,jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>);


	inline void _method_check_ret_multi_assign(jule::Ref<_1487f5920_AssignSt>);


	inline void _method_check_multi_assign(jule::Ref<_1487f5920_AssignSt>);


	inline void _method_check_assign_st(jule::Ref<_1487f5920_AssignSt>);


	inline jule::Ref<_104180810_Scope> _method_check_case_scope(jule::Ref<_104180810_Case>,jule::Ref<_1487f5920_ScopeTree>);


	inline jule::Ref<_104180810_Case> _method_check_case(jule::Ref<_104180810_Match>,jule::Int,jule::Ref<_1487f5920_Case>,jule::Ref<_1191dc300_Data>);


	inline void _method_check_cases(jule::Ref<_1487f5920_MatchCase>,jule::Ref<_104180810_Match>,jule::Ref<_1191dc300_Data>);


	inline jule::Ref<_104180810_Case> _method_check_default(jule::Ref<_104180810_Match>,jule::Ref<_1487f5920_Else>);


	inline void _method_check_type_match(jule::Ref<_1487f5920_MatchCase>);


	inline void _method_check_common_match(jule::Ref<_1487f5920_MatchCase>);


	inline void _method_check_match(jule::Ref<_1487f5920_MatchCase>);


	inline void _method_check_fall(jule::Ref<_1487f5920_FallSt>);


	inline jule::Ref<_104180810_BreakSt> _method_check_break_with_label(jule::Ref<_1487f5920_BreakSt>);


	inline jule::Ref<_104180810_BreakSt> _method_check_plain_break(jule::Ref<_1487f5920_BreakSt>);


	inline void _method_check_break(jule::Ref<_1487f5920_BreakSt>);


	inline void _method_check_ret(jule::Ref<_1487f5920_RetSt>);


	inline void _method_check_node(jule::Any);


	inline void _method_check_tree(void);


	inline void _method_check_same_scope_goto(jule::Ref<_104180810_ScopeGoto>,jule::Ref<_104180810_ScopeLabel>);


	inline jule::Bool _method_check_label_parents(jule::Ref<_104180810_ScopeGoto>,jule::Ref<_104180810_ScopeLabel>);


	inline void _method_check_goto_scope(jule::Ref<_104180810_ScopeGoto>,jule::Ref<_104180810_ScopeLabel>);


	inline void _method_check_diff_scope_goto(jule::Ref<_104180810_ScopeGoto>,jule::Ref<_104180810_ScopeLabel>);


	inline void _method_check_goto(jule::Ref<_104180810_ScopeGoto>,jule::Ref<_104180810_ScopeLabel>);


	inline void _method_check_gotos(void);


	inline void _method_check_labels(void);


	inline void _method_check_vars(void);


	inline void _method_check_aliases(void);


	inline void _method_check(jule::Ref<_1487f5920_ScopeTree>,jule::Ref<_104180810_Scope>);


	inline jule::Ref<_104180810_ScopeChecker> _method_new_child_checker(void);


	inline bool operator==(const _104180810_ScopeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_owner == _Src._field_owner &&
			this->_field_parent == _Src._field_parent &&
			this->_field_child_index == _Src._field_child_index &&
			this->_field_table == _Src._field_table &&
			this->_field_scope == _Src._field_scope &&
			this->_field_tree == _Src._field_tree &&
			this->_field_it == _Src._field_it &&
			this->_field_cse == _Src._field_cse &&
			this->_field_labels == _Src._field_labels &&
			this->_field_gotos == _Src._field_gotos &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _104180810_ScopeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_BinopExprModel {
	jule::Ref<_11911f320_BinopExprModel> self{};

	jule::Any _field_left{jule::Any()};
	jule::Any _field_right{jule::Any()};
	jule::Str _field_op{jule::Str()};


	_11911f320_BinopExprModel(jule::Any __param_left, jule::Any __param_right, jule::Str __param_op) {
		this->self = jule::Ref<_11911f320_BinopExprModel>::make(this, nullptr);

		this->_field_left = __param_left;
		this->_field_right = __param_right;
		this->_field_op = __param_op;
	}

	~_11911f320_BinopExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_BinopExprModel(void) { this->self = jule::Ref<_11911f320_BinopExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_BinopExprModel &_Src) const {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _11911f320_BinopExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_UnaryExprModel {
	jule::Ref<_11911f320_UnaryExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Str _field_op{jule::Str()};


	_11911f320_UnaryExprModel(jule::Any __param_expr, jule::Str __param_op) {
		this->self = jule::Ref<_11911f320_UnaryExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_op = __param_op;
	}

	~_11911f320_UnaryExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_UnaryExprModel(void) { this->self = jule::Ref<_11911f320_UnaryExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_UnaryExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _11911f320_UnaryExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_GetRefPtrExprModel {
	jule::Ref<_11911f320_GetRefPtrExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_11911f320_GetRefPtrExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_11911f320_GetRefPtrExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_11911f320_GetRefPtrExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_GetRefPtrExprModel(void) { this->self = jule::Ref<_11911f320_GetRefPtrExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_GetRefPtrExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11911f320_GetRefPtrExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_StructArgExprModel {
	jule::Ref<_11911f320_StructArgExprModel> self{};

	jule::Ref<_1037370d0_FieldIns> _field_field{jule::Ref<_1037370d0_FieldIns>()};
	jule::Any _field_expr{jule::Any()};


	_11911f320_StructArgExprModel(jule::Ref<_1037370d0_FieldIns> __param_field, jule::Any __param_expr) {
		this->self = jule::Ref<_11911f320_StructArgExprModel>::make(this, nullptr);

		this->_field_field = __param_field;
		this->_field_expr = __param_expr;
	}

	~_11911f320_StructArgExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_StructArgExprModel(void) { this->self = jule::Ref<_11911f320_StructArgExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_StructArgExprModel &_Src) const {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11911f320_StructArgExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_StructLitExprModel {
	jule::Ref<_11911f320_StructLitExprModel> self{};

	jule::Ref<_1037370d0_StructIns> _field_strct{jule::Ref<_1037370d0_StructIns>()};
	jule::Slice<jule::Ref<_11911f320_StructArgExprModel>> _field_args{jule::Slice<jule::Ref<_11911f320_StructArgExprModel>>()};


	_11911f320_StructLitExprModel(jule::Ref<_1037370d0_StructIns> __param_strct, jule::Slice<jule::Ref<_11911f320_StructArgExprModel>> __param_args) {
		this->self = jule::Ref<_11911f320_StructLitExprModel>::make(this, nullptr);

		this->_field_strct = __param_strct;
		this->_field_args = __param_args;
	}

	~_11911f320_StructLitExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_StructLitExprModel(void) { this->self = jule::Ref<_11911f320_StructLitExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_StructLitExprModel &_Src) const {
		return 
			this->_field_strct == _Src._field_strct &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _11911f320_StructLitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_AllocStructLitExprModel {
	jule::Ref<_11911f320_AllocStructLitExprModel> self{};

	jule::Ref<_11911f320_StructLitExprModel> _field_lit{jule::Ref<_11911f320_StructLitExprModel>()};


	_11911f320_AllocStructLitExprModel(jule::Ref<_11911f320_StructLitExprModel> __param_lit) {
		this->self = jule::Ref<_11911f320_AllocStructLitExprModel>::make(this, nullptr);

		this->_field_lit = __param_lit;
	}

	~_11911f320_AllocStructLitExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_AllocStructLitExprModel(void) { this->self = jule::Ref<_11911f320_AllocStructLitExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_AllocStructLitExprModel &_Src) const {
		return 
			this->_field_lit == _Src._field_lit;
	}

	inline bool operator!=(const _11911f320_AllocStructLitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_CastingExprModel {
	jule::Ref<_11911f320_CastingExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Ref<_104a21a10_TypeKind> _field_kind{jule::Ref<_104a21a10_TypeKind>()};
	jule::Ref<_104a21a10_TypeKind> _field_expr_kind{jule::Ref<_104a21a10_TypeKind>()};


	_11911f320_CastingExprModel(jule::Any __param_expr, jule::Ref<_104a21a10_TypeKind> __param_kind, jule::Ref<_104a21a10_TypeKind> __param_expr_kind) {
		this->self = jule::Ref<_11911f320_CastingExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_kind = __param_kind;
		this->_field_expr_kind = __param_expr_kind;
	}

	~_11911f320_CastingExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_CastingExprModel(void) { this->self = jule::Ref<_11911f320_CastingExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_CastingExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr_kind == _Src._field_expr_kind;
	}

	inline bool operator!=(const _11911f320_CastingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_FnCallExprModel {
	jule::Ref<_11911f320_FnCallExprModel> self{};

	jule::Ref<_1037649f0_FnIns> _field_func{jule::Ref<_1037649f0_FnIns>()};
	jule::Bool _field_is_co{jule::Bool()};
	jule::Any _field_expr{jule::Any()};
	jule::Slice<jule::Any> _field_args{jule::Slice<jule::Any>()};


	_11911f320_FnCallExprModel(jule::Ref<_1037649f0_FnIns> __param_func, jule::Bool __param_is_co, jule::Any __param_expr, jule::Slice<jule::Any> __param_args) {
		this->self = jule::Ref<_11911f320_FnCallExprModel>::make(this, nullptr);

		this->_field_func = __param_func;
		this->_field_is_co = __param_is_co;
		this->_field_expr = __param_expr;
		this->_field_args = __param_args;
	}

	~_11911f320_FnCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_FnCallExprModel(void) { this->self = jule::Ref<_11911f320_FnCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_FnCallExprModel &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_is_co == _Src._field_is_co &&
			this->_field_expr == _Src._field_expr &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _11911f320_FnCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_SliceExprModel {
	jule::Ref<_11911f320_SliceExprModel> self{};

	jule::Ref<_104a21a10_TypeKind> _field_elem_kind{jule::Ref<_104a21a10_TypeKind>()};
	jule::Slice<jule::Any> _field_elems{jule::Slice<jule::Any>()};


	_11911f320_SliceExprModel(jule::Ref<_104a21a10_TypeKind> __param_elem_kind, jule::Slice<jule::Any> __param_elems) {
		this->self = jule::Ref<_11911f320_SliceExprModel>::make(this, nullptr);

		this->_field_elem_kind = __param_elem_kind;
		this->_field_elems = __param_elems;
	}

	~_11911f320_SliceExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_SliceExprModel(void) { this->self = jule::Ref<_11911f320_SliceExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_SliceExprModel &_Src) const {
		return 
			this->_field_elem_kind == _Src._field_elem_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _11911f320_SliceExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_IndexigExprModel {
	jule::Ref<_11911f320_IndexigExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Any _field_index{jule::Any()};


	_11911f320_IndexigExprModel(jule::Any __param_expr, jule::Any __param_index) {
		this->self = jule::Ref<_11911f320_IndexigExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_index = __param_index;
	}

	~_11911f320_IndexigExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_IndexigExprModel(void) { this->self = jule::Ref<_11911f320_IndexigExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_IndexigExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _11911f320_IndexigExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_AnonFnExprModel {
	jule::Ref<_11911f320_AnonFnExprModel> self{};

	jule::Ref<_1037649f0_FnIns> _field_func{jule::Ref<_1037649f0_FnIns>()};
	jule::Bool _field_global{jule::Bool()};


	_11911f320_AnonFnExprModel(jule::Ref<_1037649f0_FnIns> __param_func, jule::Bool __param_global) {
		this->self = jule::Ref<_11911f320_AnonFnExprModel>::make(this, nullptr);

		this->_field_func = __param_func;
		this->_field_global = __param_global;
	}

	~_11911f320_AnonFnExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_AnonFnExprModel(void) { this->self = jule::Ref<_11911f320_AnonFnExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_AnonFnExprModel &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_global == _Src._field_global;
	}

	inline bool operator!=(const _11911f320_AnonFnExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_KeyValPairExprModel {
	jule::Ref<_11911f320_KeyValPairExprModel> self{};

	jule::Any _field_key{jule::Any()};
	jule::Any _field_val{jule::Any()};


	_11911f320_KeyValPairExprModel(jule::Any __param_key, jule::Any __param_val) {
		this->self = jule::Ref<_11911f320_KeyValPairExprModel>::make(this, nullptr);

		this->_field_key = __param_key;
		this->_field_val = __param_val;
	}

	~_11911f320_KeyValPairExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_KeyValPairExprModel(void) { this->self = jule::Ref<_11911f320_KeyValPairExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_KeyValPairExprModel &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _11911f320_KeyValPairExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_MapExprModel {
	jule::Ref<_11911f320_MapExprModel> self{};

	jule::Ref<_104a21a10_TypeKind> _field_key_kind{jule::Ref<_104a21a10_TypeKind>()};
	jule::Ref<_104a21a10_TypeKind> _field_val_kind{jule::Ref<_104a21a10_TypeKind>()};
	jule::Slice<jule::Ref<_11911f320_KeyValPairExprModel>> _field_entries{jule::Slice<jule::Ref<_11911f320_KeyValPairExprModel>>()};


	_11911f320_MapExprModel(jule::Ref<_104a21a10_TypeKind> __param_key_kind, jule::Ref<_104a21a10_TypeKind> __param_val_kind, jule::Slice<jule::Ref<_11911f320_KeyValPairExprModel>> __param_entries) {
		this->self = jule::Ref<_11911f320_MapExprModel>::make(this, nullptr);

		this->_field_key_kind = __param_key_kind;
		this->_field_val_kind = __param_val_kind;
		this->_field_entries = __param_entries;
	}

	~_11911f320_MapExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_MapExprModel(void) { this->self = jule::Ref<_11911f320_MapExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_MapExprModel &_Src) const {
		return 
			this->_field_key_kind == _Src._field_key_kind &&
			this->_field_val_kind == _Src._field_val_kind &&
			this->_field_entries == _Src._field_entries;
	}

	inline bool operator!=(const _11911f320_MapExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_SlicingExprModel {
	jule::Ref<_11911f320_SlicingExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Any _field_left{jule::Any()};
	jule::Any _field_right{jule::Any()};


	_11911f320_SlicingExprModel(jule::Any __param_expr, jule::Any __param_left, jule::Any __param_right) {
		this->self = jule::Ref<_11911f320_SlicingExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_left = __param_left;
		this->_field_right = __param_right;
	}

	~_11911f320_SlicingExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_SlicingExprModel(void) { this->self = jule::Ref<_11911f320_SlicingExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_SlicingExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _11911f320_SlicingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_TraitSubIdentExprModel {
	jule::Ref<_11911f320_TraitSubIdentExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Str _field_ident{jule::Str()};


	_11911f320_TraitSubIdentExprModel(jule::Any __param_expr, jule::Str __param_ident) {
		this->self = jule::Ref<_11911f320_TraitSubIdentExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_ident = __param_ident;
	}

	~_11911f320_TraitSubIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_TraitSubIdentExprModel(void) { this->self = jule::Ref<_11911f320_TraitSubIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_TraitSubIdentExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _11911f320_TraitSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_StructSubIdentExprModel {
	jule::Ref<_11911f320_StructSubIdentExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Ref<_104a21a10_TypeKind> _field_expr_kind{jule::Ref<_104a21a10_TypeKind>()};
	jule::Ref<_1037649f0_FnIns> _field_method{jule::Ref<_1037649f0_FnIns>()};
	jule::Ref<_1037370d0_FieldIns> _field_field{jule::Ref<_1037370d0_FieldIns>()};


	_11911f320_StructSubIdentExprModel(jule::Any __param_expr, jule::Ref<_104a21a10_TypeKind> __param_expr_kind, jule::Ref<_1037649f0_FnIns> __param_method, jule::Ref<_1037370d0_FieldIns> __param_field) {
		this->self = jule::Ref<_11911f320_StructSubIdentExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_expr_kind = __param_expr_kind;
		this->_field_method = __param_method;
		this->_field_field = __param_field;
	}

	~_11911f320_StructSubIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_StructSubIdentExprModel(void) { this->self = jule::Ref<_11911f320_StructSubIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_StructSubIdentExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_method == _Src._field_method &&
			this->_field_field == _Src._field_field;
	}

	inline bool operator!=(const _11911f320_StructSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_StructStaticIdentExprModel {
	jule::Ref<_11911f320_StructStaticIdentExprModel> self{};

	jule::Ref<_1037370d0_StructIns> _field_structure{jule::Ref<_1037370d0_StructIns>()};
	jule::Any _field_expr{jule::Any()};
	jule::Ref<_1037649f0_FnIns> _field_method{jule::Ref<_1037649f0_FnIns>()};


	_11911f320_StructStaticIdentExprModel(jule::Ref<_1037370d0_StructIns> __param_structure, jule::Any __param_expr, jule::Ref<_1037649f0_FnIns> __param_method) {
		this->self = jule::Ref<_11911f320_StructStaticIdentExprModel>::make(this, nullptr);

		this->_field_structure = __param_structure;
		this->_field_expr = __param_expr;
		this->_field_method = __param_method;
	}

	~_11911f320_StructStaticIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_StructStaticIdentExprModel(void) { this->self = jule::Ref<_11911f320_StructStaticIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_StructStaticIdentExprModel &_Src) const {
		return 
			this->_field_structure == _Src._field_structure &&
			this->_field_expr == _Src._field_expr &&
			this->_field_method == _Src._field_method;
	}

	inline bool operator!=(const _11911f320_StructStaticIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_ArrayExprModel {
	jule::Ref<_11911f320_ArrayExprModel> self{};

	jule::Ref<_104a21a10_Arr> _field_kind{jule::Ref<_104a21a10_Arr>()};
	jule::Slice<jule::Any> _field_elems{jule::Slice<jule::Any>()};


	_11911f320_ArrayExprModel(jule::Ref<_104a21a10_Arr> __param_kind, jule::Slice<jule::Any> __param_elems) {
		this->self = jule::Ref<_11911f320_ArrayExprModel>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_elems = __param_elems;
	}

	~_11911f320_ArrayExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_ArrayExprModel(void) { this->self = jule::Ref<_11911f320_ArrayExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_ArrayExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _11911f320_ArrayExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_CommonIdentExprModel {
	jule::Ref<_11911f320_CommonIdentExprModel> self{};

	jule::Str _field_ident{jule::Str()};


	_11911f320_CommonIdentExprModel(jule::Str __param_ident) {
		this->self = jule::Ref<_11911f320_CommonIdentExprModel>::make(this, nullptr);

		this->_field_ident = __param_ident;
	}

	~_11911f320_CommonIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_CommonIdentExprModel(void) { this->self = jule::Ref<_11911f320_CommonIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_CommonIdentExprModel &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _11911f320_CommonIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_CommonSubIdentExprModel {
	jule::Ref<_11911f320_CommonSubIdentExprModel> self{};

	jule::Ref<_104a21a10_TypeKind> _field_expr_kind{jule::Ref<_104a21a10_TypeKind>()};
	jule::Any _field_expr{jule::Any()};
	jule::Str _field_ident{jule::Str()};


	_11911f320_CommonSubIdentExprModel(jule::Ref<_104a21a10_TypeKind> __param_expr_kind, jule::Any __param_expr, jule::Str __param_ident) {
		this->self = jule::Ref<_11911f320_CommonSubIdentExprModel>::make(this, nullptr);

		this->_field_expr_kind = __param_expr_kind;
		this->_field_expr = __param_expr;
		this->_field_ident = __param_ident;
	}

	~_11911f320_CommonSubIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_CommonSubIdentExprModel(void) { this->self = jule::Ref<_11911f320_CommonSubIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_CommonSubIdentExprModel &_Src) const {
		return 
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _11911f320_CommonSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_TupleExprModel {
	jule::Ref<_11911f320_TupleExprModel> self{};

	jule::Slice<jule::Ref<_1191dc300_Data>> _field_datas{jule::Slice<jule::Ref<_1191dc300_Data>>()};


	_11911f320_TupleExprModel(jule::Slice<jule::Ref<_1191dc300_Data>> __param_datas) {
		this->self = jule::Ref<_11911f320_TupleExprModel>::make(this, nullptr);

		this->_field_datas = __param_datas;
	}

	~_11911f320_TupleExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_TupleExprModel(void) { this->self = jule::Ref<_11911f320_TupleExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_TupleExprModel &_Src) const {
		return 
			this->_field_datas == _Src._field_datas;
	}

	inline bool operator!=(const _11911f320_TupleExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_BuiltinOutCallExprModel {
	jule::Ref<_11911f320_BuiltinOutCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_11911f320_BuiltinOutCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_11911f320_BuiltinOutCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_11911f320_BuiltinOutCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_BuiltinOutCallExprModel(void) { this->self = jule::Ref<_11911f320_BuiltinOutCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_BuiltinOutCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11911f320_BuiltinOutCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_BuiltinOutlnCallExprModel {
	jule::Ref<_11911f320_BuiltinOutlnCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_11911f320_BuiltinOutlnCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_11911f320_BuiltinOutlnCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_11911f320_BuiltinOutlnCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_BuiltinOutlnCallExprModel(void) { this->self = jule::Ref<_11911f320_BuiltinOutlnCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_BuiltinOutlnCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11911f320_BuiltinOutlnCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_BuiltinCloneCallExprModel {
	jule::Ref<_11911f320_BuiltinCloneCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_11911f320_BuiltinCloneCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_11911f320_BuiltinCloneCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_11911f320_BuiltinCloneCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_BuiltinCloneCallExprModel(void) { this->self = jule::Ref<_11911f320_BuiltinCloneCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_BuiltinCloneCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11911f320_BuiltinCloneCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_BuiltinNewCallExprModel {
	jule::Ref<_11911f320_BuiltinNewCallExprModel> self{};

	jule::Ref<_104a21a10_TypeKind> _field_kind{jule::Ref<_104a21a10_TypeKind>()};
	jule::Any _field_init{jule::Any()};


	_11911f320_BuiltinNewCallExprModel(jule::Ref<_104a21a10_TypeKind> __param_kind, jule::Any __param_init) {
		this->self = jule::Ref<_11911f320_BuiltinNewCallExprModel>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_init = __param_init;
	}

	~_11911f320_BuiltinNewCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_BuiltinNewCallExprModel(void) { this->self = jule::Ref<_11911f320_BuiltinNewCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_BuiltinNewCallExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_init == _Src._field_init;
	}

	inline bool operator!=(const _11911f320_BuiltinNewCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_BuiltinRealCallExprModel {
	jule::Ref<_11911f320_BuiltinRealCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_11911f320_BuiltinRealCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_11911f320_BuiltinRealCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_11911f320_BuiltinRealCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_BuiltinRealCallExprModel(void) { this->self = jule::Ref<_11911f320_BuiltinRealCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_BuiltinRealCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11911f320_BuiltinRealCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_BuiltinDropCallExprModel {
	jule::Ref<_11911f320_BuiltinDropCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_11911f320_BuiltinDropCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_11911f320_BuiltinDropCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_11911f320_BuiltinDropCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_BuiltinDropCallExprModel(void) { this->self = jule::Ref<_11911f320_BuiltinDropCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_BuiltinDropCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11911f320_BuiltinDropCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_BuiltinPanicCallExprModel {
	jule::Ref<_11911f320_BuiltinPanicCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_11911f320_BuiltinPanicCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_11911f320_BuiltinPanicCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_11911f320_BuiltinPanicCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_BuiltinPanicCallExprModel(void) { this->self = jule::Ref<_11911f320_BuiltinPanicCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_BuiltinPanicCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11911f320_BuiltinPanicCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_BuiltinMakeCallExprModel {
	jule::Ref<_11911f320_BuiltinMakeCallExprModel> self{};

	jule::Ref<_104a21a10_TypeKind> _field_kind{jule::Ref<_104a21a10_TypeKind>()};
	jule::Any _field_len{jule::Any()};
	jule::Any _field_cap{jule::Any()};


	_11911f320_BuiltinMakeCallExprModel(jule::Ref<_104a21a10_TypeKind> __param_kind, jule::Any __param_len, jule::Any __param_cap) {
		this->self = jule::Ref<_11911f320_BuiltinMakeCallExprModel>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_len = __param_len;
		this->_field_cap = __param_cap;
	}

	~_11911f320_BuiltinMakeCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_BuiltinMakeCallExprModel(void) { this->self = jule::Ref<_11911f320_BuiltinMakeCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_BuiltinMakeCallExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_len == _Src._field_len &&
			this->_field_cap == _Src._field_cap;
	}

	inline bool operator!=(const _11911f320_BuiltinMakeCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_BuiltinAppendCallExprModel {
	jule::Ref<_11911f320_BuiltinAppendCallExprModel> self{};

	jule::Any _field_dest{jule::Any()};
	jule::Any _field_elements{jule::Any()};


	_11911f320_BuiltinAppendCallExprModel(jule::Any __param_dest, jule::Any __param_elements) {
		this->self = jule::Ref<_11911f320_BuiltinAppendCallExprModel>::make(this, nullptr);

		this->_field_dest = __param_dest;
		this->_field_elements = __param_elements;
	}

	~_11911f320_BuiltinAppendCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_BuiltinAppendCallExprModel(void) { this->self = jule::Ref<_11911f320_BuiltinAppendCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_BuiltinAppendCallExprModel &_Src) const {
		return 
			this->_field_dest == _Src._field_dest &&
			this->_field_elements == _Src._field_elements;
	}

	inline bool operator!=(const _11911f320_BuiltinAppendCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_BuiltinErrorTraitSubIdentExprModel {
	jule::Ref<_11911f320_BuiltinErrorTraitSubIdentExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Str _field_ident{jule::Str()};


	_11911f320_BuiltinErrorTraitSubIdentExprModel(jule::Any __param_expr, jule::Str __param_ident) {
		this->self = jule::Ref<_11911f320_BuiltinErrorTraitSubIdentExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_ident = __param_ident;
	}

	~_11911f320_BuiltinErrorTraitSubIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_BuiltinErrorTraitSubIdentExprModel(void) { this->self = jule::Ref<_11911f320_BuiltinErrorTraitSubIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_BuiltinErrorTraitSubIdentExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _11911f320_BuiltinErrorTraitSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_SizeofExprModel {
	jule::Ref<_11911f320_SizeofExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_11911f320_SizeofExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_11911f320_SizeofExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_11911f320_SizeofExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_SizeofExprModel(void) { this->self = jule::Ref<_11911f320_SizeofExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_SizeofExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11911f320_SizeofExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_AlignofExprModel {
	jule::Ref<_11911f320_AlignofExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_11911f320_AlignofExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_11911f320_AlignofExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_11911f320_AlignofExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_AlignofExprModel(void) { this->self = jule::Ref<_11911f320_AlignofExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_AlignofExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11911f320_AlignofExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_RuneExprModel {
	jule::Ref<_11911f320_RuneExprModel> self{};

	jule::I32 _field_code{jule::I32()};


	_11911f320_RuneExprModel(jule::I32 __param_code) {
		this->self = jule::Ref<_11911f320_RuneExprModel>::make(this, nullptr);

		this->_field_code = __param_code;
	}

	~_11911f320_RuneExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_RuneExprModel(void) { this->self = jule::Ref<_11911f320_RuneExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_RuneExprModel &_Src) const {
		return 
			this->_field_code == _Src._field_code;
	}

	inline bool operator!=(const _11911f320_RuneExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _11911f320_ExplicitDerefExprModel {
	jule::Ref<_11911f320_ExplicitDerefExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_11911f320_ExplicitDerefExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_11911f320_ExplicitDerefExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_11911f320_ExplicitDerefExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11911f320_ExplicitDerefExprModel(void) { this->self = jule::Ref<_11911f320_ExplicitDerefExprModel>::make(this, nullptr); }

	inline bool operator==(const _11911f320_ExplicitDerefExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _11911f320_ExplicitDerefExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _119162660_Package: public _10459ee60_Lookup {
	jule::Ref<_119162660_Package> self{};

	jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> _field_files{jule::Slice<jule::Ref<_1191dcd40_SymbolTable>>()};


	_119162660_Package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> __param_files) {
		this->self = jule::Ref<_119162660_Package>::make(this, nullptr);

		this->_field_files = __param_files;
	}

	~_119162660_Package(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_119162660_Package(void) { this->self = jule::Ref<_119162660_Package>::make(this, nullptr); }

	inline jule::Ref<_119162660_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_119162660_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)>);


	inline jule::Ref<_104598e40_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_104a21a10_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_1037370d0_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_1037649f0_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_1036e5da0_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_1036dad50_Enum> _method_find_enum(jule::Str);


	inline bool operator==(const _119162660_Package &_Src) const {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _119162660_Package &_Src) const { return !this->operator==(_Src); }
};


struct _119177e90_Sema: public _10459ee60_Lookup {
	jule::Ref<_119177e90_Sema> self{};

	jule::Slice<_1486379e0_Log> _field_errors{jule::Slice<_1486379e0_Log>()};
	jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> _field_files{jule::Slice<jule::Ref<_1191dcd40_SymbolTable>>()};
	jule::Ref<_1191dcd40_SymbolTable> _field_file{jule::Ref<_1191dcd40_SymbolTable>()};


	_119177e90_Sema(jule::Slice<_1486379e0_Log> __param_errors, jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> __param_files, jule::Ref<_1191dcd40_SymbolTable> __param_file) {
		this->self = jule::Ref<_119177e90_Sema>::make(this, nullptr);

		this->_field_errors = __param_errors;
		this->_field_files = __param_files;
		this->_field_file = __param_file;
	}

	~_119177e90_Sema(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_119177e90_Sema(void) { this->self = jule::Ref<_119177e90_Sema>::make(this, nullptr); }

	inline jule::Ref<_119162660_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_119162660_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)>);


	inline jule::Ref<_104598e40_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_104a21a10_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_1037370d0_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_1037649f0_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_1036e5da0_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_1036dad50_Enum> _method_find_enum(jule::Str);


	inline void _method_set_current_file(jule::Ref<_1191dcd40_SymbolTable>);


	inline void _method_push_err(_108e15ff0_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_is_accessible_define(jule::Bool,_108e15ff0_Token);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline jule::Bool _method_check_generic_quantity(jule::Int,jule::Int,_108e15ff0_Token);


	inline jule::Bool _method_is_duplicated_import_selection(jule::Uintptr,jule::Str);


	inline jule::Any _method_get_import_def(jule::Str,jule::Ref<_119162660_ImportInfo>&);


	inline void _method_check_import_selections(jule::Ref<_119162660_ImportInfo>);


	inline jule::Bool _method_is_use_alias_duplication(jule::Ref<_119162660_ImportInfo>&);


	inline jule::Bool _method_check_import(jule::Ref<_119162660_ImportInfo>);


	inline void _method_check_imports(void);


	inline void _method_impl_file_impls(void);


	inline void _method_impl_impls(void);


	inline void _method_check_enums(void);


	inline jule::Bool _method_check_type_with_refers(jule::Ref<_104a21a10_TypeSymbol>,jule::Trait<_10459ee60_Lookup>,jule::Ref<_104a21a10_Referencer>);


	inline jule::Bool _method_check_type(jule::Ref<_104a21a10_TypeSymbol>,jule::Trait<_10459ee60_Lookup>);


	inline jule::Ref<_104a21a10_TypeKind> _method_build_type_with_generics(jule::Ref<_1487f5920_TypeDecl>,jule::Slice<jule::Ref<_104a21a10_TypeAlias>>);


	inline jule::Ref<_104a21a10_TypeKind> _method_build_type(jule::Ref<_1487f5920_TypeDecl>);


	inline jule::Ref<_1191dc300_Data> _method_evalpd(jule::Ref<_1487f5920_Expr>,jule::Trait<_10459ee60_Lookup>,jule::Ref<_104a21a10_TypeKind>,jule::Ref<_104598e40_Var>);


	inline jule::Ref<_1191dc300_Data> _method_evalp(jule::Ref<_1487f5920_Expr>,jule::Trait<_10459ee60_Lookup>,jule::Ref<_104a21a10_TypeKind>);


	inline jule::Ref<_1191dc300_Data> _method_eval(jule::Ref<_1487f5920_Expr>,jule::Trait<_10459ee60_Lookup>);


	inline void _method_check_assign_type(jule::Ref<_104a21a10_TypeKind>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token,jule::Bool);


	inline jule::Bool _method_check_type_compatibility(jule::Ref<_104a21a10_TypeKind>,jule::Ref<_104a21a10_TypeKind>,_108e15ff0_Token,jule::Bool);


	inline jule::Ref<_104a21a10_TypeKind> _method_build_non_generic_type_kind(jule::Ref<_1487f5920_TypeDecl>,jule::Slice<jule::Ref<_1487f5920_GenericDecl>>);


	inline void _method_build_fn_non_generic_type_kinds(jule::Ref<_1037649f0_FnIns>);


	inline jule::Ref<_1037649f0_FnIns> _method_get_trait_check_fn_kind(jule::Ref<_1037649f0_Fn>);


	inline jule::Bool _method_reload_fn_ins_types(jule::Ref<_1037649f0_FnIns>);


	inline void _method_check_validity_for_init_expr(jule::Bool,jule::Bool,jule::Ref<_104a21a10_TypeKind>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline jule::Bool _method_check_type_alias_decl_kind(jule::Ref<_104a21a10_TypeAlias>,jule::Trait<_10459ee60_Lookup>);


	inline void _method_check_type_alias_decl(jule::Ref<_104a21a10_TypeAlias>,jule::Trait<_10459ee60_Lookup>);


	inline void _method_check_type_alias_decl_dup(jule::Ref<_104a21a10_TypeAlias>);


	inline jule::Bool _method_check_type_alias_decls(void);


	inline void _method_check_enum_items_dup(jule::Ref<_1036dad50_Enum>);


	inline void _method_check_enum_items_str(jule::Ref<_1036dad50_Enum>);


	inline void _method_check_enum_items_int(jule::Ref<_1036dad50_Enum>);


	inline void _method_check_enum_decl(jule::Ref<_1036dad50_Enum>);


	inline jule::Bool _method_check_enum_decls(void);


	inline jule::Bool _method_check_decl_generics(jule::Slice<jule::Ref<_1487f5920_GenericDecl>>);


	inline jule::Bool _method_check_fn_decl_params_dup(jule::Ref<_1037649f0_Fn>);


	inline jule::Bool _method_check_fn_decl_result_dup(jule::Ref<_1037649f0_Fn>);


	inline jule::Bool _method_check_fn_decl_types(jule::Ref<_1037649f0_Fn>);


	inline jule::Bool _method_check_fn_decl_prototype(jule::Ref<_1037649f0_Fn>);


	inline void _method_check_trait_decl_method(jule::Ref<_1037649f0_Fn>);


	inline void _method_check_trait_decl_methods(jule::Ref<_1036e5da0_Trait>);


	inline void _method_check_trait_decl(jule::Ref<_1036e5da0_Trait>);


	inline jule::Bool _method_check_trait_decls(void);


	inline jule::Bool _method_check_trait_impl_methods(jule::Ref<_1036e5da0_Trait>,jule::Ref<_10417abf0_Impl>);


	inline jule::Bool _method_impl_to_struct(jule::Ref<_1037370d0_Struct>,jule::Ref<_10417abf0_Impl>);


	inline void _method_impl_trait(jule::Ref<_10417abf0_Impl>);


	inline void _method_impl_struct(jule::Ref<_10417abf0_Impl>);


	inline void _method_impl_impl(jule::Ref<_10417abf0_Impl>);


	inline void _method_check_var_decl(jule::Ref<_104598e40_Var>,jule::Trait<_10459ee60_Lookup>);


	inline void _method_check_global_var_decl(jule::Ref<_104598e40_Var>);


	inline jule::Bool _method_check_global_decls(void);


	inline jule::Bool _method_check_struct_trait_impl(jule::Ref<_1037370d0_Struct>,jule::Ref<_1036e5da0_Trait>);


	inline jule::Bool _method_check_struct_impls(jule::Ref<_1037370d0_Struct>);


	inline jule::Bool _method_check_struct_fields(jule::Ref<_1037370d0_Struct>);


	inline jule::Bool _method_check_struct_decl_methods(jule::Ref<_1037370d0_Struct>);


	inline void _method_check_struct_decl(jule::Ref<_1037370d0_Struct>);


	inline jule::Bool _method_check_struct_decls(void);


	inline void _method_check_fn_decl(jule::Ref<_1037649f0_Fn>);


	inline jule::Bool _method_check_fn_decls(void);


	inline jule::Bool _method_check_directive_pass(_1036da950_Pass);


	inline jule::Bool _method_check_passes(void);


	inline void _method_push_cycle_error(jule::Ref<_1037370d0_Struct>,jule::Ref<_1037370d0_Struct>,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ref<_1037370d0_Struct>,jule::Ref<_1037370d0_Struct>,jule::Str&);


	inline jule::Bool _method_check_struct_derive_illegal_cycles(jule::Str,jule::Ref<_1037370d0_Struct>,jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_check_struct_ins_derive_clone(jule::Ref<_1037370d0_StructIns>);


	inline jule::Bool _method_check_struct_derive_clone(jule::Ref<_1037370d0_Struct>);


	inline jule::Bool _method_check_file_derives(void);


	inline void _method_check_package_derives(void);


	inline void _method_check_package_decls(void);


	inline void _method_check_data_for_type_inference(jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline void _method_check_var(jule::Ref<_104598e40_Var>);


	inline void _method_check_type_var(jule::Ref<_104598e40_Var>,jule::Trait<_10459ee60_Lookup>);


	inline void _method_check_global_types(void);


	inline void _method_check_type_method(jule::Ref<_1037370d0_StructIns>,jule::Ref<_1037649f0_Fn>);


	inline void _method_check_type_struct(jule::Ref<_1037370d0_Struct>);


	inline void _method_check_struct_types(void);


	inline void _method_check_rets(jule::Ref<_1037649f0_FnIns>);


	inline void _method_check_fn_ins_sc(jule::Ref<_1037649f0_FnIns>,jule::Ref<_104180810_ScopeChecker>);


	inline void _method_check_fn_ins(jule::Ref<_1037649f0_FnIns>);


	inline void _method_check_type_fn(jule::Ref<_1037649f0_Fn>);


	inline void _method_precheck_type_fn(jule::Ref<_1037649f0_Fn>);


	inline jule::Bool _method_precheck_fn_types(void);


	inline jule::Bool _method_check_fn_types(void);


	inline void _method_check_package_types(void);


	inline void _method_set_file_sema_fields(void);


	inline void _method_set_sema_fields(void);


	inline void _method_check(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>>);


	inline bool operator==(const _119177e90_Sema &_Src) const {
		return 
			this->_field_errors == _Src._field_errors &&
			this->_field_files == _Src._field_files &&
			this->_field_file == _Src._field_file;
	}

	inline bool operator!=(const _119177e90_Sema &_Src) const { return !this->operator==(_Src); }
};


struct _1044463d0_DynamicTypeAnnotation {
	jule::Ref<_1044463d0_DynamicTypeAnnotation> self{};

	jule::Ref<_1191dc300_Eval> _field_e{jule::Ref<_1191dc300_Eval>()};
	jule::Ref<_1037649f0_FnIns> _field_f{jule::Ref<_1037649f0_FnIns>()};
	jule::Ref<_1037649f0_ParamIns> _field_p{jule::Ref<_1037649f0_ParamIns>()};
	jule::Ref<_1191dc300_Data> _field_a{jule::Ref<_1191dc300_Data>()};
	_108e15ff0_Token _field_error_token{_108e15ff0_Token()};
	_104a21a10_TypeKind** _field_k{nullptr};


	_1044463d0_DynamicTypeAnnotation(jule::Ref<_1191dc300_Eval> __param_e, jule::Ref<_1037649f0_FnIns> __param_f, jule::Ref<_1037649f0_ParamIns> __param_p, jule::Ref<_1191dc300_Data> __param_a, _108e15ff0_Token __param_error_token, _104a21a10_TypeKind** __param_k) {
		this->self = jule::Ref<_1044463d0_DynamicTypeAnnotation>::make(this, nullptr);

		this->_field_e = __param_e;
		this->_field_f = __param_f;
		this->_field_p = __param_p;
		this->_field_a = __param_a;
		this->_field_error_token = __param_error_token;
		this->_field_k = __param_k;
	}

	~_1044463d0_DynamicTypeAnnotation(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1044463d0_DynamicTypeAnnotation(void) { this->self = jule::Ref<_1044463d0_DynamicTypeAnnotation>::make(this, nullptr); }

	inline void _method_push_generic(jule::Ref<_104a21a10_TypeKind>,jule::Int);


	inline jule::Bool _method_annotate_prim(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_annotate_slc(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_check_map_key(_104a21a10_TypeKind**,jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_annotate_map(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_annotate_fn(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_annotate_ptr(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_annotate_any(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_annotate_kind(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_annotate(void);


	inline bool operator==(const _1044463d0_DynamicTypeAnnotation &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_f == _Src._field_f &&
			this->_field_p == _Src._field_p &&
			this->_field_a == _Src._field_a &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_k == _Src._field_k;
	}

	inline bool operator!=(const _1044463d0_DynamicTypeAnnotation &_Src) const { return !this->operator==(_Src); }
};


struct _1044463d0_StructLitChecker {
	jule::Ref<_1044463d0_StructLitChecker> self{};

	jule::Ref<_1191dc300_Eval> _field_e{jule::Ref<_1191dc300_Eval>()};
	_108e15ff0_Token _field_error_token{_108e15ff0_Token()};
	jule::Ref<_1037370d0_StructIns> _field_s{jule::Ref<_1037370d0_StructIns>()};
	jule::Slice<jule::Ref<_11911f320_StructArgExprModel>> _field_args{jule::Slice<jule::Ref<_11911f320_StructArgExprModel>>()};


	_1044463d0_StructLitChecker(jule::Ref<_1191dc300_Eval> __param_e, _108e15ff0_Token __param_error_token, jule::Ref<_1037370d0_StructIns> __param_s, jule::Slice<jule::Ref<_11911f320_StructArgExprModel>> __param_args) {
		this->self = jule::Ref<_1044463d0_StructLitChecker>::make(this, nullptr);

		this->_field_e = __param_e;
		this->_field_error_token = __param_error_token;
		this->_field_s = __param_s;
		this->_field_args = __param_args;
	}

	~_1044463d0_StructLitChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1044463d0_StructLitChecker(void) { this->self = jule::Ref<_1044463d0_StructLitChecker>::make(this, nullptr); }

	inline void _method_push_err(_108e15ff0_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_match(jule::Ref<_1037370d0_FieldIns>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline void _method_check_pair(jule::Ref<_1487f5920_FieldExprPair>,jule::Slice<jule::Any>);


	inline jule::Bool _method_ready_exprs(jule::Slice<jule::Any>);


	inline void _method_check(jule::Slice<jule::Any>);


	inline bool operator==(const _1044463d0_StructLitChecker &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_s == _Src._field_s &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _1044463d0_StructLitChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1044463d0_RangeChecker {
	jule::Ref<_1044463d0_RangeChecker> self{};

	jule::Ref<_104180810_ScopeChecker> _field_sc{jule::Ref<_104180810_ScopeChecker>()};
	jule::Ref<_1487f5920_RangeKind> _field_rang{jule::Ref<_1487f5920_RangeKind>()};
	jule::Ref<_104180810_RangeIter> _field_kind{jule::Ref<_104180810_RangeIter>()};
	jule::Ref<_1191dc300_Data> _field_d{jule::Ref<_1191dc300_Data>()};


	_1044463d0_RangeChecker(jule::Ref<_104180810_ScopeChecker> __param_sc, jule::Ref<_1487f5920_RangeKind> __param_rang, jule::Ref<_104180810_RangeIter> __param_kind, jule::Ref<_1191dc300_Data> __param_d) {
		this->self = jule::Ref<_1044463d0_RangeChecker>::make(this, nullptr);

		this->_field_sc = __param_sc;
		this->_field_rang = __param_rang;
		this->_field_kind = __param_kind;
		this->_field_d = __param_d;
	}

	~_1044463d0_RangeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1044463d0_RangeChecker(void) { this->self = jule::Ref<_1044463d0_RangeChecker>::make(this, nullptr); }

	inline jule::Ref<_104598e40_Var> _method_build_var(jule::Ref<_1487f5920_VarDecl>);


	inline void _method_set_size_key(void);


	inline void _method_check_slice(void);


	inline void _method_check_array(void);


	inline void _method_check_map_key_a(void);


	inline void _method_check_map_key_b(void);


	inline void _method_check_map(void);


	inline void _method_check_str(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1044463d0_RangeChecker &_Src) const {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_rang == _Src._field_rang &&
			this->_field_kind == _Src._field_kind &&
			this->_field_d == _Src._field_d;
	}

	inline bool operator!=(const _1044463d0_RangeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1191dcd40_SymbolTable: public _10459ee60_Lookup {
	jule::Ref<_1191dcd40_SymbolTable> self{};

	jule::Ref<_108e58b50_File> _field_file{jule::Ref<_108e58b50_File>()};
	jule::Slice<_1036da950_Pass> _field_passes{jule::Slice<_1036da950_Pass>()};
	jule::Slice<jule::Ref<_119162660_ImportInfo>> _field_imports{jule::Slice<jule::Ref<_119162660_ImportInfo>>()};
	jule::Slice<jule::Ref<_104598e40_Var>> _field_vars{jule::Slice<jule::Ref<_104598e40_Var>>()};
	jule::Slice<jule::Ref<_104a21a10_TypeAlias>> _field_type_aliases{jule::Slice<jule::Ref<_104a21a10_TypeAlias>>()};
	jule::Slice<jule::Ref<_1037370d0_Struct>> _field_structs{jule::Slice<jule::Ref<_1037370d0_Struct>>()};
	jule::Slice<jule::Ref<_1037649f0_Fn>> _field_funcs{jule::Slice<jule::Ref<_1037649f0_Fn>>()};
	jule::Slice<jule::Ref<_1036e5da0_Trait>> _field_traits{jule::Slice<jule::Ref<_1036e5da0_Trait>>()};
	jule::Slice<jule::Ref<_1036dad50_Enum>> _field_enums{jule::Slice<jule::Ref<_1036dad50_Enum>>()};
	jule::Slice<jule::Ref<_10417abf0_Impl>> _field_impls{jule::Slice<jule::Ref<_10417abf0_Impl>>()};


	_1191dcd40_SymbolTable(jule::Ref<_108e58b50_File> __param_file, jule::Slice<_1036da950_Pass> __param_passes, jule::Slice<jule::Ref<_119162660_ImportInfo>> __param_imports, jule::Slice<jule::Ref<_104598e40_Var>> __param_vars, jule::Slice<jule::Ref<_104a21a10_TypeAlias>> __param_type_aliases, jule::Slice<jule::Ref<_1037370d0_Struct>> __param_structs, jule::Slice<jule::Ref<_1037649f0_Fn>> __param_funcs, jule::Slice<jule::Ref<_1036e5da0_Trait>> __param_traits, jule::Slice<jule::Ref<_1036dad50_Enum>> __param_enums, jule::Slice<jule::Ref<_10417abf0_Impl>> __param_impls) {
		this->self = jule::Ref<_1191dcd40_SymbolTable>::make(this, nullptr);

		this->_field_file = __param_file;
		this->_field_passes = __param_passes;
		this->_field_imports = __param_imports;
		this->_field_vars = __param_vars;
		this->_field_type_aliases = __param_type_aliases;
		this->_field_structs = __param_structs;
		this->_field_funcs = __param_funcs;
		this->_field_traits = __param_traits;
		this->_field_enums = __param_enums;
		this->_field_impls = __param_impls;
	}

	~_1191dcd40_SymbolTable(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1191dcd40_SymbolTable(void) { this->self = jule::Ref<_1191dcd40_SymbolTable>::make(this, nullptr); }

	inline jule::Ref<_119162660_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_119162660_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)>);


	inline jule::Ref<_104598e40_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_104a21a10_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_1037370d0_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_1037649f0_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_1036e5da0_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_1036dad50_Enum> _method_find_enum(jule::Str);


	inline jule::Ref<_104598e40_Var> _method___find_var(jule::Str,jule::Bool,jule::Bool);


	inline jule::Ref<_104a21a10_TypeAlias> _method___find_type_alias(jule::Str,jule::Bool,jule::Bool);


	inline jule::Any _method_def_by_ident(jule::Str,jule::Bool);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline bool operator==(const _1191dcd40_SymbolTable &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_passes == _Src._field_passes &&
			this->_field_imports == _Src._field_imports &&
			this->_field_vars == _Src._field_vars &&
			this->_field_type_aliases == _Src._field_type_aliases &&
			this->_field_structs == _Src._field_structs &&
			this->_field_funcs == _Src._field_funcs &&
			this->_field_traits == _Src._field_traits &&
			this->_field_enums == _Src._field_enums &&
			this->_field_impls == _Src._field_impls;
	}

	inline bool operator!=(const _1191dcd40_SymbolTable &_Src) const { return !this->operator==(_Src); }
};


struct _1191dc300_Data {
	jule::Ref<_1191dc300_Data> self{};

	jule::Ref<_104a21a10_TypeKind> _field_kind{jule::Ref<_104a21a10_TypeKind>()};
	jule::Ref<_104a21a10_TypeKind> _field_cast_kind{jule::Ref<_104a21a10_TypeKind>()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Bool _field_lvalue{jule::Bool()};
	jule::Bool _field_variadiced{jule::Bool()};
	jule::Bool _field_is_rune{jule::Bool()};
	jule::Any _field_model{jule::Any()};
	jule::Bool _field_decl{jule::Bool()};
	jule::Ref<_104c409b0_Const> _field_constant{jule::Ref<_104c409b0_Const>()};


	_1191dc300_Data(jule::Ref<_104a21a10_TypeKind> __param_kind, jule::Ref<_104a21a10_TypeKind> __param_cast_kind, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Bool __param_lvalue, jule::Bool __param_variadiced, jule::Bool __param_is_rune, jule::Any __param_model, jule::Bool __param_decl, jule::Ref<_104c409b0_Const> __param_constant) {
		this->self = jule::Ref<_1191dc300_Data>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_cast_kind = __param_cast_kind;
		this->_field_mutable = __param_mutable;
		this->_field_reference = __param_reference;
		this->_field_lvalue = __param_lvalue;
		this->_field_variadiced = __param_variadiced;
		this->_field_is_rune = __param_is_rune;
		this->_field_model = __param_model;
		this->_field_decl = __param_decl;
		this->_field_constant = __param_constant;
	}

	~_1191dc300_Data(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1191dc300_Data(void) { this->self = jule::Ref<_1191dc300_Data>::make(this, nullptr); }

	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_const(void);


	inline bool operator==(const _1191dc300_Data &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_cast_kind == _Src._field_cast_kind &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_lvalue == _Src._field_lvalue &&
			this->_field_variadiced == _Src._field_variadiced &&
			this->_field_is_rune == _Src._field_is_rune &&
			this->_field_model == _Src._field_model &&
			this->_field_decl == _Src._field_decl &&
			this->_field_constant == _Src._field_constant;
	}

	inline bool operator!=(const _1191dc300_Data &_Src) const { return !this->operator==(_Src); }
};


struct _1191dc300_Value {
	jule::Ref<_1191dc300_Value> self{};

	jule::Ref<_1487f5920_Expr> _field_expr{jule::Ref<_1487f5920_Expr>()};
	jule::Ref<_1191dc300_Data> _field_data{jule::Ref<_1191dc300_Data>()};


	_1191dc300_Value(jule::Ref<_1487f5920_Expr> __param_expr, jule::Ref<_1191dc300_Data> __param_data) {
		this->self = jule::Ref<_1191dc300_Value>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_data = __param_data;
	}

	~_1191dc300_Value(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1191dc300_Value(void) { this->self = jule::Ref<_1191dc300_Value>::make(this, nullptr); }

	inline bool operator==(const _1191dc300_Value &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _1191dc300_Value &_Src) const { return !this->operator==(_Src); }
};


struct _1191dc300_Eval {
	jule::Ref<_1191dc300_Eval> self{};

	jule::Ref<_119177e90_Sema> _field_s{jule::Ref<_119177e90_Sema>()};
	jule::Trait<_10459ee60_Lookup> _field_lookup{jule::Trait<_10459ee60_Lookup>()};
	jule::Ref<_104a21a10_TypeKind> _field_prefix{jule::Ref<_104a21a10_TypeKind>()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Ref<_104598e40_Var> _field_owner{jule::Ref<_104598e40_Var>()};


	_1191dc300_Eval(jule::Ref<_119177e90_Sema> __param_s, jule::Trait<_10459ee60_Lookup> __param_lookup, jule::Ref<_104a21a10_TypeKind> __param_prefix, jule::Bool __param_unsafety, jule::Ref<_104598e40_Var> __param_owner) {
		this->self = jule::Ref<_1191dc300_Eval>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_lookup = __param_lookup;
		this->_field_prefix = __param_prefix;
		this->_field_unsafety = __param_unsafety;
		this->_field_owner = __param_owner;
	}

	~_1191dc300_Eval(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1191dc300_Eval(void) { this->self = jule::Ref<_1191dc300_Eval>::make(this, nullptr); }

	inline void _method_push_err(_108e15ff0_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_global(void);


	inline jule::Ref<_1191dc300_Data> _method_lit_nil(void);


	inline jule::Ref<_1191dc300_Data> _method_lit_str(jule::Ref<_1487f5920_LitExpr>);


	inline jule::Ref<_1191dc300_Data> _method_lit_bool(jule::Ref<_1487f5920_LitExpr>);


	inline jule::Ref<_1191dc300_Data> _method_lit_rune(jule::Ref<_1487f5920_LitExpr>);


	inline jule::Ref<_1191dc300_Data> _method_lit_float(jule::Ref<_1487f5920_LitExpr>);


	inline jule::Ref<_1191dc300_Data> _method_lit_int(jule::Ref<_1487f5920_LitExpr>);


	inline jule::Ref<_1191dc300_Data> _method_lit_num(jule::Ref<_1487f5920_LitExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_lit(jule::Ref<_1487f5920_LitExpr>);


	inline jule::Any _method_find_builtins(jule::Str);


	inline jule::Any _method_get_def(jule::Str,jule::Bool);


	inline void _method_push_reference(jule::Ref<_1036da950_ReferenceStack>);


	inline void _method_push_reference_to_fn(jule::Ref<_1037649f0_FnIns>);


	inline void _method_push_reference_to_var(jule::Ref<_104598e40_Var>);


	inline void _method_push_reference_to_struct(jule::Ref<_1037370d0_StructIns>);


	inline jule::Ref<_1191dc300_Data> _method_eval_enum(jule::Ref<_1036dad50_Enum>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_struct(jule::Ref<_1037370d0_StructIns>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_fn_ins(jule::Ref<_1037649f0_FnIns>);


	inline jule::Ref<_1191dc300_Data> _method_eval_fn(jule::Ref<_1037649f0_Fn>,_108e15ff0_Token);


	inline void _method_push_illegal_cycle_error(jule::Ref<_104598e40_Var>,jule::Ref<_104598e40_Var>,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ref<_104598e40_Var>,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ref<_104598e40_Var>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_var(jule::Ref<_104598e40_Var>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_type_alias(jule::Ref<_104a21a10_TypeAlias>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_def(jule::Any,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_ident(jule::Ref<_1487f5920_IdentExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_unary_minus(jule::Ref<_1191dc300_Data>);


	inline jule::Ref<_1191dc300_Data> _method_eval_unary_plus(jule::Ref<_1191dc300_Data>);


	inline jule::Ref<_1191dc300_Data> _method_eval_unary_caret(jule::Ref<_1191dc300_Data>);


	inline jule::Ref<_1191dc300_Data> _method_eval_unary_excl(jule::Ref<_1191dc300_Data>);


	inline jule::Ref<_1191dc300_Data> _method_eval_unary_star(jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_unary_amper(jule::Ref<_1191dc300_Data>);


	inline jule::Ref<_1191dc300_Data> _method_eval_unary_type_decl(jule::Ref<_1191dc300_Data>,jule::Ref<_1487f5920_UnaryExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_unary(jule::Ref<_1487f5920_UnaryExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_variadic(jule::Ref<_1487f5920_VariadicExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_unsafe(jule::Ref<_1487f5920_UnsafeExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_arr(jule::Ref<_1487f5920_SliceExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_exp_slc(jule::Ref<_1487f5920_SliceExpr>,jule::Ref<_104a21a10_TypeKind>);


	inline jule::Ref<_1191dc300_Data> _method_eval_slice_expr(jule::Ref<_1487f5920_SliceExpr>);


	inline void _method_check_integer_indexing_by_data(jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline void _method_indexing_ptr(jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>,jule::Ref<_1487f5920_IndexingExpr>);


	inline void _method_indexing_arr(jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>,jule::Ref<_1487f5920_IndexingExpr>);


	inline void _method_indexing_slc(jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>,jule::Ref<_1487f5920_IndexingExpr>);


	inline void _method_indexing_map(jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>,jule::Ref<_1487f5920_IndexingExpr>);


	inline void _method_indexing_str(jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>,jule::Ref<_1487f5920_IndexingExpr>);


	inline void _method_to_indexing(jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>,jule::Ref<_1487f5920_IndexingExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_ident_decl_from_indexing(jule::Ref<_1487f5920_IndexingExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_indexing(jule::Ref<_1487f5920_IndexingExpr>);


	inline std::tuple<jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>> _method_eval_slicing_exprs(jule::Ref<_1487f5920_SlicingExpr>);


	inline void _method_slicing_arr(jule::Ref<_1191dc300_Data>);


	inline void _method_slicing_slc(jule::Ref<_1191dc300_Data>);


	inline void _method_slicing_str(jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>);


	inline void _method_check_slicing(jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>,jule::Ref<_1487f5920_SlicingExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_slicing(jule::Ref<_1487f5920_SlicingExpr>);


	inline void _method_cast_ptr(jule::Ref<_104a21a10_TypeKind>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline void _method_cast_struct(jule::Ref<_104a21a10_TypeKind>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline void _method_cast_ref(jule::Ref<_104a21a10_TypeKind>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline void _method_cast_slc(jule::Ref<_104a21a10_TypeKind>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline void _method_cast_str(jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline void _method_cast_int(jule::Ref<_104a21a10_TypeKind>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline void _method_cast_num(jule::Ref<_104a21a10_TypeKind>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline void _method_cast_prim(jule::Ref<_104a21a10_TypeKind>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_cast_by_type_n_data(jule::Ref<_104a21a10_TypeKind>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_cast(jule::Ref<_1487f5920_CastExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_ns_selection(jule::Ref<_1487f5920_NsSelectionExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_struct_lit_explicit(jule::Ref<_1037370d0_StructIns>,jule::Slice<jule::Any>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_struct_lit(jule::Ref<_1487f5920_StructLit>);


	inline jule::Ref<_1191dc300_Data> _method_eval_type(jule::Ref<_1487f5920_TypeDecl>);


	inline jule::Ref<_1191dc300_Data> _method_call_type_fn(jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);


	inline std::tuple<jule::Bool,jule::Bool> _method_check_fn_call_generics(jule::Ref<_1037649f0_FnIns>,jule::Ref<_1487f5920_FnCallExpr>);


	inline jule::Ref<_1191dc300_Data> _method_call_builtin_fn(jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);


	inline void _method_check_fn_of_concurrent_call(jule::Ref<_1037649f0_FnIns>&,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_call_fn(jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);


	inline jule::Ref<_1191dc300_Data> _method_eval_fn_call(jule::Ref<_1487f5920_FnCallExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_enum_static(jule::Ref<_1036dad50_Enum>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_struct_static(jule::Ref<_1037370d0_StructIns>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_trait_sub_ident(jule::Ref<_1191dc300_Data>,jule::Ref<_1036e5da0_Trait>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_struct_sub_ident(jule::Ref<_1191dc300_Data>,jule::Ref<_1037370d0_StructIns>,jule::Ref<_1487f5920_SubIdentExpr>,jule::Bool);


	inline jule::Ref<_1191dc300_Data> _method_eval_slice_sub_ident(jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_array_sub_ident(jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_map_sub_ident(jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_str_sub_ident(jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_int_type_static(_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_uint_type_static(_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_i8_type_static(_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_i16_type_static(_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_i32_type_static(_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_i64_type_static(_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_u8_type_static(_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_u16_type_static(_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_u32_type_static(_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_u64_type_static(_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_f32_type_tatic(_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_f64_type_static(_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_prim_static(jule::Str,_108e15ff0_Token);


	inline jule::Ref<_1191dc300_Data> _method_eval_type_static(jule::Ref<_1191dc300_Data>,jule::Ref<_1487f5920_SubIdentExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_obj_sub_ident(jule::Ref<_1191dc300_Data>,jule::Ref<_1487f5920_SubIdentExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_sub_ident(jule::Ref<_1487f5920_SubIdentExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_tuple(jule::Ref<_1487f5920_TupleExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_map(jule::Ref<_104a21a10_Map>,jule::Ref<_1487f5920_BraceLit>);


	inline jule::Ref<_1191dc300_Data> _method_eval_brace_lit(jule::Ref<_1487f5920_BraceLit>);


	inline jule::Ref<_1191dc300_Data> _method_eval_anon_fn(jule::Ref<_1487f5920_FnDecl>);


	inline jule::Ref<_1191dc300_Data> _method_eval_binop(jule::Ref<_1487f5920_BinopExpr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_expr_kind(jule::Any);


	inline jule::Ref<_1191dc300_Data> _method_eval(jule::Ref<_1487f5920_Expr>);


	inline jule::Ref<_1191dc300_Data> _method_eval_expr(jule::Ref<_1487f5920_Expr>);


	inline bool operator==(const _1191dc300_Eval &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_prefix == _Src._field_prefix &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_owner == _Src._field_owner;
	}

	inline bool operator!=(const _1191dc300_Eval &_Src) const { return !this->operator==(_Src); }
};


struct _104a21a10_TypeKind: public _104a21a10_Kind {
	jule::Ref<_104a21a10_TypeKind> self{};

	jule::Str _field_cpp_ident{jule::Str()};
	jule::Bool _field_variadic{jule::Bool()};
	jule::Trait<_104a21a10_Kind> _field_kind{jule::Trait<_104a21a10_Kind>()};


	_104a21a10_TypeKind(jule::Str __param_cpp_ident, jule::Bool __param_variadic, jule::Trait<_104a21a10_Kind> __param_kind) {
		this->self = jule::Ref<_104a21a10_TypeKind>::make(this, nullptr);

		this->_field_cpp_ident = __param_cpp_ident;
		this->_field_variadic = __param_variadic;
		this->_field_kind = __param_kind;
	}

	~_104a21a10_TypeKind(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104a21a10_TypeKind(void) { this->self = jule::Ref<_104a21a10_TypeKind>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Ref<_104a21a10_TypeKind> _method_clone(void);


	inline jule::Bool _method_is_cpp_linked(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_is_void(void);


	inline jule::Ref<_104a21a10_Prim> _method_prim(void);


	inline jule::Ref<_104a21a10_Ref> _method_ref(void);


	inline jule::Ref<_104a21a10_Ptr> _method_ptr(void);


	inline jule::Ref<_1036dad50_Enum> _method_enm(void);


	inline jule::Ref<_104a21a10_Arr> _method_arr(void);


	inline jule::Ref<_104a21a10_Slc> _method_slc(void);


	inline jule::Ref<_1037649f0_FnIns> _method_fnc(void);


	inline jule::Ref<_1037370d0_StructIns> _method_strct(void);


	inline jule::Ref<_1036e5da0_Trait> _method_trt(void);


	inline jule::Ref<_104a21a10_Map> _method_map(void);


	inline jule::Ref<_104a21a10_Tuple> _method_tup(void);


	inline bool operator==(const _104a21a10_TypeKind &_Src) const {
		return 
			this->_field_cpp_ident == _Src._field_cpp_ident &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _104a21a10_TypeKind &_Src) const { return !this->operator==(_Src); }
};


struct _104a21a10_TypeSymbol {
	jule::Ref<_104a21a10_TypeSymbol> self{};

	jule::Ref<_1487f5920_TypeDecl> _field_decl{jule::Ref<_1487f5920_TypeDecl>()};
	jule::Ref<_104a21a10_TypeKind> _field_kind{jule::Ref<_104a21a10_TypeKind>()};


	_104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl> __param_decl, jule::Ref<_104a21a10_TypeKind> __param_kind) {
		this->self = jule::Ref<_104a21a10_TypeSymbol>::make(this, nullptr);

		this->_field_decl = __param_decl;
		this->_field_kind = __param_kind;
	}

	~_104a21a10_TypeSymbol(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104a21a10_TypeSymbol(void) { this->self = jule::Ref<_104a21a10_TypeSymbol>::make(this, nullptr); }

	inline jule::Bool _method_checked(void);


	inline void _method_remove_kind(void);


	inline bool operator==(const _104a21a10_TypeSymbol &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _104a21a10_TypeSymbol &_Src) const { return !this->operator==(_Src); }
};


struct _104a21a10_Prim: public _104a21a10_Kind {
	jule::Ref<_104a21a10_Prim> self{};

	jule::Str _field_kind{jule::Str()};


	_104a21a10_Prim(jule::Str __param_kind) {
		this->self = jule::Ref<_104a21a10_Prim>::make(this, nullptr);

		this->_field_kind = __param_kind;
	}

	~_104a21a10_Prim(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104a21a10_Prim(void) { this->self = jule::Ref<_104a21a10_Prim>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_is_i8(void);


	inline jule::Bool _method_is_i16(void);


	inline jule::Bool _method_is_i32(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u8(void);


	inline jule::Bool _method_is_u16(void);


	inline jule::Bool _method_is_u32(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_f32(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_int(void);


	inline jule::Bool _method_is_uint(void);


	inline jule::Bool _method_is_uintptr(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_any(void);


	inline bool operator==(const _104a21a10_Prim &_Src) const {
		return 
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _104a21a10_Prim &_Src) const { return !this->operator==(_Src); }
};


struct _104a21a10_Ref: public _104a21a10_Kind {
	jule::Ref<_104a21a10_Ref> self{};

	jule::Ref<_104a21a10_TypeKind> _field_elem{jule::Ref<_104a21a10_TypeKind>()};


	_104a21a10_Ref(jule::Ref<_104a21a10_TypeKind> __param_elem) {
		this->self = jule::Ref<_104a21a10_Ref>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_104a21a10_Ref(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104a21a10_Ref(void) { this->self = jule::Ref<_104a21a10_Ref>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind>);


	inline bool operator==(const _104a21a10_Ref &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _104a21a10_Ref &_Src) const { return !this->operator==(_Src); }
};


struct _104a21a10_Slc: public _104a21a10_Kind {
	jule::Ref<_104a21a10_Slc> self{};

	jule::Ref<_104a21a10_TypeKind> _field_elem{jule::Ref<_104a21a10_TypeKind>()};


	_104a21a10_Slc(jule::Ref<_104a21a10_TypeKind> __param_elem) {
		this->self = jule::Ref<_104a21a10_Slc>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_104a21a10_Slc(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104a21a10_Slc(void) { this->self = jule::Ref<_104a21a10_Slc>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind>);


	inline bool operator==(const _104a21a10_Slc &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _104a21a10_Slc &_Src) const { return !this->operator==(_Src); }
};


struct _104a21a10_Tuple: public _104a21a10_Kind {
	jule::Ref<_104a21a10_Tuple> self{};

	jule::Slice<jule::Ref<_104a21a10_TypeKind>> _field_types{jule::Slice<jule::Ref<_104a21a10_TypeKind>>()};


	_104a21a10_Tuple(jule::Slice<jule::Ref<_104a21a10_TypeKind>> __param_types) {
		this->self = jule::Ref<_104a21a10_Tuple>::make(this, nullptr);

		this->_field_types = __param_types;
	}

	~_104a21a10_Tuple(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104a21a10_Tuple(void) { this->self = jule::Ref<_104a21a10_Tuple>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind>);


	inline bool operator==(const _104a21a10_Tuple &_Src) const {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _104a21a10_Tuple &_Src) const { return !this->operator==(_Src); }
};


struct _104a21a10_Map: public _104a21a10_Kind {
	jule::Ref<_104a21a10_Map> self{};

	jule::Ref<_104a21a10_TypeKind> _field_key{jule::Ref<_104a21a10_TypeKind>()};
	jule::Ref<_104a21a10_TypeKind> _field_val{jule::Ref<_104a21a10_TypeKind>()};


	_104a21a10_Map(jule::Ref<_104a21a10_TypeKind> __param_key, jule::Ref<_104a21a10_TypeKind> __param_val) {
		this->self = jule::Ref<_104a21a10_Map>::make(this, nullptr);

		this->_field_key = __param_key;
		this->_field_val = __param_val;
	}

	~_104a21a10_Map(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104a21a10_Map(void) { this->self = jule::Ref<_104a21a10_Map>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind>);


	inline bool operator==(const _104a21a10_Map &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _104a21a10_Map &_Src) const { return !this->operator==(_Src); }
};


struct _104a21a10_Arr: public _104a21a10_Kind {
	jule::Ref<_104a21a10_Arr> self{};

	jule::Bool _field_auto{jule::Bool()};
	jule::Int _field_n{jule::Int()};
	jule::Ref<_104a21a10_TypeKind> _field_elem{jule::Ref<_104a21a10_TypeKind>()};


	_104a21a10_Arr(jule::Bool __param_auto, jule::Int __param_n, jule::Ref<_104a21a10_TypeKind> __param_elem) {
		this->self = jule::Ref<_104a21a10_Arr>::make(this, nullptr);

		this->_field_auto = __param_auto;
		this->_field_n = __param_n;
		this->_field_elem = __param_elem;
	}

	~_104a21a10_Arr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104a21a10_Arr(void) { this->self = jule::Ref<_104a21a10_Arr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind>);


	inline bool operator==(const _104a21a10_Arr &_Src) const {
		return 
			this->_field_auto == _Src._field_auto &&
			this->_field_n == _Src._field_n &&
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _104a21a10_Arr &_Src) const { return !this->operator==(_Src); }
};


struct _104a21a10_Ptr: public _104a21a10_Kind {
	jule::Ref<_104a21a10_Ptr> self{};

	jule::Ref<_104a21a10_TypeKind> _field_elem{jule::Ref<_104a21a10_TypeKind>()};


	_104a21a10_Ptr(jule::Ref<_104a21a10_TypeKind> __param_elem) {
		this->self = jule::Ref<_104a21a10_Ptr>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_104a21a10_Ptr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104a21a10_Ptr(void) { this->self = jule::Ref<_104a21a10_Ptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _104a21a10_Ptr &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _104a21a10_Ptr &_Src) const { return !this->operator==(_Src); }
};


struct _104a21a10_Referencer {
	jule::Ref<_104a21a10_Referencer> self{};

	jule::Str _field_ident{jule::Str()};
	jule::Any _field_owner{jule::Any()};
	jule::Slice<jule::Any>* _field_refs{nullptr};


	_104a21a10_Referencer(jule::Str __param_ident, jule::Any __param_owner, jule::Slice<jule::Any>* __param_refs) {
		this->self = jule::Ref<_104a21a10_Referencer>::make(this, nullptr);

		this->_field_ident = __param_ident;
		this->_field_owner = __param_owner;
		this->_field_refs = __param_refs;
	}

	~_104a21a10_Referencer(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104a21a10_Referencer(void) { this->self = jule::Ref<_104a21a10_Referencer>::make(this, nullptr); }

	inline bool operator==(const _104a21a10_Referencer &_Src) const {
		return 
			this->_field_ident == _Src._field_ident &&
			this->_field_owner == _Src._field_owner &&
			this->_field_refs == _Src._field_refs;
	}

	inline bool operator!=(const _104a21a10_Referencer &_Src) const { return !this->operator==(_Src); }
};


struct _108e14cb0_PlainImporter: public _119162660_Importer {
	jule::Ref<_108e14cb0_PlainImporter> self{};

	jule::Slice<jule::Ref<_119162660_ImportInfo>> _field_all_packages{jule::Slice<jule::Ref<_119162660_ImportInfo>>()};


	_108e14cb0_PlainImporter(jule::Slice<jule::Ref<_119162660_ImportInfo>> __param_all_packages) {
		this->self = jule::Ref<_108e14cb0_PlainImporter>::make(this, nullptr);

		this->_field_all_packages = __param_all_packages;
	}

	~_108e14cb0_PlainImporter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_108e14cb0_PlainImporter(void) { this->self = jule::Ref<_108e14cb0_PlainImporter>::make(this, nullptr); }

	inline jule::Ref<_119162660_ImportInfo> _method_get_import(jule::Str);


	inline std::tuple<jule::Slice<jule::Ref<_1487f02c0_Ast>>,jule::Slice<_1486379e0_Log>> _method_import_package(jule::Str);


	inline void _method_imported(jule::Ref<_119162660_ImportInfo>);


	inline bool operator==(const _108e14cb0_PlainImporter &_Src) const {
		return 
			this->_field_all_packages == _Src._field_all_packages;
	}

	inline bool operator!=(const _108e14cb0_PlainImporter &_Src) const { return !this->operator==(_Src); }
};


struct _108db2720_IR {
	jule::Ref<_108db2720_IR> self{};

	jule::Slice<jule::Str> _field_passes{jule::Slice<jule::Str>()};
	jule::Ref<_119162660_Package> _field_main{jule::Ref<_119162660_Package>()};
	jule::Slice<jule::Ref<_119162660_ImportInfo>> _field_used{jule::Slice<jule::Ref<_119162660_ImportInfo>>()};


	_108db2720_IR(jule::Slice<jule::Str> __param_passes, jule::Ref<_119162660_Package> __param_main, jule::Slice<jule::Ref<_119162660_ImportInfo>> __param_used) {
		this->self = jule::Ref<_108db2720_IR>::make(this, nullptr);

		this->_field_passes = __param_passes;
		this->_field_main = __param_main;
		this->_field_used = __param_used;
	}

	~_108db2720_IR(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_108db2720_IR(void) { this->self = jule::Ref<_108db2720_IR>::make(this, nullptr); }

	static inline std::tuple<jule::Ref<_108db2720_IR>,jule::Slice<_1486379e0_Log>> _static_method_build(jule::Str);


	inline void _method_append_structs(jule::Ref<_119162660_Package>,jule::Slice<jule::Ref<_1037370d0_Struct>>&);


	inline jule::Slice<jule::Ref<_1037370d0_Struct>> _method_get_all_structures(void);


	inline void _method_append_vars(jule::Ref<_119162660_Package>,jule::Slice<jule::Ref<_104598e40_Var>>&);


	inline jule::Slice<jule::Ref<_104598e40_Var>> _method_get_all_variables(void);


	inline bool operator==(const _108db2720_IR &_Src) const {
		return 
			this->_field_passes == _Src._field_passes &&
			this->_field_main == _Src._field_main &&
			this->_field_used == _Src._field_used;
	}

	inline bool operator!=(const _108db2720_IR &_Src) const { return !this->operator==(_Src); }
};


struct _1086aad20_ScopeDeadCode {
	jule::Ref<_1086aad20_ScopeDeadCode> self{};

	jule::Ref<_1086aad20_ScopeDeadCode> _field_parent{jule::Ref<_1086aad20_ScopeDeadCode>()};
	jule::Ref<_104180810_Scope> _field_s{jule::Ref<_104180810_Scope>()};
	jule::Slice<jule::Any>* _field_stmts{nullptr};
	jule::Int _field_i{jule::Int()};


	_1086aad20_ScopeDeadCode(jule::Ref<_1086aad20_ScopeDeadCode> __param_parent, jule::Ref<_104180810_Scope> __param_s, jule::Slice<jule::Any>* __param_stmts, jule::Int __param_i) {
		this->self = jule::Ref<_1086aad20_ScopeDeadCode>::make(this, nullptr);

		this->_field_parent = __param_parent;
		this->_field_s = __param_s;
		this->_field_stmts = __param_stmts;
		this->_field_i = __param_i;
	}

	~_1086aad20_ScopeDeadCode(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1086aad20_ScopeDeadCode(void) { this->self = jule::Ref<_1086aad20_ScopeDeadCode>::make(this, nullptr); }

	inline void _method_optimize_child(jule::Ref<_104180810_Scope>);


	inline void _method_eliminate_followed(void);


	inline void _method_optimize_stmt(jule::Any);


	inline void _method_optimize_stmts(void);


	inline bool operator==(const _1086aad20_ScopeDeadCode &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_s == _Src._field_s &&
			this->_field_stmts == _Src._field_stmts &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _1086aad20_ScopeDeadCode &_Src) const { return !this->operator==(_Src); }
};


struct _104e1b930_IndexRangeSetter: public _104e1b930_RangeSetter {
	jule::Ref<_104e1b930_IndexRangeSetter> self{};

	~_104e1b930_IndexRangeSetter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104e1b930_IndexRangeSetter(void) { this->self = jule::Ref<_104e1b930_IndexRangeSetter>::make(this, nullptr); }

	inline jule::Str _method_setup_vars(jule::Ref<_104598e40_Var>,jule::Ref<_104598e40_Var>);


	inline jule::Str _method_next_steps(jule::Ref<_104598e40_Var>,jule::Ref<_104598e40_Var>,jule::Str);


	inline bool operator==(const _104e1b930_IndexRangeSetter &_Src) const { return true; }

	inline bool operator!=(const _104e1b930_IndexRangeSetter &_Src) const { return !this->operator==(_Src); }
};


struct _104e1b930_MapRangeSetter: public _104e1b930_RangeSetter {
	jule::Ref<_104e1b930_MapRangeSetter> self{};

	~_104e1b930_MapRangeSetter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104e1b930_MapRangeSetter(void) { this->self = jule::Ref<_104e1b930_MapRangeSetter>::make(this, nullptr); }

	inline jule::Str _method_setup_vars(jule::Ref<_104598e40_Var>,jule::Ref<_104598e40_Var>);


	inline jule::Str _method_next_steps(jule::Ref<_104598e40_Var>,jule::Ref<_104598e40_Var>,jule::Str);


	inline bool operator==(const _104e1b930_MapRangeSetter &_Src) const { return true; }

	inline bool operator!=(const _104e1b930_MapRangeSetter &_Src) const { return !this->operator==(_Src); }
};


struct _1190c5fe0_OrderedDecls {
	jule::Ref<_1190c5fe0_OrderedDecls> self{};

	jule::Slice<jule::Ref<_1037370d0_Struct>> _field_structs{jule::Slice<jule::Ref<_1037370d0_Struct>>()};
	jule::Slice<jule::Ref<_104598e40_Var>> _field_globals{jule::Slice<jule::Ref<_104598e40_Var>>()};


	_1190c5fe0_OrderedDecls(jule::Slice<jule::Ref<_1037370d0_Struct>> __param_structs, jule::Slice<jule::Ref<_104598e40_Var>> __param_globals) {
		this->self = jule::Ref<_1190c5fe0_OrderedDecls>::make(this, nullptr);

		this->_field_structs = __param_structs;
		this->_field_globals = __param_globals;
	}

	~_1190c5fe0_OrderedDecls(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1190c5fe0_OrderedDecls(void) { this->self = jule::Ref<_1190c5fe0_OrderedDecls>::make(this, nullptr); }

	inline bool operator==(const _1190c5fe0_OrderedDecls &_Src) const {
		return 
			this->_field_structs == _Src._field_structs &&
			this->_field_globals == _Src._field_globals;
	}

	inline bool operator!=(const _1190c5fe0_OrderedDecls &_Src) const { return !this->operator==(_Src); }
};


struct _104a21a10_TypeChecker {
	jule::Ref<_104a21a10_TypeChecker> self{};

	jule::Ref<_119177e90_Sema> _field_s{jule::Ref<_119177e90_Sema>()};
	jule::Trait<_10459ee60_Lookup> _field_lookup{jule::Trait<_10459ee60_Lookup>()};
	jule::Ref<_104a21a10_Referencer> _field_referencer{jule::Ref<_104a21a10_Referencer>()};
	_108e15ff0_Token _field_error_token{_108e15ff0_Token()};
	jule::Slice<jule::Ref<_1487f5920_GenericDecl>> _field_ignore_generics{jule::Slice<jule::Ref<_1487f5920_GenericDecl>>()};
	jule::Slice<jule::Ref<_104a21a10_TypeAlias>> _field_use_generics{jule::Slice<jule::Ref<_104a21a10_TypeAlias>>()};
	jule::Bool _field_not_plain{jule::Bool()};


	_104a21a10_TypeChecker(jule::Ref<_119177e90_Sema> __param_s, jule::Trait<_10459ee60_Lookup> __param_lookup, jule::Ref<_104a21a10_Referencer> __param_referencer, _108e15ff0_Token __param_error_token, jule::Slice<jule::Ref<_1487f5920_GenericDecl>> __param_ignore_generics, jule::Slice<jule::Ref<_104a21a10_TypeAlias>> __param_use_generics, jule::Bool __param_not_plain) {
		this->self = jule::Ref<_104a21a10_TypeChecker>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_lookup = __param_lookup;
		this->_field_referencer = __param_referencer;
		this->_field_error_token = __param_error_token;
		this->_field_ignore_generics = __param_ignore_generics;
		this->_field_use_generics = __param_use_generics;
		this->_field_not_plain = __param_not_plain;
	}

	~_104a21a10_TypeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104a21a10_TypeChecker(void) { this->self = jule::Ref<_104a21a10_TypeChecker>::make(this, nullptr); }

	inline void _method_push_err(_108e15ff0_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Ref<_104a21a10_Prim> _method_build_prim(jule::Ref<_1487f5920_IdentTypeDecl>);


	inline void _method_push_cycle_error(jule::Any,jule::Any,jule::Str&);


	inline jule::Bool _method_are_equals_cross_cycle_data_0(jule::Any,jule::Any);
	inline jule::Bool _method_are_equals_cross_cycle_data_1(jule::Any,jule::Any);


	inline jule::Bool _method_check_cross_cycle(jule::Any,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ref<_1487f5920_IdentTypeDecl>,jule::Any);


	inline jule::Trait<_104a21a10_Kind> _method_from_type_alias(jule::Ref<_1487f5920_IdentTypeDecl>,jule::Ref<_104a21a10_TypeAlias>);


	inline jule::Ref<_1036dad50_Enum> _method_from_enum(jule::Ref<_1487f5920_IdentTypeDecl>,jule::Ref<_1036dad50_Enum>);


	inline jule::Bool _method_check_struct_ins(jule::Ref<_1037370d0_StructIns>,_108e15ff0_Token);


	inline void _method_append_used_struct_reference(jule::Ref<_1037370d0_Struct>);


	inline jule::Ref<_1037370d0_StructIns> _method_from_struct(jule::Ref<_1487f5920_IdentTypeDecl>,jule::Ref<_1037370d0_Struct>);


	inline jule::Trait<_104a21a10_Kind> _method_get_def(jule::Ref<_1487f5920_IdentTypeDecl>);


	inline jule::Trait<_104a21a10_Kind> _method_build_ident(jule::Ref<_1487f5920_IdentTypeDecl>);


	inline jule::Ref<_104a21a10_Ref> _method_build_ref_from_type(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Ref<_104a21a10_Ref> _method_build_ref(jule::Ref<_1487f5920_RefTypeDecl>);


	inline jule::Ref<_104a21a10_Ptr> _method_build_ptr_from_type(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Ref<_104a21a10_Ptr> _method_build_ptr(jule::Ref<_1487f5920_PtrTypeDecl>);


	inline jule::Ref<_104a21a10_Slc> _method_build_slc(jule::Ref<_1487f5920_SlcTypeDecl>);


	inline jule::Ref<_104a21a10_Arr> _method_build_arr(jule::Ref<_1487f5920_ArrTypeDecl>);


	inline jule::Ref<_104a21a10_Map> _method_build_map(jule::Ref<_1487f5920_MapTypeDecl>);


	inline jule::Ref<_104a21a10_Tuple> _method_build_tuple(jule::Ref<_1487f5920_TupleTypeDecl>);


	inline jule::Bool _method_check_fn_types(jule::Ref<_1037649f0_FnIns>);


	inline jule::Ref<_1037649f0_FnIns> _method_build_fn(jule::Ref<_1487f5920_FnDecl>);


	inline jule::Trait<_104a21a10_Kind> _method_build_by_namespace(jule::Ref<_1487f5920_NamespaceTypeDecl>);


	inline jule::Ref<_104a21a10_TypeKind> _method_build(jule::Any);


	inline jule::Ref<_104a21a10_TypeKind> _method_check_decl(jule::Ref<_1487f5920_TypeDecl>);


	inline void _method_check(jule::Ref<_104a21a10_TypeSymbol>);


	inline bool operator==(const _104a21a10_TypeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_referencer == _Src._field_referencer &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_ignore_generics == _Src._field_ignore_generics &&
			this->_field_use_generics == _Src._field_use_generics &&
			this->_field_not_plain == _Src._field_not_plain;
	}

	inline bool operator!=(const _104a21a10_TypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _104a21a10_TypeAlias {
	jule::Ref<_104a21a10_TypeAlias> self{};

	jule::Ref<_1487f5920_ScopeTree> _field_scope{jule::Ref<_1487f5920_ScopeTree>()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_used{jule::Bool()};
	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_104a21a10_TypeSymbol> _field_kind{jule::Ref<_104a21a10_TypeSymbol>()};
	jule::Str _field_doc{jule::Str()};
	jule::Slice<jule::Any> _field_refers{jule::Slice<jule::Any>()};


	_104a21a10_TypeAlias(jule::Ref<_1487f5920_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_used, _108e15ff0_Token __param_token, jule::Str __param_ident, jule::Ref<_104a21a10_TypeSymbol> __param_kind, jule::Str __param_doc, jule::Slice<jule::Any> __param_refers) {
		this->self = jule::Ref<_104a21a10_TypeAlias>::make(this, nullptr);

		this->_field_scope = __param_scope;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_used = __param_used;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
		this->_field_doc = __param_doc;
		this->_field_refers = __param_refers;
	}

	~_104a21a10_TypeAlias(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104a21a10_TypeAlias(void) { this->self = jule::Ref<_104a21a10_TypeAlias>::make(this, nullptr); }

	inline bool operator==(const _104a21a10_TypeAlias &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_used == _Src._field_used &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc == _Src._field_doc &&
			this->_field_refers == _Src._field_refers;
	}

	inline bool operator!=(const _104a21a10_TypeAlias &_Src) const { return !this->operator==(_Src); }
};


struct _1191dc300_BinopSolver {
	jule::Ref<_1191dc300_BinopSolver> self{};

	jule::Ref<_1191dc300_Eval> _field_e{jule::Ref<_1191dc300_Eval>()};
	jule::Ref<_1191dc300_Data> _field_l{jule::Ref<_1191dc300_Data>()};
	jule::Ref<_1191dc300_Data> _field_r{jule::Ref<_1191dc300_Data>()};
	_108e15ff0_Token _field_op{_108e15ff0_Token()};


	_1191dc300_BinopSolver(jule::Ref<_1191dc300_Eval> __param_e, jule::Ref<_1191dc300_Data> __param_l, jule::Ref<_1191dc300_Data> __param_r, _108e15ff0_Token __param_op) {
		this->self = jule::Ref<_1191dc300_BinopSolver>::make(this, nullptr);

		this->_field_e = __param_e;
		this->_field_l = __param_l;
		this->_field_r = __param_r;
		this->_field_op = __param_op;
	}

	~_1191dc300_BinopSolver(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1191dc300_BinopSolver(void) { this->self = jule::Ref<_1191dc300_BinopSolver>::make(this, nullptr); }

	inline jule::Bool _method_check_type_compatibility(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_nil(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_enum(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_ptr(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_arr(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_slc(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_fn(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_struct(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_trait(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_any(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_bool(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_str(void);


	inline void _method_set_type_to_greater(void);


	inline void _method_check_mod_data(jule::Ref<_1191dc300_Data>);


	inline void _method_mod(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_float(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_unsig_int(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_sig_int(void);


	inline jule::Ref<_1191dc300_Data> _method_eval_prim(void);


	inline jule::Ref<_1191dc300_Data> _method_eval(void);


	inline void _method_assign_shift(jule::Ref<_1191dc300_Data>,jule::F64);


	inline void _method_solve_const(jule::Ref<_1191dc300_Data>);


	inline void _method_post_const(jule::Ref<_1191dc300_Data>);


	inline void _method_prepare_data(jule::Ref<_1191dc300_Data>);


	inline void _method_prepare_eval(void);


	inline void _method_check_data(jule::Ref<_1191dc300_Data>);


	inline void _method_check_datas(void);


	inline jule::Ref<_1191dc300_Data> _method_solve_explicit(jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>);


	inline jule::Ref<_1191dc300_Data> _method_solve(jule::Ref<_1487f5920_BinopExpr>);


	inline bool operator==(const _1191dc300_BinopSolver &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1191dc300_BinopSolver &_Src) const { return !this->operator==(_Src); }
};


struct _1044463d0_RetTypeChecker {
	jule::Ref<_1044463d0_RetTypeChecker> self{};

	jule::Ref<_104180810_ScopeChecker> _field_sc{jule::Ref<_104180810_ScopeChecker>()};
	jule::Ref<_1037649f0_FnIns> _field_f{jule::Ref<_1037649f0_FnIns>()};
	jule::Slice<jule::Ref<_104a21a10_TypeKind>> _field_types{jule::Slice<jule::Ref<_104a21a10_TypeKind>>()};
	jule::Slice<jule::Ref<_1487f5920_Expr>> _field_exprs{jule::Slice<jule::Ref<_1487f5920_Expr>>()};
	jule::Slice<jule::Ref<_104598e40_Var>> _field_vars{jule::Slice<jule::Ref<_104598e40_Var>>()};
	_108e15ff0_Token _field_error_token{_108e15ff0_Token()};
	jule::Any _field_model{jule::Any()};


	_1044463d0_RetTypeChecker(jule::Ref<_104180810_ScopeChecker> __param_sc, jule::Ref<_1037649f0_FnIns> __param_f, jule::Slice<jule::Ref<_104a21a10_TypeKind>> __param_types, jule::Slice<jule::Ref<_1487f5920_Expr>> __param_exprs, jule::Slice<jule::Ref<_104598e40_Var>> __param_vars, _108e15ff0_Token __param_error_token, jule::Any __param_model) {
		this->self = jule::Ref<_1044463d0_RetTypeChecker>::make(this, nullptr);

		this->_field_sc = __param_sc;
		this->_field_f = __param_f;
		this->_field_types = __param_types;
		this->_field_exprs = __param_exprs;
		this->_field_vars = __param_vars;
		this->_field_error_token = __param_error_token;
		this->_field_model = __param_model;
	}

	~_1044463d0_RetTypeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1044463d0_RetTypeChecker(void) { this->self = jule::Ref<_1044463d0_RetTypeChecker>::make(this, nullptr); }

	inline void _method_prepare_types(void);


	inline void _method_prepare_exprs(jule::Ref<_1487f5920_Expr>);


	inline void _method_ret_vars(void);


	inline void _method_check_exprs(void);


	inline jule::Bool _method_check(jule::Ref<_1487f5920_Expr>);


	inline bool operator==(const _1044463d0_RetTypeChecker &_Src) const {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_f == _Src._field_f &&
			this->_field_types == _Src._field_types &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_vars == _Src._field_vars &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_model == _Src._field_model;
	}

	inline bool operator!=(const _1044463d0_RetTypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1044463d0_FnCallArgChecker {
	jule::Ref<_1044463d0_FnCallArgChecker> self{};

	jule::Ref<_1191dc300_Eval> _field_e{jule::Ref<_1191dc300_Eval>()};
	jule::Slice<jule::Ref<_1487f5920_Expr>> _field_args{jule::Slice<jule::Ref<_1487f5920_Expr>>()};
	_108e15ff0_Token _field_error_token{_108e15ff0_Token()};
	jule::Ref<_1037649f0_FnIns> _field_f{jule::Ref<_1037649f0_FnIns>()};
	jule::Bool _field_dynamic_annotation{jule::Bool()};
	jule::Slice<jule::Any> _field_arg_models{jule::Slice<jule::Any>()};


	_1044463d0_FnCallArgChecker(jule::Ref<_1191dc300_Eval> __param_e, jule::Slice<jule::Ref<_1487f5920_Expr>> __param_args, _108e15ff0_Token __param_error_token, jule::Ref<_1037649f0_FnIns> __param_f, jule::Bool __param_dynamic_annotation, jule::Slice<jule::Any> __param_arg_models) {
		this->self = jule::Ref<_1044463d0_FnCallArgChecker>::make(this, nullptr);

		this->_field_e = __param_e;
		this->_field_args = __param_args;
		this->_field_error_token = __param_error_token;
		this->_field_f = __param_f;
		this->_field_dynamic_annotation = __param_dynamic_annotation;
		this->_field_arg_models = __param_arg_models;
	}

	~_1044463d0_FnCallArgChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1044463d0_FnCallArgChecker(void) { this->self = jule::Ref<_1044463d0_FnCallArgChecker>::make(this, nullptr); }

	inline void _method_push_err_token(_108e15ff0_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Ref<_1037649f0_ParamIns>> _method_get_params(void);


	inline jule::Bool _method_check_counts(jule::Slice<jule::Ref<_1037649f0_ParamIns>>);


	inline jule::Bool _method_check_arg(jule::Ref<_1037649f0_ParamIns>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);


	inline jule::Bool _method_push(jule::Ref<_1037649f0_ParamIns>,jule::Ref<_1487f5920_Expr>);


	inline jule::Bool _method_push_variadic(jule::Ref<_1037649f0_ParamIns>,jule::Int);


	inline jule::Bool _method_check_args(jule::Slice<jule::Ref<_1037649f0_ParamIns>>);


	inline jule::Bool _method_check_dynamic_type_annotation(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1044463d0_FnCallArgChecker &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_args == _Src._field_args &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_f == _Src._field_f &&
			this->_field_dynamic_annotation == _Src._field_dynamic_annotation &&
			this->_field_arg_models == _Src._field_arg_models;
	}

	inline bool operator!=(const _1044463d0_FnCallArgChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1044463d0_AssignTypeChecker {
	jule::Ref<_1044463d0_AssignTypeChecker> self{};

	jule::Ref<_119177e90_Sema> _field_s{jule::Ref<_119177e90_Sema>()};
	jule::Ref<_104a21a10_TypeKind> _field_dest{jule::Ref<_104a21a10_TypeKind>()};
	jule::Ref<_1191dc300_Data> _field_d{jule::Ref<_1191dc300_Data>()};
	_108e15ff0_Token _field_error_token{_108e15ff0_Token()};
	jule::Bool _field_deref{jule::Bool()};


	_1044463d0_AssignTypeChecker(jule::Ref<_119177e90_Sema> __param_s, jule::Ref<_104a21a10_TypeKind> __param_dest, jule::Ref<_1191dc300_Data> __param_d, _108e15ff0_Token __param_error_token, jule::Bool __param_deref) {
		this->self = jule::Ref<_1044463d0_AssignTypeChecker>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_dest = __param_dest;
		this->_field_d = __param_d;
		this->_field_error_token = __param_error_token;
		this->_field_deref = __param_deref;
	}

	~_1044463d0_AssignTypeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1044463d0_AssignTypeChecker(void) { this->self = jule::Ref<_1044463d0_AssignTypeChecker>::make(this, nullptr); }

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_validity(void);


	inline jule::Bool _method_check_const(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1044463d0_AssignTypeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_d == _Src._field_d &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_deref == _Src._field_deref;
	}

	inline bool operator!=(const _1044463d0_AssignTypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1044463d0_TypeCompatibilityChecker {
	jule::Ref<_1044463d0_TypeCompatibilityChecker> self{};

	jule::Ref<_119177e90_Sema> _field_s{jule::Ref<_119177e90_Sema>()};
	jule::Ref<_104a21a10_TypeKind> _field_dest{jule::Ref<_104a21a10_TypeKind>()};
	jule::Ref<_104a21a10_TypeKind> _field_src{jule::Ref<_104a21a10_TypeKind>()};
	_108e15ff0_Token _field_error_token{_108e15ff0_Token()};
	jule::Bool _field_ignore_any{jule::Bool()};
	jule::Bool _field_deref{jule::Bool()};
	jule::Bool _field_sub_check{jule::Bool()};


	_1044463d0_TypeCompatibilityChecker(jule::Ref<_119177e90_Sema> __param_s, jule::Ref<_104a21a10_TypeKind> __param_dest, jule::Ref<_104a21a10_TypeKind> __param_src, _108e15ff0_Token __param_error_token, jule::Bool __param_ignore_any, jule::Bool __param_deref, jule::Bool __param_sub_check) {
		this->self = jule::Ref<_1044463d0_TypeCompatibilityChecker>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_dest = __param_dest;
		this->_field_src = __param_src;
		this->_field_error_token = __param_error_token;
		this->_field_ignore_any = __param_ignore_any;
		this->_field_deref = __param_deref;
		this->_field_sub_check = __param_sub_check;
	}

	~_1044463d0_TypeCompatibilityChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1044463d0_TypeCompatibilityChecker(void) { this->self = jule::Ref<_1044463d0_TypeCompatibilityChecker>::make(this, nullptr); }

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_trait(void);


	inline jule::Bool _method_check_ref(void);


	inline jule::Bool _method_check_ptr(void);


	inline jule::Bool _method_check_slc(void);


	inline jule::Bool _method_check_arr(void);


	inline jule::Bool _method_check_map(void);


	inline jule::Bool _method_check_struct(void);


	inline jule::Bool _method_check_fn(void);


	inline jule::Bool _method_check_enum(void);


	inline jule::Bool _method_check_prim(void);


	inline jule::Bool _method_check_cpp_linked(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1044463d0_TypeCompatibilityChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_src == _Src._field_src &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_ignore_any == _Src._field_ignore_any &&
			this->_field_deref == _Src._field_deref &&
			this->_field_sub_check == _Src._field_sub_check;
	}

	inline bool operator!=(const _1044463d0_TypeCompatibilityChecker &_Src) const { return !this->operator==(_Src); }
};


struct _104598e40_Var {
	jule::Ref<_104598e40_Var> self{};

	jule::Ref<_104180810_Scope> _field_scope{jule::Ref<_104180810_Scope>()};
	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_constant{jule::Bool()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_used{jule::Bool()};
	jule::Bool _field_statically{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Str _field_doc{jule::Str()};
	jule::Ref<_104a21a10_TypeSymbol> _field_kind{jule::Ref<_104a21a10_TypeSymbol>()};
	jule::Ref<_1191dc300_Value> _field_value{jule::Ref<_1191dc300_Value>()};
	jule::Ref<_1036da950_ReferenceStack> _field_references{jule::Ref<_1036da950_ReferenceStack>()};
	jule::Slice<jule::Ref<_1487f5920_Directive>> _field_directives{jule::Slice<jule::Ref<_1487f5920_Directive>>()};
	jule::Slice<jule::Ref<_104598e40_Var>> _field_depends{jule::Slice<jule::Ref<_104598e40_Var>>()};


	_104598e40_Var(jule::Ref<_104180810_Scope> __param_scope, _108e15ff0_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_constant, jule::Bool __param_mutable, jule::Bool __param_public, jule::Bool __param_used, jule::Bool __param_statically, jule::Bool __param_reference, jule::Str __param_doc, jule::Ref<_104a21a10_TypeSymbol> __param_kind, jule::Ref<_1191dc300_Value> __param_value, jule::Ref<_1036da950_ReferenceStack> __param_references, jule::Slice<jule::Ref<_1487f5920_Directive>> __param_directives, jule::Slice<jule::Ref<_104598e40_Var>> __param_depends) {
		this->self = jule::Ref<_104598e40_Var>::make(this, nullptr);

		this->_field_scope = __param_scope;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_constant = __param_constant;
		this->_field_mutable = __param_mutable;
		this->_field_public = __param_public;
		this->_field_used = __param_used;
		this->_field_statically = __param_statically;
		this->_field_reference = __param_reference;
		this->_field_doc = __param_doc;
		this->_field_kind = __param_kind;
		this->_field_value = __param_value;
		this->_field_references = __param_references;
		this->_field_directives = __param_directives;
		this->_field_depends = __param_depends;
	}

	~_104598e40_Var(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104598e40_Var(void) { this->self = jule::Ref<_104598e40_Var>::make(this, nullptr); }

	inline jule::Bool _method_is_initialized(void);


	inline jule::Bool _method_is_type_inferred(void);


	inline bool operator==(const _104598e40_Var &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_constant == _Src._field_constant &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_public == _Src._field_public &&
			this->_field_used == _Src._field_used &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_doc == _Src._field_doc &&
			this->_field_kind == _Src._field_kind &&
			this->_field_value == _Src._field_value &&
			this->_field_references == _Src._field_references &&
			this->_field_directives == _Src._field_directives &&
			this->_field_depends == _Src._field_depends;
	}

	inline bool operator!=(const _104598e40_Var &_Src) const { return !this->operator==(_Src); }
};


struct _119162660_ImportInfo: public _10459ee60_Lookup {
	jule::Ref<_119162660_ImportInfo> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_path{jule::Str()};
	jule::Str _field_link_path{jule::Str()};
	jule::Str _field_ident{jule::Str()};
	jule::Str _field_alias{jule::Str()};
	jule::Bool _field_duplicate{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_std{jule::Bool()};
	jule::Bool _field_import_all{jule::Bool()};
	jule::Slice<_108e15ff0_Token> _field_selected{jule::Slice<_108e15ff0_Token>()};
	jule::Ref<_119162660_Package> _field_package{jule::Ref<_119162660_Package>()};


	_119162660_ImportInfo(_108e15ff0_Token __param_token, jule::Str __param_path, jule::Str __param_link_path, jule::Str __param_ident, jule::Str __param_alias, jule::Bool __param_duplicate, jule::Bool __param_cpp_linked, jule::Bool __param_std, jule::Bool __param_import_all, jule::Slice<_108e15ff0_Token> __param_selected, jule::Ref<_119162660_Package> __param_package) {
		this->self = jule::Ref<_119162660_ImportInfo>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_path = __param_path;
		this->_field_link_path = __param_link_path;
		this->_field_ident = __param_ident;
		this->_field_alias = __param_alias;
		this->_field_duplicate = __param_duplicate;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_std = __param_std;
		this->_field_import_all = __param_import_all;
		this->_field_selected = __param_selected;
		this->_field_package = __param_package;
	}

	~_119162660_ImportInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_119162660_ImportInfo(void) { this->self = jule::Ref<_119162660_ImportInfo>::make(this, nullptr); }

	inline jule::Ref<_119162660_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_119162660_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)>);


	inline jule::Ref<_104598e40_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_104a21a10_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_1037370d0_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_1037649f0_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_1036e5da0_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_1036dad50_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_lookupable(jule::Str);


	inline jule::Bool _method_exist_ident(jule::Str);


	inline bool operator==(const _119162660_ImportInfo &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_path == _Src._field_path &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_ident == _Src._field_ident &&
			this->_field_alias == _Src._field_alias &&
			this->_field_duplicate == _Src._field_duplicate &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std &&
			this->_field_import_all == _Src._field_import_all &&
			this->_field_selected == _Src._field_selected &&
			this->_field_package == _Src._field_package;
	}

	inline bool operator!=(const _119162660_ImportInfo &_Src) const { return !this->operator==(_Src); }
};


struct _104180810_ScopeLabel {
	jule::Ref<_104180810_ScopeLabel> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Ref<_104180810_Label> _field_label{jule::Ref<_104180810_Label>()};
	jule::Int _field_pos{jule::Int()};
	jule::Ref<_104180810_ScopeChecker> _field_scope{jule::Ref<_104180810_ScopeChecker>()};
	jule::Bool _field_used{jule::Bool()};


	_104180810_ScopeLabel(_108e15ff0_Token __param_token, jule::Ref<_104180810_Label> __param_label, jule::Int __param_pos, jule::Ref<_104180810_ScopeChecker> __param_scope, jule::Bool __param_used) {
		this->self = jule::Ref<_104180810_ScopeLabel>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_label = __param_label;
		this->_field_pos = __param_pos;
		this->_field_scope = __param_scope;
		this->_field_used = __param_used;
	}

	~_104180810_ScopeLabel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_104180810_ScopeLabel(void) { this->self = jule::Ref<_104180810_ScopeLabel>::make(this, nullptr); }

	inline bool operator==(const _104180810_ScopeLabel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label &&
			this->_field_pos == _Src._field_pos &&
			this->_field_scope == _Src._field_scope &&
			this->_field_used == _Src._field_used;
	}

	inline bool operator!=(const _104180810_ScopeLabel &_Src) const { return !this->operator==(_Src); }
};


struct _10417abf0_Impl {
	jule::Ref<_10417abf0_Impl> self{};

	_108e15ff0_Token _field_base{_108e15ff0_Token()};
	_108e15ff0_Token _field_dest{_108e15ff0_Token()};
	jule::Slice<jule::Ref<_1037649f0_Fn>> _field_methods{jule::Slice<jule::Ref<_1037649f0_Fn>>()};


	_10417abf0_Impl(_108e15ff0_Token __param_base, _108e15ff0_Token __param_dest, jule::Slice<jule::Ref<_1037649f0_Fn>> __param_methods) {
		this->self = jule::Ref<_10417abf0_Impl>::make(this, nullptr);

		this->_field_base = __param_base;
		this->_field_dest = __param_dest;
		this->_field_methods = __param_methods;
	}

	~_10417abf0_Impl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_10417abf0_Impl(void) { this->self = jule::Ref<_10417abf0_Impl>::make(this, nullptr); }

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _10417abf0_Impl &_Src) const {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _10417abf0_Impl &_Src) const { return !this->operator==(_Src); }
};


struct _1036dad50_Enum: public _104a21a10_Kind {
	jule::Ref<_1036dad50_Enum> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Bool _field_public{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_104a21a10_TypeSymbol> _field_kind{jule::Ref<_104a21a10_TypeSymbol>()};
	jule::Slice<jule::Ref<_1036dad50_EnumItem>> _field_items{jule::Slice<jule::Ref<_1036dad50_EnumItem>>()};
	jule::Str _field_doc{jule::Str()};


	_1036dad50_Enum(_108e15ff0_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ref<_104a21a10_TypeSymbol> __param_kind, jule::Slice<jule::Ref<_1036dad50_EnumItem>> __param_items, jule::Str __param_doc) {
		this->self = jule::Ref<_1036dad50_Enum>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_public = __param_public;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
		this->_field_items = __param_items;
		this->_field_doc = __param_doc;
	}

	~_1036dad50_Enum(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1036dad50_Enum(void) { this->self = jule::Ref<_1036dad50_Enum>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Ref<_1036dad50_EnumItem> _method_find_item(jule::Str);


	inline bool operator==(const _1036dad50_Enum &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc == _Src._field_doc;
	}

	inline bool operator!=(const _1036dad50_Enum &_Src) const { return !this->operator==(_Src); }
};


struct _1036dad50_EnumItem {
	jule::Ref<_1036dad50_EnumItem> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1191dc300_Value> _field_value{jule::Ref<_1191dc300_Value>()};


	_1036dad50_EnumItem(_108e15ff0_Token __param_token, jule::Str __param_ident, jule::Ref<_1191dc300_Value> __param_value) {
		this->self = jule::Ref<_1036dad50_EnumItem>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_value = __param_value;
	}

	~_1036dad50_EnumItem(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1036dad50_EnumItem(void) { this->self = jule::Ref<_1036dad50_EnumItem>::make(this, nullptr); }

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _1036dad50_EnumItem &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _1036dad50_EnumItem &_Src) const { return !this->operator==(_Src); }
};


struct _1036e5da0_Trait: public _104a21a10_Kind {
	jule::Ref<_1036e5da0_Trait> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_public{jule::Bool()};
	jule::Str _field_doc{jule::Str()};
	jule::Slice<jule::Ref<_1037649f0_Fn>> _field_methods{jule::Slice<jule::Ref<_1037649f0_Fn>>()};
	jule::Slice<jule::Ref<_1037370d0_Struct>> _field_implemented{jule::Slice<jule::Ref<_1037370d0_Struct>>()};


	_1036e5da0_Trait(_108e15ff0_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Str __param_doc, jule::Slice<jule::Ref<_1037649f0_Fn>> __param_methods, jule::Slice<jule::Ref<_1037370d0_Struct>> __param_implemented) {
		this->self = jule::Ref<_1036e5da0_Trait>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_public = __param_public;
		this->_field_doc = __param_doc;
		this->_field_methods = __param_methods;
		this->_field_implemented = __param_implemented;
	}

	~_1036e5da0_Trait(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1036e5da0_Trait(void) { this->self = jule::Ref<_1036e5da0_Trait>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_104a21a10_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Ref<_1037649f0_Fn> _method_find_method(jule::Str);


	inline bool operator==(const _1036e5da0_Trait &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_doc == _Src._field_doc &&
			this->_field_methods == _Src._field_methods &&
			this->_field_implemented == _Src._field_implemented;
	}

	inline bool operator!=(const _1036e5da0_Trait &_Src) const { return !this->operator==(_Src); }
};


struct _1036da950_Pass {
	jule::Ref<_1036da950_Pass> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_text{jule::Str()};


	_1036da950_Pass(_108e15ff0_Token __param_token, jule::Str __param_text) {
		this->self = jule::Ref<_1036da950_Pass>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_text = __param_text;
	}

	~_1036da950_Pass(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1036da950_Pass(void) { this->self = jule::Ref<_1036da950_Pass>::make(this, nullptr); }

	inline bool operator==(const _1036da950_Pass &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _1036da950_Pass &_Src) const { return !this->operator==(_Src); }
};


struct _1037649f0_Fn {
	jule::Ref<_1037649f0_Fn> self{};

	jule::Ref<_119177e90_Sema> _field_sema{jule::Ref<_119177e90_Sema>()};
	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Bool _field_global{jule::Bool()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_statically{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Slice<jule::Ref<_1487f5920_Directive>> _field_directives{jule::Slice<jule::Ref<_1487f5920_Directive>>()};
	jule::Str _field_doc{jule::Str()};
	jule::Ref<_1487f5920_ScopeTree> _field_scope{jule::Ref<_1487f5920_ScopeTree>()};
	jule::Slice<jule::Ref<_1487f5920_GenericDecl>> _field_generics{jule::Slice<jule::Ref<_1487f5920_GenericDecl>>()};
	jule::Ref<_1037649f0_RetType> _field_result{jule::Ref<_1037649f0_RetType>()};
	jule::Slice<jule::Ref<_1037649f0_Param>> _field_params{jule::Slice<jule::Ref<_1037649f0_Param>>()};
	jule::Ref<_1037370d0_Struct> _field_owner{jule::Ref<_1037370d0_Struct>()};
	jule::Slice<jule::Ref<_1037649f0_FnIns>> _field_instances{jule::Slice<jule::Ref<_1037649f0_FnIns>>()};


	_1037649f0_Fn(jule::Ref<_119177e90_Sema> __param_sema, _108e15ff0_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Str __param_ident, jule::Slice<jule::Ref<_1487f5920_Directive>> __param_directives, jule::Str __param_doc, jule::Ref<_1487f5920_ScopeTree> __param_scope, jule::Slice<jule::Ref<_1487f5920_GenericDecl>> __param_generics, jule::Ref<_1037649f0_RetType> __param_result, jule::Slice<jule::Ref<_1037649f0_Param>> __param_params, jule::Ref<_1037370d0_Struct> __param_owner, jule::Slice<jule::Ref<_1037649f0_FnIns>> __param_instances) {
		this->self = jule::Ref<_1037649f0_Fn>::make(this, nullptr);

		this->_field_sema = __param_sema;
		this->_field_token = __param_token;
		this->_field_global = __param_global;
		this->_field_unsafety = __param_unsafety;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_statically = __param_statically;
		this->_field_ident = __param_ident;
		this->_field_directives = __param_directives;
		this->_field_doc = __param_doc;
		this->_field_scope = __param_scope;
		this->_field_generics = __param_generics;
		this->_field_result = __param_result;
		this->_field_params = __param_params;
		this->_field_owner = __param_owner;
		this->_field_instances = __param_instances;
	}

	~_1037649f0_Fn(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1037649f0_Fn(void) { this->self = jule::Ref<_1037649f0_Fn>::make(this, nullptr); }

	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_method(void);


	inline jule::Bool _method_is_entry_point(void);


	inline jule::Bool _method_is_init(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_any_var(void);


	inline jule::Bool _method_parameters_uses_generics(void);


	inline jule::Bool _method_result_uses_generics(void);


	inline jule::Ref<_1037649f0_FnIns> _method_instance_force(void);


	inline jule::Ref<_1037649f0_FnIns> _method_instance(void);


	inline std::tuple<jule::Bool,jule::Int> _method_append_instance(jule::Ref<_1037649f0_FnIns>);


	inline bool operator==(const _1037649f0_Fn &_Src) const {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params &&
			this->_field_owner == _Src._field_owner &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _1037649f0_Fn &_Src) const { return !this->operator==(_Src); }
};


struct _1037649f0_Param {
	jule::Ref<_1037649f0_Param> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_variadic{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Ref<_104a21a10_TypeSymbol> _field_kind{jule::Ref<_104a21a10_TypeSymbol>()};
	jule::Str _field_ident{jule::Str()};


	_1037649f0_Param(_108e15ff0_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ref<_104a21a10_TypeSymbol> __param_kind, jule::Str __param_ident) {
		this->self = jule::Ref<_1037649f0_Param>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_mutable = __param_mutable;
		this->_field_variadic = __param_variadic;
		this->_field_reference = __param_reference;
		this->_field_kind = __param_kind;
		this->_field_ident = __param_ident;
	}

	~_1037649f0_Param(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1037649f0_Param(void) { this->self = jule::Ref<_1037649f0_Param>::make(this, nullptr); }

	inline jule::Ref<_1037649f0_ParamIns> _method_instance(void);


	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _1037649f0_Param &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1037649f0_Param &_Src) const { return !this->operator==(_Src); }
};


struct _1037370d0_Struct {
	jule::Ref<_1037370d0_Struct> self{};

	jule::Ref<_119177e90_Sema> _field_sema{jule::Ref<_119177e90_Sema>()};
	jule::Slice<jule::Ref<_1037370d0_Struct>> _field_depends{jule::Slice<jule::Ref<_1037370d0_Struct>>()};
	jule::Slice<jule::Ref<_1037370d0_Struct>> _field_uses{jule::Slice<jule::Ref<_1037370d0_Struct>>()};
	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Slice<jule::Ref<_1037370d0_Field>> _field_fields{jule::Slice<jule::Ref<_1037370d0_Field>>()};
	jule::Slice<jule::Ref<_1037649f0_Fn>> _field_methods{jule::Slice<jule::Ref<_1037649f0_Fn>>()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Slice<jule::Ref<_1487f5920_Directive>> _field_directives{jule::Slice<jule::Ref<_1487f5920_Directive>>()};
	jule::Str _field_doc{jule::Str()};
	jule::Slice<jule::Ref<_1487f5920_GenericDecl>> _field_generics{jule::Slice<jule::Ref<_1487f5920_GenericDecl>>()};
	jule::Slice<jule::Ref<_1036e5da0_Trait>> _field_implements{jule::Slice<jule::Ref<_1036e5da0_Trait>>()};
	jule::Slice<jule::Ref<_1037370d0_StructIns>> _field_instances{jule::Slice<jule::Ref<_1037370d0_StructIns>>()};


	_1037370d0_Struct(jule::Ref<_119177e90_Sema> __param_sema, jule::Slice<jule::Ref<_1037370d0_Struct>> __param_depends, jule::Slice<jule::Ref<_1037370d0_Struct>> __param_uses, _108e15ff0_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ref<_1037370d0_Field>> __param_fields, jule::Slice<jule::Ref<_1037649f0_Fn>> __param_methods, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ref<_1487f5920_Directive>> __param_directives, jule::Str __param_doc, jule::Slice<jule::Ref<_1487f5920_GenericDecl>> __param_generics, jule::Slice<jule::Ref<_1036e5da0_Trait>> __param_implements, jule::Slice<jule::Ref<_1037370d0_StructIns>> __param_instances) {
		this->self = jule::Ref<_1037370d0_Struct>::make(this, nullptr);

		this->_field_sema = __param_sema;
		this->_field_depends = __param_depends;
		this->_field_uses = __param_uses;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_fields = __param_fields;
		this->_field_methods = __param_methods;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_directives = __param_directives;
		this->_field_doc = __param_doc;
		this->_field_generics = __param_generics;
		this->_field_implements = __param_implements;
		this->_field_instances = __param_instances;
	}

	~_1037370d0_Struct(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1037370d0_Struct(void) { this->self = jule::Ref<_1037370d0_Struct>::make(this, nullptr); }

	inline jule::Ref<_1037370d0_StructIns> _method_instance(void);


	inline jule::Ref<_1037370d0_StructIns> _method_append_instance(jule::Ref<_1037370d0_StructIns>);


	inline jule::Ref<_1037649f0_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ref<_1037370d0_Field> _method_find_field(jule::Str);


	inline jule::Bool _method_is_implements(jule::Ref<_1036e5da0_Trait>);


	inline jule::Bool _method_is_derives(jule::Str);


	inline jule::Bool _method_is_uses(jule::Ref<_1037370d0_Struct>);


	inline bool operator==(const _1037370d0_Struct &_Src) const {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_depends == _Src._field_depends &&
			this->_field_uses == _Src._field_uses &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_generics == _Src._field_generics &&
			this->_field_implements == _Src._field_implements &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _1037370d0_Struct &_Src) const { return !this->operator==(_Src); }
};


struct _1037370d0_Field {
	jule::Ref<_1037370d0_Field> self{};

	jule::Ref<_1037370d0_Struct> _field_owner{jule::Ref<_1037370d0_Struct>()};
	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_104a21a10_TypeSymbol> _field_kind{jule::Ref<_104a21a10_TypeSymbol>()};


	_1037370d0_Field(jule::Ref<_1037370d0_Struct> __param_owner, _108e15ff0_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ref<_104a21a10_TypeSymbol> __param_kind) {
		this->self = jule::Ref<_1037370d0_Field>::make(this, nullptr);

		this->_field_owner = __param_owner;
		this->_field_token = __param_token;
		this->_field_public = __param_public;
		this->_field_mutable = __param_mutable;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
	}

	~_1037370d0_Field(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1037370d0_Field(void) { this->self = jule::Ref<_1037370d0_Field>::make(this, nullptr); }

	inline jule::Ref<_1037370d0_FieldIns> _method_instance(void);


	inline bool operator==(const _1037370d0_Field &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1037370d0_Field &_Src) const { return !this->operator==(_Src); }
};


struct _149043a20_AssignInfo {
	jule::Ref<_149043a20_AssignInfo> self{};

	jule::Slice<_108e15ff0_Token> _field_l{jule::Slice<_108e15ff0_Token>()};
	jule::Slice<_108e15ff0_Token> _field_r{jule::Slice<_108e15ff0_Token>()};
	_108e15ff0_Token _field_setter{_108e15ff0_Token()};
	jule::Bool _field_ok{jule::Bool()};


	_149043a20_AssignInfo(jule::Slice<_108e15ff0_Token> __param_l, jule::Slice<_108e15ff0_Token> __param_r, _108e15ff0_Token __param_setter, jule::Bool __param_ok) {
		this->self = jule::Ref<_149043a20_AssignInfo>::make(this, nullptr);

		this->_field_l = __param_l;
		this->_field_r = __param_r;
		this->_field_setter = __param_setter;
		this->_field_ok = __param_ok;
	}

	~_149043a20_AssignInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_149043a20_AssignInfo(void) { this->self = jule::Ref<_149043a20_AssignInfo>::make(this, nullptr); }

	inline bool operator==(const _149043a20_AssignInfo &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_setter == _Src._field_setter &&
			this->_field_ok == _Src._field_ok;
	}

	inline bool operator!=(const _149043a20_AssignInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_Impl {
	jule::Ref<_1487f5920_Impl> self{};

	_108e15ff0_Token _field_base{_108e15ff0_Token()};
	_108e15ff0_Token _field_dest{_108e15ff0_Token()};
	jule::Slice<jule::Ref<_1487f5920_FnDecl>> _field_methods{jule::Slice<jule::Ref<_1487f5920_FnDecl>>()};


	_1487f5920_Impl(_108e15ff0_Token __param_base, _108e15ff0_Token __param_dest, jule::Slice<jule::Ref<_1487f5920_FnDecl>> __param_methods) {
		this->self = jule::Ref<_1487f5920_Impl>::make(this, nullptr);

		this->_field_base = __param_base;
		this->_field_dest = __param_dest;
		this->_field_methods = __param_methods;
	}

	~_1487f5920_Impl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_Impl(void) { this->self = jule::Ref<_1487f5920_Impl>::make(this, nullptr); }

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _1487f5920_Impl &_Src) const {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _1487f5920_Impl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_TraitDecl {
	jule::Ref<_1487f5920_TraitDecl> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_public{jule::Bool()};
	jule::Ref<_1487f5920_CommentGroup> _field_doc_comments{jule::Ref<_1487f5920_CommentGroup>()};
	jule::Slice<jule::Ref<_1487f5920_FnDecl>> _field_methods{jule::Slice<jule::Ref<_1487f5920_FnDecl>>()};


	_1487f5920_TraitDecl(_108e15ff0_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Ref<_1487f5920_CommentGroup> __param_doc_comments, jule::Slice<jule::Ref<_1487f5920_FnDecl>> __param_methods) {
		this->self = jule::Ref<_1487f5920_TraitDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_public = __param_public;
		this->_field_doc_comments = __param_doc_comments;
		this->_field_methods = __param_methods;
	}

	~_1487f5920_TraitDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_TraitDecl(void) { this->self = jule::Ref<_1487f5920_TraitDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_TraitDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _1487f5920_TraitDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_StructDecl {
	jule::Ref<_1487f5920_StructDecl> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Slice<jule::Ref<_1487f5920_FieldDecl>> _field_fields{jule::Slice<jule::Ref<_1487f5920_FieldDecl>>()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Slice<jule::Ref<_1487f5920_Directive>> _field_directives{jule::Slice<jule::Ref<_1487f5920_Directive>>()};
	jule::Ref<_1487f5920_CommentGroup> _field_doc_comments{jule::Ref<_1487f5920_CommentGroup>()};
	jule::Slice<jule::Ref<_1487f5920_GenericDecl>> _field_generics{jule::Slice<jule::Ref<_1487f5920_GenericDecl>>()};


	_1487f5920_StructDecl(_108e15ff0_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ref<_1487f5920_FieldDecl>> __param_fields, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ref<_1487f5920_Directive>> __param_directives, jule::Ref<_1487f5920_CommentGroup> __param_doc_comments, jule::Slice<jule::Ref<_1487f5920_GenericDecl>> __param_generics) {
		this->self = jule::Ref<_1487f5920_StructDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_fields = __param_fields;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_directives = __param_directives;
		this->_field_doc_comments = __param_doc_comments;
		this->_field_generics = __param_generics;
	}

	~_1487f5920_StructDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_StructDecl(void) { this->self = jule::Ref<_1487f5920_StructDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_StructDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _1487f5920_StructDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_FieldDecl {
	jule::Ref<_1487f5920_FieldDecl> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1487f5920_TypeDecl> _field_kind{jule::Ref<_1487f5920_TypeDecl>()};


	_1487f5920_FieldDecl(_108e15ff0_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ref<_1487f5920_TypeDecl> __param_kind) {
		this->self = jule::Ref<_1487f5920_FieldDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_public = __param_public;
		this->_field_mutable = __param_mutable;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
	}

	~_1487f5920_FieldDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_FieldDecl(void) { this->self = jule::Ref<_1487f5920_FieldDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_FieldDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1487f5920_FieldDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_EnumDecl {
	jule::Ref<_1487f5920_EnumDecl> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Bool _field_public{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1487f5920_TypeDecl> _field_kind{jule::Ref<_1487f5920_TypeDecl>()};
	jule::Slice<jule::Ref<_1487f5920_EnumItemDecl>> _field_items{jule::Slice<jule::Ref<_1487f5920_EnumItemDecl>>()};
	jule::Ref<_1487f5920_CommentGroup> _field_doc_comments{jule::Ref<_1487f5920_CommentGroup>()};


	_1487f5920_EnumDecl(_108e15ff0_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ref<_1487f5920_TypeDecl> __param_kind, jule::Slice<jule::Ref<_1487f5920_EnumItemDecl>> __param_items, jule::Ref<_1487f5920_CommentGroup> __param_doc_comments) {
		this->self = jule::Ref<_1487f5920_EnumDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_public = __param_public;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
		this->_field_items = __param_items;
		this->_field_doc_comments = __param_doc_comments;
	}

	~_1487f5920_EnumDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_EnumDecl(void) { this->self = jule::Ref<_1487f5920_EnumDecl>::make(this, nullptr); }

	inline jule::Bool _method_default_typed(void);


	inline bool operator==(const _1487f5920_EnumDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _1487f5920_EnumDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_EnumItemDecl {
	jule::Ref<_1487f5920_EnumItemDecl> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1487f5920_Expr> _field_expr{jule::Ref<_1487f5920_Expr>()};


	_1487f5920_EnumItemDecl(_108e15ff0_Token __param_token, jule::Str __param_ident, jule::Ref<_1487f5920_Expr> __param_expr) {
		this->self = jule::Ref<_1487f5920_EnumItemDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_expr = __param_expr;
	}

	~_1487f5920_EnumItemDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_EnumItemDecl(void) { this->self = jule::Ref<_1487f5920_EnumItemDecl>::make(this, nullptr); }

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _1487f5920_EnumItemDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1487f5920_EnumItemDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_UseDecl {
	jule::Ref<_1487f5920_UseDecl> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_link_path{jule::Str()};
	jule::Str _field_alias{jule::Str()};
	jule::Bool _field_full{jule::Bool()};
	jule::Slice<_108e15ff0_Token> _field_selected{jule::Slice<_108e15ff0_Token>()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_std{jule::Bool()};


	_1487f5920_UseDecl(_108e15ff0_Token __param_token, jule::Str __param_link_path, jule::Str __param_alias, jule::Bool __param_full, jule::Slice<_108e15ff0_Token> __param_selected, jule::Bool __param_cpp_linked, jule::Bool __param_std) {
		this->self = jule::Ref<_1487f5920_UseDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_link_path = __param_link_path;
		this->_field_alias = __param_alias;
		this->_field_full = __param_full;
		this->_field_selected = __param_selected;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_std = __param_std;
	}

	~_1487f5920_UseDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_UseDecl(void) { this->self = jule::Ref<_1487f5920_UseDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_UseDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_alias == _Src._field_alias &&
			this->_field_full == _Src._field_full &&
			this->_field_selected == _Src._field_selected &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std;
	}

	inline bool operator!=(const _1487f5920_UseDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_Case {
	jule::Ref<_1487f5920_Case> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Ref<_1487f5920_ScopeTree> _field_scope{jule::Ref<_1487f5920_ScopeTree>()};
	jule::Slice<jule::Ref<_1487f5920_Expr>> _field_exprs{jule::Slice<jule::Ref<_1487f5920_Expr>>()};


	_1487f5920_Case(_108e15ff0_Token __param_token, jule::Ref<_1487f5920_ScopeTree> __param_scope, jule::Slice<jule::Ref<_1487f5920_Expr>> __param_exprs) {
		this->self = jule::Ref<_1487f5920_Case>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_scope = __param_scope;
		this->_field_exprs = __param_exprs;
	}

	~_1487f5920_Case(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_Case(void) { this->self = jule::Ref<_1487f5920_Case>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_Case &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _1487f5920_Case &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_TypeAliasDecl {
	jule::Ref<_1487f5920_TypeAliasDecl> self{};

	jule::Ref<_1487f5920_ScopeTree> _field_scope{jule::Ref<_1487f5920_ScopeTree>()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1487f5920_TypeDecl> _field_kind{jule::Ref<_1487f5920_TypeDecl>()};
	jule::Ref<_1487f5920_CommentGroup> _field_doc_comments{jule::Ref<_1487f5920_CommentGroup>()};


	_1487f5920_TypeAliasDecl(jule::Ref<_1487f5920_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, _108e15ff0_Token __param_token, jule::Str __param_ident, jule::Ref<_1487f5920_TypeDecl> __param_kind, jule::Ref<_1487f5920_CommentGroup> __param_doc_comments) {
		this->self = jule::Ref<_1487f5920_TypeAliasDecl>::make(this, nullptr);

		this->_field_scope = __param_scope;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
		this->_field_doc_comments = __param_doc_comments;
	}

	~_1487f5920_TypeAliasDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_TypeAliasDecl(void) { this->self = jule::Ref<_1487f5920_TypeAliasDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_TypeAliasDecl &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _1487f5920_TypeAliasDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_Else {
	jule::Ref<_1487f5920_Else> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Ref<_1487f5920_ScopeTree> _field_scope{jule::Ref<_1487f5920_ScopeTree>()};


	_1487f5920_Else(_108e15ff0_Token __param_token, jule::Ref<_1487f5920_ScopeTree> __param_scope) {
		this->self = jule::Ref<_1487f5920_Else>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_scope = __param_scope;
	}

	~_1487f5920_Else(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_Else(void) { this->self = jule::Ref<_1487f5920_Else>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_Else &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1487f5920_Else &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_If {
	jule::Ref<_1487f5920_If> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Ref<_1487f5920_Expr> _field_expr{jule::Ref<_1487f5920_Expr>()};
	jule::Ref<_1487f5920_ScopeTree> _field_scope{jule::Ref<_1487f5920_ScopeTree>()};


	_1487f5920_If(_108e15ff0_Token __param_token, jule::Ref<_1487f5920_Expr> __param_expr, jule::Ref<_1487f5920_ScopeTree> __param_scope) {
		this->self = jule::Ref<_1487f5920_If>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
		this->_field_scope = __param_scope;
	}

	~_1487f5920_If(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_If(void) { this->self = jule::Ref<_1487f5920_If>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_If &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1487f5920_If &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_ContSt {
	jule::Ref<_1487f5920_ContSt> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	_108e15ff0_Token _field_label{_108e15ff0_Token()};


	_1487f5920_ContSt(_108e15ff0_Token __param_token, _108e15ff0_Token __param_label) {
		this->self = jule::Ref<_1487f5920_ContSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_label = __param_label;
	}

	~_1487f5920_ContSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_ContSt(void) { this->self = jule::Ref<_1487f5920_ContSt>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_ContSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _1487f5920_ContSt &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_BreakSt {
	jule::Ref<_1487f5920_BreakSt> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	_108e15ff0_Token _field_label{_108e15ff0_Token()};


	_1487f5920_BreakSt(_108e15ff0_Token __param_token, _108e15ff0_Token __param_label) {
		this->self = jule::Ref<_1487f5920_BreakSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_label = __param_label;
	}

	~_1487f5920_BreakSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_BreakSt(void) { this->self = jule::Ref<_1487f5920_BreakSt>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_BreakSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _1487f5920_BreakSt &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_VarDecl {
	jule::Ref<_1487f5920_VarDecl> self{};

	jule::Ref<_1487f5920_ScopeTree> _field_scope{jule::Ref<_1487f5920_ScopeTree>()};
	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_constant{jule::Bool()};
	jule::Bool _field_statically{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Slice<jule::Ref<_1487f5920_Directive>> _field_directives{jule::Slice<jule::Ref<_1487f5920_Directive>>()};
	jule::Ref<_1487f5920_CommentGroup> _field_doc_comments{jule::Ref<_1487f5920_CommentGroup>()};
	jule::Ref<_1487f5920_TypeDecl> _field_kind{jule::Ref<_1487f5920_TypeDecl>()};
	jule::Ref<_1487f5920_Expr> _field_expr{jule::Ref<_1487f5920_Expr>()};


	_1487f5920_VarDecl(jule::Ref<_1487f5920_ScopeTree> __param_scope, _108e15ff0_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_public, jule::Bool __param_mutable, jule::Bool __param_constant, jule::Bool __param_statically, jule::Bool __param_reference, jule::Slice<jule::Ref<_1487f5920_Directive>> __param_directives, jule::Ref<_1487f5920_CommentGroup> __param_doc_comments, jule::Ref<_1487f5920_TypeDecl> __param_kind, jule::Ref<_1487f5920_Expr> __param_expr) {
		this->self = jule::Ref<_1487f5920_VarDecl>::make(this, nullptr);

		this->_field_scope = __param_scope;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_public = __param_public;
		this->_field_mutable = __param_mutable;
		this->_field_constant = __param_constant;
		this->_field_statically = __param_statically;
		this->_field_reference = __param_reference;
		this->_field_directives = __param_directives;
		this->_field_doc_comments = __param_doc_comments;
		this->_field_kind = __param_kind;
		this->_field_expr = __param_expr;
	}

	~_1487f5920_VarDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_VarDecl(void) { this->self = jule::Ref<_1487f5920_VarDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_VarDecl &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_constant == _Src._field_constant &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1487f5920_VarDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_FnDecl {
	jule::Ref<_1487f5920_FnDecl> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Bool _field_global{jule::Bool()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_statically{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Slice<jule::Ref<_1487f5920_Directive>> _field_directives{jule::Slice<jule::Ref<_1487f5920_Directive>>()};
	jule::Ref<_1487f5920_CommentGroup> _field_doc_comments{jule::Ref<_1487f5920_CommentGroup>()};
	jule::Ref<_1487f5920_ScopeTree> _field_scope{jule::Ref<_1487f5920_ScopeTree>()};
	jule::Slice<jule::Ref<_1487f5920_GenericDecl>> _field_generics{jule::Slice<jule::Ref<_1487f5920_GenericDecl>>()};
	jule::Ref<_1487f5920_RetTypeDecl> _field_result{jule::Ref<_1487f5920_RetTypeDecl>()};
	jule::Slice<jule::Ref<_1487f5920_ParamDecl>> _field_params{jule::Slice<jule::Ref<_1487f5920_ParamDecl>>()};


	_1487f5920_FnDecl(_108e15ff0_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Str __param_ident, jule::Slice<jule::Ref<_1487f5920_Directive>> __param_directives, jule::Ref<_1487f5920_CommentGroup> __param_doc_comments, jule::Ref<_1487f5920_ScopeTree> __param_scope, jule::Slice<jule::Ref<_1487f5920_GenericDecl>> __param_generics, jule::Ref<_1487f5920_RetTypeDecl> __param_result, jule::Slice<jule::Ref<_1487f5920_ParamDecl>> __param_params) {
		this->self = jule::Ref<_1487f5920_FnDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_global = __param_global;
		this->_field_unsafety = __param_unsafety;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_statically = __param_statically;
		this->_field_ident = __param_ident;
		this->_field_directives = __param_directives;
		this->_field_doc_comments = __param_doc_comments;
		this->_field_scope = __param_scope;
		this->_field_generics = __param_generics;
		this->_field_result = __param_result;
		this->_field_params = __param_params;
	}

	~_1487f5920_FnDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_FnDecl(void) { this->self = jule::Ref<_1487f5920_FnDecl>::make(this, nullptr); }

	inline jule::Bool _method_is_anon(void);


	inline bool operator==(const _1487f5920_FnDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params;
	}

	inline bool operator!=(const _1487f5920_FnDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_ParamDecl {
	jule::Ref<_1487f5920_ParamDecl> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_variadic{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Ref<_1487f5920_TypeDecl> _field_kind{jule::Ref<_1487f5920_TypeDecl>()};
	jule::Str _field_ident{jule::Str()};


	_1487f5920_ParamDecl(_108e15ff0_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ref<_1487f5920_TypeDecl> __param_kind, jule::Str __param_ident) {
		this->self = jule::Ref<_1487f5920_ParamDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_mutable = __param_mutable;
		this->_field_variadic = __param_variadic;
		this->_field_reference = __param_reference;
		this->_field_kind = __param_kind;
		this->_field_ident = __param_ident;
	}

	~_1487f5920_ParamDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_ParamDecl(void) { this->self = jule::Ref<_1487f5920_ParamDecl>::make(this, nullptr); }

	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _1487f5920_ParamDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1487f5920_ParamDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_AssignLeft {
	jule::Ref<_1487f5920_AssignLeft> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1487f5920_Expr> _field_expr{jule::Ref<_1487f5920_Expr>()};


	_1487f5920_AssignLeft(_108e15ff0_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Str __param_ident, jule::Ref<_1487f5920_Expr> __param_expr) {
		this->self = jule::Ref<_1487f5920_AssignLeft>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_mutable = __param_mutable;
		this->_field_reference = __param_reference;
		this->_field_ident = __param_ident;
		this->_field_expr = __param_expr;
	}

	~_1487f5920_AssignLeft(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_AssignLeft(void) { this->self = jule::Ref<_1487f5920_AssignLeft>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_AssignLeft &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1487f5920_AssignLeft &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_GotoSt {
	jule::Ref<_1487f5920_GotoSt> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	_108e15ff0_Token _field_label{_108e15ff0_Token()};


	_1487f5920_GotoSt(_108e15ff0_Token __param_token, _108e15ff0_Token __param_label) {
		this->self = jule::Ref<_1487f5920_GotoSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_label = __param_label;
	}

	~_1487f5920_GotoSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_GotoSt(void) { this->self = jule::Ref<_1487f5920_GotoSt>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_GotoSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _1487f5920_GotoSt &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_GenericDecl {
	jule::Ref<_1487f5920_GenericDecl> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};


	_1487f5920_GenericDecl(_108e15ff0_Token __param_token, jule::Str __param_ident) {
		this->self = jule::Ref<_1487f5920_GenericDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
	}

	~_1487f5920_GenericDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_GenericDecl(void) { this->self = jule::Ref<_1487f5920_GenericDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_GenericDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1487f5920_GenericDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_FnCallExpr {
	jule::Ref<_1487f5920_FnCallExpr> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Ref<_1487f5920_Expr> _field_expr{jule::Ref<_1487f5920_Expr>()};
	jule::Slice<jule::Ref<_1487f5920_TypeDecl>> _field_generics{jule::Slice<jule::Ref<_1487f5920_TypeDecl>>()};
	jule::Slice<jule::Ref<_1487f5920_Expr>> _field_args{jule::Slice<jule::Ref<_1487f5920_Expr>>()};
	jule::Bool _field_concurrent{jule::Bool()};


	_1487f5920_FnCallExpr(_108e15ff0_Token __param_token, jule::Ref<_1487f5920_Expr> __param_expr, jule::Slice<jule::Ref<_1487f5920_TypeDecl>> __param_generics, jule::Slice<jule::Ref<_1487f5920_Expr>> __param_args, jule::Bool __param_concurrent) {
		this->self = jule::Ref<_1487f5920_FnCallExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
		this->_field_generics = __param_generics;
		this->_field_args = __param_args;
		this->_field_concurrent = __param_concurrent;
	}

	~_1487f5920_FnCallExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_FnCallExpr(void) { this->self = jule::Ref<_1487f5920_FnCallExpr>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_FnCallExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_generics == _Src._field_generics &&
			this->_field_args == _Src._field_args &&
			this->_field_concurrent == _Src._field_concurrent;
	}

	inline bool operator!=(const _1487f5920_FnCallExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_Expr {
	jule::Ref<_1487f5920_Expr> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Any _field_kind{jule::Any()};


	_1487f5920_Expr(_108e15ff0_Token __param_token, jule::Any __param_kind) {
		this->self = jule::Ref<_1487f5920_Expr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_kind = __param_kind;
	}

	~_1487f5920_Expr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_Expr(void) { this->self = jule::Ref<_1487f5920_Expr>::make(this, nullptr); }

	inline jule::Bool _method_is_fn_call(void);


	inline bool operator==(const _1487f5920_Expr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1487f5920_Expr &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_IdentTypeDecl {
	jule::Ref<_1487f5920_IdentTypeDecl> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Slice<jule::Ref<_1487f5920_TypeDecl>> _field_generics{jule::Slice<jule::Ref<_1487f5920_TypeDecl>>()};


	_1487f5920_IdentTypeDecl(_108e15ff0_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Slice<jule::Ref<_1487f5920_TypeDecl>> __param_generics) {
		this->self = jule::Ref<_1487f5920_IdentTypeDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_generics = __param_generics;
	}

	~_1487f5920_IdentTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_IdentTypeDecl(void) { this->self = jule::Ref<_1487f5920_IdentTypeDecl>::make(this, nullptr); }

	inline jule::Bool _method_is_prim(void);


	inline bool operator==(const _1487f5920_IdentTypeDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _1487f5920_IdentTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_TypeDecl {
	jule::Ref<_1487f5920_TypeDecl> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Any _field_kind{jule::Any()};


	_1487f5920_TypeDecl(_108e15ff0_Token __param_token, jule::Any __param_kind) {
		this->self = jule::Ref<_1487f5920_TypeDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_kind = __param_kind;
	}

	~_1487f5920_TypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_TypeDecl(void) { this->self = jule::Ref<_1487f5920_TypeDecl>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_TypeDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1487f5920_TypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_Directive {
	jule::Ref<_1487f5920_Directive> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_tag{jule::Str()};
	jule::Slice<jule::Str> _field_args{jule::Slice<jule::Str>()};


	_1487f5920_Directive(_108e15ff0_Token __param_token, jule::Str __param_tag, jule::Slice<jule::Str> __param_args) {
		this->self = jule::Ref<_1487f5920_Directive>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_tag = __param_tag;
		this->_field_args = __param_args;
	}

	~_1487f5920_Directive(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_Directive(void) { this->self = jule::Ref<_1487f5920_Directive>::make(this, nullptr); }

	inline bool operator==(const _1487f5920_Directive &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_tag == _Src._field_tag &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _1487f5920_Directive &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_Comment {
	jule::Ref<_1487f5920_Comment> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Str _field_text{jule::Str()};


	_1487f5920_Comment(_108e15ff0_Token __param_token, jule::Str __param_text) {
		this->self = jule::Ref<_1487f5920_Comment>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_text = __param_text;
	}

	~_1487f5920_Comment(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_Comment(void) { this->self = jule::Ref<_1487f5920_Comment>::make(this, nullptr); }

	inline jule::Bool _method_is_directive(void);


	inline bool operator==(const _1487f5920_Comment &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _1487f5920_Comment &_Src) const { return !this->operator==(_Src); }
};


struct _1487f5920_Node {
	jule::Ref<_1487f5920_Node> self{};

	_108e15ff0_Token _field_token{_108e15ff0_Token()};
	jule::Any _field_data{jule::Any()};


	_1487f5920_Node(_108e15ff0_Token __param_token, jule::Any __param_data) {
		this->self = jule::Ref<_1487f5920_Node>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_data = __param_data;
	}

	~_1487f5920_Node(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1487f5920_Node(void) { this->self = jule::Ref<_1487f5920_Node>::make(this, nullptr); }

	inline jule::Bool _method_is_decl(void);


	inline jule::Bool _method_is_comment(void);


	inline jule::Bool _method_is_impl(void);


	inline jule::Bool _method_is_use_decl(void);


	inline bool operator==(const _1487f5920_Node &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _1487f5920_Node &_Src) const { return !this->operator==(_Src); }
};


inline jule::Int _1490cfc20_get_last_errno(void);
inline jule::Str _1490d0f50_byte_ptr_to_str(jule::U8*);
inline jule::Int _1490d0f50_stat(jule::U8*,struct stat*);
inline jule::Int _1490d0f50_open(jule::U8*,jule::Int,jule::Int);
inline jule::U8* _1490d0f50_getcwd(jule::U8*,jule::Uint);
inline DIR* _1490d0f50_opendir(jule::U8*);
inline struct dirent* _1490d0f50_readdir(DIR*);
inline jule::Int _1490d0f50_closedir(DIR*);
inline jule::Int _1490d0f50_chdir(jule::U8*);
inline jule::Int _1490d0f50_remove(jule::U8*);
inline jule::Int _1490d0f50_mkdir(jule::U8*,jule::Int);
inline jule::Int _1490d0f50_rmdir(jule::U8*);
inline jule::Int _1490d0f50_unlink(jule::U8*);
inline jule::I64 _118613db0_seek(jule::Int,jule::I64,jule::Int);
inline jule::Int _118613db0_read(jule::Int,void*,jule::Uint);
inline jule::Int _118613db0_close(jule::Int);
inline jule::Int _118613db0_write(jule::Int,void*,jule::Uint);
inline void _118613db0_exit(jule::Int);
inline void* _11860afb0_malloc(jule::Uint);
inline void* _11860afb0_calloc(jule::Uint,jule::Uint);
inline void* _11860afb0_realloc(void*,jule::Uint);
inline void _11860afb0_free(void*);
inline jule::Int _1490b8d80_get_last_os_error(void);
inline std::tuple<jule::Str,jule::Int> _1490c0580_working_dir(void);
inline jule::Int _1490c0580_set_working_dir(jule::Str);
inline void _1490c0580_init(void);
inline std::tuple<jule::Str,jule::Int> _1490bd770___getwd(void);
inline jule::Int _1490bd770___chdir(jule::Str);
inline jule::Str _149060fe0_clean(jule::Str);
inline jule::Str _149060fe0_to_slash(jule::Str);
inline jule::Str _149060fe0_from_slash(jule::Str);
inline jule::Str _149060fe0_join(jule::Slice<jule::Str>);
inline jule::Str _149060fe0_ext(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _149060fe0_abs(jule::Str);
inline jule::Str _149060fe0_base(jule::Str);
inline jule::Str _149060fe0_dir(jule::Str);
inline jule::Str _149060fe0_volume_name(jule::Str);
inline jule::Bool _149056a50_is_path_sep(jule::U8);
inline jule::Bool _149056a50_is_abs(jule::Str);
inline jule::Int _149056a50_volume_name_len(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _149056a50___abs(jule::Str);
inline jule::Str _149056a50_str_join(jule::Slice<jule::Str>,jule::Str);
inline jule::Str _149056a50___join(jule::Slice<jule::Str>);
inline jule::Int _1191c3b80_leading_zeros(jule::Uint);
inline jule::Int _1191c3b80_leading_zeros8(jule::U8);
inline jule::Int _1191c3b80_leading_zeros16(jule::U16);
inline jule::Int _1191c3b80_leading_zeros32(jule::U32);
inline jule::Int _1191c3b80_leading_zeros64(jule::U64);
inline jule::Int _1191c3b80_trailing_zeros(jule::Uint);
inline jule::Int _1191c3b80_trailing_zeros8(jule::U8);
inline jule::Int _1191c3b80_trailing_zeros16(jule::U16);
inline jule::Int _1191c3b80_trailing_zeros32(jule::U32);
inline jule::Int _1191c3b80_trailing_zeros64(jule::U64);
inline jule::Int _1191c3b80_ones_count(jule::Uint);
inline jule::Int _1191c3b80_ones_count8(jule::U8);
inline jule::Int _1191c3b80_ones_count16(jule::U16);
inline jule::Int _1191c3b80_ones_count32(jule::U32);
inline jule::Int _1191c3b80_ones_count64(jule::U64);
inline jule::Uint _1191c3b80_rotate_left(jule::Uint,jule::Int);
inline jule::U8 _1191c3b80_rotate_left8(jule::U8,jule::Int);
inline jule::U16 _1191c3b80_rotate_left16(jule::U16,jule::Int);
inline jule::U32 _1191c3b80_rotate_left32(jule::U32,jule::Int);
inline jule::U64 _1191c3b80_rotate_left64(jule::U64,jule::Int);
inline jule::Uint _1191c3b80_reverse(jule::Uint);
inline jule::U8 _1191c3b80_reverse8(jule::U8);
inline jule::U16 _1191c3b80_reverse16(jule::U16);
inline jule::U32 _1191c3b80_reverse32(jule::U32);
inline jule::U64 _1191c3b80_reverse64(jule::U64);
inline jule::Uint _1191c3b80_reverse_bytes(jule::Uint);
inline jule::U16 _1191c3b80_reverse_bytes16(jule::U16);
inline jule::U32 _1191c3b80_reverse_bytes32(jule::U32);
inline jule::U64 _1191c3b80_reverse_bytes64(jule::U64);
inline jule::Int _1191c3b80_len(jule::Uint);
inline jule::Int _1191c3b80_len8(jule::U8);
inline jule::Int _1191c3b80_len16(jule::U16);
inline jule::Int _1191c3b80_len32(jule::U32);
inline jule::Int _1191c3b80_len64(jule::U64);
inline std::tuple<jule::Uint,jule::Uint> _1191c3b80_add(jule::Uint,jule::Uint,jule::Uint);
inline std::tuple<jule::U32,jule::U32> _1191c3b80_add32(jule::U32,jule::U32,jule::U32);
inline std::tuple<jule::U64,jule::U64> _1191c3b80_add64(jule::U64,jule::U64,jule::U64);
inline std::tuple<jule::Uint,jule::Uint> _1191c3b80_sub(jule::Uint,jule::Uint,jule::Uint);
inline std::tuple<jule::U32,jule::U32> _1191c3b80_sub32(jule::U32,jule::U32,jule::U32);
inline std::tuple<jule::U64,jule::U64> _1191c3b80_sub64(jule::U64,jule::U64,jule::U64);
inline std::tuple<jule::Uint,jule::Uint> _1191c3b80_mul(jule::Uint,jule::Uint);
inline std::tuple<jule::U32,jule::U32> _1191c3b80_mul32(jule::U32,jule::U32);
inline std::tuple<jule::U64,jule::U64> _1191c3b80_mul64(jule::U64,jule::U64);
inline std::tuple<jule::Uint,jule::Uint> _1191c3b80_div(jule::Uint,jule::Uint,jule::Uint);
inline std::tuple<jule::U32,jule::U32> _1191c3b80_div32(jule::U32,jule::U32,jule::U32);
inline std::tuple<jule::U64,jule::U64> _1191c3b80_div64(jule::U64,jule::U64,jule::U64);
inline jule::Uint _1191c3b80_rem(jule::Uint,jule::Uint,jule::Uint);
inline jule::U32 _1191c3b80_rem32(jule::U32,jule::U32,jule::U32);
inline jule::U64 _1191c3b80_rem64(jule::U64,jule::U64,jule::U64);
inline jule::F64 _1190966b0_atanh(jule::F64);
inline jule::U32 _119104140_f32_bits(jule::F32);
inline jule::F32 _119104140_f32_from_bits(jule::U32);
inline jule::U64 _119104140_f64_bits(jule::F64);
inline jule::F64 _119104140_f64_from_bits(jule::U64);
inline jule::F64 _119104730_cos(jule::F64);
inline jule::F64 _119104730_sin(jule::F64);
inline jule::F64 _11911b6e0_tan(jule::F64);
inline jule::F64 _1191228f0_mod(jule::F64,jule::F64);
inline std::tuple<jule::F64,jule::Int> _119106e10_frexp(jule::F64);
inline jule::F32 _11917cc70_nextafter32(jule::F32,jule::F32);
inline jule::F64 _11917cc70_nextafter(jule::F64,jule::F64);
inline jule::F64 _11918d9f0_copysign(jule::F64,jule::F64);
inline std::tuple<jule::U64,jule::F64> _1486fbd30_trig_reduce(jule::F64);
inline jule::F64 _1486fca80_atan2(jule::F64,jule::F64);
inline jule::F64 _1486fe210_floor(jule::F64);
inline jule::F64 _1486fe210_ceil(jule::F64);
inline jule::F64 _1486fe210_trunc(jule::F64);
inline jule::F64 _1486fe210_round(jule::F64);
inline jule::F64 _1486fe210_round_even(jule::F64);
inline jule::F64 _10862f890_nan(void);
inline jule::Bool _10862f890_is_nan(jule::F64);
inline jule::F64 _10862f890_inf(jule::Int);
inline jule::Bool _10862f890_is_inf(jule::F64,jule::Int);
inline std::tuple<jule::F64,jule::Int> _10862f890_normalize(jule::F64);
inline std::tuple<jule::F64,jule::F64> _108647e80_sincos(jule::F64);
inline jule::F64 _108648ff0_dim(jule::F64,jule::F64);
inline jule::F64 _108648ff0_max(jule::F64,jule::F64);
inline jule::F64 _108648ff0_min(jule::F64,jule::F64);
inline jule::F64 _108658370_log(jule::F64);
inline jule::F64 _108617560_expm1(jule::F64);
inline jule::F64 _1086895c0_abs(jule::F64);
inline jule::F64 _1086b1ee0_j1(jule::F64);
inline jule::F64 _1086b1ee0_y1(jule::F64);
inline jule::F64 _1086b1ee0_pone(jule::F64);
inline jule::F64 _1086b1ee0_qone(jule::F64);
inline jule::U64 _1486ffb20_zero(jule::U64);
inline jule::U64 _1486ffb20_nonzero(jule::U64);
inline std::tuple<jule::U64,jule::U64> _1486ffb20_shl(jule::U64,jule::U64,jule::Uint);
inline std::tuple<jule::U64,jule::U64> _1486ffb20_shr(jule::U64,jule::U64,jule::Uint);
inline std::tuple<jule::U64,jule::U64> _1486ffb20_shrcompress(jule::U64,jule::U64,jule::Uint);
inline jule::I32 _1486ffb20_lz(jule::U64,jule::U64);
inline std::tuple<jule::U32,jule::I32,jule::U64> _1486ffb20_split(jule::U64);
inline jule::F64 _1486ffb20_fma(jule::F64,jule::F64,jule::F64);
inline std::tuple<jule::F64,jule::F64> _14904ec70_modf(jule::F64);
inline jule::F64 _1490b9560_log10(jule::F64);
inline jule::F64 _1490b9560_log2(jule::F64);
inline jule::F64 _138639270_hypot(jule::F64,jule::F64);
inline jule::F64 _138643e40_j0(jule::F64);
inline jule::F64 _138643e40_y0(jule::F64);
inline jule::F64 _138643e40_pzero(jule::F64);
inline jule::F64 _138643e40_qzero(jule::F64);
inline jule::F64 _138643ab0_ldexp(jule::F64,jule::Int);
inline jule::Bool _138652150_signbit(jule::F64);
inline jule::F64 _1386c07c0_sinh(jule::F64);
inline jule::F64 _1386c07c0_cosh(jule::F64);
inline std::tuple<jule::F64,jule::Int> _1386c96d0_lgamma(jule::F64);
inline jule::F64 _1386c96d0_sin_pi(jule::F64);
inline jule::F64 _1386d8910_acosh(jule::F64);
inline jule::F64 _14876a3f0_tanh(jule::F64);
inline jule::F64 _148779ca0_cbrt(jule::F64);
inline jule::F64 _148759c30_pow(jule::F64,jule::F64);
inline jule::Bool _148759c30_is_odd_int(jule::F64);
inline jule::F64 _1487c7630_exp(jule::F64);
inline jule::F64 _1487c7630_exp2(jule::F64);
inline jule::F64 _1487c7630_expmulti(jule::F64,jule::F64,jule::Int);
inline jule::F64 _1487ee500_log1p(jule::F64);
inline std::tuple<jule::F64,jule::F64> _108735120_stirling(jule::F64);
inline jule::F64 _108735120_gamma(jule::F64);
inline jule::Bool _108735120_is_neg_int(jule::F64);
inline jule::F64 _10874c060_erfinv(jule::F64);
inline jule::F64 _10874c060_erfcinv(jule::F64);
inline jule::F64 _108736510_erf(jule::F64);
inline jule::F64 _108736510_erfc(jule::F64);
inline jule::F64 _108783040_pow10(jule::Int);
inline jule::F64 _1487c80f0_sqrt(jule::F64);
inline jule::F64 _1487c9240_logb(jule::F64);
inline jule::Int _1487c9240_ilogb(jule::F64);
inline jule::Int _1487c9240__ilogb(jule::F64);
inline jule::F64 _1487c8260_jn(jule::Int,jule::F64);
inline jule::F64 _1487c8260_yn(jule::Int,jule::F64);
inline jule::F64 _108930a10_remainder(jule::F64,jule::F64);
inline jule::F64 _108950f30_xatan(jule::F64);
inline jule::F64 _108950f30_satan(jule::F64);
inline jule::F64 _108950f30_atan(jule::F64);
inline jule::F64 _1191995a0_asin(jule::F64);
inline jule::F64 _1191995a0_acos(jule::F64);
inline jule::F64 _119199b00_asinh(jule::F64);
inline std::tuple<jule::Bool,jule::Int> _11863f260_conv_bool(jule::Str);
inline jule::Str _11863f260_fmt_bool(jule::Bool);
inline jule::Str _11863fd30_fmt_float(jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _11863fd30_generic_ftoa(jule::Slice<jule::U8>,jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _11863fd30_big_ftoa(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_11863fd30_FloatInfo&);
inline jule::Slice<jule::U8> _11863fd30_fmt_digits(jule::Slice<jule::U8>,jule::Bool,jule::Bool,_11863fd30_DecimalSlice,jule::Int,jule::U8);
inline void _11863fd30_round_shortest(_14873e050_Decimal&,jule::U64,jule::Int,_11863fd30_FloatInfo&);
inline jule::Slice<jule::U8> _11863fd30_fmt_e(jule::Slice<jule::U8>,jule::Bool,_11863fd30_DecimalSlice,jule::Int,jule::U8);
inline jule::Slice<jule::U8> _11863fd30_fmt_f(jule::Slice<jule::U8>,jule::Bool,_11863fd30_DecimalSlice,jule::Int);
inline jule::Slice<jule::U8> _11863fd30_fmt_b(jule::Slice<jule::U8>,jule::Bool,jule::U64,jule::Int,_11863fd30_FloatInfo&);
inline jule::Slice<jule::U8> _11863fd30_fmt_x(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_11863fd30_FloatInfo&);
inline jule::Int _11863fd30_min(jule::Int,jule::Int);
inline jule::Int _11863fd30_max(jule::Int,jule::Int);
inline jule::U8 _1186cfb10_lower(jule::U8);
inline std::tuple<jule::U64,jule::Int> _1186cfb10_parse_uint(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::I64,jule::Int> _1186cfb10_parse_int(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::F64,jule::Bool> _1186ed000_eisel_lemire64(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _1186ed000_eisel_lemire32(jule::U64,jule::Int,jule::Bool);
inline jule::Int _1186f6b70_common_prefix_len_ignore_case(jule::Str,jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Bool> _1186f6b70_special(jule::Str);
inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _1186f6b70_read_float(jule::Str);
inline std::tuple<jule::F64,jule::Bool> _1186f6b70_atof64_exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F64,jule::Bool> _1186f6b70_atof64exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _1186f6b70_atof32exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F64,jule::Int> _1186f6b70_atof_hex(jule::Str,_11863fd30_FloatInfo&,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline std::tuple<jule::F32,jule::Int,jule::Int> _1186f6b70_atof32(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _1186f6b70_atof64(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _1186f6b70_parse_float_prefix(jule::Str,jule::Int);
inline std::tuple<jule::F64,jule::Int> _1186f6b70_parse_float(jule::Str,jule::Int);
inline void _11864d0f0_ryu_ftoa_fixed32(_11863fd30_DecimalSlice&,jule::U32,jule::Int,jule::Int);
inline void _11864d0f0_ryu_ftoa_fixed64(_11863fd30_DecimalSlice&,jule::U64,jule::Int,jule::Int);
inline void _11864d0f0_format_decimal(_11863fd30_DecimalSlice&,jule::U64,jule::Bool,jule::Bool,jule::Int);
inline void _11864d0f0_ryu_ftoa_shortest(_11863fd30_DecimalSlice&,jule::U64,jule::Int,_11863fd30_FloatInfo&);
inline jule::Int _11864d0f0_mul_by_log2_log10(jule::Int);
inline jule::Int _11864d0f0_mul_by_log10_log2(jule::Int);
inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _11864d0f0_compute_bounds(jule::U64,jule::Int,_11863fd30_FloatInfo&);
inline void _11864d0f0_ryu_digits(_11863fd30_DecimalSlice&,jule::U64,jule::U64,jule::U64,jule::Bool,jule::Bool);
inline void _11864d0f0_ryu_digits32(_11863fd30_DecimalSlice&,jule::U32,jule::U32,jule::U32,jule::Bool,jule::Bool,jule::Int);
inline std::tuple<jule::U32,jule::Int,jule::Bool> _11864d0f0_mult64bit_pow10(jule::U32,jule::Int,jule::Int);
inline std::tuple<jule::U64,jule::Int,jule::Bool> _11864d0f0_mult128bit_pow10(jule::U64,jule::Int,jule::Int);
inline jule::Bool _11864d0f0_divisible_by_pow5(jule::U64,jule::Int);
inline std::tuple<jule::U32,jule::U32> _11864d0f0_divmod1e9(jule::U64);
inline jule::Int _14873e050_digit_zero(jule::Slice<jule::U8>);
inline void _14873e050_trim(_14873e050_Decimal&);
inline void _14873e050_right_shift(_14873e050_Decimal&,jule::Uint);
inline jule::Bool _14873e050_prefix_is_less_than(jule::Slice<jule::U8>,jule::Str);
inline void _14873e050_left_shift(_14873e050_Decimal&,jule::Uint);
inline jule::Bool _14873e050_should_round_up(_14873e050_Decimal&,jule::Int);
inline jule::Str _1486fb320_fmt_uint(jule::U64,jule::Int);
inline jule::Str _1486fb320_fmt_int(jule::I64,jule::Int);
inline jule::Str _1486fb320_itoa(jule::Int);
inline jule::Str _1486fb320_small(jule::Int);
inline jule::Bool _1486fb320_is_power_of_two(jule::Int);
inline std::tuple<jule::Slice<jule::U8>,jule::Str> _1486fb320_fmt_bits(jule::Slice<jule::U8>,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline void _10868c730_exit(jule::Int);
inline jule::Str _10868c730_executable(void);
inline jule::Bool _148682040_is_std_header_path(jule::Str);
inline jule::Bool _148682040_is_valid_header_ext(jule::Str);
inline jule::Bool _148682040_is_valid_cpp_ext(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _148637750_check_os(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _148637750_check_arch(jule::Str);
inline jule::Bool _148637750_is_pass_file_annotation(jule::Str);
inline jule::Str _1486379e0_logf(jule::Str,jule::Slice<jule::Any>);
inline jule::Str _1486379e0_arg_to_str(jule::Any);
inline jule::Int _1486379e0_find_next_fmt(jule::Str);
inline jule::Str _1486379e0_apply_fmt(jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _149036e70_is_top_directive(jule::Str);
inline jule::Bool _14903a5c0_is_windows(jule::Str);
inline jule::Bool _14903a5c0_is_darwin(jule::Str);
inline jule::Bool _14903a5c0_is_linux(jule::Str);
inline jule::Bool _14903a5c0_is_i386(jule::Str);
inline jule::Bool _14903a5c0_is_amd64(jule::Str);
inline jule::Bool _14903a5c0_is_arm64(jule::Str);
inline jule::Bool _14903a5c0_is_unix(jule::Str);
inline jule::Bool _14903a5c0_is_32bit(jule::Str);
inline jule::Bool _14903a5c0_is_64bit(jule::Str);
inline void _149048970_exit_err(jule::Str);
inline void _149048970_init(void);
inline jule::Bool _149036530_is_jule(jule::Str);
inline jule::Int _14877b170_get_last_fs_error(void);
inline std::tuple<jule::Ref<_1487caab0_File>,jule::Int> _14877cb80_open(jule::Str,jule::Int,jule::Int);
inline jule::Int _14877cb80_remove_file(jule::Str);
inline std::tuple<jule::Ref<_1487ca390_Status>,jule::Int> _148796140_stat(jule::Str);
inline std::tuple<jule::Slice<jule::U8>,jule::Int> _1487caab0_read_file(jule::Str);
inline std::tuple<jule::Slice<jule::Ref<_14877ba40_DirEntry>>,jule::Int> _1089dc920_read_dir(jule::Str);
inline jule::Int _1089dc920_create_dir(jule::Str);
inline jule::Int _1089dc920_remove_dir(jule::Str);
inline jule::Bool _103458e80_full_rune(jule::Slice<jule::U8>);
inline jule::Bool _103458e80_full_rune_str(jule::Str);
inline std::tuple<jule::I32,jule::Int> _103458e80_decode_rune(jule::Slice<jule::U8>);
inline std::tuple<jule::I32,jule::Int> _103458e80_decode_rune_str(jule::Str);
inline std::tuple<jule::I32,jule::Int> _103458e80_decode_last_rune(jule::Slice<jule::U8>);
inline std::tuple<jule::I32,jule::Int> _103458e80_decode_last_rune_str(jule::Str);
inline jule::Int _103458e80_rune_len(jule::I32);
inline jule::Int _103458e80_encode_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _103458e80_append_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _103458e80_append_rune_non_ascii(jule::Slice<jule::U8>,jule::I32);
inline jule::Int _103458e80_rune_count(jule::Slice<jule::U8>);
inline jule::Int _103458e80_rune_count_str(jule::Str);
inline jule::Bool _103458e80_rune_start(jule::U8);
inline jule::Bool _103458e80_valid(jule::Slice<jule::U8>);
inline jule::Bool _103458e80_valid_str(jule::Str);
inline jule::Bool _103458e80_valid_rune(jule::I32);
inline jule::Bool _108e15ff0_is_unary_op(jule::Str);
inline jule::Bool _108e15ff0_is_bin_op(jule::Str);
inline jule::Bool _108e15ff0_is_weak_op(jule::Str);
inline jule::Bool _108e15ff0_is_str(jule::Str);
inline jule::Bool _108e15ff0_is_raw_str(jule::Str);
inline jule::Bool _108e15ff0_is_rune(jule::Str);
inline jule::Bool _108e15ff0_is_nil(jule::Str);
inline jule::Bool _108e15ff0_is_bool(jule::Str);
inline jule::Bool _108e15ff0_contains_any(jule::Str,jule::Str);
inline jule::Bool _108e15ff0_is_float(jule::Str);
inline jule::Bool _108e15ff0_is_num(jule::Str);
inline jule::Bool _108e15ff0_is_lit(jule::Str);
inline jule::Bool _108e15ff0_is_ignore_ident(jule::Str);
inline jule::Bool _108e15ff0_is_anon_ident(jule::Str);
inline jule::Bool _108e15ff0_is_punct(jule::I32);
inline jule::Bool _108e15ff0_is_space(jule::I32);
inline jule::Bool _108e15ff0_is_letter(jule::I32);
inline jule::Bool _108e15ff0_is_ident_rune(jule::Str);
inline jule::Bool _108e15ff0_is_decimal(jule::U8);
inline jule::Bool _108e15ff0_is_binary(jule::U8);
inline jule::Bool _108e15ff0_is_octal(jule::U8);
inline jule::Bool _108e15ff0_is_hex(jule::U8);
inline jule::Bool _108e15ff0_is_assign(jule::Uint);
inline jule::Bool _108e15ff0_is_postfix_op(jule::Str);
inline jule::Bool _108e15ff0_is_assign_op(jule::Str);
inline jule::Ref<_108e58b50_File> _108e58b50_new_file_set(jule::Str);
inline _1486379e0_Log _108e171c0_make_err(jule::Int,jule::Int,jule::Ref<_108e58b50_File>,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _108e171c0_bytes_has_prefix(jule::Slice<jule::U8>,jule::Str);
inline jule::Str _108e171c0_float_fmt_e(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _108e171c0_float_fmt_p(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _108e171c0_float_fmt_dotnp(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _108e171c0_float_fmt_dotfp(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _108e171c0_float_fmt_dotp(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _108e171c0_float_num(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _108e171c0_common_num(jule::Slice<jule::U8>);
inline jule::Str _108e171c0_binary_num(jule::Slice<jule::U8>);
inline jule::Bool _108e171c0_is_float_fmt_e(jule::U8,jule::Int);
inline jule::Bool _108e171c0_is_float_fmt_p(jule::U8,jule::Int);
inline jule::Bool _108e171c0_is_float_fmt_dotnp(jule::Slice<jule::U8>,jule::Int);
inline jule::Bool _108e171c0_is_float_fmt_dotp(jule::Slice<jule::U8>,jule::Int);
inline jule::Bool _108e171c0_is_float_fmt_dotfp(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _108e171c0_octal_num(jule::Slice<jule::U8>);
inline jule::Str _108e171c0_hex_num(jule::Slice<jule::U8>);
inline jule::Str _108e171c0_hex_escape(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _108e171c0_big_unicode_point_escape(jule::Slice<jule::U8>);
inline jule::Str _108e171c0_little_unicode_point_escape(jule::Slice<jule::U8>);
inline jule::Str _108e171c0_hex_byte_escape(jule::Slice<jule::U8>);
inline jule::Str _108e171c0_byte_escape(jule::Slice<jule::U8>);
inline jule::Slice<_1486379e0_Log> _108e171c0_lex(jule::Ref<_108e58b50_File>);
inline jule::Ref<_1190cb490_FileInfo> _1190cb490_parse_file(jule::Ref<_108e58b50_File>);
inline jule::Ref<_1190cb490_PackageInfo> _1190cb490_parse_package(jule::Slice<jule::Ref<_108e58b50_File>>);
inline std::tuple<jule::Ref<_1487f02c0_Ast>,jule::Slice<_1486379e0_Log>> _1190cb490_parse_fileset(jule::Ref<_108e58b50_File>);
inline jule::Ref<_1487f5920_ScopeTree> _1190d5970_new_scope(void);
inline std::tuple<jule::Bool,jule::Bool> _1190d5970_is_st(_108e15ff0_Token,_108e15ff0_Token);
inline std::tuple<jule::Int,jule::Bool> _1190d5970_next_st_pos(jule::Slice<_108e15ff0_Token>,jule::Int);
inline std::tuple<jule::Slice<_108e15ff0_Token>,jule::Bool> _1190d5970_skip_st(jule::Int&,jule::Slice<_108e15ff0_Token>);
inline jule::Slice<jule::Ref<_1190d5970_Stmt>> _1190d5970_split_stms(jule::Slice<_108e15ff0_Token>);
inline jule::Slice<_108e15ff0_Token> _1190cb760_is_fn_call(jule::Slice<_108e15ff0_Token>);
inline jule::Ref<_1190cb760_CallData> _1190cb760_get_call_data(jule::Slice<_108e15ff0_Token>);
inline jule::Slice<_108e15ff0_Token> _1190cb760_get_block_expr(jule::Slice<_108e15ff0_Token>);
inline std::tuple<jule::Slice<_108e15ff0_Token>,jule::Slice<_108e15ff0_Token>> _1190cb760_split_colon(jule::Slice<_108e15ff0_Token>);
inline jule::Slice<_108e15ff0_Token> _1190cb760_eliminate_comments(jule::Slice<_108e15ff0_Token>);
inline jule::Int _1190cb760_find_lowest_prec_op(jule::Slice<_108e15ff0_Token>);
inline jule::Ref<_1487f5920_IdentExpr> _1190cb760_build_ident_expr(_108e15ff0_Token);
inline std::tuple<jule::Slice<_108e15ff0_Token>,jule::Int> _1190cb760_get_range_expr_tokens(jule::Slice<_108e15ff0_Token>);
inline jule::Bool _149043a20_check_assign_tokens(jule::Slice<_108e15ff0_Token>);
inline _1486379e0_Log _138657c70_make_err(jule::Int,jule::Int,jule::Ref<_108e58b50_File>,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<_108e15ff0_Token> _138657c70_range(jule::Int&,jule::Str,jule::Str,jule::Slice<_108e15ff0_Token>);
inline std::tuple<jule::Slice<_108e15ff0_Token>,jule::Slice<_108e15ff0_Token>> _138657c70_range_last(jule::Slice<_108e15ff0_Token>);
inline std::tuple<jule::Slice<jule::Slice<_108e15ff0_Token>>,jule::Slice<_1486379e0_Log>> _138657c70_parts(jule::Slice<_108e15ff0_Token>,jule::Uint,jule::Bool);
inline jule::Str _138657c70_get_close_kind_of_brace(jule::Str);
inline _1486379e0_Log _138657c70_compiler_err(_108e15ff0_Token,jule::Str,jule::Slice<jule::Any>);
inline void _138657c70_push_suggestion(_1486379e0_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Ref<_1487f5920_Comment> _138657c70_build_comment(_108e15ff0_Token);
inline jule::Str _138657c70_tokstoa(jule::Slice<_108e15ff0_Token>);
inline jule::Ref<_1487f5920_TypeDecl> _103796900_build_void_type(void);
inline jule::Ref<_1487f5920_TypeDecl> _103796900_build_prim_type(_108e15ff0_Token);
inline std::tuple<jule::Slice<_108e15ff0_Token>,jule::Int> _103796900_split_map_range(jule::Slice<_108e15ff0_Token>,jule::Int&);
inline void _104c409b0_lshift_unsig(_104c409b0_Const&,_104c409b0_Const&);
inline void _104c409b0_rshift_unsig(_104c409b0_Const&,_104c409b0_Const&);
inline jule::Bool _104c40680_check_bit(jule::Str,jule::Int,jule::Fn<jule::Bool(jule::Str,jule::Int,jule::Int)>);
inline jule::Str _104c40680_real_kind_of(jule::Str);
inline jule::Int _104c40680_bitsize_of(jule::Str);
inline jule::Str _104c40680_int_from_bits(jule::U64);
inline jule::Str _104c40680_uint_from_bits(jule::U64);
inline jule::Str _104c40680_float_from_bits(jule::U64);
inline jule::Bool _104c40680_check_bit_int(jule::Str,jule::Int);
inline jule::Bool _104c40680_check_bit_uint(jule::Str,jule::Int);
inline jule::Bool _104c40680_check_bit_float(jule::Str,jule::Int);
inline jule::U64 _104c40680_bitsize_of_float(jule::F64);
inline jule::U64 _104c40680_bitsize_of_int(jule::I64);
inline jule::U64 _104c40680_bitsize_of_uint(jule::U64);
inline jule::F64 _104c42960_min(jule::Str);
inline jule::F64 _104c42960_max(jule::Str);
inline jule::Bool _104cc26b0_is_i8_compatible(jule::Str);
inline jule::Bool _104cc26b0_is_i16_compatible(jule::Str);
inline jule::Bool _104cc26b0_is_i32_compatible(jule::Str);
inline jule::Bool _104cc26b0_is_i64_compatible(jule::Str);
inline jule::Bool _104cc26b0_is_u8_compatible(jule::Str);
inline jule::Bool _104cc26b0_is_u16_compatible(jule::Str);
inline jule::Bool _104cc26b0_is_u32_compatible(jule::Str);
inline jule::Bool _104cc26b0_is_u64_compatible(jule::Str);
inline jule::Bool _104cc26b0_is_f32_compatible(jule::Str);
inline jule::Bool _104cc26b0_is_f64_compatible(jule::Str);
inline jule::Bool _104cc26b0_types_are_compatible(jule::Str,jule::Str);
inline jule::Bool _104cc26b0_is_i16_greater(jule::Str);
inline jule::Bool _104cc26b0_is_i32_greater(jule::Str);
inline jule::Bool _104cc26b0_is_i64_greater(jule::Str);
inline jule::Bool _104cc26b0_is_u8_greater(jule::Str);
inline jule::Bool _104cc26b0_is_u16_greater(jule::Str);
inline jule::Bool _104cc26b0_is_u32_greater(jule::Str);
inline jule::Bool _104cc26b0_is_u64_greater(jule::Str);
inline jule::Bool _104cc26b0_is_f32_greater(jule::Str);
inline jule::Bool _104cc26b0_is_f64_greater(jule::Str);
inline jule::Bool _104cc26b0_is_greater(jule::Str,jule::Str);
inline jule::Bool _104c56790_is_sig_int(jule::Str);
inline jule::Bool _104c56790_is_unsig_int(jule::Str);
inline jule::Bool _104c56790_is_int(jule::Str);
inline jule::Bool _104c56790_is_float(jule::Str);
inline jule::Bool _104c56790_is_num(jule::Str);
inline jule::Bool _104c56790_is_sig_num(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _104dc5cd0_is_byte_lit(jule::Str);
inline jule::I32 _104dc5cd0_to_rune(jule::Slice<jule::U8>);
inline jule::Str _104dc5cd0_to_raw_str(jule::Slice<jule::U8>);
inline jule::Str _104dc5cd0_to_str(jule::Slice<jule::U8>);
inline std::tuple<jule::U8,jule::Bool> _104dc5cd0_try_btoa_common_esq(jule::Slice<jule::U8>);
inline jule::I32 _104dc5cd0_rune_from_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Str _104dc5cd0_str_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Str _1036da950_str_repeat(jule::Str,jule::Int);
inline jule::Str _1036da950_build_doc(jule::Ref<_1487f5920_CommentGroup>);
inline jule::Ref<_104a21a10_TypeSymbol> _1036da950_build_type(jule::Ref<_1487f5920_TypeDecl>);
inline jule::Ref<_1191dc300_Value> _1036da950_build_expr(jule::Ref<_1487f5920_Expr>);
inline jule::Ref<_104a21a10_TypeAlias> _1036da950_build_type_alias(jule::Ref<_1487f5920_TypeAliasDecl>);
inline jule::Ref<_1037370d0_Field> _1036da950_build_field(jule::Ref<_1487f5920_FieldDecl>);
inline jule::Slice<jule::Ref<_1037370d0_Field>> _1036da950_build_fields(jule::Slice<jule::Ref<_1487f5920_FieldDecl>>);
inline jule::Ref<_1037370d0_Struct> _1036da950_build_struct(jule::Ref<_1487f5920_StructDecl>);
inline jule::Ref<_1037649f0_Param> _1036da950_build_param(jule::Ref<_1487f5920_ParamDecl>);
inline jule::Slice<jule::Ref<_1037649f0_Param>> _1036da950_build_params(jule::Slice<jule::Ref<_1487f5920_ParamDecl>>);
inline jule::Ref<_1037649f0_RetType> _1036da950_build_ret_type(jule::Ref<_1487f5920_RetTypeDecl>);
inline jule::Ref<_1037649f0_Fn> _1036da950_build_fn(jule::Ref<_1487f5920_FnDecl>);
inline jule::Slice<jule::Ref<_1037649f0_Fn>> _1036da950_build_methods(jule::Slice<jule::Ref<_1487f5920_FnDecl>>);
inline jule::Ref<_1036e5da0_Trait> _1036da950_build_trait(jule::Ref<_1487f5920_TraitDecl>);
inline jule::Ref<_1036dad50_EnumItem> _1036da950_build_enum_item(jule::Ref<_1487f5920_EnumItemDecl>);
inline jule::Slice<jule::Ref<_1036dad50_EnumItem>> _1036da950_build_enum_items(jule::Slice<jule::Ref<_1487f5920_EnumItemDecl>>);
inline jule::Ref<_1036dad50_Enum> _1036da950_build_enum(jule::Ref<_1487f5920_EnumDecl>);
inline jule::Ref<_104598e40_Var> _1036da950_build_var(jule::Ref<_1487f5920_VarDecl>);
inline jule::Ref<_10417abf0_Impl> _1036da950_build_impl(jule::Ref<_1487f5920_Impl>);
inline jule::Ref<_104180810_ScopeChecker> _104180810_new_scope_checker_base(jule::Ref<_119177e90_Sema>,jule::Ref<_1037649f0_FnIns>);
inline jule::Ref<_104180810_ScopeChecker> _104180810_new_scope_checker(jule::Ref<_119177e90_Sema>,jule::Ref<_1037649f0_FnIns>);
inline jule::Ref<_104180810_ScopeLabel> _104180810_find_label_parent(jule::Str,jule::Ref<_104180810_ScopeChecker>);
inline jule::Int _104180810_count_match_type(jule::Ref<_104180810_Match>,jule::Ref<_104a21a10_TypeKind>);
inline jule::Slice<jule::Ref<_1191dc300_Data>> _104180810_get_datas_from_tuple_data(jule::Ref<_1191dc300_Data>);
inline jule::Slice<jule::Any> _104180810_get_expr_models(jule::Any);
inline jule::Bool _104180810_check_mut(jule::Ref<_119177e90_Sema>,jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);
inline jule::Bool _104180810_check_assign(jule::Ref<_119177e90_Sema>,jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>,_108e15ff0_Token);
inline jule::Bool _104180810_is_valid_ast_st_for_next_st(jule::Any);
inline jule::Bool _104180810_is_valid_st_for_next_st(jule::Any);
inline jule::Bool _104180810_st_is_def(jule::Any);
inline jule::Ref<_104598e40_Var> _119162660_find_var_in_package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>>,jule::Str,jule::Bool);
inline jule::Ref<_104a21a10_TypeAlias> _119162660_find_type_alias_in_package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>>,jule::Str,jule::Bool);
inline jule::Ref<_1037370d0_Struct> _119162660_find_struct_in_package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>>,jule::Str,jule::Bool);
inline jule::Ref<_1037649f0_Fn> _119162660_find_fn_in_package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>>,jule::Str,jule::Bool);
inline jule::Ref<_1036e5da0_Trait> _119162660_find_trait_in_package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>>,jule::Str);
inline jule::Ref<_1036dad50_Enum> _119162660_find_enum_in_package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>>,jule::Str);
inline _1486379e0_Log _119177e90_compiler_err(_108e15ff0_Token,jule::Bool,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _119177e90_imp_is_lookupable(jule::Ref<_119162660_ImportInfo>,jule::Str);
inline jule::Slice<jule::Ref<_104598e40_Var>> _119177e90_build_ret_vars(jule::Ref<_1037649f0_FnIns>);
inline jule::Slice<jule::Ref<_104598e40_Var>> _119177e90_build_param_vars(jule::Ref<_1037649f0_FnIns>);
inline jule::Slice<jule::Ref<_104a21a10_TypeAlias>> _119177e90_build_generic_type_aliases(jule::Ref<_1037649f0_FnIns>);
inline jule::Ref<_1191dcd40_SymbolTable> _119177e90_find_file(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>>,jule::Ref<_108e58b50_File>);
inline std::tuple<jule::Bool,jule::Bool> _119177e90_conditional_has_ret(jule::Ref<_104180810_Conditional>);
inline jule::Bool _119177e90_match_has_ret(jule::Ref<_104180810_Match>);
inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _119177e90___has_ret(jule::Ref<_104180810_Scope>);
inline jule::Bool _119177e90_has_ret(jule::Ref<_104180810_Scope>);
inline void _119177e90_push_suggestion(_1486379e0_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<jule::Ref<_104a21a10_TypeKind>> _1044463d0_get_fn_result_types(jule::Ref<_1037649f0_FnIns>);
inline jule::Bool _1044463d0_trait_has_reference_receiver(jule::Ref<_1036e5da0_Trait>);
inline jule::Bool _1044463d0_float_assignable(jule::Str,jule::Ref<_1191dc300_Data>);
inline jule::Bool _1044463d0_sig_assignable(jule::Str,jule::Ref<_1191dc300_Data>);
inline jule::Bool _1044463d0_unsig_assignable(jule::Str,jule::Ref<_1191dc300_Data>);
inline jule::Bool _1044463d0_int_assignable(jule::Str,jule::Ref<_1191dc300_Data>);
inline jule::Any _1191dc300_find_builtins_import(jule::Str,jule::Ref<_119162660_ImportInfo>);
inline jule::Any _1191dc300_find_builtins_sema(jule::Str,jule::Ref<_119177e90_Sema>);
inline jule::Bool _1191dc300_is_ok_for_shifting(jule::Ref<_1191dc300_Data>);
inline jule::Bool _1191dc300_is_instanced_struct(jule::Ref<_1037370d0_StructIns>);
inline void _1191dc300_normalize_bitsize(jule::Ref<_1191dc300_Data>);
inline void _1191dc300_normalize_type(jule::Ref<_1191dc300_Data>);
inline void _1191dc300_apply_cast_kind_model(jule::Ref<_1191dc300_Data>);
inline void _1191dc300_apply_cast_kind(jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _1191dc300_build_void_data(void);
inline jule::Str _1191dc300_kind_by_bitsize(jule::Any);
inline jule::Str _1191dc300_check_data_for_integer_indexing(jule::Ref<_1191dc300_Data>);
inline jule::Bool _104a21a10_can_get_ptr(jule::Ref<_1191dc300_Data>);
inline jule::Bool _104a21a10_is_lvalue(jule::Ref<_104a21a10_TypeKind>);
inline jule::Bool _104a21a10_is_mut(jule::Ref<_104a21a10_TypeKind>);
inline jule::Bool _104a21a10_supports_cloning(jule::Ref<_104a21a10_TypeKind>);
inline jule::Bool _104a21a10_is_nil_compatible(jule::Ref<_104a21a10_TypeKind>);
inline jule::Bool _104a21a10_is_valid_for_ref(jule::Ref<_104a21a10_TypeKind>);
inline jule::Bool _104a21a10_is_variadicable(jule::Ref<_104a21a10_TypeKind>);
inline jule::Str _104a21a10_build_link_path_by_tokens(jule::Slice<_108e15ff0_Token>);
inline jule::Ref<_104a21a10_Prim> _104a21a10_build_prim_type(jule::Str);
inline jule::Ref<_1037370d0_Struct> _104a21a10_get_struct_from_kind(jule::Ref<_104a21a10_TypeKind>);
inline jule::Bool _104a21a10_is_prim(jule::Str);
inline std::tuple<jule::Ref<_1191dcd40_SymbolTable>,jule::Slice<_1486379e0_Log>> _104aa02c0_build_symbols(jule::Ref<_1487f02c0_Ast>,jule::Trait<_119162660_Importer>,jule::Ref<_1036da950_SymbolBuilder>);
inline std::tuple<jule::Ref<_119162660_Package>,jule::Slice<_1486379e0_Log>> _104aa02c0___analyze_package(jule::Slice<jule::Ref<_1487f02c0_Ast>>,jule::Trait<_119162660_Importer>);
inline std::tuple<jule::Ref<_119162660_Package>,jule::Slice<_1486379e0_Log>> _104aa02c0_analyze_package(jule::Slice<jule::Ref<_1487f02c0_Ast>>,jule::Trait<_119162660_Importer>);
inline std::tuple<jule::Ref<_1191dcd40_SymbolTable>,jule::Slice<_1486379e0_Log>> _104aa02c0_analyze_file(jule::Ref<_1487f02c0_Ast>,jule::Trait<_119162660_Importer>);
inline void _104b4ffd0_init(void);
inline jule::Ref<_1037649f0_FnIns> _104b4ffd0_find_builtin_fn(jule::Str);
inline jule::Ref<_104a21a10_TypeAlias> _104b4ffd0_find_builtin_type_alias(jule::Str);
inline jule::Ref<_1036e5da0_Trait> _104b4ffd0_find_builtin_trait(jule::Str);
inline jule::Any _104b4ffd0_find_builtin_def(jule::Str);
inline jule::Any _104b4ffd0_find_builtin_def_std_mem(jule::Str);
inline jule::Any _104b4ffd0_find_package_builtin_def(jule::Str,jule::Str);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_common_plain(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_common(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_common_mut(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_out(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_outln(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_new(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_real(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_drop(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_panic(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_make(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_append(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_copy(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_recover(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_clone(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_std_mem_size_of(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_std_mem_align_of(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>);
inline jule::Bool _108dbe630_eval_directive_ident(jule::Str);
inline jule::Bool _108dbe630_eval_directive_part(jule::Str);
inline jule::Slice<jule::Str> _108dbe630_split_operans(jule::Str,jule::Str);
inline jule::Bool _108dbe630_eval_directive_expr(jule::Str);
inline void _108e075a0_set_os_flags(void);
inline void _108e075a0_set_arch_flags(void);
inline void _108e075a0_init(void);
inline void _108e14cb0_exit_err(jule::Str);
inline jule::Slice<jule::U8> _108e14cb0_read_buff(jule::Str);
inline _1486379e0_Log _108e14cb0_flat_compiler_err(jule::Str);
inline std::tuple<jule::Slice<jule::Ref<_14877ba40_DirEntry>>,jule::Str> _108e14cb0_read_package_dirents(jule::Str);
inline jule::Str _108e14cb0_concat_all_parts(jule::Slice<jule::Str>);
inline jule::Bool _108e14cb0_is_pass_build_directives(jule::Ref<_1487f02c0_Ast>&);
inline void _108db2720_push_passes(jule::Ref<_119162660_Package>,jule::Slice<jule::Str>&);
inline jule::Slice<jule::Str> _108db2720_get_all_unique_passes(jule::Ref<_119162660_Package>,jule::Slice<jule::Ref<_119162660_ImportInfo>>);
inline jule::Bool _1086aaa30_is_exist_0(jule::Slice<jule::Any>,jule::Ref<_1037649f0_FnIns>);
inline jule::Bool _1086aaa30_is_exist_1(jule::Slice<jule::Any>,jule::Ref<_104598e40_Var>);
inline jule::Bool _1086aaa30_is_exist_2(jule::Slice<jule::Any>,jule::Ref<_1037370d0_StructIns>);
inline jule::Bool _1086aaa30_is_exist_3(jule::Slice<jule::Any>,jule::Ref<_1036e5da0_Trait>);
inline jule::Bool _1086aaa30_is_exist_ref(jule::Slice<jule::Any>,jule::Any);
inline jule::Bool _1086aaa30_is_dead(jule::Any);
inline void _1086aaa30_drop_ref(jule::Slice<jule::Any>&,jule::Int);
inline jule::Bool _1086aaa30_is_all_references_are_dead_0(jule::Ref<_1036da950_ReferenceStack>);
inline jule::Bool _1086aaa30_is_all_references_are_dead_1(jule::Ref<_1036da950_ReferenceStack>);
inline jule::Bool _1086aaa30_is_all_references_are_dead_2(jule::Ref<_1036da950_ReferenceStack>);
inline jule::Bool _1086aaa30_is_fn_dead(jule::Ref<_1037649f0_FnIns>);
inline jule::Bool _1086aaa30_is_var_dead(jule::Ref<_104598e40_Var>);
inline jule::Bool _1086aaa30_kind_is_dead(jule::Ref<_104a21a10_TypeKind>);
inline jule::Bool _1086aaa30_is_any_generic_is_dead(jule::Slice<jule::Ref<_104a21a10_TypeKind>>&);
inline jule::Bool _1086aaa30_is_struct_dead(jule::Ref<_1037370d0_StructIns>);
inline jule::Bool _1086aaa30_is_trait_dead(jule::Ref<_1036e5da0_Trait>);
inline void _1086aaa30_eliminate_dead_functions(jule::Slice<jule::Ref<_1037649f0_Fn>>&);
inline void _1086aaa30_eliminate_dead_globals(jule::Ref<_119162660_Package>&);
inline void _1086aaa30_eliminate_dead_functions_package(jule::Ref<_119162660_Package>&);
inline void _1086aaa30_eliminate_dead_structs(jule::Ref<_119162660_Package>&);
inline void _1086aaa30_eliminate_dead_traits(jule::Ref<_119162660_Package>&);
inline void _1086aaa30_catch_alive_init(jule::Ref<_119162660_Package>&);
inline void _1086aaa30_eliminate_dead_code_package(jule::Ref<_119162660_Package>&);
inline void _1086aaa30_eliminate_dead_code(jule::Ref<_108db2720_IR>);
inline void _1086aad20_eliminate_dead_code_of_scope(jule::Ref<_104180810_Scope>);
inline void _104862e90_push_opt_level(jule::Int);
inline jule::Bool _104862e90_is_opt_enabled(jule::Str);
inline jule::Str _104e1b930_gen_if(jule::Ref<_104180810_If>);
inline jule::Str _104e1b930_gen_conditional(jule::Ref<_104180810_Conditional>);
inline jule::Str _104e1b930_gen_inf_iter(jule::Ref<_104180810_InfIter>);
inline jule::Str _104e1b930_gen_while_iter(jule::Ref<_104180810_WhileIter>);
inline jule::Trait<_104e1b930_RangeSetter> _104e1b930_get_range_setter(jule::Ref<_104180810_RangeIter>);
inline jule::Str _104e1b930_gen_range_iter(jule::Ref<_104180810_RangeIter>);
inline jule::Str _104e1b930_gen_cont(jule::Ref<_104180810_ContSt>);
inline jule::Str _104e1b930_gen_label(jule::Ref<_104180810_Label>);
inline jule::Str _104e1b930_gen_goto(jule::Ref<_104180810_GotoSt>);
inline jule::Str _104e1b930_gen_postfix(jule::Ref<_104180810_Postfix>);
inline jule::Str _104e1b930_gen_assign(jule::Ref<_104180810_Assign>);
inline jule::Str _104e1b930_gen_multi_assign(jule::Ref<_104180810_MultiAssign>);
inline jule::Str _104e1b930_gen_case(jule::Ref<_104180810_Match>,jule::Ref<_104180810_Case>);
inline jule::Str _104e1b930_gen_match(jule::Ref<_104180810_Match>);
inline jule::Str _104e1b930_gen_fall_st(jule::Ref<_104180810_FallSt>);
inline jule::Str _104e1b930_gen_break_st(jule::Ref<_104180810_BreakSt>);
inline jule::Str _104e1b930_gen_ret_vars(jule::Ref<_104180810_RetSt>);
inline jule::Str _104e1b930_gen_ret_expr_tuple(jule::Ref<_104180810_RetSt>);
inline jule::Str _104e1b930_gen_ret_expr(jule::Ref<_104180810_RetSt>);
inline jule::Str _104e1b930_gen_ret_st(jule::Ref<_104180810_RetSt>);
inline jule::Str _104e1b930_gen_ret_st_with_defaults(jule::Ref<_104a21a10_TypeKind>);
inline jule::Str _104e1b930_gen_recover(jule::Ref<_104180810_Recover>);
inline jule::Str _104e1b930_gen_data_expr(jule::Ref<_1191dc300_Data>);
inline jule::Str _104e1b930_gen_st(jule::Any);
inline jule::Str _104e1b930_gen_scope(jule::Ref<_104180810_Scope>);
inline jule::Str _104e1b930_gen_fn_scope(jule::Ref<_1037649f0_FnIns>);
inline jule::Str _104e1b930_gen_method_scope(jule::Ref<_1037649f0_FnIns>);
inline jule::Str _104ebd4a0_concat_all_parts(jule::Slice<jule::Str>);
inline jule::Str _104ebd4a0_get_accessor(jule::Ref<_104a21a10_TypeKind>);
inline jule::Str _104ebd4a0_decompose_common_esq(jule::U8);
inline jule::Str _104ebd4a0_sbtoa(jule::U8);
inline jule::Str _104ebd4a0_get_str_model(jule::Ref<_104c409b0_Const>);
inline jule::Str _104ebd4a0_get_bool_model(jule::Ref<_104c409b0_Const>);
inline jule::Str _104ebd4a0_get_nil_model(void);
inline jule::Str _104ebd4a0_gen_float_special_cases(jule::F64);
inline jule::Str _104ebd4a0_ftoa(jule::F64,jule::Int);
inline jule::Str _104ebd4a0_get_f32_model(jule::Ref<_104c409b0_Const>);
inline jule::Str _104ebd4a0_get_f64_model(jule::Ref<_104c409b0_Const>);
inline jule::Str _104ebd4a0_get_float_model(jule::Ref<_1191dc300_Data>);
inline jule::Str _104ebd4a0_i64toa(jule::I64);
inline jule::Str _104ebd4a0_get_i64_model(jule::Ref<_104c409b0_Const>);
inline jule::Str _104ebd4a0_u64toa(jule::U64);
inline jule::Str _104ebd4a0_get_u64_model(jule::Ref<_104c409b0_Const>);
inline jule::Str _104ebd4a0_gen_const_expr(jule::Ref<_1191dc300_Data>);
inline jule::Str _104ebd4a0_gen_const_expr_model(jule::Ref<_104c409b0_Const>);
inline jule::Str _104ebd4a0_gen_binop_expr_model(jule::Ref<_11911f320_BinopExprModel>);
inline jule::Str _104ebd4a0_gen_var_expr_model(jule::Ref<_104598e40_Var>);
inline jule::Str _104ebd4a0_gen_struct_expr_model(jule::Ref<_1037370d0_Struct>);
inline jule::Str _104ebd4a0_gen_struct_ins_expr_model(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _104ebd4a0_gen_unary_expr_model(jule::Ref<_11911f320_UnaryExprModel>);
inline jule::Str _104ebd4a0_gen_get_ref_ptr_expr_model(jule::Ref<_11911f320_GetRefPtrExprModel>);
inline jule::Str _104ebd4a0_gen_cpp_struct_lit_expr_model(jule::Ref<_11911f320_StructLitExprModel>);
inline jule::Str _104ebd4a0_gen_struct_lit_expr_model(jule::Ref<_11911f320_StructLitExprModel>);
inline jule::Str _104ebd4a0_gen_alloc_struct_lit_expr_model(jule::Ref<_11911f320_AllocStructLitExprModel>);
inline jule::Str _104ebd4a0_gen_casting_expr_model(jule::Ref<_11911f320_CastingExprModel>);
inline jule::Str _104ebd4a0_gen_arg_expr_models(jule::Slice<jule::Any>);
inline jule::Str _104ebd4a0_gen_fn_call_expr_model(jule::Ref<_11911f320_FnCallExprModel>);
inline jule::Str _104ebd4a0_gen_slice_expr_model(jule::Ref<_11911f320_SliceExprModel>);
inline jule::Str _104ebd4a0_gen_indexing_expr_model(jule::Ref<_11911f320_IndexigExprModel>);
inline jule::Str _104ebd4a0_gen_anon_fn_expr_model(jule::Ref<_11911f320_AnonFnExprModel>);
inline jule::Str _104ebd4a0_gen_map_expr_model(jule::Ref<_11911f320_MapExprModel>);
inline jule::Str _104ebd4a0_gen_slicing_expr_model(jule::Ref<_11911f320_SlicingExprModel>);
inline jule::Str _104ebd4a0_gen_trait_sub_ident_expr_model(jule::Ref<_11911f320_TraitSubIdentExprModel>);
inline jule::Str _104ebd4a0_gen_struct_sub_ident_expr_model(jule::Ref<_11911f320_StructSubIdentExprModel>);
inline jule::Str _104ebd4a0_gen_common_ident_expr_model(jule::Ref<_11911f320_CommonIdentExprModel>);
inline jule::Str _104ebd4a0_gen_common_sub_ident_expr_model(jule::Ref<_11911f320_CommonSubIdentExprModel>);
inline jule::Str _104ebd4a0_gen_array_expr_model(jule::Ref<_11911f320_ArrayExprModel>);
inline jule::Str _104ebd4a0_gen_fn_ins_expr_model(jule::Ref<_1037649f0_FnIns>);
inline jule::Str _104ebd4a0_gen_tuple_expr_model(jule::Ref<_11911f320_TupleExprModel>);
inline jule::Str _104ebd4a0_gen_builtin_new_call_expr_model(jule::Ref<_11911f320_BuiltinNewCallExprModel>);
inline jule::Str _104ebd4a0_gen_builtin_out_call_expr_model(jule::Ref<_11911f320_BuiltinOutCallExprModel>);
inline jule::Str _104ebd4a0_gen_builtin_outln_call_expr_model(jule::Ref<_11911f320_BuiltinOutlnCallExprModel>);
inline jule::Str _104ebd4a0_gen_builtin_real_call_expr_model(jule::Ref<_11911f320_BuiltinRealCallExprModel>);
inline jule::Str _104ebd4a0_gen_builtin_drop_call_expr_model(jule::Ref<_11911f320_BuiltinDropCallExprModel>);
inline jule::Str _104ebd4a0_gen_builtin_panic_call_expr_model(jule::Ref<_11911f320_BuiltinPanicCallExprModel>);
inline jule::Str _104ebd4a0_gen_builtin_make_call_expr_model(jule::Ref<_11911f320_BuiltinMakeCallExprModel>);
inline jule::Str _104ebd4a0_gen_builtin_append_call_expr_model_assign_opt(jule::Bool,jule::Str&,jule::Ref<_104a21a10_TypeKind>&,jule::Ref<_11911f320_SliceExprModel>&,jule::Ref<_11911f320_BuiltinAppendCallExprModel>&);
inline std::tuple<jule::Str,jule::Bool> _104ebd4a0_gen_builtin_append_call_expr_model_assign(jule::Any,jule::Ref<_11911f320_BuiltinAppendCallExprModel>);
inline jule::Str _104ebd4a0_gen_builtin_append_call_expr_model(jule::Ref<_11911f320_BuiltinAppendCallExprModel>);
inline jule::Str _104ebd4a0_gen_builtin_clone_call_expr_model(jule::Ref<_11911f320_BuiltinCloneCallExprModel>);
inline jule::Str _104ebd4a0_gen_sizeof_expr_model(jule::Ref<_11911f320_SizeofExprModel>);
inline jule::Str _104ebd4a0_gen_alignof_expr_model(jule::Ref<_11911f320_AlignofExprModel>);
inline jule::Str _104ebd4a0_gen_rune_expr_model(jule::Ref<_11911f320_RuneExprModel>);
inline jule::Str _104ebd4a0_gen_builtin_error_trait_sub_ident_expr_model(jule::Ref<_11911f320_BuiltinErrorTraitSubIdentExprModel>);
inline jule::Str _104ebd4a0_gen_explicit_deref_expr_model(jule::Ref<_11911f320_ExplicitDerefExprModel>);
inline jule::Str _104ebd4a0_gen_struct_static_ident_expr_model(jule::Ref<_11911f320_StructStaticIdentExprModel>);
inline jule::Str _104ebd4a0_gen_expr_model(jule::Any);
inline jule::Str _104ebd4a0_gen_expr(jule::Any);
inline jule::Str _104ebd4a0_gen_val(jule::Ref<_1191dc300_Value>);
inline jule::Str _104ebd4a0_get_init_expr(jule::Ref<_104a21a10_TypeKind>);
inline jule::Str _104f3f3d0_get_derive_fn_decl_clone(jule::Ref<_1037370d0_Struct>);
inline jule::Str _104f3f3d0_get_derive_fn_def_clone(jule::Ref<_1037370d0_Struct>);
inline jule::Str _104f406e0_as_ident(jule::Str);
inline jule::Str _104f406e0_as_jt(jule::Str);
inline jule::Str _104f406e0_get_ptr_as_ident(jule::Uintptr);
inline jule::Str _104f406e0_as_out_ident(jule::Str,jule::Uintptr);
inline jule::Str _104f406e0_as_local_ident(jule::Int,jule::Int,jule::Str);
inline jule::Str _104f406e0_fn_out_ident(jule::Ref<_1037649f0_Fn>);
inline jule::Str _104f406e0_fn_ins_out_ident(jule::Ref<_1037649f0_FnIns>);
inline jule::Str _104f406e0_trait_out_ident(jule::Ref<_1036e5da0_Trait>);
inline jule::Str _104f406e0_param_out_ident(jule::Ref<_1037649f0_Param>);
inline jule::Str _104f406e0_struct_out_ident(jule::Ref<_1037370d0_Struct>);
inline jule::Str _104f406e0_struct_ins_out_ident(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _104f406e0_field_out_ident(jule::Ref<_1037370d0_Field>);
inline jule::Str _104f406e0_var_out_ident(jule::Ref<_104598e40_Var>);
inline jule::Str _104f406e0_iter_begin_label_ident(jule::Uintptr);
inline jule::Str _104f406e0_iter_end_label_ident(jule::Uintptr);
inline jule::Str _104f406e0_iter_next_label_ident(jule::Uintptr);
inline jule::Str _104f406e0_label_ident(jule::Str);
inline jule::Str _104f406e0_match_end_label_ident(jule::Uintptr);
inline jule::Str _104f406e0_case_begin_label_ident(jule::Uintptr);
inline jule::Str _104f406e0_case_end_label_ident(jule::Uintptr);
inline jule::Bool _104f69330_any_equals_0(jule::Ref<_104598e40_Var>&,jule::Any&);
inline jule::Bool _104f69330_any_equals_1(jule::Ref<_1037370d0_FieldIns>&,jule::Any&);
inline jule::Ref<_1487f5920_Directive> _104f69330_find_directive(jule::Slice<jule::Ref<_1487f5920_Directive>>,jule::Str);
inline jule::Bool _104f69330_has_directive(jule::Slice<jule::Ref<_1487f5920_Directive>>,jule::Str);
inline jule::Str _104f69330_gen_prim_kind(jule::Ref<_104a21a10_Prim>);
inline jule::Str _104f69330_gen_tuple_kind(jule::Ref<_104a21a10_Tuple>);
inline jule::Str _104f69330_as_ref_kind(jule::Str);
inline jule::Str _104f69330_gen_ref_kind(jule::Ref<_104a21a10_Ref>);
inline jule::Str _104f69330_gen_ptr_kind(jule::Ref<_104a21a10_Ptr>);
inline jule::Str _104f69330_gen_enum_kind(jule::Ref<_1036dad50_Enum>);
inline jule::Str _104f69330_as_slice_kind(jule::Ref<_104a21a10_TypeKind>);
inline jule::Str _104f69330_gen_slice_kind(jule::Ref<_104a21a10_Slc>);
inline jule::Str _104f69330_gen_map_kind(jule::Ref<_104a21a10_Map>);
inline jule::Str _104f69330_gen_trait_kind_from_ident(jule::Str);
inline jule::Str _104f69330_gen_trait_kind(jule::Ref<_1036e5da0_Trait>);
inline jule::Str _104f69330_gen_struct_kind(jule::Ref<_1037370d0_Struct>);
inline jule::Str _104f69330_gen_struct_kind_ins(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _104f69330_gen_array_kind(jule::Ref<_104a21a10_Arr>);
inline jule::Str _104f69330_gen_fn_anon_decl(jule::Ref<_1037649f0_FnIns>);
inline jule::Str _104f69330_gen_fn_kind(jule::Ref<_1037649f0_FnIns>);
inline jule::Str _104f69330_gen_type_kind(jule::Ref<_104a21a10_TypeKind>);
inline void _1190c5fe0_add_indent(void);
inline void _1190c5fe0_done_indent(void);
inline jule::Str _1190c5fe0_indent(void);
inline jule::Bool _1190c5fe0_is_cpp_header_file(jule::Str);
inline jule::Str _1190c5fe0_gen_links(jule::Ref<_108db2720_IR>);
inline jule::Str _1190c5fe0_gen_fn_result(jule::Ref<_1037649f0_Fn>);
inline jule::Str _1190c5fe0_gen_fn_ins_result(jule::Ref<_1037649f0_FnIns>);
inline jule::Str _1190c5fe0_gen_param_prototype(jule::Ref<_1037649f0_Param>);
inline jule::Str _1190c5fe0_gen_param_ins(jule::Ref<_1037649f0_ParamIns>);
inline jule::Str _1190c5fe0_gen_param_ins_prototype(jule::Ref<_1037649f0_ParamIns>);
inline jule::Str _1190c5fe0_gen_param(jule::Ref<_1037649f0_Param>);
inline jule::Str _1190c5fe0_gen_params(jule::Slice<jule::Ref<_1037649f0_Param>>);
inline jule::Str _1190c5fe0_gen_params_ins(jule::Slice<jule::Ref<_1037649f0_ParamIns>>);
inline jule::Str _1190c5fe0_gen_params_prototypes(jule::Slice<jule::Ref<_1037649f0_ParamIns>>);
inline jule::Str _1190c5fe0_gen_trait(jule::Ref<_1036e5da0_Trait>);
inline jule::Str _1190c5fe0_gen_traits_tbl(jule::Ref<_1191dcd40_SymbolTable>);
inline jule::Str _1190c5fe0_gen_traits_pkg(jule::Ref<_119162660_Package>);
inline jule::Str _1190c5fe0_gen_traits(jule::Ref<_108db2720_IR>);
inline jule::Str _1190c5fe0_gen_trait_prototype(jule::Ref<_1036e5da0_Trait>);
inline jule::Str _1190c5fe0_gen_trait_prototypes(jule::Ref<_119162660_Package>);
inline jule::Str _1190c5fe0_gen_struct_plain_prototype(jule::Ref<_1037370d0_Struct>);
inline jule::Str _1190c5fe0_gen_struct_plain_prototypes(jule::Slice<jule::Ref<_1037370d0_Struct>>);
inline jule::Str _1190c5fe0_gen_struct_traits(jule::Ref<_1037370d0_Struct>);
inline jule::Str _1190c5fe0_gen_field_decl(jule::Ref<_1037370d0_FieldIns>);
inline jule::Str _1190c5fe0_gen_struct_self_field_type_kind(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _1190c5fe0_gen_struct_self_field(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _1190c5fe0_gen_struct_self_field_init_st(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _1190c5fe0_gen_struct_constructor(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _1190c5fe0_gen_struct_destructor(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _1190c5fe0_gen_struct_operators(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _1190c5fe0_gen_struct_derive_defs_prototypes(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _1190c5fe0_gen_struct_ins_prototype(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _1190c5fe0_gen_struct_prototype(jule::Ref<_1037370d0_Struct>);
inline jule::Str _1190c5fe0_gen_struct_prototypes(jule::Slice<jule::Ref<_1037370d0_Struct>>);
inline jule::Str _1190c5fe0_gen_fn_decl_head(jule::Ref<_1037649f0_FnIns>,jule::Bool);
inline jule::Str _1190c5fe0_gen_fn_prototype(jule::Ref<_1037649f0_Fn>,jule::Bool);
inline jule::Str _1190c5fe0_gen_fn_prototypes(jule::Ref<_119162660_Package>);
inline jule::Str _1190c5fe0_gen_prototypes(jule::Ref<_108db2720_IR>,jule::Slice<jule::Ref<_1037370d0_Struct>>);
inline jule::Str _1190c5fe0_gen_var_init_expr(jule::Ref<_104598e40_Var>,jule::Str);
inline jule::Str _1190c5fe0_gen_var(jule::Ref<_104598e40_Var>);
inline jule::Str _1190c5fe0_gen_globals(jule::Slice<jule::Ref<_104598e40_Var>>);
inline jule::Str _1190c5fe0_gen_fn(jule::Ref<_1037649f0_Fn>);
inline jule::Str _1190c5fe0_gen_pkg_fns(jule::Ref<_119162660_Package>);
inline jule::Str _1190c5fe0_gen_struct_method_defs(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _1190c5fe0_gen_struct_ostream(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _1190c5fe0_gen_struct_derive_defs(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _1190c5fe0_gen_struct_ins(jule::Ref<_1037370d0_StructIns>);
inline jule::Str _1190c5fe0_gen_struct(jule::Ref<_1037370d0_Struct>);
inline jule::Str _1190c5fe0_gen_structs(jule::Slice<jule::Ref<_1037370d0_Struct>>);
inline jule::Str _1190c5fe0_gen_fns(jule::Ref<_108db2720_IR>);
inline void _1190c5fe0_push_init(jule::Ref<_119162660_Package>,jule::Str&);
inline jule::Str _1190c5fe0_gen_init_caller(jule::Ref<_108db2720_IR>);
inline void _1190c5fe0_append_standard(jule::Str&,jule::Str,jule::Str);
inline jule::Str _1190c5fe0_gen(jule::Ref<_108db2720_IR>);
inline jule::Bool _1035fedb0_is_struct_ordered(jule::Slice<jule::Ref<_1037370d0_Struct>>,jule::Ref<_1037370d0_Struct>);
inline void _1035fedb0_order_structures(jule::Slice<jule::Ref<_1037370d0_Struct>>);
inline jule::Bool _1035fedb0_is_var_ordered(jule::Slice<jule::Ref<_104598e40_Var>>,jule::Ref<_104598e40_Var>);
inline void _1035fedb0_order_variables(jule::Slice<jule::Ref<_104598e40_Var>>);
inline jule::Str _1486094f0_str_repeat(jule::Str,jule::Int);
inline void _1486094f0_print_error_message(jule::Str);
inline void _1486094f0_help(void);
inline void _1486094f0_version(void);
inline void _1486094f0_tool_distos(void);
inline void _1486094f0_tool_distarch(void);
inline void _1486094f0_tool(void);
inline void _1486094f0_julenv(void);
inline jule::Bool _1486094f0_process_command(void);
inline void _1486094f0_init(void);
inline void _1486094f0_exit_err(jule::Str);
void entry_point(void);
inline jule::Int _1486242d0_system(jule::Str);
inline std::tuple<jule::Str,jule::Str> _1486242d0_get_option(jule::Slice<jule::Str>,jule::Int&);
inline jule::Str _1486242d0_get_option_value(jule::Slice<jule::Str>,jule::Int&);
inline void _1486242d0_parse_out_option(jule::Slice<jule::Str>,jule::Int&);
inline void _1486242d0_parse_opt_option(jule::Slice<jule::Str>,jule::Int&);
inline void _1486242d0_check_target_arch(jule::Str);
inline void _1486242d0_check_target_os(jule::Str);
inline void _1486242d0_parse_target_option(jule::Slice<jule::Str>,jule::Int&);
inline void _1486242d0_parse_compiler_option(jule::Slice<jule::Str>,jule::Int&);
inline jule::Str _1486242d0_parse_options(jule::Slice<jule::Str>);
inline void _1486242d0_write_output(jule::Str,jule::Str);
inline void _1486242d0_clear_objects(void);
inline void _1486242d0_compile_ir(jule::Str,jule::Str);
inline void _1486242d0_do_spell(jule::Str,jule::Str,jule::Str);
inline void _1486242d0_check_mode(void);
inline void _1486242d0_check_compiler(void);
inline void _1486242d0_set(void);
inline void _1486242d0_print_logs(jule::Slice<_1486379e0_Log>&);
inline jule::Bool _1486242d0_is_cpp_source_file(jule::Str);
inline std::tuple<jule::Str,jule::Str> _1486242d0_gen_compile_cmd(jule::Str,jule::Ref<_108db2720_IR>);
inline jule::Str _1486242d0_get_compile_path(void);
inline void _1486242d0_apply_target_independent_optimizations(jule::Ref<_108db2720_IR>);
inline void _1486242d0_compile_command(void);


static jule::Array<jule::Array<jule::Str,2>,4> _1486094f0_HELP_MAP = jule::Array<jule::Array<jule::Str,2>,4>({jule::Array<jule::Str,2>({jule::Str("help", 4),jule::Str("Show help", 9)}),jule::Array<jule::Str,2>({jule::Str("version", 7),jule::Str("Show version", 12)}),jule::Array<jule::Str,2>({jule::Str("tool", 4),jule::Str("Tools for effective Jule", 24)}),jule::Array<jule::Str,2>({jule::Str("julenv", 6),jule::Str("Show information about native jule environment", 46)})});
static jule::Str _1486242d0_COMPILER = jule::Str("", 0);
static jule::Str _1486242d0_COMPILER_PATH = jule::Str("", 0);
static jule::Str _1486242d0_OUT_DIR = jule::Str("dist", 4);
static jule::Int _1486242d0_MODE = 0LLU;
static jule::Str _1486242d0_OUT_NAME = jule::Str("ir.cpp", 6);
static jule::Str _1486242d0_OUT = jule::Str("", 0);
static jule::Str _1486242d0_CPP_STD = jule::Str("c++17", 5);
static jule::Uintptr _1490d0f50_STDIN = 0LLU;
static jule::Uintptr _1490d0f50_STDOUT = 1LLU;
static jule::Uintptr _1490d0f50_STDERR = 2LLU;
static jule::Slice<jule::Str> _1490c0580_ARGS = nullptr;
static jule::Slice<jule::Str> _1490c0580_ENV = nullptr;
static jule::Array<jule::U8,32> _1191c3b80_DE_BRUIJN32_TAB = jule::Array<jule::U8,32>({0LLU,1LLU,28LLU,2LLU,29LLU,14LLU,24LLU,3LLU,30LLU,22LLU,20LLU,15LLU,25LLU,17LLU,4LLU,8LLU,31LLU,27LLU,13LLU,23LLU,21LLU,19LLU,16LLU,7LLU,26LLU,12LLU,18LLU,6LLU,11LLU,5LLU,10LLU,9LLU});
static jule::Array<jule::U8,64> _1191c3b80_DE_BRUIJN64_TAB = jule::Array<jule::U8,64>({0LLU,1LLU,56LLU,2LLU,57LLU,49LLU,28LLU,3LLU,61LLU,58LLU,42LLU,50LLU,38LLU,29LLU,17LLU,4LLU,62LLU,47LLU,59LLU,36LLU,45LLU,43LLU,51LLU,22LLU,53LLU,39LLU,33LLU,30LLU,24LLU,18LLU,12LLU,5LLU,63LLU,55LLU,48LLU,27LLU,60LLU,41LLU,37LLU,16LLU,46LLU,35LLU,44LLU,21LLU,52LLU,32LLU,23LLU,11LLU,54LLU,26LLU,40LLU,15LLU,34LLU,20LLU,31LLU,10LLU,25LLU,14LLU,19LLU,9LLU,13LLU,8LLU,7LLU,6LLU});
static jule::Trait<jule::Error> _108d53590_OVERFLOW_ERROR = jule::new_struct<_108d53590_bits_error>(new( std::nothrow ) _108d53590_bits_error(jule::Str("integer overflow", 16)));
static jule::Trait<jule::Error> _108d53590_DIVIDE_ERROR = jule::new_struct<_108d53590_bits_error>(new( std::nothrow ) _108d53590_bits_error(jule::Str("integer divide by zero", 22)));
static jule::Array<jule::F64,6> _119104730__SIN = jule::Array<jule::F64,6>({0.00000000015896230157654656,-0.000000025050747762857807,0.0000027557313621385722,-0.0001984126982958954,0.008333333333322118,-0.1666666666666663});
static jule::Array<jule::F64,6> _119104730__COS = jule::Array<jule::F64,6>({-0.000000000011358536521387682,0.000000002087570084197473,-0.0000002755731417929674,0.000024801587288851704,-0.0013888888888873056,0.041666666666666595});
static jule::Array<jule::F64,3> _11911b6e0__TAN_P = jule::Array<jule::F64,3>({-13093.693918138379,1153516.6483858742,-17956525.197648488});
static jule::Array<jule::F64,5> _11911b6e0__TAN_Q = jule::Array<jule::F64,5>({1LL,13681.296347069296,-1320892.3444021097,25008380.18233579,-53869575.592945464});
static jule::Array<jule::U64,20> _1486fbd30_M_PI4 = jule::Array<jule::U64,20>({1LLU,5040379952546458195LLU,17892431488136887169LLU,13169980181085364355LLU,18204331823439776451LLU,7946843935494350272LLU,905889640498799673LLU,18175356263134875261LLU,15061281708168349961LLU,15220161563773041794LLU,8296664548579374057LLU,4109744767560208502LLU,4607516669194743839LLU,16023283104648321598LLU,15739233654134936430LLU,11424645774684705882LLU,16883842788696515318LLU,8795094592981902804LLU,15561835991111744016LLU,12395701187267450711LLU});
static jule::Array<jule::F64,6> _1086b1ee0_P_1R8 = jule::Array<jule::F64,6>({0LL,0.11718749999998865,13.239480659307358,412.05185430737856,3874.7453891396053,7914.479540318917});
static jule::Array<jule::F64,5> _1086b1ee0_P_1S8 = jule::Array<jule::F64,5>({114.20737037567841,3650.9308342085346,36956.206026903346,97602.79359349508,30804.27206278888});
static jule::Array<jule::F64,6> _1086b1ee0_P_1R5 = jule::Array<jule::F64,6>({0.000000000013199051955624352,0.1171874931906141,6.802751278684329,108.30818299018911,517.6361395331998,528.7152013633375});
static jule::Array<jule::F64,5> _1086b1ee0_P_1S5 = jule::Array<jule::F64,5>({59.28059872211313,991.4014187336144,5353.26695291488,7844.690317495512,1504.0468881036106});
static jule::Array<jule::F64,6> _1086b1ee0_P_1R3 = jule::Array<jule::F64,6>({0.000000003025039161373736,0.11718686556725359,3.9329775003331564,35.11940355916369,91.05501107507813,48.55906851973649});
static jule::Array<jule::F64,5> _1086b1ee0_P_1S3 = jule::Array<jule::F64,5>({34.79130950012515,336.76245874782575,1046.8713997577513,890.8113463982564,103.78793243963928});
static jule::Array<jule::F64,6> _1086b1ee0_P_1R2 = jule::Array<jule::F64,6>({0.00000010771083010687374,0.11717621946268335,2.368514966676088,12.242610914826123,17.693971127168773,5.073523125888185});
static jule::Array<jule::F64,5> _1086b1ee0_P_1S2 = jule::Array<jule::F64,5>({21.43648593638214,125.29022716840275,232.2764690571628,117.6793732871471,8.364638933716183});
static jule::Array<jule::F64,6> _1086b1ee0_Q_1R8 = jule::Array<jule::F64,6>({0LL,-0.10253906249999271,-16.271753454459,-759.6017225139501,-11849.806670242959,-48438.512428575035});
static jule::Array<jule::F64,6> _1086b1ee0_Q_1S8 = jule::Array<jule::F64,6>({161.3953697007229,7825.385999233485,133875.33628724958,719657.7236832409,666601.2326177764,-294490.26430383464});
static jule::Array<jule::F64,6> _1086b1ee0_Q_1R5 = jule::Array<jule::F64,6>({-0.00000000002089799311417641,-0.10253905024137543,-8.05644828123936,-183.66960747488838,-1373.1937606550816,-2612.4444045321566});
static jule::Array<jule::F64,6> _1086b1ee0_Q_1S5 = jule::Array<jule::F64,6>({81.27655013843358,1991.7987346048596,17468.48519249089,49851.42709103523,27948.075163891812,-4719.183547951285});
static jule::Array<jule::F64,6> _1086b1ee0_Q_1R3 = jule::Array<jule::F64,6>({-0.000000005078312264617666,-0.10253782982083709,-4.610115811394734,-57.847221656278364,-228.2445407376317,-219.21012847890933});
static jule::Array<jule::F64,6> _1086b1ee0_Q_1S3 = jule::Array<jule::F64,6>({47.66515503237295,673.8651126766997,3380.1528667952634,5547.729097207228,1903.119193388108,-135.20119144430734});
static jule::Array<jule::F64,6> _1086b1ee0_Q_1R2 = jule::Array<jule::F64,6>({-0.00000017838172751095887,-0.10251704260798555,-2.7522056827818746,-19.663616264370372,-42.32531333728305,-21.371921170370406});
static jule::Array<jule::F64,6> _1086b1ee0_Q_1S2 = jule::Array<jule::F64,6>({29.533362906052385,252.98154998219053,757.5028348686454,739.3932053204672,155.94900333666612,-4.959498988226282});
static jule::Array<jule::F64,6> _138643e40_P_0R8 = jule::Array<jule::F64,6>({0LL,-0.07031249999999004,-8.081670412753498,-257.06310567970485,-2485.216410094288,-5253.043804907295});
static jule::Array<jule::F64,5> _138643e40_P_0S8 = jule::Array<jule::F64,5>({116.53436461966818,3833.7447536412183,40597.857264847255,116752.97256437592,47627.728414673096});
static jule::Array<jule::F64,6> _138643e40_P_0R5 = jule::Array<jule::F64,6>({-0.00000000001141254646918945,-0.07031249408735993,-4.159610644705878,-67.67476522651673,-331.23129964917297,-346.4333883656049});
static jule::Array<jule::F64,5> _138643e40_P_0S5 = jule::Array<jule::F64,5>({60.753938269230034,1051.2523059570458,5978.970943338558,9625.445143577745,2406.058159229391});
static jule::Array<jule::F64,6> _138643e40_P_0R3 = jule::Array<jule::F64,6>({-0.000000002547046017719519,-0.07031196163814817,-2.409032215495296,-21.96597747348831,-58.07917047017376,-31.44794705948885});
static jule::Array<jule::F64,5> _138643e40_P_0S3 = jule::Array<jule::F64,5>({35.85603380552097,361.51398305030386,1193.6078379211153,1127.9967985690741,173.58093081333575});
static jule::Array<jule::F64,6> _138643e40_P_0R2 = jule::Array<jule::F64,6>({-0.00000008875343330325264,-0.07030309954836247,-1.4507384678095299,-7.635696138235278,-11.193166886035675,-3.2336457935133534});
static jule::Array<jule::F64,5> _138643e40_P_0S2 = jule::Array<jule::F64,5>({22.22029975320888,136.2067942182152,270.4702786580835,153.87539420832033,14.65761769482562});
static jule::Array<jule::F64,6> _138643e40_Q_0R8 = jule::Array<jule::F64,6>({0LL,0.0732421874999935,11.76820646822527,557.6733802564019,8859.197207564686,37014.62677768878});
static jule::Array<jule::F64,6> _138643e40_Q_0S8 = jule::Array<jule::F64,6>({163.77602689568982,8098.344946564498,142538.29141912048,803309.2571195144,840501.5798190605,-343899.2935378666});
static jule::Array<jule::F64,6> _138643e40_Q_0R5 = jule::Array<jule::F64,6>({0.000000000018408596359451553,0.07324217666126848,5.8356350896205695,135.11157728644983,1027.243765961641,1989.9778586460538});
static jule::Array<jule::F64,6> _138643e40_Q_0S5 = jule::Array<jule::F64,6>({82.77661022365378,2077.81416421393,18847.28877857181,56751.11228949473,35976.75384251145,-5354.342756019448});
static jule::Array<jule::F64,6> _138643e40_Q_0R3 = jule::Array<jule::F64,6>({0.000000004377410140897386,0.07324111800429114,3.344231375161707,42.621844074541265,170.8080913405656,166.73394869665117});
static jule::Array<jule::F64,6> _138643e40_Q_0S3 = jule::Array<jule::F64,6>({48.75887297245872,709.689221056606,3704.1482262011136,6460.425167525689,2516.3336892036896,-149.2474518361564});
static jule::Array<jule::F64,6> _138643e40_Q_0R2 = jule::Array<jule::F64,6>({0.00000015044444488698327,0.07322342659630793,1.99819174093816,14.495602934788574,31.666231750478154,16.252707571092927});
static jule::Array<jule::F64,6> _138643e40_Q_0S2 = jule::Array<jule::F64,6>({30.36558483552192,269.34811860804984,844.7837575953201,882.9358451124886,212.66638851179883,-5.3109549388266695});
static jule::Array<jule::F64,12> _1386c96d0__LGAM_A = jule::Array<jule::F64,12>({0.07721566490153287,0.3224670334241136,0.06735230105312927,0.020580808432516733,0.007385550860814029,0.0028905138367341563,0.0011927076318336207,0.0005100697921535113,0.00022086279071390839,0.00010801156724758394,0.000025214456545125733,0.000044864094961891516});
static jule::Array<jule::F64,7> _1386c96d0__LGAM_R = jule::Array<jule::F64,7>({1LL,1.3920053346762105,0.7219355475671381,0.17193386563280308,0.01864591917156529,0.0007779424963818936,0.000007326684307446256});
static jule::Array<jule::F64,7> _1386c96d0__LGAM_S = jule::Array<jule::F64,7>({-0.07721566490153287,0.21498241596060885,0.325778796408931,0.14635047265246445,0.02664227030336386,0.0018402845140733772,0.00003194753265841009});
static jule::Array<jule::F64,15> _1386c96d0__LGAM_T = jule::Array<jule::F64,15>({0.48383612272381005,-0.1475877229945939,0.06462494023913339,-0.032788541075985965,0.01797067508118204,-0.010314224129834144,0.006100538702462913,-0.0036845201678113826,0.0022596478090061247,-0.0014034646998923284,0.000881081882437654,-0.0005385953053567405,0.00031563207090362595,-0.00031275416837512086,0.0003355291926355191});
static jule::Array<jule::F64,6> _1386c96d0__LGAM_U = jule::Array<jule::F64,6>({-0.07721566490153287,0.6328270640250934,1.4549225013723477,0.9777175279633727,0.22896372806469245,0.013381091853678766});
static jule::Array<jule::F64,6> _1386c96d0__LGAM_V = jule::Array<jule::F64,6>({1LL,2.4559779371304113,2.128489763798934,0.7692851504566728,0.10422264559336913,0.003217092422824239});
static jule::Array<jule::F64,7> _1386c96d0__LGAM_W = jule::Array<jule::F64,7>({0.4189385332046727,0.08333333333333297,-0.0027777777772877554,0.0007936505586430196,-0.00059518755745034,0.0008363399189962821,-0.0016309293409657527});
static jule::Array<jule::F64,3> _14876a3f0_TANH_P = jule::Array<jule::F64,3>({-0.9643991794250523,-99.28772310019185,-1614.6876844170845});
static jule::Array<jule::F64,3> _14876a3f0_TANH_Q = jule::Array<jule::F64,3>({112.81167849163293,2235.4883906010045,4844.063053251255});
static jule::Array<jule::F64,7> _108735120__GAM_P = jule::Array<jule::F64,7>({0.00016011952247675185,0.0011913514700658638,0.010421379756176158,0.04763678004571372,0.20744822764843598,0.4942148268014971,1LL});
static jule::Array<jule::F64,8> _108735120__GAM_Q = jule::Array<jule::F64,8>({-0.000023158187332412014,0.0005396055804933034,-0.004456419138517973,0.011813978522206043,0.035823639860549865,-0.23459179571824335,0.0714304917030273,1LL});
static jule::Array<jule::F64,5> _108735120__GAM_S = jule::Array<jule::F64,5>({0.0007873113957930937,-0.00022954996161337813,-0.0026813261780578124,0.0034722222160545866,0.08333333333334822});
static jule::Array<jule::F64,32> _108783040_POW10_TAB = jule::Array<jule::F64,32>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL,1000000000000000000LL,10000000000000000000LLU,100000000000000000000.0,1000000000000000000000.0,10000000000000000000000.0,100000000000000000000000.0,1000000000000000000000000.0,10000000000000000000000000.0,100000000000000000000000000.0,1000000000000000000000000000.0,10000000000000000000000000000.0,100000000000000000000000000000.0,1000000000000000000000000000000.0,10000000000000000000000000000000.0});
static jule::Array<jule::F64,10> _108783040_POW10_POSTAB32 = jule::Array<jule::F64,10>({1LL,100000000000000000000000000000000.0,10000000000000000000000000000000000000000000000000000000000000000.0,1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0});
static jule::Array<jule::F64,11> _108783040_POW10_NEGTAB32 = jule::Array<jule::F64,11>({1LL,0.00000000000000000000000000000001,0.0000000000000000000000000000000000000000000000000000000000000001,0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001});
static _11863fd30_FloatInfo _11863fd30_F32_INFO = _11863fd30_FloatInfo(23LLU,8LLU,-127LL);
static _11863fd30_FloatInfo _11863fd30_F64_INFO = _11863fd30_FloatInfo(52LLU,11LLU,-1023LL);
static jule::Array<jule::Array<jule::U64,2>,696> _1186ed000_DETAILED_POWS_OF_TEN = jule::Array<jule::Array<jule::U64,2>,696>({jule::Array<jule::U64,2>({1671618768450675795LLU,18054884314459144840LLU}),jule::Array<jule::U64,2>({1044761730281672372LLU,11284302696536965525LLU}),jule::Array<jule::U64,2>({5917638181279478369LLU,14105378370671206906LLU}),jule::Array<jule::U64,2>({16620419763454123769LLU,17631722963339008632LLU}),jule::Array<jule::U64,2>({10387762352158827356LLU,11019826852086880395LLU}),jule::Array<jule::U64,2>({8373016921771146291LLU,13774783565108600494LLU}),jule::Array<jule::U64,2>({1242899115359157055LLU,17218479456385750618LLU}),jule::Array<jule::U64,2>({5388497965526861063LLU,10761549660241094136LLU}),jule::Array<jule::U64,2>({6735622456908576329LLU,13451937075301367670LLU}),jule::Array<jule::U64,2>({17642900107990496220LLU,16814921344126709587LLU}),jule::Array<jule::U64,2>({8720969558280366185LLU,10509325840079193492LLU}),jule::Array<jule::U64,2>({10901211947850457732LLU,13136657300098991865LLU}),jule::Array<jule::U64,2>({18238200953240460069LLU,16420821625123739831LLU}),jule::Array<jule::U64,2>({18316404623416369399LLU,10263013515702337394LLU}),jule::Array<jule::U64,2>({13672133742415685941LLU,12828766894627921743LLU}),jule::Array<jule::U64,2>({12478481159592219522LLU,16035958618284902179LLU}),jule::Array<jule::U64,2>({5493207715531443249LLU,10022474136428063862LLU}),jule::Array<jule::U64,2>({16089881681269079869LLU,12528092670535079827LLU}),jule::Array<jule::U64,2>({15500666083158961933LLU,15660115838168849784LLU}),jule::Array<jule::U64,2>({9687916301974351208LLU,9787572398855531115LLU}),jule::Array<jule::U64,2>({7498209359040551106LLU,12234465498569413894LLU}),jule::Array<jule::U64,2>({149389661945913074LLU,15293081873211767368LLU}),jule::Array<jule::U64,2>({93368538716195671LLU,9558176170757354605LLU}),jule::Array<jule::U64,2>({4728396691822632493LLU,11947720213446693256LLU}),jule::Array<jule::U64,2>({5910495864778290617LLU,14934650266808366570LLU}),jule::Array<jule::U64,2>({8305745933913819539LLU,9334156416755229106LLU}),jule::Array<jule::U64,2>({1158810380537498616LLU,11667695520944036383LLU}),jule::Array<jule::U64,2>({15283571030954036982LLU,14584619401180045478LLU}),jule::Array<jule::U64,2>({9881091751837770420LLU,18230774251475056848LLU}),jule::Array<jule::U64,2>({6175682344898606512LLU,11394233907171910530LLU}),jule::Array<jule::U64,2>({16942974967978033949LLU,14242792383964888162LLU}),jule::Array<jule::U64,2>({11955346673117766628LLU,17803490479956110203LLU}),jule::Array<jule::U64,2>({5166248661484910190LLU,11127181549972568877LLU}),jule::Array<jule::U64,2>({11069496845283525642LLU,13908976937465711096LLU}),jule::Array<jule::U64,2>({13836871056604407053LLU,17386221171832138870LLU}),jule::Array<jule::U64,2>({4036358391950366504LLU,10866388232395086794LLU}),jule::Array<jule::U64,2>({14268820026792733938LLU,13582985290493858492LLU}),jule::Array<jule::U64,2>({17836025033490917422LLU,16978731613117323115LLU}),jule::Array<jule::U64,2>({8841672636718129437LLU,10611707258198326947LLU}),jule::Array<jule::U64,2>({6440404777470273892LLU,13264634072747908684LLU}),jule::Array<jule::U64,2>({8050505971837842365LLU,16580792590934885855LLU}),jule::Array<jule::U64,2>({11949095260039733334LLU,10362995369334303659LLU}),jule::Array<jule::U64,2>({10324683056622278764LLU,12953744211667879574LLU}),jule::Array<jule::U64,2>({3682481783923072647LLU,16192180264584849468LLU}),jule::Array<jule::U64,2>({11524923151806696212LLU,10120112665365530917LLU}),jule::Array<jule::U64,2>({571095884476206553LLU,12650140831706913647LLU}),jule::Array<jule::U64,2>({14548927910877421904LLU,15812676039633642058LLU}),jule::Array<jule::U64,2>({13704765962725776594LLU,9882922524771026286LLU}),jule::Array<jule::U64,2>({7907585416552444934LLU,12353653155963782858LLU}),jule::Array<jule::U64,2>({661109733835780360LLU,15442066444954728573LLU}),jule::Array<jule::U64,2>({2719036592861056677LLU,9651291528096705358LLU}),jule::Array<jule::U64,2>({12622167777931096654LLU,12064114410120881697LLU}),jule::Array<jule::U64,2>({1942651667131707105LLU,15080143012651102122LLU}),jule::Array<jule::U64,2>({5825843310384704845LLU,9425089382906938826LLU}),jule::Array<jule::U64,2>({16505676174835656864LLU,11781361728633673532LLU}),jule::Array<jule::U64,2>({2185351144835019464LLU,14726702160792091916LLU}),jule::Array<jule::U64,2>({2731688931043774330LLU,18408377700990114895LLU}),jule::Array<jule::U64,2>({8624834609543440812LLU,11505236063118821809LLU}),jule::Array<jule::U64,2>({15392729280356688919LLU,14381545078898527261LLU}),jule::Array<jule::U64,2>({5405853545163697437LLU,17976931348623159077LLU}),jule::Array<jule::U64,2>({5684501474941004850LLU,11235582092889474423LLU}),jule::Array<jule::U64,2>({2493940825248868159LLU,14044477616111843029LLU}),jule::Array<jule::U64,2>({7729112049988473103LLU,17555597020139803786LLU}),jule::Array<jule::U64,2>({9442381049670183593LLU,10972248137587377366LLU}),jule::Array<jule::U64,2>({2579604275232953683LLU,13715310171984221708LLU}),jule::Array<jule::U64,2>({3224505344041192104LLU,17144137714980277135LLU}),jule::Array<jule::U64,2>({8932844867666826921LLU,10715086071862673209LLU}),jule::Array<jule::U64,2>({15777742103010921555LLU,13393857589828341511LLU}),jule::Array<jule::U64,2>({15110491610336264040LLU,16742321987285426889LLU}),jule::Array<jule::U64,2>({2526528228819083169LLU,10463951242053391806LLU}),jule::Array<jule::U64,2>({12381532322878629770LLU,13079939052566739757LLU}),jule::Array<jule::U64,2>({1641857348316123500LLU,16349923815708424697LLU}),jule::Array<jule::U64,2>({12555375888766046947LLU,10218702384817765435LLU}),jule::Array<jule::U64,2>({11082533842530170780LLU,12773377981022206794LLU}),jule::Array<jule::U64,2>({4629795266307937667LLU,15966722476277758493LLU}),jule::Array<jule::U64,2>({5199465050656154994LLU,9979201547673599058LLU}),jule::Array<jule::U64,2>({15722703350174969551LLU,12474001934591998822LLU}),jule::Array<jule::U64,2>({10430007150863936130LLU,15592502418239998528LLU}),jule::Array<jule::U64,2>({6518754469289960081LLU,9745314011399999080LLU}),jule::Array<jule::U64,2>({8148443086612450102LLU,12181642514249998850LLU}),jule::Array<jule::U64,2>({962181821410786819LLU,15227053142812498563LLU}),jule::Array<jule::U64,2>({16742264702877599426LLU,9516908214257811601LLU}),jule::Array<jule::U64,2>({7092772823314835570LLU,11896135267822264502LLU}),jule::Array<jule::U64,2>({18089338065998320271LLU,14870169084777830627LLU}),jule::Array<jule::U64,2>({8999993282035256217LLU,9293855677986144142LLU}),jule::Array<jule::U64,2>({2026619565689294464LLU,11617319597482680178LLU}),jule::Array<jule::U64,2>({11756646493966393888LLU,14521649496853350222LLU}),jule::Array<jule::U64,2>({5472436080603216552LLU,18152061871066687778LLU}),jule::Array<jule::U64,2>({8031958568804398249LLU,11345038669416679861LLU}),jule::Array<jule::U64,2>({14651634229432885715LLU,14181298336770849826LLU}),jule::Array<jule::U64,2>({9091170749936331336LLU,17726622920963562283LLU}),jule::Array<jule::U64,2>({3376138709496513133LLU,11079139325602226427LLU}),jule::Array<jule::U64,2>({18055231442152805128LLU,13848924157002783033LLU}),jule::Array<jule::U64,2>({8733981247408842698LLU,17311155196253478792LLU}),jule::Array<jule::U64,2>({5458738279630526686LLU,10819471997658424245LLU}),jule::Array<jule::U64,2>({11435108867965546262LLU,13524339997073030306LLU}),jule::Array<jule::U64,2>({5070514048102157020LLU,16905424996341287883LLU}),jule::Array<jule::U64,2>({863228270850154185LLU,10565890622713304927LLU}),jule::Array<jule::U64,2>({14914093393844856443LLU,13207363278391631158LLU}),jule::Array<jule::U64,2>({9419244705451294746LLU,16509204097989538948LLU}),jule::Array<jule::U64,2>({15110399977761835024LLU,10318252561243461842LLU}),jule::Array<jule::U64,2>({9664627935347517973LLU,12897815701554327303LLU}),jule::Array<jule::U64,2>({7469098900757009562LLU,16122269626942909129LLU}),jule::Array<jule::U64,2>({16197401859041600736LLU,10076418516839318205LLU}),jule::Array<jule::U64,2>({6411694268519837208LLU,12595523146049147757LLU}),jule::Array<jule::U64,2>({12626303854077184414LLU,15744403932561434696LLU}),jule::Array<jule::U64,2>({7891439908798240259LLU,9840252457850896685LLU}),jule::Array<jule::U64,2>({14475985904425188227LLU,12300315572313620856LLU}),jule::Array<jule::U64,2>({18094982380531485284LLU,15375394465392026070LLU}),jule::Array<jule::U64,2>({6697677969404790399LLU,9609621540870016294LLU}),jule::Array<jule::U64,2>({17595469498610763806LLU,12012026926087520367LLU}),jule::Array<jule::U64,2>({17382650854836066854LLU,15015033657609400459LLU}),jule::Array<jule::U64,2>({8558313775058847832LLU,9384396036005875287LLU}),jule::Array<jule::U64,2>({6086206200396171886LLU,11730495045007344109LLU}),jule::Array<jule::U64,2>({12219443768922602761LLU,14663118806259180136LLU}),jule::Array<jule::U64,2>({15274304711153253452LLU,18328898507823975170LLU}),jule::Array<jule::U64,2>({14158126462898171311LLU,11455561567389984481LLU}),jule::Array<jule::U64,2>({3862600023340550427LLU,14319451959237480602LLU}),jule::Array<jule::U64,2>({14051622066030463842LLU,17899314949046850752LLU}),jule::Array<jule::U64,2>({8782263791269039901LLU,11187071843154281720LLU}),jule::Array<jule::U64,2>({10977829739086299876LLU,13983839803942852150LLU}),jule::Array<jule::U64,2>({4498915137003099037LLU,17479799754928565188LLU}),jule::Array<jule::U64,2>({12035193997481712706LLU,10924874846830353242LLU}),jule::Array<jule::U64,2>({5820620459997365075LLU,13656093558537941553LLU}),jule::Array<jule::U64,2>({11887461593424094248LLU,17070116948172426941LLU}),jule::Array<jule::U64,2>({9735506505103752857LLU,10668823092607766838LLU}),jule::Array<jule::U64,2>({2946011094524915263LLU,13336028865759708548LLU}),jule::Array<jule::U64,2>({3682513868156144079LLU,16670036082199635685LLU}),jule::Array<jule::U64,2>({4607414176811284001LLU,10418772551374772303LLU}),jule::Array<jule::U64,2>({1147581702586717097LLU,13023465689218465379LLU}),jule::Array<jule::U64,2>({15269535183515560084LLU,16279332111523081723LLU}),jule::Array<jule::U64,2>({7237616480483531100LLU,10174582569701926077LLU}),jule::Array<jule::U64,2>({13658706619031801779LLU,12718228212127407596LLU}),jule::Array<jule::U64,2>({17073383273789752224LLU,15897785265159259495LLU}),jule::Array<jule::U64,2>({17588393573759676996LLU,9936115790724537184LLU}),jule::Array<jule::U64,2>({3538747893490044629LLU,12420144738405671481LLU}),jule::Array<jule::U64,2>({9035120885289943691LLU,15525180923007089351LLU}),jule::Array<jule::U64,2>({12564479580947296663LLU,9703238076879430844LLU}),jule::Array<jule::U64,2>({15705599476184120828LLU,12129047596099288555LLU}),jule::Array<jule::U64,2>({15020313326802763131LLU,15161309495124110694LLU}),jule::Array<jule::U64,2>({4776009810824339053LLU,9475818434452569184LLU}),jule::Array<jule::U64,2>({5970012263530423816LLU,11844773043065711480LLU}),jule::Array<jule::U64,2>({7462515329413029771LLU,14805966303832139350LLU}),jule::Array<jule::U64,2>({52386062455755702LLU,9253728939895087094LLU}),jule::Array<jule::U64,2>({9288854614924470436LLU,11567161174868858867LLU}),jule::Array<jule::U64,2>({6999382250228200141LLU,14458951468586073584LLU}),jule::Array<jule::U64,2>({8749227812785250177LLU,18073689335732591980LLU}),jule::Array<jule::U64,2>({14691639419845557168LLU,11296055834832869987LLU}),jule::Array<jule::U64,2>({13752863256379558556LLU,14120069793541087484LLU}),jule::Array<jule::U64,2>({17191079070474448196LLU,17650087241926359355LLU}),jule::Array<jule::U64,2>({8438581409832836170LLU,11031304526203974597LLU}),jule::Array<jule::U64,2>({15159912780718433117LLU,13789130657754968246LLU}),jule::Array<jule::U64,2>({9726518939043265588LLU,17236413322193710308LLU}),jule::Array<jule::U64,2>({15302446373756816800LLU,10772758326371068942LLU}),jule::Array<jule::U64,2>({9904685930341245193LLU,13465947907963836178LLU}),jule::Array<jule::U64,2>({3157485376071780683LLU,16832434884954795223LLU}),jule::Array<jule::U64,2>({8890957387685944783LLU,10520271803096747014LLU}),jule::Array<jule::U64,2>({1890324697752655170LLU,13150339753870933768LLU}),jule::Array<jule::U64,2>({2362905872190818963LLU,16437924692338667210LLU}),jule::Array<jule::U64,2>({6088502188546649756LLU,10273702932711667006LLU}),jule::Array<jule::U64,2>({16833999772538088003LLU,12842128665889583757LLU}),jule::Array<jule::U64,2>({7207441660390446292LLU,16052660832361979697LLU}),jule::Array<jule::U64,2>({16033866083812498692LLU,10032913020226237310LLU}),jule::Array<jule::U64,2>({10818960567910847557LLU,12541141275282796638LLU}),jule::Array<jule::U64,2>({4300328673033783639LLU,15676426594103495798LLU}),jule::Array<jule::U64,2>({16522763475928278486LLU,9797766621314684873LLU}),jule::Array<jule::U64,2>({6818396289628184396LLU,12247208276643356092LLU}),jule::Array<jule::U64,2>({8522995362035230495LLU,15309010345804195115LLU}),jule::Array<jule::U64,2>({3021029092058325107LLU,9568131466127621947LLU}),jule::Array<jule::U64,2>({17611344420355070096LLU,11960164332659527433LLU}),jule::Array<jule::U64,2>({8179122470161673908LLU,14950205415824409292LLU}),jule::Array<jule::U64,2>({14335323580705822000LLU,9343878384890255807LLU}),jule::Array<jule::U64,2>({13307468457454889596LLU,11679847981112819759LLU}),jule::Array<jule::U64,2>({12022649553391224092LLU,14599809976391024699LLU}),jule::Array<jule::U64,2>({10416625923311642211LLU,18249762470488780874LLU}),jule::Array<jule::U64,2>({11122077220497164286LLU,11406101544055488046LLU}),jule::Array<jule::U64,2>({4679224488766679549LLU,14257626930069360058LLU}),jule::Array<jule::U64,2>({15072402647813125244LLU,17822033662586700072LLU}),jule::Array<jule::U64,2>({9420251654883203278LLU,11138771039116687545LLU}),jule::Array<jule::U64,2>({16387000587031392001LLU,13923463798895859431LLU}),jule::Array<jule::U64,2>({15872064715361852097LLU,17404329748619824289LLU}),jule::Array<jule::U64,2>({3002511419460075705LLU,10877706092887390181LLU}),jule::Array<jule::U64,2>({8364825292752482535LLU,13597132616109237726LLU}),jule::Array<jule::U64,2>({1232659579085827361LLU,16996415770136547158LLU}),jule::Array<jule::U64,2>({14605470292210805812LLU,10622759856335341973LLU}),jule::Array<jule::U64,2>({4421779809981343554LLU,13278449820419177467LLU}),jule::Array<jule::U64,2>({915538744049291538LLU,16598062275523971834LLU}),jule::Array<jule::U64,2>({5183897733458195115LLU,10373788922202482396LLU}),jule::Array<jule::U64,2>({6479872166822743894LLU,12967236152753102995LLU}),jule::Array<jule::U64,2>({3488154190101041964LLU,16209045190941378744LLU}),jule::Array<jule::U64,2>({2180096368813151227LLU,10130653244338361715LLU}),jule::Array<jule::U64,2>({16560178516298602746LLU,12663316555422952143LLU}),jule::Array<jule::U64,2>({16088537126945865529LLU,15829145694278690179LLU}),jule::Array<jule::U64,2>({7749492695127472003LLU,9893216058924181362LLU}),jule::Array<jule::U64,2>({463493832054564196LLU,12366520073655226703LLU}),jule::Array<jule::U64,2>({14414425345350368957LLU,15458150092069033378LLU}),jule::Array<jule::U64,2>({13620701859271368502LLU,9661343807543145861LLU}),jule::Array<jule::U64,2>({3190819268807046916LLU,12076679759428932327LLU}),jule::Array<jule::U64,2>({17823582141290972357LLU,15095849699286165408LLU}),jule::Array<jule::U64,2>({11139738838306857723LLU,9434906062053853380LLU}),jule::Array<jule::U64,2>({13924673547883572154LLU,11793632577567316725LLU}),jule::Array<jule::U64,2>({3570783879572301480LLU,14742040721959145907LLU}),jule::Array<jule::U64,2>({18298537904747540562LLU,18427550902448932383LLU}),jule::Array<jule::U64,2>({18354115218108294707LLU,11517219314030582739LLU}),jule::Array<jule::U64,2>({18330958004207980480LLU,14396524142538228424LLU}),jule::Array<jule::U64,2>({4466953431550423984LLU,17995655178172785531LLU}),jule::Array<jule::U64,2>({486002885505321038LLU,11247284486357990957LLU}),jule::Array<jule::U64,2>({5219189625309039202LLU,14059105607947488696LLU}),jule::Array<jule::U64,2>({6523987031636299002LLU,17573882009934360870LLU}),jule::Array<jule::U64,2>({17912549950054850588LLU,10983676256208975543LLU}),jule::Array<jule::U64,2>({17779001419141175331LLU,13729595320261219429LLU}),jule::Array<jule::U64,2>({8388693718644305452LLU,17161994150326524287LLU}),jule::Array<jule::U64,2>({12160462601793772764LLU,10726246343954077679LLU}),jule::Array<jule::U64,2>({10588892233814828051LLU,13407807929942597099LLU}),jule::Array<jule::U64,2>({8624429273841147159LLU,16759759912428246374LLU}),jule::Array<jule::U64,2>({778582277723329070LLU,10474849945267653984LLU}),jule::Array<jule::U64,2>({973227847154161338LLU,13093562431584567480LLU}),jule::Array<jule::U64,2>({1216534808942701673LLU,16366953039480709350LLU}),jule::Array<jule::U64,2>({14595392310871352257LLU,10229345649675443343LLU}),jule::Array<jule::U64,2>({13632554370161802418LLU,12786682062094304179LLU}),jule::Array<jule::U64,2>({12429006944274865118LLU,15983352577617880224LLU}),jule::Array<jule::U64,2>({7768129340171790699LLU,9989595361011175140LLU}),jule::Array<jule::U64,2>({9710161675214738374LLU,12486994201263968925LLU}),jule::Array<jule::U64,2>({16749388112445810871LLU,15608742751579961156LLU}),jule::Array<jule::U64,2>({1244995533423855986LLU,9755464219737475723LLU}),jule::Array<jule::U64,2>({15391302472061983695LLU,12194330274671844653LLU}),jule::Array<jule::U64,2>({5404070034795315907LLU,15242912843339805817LLU}),jule::Array<jule::U64,2>({14906758817815542202LLU,9526820527087378635LLU}),jule::Array<jule::U64,2>({14021762503842039848LLU,11908525658859223294LLU}),jule::Array<jule::U64,2>({8303831092947774002LLU,14885657073574029118LLU}),jule::Array<jule::U64,2>({578208414664970847LLU,9303535670983768199LLU}),jule::Array<jule::U64,2>({14557818573613377271LLU,11629419588729710248LLU}),jule::Array<jule::U64,2>({18197273217016721589LLU,14536774485912137810LLU}),jule::Array<jule::U64,2>({13523219484416126178LLU,18170968107390172263LLU}),jule::Array<jule::U64,2>({15369541205401160717LLU,11356855067118857664LLU}),jule::Array<jule::U64,2>({765182433041899281LLU,14196068833898572081LLU}),jule::Array<jule::U64,2>({5568164059729762005LLU,17745086042373215101LLU}),jule::Array<jule::U64,2>({5785945546544795205LLU,11090678776483259438LLU}),jule::Array<jule::U64,2>({16455803970035769814LLU,13863348470604074297LLU}),jule::Array<jule::U64,2>({6734696907262548556LLU,17329185588255092872LLU}),jule::Array<jule::U64,2>({4209185567039092847LLU,10830740992659433045LLU}),jule::Array<jule::U64,2>({9873167977226253963LLU,13538426240824291306LLU}),jule::Array<jule::U64,2>({3118087934678041646LLU,16923032801030364133LLU}),jule::Array<jule::U64,2>({4254647968387469981LLU,10576895500643977583LLU}),jule::Array<jule::U64,2>({706623942056949572LLU,13221119375804971979LLU}),jule::Array<jule::U64,2>({14718337982853350677LLU,16526399219756214973LLU}),jule::Array<jule::U64,2>({11504804248497038125LLU,10328999512347634358LLU}),jule::Array<jule::U64,2>({5157633273766521849LLU,12911249390434542948LLU}),jule::Array<jule::U64,2>({6447041592208152311LLU,16139061738043178685LLU}),jule::Array<jule::U64,2>({6335244004343789146LLU,10086913586276986678LLU}),jule::Array<jule::U64,2>({17142427042284512241LLU,12608641982846233347LLU}),jule::Array<jule::U64,2>({16816347784428252397LLU,15760802478557791684LLU}),jule::Array<jule::U64,2>({1286845328412881940LLU,9850501549098619803LLU}),jule::Array<jule::U64,2>({15443614715798266137LLU,12313126936373274753LLU}),jule::Array<jule::U64,2>({5469460339465668959LLU,15391408670466593442LLU}),jule::Array<jule::U64,2>({8030098730593431003LLU,9619630419041620901LLU}),jule::Array<jule::U64,2>({14649309431669176658LLU,12024538023802026126LLU}),jule::Array<jule::U64,2>({9088264752731695015LLU,15030672529752532658LLU}),jule::Array<jule::U64,2>({10291851488884697288LLU,9394170331095332911LLU}),jule::Array<jule::U64,2>({8253128342678483706LLU,11742712913869166139LLU}),jule::Array<jule::U64,2>({5704724409920716729LLU,14678391142336457674LLU}),jule::Array<jule::U64,2>({16354277549255671720LLU,18347988927920572092LLU}),jule::Array<jule::U64,2>({998051431430019017LLU,11467493079950357558LLU}),jule::Array<jule::U64,2>({10470936326142299579LLU,14334366349937946947LLU}),jule::Array<jule::U64,2>({8476984389250486570LLU,17917957937422433684LLU}),jule::Array<jule::U64,2>({14521487280136329914LLU,11198723710889021052LLU}),jule::Array<jule::U64,2>({18151859100170412392LLU,13998404638611276315LLU}),jule::Array<jule::U64,2>({18078137856785627587LLU,17498005798264095394LLU}),jule::Array<jule::U64,2>({15910522178918405146LLU,10936253623915059621LLU}),jule::Array<jule::U64,2>({6053094668365842720LLU,13670317029893824527LLU}),jule::Array<jule::U64,2>({2954682317029915496LLU,17087896287367280659LLU}),jule::Array<jule::U64,2>({17987577512639554849LLU,10679935179604550411LLU}),jule::Array<jule::U64,2>({17872785872372055657LLU,13349918974505688014LLU}),jule::Array<jule::U64,2>({13117610303610293764LLU,16687398718132110018LLU}),jule::Array<jule::U64,2>({12810192458183821506LLU,10429624198832568761LLU}),jule::Array<jule::U64,2>({2177682517447613171LLU,13037030248540710952LLU}),jule::Array<jule::U64,2>({2722103146809516464LLU,16296287810675888690LLU}),jule::Array<jule::U64,2>({6313000485183335694LLU,10185179881672430431LLU}),jule::Array<jule::U64,2>({3279564588051781713LLU,12731474852090538039LLU}),jule::Array<jule::U64,2>({17934513790346890853LLU,15914343565113172548LLU}),jule::Array<jule::U64,2>({1985699082112030975LLU,9946464728195732843LLU}),jule::Array<jule::U64,2>({16317181907922202431LLU,12433080910244666053LLU}),jule::Array<jule::U64,2>({6561419329620589327LLU,15541351137805832567LLU}),jule::Array<jule::U64,2>({11018416108653950185LLU,9713344461128645354LLU}),jule::Array<jule::U64,2>({4549648098962661924LLU,12141680576410806693LLU}),jule::Array<jule::U64,2>({10298746142130715309LLU,15177100720513508366LLU}),jule::Array<jule::U64,2>({1825030320404309164LLU,9485687950320942729LLU}),jule::Array<jule::U64,2>({6892973918932774359LLU,11857109937901178411LLU}),jule::Array<jule::U64,2>({4004531380238580045LLU,14821387422376473014LLU}),jule::Array<jule::U64,2>({16337890167931276240LLU,9263367138985295633LLU}),jule::Array<jule::U64,2>({6587304654631931588LLU,11579208923731619542LLU}),jule::Array<jule::U64,2>({17457502855144690293LLU,14474011154664524427LLU}),jule::Array<jule::U64,2>({17210192550503474962LLU,18092513943330655534LLU}),jule::Array<jule::U64,2>({6144684325637283947LLU,11307821214581659709LLU}),jule::Array<jule::U64,2>({12292541425473992838LLU,14134776518227074636LLU}),jule::Array<jule::U64,2>({15365676781842491048LLU,17668470647783843295LLU}),jule::Array<jule::U64,2>({16521077016292638761LLU,11042794154864902059LLU}),jule::Array<jule::U64,2>({16039660251938410547LLU,13803492693581127574LLU}),jule::Array<jule::U64,2>({10826203278068237376LLU,17254365866976409468LLU}),jule::Array<jule::U64,2>({15989749085647424168LLU,10783978666860255917LLU}),jule::Array<jule::U64,2>({6152128301777116498LLU,13479973333575319897LLU}),jule::Array<jule::U64,2>({12301846395648783526LLU,16849966666969149871LLU}),jule::Array<jule::U64,2>({14606183024921571560LLU,10531229166855718669LLU}),jule::Array<jule::U64,2>({4422670725869800738LLU,13164036458569648337LLU}),jule::Array<jule::U64,2>({10140024425764638826LLU,16455045573212060421LLU}),jule::Array<jule::U64,2>({8643358275316593218LLU,10284403483257537763LLU}),jule::Array<jule::U64,2>({6192511825718353619LLU,12855504354071922204LLU}),jule::Array<jule::U64,2>({7740639782147942024LLU,16069380442589902755LLU}),jule::Array<jule::U64,2>({2532056854628769813LLU,10043362776618689222LLU}),jule::Array<jule::U64,2>({12388443105140738074LLU,12554203470773361527LLU}),jule::Array<jule::U64,2>({10873867862998534689LLU,15692754338466701909LLU}),jule::Array<jule::U64,2>({9102010423587778132LLU,9807971461541688693LLU}),jule::Array<jule::U64,2>({15989199047912110569LLU,12259964326927110866LLU}),jule::Array<jule::U64,2>({10763126773035362404LLU,15324955408658888583LLU}),jule::Array<jule::U64,2>({13644483260788183358LLU,9578097130411805364LLU}),jule::Array<jule::U64,2>({17055604075985229198LLU,11972621413014756705LLU}),jule::Array<jule::U64,2>({7484447039699372786LLU,14965776766268445882LLU}),jule::Array<jule::U64,2>({9289465418239495895LLU,9353610478917778676LLU}),jule::Array<jule::U64,2>({11611831772799369869LLU,11692013098647223345LLU}),jule::Array<jule::U64,2>({679731660717048624LLU,14615016373309029182LLU}),jule::Array<jule::U64,2>({10073036612751086588LLU,18268770466636286477LLU}),jule::Array<jule::U64,2>({8601490892183123069LLU,11417981541647679048LLU}),jule::Array<jule::U64,2>({10751863615228903837LLU,14272476927059598810LLU}),jule::Array<jule::U64,2>({4216457482181353988LLU,17840596158824498513LLU}),jule::Array<jule::U64,2>({14164500972431816002LLU,11150372599265311570LLU}),jule::Array<jule::U64,2>({8482254178684994195LLU,13937965749081639463LLU}),jule::Array<jule::U64,2>({5991131704928854840LLU,17422457186352049329LLU}),jule::Array<jule::U64,2>({15273672361649004035LLU,10889035741470030830LLU}),jule::Array<jule::U64,2>({9868718415206479236LLU,13611294676837538538LLU}),jule::Array<jule::U64,2>({3112525982153323237LLU,17014118346046923173LLU}),jule::Array<jule::U64,2>({4251171748059520975LLU,10633823966279326983LLU}),jule::Array<jule::U64,2>({702278666647013314LLU,13292279957849158729LLU}),jule::Array<jule::U64,2>({5489534351736154547LLU,16615349947311448411LLU}),jule::Array<jule::U64,2>({1125115960621402640LLU,10384593717069655257LLU}),jule::Array<jule::U64,2>({6018080969204141204LLU,12980742146337069071LLU}),jule::Array<jule::U64,2>({2910915193077788601LLU,16225927682921336339LLU}),jule::Array<jule::U64,2>({17960223060169475539LLU,10141204801825835211LLU}),jule::Array<jule::U64,2>({17838592806784456520LLU,12676506002282294014LLU}),jule::Array<jule::U64,2>({13074868971625794843LLU,15845632502852867518LLU}),jule::Array<jule::U64,2>({3560107088838733872LLU,9903520314283042199LLU}),jule::Array<jule::U64,2>({18285191916330581053LLU,12379400392853802748LLU}),jule::Array<jule::U64,2>({4409745821703674700LLU,15474250491067253436LLU}),jule::Array<jule::U64,2>({11979463175419572495LLU,9671406556917033397LLU}),jule::Array<jule::U64,2>({1139270913992301907LLU,12089258196146291747LLU}),jule::Array<jule::U64,2>({15259146697772541096LLU,15111572745182864683LLU}),jule::Array<jule::U64,2>({7231123676894144233LLU,9444732965739290427LLU}),jule::Array<jule::U64,2>({4427218577690292387LLU,11805916207174113034LLU}),jule::Array<jule::U64,2>({14757395258967641292LLU,14757395258967641292LLU}),jule::Array<jule::U64,2>({0LLU,9223372036854775808LLU}),jule::Array<jule::U64,2>({0LLU,11529215046068469760LLU}),jule::Array<jule::U64,2>({0LLU,14411518807585587200LLU}),jule::Array<jule::U64,2>({0LLU,18014398509481984000LLU}),jule::Array<jule::U64,2>({0LLU,11258999068426240000LLU}),jule::Array<jule::U64,2>({0LLU,14073748835532800000LLU}),jule::Array<jule::U64,2>({0LLU,17592186044416000000LLU}),jule::Array<jule::U64,2>({0LLU,10995116277760000000LLU}),jule::Array<jule::U64,2>({0LLU,13743895347200000000LLU}),jule::Array<jule::U64,2>({0LLU,17179869184000000000LLU}),jule::Array<jule::U64,2>({0LLU,10737418240000000000LLU}),jule::Array<jule::U64,2>({0LLU,13421772800000000000LLU}),jule::Array<jule::U64,2>({0LLU,16777216000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10485760000000000000LLU}),jule::Array<jule::U64,2>({0LLU,13107200000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16384000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10240000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12800000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12500000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,15625000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,9765625000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12207031250000000000LLU}),jule::Array<jule::U64,2>({0LLU,15258789062500000000LLU}),jule::Array<jule::U64,2>({0LLU,9536743164062500000LLU}),jule::Array<jule::U64,2>({0LLU,11920928955078125000LLU}),jule::Array<jule::U64,2>({0LLU,14901161193847656250LLU}),jule::Array<jule::U64,2>({4611686018427387904LLU,9313225746154785156LLU}),jule::Array<jule::U64,2>({5764607523034234880LLU,11641532182693481445LLU}),jule::Array<jule::U64,2>({11817445422220181504LLU,14551915228366851806LLU}),jule::Array<jule::U64,2>({5548434740920451072LLU,18189894035458564758LLU}),jule::Array<jule::U64,2>({17302829768357445632LLU,11368683772161602973LLU}),jule::Array<jule::U64,2>({7793479155164643328LLU,14210854715202003717LLU}),jule::Array<jule::U64,2>({14353534962383192064LLU,17763568394002504646LLU}),jule::Array<jule::U64,2>({4359273333062107136LLU,11102230246251565404LLU}),jule::Array<jule::U64,2>({5449091666327633920LLU,13877787807814456755LLU}),jule::Array<jule::U64,2>({2199678564482154496LLU,17347234759768070944LLU}),jule::Array<jule::U64,2>({1374799102801346560LLU,10842021724855044340LLU}),jule::Array<jule::U64,2>({1718498878501683200LLU,13552527156068805425LLU}),jule::Array<jule::U64,2>({6759809616554491904LLU,16940658945086006781LLU}),jule::Array<jule::U64,2>({6530724019560251392LLU,10587911840678754238LLU}),jule::Array<jule::U64,2>({17386777061305090048LLU,13234889800848442797LLU}),jule::Array<jule::U64,2>({7898413271349198848LLU,16543612251060553497LLU}),jule::Array<jule::U64,2>({16465723340661719040LLU,10339757656912845935LLU}),jule::Array<jule::U64,2>({15970468157399760896LLU,12924697071141057419LLU}),jule::Array<jule::U64,2>({15351399178322313216LLU,16155871338926321774LLU}),jule::Array<jule::U64,2>({4982938468024057856LLU,10097419586828951109LLU}),jule::Array<jule::U64,2>({10840359103457460224LLU,12621774483536188886LLU}),jule::Array<jule::U64,2>({4327076842467049472LLU,15777218104420236108LLU}),jule::Array<jule::U64,2>({11927795063396681728LLU,9860761315262647567LLU}),jule::Array<jule::U64,2>({10298057810818464256LLU,12325951644078309459LLU}),jule::Array<jule::U64,2>({8260886245095692416LLU,15407439555097886824LLU}),jule::Array<jule::U64,2>({5163053903184807760LLU,9629649721936179265LLU}),jule::Array<jule::U64,2>({11065503397408397604LLU,12037062152420224081LLU}),jule::Array<jule::U64,2>({18443565265187884909LLU,15046327690525280101LLU}),jule::Array<jule::U64,2>({13833071299956122020LLU,9403954806578300063LLU}),jule::Array<jule::U64,2>({12679653106517764621LLU,11754943508222875079LLU}),jule::Array<jule::U64,2>({11237880364719817872LLU,14693679385278593849LLU}),jule::Array<jule::U64,2>({212292400617608628LLU,18367099231598242312LLU}),jule::Array<jule::U64,2>({132682750386005392LLU,11479437019748901445LLU}),jule::Array<jule::U64,2>({4777539456409894645LLU,14349296274686126806LLU}),jule::Array<jule::U64,2>({15195296357367144114LLU,17936620343357658507LLU}),jule::Array<jule::U64,2>({7191217214140771119LLU,11210387714598536567LLU}),jule::Array<jule::U64,2>({4377335499248575995LLU,14012984643248170709LLU}),jule::Array<jule::U64,2>({10083355392488107898LLU,17516230804060213386LLU}),jule::Array<jule::U64,2>({10913783138732455340LLU,10947644252537633366LLU}),jule::Array<jule::U64,2>({4418856886560793367LLU,13684555315672041708LLU}),jule::Array<jule::U64,2>({5523571108200991709LLU,17105694144590052135LLU}),jule::Array<jule::U64,2>({10369760970266701674LLU,10691058840368782584LLU}),jule::Array<jule::U64,2>({12962201212833377092LLU,13363823550460978230LLU}),jule::Array<jule::U64,2>({6979379479186945558LLU,16704779438076222788LLU}),jule::Array<jule::U64,2>({13585484211346616781LLU,10440487148797639242LLU}),jule::Array<jule::U64,2>({7758483227328495169LLU,13050608935997049053LLU}),jule::Array<jule::U64,2>({14309790052588006865LLU,16313261169996311316LLU}),jule::Array<jule::U64,2>({18166990819722280098LLU,10195788231247694572LLU}),jule::Array<jule::U64,2>({4261994450943298507LLU,12744735289059618216LLU}),jule::Array<jule::U64,2>({5327493063679123134LLU,15930919111324522770LLU}),jule::Array<jule::U64,2>({7941369183226839863LLU,9956824444577826731LLU}),jule::Array<jule::U64,2>({5315025460606161924LLU,12446030555722283414LLU}),jule::Array<jule::U64,2>({15867153862612478214LLU,15557538194652854267LLU}),jule::Array<jule::U64,2>({7611128154919104931LLU,9723461371658033917LLU}),jule::Array<jule::U64,2>({14125596212076269068LLU,12154326714572542396LLU}),jule::Array<jule::U64,2>({17656995265095336336LLU,15192908393215677995LLU}),jule::Array<jule::U64,2>({8729779031470891258LLU,9495567745759798747LLU}),jule::Array<jule::U64,2>({6300537770911226168LLU,11869459682199748434LLU}),jule::Array<jule::U64,2>({17099044250493808518LLU,14836824602749685542LLU}),jule::Array<jule::U64,2>({6075216638131242420LLU,9273015376718553464LLU}),jule::Array<jule::U64,2>({7594020797664053025LLU,11591269220898191830LLU}),jule::Array<jule::U64,2>({269153960225290473LLU,14489086526122739788LLU}),jule::Array<jule::U64,2>({336442450281613091LLU,18111358157653424735LLU}),jule::Array<jule::U64,2>({7127805559067090038LLU,11319598848533390459LLU}),jule::Array<jule::U64,2>({4298070930406474644LLU,14149498560666738074LLU}),jule::Array<jule::U64,2>({14595960699862869113LLU,17686873200833422592LLU}),jule::Array<jule::U64,2>({9122475437414293195LLU,11054295750520889120LLU}),jule::Array<jule::U64,2>({11403094296767866494LLU,13817869688151111400LLU}),jule::Array<jule::U64,2>({14253867870959833118LLU,17272337110188889250LLU}),jule::Array<jule::U64,2>({13520353437777283602LLU,10795210693868055781LLU}),jule::Array<jule::U64,2>({3065383741939440791LLU,13494013367335069727LLU}),jule::Array<jule::U64,2>({17666787732706464701LLU,16867516709168837158LLU}),jule::Array<jule::U64,2>({6430056314514152534LLU,10542197943230523224LLU}),jule::Array<jule::U64,2>({8037570393142690668LLU,13177747429038154030LLU}),jule::Array<jule::U64,2>({823590954573587527LLU,16472184286297692538LLU}),jule::Array<jule::U64,2>({5126430365035880108LLU,10295115178936057836LLU}),jule::Array<jule::U64,2>({6408037956294850135LLU,12868893973670072295LLU}),jule::Array<jule::U64,2>({3398361426941174765LLU,16086117467087590369LLU}),jule::Array<jule::U64,2>({13653190937906703988LLU,10053823416929743980LLU}),jule::Array<jule::U64,2>({17066488672383379985LLU,12567279271162179975LLU}),jule::Array<jule::U64,2>({16721424822051837077LLU,15709099088952724969LLU}),jule::Array<jule::U64,2>({3533361486141316317LLU,9818186930595453106LLU}),jule::Array<jule::U64,2>({13640073894531421205LLU,12272733663244316382LLU}),jule::Array<jule::U64,2>({7826720331309500698LLU,15340917079055395478LLU}),jule::Array<jule::U64,2>({280014188641050032LLU,9588073174409622174LLU}),jule::Array<jule::U64,2>({9573389772656088348LLU,11985091468012027717LLU}),jule::Array<jule::U64,2>({16578423234247498339LLU,14981364335015034646LLU}),jule::Array<jule::U64,2>({5749828502977298558LLU,9363352709384396654LLU}),jule::Array<jule::U64,2>({16410657665576399005LLU,11704190886730495817LLU}),jule::Array<jule::U64,2>({6678264026688335045LLU,14630238608413119772LLU}),jule::Array<jule::U64,2>({8347830033360418806LLU,18287798260516399715LLU}),jule::Array<jule::U64,2>({2911550761636567802LLU,11429873912822749822LLU}),jule::Array<jule::U64,2>({12862810488900485560LLU,14287342391028437277LLU}),jule::Array<jule::U64,2>({2243455055843443238LLU,17859177988785546597LLU}),jule::Array<jule::U64,2>({3708002419115845976LLU,11161986242990966623LLU}),jule::Array<jule::U64,2>({23317005467419566LLU,13952482803738708279LLU}),jule::Array<jule::U64,2>({13864204312116438170LLU,17440603504673385348LLU}),jule::Array<jule::U64,2>({17888499731927549664LLU,10900377190420865842LLU}),jule::Array<jule::U64,2>({13137252628054661272LLU,13625471488026082303LLU}),jule::Array<jule::U64,2>({11809879766640938686LLU,17031839360032602879LLU}),jule::Array<jule::U64,2>({14298703881791668535LLU,10644899600020376799LLU}),jule::Array<jule::U64,2>({13261693833812197764LLU,13306124500025470999LLU}),jule::Array<jule::U64,2>({11965431273837859301LLU,16632655625031838749LLU}),jule::Array<jule::U64,2>({9784237555362356015LLU,10395409765644899218LLU}),jule::Array<jule::U64,2>({3006924907348169211LLU,12994262207056124023LLU}),jule::Array<jule::U64,2>({17593714189467375226LLU,16242827758820155028LLU}),jule::Array<jule::U64,2>({1772699331562333708LLU,10151767349262596893LLU}),jule::Array<jule::U64,2>({6827560182880305039LLU,12689709186578246116LLU}),jule::Array<jule::U64,2>({8534450228600381299LLU,15862136483222807645LLU}),jule::Array<jule::U64,2>({7639874402088932264LLU,9913835302014254778LLU}),jule::Array<jule::U64,2>({326470965756389522LLU,12392294127517818473LLU}),jule::Array<jule::U64,2>({5019774725622874806LLU,15490367659397273091LLU}),jule::Array<jule::U64,2>({831516194300602802LLU,9681479787123295682LLU}),jule::Array<jule::U64,2>({10262767279730529310LLU,12101849733904119602LLU}),jule::Array<jule::U64,2>({3605087062808385830LLU,15127312167380149503LLU}),jule::Array<jule::U64,2>({9170708441896323000LLU,9454570104612593439LLU}),jule::Array<jule::U64,2>({6851699533943015846LLU,11818212630765741799LLU}),jule::Array<jule::U64,2>({3952938399001381903LLU,14772765788457177249LLU}),jule::Array<jule::U64,2>({13999801545444333449LLU,9232978617785735780LLU}),jule::Array<jule::U64,2>({17499751931805416812LLU,11541223272232169725LLU}),jule::Array<jule::U64,2>({8039631859474607303LLU,14426529090290212157LLU}),jule::Array<jule::U64,2>({14661225842770647033LLU,18033161362862765196LLU}),jule::Array<jule::U64,2>({18386638188586430203LLU,11270725851789228247LLU}),jule::Array<jule::U64,2>({18371611717305649850LLU,14088407314736535309LLU}),jule::Array<jule::U64,2>({9129456591349898601LLU,17610509143420669137LLU}),jule::Array<jule::U64,2>({17235125415662156385LLU,11006568214637918210LLU}),jule::Array<jule::U64,2>({12320534732722919674LLU,13758210268297397763LLU}),jule::Array<jule::U64,2>({10788982397476261688LLU,17197762835371747204LLU}),jule::Array<jule::U64,2>({15966486035277439363LLU,10748601772107342002LLU}),jule::Array<jule::U64,2>({10734735507242023396LLU,13435752215134177503LLU}),jule::Array<jule::U64,2>({8806733365625141341LLU,16794690268917721879LLU}),jule::Array<jule::U64,2>({12421737381156795194LLU,10496681418073576174LLU}),jule::Array<jule::U64,2>({6303799689591218185LLU,13120851772591970218LLU}),jule::Array<jule::U64,2>({17103121648843798539LLU,16401064715739962772LLU}),jule::Array<jule::U64,2>({1466078993672598279LLU,10250665447337476733LLU}),jule::Array<jule::U64,2>({6444284760518135752LLU,12813331809171845916LLU}),jule::Array<jule::U64,2>({8055355950647669691LLU,16016664761464807395LLU}),jule::Array<jule::U64,2>({2728754459941099604LLU,10010415475915504622LLU}),jule::Array<jule::U64,2>({12634315111781150314LLU,12513019344894380777LLU}),jule::Array<jule::U64,2>({1957835834444274180LLU,15641274181117975972LLU}),jule::Array<jule::U64,2>({10447019433382447170LLU,9775796363198734982LLU}),jule::Array<jule::U64,2>({3835402254873283155LLU,12219745453998418728LLU}),jule::Array<jule::U64,2>({4794252818591603944LLU,15274681817498023410LLU}),jule::Array<jule::U64,2>({7608094030047140369LLU,9546676135936264631LLU}),jule::Array<jule::U64,2>({4898431519131537557LLU,11933345169920330789LLU}),jule::Array<jule::U64,2>({10734725417341809851LLU,14916681462400413486LLU}),jule::Array<jule::U64,2>({2097517367411243253LLU,9322925914000258429LLU}),jule::Array<jule::U64,2>({7233582727691441970LLU,11653657392500323036LLU}),jule::Array<jule::U64,2>({9041978409614302462LLU,14567071740625403795LLU}),jule::Array<jule::U64,2>({6690786993590490174LLU,18208839675781754744LLU}),jule::Array<jule::U64,2>({4181741870994056359LLU,11380524797363596715LLU}),jule::Array<jule::U64,2>({615491320315182544LLU,14225655996704495894LLU}),jule::Array<jule::U64,2>({9992736187248753989LLU,17782069995880619867LLU}),jule::Array<jule::U64,2>({3939617107816777291LLU,11113793747425387417LLU}),jule::Array<jule::U64,2>({9536207403198359517LLU,13892242184281734271LLU}),jule::Array<jule::U64,2>({7308573235570561493LLU,17365302730352167839LLU}),jule::Array<jule::U64,2>({11485387299872682789LLU,10853314206470104899LLU}),jule::Array<jule::U64,2>({9745048106413465582LLU,13566642758087631124LLU}),jule::Array<jule::U64,2>({12181310133016831978LLU,16958303447609538905LLU}),jule::Array<jule::U64,2>({695789805494438130LLU,10598939654755961816LLU}),jule::Array<jule::U64,2>({869737256868047663LLU,13248674568444952270LLU}),jule::Array<jule::U64,2>({10310543607939835386LLU,16560843210556190337LLU}),jule::Array<jule::U64,2>({17973304801030866876LLU,10350527006597618960LLU}),jule::Array<jule::U64,2>({4019886927579031980LLU,12938158758247023701LLU}),jule::Array<jule::U64,2>({9636544677901177879LLU,16172698447808779626LLU}),jule::Array<jule::U64,2>({10634526442115624078LLU,10107936529880487266LLU}),jule::Array<jule::U64,2>({4069786015789754290LLU,12634920662350609083LLU}),jule::Array<jule::U64,2>({475546501309804958LLU,15793650827938261354LLU}),jule::Array<jule::U64,2>({4908902581746016003LLU,9871031767461413346LLU}),jule::Array<jule::U64,2>({15359500264037295811LLU,12338789709326766682LLU}),jule::Array<jule::U64,2>({9976003293191843956LLU,15423487136658458353LLU}),jule::Array<jule::U64,2>({17764217104313372233LLU,9639679460411536470LLU}),jule::Array<jule::U64,2>({12981899343536939483LLU,12049599325514420588LLU}),jule::Array<jule::U64,2>({16227374179421174354LLU,15061999156893025735LLU}),jule::Array<jule::U64,2>({17059637889779315827LLU,9413749473058141084LLU}),jule::Array<jule::U64,2>({2877803288514593168LLU,11767186841322676356LLU}),jule::Array<jule::U64,2>({3597254110643241460LLU,14708983551653345445LLU}),jule::Array<jule::U64,2>({9108253656731439729LLU,18386229439566681806LLU}),jule::Array<jule::U64,2>({1080972517029761926LLU,11491393399729176129LLU}),jule::Array<jule::U64,2>({5962901664714590312LLU,14364241749661470161LLU}),jule::Array<jule::U64,2>({12065313099320625794LLU,17955302187076837701LLU}),jule::Array<jule::U64,2>({9846663696289085073LLU,11222063866923023563LLU}),jule::Array<jule::U64,2>({7696643601933968437LLU,14027579833653779454LLU}),jule::Array<jule::U64,2>({397432465562684739LLU,17534474792067224318LLU}),jule::Array<jule::U64,2>({14083453346258841674LLU,10959046745042015198LLU}),jule::Array<jule::U64,2>({8380944645968776284LLU,13698808431302518998LLU}),jule::Array<jule::U64,2>({1252808770606194547LLU,17123510539128148748LLU}),jule::Array<jule::U64,2>({10006377518483647400LLU,10702194086955092967LLU}),jule::Array<jule::U64,2>({7896285879677171346LLU,13377742608693866209LLU}),jule::Array<jule::U64,2>({14482043368023852087LLU,16722178260867332761LLU}),jule::Array<jule::U64,2>({2133748077373825698LLU,10451361413042082976LLU}),jule::Array<jule::U64,2>({2667185096717282123LLU,13064201766302603720LLU}),jule::Array<jule::U64,2>({3333981370896602653LLU,16330252207878254650LLU}),jule::Array<jule::U64,2>({6695424375237764562LLU,10206407629923909156LLU}),jule::Array<jule::U64,2>({8369280469047205703LLU,12758009537404886445LLU}),jule::Array<jule::U64,2>({15073286604736395033LLU,15947511921756108056LLU}),jule::Array<jule::U64,2>({9420804127960246895LLU,9967194951097567535LLU}),jule::Array<jule::U64,2>({7164319141522920715LLU,12458993688871959419LLU}),jule::Array<jule::U64,2>({4343712908476262990LLU,15573742111089949274LLU}),jule::Array<jule::U64,2>({7326506586225052273LLU,9733588819431218296LLU}),jule::Array<jule::U64,2>({9158133232781315341LLU,12166986024289022870LLU}),jule::Array<jule::U64,2>({2224294504121868368LLU,15208732530361278588LLU}),jule::Array<jule::U64,2>({10613556101930943538LLU,9505457831475799117LLU}),jule::Array<jule::U64,2>({17878631145841067327LLU,11881822289344748896LLU}),jule::Array<jule::U64,2>({3901544858591782542LLU,14852277861680936121LLU}),jule::Array<jule::U64,2>({13967680582688333849LLU,9282673663550585075LLU}),jule::Array<jule::U64,2>({12847914709933029407LLU,11603342079438231344LLU}),jule::Array<jule::U64,2>({16059893387416286759LLU,14504177599297789180LLU}),jule::Array<jule::U64,2>({1628122660560806833LLU,18130221999122236476LLU}),jule::Array<jule::U64,2>({10240948699705280078LLU,11331388749451397797LLU}),jule::Array<jule::U64,2>({17412871893058988002LLU,14164235936814247246LLU}),jule::Array<jule::U64,2>({12542717829468959195LLU,17705294921017809058LLU}),jule::Array<jule::U64,2>({12450884661845487401LLU,11065809325636130661LLU}),jule::Array<jule::U64,2>({1728547772024695539LLU,13832261657045163327LLU}),jule::Array<jule::U64,2>({15995742770313033136LLU,17290327071306454158LLU}),jule::Array<jule::U64,2>({5385653213018257806LLU,10806454419566533849LLU}),jule::Array<jule::U64,2>({11343752534700210161LLU,13508068024458167311LLU}),jule::Array<jule::U64,2>({9568004649947874797LLU,16885085030572709139LLU}),jule::Array<jule::U64,2>({3674159897003727796LLU,10553178144107943212LLU}),jule::Array<jule::U64,2>({4592699871254659745LLU,13191472680134929015LLU}),jule::Array<jule::U64,2>({1129188820640936778LLU,16489340850168661269LLU}),jule::Array<jule::U64,2>({3011586022114279438LLU,10305838031355413293LLU}),jule::Array<jule::U64,2>({8376168546070237202LLU,12882297539194266616LLU}),jule::Array<jule::U64,2>({10470210682587796502LLU,16102871923992833270LLU}),jule::Array<jule::U64,2>({1932195658189984910LLU,10064294952495520794LLU}),jule::Array<jule::U64,2>({11638616609592256945LLU,12580368690619400992LLU}),jule::Array<jule::U64,2>({14548270761990321182LLU,15725460863274251240LLU}),jule::Array<jule::U64,2>({9092669226243950738LLU,9828413039546407025LLU}),jule::Array<jule::U64,2>({15977522551232326327LLU,12285516299433008781LLU}),jule::Array<jule::U64,2>({6136845133758244197LLU,15356895374291260977LLU}),jule::Array<jule::U64,2>({15364743254667372383LLU,9598059608932038110LLU}),jule::Array<jule::U64,2>({9982557031479439671LLU,11997574511165047638LLU}),jule::Array<jule::U64,2>({3254824252494523781LLU,14996968138956309548LLU}),jule::Array<jule::U64,2>({11257637194663853171LLU,9373105086847693467LLU}),jule::Array<jule::U64,2>({9460360474902428559LLU,11716381358559616834LLU}),jule::Array<jule::U64,2>({2602078556773259891LLU,14645476698199521043LLU}),jule::Array<jule::U64,2>({17087656251248738576LLU,18306845872749401303LLU}),jule::Array<jule::U64,2>({17597314184671543466LLU,11441778670468375814LLU}),jule::Array<jule::U64,2>({12773270693984653525LLU,14302223338085469768LLU}),jule::Array<jule::U64,2>({15966588367480816906LLU,17877779172606837210LLU}),jule::Array<jule::U64,2>({14590803748102898470LLU,11173611982879273256LLU}),jule::Array<jule::U64,2>({18238504685128623088LLU,13967014978599091570LLU}),jule::Array<jule::U64,2>({13574758819556003052LLU,17458768723248864463LLU}),jule::Array<jule::U64,2>({15401753289863583763LLU,10911730452030540289LLU}),jule::Array<jule::U64,2>({5417133557047315992LLU,13639663065038175362LLU}),jule::Array<jule::U64,2>({15994788983163920798LLU,17049578831297719202LLU}),jule::Array<jule::U64,2>({14608429132904838403LLU,10655986769561074501LLU}),jule::Array<jule::U64,2>({4425478360848884291LLU,13319983461951343127LLU}),jule::Array<jule::U64,2>({920161932633717460LLU,16649979327439178909LLU}),jule::Array<jule::U64,2>({2880944217109767365LLU,10406237079649486818LLU}),jule::Array<jule::U64,2>({12824552308241985014LLU,13007796349561858522LLU}),jule::Array<jule::U64,2>({6807318348447705459LLU,16259745436952323153LLU}),jule::Array<jule::U64,2>({15783789013848285672LLU,10162340898095201970LLU}),jule::Array<jule::U64,2>({10506364230455581282LLU,12702926122619002463LLU}),jule::Array<jule::U64,2>({8521269269642088699LLU,15878657653273753079LLU}),jule::Array<jule::U64,2>({12243322321167387293LLU,9924161033296095674LLU}),jule::Array<jule::U64,2>({6080780864604458308LLU,12405201291620119593LLU}),jule::Array<jule::U64,2>({12212662099182960789LLU,15506501614525149491LLU}),jule::Array<jule::U64,2>({5327070802775656541LLU,9691563509078218432LLU}),jule::Array<jule::U64,2>({6658838503469570676LLU,12114454386347773040LLU}),jule::Array<jule::U64,2>({8323548129336963345LLU,15143067982934716300LLU}),jule::Array<jule::U64,2>({14425589617690377899LLU,9464417489334197687LLU}),jule::Array<jule::U64,2>({13420301003685584469LLU,11830521861667747109LLU}),jule::Array<jule::U64,2>({2940318199324816875LLU,14788152327084683887LLU}),jule::Array<jule::U64,2>({8755227902219092403LLU,9242595204427927429LLU}),jule::Array<jule::U64,2>({15555720896201253407LLU,11553244005534909286LLU}),jule::Array<jule::U64,2>({10221279083396790951LLU,14441555006918636608LLU}),jule::Array<jule::U64,2>({12776598854245988689LLU,18051943758648295760LLU}),jule::Array<jule::U64,2>({7985374283903742931LLU,11282464849155184850LLU}),jule::Array<jule::U64,2>({758345818024902856LLU,14103081061443981063LLU}),jule::Array<jule::U64,2>({14782990327813292282LLU,17628851326804976328LLU}),jule::Array<jule::U64,2>({9239368954883307676LLU,11018032079253110205LLU}),jule::Array<jule::U64,2>({16160897212031522499LLU,13772540099066387756LLU}),jule::Array<jule::U64,2>({1754377441329851508LLU,17215675123832984696LLU}),jule::Array<jule::U64,2>({1096485900831157192LLU,10759796952395615435LLU}),jule::Array<jule::U64,2>({15205665431321110202LLU,13449746190494519293LLU}),jule::Array<jule::U64,2>({5172023733869224041LLU,16812182738118149117LLU}),jule::Array<jule::U64,2>({5538357842881958977LLU,10507614211323843198LLU}),jule::Array<jule::U64,2>({16146319340457224530LLU,13134517764154803997LLU}),jule::Array<jule::U64,2>({6347841120289366950LLU,16418147205193504997LLU}),jule::Array<jule::U64,2>({6273243709394548296LLU,10261342003245940623LLU}),jule::Array<jule::U64,2>({3229868618315797466LLU,12826677504057425779LLU}),jule::Array<jule::U64,2>({17872393828176910545LLU,16033346880071782223LLU}),jule::Array<jule::U64,2>({18087775170251650946LLU,10020841800044863889LLU}),jule::Array<jule::U64,2>({8774660907532399971LLU,12526052250056079862LLU}),jule::Array<jule::U64,2>({1744954097560724156LLU,15657565312570099828LLU}),jule::Array<jule::U64,2>({10313968347830228405LLU,9785978320356312392LLU}),jule::Array<jule::U64,2>({12892460434787785506LLU,12232472900445390490LLU}),jule::Array<jule::U64,2>({6892203506629956075LLU,15290591125556738113LLU}),jule::Array<jule::U64,2>({15836842237712192307LLU,9556619453472961320LLU}),jule::Array<jule::U64,2>({1349308723430688768LLU,11945774316841201651LLU}),jule::Array<jule::U64,2>({15521693959570524672LLU,14932217896051502063LLU}),jule::Array<jule::U64,2>({16618587752372659776LLU,9332636185032188789LLU}),jule::Array<jule::U64,2>({6938176635183661008LLU,11665795231290235987LLU}),jule::Array<jule::U64,2>({4061034775552188356LLU,14582244039112794984LLU}),jule::Array<jule::U64,2>({5076293469440235445LLU,18227805048890993730LLU}),jule::Array<jule::U64,2>({7784369436827535057LLU,11392378155556871081LLU}),jule::Array<jule::U64,2>({14342147814461806725LLU,14240472694446088851LLU}),jule::Array<jule::U64,2>({13315998749649870503LLU,17800590868057611064LLU}),jule::Array<jule::U64,2>({8322499218531169064LLU,11125369292536006915LLU}),jule::Array<jule::U64,2>({5791438004736573426LLU,13906711615670008644LLU}),jule::Array<jule::U64,2>({7239297505920716783LLU,17383389519587510805LLU}),jule::Array<jule::U64,2>({6830403950414141941LLU,10864618449742194253LLU}),jule::Array<jule::U64,2>({13149690956445065330LLU,13580773062177742816LLU}),jule::Array<jule::U64,2>({16437113695556331663LLU,16975966327722178520LLU}),jule::Array<jule::U64,2>({10273196059722707289LLU,10609978954826361575LLU}),jule::Array<jule::U64,2>({8229809056225996208LLU,13262473693532951969LLU}),jule::Array<jule::U64,2>({14898947338709883164LLU,16578092116916189961LLU}),jule::Array<jule::U64,2>({2394313059052595121LLU,10361307573072618726LLU}),jule::Array<jule::U64,2>({12216263360670519709LLU,12951634466340773407LLU}),jule::Array<jule::U64,2>({10658643182410761733LLU,16189543082925966759LLU}),jule::Array<jule::U64,2>({13579181016647807939LLU,10118464426828729224LLU}),jule::Array<jule::U64,2>({16973976270809759924LLU,12648080533535911530LLU}),jule::Array<jule::U64,2>({11994098301657424097LLU,15810100666919889413LLU}),jule::Array<jule::U64,2>({9802154447749584012LLU,9881312916824930883LLU}),jule::Array<jule::U64,2>({7641007041259592112LLU,12351641146031163604LLU}),jule::Array<jule::U64,2>({9551258801574490140LLU,15439551432538954505LLU}),jule::Array<jule::U64,2>({17498751797052526097LLU,9649719645336846565LLU}),jule::Array<jule::U64,2>({8038381691033493909LLU,12062149556671058207LLU}),jule::Array<jule::U64,2>({5436291095364479483LLU,15077686945838822759LLU})});
static jule::Slice<jule::Int> _1186f6b70_POWTAB = jule::Slice<jule::Int>({1LL,3LL,6LL,9LL,13LL,16LL,19LL,23LL,26LL});
static jule::Slice<jule::F64> _1186f6b70_F64_POW10 = jule::Slice<jule::F64>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL,1000000000000000000LL,10000000000000000000LLU,100000000000000000000.0,1000000000000000000000.0,10000000000000000000000.0});
static jule::Slice<jule::F32> _1186f6b70_F32_POW10 = jule::Slice<jule::F32>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL});
static jule::Array<jule::U64,20> _11864d0f0_U64_POW10 = jule::Array<jule::U64,20>({1LLU,10LLU,100LLU,1000LLU,10000LLU,100000LLU,1000000LLU,10000000LLU,100000000LLU,1000000000LLU,10000000000LLU,100000000000LLU,1000000000000LLU,10000000000000LLU,100000000000000LLU,1000000000000000LLU,10000000000000000LLU,100000000000000000LLU,1000000000000000000LLU,10000000000000000000LLU});
static jule::Slice<_14873e050_LeftCheat> _14873e050_LEFTCHEATS = jule::Slice<_14873e050_LeftCheat>({_14873e050_LeftCheat(0LL,jule::Str("", 0)),_14873e050_LeftCheat(1LL,jule::Str("5", 1)),_14873e050_LeftCheat(1LL,jule::Str("25", 2)),_14873e050_LeftCheat(1LL,jule::Str("125", 3)),_14873e050_LeftCheat(2LL,jule::Str("625", 3)),_14873e050_LeftCheat(2LL,jule::Str("3125", 4)),_14873e050_LeftCheat(2LL,jule::Str("15625", 5)),_14873e050_LeftCheat(3LL,jule::Str("78125", 5)),_14873e050_LeftCheat(3LL,jule::Str("390625", 6)),_14873e050_LeftCheat(3LL,jule::Str("1953125", 7)),_14873e050_LeftCheat(4LL,jule::Str("9765625", 7)),_14873e050_LeftCheat(4LL,jule::Str("48828125", 8)),_14873e050_LeftCheat(4LL,jule::Str("244140625", 9)),_14873e050_LeftCheat(4LL,jule::Str("1220703125", 10)),_14873e050_LeftCheat(5LL,jule::Str("6103515625", 10)),_14873e050_LeftCheat(5LL,jule::Str("30517578125", 11)),_14873e050_LeftCheat(5LL,jule::Str("152587890625", 12)),_14873e050_LeftCheat(6LL,jule::Str("762939453125", 12)),_14873e050_LeftCheat(6LL,jule::Str("3814697265625", 13)),_14873e050_LeftCheat(6LL,jule::Str("19073486328125", 14)),_14873e050_LeftCheat(7LL,jule::Str("95367431640625", 14)),_14873e050_LeftCheat(7LL,jule::Str("476837158203125", 15)),_14873e050_LeftCheat(7LL,jule::Str("2384185791015625", 16)),_14873e050_LeftCheat(7LL,jule::Str("11920928955078125", 17)),_14873e050_LeftCheat(8LL,jule::Str("59604644775390625", 17)),_14873e050_LeftCheat(8LL,jule::Str("298023223876953125", 18)),_14873e050_LeftCheat(8LL,jule::Str("1490116119384765625", 19)),_14873e050_LeftCheat(9LL,jule::Str("7450580596923828125", 19)),_14873e050_LeftCheat(9LL,jule::Str("37252902984619140625", 20)),_14873e050_LeftCheat(9LL,jule::Str("186264514923095703125", 21)),_14873e050_LeftCheat(10LL,jule::Str("931322574615478515625", 21)),_14873e050_LeftCheat(10LL,jule::Str("4656612873077392578125", 22)),_14873e050_LeftCheat(10LL,jule::Str("23283064365386962890625", 23)),_14873e050_LeftCheat(10LL,jule::Str("116415321826934814453125", 24)),_14873e050_LeftCheat(11LL,jule::Str("582076609134674072265625", 24)),_14873e050_LeftCheat(11LL,jule::Str("2910383045673370361328125", 25)),_14873e050_LeftCheat(11LL,jule::Str("14551915228366851806640625", 26)),_14873e050_LeftCheat(12LL,jule::Str("72759576141834259033203125", 26)),_14873e050_LeftCheat(12LL,jule::Str("363797880709171295166015625", 27)),_14873e050_LeftCheat(12LL,jule::Str("1818989403545856475830078125", 28)),_14873e050_LeftCheat(13LL,jule::Str("9094947017729282379150390625", 28)),_14873e050_LeftCheat(13LL,jule::Str("45474735088646411895751953125", 29)),_14873e050_LeftCheat(13LL,jule::Str("227373675443232059478759765625", 30)),_14873e050_LeftCheat(13LL,jule::Str("1136868377216160297393798828125", 31)),_14873e050_LeftCheat(14LL,jule::Str("5684341886080801486968994140625", 31)),_14873e050_LeftCheat(14LL,jule::Str("28421709430404007434844970703125", 32)),_14873e050_LeftCheat(14LL,jule::Str("142108547152020037174224853515625", 33)),_14873e050_LeftCheat(15LL,jule::Str("710542735760100185871124267578125", 33)),_14873e050_LeftCheat(15LL,jule::Str("3552713678800500929355621337890625", 34)),_14873e050_LeftCheat(15LL,jule::Str("17763568394002504646778106689453125", 35)),_14873e050_LeftCheat(16LL,jule::Str("88817841970012523233890533447265625", 35)),_14873e050_LeftCheat(16LL,jule::Str("444089209850062616169452667236328125", 36)),_14873e050_LeftCheat(16LL,jule::Str("2220446049250313080847263336181640625", 37)),_14873e050_LeftCheat(16LL,jule::Str("11102230246251565404236316680908203125", 38)),_14873e050_LeftCheat(17LL,jule::Str("55511151231257827021181583404541015625", 38)),_14873e050_LeftCheat(17LL,jule::Str("277555756156289135105907917022705078125", 39)),_14873e050_LeftCheat(17LL,jule::Str("1387778780781445675529539585113525390625", 40)),_14873e050_LeftCheat(18LL,jule::Str("6938893903907228377647697925567626953125", 40)),_14873e050_LeftCheat(18LL,jule::Str("34694469519536141888238489627838134765625", 41)),_14873e050_LeftCheat(18LL,jule::Str("173472347597680709441192448139190673828125", 42)),_14873e050_LeftCheat(19LL,jule::Str("867361737988403547205962240695953369140625", 42))});
static jule::Array<jule::Str,4> _148682040_CPP_HEADER_EXTS = jule::Array<jule::Str,4>({jule::Str(".h", 2),jule::Str(".hpp", 4),jule::Str(".hxx", 4),jule::Str(".hh", 3)});
static jule::Array<jule::Str,3> _148682040_CPP_EXTS = jule::Array<jule::Str,3>({jule::Str(".cpp", 4),jule::Str(".cc", 3),jule::Str(".cxx", 4)});
static jule::Array<jule::Str,1> _148682040_OBJECTIVE_CPP_EXTS = jule::Array<jule::Str,1>({jule::Str(".mm", 3)});
static jule::Array<jule::Str,6> _149036e70_DIRECTIVES = jule::Array<jule::Str,6>({jule::Str("cdef", 4),jule::Str("typedef", 7),jule::Str("derive", 6),jule::Str("pass", 4),jule::Str("build", 5),jule::Str("namespace", 9)});
static jule::Array<jule::Str,3> _14903a5c0_DISTOS = jule::Array<jule::Str,3>({jule::Str("windows", 7),jule::Str("linux", 5),jule::Str("darwin", 6)});
static jule::Array<jule::Str,3> _14903a5c0_DISTARCH = jule::Array<jule::Str,3>({jule::Str("arm64", 5),jule::Str("amd64", 5),jule::Str("i386", 4)});
static jule::Str _149048970_OS = jule::Str("linux", 5);
static jule::Str _149048970_ARCH = jule::Str("amd64", 5);
static jule::Str _149048970_PATH_STDLIB = jule::Str("", 0);
static jule::Str _149048970_PATH_EXEC = jule::Str("", 0);
static jule::Str _149048970_PATH_WD = jule::Str("", 0);
static jule::Str _149048970_PATH_API = jule::Str("", 0);
static jule::Array<jule::U8,256> _103458e80_FIRST = jule::Array<jule::U8,256>({});
static jule::Array<_103458e80_accept_range,16> _103458e80_ACCEPT_RANGES = jule::Array<_103458e80_accept_range,16>({_103458e80_accept_range(128LLU,191LLU),_103458e80_accept_range(160LLU,191LLU),_103458e80_accept_range(128LLU,159LLU),_103458e80_accept_range(144LLU,191LLU),_103458e80_accept_range(128LLU,143LLU)});
static jule::Array<jule::I32,33> _108e15ff0_PUNCTS = jule::Array<jule::I32,33>({'!','#','$',',','.','\'','\"',':',';','<','>','=','?','-','+','*','(',')','[',']','{','}','%','&','/','\\','@','^','_','`','|','~',166LL});
static jule::Array<jule::I32,5> _108e15ff0_SPACES = jule::Array<jule::I32,5>({' ','\t','\v','\r','\n'});
static jule::Array<jule::Str,6> _108e15ff0_UNARY_OPS = jule::Array<jule::Str,6>({jule::Str("-", 1),jule::Str("+", 1),jule::Str("^", 1),jule::Str("!", 1),jule::Str("*", 1),jule::Str("&", 1)});
static jule::Array<jule::Str,13> _108e15ff0_BIN_OPS = jule::Array<jule::Str,13>({jule::Str("+", 1),jule::Str("-", 1),jule::Str("*", 1),jule::Str("/", 1),jule::Str("%", 1),jule::Str("&", 1),jule::Str("|", 1),jule::Str("^", 1),jule::Str("<", 1),jule::Str(">", 1),jule::Str("!", 1),jule::Str("&&", 2),jule::Str("||", 2)});
static jule::Array<jule::Str,2> _108e15ff0_WEAK_OPS = jule::Array<jule::Str,2>({jule::Str("...", 3),jule::Str(":", 1)});
static jule::Array<jule::Str,2> _108e15ff0_POSTFIX_OPS = jule::Array<jule::Str,2>({jule::Str("++", 2),jule::Str("--", 2)});
static jule::Array<jule::Str,11> _108e15ff0_ASSING_OPS = jule::Array<jule::Str,11>({jule::Str("=", 1),jule::Str("+=", 2),jule::Str("-=", 2),jule::Str("/=", 2),jule::Str("*=", 2),jule::Str("%=", 2),jule::Str(">>=", 3),jule::Str("<<=", 3),jule::Str("|=", 2),jule::Str("&=", 2),jule::Str("^=", 2)});
static jule::Array<_108e171c0_KindPair,46> _108e171c0_KEYWORDS = jule::Array<_108e171c0_KindPair,46>({_108e171c0_KindPair(jule::Str("i8", 2),1LLU),_108e171c0_KindPair(jule::Str("i16", 3),1LLU),_108e171c0_KindPair(jule::Str("i32", 3),1LLU),_108e171c0_KindPair(jule::Str("i64", 3),1LLU),_108e171c0_KindPair(jule::Str("u8", 2),1LLU),_108e171c0_KindPair(jule::Str("u16", 3),1LLU),_108e171c0_KindPair(jule::Str("u32", 3),1LLU),_108e171c0_KindPair(jule::Str("u64", 3),1LLU),_108e171c0_KindPair(jule::Str("f32", 3),1LLU),_108e171c0_KindPair(jule::Str("f64", 3),1LLU),_108e171c0_KindPair(jule::Str("uint", 4),1LLU),_108e171c0_KindPair(jule::Str("int", 3),1LLU),_108e171c0_KindPair(jule::Str("uintptr", 7),1LLU),_108e171c0_KindPair(jule::Str("bool", 4),1LLU),_108e171c0_KindPair(jule::Str("str", 3),1LLU),_108e171c0_KindPair(jule::Str("any", 3),1LLU),_108e171c0_KindPair(jule::Str("true", 4),6LLU),_108e171c0_KindPair(jule::Str("false", 5),6LLU),_108e171c0_KindPair(jule::Str("nil", 3),6LLU),_108e171c0_KindPair(jule::Str("const", 5),9LLU),_108e171c0_KindPair(jule::Str("ret", 3),4LLU),_108e171c0_KindPair(jule::Str("type", 4),10LLU),_108e171c0_KindPair(jule::Str("for", 3),12LLU),_108e171c0_KindPair(jule::Str("break", 5),13LLU),_108e171c0_KindPair(jule::Str("continue", 8),14LLU),_108e171c0_KindPair(jule::Str("in", 2),15LLU),_108e171c0_KindPair(jule::Str("if", 2),16LLU),_108e171c0_KindPair(jule::Str("else", 4),17LLU),_108e171c0_KindPair(jule::Str("use", 3),19LLU),_108e171c0_KindPair(jule::Str("pub", 3),21LLU),_108e171c0_KindPair(jule::Str("goto", 4),22LLU),_108e171c0_KindPair(jule::Str("enum", 4),24LLU),_108e171c0_KindPair(jule::Str("struct", 6),25LLU),_108e171c0_KindPair(jule::Str("co", 2),26LLU),_108e171c0_KindPair(jule::Str("match", 5),27LLU),_108e171c0_KindPair(jule::Str("self", 4),28LLU),_108e171c0_KindPair(jule::Str("trait", 5),29LLU),_108e171c0_KindPair(jule::Str("impl", 4),30LLU),_108e171c0_KindPair(jule::Str("cpp", 3),31LLU),_108e171c0_KindPair(jule::Str("fall", 4),32LLU),_108e171c0_KindPair(jule::Str("fn", 2),33LLU),_108e171c0_KindPair(jule::Str("let", 3),34LLU),_108e171c0_KindPair(jule::Str("unsafe", 6),35LLU),_108e171c0_KindPair(jule::Str("mut", 3),36LLU),_108e171c0_KindPair(jule::Str("defer", 5),37LLU),_108e171c0_KindPair(jule::Str("static", 6),38LLU)});
static jule::Array<_108e171c0_KindPair,38> _108e171c0_BASIC_OPS = jule::Array<_108e171c0_KindPair,38>({_108e171c0_KindPair(jule::Str("::", 2),23LLU),_108e171c0_KindPair(jule::Str(":", 1),11LLU),_108e171c0_KindPair(jule::Str(";", 1),5LLU),_108e171c0_KindPair(jule::Str(",", 1),8LLU),_108e171c0_KindPair(jule::Str("...", 3),7LLU),_108e171c0_KindPair(jule::Str(".", 1),20LLU),_108e171c0_KindPair(jule::Str("+=", 2),7LLU),_108e171c0_KindPair(jule::Str("-=", 2),7LLU),_108e171c0_KindPair(jule::Str("*=", 2),7LLU),_108e171c0_KindPair(jule::Str("/=", 2),7LLU),_108e171c0_KindPair(jule::Str("%=", 2),7LLU),_108e171c0_KindPair(jule::Str("<<=", 3),7LLU),_108e171c0_KindPair(jule::Str(">>=", 3),7LLU),_108e171c0_KindPair(jule::Str("^=", 2),7LLU),_108e171c0_KindPair(jule::Str("&=", 2),7LLU),_108e171c0_KindPair(jule::Str("|=", 2),7LLU),_108e171c0_KindPair(jule::Str("==", 2),7LLU),_108e171c0_KindPair(jule::Str("!=", 2),7LLU),_108e171c0_KindPair(jule::Str(">=", 2),7LLU),_108e171c0_KindPair(jule::Str("<=", 2),7LLU),_108e171c0_KindPair(jule::Str("&&", 2),7LLU),_108e171c0_KindPair(jule::Str("||", 2),7LLU),_108e171c0_KindPair(jule::Str("<<", 2),7LLU),_108e171c0_KindPair(jule::Str(">>", 2),7LLU),_108e171c0_KindPair(jule::Str("++", 2),7LLU),_108e171c0_KindPair(jule::Str("--", 2),7LLU),_108e171c0_KindPair(jule::Str("+", 1),7LLU),_108e171c0_KindPair(jule::Str("-", 1),7LLU),_108e171c0_KindPair(jule::Str("*", 1),7LLU),_108e171c0_KindPair(jule::Str("/", 1),7LLU),_108e171c0_KindPair(jule::Str("%", 1),7LLU),_108e171c0_KindPair(jule::Str("&", 1),7LLU),_108e171c0_KindPair(jule::Str("|", 1),7LLU),_108e171c0_KindPair(jule::Str("^", 1),7LLU),_108e171c0_KindPair(jule::Str("!", 1),7LLU),_108e171c0_KindPair(jule::Str("<", 1),7LLU),_108e171c0_KindPair(jule::Str(">", 1),7LLU),_108e171c0_KindPair(jule::Str("=", 1),7LLU)});
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_OUT = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns());
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_OUTLN = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns());
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_NEW = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns());
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_DROP = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns());
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_PANIC = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns());
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_MAKE = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns());
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_APPEND = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns());
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_RECOVER = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns());
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_CLONE = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns());
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_STD_MEM_SIZE_OF = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns());
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_STD_MEM_ALIGN_OF = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns());
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_REAL = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>(),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Fn<jule::Ref<_1191dc300_Data>(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>)>(),jule::Bool(),jule::Bool()));
static jule::Ref<_1037649f0_FnIns> _104b4ffd0_BUILTIN_FN_COPY = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>(),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("int", 3)))),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Fn<jule::Ref<_1191dc300_Data>(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>)>(),jule::Bool(),jule::Bool()));
static jule::Ref<_104a21a10_TypeAlias> _104b4ffd0_BUILTIN_TYPE_ALIAS_BYTE = jule::new_struct<_104a21a10_TypeAlias>(new( std::nothrow ) _104a21a10_TypeAlias(jule::Ref<_1487f5920_ScopeTree>(),true,jule::Bool(),jule::Bool(),_108e15ff0_Token(),jule::Str(),jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("u8", 2)))))),jule::Str(),jule::Slice<jule::Any>()));
static jule::Ref<_104a21a10_TypeAlias> _104b4ffd0_BUILTIN_TYPE_ALIAS_RUNE = jule::new_struct<_104a21a10_TypeAlias>(new( std::nothrow ) _104a21a10_TypeAlias(jule::Ref<_1487f5920_ScopeTree>(),true,jule::Bool(),jule::Bool(),_108e15ff0_Token(),jule::Str(),jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i32", 3)))))),jule::Str(),jule::Slice<jule::Any>()));
static jule::Ref<_1036e5da0_Trait> _104b4ffd0_BUILTIN_TRAIT_ERROR = jule::new_struct<_1036e5da0_Trait>(new( std::nothrow ) _1036e5da0_Trait(_108e15ff0_Token(),jule::Str("Error", 5),true,jule::Str(),jule::Slice<jule::Ref<_1037649f0_Fn>>({jule::new_struct<_1037649f0_Fn>(new( std::nothrow ) _1037649f0_Fn(jule::Ref<_119177e90_Sema>(),_108e15ff0_Token(),jule::Bool(),jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str("error", 5),jule::Slice<jule::Ref<_1487f5920_Directive>>(),jule::Str(),jule::Ref<_1487f5920_ScopeTree>(),jule::Slice<jule::Ref<_1487f5920_GenericDecl>>(),jule::new_struct<_1037649f0_RetType>(new( std::nothrow ) _1037649f0_RetType(jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_108e15ff0_Token(),jule::Any(jule::new_struct<_1487f5920_IdentTypeDecl>(new( std::nothrow ) _1487f5920_IdentTypeDecl(_108e15ff0_Token(),jule::Str("str", 3),jule::Bool(),jule::Slice<jule::Ref<_1487f5920_TypeDecl>>()))))),jule::Ref<_104a21a10_TypeKind>())),jule::Slice<_108e15ff0_Token>())),jule::Slice<jule::Ref<_1037649f0_Param>>({jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("self", 4)))}),jule::Ref<_1037370d0_Struct>(),jule::Slice<jule::Ref<_1037649f0_FnIns>>()))}),jule::Slice<jule::Ref<_1037370d0_Struct>>()));
static jule::Slice<jule::Str> _108e075a0_FLAGS = nullptr;
static jule::Slice<jule::Any> _1086aaa30_deads = nullptr;
static jule::Slice<jule::Any> _1086aaa30_checking = nullptr;
static jule::Any _1086aaa30_current = jule::Any(nullptr);
static jule::Any _1086aaa30_main_current = jule::Any(nullptr);
static jule::Slice<jule::Str> _104862e90_OPTIMIZATIONS = nullptr;
static jule::U64 _1190c5fe0_INDENT = 0LLU;

inline void _148624eb0_AnsiEscape::_static_method_reset(void) {
	jule::out(jule::Str("\033[0m", 4));
}



inline void _148624eb0_AnsiEscape::_static_method_print(jule::Str _2021_escape,jule::Str _2034_text) {
	jule::out(_2021_escape);
	jule::out(_2034_text);
	_148624eb0_AnsiEscape::_static_method_reset();
}







std::ostream &operator<<(std::ostream &_Stream, const _148624eb0_AnsiEscape &_Src) {
	_Stream << "AnsiEscape{";
	_Stream << "}";
	return _Stream;
}



inline void _148624eb0_Logger::_static_method_log_flat(_1486379e0_Log& _3125_l) {
	jule::outln(_3125_l._field_text);
}



inline void _148624eb0_Logger::_static_method_log_error(_1486379e0_Log& _3426_l) {
	jule::out(jule::Str("\033[31m", 5));
	jule::out(jule::Str("error: ", 7));
	jule::out(_3426_l._field_text);
	_148624eb0_AnsiEscape::_static_method_reset();
	jule::out(jule::Str("\n  --> ", 7));
	jule::out(_3426_l._field_path);
	jule::out(jule::Str(":", 1));
	jule::out(_1486fb320_itoa(_3426_l._field_row));
	jule::out(jule::Str(":", 1));
	jule::out(_1486fb320_itoa(_3426_l._field_column));
	if (_3426_l._field_line.len() != 0LL) {
		jule::Str _4721_line = _3426_l._field_line.ltrim(jule::Str("\r\n\v\b ", 5));
		jule::I64 _4821_offset = (_3426_l._field_line.len() - _4721_line.len()) + 1LL;
		jule::I64 _4921_old_len = _4721_line.len();
		_4721_line=_4721_line.ltrim(jule::Str("\t", 1));
		if (_4921_old_len != _4721_line.len()) {
			_4821_offset+=static_cast<jule::I64>((_4921_old_len - _4721_line.len()) * 8LL);
		}
		jule::out(jule::Str("\n  ", 3));
		jule::Str _5517_row = _1486fb320_itoa(_3426_l._field_row);
		jule::out(_5517_row);
		jule::out(jule::Str(" | ", 3));
		jule::out(_4721_line);
		jule::out(jule::Str("\n  ", 3));
		jule::out(_1486094f0_str_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_5517_row.len())));
		jule::out(jule::Str(" | ", 3));
		jule::out(_1486094f0_str_repeat(jule::Str(" ", 1),static_cast<jule::Int>(_3426_l._field_column - _4821_offset)));
		jule::out(jule::Str("^", 1));
		if (_3426_l._field_suggestion.len() != 0LL) {
			jule::out(jule::Str("\n  ", 3));
			jule::out(_1486094f0_str_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_5517_row.len())));
			jule::out(jule::Str(" | ", 3));
			_148624eb0_AnsiEscape::_static_method_print(jule::Str("\033[95m", 5),jule::Str("suggestion: ", 12));
			jule::out(_3426_l._field_suggestion);
		}
	}
	jule::outln(jule::Str("\n", 1));
}



inline void _148624eb0_Logger::_static_method_log(_1486379e0_Log& _7620_l) {
	{
		auto _match_expr{ _7620_l._field_kind };
		if (!((0LLU) == _match_expr)) { goto _case_end_4397523232; }
		_case_begin_4397523232:;
		{
			_148624eb0_Logger::_static_method_log_flat(_7620_l);
		}
		goto _match_end_4397521872;
		_case_end_4397523232:;
		if (!((1LLU) == _match_expr)) { goto _case_end_4397523360; }
		_case_begin_4397523360:;
		{
			_148624eb0_Logger::_static_method_log_error(_7620_l);
		}
		goto _match_end_4397521872;
		_case_end_4397523360:;
		_match_end_4397521872:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _148624eb0_Logger &_Src) {
	_Stream << "Logger{";
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _149060fe0_LazyBuff::_method_index(jule::Int _5324_i) {
	if ((*this)._field_buff != nullptr) {
		return (*this)._field_buff[static_cast<jule::Int>(_5324_i)];
	}
	return (*this)._field_path[static_cast<jule::Int>(_5324_i)];
}



inline void _149060fe0_LazyBuff::_method_append(jule::U8 _6025_c) {
	if ((*this)._field_buff == nullptr) {
		if (((*this)._field_w < (*this)._field_path.len()) && ((*this)._field_path[static_cast<jule::Int>((*this)._field_w)] == _6025_c)) {
			((*this)._field_w)++;
			return;
		}
		(*this)._field_buff=jule::Slice<jule::U8>::alloc(static_cast<jule::Int>(static_cast<jule::I64>((*this)._field_path.len())));
		copy((*this)._field_buff,static_cast<jule::Slice<jule::U8>>((*this)._field_path.slice(0LL,static_cast<jule::Int>((*this)._field_w))));
	}
	(*this)._field_buff[static_cast<jule::Int>((*this)._field_w)]=_6025_c;
	((*this)._field_w)++;
}



inline jule::Str _149060fe0_LazyBuff::_method_string(void) {
	if ((*this)._field_buff == nullptr) {
		return (*this)._field_vol_and_path.slice(0LL,static_cast<jule::Int>((*this)._field_vol_len + (*this)._field_w));
	}
	return (*this)._field_vol_and_path.slice(0LL,static_cast<jule::Int>((*this)._field_vol_len)) + static_cast<jule::Str>((*this)._field_buff.slice(0LL,static_cast<jule::Int>((*this)._field_w)));
}







std::ostream &operator<<(std::ostream &_Stream, const _149060fe0_LazyBuff &_Src) {
	_Stream << "LazyBuff{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "buff:" << _Src._field_buff << ", ";
	_Stream << "w:" << _Src._field_w << ", ";
	_Stream << "vol_and_path:" << _Src._field_vol_and_path << ", ";
	_Stream << "vol_len:" << _Src._field_vol_len;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _108d53590_bits_error::_method_error(void) {
	return jule::Str("runtime error: ", 15) + (*this)._field_message;
}







std::ostream &operator<<(std::ostream &_Stream, const _108d53590_bits_error &_Src) {
	_Stream << "bits_error{";
	_Stream << "message:" << _Src._field_message;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11863fd30_FloatInfo &_Src) {
	_Stream << "FloatInfo{";
	_Stream << "mantbits:" << _Src._field_mantbits << ", ";
	_Stream << "expbits:" << _Src._field_expbits << ", ";
	_Stream << "bias:" << _Src._field_bias;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11863fd30_DecimalSlice &_Src) {
	_Stream << "DecimalSlice{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _14873e050_LeftCheat &_Src) {
	_Stream << "LeftCheat{";
	_Stream << "delta:" << _Src._field_delta << ", ";
	_Stream << "cutoff:" << _Src._field_cutoff;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _14873e050_Decimal::_method_set(jule::Str _22922_s) {
	jule::Bool _22932_ok = jule::Bool();
	jule::Int _23017_i = 0LL;
	(*this)._field_neg=false;
	(*this)._field_trunc=false;
	if (_23017_i >= _22922_s.len()) {
		return _22932_ok;
	}
	{
		if (!((_22922_s[static_cast<jule::Int>(_23017_i)] == '+'))) { goto _case_end_4384316752; }
		_case_begin_4384316752:;
		{
			(_23017_i)++;
		}
		goto _match_end_4384317280;
		_case_end_4384316752:;
		if (!((_22922_s[static_cast<jule::Int>(_23017_i)] == '-'))) { goto _case_end_4384316880; }
		_case_begin_4384316880:;
		{
			(*this)._field_neg=true;
			(_23017_i)++;
		}
		goto _match_end_4384317280;
		_case_end_4384316880:;
		_match_end_4384317280:;
	}
	jule::Bool _24717_sawdot = false;
	jule::Bool _24817_sawdigits = false;
	_iter_begin_4384320976:;
	if (!(_23017_i < _22922_s.len())) { goto _iter_end_4384320976; }
	{
		{
			if (!((_22922_s[static_cast<jule::Int>(_23017_i)] == '.'))) { goto _case_end_4384323616; }
			_case_begin_4384323616:;
			{
				if (_24717_sawdot) {
					return _22932_ok;
				}
				_24717_sawdot=true;
				(*this)._field_dp=(*this)._field_nd;
				goto _iter_next_4384320976;
			}
			goto _match_end_4384323424;
			_case_end_4384323616:;
			if (!((('0' <= _22922_s[static_cast<jule::Int>(_23017_i)]) && (_22922_s[static_cast<jule::Int>(_23017_i)] <= '9')))) { goto _case_end_4384323744; }
			_case_begin_4384323744:;
			{
				_24817_sawdigits=true;
				if ((_22922_s[static_cast<jule::Int>(_23017_i)] == '0') && ((*this)._field_nd == 0LL)) {
					((*this)._field_dp)--;
					goto _iter_next_4384320976;
				}
				if ((*this)._field_nd < 800LL) {
					(*this)._field_d[static_cast<jule::Int>((*this)._field_nd)]=_22922_s[static_cast<jule::Int>(_23017_i)];
					((*this)._field_nd)++;
				} else if (_22922_s[static_cast<jule::Int>(_23017_i)] != '0') {
					(*this)._field_trunc=true;
				}
				goto _iter_next_4384320976;
			}
			goto _match_end_4384323424;
			_case_end_4384323744:;
			_match_end_4384323424:;
		}
		goto _iter_end_4384320976;
	}
	_iter_next_4384320976:;
	(_23017_i)++;
	goto _iter_begin_4384320976;
	_iter_end_4384320976:;
	if ((!(_24817_sawdigits))) {
		return _22932_ok;
	}
	if ((!(_24717_sawdot))) {
		(*this)._field_dp=(*this)._field_nd;
	}
	if ((_23017_i < _22922_s.len()) && (_1186cfb10_lower(_22922_s[static_cast<jule::Int>(_23017_i)]) == 'e')) {
		(_23017_i)++;
		if (_23017_i >= _22922_s.len()) {
			return _22932_ok;
		}
		jule::Int _29121_esign = 1LL;
		if (_22922_s[static_cast<jule::Int>(_23017_i)] == '+') {
			(_23017_i)++;
		} else if (_22922_s[static_cast<jule::Int>(_23017_i)] == '-') {
			(_23017_i)++;
			_29121_esign=-1LL;
		}
		if (((_23017_i >= _22922_s.len()) || (_22922_s[static_cast<jule::Int>(_23017_i)] < '0')) || (_22922_s[static_cast<jule::Int>(_23017_i)] > '9')) {
			return _22932_ok;
		}
		jule::Int _30121_e = 0LL;
		_iter_begin_4384345184:;
		if (!((_23017_i < _22922_s.len()) && (('0' <= _22922_s[static_cast<jule::Int>(_23017_i)]) && (_22922_s[static_cast<jule::Int>(_23017_i)] <= '9')))) { goto _iter_end_4384345184; }
		{
			if (_30121_e < 10000LL) {
				_30121_e=static_cast<jule::Int>(((_30121_e * 10LL) + static_cast<jule::Int>(_22922_s[static_cast<jule::Int>(_23017_i)])) - '0');
			}
		}
		_iter_next_4384345184:;
		(_23017_i)++;
		goto _iter_begin_4384345184;
		_iter_end_4384345184:;
		(*this)._field_dp+=static_cast<jule::Int>(_30121_e * _29121_esign);
	}
	if (_23017_i != _22922_s.len()) {
		return _22932_ok;
	}
	_22932_ok=true;
	return _22932_ok;
}



inline std::tuple<jule::U64,jule::Bool> _14873e050_Decimal::_method_float_bits(_11863fd30_FloatInfo& _31830_flt) {
	jule::Bool _31856_overflow = jule::Bool();
	jule::U64 _31848_b = jule::U64();
	jule::Int _31917_exp = 0LL;
	jule::U64 _32017_mant = 0LLU;
	if ((*this)._field_nd == 0LL) {
		_32017_mant=0LL;
		_31917_exp=_31830_flt._field_bias;
		goto _julec_label_out;
	}
	if ((*this)._field_dp > 310LL) {
		goto _julec_label_overflow;
	}
	if ((*this)._field_dp < -330LL) {
		_32017_mant=0LL;
		_31917_exp=_31830_flt._field_bias;
		goto _julec_label_out;
	}
	_31917_exp=0LL;
	_iter_begin_4384365536:;
	if (!((*this)._field_dp > 0LL)) { goto _iter_end_4384365536; }
	{
		jule::Int _34521_n = 0LL;
		if ((*this)._field_dp >= _1186f6b70_POWTAB.len()) {
			_34521_n=27LL;
		} else {
			_34521_n=_1186f6b70_POWTAB[static_cast<jule::Int>((*this)._field_dp)];
		}
		(*this)._method_shift(static_cast<jule::Int>((-(_34521_n))));
		_31917_exp+=_34521_n;
	}
	_iter_next_4384365536:;
	goto _iter_begin_4384365536;
	_iter_end_4384365536:;
	_iter_begin_4384367744:;
	if (!(((*this)._field_dp < 0LL) || (((*this)._field_dp == 0LL) && ((*this)._field_d[0LL] < '5')))) { goto _iter_end_4384367744; }
	{
		jule::Int _35521_n = 0LL;
		if ((-((*this)._field_dp)) >= _1186f6b70_POWTAB.len()) {
			_35521_n=27LL;
		} else {
			_35521_n=_1186f6b70_POWTAB[static_cast<jule::Int>((-((*this)._field_dp)))];
		}
		(*this)._method_shift(_35521_n);
		_31917_exp-=_35521_n;
	}
	_iter_next_4384367744:;
	goto _iter_begin_4384367744;
	_iter_end_4384367744:;
	(_31917_exp)--;
	if (_31917_exp < (_31830_flt._field_bias + 1LL)) {
		jule::Int _37217_n = (_31830_flt._field_bias + 1LL) - _31917_exp;
		(*this)._method_shift(static_cast<jule::Int>((-(_37217_n))));
		_31917_exp+=_37217_n;
	}
	if ((_31917_exp - _31830_flt._field_bias) >= ((1LL << _31830_flt._field_expbits) - 1LL)) {
		goto _julec_label_overflow;
	}
	(*this)._method_shift(static_cast<jule::Int>(1LL + _31830_flt._field_mantbits));
	_32017_mant=static_cast<jule::U64>((*this)._method_rounded_integer());
	if (_32017_mant == (2LL << _31830_flt._field_mantbits)) {
		_32017_mant>>=1LL;
		(_31917_exp)++;
		if ((_31917_exp - _31830_flt._field_bias) >= ((1LL << _31830_flt._field_expbits) - 1LL)) {
			goto _julec_label_overflow;
		}
	}
	if ((_32017_mant & (1LL << _31830_flt._field_mantbits)) == 0LL) {
		_31917_exp=_31830_flt._field_bias;
	}
	goto _julec_label_out;
	_julec_label_overflow:;
	_32017_mant=0LL;
	_31917_exp=static_cast<jule::Int>(((1LL << _31830_flt._field_expbits) - 1LL) + _31830_flt._field_bias);
	_31856_overflow=true;
	_julec_label_out:;
	jule::U64 _40817_bits = _32017_mant & ((static_cast<jule::U64>(1LLU) << _31830_flt._field_mantbits) - 1LL);
	_40817_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_31917_exp - _31830_flt._field_bias) & ((1LL << _31830_flt._field_expbits) - 1LL)) << _31830_flt._field_mantbits);
	if ((*this)._field_neg) {
		_40817_bits|=static_cast<jule::Int>((1LL << _31830_flt._field_mantbits) << _31830_flt._field_expbits);
	}
	_31848_b = _40817_bits;
	_31856_overflow = _31856_overflow;
	return std::make_tuple(_31848_b,_31856_overflow);
}



inline void _14873e050_Decimal::_method_assign(jule::U64 _15229_v) {
	jule::Array<jule::U8,24> _15317_buf = jule::Array<jule::U8,24>({});
	jule::Int _15617_n = 0LL;
	_iter_begin_4384405776:;
	if (!(_15229_v > 0LL)) { goto _iter_end_4384405776; }
	{
		jule::U64 _15817_v1 = jule::div(_15229_v,10LL);
		_15229_v-=static_cast<jule::U64>(10LL * _15817_v1);
		_15317_buf[static_cast<jule::Int>(_15617_n)]=static_cast<jule::U8>(_15229_v + '0');
		(_15617_n)++;
		_15229_v=_15817_v1;
	}
	_iter_next_4384405776:;
	goto _iter_begin_4384405776;
	_iter_end_4384405776:;
	(*this)._field_nd=0LL;
	(_15617_n)--;
	_iter_begin_4384409520:;
	if (!(_15617_n >= 0LL)) { goto _iter_end_4384409520; }
	{
		(*this)._field_d[static_cast<jule::Int>((*this)._field_nd)]=_15317_buf[static_cast<jule::Int>(_15617_n)];
		((*this)._field_nd)++;
	}
	_iter_next_4384409520:;
	(_15617_n)--;
	goto _iter_begin_4384409520;
	_iter_end_4384409520:;
	(*this)._field_dp=(*this)._field_nd;
	_14873e050_trim((*this));
}



inline void _14873e050_Decimal::_method_shift(jule::Int _17728_k) {
	{
		if (!(((*this)._field_nd == 0LL))) { goto _case_end_4384416192; }
		goto _match_end_4384415984;
		_case_end_4384416192:;
		if (!((_17728_k > 0LL))) { goto _case_end_4384416320; }
		_case_begin_4384416320:;
		{
			_iter_begin_4384417376:;
			if (!(_17728_k > 60LL)) { goto _iter_end_4384417376; }
			{
				_14873e050_left_shift((*this),60LLU);
				_17728_k-=60LL;
			}
			_iter_next_4384417376:;
			goto _iter_begin_4384417376;
			_iter_end_4384417376:;
			_14873e050_left_shift((*this),static_cast<jule::Uint>(_17728_k));
		}
		goto _match_end_4384415984;
		_case_end_4384416320:;
		if (!((_17728_k < 0LL))) { goto _case_end_4384416448; }
		_case_begin_4384416448:;
		{
			_iter_begin_4384417232:;
			if (!(_17728_k < -60LL)) { goto _iter_end_4384417232; }
			{
				_14873e050_right_shift((*this),60LLU);
				_17728_k+=60LL;
			}
			_iter_next_4384417232:;
			goto _iter_begin_4384417232;
			_iter_end_4384417232:;
			_14873e050_right_shift((*this),static_cast<jule::Uint>((-(_17728_k))));
		}
		goto _match_end_4384415984;
		_case_end_4384416448:;
		_match_end_4384415984:;
	}
}



inline void _14873e050_Decimal::_method_round_down(jule::Int _19729_nd) {
	if ((_19729_nd < 0LL) || (_19729_nd >= (*this)._field_nd)) {
		return;
	}
	(*this)._field_nd=_19729_nd;
	_14873e050_trim((*this));
}



inline void _14873e050_Decimal::_method_round_up(jule::Int _20627_nd) {
	if ((_20627_nd < 0LL) || (_20627_nd >= (*this)._field_nd)) {
		return;
	}
	jule::Int _21217_i = _20627_nd - 1LL;
	_iter_begin_4384428864:;
	if (!(_21217_i >= 0LL)) { goto _iter_end_4384428864; }
	{
		jule::U8 _21417_c = (*this)._field_d[static_cast<jule::Int>(_21217_i)];
		if (_21417_c < '9') {
			((*this)._field_d[static_cast<jule::Int>(_21217_i)])++;
			(*this)._field_nd=static_cast<jule::Int>(_21217_i + 1LL);
			return;
		}
	}
	_iter_next_4384428864:;
	(_21217_i)--;
	goto _iter_begin_4384428864;
	_iter_end_4384428864:;
	(*this)._field_d[0LL]='1';
	(*this)._field_nd=1LL;
	((*this)._field_dp)++;
}



inline void _14873e050_Decimal::_method_round(jule::Int _23324_nd) {
	if ((_23324_nd < 0LL) || (_23324_nd >= (*this)._field_nd)) {
		return;
	}
	if (_14873e050_should_round_up((*this),_23324_nd)) {
		(*this)._method_round_up(_23324_nd);
	} else {
		(*this)._method_round_down(_23324_nd);
	}
}



inline jule::U64 _14873e050_Decimal::_method_rounded_integer(void) {
	if ((*this)._field_dp > 20LL) {
		return jule::MAX_U64;
	}
	jule::Int _25017_i = 0LL;
	jule::U64 _25117_n = 0LLU;
	_iter_begin_4384445200:;
	if (!((_25017_i < (*this)._field_dp) && (_25017_i < (*this)._field_nd))) { goto _iter_end_4384445200; }
	{
		_25117_n=static_cast<jule::U64>((_25117_n * 10LL) + static_cast<jule::U64>((*this)._field_d[static_cast<jule::Int>(_25017_i)] - '0'));
	}
	_iter_next_4384445200:;
	(_25017_i)++;
	goto _iter_begin_4384445200;
	_iter_end_4384445200:;
	_iter_begin_4384445952:;
	if (!(_25017_i < (*this)._field_dp)) { goto _iter_end_4384445952; }
	{
		_25117_n*=10LL;
	}
	_iter_next_4384445952:;
	(_25017_i)++;
	goto _iter_begin_4384445952;
	_iter_end_4384445952:;
	if (_14873e050_should_round_up((*this),(*this)._field_dp)) {
		(_25117_n)++;
	}
	return _25117_n;
}







std::ostream &operator<<(std::ostream &_Stream, const _14873e050_Decimal &_Src) {
	_Stream << "Decimal{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "trunc:" << _Src._field_trunc;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1486379e0_Log &_Src) {
	_Stream << "Log{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "text:" << _Src._field_text << ", ";
	_Stream << "line:" << _Src._field_line << ", ";
	_Stream << "suggestion:" << _Src._field_suggestion;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _14877ba40_DirEntry &_Src) {
	_Stream << "DirEntry{";
	_Stream << "name:" << _Src._field_name << ", ";
	_Stream << "stat:" << _Src._field_stat;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::I64,jule::Int> _1487caab0_File::_method_seek(jule::I64 _5527_offset,jule::Int _5540_origin) {
	jule::I64 _5613_pos = _118613db0_seek((*this)._field_handle,_5527_offset,static_cast<jule::Int>(_5540_origin));
	return std::make_tuple(_5613_pos,0LLU);
}



inline std::tuple<jule::Int,jule::Int> _1487caab0_File::_method_read(jule::Slice<jule::U8> _7031_buff) {
	jule::Int _7047_n = jule::Int();
	if (_7031_buff.len() == 0LL) {
		_7047_n = 0LL;
		return std::make_tuple(_7047_n,0LLU);
	}
	_7047_n=static_cast<jule::Int>(static_cast<jule::Int>(_118613db0_read((*this)._field_handle,(&(_7031_buff[0LL])),static_cast<jule::Uint>(_7031_buff.len()))));
	if (_7047_n == -1LL) {
		_7047_n=0LL;
		_7047_n = _7047_n;
		return std::make_tuple(_7047_n,_14877b170_get_last_fs_error());
	}
	_7047_n = _7047_n;
	return std::make_tuple(_7047_n,0LLU);
}



inline std::tuple<jule::Int,jule::Int> _1487caab0_File::_method_write(jule::Slice<jule::U8> _8928_buff) {
	jule::Int _8944_n = jule::Int();
	if (_8928_buff.len() == 0LL) {
		_8944_n = 0LL;
		return std::make_tuple(_8944_n,0LLU);
	}
	_8944_n=static_cast<jule::Int>(static_cast<jule::Int>(_118613db0_write((*this)._field_handle,(&(_8928_buff[0LL])),static_cast<jule::Uint>(_8928_buff.len()))));
	if (_8944_n == -1LL) {
		_8944_n=0LL;
		_8944_n = _8944_n;
		return std::make_tuple(_8944_n,_14877b170_get_last_fs_error());
	}
	_8944_n = _8944_n;
	return std::make_tuple(_8944_n,0LLU);
}



inline jule::Int _1487caab0_File::_method_close(void) {
	if (_118613db0_close((*this)._field_handle) == -1LL) {
		return _14877b170_get_last_fs_error();
	}
	return 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487caab0_File &_Src) {
	_Stream << "File{";
	_Stream << "handle:" << _Src._field_handle;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487ca390_Status::_method_is_dir(void) {
	return ((*this)._field_mode & 16384LL) == 16384LL;
}



inline jule::Bool _1487ca390_Status::_method_is_reg(void) {
	return ((*this)._field_mode & 32768LL) == 32768LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487ca390_Status &_Src) {
	_Stream << "Status{";
	_Stream << "mode:" << _Src._field_mode << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _103458e80_accept_range &_Src) {
	_Stream << "accept_range{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi;
	_Stream << "}";
	return _Stream;
}



inline jule::Int _108e15ff0_Token::_method_prec(void) {
	if ((*this)._field_id != 7LLU) {
		return -1LL;
	}
	{
		auto _match_expr{ (*this)._field_kind };
		if (!((jule::Str("*", 1)) == _match_expr || (jule::Str("%", 1)) == _match_expr || (jule::Str("/", 1)) == _match_expr || (jule::Str(">>", 2)) == _match_expr || (jule::Str("<<", 2)) == _match_expr || (jule::Str("&", 1)) == _match_expr)) { goto _case_end_4382840384; }
		_case_begin_4382840384:;
		{
			return 5LL;
		}
		goto _match_end_4382837440;
		_case_end_4382840384:;
		if (!((jule::Str("+", 1)) == _match_expr || (jule::Str("-", 1)) == _match_expr || (jule::Str("|", 1)) == _match_expr || (jule::Str("^", 1)) == _match_expr)) { goto _case_end_4382840496; }
		_case_begin_4382840496:;
		{
			return 4LL;
		}
		goto _match_end_4382837440;
		_case_end_4382840496:;
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("=", 1)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str("<=", 2)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str(">=", 2)) == _match_expr)) { goto _case_end_4382839904; }
		_case_begin_4382839904:;
		{
			return 3LL;
		}
		goto _match_end_4382837440;
		_case_end_4382839904:;
		if (!((jule::Str("&&", 2)) == _match_expr)) { goto _case_end_4382840016; }
		_case_begin_4382840016:;
		{
			return 2LL;
		}
		goto _match_end_4382837440;
		_case_end_4382840016:;
		if (!((jule::Str("||", 2)) == _match_expr)) { goto _case_end_4382840128; }
		_case_begin_4382840128:;
		{
			return 1LL;
		}
		goto _match_end_4382837440;
		_case_end_4382840128:;
		_case_begin_4382837872:;
		{
			return -1LL;
		}
		goto _match_end_4382837440;
		_case_end_4382837872:;
		_match_end_4382837440:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _108e15ff0_Token &_Src) {
	_Stream << "Token{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _108e58b50_File::_method_is_ok(void) {
	jule::Int _1917_err;
	std::tie(std::ignore,_1917_err) = _148796140_stat((*this)._field__path);
	return _1917_err == 0LLU;
}



inline void _108e58b50_File::_method_fill(jule::Slice<jule::U8> _2431_data) {
	(*this)._field_data=_2431_data;
}



inline jule::Str _108e58b50_File::_method_path(void) {
	return (*this)._field__path;
}



inline jule::Str _108e58b50_File::_method_dir(void) {
	return _149060fe0_dir((*this)._field__path);
}



inline jule::Str _108e58b50_File::_method_name(void) {
	return _149060fe0_base((*this)._field__path);
}



inline jule::Uintptr _108e58b50_File::_method_addr(void) {
	return ((jule::Uintptr)((&((*this)))));
}



inline jule::Slice<_108e15ff0_Token> _108e58b50_File::_method_tokens(void) {
	return (*this)._field__tokens;
}



inline jule::Str _108e58b50_File::_method_get_row(jule::Int _4426_row) {
	jule::Int _4517_n = 0LL;
	jule::Int _4617_line_start = 0LL;
	jule::Int _4717_i = 0LL;
	_iter_begin_4382862224:;
	if (!(_4717_i < (*this)._field_data.len())) { goto _iter_end_4382862224; }
	{
		if ((*this)._field_data[static_cast<jule::Int>(_4717_i)] != '\n') {
			goto _iter_next_4382862224;
		}
		(_4517_n)++;
		if (_4517_n == _4426_row) {
			return static_cast<jule::Str>((*this)._field_data.slice(static_cast<jule::Int>(_4617_line_start),static_cast<jule::Int>(_4717_i)));
		}
		_4617_line_start=static_cast<jule::Int>(_4717_i + 1LL);
	}
	_iter_next_4382862224:;
	(_4717_i)++;
	goto _iter_begin_4382862224;
	_iter_end_4382862224:;
	return jule::Str("", 0);
}







std::ostream &operator<<(std::ostream &_Stream, const _108e58b50_File &_Src) {
	_Stream << "File{";
	_Stream << "data:" << _Src._field_data << ", ";
	_Stream << "_path:" << _Src._field__path << ", ";
	_Stream << "_tokens:" << _Src._field__tokens;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _108e171c0_KindPair &_Src) {
	_Stream << "KindPair{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline void _108e171c0_Lex::_method_push_err(jule::Str _40227_fmt,jule::Slice<jule::Any> _40240_args) {
	(*this)._field_errors=jule::append((*this)._field_errors,jule::Slice<_1486379e0_Log>({_108e171c0_make_err((*this)._field_row,(*this)._field_column,(*this)._field_file,_40227_fmt,_40240_args)}));
}



inline void _108e171c0_Lex::_method_push_err_tok(_108e15ff0_Token _40731_token,jule::Str _40745_fmt) {
	(*this)._field_errors=jule::append((*this)._field_errors,jule::Slice<_1486379e0_Log>({_108e171c0_make_err(_40731_token._field_row,_40731_token._field_column,(*this)._field_file,_40745_fmt,jule::Slice<jule::Any>({}))}));
}



inline void _108e171c0_Lex::_method_lex(void) {
	(*this)._field_errors=nullptr;
	(*this)._method_new_line();
	_iter_begin_4382885520:;
	if (!((*this)._field_pos < (*this)._field_file->_field_data.len())) { goto _iter_end_4382885520; }
	{
		_108e15ff0_Token _41721_token = (*this)._method_token();
		if (_41721_token._field_id != 0LLU) {
			(*this)._field_tokens=jule::append((*this)._field_tokens,jule::Slice<_108e15ff0_Token>({_41721_token}));
		}
	}
	_iter_next_4382885520:;
	goto _iter_begin_4382885520;
	_iter_end_4382885520:;
}



inline jule::Str _108e171c0_Lex::_method_id(jule::Slice<jule::U8> _42621_ln) {
	if (_42621_ln.len() == 0LL) {
		return jule::Str("", 0);
	}
	if ((_42621_ln[0LL] != '_') && (!(_108e15ff0_is_letter(static_cast<jule::I32>(_42621_ln[0LL]))))) {
		return jule::Str("", 0);
	}
	{
		auto __julec_range_expr = _42621_ln;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _108e171c0_i = 0;
			jule::U8 _108e171c0_r = *__julec_range_begin;
			_iter_begin_4383606624:;
			{
				if (((_108e171c0_r != '_') && (!(_108e15ff0_is_decimal(static_cast<jule::U8>(_108e171c0_r))))) && (!(_108e15ff0_is_letter(_108e171c0_r)))) {
					return static_cast<jule::Str>(_42621_ln.slice(0LL,static_cast<jule::Int>(_108e171c0_i)));
				}
				((*this)._field_pos)++;
			}
			_iter_next_4383606624:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_108e171c0_i; _108e171c0_r = *__julec_range_begin; goto _iter_begin_4383606624; }
			_iter_end_4383606624:;
		}
	}
	return static_cast<jule::Str>(_42621_ln);
}



inline jule::Slice<jule::U8> _108e171c0_Lex::_method_resume(void) {
	jule::Int _44717_i = (*this)._field_pos;
	_iter_begin_4383613888:;
	if (!(_44717_i < (*this)._field_file->_field_data.len())) { goto _iter_end_4383613888; }
	{
		jule::I32 _44917_r = static_cast<jule::I32>((*this)._field_file->_field_data[static_cast<jule::Int>(_44717_i)]);
		if (_108e15ff0_is_space(_44917_r)) {
			((*this)._field_pos)++;
			{
				auto _match_expr{ _44917_r };
				if (!(('\n') == _match_expr)) { goto _case_end_4383620368; }
				_case_begin_4383620368:;
				{
					(*this)._method_new_line();
				}
				goto _match_end_4383618800;
				_case_end_4383620368:;
				if (!(('\t') == _match_expr)) { goto _case_end_4383620656; }
				_case_begin_4383620656:;
				{
					(*this)._field_column+=8LL;
				}
				goto _match_end_4383618800;
				_case_end_4383620656:;
				_case_begin_4383619120:;
				{
					((*this)._field_column)++;
				}
				goto _match_end_4383618800;
				_case_end_4383619120:;
				_match_end_4383618800:;
			}
			goto _iter_next_4383613888;
		}
		jule::Int _46021_j = _44717_i;
		_iter_begin_4383621952:;
		if (!(_46021_j < (*this)._field_file->_field_data.len())) { goto _iter_end_4383621952; }
		{
			if ((*this)._field_file->_field_data[static_cast<jule::Int>(_46021_j)] == '\n') {
				goto _iter_end_4383621952;
			}
		}
		_iter_next_4383621952:;
		(_46021_j)++;
		goto _iter_begin_4383621952;
		_iter_end_4383621952:;
		return (*this)._field_file->_field_data.slice(static_cast<jule::Int>(_44717_i),static_cast<jule::Int>(_46021_j));
	}
	_iter_next_4383613888:;
	(_44717_i)++;
	goto _iter_begin_4383613888;
	_iter_end_4383613888:;
	return nullptr;
}



inline void _108e171c0_Lex::_method_lex_line_comment(_108e15ff0_Token& _47240_token) {
	jule::Int _47313_start = (*this)._field_pos;
	(*this)._field_pos+=2LL;
	_iter_begin_4383632656:;
	if (!((*this)._field_pos < (*this)._field_file->_field_data.len())) { goto _iter_end_4383632656; }
	{
		jule::U8 _47717_r = (*this)._field_file->_field_data[static_cast<jule::Int>((*this)._field_pos)];
		if ((_47717_r == '\n') || (_47717_r == '\r')) {
			if ((*this)._method_is_first_token_of_line()) {
				_47240_token._field_id=18LLU;
				_47240_token._field_kind=static_cast<jule::Str>((*this)._field_file->_field_data.slice(static_cast<jule::Int>(_47313_start),static_cast<jule::Int>((*this)._field_pos)));
			}
			return;
		}
	}
	_iter_next_4383632656:;
	((*this)._field_pos)++;
	goto _iter_begin_4383632656;
	_iter_end_4383632656:;
	if ((*this)._method_is_first_token_of_line()) {
		_47240_token._field_id=18LLU;
		_47240_token._field_kind=static_cast<jule::Str>((*this)._field_file->_field_data.slice(static_cast<jule::Int>(_47313_start)));
	}
}



inline void _108e171c0_Lex::_method_lex_range_comment(void) {
	(*this)._field_pos+=2LL;
	_iter_begin_4383645792:;
	if (!((*this)._field_pos < (*this)._field_file->_field_data.len())) { goto _iter_end_4383645792; }
	{
		jule::U8 _49617_r = (*this)._field_file->_field_data[static_cast<jule::Int>((*this)._field_pos)];
		if (_49617_r == '\r') {
			goto _iter_next_4383645792;
		}
		if (_49617_r == '\n') {
			(*this)._method_new_line();
			goto _iter_next_4383645792;
		}
		(*this)._field_column+=1LL;
		if (((((*this)._field_pos + 1LL) < (*this)._field_file->_field_data.len()) && (_49617_r == '*')) && ((*this)._field_file->_field_data[static_cast<jule::Int>((*this)._field_pos + 1LL)] == '/')) {
			(*this)._field_column+=2LL;
			(*this)._field_pos+=2LL;
			return;
		}
	}
	_iter_next_4383645792:;
	((*this)._field_pos)++;
	goto _iter_begin_4383645792;
	_iter_end_4383645792:;
	(*this)._method_push_err(jule::Str("missing block comment close", 27),jule::Slice<jule::Any>({}));
}



inline jule::Str _108e171c0_Lex::_method_num(jule::Slice<jule::U8> _51722_txt) {
	jule::Str _51737_lit = jule::Str();
	_51737_lit=_108e171c0_hex_num(_51722_txt);
	if (_51737_lit != jule::Str("", 0)) {
		goto _julec_label_end;
	}
	_51737_lit=_108e171c0_octal_num(_51722_txt);
	if (_51737_lit != jule::Str("", 0)) {
		goto _julec_label_end;
	}
	_51737_lit=_108e171c0_binary_num(_51722_txt);
	if (_51737_lit != jule::Str("", 0)) {
		goto _julec_label_end;
	}
	_51737_lit=_108e171c0_common_num(_51722_txt);
	_julec_label_end:;
	(*this)._field_pos+=static_cast<jule::I64>(_51737_lit.len());
	return _51737_lit;
}



inline jule::Str _108e171c0_Lex::_method_escape_seq(jule::Slice<jule::U8> _53629_txt) {
	jule::Str _53717_seq = jule::Str("", 0);
	if (_53629_txt.len() < 2LL) {
		goto _julec_label_end;
	}
	{
		auto _match_expr{ _53629_txt[1LL] };
		if (!(('\\') == _match_expr || ('\'') == _match_expr || ('\"') == _match_expr || ('a') == _match_expr || ('b') == _match_expr || ('f') == _match_expr || ('n') == _match_expr || ('r') == _match_expr || ('t') == _match_expr || ('v') == _match_expr)) { goto _case_end_4383678752; }
		_case_begin_4383678752:;
		{
			(*this)._field_pos+=2LL;
			return static_cast<jule::Str>(_53629_txt.slice(0LL,2LL));
		}
		goto _match_end_4383675792;
		_case_end_4383678752:;
		if (!(('U') == _match_expr)) { goto _case_end_4383678864; }
		_case_begin_4383678864:;
		{
			_53717_seq=_108e171c0_big_unicode_point_escape(_53629_txt);
		}
		goto _match_end_4383675792;
		_case_end_4383678864:;
		if (!(('u') == _match_expr)) { goto _case_end_4383678976; }
		_case_begin_4383678976:;
		{
			_53717_seq=_108e171c0_little_unicode_point_escape(_53629_txt);
		}
		goto _match_end_4383675792;
		_case_end_4383678976:;
		if (!(('x') == _match_expr)) { goto _case_end_4383677520; }
		_case_begin_4383677520:;
		{
			_53717_seq=_108e171c0_hex_byte_escape(_53629_txt);
		}
		goto _match_end_4383675792;
		_case_end_4383677520:;
		_case_begin_4383676672:;
		{
			_53717_seq=_108e171c0_byte_escape(_53629_txt);
		}
		goto _match_end_4383675792;
		_case_end_4383676672:;
		_match_end_4383675792:;
	}
	_julec_label_end:;
	if (_53717_seq == jule::Str("", 0)) {
		((*this)._field_pos)++;
		(*this)._method_push_err(jule::Str("invalid escape sequence", 23),jule::Slice<jule::Any>({}));
		return jule::Str("", 0);
	}
	(*this)._field_pos+=static_cast<jule::I64>(_53717_seq.len());
	return _53717_seq;
}



inline jule::Str _108e171c0_Lex::_method_get_rune(jule::Slice<jule::U8> _57027_txt,jule::Bool _57040_raw) {
	if ((!(_57040_raw)) && (_57027_txt[0LL] == '\\')) {
		return (*this)._method_escape_seq(_57027_txt);
	}
	jule::I32 _57514_r;
	jule::Int _57517_n;
	std::tie(_57514_r,_57517_n) = _103458e80_decode_rune(_57027_txt);
	(*this)._field_pos+=_57517_n;
	return static_cast<jule::Str>(_57514_r);
}



inline jule::Str _108e171c0_Lex::_method_lex_rune(jule::Slice<jule::U8> _58027_txt) {
	jule::Str _58117_run = jule::Str("'", 1);
	((*this)._field_column)++;
	jule::Int _58317_n = 0LL;
	jule::Int _58417_i = 1LL;
	_iter_begin_4383698896:;
	if (!(_58417_i < _58027_txt.len())) { goto _iter_end_4383698896; }
	{
		if (_58027_txt[static_cast<jule::Int>(_58417_i)] == '\r') {
			goto _iter_next_4383698896;
		}
		if (_58027_txt[static_cast<jule::Int>(_58417_i)] == '\n') {
			(*this)._method_push_err(jule::Str("rune is not finished", 20),jule::Slice<jule::Any>({}));
			((*this)._field_pos)++;
			(*this)._method_new_line();
			return jule::Str("", 0);
		}
		jule::Str _59617_r = (*this)._method_get_rune(_58027_txt.slice(static_cast<jule::Int>(_58417_i)),false);
		_58117_run+=_59617_r;
		jule::I64 _59817_length = _59617_r.len();
		(*this)._field_column+=_59817_length;
		if (_59617_r == jule::Str("'", 1)) {
			((*this)._field_pos)++;
			goto _iter_end_4383698896;
		}
		if (_59817_length > 1LL) {
			_58417_i+=static_cast<jule::I64>(_59817_length - 1LL);
		}
		(_58317_n)++;
	}
	_iter_next_4383698896:;
	(_58417_i)++;
	goto _iter_begin_4383698896;
	_iter_end_4383698896:;
	if (_58317_n == 0LL) {
		(*this)._method_push_err(jule::Str("rune is cannot empty", 20),jule::Slice<jule::Any>({}));
	} else if (_58317_n > 1LL) {
		(*this)._method_push_err(jule::Str("rune is should be single", 24),jule::Slice<jule::Any>({}));
	}
	return _58117_run;
}



inline jule::Str _108e171c0_Lex::_method_lex_str(void) {
	jule::Str _62017_s = jule::Str("", 0);
	jule::U8 _62113_mark = (*this)._field_file->_field_data[static_cast<jule::Int>((*this)._field_pos)];
	((*this)._field_pos)++;
	jule::Bool _62313_raw = _62113_mark == '`';
	_62017_s+=static_cast<jule::Str>(_62113_mark);
	((*this)._field_column)++;
	_iter_begin_4383721600:;
	if (!((*this)._field_pos < (*this)._field_file->_field_data.len())) { goto _iter_end_4383721600; }
	{
		jule::U8 _62817_ch = (*this)._field_file->_field_data[static_cast<jule::Int>((*this)._field_pos)];
		if (_62817_ch == '\r') {
			goto _iter_next_4383721600;
		}
		if (_62817_ch == '\n') {
			(*this)._method_new_line();
			if ((!(_62313_raw))) {
				(*this)._method_push_err(jule::Str("string is not finished", 22),jule::Slice<jule::Any>({}));
				((*this)._field_pos)++;
				return jule::Str("", 0);
			}
		}
		jule::Str _64017_r = (*this)._method_get_rune((*this)._field_file->_field_data.slice(static_cast<jule::Int>((*this)._field_pos)),_62313_raw);
		_62017_s+=_64017_r;
		(*this)._field_column+=static_cast<jule::I64>(_64017_r.len());
		if (_62817_ch == _62113_mark) {
			goto _iter_end_4383721600;
		}
	}
	_iter_next_4383721600:;
	goto _iter_begin_4383721600;
	_iter_end_4383721600:;
	return _62017_s;
}



inline jule::Bool _108e171c0_Lex::_method_is_first_token_of_line(void) {
	return (*this)._field_column == 1LL;
}



inline void _108e171c0_Lex::_method_new_line(void) {
	((*this)._field_row)++;
	(*this)._field_column=1LL;
}



inline jule::Bool _108e171c0_Lex::_method_is_op(jule::Slice<jule::U8> _66024_txt,jule::Str _66037_kind,jule::Uint _66048_id,_108e15ff0_Token& _66066_t) {
	if ((!(_108e171c0_bytes_has_prefix(_66024_txt,_66037_kind)))) {
		return false;
	}
	_66066_t._field_kind=_66037_kind;
	_66066_t._field_id=_66048_id;
	(*this)._field_pos+=static_cast<jule::I64>(_66037_kind.len());
	return true;
}



inline jule::Bool _108e171c0_Lex::_method_lex_basic_ops(jule::Slice<jule::U8> _67132_txt,_108e15ff0_Token& _67150_tok) {
	{
		auto __julec_range_expr = _108e171c0_BASIC_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_108e171c0_KindPair _108e171c0_pair = *__julec_range_begin;
			_iter_begin_4383751520:;
			{
				if ((*this)._method_is_op(_67132_txt,_108e171c0_pair._field_kind,_108e171c0_pair._field_id,_67150_tok)) {
					return true;
				}
			}
			_iter_next_4383751520:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e171c0_pair = *__julec_range_begin; goto _iter_begin_4383751520; }
			_iter_end_4383751520:;
		}
	}
	return false;
}



inline jule::Bool _108e171c0_Lex::_method_lex_id(jule::Slice<jule::U8> _68125_txt,_108e15ff0_Token& _68143_t) {
	jule::Str _68213_lex = (*this)._method_id(_68125_txt);
	if (_68213_lex == jule::Str("", 0)) {
		return false;
	}
	_68143_t._field_kind=_68213_lex;
	_68143_t._field_id=2LLU;
	return true;
}



inline jule::Bool _108e171c0_Lex::_method_lex_num(jule::Slice<jule::U8> _69226_txt,_108e15ff0_Token& _69244_t) {
	jule::Str _69313_lex = (*this)._method_num(_69226_txt);
	if (_69313_lex == jule::Str("", 0)) {
		return false;
	}
	_69244_t._field_kind=_69313_lex;
	_69244_t._field_id=6LLU;
	return true;
}



inline _108e15ff0_Token _108e171c0_Lex::_method_token(void) {
	_108e15ff0_Token _70517_t = _108e15ff0_Token((*this)._field_file,jule::Int(),jule::Int(),jule::Str(),0LLU);
	jule::Slice<jule::U8> _70713_txt = (*this)._method_resume();
	if (_70713_txt == nullptr) {
		return _70517_t;
	}
	_70517_t._field_column=(*this)._field_column;
	_70517_t._field_row=(*this)._field_row;
	{
		if (!(((*this)._method_lex_num(_70713_txt,_70517_t)))) { goto _case_end_4383778016; }
		goto _match_end_4383772240;
		_case_end_4383778016:;
		if (!((_70713_txt[0LL] == '\''))) { goto _case_end_4383773584; }
		_case_begin_4383773584:;
		{
			_70517_t._field_kind=(*this)._method_lex_rune(_70713_txt);
			_70517_t._field_id=6LLU;
			return _70517_t;
		}
		goto _match_end_4383772240;
		_case_end_4383773584:;
		if (!(((_70713_txt[0LL] == '\"') || (_70713_txt[0LL] == '`')))) { goto _case_end_4383773696; }
		_case_begin_4383773696:;
		{
			_70517_t._field_kind=(*this)._method_lex_str();
			_70517_t._field_id=6LLU;
			return _70517_t;
		}
		goto _match_end_4383772240;
		_case_end_4383773696:;
		if (!((_108e171c0_bytes_has_prefix(_70713_txt,jule::Str("//", 2))))) { goto _case_end_4383773808; }
		_case_begin_4383773808:;
		{
			(*this)._method_lex_line_comment(_70517_t);
			return _70517_t;
		}
		goto _match_end_4383772240;
		_case_end_4383773808:;
		if (!((_108e171c0_bytes_has_prefix(_70713_txt,jule::Str("/*", 2))))) { goto _case_end_4383778320; }
		_case_begin_4383778320:;
		{
			(*this)._method_lex_range_comment();
			return _70517_t;
		}
		goto _match_end_4383772240;
		_case_end_4383778320:;
		if (!(((*this)._method_is_op(_70713_txt,jule::Str("(", 1),3LLU,_70517_t)) || ((*this)._method_is_op(_70713_txt,jule::Str(")", 1),3LLU,_70517_t)) || ((*this)._method_is_op(_70713_txt,jule::Str("{", 1),3LLU,_70517_t)) || ((*this)._method_is_op(_70713_txt,jule::Str("}", 1),3LLU,_70517_t)) || ((*this)._method_is_op(_70713_txt,jule::Str("[", 1),3LLU,_70517_t)) || ((*this)._method_is_op(_70713_txt,jule::Str("]", 1),3LLU,_70517_t)) || ((*this)._method_lex_basic_ops(_70713_txt,_70517_t)))) { goto _case_end_4383778432; }
		goto _match_end_4383772240;
		_case_end_4383778432:;
		if (!(((*this)._method_lex_id(_70713_txt,_70517_t)))) { goto _case_end_4383778544; }
		_case_begin_4383778544:;
		{
			{
				auto __julec_range_expr = _108e171c0_KEYWORDS;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					_108e171c0_KindPair _108e171c0_pair = *__julec_range_begin;
					_iter_begin_4383793072:;
					{
						if (_108e171c0_pair._field_kind == _70517_t._field_kind) {
							_70517_t._field_id=_108e171c0_pair._field_id;
							goto _iter_end_4383793072;
						}
					}
					_iter_next_4383793072:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _108e171c0_pair = *__julec_range_begin; goto _iter_begin_4383793072; }
					_iter_end_4383793072:;
				}
			}
		}
		goto _match_end_4383772240;
		_case_end_4383778544:;
		_case_begin_4383773104:;
		{
			jule::I32 _75718_r;
			jule::Int _75721_sz;
			std::tie(_75718_r,_75721_sz) = _103458e80_decode_rune(_70713_txt);
			(*this)._method_push_err(jule::Str("undefined code content: @", 25),jule::Slice<jule::Any>({jule::Any(_75718_r)}));
			((*this)._field_column)++;
			(*this)._field_pos+=_75721_sz;
			return _70517_t;
		}
		goto _match_end_4383772240;
		_case_end_4383773104:;
		_match_end_4383772240:;
	}
	(*this)._field_column+=static_cast<jule::I64>(_70517_t._field_kind.len());
	return _70517_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _108e171c0_Lex &_Src) {
	_Stream << "Lex{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f02c0_Ast &_Src) {
	_Stream << "Ast{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "top_directives:" << _Src._field_top_directives << ", ";
	_Stream << "use_decls:" << _Src._field_use_decls << ", ";
	_Stream << "impls:" << _Src._field_impls << ", ";
	_Stream << "comments:" << _Src._field_comments << ", ";
	_Stream << "decls:" << _Src._field_decls;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_CommentGroup &_Src) {
	_Stream << "CommentGroup{";
	_Stream << "comments:" << _Src._field_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_NamespaceTypeDecl &_Src) {
	_Stream << "NamespaceTypeDecl{";
	_Stream << "idents:" << _Src._field_idents << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_RefTypeDecl &_Src) {
	_Stream << "RefTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_SlcTypeDecl &_Src) {
	_Stream << "SlcTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_TupleTypeDecl &_Src) {
	_Stream << "TupleTypeDecl{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_PtrTypeDecl::_method_is_unsafe(void) {
	return (!(jule::real((*this)._field_elem)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_PtrTypeDecl &_Src) {
	_Stream << "PtrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_ArrTypeDecl::_method_auto_sized(void) {
	return (!(jule::real((*this)._field_size)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_ArrTypeDecl &_Src) {
	_Stream << "ArrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_MapTypeDecl &_Src) {
	_Stream << "MapTypeDecl{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_RetTypeDecl &_Src) {
	_Stream << "RetTypeDecl{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_TupleExpr &_Src) {
	_Stream << "TupleExpr{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_LitExpr::_method_is_nil(void) {
	return (*this)._field_value == jule::Str("nil", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_LitExpr &_Src) {
	_Stream << "LitExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_UnsafeExpr &_Src) {
	_Stream << "UnsafeExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_IdentExpr::_method_is_self(void) {
	return (*this)._field_ident == jule::Str("self", 4);
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_IdentExpr &_Src) {
	_Stream << "IdentExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_UnaryExpr &_Src) {
	_Stream << "UnaryExpr{";
	_Stream << "op:" << _Src._field_op << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_VariadicExpr &_Src) {
	_Stream << "VariadicExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_CastExpr &_Src) {
	_Stream << "CastExpr{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_NsSelectionExpr &_Src) {
	_Stream << "NsSelectionExpr{";
	_Stream << "ns:" << _Src._field_ns << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_SubIdentExpr &_Src) {
	_Stream << "SubIdentExpr{";
	_Stream << "is_self:" << _Src._field_is_self << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_BinopExpr &_Src) {
	_Stream << "BinopExpr{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_FieldExprPair::_method_is_targeted(void) {
	return (*this)._field_field._field_id != 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_FieldExprPair &_Src) {
	_Stream << "FieldExprPair{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_StructLit &_Src) {
	_Stream << "StructLit{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_BraceLit::_method_is_empty(void) {
	return (*this)._field_exprs.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_BraceLit &_Src) {
	_Stream << "BraceLit{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_KeyValPair &_Src) {
	_Stream << "KeyValPair{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val << ", ";
	_Stream << "colon:" << _Src._field_colon;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_SliceExpr::_method_is_empty(void) {
	return (*this)._field_elems.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_SliceExpr &_Src) {
	_Stream << "SliceExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_IndexingExpr &_Src) {
	_Stream << "IndexingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_SlicingExpr &_Src) {
	_Stream << "SlicingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "start:" << _Src._field_start << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_LabelSt &_Src) {
	_Stream << "LabelSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "token:" << _Src._field_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_AssignSt &_Src) {
	_Stream << "AssignSt{";
	_Stream << "declarative:" << _Src._field_declarative << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_ScopeTree &_Src) {
	_Stream << "ScopeTree{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_Iter::_method_is_inf(void) {
	return (*this)._field_kind == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_Iter &_Src) {
	_Stream << "Iter{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_WhileKind::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_WhileKind &_Src) {
	_Stream << "WhileKind{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "next_token:" << _Src._field_next_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_RangeKind &_Src) {
	_Stream << "RangeKind{";
	_Stream << "in_token:" << _Src._field_in_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "head:" << _Src._field_head << ", ";
	_Stream << "tail:" << _Src._field_tail << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_MatchCase &_Src) {
	_Stream << "MatchCase{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1190cb490_FileInfo &_Src) {
	_Stream << "FileInfo{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1190cb490_PackageInfo &_Src) {
	_Stream << "PackageInfo{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1190d5970_Stmt &_Src) {
	_Stream << "Stmt{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "terminated:" << _Src._field_terminated;
	_Stream << "}";
	return _Stream;
}



inline void _1190d5970_ScopeParser::_method_stop(void) {
	(*this)._field_pos=-1LL;
}



inline jule::Bool _1190d5970_ScopeParser::_method_stopped(void) {
	return (*this)._field_pos == -1LL;
}



inline jule::Bool _1190d5970_ScopeParser::_method_finished(void) {
	return (*this)._field_pos >= (*this)._field_stms.len();
}



inline jule::Bool _1190d5970_ScopeParser::_method_is_last_st(void) {
	return ((*this)._field_pos + 1LL) >= (*this)._field_stms.len();
}



inline void _1190d5970_ScopeParser::_method_push_err(_108e15ff0_Token _15927_token,jule::Str _15941_fmt) {
	(*this)._field_p->_method_push_err(_15927_token,_15941_fmt,jule::Slice<jule::Any>({}));
}



inline void _1190d5970_ScopeParser::_method_push_suggestion(jule::Str _16234_fmt,jule::Slice<jule::Any> _16247_args) {
	(*this)._field_p->_method_push_suggestion(_16234_fmt,_16247_args);
}



inline void _1190d5970_ScopeParser::_method_insert_as_next(jule::Slice<_108e15ff0_Token> _16637_tokens) {
	(*this)._field_stms=jule::append((*this)._field_stms.slice(0LL,static_cast<jule::Int>((*this)._field_pos + 1LL)),(*this)._field_stms.slice(static_cast<jule::Int>((*this)._field_pos)));
	(*this)._field_stms[static_cast<jule::Int>((*this)._field_pos + 1LL)]=jule::new_struct<_1190d5970_Stmt>(new( std::nothrow ) _1190d5970_Stmt(_16637_tokens,jule::Bool()));
}



inline jule::Ref<_1190d5970_Stmt> _1190d5970_ScopeParser::_method_next(void) {
	((*this)._field_pos)++;
	return (*this)._field_stms[static_cast<jule::Int>((*this)._field_pos)];
}



inline jule::Ref<_1487f5920_ScopeTree> _1190d5970_ScopeParser::_method_build_scope(jule::Slice<_108e15ff0_Token> _17634_tokens) {
	jule::Ref<_1487f5920_ScopeTree> _17717_s = _1190d5970_new_scope();
	_17717_s->_field_parent=(*this)._field_s;
	_1190d5970_ScopeParser _17917_ssp = _1190d5970_ScopeParser((*this)._field_p,jule::Ref<_1487f5920_ScopeTree>(),jule::Slice<jule::Ref<_1190d5970_Stmt>>(),jule::Int());
	_17917_ssp._method_build(_17634_tokens,_17717_s);
	return _17717_s;
}



inline jule::Any _1190d5970_ScopeParser::_method_build_var_st(jule::Slice<_108e15ff0_Token> _18635_tokens) {
	jule::Ref<_1487f5920_VarDecl> _18717_v = (*this)._field_p->_method_build_var(_18635_tokens);
	_18717_v->_field_scope=(*this)._field_s;
	return jule::Any(_18717_v);
}



inline jule::Any _1190d5970_ScopeParser::_method_build_ret_st(jule::Slice<_108e15ff0_Token> _19235_tokens) {
	jule::Ref<_1487f5920_RetSt> _19317_st = jule::new_struct<_1487f5920_RetSt>(new( std::nothrow ) _1487f5920_RetSt(_19235_tokens[0LL],jule::Ref<_1487f5920_Expr>()));
	if (_19235_tokens.len() > 1LL) {
		_19235_tokens=_19235_tokens.slice(1LL);
		_19317_st->_field_expr=(*this)._field_p->_method_build_expr(_19235_tokens);
	}
	return jule::Any(_19317_st);
}



inline jule::Any _1190d5970_ScopeParser::_method_build_while_next_iter(jule::Ref<_1190d5970_Stmt> _20344_s) {
	jule::Ref<_1487f5920_Iter> _20417_it = jule::new_struct<_1487f5920_Iter>(new( std::nothrow ) _1487f5920_Iter(_20344_s->_field_tokens[0LL],jule::Any(),jule::Ref<_1487f5920_ScopeTree>()));
	jule::Slice<_108e15ff0_Token> _20717_tokens = _20344_s->_field_tokens.slice(1LL);
	jule::Ref<_1487f5920_WhileKind> _20817_kind = jule::new_struct<_1487f5920_WhileKind>(new( std::nothrow ) _1487f5920_WhileKind());
	if (_20717_tokens.len() > 0LL) {
		_20817_kind->_field_expr=(*this)._field_p->_method_build_expr(_20717_tokens);
	}
	if ((*this)._method_is_last_st()) {
		(*this)._method_push_err(_20417_it->_field_token,jule::Str("invalid syntax", 14));
		return jule::Any(nullptr);
	}
	_20717_tokens=(*this)._method_next()->_field_tokens;
	jule::Slice<_108e15ff0_Token> _22017_st_tokens = _1190cb760_get_block_expr(_20717_tokens);
	if (_22017_st_tokens.len() > 0LL) {
		jule::Ref<_1190d5970_Stmt> _22221_s = jule::new_struct<_1190d5970_Stmt>(new( std::nothrow ) _1190d5970_Stmt(_22017_st_tokens,_20344_s->_field_terminated));
		_20817_kind->_field_next_token=_22017_st_tokens[0LL];
		_20817_kind->_field_next=(*this)._method_build_st(_22221_s);
	}
	jule::I64 _23017_i = _22017_st_tokens.len();
	jule::Slice<_108e15ff0_Token> _23117_block_tokens = _138657c70_range(_23017_i,jule::Str("{", 1),jule::Str("}", 1),_20717_tokens);
	if (_23117_block_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_20417_it->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	if (_23017_i < _20717_tokens.len()) {
		(*this)._method_push_err(_20717_tokens[static_cast<jule::Int>(_23017_i)],jule::Str("invalid syntax", 14));
	}
	_20417_it->_field_scope=(*this)._method_build_scope(_23117_block_tokens);
	_20417_it->_field_kind=jule::Any(_20817_kind);
	return jule::Any(_20417_it);
}



inline jule::Ref<_1487f5920_WhileKind> _1190d5970_ScopeParser::_method_build_while_iter_kind(jule::Slice<_108e15ff0_Token> _24844_tokens) {
	return jule::new_struct<_1487f5920_WhileKind>(new( std::nothrow ) _1487f5920_WhileKind((*this)._field_p->_method_build_expr(_24844_tokens),jule::Any(),_108e15ff0_Token()));
}



inline jule::Slice<jule::Slice<_108e15ff0_Token>> _1190d5970_ScopeParser::_method_get_range_kind_keys_tokens(jule::Slice<_108e15ff0_Token> _25449_toks) {
	jule::Slice<jule::Slice<_108e15ff0_Token>> _25518_vars;
	jule::Slice<_1486379e0_Log> _25524_errs;
	std::tie(_25518_vars,_25524_errs) = _138657c70_parts(_25449_toks,8LLU,true);
	(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_25524_errs);
	return _25518_vars;
}



inline jule::Ref<_1487f5920_VarDecl> _1190d5970_ScopeParser::_method_build_range_kind_key(jule::Slice<_108e15ff0_Token> _26043_tokens) {
	if (_26043_tokens.len() == 0LL) {
		return jule::new_ref<_1487f5920_VarDecl>();
	}
	jule::Ref<_1487f5920_VarDecl> _26417_key = jule::new_struct<_1487f5920_VarDecl>(new( std::nothrow ) _1487f5920_VarDecl(jule::Ref<_1487f5920_ScopeTree>(),_26043_tokens[0LL],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ref<_1487f5920_Directive>>(),jule::Ref<_1487f5920_CommentGroup>(),jule::Ref<_1487f5920_TypeDecl>(),jule::Ref<_1487f5920_Expr>()));
	if (_26417_key->_field_token._field_id == 36LLU) {
		_26417_key->_field_mutable=true;
		if (_26043_tokens.len() == 1LL) {
			(*this)._method_push_err(_26417_key->_field_token,jule::Str("invalid syntax", 14));
		}
		_26417_key->_field_token=_26043_tokens[1LL];
	} else if (_26043_tokens.len() > 1LL) {
		(*this)._method_push_err(_26043_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	if (_26417_key->_field_token._field_id != 2LLU) {
		(*this)._method_push_err(_26417_key->_field_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_VarDecl>();
	}
	_26417_key->_field_ident=_26417_key->_field_token._field_kind;
	return _26417_key;
}



inline jule::Slice<jule::Ref<_1487f5920_VarDecl>> _1190d5970_ScopeParser::_method_build_range_kind_keys(jule::Slice<jule::Slice<_108e15ff0_Token>> _28544_parts) {
	jule::Slice<jule::Ref<_1487f5920_VarDecl>> _28617_keys = nullptr;
	{
		auto __julec_range_expr = _28544_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Slice<_108e15ff0_Token> _1190d5970_tokens = *__julec_range_begin;
			_iter_begin_4381524256:;
			{
				_28617_keys=jule::append(_28617_keys,jule::Slice<jule::Ref<_1487f5920_VarDecl>>({(*this)._method_build_range_kind_key(_1190d5970_tokens)}));
			}
			_iter_next_4381524256:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190d5970_tokens = *__julec_range_begin; goto _iter_begin_4381524256; }
			_iter_end_4381524256:;
		}
	}
	return _28617_keys;
}



inline void _1190d5970_ScopeParser::_method_setup_range_kind_keys_plain(jule::Ref<_1487f5920_RangeKind> _29350_rng,jule::Slice<_108e15ff0_Token> _29371_tokens) {
	jule::Slice<jule::Slice<_108e15ff0_Token>> _29417_key_tokens = (*this)._method_get_range_kind_keys_tokens(_29371_tokens);
	if (_29417_key_tokens.len() == 0LL) {
		return;
	}
	if (_29417_key_tokens.len() > 2LL) {
		(*this)._method_push_err(_29350_rng->_field_in_token,jule::Str("range variables can be maximum two", 34));
	}
	jule::Slice<jule::Ref<_1487f5920_VarDecl>> _30117_keys = (*this)._method_build_range_kind_keys(_29417_key_tokens);
	_29350_rng->_field_key_a=_30117_keys[0LL];
	if (_30117_keys.len() > 1LL) {
		_29350_rng->_field_key_b=_30117_keys[1LL];
	}
}



inline void _1190d5970_ScopeParser::_method_setup_range_kind_keys_explicit(jule::Ref<_1487f5920_RangeKind> _30853_rng,jule::Slice<_108e15ff0_Token> _30874_tokens) {
	jule::Int _30917_i = 0LL;
	jule::Slice<_108e15ff0_Token> _31017_rang = _138657c70_range(_30917_i,jule::Str("(", 1),jule::Str(")", 1),_30874_tokens);
	if (_30917_i < _30874_tokens.len()) {
		(*this)._method_push_err(_30853_rng->_field_in_token,jule::Str("invalid syntax", 14));
	}
	(*this)._method_setup_range_kind_keys_plain(_30853_rng,_31017_rang);
}



inline void _1190d5970_ScopeParser::_method_setup_range_kind_keys(jule::Ref<_1487f5920_RangeKind> _31744_rng,jule::Slice<_108e15ff0_Token> _31765_tokens) {
	if (_31765_tokens[0LL]._field_id == 3LLU) {
		if (_31765_tokens[0LL]._field_kind != jule::Str("(", 1)) {
			(*this)._method_push_err(_31765_tokens[0LL],jule::Str("invalid syntax", 14));
			return;
		}
		(*this)._method_setup_range_kind_keys_explicit(_31744_rng,_31765_tokens);
		return;
	}
	(*this)._method_setup_range_kind_keys_plain(_31744_rng,_31765_tokens);
}



inline jule::Ref<_1487f5920_RangeKind> _1190d5970_ScopeParser::_method_build_range_iter_kind(jule::Slice<_108e15ff0_Token> _32944_var_tokens,jule::Slice<_108e15ff0_Token> _32969_expr_tokens,_108e15ff0_Token _32991_in_token) {
	jule::Ref<_1487f5920_RangeKind> _33017_rng = jule::new_struct<_1487f5920_RangeKind>(new( std::nothrow ) _1487f5920_RangeKind(_32991_in_token,jule::Ref<_1487f5920_Expr>(),jule::Ref<_1487f5920_VarDecl>(),jule::Ref<_1487f5920_VarDecl>()));
	if (_32969_expr_tokens.len() == 0LL) {
		(*this)._method_push_err(_33017_rng->_field_in_token,jule::Str("expression missing", 18));
		return _33017_rng;
	}
	_33017_rng->_field_expr=(*this)._field_p->_method_build_expr(_32969_expr_tokens);
	if (_32944_var_tokens.len() > 0LL) {
		(*this)._method_setup_range_kind_keys(_33017_rng,_32944_var_tokens);
	}
	return _33017_rng;
}



inline jule::Any _1190d5970_ScopeParser::_method_build_common_iter_kind(jule::Slice<_108e15ff0_Token> _34445_tokens,_108e15ff0_Token _34462_err_tok) {
	jule::Int _34517_brace_n = 0LL;
	{
		auto __julec_range_expr = _34445_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190d5970_i = 0;
			_108e15ff0_Token _1190d5970_tok = *__julec_range_begin;
			_iter_begin_4381569872:;
			{
				if (_1190d5970_tok._field_id == 3LLU) {
					{
						auto _match_expr{ _1190d5970_tok._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4381574192; }
						_case_begin_4381574192:;
						{
							(_34517_brace_n)++;
							goto _iter_next_4381569872;
						}
						goto _match_end_4381572672;
						_case_end_4381574192:;
						_case_begin_4381573360:;
						{
							(_34517_brace_n)--;
						}
						goto _match_end_4381572672;
						_case_end_4381573360:;
						_match_end_4381572672:;
					}
				}
				if (_34517_brace_n != 0LL) {
					goto _iter_next_4381569872;
				}
				{
					auto _match_expr{ _1190d5970_tok._field_id };
					if (!((15LLU) == _match_expr)) { goto _case_end_4381575632; }
					_case_begin_4381575632:;
					{
						jule::Slice<_108e15ff0_Token> _36425_decl_tokens = _34445_tokens.slice(0LL,static_cast<jule::Int>(_1190d5970_i));
						jule::Slice<_108e15ff0_Token> _36525_expr_tokens = _34445_tokens.slice(static_cast<jule::Int>(_1190d5970_i + 1LL));
						return jule::Any((*this)._method_build_range_iter_kind(_36425_decl_tokens,_36525_expr_tokens,_1190d5970_tok));
					}
					goto _match_end_4381575344;
					_case_end_4381575632:;
					_match_end_4381575344:;
				}
			}
			_iter_next_4381569872:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190d5970_i; _1190d5970_tok = *__julec_range_begin; goto _iter_begin_4381569872; }
			_iter_end_4381569872:;
		}
	}
	return jule::Any((*this)._method_build_while_iter_kind(_34445_tokens));
}



inline jule::Any _1190d5970_ScopeParser::_method_build_common_iter(jule::Slice<_108e15ff0_Token> _37240_tokens) {
	jule::Ref<_1487f5920_Iter> _37317_it = jule::new_struct<_1487f5920_Iter>(new( std::nothrow ) _1487f5920_Iter(_37240_tokens[0LL],jule::Any(),jule::Ref<_1487f5920_ScopeTree>()));
	_37240_tokens=_37240_tokens.slice(1LL);
	if (_37240_tokens.len() == 0LL) {
		(*this)._method_stop();
		(*this)._method_push_err(_37317_it->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	jule::Slice<_108e15ff0_Token> _38317_expr_tokens = _1190cb760_get_block_expr(_37240_tokens);
	if (_38317_expr_tokens.len() > 0LL) {
		_37317_it->_field_kind=(*this)._method_build_common_iter_kind(_38317_expr_tokens,_37317_it->_field_token);
	}
	jule::I64 _38717_i = _38317_expr_tokens.len();
	jule::Slice<_108e15ff0_Token> _38817_scope_tokens = _138657c70_range(_38717_i,jule::Str("{", 1),jule::Str("}", 1),_37240_tokens);
	if (_38817_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_37317_it->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	if (_38717_i < _37240_tokens.len()) {
		(*this)._method_push_err(_37240_tokens[static_cast<jule::Int>(_38717_i)],jule::Str("invalid syntax", 14));
	}
	_37317_it->_field_scope=(*this)._method_build_scope(_38817_scope_tokens);
	return jule::Any(_37317_it);
}



inline jule::Any _1190d5970_ScopeParser::_method_buid_iter_st(jule::Ref<_1190d5970_Stmt> _40235_st) {
	if (_40235_st->_field_terminated) {
		return (*this)._method_build_while_next_iter(_40235_st);
	}
	return (*this)._method_build_common_iter(_40235_st->_field_tokens);
}



inline jule::Any _1190d5970_ScopeParser::_method_build_break_st(jule::Slice<_108e15ff0_Token> _40937_tokens) {
	jule::Ref<_1487f5920_BreakSt> _41017_brk = jule::new_struct<_1487f5920_BreakSt>(new( std::nothrow ) _1487f5920_BreakSt(_40937_tokens[0LL],_108e15ff0_Token()));
	if (_40937_tokens.len() > 1LL) {
		if (_40937_tokens[1LL]._field_id != 2LLU) {
			(*this)._method_push_err(_40937_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>({}));
		} else {
			_41017_brk->_field_label=_40937_tokens[1LL];
			if (_40937_tokens.len() > 2LL) {
				(*this)._method_push_err(_40937_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_41017_brk);
}



inline jule::Any _1190d5970_ScopeParser::_method_build_cont_st(jule::Slice<_108e15ff0_Token> _42736_tokens) {
	jule::Ref<_1487f5920_ContSt> _42817_cont = jule::new_struct<_1487f5920_ContSt>(new( std::nothrow ) _1487f5920_ContSt(_42736_tokens[0LL],_108e15ff0_Token()));
	if (_42736_tokens.len() > 1LL) {
		if (_42736_tokens[1LL]._field_id != 2LLU) {
			(*this)._method_push_err(_42736_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>({}));
		} else {
			_42817_cont->_field_label=_42736_tokens[1LL];
			if (_42736_tokens.len() > 2LL) {
				(*this)._method_push_err(_42736_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_42817_cont);
}



inline jule::Ref<_1487f5920_If> _1190d5970_ScopeParser::_method_build_if(jule::Slice<_108e15ff0_Token>& _44532_tokens) {
	jule::Ref<_1487f5920_If> _44617_model = jule::new_struct<_1487f5920_If>(new( std::nothrow ) _1487f5920_If(_44532_tokens[0LL],jule::Ref<_1487f5920_Expr>(),jule::Ref<_1487f5920_ScopeTree>()));
	_44532_tokens=_44532_tokens.slice(1LL);
	jule::Slice<_108e15ff0_Token> _45017_expr_tokens = _1190cb760_get_block_expr(_44532_tokens);
	jule::Int _45117_i = 0LL;
	if (_45017_expr_tokens.len() == 0LL) {
		(*this)._method_push_err(_44617_model->_field_token,jule::Str("expression missing", 18));
	} else {
		_45117_i=static_cast<jule::I64>(_45017_expr_tokens.len());
	}
	jule::Slice<_108e15ff0_Token> _45717_scope_tokens = _138657c70_range(_45117_i,jule::Str("{", 1),jule::Str("}", 1),_44532_tokens);
	if (_45717_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_44617_model->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_If>();
	}
	if (_45117_i < _44532_tokens.len()) {
		if (_44532_tokens[static_cast<jule::Int>(_45117_i)]._field_id == 17LLU) {
			_44532_tokens=_44532_tokens.slice(static_cast<jule::Int>(_45117_i));
		} else {
			(*this)._method_push_err(_44532_tokens[static_cast<jule::Int>(_45117_i)],jule::Str("invalid syntax", 14));
			_44532_tokens=nullptr;
		}
	}
	_44617_model->_field_expr=(*this)._field_p->_method_build_expr(_45017_expr_tokens);
	_44617_model->_field_scope=(*this)._method_build_scope(_45717_scope_tokens);
	return _44617_model;
}



inline jule::Ref<_1487f5920_Else> _1190d5970_ScopeParser::_method_build_else(jule::Slice<_108e15ff0_Token> _47733_tokens) {
	jule::Ref<_1487f5920_Else> _47817_els = jule::new_struct<_1487f5920_Else>(new( std::nothrow ) _1487f5920_Else(_47733_tokens[0LL],jule::Ref<_1487f5920_ScopeTree>()));
	_47733_tokens=_47733_tokens.slice(1LL);
	jule::Int _48217_i = 0LL;
	jule::Slice<_108e15ff0_Token> _48317_scope_tokens = _138657c70_range(_48217_i,jule::Str("{", 1),jule::Str("}", 1),_47733_tokens);
	if (_48317_scope_tokens == nullptr) {
		if (_48217_i < _47733_tokens.len()) {
			(*this)._method_push_err(_47817_els->_field_token,jule::Str("else's cannot have any expression", 33));
		} else {
			(*this)._method_stop();
			(*this)._method_push_err(_47817_els->_field_token,jule::Str("body is not exist", 17));
			(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		}
		return jule::new_ref<_1487f5920_Else>();
	}
	if (_48217_i < _47733_tokens.len()) {
		(*this)._method_push_err(_47733_tokens[static_cast<jule::Int>(_48217_i)],jule::Str("invalid syntax", 14));
	}
	_47817_els->_field_scope=(*this)._method_build_scope(_48317_scope_tokens);
	return _47817_els;
}



inline jule::Any _1190d5970_ScopeParser::_method_build_if_else_chain(jule::Slice<_108e15ff0_Token> _50142_tokens) {
	jule::Ref<_1487f5920_Conditional> _50217_chain = jule::new_struct<_1487f5920_Conditional>(new( std::nothrow ) _1487f5920_Conditional((*this)._method_build_if(_50142_tokens),jule::Slice<jule::Ref<_1487f5920_If>>(),jule::Ref<_1487f5920_Else>()));
	if ((!(jule::real(_50217_chain->_field_head)))) {
		return jule::Any(nullptr);
	}
	_iter_begin_4381672064:;
	if (!(_50142_tokens != nullptr)) { goto _iter_end_4381672064; }
	{
		if (_50142_tokens[0LL]._field_id != 17LLU) {
			goto _iter_end_4381672064;
		}
		if ((_50142_tokens.len() > 1LL) && (_50142_tokens[1LL]._field_id == 16LLU)) {
			_50142_tokens=_50142_tokens.slice(1LL);
			jule::Ref<_1487f5920_If> _51425_elif = (*this)._method_build_if(_50142_tokens);
			_50217_chain->_field_tail=jule::append(_50217_chain->_field_tail,jule::Slice<jule::Ref<_1487f5920_If>>({_51425_elif}));
			goto _iter_next_4381672064;
		}
		_50217_chain->_field_default=(*this)._method_build_else(_50142_tokens);
		goto _iter_end_4381672064;
	}
	_iter_next_4381672064:;
	goto _iter_begin_4381672064;
	_iter_end_4381672064:;
	return jule::Any(_50217_chain);
}



inline jule::Any _1190d5970_ScopeParser::_method_build_comment_st(_108e15ff0_Token _52435_token) {
	return jule::Any(_138657c70_build_comment(_52435_token));
}



inline jule::Any _1190d5970_ScopeParser::_method_build_call_st(jule::Slice<_108e15ff0_Token> _52836_tokens) {
	_108e15ff0_Token _52913_token = _52836_tokens[0LL];
	if (_1190cb760_is_fn_call(_52836_tokens) == nullptr) {
		(*this)._method_push_err(_52913_token,jule::Str("statement must have function call expression", 44));
	}
	jule::Ref<_1487f5920_Expr> _53317_expr = (*this)._field_p->_method_build_expr(_52836_tokens);
	if (jule::real(_53317_expr) && (!(_53317_expr->_method_is_fn_call()))) {
		(*this)._method_push_err(_52913_token,jule::Str("invalid syntax", 14));
	}
	return jule::Any(_53317_expr);
}



inline jule::Any _1190d5970_ScopeParser::_method_build_co_call_st(jule::Slice<_108e15ff0_Token> _54039_tokens) {
	_54039_tokens=_54039_tokens.slice(1LL);
	jule::Any _54217_cc = (*this)._method_build_call_st(_54039_tokens);
	_54217_cc.operator jule::Ref<_1487f5920_Expr>()->_field_kind.operator jule::Ref<_1487f5920_FnCallExpr>()->_field_concurrent=true;
	return _54217_cc;
}



inline jule::Any _1190d5970_ScopeParser::_method_build_goto_st(jule::Slice<_108e15ff0_Token> _54736_tokens) {
	jule::Ref<_1487f5920_GotoSt> _54817_gt = jule::new_struct<_1487f5920_GotoSt>(new( std::nothrow ) _1487f5920_GotoSt(_54736_tokens[0LL],_108e15ff0_Token()));
	if (_54736_tokens.len() == 1LL) {
		(*this)._method_push_err(_54817_gt->_field_token,jule::Str("missing label identifier for goto statement", 43));
		return jule::Any(nullptr);
	} else if (_54736_tokens.len() > 2LL) {
		(*this)._method_push_err(_54736_tokens[2LL],jule::Str("invalid syntax", 14));
	}
	_108e15ff0_Token _55717_ident_token = _54736_tokens[1LL];
	if (_55717_ident_token._field_id != 2LLU) {
		(*this)._method_push_err(_55717_ident_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return jule::Any(_54817_gt);
	}
	_54817_gt->_field_label=_55717_ident_token;
	return jule::Any(_54817_gt);
}



inline jule::Any _1190d5970_ScopeParser::_method_build_fall_st(jule::Slice<_108e15ff0_Token> _56736_tokens) {
	jule::Ref<_1487f5920_FallSt> _56817_fll = jule::new_struct<_1487f5920_FallSt>(new( std::nothrow ) _1487f5920_FallSt(_56736_tokens[0LL]));
	if (_56736_tokens.len() > 1LL) {
		(*this)._method_push_err(_56736_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	return jule::Any(_56817_fll);
}



inline jule::Any _1190d5970_ScopeParser::_method_build_type_alias_st(jule::Slice<_108e15ff0_Token> _57742_tokens) {
	jule::Ref<_1487f5920_TypeAliasDecl> _57817_tad = (*this)._field_p->_method_build_type_alias_decl(_57742_tokens);
	_57817_tad->_field_scope=(*this)._field_s;
	return jule::Any(_57817_tad);
}



inline void _1190d5970_ScopeParser::_method_push_case_expr(jule::Slice<_108e15ff0_Token> _58337_tokens,_108e15ff0_Token _58358_token,jule::Bool _5849_type_match,jule::Slice<jule::Ref<_1487f5920_Expr>>& _58432_exprs) {
	if (_58337_tokens.len() == 0LL) {
		return;
	}
	if (_5849_type_match) {
		jule::Int _59021_i = 0LL;
		jule::Ref<_1487f5920_TypeDecl> _59122_t;
		jule::Bool _59125_ok;
		std::tie(_59122_t,_59125_ok) = (*this)._field_p->_method_build_type(_58337_tokens,(&(_59021_i)),true);
		if (_59125_ok) {
			_58432_exprs=jule::append(_58432_exprs,jule::Slice<jule::Ref<_1487f5920_Expr>>({jule::new_struct<_1487f5920_Expr>(new( std::nothrow ) _1487f5920_Expr(_58358_token,jule::Any(_59122_t)))}));
		}
		if (_59021_i < _58337_tokens.len()) {
			(*this)._method_push_err(_58337_tokens[static_cast<jule::Int>(_59021_i)],jule::Str("invalid syntax", 14));
		}
		return;
	}
	_58432_exprs=jule::append(_58432_exprs,jule::Slice<jule::Ref<_1487f5920_Expr>>({(*this)._field_p->_method_build_expr(_58337_tokens)}));
}



inline jule::Slice<jule::Ref<_1487f5920_Expr>> _1190d5970_ScopeParser::_method_build_case_exprs(jule::Slice<_108e15ff0_Token>& _60640_tokens,jule::Bool _60657_type_match) {
	jule::Slice<jule::Ref<_1487f5920_Expr>> _60717_exprs = nullptr;
	jule::Int _60917_brace_n = 0LL;
	jule::Int _61017_j = 0LL;
	{
		auto __julec_range_expr = _60640_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190d5970_i = 0;
			_108e15ff0_Token _1190d5970_tok = *__julec_range_begin;
			_iter_begin_4381747984:;
			{
				if (_1190d5970_tok._field_id == 3LLU) {
					{
						auto _match_expr{ _1190d5970_tok._field_kind };
						if (!((jule::Str("(", 1)) == _match_expr || (jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr)) { goto _case_end_4381752352; }
						_case_begin_4381752352:;
						{
							(_60917_brace_n)++;
						}
						goto _match_end_4381750832;
						_case_end_4381752352:;
						_case_begin_4381751520:;
						{
							(_60917_brace_n)--;
						}
						goto _match_end_4381750832;
						_case_end_4381751520:;
						_match_end_4381750832:;
					}
					goto _iter_next_4381747984;
				} else if (_60917_brace_n != 0LL) {
					goto _iter_next_4381747984;
				}
				{
					if (!(((_1190d5970_tok._field_id == 7LLU) && (_1190d5970_tok._field_kind == jule::Str("|", 1))))) { goto _case_end_4381753616; }
					_case_begin_4381753616:;
					{
						(*this)._method_push_case_expr(_60640_tokens.slice(static_cast<jule::Int>(_61017_j),static_cast<jule::Int>(_1190d5970_i)),_1190d5970_tok,_60657_type_match,_60717_exprs);
						_61017_j=static_cast<jule::Int>(_1190d5970_i + 1LL);
					}
					goto _match_end_4381751760;
					_case_end_4381753616:;
					if (!((_1190d5970_tok._field_id == 11LLU))) { goto _case_end_4381753728; }
					_case_begin_4381753728:;
					{
						(*this)._method_push_case_expr(_60640_tokens.slice(static_cast<jule::Int>(_61017_j),static_cast<jule::Int>(_1190d5970_i)),_1190d5970_tok,_60657_type_match,_60717_exprs);
						_60640_tokens=_60640_tokens.slice(static_cast<jule::Int>(_1190d5970_i + 1LL));
						return _60717_exprs;
					}
					goto _match_end_4381751760;
					_case_end_4381753728:;
					_match_end_4381751760:;
				}
			}
			_iter_next_4381747984:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190d5970_i; _1190d5970_tok = *__julec_range_begin; goto _iter_begin_4381747984; }
			_iter_end_4381747984:;
		}
	}
	(*this)._method_push_err(_60640_tokens[0LL],jule::Str("invalid syntax", 14));
	_60640_tokens=nullptr;
	return nullptr;
}



inline jule::Ref<_1487f5920_ScopeTree> _1190d5970_ScopeParser::_method_build_case_scope(jule::Slice<_108e15ff0_Token>& _64240_tokens) {
	jule::Int _64317_n = 0LL;
	_iter_begin_4381766816:;
	{
		jule::Int _64521_i = 0LL;
		jule::Slice<_108e15ff0_Token> _64622_next;
		std::tie(_64622_next,std::ignore) = _1190d5970_skip_st(_64521_i,_64240_tokens.slice(static_cast<jule::Int>(_64317_n)));
		if (_64622_next.len() == 0LL) {
			goto _iter_end_4381766816;
		}
		_108e15ff0_Token _65017_tok = _64622_next[0LL];
		if ((_65017_tok._field_id != 7LLU) || (_65017_tok._field_kind != jule::Str("|", 1))) {
			_64317_n+=static_cast<jule::I64>(_64622_next.len());
			goto _iter_next_4381766816;
		}
		jule::Ref<_1487f5920_ScopeTree> _65521_scope = (*this)._method_build_scope(_64240_tokens.slice(0LL,static_cast<jule::Int>(_64317_n)));
		_64240_tokens=_64240_tokens.slice(static_cast<jule::Int>(_64317_n));
		return _65521_scope;
	}
	_iter_next_4381766816:;
	goto _iter_begin_4381766816;
	_iter_end_4381766816:;
	jule::Ref<_1487f5920_ScopeTree> _65917_scope = (*this)._method_build_scope(_64240_tokens);
	_64240_tokens=nullptr;
	return _65917_scope;
}



inline std::tuple<jule::Ref<_1487f5920_Case>,jule::Bool> _1190d5970_ScopeParser::_method_build_case(jule::Slice<_108e15ff0_Token>& _66434_tokens,jule::Bool _66451_type_match) {
	jule::Ref<_1487f5920_Case> _66517_c = jule::new_struct<_1487f5920_Case>(new( std::nothrow ) _1487f5920_Case(_66434_tokens[0LL],jule::Ref<_1487f5920_ScopeTree>(),jule::Slice<jule::Ref<_1487f5920_Expr>>()));
	_66434_tokens=_66434_tokens.slice(1LL);
	_66517_c->_field_exprs=(*this)._method_build_case_exprs(_66434_tokens,_66451_type_match);
	_66517_c->_field_scope=(*this)._method_build_case_scope(_66434_tokens);
	jule::Bool _67113_is_default = _66517_c->_field_exprs.len() == 0LL;
	return std::make_tuple(_66517_c,_67113_is_default);
}



inline std::tuple<jule::Slice<jule::Ref<_1487f5920_Case>>,jule::Ref<_1487f5920_Else>> _1190d5970_ScopeParser::_method_build_cases(jule::Slice<_108e15ff0_Token> _67534_tokens,jule::Bool _67551_type_match) {
	jule::Slice<jule::Ref<_1487f5920_Case>> _67617_cases = nullptr;
	jule::Ref<_1487f5920_Else> _67717_def = jule::new_ref<_1487f5920_Else>();
	_iter_begin_4381796976:;
	if (!(_67534_tokens.len() > 0LL)) { goto _iter_end_4381796976; }
	{
		_108e15ff0_Token _67921_tok = _67534_tokens[0LL];
		if (_67921_tok._field_id == 18LLU) {
			_67534_tokens=_67534_tokens.slice(1LL);
			goto _iter_next_4381796976;
		}
		if ((_67921_tok._field_id != 7LLU) || (_67921_tok._field_kind != jule::Str("|", 1))) {
			(*this)._method_push_err(_67921_tok,jule::Str("invalid syntax", 14));
			goto _iter_end_4381796976;
		}
		jule::Ref<_1487f5920_Case> _69022_c;
		jule::Bool _69025_is_default;
		std::tie(_69022_c,_69025_is_default) = (*this)._method_build_case(_67534_tokens,_67551_type_match);
		if (_69025_is_default) {
			_69022_c->_field_token=_67921_tok;
			if ((!(jule::real(_67717_def)))) {
				_67717_def=jule::new_struct<_1487f5920_Else>(new( std::nothrow ) _1487f5920_Else(_69022_c->_field_token,_69022_c->_field_scope));
			} else {
				(*this)._method_push_err(_67921_tok,jule::Str("invalid syntax", 14));
			}
		} else {
			_67617_cases=jule::append(_67617_cases,jule::Slice<jule::Ref<_1487f5920_Case>>({_69022_c}));
		}
	}
	_iter_next_4381796976:;
	goto _iter_begin_4381796976;
	_iter_end_4381796976:;
	return std::make_tuple(_67617_cases,_67717_def);
}



inline jule::Ref<_1487f5920_MatchCase> _1190d5970_ScopeParser::_method_build_match_case(jule::Slice<_108e15ff0_Token> _70839_tokens) {
	jule::Ref<_1487f5920_MatchCase> _70917_m = jule::new_struct<_1487f5920_MatchCase>(new( std::nothrow ) _1487f5920_MatchCase(_70839_tokens[0LL],jule::Bool(),jule::Ref<_1487f5920_Expr>(),jule::Slice<jule::Ref<_1487f5920_Case>>(),jule::Ref<_1487f5920_Else>()));
	_70839_tokens=_70839_tokens.slice(1LL);
	if ((_70839_tokens.len() > 0LL) && (_70839_tokens[0LL]._field_id == 10LLU)) {
		_70917_m->_field_type_match=true;
		_70839_tokens=_70839_tokens.slice(1LL);
	}
	jule::Slice<_108e15ff0_Token> _71917_expr_tokens = _1190cb760_get_block_expr(_70839_tokens);
	if (_71917_expr_tokens.len() > 0LL) {
		_70917_m->_field_expr=(*this)._field_p->_method_build_expr(_71917_expr_tokens);
	} else if (_70917_m->_field_type_match) {
		(*this)._method_push_err(_70917_m->_field_token,jule::Str("expression missing", 18));
	}
	jule::I64 _72617_i = _71917_expr_tokens.len();
	jule::Slice<_108e15ff0_Token> _72717_block_toks = _138657c70_range(_72617_i,jule::Str("{", 1),jule::Str("}", 1),_70839_tokens);
	if (_72717_block_toks == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_70917_m->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_MatchCase>();
	}
	std::tie(_70917_m->_field_cases,_70917_m->_field_default) = (*this)._method_build_cases(_72717_block_toks,_70917_m->_field_type_match);
	return _70917_m;
}



inline jule::Ref<_1487f5920_ScopeTree> _1190d5970_ScopeParser::_method_build_scope_st(jule::Slice<_108e15ff0_Token> _73937_tokens) {
	jule::Bool _74017_is_unsafe = false;
	jule::Bool _74117_is_deferred = false;
	_108e15ff0_Token _74217_token = _73937_tokens[0LL];
	if (_74217_token._field_id == 35LLU) {
		_74017_is_unsafe=true;
		_73937_tokens=_73937_tokens.slice(1LL);
		if (_73937_tokens.len() == 0LL) {
			(*this)._method_push_err(_74217_token,jule::Str("invalid syntax", 14));
			return jule::new_ref<_1487f5920_ScopeTree>();
		}
		_74217_token=_73937_tokens[0LL];
		if (_74217_token._field_id == 37LLU) {
			_74117_is_deferred=true;
			_73937_tokens=_73937_tokens.slice(1LL);
			if (_73937_tokens.len() == 0LL) {
				(*this)._method_push_err(_74217_token,jule::Str("invalid syntax", 14));
				return jule::new_ref<_1487f5920_ScopeTree>();
			}
		}
	} else if (_74217_token._field_id == 37LLU) {
		_74117_is_deferred=true;
		_73937_tokens=_73937_tokens.slice(1LL);
		if (_73937_tokens.len() == 0LL) {
			(*this)._method_push_err(_74217_token,jule::Str("invalid syntax", 14));
			return jule::new_ref<_1487f5920_ScopeTree>();
		}
	}
	jule::Int _76817_i = 0LL;
	jule::Slice<_108e15ff0_Token> _76917_scope_tokens = _138657c70_range(_76817_i,jule::Str("{", 1),jule::Str("}", 1),_73937_tokens);
	if (_76917_scope_tokens == nullptr) {
		(*this)._method_push_err(_74217_token,jule::Str("invalid syntax", 14));
		return jule::new_ref<_1487f5920_ScopeTree>();
	} else if (_76817_i < _73937_tokens.len()) {
		(*this)._method_push_err(_73937_tokens[static_cast<jule::Int>(_76817_i)],jule::Str("invalid syntax", 14));
	}
	jule::Ref<_1487f5920_ScopeTree> _77617_scope = (*this)._method_build_scope(_76917_scope_tokens);
	_77617_scope->_field_unsafety=_74017_is_unsafe;
	_77617_scope->_field_deferred=_74117_is_deferred;
	return _77617_scope;
}



inline jule::Ref<_1487f5920_LabelSt> _1190d5970_ScopeParser::_method_build_label_st(jule::Slice<_108e15ff0_Token> _78237_tokens) {
	jule::Ref<_1487f5920_LabelSt> _78317_lbl = jule::new_struct<_1487f5920_LabelSt>(new( std::nothrow ) _1487f5920_LabelSt(_78237_tokens[0LL],_78237_tokens[0LL]._field_kind));
	if (_78237_tokens.len() > 2LL) {
		_78237_tokens=_78237_tokens.slice(2LL);
		(*this)._method_insert_as_next(_78237_tokens);
	}
	return _78317_lbl;
}



inline std::tuple<jule::Any,jule::Bool> _1190d5970_ScopeParser::_method_build_id_st(jule::Slice<_108e15ff0_Token> _79734_tokens) {
	jule::Bool _79763_ok = jule::Bool();
	if (_79734_tokens.len() == 1LL) {
		return std::make_tuple(jule::Any(),_79763_ok);
	}
	_108e15ff0_Token _80217_token = _79734_tokens[1LL];
	{
		auto _match_expr{ _80217_token._field_id };
		if (!((11LLU) == _match_expr)) { goto _case_end_4381868064; }
		_case_begin_4381868064:;
		{
			_79763_ok = true;
			return std::make_tuple(jule::Any((*this)._method_build_label_st(_79734_tokens)),_79763_ok);
		}
		goto _match_end_4381867456;
		_case_end_4381868064:;
		_match_end_4381867456:;
	}
	return std::make_tuple(jule::Any(),_79763_ok);
}



inline jule::Ref<_149043a20_AssignInfo> _1190d5970_ScopeParser::_method_build_assign_info(jule::Slice<_108e15ff0_Token> _81140_tokens) {
	jule::Ref<_149043a20_AssignInfo> _81217_info = jule::new_struct<_149043a20_AssignInfo>(new( std::nothrow ) _149043a20_AssignInfo(jule::Slice<_108e15ff0_Token>(),jule::Slice<_108e15ff0_Token>(),_108e15ff0_Token(),true));
	jule::Int _81517_brace_n = 0LL;
	{
		auto __julec_range_expr = _81140_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190d5970_i = 0;
			_108e15ff0_Token _1190d5970_token = *__julec_range_begin;
			_iter_begin_4381876176:;
			{
				if (_1190d5970_token._field_id == 3LLU) {
					{
						auto _match_expr{ _1190d5970_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4381880624; }
						_case_begin_4381880624:;
						{
							(_81517_brace_n)++;
						}
						goto _match_end_4381879104;
						_case_end_4381880624:;
						_case_begin_4381879792:;
						{
							(_81517_brace_n)--;
						}
						goto _match_end_4381879104;
						_case_end_4381879792:;
						_match_end_4381879104:;
					}
				}
				{
					if (!((_81517_brace_n > 0LL))) { goto _case_end_4381880032; }
					_case_begin_4381880032:;
					{
						goto _iter_next_4381876176;
					}
					goto _match_end_4381880272;
					_case_end_4381880032:;
					if (!((_1190d5970_token._field_id != 7LLU))) { goto _case_end_4381881680; }
					_case_begin_4381881680:;
					{
						goto _iter_next_4381876176;
					}
					goto _match_end_4381880272;
					_case_end_4381881680:;
					if (!(((!(_108e15ff0_is_assign_op(_1190d5970_token._field_kind)))))) { goto _case_end_4381881792; }
					_case_begin_4381881792:;
					{
						goto _iter_next_4381876176;
					}
					goto _match_end_4381880272;
					_case_end_4381881792:;
					_match_end_4381880272:;
				}
				_81217_info->_field_l=_81140_tokens.slice(0LL,static_cast<jule::Int>(_1190d5970_i));
				if (_81217_info->_field_l.len() == 0LL) {
					_81217_info->_field_ok=false;
				}
				_81217_info->_field_setter=_1190d5970_token;
				if ((_1190d5970_i + 1LL) >= _81140_tokens.len()) {
					_81217_info->_field_r=nullptr;
					_81217_info->_field_ok=_108e15ff0_is_postfix_op(_81217_info->_field_setter._field_kind);
					goto _iter_end_4381876176;
				}
				_81217_info->_field_r=_81140_tokens.slice(static_cast<jule::Int>(_1190d5970_i + 1LL));
				if (_108e15ff0_is_postfix_op(_81217_info->_field_setter._field_kind)) {
					if (_81217_info->_field_r.len() > 0LL) {
						(*this)._method_push_err(_81217_info->_field_r[0LL],jule::Str("invalid syntax", 14));
						_81217_info->_field_r=nullptr;
					}
				}
				goto _iter_end_4381876176;
			}
			_iter_next_4381876176:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190d5970_i; _1190d5970_token = *__julec_range_begin; goto _iter_begin_4381876176; }
			_iter_end_4381876176:;
		}
	}
	return _81217_info;
}



inline jule::Ref<_1487f5920_AssignLeft> _1190d5970_ScopeParser::_method_build_assign_l(jule::Slice<_108e15ff0_Token> _85837_tokens) {
	jule::Ref<_1487f5920_AssignLeft> _85917_l = jule::new_struct<_1487f5920_AssignLeft>(new( std::nothrow ) _1487f5920_AssignLeft(_85837_tokens[0LL],jule::Bool(),jule::Bool(),jule::Str(),jule::Ref<_1487f5920_Expr>()));
	if (_85837_tokens[0LL]._field_id == 2LLU) {
		_85917_l->_field_ident=_85917_l->_field_token._field_kind;
	}
	_85917_l->_field_expr=(*this)._field_p->_method_build_expr(_85837_tokens);
	return _85917_l;
}



inline jule::Slice<jule::Ref<_1487f5920_AssignLeft>> _1190d5970_ScopeParser::_method_build_assign_ls(jule::Slice<jule::Slice<_108e15ff0_Token>> _87138_parts) {
	jule::Slice<jule::Ref<_1487f5920_AssignLeft>> _87217_lefts = nullptr;
	{
		auto __julec_range_expr = _87138_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Slice<_108e15ff0_Token> _1190d5970_part = *__julec_range_begin;
			_iter_begin_4381907136:;
			{
				jule::Ref<_1487f5920_AssignLeft> _87421_l = (*this)._method_build_assign_l(_1190d5970_part);
				_87217_lefts=jule::append(_87217_lefts,jule::Slice<jule::Ref<_1487f5920_AssignLeft>>({_87421_l}));
			}
			_iter_next_4381907136:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190d5970_part = *__julec_range_begin; goto _iter_begin_4381907136; }
			_iter_end_4381907136:;
		}
	}
	return _87217_lefts;
}



inline std::tuple<jule::Ref<_1487f5920_AssignSt>,jule::Bool> _1190d5970_ScopeParser::_method_build_plain_assign(jule::Slice<_108e15ff0_Token> _88141_tokens) {
	jule::Ref<_149043a20_AssignInfo> _88217_info = (*this)._method_build_assign_info(_88141_tokens);
	if ((!(_88217_info->_field_ok))) {
		return std::make_tuple(jule::new_ref<_1487f5920_AssignSt>(),false);
	}
	jule::Ref<_1487f5920_AssignSt> _88717_assign = jule::new_struct<_1487f5920_AssignSt>(new( std::nothrow ) _1487f5920_AssignSt(jule::Bool(),_88217_info->_field_setter,jule::Slice<jule::Ref<_1487f5920_AssignLeft>>(),jule::Ref<_1487f5920_Expr>()));
	jule::Slice<jule::Slice<_108e15ff0_Token>> _89118_parts;
	jule::Slice<_1486379e0_Log> _89125_errs;
	std::tie(_89118_parts,_89125_errs) = _138657c70_parts(_88217_info->_field_l,8LLU,true);
	if (_89125_errs.len() > 0LL) {
		(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_89125_errs);
		return std::make_tuple(jule::new_ref<_1487f5920_AssignSt>(),false);
	}
	_88717_assign->_field_left=(*this)._method_build_assign_ls(_89118_parts);
	if (_88217_info->_field_r != nullptr) {
		_88717_assign->_field_right=(*this)._field_p->_method_build_expr(_88217_info->_field_r);
	}
	return std::make_tuple(_88717_assign,true);
}



inline std::tuple<jule::Ref<_1487f5920_AssignSt>,jule::Bool> _1190d5970_ScopeParser::_method_build_decl_assign(jule::Slice<_108e15ff0_Token> _90540_tokens) {
	if (_90540_tokens.len() < 1LL) {
		return std::make_tuple(jule::new_ref<_1487f5920_AssignSt>(),false);
	}
	_90540_tokens=_90540_tokens.slice(1LL);
	_108e15ff0_Token _91113_token = _90540_tokens[0LL];
	if ((_91113_token._field_id != 3LLU) || (_91113_token._field_kind != jule::Str("(", 1))) {
		return std::make_tuple(jule::new_ref<_1487f5920_AssignSt>(),false);
	}
	jule::Ref<_1487f5920_AssignSt> _91617_assign = jule::new_struct<_1487f5920_AssignSt>(new( std::nothrow ) _1487f5920_AssignSt(true,_108e15ff0_Token(),jule::Slice<jule::Ref<_1487f5920_AssignLeft>>(),jule::Ref<_1487f5920_Expr>()));
	jule::Int _92017_i = 0LL;
	jule::Slice<_108e15ff0_Token> _92117_rang = _138657c70_range(_92017_i,jule::Str("(", 1),jule::Str(")", 1),_90540_tokens);
	if (_92117_rang == nullptr) {
		(*this)._method_push_err(_91113_token,jule::Str("invalid syntax", 14));
		return std::make_tuple(jule::new_ref<_1487f5920_AssignSt>(),false);
	} else if ((_92017_i + 1LL) < _90540_tokens.len()) {
		_91617_assign->_field_setter=_90540_tokens[static_cast<jule::Int>(_92017_i)];
		(_92017_i)++;
		_91617_assign->_field_right=(*this)._field_p->_method_build_expr(_90540_tokens.slice(static_cast<jule::Int>(_92017_i)));
	}
	jule::Slice<jule::Slice<_108e15ff0_Token>> _93218_parts;
	jule::Slice<_1486379e0_Log> _93225_errs;
	std::tie(_93218_parts,_93225_errs) = _138657c70_parts(_92117_rang,8LLU,true);
	if (_93225_errs.len() > 0LL) {
		(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_93225_errs);
		return std::make_tuple(jule::new_ref<_1487f5920_AssignSt>(),false);
	}
	{
		auto __julec_range_expr = _93218_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Slice<_108e15ff0_Token> _1190d5970_part = *__julec_range_begin;
			_iter_begin_4381948656:;
			{
				jule::Bool _93921_is_mut = false;
				jule::Bool _94021_is_ref = false;
				_108e15ff0_Token _94217_token = _1190d5970_part[0LL];
				if (_94217_token._field_id == 36LLU) {
					_93921_is_mut=true;
					_1190d5970_part=_1190d5970_part.slice(1LL);
					if (_1190d5970_part.len() == 0LL) {
						(*this)._method_push_err(_94217_token,jule::Str("invalid syntax", 14));
						goto _iter_next_4381948656;
					}
				}
				if ((_1190d5970_part[0LL]._field_id == 7LLU) && (_1190d5970_part[0LL]._field_kind == jule::Str("&", 1))) {
					_94021_is_ref=true;
					_1190d5970_part=_1190d5970_part.slice(1LL);
					if (_1190d5970_part.len() == 0LL) {
						(*this)._method_push_err(_94217_token,jule::Str("invalid syntax", 14));
						goto _iter_next_4381948656;
					}
				}
				if (((_1190d5970_part[0LL]._field_id != 2LLU) && (_1190d5970_part[0LL]._field_id != 3LLU)) && (_1190d5970_part[0LL]._field_kind != jule::Str("(", 1))) {
					(*this)._method_push_err(_94217_token,jule::Str("invalid syntax", 14));
					goto _iter_next_4381948656;
				}
				jule::Ref<_1487f5920_AssignLeft> _96821_l = (*this)._method_build_assign_l(_1190d5970_part);
				_96821_l->_field_mutable=_93921_is_mut;
				_96821_l->_field_reference=_94021_is_ref;
				_91617_assign->_field_left=jule::append(_91617_assign->_field_left,jule::Slice<jule::Ref<_1487f5920_AssignLeft>>({_96821_l}));
			}
			_iter_next_4381948656:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190d5970_part = *__julec_range_begin; goto _iter_begin_4381948656; }
			_iter_end_4381948656:;
		}
	}
	return std::make_tuple(_91617_assign,true);
}



inline std::tuple<jule::Ref<_1487f5920_AssignSt>,jule::Bool> _1190d5970_ScopeParser::_method_build_assign_st(jule::Slice<_108e15ff0_Token> _97738_tokens) {
	jule::Bool _97772_ok = jule::Bool();
	jule::Ref<_1487f5920_AssignSt> _97757_st = jule::Ref<_1487f5920_AssignSt>();
	if ((!(_149043a20_check_assign_tokens(_97738_tokens)))) {
		_97757_st = jule::new_ref<_1487f5920_AssignSt>();
		_97772_ok = false;
		return std::make_tuple(_97757_st,_97772_ok);
	}
	{
		auto _match_expr{ _97738_tokens[0LL]._field_id };
		if (!((34LLU) == _match_expr)) { goto _case_end_4381979872; }
		_case_begin_4381979872:;
		{
			std::tie(_97757_st,_97772_ok) = (*this)._method_build_decl_assign(_97738_tokens);
		}
		goto _match_end_4381976976;
		_case_end_4381979872:;
		_case_begin_4381976480:;
		{
			std::tie(_97757_st,_97772_ok) = (*this)._method_build_plain_assign(_97738_tokens);
		}
		goto _match_end_4381976976;
		_case_end_4381976480:;
		_match_end_4381976976:;
	}
	return std::make_tuple(_97757_st,_97772_ok);
}



inline jule::Any _1190d5970_ScopeParser::_method_build_st(jule::Ref<_1190d5970_Stmt> _99031_st) {
	_108e15ff0_Token _99117_token = _99031_st->_field_tokens[0LL];
	if (_99117_token._field_id == 2LLU) {
		jule::Any _99322_s;
		jule::Bool _99325_ok;
		std::tie(_99322_s,_99325_ok) = (*this)._method_build_id_st(_99031_st->_field_tokens);
		if (_99325_ok) {
			return _99322_s;
		}
	}
	jule::Ref<_1487f5920_AssignSt> _99918_s;
	jule::Bool _99921_ok;
	std::tie(_99918_s,_99921_ok) = (*this)._method_build_assign_st(_99031_st->_field_tokens);
	if (_99921_ok) {
		return jule::Any(_99918_s);
	}
	{
		auto _match_expr{ _99117_token._field_id };
		if (!((38LLU) == _match_expr || (9LLU) == _match_expr || (34LLU) == _match_expr || (36LLU) == _match_expr)) { goto _case_end_4381993216; }
		_case_begin_4381993216:;
		{
			return (*this)._method_build_var_st(_99031_st->_field_tokens);
		}
		goto _match_end_4381991312;
		_case_end_4381993216:;
		if (!((4LLU) == _match_expr)) { goto _case_end_4381994384; }
		_case_begin_4381994384:;
		{
			return (*this)._method_build_ret_st(_99031_st->_field_tokens);
		}
		goto _match_end_4381991312;
		_case_end_4381994384:;
		if (!((12LLU) == _match_expr)) { goto _case_end_4381994624; }
		_case_begin_4381994624:;
		{
			return (*this)._method_buid_iter_st(_99031_st);
		}
		goto _match_end_4381991312;
		_case_end_4381994624:;
		if (!((13LLU) == _match_expr)) { goto _case_end_4381990096; }
		_case_begin_4381990096:;
		{
			return (*this)._method_build_break_st(_99031_st->_field_tokens);
		}
		goto _match_end_4381991312;
		_case_end_4381990096:;
		if (!((14LLU) == _match_expr)) { goto _case_end_4381990208; }
		_case_begin_4381990208:;
		{
			return (*this)._method_build_cont_st(_99031_st->_field_tokens);
		}
		goto _match_end_4381991312;
		_case_end_4381990208:;
		if (!((16LLU) == _match_expr)) { goto _case_end_4381990320; }
		_case_begin_4381990320:;
		{
			return (*this)._method_build_if_else_chain(_99031_st->_field_tokens);
		}
		goto _match_end_4381991312;
		_case_end_4381990320:;
		if (!((18LLU) == _match_expr)) { goto _case_end_4381992016; }
		_case_begin_4381992016:;
		{
			return (*this)._method_build_comment_st(_99117_token);
		}
		goto _match_end_4381991312;
		_case_end_4381992016:;
		if (!((26LLU) == _match_expr)) { goto _case_end_4381992128; }
		_case_begin_4381992128:;
		{
			return (*this)._method_build_co_call_st(_99031_st->_field_tokens);
		}
		goto _match_end_4381991312;
		_case_end_4381992128:;
		if (!((22LLU) == _match_expr)) { goto _case_end_4381992240; }
		_case_begin_4381992240:;
		{
			return (*this)._method_build_goto_st(_99031_st->_field_tokens);
		}
		goto _match_end_4381991312;
		_case_end_4381992240:;
		if (!((32LLU) == _match_expr)) { goto _case_end_4381992352; }
		_case_begin_4381992352:;
		{
			return (*this)._method_build_fall_st(_99031_st->_field_tokens);
		}
		goto _match_end_4381991312;
		_case_end_4381992352:;
		if (!((10LLU) == _match_expr)) { goto _case_end_4381994848; }
		_case_begin_4381994848:;
		{
			return (*this)._method_build_type_alias_st(_99031_st->_field_tokens);
		}
		goto _match_end_4381991312;
		_case_end_4381994848:;
		if (!((27LLU) == _match_expr)) { goto _case_end_4381994960; }
		_case_begin_4381994960:;
		{
			return jule::Any((*this)._method_build_match_case(_99031_st->_field_tokens));
		}
		goto _match_end_4381991312;
		_case_end_4381994960:;
		if (!((35LLU) == _match_expr || (37LLU) == _match_expr)) { goto _case_end_4381995072; }
		_case_begin_4381995072:;
		{
			return jule::Any((*this)._method_build_scope_st(_99031_st->_field_tokens));
		}
		goto _match_end_4381991312;
		_case_end_4381995072:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4381995184; }
		_case_begin_4381995184:;
		{
			if (_99117_token._field_kind == jule::Str("{", 1)) {
				return jule::Any((*this)._method_build_scope_st(_99031_st->_field_tokens));
			}
		}
		goto _match_end_4381991312;
		_case_end_4381995184:;
		_case_begin_4381990784:;
		{
			if (_1190cb760_is_fn_call(_99031_st->_field_tokens) != nullptr) {
				return (*this)._method_build_call_st(_99031_st->_field_tokens);
			}
		}
		goto _match_end_4381991312;
		_case_end_4381990784:;
		_match_end_4381991312:;
	}
	(*this)._method_push_err(_99117_token,jule::Str("invalid syntax", 14));
	return jule::Any(nullptr);
}



inline void _1190d5970_ScopeParser::_method_build(jule::Slice<_108e15ff0_Token> _106628_tokens,jule::Ref<_1487f5920_ScopeTree> _106649_s) {
	if ((!(jule::real(_106649_s)))) {
		return;
	}
	(*this)._field_stms=_1190d5970_split_stms(_106628_tokens);
	(*this)._field_pos=-1LL;
	(*this)._field_s=_106649_s;
	_iter_begin_4387276256:;
	if (!((!((*this)._method_is_last_st())) && (!((*this)._method_finished())))) { goto _iter_end_4387276256; }
	{
		jule::Ref<_1190d5970_Stmt> _107521_st = (*this)._method_next();
		jule::Any _107621_data = (*this)._method_build_st(_107521_st);
		if (_107621_data != nullptr) {
			(*this)._field_s->_field_stmts=jule::append((*this)._field_s->_field_stmts,jule::Slice<jule::Any>({_107621_data}));
		}
		if ((*this)._method_stopped()) {
			goto _iter_end_4387276256;
		}
	}
	_iter_next_4387276256:;
	goto _iter_begin_4387276256;
	_iter_end_4387276256:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1190d5970_ScopeParser &_Src) {
	_Stream << "ScopeParser{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stms:" << _Src._field_stms << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1190cb760_CallData &_Src) {
	_Stream << "CallData{";
	_Stream << "expr_tokens:" << _Src._field_expr_tokens << ", ";
	_Stream << "args_tokens:" << _Src._field_args_tokens << ", ";
	_Stream << "generics_tokens:" << _Src._field_generics_tokens;
	_Stream << "}";
	return _Stream;
}



inline void _1190cb760_Precedencer::_method_set(jule::Int _15522_level,jule::Any _15534_expr) {
	{
		auto __julec_range_expr = (*this)._field_pairs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			jule::Slice<jule::Any> _1190cb760_pair = *__julec_range_begin;
			_iter_begin_4387285968:;
			{
				jule::Int _15717_pair_level = _1190cb760_pair[0LL].operator jule::Int();
				if (_15522_level > _15717_pair_level) {
					jule::Slice<jule::Slice<jule::Any>> _15925_first = (*this)._field_pairs.slice(0LL,static_cast<jule::Int>(_1190cb760_i));
					jule::Slice<jule::Slice<jule::Any>> _16025_buffer = jule::Slice<jule::Slice<jule::Any>>({jule::Slice<jule::Any>({jule::Any(_15522_level),_15534_expr})});
					jule::Slice<jule::Slice<jule::Any>> _16125_appended = jule::append(_16025_buffer,(*this)._field_pairs.slice(static_cast<jule::Int>(_1190cb760_i)));
					(*this)._field_pairs=jule::append(_15925_first,_16125_appended);
					return;
				}
			}
			_iter_next_4387285968:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_pair = *__julec_range_begin; goto _iter_begin_4387285968; }
			_iter_end_4387285968:;
		}
	}
	(*this)._field_pairs=jule::append((*this)._field_pairs,jule::Slice<jule::Slice<jule::Any>>({jule::Slice<jule::Any>({jule::Any(_15522_level),_15534_expr})}));
}



inline jule::Any _1190cb760_Precedencer::_method_get_lower(void) {
	jule::I64 _17017_i = (*this)._field_pairs.len() - 1LL;
	_iter_begin_4387294928:;
	if (!(_17017_i >= 0LL)) { goto _iter_end_4387294928; }
	{
		jule::Any _17221_data = (*this)._field_pairs[static_cast<jule::Int>(_17017_i)][1LL];
		if (_17221_data != nullptr) {
			return _17221_data;
		}
	}
	_iter_next_4387294928:;
	(_17017_i)--;
	goto _iter_begin_4387294928;
	_iter_end_4387294928:;
	return jule::Any(nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _1190cb760_Precedencer &_Src) {
	_Stream << "Precedencer{";
	_Stream << "pairs:" << _Src._field_pairs;
	_Stream << "}";
	return _Stream;
}



inline void _1190cb760_ExprBuilder::_method_push_err(_108e15ff0_Token _28727_token,jule::Str _28741_fmt,jule::Slice<jule::Any> _28754_args) {
	(*this)._field_p->_method_push_err(_28727_token,_28741_fmt,_28754_args);
}



inline void _1190cb760_ExprBuilder::_method_push_suggestion(jule::Str _29234_fmt,jule::Slice<jule::Any> _29247_args) {
	(*this)._field_p->_method_push_suggestion(_29234_fmt,_29247_args);
}



inline jule::Ref<_1487f5920_TupleExpr> _1190cb760_ExprBuilder::_method_build_tuple(jule::Slice<jule::Slice<_108e15ff0_Token>> _29634_parts) {
	jule::Ref<_1487f5920_TupleExpr> _29717_tuple = jule::new_struct<_1487f5920_TupleExpr>(new( std::nothrow ) _1487f5920_TupleExpr(jule::Slice<jule::Ref<_1487f5920_Expr>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_29634_parts.len())))));
	{
		auto __julec_range_expr = _29634_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			jule::Slice<_108e15ff0_Token> _1190cb760_part = *__julec_range_begin;
			_iter_begin_4382897584:;
			{
				_29717_tuple->_field_expr[static_cast<jule::Int>(_1190cb760_i)]=(*this)._method_build_from_tokens(_1190cb760_part);
			}
			_iter_next_4382897584:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_part = *__julec_range_begin; goto _iter_begin_4382897584; }
			_iter_end_4382897584:;
		}
	}
	return _29717_tuple;
}



inline jule::Ref<_1487f5920_LitExpr> _1190cb760_ExprBuilder::_method_build_lit(_108e15ff0_Token _30628_token) {
	return jule::new_struct<_1487f5920_LitExpr>(new( std::nothrow ) _1487f5920_LitExpr(_30628_token,_30628_token._field_kind));
}



inline jule::Ref<_1487f5920_TypeDecl> _1190cb760_ExprBuilder::_method_build_primitive_type(_108e15ff0_Token _31339_token) {
	return _103796900_build_prim_type(_31339_token);
}



inline jule::Any _1190cb760_ExprBuilder::_method_build_single(_108e15ff0_Token _31735_token) {
	{
		auto _match_expr{ _31735_token._field_id };
		if (!((6LLU) == _match_expr)) { goto _case_end_4382912720; }
		_case_begin_4382912720:;
		{
			return jule::Any((*this)._method_build_lit(_31735_token));
		}
		goto _match_end_4382908976;
		_case_end_4382912720:;
		if (!((2LLU) == _match_expr || (28LLU) == _match_expr)) { goto _case_end_4382909936; }
		_case_begin_4382909936:;
		{
			return jule::Any(_1190cb760_build_ident_expr(_31735_token));
		}
		goto _match_end_4382908976;
		_case_end_4382909936:;
		if (!((1LLU) == _match_expr)) { goto _case_end_4382910048; }
		_case_begin_4382910048:;
		{
			return jule::Any((*this)._method_build_primitive_type(_31735_token));
		}
		goto _match_end_4382908976;
		_case_end_4382910048:;
		_case_begin_4382909632:;
		{
			(*this)._method_push_err(_31735_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4382908976;
		_case_end_4382909632:;
		_match_end_4382908976:;
	}
}



inline jule::Ref<_1487f5920_IdentExpr> _1190cb760_ExprBuilder::_method_build_cpp_linked_ident(jule::Slice<_108e15ff0_Token> _33545_tokens) {
	if (_33545_tokens[0LL]._field_id != 31LLU) {
		return jule::new_ref<_1487f5920_IdentExpr>();
	} else if (_33545_tokens[1LL]._field_id != 20LLU) {
		(*this)._method_push_err(_33545_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("use dot (.) to access cpp-linked defines", 40),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_IdentExpr>();
	}
	_108e15ff0_Token _34317_token = _33545_tokens[2LL];
	if (_34317_token._field_id != 2LLU) {
		(*this)._method_push_err(_33545_tokens[2LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_IdentExpr>();
	}
	jule::Ref<_1487f5920_IdentExpr> _34917_expr = _1190cb760_build_ident_expr(_34317_token);
	_34917_expr->_field_cpp_linked=true;
	return _34917_expr;
}



inline jule::Ref<_1487f5920_UnaryExpr> _1190cb760_ExprBuilder::_method_build_unary(jule::Slice<_108e15ff0_Token> _35434_tokens) {
	_108e15ff0_Token _35517_op = _35434_tokens[0LL];
	if (_35434_tokens.len() == 1LL) {
		(*this)._method_push_err(_35517_op,jule::Str("missing expression for unary operator", 37),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_UnaryExpr>();
	} else if ((!(_108e15ff0_is_unary_op(_35517_op._field_kind)))) {
		(*this)._method_push_err(_35517_op,jule::Str("invalid_operator_for_unary: @", 29),jule::Slice<jule::Any>({jule::Any(_35517_op._field_kind)}));
		return jule::new_ref<_1487f5920_UnaryExpr>();
	}
	_35434_tokens=_35434_tokens.slice(1LL);
	return jule::new_struct<_1487f5920_UnaryExpr>(new( std::nothrow ) _1487f5920_UnaryExpr(_35517_op,(*this)._method_build(_35434_tokens)));
}



inline jule::Ref<_1487f5920_SubIdentExpr> _1190cb760_ExprBuilder::_method_build_obj_sub_ident(jule::Slice<_108e15ff0_Token> _37542_tokens) {
	jule::I64 _37617_i = _37542_tokens.len() - 1LL;
	_108e15ff0_Token _37717_ident_token = _37542_tokens[static_cast<jule::Int>(_37617_i)];
	(_37617_i)--;
	_37542_tokens=_37542_tokens.slice(0LL,static_cast<jule::Int>(_37617_i));
	if (_37542_tokens.len() == 0LL) {
		(*this)._method_push_err(_37717_ident_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_SubIdentExpr>();
	}
	return jule::new_struct<_1487f5920_SubIdentExpr>(new( std::nothrow ) _1487f5920_SubIdentExpr(jule::Bool(),(*this)._method_build(_37542_tokens),_37717_ident_token));
}



inline jule::Ref<_1487f5920_NsSelectionExpr> _1190cb760_ExprBuilder::_method_build_ns_sub_ident(jule::Slice<_108e15ff0_Token> _39041_tokens) {
	jule::Ref<_1487f5920_NsSelectionExpr> _39117_ns = jule::new_struct<_1487f5920_NsSelectionExpr>(new( std::nothrow ) _1487f5920_NsSelectionExpr());
	{
		auto __julec_range_expr = _39041_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			_108e15ff0_Token _1190cb760_token = *__julec_range_begin;
			_iter_begin_4382953328:;
			{
				if (jule::mod(_1190cb760_i,2LL) == 0LL) {
					if (_1190cb760_token._field_id != 2LLU) {
						(*this)._method_push_err(_1190cb760_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
						(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
					}
					_39117_ns->_field_ns=jule::append(_39117_ns->_field_ns,jule::Slice<_108e15ff0_Token>({_1190cb760_token}));
				} else if (_1190cb760_token._field_id != 23LLU) {
					(*this)._method_push_err(_1190cb760_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
					(*this)._method_push_suggestion(jule::Str("expected double colon \"::\"", 26),jule::Slice<jule::Any>({}));
				}
			}
			_iter_next_4382953328:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_token = *__julec_range_begin; goto _iter_begin_4382953328; }
			_iter_end_4382953328:;
		}
	}
	_39117_ns->_field_ident=_39117_ns->_field_ns[static_cast<jule::Int>(_39117_ns->_field_ns.len() - 1LL)];
	_39117_ns->_field_ns=_39117_ns->_field_ns.slice(0LL,static_cast<jule::Int>(_39117_ns->_field_ns.len() - 1LL));
	return _39117_ns;
}



inline jule::Ref<_1487f5920_TypeDecl> _1190cb760_ExprBuilder::_method_build_type(jule::Slice<_108e15ff0_Token> _40933_tokens) {
	jule::Int _41017_i = 0LL;
	jule::Ref<_1487f5920_TypeDecl> _41118_t;
	jule::Bool _41121_ok;
	std::tie(_41118_t,_41121_ok) = (*this)._field_p->_method_build_type(_40933_tokens,(&(_41017_i)),false);
	if ((!(_41121_ok))) {
		(*this)._method_push_err(_40933_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_TypeDecl>();
	}
	if (_41017_i < _40933_tokens.len()) {
		(*this)._method_push_err(_40933_tokens[static_cast<jule::Int>(_41017_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	return _41118_t;
}



inline jule::Any _1190cb760_ExprBuilder::_method_build_sub_ident(jule::Slice<_108e15ff0_Token> _42338_tokens) {
	jule::I64 _42413_i = _42338_tokens.len() - 2LL;
	_108e15ff0_Token _42513_token = _42338_tokens[static_cast<jule::Int>(_42413_i)];
	{
		auto _match_expr{ _42513_token._field_id };
		if (!((20LLU) == _match_expr)) { goto _case_end_4386237232; }
		_case_begin_4386237232:;
		{
			return jule::Any((*this)._method_build_obj_sub_ident(_42338_tokens));
		}
		goto _match_end_4386236128;
		_case_end_4386237232:;
		if (!((23LLU) == _match_expr)) { goto _case_end_4386237344; }
		_case_begin_4386237344:;
		{
			return jule::Any((*this)._method_build_ns_sub_ident(_42338_tokens));
		}
		goto _match_end_4386236128;
		_case_end_4386237344:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4386237456; }
		_case_begin_4386237456:;
		{
			if (_42513_token._field_kind == jule::Str("]", 1)) {
				return jule::Any((*this)._method_build_type(_42338_tokens));
			}
		}
		goto _match_end_4386236128;
		_case_end_4386237456:;
		_match_end_4386236128:;
	}
	(*this)._method_push_err(_42513_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	return jule::Any(nullptr);
}



inline jule::Ref<_1487f5920_VariadicExpr> _1190cb760_ExprBuilder::_method_build_variadic(jule::Slice<_108e15ff0_Token> _44437_tokens) {
	_108e15ff0_Token _44517_token = _44437_tokens[static_cast<jule::Int>(_44437_tokens.len() - 1LL)];
	_44437_tokens=_44437_tokens.slice(0LL,static_cast<jule::Int>(_44437_tokens.len() - 1LL));
	return jule::new_struct<_1487f5920_VariadicExpr>(new( std::nothrow ) _1487f5920_VariadicExpr(_44517_token,(*this)._method_build(_44437_tokens)));
}



inline jule::Any _1190cb760_ExprBuilder::_method_build_op_right(jule::Slice<_108e15ff0_Token> _45337_tokens) {
	_108e15ff0_Token _45417_token = _45337_tokens[static_cast<jule::Int>(_45337_tokens.len() - 1LL)];
	{
		auto _match_expr{ _45417_token._field_kind };
		if (!((jule::Str("...", 3)) == _match_expr)) { goto _case_end_4386258064; }
		_case_begin_4386258064:;
		{
			return jule::Any((*this)._method_build_variadic(_45337_tokens));
		}
		goto _match_end_4386252624;
		_case_end_4386258064:;
		_case_begin_4386254720:;
		{
			(*this)._method_push_err(_45417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4386252624;
		_case_end_4386254720:;
		_match_end_4386252624:;
	}
}



inline jule::Any _1190cb760_ExprBuilder::_method_build_between_parentheses(jule::Slice<_108e15ff0_Token> _46548_tokens) {
	_108e15ff0_Token _46613_token = _46548_tokens[0LL];
	_46548_tokens=_46548_tokens.slice(1LL,static_cast<jule::Int>(_46548_tokens.len() - 1LL));
	if (_46548_tokens.len() == 0LL) {
		(*this)._method_push_err(_46613_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("empty parentheses are not valid expression, must include an expression in range", 79),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	return (*this)._method_build(_46548_tokens);
}



inline jule::Ref<_1487f5920_CastExpr> _1190cb760_ExprBuilder::_method_try_build_cast(jule::Slice<_108e15ff0_Token> _47637_tokens) {
	jule::Int _47717_range_n = 0LL;
	{
		auto __julec_range_expr = _47637_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			_108e15ff0_Token _1190cb760_token = *__julec_range_begin;
			_iter_begin_4386270944:;
			{
				if (_1190cb760_token._field_id == 3LLU) {
					{
						auto _match_expr{ _1190cb760_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4386275264; }
						_case_begin_4386275264:;
						{
							(_47717_range_n)++;
							goto _iter_next_4386270944;
						}
						goto _match_end_4386273744;
						_case_end_4386275264:;
						_case_begin_4386274432:;
						{
							(_47717_range_n)--;
						}
						goto _match_end_4386273744;
						_case_end_4386274432:;
						_match_end_4386273744:;
					}
				}
				if (_47717_range_n > 0LL) {
					goto _iter_next_4386270944;
				} else if ((_1190cb760_i + 1LL) == _47637_tokens.len()) {
					return jule::new_ref<_1487f5920_CastExpr>();
				}
				jule::Slice<_108e15ff0_Token> _49821_type_tokens = _47637_tokens.slice(0LL,static_cast<jule::Int>(_1190cb760_i + 1LL));
				jule::Slice<_108e15ff0_Token> _49921_expr_tokens = _47637_tokens.slice(static_cast<jule::Int>(_1190cb760_i + 1LL));
				if (_49921_expr_tokens.len() == 0LL) {
					return jule::new_ref<_1487f5920_CastExpr>();
				}
				_108e15ff0_Token _50617_token = _49921_expr_tokens[0LL];
				if ((_50617_token._field_id != 3LLU) || (_50617_token._field_kind != jule::Str("(", 1))) {
					return jule::new_ref<_1487f5920_CastExpr>();
				}
				jule::Ref<_1487f5920_CastExpr> _51121_cast = jule::new_struct<_1487f5920_CastExpr>(new( std::nothrow ) _1487f5920_CastExpr());
				if (_49921_expr_tokens.len() == 2LL) {
					(*this)._method_push_err(_49921_expr_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
					(*this)._method_push_suggestion(jule::Str("give an expression for casting", 30),jule::Slice<jule::Any>({}));
				}
				if (_49821_type_tokens.len() == 2LL) {
					(*this)._method_push_err(_49821_type_tokens[0LL],jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
					(*this)._method_push_suggestion(jule::Str("type declaration expected for casting", 37),jule::Slice<jule::Any>({}));
				} else {
					_49821_type_tokens=_49821_type_tokens.slice(1LL,static_cast<jule::Int>(_49821_type_tokens.len() - 1LL));
					jule::Int _52525_type_index = 0LL;
					jule::Ref<_1487f5920_TypeDecl> _52626_t;
					jule::Bool _52629_ok;
					std::tie(_52626_t,_52629_ok) = (*this)._field_p->_method_build_type(_49821_type_tokens,(&(_52525_type_index)),true);
					if (_52629_ok && (_52525_type_index < _49821_type_tokens.len())) {
						(*this)._method_push_err(_49821_type_tokens[static_cast<jule::Int>(_52525_type_index)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
					} else if ((!(_52629_ok))) {
						return _51121_cast;
					}
					_51121_cast->_field_kind=_52626_t;
					if (_49921_expr_tokens.len() > 2LL) {
						jule::Int _53629_i = 0LL;
						_138657c70_range(_53629_i,jule::Str("(", 1),jule::Str(")", 1),_49921_expr_tokens);
						if (_53629_i < _49921_expr_tokens.len()) {
							return jule::new_ref<_1487f5920_CastExpr>();
						}
						_51121_cast->_field_expr=(*this)._method_build(_49921_expr_tokens.slice(0LL,static_cast<jule::Int>(_53629_i)));
					}
				}
				return _51121_cast;
			}
			_iter_next_4386270944:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_token = *__julec_range_begin; goto _iter_begin_4386270944; }
			_iter_end_4386270944:;
		}
	}
	return jule::new_ref<_1487f5920_CastExpr>();
}



inline void _1190cb760_ExprBuilder::_method_push_arg(jule::Slice<jule::Ref<_1487f5920_Expr>>& _55032_args,jule::Slice<_108e15ff0_Token> _55051_tokens,_108e15ff0_Token _55068_err_token) {
	if (_55051_tokens.len() == 0LL) {
		(*this)._method_push_err(_55068_err_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>({}));
		return;
	}
	_55032_args=jule::append(_55032_args,jule::Slice<jule::Ref<_1487f5920_Expr>>({(*this)._method_build_from_tokens(_55051_tokens)}));
}



inline jule::Slice<jule::Ref<_1487f5920_Expr>> _1190cb760_ExprBuilder::_method_build_args(jule::Slice<_108e15ff0_Token> _55933_tokens) {
	if (_55933_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_1487f5920_Expr>> _56517_args = nullptr;
	jule::Int _56617_last = 0LL;
	jule::Int _56717_range_n = 0LL;
	_55933_tokens=_55933_tokens.slice(1LL,static_cast<jule::Int>(_55933_tokens.len() - 1LL));
	{
		auto __julec_range_expr = _55933_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			_108e15ff0_Token _1190cb760_token = *__julec_range_begin;
			_iter_begin_4386322528:;
			{
				if (_1190cb760_token._field_id == 3LLU) {
					{
						auto _match_expr{ _1190cb760_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4386328208; }
						_case_begin_4386328208:;
						{
							(_56717_range_n)++;
						}
						goto _match_end_4386326688;
						_case_end_4386328208:;
						_case_begin_4386327376:;
						{
							(_56717_range_n)--;
						}
						goto _match_end_4386326688;
						_case_end_4386327376:;
						_match_end_4386326688:;
					}
				}
				if ((_56717_range_n > 0LL) || (_1190cb760_token._field_id != 8LLU)) {
					goto _iter_next_4386322528;
				}
				(*this)._method_push_arg(_56517_args,_55933_tokens.slice(static_cast<jule::Int>(_56617_last),static_cast<jule::Int>(_1190cb760_i)),_1190cb760_token);
				_56617_last=static_cast<jule::Int>(_1190cb760_i + 1LL);
			}
			_iter_next_4386322528:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_token = *__julec_range_begin; goto _iter_begin_4386322528; }
			_iter_end_4386322528:;
		}
	}
	if (_56617_last < _55933_tokens.len()) {
		if (_56617_last == 0LL) {
			if (_55933_tokens.len() > 0LL) {
				(*this)._method_push_arg(_56517_args,_55933_tokens.slice(static_cast<jule::Int>(_56617_last)),_55933_tokens[static_cast<jule::Int>(_56617_last)]);
			}
		} else {
			(*this)._method_push_arg(_56517_args,_55933_tokens.slice(static_cast<jule::Int>(_56617_last)),_55933_tokens[static_cast<jule::Int>(_56617_last - 1LL)]);
		}
	}
	return _56517_args;
}



inline jule::Slice<jule::Ref<_1487f5920_TypeDecl>> _1190cb760_ExprBuilder::_method_build_call_generics(jule::Slice<_108e15ff0_Token> _60242_tokens) {
	if (_60242_tokens.len() == 0LL) {
		return nullptr;
	}
	_60242_tokens=_60242_tokens.slice(1LL,static_cast<jule::Int>(_60242_tokens.len() - 1LL));
	jule::Slice<jule::Slice<_108e15ff0_Token>> _60818_parts;
	jule::Slice<_1486379e0_Log> _60825_errs;
	std::tie(_60818_parts,_60825_errs) = _138657c70_parts(_60242_tokens,8LLU,true);
	jule::Slice<jule::Ref<_1487f5920_TypeDecl>> _60917_generics = jule::Slice<jule::Ref<_1487f5920_TypeDecl>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_60818_parts.len())));
	(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_60825_errs);
	{
		auto __julec_range_expr = _60818_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			jule::Slice<_108e15ff0_Token> _1190cb760_part = *__julec_range_begin;
			_iter_begin_4386349632:;
			{
				if (_1190cb760_part.len() == 0LL) {
					goto _iter_next_4386349632;
				}
				jule::Int _61521_j = 0LL;
				jule::Ref<_1487f5920_TypeDecl> _61622_generic;
				std::tie(_61622_generic,std::ignore) = (*this)._field_p->_method_build_type(_1190cb760_part,(&(_61521_j)),true);
				if (_61521_j < _1190cb760_part.len()) {
					(*this)._method_push_err(_1190cb760_part[static_cast<jule::Int>(_61521_j)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				}
				_60917_generics[static_cast<jule::Int>(_1190cb760_i)]=_61622_generic;
			}
			_iter_next_4386349632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_part = *__julec_range_begin; goto _iter_begin_4386349632; }
			_iter_end_4386349632:;
		}
	}
	return _60917_generics;
}



inline jule::Ref<_1487f5920_FnCallExpr> _1190cb760_ExprBuilder::_method_build_fn_call(_108e15ff0_Token _62636_token,jule::Ref<_1190cb760_CallData> _62654_data) {
	return jule::new_struct<_1487f5920_FnCallExpr>(new( std::nothrow ) _1487f5920_FnCallExpr(_62636_token,(*this)._method_build_from_tokens(_62654_data->_field_expr_tokens),(*this)._method_build_call_generics(_62654_data->_field_generics_tokens),(*this)._method_build_args(_62654_data->_field_args_tokens),jule::Bool()));
}



inline jule::Any _1190cb760_ExprBuilder::_method_build_parentheses_range(jule::Slice<_108e15ff0_Token> _63546_tokens) {
	_108e15ff0_Token _63617_token = _63546_tokens[0LL];
	{
		auto _match_expr{ _63617_token._field_id };
		if (!((3LLU) == _match_expr)) { goto _case_end_4386371072; }
		_case_begin_4386371072:;
		{
			{
				auto _match_expr{ _63617_token._field_kind };
				if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4386372736; }
				_case_begin_4386372736:;
				{
					jule::Ref<_1487f5920_CastExpr> _64125_expr = (*this)._method_try_build_cast(_63546_tokens);
					if (jule::real(_64125_expr)) {
						return jule::Any(_64125_expr);
					}
				}
				goto _match_end_4386371616;
				_case_end_4386372736:;
				_match_end_4386371616:;
			}
		}
		goto _match_end_4386369808;
		_case_end_4386371072:;
		_match_end_4386369808:;
	}
	jule::Ref<_1190cb760_CallData> _64817_data = _1190cb760_get_call_data(_63546_tokens);
	if (_64817_data->_field_expr_tokens.len() == 0LL) {
		return (*this)._method_build_between_parentheses(_64817_data->_field_args_tokens);
	}
	return jule::Any((*this)._method_build_fn_call(_63617_token,_64817_data));
}



inline jule::Ref<_1487f5920_UnsafeExpr> _1190cb760_ExprBuilder::_method_build_unsafe_expr(jule::Slice<_108e15ff0_Token> _65940_tokens) {
	_108e15ff0_Token _66017_token = _65940_tokens[0LL];
	_65940_tokens=_65940_tokens.slice(1LL);
	jule::Int _66217_i = 0LL;
	jule::Slice<_108e15ff0_Token> _66317_range_tokens = _138657c70_range(_66217_i,jule::Str("{", 1),jule::Str("}", 1),_65940_tokens);
	if (_66317_range_tokens.len() == 0LL) {
		(*this)._method_push_err(_65940_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_UnsafeExpr>();
	}
	return jule::new_struct<_1487f5920_UnsafeExpr>(new( std::nothrow ) _1487f5920_UnsafeExpr(_66017_token,(*this)._method_build_from_tokens(_66317_range_tokens)->_field_kind));
}



inline jule::Ref<_1487f5920_FnDecl> _1190cb760_ExprBuilder::_method_build_anon_fn(jule::Slice<_108e15ff0_Token> _67436_tokens) {
	jule::Ref<_1487f5920_FnDecl> _67517_f = (*this)._field_p->_method_build_fn(_67436_tokens,false,false);
	if ((!(_67517_f->_method_is_anon()))) {
		(*this)._method_push_err(_67517_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("anonymous function expected, remove identifier of function", 58),jule::Slice<jule::Any>({}));
	}
	return _67517_f;
}



inline jule::Any _1190cb760_ExprBuilder::_method_build_unsafe(jule::Slice<_108e15ff0_Token> _68335_tokens) {
	{
		auto _match_expr{ _68335_tokens[1LL]._field_id };
		if (!((33LLU) == _match_expr)) { goto _case_end_4386402704; }
		_case_begin_4386402704:;
		{
			return jule::Any((*this)._method_build_anon_fn(_68335_tokens));
		}
		goto _match_end_4386400240;
		_case_end_4386402704:;
		_case_begin_4386401184:;
		{
			return jule::Any((*this)._method_build_unsafe_expr(_68335_tokens));
		}
		goto _match_end_4386400240;
		_case_end_4386401184:;
		_match_end_4386400240:;
	}
}



inline void _1190cb760_ExprBuilder::_method_push_range_lit_part(jule::Slice<_108e15ff0_Token> _69442_part,_108e15ff0_Token _6959_error_token,jule::Slice<jule::Slice<_108e15ff0_Token>>& _69534_parts) {
	if (_69442_part.len() == 0LL) {
		(*this)._method_push_err(_6959_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>({}));
		return;
	}
	_69534_parts=jule::append(_69534_parts,jule::Slice<jule::Slice<_108e15ff0_Token>>({_69442_part}));
}



inline jule::Slice<jule::Slice<_108e15ff0_Token>> _1190cb760_ExprBuilder::_method_get_brace_range_lit_expr_parts(jule::Slice<_108e15ff0_Token> _70553_tokens) {
	if (_70553_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_108e15ff0_Token>> _71117_parts = nullptr;
	jule::Int _71317_last = 0LL;
	jule::Int _71417_range_n = 0LL;
	_70553_tokens=_70553_tokens.slice(1LL,static_cast<jule::Int>(_70553_tokens.len() - 1LL));
	{
		auto __julec_range_expr = _70553_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			_108e15ff0_Token _1190cb760_token = *__julec_range_begin;
			_iter_begin_4386418656:;
			{
				if (_1190cb760_token._field_id == 3LLU) {
					{
						auto _match_expr{ _1190cb760_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4386424336; }
						_case_begin_4386424336:;
						{
							(_71417_range_n)++;
						}
						goto _match_end_4386422816;
						_case_end_4386424336:;
						_case_begin_4386423504:;
						{
							(_71417_range_n)--;
						}
						goto _match_end_4386422816;
						_case_end_4386423504:;
						_match_end_4386422816:;
					}
				}
				if ((_71417_range_n > 0LL) || (_1190cb760_token._field_id != 8LLU)) {
					goto _iter_next_4386418656;
				}
				(*this)._method_push_range_lit_part(_70553_tokens.slice(static_cast<jule::Int>(_71317_last),static_cast<jule::Int>(_1190cb760_i)),_1190cb760_token,_71117_parts);
				_71317_last=static_cast<jule::Int>(_1190cb760_i + 1LL);
			}
			_iter_next_4386418656:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_token = *__julec_range_begin; goto _iter_begin_4386418656; }
			_iter_end_4386418656:;
		}
	}
	if (_71317_last < _70553_tokens.len()) {
		if (_71317_last == 0LL) {
			if (_70553_tokens.len() > 0LL) {
				(*this)._method_push_range_lit_part(_70553_tokens.slice(static_cast<jule::Int>(_71317_last)),_70553_tokens[static_cast<jule::Int>(_71317_last)],_71117_parts);
			}
		} else {
			(*this)._method_push_range_lit_part(_70553_tokens.slice(static_cast<jule::Int>(_71317_last)),_70553_tokens[static_cast<jule::Int>(_71317_last - 1LL)],_71117_parts);
		}
	}
	return _71117_parts;
}



inline jule::Ref<_1487f5920_FieldExprPair> _1190cb760_ExprBuilder::_method_build_field_expr_pair(jule::Slice<_108e15ff0_Token> _74844_tokens) {
	jule::Ref<_1487f5920_FieldExprPair> _74917_pair = jule::new_struct<_1487f5920_FieldExprPair>(new( std::nothrow ) _1487f5920_FieldExprPair(_74844_tokens[0LL],jule::Any()));
	_74844_tokens=_74844_tokens.slice(2LL);
	_74917_pair->_field_expr=(*this)._method_build_from_tokens(_74844_tokens)->_field_kind;
	return _74917_pair;
}



inline jule::Any _1190cb760_ExprBuilder::_method_build_struct_lit_expr(jule::Slice<_108e15ff0_Token> _75744_tokens) {
	_108e15ff0_Token _75813_token = _75744_tokens[0LL];
	if (_75813_token._field_id == 2LLU) {
		if (_75744_tokens.len() > 1LL) {
			_108e15ff0_Token _76121_token = _75744_tokens[1LL];
			if (_76121_token._field_id == 11LLU) {
				return jule::Any((*this)._method_build_field_expr_pair(_75744_tokens));
			}
		}
	}
	return jule::Any((*this)._method_build_from_tokens(_75744_tokens));
}



inline jule::Slice<jule::Any> _1190cb760_ExprBuilder::_method_build_struct_lit_exprs(jule::Slice<_108e15ff0_Token> _77045_tokens) {
	jule::Slice<jule::Slice<_108e15ff0_Token>> _77117_parts = (*this)._method_get_brace_range_lit_expr_parts(_77045_tokens);
	if (_77117_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Any> _77617_pairs = jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_77117_parts.len())));
	{
		auto __julec_range_expr = _77117_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			jule::Slice<_108e15ff0_Token> _1190cb760_part = *__julec_range_begin;
			_iter_begin_4385198656:;
			{
				_77617_pairs[static_cast<jule::Int>(_1190cb760_i)]=(*this)._method_build_struct_lit_expr(_1190cb760_part);
			}
			_iter_next_4385198656:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_part = *__julec_range_begin; goto _iter_begin_4385198656; }
			_iter_end_4385198656:;
		}
	}
	return _77617_pairs;
}



inline jule::Ref<_1487f5920_StructLit> _1190cb760_ExprBuilder::_method_build_typed_struct_literal(jule::Slice<_108e15ff0_Token> _78349_tokens) {
	jule::Int _78417_i = 0LL;
	jule::Ref<_1487f5920_TypeDecl> _78518_t;
	jule::Bool _78521_ok;
	std::tie(_78518_t,_78521_ok) = (*this)._field_p->_method_build_type(_78349_tokens,(&(_78417_i)),true);
	if ((!(_78521_ok))) {
		return jule::new_ref<_1487f5920_StructLit>();
	} else if (_78417_i >= _78349_tokens.len()) {
		(*this)._method_push_err(_78349_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_StructLit>();
	}
	_78349_tokens=_78349_tokens.slice(static_cast<jule::Int>(_78417_i));
	_108e15ff0_Token _79413_token = _78349_tokens[0LL];
	if ((_79413_token._field_id != 3LLU) || (_79413_token._field_kind != jule::Str("{", 1))) {
		(*this)._method_push_err(_79413_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_StructLit>();
	}
	return jule::new_struct<_1487f5920_StructLit>(new( std::nothrow ) _1487f5920_StructLit(_78518_t,(*this)._method_build_struct_lit_exprs(_78349_tokens)));
}



inline jule::Any _1190cb760_ExprBuilder::_method_build_brace_lit_part(jule::Slice<_108e15ff0_Token> _80643_tokens) {
	jule::Slice<_108e15ff0_Token> _80718_l;
	jule::Slice<_108e15ff0_Token> _80725_r;
	std::tie(_80718_l,_80725_r) = _1190cb760_split_colon(_80643_tokens);
	if (_80718_l != nullptr) {
		return jule::Any(jule::new_struct<_1487f5920_KeyValPair>(new( std::nothrow ) _1487f5920_KeyValPair((*this)._method_build_from_tokens(_80718_l)->_field_kind,(*this)._method_build_from_tokens(_80725_r)->_field_kind,_80643_tokens[static_cast<jule::Int>(_80718_l.len())])));
	}
	return jule::Any((*this)._method_build_from_tokens(_80643_tokens));
}



inline jule::Ref<_1487f5920_BraceLit> _1190cb760_ExprBuilder::_method_build_brace_lit(jule::Slice<_108e15ff0_Token> _81938_tokens) {
	jule::Ref<_1487f5920_BraceLit> _82017_lit = jule::new_struct<_1487f5920_BraceLit>(new( std::nothrow ) _1487f5920_BraceLit(_81938_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_108e15ff0_Token>> _82417_parts = (*this)._method_get_brace_range_lit_expr_parts(_81938_tokens);
	if (_82417_parts == nullptr) {
		return _82017_lit;
	}
	_82017_lit->_field_exprs=jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_82417_parts.len())));
	{
		auto __julec_range_expr = _82417_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			jule::Slice<_108e15ff0_Token> _1190cb760_part = *__julec_range_begin;
			_iter_begin_4385232640:;
			{
				_82017_lit->_field_exprs[static_cast<jule::Int>(_1190cb760_i)]=(*this)._method_build_brace_lit_part(_1190cb760_part);
			}
			_iter_next_4385232640:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_part = *__julec_range_begin; goto _iter_begin_4385232640; }
			_iter_end_4385232640:;
		}
	}
	return _82017_lit;
}



inline jule::Any _1190cb760_ExprBuilder::_method_build_brace_range(jule::Slice<_108e15ff0_Token> _83740_tokens) {
	jule::Slice<_108e15ff0_Token> _83814_expr_tokens;
	jule::Int _83827_range_n;
	std::tie(_83814_expr_tokens,_83827_range_n) = _1190cb760_get_range_expr_tokens(_83740_tokens);
	{
		if (!((_83814_expr_tokens.len() == 0LL))) { goto _case_end_4385241216; }
		_case_begin_4385241216:;
		{
			return jule::Any((*this)._method_build_brace_lit(_83740_tokens));
		}
		goto _match_end_4385240928;
		_case_end_4385241216:;
		if (!((_83827_range_n > 0LL))) { goto _case_end_4385241328; }
		_case_begin_4385241328:;
		{
			(*this)._method_push_err(_83740_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4385240928;
		_case_end_4385241328:;
		_match_end_4385240928:;
	}
	{
		auto _match_expr{ _83814_expr_tokens[0LL]._field_id };
		if (!((35LLU) == _match_expr)) { goto _case_end_4385248752; }
		_case_begin_4385248752:;
		{
			return (*this)._method_build_unsafe(_83740_tokens);
		}
		goto _match_end_4385245392;
		_case_end_4385248752:;
		if (!((33LLU) == _match_expr)) { goto _case_end_4385248224; }
		_case_begin_4385248224:;
		{
			return jule::Any((*this)._method_build_anon_fn(_83740_tokens));
		}
		goto _match_end_4385245392;
		_case_end_4385248224:;
		if (!((2LLU) == _match_expr || (31LLU) == _match_expr)) { goto _case_end_4385248336; }
		_case_begin_4385248336:;
		{
			return jule::Any((*this)._method_build_typed_struct_literal(_83740_tokens));
		}
		goto _match_end_4385245392;
		_case_end_4385248336:;
		_case_begin_4385241984:;
		{
			(*this)._method_push_err(_83814_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4385245392;
		_case_end_4385241984:;
		_match_end_4385245392:;
	}
}



inline jule::Slice<jule::Slice<_108e15ff0_Token>> _1190cb760_ExprBuilder::_method_get_enumerable_parts(jule::Slice<_108e15ff0_Token> _86743_tokens) {
	_86743_tokens=_86743_tokens.slice(1LL,static_cast<jule::Int>(_86743_tokens.len() - 1LL));
	jule::Slice<jule::Slice<_108e15ff0_Token>> _86918_parts;
	jule::Slice<_1486379e0_Log> _86925_errors;
	std::tie(_86918_parts,_86925_errors) = _138657c70_parts(_86743_tokens,8LLU,true);
	(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_86925_errors);
	return _86918_parts;
}



inline jule::Ref<_1487f5920_SliceExpr> _1190cb760_ExprBuilder::_method_build_slice(jule::Slice<_108e15ff0_Token> _87434_tokens) {
	jule::Ref<_1487f5920_SliceExpr> _87517_slc = jule::new_struct<_1487f5920_SliceExpr>(new( std::nothrow ) _1487f5920_SliceExpr(_87434_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_108e15ff0_Token>> _87917_parts = (*this)._method_get_enumerable_parts(_87434_tokens);
	if (_87917_parts.len() == 0LL) {
		return _87517_slc;
	}
	_87517_slc->_field_elems=jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_87917_parts.len())));
	{
		auto __julec_range_expr = _87917_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			jule::Slice<_108e15ff0_Token> _1190cb760_p = *__julec_range_begin;
			_iter_begin_4386441264:;
			{
				_87517_slc->_field_elems[static_cast<jule::Int>(_1190cb760_i)]=(*this)._method_build_from_tokens(_1190cb760_p)->_field_kind;
			}
			_iter_next_4386441264:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_p = *__julec_range_begin; goto _iter_begin_4386441264; }
			_iter_end_4386441264:;
		}
	}
	return _87517_slc;
}



inline jule::Ref<_1487f5920_IndexingExpr> _1190cb760_ExprBuilder::_method_build_indexing(jule::Slice<_108e15ff0_Token> _89237_expr_tokens,jule::Slice<_108e15ff0_Token> _89313_tokens,_108e15ff0_Token _89334_error_token) {
	_89313_tokens=_89313_tokens.slice(1LL,static_cast<jule::Int>(_89313_tokens.len() - 1LL));
	return jule::new_struct<_1487f5920_IndexingExpr>(new( std::nothrow ) _1487f5920_IndexingExpr(_89334_error_token,(*this)._method_build_from_tokens(_89237_expr_tokens)->_field_kind,(*this)._method_build_from_tokens(_89313_tokens)->_field_kind));
}



inline jule::Ref<_1487f5920_SlicingExpr> _1190cb760_ExprBuilder::_method_build_slicing(jule::Slice<_108e15ff0_Token> _90236_expr_tokens,jule::Slice<_108e15ff0_Token> _90262_slicing_tokens,jule::Int _9039_colon,_108e15ff0_Token _90321_error_token) {
	jule::Ref<_1487f5920_SlicingExpr> _90417_slc = jule::new_struct<_1487f5920_SlicingExpr>(new( std::nothrow ) _1487f5920_SlicingExpr(_90321_error_token,(*this)._method_build_from_tokens(_90236_expr_tokens)->_field_kind,jule::Any(),jule::Any()));
	jule::Slice<_108e15ff0_Token> _90917_start_expr_tokens = _90262_slicing_tokens.slice(0LL,static_cast<jule::Int>(_9039_colon));
	if (_90917_start_expr_tokens.len() > 0LL) {
		_90417_slc->_field_start=(*this)._method_build_from_tokens(_90917_start_expr_tokens)->_field_kind;
	}
	jule::Slice<_108e15ff0_Token> _91417_to_expr_tokens = _90262_slicing_tokens.slice(static_cast<jule::Int>(_9039_colon + 1LL));
	if (_91417_to_expr_tokens.len() > 0LL) {
		_90417_slc->_field_to=(*this)._method_build_from_tokens(_91417_to_expr_tokens)->_field_kind;
	}
	return _90417_slc;
}



inline jule::Any _1190cb760_ExprBuilder::_method_build_bracket_range(jule::Slice<_108e15ff0_Token> _92242_tokens) {
	_108e15ff0_Token _92317_error_token = _92242_tokens[0LL];
	jule::Slice<_108e15ff0_Token> _92418_expr_tokens;
	jule::Int _92431_range_n;
	std::tie(_92418_expr_tokens,_92431_range_n) = _1190cb760_get_range_expr_tokens(_92242_tokens);
	{
		if (!((_92418_expr_tokens.len() == 0LL))) { goto _case_end_4386473376; }
		_case_begin_4386473376:;
		{
			return jule::Any((*this)._method_build_slice(_92242_tokens));
		}
		goto _match_end_4386473232;
		_case_end_4386473376:;
		if (!(((_92418_expr_tokens.len() == 0LL) || (_92431_range_n > 0LL)))) { goto _case_end_4386473504; }
		_case_begin_4386473504:;
		{
			(*this)._method_push_err(_92317_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4386473232;
		_case_end_4386473504:;
		_match_end_4386473232:;
	}
	_92242_tokens=_92242_tokens.slice(static_cast<jule::Int>(_92418_expr_tokens.len()));
	jule::Int _94317_i = 0LL;
	jule::Slice<_108e15ff0_Token> _94418_slicing_tokens;
	jule::Int _94434_colon;
	std::tie(_94418_slicing_tokens,_94434_colon) = _103796900_split_map_range(_92242_tokens,_94317_i);
	if (_94434_colon != -1LL) {
		return jule::Any((*this)._method_build_slicing(_92418_expr_tokens,_94418_slicing_tokens,_94434_colon,_92317_error_token));
	}
	return jule::Any((*this)._method_build_indexing(_92418_expr_tokens,_92242_tokens,_92317_error_token));
}



inline jule::Any _1190cb760_ExprBuilder::_method_build_data(jule::Slice<_108e15ff0_Token> _95133_tokens) {
	{
		auto _match_expr{ _95133_tokens.len() };
		if (!((0LL) == _match_expr)) { goto _case_end_4386486720; }
		_case_begin_4386486720:;
		{
			return jule::Any(nullptr);
		}
		goto _match_end_4386485968;
		_case_end_4386486720:;
		if (!((1LL) == _match_expr)) { goto _case_end_4386486832; }
		_case_begin_4386486832:;
		{
			return (*this)._method_build_single(_95133_tokens[0LL]);
		}
		goto _match_end_4386485968;
		_case_end_4386486832:;
		if (!((3LL) == _match_expr)) { goto _case_end_4386486944; }
		_case_begin_4386486944:;
		{
			if (_95133_tokens[0LL]._field_id == 31LLU) {
				return jule::Any((*this)._method_build_cpp_linked_ident(_95133_tokens));
			}
		}
		goto _match_end_4386485968;
		_case_end_4386486944:;
		_match_end_4386485968:;
	}
	_108e15ff0_Token _96517_token = _95133_tokens[0LL];
	{
		auto _match_expr{ _96517_token._field_id };
		if (!((7LLU) == _match_expr)) { goto _case_end_4386487968; }
		_case_begin_4386487968:;
		{
			if ((_95133_tokens.len() > 1LL) && (_96517_token._field_kind == jule::Str("*", 1))) {
				_96517_token=_95133_tokens[1LL];
				if ((_96517_token._field_id == 1LLU) || (_96517_token._field_id == 35LLU)) {
					return jule::Any((*this)._method_build_type(_95133_tokens));
				}
			}
			return jule::Any((*this)._method_build_unary(_95133_tokens));
		}
		goto _match_end_4386487440;
		_case_end_4386487968:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4386492528; }
		_case_begin_4386492528:;
		{
			if ((_96517_token._field_kind != jule::Str("[", 1)) || (_95133_tokens.len() < 3LL)) {
				goto _match_end_4386487440;
			}
			_108e15ff0_Token _98317_next = _95133_tokens[1LL];
			if ((_98317_next._field_id != 3LLU) || (_98317_next._field_kind != jule::Str("]", 1))) {
				goto _match_end_4386487440;
			}
			return jule::Any((*this)._method_build_type(_95133_tokens));
		}
		goto _match_end_4386487440;
		_case_end_4386492528:;
		_match_end_4386487440:;
	}
	_96517_token=_95133_tokens[static_cast<jule::Int>(_95133_tokens.len() - 1LL)];
	{
		auto _match_expr{ _96517_token._field_id };
		if (!((2LLU) == _match_expr)) { goto _case_end_4386504208; }
		_case_begin_4386504208:;
		{
			return (*this)._method_build_sub_ident(_95133_tokens);
		}
		goto _match_end_4386493440;
		_case_end_4386504208:;
		if (!((1LLU) == _match_expr)) { goto _case_end_4386504336; }
		_case_begin_4386504336:;
		{
			return jule::Any((*this)._method_build_type(_95133_tokens));
		}
		goto _match_end_4386493440;
		_case_end_4386504336:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4386504448; }
		_case_begin_4386504448:;
		{
			return (*this)._method_build_op_right(_95133_tokens);
		}
		goto _match_end_4386493440;
		_case_end_4386504448:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4386504560; }
		_case_begin_4386504560:;
		{
			{
				auto _match_expr{ _96517_token._field_kind };
				if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4386508928; }
				_case_begin_4386508928:;
				{
					return (*this)._method_build_parentheses_range(_95133_tokens);
				}
				goto _match_end_4386505312;
				_case_end_4386508928:;
				if (!((jule::Str("}", 1)) == _match_expr)) { goto _case_end_4386509040; }
				_case_begin_4386509040:;
				{
					return (*this)._method_build_brace_range(_95133_tokens);
				}
				goto _match_end_4386505312;
				_case_end_4386509040:;
				if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4386509152; }
				_case_begin_4386509152:;
				{
					return (*this)._method_build_bracket_range(_95133_tokens);
				}
				goto _match_end_4386505312;
				_case_end_4386509152:;
				_match_end_4386505312:;
			}
		}
		goto _match_end_4386493440;
		_case_end_4386504560:;
		_match_end_4386493440:;
	}
	(*this)._method_push_err(_95133_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	return jule::Any(nullptr);
}



inline jule::Ref<_1487f5920_BinopExpr> _1190cb760_ExprBuilder::_method_build_binop(jule::Slice<_108e15ff0_Token> _102034_tokens,jule::Int _102051_i) {
	jule::Slice<_108e15ff0_Token> _102117_left_tokens = _102034_tokens.slice(0LL,static_cast<jule::Int>(_102051_i));
	jule::Slice<_108e15ff0_Token> _102217_right_tokens = _102034_tokens.slice(static_cast<jule::Int>(_102051_i + 1LL));
	if (_102117_left_tokens.len() == 0LL) {
		(*this)._method_push_err(_102034_tokens[static_cast<jule::Int>(_102051_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("left operand expected for binary operator", 41),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_BinopExpr>();
	}
	if (_102217_right_tokens.len() == 0LL) {
		(*this)._method_push_err(_102034_tokens[static_cast<jule::Int>(_102051_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("right operand expected for binary operator", 42),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_BinopExpr>();
	}
	return jule::new_struct<_1487f5920_BinopExpr>(new( std::nothrow ) _1487f5920_BinopExpr((*this)._method_build(_102117_left_tokens),(*this)._method_build(_102217_right_tokens),_102034_tokens[static_cast<jule::Int>(_102051_i)]));
}



inline jule::Any _1190cb760_ExprBuilder::_method_build(jule::Slice<_108e15ff0_Token> _104328_tokens) {
	jule::Int _104413_i = _1190cb760_find_lowest_prec_op(_104328_tokens);
	if (_104413_i == -1LL) {
		return (*this)._method_build_data(_104328_tokens);
	}
	return jule::Any((*this)._method_build_binop(_104328_tokens,_104413_i));
}



inline jule::Any _1190cb760_ExprBuilder::_method_build_kind(jule::Slice<_108e15ff0_Token> _105133_tokens) {
	jule::Slice<jule::Slice<_108e15ff0_Token>> _105218_parts;
	jule::Slice<_1486379e0_Log> _105225_errors;
	std::tie(_105218_parts,_105225_errors) = _138657c70_parts(_105133_tokens,8LLU,true);
	if (_105225_errors != nullptr) {
		(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_105225_errors);
		return jule::Any(nullptr);
	} else if (_105218_parts.len() > 1LL) {
		return jule::Any((*this)._method_build_tuple(_105218_parts));
	}
	return (*this)._method_build(_105133_tokens);
}



inline jule::Ref<_1487f5920_Expr> _1190cb760_ExprBuilder::_method_build_from_tokens(jule::Slice<_108e15ff0_Token> _106240_tokens) {
	_106240_tokens=_1190cb760_eliminate_comments(_106240_tokens);
	if (_106240_tokens.len() == 0LL) {
		return jule::new_ref<_1487f5920_Expr>();
	}
	return jule::new_struct<_1487f5920_Expr>(new( std::nothrow ) _1487f5920_Expr(_106240_tokens[0LL],(*this)._method_build_kind(_106240_tokens)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1190cb760_ExprBuilder &_Src) {
	_Stream << "ExprBuilder{";
	_Stream << "p:" << _Src._field_p;
	_Stream << "}";
	return _Stream;
}



inline void _138657c70_Parser::_method_stop(void) {
	jule::drop((*this)._field_ast);
}



inline jule::Bool _138657c70_Parser::_method_stopped(void) {
	return (!(jule::real((*this)._field_ast)));
}



inline void _138657c70_Parser::_method_push_err(_108e15ff0_Token _24027_token,jule::Str _24041_fmt,jule::Slice<jule::Any> _24054_args) {
	(*this)._field_errors=jule::append((*this)._field_errors,jule::Slice<_1486379e0_Log>({_138657c70_compiler_err(_24027_token,_24041_fmt,_24054_args)}));
}



inline void _138657c70_Parser::_method_push_suggestion(jule::Str _24534_fmt,jule::Slice<jule::Any> _24547_args) {
	{
		_138657c70_push_suggestion((&((*this)._field_errors[static_cast<jule::Int>((*this)._field_errors.len() - 1LL)])),_24534_fmt,_24547_args);
	}
}



inline jule::Ref<_1487f5920_Expr> _138657c70_Parser::_method_build_expr(jule::Slice<_108e15ff0_Token> _24934_tokens) {
	jule::Ref<_1190cb760_ExprBuilder> _25017_ep = jule::new_struct<_1190cb760_ExprBuilder>(new( std::nothrow ) _1190cb760_ExprBuilder(this->self));
	jule::Ref<_1487f5920_Expr> _25117_expr = _25017_ep->_method_build_from_tokens(_24934_tokens);
	return _25117_expr;
}



inline jule::Ref<_1487f5920_Directive> _138657c70_Parser::_method_get_directive(jule::Ref<_1487f5920_Comment> _25528_c) {
	if (_25528_c->_field_text.len() <= jule::Str("jule:", 5).len()) {
		return jule::new_ref<_1487f5920_Directive>();
	}
	jule::Ref<_1487f5920_Directive> _26017_d = jule::new_struct<_1487f5920_Directive>(new( std::nothrow ) _1487f5920_Directive(_25528_c->_field_token,jule::Str(),jule::Slice<jule::Str>()));
	jule::Str _26413_pragma = _25528_c->_field_token._field_kind.slice(static_cast<jule::Int>(jule::Str("jule:", 5).len()));
	jule::Slice<jule::Str> _26517_parts = _26413_pragma.split(jule::Str(" ", 1),-1LL);
	_26017_d->_field_tag=_26517_parts[0LL];
	_26017_d->_field_args=_26517_parts.slice(1LL);
	jule::Bool _27117_ok = false;
	{
		auto __julec_range_expr = _149036e70_DIRECTIVES;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _138657c70_kind = *__julec_range_begin;
			_iter_begin_4386577072:;
			{
				if (_26017_d->_field_tag == _138657c70_kind) {
					_27117_ok=true;
					goto _iter_end_4386577072;
				}
			}
			_iter_next_4386577072:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _138657c70_kind = *__julec_range_begin; goto _iter_begin_4386577072; }
			_iter_end_4386577072:;
		}
	}
	if ((!(_27117_ok))) {
		return jule::new_ref<_1487f5920_Directive>();
	}
	return _26017_d;
}



inline void _138657c70_Parser::_method_push_directive(jule::Ref<_1487f5920_Comment> _28533_c) {
	jule::Ref<_1487f5920_Directive> _28617_d = (*this)._method_get_directive(_28533_c);
	if ((!(jule::real(_28617_d)))) {
		return;
	}
	{
		auto __julec_range_expr = (*this)._field_directives;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1487f5920_Directive> _138657c70_pd = *__julec_range_begin;
			_iter_begin_4386584016:;
			{
				if (_28617_d->_field_tag == _138657c70_pd->_field_tag) {
					return;
				}
			}
			_iter_next_4386584016:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _138657c70_pd = *__julec_range_begin; goto _iter_begin_4386584016; }
			_iter_end_4386584016:;
		}
	}
	(*this)._field_directives=jule::append((*this)._field_directives,jule::Slice<jule::Ref<_1487f5920_Directive>>({_28617_d}));
}



inline void _138657c70_Parser::_method_process_comment(jule::Ref<_1487f5920_Comment> _30138_c) {
	if (_30138_c->_method_is_directive()) {
		(*this)._method_push_directive(_30138_c);
		return;
	}
	if ((!(jule::real((*this)._field_comment_group)))) {
		(*this)._field_comment_group=jule::new_struct<_1487f5920_CommentGroup>(new( std::nothrow ) _1487f5920_CommentGroup());
	}
	(*this)._field_comment_group->_field_comments=jule::append((*this)._field_comment_group->_field_comments,jule::Slice<jule::Ref<_1487f5920_Comment>>({_30138_c}));
}



inline jule::Ref<_1487f5920_ScopeTree> _138657c70_Parser::_method_build_scope(jule::Slice<_108e15ff0_Token> _31235_tokens) {
	jule::Ref<_1487f5920_ScopeTree> _31317_s = _1190d5970_new_scope();
	_1190d5970_ScopeParser _31417_sp = _1190d5970_ScopeParser(this->self,jule::Ref<_1487f5920_ScopeTree>(),jule::Slice<jule::Ref<_1190d5970_Stmt>>(),jule::Int());
	_31417_sp._method_build(_31235_tokens,_31317_s);
	return _31317_s;
}



inline std::tuple<jule::Ref<_1487f5920_TypeDecl>,jule::Bool> _138657c70_Parser::_method___build_type(jule::Slice<_108e15ff0_Token> _32143_tokens,jule::Int* _32213_i,jule::Bool _32222_err) {
	_103796900_TypeBuilder _32317_tb = _103796900_TypeBuilder(this->self,_32143_tokens,_32213_i,_32222_err);
	jule::Ref<_1487f5920_TypeDecl> _32918_decl;
	jule::Bool _32924_ok;
	std::tie(_32918_decl,_32924_ok) = _32317_tb._method_build();
	return std::make_tuple(_32918_decl,_32924_ok);
}



inline std::tuple<jule::Ref<_1487f5920_TypeDecl>,jule::Bool> _138657c70_Parser::_method_build_type(jule::Slice<_108e15ff0_Token> _33441_tokens,jule::Int* _33513_i,jule::Bool _33522_err) {
	_108e15ff0_Token _33613_token = _33441_tokens[static_cast<jule::Int>((*(_33513_i)))];
	jule::Ref<_1487f5920_TypeDecl> _33718_t;
	jule::Bool _33721_ok;
	std::tie(_33718_t,_33721_ok) = this->self->_method___build_type(_33441_tokens,_33513_i,_33522_err);
	if (_33522_err && (!(_33721_ok))) {
		this->self->_method_push_err(_33613_token,jule::Str("invalid data-type", 17),jule::Slice<jule::Any>({}));
	}
	return std::make_tuple(_33718_t,_33721_ok);
}



inline jule::Ref<_1487f5920_TypeAliasDecl> _138657c70_Parser::_method_build_type_alias_decl(jule::Slice<_108e15ff0_Token> _34445_tokens) {
	jule::Int _34517_i = 1LL;
	if (_34517_i >= _34445_tokens.len()) {
		this->self->_method_push_err(_34445_tokens[static_cast<jule::Int>(_34517_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_TypeAliasDecl>();
	}
	jule::Ref<_1487f5920_TypeAliasDecl> _35017_tad = jule::new_struct<_1487f5920_TypeAliasDecl>(new( std::nothrow ) _1487f5920_TypeAliasDecl(jule::Ref<_1487f5920_ScopeTree>(),jule::Bool(),jule::Bool(),_34445_tokens[1LL],_34445_tokens[1LL]._field_kind,jule::Ref<_1487f5920_TypeDecl>(),jule::Ref<_1487f5920_CommentGroup>()));
	_108e15ff0_Token _35417_token = _34445_tokens[static_cast<jule::Int>(_34517_i)];
	if (_35417_token._field_id != 2LLU) {
		this->self->_method_push_err(_35417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
	}
	(_34517_i)++;
	if (_34517_i >= _34445_tokens.len()) {
		this->self->_method_push_err(_34445_tokens[static_cast<jule::Int>(_34517_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return _35017_tad;
	}
	_35417_token=_34445_tokens[static_cast<jule::Int>(_34517_i)];
	if (_35417_token._field_id != 11LLU) {
		this->self->_method_push_err(_34445_tokens[static_cast<jule::Int>(_34517_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected colon \":\"", 18),jule::Slice<jule::Any>({}));
		return _35017_tad;
	}
	(_34517_i)++;
	if (_34517_i >= _34445_tokens.len()) {
		this->self->_method_push_err(_34445_tokens[static_cast<jule::Int>(_34517_i - 1LL)],jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
		return _35017_tad;
	}
	jule::Ref<_1487f5920_TypeDecl> _37518_t;
	jule::Bool _37521_ok;
	std::tie(_37518_t,_37521_ok) = this->self->_method_build_type(_34445_tokens,(&(_34517_i)),true);
	_35017_tad->_field_kind=_37518_t;
	if (_37521_ok && (_34517_i < _34445_tokens.len())) {
		this->self->_method_push_err(_34445_tokens[static_cast<jule::Int>(_34517_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	return _35017_tad;
}



inline void _138657c70_Parser::_method_build_var_type_and_expr(jule::Ref<_1487f5920_VarDecl> _38347_v,jule::Slice<_108e15ff0_Token> _38364_tokens) {
	jule::Int _38417_i = 0LL;
	_108e15ff0_Token _38517_tok = _38364_tokens[static_cast<jule::Int>(_38417_i)];
	if (_38517_tok._field_id == 11LLU) {
		(_38417_i)++;
		if ((_38417_i >= _38364_tokens.len()) || ((_38364_tokens[static_cast<jule::Int>(_38417_i)]._field_id == 7LLU) && (_38364_tokens[static_cast<jule::Int>(_38417_i)]._field_kind == jule::Str("=", 1)))) {
			this->self->_method_push_err(_38517_tok,jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
			return;
		}
		jule::Ref<_1487f5920_TypeDecl> _39322_t;
		jule::Bool _39325_ok;
		std::tie(_39322_t,_39325_ok) = this->self->_method_build_type(_38364_tokens,(&(_38417_i)),true);
		if (_39325_ok) {
			_38347_v->_field_kind=_39322_t;
			if (_38417_i >= _38364_tokens.len()) {
				return;
			}
			_38517_tok=_38364_tokens[static_cast<jule::Int>(_38417_i)];
		}
	}
	if (_38517_tok._field_id == 7LLU) {
		if (_38517_tok._field_kind != jule::Str("=", 1)) {
			this->self->_method_push_err(_38517_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return;
		}
		jule::Slice<_108e15ff0_Token> _40821_expr_tokens = _38364_tokens.slice(static_cast<jule::Int>(_38417_i + 1LL));
		if (_40821_expr_tokens.len() == 0LL) {
			this->self->_method_push_err(_38517_tok,jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
			return;
		}
		_38347_v->_field_expr=this->self->_method_build_expr(_40821_expr_tokens);
	} else {
		this->self->_method_push_err(_38517_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
}



inline void _138657c70_Parser::_method_build_var_common(jule::Ref<_1487f5920_VarDecl> _41940_v,jule::Slice<_108e15ff0_Token> _41957_tokens) {
	_41940_v->_field_token=_41957_tokens[0LL];
	if (_41940_v->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_41940_v->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return;
	}
	_41940_v->_field_ident=_41940_v->_field_token._field_kind;
	jule::drop(_41940_v->_field_kind);
	if (_41957_tokens.len() > 1LL) {
		_41957_tokens=_41957_tokens.slice(1LL);
		this->self->_method_build_var_type_and_expr(_41940_v,_41957_tokens);
	}
}



inline void _138657c70_Parser::_method_build_var_begin(jule::Ref<_1487f5920_VarDecl> _43438_v,jule::Ref<jule::Int> _43455_i,jule::Slice<_108e15ff0_Token> _43464_tokens) {
	_108e15ff0_Token _43513_tok = _43464_tokens[static_cast<jule::Int>(_43455_i)];
	{
		auto _match_expr{ _43513_tok._field_id };
		if (!((38LLU) == _match_expr)) { goto _case_end_4386700528; }
		_case_begin_4386700528:;
		{
			_43438_v->_field_statically=true;
			goto _case_begin_4386700640;
		}
		goto _match_end_4386696672;
		_case_end_4386700528:;
		if (!((34LLU) == _match_expr)) { goto _case_end_4386700640; }
		_case_begin_4386700640:;
		{
			(_43455_i)++;
			if (_43455_i >= _43464_tokens.len()) {
				(*this)._method_push_err(_43513_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			if (_43464_tokens[static_cast<jule::Int>(_43455_i)]._field_id == 36LLU) {
				_43438_v->_field_mutable=true;
				(_43455_i)++;
			}
		}
		goto _match_end_4386696672;
		_case_end_4386700640:;
		if (!((9LLU) == _match_expr)) { goto _case_end_4386698496; }
		_case_begin_4386698496:;
		{
			(_43455_i)++;
			_43438_v->_field_constant=true;
		}
		goto _match_end_4386696672;
		_case_end_4386698496:;
		_case_begin_4386698192:;
		{
			(*this)._method_push_err(_43513_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4386696672;
		_case_end_4386698192:;
		_match_end_4386696672:;
	}
	if (_43455_i >= _43464_tokens.len()) {
		(*this)._method_push_err(_43513_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
}



inline jule::Ref<_1487f5920_VarDecl> _138657c70_Parser::_method_build_var(jule::Slice<_108e15ff0_Token> _46833_tokens) {
	jule::Ref<jule::Int> _46917_i = jule::new_ref<jule::Int>(0LL);
	jule::Ref<_1487f5920_VarDecl> _47017_v = jule::new_struct<_1487f5920_VarDecl>(new( std::nothrow ) _1487f5920_VarDecl(jule::Ref<_1487f5920_ScopeTree>(),_46833_tokens[static_cast<jule::Int>(_46917_i)],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ref<_1487f5920_Directive>>(),jule::Ref<_1487f5920_CommentGroup>(),jule::Ref<_1487f5920_TypeDecl>(),jule::Ref<_1487f5920_Expr>()));
	this->self->_method_build_var_begin(_47017_v,_46917_i,_46833_tokens);
	if (_46917_i >= _46833_tokens.len()) {
		return jule::new_ref<_1487f5920_VarDecl>();
	}
	_46833_tokens=_46833_tokens.slice(static_cast<jule::Int>(_46917_i));
	if ((_46833_tokens[0LL]._field_id == 7LLU) && (_46833_tokens[0LL]._field_kind == jule::Str("&", 1))) {
		_47017_v->_field_reference=true;
		if (_46833_tokens.len() == 1LL) {
			return jule::new_ref<_1487f5920_VarDecl>();
		}
		_46833_tokens=_46833_tokens.slice(1LL);
	}
	this->self->_method_build_var_common(_47017_v,_46833_tokens);
	return _47017_v;
}



inline jule::Ref<_1487f5920_GenericDecl> _138657c70_Parser::_method_build_generic(jule::Slice<_108e15ff0_Token> _49036_tokens) {
	if (_49036_tokens.len() > 1LL) {
		(*this)._method_push_err(_49036_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1487f5920_GenericDecl> _49417_g = jule::new_struct<_1487f5920_GenericDecl>(new( std::nothrow ) _1487f5920_GenericDecl(_49036_tokens[0LL],jule::Str()));
	if (_49417_g->_field_token._field_id != 2LLU) {
		(*this)._method_push_err(_49417_g->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
	}
	_49417_g->_field_ident=_49417_g->_field_token._field_kind;
	return _49417_g;
}



inline jule::Slice<jule::Ref<_1487f5920_GenericDecl>> _138657c70_Parser::_method_build_generics(jule::Slice<_108e15ff0_Token> _50537_tokens,_108e15ff0_Token _50554_error_token) {
	if (_50537_tokens.len() == 0LL) {
		(*this)._method_push_err(_50554_error_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
		return nullptr;
	}
	jule::Slice<jule::Slice<_108e15ff0_Token>> _51118_parts;
	jule::Slice<_1486379e0_Log> _51125_errors;
	std::tie(_51118_parts,_51125_errors) = _138657c70_parts(_50537_tokens,8LLU,true);
	(*this)._field_errors=jule::append((*this)._field_errors,_51125_errors);
	jule::Slice<jule::Ref<_1487f5920_GenericDecl>> _51417_generics = jule::Slice<jule::Ref<_1487f5920_GenericDecl>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_51118_parts.len())));
	{
		auto __julec_range_expr = _51118_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _138657c70_i = 0;
			jule::Slice<_108e15ff0_Token> _138657c70_part = *__julec_range_begin;
			_iter_begin_4385269312:;
			{
				if (_51118_parts.len() > 0LL) {
					_51417_generics[static_cast<jule::Int>(_138657c70_i)]=(*this)._method_build_generic(_138657c70_part);
				}
			}
			_iter_next_4385269312:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_138657c70_i; _138657c70_part = *__julec_range_begin; goto _iter_begin_4385269312; }
			_iter_end_4385269312:;
		}
	}
	return _51417_generics;
}



inline jule::Ref<_1487f5920_ParamDecl> _138657c70_Parser::_method_build_self_param(jule::Slice<_108e15ff0_Token> _52439_tokens) {
	if (_52439_tokens.len() == 0LL) {
		return jule::new_ref<_1487f5920_ParamDecl>();
	}
	jule::Ref<_1487f5920_ParamDecl> _52917_param = jule::new_struct<_1487f5920_ParamDecl>(new( std::nothrow ) _1487f5920_ParamDecl());
	jule::Int _53217_i = 0LL;
	if (_52439_tokens[static_cast<jule::Int>(_53217_i)]._field_id == 36LLU) {
		_52917_param->_field_mutable=true;
		(_53217_i)++;
		if (_53217_i >= _52439_tokens.len()) {
			(*this)._method_push_err(_52439_tokens[static_cast<jule::Int>(_53217_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1487f5920_ParamDecl>();
		}
	}
	if (_52439_tokens[static_cast<jule::Int>(_53217_i)]._field_kind == jule::Str("&", 1)) {
		_52917_param->_field_ident=jule::Str("&", 1);
		(_53217_i)++;
		if (_53217_i >= _52439_tokens.len()) {
			(*this)._method_push_err(_52439_tokens[static_cast<jule::Int>(_53217_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1487f5920_ParamDecl>();
		}
	}
	if (_52439_tokens[static_cast<jule::Int>(_53217_i)]._field_id == 28LLU) {
		_52917_param->_field_ident+=jule::Str("self", 4);
		_52917_param->_field_token=_52439_tokens[static_cast<jule::Int>(_53217_i)];
		(_53217_i)++;
		if (_53217_i < _52439_tokens.len()) {
			(*this)._method_push_err(_52439_tokens[static_cast<jule::Int>(_53217_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
	}
	return _52917_param;
}



inline void _138657c70_Parser::_method_param_type_begin(jule::Ref<_1487f5920_ParamDecl> _56339_param,jule::Int& _56363_i,jule::Slice<_108e15ff0_Token> _56371_tokens) {
	_iter_begin_4444198368:;
	if (!(_56363_i < _56371_tokens.len())) { goto _iter_end_4444198368; }
	{
		_108e15ff0_Token _56517_token = _56371_tokens[static_cast<jule::Int>(_56363_i)];
		if (_56517_token._field_id != 7LLU) {
			return;
		} else if (_56517_token._field_kind != jule::Str("...", 3)) {
			return;
		}
		if (_56339_param->_field_variadic) {
			(*this)._method_push_err(_56517_token,jule::Str("define is already variadic", 26),jule::Slice<jule::Any>({}));
			goto _iter_next_4444198368;
		}
		_56339_param->_field_variadic=true;
	}
	_iter_next_4444198368:;
	(_56363_i)++;
	goto _iter_begin_4444198368;
	_iter_end_4444198368:;
}



inline void _138657c70_Parser::_method_build_param_type(jule::Ref<_1487f5920_ParamDecl> _58040_param,jule::Slice<_108e15ff0_Token> _58063_tokens,jule::Bool _58080_must_pure) {
	jule::Int _58117_i = 0LL;
	if ((!(_58080_must_pure))) {
		this->self->_method_param_type_begin(_58040_param,_58117_i,_58063_tokens);
		if (_58117_i >= _58063_tokens.len()) {
			return;
		}
	}
	std::tie(_58040_param->_field_kind,std::ignore) = this->self->_method_build_type(_58063_tokens,(&(_58117_i)),true);
	if (_58117_i < _58063_tokens.len()) {
		this->self->_method_push_err(_58063_tokens[static_cast<jule::Int>(_58117_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
}



inline void _138657c70_Parser::_method_param_body_id(jule::Ref<_1487f5920_ParamDecl> _59432_param,_108e15ff0_Token _59451_token) {
	if (_108e15ff0_is_ignore_ident(_59451_token._field_kind)) {
		_59432_param->_field_ident=jule::Str("<anonymous>", 11);
		return;
	}
	_59432_param->_field_ident=_59451_token._field_kind;
}



inline void _138657c70_Parser::_method_build_param_body(jule::Ref<_1487f5920_ParamDecl> _60240_param,jule::Ref<jule::Int> _60263_i,jule::Slice<_108e15ff0_Token> _60276_tokens,jule::Bool _60293_must_pure) {
	this->self->_method_param_body_id(_60240_param,_60276_tokens[static_cast<jule::Int>(_60263_i)]);
	_108e15ff0_Token _60417_tok = _60276_tokens[static_cast<jule::Int>(_60263_i)];
	if ((_60263_i + 1LL) >= _60276_tokens.len()) {
		return;
	} else if (((_60276_tokens.len() - _60263_i) - 1LL) < 2LL) {
		this->self->_method_push_err(_60417_tok,jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
		return;
	}
	_60417_tok=_60276_tokens[static_cast<jule::Int>(_60263_i + 1LL)];
	if (_60417_tok._field_id != 11LLU) {
		this->self->_method_build_param_type(_60240_param,_60276_tokens,_60293_must_pure);
		return;
	}
	_60276_tokens=_60276_tokens.slice(static_cast<jule::Int>(_60263_i + 2LL));
	this->self->_method_build_param_type(_60240_param,_60276_tokens,_60293_must_pure);
}



inline jule::Ref<_1487f5920_ParamDecl> _138657c70_Parser::_method_build_param(jule::Slice<_108e15ff0_Token> _62335_tokens,jule::Bool _62352_must_pure) {
	jule::Ref<_1487f5920_ParamDecl> _62417_param = jule::new_struct<_1487f5920_ParamDecl>(new( std::nothrow ) _1487f5920_ParamDecl(_62335_tokens[0LL],jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1487f5920_TypeDecl>(),jule::Str()));
	if (_62417_param->_field_token._field_id == 36LLU) {
		_62417_param->_field_mutable=true;
		if (_62335_tokens.len() == 1LL) {
			this->self->_method_push_err(_62335_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1487f5920_ParamDecl>();
		}
		_62335_tokens=_62335_tokens.slice(1LL);
		_62417_param->_field_token=_62335_tokens[0LL];
	}
	if (_62335_tokens.len() >= 3LL) {
		if ((_62417_param->_field_token._field_id == 7LLU) && (_62417_param->_field_token._field_kind == jule::Str("&", 1))) {
			if (_62335_tokens.len() == 1LL) {
				this->self->_method_push_err(_62335_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return jule::new_ref<_1487f5920_ParamDecl>();
			}
			if ((_62335_tokens[1LL]._field_id == 2LLU) && (_62335_tokens[2LL]._field_id == 11LLU)) {
				_62417_param->_field_reference=true;
				_62335_tokens=_62335_tokens.slice(1LL);
				_62417_param->_field_token=_62335_tokens[0LL];
			}
		}
	}
	if (_62417_param->_field_token._field_id != 2LLU) {
		_62417_param->_field_ident=jule::Str("<anonymous>", 11);
		this->self->_method_build_param_type(_62417_param,_62335_tokens,_62352_must_pure);
	} else {
		jule::Ref<jule::Int> _66021_i = jule::new_ref<jule::Int>(0LL);
		this->self->_method_build_param_body(_62417_param,_66021_i,_62335_tokens,_62352_must_pure);
	}
	return _62417_param;
}



inline void _138657c70_Parser::_method_check_params(jule::Slice<jule::Ref<_1487f5920_ParamDecl>> _66735_params) {
	{
		auto __julec_range_expr = _66735_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1487f5920_ParamDecl> _138657c70_param = *__julec_range_begin;
			_iter_begin_4362517424:;
			{
				if (_138657c70_param->_method_is_self() || jule::real(_138657c70_param->_field_kind)) {
					goto _iter_next_4362517424;
				}
				if (_138657c70_param->_field_token._field_id == 0LLU) {
					(*this)._method_push_err(_138657c70_param->_field_token,jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
				} else {
					_138657c70_param->_field_kind=jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_138657c70_param->_field_token,jule::Any(jule::new_struct<_1487f5920_IdentTypeDecl>(new( std::nothrow ) _1487f5920_IdentTypeDecl(_138657c70_param->_field_token,_138657c70_param->_field_token._field_kind,jule::Bool(),jule::Slice<jule::Ref<_1487f5920_TypeDecl>>())))));
					_138657c70_param->_field_ident=jule::Str("<anonymous>", 11);
					_138657c70_param->_field_token=_108e15ff0_Token();
				}
			}
			_iter_next_4362517424:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _138657c70_param = *__julec_range_begin; goto _iter_begin_4362517424; }
			_iter_end_4362517424:;
		}
	}
}



inline jule::Slice<jule::Ref<_1487f5920_ParamDecl>> _138657c70_Parser::_method_build_params(jule::Slice<_108e15ff0_Token> _68836_tokens,jule::Bool _68853_method,jule::Bool _68867_must_pure) {
	jule::Slice<jule::Slice<_108e15ff0_Token>> _68918_parts;
	jule::Slice<_1486379e0_Log> _68925_errs;
	std::tie(_68918_parts,_68925_errs) = _138657c70_parts(_68836_tokens,8LLU,true);
	this->self->_field_errors=jule::append(this->self->_field_errors,_68925_errs);
	if (_68918_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_1487f5920_ParamDecl>> _69517_params = nullptr;
	if (_68853_method && (_68918_parts.len() > 0LL)) {
		jule::Ref<_1487f5920_ParamDecl> _69721_param = this->self->_method_build_self_param(_68918_parts[0LL]);
		if (jule::real(_69721_param) && _69721_param->_method_is_self()) {
			_69517_params=jule::append(_69517_params,jule::Slice<jule::Ref<_1487f5920_ParamDecl>>({_69721_param}));
			_68918_parts=_68918_parts.slice(1LL);
		}
	}
	{
		auto __julec_range_expr = _68918_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Slice<_108e15ff0_Token> _138657c70_part = *__julec_range_begin;
			_iter_begin_4362536512:;
			{
				jule::Ref<_1487f5920_ParamDecl> _70521_param = this->self->_method_build_param(_138657c70_part,_68867_must_pure);
				if (jule::real(_70521_param)) {
					_69517_params=jule::append(_69517_params,jule::Slice<jule::Ref<_1487f5920_ParamDecl>>({_70521_param}));
				}
			}
			_iter_next_4362536512:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _138657c70_part = *__julec_range_begin; goto _iter_begin_4362536512; }
			_iter_end_4362536512:;
		}
	}
	this->self->_method_check_params(_69517_params);
	return _69517_params;
}



inline std::tuple<jule::Ref<_1487f5920_RetTypeDecl>,jule::Bool> _138657c70_Parser::_method_build_multi_ret_type(jule::Slice<_108e15ff0_Token> _71544_tokens,jule::Int& _71566_i) {
	jule::Bool _71593_ok = jule::Bool();
	jule::Ref<_1487f5920_RetTypeDecl> _71576_t = jule::Ref<_1487f5920_RetTypeDecl>();
	_71576_t=jule::new_struct<_1487f5920_RetTypeDecl>(new( std::nothrow ) _1487f5920_RetTypeDecl());
	(_71566_i)++;
	if (_71566_i >= _71544_tokens.len()) {
		(_71566_i)--;
		std::tie(_71576_t->_field_kind,_71593_ok) = this->self->_method_build_type(_71544_tokens,(&(_71566_i)),false);
		return std::make_tuple(_71576_t,_71593_ok);
	}
	(_71566_i)--;
	jule::Slice<_108e15ff0_Token> _72517_range_tokens = _138657c70_range(_71566_i,jule::Str("(", 1),jule::Str(")", 1),_71544_tokens);
	jule::Slice<jule::Ref<_1487f5920_ParamDecl>> _72617_params = this->self->_method_build_params(_72517_range_tokens,false,true);
	jule::Slice<jule::Ref<_1487f5920_TypeDecl>> _72817_types = jule::Slice<jule::Ref<_1487f5920_TypeDecl>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_72617_params.len())));
	{
		auto __julec_range_expr = _72617_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _138657c70_i = 0;
			jule::Ref<_1487f5920_ParamDecl> _138657c70_param = *__julec_range_begin;
			_iter_begin_4362559648:;
			{
				_72817_types[static_cast<jule::Int>(_138657c70_i)]=_138657c70_param->_field_kind;
				if (_138657c70_param->_field_ident != jule::Str("<anonymous>", 11)) {
					_138657c70_param->_field_token._field_kind=_138657c70_param->_field_ident;
				} else {
					_138657c70_param->_field_token._field_kind=jule::Str("_", 1);
				}
				_71576_t->_field_idents=jule::append(_71576_t->_field_idents,jule::Slice<_108e15ff0_Token>({_138657c70_param->_field_token}));
			}
			_iter_next_4362559648:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_138657c70_i; _138657c70_param = *__julec_range_begin; goto _iter_begin_4362559648; }
			_iter_end_4362559648:;
		}
	}
	if (_72817_types.len() > 1LL) {
		_71576_t->_field_kind=jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_71544_tokens[0LL],jule::Any(jule::new_struct<_1487f5920_TupleTypeDecl>(new( std::nothrow ) _1487f5920_TupleTypeDecl(_72817_types)))));
	} else {
		_71576_t->_field_kind=_72817_types[0LL];
	}
	_71593_ok=true;
	return std::make_tuple(_71576_t,_71593_ok);
}



inline std::tuple<jule::Ref<_1487f5920_RetTypeDecl>,jule::Bool> _138657c70_Parser::_method_build_ret_type(jule::Slice<_108e15ff0_Token> _75538_tokens,jule::Int& _75560_i) {
	jule::Bool _75587_ok = jule::Bool();
	jule::Ref<_1487f5920_RetTypeDecl> _75570_t = jule::Ref<_1487f5920_RetTypeDecl>();
	_75570_t=jule::new_struct<_1487f5920_RetTypeDecl>(new( std::nothrow ) _1487f5920_RetTypeDecl());
	if (_75560_i >= _75538_tokens.len()) {
		return std::make_tuple(_75570_t,_75587_ok);
	}
	_108e15ff0_Token _76117_token = _75538_tokens[static_cast<jule::Int>(_75560_i)];
	{
		auto _match_expr{ _76117_token._field_id };
		if (!((3LLU) == _match_expr)) { goto _case_end_4362578224; }
		_case_begin_4362578224:;
		{
			if (_76117_token._field_kind == jule::Str("{", 1)) {
				return std::make_tuple(_75570_t,_75587_ok);
			}
		}
		goto _match_end_4362576880;
		_case_end_4362578224:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4362578336; }
		_case_begin_4362578336:;
		{
			if (_76117_token._field_kind == jule::Str("=", 1)) {
				return std::make_tuple(_75570_t,_75587_ok);
			}
		}
		goto _match_end_4362576880;
		_case_end_4362578336:;
		if (!((11LLU) == _match_expr)) { goto _case_end_4362578448; }
		_case_begin_4362578448:;
		{
			if ((_75560_i + 1LL) >= _75538_tokens.len()) {
				this->self->_method_push_err(_76117_token,jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
				return std::make_tuple(_75570_t,_75587_ok);
			}
			(_75560_i)++;
			_76117_token=_75538_tokens[static_cast<jule::Int>(_75560_i)];
			if (_76117_token._field_id == 3LLU) {
				{
					auto _match_expr{ _76117_token._field_kind };
					if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4362587296; }
					_case_begin_4362587296:;
					{
						jule::Ref<_1487f5920_RetTypeDecl> _78430_decl;
						jule::Bool _78436_ok;
						std::tie(_78430_decl,_78436_ok) = this->self->_method_build_multi_ret_type(_75538_tokens,_75560_i);
						_75570_t = _78430_decl;
						_75587_ok = _78436_ok;
						return std::make_tuple(_75570_t,_75587_ok);
					}
					goto _match_end_4362585760;
					_case_end_4362587296:;
					if (!((jule::Str("{", 1)) == _match_expr)) { goto _case_end_4362587408; }
					_case_begin_4362587408:;
					{
						this->self->_method_push_err(_76117_token,jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
						return std::make_tuple(_75570_t,_75587_ok);
					}
					goto _match_end_4362585760;
					_case_end_4362587408:;
					_match_end_4362585760:;
				}
			}
			std::tie(_75570_t->_field_kind,_75587_ok) = this->self->_method_build_type(_75538_tokens,(&(_75560_i)),true);
			return std::make_tuple(_75570_t,_75587_ok);
		}
		goto _match_end_4362576880;
		_case_end_4362578448:;
		_match_end_4362576880:;
	}
	(_75560_i)++;
	this->self->_method_push_err(_76117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	return std::make_tuple(_75570_t,_75587_ok);
}



inline jule::Ref<_1487f5920_FnDecl> _138657c70_Parser::_method_build_fn_prototype(jule::Slice<_108e15ff0_Token> _80342_tokens,jule::Int& _80364_i,jule::Bool _80372_method) {
	jule::Ref<_1487f5920_FnDecl> _80417_f = jule::new_struct<_1487f5920_FnDecl>(new( std::nothrow ) _1487f5920_FnDecl(_80342_tokens[static_cast<jule::Int>(_80364_i)],jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::Slice<jule::Ref<_1487f5920_Directive>>(),jule::Ref<_1487f5920_CommentGroup>(),jule::Ref<_1487f5920_ScopeTree>(),jule::Slice<jule::Ref<_1487f5920_GenericDecl>>(),jule::Ref<_1487f5920_RetTypeDecl>(),jule::Slice<jule::Ref<_1487f5920_ParamDecl>>()));
	if (_80417_f->_field_token._field_id == 38LLU) {
		_80417_f->_field_statically=true;
		(_80364_i)++;
		if (_80364_i >= _80342_tokens.len()) {
			this->self->_method_push_err(_80417_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1487f5920_FnDecl>();
		}
		_80417_f->_field_token=_80342_tokens[static_cast<jule::Int>(_80364_i)];
	}
	if (_80417_f->_field_token._field_id == 35LLU) {
		_80417_f->_field_unsafety=true;
		(_80364_i)++;
		if (_80364_i >= _80342_tokens.len()) {
			this->self->_method_push_err(_80417_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1487f5920_FnDecl>();
		}
		_80417_f->_field_token=_80342_tokens[static_cast<jule::Int>(_80364_i)];
	}
	(_80364_i)++;
	if (_80364_i >= _80342_tokens.len()) {
		this->self->_method_push_err(_80417_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_FnDecl>();
	}
	_108e15ff0_Token _83713_tok = _80342_tokens[static_cast<jule::Int>(_80364_i)];
	if (_83713_tok._field_id == 2LLU) {
		(_80364_i)++;
		if (_80364_i >= _80342_tokens.len()) {
			this->self->_method_push_err(_80417_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1487f5920_FnDecl>();
		}
		_80417_f->_field_ident=_83713_tok._field_kind;
	} else {
		_80417_f->_field_ident=jule::Str("<anonymous>", 11);
	}
	_108e15ff0_Token _84913_error_token = _80342_tokens[static_cast<jule::Int>(_80364_i)];
	jule::Slice<_108e15ff0_Token> _85017_generics_tokens = _138657c70_range(_80364_i,jule::Str("[", 1),jule::Str("]", 1),_80342_tokens);
	if (_85017_generics_tokens != nullptr) {
		_80417_f->_field_generics=this->self->_method_build_generics(_85017_generics_tokens,_84913_error_token);
	}
	if (_80342_tokens[static_cast<jule::Int>(_80364_i)]._field_kind != jule::Str("(", 1)) {
		this->self->_method_push_err(_80342_tokens[static_cast<jule::Int>(_80364_i)],jule::Str("missing function parentheses", 28),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_FnDecl>();
	}
	jule::Slice<_108e15ff0_Token> _86017_params_toks = _138657c70_range(_80364_i,jule::Str("(", 1),jule::Str(")", 1),_80342_tokens);
	if (_86017_params_toks.len() > 0LL) {
		_80417_f->_field_params=this->self->_method_build_params(_86017_params_toks,_80372_method,false);
	}
	std::tie(_80417_f->_field_result,std::ignore) = this->self->_method_build_ret_type(_80342_tokens,_80364_i);
	return _80417_f;
}



inline jule::Ref<_1487f5920_FnDecl> _138657c70_Parser::_method_build_fn(jule::Slice<_108e15ff0_Token> _87132_tokens,jule::Bool _87149_method,jule::Bool _87163_prototype) {
	jule::Int _87217_i = 0LL;
	jule::Ref<_1487f5920_FnDecl> _87317_f = this->self->_method_build_fn_prototype(_87132_tokens,_87217_i,_87149_method);
	if (_87163_prototype) {
		if (_87217_i < _87132_tokens.len()) {
			this->self->_method_push_err(_87132_tokens[static_cast<jule::Int>(_87217_i + 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
		return _87317_f;
	} else if ((!(jule::real(_87317_f)))) {
		return _87317_f;
	}
	if (_87217_i >= _87132_tokens.len()) {
		this->self->_method_stop();
		this->self->_method_push_err(_87317_f->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_FnDecl>();
	}
	jule::Slice<_108e15ff0_Token> _88917_block_tokens = _138657c70_range(_87217_i,jule::Str("{", 1),jule::Str("}", 1),_87132_tokens);
	if (_88917_block_tokens != nullptr) {
		_87317_f->_field_scope=this->self->_method_build_scope(_88917_block_tokens);
		_87317_f->_field_scope->_field_unsafety=_87317_f->_field_unsafety;
		if (_87217_i < _87132_tokens.len()) {
			this->self->_method_push_err(_87132_tokens[static_cast<jule::Int>(_87217_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
	} else {
		this->self->_method_stop();
		this->self->_method_push_err(_87317_f->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_FnDecl>();
	}
	return _87317_f;
}



inline jule::Slice<_108e15ff0_Token> _138657c70_Parser::_method_get_use_decl_selectors(jule::Slice<_108e15ff0_Token> _90545_tokens) {
	jule::Int _90617_i = 0LL;
	_90545_tokens=_138657c70_range(_90617_i,jule::Str("{", 1),jule::Str("}", 1),_90545_tokens);
	jule::Slice<jule::Slice<_108e15ff0_Token>> _90818_parts;
	jule::Slice<_1486379e0_Log> _90825_errs;
	std::tie(_90818_parts,_90825_errs) = _138657c70_parts(_90545_tokens,8LLU,true);
	if (_90825_errs.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_90825_errs);
		return nullptr;
	}
	jule::Slice<_108e15ff0_Token> _91417_selectors = jule::Slice<_108e15ff0_Token>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_90818_parts.len())));
	{
		auto __julec_range_expr = _90818_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _138657c70_i = 0;
			jule::Slice<_108e15ff0_Token> _138657c70_part = *__julec_range_begin;
			_iter_begin_4362659904:;
			{
				if (_138657c70_part.len() > 1LL) {
					(*this)._method_push_err(_138657c70_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				}
				_108e15ff0_Token _91921_tok = _138657c70_part[0LL];
				if ((_91921_tok._field_id != 2LLU) && (_91921_tok._field_id != 28LLU)) {
					(*this)._method_push_err(_91921_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
					(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
					goto _iter_next_4362659904;
				}
				_91417_selectors[static_cast<jule::Int>(_138657c70_i)]=_91921_tok;
			}
			_iter_next_4362659904:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_138657c70_i; _138657c70_part = *__julec_range_begin; goto _iter_begin_4362659904; }
			_iter_end_4362659904:;
		}
	}
	return _91417_selectors;
}



inline void _138657c70_Parser::_method_build_cpp_use_decl(jule::Ref<_1487f5920_UseDecl> _93041_decl,jule::Slice<_108e15ff0_Token> _93057_tokens) {
	if (_93057_tokens.len() > 1LL) {
		(*this)._method_push_err(_93057_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	_108e15ff0_Token _93413_token = _93057_tokens[0LL];
	if ((_93413_token._field_id != 6LLU) || ((_93413_token._field_kind[0LL] != '`') && (_93413_token._field_kind[0LL] != '\"'))) {
		(*this)._method_push_err(_93413_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		return;
	}
	_93041_decl->_field_cpp_linked=true;
	_93041_decl->_field_link_path=_93413_token._field_kind.slice(1LL,static_cast<jule::Int>(_93413_token._field_kind.len() - 1LL));
	if ((!(_148682040_is_std_header_path(_93041_decl->_field_link_path)))) {
		_93041_decl->_field_link_path=_149060fe0_join(jule::Slice<jule::Str>({_93413_token._field_file->_method_dir(),_93041_decl->_field_link_path}));
	}
}



inline void _138657c70_Parser::_method_build_std_use_decl(jule::Ref<_1487f5920_UseDecl> _94641_decl,jule::Slice<_108e15ff0_Token> _94661_tokens) {
	_94641_decl->_field_std=true;
	_108e15ff0_Token _94917_token = _94661_tokens[0LL];
	if (_94661_tokens.len() < 3LL) {
		(*this)._method_push_err(_94917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return;
	}
	_94661_tokens=_94661_tokens.slice(2LL);
	_94917_token=_94661_tokens[static_cast<jule::Int>(_94661_tokens.len() - 1LL)];
	{
		auto _match_expr{ _94917_token._field_id };
		if (!((23LLU) == _match_expr)) { goto _case_end_4362697600; }
		_case_begin_4362697600:;
		{
			(*this)._method_push_err(_94917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4362694160;
		_case_end_4362697600:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4362697712; }
		_case_begin_4362697712:;
		{
			if (_94917_token._field_kind != jule::Str("}", 1)) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			jule::Slice<_108e15ff0_Token> _96721_selectors = nullptr;
			std::tie(_94661_tokens,_96721_selectors) = _138657c70_range_last(_94661_tokens);
			_94641_decl->_field_selected=(*this)._method_get_use_decl_selectors(_96721_selectors);
			if (_94661_tokens.len() == 0LL) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_94917_token=_94661_tokens[static_cast<jule::Int>(_94661_tokens.len() - 1LL)];
			if (_94917_token._field_id != 23LLU) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_94661_tokens=_94661_tokens.slice(0LL,static_cast<jule::Int>(_94661_tokens.len() - 1LL));
			if (_94661_tokens.len() == 0LL) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
		}
		goto _match_end_4362694160;
		_case_end_4362697712:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4362697824; }
		_case_begin_4362697824:;
		{
			if (_94917_token._field_kind != jule::Str("*", 1)) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_94661_tokens=_94661_tokens.slice(0LL,static_cast<jule::Int>(_94661_tokens.len() - 1LL));
			if (_94661_tokens.len() == 0LL) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_94917_token=_94661_tokens[static_cast<jule::Int>(_94661_tokens.len() - 1LL)];
			if (_94917_token._field_id != 23LLU) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_94661_tokens=_94661_tokens.slice(0LL,static_cast<jule::Int>(_94661_tokens.len() - 1LL));
			if (_94661_tokens.len() == 0LL) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_94641_decl->_field_full=true;
		}
		goto _match_end_4362694160;
		_case_end_4362697824:;
		_match_end_4362694160:;
	}
	_94641_decl->_field_link_path=jule::Str("std::", 5) + _138657c70_tokstoa(_94661_tokens);
}



inline void _138657c70_Parser::_method_build_ident_use_decl(jule::Ref<_1487f5920_UseDecl> _101043_decl,jule::Slice<_108e15ff0_Token> _101063_tokens) {
	_101043_decl->_field_std=false;
	_108e15ff0_Token _101317_token = _101063_tokens[static_cast<jule::Int>(_101063_tokens.len() - 1LL)];
	{
		auto _match_expr{ _101317_token._field_id };
		if (!((23LLU) == _match_expr)) { goto _case_end_4382996688; }
		_case_begin_4382996688:;
		{
			(*this)._method_push_err(_101317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4382996064;
		_case_end_4382996688:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4382996800; }
		_case_begin_4382996800:;
		{
			if (_101317_token._field_kind != jule::Str("}", 1)) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			jule::Slice<_108e15ff0_Token> _102521_selectors = nullptr;
			std::tie(_101063_tokens,_102521_selectors) = _138657c70_range_last(_101063_tokens);
			_101043_decl->_field_selected=(*this)._method_get_use_decl_selectors(_102521_selectors);
			if (_101063_tokens.len() == 0LL) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101317_token=_101063_tokens[static_cast<jule::Int>(_101063_tokens.len() - 1LL)];
			if (_101317_token._field_id != 23LLU) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101063_tokens=_101063_tokens.slice(0LL,static_cast<jule::Int>(_101063_tokens.len() - 1LL));
			if (_101063_tokens.len() == 0LL) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
		}
		goto _match_end_4382996064;
		_case_end_4382996800:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4382996912; }
		_case_begin_4382996912:;
		{
			if (_101317_token._field_kind != jule::Str("*", 1)) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101063_tokens=_101063_tokens.slice(0LL,static_cast<jule::Int>(_101063_tokens.len() - 1LL));
			if (_101063_tokens.len() == 0LL) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101317_token=_101063_tokens[static_cast<jule::Int>(_101063_tokens.len() - 1LL)];
			if (_101317_token._field_id != 23LLU) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101063_tokens=_101063_tokens.slice(0LL,static_cast<jule::Int>(_101063_tokens.len() - 1LL));
			if (_101063_tokens.len() == 0LL) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101043_decl->_field_full=true;
		}
		goto _match_end_4382996064;
		_case_end_4382996912:;
		_match_end_4382996064:;
	}
	_101043_decl->_field_link_path=_138657c70_tokstoa(_101063_tokens);
}



inline void _138657c70_Parser::_method_parse_use_decl(jule::Ref<_1487f5920_UseDecl> _107537_decl,jule::Slice<_108e15ff0_Token> _107557_tokens) {
	if (_107537_decl->_field_cpp_linked) {
		(*this)._method_build_cpp_use_decl(_107537_decl,_107557_tokens);
		return;
	}
	_108e15ff0_Token _108117_token = _107557_tokens[0LL];
	if (_108117_token._field_id != 2LLU) {
		(*this)._method_push_err(_108117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return;
	}
	if ((_107557_tokens.len() > 2LL) && (_107557_tokens[1LL]._field_id == 12LLU)) {
		_107537_decl->_field_alias=_108117_token._field_kind;
		if (_107557_tokens[2LL]._field_id != 2LLU) {
			(*this)._method_push_err(_108117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
			return;
		}
		_107557_tokens=_107557_tokens.slice(2LL);
		_108117_token=_107557_tokens[0LL];
	}
	
	{
		if (!((_108117_token._field_kind == jule::Str("std", 3)))) { goto _case_end_4362766128; }
		_case_begin_4362766128:;
		{
			(*this)._method_build_std_use_decl(_107537_decl,_107557_tokens);
		}
		goto _match_end_4362765152;
		_case_end_4362766128:;
		_case_begin_4362765280:;
		{
			(*this)._method_build_ident_use_decl(_107537_decl,_107557_tokens);
		}
		goto _match_end_4362765152;
		_case_end_4362765280:;
		_match_end_4362765152:;
	}
}



inline jule::Ref<_1487f5920_UseDecl> _138657c70_Parser::_method_build_use_decl(jule::Slice<_108e15ff0_Token> _111037_tokens,jule::Bool _111054_cpp_linked) {
	jule::Ref<_1487f5920_UseDecl> _111117_decl = jule::new_struct<_1487f5920_UseDecl>(new( std::nothrow ) _1487f5920_UseDecl(_111037_tokens[0LL],jule::Str(),jule::Str(),jule::Bool(),jule::Slice<_108e15ff0_Token>(),_111054_cpp_linked,jule::Bool()));
	if (_111037_tokens.len() < 2LL) {
		(*this)._method_push_err(_111117_decl->_field_token,jule::Str("missing path of use statement", 29),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_UseDecl>();
	}
	_111037_tokens=_111037_tokens.slice(1LL);
	(*this)._method_parse_use_decl(_111117_decl,_111037_tokens);
	return _111117_decl;
}



inline jule::Ref<_1487f5920_Expr> _138657c70_Parser::_method_build_enum_item_expr(jule::Ref<jule::Int> _112444_i,jule::Slice<_108e15ff0_Token> _112457_tokens) {
	jule::Int _112517_brace_n = 0LL;
	jule::Int _112613_expr_start = _112444_i;
	_iter_begin_4362782928:;
	if (!(_112444_i < _112457_tokens.len())) { goto _iter_end_4362782928; }
	{
		_108e15ff0_Token _112817_t = _112457_tokens[static_cast<jule::Int>(_112444_i)];
		if (_112817_t._field_id == 3LLU) {
			{
				auto _match_expr{ _112817_t._field_kind };
				if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4362787856; }
				_case_begin_4362787856:;
				{
					(_112517_brace_n)++;
					goto _iter_next_4362782928;
				}
				goto _match_end_4362786336;
				_case_end_4362787856:;
				_case_begin_4362787024:;
				{
					(_112517_brace_n)--;
				}
				goto _match_end_4362786336;
				_case_end_4362787024:;
				_match_end_4362786336:;
			}
		}
		if (_112517_brace_n > 0LL) {
			goto _iter_next_4362782928;
		}
		if ((_112817_t._field_id == 8LLU) || ((_112444_i + 1LL) >= _112457_tokens.len())) {
			jule::Slice<_108e15ff0_Token> _114725_expr_tokens = nullptr;
			if (_112817_t._field_id == 8LLU) {
				_114725_expr_tokens=_112457_tokens.slice(static_cast<jule::Int>(_112613_expr_start),static_cast<jule::Int>(_112444_i));
			} else {
				_114725_expr_tokens=_112457_tokens.slice(static_cast<jule::Int>(_112613_expr_start));
			}
			return this->self->_method_build_expr(_114725_expr_tokens);
		}
	}
	_iter_next_4362782928:;
	(_112444_i)++;
	goto _iter_begin_4362782928;
	_iter_end_4362782928:;
	return jule::new_ref<_1487f5920_Expr>();
}



inline jule::Slice<jule::Ref<_1487f5920_EnumItemDecl>> _138657c70_Parser::_method_build_enum_items(jule::Slice<_108e15ff0_Token> _115940_tokens) {
	jule::Slice<jule::Ref<_1487f5920_EnumItemDecl>> _116017_items = jule::Slice<jule::Ref<_1487f5920_EnumItemDecl>>::alloc(0LL);
	jule::Ref<jule::Int> _116117_i = jule::new_ref<jule::Int>(0LL);
	_iter_begin_4362801216:;
	if (!(_116117_i < _115940_tokens.len())) { goto _iter_end_4362801216; }
	{
		_108e15ff0_Token _116321_t = _115940_tokens[static_cast<jule::Int>(_116117_i)];
		if (_116321_t._field_id == 18LLU) {
			goto _iter_next_4362801216;
		}
		jule::Ref<_1487f5920_EnumItemDecl> _116821_item = jule::new_struct<_1487f5920_EnumItemDecl>(new( std::nothrow ) _1487f5920_EnumItemDecl());
		_116821_item->_field_token=_116321_t;
		if (_116821_item->_field_token._field_id != 2LLU) {
			this->self->_method_push_err(_116821_item->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		}
		_116821_item->_field_ident=_116821_item->_field_token._field_kind;
		if (((_116117_i + 1LL) >= _115940_tokens.len()) || (_115940_tokens[static_cast<jule::Int>(_116117_i + 1LL)]._field_id == 8LLU)) {
			if ((_116117_i + 1LL) < _115940_tokens.len()) {
				(_116117_i)++;
			}
			_116017_items=jule::append(_116017_items,jule::Slice<jule::Ref<_1487f5920_EnumItemDecl>>({_116821_item}));
			goto _iter_next_4362801216;
		}
		(_116117_i)++;
		_116321_t=_115940_tokens[static_cast<jule::Int>(_116117_i)];
		(_116117_i)++;
		if ((_116321_t._field_id != 7LLU) || (_116321_t._field_kind != jule::Str("=", 1))) {
			this->self->_method_push_err(_116321_t,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			this->self->_method_push_suggestion(jule::Str("expected equals \"=\" for assignment", 34),jule::Slice<jule::Any>({}));
			goto _iter_next_4362801216;
		}
		if ((_116117_i >= _115940_tokens.len()) || (_115940_tokens[static_cast<jule::Int>(_116117_i)]._field_id == 8LLU)) {
			this->self->_method_push_err(_116321_t,jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
			goto _iter_next_4362801216;
		}
		_116821_item->_field_expr=this->self->_method_build_enum_item_expr(_116117_i,_115940_tokens);
		_116017_items=jule::append(_116017_items,jule::Slice<jule::Ref<_1487f5920_EnumItemDecl>>({_116821_item}));
	}
	_iter_next_4362801216:;
	(_116117_i)++;
	goto _iter_begin_4362801216;
	_iter_end_4362801216:;
	return _116017_items;
}



inline jule::Ref<_1487f5920_EnumDecl> _138657c70_Parser::_method_build_enum_decl(jule::Slice<_108e15ff0_Token> _120039_tokens) {
	if ((_120039_tokens.len() < 2LL) || (_120039_tokens.len() < 3LL)) {
		this->self->_method_push_err(_120039_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_EnumDecl>();
	}
	jule::Ref<_1487f5920_EnumDecl> _120517_e = jule::new_struct<_1487f5920_EnumDecl>(new( std::nothrow ) _1487f5920_EnumDecl(_120039_tokens[1LL],jule::Bool(),jule::Str(),jule::Ref<_1487f5920_TypeDecl>(),jule::Slice<jule::Ref<_1487f5920_EnumItemDecl>>(),jule::Ref<_1487f5920_CommentGroup>()));
	if (_120517_e->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_120517_e->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
	}
	_120517_e->_field_ident=_120517_e->_field_token._field_kind;
	jule::Int _121317_i = 2LL;
	if (_120039_tokens[static_cast<jule::Int>(_121317_i)]._field_id == 11LLU) {
		(_121317_i)++;
		if (_121317_i >= _120039_tokens.len()) {
			this->self->_method_push_err(_120039_tokens[static_cast<jule::Int>(_121317_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return _120517_e;
		}
		std::tie(_120517_e->_field_kind,std::ignore) = this->self->_method_build_type(_120039_tokens,(&(_121317_i)),true);
		if (_121317_i >= _120039_tokens.len()) {
			this->self->_method_stop();
			this->self->_method_push_err(_120517_e->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
			this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
			return _120517_e;
		}
	} else {
		jule::drop(_120517_e->_field_kind);
	}
	jule::Slice<_108e15ff0_Token> _123017_item_tokens = _138657c70_range(_121317_i,jule::Str("{", 1),jule::Str("}", 1),_120039_tokens);
	if (_123017_item_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_120517_e->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return _120517_e;
	} else if (_121317_i < _120039_tokens.len()) {
		this->self->_method_push_err(_120039_tokens[static_cast<jule::Int>(_121317_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	_120517_e->_field_items=this->self->_method_build_enum_items(_123017_item_tokens);
	return _120517_e;
}



inline jule::Ref<_1487f5920_FieldDecl> _138657c70_Parser::_method_build_field(jule::Slice<_108e15ff0_Token> _124335_tokens) {
	jule::Ref<_1487f5920_FieldDecl> _124417_f = jule::new_struct<_1487f5920_FieldDecl>(new( std::nothrow ) _1487f5920_FieldDecl());
	_124417_f->_field_public=_124335_tokens[0LL]._field_id == 21LLU;
	if (_124417_f->_field_public) {
		if (_124335_tokens.len() == 1LL) {
			this->self->_method_push_err(_124335_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1487f5920_FieldDecl>();
		}
		_124335_tokens=_124335_tokens.slice(1LL);
	}
	_124417_f->_field_mutable=_124335_tokens[0LL]._field_id == 36LLU;
	if (_124417_f->_field_mutable) {
		if (_124335_tokens.len() == 1LL) {
			this->self->_method_push_err(_124335_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1487f5920_FieldDecl>();
		}
		_124335_tokens=_124335_tokens.slice(1LL);
	}
	_124417_f->_field_token=_124335_tokens[0LL];
	if (_124417_f->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_124417_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_FieldDecl>();
	}
	_124417_f->_field_ident=_124417_f->_field_token._field_kind;
	if (_124335_tokens.len() == 1LL) {
		this->self->_method_push_err(_124335_tokens[0LL],jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_FieldDecl>();
	} else if (_124335_tokens[1LL]._field_id != 11LLU) {
		this->self->_method_push_err(_124335_tokens[1LL],jule::Str("data-type missing", 17),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_FieldDecl>();
	}
	_124335_tokens=_124335_tokens.slice(2LL);
	jule::Int _128117_i = 0LL;
	std::tie(_124417_f->_field_kind,std::ignore) = this->self->_method_build_type(_124335_tokens,(&(_128117_i)),true);
	if (_128117_i < _124335_tokens.len()) {
		this->self->_method_push_err(_124335_tokens[static_cast<jule::Int>(_128117_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_FieldDecl>();
	}
	return _124417_f;
}



inline jule::Slice<jule::Ref<_1487f5920_FieldDecl>> _138657c70_Parser::_method_build_struct_decl_fields(jule::Slice<_108e15ff0_Token> _129148_tokens) {
	jule::Slice<jule::Ref<_1487f5920_FieldDecl>> _129217_fields = nullptr;
	jule::Slice<jule::Ref<_1190d5970_Stmt>> _129317_stms = _1190d5970_split_stms(_129148_tokens);
	{
		auto __julec_range_expr = _129317_stms;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1190d5970_Stmt> _138657c70_st = *__julec_range_begin;
			_iter_begin_4362889552:;
			{
				jule::Slice<_108e15ff0_Token> _129521_tokens = _138657c70_st->_field_tokens;
				if (_129521_tokens[0LL]._field_id == 18LLU) {
					goto _iter_next_4362889552;
				}
				jule::Ref<_1487f5920_FieldDecl> _129921_f = this->self->_method_build_field(_129521_tokens);
				_129217_fields=jule::append(_129217_fields,jule::Slice<jule::Ref<_1487f5920_FieldDecl>>({_129921_f}));
			}
			_iter_next_4362889552:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _138657c70_st = *__julec_range_begin; goto _iter_begin_4362889552; }
			_iter_end_4362889552:;
		}
	}
	return _129217_fields;
}



inline jule::Ref<_1487f5920_StructDecl> _138657c70_Parser::_method_build_struct_decl(jule::Slice<_108e15ff0_Token> _130541_tokens) {
	if (_130541_tokens.len() < 3LL) {
		this->self->_method_push_err(_130541_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_StructDecl>();
	}
	jule::Int _131117_i = 1LL;
	jule::Ref<_1487f5920_StructDecl> _131217_s = jule::new_struct<_1487f5920_StructDecl>(new( std::nothrow ) _1487f5920_StructDecl(_130541_tokens[static_cast<jule::Int>(_131117_i)],jule::Str(),jule::Slice<jule::Ref<_1487f5920_FieldDecl>>(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ref<_1487f5920_Directive>>(),jule::Ref<_1487f5920_CommentGroup>(),jule::Slice<jule::Ref<_1487f5920_GenericDecl>>()));
	if (_131217_s->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_131217_s->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
	}
	(_131117_i)++;
	if (_131117_i >= _130541_tokens.len()) {
		this->self->_method_push_err(_130541_tokens[static_cast<jule::Int>(_131117_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return _131217_s;
	}
	_131217_s->_field_ident=_131217_s->_field_token._field_kind;
	_108e15ff0_Token _132613_error_token = _130541_tokens[static_cast<jule::Int>(_131117_i)];
	jule::Slice<_108e15ff0_Token> _132717_generics_tokens = _138657c70_range(_131117_i,jule::Str("[", 1),jule::Str("]", 1),_130541_tokens);
	if (_132717_generics_tokens != nullptr) {
		_131217_s->_field_generics=this->self->_method_build_generics(_132717_generics_tokens,_132613_error_token);
	}
	if (_131117_i >= _130541_tokens.len()) {
		this->self->_method_push_err(_130541_tokens[static_cast<jule::Int>(_131117_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return _131217_s;
	}
	jule::Slice<_108e15ff0_Token> _133617_body_tokens = _138657c70_range(_131117_i,jule::Str("{", 1),jule::Str("}", 1),_130541_tokens);
	if (_133617_body_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_131217_s->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return _131217_s;
	}
	if (_131117_i < _130541_tokens.len()) {
		this->self->_method_push_err(_130541_tokens[static_cast<jule::Int>(_131117_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	_131217_s->_field_fields=this->self->_method_build_struct_decl_fields(_133617_body_tokens);
	return _131217_s;
}



inline void _138657c70_Parser::_method_check_method_receiver(jule::Ref<_1487f5920_FnDecl> _135040_f) {
	if (_135040_f->_field_statically) {
		if ((_135040_f->_field_params.len() > 0LL) && _135040_f->_field_params[0LL]->_method_is_self()) {
			(*this)._method_push_err(_135040_f->_field_token,jule::Str("static functions cannot have receiver parameter", 47),jule::Slice<jule::Any>({}));
		}
		return;
	}
	if (_135040_f->_field_params.len() == 0LL) {
		(*this)._method_push_err(_135040_f->_field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>({}));
		return;
	}
	jule::Ref<_1487f5920_ParamDecl> _136313_param = _135040_f->_field_params[0LL];
	if ((!(_136313_param->_method_is_self()))) {
		(*this)._method_push_err(_135040_f->_field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>({}));
		return;
	}
}



inline jule::Slice<jule::Ref<_1487f5920_FnDecl>> _138657c70_Parser::_method_build_trait_methods(jule::Slice<_108e15ff0_Token> _137043_tokens) {
	jule::Slice<jule::Ref<_1487f5920_FnDecl>> _137117_methods = nullptr;
	jule::Slice<jule::Ref<_1190d5970_Stmt>> _137217_stms = _1190d5970_split_stms(_137043_tokens);
	{
		auto __julec_range_expr = _137217_stms;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1190d5970_Stmt> _138657c70_st = *__julec_range_begin;
			_iter_begin_4362944624:;
			{
				jule::Slice<_108e15ff0_Token> _137421_tokens = _1190cb760_eliminate_comments(_138657c70_st->_field_tokens);
				if (_137421_tokens.len() == 0LL) {
					goto _iter_next_4362944624;
				}
				jule::Bool _137921_is_pub = false;
				if (_137421_tokens[0LL]._field_id == 21LLU) {
					_137921_is_pub=true;
					if (_137421_tokens.len() == 1LL) {
						this->self->_method_push_err(_137421_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
						goto _iter_next_4362944624;
					}
					_137421_tokens=_137421_tokens.slice(1LL);
				}
				jule::Ref<_1487f5920_FnDecl> _138921_f = this->self->_method_build_fn(_137421_tokens,true,true);
				if (jule::real(_138921_f)) {
					if (_138921_f->_method_is_anon()) {
						this->self->_method_push_err(_138921_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
					}
					this->self->_method_check_method_receiver(_138921_f);
					if (_138921_f->_field_generics.len() > 0LL) {
						this->self->_method_push_err(_138921_f->_field_token,jule::Str("trait methods cannot have generics", 34),jule::Slice<jule::Any>({}));
					}
					_138921_f->_field_public=_137921_is_pub;
					_137117_methods=jule::append(_137117_methods,jule::Slice<jule::Ref<_1487f5920_FnDecl>>({_138921_f}));
				}
			}
			_iter_next_4362944624:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _138657c70_st = *__julec_range_begin; goto _iter_begin_4362944624; }
			_iter_end_4362944624:;
		}
	}
	return _137117_methods;
}



inline jule::Ref<_1487f5920_TraitDecl> _138657c70_Parser::_method_build_trait_decl(jule::Slice<_108e15ff0_Token> _140540_tokens) {
	if (_140540_tokens.len() < 3LL) {
		this->self->_method_push_err(_140540_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_TraitDecl>();
	}
	jule::Ref<_1487f5920_TraitDecl> _141017_t = jule::new_struct<_1487f5920_TraitDecl>(new( std::nothrow ) _1487f5920_TraitDecl(_140540_tokens[1LL],jule::Str(),jule::Bool(),jule::Ref<_1487f5920_CommentGroup>(),jule::Slice<jule::Ref<_1487f5920_FnDecl>>()));
	if (_141017_t->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_141017_t->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
	}
	_141017_t->_field_ident=_141017_t->_field_token._field_kind;
	jule::Int _141817_i = 2LL;
	jule::Slice<_108e15ff0_Token> _141917_body_tokens = _138657c70_range(_141817_i,jule::Str("{", 1),jule::Str("}", 1),_140540_tokens);
	if (_141917_body_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_141017_t->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_TraitDecl>();
	}
	if (_141817_i < _140540_tokens.len()) {
		this->self->_method_push_err(_140540_tokens[static_cast<jule::Int>(_141817_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	_141017_t->_field_methods=this->self->_method_build_trait_methods(_141917_body_tokens);
	return _141017_t;
}



inline jule::Ref<_1487f5920_FnDecl> _138657c70_Parser::_method_build_cpp_link_fn(jule::Slice<_108e15ff0_Token> _143341_tokens) {
	_143341_tokens=_143341_tokens.slice(1LL);
	jule::Ref<_1487f5920_FnDecl> _143517_f = this->self->_method_build_fn(_143341_tokens,false,true);
	if (jule::real(_143517_f)) {
		if (_143517_f->_method_is_anon()) {
			this->self->_method_push_err(_143517_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
		_143517_f->_field_cpp_linked=true;
	}
	return _143517_f;
}



inline jule::Ref<_1487f5920_VarDecl> _138657c70_Parser::_method_build_cpp_link_var(jule::Slice<_108e15ff0_Token> _144542_tokens) {
	_144542_tokens=_144542_tokens.slice(1LL);
	jule::Ref<_1487f5920_VarDecl> _144717_v = this->self->_method_build_var(_144542_tokens);
	if (jule::real(_144717_v)) {
		_144717_v->_field_cpp_linked=true;
		if (jule::real(_144717_v->_field_expr)) {
			this->self->_method_push_err(_144717_v->_field_token,jule::Str("cpp linked variables cannot have expression", 43),jule::Slice<jule::Any>({}));
		}
	}
	return _144717_v;
}



inline jule::Ref<_1487f5920_StructDecl> _138657c70_Parser::_method_build_cpp_link_struct(jule::Slice<_108e15ff0_Token> _145745_tokens) {
	_145745_tokens=_145745_tokens.slice(1LL);
	jule::Ref<_1487f5920_StructDecl> _145917_s = this->self->_method_build_struct_decl(_145745_tokens);
	if (jule::real(_145917_s)) {
		_145917_s->_field_cpp_linked=true;
	}
	return _145917_s;
}



inline jule::Ref<_1487f5920_TypeAliasDecl> _138657c70_Parser::_method_build_cpp_link_type_alias(jule::Slice<_108e15ff0_Token> _146649_tokens) {
	_146649_tokens=_146649_tokens.slice(1LL);
	jule::Ref<_1487f5920_TypeAliasDecl> _146817_t = this->self->_method_build_type_alias_decl(_146649_tokens);
	if (jule::real(_146817_t)) {
		_146817_t->_field_cpp_linked=true;
	}
	return _146817_t;
}



inline jule::Ref<_1487f5920_UseDecl> _138657c70_Parser::_method_build_cpp_link_use(jule::Slice<_108e15ff0_Token> _147542_tokens) {
	if (_147542_tokens.len() == 1LL) {
		this->self->_method_push_err(_147542_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_UseDecl>();
	}
	_147542_tokens=_147542_tokens.slice(1LL);
	
	return this->self->_method_build_use_decl(_147542_tokens,true);
}



inline jule::Any _138657c70_Parser::_method_build_cpp_link(jule::Slice<_108e15ff0_Token> _148638_tokens) {
	_108e15ff0_Token _148717_token = _148638_tokens[0LL];
	if (_148638_tokens.len() == 1LL) {
		this->self->_method_push_err(_148717_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	_148717_token=_148638_tokens[1LL];
	{
		auto _match_expr{ _148717_token._field_id };
		if (!((19LLU) == _match_expr)) { goto _case_end_4363023472; }
		_case_begin_4363023472:;
		{
			return jule::Any(this->self->_method_build_cpp_link_use(_148638_tokens));
		}
		goto _match_end_4363022336;
		_case_end_4363023472:;
		if (!((33LLU) == _match_expr || (35LLU) == _match_expr)) { goto _case_end_4363023584; }
		_case_begin_4363023584:;
		{
			return jule::Any(this->self->_method_build_cpp_link_fn(_148638_tokens));
		}
		goto _match_end_4363022336;
		_case_end_4363023584:;
		if (!((9LLU) == _match_expr || (34LLU) == _match_expr)) { goto _case_end_4363023696; }
		_case_begin_4363023696:;
		{
			return jule::Any(this->self->_method_build_cpp_link_var(_148638_tokens));
		}
		goto _match_end_4363022336;
		_case_end_4363023696:;
		if (!((25LLU) == _match_expr)) { goto _case_end_4363025344; }
		_case_begin_4363025344:;
		{
			return jule::Any(this->self->_method_build_cpp_link_struct(_148638_tokens));
		}
		goto _match_end_4363022336;
		_case_end_4363025344:;
		if (!((10LLU) == _match_expr)) { goto _case_end_4363025456; }
		_case_begin_4363025456:;
		{
			return jule::Any(this->self->_method_build_cpp_link_type_alias(_148638_tokens));
		}
		goto _match_end_4363022336;
		_case_end_4363025456:;
		_case_begin_4363022528:;
		{
			this->self->_method_push_err(_148717_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4363022336;
		_case_end_4363022528:;
		_match_end_4363022336:;
	}
	return jule::Any(nullptr);
}



inline jule::Ref<_1487f5920_FnDecl> _138657c70_Parser::_method_get_method(jule::Slice<_108e15ff0_Token> _151734_tokens) {
	jule::Int _151817_i = 0LL;
	_108e15ff0_Token _151917_token = _151734_tokens[static_cast<jule::Int>(_151817_i)];
	if (_151917_token._field_id == 38LLU) {
		if ((_151817_i + 1LL) >= _151734_tokens.len()) {
			this->self->_method_push_err(_151917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1487f5920_FnDecl>();
		}
		(_151817_i)++;
		_151917_token=_151734_tokens[static_cast<jule::Int>(_151817_i)];
	}
	if (_151917_token._field_id == 35LLU) {
		if ((_151817_i + 1LL) >= _151734_tokens.len()) {
			this->self->_method_push_err(_151917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1487f5920_FnDecl>();
		}
		(_151817_i)++;
		_151917_token=_151734_tokens[static_cast<jule::Int>(_151817_i)];
	}
	if (_151917_token._field_id != 33LLU) {
		this->self->_method_push_err(_151917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_FnDecl>();
	}
	jule::Ref<_1487f5920_FnDecl> _154317_f = this->self->_method_build_fn(_151734_tokens,true,false);
	if (jule::real(_154317_f) && _154317_f->_method_is_anon()) {
		this->self->_method_push_err(_154317_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	return _154317_f;
}



inline void _138657c70_Parser::_method_parse_impl_trait(jule::Ref<_1487f5920_Impl> _155040_ipl,jule::Slice<_108e15ff0_Token> _155056_tokens) {
	jule::Slice<jule::Ref<_1190d5970_Stmt>> _155117_stms = _1190d5970_split_stms(_155056_tokens);
	{
		auto __julec_range_expr = _155117_stms;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1190d5970_Stmt> _138657c70_st = *__julec_range_begin;
			_iter_begin_4363054912:;
			{
				jule::Slice<_108e15ff0_Token> _155321_tokens = _138657c70_st->_field_tokens;
				_108e15ff0_Token _155421_token = _155321_tokens[0LL];
				jule::Bool _155521_is_pub = false;
				{
					auto _match_expr{ _155421_token._field_id };
					if (!((18LLU) == _match_expr)) { goto _case_end_4363060128; }
					_case_begin_4363060128:;
					{
						goto _iter_next_4363054912;
					}
					goto _match_end_4363058368;
					_case_end_4363060128:;
					if (!((21LLU) == _match_expr)) { goto _case_end_4363060240; }
					_case_begin_4363060240:;
					{
						_155521_is_pub=true;
						if (_155321_tokens.len() == 1LL) {
							this->self->_method_push_err(_155321_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
							goto _iter_next_4363054912;
						}
						_155321_tokens=_155321_tokens.slice(1LL);
						if (_155321_tokens.len() > 0LL) {
							_155421_token=_155321_tokens[0LL];
						}
					}
					goto _match_end_4363058368;
					_case_end_4363060240:;
					_match_end_4363058368:;
				}
				{
					auto _match_expr{ _155421_token._field_id };
					if (!((38LLU) == _match_expr || (33LLU) == _match_expr || (35LLU) == _match_expr)) { goto _case_end_4363067648; }
					_case_begin_4363067648:;
					{
						jule::Ref<_1487f5920_FnDecl> _157725_f = this->self->_method_get_method(_155321_tokens);
						if (jule::real(_157725_f)) {
							_157725_f->_field_public=_155521_is_pub;
							this->self->_method_check_method_receiver(_157725_f);
							_155040_ipl->_field_methods=jule::append(_155040_ipl->_field_methods,jule::Slice<jule::Ref<_1487f5920_FnDecl>>({_157725_f}));
						}
					}
					goto _match_end_4363063312;
					_case_end_4363067648:;
					_case_begin_4363060624:;
					{
						this->self->_method_push_err(_155421_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
						goto _iter_next_4363054912;
					}
					goto _match_end_4363063312;
					_case_end_4363060624:;
					_match_end_4363063312:;
				}
			}
			_iter_next_4363054912:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _138657c70_st = *__julec_range_begin; goto _iter_begin_4363054912; }
			_iter_end_4363054912:;
		}
	}
}



inline void _138657c70_Parser::_method_parse_impl_struct(jule::Ref<_1487f5920_Impl> _159141_ipl,jule::Slice<_108e15ff0_Token> _159157_tokens) {
	jule::Slice<jule::Ref<_1190d5970_Stmt>> _159217_stms = _1190d5970_split_stms(_159157_tokens);
	{
		auto __julec_range_expr = _159217_stms;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1190d5970_Stmt> _138657c70_st = *__julec_range_begin;
			_iter_begin_4363077136:;
			{
				jule::Slice<_108e15ff0_Token> _159421_tokens = _138657c70_st->_field_tokens;
				_108e15ff0_Token _159521_token = _159421_tokens[0LL];
				jule::Bool _159621_is_pub = false;
				{
					auto _match_expr{ _159521_token._field_id };
					if (!((18LLU) == _match_expr)) { goto _case_end_4363082352; }
					_case_begin_4363082352:;
					{
						goto _iter_next_4363077136;
					}
					goto _match_end_4363080592;
					_case_end_4363082352:;
					if (!((21LLU) == _match_expr)) { goto _case_end_4363082464; }
					_case_begin_4363082464:;
					{
						_159621_is_pub=true;
						if (_159421_tokens.len() == 1LL) {
							this->self->_method_push_err(_159421_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
							goto _iter_next_4363077136;
						}
						_159421_tokens=_159421_tokens.slice(1LL);
						if (_159421_tokens.len() > 0LL) {
							_159521_token=_159421_tokens[0LL];
						}
					}
					goto _match_end_4363080592;
					_case_end_4363082464:;
					_match_end_4363080592:;
				}
				{
					auto _match_expr{ _159521_token._field_id };
					if (!((38LLU) == _match_expr || (33LLU) == _match_expr || (35LLU) == _match_expr)) { goto _case_end_4363089872; }
					_case_begin_4363089872:;
					{
						jule::Ref<_1487f5920_FnDecl> _161825_f = this->self->_method_get_method(_159421_tokens);
						if (jule::real(_161825_f)) {
							_161825_f->_field_public=_159621_is_pub;
							this->self->_method_check_method_receiver(_161825_f);
							_159141_ipl->_field_methods=jule::append(_159141_ipl->_field_methods,jule::Slice<jule::Ref<_1487f5920_FnDecl>>({_161825_f}));
						}
					}
					goto _match_end_4363085536;
					_case_end_4363089872:;
					_case_begin_4363082848:;
					{
						this->self->_method_push_err(_159521_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
						goto _iter_next_4363077136;
					}
					goto _match_end_4363085536;
					_case_end_4363082848:;
					_match_end_4363085536:;
				}
			}
			_iter_next_4363077136:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _138657c70_st = *__julec_range_begin; goto _iter_begin_4363077136; }
			_iter_end_4363077136:;
		}
	}
}



inline void _138657c70_Parser::_method_parse_impl_body(jule::Ref<_1487f5920_Impl> _163239_ipl,jule::Slice<_108e15ff0_Token> _163255_tokens) {
	if (_163239_ipl->_method_is_trait_impl()) {
		this->self->_method_parse_impl_trait(_163239_ipl,_163255_tokens);
		return;
	}
	this->self->_method_parse_impl_struct(_163239_ipl,_163255_tokens);
}



inline jule::Ref<_1487f5920_Impl> _138657c70_Parser::_method_build_impl(jule::Slice<_108e15ff0_Token> _164034_tokens) {
	_108e15ff0_Token _164117_token = _164034_tokens[0LL];
	if (_164034_tokens.len() < 2LL) {
		this->self->_method_push_err(_164117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_Impl>();
	}
	_164117_token=_164034_tokens[1LL];
	if (_164117_token._field_id != 2LLU) {
		this->self->_method_push_err(_164117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_Impl>();
	}
	if (_164034_tokens.len() < 3LL) {
		this->self->_method_push_err(_164117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_Impl>();
	}
	jule::Ref<_1487f5920_Impl> _165617_ipl = jule::new_struct<_1487f5920_Impl>(new( std::nothrow ) _1487f5920_Impl(_164117_token,_108e15ff0_Token(),jule::Slice<jule::Ref<_1487f5920_FnDecl>>()));
	_164117_token=_164034_tokens[2LL];
	if (_164117_token._field_id != 12LLU) {
		if ((_164117_token._field_id == 3LLU) && (_164117_token._field_kind == jule::Str("{", 1))) {
			std::tie(_165617_ipl->_field_base,_165617_ipl->_field_dest) = std::make_tuple(_165617_ipl->_field_dest,_165617_ipl->_field_base);
			_164034_tokens=_164034_tokens.slice(2LL);
			goto _julec_label_body;
		}
		this->self->_method_push_err(_164117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_Impl>();
	}
	if (_164034_tokens.len() < 4LL) {
		this->self->_method_push_err(_164117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_Impl>();
	}
	_164117_token=_164034_tokens[3LL];
	if (_164117_token._field_id != 2LLU) {
		this->self->_method_push_err(_164117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_Impl>();
	}
	_165617_ipl->_field_dest=_164117_token;
	_164034_tokens=_164034_tokens.slice(4LL);
	_julec_label_body:;
	jule::Int _168617_i = 0LL;
	jule::Slice<_108e15ff0_Token> _168717_body_tokens = _138657c70_range(_168617_i,jule::Str("{", 1),jule::Str("}", 1),_164034_tokens);
	if (_168717_body_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_165617_ipl->_field_base,jule::Str("body is not exist", 17),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1487f5920_Impl>();
	}
	if (_168617_i < _164034_tokens.len()) {
		this->self->_method_push_err(_164034_tokens[static_cast<jule::Int>(_168617_i)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
	}
	this->self->_method_parse_impl_body(_165617_ipl,_168717_body_tokens);
	return _165617_ipl;
}



inline jule::Any _138657c70_Parser::_method_build_node_data(jule::Slice<_108e15ff0_Token> _170139_tokens) {
	_108e15ff0_Token _170217_token = _170139_tokens[0LL];
	{
		auto _match_expr{ _170217_token._field_id };
		if (!((19LLU) == _match_expr)) { goto _case_end_4388327552; }
		_case_begin_4388327552:;
		{
			
			return jule::Any(this->self->_method_build_use_decl(_170139_tokens,false));
		}
		goto _match_end_4388323952;
		_case_end_4388327552:;
		if (!((33LLU) == _match_expr || (35LLU) == _match_expr)) { goto _case_end_4388327664; }
		_case_begin_4388327664:;
		{
			jule::Ref<_1487f5920_FnDecl> _171021_f = this->self->_method_build_fn(_170139_tokens,false,false);
			if (jule::real(_171021_f)) {
				_171021_f->_field_global=true;
				if (_171021_f->_method_is_anon()) {
					this->self->_method_push_err(_171021_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				}
			}
			return jule::Any(_171021_f);
		}
		goto _match_end_4388323952;
		_case_end_4388327664:;
		if (!((34LLU) == _match_expr || (9LLU) == _match_expr || (36LLU) == _match_expr || (38LLU) == _match_expr)) { goto _case_end_4388325520; }
		_case_begin_4388325520:;
		{
			return jule::Any(this->self->_method_build_var(_170139_tokens));
		}
		goto _match_end_4388323952;
		_case_end_4388325520:;
		if (!((10LLU) == _match_expr)) { goto _case_end_4388325632; }
		_case_begin_4388325632:;
		{
			return jule::Any(this->self->_method_build_type_alias_decl(_170139_tokens));
		}
		goto _match_end_4388323952;
		_case_end_4388325632:;
		if (!((24LLU) == _match_expr)) { goto _case_end_4388325744; }
		_case_begin_4388325744:;
		{
			return jule::Any(this->self->_method_build_enum_decl(_170139_tokens));
		}
		goto _match_end_4388323952;
		_case_end_4388325744:;
		if (!((25LLU) == _match_expr)) { goto _case_end_4388328384; }
		_case_begin_4388328384:;
		{
			return jule::Any(this->self->_method_build_struct_decl(_170139_tokens));
		}
		goto _match_end_4388323952;
		_case_end_4388328384:;
		if (!((29LLU) == _match_expr)) { goto _case_end_4388328496; }
		_case_begin_4388328496:;
		{
			return jule::Any(this->self->_method_build_trait_decl(_170139_tokens));
		}
		goto _match_end_4388323952;
		_case_end_4388328496:;
		if (!((30LLU) == _match_expr)) { goto _case_end_4388328608; }
		_case_begin_4388328608:;
		{
			return jule::Any(this->self->_method_build_impl(_170139_tokens));
		}
		goto _match_end_4388323952;
		_case_end_4388328608:;
		if (!((31LLU) == _match_expr)) { goto _case_end_4388328720; }
		_case_begin_4388328720:;
		{
			return this->self->_method_build_cpp_link(_170139_tokens);
		}
		goto _match_end_4388323952;
		_case_end_4388328720:;
		if (!((18LLU) == _match_expr)) { goto _case_end_4388328832; }
		_case_begin_4388328832:;
		{
			jule::Ref<_1487f5920_Comment> _174721_c = _138657c70_build_comment(_170217_token);
			this->self->_method_process_comment(_174721_c);
			return jule::Any(_174721_c);
		}
		goto _match_end_4388323952;
		_case_end_4388328832:;
		_case_begin_4388325216:;
		{
			this->self->_method_push_err(_170217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4388323952;
		_case_end_4388325216:;
		_match_end_4388323952:;
	}
}



inline void _138657c70_Parser::_method_check_comment_group(_1487f5920_Node _175738_node) {
	if ((!(jule::real((*this)._field_comment_group)))) {
		return;
	}
	{
		auto _match_expr{ _175738_node._field_data };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_Comment>>() || _match_expr.type_is<jule::Ref<_1487f5920_Directive>>())) { goto _case_end_4388349552; }
		goto _match_end_4388348400;
		_case_end_4388349552:;
		_case_begin_4388348736:;
		{
			jule::drop((*this)._field_comment_group);
		}
		goto _match_end_4388348400;
		_case_end_4388348736:;
		_match_end_4388348400:;
	}
}



inline void _138657c70_Parser::_method_check_directive(_1487f5920_Node _177134_node) {
	if ((*this)._field_directives == nullptr) {
		return;
	}
	{
		auto _match_expr{ _177134_node._field_data };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_Directive>>() || _match_expr.type_is<jule::Ref<_1487f5920_Comment>>())) { goto _case_end_4388355488; }
		goto _match_end_4388353872;
		_case_end_4388355488:;
		_case_begin_4388353376:;
		{
			(*this)._field_directives=nullptr;
		}
		goto _match_end_4388353872;
		_case_end_4388353376:;
		_match_end_4388353872:;
	}
}



inline void _138657c70_Parser::_method_apply_meta(_1487f5920_Node _178633_node,jule::Bool _178649_is_pub) {
	{
		auto _match_expr{ _178633_node._field_data };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_VarDecl>>())) { goto _case_end_4388359936; }
		_case_begin_4388359936:;
		{
			jule::Ref<_1487f5920_VarDecl> _178921_v = _178633_node._field_data.operator jule::Ref<_1487f5920_VarDecl>();
			if ((!(jule::real(_178921_v)))) {
				return;
			}
			_178921_v->_field_public=_178649_is_pub;
			_178649_is_pub=false;
			_178921_v->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
			_178921_v->_field_directives=(*this)._field_directives;
			(*this)._field_directives=nullptr;
		}
		goto _match_end_4388359200;
		_case_end_4388359936:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_FnDecl>>())) { goto _case_end_4388360048; }
		_case_begin_4388360048:;
		{
			jule::Ref<_1487f5920_FnDecl> _180321_f = _178633_node._field_data.operator jule::Ref<_1487f5920_FnDecl>();
			if ((!(jule::real(_180321_f)))) {
				return;
			}
			_180321_f->_field_public=_178649_is_pub;
			_178649_is_pub=false;
			_180321_f->_field_directives=(*this)._field_directives;
			(*this)._field_directives=nullptr;
			_180321_f->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
		}
		goto _match_end_4388359200;
		_case_end_4388360048:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_TypeAliasDecl>>())) { goto _case_end_4388360160; }
		_case_begin_4388360160:;
		{
			jule::Ref<_1487f5920_TypeAliasDecl> _181621_tad = _178633_node._field_data.operator jule::Ref<_1487f5920_TypeAliasDecl>();
			if ((!(jule::real(_181621_tad)))) {
				return;
			}
			_181621_tad->_field_public=_178649_is_pub;
			_178649_is_pub=false;
			_181621_tad->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
		}
		goto _match_end_4388359200;
		_case_end_4388360160:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_EnumDecl>>())) { goto _case_end_4388360272; }
		_case_begin_4388360272:;
		{
			jule::Ref<_1487f5920_EnumDecl> _182621_ed = _178633_node._field_data.operator jule::Ref<_1487f5920_EnumDecl>();
			if ((!(jule::real(_182621_ed)))) {
				return;
			}
			_182621_ed->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
			_182621_ed->_field_public=_178649_is_pub;
			_178649_is_pub=false;
		}
		goto _match_end_4388359200;
		_case_end_4388360272:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_StructDecl>>())) { goto _case_end_4388360400; }
		_case_begin_4388360400:;
		{
			jule::Ref<_1487f5920_StructDecl> _183621_sd = _178633_node._field_data.operator jule::Ref<_1487f5920_StructDecl>();
			if ((!(jule::real(_183621_sd)))) {
				return;
			}
			_183621_sd->_field_directives=(*this)._field_directives;
			(*this)._field_directives=nullptr;
			_183621_sd->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
			_183621_sd->_field_public=_178649_is_pub;
			_178649_is_pub=false;
		}
		goto _match_end_4388359200;
		_case_end_4388360400:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_TraitDecl>>())) { goto _case_end_4388360528; }
		_case_begin_4388360528:;
		{
			jule::Ref<_1487f5920_TraitDecl> _184821_td = _178633_node._field_data.operator jule::Ref<_1487f5920_TraitDecl>();
			if ((!(jule::real(_184821_td)))) {
				return;
			}
			_184821_td->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
			_184821_td->_field_public=_178649_is_pub;
			_178649_is_pub=false;
		}
		goto _match_end_4388359200;
		_case_end_4388360528:;
		_match_end_4388359200:;
	}
	if (_178649_is_pub) {
		(*this)._method_push_err(_178633_node._field_token,jule::Str("define is not supports pub modifier", 35),jule::Slice<jule::Any>({}));
	}
}



inline void _138657c70_Parser::_method_check_use_decl(_1487f5920_Node _186233_node) {
	{
		auto _match_expr{ _186233_node._field_data };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_UseDecl>>())) { goto _case_end_4388396384; }
		goto _match_end_4388394784;
		_case_end_4388396384:;
		_case_begin_4388395472:;
		{
			return;
		}
		goto _match_end_4388394784;
		_case_end_4388395472:;
		_match_end_4388394784:;
	}
	if ((*this)._field_ast->_field_decls.len() > 0LL) {
		(*this)._method_push_err(_186233_node._field_token,jule::Str("use declarations must declared before other declarations", 56),jule::Slice<jule::Any>({}));
		(*this)._method_push_suggestion(jule::Str("move this use declaration to top of source file", 47),jule::Slice<jule::Any>({}));
	}
}



inline std::tuple<jule::Bool,jule::Any> _138657c70_Parser::_method_build_general_scope_node_data(jule::Slice<_108e15ff0_Token> _187753_st) {
	jule::Any _187782_data = jule::Any();
	jule::Bool _187768_is_pub = jule::Bool();
	if (_187753_st[0LL]._field_id == 21LLU) {
		_187768_is_pub=true;
		_187753_st=_187753_st.slice(1LL);
		if (_187753_st.len() == 0LL) {
			this->self->_method_push_err(_187753_st[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return std::make_tuple(_187768_is_pub,_187782_data);
		}
	}
	_187782_data=this->self->_method_build_node_data(_187753_st);
	_187768_is_pub = _187768_is_pub;
	_187782_data = _187782_data;
	return std::make_tuple(_187768_is_pub,_187782_data);
}



inline _1487f5920_Node _138657c70_Parser::_method_parse_node(jule::Slice<_108e15ff0_Token> _189234_st) {
	_1487f5920_Node _189317_node = _1487f5920_Node(_189234_st[0LL],jule::Any());
	jule::Bool _189714_is_pub;
	jule::Any _189726_data;
	std::tie(_189714_is_pub,_189726_data) = this->self->_method_build_general_scope_node_data(_189234_st);
	if (_189726_data == nullptr) {
		return _189317_node;
	}
	_189317_node._field_data=_189726_data;
	this->self->_method_apply_meta(_189317_node,_189714_is_pub);
	this->self->_method_check_comment_group(_189317_node);
	this->self->_method_check_directive(_189317_node);
	this->self->_method_check_use_decl(_189317_node);
	return _189317_node;
}



inline void _138657c70_Parser::_method_append_node(jule::Slice<_108e15ff0_Token> _191135_st) {
	if (_191135_st.len() == 0LL) {
		return;
	}
	_1487f5920_Node _191617_node = this->self->_method_parse_node(_191135_st);
	if ((_191617_node._field_data == nullptr) || this->self->_method_stopped()) {
		return;
	}
	{
		if (!((_191617_node._method_is_use_decl()))) { goto _case_end_4388428000; }
		_case_begin_4388428000:;
		{
			this->self->_field_ast->_field_use_decls=jule::append(this->self->_field_ast->_field_use_decls,jule::Slice<jule::Ref<_1487f5920_UseDecl>>({_191617_node._field_data.operator jule::Ref<_1487f5920_UseDecl>()}));
		}
		goto _match_end_4388426576;
		_case_end_4388428000:;
		if (!((_191617_node._method_is_decl()))) { goto _case_end_4388429664; }
		_case_begin_4388429664:;
		{
			this->self->_field_ast->_field_decls=jule::append(this->self->_field_ast->_field_decls,jule::Slice<_1487f5920_Node>({_191617_node}));
		}
		goto _match_end_4388426576;
		_case_end_4388429664:;
		if (!((_191617_node._method_is_comment()))) { goto _case_end_4388427520; }
		_case_begin_4388427520:;
		{
			jule::Ref<_1487f5920_Comment> _193121_c = _191617_node._field_data.operator jule::Ref<_1487f5920_Comment>();
			this->self->_field_ast->_field_comments=jule::append(this->self->_field_ast->_field_comments,jule::Slice<jule::Ref<_1487f5920_Comment>>({_193121_c}));
		}
		goto _match_end_4388426576;
		_case_end_4388427520:;
		if (!((_191617_node._method_is_impl()))) { goto _case_end_4388427632; }
		_case_begin_4388427632:;
		{
			this->self->_field_ast->_field_impls=jule::append(this->self->_field_ast->_field_impls,jule::Slice<jule::Ref<_1487f5920_Impl>>({_191617_node._field_data.operator jule::Ref<_1487f5920_Impl>()}));
		}
		goto _match_end_4388426576;
		_case_end_4388427632:;
		_case_begin_4388427216:;
		{
			this->self->_method_push_err(_191617_node._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4388426576;
		_case_end_4388427216:;
		_match_end_4388426576:;
	}
}



inline void _138657c70_Parser::_method_remove_range(jule::Int _194231_i,jule::Str _194239_kind,jule::Slice<_108e15ff0_Token>& _194251_tokens,jule::Slice<jule::Int>& _194273_ranges) {
	jule::Str _194313_close = _138657c70_get_close_kind_of_brace(_194239_kind);
	_iter_begin_4388421088:;
	if (!(_194231_i >= 0LL)) { goto _iter_end_4388421088; }
	{
		_108e15ff0_Token _194517_tok = _194251_tokens[static_cast<jule::Int>(_194273_ranges[static_cast<jule::Int>(_194231_i)])];
		if (_194517_tok._field_kind != _194313_close) {
			goto _iter_next_4388421088;
		}
		_194273_ranges=jule::append(_194273_ranges.slice(0LL,static_cast<jule::Int>(_194231_i)),_194273_ranges.slice(static_cast<jule::Int>(_194231_i + 1LL)));
		goto _iter_end_4388421088;
	}
	_iter_next_4388421088:;
	(_194231_i)--;
	goto _iter_begin_4388421088;
	_iter_end_4388421088:;
}



inline void _138657c70_Parser::_method_push_wrong_order_close_err(_108e15ff0_Token _195545_t,jule::Slice<_108e15ff0_Token>& _195556_tokens,jule::Slice<jule::Int>& _195574_ranges) {
	{
		auto _match_expr{ _195556_tokens[static_cast<jule::Int>(_195574_ranges[static_cast<jule::Int>(_195574_ranges.len() - 1LL)])]._field_kind };
		if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4388460016; }
		_case_begin_4388460016:;
		{
			(*this)._method_push_err(_195545_t,jule::Str("was expected parentheses close", 30),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4388457872;
		_case_end_4388460016:;
		if (!((jule::Str("{", 1)) == _match_expr)) { goto _case_end_4388460128; }
		_case_begin_4388460128:;
		{
			(*this)._method_push_err(_195545_t,jule::Str("was expected brace close", 24),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4388457872;
		_case_end_4388460128:;
		if (!((jule::Str("[", 1)) == _match_expr)) { goto _case_end_4388460240; }
		_case_begin_4388460240:;
		{
			(*this)._method_push_err(_195545_t,jule::Str("was expected bracket close", 26),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4388457872;
		_case_end_4388460240:;
		_match_end_4388457872:;
	}
}



inline void _138657c70_Parser::_method_push_range_close(_108e15ff0_Token _196335_t,jule::Str _196345_left,jule::Slice<_108e15ff0_Token>& _196357_tokens,jule::Slice<jule::Int>& _196379_ranges) {
	jule::I64 _196413_n = _196379_ranges.len();
	if (_196413_n == 0LL) {
		{
			auto _match_expr{ _196335_t._field_kind };
			if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4388472624; }
			_case_begin_4388472624:;
			{
				(*this)._method_push_err(_196335_t,jule::Str("extra closed brackets", 21),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4388471936;
			_case_end_4388472624:;
			if (!((jule::Str("}", 1)) == _match_expr)) { goto _case_end_4388472752; }
			_case_begin_4388472752:;
			{
				(*this)._method_push_err(_196335_t,jule::Str("extra closed braces", 19),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4388471936;
			_case_end_4388472752:;
			if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4388472880; }
			_case_begin_4388472880:;
			{
				(*this)._method_push_err(_196335_t,jule::Str("extra closed parentheses", 24),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4388471936;
			_case_end_4388472880:;
			_match_end_4388471936:;
		}
		return;
	} else if (_196357_tokens[static_cast<jule::Int>(_196379_ranges[static_cast<jule::Int>(_196413_n - 1LL)])]._field_kind != _196345_left) {
		(*this)._method_push_wrong_order_close_err(_196335_t,_196357_tokens,_196379_ranges);
	}
	(*this)._method_remove_range(static_cast<jule::I64>(_196413_n - 1LL),_196335_t._field_kind,_196357_tokens,_196379_ranges);
}



inline void _138657c70_Parser::_method_check_ranges(jule::Slice<_108e15ff0_Token>& _197832_tokens) {
	jule::Slice<jule::Int> _197917_ranges = nullptr;
	{
		auto __julec_range_expr = _197832_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _138657c70_i = 0;
			_108e15ff0_Token _138657c70_token = *__julec_range_begin;
			_iter_begin_4388484848:;
			{
				if (_138657c70_token._field_id != 3LLU) {
					goto _iter_next_4388484848;
				}
				{
					auto _match_expr{ _138657c70_token._field_kind };
					if (!((jule::Str("(", 1)) == _match_expr || (jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr)) { goto _case_end_4388488784; }
					_case_begin_4388488784:;
					{
						_197917_ranges=jule::append(_197917_ranges,jule::Slice<jule::Int>({_138657c70_i}));
					}
					goto _match_end_4388488512;
					_case_end_4388488784:;
					if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4388488896; }
					_case_begin_4388488896:;
					{
						(*this)._method_push_range_close(_138657c70_token,jule::Str("(", 1),_197832_tokens,_197917_ranges);
					}
					goto _match_end_4388488512;
					_case_end_4388488896:;
					if (!((jule::Str("}", 1)) == _match_expr)) { goto _case_end_4388489008; }
					_case_begin_4388489008:;
					{
						(*this)._method_push_range_close(_138657c70_token,jule::Str("{", 1),_197832_tokens,_197917_ranges);
					}
					goto _match_end_4388488512;
					_case_end_4388489008:;
					if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4388489120; }
					_case_begin_4388489120:;
					{
						(*this)._method_push_range_close(_138657c70_token,jule::Str("[", 1),_197832_tokens,_197917_ranges);
					}
					goto _match_end_4388488512;
					_case_end_4388489120:;
					_match_end_4388488512:;
				}
			}
			_iter_next_4388484848:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_138657c70_i; _138657c70_token = *__julec_range_begin; goto _iter_begin_4388484848; }
			_iter_end_4388484848:;
		}
	}
	{
		auto __julec_range_expr = _197917_ranges;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _138657c70_i = *__julec_range_begin;
			_iter_begin_4388493152:;
			{
				_108e15ff0_Token _200417_token = _197832_tokens[static_cast<jule::Int>(_138657c70_i)];
				{
					auto _match_expr{ _200417_token._field_kind };
					if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4388497872; }
					_case_begin_4388497872:;
					{
						(*this)._method_push_err(_200417_token,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>({}));
					}
					goto _match_end_4388496672;
					_case_end_4388497872:;
					if (!((jule::Str("{", 1)) == _match_expr)) { goto _case_end_4388497984; }
					_case_begin_4388497984:;
					{
						(*this)._method_push_err(_200417_token,jule::Str("brace waiting to close", 22),jule::Slice<jule::Any>({}));
					}
					goto _match_end_4388496672;
					_case_end_4388497984:;
					if (!((jule::Str("[", 1)) == _match_expr)) { goto _case_end_4388498096; }
					_case_begin_4388498096:;
					{
						(*this)._method_push_err(_200417_token,jule::Str("bracket are waiting to close", 28),jule::Slice<jule::Any>({}));
					}
					goto _match_end_4388496672;
					_case_end_4388498096:;
					_match_end_4388496672:;
				}
			}
			_iter_next_4388493152:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _138657c70_i = *__julec_range_begin; goto _iter_begin_4388493152; }
			_iter_end_4388493152:;
		}
	}
}



inline void _138657c70_Parser::_method_parse(jule::Ref<_108e58b50_File> _201329_f) {
	this->self->_field_ast=jule::new_struct<_1487f02c0_Ast>(new( std::nothrow ) _1487f02c0_Ast(_201329_f,jule::Slice<jule::Ref<_1487f5920_Directive>>(),jule::Slice<jule::Ref<_1487f5920_UseDecl>>(),jule::Slice<jule::Ref<_1487f5920_Impl>>(),jule::Slice<jule::Ref<_1487f5920_Comment>>(),jule::Slice<_1487f5920_Node>()));
	jule::Slice<_108e15ff0_Token> _201817_tokens = _201329_f->_method_tokens();
	this->self->_method_check_ranges(_201817_tokens);
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	jule::Slice<jule::Ref<_1190d5970_Stmt>> _202417_stms = _1190d5970_split_stms(_201817_tokens);
	jule::Int _202717_i = 0LL;
	_iter_begin_4388503840:;
	if (!(_202717_i < _202417_stms.len())) { goto _iter_end_4388503840; }
	{
		jule::Ref<_1190d5970_Stmt> _202921_st = _202417_stms[static_cast<jule::Int>(_202717_i)];
		if (_202921_st->_field_tokens.len() == 0LL) {
			return;
		}
		jule::Any _203425_data;
		std::tie(std::ignore,_203425_data) = this->self->_method_build_general_scope_node_data(_202921_st->_field_tokens);
		if (_203425_data == nullptr) {
			goto _iter_end_4388503840;
		}
		if (this->self->_method_stopped()) {
			return;
		}
		_1487f5920_Node _204321_node = _1487f5920_Node(_108e15ff0_Token(),_203425_data);
		if (_204321_node._method_is_comment()) {
			jule::Ref<_1487f5920_Directive> _204525_d = this->self->_method_get_directive(_204321_node._field_data.operator jule::Ref<_1487f5920_Comment>());
			if (jule::real(_204525_d) && _149036e70_is_top_directive(_204525_d->_field_tag)) {
				this->self->_field_ast->_field_top_directives=jule::append(this->self->_field_ast->_field_top_directives,jule::Slice<jule::Ref<_1487f5920_Directive>>({_204525_d}));
			}
		} else {
			goto _iter_end_4388503840;
		}
	}
	_iter_next_4388503840:;
	(_202717_i)++;
	goto _iter_begin_4388503840;
	_iter_end_4388503840:;
	this->self->_field_errors=nullptr;
	_iter_begin_4388507088:;
	if (!(_202717_i < _202417_stms.len())) { goto _iter_end_4388507088; }
	{
		jule::Ref<_1190d5970_Stmt> _205821_st = _202417_stms[static_cast<jule::Int>(_202717_i)];
		this->self->_method_append_node(_205821_st->_field_tokens);
		if (this->self->_method_stopped()) {
			goto _iter_end_4388507088;
		}
	}
	_iter_next_4388507088:;
	(_202717_i)++;
	goto _iter_begin_4388507088;
	_iter_end_4388507088:;
}







std::ostream &operator<<(std::ostream &_Stream, const _138657c70_Parser &_Src) {
	_Stream << "Parser{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "comment_group:" << _Src._field_comment_group << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}



inline void _103796900_TypeBuilder::_method_push_err(_108e15ff0_Token _7827_token,jule::Str _7841_fmt) {
	if ((*this)._field_err) {
		(*this)._field_p->_method_push_err(_7827_token,_7841_fmt,jule::Slice<jule::Any>({}));
	}
}



inline void _103796900_TypeBuilder::_method_push_suggestion(jule::Str _8534_fmt,jule::Slice<jule::Any> _8547_args) {
	if ((*this)._field_err) {
		(*this)._field_p->_method_push_suggestion(_8534_fmt,_8547_args);
	}
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_build_prim(void) {
	jule::Ref<_1487f5920_TypeDecl> _9217_t = _103796900_build_prim_type((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))]);
	((*((*this)._field_i)))++;
	return _9217_t;
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_build_namespace(void) {
	jule::Ref<_1487f5920_TypeDecl> _9817_t = jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))],jule::Any()));
	jule::Ref<_1487f5920_NamespaceTypeDecl> _10217_nst = jule::new_struct<_1487f5920_NamespaceTypeDecl>(new( std::nothrow ) _1487f5920_NamespaceTypeDecl());
	jule::Int _10317_n = 0LL;
	_iter_begin_4388547392:;
	if (!((*((*this)._field_i)) < (*this)._field_tokens.len())) { goto _iter_end_4388547392; }
	{
		_108e15ff0_Token _10521_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
		if (jule::mod(_10317_n,2LL) == 0LL) {
			if (_10521_token._field_id != 2LLU) {
				(*this)._method_push_err(_10521_token,jule::Str("invalid syntax", 14));
				(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>({}));
			}
			_10217_nst->_field_idents=jule::append(_10217_nst->_field_idents,jule::Slice<_108e15ff0_Token>({_10521_token}));
		} else if (_10521_token._field_id != 23LLU) {
			goto _iter_end_4388547392;
		}
		(_10317_n)++;
	}
	_iter_next_4388547392:;
	((*((*this)._field_i)))++;
	goto _iter_begin_4388547392;
	_iter_end_4388547392:;
	_10217_nst->_field_idents=_10217_nst->_field_idents.slice(0LL,static_cast<jule::Int>(_10217_nst->_field_idents.len() - 1LL));
	((*((*this)._field_i)))--;
	_10217_nst->_field_kind=(*this)._method_build_ident()->_field_kind.operator jule::Ref<_1487f5920_IdentTypeDecl>();
	_9817_t->_field_kind=jule::Any(_10217_nst);
	return _9817_t;
}



inline jule::Slice<jule::Ref<_1487f5920_TypeDecl>> _103796900_TypeBuilder::_method_build_generics(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		return nullptr;
	}
	_108e15ff0_Token _13113_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if ((_13113_token._field_id != 3LLU) || (_13113_token._field_kind != jule::Str("[", 1))) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_108e15ff0_Token>> _13617_parts = (*this)._method_ident_generics();
	if (_13617_parts.len() == 0LL) {
		(*this)._method_push_err(_13113_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	jule::Slice<jule::Ref<_1487f5920_TypeDecl>> _14217_types = jule::Slice<jule::Ref<_1487f5920_TypeDecl>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_13617_parts.len())));
	{
		auto __julec_range_expr = _13617_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _103796900_i = 0;
			jule::Slice<_108e15ff0_Token> _103796900_part = *__julec_range_begin;
			_iter_begin_4388575648:;
			{
				jule::Int _14421_j = 0LL;
				jule::Ref<_1487f5920_TypeDecl> _14522_t;
				std::tie(_14522_t,std::ignore) = (*this)._field_p->_method_build_type(_103796900_part,(&(_14421_j)),true);
				if (_14421_j < _103796900_part.len()) {
					(*this)._method_push_err(_103796900_part[static_cast<jule::Int>(_14421_j)],jule::Str("invalid syntax", 14));
				}
				_14217_types[static_cast<jule::Int>(_103796900_i)]=_14522_t;
			}
			_iter_next_4388575648:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_103796900_i; _103796900_part = *__julec_range_begin; goto _iter_begin_4388575648; }
			_iter_end_4388575648:;
		}
	}
	return _14217_types;
}



inline jule::Slice<jule::Slice<_108e15ff0_Token>> _103796900_TypeBuilder::_method_ident_generics(void) {
	jule::Int _15513_first = (*((*this)._field_i));
	jule::Int _15617_range_n = 0LL;
	_iter_begin_4388585632:;
	if (!((*((*this)._field_i)) < (*this)._field_tokens.len())) { goto _iter_end_4388585632; }
	{
		_108e15ff0_Token _15817_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
		if (_15817_token._field_id == 3LLU) {
			{
				auto _match_expr{ _15817_token._field_kind };
				if (!((jule::Str("[", 1)) == _match_expr)) { goto _case_end_4388589808; }
				_case_begin_4388589808:;
				{
					(_15617_range_n)++;
				}
				goto _match_end_4388589072;
				_case_end_4388589808:;
				if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4388589920; }
				_case_begin_4388589920:;
				{
					(_15617_range_n)--;
				}
				goto _match_end_4388589072;
				_case_end_4388589920:;
				_match_end_4388589072:;
			}
		}
		if (_15617_range_n == 0LL) {
			((*((*this)._field_i)))++;
			goto _iter_end_4388585632;
		}
	}
	_iter_next_4388585632:;
	((*((*this)._field_i)))++;
	goto _iter_begin_4388585632;
	_iter_end_4388585632:;
	jule::Slice<_108e15ff0_Token> _17017_tokens = (*this)._field_tokens.slice(static_cast<jule::Int>(_15513_first + 1LL),static_cast<jule::Int>((*((*this)._field_i)) - 1LL));
	jule::Slice<jule::Slice<_108e15ff0_Token>> _17118_parts;
	jule::Slice<_1486379e0_Log> _17125_errors;
	std::tie(_17118_parts,_17125_errors) = _138657c70_parts(_17017_tokens,8LLU,true);
	if ((*this)._field_err) {
		(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_17125_errors);
	}
	return _17118_parts;
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_build_ident(void) {
	if ((((*((*this)._field_i)) + 1LL) < (*this)._field_tokens.len()) && ((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)) + 1LL)]._field_id == 23LLU)) {
		return (*this)._method_build_namespace();
	}
	_108e15ff0_Token _18217_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	jule::Ref<_1487f5920_IdentTypeDecl> _18317_it = jule::new_struct<_1487f5920_IdentTypeDecl>(new( std::nothrow ) _1487f5920_IdentTypeDecl(_18217_token,_18217_token._field_kind,false,jule::Slice<jule::Ref<_1487f5920_TypeDecl>>()));
	((*((*this)._field_i)))++;
	_18317_it->_field_generics=(*this)._method_build_generics();
	return jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_18217_token,jule::Any(_18317_it)));
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_build_cpp_link(void) {
	if ((((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) || ((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)) + 1LL)]._field_id != 20LLU)) {
		(*this)._method_push_err((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))],jule::Str("invalid syntax", 14));
		return jule::new_ref<_1487f5920_TypeDecl>();
	}
	(*((*this)._field_i))+=2LL;
	jule::Ref<_1487f5920_TypeDecl> _20217_t = (*this)._method_build_ident();
	_20217_t->_field_kind.operator jule::Ref<_1487f5920_IdentTypeDecl>()->_field_cpp_linked=true;
	return _20217_t;
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_build_fn(void) {
	_108e15ff0_Token _20817_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	jule::Ref<_1487f5920_FnDecl> _20917_f = (*this)._field_p->_method_build_fn_prototype((*this)._field_tokens,(*((*this)._field_i)),false);
	if ((!(jule::real(_20917_f)))) {
		return jule::new_ref<_1487f5920_TypeDecl>();
	}
	if ((!(_20917_f->_method_is_anon()))) {
		(*this)._method_push_err(_20917_f->_field_token,jule::Str("invalid syntax", 14));
	}
	return jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_20817_token,jule::Any(_20917_f)));
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_build_ptr(void) {
	_108e15ff0_Token _22317_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_22317_token,jule::Str("invalid syntax", 14));
		return jule::new_ref<_1487f5920_TypeDecl>();
	}
	((*((*this)._field_i)))++;
	if ((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))]._field_id == 35LLU) {
		((*((*this)._field_i)))++;
		return jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_22317_token,jule::Any(jule::new_struct<_1487f5920_PtrTypeDecl>(new( std::nothrow ) _1487f5920_PtrTypeDecl(jule::new_ref<_1487f5920_TypeDecl>())))));
	}
	jule::Ref<_1487f5920_TypeDecl> _24017_elem = (*this)._method_step();
	if ((!(jule::real(_24017_elem)))) {
		return jule::new_ref<_1487f5920_TypeDecl>();
	}
	return jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_22317_token,jule::Any(jule::new_struct<_1487f5920_PtrTypeDecl>(new( std::nothrow ) _1487f5920_PtrTypeDecl(_24017_elem)))));
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_build_ref(void) {
	_108e15ff0_Token _25417_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_25417_token,jule::Str("invalid syntax", 14));
		return jule::new_ref<_1487f5920_TypeDecl>();
	}
	((*((*this)._field_i)))++;
	jule::Ref<_1487f5920_TypeDecl> _26117_elem = (*this)._method_step();
	if ((!(jule::real(_26117_elem)))) {
		return jule::new_ref<_1487f5920_TypeDecl>();
	}
	return jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_25417_token,jule::Any(jule::new_struct<_1487f5920_RefTypeDecl>(new( std::nothrow ) _1487f5920_RefTypeDecl(_26117_elem)))));
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_build_op(void) {
	_108e15ff0_Token _27517_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	{
		auto _match_expr{ _27517_token._field_kind };
		if (!((jule::Str("*", 1)) == _match_expr)) { goto _case_end_4388659696; }
		_case_begin_4388659696:;
		{
			return (*this)._method_build_ptr();
		}
		goto _match_end_4388654448;
		_case_end_4388659696:;
		if (!((jule::Str("&", 1)) == _match_expr)) { goto _case_end_4388658528; }
		_case_begin_4388658528:;
		{
			return (*this)._method_build_ref();
		}
		goto _match_end_4388654448;
		_case_end_4388658528:;
		if (!((jule::Str("&&", 2)) == _match_expr)) { goto _case_end_4388659360; }
		_case_begin_4388659360:;
		{
			(*this)._method_push_err(_27517_token,jule::Str("references cannot reference to another reference", 48));
			return (*this)._method_build_ref();
		}
		goto _match_end_4388654448;
		_case_end_4388659360:;
		_case_begin_4388656464:;
		{
			(*this)._method_push_err(_27517_token,jule::Str("invalid syntax", 14));
			return jule::new_ref<_1487f5920_TypeDecl>();
		}
		goto _match_end_4388654448;
		_case_end_4388656464:;
		_match_end_4388654448:;
	}
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_build_slc(void) {
	_108e15ff0_Token _29417_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	((*((*this)._field_i)))++;
	jule::Ref<_1487f5920_TypeDecl> _29617_elem = (*this)._method_step();
	if ((!(jule::real(_29617_elem)))) {
		return jule::new_ref<_1487f5920_TypeDecl>();
	}
	return jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_29417_token,jule::Any(jule::new_struct<_1487f5920_SlcTypeDecl>(new( std::nothrow ) _1487f5920_SlcTypeDecl(_29617_elem)))));
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_build_arr(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)) - 1LL)],jule::Str("data-type missing", 17));
		return jule::new_ref<_1487f5920_TypeDecl>();
	}
	jule::Int _31713_expr_delta = (*((*this)._field_i));
	jule::Ref<_1487f5920_TypeDecl> _31917_elem = (*this)._method_step();
	if ((!(jule::real(_31917_elem)))) {
		return jule::new_ref<_1487f5920_TypeDecl>();
	}
	jule::Ref<_1487f5920_ArrTypeDecl> _32417_arrt = jule::new_struct<_1487f5920_ArrTypeDecl>(new( std::nothrow ) _1487f5920_ArrTypeDecl(_31917_elem,jule::Ref<_1487f5920_Expr>()));
	jule::Slice<_108e15ff0_Token> _32821_expr_tokens;
	std::tie(std::ignore,_32821_expr_tokens) = _138657c70_range_last((*this)._field_tokens.slice(0LL,static_cast<jule::Int>(_31713_expr_delta)));
	_32821_expr_tokens=_32821_expr_tokens.slice(1LL,static_cast<jule::Int>(_32821_expr_tokens.len() - 1LL));
	_108e15ff0_Token _33017_token = _32821_expr_tokens[0LL];
	if (((_32821_expr_tokens.len() == 1LL) && (_33017_token._field_id == 7LLU)) && (_33017_token._field_kind == jule::Str("...", 3))) {
	} else {
		_32417_arrt->_field_size=(*this)._field_p->_method_build_expr(_32821_expr_tokens);
	}
	return jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_33017_token,jule::Any(_32417_arrt)));
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_build_map(jule::Int _34328_colon,jule::Slice<_108e15ff0_Token> _34344_tokens) {
	_108e15ff0_Token _34417_colon_token = (*this)._field_tokens[static_cast<jule::Int>(_34328_colon)];
	if ((_34328_colon == 0LL) || ((_34328_colon + 1LL) >= _34344_tokens.len())) {
		(*this)._method_push_err(_34417_colon_token,jule::Str("data-type missing", 17));
		return jule::new_ref<_1487f5920_TypeDecl>();
	}
	jule::Slice<_108e15ff0_Token> _34917_key_tokens = _34344_tokens.slice(0LL,static_cast<jule::Int>(_34328_colon));
	jule::Slice<_108e15ff0_Token> _35017_val_tokens = _34344_tokens.slice(static_cast<jule::Int>(_34328_colon + 1LL));
	jule::Ref<_1487f5920_MapTypeDecl> _35117_mapt = jule::new_struct<_1487f5920_MapTypeDecl>(new( std::nothrow ) _1487f5920_MapTypeDecl());
	jule::Int _35317_j = 0LL;
	jule::Ref<_1487f5920_TypeDecl> _35418_keyt;
	jule::Bool _35428_ok;
	std::tie(_35418_keyt,_35428_ok) = (*this)._field_p->_method_build_type(_34917_key_tokens,(&(_35317_j)),(*this)._field_err);
	if ((!(_35428_ok))) {
		return jule::new_ref<_1487f5920_TypeDecl>();
	} else if (_35317_j < _34917_key_tokens.len()) {
		(*this)._method_push_err(_34917_key_tokens[static_cast<jule::Int>(_35317_j)],jule::Str("invalid syntax", 14));
	}
	_35117_mapt->_field_key=_35418_keyt;
	_35317_j=0LL;
	jule::Ref<_1487f5920_TypeDecl> _36318_valt;
	std::tie(_36318_valt,_35428_ok) = (*this)._field_p->_method_build_type(_35017_val_tokens,(&(_35317_j)),(*this)._field_err);
	if ((!(_35428_ok))) {
		return jule::new_ref<_1487f5920_TypeDecl>();
	} else if (_35317_j < _35017_val_tokens.len()) {
		(*this)._method_push_err(_35017_val_tokens[static_cast<jule::Int>(_35317_j)],jule::Str("invalid syntax", 14));
	}
	_35117_mapt->_field_val=_36318_valt;
	return jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_34417_colon_token,jule::Any(_35117_mapt)));
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_build_enumerable(void) {
	_108e15ff0_Token _37817_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if (((((*((*this)._field_i)) + 2LL) >= (*this)._field_tokens.len()) || (_37817_token._field_id != 3LLU)) || (_37817_token._field_kind != jule::Str("[", 1))) {
		(*this)._method_push_err(_37817_token,jule::Str("invalid syntax", 14));
		return jule::new_ref<_1487f5920_TypeDecl>();
	}
	((*((*this)._field_i)))++;
	_37817_token=(*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if ((_37817_token._field_id == 3LLU) && (_37817_token._field_kind == jule::Str("]", 1))) {
		return (*this)._method_build_slc();
	}
	((*((*this)._field_i)))--;
	jule::Slice<_108e15ff0_Token> _39218_map_tokens;
	jule::Int _39230_colon;
	std::tie(_39218_map_tokens,_39230_colon) = _103796900_split_map_range((*this)._field_tokens,(*((*this)._field_i)));
	((*((*this)._field_i)))++;
	if (_39230_colon == -1LL) {
		return (*this)._method_build_arr();
	}
	return (*this)._method_build_map(_39230_colon,_39218_map_tokens);
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_TypeBuilder::_method_step(void) {
	_108e15ff0_Token _40113_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	{
		auto _match_expr{ _40113_token._field_id };
		if (!((1LLU) == _match_expr)) { goto _case_end_4388733936; }
		_case_begin_4388733936:;
		{
			return (*this)._method_build_prim();
		}
		goto _match_end_4388728608;
		_case_end_4388733936:;
		if (!((2LLU) == _match_expr)) { goto _case_end_4388734048; }
		_case_begin_4388734048:;
		{
			return (*this)._method_build_ident();
		}
		goto _match_end_4388728608;
		_case_end_4388734048:;
		if (!((31LLU) == _match_expr)) { goto _case_end_4388730912; }
		_case_begin_4388730912:;
		{
			return (*this)._method_build_cpp_link();
		}
		goto _match_end_4388728608;
		_case_end_4388730912:;
		if (!((33LLU) == _match_expr)) { goto _case_end_4388731024; }
		_case_begin_4388731024:;
		{
			return (*this)._method_build_fn();
		}
		goto _match_end_4388728608;
		_case_end_4388731024:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4388731136; }
		_case_begin_4388731136:;
		{
			return (*this)._method_build_op();
		}
		goto _match_end_4388728608;
		_case_end_4388731136:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4388733328; }
		_case_begin_4388733328:;
		{
			return (*this)._method_build_enumerable();
		}
		goto _match_end_4388728608;
		_case_end_4388733328:;
		_case_begin_4388730608:;
		{
			((*((*this)._field_i)))++;
			(*this)._method_push_err(_40113_token,jule::Str("invalid syntax", 14));
			return jule::new_ref<_1487f5920_TypeDecl>();
		}
		goto _match_end_4388728608;
		_case_end_4388730608:;
		_match_end_4388728608:;
	}
}



inline std::tuple<jule::Ref<_1487f5920_TypeDecl>,jule::Bool> _103796900_TypeBuilder::_method_build(void) {
	jule::Bool _43044_ok = jule::Bool();
	jule::Ref<_1487f5920_TypeDecl> _43117_root = (*this)._method_step();
	if ((!(jule::real(_43117_root)))) {
		_43044_ok = false;
		return std::make_tuple(_103796900_build_void_type(),_43044_ok);
	}
	_43044_ok = true;
	return std::make_tuple(_43117_root,_43044_ok);
}







std::ostream &operator<<(std::ostream &_Stream, const _103796900_TypeBuilder &_Src) {
	_Stream << "TypeBuilder{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_104c409b0_Const> _104c409b0_Const::_static_method_new_i64(jule::I64 _1327_x) {
	return jule::new_struct<_104c409b0_Const>(new( std::nothrow ) _104c409b0_Const(jule::Any(_1327_x)));
}



inline jule::Ref<_104c409b0_Const> _104c409b0_Const::_static_method_new_u64(jule::U64 _1527_x) {
	return jule::new_struct<_104c409b0_Const>(new( std::nothrow ) _104c409b0_Const(jule::Any(_1527_x)));
}



inline jule::Ref<_104c409b0_Const> _104c409b0_Const::_static_method_new_bool(jule::Bool _1728_x) {
	return jule::new_struct<_104c409b0_Const>(new( std::nothrow ) _104c409b0_Const(jule::Any(_1728_x)));
}



inline jule::Ref<_104c409b0_Const> _104c409b0_Const::_static_method_new_str(jule::Str _1927_x) {
	return jule::new_struct<_104c409b0_Const>(new( std::nothrow ) _104c409b0_Const(jule::Any(_1927_x)));
}



inline jule::Ref<_104c409b0_Const> _104c409b0_Const::_static_method_new_f64(jule::F64 _2127_x) {
	return jule::new_struct<_104c409b0_Const>(new( std::nothrow ) _104c409b0_Const(jule::Any(_2127_x)));
}



inline jule::Ref<_104c409b0_Const> _104c409b0_Const::_static_method_new_nil(void) {
	return jule::new_struct<_104c409b0_Const>(new( std::nothrow ) _104c409b0_Const(jule::Any(nullptr)));
}



inline jule::I64 _104c409b0_Const::_method_read_i64(void) {
	if ((!((*this)._method_is_i64()))) {
		return 0LL;
	}
	return (*this)._field_data.operator jule::I64();
}



inline jule::U64 _104c409b0_Const::_method_read_u64(void) {
	if ((!((*this)._method_is_u64()))) {
		return 0LL;
	}
	return (*this)._field_data.operator jule::U64();
}



inline jule::Bool _104c409b0_Const::_method_read_bool(void) {
	if ((!((*this)._method_is_bool()))) {
		return false;
	}
	return (*this)._field_data.operator jule::Bool();
}



inline jule::Str _104c409b0_Const::_method_read_str(void) {
	if ((!((*this)._method_is_str()))) {
		return jule::Str("", 0);
	}
	return (*this)._field_data.operator jule::Str();
}



inline jule::F64 _104c409b0_Const::_method_read_f64(void) {
	if ((!((*this)._method_is_f64()))) {
		return 0LL;
	}
	return (*this)._field_data.operator jule::F64();
}



inline jule::I64 _104c409b0_Const::_method_as_i64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4388828112; }
		_case_begin_4388828112:;
		{
			return (*this)._field_data.operator jule::I64();
		}
		goto _match_end_4388825664;
		_case_end_4388828112:;
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4388827680; }
		_case_begin_4388827680:;
		{
			return static_cast<jule::I64>((*this)._field_data.operator jule::U64());
		}
		goto _match_end_4388825664;
		_case_end_4388827680:;
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4388827792; }
		_case_begin_4388827792:;
		{
			return static_cast<jule::I64>((*this)._field_data.operator jule::F64());
		}
		goto _match_end_4388825664;
		_case_end_4388827792:;
		_case_begin_4388826272:;
		{
			return 0LL;
		}
		goto _match_end_4388825664;
		_case_end_4388826272:;
		_match_end_4388825664:;
	}
}



inline jule::U64 _104c409b0_Const::_method_as_u64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4388834320; }
		_case_begin_4388834320:;
		{
			return (*this)._field_data.operator jule::U64();
		}
		goto _match_end_4388831728;
		_case_end_4388834320:;
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4388833888; }
		_case_begin_4388833888:;
		{
			return static_cast<jule::U64>((*this)._field_data.operator jule::I64());
		}
		goto _match_end_4388831728;
		_case_end_4388833888:;
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4388834000; }
		_case_begin_4388834000:;
		{
			return static_cast<jule::U64>((*this)._field_data.operator jule::F64());
		}
		goto _match_end_4388831728;
		_case_end_4388834000:;
		_case_begin_4388828432:;
		{
			return 0LL;
		}
		goto _match_end_4388831728;
		_case_end_4388828432:;
		_match_end_4388831728:;
	}
}



inline jule::F64 _104c409b0_Const::_method_as_f64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4388841344; }
		_case_begin_4388841344:;
		{
			return (*this)._field_data.operator jule::F64();
		}
		goto _match_end_4388838928;
		_case_end_4388841344:;
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4388840912; }
		_case_begin_4388840912:;
		{
			return static_cast<jule::F64>((*this)._field_data.operator jule::I64());
		}
		goto _match_end_4388838928;
		_case_end_4388840912:;
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4388841024; }
		_case_begin_4388841024:;
		{
			return static_cast<jule::F64>((*this)._field_data.operator jule::U64());
		}
		goto _match_end_4388838928;
		_case_end_4388841024:;
		_case_begin_4388839504:;
		{
			return 0LL;
		}
		goto _match_end_4388838928;
		_case_end_4388839504:;
		_match_end_4388838928:;
	}
}



inline void _104c409b0_Const::_method_set_i64(jule::I64 _14030_x) {
	(*this)._field_data=jule::Any(_14030_x);
}



inline void _104c409b0_Const::_method_set_u64(jule::U64 _14230_x) {
	(*this)._field_data=jule::Any(_14230_x);
}



inline void _104c409b0_Const::_method_set_bool(jule::Bool _14431_x) {
	(*this)._field_data=jule::Any(_14431_x);
}



inline void _104c409b0_Const::_method_set_str(jule::Str _14630_x) {
	(*this)._field_data=jule::Any(_14630_x);
}



inline void _104c409b0_Const::_method_set_f64(jule::F64 _14830_x) {
	(*this)._field_data=jule::Any(_14830_x);
}



inline void _104c409b0_Const::_method_set_nil(void) {
	(*this)._field_data=jule::Any(nullptr);
}



inline void _104c409b0_Const::_method_set_by_type(jule::F64 _15230_v,_104c409b0_Const _15238_x) {
	{
		if (!((_15238_x._method_is_f64()))) { goto _case_end_4388864384; }
		_case_begin_4388864384:;
		{
			(*this)._method_set_f64(_15230_v);
		}
		goto _match_end_4388864144;
		_case_end_4388864384:;
		if (!(((*this)._method_is_f64()))) { goto _case_end_4388864512; }
		_case_begin_4388864512:;
		{
			(*this)._method_set_f64(_15230_v);
		}
		goto _match_end_4388864144;
		_case_end_4388864512:;
		if (!(((*this)._method_is_i64()))) { goto _case_end_4388864640; }
		_case_begin_4388864640:;
		{
			(*this)._method_set_i64(static_cast<jule::I64>(_15230_v));
		}
		goto _match_end_4388864144;
		_case_end_4388864640:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4388864768; }
		_case_begin_4388864768:;
		{
			(*this)._method_set_u64(static_cast<jule::U64>(_15230_v));
		}
		goto _match_end_4388864144;
		_case_end_4388864768:;
		_match_end_4388864144:;
	}
}



inline jule::Bool _104c409b0_Const::_method_is_i64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4388872864; }
		_case_begin_4388872864:;
		{
			return true;
		}
		goto _match_end_4388863696;
		_case_end_4388872864:;
		_case_begin_4388872560:;
		{
			return false;
		}
		goto _match_end_4388863696;
		_case_end_4388872560:;
		_match_end_4388863696:;
	}
}



inline jule::Bool _104c409b0_Const::_method_is_u64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4388875408; }
		_case_begin_4388875408:;
		{
			return true;
		}
		goto _match_end_4388874336;
		_case_end_4388875408:;
		_case_begin_4388875040:;
		{
			return false;
		}
		goto _match_end_4388874336;
		_case_end_4388875040:;
		_match_end_4388874336:;
	}
}



inline jule::Bool _104c409b0_Const::_method_is_bool(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Bool>())) { goto _case_end_4388877920; }
		_case_begin_4388877920:;
		{
			return true;
		}
		goto _match_end_4388876848;
		_case_end_4388877920:;
		_case_begin_4388877552:;
		{
			return false;
		}
		goto _match_end_4388876848;
		_case_end_4388877552:;
		_match_end_4388876848:;
	}
}



inline jule::Bool _104c409b0_Const::_method_is_str(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Str>())) { goto _case_end_4388880432; }
		_case_begin_4388880432:;
		{
			return true;
		}
		goto _match_end_4388879360;
		_case_end_4388880432:;
		_case_begin_4388880064:;
		{
			return false;
		}
		goto _match_end_4388879360;
		_case_end_4388880064:;
		_match_end_4388879360:;
	}
}



inline jule::Bool _104c409b0_Const::_method_is_f64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4388882944; }
		_case_begin_4388882944:;
		{
			return true;
		}
		goto _match_end_4388881872;
		_case_end_4388882944:;
		_case_begin_4388882576:;
		{
			return false;
		}
		goto _match_end_4388881872;
		_case_end_4388882576:;
		_match_end_4388881872:;
	}
}



inline jule::Bool _104c409b0_Const::_method_is_nil(void) {
	return (*this)._field_data == nullptr;
}



inline jule::Bool _104c409b0_Const::_method_are_same_types(_104c409b0_Const _20933_x) {
	{
		if (!(((*this)._method_is_i64() == _20933_x._method_is_i64()))) { goto _case_end_4388889216; }
		_case_begin_4388889216:;
		{
			return true;
		}
		goto _match_end_4388888656;
		_case_end_4388889216:;
		if (!(((*this)._method_is_u64() == _20933_x._method_is_u64()))) { goto _case_end_4388889328; }
		_case_begin_4388889328:;
		{
			return true;
		}
		goto _match_end_4388888656;
		_case_end_4388889328:;
		if (!(((*this)._method_is_f64() == _20933_x._method_is_f64()))) { goto _case_end_4388890448; }
		_case_begin_4388890448:;
		{
			return true;
		}
		goto _match_end_4388888656;
		_case_end_4388890448:;
		if (!(((*this)._method_is_bool() == _20933_x._method_is_bool()))) { goto _case_end_4388890560; }
		_case_begin_4388890560:;
		{
			return true;
		}
		goto _match_end_4388888656;
		_case_end_4388890560:;
		if (!(((*this)._method_is_str() == _20933_x._method_is_str()))) { goto _case_end_4388890672; }
		_case_begin_4388890672:;
		{
			return true;
		}
		goto _match_end_4388888656;
		_case_end_4388890672:;
		if (!(((*this)._method_is_nil() == _20933_x._method_is_nil()))) { goto _case_end_4388890784; }
		_case_begin_4388890784:;
		{
			return true;
		}
		goto _match_end_4388888656;
		_case_end_4388890784:;
		_case_begin_4388888800:;
		{
			return false;
		}
		goto _match_end_4388888656;
		_case_end_4388888800:;
		_match_end_4388888656:;
	}
}



inline jule::Bool _104c409b0_Const::_method_and(_104c409b0_Const _22722_x) {
	{
		if (!(((*this)._method_is_bool() && _22722_x._method_is_bool()))) { goto _case_end_4388900928; }
		_case_begin_4388900928:;
		{
			return (*this)._method_read_bool() && _22722_x._method_read_bool();
		}
		goto _match_end_4388900448;
		_case_end_4388900928:;
		_case_begin_4388900592:;
		{
			return false;
		}
		goto _match_end_4388900448;
		_case_end_4388900592:;
		_match_end_4388900448:;
	}
}



inline jule::Bool _104c409b0_Const::_method_or(_104c409b0_Const _23921_x) {
	{
		if (!(((*this)._method_is_bool() && _23921_x._method_is_bool()))) { goto _case_end_4388906560; }
		_case_begin_4388906560:;
		{
			return (*this)._method_read_bool() || _23921_x._method_read_bool();
		}
		goto _match_end_4388906080;
		_case_end_4388906560:;
		_case_begin_4388906224:;
		{
			return false;
		}
		goto _match_end_4388906080;
		_case_end_4388906224:;
		_match_end_4388906080:;
	}
}



inline jule::Bool _104c409b0_Const::_method_eqs(_104c409b0_Const _25122_x) {
	{
		if (!(((*this)._method_is_nil()))) { goto _case_end_4388912304; }
		_case_begin_4388912304:;
		{
			return _25122_x._method_is_nil();
		}
		goto _match_end_4388911744;
		_case_end_4388912304:;
		if (!(((*this)._method_is_bool()))) { goto _case_end_4388912416; }
		_case_begin_4388912416:;
		{
			return _25122_x._method_is_bool() && ((*this)._method_read_bool() == _25122_x._method_read_bool());
		}
		goto _match_end_4388911744;
		_case_end_4388912416:;
		if (!(((*this)._method_is_str()))) { goto _case_end_4388913536; }
		_case_begin_4388913536:;
		{
			return _25122_x._method_is_str() && ((*this)._method_read_str() == _25122_x._method_read_str());
		}
		goto _match_end_4388911744;
		_case_end_4388913536:;
		if (!(((*this)._method_is_i64()))) { goto _case_end_4388913648; }
		_case_begin_4388913648:;
		{
			return (*this)._method_read_i64() == _25122_x._method_as_i64();
		}
		goto _match_end_4388911744;
		_case_end_4388913648:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4388913760; }
		_case_begin_4388913760:;
		{
			return (*this)._method_read_u64() == _25122_x._method_as_u64();
		}
		goto _match_end_4388911744;
		_case_end_4388913760:;
		if (!(((*this)._method_is_f64()))) { goto _case_end_4388913872; }
		_case_begin_4388913872:;
		{
			return (*this)._method_read_f64() == _25122_x._method_as_f64();
		}
		goto _match_end_4388911744;
		_case_end_4388913872:;
		_case_begin_4388911888:;
		{
			return false;
		}
		goto _match_end_4388911744;
		_case_end_4388911888:;
		_match_end_4388911744:;
	}
}



inline jule::Bool _104c409b0_Const::_method_lt(_104c409b0_Const _28321_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4388926864; }
		_case_begin_4388926864:;
		{
			return (*this)._method_read_i64() < _28321_x._method_as_i64();
		}
		goto _match_end_4388926352;
		_case_end_4388926864:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4388926976; }
		_case_begin_4388926976:;
		{
			return (*this)._method_read_u64() < _28321_x._method_as_u64();
		}
		goto _match_end_4388926352;
		_case_end_4388926976:;
		if (!(((*this)._method_is_f64()))) { goto _case_end_4388927104; }
		_case_begin_4388927104:;
		{
			return (*this)._method_read_f64() < _28321_x._method_as_f64();
		}
		goto _match_end_4388926352;
		_case_end_4388927104:;
		_case_begin_4388926496:;
		{
			return false;
		}
		goto _match_end_4388926352;
		_case_end_4388926496:;
		_match_end_4388926352:;
	}
}



inline jule::Bool _104c409b0_Const::_method_gt(_104c409b0_Const _30621_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4388935584; }
		_case_begin_4388935584:;
		{
			return (*this)._method_read_i64() > _30621_x._method_as_i64();
		}
		goto _match_end_4388935072;
		_case_end_4388935584:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4388935696; }
		_case_begin_4388935696:;
		{
			return (*this)._method_read_u64() > _30621_x._method_as_u64();
		}
		goto _match_end_4388935072;
		_case_end_4388935696:;
		if (!(((*this)._method_is_f64()))) { goto _case_end_4388935824; }
		_case_begin_4388935824:;
		{
			return (*this)._method_read_f64() > _30621_x._method_as_f64();
		}
		goto _match_end_4388935072;
		_case_end_4388935824:;
		_case_begin_4388935216:;
		{
			return false;
		}
		goto _match_end_4388935072;
		_case_end_4388935216:;
		_match_end_4388935072:;
	}
}



inline jule::Bool _104c409b0_Const::_method_add(_104c409b0_Const _32826_x) {
	{
		if (!(((*this)._method_is_str()))) { goto _case_end_4388944064; }
		_case_begin_4388944064:;
		{
			if ((!(_32826_x._method_is_str()))) {
				return false;
			}
			(*this)._method_set_str((*this)._method_read_str() + _32826_x._method_read_str());
		}
		goto _match_end_4388943568;
		_case_end_4388944064:;
		if (!(((*this)._method_is_f64()) || ((*this)._method_is_i64()) || ((*this)._method_is_u64()))) { goto _case_end_4388944176; }
		_case_begin_4388944176:;
		{
			(*this)._method_set_by_type(static_cast<jule::F64>((*this)._method_as_f64() + _32826_x._method_as_f64()),_32826_x);
		}
		goto _match_end_4388943568;
		_case_end_4388944176:;
		_case_begin_4388943712:;
		{
			return false;
		}
		goto _match_end_4388943568;
		_case_end_4388943712:;
		_match_end_4388943568:;
	}
	return true;
}



inline jule::Bool _104c409b0_Const::_method_sub(_104c409b0_Const _34926_x) {
	{
		if (!(((*this)._method_is_f64()) || ((*this)._method_is_i64()) || ((*this)._method_is_u64()))) { goto _case_end_4388954592; }
		_case_begin_4388954592:;
		{
			(*this)._method_set_by_type(static_cast<jule::F64>((*this)._method_as_f64() - _34926_x._method_as_f64()),_34926_x);
		}
		goto _match_end_4388954112;
		_case_end_4388954592:;
		_case_begin_4388954256:;
		{
			return false;
		}
		goto _match_end_4388954112;
		_case_end_4388954256:;
		_match_end_4388954112:;
	}
	return true;
}



inline jule::Bool _104c409b0_Const::_method_mul(_104c409b0_Const _36426_x) {
	{
		if (!(((*this)._method_is_f64()) || ((*this)._method_is_i64()) || ((*this)._method_is_u64()))) { goto _case_end_4388961888; }
		_case_begin_4388961888:;
		{
			(*this)._method_set_by_type(static_cast<jule::F64>((*this)._method_as_f64() * _36426_x._method_as_f64()),_36426_x);
		}
		goto _match_end_4388961408;
		_case_end_4388961888:;
		_case_begin_4388961552:;
		{
			return false;
		}
		goto _match_end_4388961408;
		_case_end_4388961552:;
		_match_end_4388961408:;
	}
	return true;
}



inline jule::Bool _104c409b0_Const::_method_div(_104c409b0_Const _38326_x) {
	{
		if (!(((*this)._method_is_f64()))) { goto _case_end_4388968800; }
		_case_begin_4388968800:;
		{
			jule::F64 _38617_l = _38326_x._method_as_f64();
			if (_38617_l == 0LL) {
				return false;
			}
			(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_read_f64(),_38617_l)));
		}
		goto _match_end_4388968288;
		_case_end_4388968800:;
		if (!(((*this)._method_is_i64()))) { goto _case_end_4388968912; }
		_case_begin_4388968912:;
		{
			jule::F64 _39317_l = _38326_x._method_as_f64();
			if (_39317_l == 0LL) {
				return false;
			}
			(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_39317_l)));
		}
		goto _match_end_4388968288;
		_case_end_4388968912:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4388969040; }
		_case_begin_4388969040:;
		{
			jule::F64 _40017_l = _38326_x._method_as_f64();
			if (_40017_l == 0LL) {
				return false;
			}
			(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_40017_l)));
		}
		goto _match_end_4388968288;
		_case_end_4388969040:;
		_case_begin_4388968432:;
		{
			return false;
		}
		goto _match_end_4388968288;
		_case_end_4388968432:;
		_match_end_4388968288:;
	}
	return true;
}



inline jule::Bool _104c409b0_Const::_method_mod(_104c409b0_Const _41526_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4385286160; }
		_case_begin_4385286160:;
		{
			jule::I64 _41817_l = _41526_x._method_as_i64();
			if (_41817_l == 0LL) {
				return false;
			}
			(*this)._method_set_i64(static_cast<jule::I64>(jule::mod((*this)._method_read_i64(),_41817_l)));
		}
		goto _match_end_4385285664;
		_case_end_4385286160:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4385286272; }
		_case_begin_4385286272:;
		{
			jule::U64 _42517_l = _41526_x._method_as_u64();
			if (_42517_l == 0LL) {
				return false;
			}
			(*this)._method_set_u64(static_cast<jule::U64>(jule::mod((*this)._method_read_u64(),_42517_l)));
		}
		goto _match_end_4385285664;
		_case_end_4385286272:;
		_case_begin_4385285808:;
		{
			return false;
		}
		goto _match_end_4385285664;
		_case_end_4385285808:;
		_match_end_4385285664:;
	}
	return true;
}



inline jule::Bool _104c409b0_Const::_method_bitwise_and(_104c409b0_Const _43934_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4385298704; }
		_case_begin_4385298704:;
		{
			(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() & _43934_x._method_as_i64()));
		}
		goto _match_end_4385298208;
		_case_end_4385298704:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4385298816; }
		_case_begin_4385298816:;
		{
			(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() & _43934_x._method_as_u64()));
		}
		goto _match_end_4385298208;
		_case_end_4385298816:;
		_case_begin_4385298352:;
		{
			return false;
		}
		goto _match_end_4385298208;
		_case_end_4385298352:;
		_match_end_4385298208:;
	}
	return true;
}



inline jule::Bool _104c409b0_Const::_method_bitwise_or(_104c409b0_Const _45533_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4385307232; }
		_case_begin_4385307232:;
		{
			(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() | _45533_x._method_as_i64()));
		}
		goto _match_end_4385306736;
		_case_end_4385307232:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4385307344; }
		_case_begin_4385307344:;
		{
			(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() | _45533_x._method_as_u64()));
		}
		goto _match_end_4385306736;
		_case_end_4385307344:;
		_case_begin_4385306880:;
		{
			return false;
		}
		goto _match_end_4385306736;
		_case_end_4385306880:;
		_match_end_4385306736:;
	}
	return true;
}



inline jule::Bool _104c409b0_Const::_method_xor(_104c409b0_Const _47126_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4385316160; }
		_case_begin_4385316160:;
		{
			(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() ^ _47126_x._method_as_i64()));
		}
		goto _match_end_4385315664;
		_case_end_4385316160:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4385316272; }
		_case_begin_4385316272:;
		{
			(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() ^ _47126_x._method_as_u64()));
		}
		goto _match_end_4385315664;
		_case_end_4385316272:;
		_case_begin_4385315808:;
		{
			return false;
		}
		goto _match_end_4385315664;
		_case_end_4385315808:;
		_match_end_4385315664:;
	}
	return true;
}



inline jule::Bool _104c409b0_Const::_method_lshift(_104c409b0_Const _48729_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4385324688; }
		_case_begin_4385324688:;
		{
			jule::I64 _49017_l = (*this)._method_as_i64();
			if (_49017_l < 0LL) {
				jule::U64 _49221_r = _48729_x._method_as_u64();
				(*this)._method_set_i64(static_cast<jule::I64>(_49017_l << _49221_r));
			} else {
				_104c409b0_lshift_unsig((*this),_48729_x);
			}
		}
		goto _match_end_4385324192;
		_case_end_4385324688:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4385324800; }
		_case_begin_4385324800:;
		{
			_104c409b0_lshift_unsig((*this),_48729_x);
		}
		goto _match_end_4385324192;
		_case_end_4385324800:;
		_case_begin_4385324336:;
		{
			return false;
		}
		goto _match_end_4385324192;
		_case_end_4385324336:;
		_match_end_4385324192:;
	}
	return true;
}



inline jule::Bool _104c409b0_Const::_method_rshift(_104c409b0_Const _51029_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4385335184; }
		_case_begin_4385335184:;
		{
			jule::I64 _51317_l = (*this)._method_as_i64();
			if (_51317_l < 0LL) {
				jule::U64 _51521_r = _51029_x._method_as_u64();
				(*this)._method_set_i64(static_cast<jule::I64>(_51317_l >> _51521_r));
			} else {
				_104c409b0_rshift_unsig((*this),_51029_x);
			}
		}
		goto _match_end_4385334688;
		_case_end_4385335184:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4385335296; }
		_case_begin_4385335296:;
		{
			_104c409b0_rshift_unsig((*this),_51029_x);
		}
		goto _match_end_4385334688;
		_case_end_4385335296:;
		_case_begin_4385334832:;
		{
			return false;
		}
		goto _match_end_4385334688;
		_case_end_4385334832:;
		_match_end_4385334688:;
	}
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _104c409b0_Const &_Src) {
	_Stream << "Const{";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}









std::ostream &operator<<(std::ostream &_Stream, const _1037370d0_FieldIns &_Src) {
	_Stream << "FieldIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1037370d0_StructIns::_method_to_str(void) {
	jule::Str _20217_kind = jule::Str("", 0);
	_20217_kind+=(*this)._field_decl->_field_ident;
	if ((*this)._field_generics.len() > 0LL) {
		_20217_kind+=jule::Str("[", 1);
		{
			auto __julec_range_expr = (*this)._field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_104a21a10_TypeKind> _1037370d0_g = *__julec_range_begin;
				_iter_begin_4391219328:;
				{
					_20217_kind+=_1037370d0_g->_method_to_str();
					_20217_kind+=jule::Str(",", 1);
				}
				_iter_next_4391219328:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1037370d0_g = *__julec_range_begin; goto _iter_begin_4391219328; }
				_iter_end_4391219328:;
			}
		}
		_20217_kind=_20217_kind.slice(0LL,static_cast<jule::Int>(_20217_kind.len() - 1LL));
		_20217_kind+=jule::Str("]", 1);
	}
	return _20217_kind;
}



inline jule::Bool _1037370d0_StructIns::_method_equals(jule::Ref<_104a21a10_TypeKind> _21721_other) {
	jule::Ref<_1037370d0_StructIns> _21813_s = (_21721_other).alloc->_method_strct();
	if ((!(jule::real(_21813_s)))) {
		return false;
	}
	if (((*this)._field_decl).alloc != (_21813_s->_field_decl).alloc) {
		return false;
	}
	if ((*this)._field_generics.len() != _21813_s->_field_generics.len()) {
		return false;
	}
	jule::Int _23117_i = 0LL;
	_iter_begin_4391231424:;
	if (!(_23117_i < (*this)._field_generics.len())) { goto _iter_end_4391231424; }
	{
		if ((!((*this)._field_generics[static_cast<jule::Int>(_23117_i)]->_method_equals(_21813_s->_field_generics[static_cast<jule::Int>(_23117_i)])))) {
			return false;
		}
	}
	_iter_next_4391231424:;
	(_23117_i)++;
	goto _iter_begin_4391231424;
	_iter_end_4391231424:;
	return true;
}



inline jule::Ref<_1037649f0_Fn> _1037370d0_StructIns::_method_find_method(jule::Str _24534_ident,jule::Bool _24546_statically) {
	{
		auto __julec_range_expr = (*this)._field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _1037370d0_f = *__julec_range_begin;
			_iter_begin_4391239632:;
			{
				if ((_1037370d0_f->_field_statically == _24546_statically) && (_1037370d0_f->_field_ident == _24534_ident)) {
					return _1037370d0_f;
				}
			}
			_iter_next_4391239632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1037370d0_f = *__julec_range_begin; goto _iter_begin_4391239632; }
			_iter_end_4391239632:;
		}
	}
	return jule::new_ref<_1037649f0_Fn>();
}



inline jule::Ref<_1037370d0_FieldIns> _1037370d0_StructIns::_method_find_field(jule::Str _25633_ident) {
	{
		auto __julec_range_expr = (*this)._field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_FieldIns> _1037370d0_f = *__julec_range_begin;
			_iter_begin_4391245168:;
			{
				if (_1037370d0_f->_field_decl->_field_ident == _25633_ident) {
					return _1037370d0_f;
				}
			}
			_iter_next_4391245168:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1037370d0_f = *__julec_range_begin; goto _iter_begin_4391245168; }
			_iter_end_4391245168:;
		}
	}
	return jule::new_ref<_1037370d0_FieldIns>();
}







std::ostream &operator<<(std::ostream &_Stream, const _1037370d0_StructIns &_Src) {
	_Stream << "StructIns{";
	_Stream << "checked:" << _Src._field_checked << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "has_mut:" << _Src._field_has_mut << ", ";
	_Stream << "references:" << _Src._field_references;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1037649f0_RetType &_Src) {
	_Stream << "RetType{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1037649f0_ParamIns::_method_to_str(void) {
	jule::Str _19517_s = jule::Str("", 0);
	if ((*this)._field_decl->_field_mutable) {
		_19517_s+=jule::Str("mut ", 4);
	}
	if ((*this)._field_decl->_field_reference) {
		_19517_s+=jule::Str("&_:", 3);
	}
	if ((*this)._field_decl->_method_is_self()) {
		if ((*this)._field_decl->_method_is_ref()) {
			_19517_s+=jule::Str("&", 1);
		}
		_19517_s+=jule::Str("self", 4);
		return _19517_s;
	}
	if ((*this)._field_decl->_field_variadic) {
		_19517_s+=jule::Str("...", 3);
	}
	if (jule::real((*this)._field_kind)) {
		_19517_s+=(*this)._field_kind->_method_to_str();
	}
	return _19517_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _1037649f0_ParamIns &_Src) {
	_Stream << "ParamIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1037649f0_FnIns::_method_to_str(void) {
	
	return (*this)._method_get_kind_str(false);
}



inline jule::Bool _1037649f0_FnIns::_method_equals(jule::Ref<_104a21a10_TypeKind> _25021_other) {
	jule::Ref<_1037649f0_FnIns> _25113_f = (_25021_other).alloc->_method_fnc();
	if ((!(jule::real(_25113_f)))) {
		return false;
	}
	if ((*this)._field_decl->_field_statically != _25113_f->_field_decl->_field_statically) {
		return false;
	}
	if ((*this)._field_decl->_field_unsafety != _25113_f->_field_decl->_field_unsafety) {
		return false;
	}
	if ((*this)._field_generics.len() != _25113_f->_field_generics.len()) {
		return false;
	}
	if ((*this)._field_decl->_method_is_void() != _25113_f->_field_decl->_method_is_void()) {
		return false;
	}
	jule::Int _27217_i = 0LL;
	_iter_begin_4391346640:;
	if (!(_27217_i < (*this)._field_generics.len())) { goto _iter_end_4391346640; }
	{
		if ((!((*this)._field_generics[static_cast<jule::Int>(_27217_i)]->_method_equals(_25113_f->_field_generics[static_cast<jule::Int>(_27217_i)])))) {
			return false;
		}
	}
	_iter_next_4391346640:;
	(_27217_i)++;
	goto _iter_begin_4391346640;
	_iter_end_4391346640:;
	jule::Fn<jule::Bool(jule::Ref<_1037649f0_ParamIns>,jule::Ref<_1037649f0_ParamIns>)> _27913_check_params = jule::Fn<jule::Bool(jule::Ref<_1037649f0_ParamIns>,jule::Ref<_1037649f0_ParamIns>)>([=](jule::Ref<_1037649f0_ParamIns> _27931_p1,jule::Ref<_1037649f0_ParamIns> _27946_p2) mutable -> jule::Bool {
		if (_27931_p1->_field_decl->_field_mutable != _27946_p2->_field_decl->_field_mutable) {
			return false;
		}
		if (_27931_p1->_field_decl->_method_is_self()) {
			if ((!(_27946_p2->_field_decl->_method_is_self()))) {
				return false;
			}
			if (_27931_p1->_field_decl->_method_is_ref() != _27946_p2->_field_decl->_method_is_ref()) {
				return false;
			}
			return true;
		}
		if (_27931_p1->_field_decl->_field_reference != _27946_p2->_field_decl->_field_reference) {
			return false;
		}
		if (_27931_p1->_field_decl->_field_variadic != _27946_p2->_field_decl->_field_variadic) {
			return false;
		}
		return _27931_p1->_field_kind->_method_equals(_27946_p2->_field_kind);
	});
	_27217_i=0LL;
	_iter_begin_4391338752:;
	if (!(_27217_i < (*this)._field_params.len())) { goto _iter_end_4391338752; }
	{
		if ((!(_27913_check_params((*this)._field_params[static_cast<jule::Int>(_27217_i)],_25113_f->_field_params[static_cast<jule::Int>(_27217_i)])))) {
			return false;
		}
	}
	_iter_next_4391338752:;
	(_27217_i)++;
	goto _iter_begin_4391338752;
	_iter_end_4391338752:;
	if ((!((*this)._field_decl->_method_is_void()))) {
		if ((!((*this)._field_result->_method_equals(_25113_f->_field_result)))) {
			return false;
		}
	}
	return true;
}



inline jule::Bool _1037649f0_FnIns::_method_is_builtin(void) {
	return (*this)._field_caller != nullptr;
}



inline jule::Bool _1037649f0_FnIns::_method_is_anon(void) {
	return (*this)._field_anon || (jule::real((*this)._field_decl) && (*this)._field_decl->_method_is_anon());
}



inline jule::Str _1037649f0_FnIns::_method_get_kind_str(jule::Bool _33431_ident) {
	jule::Str _33517_s = jule::Str("", 0);
	if ((*this)._field_decl->_field_statically) {
		_33517_s+=jule::Str("static ", 7);
	}
	if ((*this)._field_decl->_field_unsafety) {
		_33517_s+=jule::Str("unsafe ", 7);
	}
	_33517_s+=jule::Str("fn", 2);
	if (_33431_ident && jule::real((*this)._field_decl)) {
		_33517_s+=jule::Str(" ", 1) + (*this)._field_decl->_field_ident;
	}
	if ((*this)._field_generics.len() > 0LL) {
		_33517_s+=jule::Str("[", 1);
		{
			auto __julec_range_expr = (*this)._field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _1037649f0_i = 0;
				jule::Ref<_104a21a10_TypeKind> _1037649f0_t = *__julec_range_begin;
				_iter_begin_4391386800:;
				{
					_33517_s+=_1037649f0_t->_method_to_str();
					if ((_1037649f0_i + 1LL) < (*this)._field_generics.len()) {
						_33517_s+=jule::Str(",", 1);
					}
				}
				_iter_next_4391386800:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_1037649f0_i; _1037649f0_t = *__julec_range_begin; goto _iter_begin_4391386800; }
				_iter_end_4391386800:;
			}
		}
		_33517_s+=jule::Str("]", 1);
	} else if ((*this)._field_decl->_field_generics.len() > 0LL) {
		_33517_s+=jule::Str("[", 1);
		{
			auto __julec_range_expr = (*this)._field_decl->_field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _1037649f0_i = 0;
				jule::Ref<_1487f5920_GenericDecl> _1037649f0_g = *__julec_range_begin;
				_iter_begin_4391386672:;
				{
					_33517_s+=_1037649f0_g->_field_ident;
					if ((_1037649f0_i + 1LL) < (*this)._field_decl->_field_generics.len()) {
						_33517_s+=jule::Str(",", 1);
					}
				}
				_iter_next_4391386672:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_1037649f0_i; _1037649f0_g = *__julec_range_begin; goto _iter_begin_4391386672; }
				_iter_end_4391386672:;
			}
		}
		_33517_s+=jule::Str("]", 1);
	}
	_33517_s+=jule::Str("(", 1);
	jule::I64 _37213_n = (*this)._field_params.len();
	if (_37213_n > 0LL) {
		{
			auto __julec_range_expr = (*this)._field_params;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1037649f0_ParamIns> _1037649f0_p = *__julec_range_begin;
				_iter_begin_4391399680:;
				{
					_33517_s+=_1037649f0_p->_method_to_str();
					_33517_s+=jule::Str(",", 1);
				}
				_iter_next_4391399680:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1037649f0_p = *__julec_range_begin; goto _iter_begin_4391399680; }
				_iter_end_4391399680:;
			}
		}
		_33517_s=_33517_s.slice(0LL,static_cast<jule::Int>(_33517_s.len() - 1LL));
	}
	_33517_s+=jule::Str(")", 1);
	if ((!((*this)._field_decl->_method_is_void()))) {
		_33517_s+=jule::Str(":", 1);
		_33517_s+=(*this)._field_result->_method_to_str();
	}
	return _33517_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _1037649f0_FnIns &_Src) {
	_Stream << "FnIns{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "refers:" << _Src._field_refers << ", ";
	_Stream << "caller:" << _Src._field_caller << ", ";
	_Stream << "reloaded:" << _Src._field_reloaded << ", ";
	_Stream << "anon:" << _Src._field_anon;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_1036da950_ReferenceStack> _1036da950_ReferenceStack::_static_method_new(void) {
	return jule::new_struct<_1036da950_ReferenceStack>(new( std::nothrow ) _1036da950_ReferenceStack());
}



inline jule::Int _1036da950_ReferenceStack::_method_len(void) {
	return static_cast<jule::I64>((*this)._field_buffer.len());
}



inline jule::Any _1036da950_ReferenceStack::_method_at(jule::Int _5825_i) {
	return (*this)._field_buffer[static_cast<jule::Int>(_5825_i)];
}



inline void _1036da950_ReferenceStack::_method_push(jule::Any _6331_ref) {
	(*this)._field_buffer=jule::append((*this)._field_buffer,jule::Slice<jule::Any>({_6331_ref}));
}



inline jule::Bool _1036da950_ReferenceStack::_method_exist_0(jule::Ref<_104598e40_Var> _6827_t) {
	{
		auto __julec_range_expr = (*this)._field_buffer;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1036da950_ref = *__julec_range_begin;
			_iter_begin_4393078464:;
			{
				{
					auto _match_expr{ _1036da950_ref };
					if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4393080208; }
					_case_begin_4393080208:;
					{
						if ((_1036da950_ref.operator jule::Ref<_104598e40_Var>()).alloc == (_6827_t).alloc) {
							return true;
						}
					}
					goto _match_end_4393079744;
					_case_end_4393080208:;
					_match_end_4393079744:;
				}
			}
			_iter_next_4393078464:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1036da950_ref = *__julec_range_begin; goto _iter_begin_4393078464; }
			_iter_end_4393078464:;
		}
	}
	return false;
}

inline jule::Bool _1036da950_ReferenceStack::_method_exist_1(jule::Ref<_1037649f0_FnIns> _6827_t) {
	{
		auto __julec_range_expr = (*this)._field_buffer;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1036da950_ref = *__julec_range_begin;
			_iter_begin_4393090144:;
			{
				{
					auto _match_expr{ _1036da950_ref };
					if (!(_match_expr.type_is<jule::Ref<_1037649f0_FnIns>>())) { goto _case_end_4393091888; }
					_case_begin_4393091888:;
					{
						if ((_1036da950_ref.operator jule::Ref<_1037649f0_FnIns>()).alloc == (_6827_t).alloc) {
							return true;
						}
					}
					goto _match_end_4393091424;
					_case_end_4393091888:;
					_match_end_4393091424:;
				}
			}
			_iter_next_4393090144:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1036da950_ref = *__julec_range_begin; goto _iter_begin_4393090144; }
			_iter_end_4393090144:;
		}
	}
	return false;
}

inline jule::Bool _1036da950_ReferenceStack::_method_exist_2(jule::Ref<_1037370d0_StructIns> _6827_t) {
	{
		auto __julec_range_expr = (*this)._field_buffer;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1036da950_ref = *__julec_range_begin;
			_iter_begin_4393130160:;
			{
				{
					auto _match_expr{ _1036da950_ref };
					if (!(_match_expr.type_is<jule::Ref<_1037370d0_StructIns>>())) { goto _case_end_4393131904; }
					_case_begin_4393131904:;
					{
						if ((_1036da950_ref.operator jule::Ref<_1037370d0_StructIns>()).alloc == (_6827_t).alloc) {
							return true;
						}
					}
					goto _match_end_4393131440;
					_case_end_4393131904:;
					_match_end_4393131440:;
				}
			}
			_iter_next_4393130160:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1036da950_ref = *__julec_range_begin; goto _iter_begin_4393130160; }
			_iter_end_4393130160:;
		}
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1036da950_ReferenceStack &_Src) {
	_Stream << "ReferenceStack{";
	_Stream << "buffer:" << _Src._field_buffer;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_1036da950_SymbolBuilder> _1036da950_SymbolBuilder::_method_get_root(void) {
	jule::Ref<_1036da950_SymbolBuilder> _30517_root = this->self;
	_iter_begin_4386684448:;
	if (!(jule::real(_30517_root->_field_owner))) { goto _iter_end_4386684448; }
	{
		_30517_root=_30517_root->_field_owner;
	}
	_iter_next_4386684448:;
	goto _iter_begin_4386684448;
	_iter_end_4386684448:;
	return _30517_root;
}



inline void _1036da950_SymbolBuilder::_method_push_err(_108e15ff0_Token _31227_token,jule::Str _31241_fmt,jule::Slice<jule::Any> _31254_args) {
	(*this)._field_errors=jule::append((*this)._field_errors,jule::Slice<_1486379e0_Log>({_119177e90_compiler_err(_31227_token,true,_31241_fmt,_31254_args)}));
}



inline void _1036da950_SymbolBuilder::_method_push_err_text(_108e15ff0_Token _31632_token,jule::Str _31646_fmt,jule::Slice<jule::Any> _31659_args) {
	(*this)._field_errors=jule::append((*this)._field_errors,jule::Slice<_1486379e0_Log>({_119177e90_compiler_err(_31632_token,false,_31646_fmt,_31659_args)}));
}



inline void _1036da950_SymbolBuilder::_method_push_suggestion(jule::Str _32134_fmt,jule::Slice<jule::Any> _32147_args) {
	{
		_119177e90_push_suggestion((&((*this)._field_errors[static_cast<jule::Int>((*this)._field_errors.len() - 1LL)])),_32134_fmt,_32147_args);
	}
}



inline jule::Bool _1036da950_SymbolBuilder::_method_check_cpp_use_decl_path(jule::Ref<_1487f5920_UseDecl> _32542_decl) {
	jule::Bool _32560_ok = jule::Bool();
	if (_148682040_is_std_header_path(_32542_decl->_field_link_path)) {
		_32560_ok = true;
		return _32560_ok;
	}
	jule::Str _33013_ext = _149060fe0_ext(_32542_decl->_field_link_path);
	if ((!(_148682040_is_valid_header_ext(_33013_ext))) && (!(_148682040_is_valid_cpp_ext(_33013_ext)))) {
		(*this)._method_push_err(_32542_decl->_field_token,jule::Str("invalid C++ extension: @", 24),jule::Slice<jule::Any>({jule::Any(_33013_ext)}));
		_32560_ok = false;
		return _32560_ok;
	}
	jule::Ref<_1487ca390_Status> _33614_info;
	jule::Int _33620_err;
	std::tie(_33614_info,_33620_err) = _148796140_stat(_32542_decl->_field_link_path);
	if ((_33620_err != 0LLU) || _33614_info->_method_is_dir()) {
		(*this)._method_push_err(_32542_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_32542_decl->_field_link_path)}));
		_32560_ok = false;
		return _32560_ok;
	}
	_32560_ok = true;
	return _32560_ok;
}



inline jule::Ref<_119162660_ImportInfo> _1036da950_SymbolBuilder::_method_build_cpp_header_import(jule::Ref<_1487f5920_UseDecl> _34646_decl) {
	jule::Str _34717_path = _34646_decl->_field_link_path;
	if ((!(_148682040_is_std_header_path(_34646_decl->_field_link_path)))) {
		jule::Bool _35021_ok = (*this)._method_check_cpp_use_decl_path(_34646_decl);
		if ((!(_35021_ok))) {
			return jule::new_ref<_119162660_ImportInfo>();
		}
		std::tie(_34717_path,_35021_ok) = _149060fe0_abs(_34646_decl->_field_link_path);
		if ((!(_35021_ok))) {
			(*this)._method_push_err(_34646_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_34646_decl->_field_link_path)}));
		}
	}
	return jule::new_struct<_119162660_ImportInfo>(new( std::nothrow ) _119162660_ImportInfo(_34646_decl->_field_token,_34717_path,_34646_decl->_field_link_path,jule::Str("", 0),jule::Str(),jule::Bool(),true,false,jule::Bool(),jule::Slice<_108e15ff0_Token>(),jule::new_ref<_119162660_Package>()));
}



inline jule::Ref<_119162660_ImportInfo> _1036da950_SymbolBuilder::_method_build_std_import(jule::Ref<_1487f5920_UseDecl> _37339_decl) {
	jule::Str _37417_path = _37339_decl->_field_link_path.slice(static_cast<jule::Int>(jule::Str("std::", 5).len()));
	_37417_path=_37417_path.replace(jule::Str("::", 2),static_cast<jule::Str>(47LL),-1LL);
	_37417_path=_149060fe0_join(jule::Slice<jule::Str>({_149048970_PATH_STDLIB,_37417_path}));
	jule::Bool _37720_ok;
	std::tie(_37417_path,_37720_ok) = _149060fe0_abs(_37417_path);
	if ((!(_37720_ok))) {
		(*this)._method_push_err(_37339_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_37339_decl->_field_link_path)}));
		return jule::new_ref<_119162660_ImportInfo>();
	}
	jule::Ref<_1487ca390_Status> _38314_info;
	jule::Int _38320_err;
	std::tie(_38314_info,_38320_err) = _148796140_stat(_37417_path);
	if ((_38320_err != 0LLU) || (!(_38314_info->_method_is_dir()))) {
		(*this)._method_push_err(_37339_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_37339_decl->_field_link_path)}));
		return jule::new_ref<_119162660_ImportInfo>();
	}
	jule::Str _39113_ident = _37339_decl->_field_link_path.slice(static_cast<jule::Int>(_37339_decl->_field_link_path.rfind(jule::Str("::", 2)) + 1LL));
	return jule::new_struct<_119162660_ImportInfo>(new( std::nothrow ) _119162660_ImportInfo(_37339_decl->_field_token,_37417_path,_37339_decl->_field_link_path,_39113_ident,_37339_decl->_field_alias,jule::Bool(),false,true,_37339_decl->_field_full,jule::Slice<_108e15ff0_Token>(),jule::new_struct<_119162660_Package>(new( std::nothrow ) _119162660_Package(nullptr))));
}



inline jule::Ref<_119162660_ImportInfo> _1036da950_SymbolBuilder::_method_build_ident_import(jule::Ref<_1487f5920_UseDecl> _40842_decl) {
	jule::Str _40917_path = _40842_decl->_field_link_path;
	_40917_path=_40917_path.replace(jule::Str("::", 2),static_cast<jule::Str>(47LL),-1LL);
	_40917_path=_149060fe0_join(jule::Slice<jule::Str>({this->self->_method_get_root()->_field_ast->_field_file->_method_dir(),_40917_path}));
	jule::Bool _41320_ok;
	std::tie(_40917_path,_41320_ok) = _149060fe0_abs(_40917_path);
	if ((!(_41320_ok))) {
		this->self->_method_push_err(_40842_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_40842_decl->_field_link_path)}));
		return jule::new_ref<_119162660_ImportInfo>();
	}
	jule::Ref<_1487ca390_Status> _41914_info;
	jule::Int _41920_err;
	std::tie(_41914_info,_41920_err) = _148796140_stat(_40917_path);
	if ((_41920_err != 0LLU) || (!(_41914_info->_method_is_dir()))) {
		this->self->_method_push_err(_40842_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_40842_decl->_field_link_path)}));
		return jule::new_ref<_119162660_ImportInfo>();
	}
	jule::Str _42713_ident = _40842_decl->_field_link_path.slice(static_cast<jule::Int>(_40842_decl->_field_link_path.rfind(jule::Str("::", 2)) + 1LL));
	return jule::new_struct<_119162660_ImportInfo>(new( std::nothrow ) _119162660_ImportInfo(_40842_decl->_field_token,_40917_path,_40842_decl->_field_link_path,_42713_ident,_40842_decl->_field_alias,jule::Bool(),false,false,_40842_decl->_field_full,jule::Slice<_108e15ff0_Token>(),jule::new_struct<_119162660_Package>(new( std::nothrow ) _119162660_Package(nullptr))));
}



inline jule::Ref<_119162660_ImportInfo> _1036da950_SymbolBuilder::_method_build_import(jule::Ref<_1487f5920_UseDecl> _44436_decl) {
	{
		if (!((_44436_decl->_field_cpp_linked))) { goto _case_end_4386820272; }
		_case_begin_4386820272:;
		{
			return this->self->_method_build_cpp_header_import(_44436_decl);
		}
		goto _match_end_4386818384;
		_case_end_4386820272:;
		if (!((_44436_decl->_field_std))) { goto _case_end_4386819936; }
		_case_begin_4386819936:;
		{
			return this->self->_method_build_std_import(_44436_decl);
		}
		goto _match_end_4386818384;
		_case_end_4386819936:;
		_case_begin_4386818528:;
		{
			return this->self->_method_build_ident_import(_44436_decl);
		}
		goto _match_end_4386818384;
		_case_end_4386818528:;
		_match_end_4386818384:;
	}
}



inline jule::Bool _1036da950_SymbolBuilder::_method_check_duplicate_use_decl(jule::Ref<_119162660_ImportInfo> _45243_pkg) {
	jule::Bool _45263_ok = jule::Bool();
	jule::Ref<_119162660_ImportInfo> _45413_lpkg = (*this)._field_table->_method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)>([=](jule::Ref<_119162660_ImportInfo> _45449_spkg) mutable -> jule::Bool {
		return _45243_pkg->_field_path == _45449_spkg->_field_path;
	}));
	if ((!(jule::real(_45413_lpkg)))) {
		_45263_ok = true;
		return _45263_ok;
	}
	(*this)._method_push_err(_45243_pkg->_field_token,jule::Str("duplicate use declaration: @", 28),jule::Slice<jule::Any>({jule::Any(_45243_pkg->_field_link_path)}));
	(*this)._method_push_suggestion(jule::Str("remove this use declaration, already used, it is safe", 53),jule::Slice<jule::Any>({}));
	_45263_ok = false;
	return _45263_ok;
}



inline void _1036da950_SymbolBuilder::_method_impl_import_selections(jule::Ref<_119162660_ImportInfo> _46645_imp,jule::Ref<_1487f5920_UseDecl> _46667_decl) {
	{
		auto __julec_range_expr = _46667_decl->_field_selected;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_108e15ff0_Token _1036da950_ident = *__julec_range_begin;
			_iter_begin_4386840992:;
			{
				if (_46645_imp->_method_exist_ident(_1036da950_ident._field_kind)) {
					(*this)._method_push_err(_1036da950_ident,jule::Str("duplicated identifier selection: @", 34),jule::Slice<jule::Any>({jule::Any(_1036da950_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("remove this use selection, already selected, it is safe", 55),jule::Slice<jule::Any>({}));
					goto _iter_next_4386840992;
				}
				_46645_imp->_field_selected=jule::append(_46645_imp->_field_selected,jule::Slice<_108e15ff0_Token>({_1036da950_ident}));
			}
			_iter_next_4386840992:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1036da950_ident = *__julec_range_begin; goto _iter_begin_4386840992; }
			_iter_end_4386840992:;
		}
	}
}



inline jule::Str _1036da950_SymbolBuilder::_method_get_as_link_path(jule::Str _47840_path) {
	if (_47840_path.has_prefix(_149048970_PATH_STDLIB)) {
		_47840_path=_47840_path.slice(static_cast<jule::Int>(_149048970_PATH_STDLIB.len()));
		return jule::Str("std", 3) + _47840_path.replace(static_cast<jule::Str>(47LL),jule::Str("::", 2),-1LL);
	}
	jule::Str _48414_root;
	std::tie(_48414_root,std::ignore) = _149060fe0_abs(this->self->_method_get_root()->_field_ast->_field_file->_method_dir());
	_47840_path=_47840_path.slice(static_cast<jule::Int>(_48414_root.len()));
	if (_47840_path[0LL] == 47LL) {
		_47840_path=_47840_path.slice(1LL);
	}
	return _47840_path.replace(static_cast<jule::Str>(47LL),jule::Str("::", 2),-1LL);
}



inline void _1036da950_SymbolBuilder::_method_push_cycle_error(jule::Ref<_1036da950_SymbolBuilder> _49236_sb,jule::Str _49256_path,jule::Str& _49272_message) {
	
	jule::Str _49513_refers_to = _1486379e0_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(this->self->_method_get_as_link_path(_49236_sb->_field_table->_field_file->_method_dir())),jule::Any(this->self->_method_get_as_link_path(_49256_path))}));
	_49272_message=((_1036da950_str_repeat(jule::Str(" ", 1),4LL) + _49513_refers_to) + jule::Str("\n", 1)) + _49272_message;
}



inline void _1036da950_SymbolBuilder::_method_push_cross_cycle_error(jule::Ref<_1036da950_SymbolBuilder> _50242_target,jule::Ref<_119162660_ImportInfo> _50266_imp,_108e15ff0_Token _50284_error_token) {
	jule::Str _50317_message = jule::Str("", 0);
	this->self->_method_push_cycle_error(this->self,_50266_imp->_field_path,_50317_message);
	jule::Ref<_1036da950_SymbolBuilder> _50717_owner = this->self->_field_owner;
	jule::Ref<_1036da950_SymbolBuilder> _50817_old = this->self;
	_iter_begin_4386878448:;
	if (!(jule::real(_50717_owner->_field_owner))) { goto _iter_end_4386878448; }
	{
		this->self->_method_push_cycle_error(_50817_old->_field_owner,_50817_old->_field_table->_field_file->_method_dir(),_50317_message);
		if ((_50717_owner->_field_owner).alloc == (_50242_target).alloc) {
			this->self->_method_push_cycle_error(_50242_target,_50717_owner->_field_table->_field_file->_method_dir(),_50317_message);
			goto _iter_end_4386878448;
		}
		_50817_old=_50717_owner;
		_50717_owner=_50717_owner->_field_owner;
	}
	_iter_next_4386878448:;
	goto _iter_begin_4386878448;
	_iter_end_4386878448:;
	this->self->_method_push_err(_50284_error_token,jule::Str("illegal cross cycle in use declarations;\n@", 42),jule::Slice<jule::Any>({jule::Any(_50317_message)}));
}



inline jule::Bool _1036da950_SymbolBuilder::_method_check_import_cycles(jule::Ref<_119162660_ImportInfo> _52539_imp,jule::Ref<_1487f5920_UseDecl> _52557_decl) {
	if (_52539_imp->_field_path == this->self->_field_table->_field_file->_method_dir()) {
		this->self->_method_push_err(_52557_decl->_field_token,jule::Str("illegal cycle in use declaration, package @ refers to itself", 60),jule::Slice<jule::Any>({jule::Any(this->self->_method_get_as_link_path(_52539_imp->_field_path))}));
		return false;
	}
	if ((!(jule::real(this->self->_field_owner)))) {
		return true;
	}
	if (this->self->_field_owner->_field_table->_field_file->_method_dir() == _52539_imp->_field_path) {
		this->self->_method_push_cross_cycle_error(this->self->_field_owner,_52539_imp,_52557_decl->_field_token);
		return false;
	}
	jule::Ref<_1036da950_SymbolBuilder> _54017_owner = this->self->_field_owner;
	_julec_label_iter:;
	if (_54017_owner->_field_table->_field_file->_method_dir() == _52539_imp->_field_path) {
		this->self->_method_push_cross_cycle_error(_54017_owner,_52539_imp,_52557_decl->_field_token);
		return false;
	}
	if (jule::real(_54017_owner->_field_owner)) {
		_54017_owner=_54017_owner->_field_owner;
		goto _julec_label_iter;
	}
	return true;
}



inline jule::Bool _1036da950_SymbolBuilder::_method_import_package(jule::Ref<_119162660_ImportInfo>& _55539_imp,jule::Ref<_1487f5920_UseDecl> _55561_decl) {
	jule::Bool _55579_ok = jule::Bool();
	if (_55539_imp->_field_cpp_linked) {
		_55579_ok = true;
		return _55579_ok;
	}
	jule::Ref<_119162660_ImportInfo> _56017_port = this->self->_field_importer.get()._method_get_import(_55539_imp->_field_path);
	if (jule::real(_56017_port)) {
		_55539_imp->_field_package=_56017_port->_field_package;
		_55539_imp->_field_duplicate=true;
	} else {
		if ((!(this->self->_method_check_import_cycles(_55539_imp,_55561_decl)))) {
			_55579_ok = false;
			return _55579_ok;
		}
		jule::Slice<jule::Ref<_1487f02c0_Ast>> _56922_asts;
		jule::Slice<_1486379e0_Log> _56928_errors;
		std::tie(_56922_asts,_56928_errors) = this->self->_field_importer.get()._method_import_package(_55539_imp->_field_path);
		if (_56928_errors.len() > 0LL) {
			this->self->_field_errors=jule::append(this->self->_field_errors,_56928_errors);
			_55579_ok = false;
			return _55579_ok;
		}
		{
			auto __julec_range_expr = _56922_asts;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1487f02c0_Ast> _1036da950_ast = *__julec_range_begin;
				_iter_begin_4386924848:;
				{
					jule::Ref<_1191dcd40_SymbolTable> _57626_table;
					jule::Slice<_1486379e0_Log> _57633_errors;
					std::tie(_57626_table,_57633_errors) = _104aa02c0_build_symbols(_1036da950_ast,this->self->_field_importer,this->self);
					if (_57633_errors.len() > 0LL) {
						this->self->_field_errors=jule::append(this->self->_field_errors,_57633_errors);
						this->self->_method_push_err_text(_55539_imp->_field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any(_55539_imp->_field_link_path)}));
						_55579_ok = false;
						return _55579_ok;
					}
					_55539_imp->_field_package->_field_files=jule::append(_55539_imp->_field_package->_field_files,jule::Slice<jule::Ref<_1191dcd40_SymbolTable>>({_57626_table}));
				}
				_iter_next_4386924848:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1036da950_ast = *__julec_range_begin; goto _iter_begin_4386924848; }
				_iter_end_4386924848:;
			}
		}
	}
	this->self->_method_impl_import_selections(_55539_imp,_55561_decl);
	_55579_ok = true;
	return _55579_ok;
}



inline jule::Ref<_119162660_ImportInfo> _1036da950_SymbolBuilder::_method_import_use_decl(jule::Ref<_1487f5920_UseDecl> _59439_decl) {
	jule::Ref<_119162660_ImportInfo> _59517_imp = this->self->_method_build_import(_59439_decl);
	if ((!(jule::real(_59517_imp)))) {
		return jule::new_ref<_119162660_ImportInfo>();
	}
	jule::Bool _60117_ok = this->self->_method_check_duplicate_use_decl(_59517_imp);
	if ((!(_60117_ok))) {
		return jule::new_ref<_119162660_ImportInfo>();
	}
	if ((_59517_imp->_field_alias.len() != 0LL) && (_59439_decl->_field_selected.len() > 0LL)) {
		this->self->_method_push_err(_59439_decl->_field_token,jule::Str("use aliases cannot useable for selected package defines", 55),jule::Slice<jule::Any>({}));
	}
	_60117_ok=this->self->_method_import_package(_59517_imp,_59439_decl);
	this->self->_field_table->_field_imports=jule::append(this->self->_field_table->_field_imports,jule::Slice<jule::Ref<_119162660_ImportInfo>>({_59517_imp}));
	if (_60117_ok) {
		this->self->_field_importer.get()._method_imported(_59517_imp);
		return _59517_imp;
	}
	return jule::new_ref<_119162660_ImportInfo>();
}



inline void _1036da950_SymbolBuilder::_method_import_use_decls(void) {
	{
		auto __julec_range_expr = this->self->_field_ast->_field_use_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1487f5920_UseDecl> _1036da950_decl = *__julec_range_begin;
			_iter_begin_4386951792:;
			{
				this->self->_method_import_use_decl(_1036da950_decl);
				if (this->self->_field_errors.len() > 0LL) {
					goto _iter_end_4386951792;
				}
			}
			_iter_next_4386951792:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1036da950_decl = *__julec_range_begin; goto _iter_begin_4386951792; }
			_iter_end_4386951792:;
		}
	}
}



inline void _1036da950_SymbolBuilder::_method_append_decl(_1487f5920_Node _63034_decl) {
	{
		auto _match_expr{ _63034_decl._field_data };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_TypeAliasDecl>>())) { goto _case_end_4386959664; }
		_case_begin_4386959664:;
		{
			jule::Ref<_104a21a10_TypeAlias> _63321_ta = _1036da950_build_type_alias(_63034_decl._field_data.operator jule::Ref<_1487f5920_TypeAliasDecl>());
			(*this)._field_table->_field_type_aliases=jule::append((*this)._field_table->_field_type_aliases,jule::Slice<jule::Ref<_104a21a10_TypeAlias>>({_63321_ta}));
		}
		goto _match_end_4386956544;
		_case_end_4386959664:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_StructDecl>>())) { goto _case_end_4386957520; }
		_case_begin_4386957520:;
		{
			jule::Ref<_1037370d0_Struct> _63721_srct = _1036da950_build_struct(_63034_decl._field_data.operator jule::Ref<_1487f5920_StructDecl>());
			(*this)._field_table->_field_structs=jule::append((*this)._field_table->_field_structs,jule::Slice<jule::Ref<_1037370d0_Struct>>({_63721_srct}));
		}
		goto _match_end_4386956544;
		_case_end_4386957520:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_FnDecl>>())) { goto _case_end_4386957632; }
		_case_begin_4386957632:;
		{
			jule::Ref<_1037649f0_Fn> _64121_f = _1036da950_build_fn(_63034_decl._field_data.operator jule::Ref<_1487f5920_FnDecl>());
			(*this)._field_table->_field_funcs=jule::append((*this)._field_table->_field_funcs,jule::Slice<jule::Ref<_1037649f0_Fn>>({_64121_f}));
		}
		goto _match_end_4386956544;
		_case_end_4386957632:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_TraitDecl>>())) { goto _case_end_4386957744; }
		_case_begin_4386957744:;
		{
			jule::Ref<_1036e5da0_Trait> _64521_t = _1036da950_build_trait(_63034_decl._field_data.operator jule::Ref<_1487f5920_TraitDecl>());
			(*this)._field_table->_field_traits=jule::append((*this)._field_table->_field_traits,jule::Slice<jule::Ref<_1036e5da0_Trait>>({_64521_t}));
		}
		goto _match_end_4386956544;
		_case_end_4386957744:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_VarDecl>>())) { goto _case_end_4386959840; }
		_case_begin_4386959840:;
		{
			jule::Ref<_104598e40_Var> _64921_v = _1036da950_build_var(_63034_decl._field_data.operator jule::Ref<_1487f5920_VarDecl>());
			(*this)._field_table->_field_vars=jule::append((*this)._field_table->_field_vars,jule::Slice<jule::Ref<_104598e40_Var>>({_64921_v}));
		}
		goto _match_end_4386956544;
		_case_end_4386959840:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_EnumDecl>>())) { goto _case_end_4386959952; }
		_case_begin_4386959952:;
		{
			jule::Ref<_1036dad50_Enum> _65321_e = _1036da950_build_enum(_63034_decl._field_data.operator jule::Ref<_1487f5920_EnumDecl>());
			(*this)._field_table->_field_enums=jule::append((*this)._field_table->_field_enums,jule::Slice<jule::Ref<_1036dad50_Enum>>({_65321_e}));
		}
		goto _match_end_4386956544;
		_case_end_4386959952:;
		_case_begin_4386957216:;
		{
			(*this)._method_push_err(_63034_decl._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4386956544;
		_case_end_4386957216:;
		_match_end_4386956544:;
	}
}



inline void _1036da950_SymbolBuilder::_method_append_decls(void) {
	{
		auto __julec_range_expr = (*this)._field_ast->_field_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_1487f5920_Node _1036da950_decl = *__julec_range_begin;
			_iter_begin_4386982288:;
			{
				(*this)._method_append_decl(_1036da950_decl);
			}
			_iter_next_4386982288:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1036da950_decl = *__julec_range_begin; goto _iter_begin_4386982288; }
			_iter_end_4386982288:;
		}
	}
}



inline void _1036da950_SymbolBuilder::_method_append_impls(void) {
	(*this)._field_table->_field_impls=jule::Slice<jule::Ref<_10417abf0_Impl>>::alloc(0LL,static_cast<jule::Int>(static_cast<jule::I64>((*this)._field_ast->_field_impls.len())));
	{
		auto __julec_range_expr = (*this)._field_ast->_field_impls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1487f5920_Impl> _1036da950_decl = *__julec_range_begin;
			_iter_begin_4386988528:;
			{
				(*this)._field_table->_field_impls=jule::append((*this)._field_table->_field_impls,jule::Slice<jule::Ref<_10417abf0_Impl>>({_1036da950_build_impl(_1036da950_decl)}));
			}
			_iter_next_4386988528:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1036da950_decl = *__julec_range_begin; goto _iter_begin_4386988528; }
			_iter_end_4386988528:;
		}
	}
}



inline void _1036da950_SymbolBuilder::_method_push_directive_pass(jule::Ref<_1487f5920_Directive> _67442_d) {
	_1036da950_Pass _67517_pass = _1036da950_Pass(_67442_d->_field_token,jule::Str());
	{
		auto __julec_range_expr = _67442_d->_field_args;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1036da950_arg = *__julec_range_begin;
			_iter_begin_4386996960:;
			{
				if (_1036da950_arg != jule::Str("", 0)) {
					_67517_pass._field_text+=_1036da950_arg + jule::Str(" ", 1);
				}
			}
			_iter_next_4386996960:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1036da950_arg = *__julec_range_begin; goto _iter_begin_4386996960; }
			_iter_end_4386996960:;
		}
	}
	_67517_pass._field_text=_67517_pass._field_text.trim(jule::Str(" \n\r\t\v", 5));
	(*this)._field_table->_field_passes=jule::append((*this)._field_table->_field_passes,jule::Slice<_1036da950_Pass>({_67517_pass}));
}



inline void _1036da950_SymbolBuilder::_method_append_top_directives(void) {
	{
		auto __julec_range_expr = (*this)._field_ast->_field_top_directives;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1487f5920_Directive> _1036da950_d = *__julec_range_begin;
			_iter_begin_4387002256:;
			{
				{
					auto _match_expr{ _1036da950_d->_field_tag };
					if (!((jule::Str("pass", 4)) == _match_expr)) { goto _case_end_4387006048; }
					_case_begin_4387006048:;
					{
						(*this)._method_push_directive_pass(_1036da950_d);
					}
					goto _match_end_4387005440;
					_case_end_4387006048:;
					_match_end_4387005440:;
				}
			}
			_iter_next_4387002256:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1036da950_d = *__julec_range_begin; goto _iter_begin_4387002256; }
			_iter_end_4387002256:;
		}
	}
}



inline void _1036da950_SymbolBuilder::_method_build(void) {
	this->self->_field_table=jule::new_struct<_1191dcd40_SymbolTable>(new( std::nothrow ) _1191dcd40_SymbolTable(this->self->_field_ast->_field_file,jule::Slice<_1036da950_Pass>(),jule::Slice<jule::Ref<_119162660_ImportInfo>>(),jule::Slice<jule::Ref<_104598e40_Var>>(),jule::Slice<jule::Ref<_104a21a10_TypeAlias>>(),jule::Slice<jule::Ref<_1037370d0_Struct>>(),jule::Slice<jule::Ref<_1037649f0_Fn>>(),jule::Slice<jule::Ref<_1036e5da0_Trait>>(),jule::Slice<jule::Ref<_1036dad50_Enum>>(),jule::Slice<jule::Ref<_10417abf0_Impl>>()));
	this->self->_method_append_top_directives();
	this->self->_method_import_use_decls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_append_decls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_append_impls();
}







std::ostream &operator<<(std::ostream &_Stream, const _1036da950_SymbolBuilder &_Src) {
	_Stream << "SymbolBuilder{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "importer:" << _Src._field_importer << ", ";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "table:" << _Src._field_table;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_Scope &_Src) {
	_Stream << "Scope{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_If &_Src) {
	_Stream << "If{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_Else &_Src) {
	_Stream << "Else{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "elifs:" << _Src._field_elifs << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_InfIter &_Src) {
	_Stream << "InfIter{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _104180810_WhileIter::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_WhileIter &_Src) {
	_Stream << "WhileIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_RangeIter &_Src) {
	_Stream << "RangeIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "it:" << _Src._field_it;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "mtch:" << _Src._field_mtch;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_Label &_Src) {
	_Stream << "Label{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_Postfix &_Src) {
	_Stream << "Postfix{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_Assign &_Src) {
	_Stream << "Assign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_MultiAssign &_Src) {
	_Stream << "MultiAssign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_Match &_Src) {
	_Stream << "Match{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _104180810_Case::_method_is_default(void) {
	return (*this)._field_exprs == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_Case &_Src) {
	_Stream << "Case{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "next:" << _Src._field_next;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "dest_case:" << _Src._field_dest_case;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_Recover &_Src) {
	_Stream << "Recover{";
	_Stream << "handler:" << _Src._field_handler << ", ";
	_Stream << "handler_expr:" << _Src._field_handler_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "scope_owner:" << _Src._field_scope_owner;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_ScopeGoto &_Src) {
	_Stream << "ScopeGoto{";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_119162660_ImportInfo> _104180810_ScopeChecker::_method_find_package(jule::Str _37735_ident) {
	return (*this)._field_s->_method_find_package(_37735_ident);
}



inline jule::Ref<_119162660_ImportInfo> _104180810_ScopeChecker::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)> _38737_selector) {
	return (*this)._field_s->_method_select_package(_38737_selector);
}



inline jule::Ref<_104598e40_Var> _104180810_ScopeChecker::_method_find_var(jule::Str _39831_ident,jule::Bool _39843_cpp_linked) {
	
	jule::Ref<_104598e40_Var> _40117_v = (*this)._field_table->_method___find_var(_39831_ident,_39843_cpp_linked,true);
	if (jule::real(_40117_v)) {
		return _40117_v;
	}
	jule::Ref<_104180810_ScopeChecker> _40617_parent = (*this)._field_parent;
	_iter_begin_4387070416:;
	if (!(jule::real(_40617_parent))) { goto _iter_end_4387070416; }
	{
		jule::Ref<_104598e40_Var> _40821_v = _40617_parent->_field_table->_method___find_var(_39831_ident,_39843_cpp_linked,true);
		if (jule::real(_40821_v)) {
			return _40821_v;
		}
		_40617_parent=_40617_parent->_field_parent;
	}
	_iter_next_4387070416:;
	goto _iter_begin_4387070416;
	_iter_end_4387070416:;
	return (*this)._field_s->_method_find_var(_39831_ident,_39843_cpp_linked);
}



inline jule::Ref<_104a21a10_TypeAlias> _104180810_ScopeChecker::_method_find_type_alias(jule::Str _42538_ident,jule::Bool _42550_cpp_linked) {
	
	jule::Ref<_104a21a10_TypeAlias> _42817_ta = (*this)._field_table->_method___find_type_alias(_42538_ident,_42550_cpp_linked,true);
	if (jule::real(_42817_ta)) {
		return _42817_ta;
	}
	jule::Ref<_104180810_ScopeChecker> _43317_parent = (*this)._field_parent;
	_iter_begin_4387085232:;
	if (!(jule::real(_43317_parent))) { goto _iter_end_4387085232; }
	{
		jule::Ref<_104a21a10_TypeAlias> _43521_ta = _43317_parent->_field_table->_method___find_type_alias(_42538_ident,_42550_cpp_linked,true);
		if (jule::real(_43521_ta)) {
			return _43521_ta;
		}
		_43317_parent=_43317_parent->_field_parent;
	}
	_iter_next_4387085232:;
	goto _iter_begin_4387085232;
	_iter_end_4387085232:;
	return (*this)._field_s->_method_find_type_alias(_42538_ident,_42550_cpp_linked);
}



inline jule::Ref<_1037370d0_Struct> _104180810_ScopeChecker::_method_find_struct(jule::Str _45034_ident,jule::Bool _45046_cpp_linked) {
	return (*this)._field_s->_method_find_struct(_45034_ident,_45046_cpp_linked);
}



inline jule::Ref<_1037649f0_Fn> _104180810_ScopeChecker::_method_find_fn(jule::Str _45930_ident,jule::Bool _45942_cpp_linked) {
	return (*this)._field_s->_method_find_fn(_45930_ident,_45942_cpp_linked);
}



inline jule::Ref<_1036e5da0_Trait> _104180810_ScopeChecker::_method_find_trait(jule::Str _46833_ident) {
	return (*this)._field_s->_method_find_trait(_46833_ident);
}



inline jule::Ref<_1036dad50_Enum> _104180810_ScopeChecker::_method_find_enum(jule::Str _47732_ident) {
	return (*this)._field_s->_method_find_enum(_47732_ident);
}



inline jule::Bool _104180810_ScopeChecker::_method_is_unsafe(void) {
	jule::Ref<_104180810_ScopeChecker> _48517_scope = this->self;
	_julec_label_iter:;
	if (_48517_scope->_field_scope->_field_unsafety) {
		return true;
	}
	if (jule::real(_48517_scope->_field_parent)) {
		_48517_scope=_48517_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _104180810_ScopeChecker::_method_is_root(void) {
	return (!(jule::real((*this)._field_parent))) || jule::real((*this)._field_owner);
}



inline jule::Ref<_104180810_ScopeChecker> _104180810_ScopeChecker::_method_get_root(void) {
	jule::Ref<_104180810_ScopeChecker> _50717_root = this->self;
	_iter_begin_4387127760:;
	if (!(jule::real(_50717_root->_field_parent) && (!(jule::real(_50717_root->_field_owner))))) { goto _iter_end_4387127760; }
	{
		_50717_root=_50717_root->_field_parent;
	}
	_iter_next_4387127760:;
	goto _iter_begin_4387127760;
	_iter_end_4387127760:;
	return _50717_root;
}



inline jule::Ref<_104180810_Label> _104180810_ScopeChecker::_method_find_label(jule::Str _51729_ident) {
	{
		auto __julec_range_expr = (*this)._field_scope->_field_stmts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _104180810_st = *__julec_range_begin;
			_iter_begin_4387133136:;
			{
				{
					auto _match_expr{ _104180810_st };
					if (!(_match_expr.type_is<jule::Ref<_104180810_Label>>())) { goto _case_end_4387134896; }
					_case_begin_4387134896:;
					{
						jule::Ref<_104180810_Label> _52125_label = _104180810_st.operator jule::Ref<_104180810_Label>();
						if (_52125_label->_field_ident == _51729_ident) {
							return _52125_label;
						}
					}
					goto _match_end_4387134432;
					_case_end_4387134896:;
					_match_end_4387134432:;
				}
			}
			_iter_next_4387133136:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104180810_st = *__julec_range_begin; goto _iter_begin_4387133136; }
			_iter_end_4387133136:;
		}
	}
	return jule::new_ref<_104180810_Label>();
}



inline jule::Ref<_104180810_ScopeLabel> _104180810_ScopeChecker::_method_find_label_scope(jule::Str _53336_ident) {
	jule::Ref<_104180810_ScopeLabel> _53417_label = this->self->_method_find_label_all(_53336_ident);
	if (jule::real(_53417_label) && ((_53417_label->_field_scope).alloc == (this->self).alloc)) {
		return _53417_label;
	}
	return jule::new_ref<_104180810_ScopeLabel>();
}



inline jule::Ref<_104180810_ScopeLabel> _104180810_ScopeChecker::_method_find_label_all(jule::Str _54533_ident) {
	{
		auto __julec_range_expr = (*this)._field_labels.get();
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104180810_ScopeLabel> _104180810_lbl = *__julec_range_begin;
			_iter_begin_4387144864:;
			{
				if (_104180810_lbl->_field_label->_field_ident == _54533_ident) {
					return _104180810_lbl;
				}
			}
			_iter_next_4387144864:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104180810_lbl = *__julec_range_begin; goto _iter_begin_4387144864; }
			_iter_end_4387144864:;
		}
	}
	return jule::new_ref<_104180810_ScopeLabel>();
}



inline jule::Bool _104180810_ScopeChecker::_method_is_duplicated_ident(jule::Uintptr _55738_itself,jule::Str _55755_ident) {
	jule::Ref<_104598e40_Var> _55813_v = (*this)._method_find_var(_55755_ident,false);
	if ((jule::real(_55813_v) && (((jule::Uintptr)((_55813_v).alloc)) != _55738_itself)) && ((_55813_v->_field_scope).alloc == ((*this)._field_scope).alloc)) {
		return true;
	}
	jule::Ref<_104a21a10_TypeAlias> _56313_ta = (*this)._method_find_type_alias(_55755_ident,false);
	if ((jule::real(_56313_ta) && (((jule::Uintptr)((_56313_ta).alloc)) != _55738_itself)) && ((_56313_ta->_field_scope).alloc == ((*this)._field_tree).alloc)) {
		return true;
	}
	return false;
}



inline void _104180810_ScopeChecker::_method_check_var_decl(jule::Ref<_1487f5920_VarDecl> _57138_decl) {
	jule::Ref<_104598e40_Var> _57217_v = _1036da950_build_var(_57138_decl);
	_57217_v->_field_scope=this->self->_field_scope;
	__JULE_DEFER({
		this->self->_field_table->_field_vars=jule::append(this->self->_field_table->_field_vars,jule::Slice<jule::Ref<_104598e40_Var>>({_57217_v}));
		this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_57217_v)}));
	});
	if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_57217_v).alloc)),_57217_v->_field_ident)) {
		this->self->_field_s->_method_push_err(_57217_v->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_57217_v->_field_ident)}));
		this->self->_field_s->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	this->self->_field_s->_method_check_var_decl(_57217_v,this->self);
	if ((!(_57217_v->_method_is_type_inferred())) && ((!(jule::real(_57217_v->_field_kind))) || (!(jule::real(_57217_v->_field_kind->_field_kind))))) {
		return;
	}
	this->self->_field_s->_method_check_type_var(_57217_v,this->self);
}



inline void _104180810_ScopeChecker::_method_check_type_alias_decl(jule::Ref<_1487f5920_TypeAliasDecl> _59345_decl) {
	jule::Ref<_104a21a10_TypeAlias> _59417_ta = _1036da950_build_type_alias(_59345_decl);
	if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_59417_ta).alloc)),_59417_ta->_field_ident)) {
		this->self->_field_s->_method_push_err(_59417_ta->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_59417_ta->_field_ident)}));
		this->self->_field_s->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	this->self->_field_s->_method_check_type_alias_decl(_59417_ta,this->self);
	this->self->_field_table->_field_type_aliases=jule::append(this->self->_field_table->_field_type_aliases,jule::Slice<jule::Ref<_104a21a10_TypeAlias>>({_59417_ta}));
}



inline jule::Ref<_104180810_Scope> _104180810_ScopeChecker::_method_get_child(void) {
	return jule::new_struct<_104180810_Scope>(new( std::nothrow ) _104180810_Scope((*this)._field_scope,jule::Bool(),jule::Bool(),jule::Slice<jule::Any>()));
}



inline void _104180810_ScopeChecker::_method_check_child_ssc(jule::Ref<_1487f5920_ScopeTree> _61039_tree,jule::Ref<_104180810_Scope> _61061_s,jule::Ref<_104180810_ScopeChecker> _61076_ssc) {
	_61076_ssc->_field_parent=this->self;
	_61076_ssc->_method_check(_61039_tree,_61061_s);
}



inline jule::Ref<_104180810_Scope> _104180810_ScopeChecker::_method_check_child_sc(jule::Ref<_1487f5920_ScopeTree> _61538_tree,jule::Ref<_104180810_ScopeChecker> _61560_ssc) {
	jule::Ref<_104180810_Scope> _61617_s = this->self->_method_get_child();
	this->self->_method_check_child_ssc(_61538_tree,_61617_s,_61560_ssc);
	return _61617_s;
}



inline jule::Ref<_104180810_Scope> _104180810_ScopeChecker::_method_check_child(jule::Ref<_1487f5920_ScopeTree> _62135_tree) {
	jule::Ref<_104180810_ScopeChecker> _62217_ssc = this->self->_method_new_child_checker();
	return this->self->_method_check_child_sc(_62135_tree,_62217_ssc);
}



inline void _104180810_ScopeChecker::_method_check_anon_scope(jule::Ref<_1487f5920_ScopeTree> _62640_tree) {
	jule::Ref<_104180810_Scope> _62717_s = this->self->_method_check_child(_62640_tree);
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_62717_s)}));
}



inline jule::Bool _104180810_ScopeChecker::_method_try_call_recover(jule::Ref<_1191dc300_Data> _63140_d) {
	{
		auto _match_expr{ _63140_d->_field_model };
		if (!(_match_expr.type_is<jule::Ref<_104180810_Recover>>())) { goto _case_end_4387221760; }
		goto _match_end_4387220816;
		_case_end_4387221760:;
		_case_begin_4387221456:;
		{
			return false;
		}
		goto _match_end_4387220816;
		_case_end_4387221456:;
		_match_end_4387220816:;
	}
	jule::Ref<_104180810_Recover> _63717_rec = _63140_d->_field_model.operator jule::Ref<_104180810_Recover>();
	_63717_rec->_field_handler=_63140_d->_field_kind->_method_fnc();
	_63717_rec->_field_scope=jule::new_struct<_104180810_Scope>(new( std::nothrow ) _104180810_Scope());
	_63717_rec->_field_scope_owner=this->self->_method_get_root()->_field_owner;
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_63717_rec)}));
	this->self->_field_tree->_field_stmts=this->self->_field_tree->_field_stmts.slice(static_cast<jule::Int>(this->self->_field_i + 1LL));
	this->self->_field_scope=_63717_rec->_field_scope;
	this->self->_method_check_tree();
	return true;
}



inline void _104180810_ScopeChecker::_method_check_expr(jule::Ref<_1487f5920_Expr> _65034_expr) {
	jule::Ref<_1191dc300_Data> _65117_d = this->self->_field_s->_method_eval(_65034_expr,this->self);
	if ((!(jule::real(_65117_d)))) {
		return;
	}
	if (_65034_expr->_method_is_fn_call()) {
		jule::Bool _65717_ok = this->self->_method_try_call_recover(_65117_d);
		if (_65717_ok) {
			return;
		}
	}
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_65117_d)}));
}



inline jule::Ref<_104180810_If> _104180810_ScopeChecker::_method_check_if(jule::Ref<_1487f5920_If> _66632_i) {
	jule::Ref<_104180810_Scope> _66717_s = this->self->_method_check_child(_66632_i->_field_scope);
	jule::Ref<_1191dc300_Data> _66917_d = this->self->_field_s->_method_eval(_66632_i->_field_expr,this->self);
	if ((!(jule::real(_66917_d)))) {
		return jule::new_ref<_104180810_If>();
	}
	jule::Ref<_104a21a10_Prim> _67413_prim = _66917_d->_field_kind->_method_prim();
	if ((!(jule::real(_67413_prim)))) {
		this->self->_field_s->_method_push_err(_66632_i->_field_expr->_field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>({}));
		return jule::new_ref<_104180810_If>();
	}
	if ((!(_67413_prim->_method_is_bool()))) {
		this->self->_field_s->_method_push_err(_66632_i->_field_expr->_field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>({}));
		return jule::new_ref<_104180810_If>();
	}
	return jule::new_struct<_104180810_If>(new( std::nothrow ) _104180810_If(_66917_d->_field_model,_66717_s));
}



inline jule::Ref<_104180810_Else> _104180810_ScopeChecker::_method_check_else(jule::Ref<_1487f5920_Else> _69134_e) {
	jule::Ref<_104180810_Scope> _69217_s = this->self->_method_check_child(_69134_e->_field_scope);
	return jule::new_struct<_104180810_Else>(new( std::nothrow ) _104180810_Else(_69217_s));
}



inline void _104180810_ScopeChecker::_method_check_conditional(jule::Ref<_1487f5920_Conditional> _69841_conditional) {
	jule::Ref<_104180810_Conditional> _69917_c = jule::new_struct<_104180810_Conditional>(new( std::nothrow ) _104180810_Conditional());
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_69917_c)}));
	_69917_c->_field_elifs=jule::Slice<jule::Ref<_104180810_If>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_69841_conditional->_field_tail.len() + 1LL)));
	_69917_c->_field_elifs[0LL]=this->self->_method_check_if(_69841_conditional->_field_head);
	{
		auto __julec_range_expr = _69841_conditional->_field_tail;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104180810_i = 0;
			jule::Ref<_1487f5920_If> _104180810_elif = *__julec_range_begin;
			_iter_begin_4392532448:;
			{
				_69917_c->_field_elifs[static_cast<jule::Int>(_104180810_i + 1LL)]=this->self->_method_check_if(_104180810_elif);
			}
			_iter_next_4392532448:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104180810_i; _104180810_elif = *__julec_range_begin; goto _iter_begin_4392532448; }
			_iter_end_4392532448:;
		}
	}
	if (jule::real(_69841_conditional->_field_default)) {
		_69917_c->_field_default=this->self->_method_check_else(_69841_conditional->_field_default);
	}
}



inline jule::Ref<_104180810_Scope> _104180810_ScopeChecker::_method_check_iter_scope_sc(jule::Uintptr _71439_it,jule::Ref<_1487f5920_ScopeTree> _71456_tree,jule::Ref<_104180810_ScopeChecker> _71478_ssc) {
	_71478_ssc->_field_it=_71439_it;
	return this->self->_method_check_child_sc(_71456_tree,_71478_ssc);
}



inline jule::Ref<_104180810_Scope> _104180810_ScopeChecker::_method_check_iter_scope(jule::Uintptr _71936_it,jule::Ref<_1487f5920_ScopeTree> _71953_tree) {
	jule::Ref<_104180810_ScopeChecker> _72017_ssc = this->self->_method_new_child_checker();
	return this->self->_method_check_iter_scope_sc(_71936_it,_71953_tree,_72017_ssc);
}



inline void _104180810_ScopeChecker::_method_check_inf_iter(jule::Ref<_1487f5920_Iter> _72438_it) {
	jule::Ref<_104180810_InfIter> _72517_kind = jule::new_struct<_104180810_InfIter>(new( std::nothrow ) _104180810_InfIter());
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_72517_kind)}));
	_72517_kind->_field_scope=this->self->_method_check_iter_scope(((jule::Uintptr)((_72517_kind).alloc)),_72438_it->_field_scope);
}



inline void _104180810_ScopeChecker::_method_check_while_iter(jule::Ref<_1487f5920_Iter> _73240_it) {
	jule::Ref<_1487f5920_WhileKind> _73317_wh = _73240_it->_field_kind.operator jule::Ref<_1487f5920_WhileKind>();
	if ((!(jule::real(_73317_wh->_field_expr))) && (_73317_wh->_field_next == nullptr)) {
		this->self->_method_check_inf_iter(_73240_it);
		return;
	}
	jule::Ref<_104180810_WhileIter> _73917_kind = jule::new_struct<_104180810_WhileIter>(new( std::nothrow ) _104180810_WhileIter());
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_73917_kind)}));
	_73917_kind->_field_scope=this->self->_method_check_iter_scope(((jule::Uintptr)((_73917_kind).alloc)),_73240_it->_field_scope);
	if (jule::real(_73317_wh->_field_expr)) {
		jule::Ref<_1191dc300_Data> _74621_d = this->self->_field_s->_method_eval(_73317_wh->_field_expr,this->self);
		if ((!(jule::real(_74621_d)))) {
			return;
		}
		jule::Ref<_104a21a10_Prim> _75117_prim = _74621_d->_field_kind->_method_prim();
		if ((!(jule::real(_75117_prim)))) {
			this->self->_field_s->_method_push_err(_73240_it->_field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>({}));
			return;
		}
		if ((!(_75117_prim->_method_is_bool()))) {
			this->self->_field_s->_method_push_err(_73240_it->_field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>({}));
			return;
		}
		_73917_kind->_field_expr=_74621_d->_field_model;
	}
	if (_73317_wh->_method_is_while_next()) {
		if ((!(_104180810_is_valid_ast_st_for_next_st(_73317_wh->_field_next)))) {
			this->self->_field_s->_method_push_err(_73317_wh->_field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>({}));
			return;
		}
		jule::I64 _77117_n = this->self->_field_scope->_field_stmts.len();
		this->self->_method_check_node(_73317_wh->_field_next);
		if (_77117_n < this->self->_field_scope->_field_stmts.len()) {
			jule::Any _77425_st = this->self->_field_scope->_field_stmts[static_cast<jule::Int>(_77117_n)];
			this->self->_field_scope->_field_stmts=this->self->_field_scope->_field_stmts.slice(0LL,static_cast<jule::Int>(_77117_n));
			if ((!(_104180810_is_valid_st_for_next_st(_77425_st)))) {
				this->self->_field_s->_method_push_err(_73317_wh->_field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>({}));
			}
			_73917_kind->_field_next=_77425_st;
		}
	}
}



inline void _104180810_ScopeChecker::_method_check_range_iter(jule::Ref<_1487f5920_Iter> _78540_it) {
	jule::Ref<_1487f5920_RangeKind> _78617_rang = _78540_it->_field_kind.operator jule::Ref<_1487f5920_RangeKind>();
	jule::Ref<_1191dc300_Data> _78817_d = this->self->_field_s->_method_eval(_78617_rang->_field_expr,this->self);
	if ((!(jule::real(_78817_d)))) {
		return;
	}
	jule::Ref<_104180810_RangeIter> _79317_kind = jule::new_struct<_104180810_RangeIter>(new( std::nothrow ) _104180810_RangeIter(_78817_d,jule::Ref<_104180810_Scope>(),jule::Ref<_104598e40_Var>(),jule::Ref<_104598e40_Var>()));
	_1044463d0_RangeChecker _79717_rc = _1044463d0_RangeChecker(this->self,_78617_rang,_79317_kind,_78817_d);
	jule::Bool _80313_ok = _79717_rc._method_check();
	if ((!(_80313_ok))) {
		return;
	}
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_79317_kind)}));
	jule::Ref<_104180810_ScopeChecker> _81017_ssc = this->self->_method_new_child_checker();
	if (jule::real(_79317_kind->_field_key_a)) {
		_81017_ssc->_field_table->_field_vars=jule::append(_81017_ssc->_field_table->_field_vars,jule::Slice<jule::Ref<_104598e40_Var>>({_79317_kind->_field_key_a}));
	}
	if (jule::real(_79317_kind->_field_key_b)) {
		_81017_ssc->_field_table->_field_vars=jule::append(_81017_ssc->_field_table->_field_vars,jule::Slice<jule::Ref<_104598e40_Var>>({_79317_kind->_field_key_b}));
	}
	_79317_kind->_field_scope=this->self->_method_check_iter_scope_sc(((jule::Uintptr)((_79317_kind).alloc)),_78540_it->_field_scope,_81017_ssc);
}



inline void _104180810_ScopeChecker::_method_check_iter(jule::Ref<_1487f5920_Iter> _82334_it) {
	if (_82334_it->_method_is_inf()) {
		this->self->_method_check_inf_iter(_82334_it);
		return;
	}
	{
		auto _match_expr{ _82334_it->_field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_WhileKind>>())) { goto _case_end_4392623776; }
		_case_begin_4392623776:;
		{
			this->self->_method_check_while_iter(_82334_it);
		}
		goto _match_end_4392622656;
		_case_end_4392623776:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_RangeKind>>())) { goto _case_end_4392624496; }
		_case_begin_4392624496:;
		{
			this->self->_method_check_range_iter(_82334_it);
		}
		goto _match_end_4392622656;
		_case_end_4392624496:;
		_case_begin_4392621200:;
		{
			jule::outln(jule::Str("error <unimplemented iteration kind>", 36));
		}
		goto _match_end_4392622656;
		_case_end_4392621200:;
		_match_end_4392622656:;
	}
}



inline jule::Bool _104180810_ScopeChecker::_method_check_valid_cont_label(jule::Uintptr _83642_it) {
	jule::Ref<_104180810_ScopeChecker> _83717_scope = this->self;
	_julec_label_iter:;
	if (_83717_scope->_field_it == _83642_it) {
		return true;
	}
	if (jule::real(_83717_scope->_field_parent)) {
		_83717_scope=_83717_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _104180810_ScopeChecker::_method_check_valid_break_label(jule::Uintptr _85243_ptr) {
	jule::Ref<_104180810_ScopeChecker> _85317_scope = this->self;
	_julec_label_iter:;
	if (_85317_scope->_field_it == _85243_ptr) {
		return true;
	}
	if (_85317_scope->_field_cse != 0LL) {
		jule::Uintptr _86117_mtch = ((jule::Uintptr)((((_104180810_Case*)(_85317_scope->_field_cse))->_field_owner).alloc));
		if (_86117_mtch == _85243_ptr) {
			return true;
		}
	}
	if (jule::real(_85317_scope->_field_parent)) {
		_85317_scope=_85317_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ref<_104180810_ContSt> _104180810_ScopeChecker::_method_check_cont_valid_scope(jule::Ref<_1487f5920_ContSt> _87541_c) {
	if (_87541_c->_field_label._field_id != 0LLU) {
		return jule::new_struct<_104180810_ContSt>(new( std::nothrow ) _104180810_ContSt());
	}
	_104180810_ScopeChecker _88017_scope = (*this);
	_julec_label_iter:;
	{
		if (!((((_88017_scope._field_it == 0LL) && jule::real(_88017_scope._field_parent)) && (!(jule::real(_88017_scope._field_owner)))))) { goto _case_end_4392651888; }
		_case_begin_4392651888:;
		{
			_88017_scope=_88017_scope._field_parent;
			goto _julec_label_iter;
		}
		goto _match_end_4392651600;
		_case_end_4392651888:;
		if (!((_88017_scope._field_it != 0LL))) { goto _case_end_4392652000; }
		_case_begin_4392652000:;
		{
			return jule::new_struct<_104180810_ContSt>(new( std::nothrow ) _104180810_ContSt(_88017_scope._field_it));
		}
		goto _match_end_4392651600;
		_case_end_4392652000:;
		_match_end_4392651600:;
	}
	(*this)._field_s->_method_push_err(_87541_c->_field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>({}));
	return jule::new_ref<_104180810_ContSt>();
}



inline void _104180810_ScopeChecker::_method_check_cont(jule::Ref<_1487f5920_ContSt> _89530_c) {
	jule::Ref<_104180810_ContSt> _89617_cont = this->self->_method_check_cont_valid_scope(_89530_c);
	if ((!(jule::real(_89617_cont)))) {
		return;
	}
	if (_89530_c->_field_label._field_id != 0LLU) {
		jule::Ref<_104180810_ScopeLabel> _90221_label = _104180810_find_label_parent(_89530_c->_field_label._field_kind,this->self->_field_parent);
		if ((!(jule::real(_90221_label)))) {
			this->self->_field_s->_method_push_err(_89530_c->_field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any(_89530_c->_field_label._field_kind)}));
			return;
		}
		_90221_label->_field_used=true;
		if ((_90221_label->_field_pos + 1LL) >= _90221_label->_field_scope->_field_scope->_field_stmts.len()) {
			this->self->_field_s->_method_push_err(_89530_c->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
			return;
		}
		jule::Int _91517_i = _90221_label->_field_pos + 1LL;
		if (_91517_i >= _90221_label->_field_scope->_field_scope->_field_stmts.len()) {
			this->self->_field_s->_method_push_err(_89530_c->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
		} else {
			jule::Any _91925_st = _90221_label->_field_scope->_field_scope->_field_stmts[static_cast<jule::Int>(_91517_i)];
			{
				auto _match_expr{ _91925_st };
				if (!(_match_expr.type_is<jule::Ref<_104180810_InfIter>>())) { goto _case_end_4392683264; }
				_case_begin_4392683264:;
				{
					_89617_cont->_field_it=((jule::Uintptr)((_91925_st.operator jule::Ref<_104180810_InfIter>()).alloc));
				}
				goto _match_end_4392674768;
				_case_end_4392683264:;
				if (!(_match_expr.type_is<jule::Ref<_104180810_RangeIter>>())) { goto _case_end_4392680976; }
				_case_begin_4392680976:;
				{
					_89617_cont->_field_it=((jule::Uintptr)((_91925_st.operator jule::Ref<_104180810_RangeIter>()).alloc));
				}
				goto _match_end_4392674768;
				_case_end_4392680976:;
				if (!(_match_expr.type_is<jule::Ref<_104180810_WhileIter>>())) { goto _case_end_4392681088; }
				_case_begin_4392681088:;
				{
					_89617_cont->_field_it=((jule::Uintptr)((_91925_st.operator jule::Ref<_104180810_WhileIter>()).alloc));
				}
				goto _match_end_4392674768;
				_case_end_4392681088:;
				_case_begin_4392680576:;
				{
					this->self->_field_s->_method_push_err(_89530_c->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
				}
				goto _match_end_4392674768;
				_case_end_4392680576:;
				_match_end_4392674768:;
			}
		}
	}
	if (_89617_cont->_field_it != 0LL) {
		if ((!(this->self->_method_check_valid_cont_label(_89617_cont->_field_it)))) {
			this->self->_field_s->_method_push_err(_89530_c->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
		}
	}
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_89617_cont)}));
}



inline void _104180810_ScopeChecker::_method_check_label(jule::Ref<_1487f5920_LabelSt> _93835_l) {
	if (jule::real(this->self->_method_find_label(_93835_l->_field_ident))) {
		this->self->_field_s->_method_push_err(_93835_l->_field_token,jule::Str("label is already exist in this identifier: @", 44),jule::Slice<jule::Any>({jule::Any(_93835_l->_field_ident)}));
		return;
	}
	jule::Ref<_104180810_Label> _94417_label = jule::new_struct<_104180810_Label>(new( std::nothrow ) _104180810_Label(_93835_l->_field_ident));
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_94417_label)}));
	this->self->_field_labels=jule::append(this->self->_field_labels.get(),jule::Slice<jule::Ref<_104180810_ScopeLabel>>({jule::new_struct<_104180810_ScopeLabel>(new( std::nothrow ) _104180810_ScopeLabel(_93835_l->_field_token,_94417_label,static_cast<jule::I64>(this->self->_field_scope->_field_stmts.len() - 1LL),this->self,jule::Bool()))}));
}



inline void _104180810_ScopeChecker::_method_push_goto(jule::Ref<_1487f5920_GotoSt> _95733_gt) {
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(jule::new_struct<_104180810_GotoSt>(new( std::nothrow ) _104180810_GotoSt(_95733_gt->_field_label._field_kind)))}));
	this->self->_field_gotos=jule::append(this->self->_field_gotos.get(),jule::Slice<jule::Ref<_104180810_ScopeGoto>>({jule::new_struct<_104180810_ScopeGoto>(new( std::nothrow ) _104180810_ScopeGoto(_95733_gt,this->self,static_cast<jule::I64>(this->self->_field_scope->_field_stmts.len() - 1LL)))}));
}



inline void _104180810_ScopeChecker::_method_check_postfix(jule::Ref<_1487f5920_AssignSt> _96937_a) {
	if (_96937_a->_field_left.len() > 1LL) {
		this->self->_field_s->_method_push_err(_96937_a->_field_setter,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return;
	}
	jule::Ref<_1191dc300_Data> _97517_d = this->self->_field_s->_method_eval(_96937_a->_field_left[0LL]->_field_expr,this->self);
	if ((!(jule::real(_97517_d)))) {
		return;
	}
	_104180810_check_assign(this->self->_field_s,_97517_d,jule::new_ref<_1191dc300_Data>(),_96937_a->_field_setter);
	if (jule::real(_97517_d->_field_kind->_method_ptr())) {
		jule::Ref<_104a21a10_Ptr> _98321_ptr = _97517_d->_field_kind->_method_ptr();
		if ((!(_98321_ptr->_method_is_unsafe())) && (!(this->self->_method_is_unsafe()))) {
			this->self->_field_s->_method_push_err(_96937_a->_field_left[0LL]->_field_expr->_field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
			return;
		}
	}
	jule::Ref<_104a21a10_TypeKind> _99017_check_t = _97517_d->_field_kind;
	if (jule::real(_97517_d->_field_kind->_method_ref())) {
		_99017_check_t=_97517_d->_field_kind->_method_ref()->_field_elem;
	}
	if ((!(jule::real(_99017_check_t->_method_prim()))) || (!(_104c56790_is_num(_99017_check_t->_method_prim()->_field_kind)))) {
		this->self->_field_s->_method_push_err(_96937_a->_field_setter,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any(_96937_a->_field_setter._field_kind),jule::Any(_97517_d->_field_kind->_method_to_str())}));
		return;
	}
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(jule::new_struct<_104180810_Postfix>(new( std::nothrow ) _104180810_Postfix(_97517_d->_field_model,_96937_a->_field_setter._field_kind)))}));
}



inline jule::Bool _104180810_ScopeChecker::_method_is_new_assign_ident(jule::Str _100638_ident) {
	if (_108e15ff0_is_ignore_ident(_100638_ident) || (_100638_ident == jule::Str("", 0))) {
		return false;
	}
	return (*this)._field_table->_method_def_by_ident(_100638_ident,false) == nullptr;
}



inline void _104180810_ScopeChecker::_method_check_single_assign(jule::Ref<_1487f5920_AssignSt> _101443_a) {
	jule::Ref<_1191dc300_Data> _101517_l = jule::new_ref<_1191dc300_Data>();
	jule::Ref<_1191dc300_Data> _101617_r = jule::new_ref<_1191dc300_Data>();
	if ((!(_108e15ff0_is_ignore_ident(_101443_a->_field_left[0LL]->_field_ident)))) {
		_101517_l=this->self->_field_s->_method_eval(_101443_a->_field_left[0LL]->_field_expr,this->self);
		if ((!(jule::real(_101517_l)))) {
			return;
		}
	}
	if (jule::real(_101517_l)) {
		_101617_r=this->self->_field_s->_method_evalp(_101443_a->_field_right,this->self,_101517_l->_field_kind);
	} else {
		_101617_r=this->self->_field_s->_method_eval(_101443_a->_field_right,this->self);
	}
	if ((!(jule::real(_101617_r)))) {
		return;
	}
	if ((!(jule::real(_101517_l)))) {
		if (_101617_r->_field_kind->_method_is_void()) {
			this->self->_field_s->_method_push_err(_101443_a->_field_right->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		}
		this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_101617_r)}));
		return;
	}
	if ((!(_104180810_check_assign(this->self->_field_s,_101517_l,_101617_r,_101443_a->_field_setter)))) {
		return;
	}
	if (jule::real(_101617_r->_field_kind->_method_tup())) {
		this->self->_field_s->_method_push_err(_101443_a->_field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>({}));
		return;
	}
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(jule::new_struct<_104180810_Assign>(new( std::nothrow ) _104180810_Assign(_101517_l->_field_model,_101617_r->_field_model,_101443_a->_field_setter._field_kind)))}));
	if ((_101443_a->_field_setter._field_kind != jule::Str("=", 1)) && (!(_101617_r->_method_is_const()))) {
		_101443_a->_field_setter._field_kind=_101443_a->_field_setter._field_kind.slice(0LL,static_cast<jule::Int>(_101443_a->_field_setter._field_kind.len() - 1LL));
		_1191dc300_BinopSolver _106121_solver = _1191dc300_BinopSolver(jule::new_struct<_1191dc300_Eval>(new( std::nothrow ) _1191dc300_Eval(this->self->_field_s,this->self,jule::Ref<_104a21a10_TypeKind>(),this->self->_method_is_unsafe(),jule::Ref<_104598e40_Var>())),jule::Ref<_1191dc300_Data>(),jule::Ref<_1191dc300_Data>(),_101443_a->_field_setter);
		_101617_r=_106121_solver._method_solve_explicit(_101517_l,_101617_r);
		if ((!(jule::real(_101617_r)))) {
			return;
		}
		_101443_a->_field_setter._field_kind+=jule::Str("=", 1);
	}
	_1044463d0_AssignTypeChecker _107717_checker = _1044463d0_AssignTypeChecker(this->self->_field_s,_101517_l->_field_kind,_101617_r,_101443_a->_field_setter,true);
	_107717_checker._method_check();
}



inline void _104180810_ScopeChecker::_method___process_end_part_of_multi_assign(jule::Ref<_104180810_MultiAssign> _108757_st,jule::Ref<_1487f5920_AssignSt> _108813_a,jule::Ref<_1487f5920_AssignLeft> _108827_lexpr,jule::Ref<_1191dc300_Data> _108851_l,jule::Ref<_1191dc300_Data> _108865_r) {
	if (_108e15ff0_is_ignore_ident(_108827_lexpr->_field_ident)) {
		if (_108865_r->_field_kind->_method_is_void()) {
			(*this)._field_s->_method_push_err(_108813_a->_field_right->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		}
		_108757_st->_field_l=jule::append(_108757_st->_field_l,jule::Slice<jule::Any>({jule::Any(nullptr)}));
		return;
	}
	if (_108813_a->_field_declarative && (*this)._method_is_new_assign_ident(_108827_lexpr->_field_ident)) {
		jule::Ref<_104598e40_Var> _110021_v = jule::new_struct<_104598e40_Var>(new( std::nothrow ) _104598e40_Var((*this)._field_scope,_108827_lexpr->_field_token,_108827_lexpr->_field_ident,jule::Bool(),jule::Bool(),_108827_lexpr->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),_108827_lexpr->_field_reference,jule::Str(),jule::Ref<_104a21a10_TypeSymbol>(),jule::new_struct<_1191dc300_Value>(new( std::nothrow ) _1191dc300_Value(_108813_a->_field_right,_108865_r)),jule::Ref<_1036da950_ReferenceStack>(),jule::Slice<jule::Ref<_1487f5920_Directive>>(),jule::Slice<jule::Ref<_104598e40_Var>>()));
		(*this)._field_s->_method_check_var(_110021_v);
		_108757_st->_field_l=jule::append(_108757_st->_field_l,jule::Slice<jule::Any>({jule::Any(_110021_v)}));
		(*this)._field_table->_field_vars=jule::append((*this)._field_table->_field_vars,jule::Slice<jule::Ref<_104598e40_Var>>({_110021_v}));
		(*this)._field_scope->_field_stmts=jule::append((*this)._field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_110021_v)}));
		return;
	}
	if (_108827_lexpr->_field_mutable || _108827_lexpr->_field_reference) {
		(*this)._field_s->_method_push_err(_108827_lexpr->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_108827_lexpr->_field_ident)}));
		(*this)._field_s->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	if ((!(_104180810_check_assign((*this)._field_s,_108851_l,_108865_r,_108813_a->_field_setter)))) {
		return;
	}
	
	(*this)._field_s->_method_check_validity_for_init_expr(_108851_l->_field_mutable,false,_108851_l->_field_kind,_108865_r,_108813_a->_field_setter);
	_1044463d0_AssignTypeChecker _113517_checker = _1044463d0_AssignTypeChecker((*this)._field_s,_108851_l->_field_kind,_108865_r,_108813_a->_field_setter,true);
	_113517_checker._method_check();
	_108757_st->_field_l=jule::append(_108757_st->_field_l,jule::Slice<jule::Any>({_108851_l->_field_model}));
}



inline void _104180810_ScopeChecker::_method_check_ret_multi_assign(jule::Ref<_1487f5920_AssignSt> _114746_a) {
	jule::Ref<_1191dc300_Data> _114817_rd = this->self->_field_s->_method_eval(_114746_a->_field_right,this->self);
	if ((!(jule::real(_114817_rd)))) {
		return;
	}
	jule::Slice<jule::Ref<_1191dc300_Data>> _115317_r = _104180810_get_datas_from_tuple_data(_114817_rd);
	{
		if (!((_114746_a->_field_left.len() > _115317_r.len()))) { goto _case_end_4392850880; }
		_case_begin_4392850880:;
		{
			this->self->_field_s->_method_push_err(_114746_a->_field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4392850592;
		_case_end_4392850880:;
		if (!((_114746_a->_field_left.len() < _115317_r.len()))) { goto _case_end_4392850992; }
		_case_begin_4392850992:;
		{
			this->self->_field_s->_method_push_err(_114746_a->_field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4392850592;
		_case_end_4392850992:;
		_match_end_4392850592:;
	}
	jule::Ref<_104180810_MultiAssign> _116517_st = jule::new_struct<_104180810_MultiAssign>(new( std::nothrow ) _104180810_MultiAssign(jule::Slice<jule::Any>(),_114817_rd->_field_model));
	if ((!(jule::real(_114817_rd->_field_kind->_method_tup())))) {
		_116517_st->_field_r=jule::Any(jule::new_struct<_11911f320_TupleExprModel>(new( std::nothrow ) _11911f320_TupleExprModel(_115317_r)));
	}
	{
		auto __julec_range_expr = _114746_a->_field_left;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104180810_i = 0;
			_iter_begin_4392861376:;
			{
				jule::Ref<_1487f5920_AssignLeft> _117421_lexpr = _114746_a->_field_left[static_cast<jule::Int>(_104180810_i)];
				jule::Ref<_1191dc300_Data> _117521_l = jule::new_ref<_1191dc300_Data>();
				jule::Ref<_1191dc300_Data> _117621_r = _115317_r[static_cast<jule::Int>(_104180810_i)];
				if ((!(_108e15ff0_is_ignore_ident(_117421_lexpr->_field_ident))) && ((!(_114746_a->_field_declarative)) || (!(this->self->_method_is_new_assign_ident(_117421_lexpr->_field_ident))))) {
					_117521_l=this->self->_field_s->_method_eval(_117421_lexpr->_field_expr,this->self);
					if ((!(jule::real(_117521_l)))) {
						goto _iter_next_4392861376;
					}
				}
				this->self->_method___process_end_part_of_multi_assign(_116517_st,_114746_a,_117421_lexpr,_117521_l,_117621_r);
			}
			_iter_next_4392861376:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104180810_i; goto _iter_begin_4392861376; }
			_iter_end_4392861376:;
		}
	}
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_116517_st)}));
}



inline void _104180810_ScopeChecker::_method_check_multi_assign(jule::Ref<_1487f5920_AssignSt> _119142_a) {
	{
		auto _match_expr{ _119142_a->_field_right->_field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_FnCallExpr>>())) { goto _case_end_4392878032; }
		_case_begin_4392878032:;
		{
			this->self->_method_check_ret_multi_assign(_119142_a);
			return;
		}
		goto _match_end_4392877168;
		_case_end_4392878032:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_UnsafeExpr>>())) { goto _case_end_4392878160; }
		_case_begin_4392878160:;
		{
			{
				auto _match_expr{ _119142_a->_field_right->_field_kind.operator jule::Ref<_1487f5920_UnsafeExpr>()->_field_expr };
				if (!(_match_expr.type_is<jule::Ref<_1487f5920_FnCallExpr>>())) { goto _case_end_4392882432; }
				_case_begin_4392882432:;
				{
					this->self->_method_check_ret_multi_assign(_119142_a);
					return;
				}
				goto _match_end_4392879728;
				_case_end_4392882432:;
				_match_end_4392879728:;
			}
		}
		goto _match_end_4392877168;
		_case_end_4392878160:;
		_match_end_4392877168:;
	}
	jule::Slice<jule::Any> _120517_right = _104180810_get_expr_models(_119142_a->_field_right->_field_kind);
	{
		if (!((_119142_a->_field_left.len() > _120517_right.len()))) { goto _case_end_4392885392; }
		_case_begin_4392885392:;
		{
			this->self->_field_s->_method_push_err(_119142_a->_field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4392883568;
		_case_end_4392885392:;
		if (!((_119142_a->_field_left.len() < _120517_right.len()))) { goto _case_end_4392885504; }
		_case_begin_4392885504:;
		{
			this->self->_field_s->_method_push_err(_119142_a->_field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4392883568;
		_case_end_4392885504:;
		_match_end_4392883568:;
	}
	jule::Ref<_11911f320_TupleExprModel> _121717_right_tuple = jule::new_struct<_11911f320_TupleExprModel>(new( std::nothrow ) _11911f320_TupleExprModel());
	jule::Ref<_104180810_MultiAssign> _121917_st = jule::new_struct<_104180810_MultiAssign>(new( std::nothrow ) _104180810_MultiAssign(jule::Slice<jule::Any>(),jule::Any(_121717_right_tuple)));
	{
		auto __julec_range_expr = _119142_a->_field_left;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104180810_i = 0;
			_iter_begin_4392894576:;
			{
				jule::Ref<_1487f5920_AssignLeft> _122421_lexpr = _119142_a->_field_left[static_cast<jule::Int>(_104180810_i)];
				jule::Ref<_1191dc300_Data> _122521_l = jule::new_ref<_1191dc300_Data>();
				jule::Ref<_1191dc300_Data> _122621_r = jule::new_ref<_1191dc300_Data>();
				if ((!(_108e15ff0_is_ignore_ident(_122421_lexpr->_field_ident))) && ((!(_119142_a->_field_declarative)) || (!(this->self->_method_is_new_assign_ident(_122421_lexpr->_field_ident))))) {
					_122521_l=this->self->_field_s->_method_eval(_122421_lexpr->_field_expr,this->self);
					if ((!(jule::real(_122521_l)))) {
						goto _iter_next_4392894576;
					}
				}
				if (jule::real(_122521_l)) {
					jule::Ref<_1487f5920_Expr> _123625_expr = jule::new_struct<_1487f5920_Expr>(new( std::nothrow ) _1487f5920_Expr(_119142_a->_field_right->_field_token,_120517_right[static_cast<jule::Int>(_104180810_i)]));
					_122621_r=this->self->_field_s->_method_evalp(_123625_expr,this->self,_122521_l->_field_kind);
				} else {
					jule::Ref<_1487f5920_Expr> _123925_expr = jule::new_struct<_1487f5920_Expr>(new( std::nothrow ) _1487f5920_Expr(_119142_a->_field_right->_field_token,_120517_right[static_cast<jule::Int>(_104180810_i)]));
					_122621_r=this->self->_field_s->_method_eval(_123925_expr,this->self);
				}
				if ((!(jule::real(_122621_r)))) {
					goto _iter_next_4392894576;
				}
				_121717_right_tuple->_field_datas=jule::append(_121717_right_tuple->_field_datas,jule::Slice<jule::Ref<_1191dc300_Data>>({_122621_r}));
				this->self->_method___process_end_part_of_multi_assign(_121917_st,_119142_a,_122421_lexpr,_122521_l,_122621_r);
			}
			_iter_next_4392894576:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104180810_i; goto _iter_begin_4392894576; }
			_iter_end_4392894576:;
		}
	}
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_121917_st)}));
}



inline void _104180810_ScopeChecker::_method_check_assign_st(jule::Ref<_1487f5920_AssignSt> _125439_a) {
	if (_108e15ff0_is_postfix_op(_125439_a->_field_setter._field_kind)) {
		this->self->_method_check_postfix(_125439_a);
		return;
	}
	if ((_125439_a->_field_left.len() == 1LL) && (!(_125439_a->_field_declarative))) {
		this->self->_method_check_single_assign(_125439_a);
		return;
	}
	this->self->_method_check_multi_assign(_125439_a);
}



inline jule::Ref<_104180810_Scope> _104180810_ScopeChecker::_method_check_case_scope(jule::Ref<_104180810_Case> _126836_c,jule::Ref<_1487f5920_ScopeTree> _126850_tree) {
	jule::Ref<_104180810_ScopeChecker> _126917_ssc = this->self->_method_new_child_checker();
	_126917_ssc->_field_cse=((jule::Uintptr)((_126836_c).alloc));
	return this->self->_method_check_child_sc(_126850_tree,_126917_ssc);
}



inline jule::Ref<_104180810_Case> _104180810_ScopeChecker::_method_check_case(jule::Ref<_104180810_Match> _127434_m,jule::Int _127445_i,jule::Ref<_1487f5920_Case> _127457_c,jule::Ref<_1191dc300_Data> _127487_expr) {
	jule::Ref<_104180810_Case> _127517__case = _127434_m->_field_cases[static_cast<jule::Int>(_127445_i)];
	_127517__case->_field_exprs=jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_127457_c->_field_exprs.len())));
	{
		auto __julec_range_expr = _127457_c->_field_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104180810_i = 0;
			jule::Ref<_1487f5920_Expr> _104180810_e = *__julec_range_begin;
			_iter_begin_4392941792:;
			{
				if (_127434_m->_field_type_match) {
					jule::Ref<_1191dc300_Eval> _128025_eval = jule::new_struct<_1191dc300_Eval>(new( std::nothrow ) _1191dc300_Eval(this->self->_field_s,this->self,jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Ref<_104598e40_Var>()));
					jule::Ref<_1191dc300_Data> _128525_d = _128025_eval->_method_eval(_104180810_e);
					if (jule::real(_128525_d)) {
						_127517__case->_field_exprs[static_cast<jule::Int>(_104180810_i)]=jule::Any(_128525_d->_field_kind);
						if (_104180810_count_match_type(_127434_m,_128525_d->_field_kind) > 1LL) {
							this->self->_field_s->_method_push_err(_104180810_e->_field_token,jule::Str("type is already checked: @", 26),jule::Slice<jule::Any>({jule::Any(_128525_d->_field_kind->_method_to_str())}));
						}
					}
					jule::Ref<_1036e5da0_Trait> _129321_trt = _127487_expr->_field_kind->_method_trt();
					if (jule::real(_129321_trt)) {
						this->self->_field_s->_method_check_type_compatibility(_127487_expr->_field_kind,_128525_d->_field_kind,_104180810_e->_field_token,false);
					}
					goto _iter_next_4392941792;
				}
				jule::Ref<_1191dc300_Data> _130121_d = this->self->_field_s->_method_eval(_104180810_e,this->self);
				if ((!(jule::real(_130121_d)))) {
					goto _iter_next_4392941792;
				}
				_127517__case->_field_exprs[static_cast<jule::Int>(_104180810_i)]=_130121_d->_field_model;
				_1044463d0_AssignTypeChecker _130821_checker = _1044463d0_AssignTypeChecker(this->self->_field_s,_127487_expr->_field_kind,_130121_d,_104180810_e->_field_token,true);
				_130821_checker._method_check();
			}
			_iter_next_4392941792:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104180810_i; _104180810_e = *__julec_range_begin; goto _iter_begin_4392941792; }
			_iter_end_4392941792:;
		}
	}
	_127517__case->_field_scope=this->self->_method_check_case_scope(_127517__case,_127457_c->_field_scope);
	return _127517__case;
}



inline void _104180810_ScopeChecker::_method_check_cases(jule::Ref<_1487f5920_MatchCase> _132235_m,jule::Ref<_104180810_Match> _132270_rm,jule::Ref<_1191dc300_Data> _132286_expr) {
	_132270_rm->_field_cases=jule::Slice<jule::Ref<_104180810_Case>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_132235_m->_field_cases.len())));
	{
		auto __julec_range_expr = _132235_m->_field_cases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104180810_i = 0;
			_iter_begin_4391591824:;
			{
				jule::Ref<_104180810_Case> _132521__case = jule::new_struct<_104180810_Case>(new( std::nothrow ) _104180810_Case(_132270_rm,jule::Ref<_104180810_Scope>(),jule::Slice<jule::Any>(),jule::Ref<_104180810_Case>()));
				if (_104180810_i > 0LL) {
					_132270_rm->_field_cases[static_cast<jule::Int>(_104180810_i - 1LL)]->_field_next=_132521__case;
				}
				_132270_rm->_field_cases[static_cast<jule::Int>(_104180810_i)]=_132521__case;
			}
			_iter_next_4391591824:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104180810_i; goto _iter_begin_4391591824; }
			_iter_end_4391591824:;
		}
	}
	if (jule::real(_132270_rm->_field_default) && (_132235_m->_field_cases.len() > 0LL)) {
		_132270_rm->_field_cases[static_cast<jule::Int>(_132270_rm->_field_cases.len() - 1LL)]->_field_next=_132270_rm->_field_default;
	}
	{
		auto __julec_range_expr = _132235_m->_field_cases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104180810_i = 0;
			jule::Ref<_1487f5920_Case> _104180810_c = *__julec_range_begin;
			_iter_begin_4391600736:;
			{
				this->self->_method_check_case(_132270_rm,_104180810_i,_104180810_c,_132286_expr);
			}
			_iter_next_4391600736:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104180810_i; _104180810_c = *__julec_range_begin; goto _iter_begin_4391600736; }
			_iter_end_4391600736:;
		}
	}
}



inline jule::Ref<_104180810_Case> _104180810_ScopeChecker::_method_check_default(jule::Ref<_104180810_Match> _134537_m,jule::Ref<_1487f5920_Else> _134552_d) {
	jule::Ref<_104180810_Case> _134617_def = jule::new_struct<_104180810_Case>(new( std::nothrow ) _104180810_Case(_134537_m,jule::Ref<_104180810_Scope>(),jule::Slice<jule::Any>(),jule::Ref<_104180810_Case>()));
	_134617_def->_field_scope=this->self->_method_check_case_scope(_134617_def,_134552_d->_field_scope);
	return _134617_def;
}



inline void _104180810_ScopeChecker::_method_check_type_match(jule::Ref<_1487f5920_MatchCase> _135340_m) {
	jule::Ref<_1191dc300_Data> _135417_d = this->self->_field_s->_method_eval(_135340_m->_field_expr,this->self);
	if ((!(jule::real(_135417_d)))) {
		return;
	}
	if ((!((jule::real(_135417_d->_field_kind->_method_prim()) && _135417_d->_field_kind->_method_prim()->_method_is_any()) || jule::real(_135417_d->_field_kind->_method_trt())))) {
		this->self->_field_s->_method_push_err(_135340_m->_field_expr->_field_token,jule::Str("type-case must be have <any> or trait typed expression", 54),jule::Slice<jule::Any>({}));
		return;
	}
	jule::Ref<_104180810_Match> _136417_tm = jule::new_struct<_104180810_Match>(new( std::nothrow ) _104180810_Match(_135417_d,true,jule::Slice<jule::Ref<_104180810_Case>>(),jule::Ref<_104180810_Case>()));
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_136417_tm)}));
	if (jule::real(_135340_m->_field_default)) {
		_136417_tm->_field_default=this->self->_method_check_default(_136417_tm,_135340_m->_field_default);
	}
	this->self->_method_check_cases(_135340_m,_136417_tm,_135417_d);
}



inline void _104180810_ScopeChecker::_method_check_common_match(jule::Ref<_1487f5920_MatchCase> _137742_m) {
	jule::Ref<_1191dc300_Data> _137817_d = jule::new_ref<_1191dc300_Data>();
	if ((!(jule::real(_137742_m->_field_expr)))) {
		_137817_d=jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_104c409b0_Const::_static_method_new_bool(true)));
		_137817_d->_field_model=jule::Any(_137817_d->_field_constant);
	} else {
		_137817_d=this->self->_field_s->_method_eval(_137742_m->_field_expr,this->self);
		if ((!(jule::real(_137817_d)))) {
			return;
		}
	}
	jule::Ref<_104180810_Match> _139217_mc = jule::new_struct<_104180810_Match>(new( std::nothrow ) _104180810_Match(_137817_d,jule::Bool(),jule::Slice<jule::Ref<_104180810_Case>>(),jule::Ref<_104180810_Case>()));
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_139217_mc)}));
	if (jule::real(_137742_m->_field_default)) {
		_139217_mc->_field_default=this->self->_method_check_default(_139217_mc,_137742_m->_field_default);
	}
	this->self->_method_check_cases(_137742_m,_139217_mc,_137817_d);
}



inline void _104180810_ScopeChecker::_method_check_match(jule::Ref<_1487f5920_MatchCase> _140435_m) {
	if (_140435_m->_field_type_match) {
		this->self->_method_check_type_match(_140435_m);
		return;
	}
	this->self->_method_check_common_match(_140435_m);
}



inline void _104180810_ScopeChecker::_method_check_fall(jule::Ref<_1487f5920_FallSt> _141229_f) {
	if (((*this)._field_cse == 0LL) || (((*this)._field_scope->_field_stmts.len() + 1LL) < (*this)._field_scope->_field_stmts.len())) {
		(*this)._field_s->_method_push_err(_141229_f->_field_token,jule::Str("fallthrough keyword can only useable at end of the case scopes", 62),jule::Slice<jule::Any>({}));
		return;
	}
	_104180810_Case* _141817__case = ((_104180810_Case*)((*this)._field_cse));
	if ((!(jule::real(_141817__case->_field_next)))) {
		(*this)._field_s->_method_push_err(_141229_f->_field_token,jule::Str("fallthrough cannot useable at final case", 40),jule::Slice<jule::Any>({}));
		(*this)._field_s->_method_push_suggestion(jule::Str("remove \"fall\" keyword", 21),jule::Slice<jule::Any>({}));
		return;
	}
	(*this)._field_scope->_field_stmts=jule::append((*this)._field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(jule::new_struct<_104180810_FallSt>(new( std::nothrow ) _104180810_FallSt(static_cast<jule::Uintptr>(((jule::Uintptr)((_141817__case->_field_next).alloc))))))}));
}



inline jule::Ref<_104180810_BreakSt> _104180810_ScopeChecker::_method_check_break_with_label(jule::Ref<_1487f5920_BreakSt> _143042_b) {
	jule::Ref<_104180810_BreakSt> _143117_brk = this->self->_method_check_plain_break(_143042_b);
	if ((!(jule::real(_143117_brk)))) {
		return jule::new_ref<_104180810_BreakSt>();
	}
	_143117_brk->_field_it=0LL;
	_143117_brk->_field_mtch=0LL;
	jule::Ref<_104180810_ScopeLabel> _144117_label = _104180810_find_label_parent(_143042_b->_field_label._field_kind,this->self->_field_parent);
	if ((!(jule::real(_144117_label)))) {
		this->self->_field_s->_method_push_err(_143042_b->_field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any(_143042_b->_field_label._field_kind)}));
		return jule::new_ref<_104180810_BreakSt>();
	}
	_144117_label->_field_used=true;
	if ((_144117_label->_field_pos + 1LL) >= _144117_label->_field_scope->_field_scope->_field_stmts.len()) {
		this->self->_field_s->_method_push_err(_143042_b->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
		return jule::new_ref<_104180810_BreakSt>();
	}
	jule::Int _145413_i = _144117_label->_field_pos + 1LL;
	if (_145413_i >= _144117_label->_field_scope->_field_scope->_field_stmts.len()) {
		this->self->_field_s->_method_push_err(_143042_b->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
	} else {
		jule::Any _145821_st = _144117_label->_field_scope->_field_scope->_field_stmts[static_cast<jule::Int>(_145413_i)];
		{
			auto _match_expr{ _145821_st };
			if (!(_match_expr.type_is<jule::Ref<_104180810_InfIter>>())) { goto _case_end_4391688080; }
			_case_begin_4391688080:;
			{
				_143117_brk->_field_it=((jule::Uintptr)((_145821_st.operator jule::Ref<_104180810_InfIter>()).alloc));
			}
			goto _match_end_4391679600;
			_case_end_4391688080:;
			if (!(_match_expr.type_is<jule::Ref<_104180810_RangeIter>>())) { goto _case_end_4391685792; }
			_case_begin_4391685792:;
			{
				_143117_brk->_field_it=((jule::Uintptr)((_145821_st.operator jule::Ref<_104180810_RangeIter>()).alloc));
			}
			goto _match_end_4391679600;
			_case_end_4391685792:;
			if (!(_match_expr.type_is<jule::Ref<_104180810_WhileIter>>())) { goto _case_end_4391685904; }
			_case_begin_4391685904:;
			{
				_143117_brk->_field_it=((jule::Uintptr)((_145821_st.operator jule::Ref<_104180810_WhileIter>()).alloc));
			}
			goto _match_end_4391679600;
			_case_end_4391685904:;
			if (!(_match_expr.type_is<jule::Ref<_104180810_Match>>())) { goto _case_end_4391686016; }
			_case_begin_4391686016:;
			{
				_143117_brk->_field_mtch=((jule::Uintptr)((_145821_st.operator jule::Ref<_104180810_Match>()).alloc));
			}
			goto _match_end_4391679600;
			_case_end_4391686016:;
			_case_begin_4391685392:;
			{
				this->self->_field_s->_method_push_err(_143042_b->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4391679600;
			_case_end_4391685392:;
			_match_end_4391679600:;
		}
	}
	if (_143117_brk->_field_it != 0LL) {
		if ((!(this->self->_method_check_valid_break_label(_143117_brk->_field_it)))) {
			this->self->_field_s->_method_push_err(_143042_b->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
		}
	}
	if (_143117_brk->_field_mtch != 0LL) {
		if ((!(this->self->_method_check_valid_break_label(_143117_brk->_field_mtch)))) {
			this->self->_field_s->_method_push_err(_143042_b->_field_label,jule::Str("invalid label", 13),jule::Slice<jule::Any>({}));
		}
	}
	return _143117_brk;
}



inline jule::Ref<_104180810_BreakSt> _104180810_ScopeChecker::_method_check_plain_break(jule::Ref<_1487f5920_BreakSt> _148337_b) {
	jule::Ref<_104180810_ScopeChecker> _148417_scope = this->self;
	_julec_label_iter:;
	{
		if (!(((((_148417_scope->_field_it == 0LL) && (_148417_scope->_field_cse == 0LL)) && jule::real(_148417_scope->_field_parent)) && (!(jule::real(_148417_scope->_field_owner)))))) { goto _case_end_4391705312; }
		_case_begin_4391705312:;
		{
			_148417_scope=_148417_scope->_field_parent;
			goto _julec_label_iter;
		}
		goto _match_end_4391705120;
		_case_end_4391705312:;
		if (!((_148417_scope->_field_it != 0LL))) { goto _case_end_4391705440; }
		_case_begin_4391705440:;
		{
			return jule::new_struct<_104180810_BreakSt>(new( std::nothrow ) _104180810_BreakSt(_148417_scope->_field_it,jule::Uintptr()));
		}
		goto _match_end_4391705120;
		_case_end_4391705440:;
		if (!((_148417_scope->_field_cse != 0LL))) { goto _case_end_4391705568; }
		_case_begin_4391705568:;
		{
			return jule::new_struct<_104180810_BreakSt>(new( std::nothrow ) _104180810_BreakSt(jule::Uintptr(),static_cast<jule::Uintptr>(((jule::Uintptr)((((_104180810_Case*)(_148417_scope->_field_cse))->_field_owner).alloc)))));
		}
		goto _match_end_4391705120;
		_case_end_4391705568:;
		_match_end_4391705120:;
	}
	this->self->_field_s->_method_push_err(_148337_b->_field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>({}));
	return jule::new_ref<_104180810_BreakSt>();
}



inline void _104180810_ScopeChecker::_method_check_break(jule::Ref<_1487f5920_BreakSt> _150231_b) {
	if (_150231_b->_field_label._field_id != 0LLU) {
		jule::Ref<_104180810_BreakSt> _150421_brk = this->self->_method_check_break_with_label(_150231_b);
		this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_150421_brk)}));
		return;
	}
	jule::Ref<_104180810_BreakSt> _150917_brk = this->self->_method_check_plain_break(_150231_b);
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_150917_brk)}));
}



inline void _104180810_ScopeChecker::_method_check_ret(jule::Ref<_1487f5920_RetSt> _151333_r) {
	jule::Ref<_104180810_RetSt> _151417_rt = jule::new_struct<_104180810_RetSt>(new( std::nothrow ) _104180810_RetSt());
	this->self->_field_scope->_field_stmts=jule::append(this->self->_field_scope->_field_stmts,jule::Slice<jule::Any>({jule::Any(_151417_rt)}));
	jule::Ref<_1044463d0_RetTypeChecker> _151717_rtc = jule::new_struct<_1044463d0_RetTypeChecker>(new( std::nothrow ) _1044463d0_RetTypeChecker(this->self,this->self->_method_get_root()->_field_owner,jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1487f5920_Expr>>(),jule::Slice<jule::Ref<_104598e40_Var>>(),_151333_r->_field_token,jule::Any()));
	jule::Bool _152213_ok = _151717_rtc->_method_check(_151333_r->_field_expr);
	if ((!(_152213_ok))) {
		return;
	}
	if ((!(jule::real(_151333_r->_field_expr))) && (_151717_rtc->_field_vars.len() == 0LL)) {
		return;
	}
	_151417_rt->_field_vars=_151717_rtc->_field_vars;
	if (jule::real(_151333_r->_field_expr)) {
		_151417_rt->_field_expr=_151717_rtc->_field_model;
	}
}



inline void _104180810_ScopeChecker::_method_check_node(jule::Any _153834_node) {
	{
		auto _match_expr{ _153834_node };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_Comment>>())) { goto _case_end_4391748384; }
		_case_begin_4391748384:;
		{
			goto _match_end_4391747168;
		}
		goto _match_end_4391747168;
		_case_end_4391748384:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_ScopeTree>>())) { goto _case_end_4391748096; }
		_case_begin_4391748096:;
		{
			this->self->_method_check_anon_scope(_153834_node.operator jule::Ref<_1487f5920_ScopeTree>());
		}
		goto _match_end_4391747168;
		_case_end_4391748096:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_VarDecl>>())) { goto _case_end_4391748576; }
		_case_begin_4391748576:;
		{
			this->self->_method_check_var_decl(_153834_node.operator jule::Ref<_1487f5920_VarDecl>());
		}
		goto _match_end_4391747168;
		_case_end_4391748576:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_TypeAliasDecl>>())) { goto _case_end_4391749088; }
		_case_begin_4391749088:;
		{
			this->self->_method_check_type_alias_decl(_153834_node.operator jule::Ref<_1487f5920_TypeAliasDecl>());
		}
		goto _match_end_4391747168;
		_case_end_4391749088:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_Expr>>())) { goto _case_end_4391749632; }
		_case_begin_4391749632:;
		{
			this->self->_method_check_expr(_153834_node.operator jule::Ref<_1487f5920_Expr>());
		}
		goto _match_end_4391747168;
		_case_end_4391749632:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_Conditional>>())) { goto _case_end_4391749744; }
		_case_begin_4391749744:;
		{
			this->self->_method_check_conditional(_153834_node.operator jule::Ref<_1487f5920_Conditional>());
		}
		goto _match_end_4391747168;
		_case_end_4391749744:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_Iter>>())) { goto _case_end_4391749856; }
		_case_begin_4391749856:;
		{
			this->self->_method_check_iter(_153834_node.operator jule::Ref<_1487f5920_Iter>());
		}
		goto _match_end_4391747168;
		_case_end_4391749856:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_ContSt>>())) { goto _case_end_4391749968; }
		_case_begin_4391749968:;
		{
			this->self->_method_check_cont(_153834_node.operator jule::Ref<_1487f5920_ContSt>());
		}
		goto _match_end_4391747168;
		_case_end_4391749968:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_LabelSt>>())) { goto _case_end_4391750080; }
		_case_begin_4391750080:;
		{
			this->self->_method_check_label(_153834_node.operator jule::Ref<_1487f5920_LabelSt>());
		}
		goto _match_end_4391747168;
		_case_end_4391750080:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_GotoSt>>())) { goto _case_end_4391750192; }
		_case_begin_4391750192:;
		{
			this->self->_method_push_goto(_153834_node.operator jule::Ref<_1487f5920_GotoSt>());
		}
		goto _match_end_4391747168;
		_case_end_4391750192:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_AssignSt>>())) { goto _case_end_4391750304; }
		_case_begin_4391750304:;
		{
			this->self->_method_check_assign_st(_153834_node.operator jule::Ref<_1487f5920_AssignSt>());
		}
		goto _match_end_4391747168;
		_case_end_4391750304:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_MatchCase>>())) { goto _case_end_4391750416; }
		_case_begin_4391750416:;
		{
			this->self->_method_check_match(_153834_node.operator jule::Ref<_1487f5920_MatchCase>());
		}
		goto _match_end_4391747168;
		_case_end_4391750416:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_FallSt>>())) { goto _case_end_4391750528; }
		_case_begin_4391750528:;
		{
			this->self->_method_check_fall(_153834_node.operator jule::Ref<_1487f5920_FallSt>());
		}
		goto _match_end_4391747168;
		_case_end_4391750528:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_BreakSt>>())) { goto _case_end_4391750640; }
		_case_begin_4391750640:;
		{
			this->self->_method_check_break(_153834_node.operator jule::Ref<_1487f5920_BreakSt>());
		}
		goto _match_end_4391747168;
		_case_end_4391750640:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_RetSt>>())) { goto _case_end_4391750752; }
		_case_begin_4391750752:;
		{
			this->self->_method_check_ret(_153834_node.operator jule::Ref<_1487f5920_RetSt>());
		}
		goto _match_end_4391747168;
		_case_end_4391750752:;
		_case_begin_4391747344:;
		{
			jule::outln(jule::Str("error <unimplemented scope node>", 32));
		}
		goto _match_end_4391747168;
		_case_end_4391747344:;
		_match_end_4391747168:;
	}
}



inline void _104180810_ScopeChecker::_method_check_tree(void) {
	{
		auto __julec_range_expr = this->self->_field_tree->_field_stmts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _104180810_stmt = *__julec_range_begin;
			_iter_begin_4391778560:;
			{
				this->self->_method_check_node(_104180810_stmt);
			}
			_iter_next_4391778560:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104180810_stmt = *__julec_range_begin; goto _iter_begin_4391778560; }
			_iter_end_4391778560:;
		}
	}
}



inline void _104180810_ScopeChecker::_method_check_same_scope_goto(jule::Ref<_104180810_ScopeGoto> _156540_gt,jule::Ref<_104180810_ScopeLabel> _156560_label) {
	if (_156560_label->_field_pos < _156540_gt->_field_pos) {
		return;
	}
	jule::Int _157017_i = _156560_label->_field_pos;
	_iter_begin_4391784304:;
	if (!(_157017_i > _156540_gt->_field_pos)) { goto _iter_end_4391784304; }
	{
		jule::Any _157217_stmt = _156560_label->_field_scope->_field_scope->_field_stmts[static_cast<jule::Int>(_157017_i)];
		if (_104180810_st_is_def(_157217_stmt)) {
			(*this)._field_s->_method_push_err(_156540_gt->_field_gt->_field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any(_156540_gt->_field_gt->_field_label._field_kind)}));
			goto _iter_end_4391784304;
		}
	}
	_iter_next_4391784304:;
	(_157017_i)--;
	goto _iter_begin_4391784304;
	_iter_end_4391784304:;
}



inline jule::Bool _104180810_ScopeChecker::_method_check_label_parents(jule::Ref<_104180810_ScopeGoto> _158038_gt,jule::Ref<_104180810_ScopeLabel> _158058_label) {
	jule::Ref<_104180810_ScopeChecker> _158117_scope = _158058_label->_field_scope;
	_julec_label_parent_scopes:;
	if (jule::real(_158117_scope->_field_parent) && ((_158117_scope->_field_parent).alloc != (_158038_gt->_field_scope).alloc)) {
		_158117_scope=_158117_scope->_field_parent;
		{
			auto __julec_range_expr = _158117_scope->_field_scope->_field_stmts;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _104180810_i = 0;
				jule::Any _104180810_stmt = *__julec_range_begin;
				_iter_begin_4391799456:;
				{
					{
						if (!((_104180810_i >= _158058_label->_field_pos))) { goto _case_end_4391801936; }
						_case_begin_4391801936:;
						{
							return true;
						}
						goto _match_end_4391801744;
						_case_end_4391801936:;
						if (!((_104180810_st_is_def(_104180810_stmt)))) { goto _case_end_4391802064; }
						_case_begin_4391802064:;
						{
							(*this)._field_s->_method_push_err(_158038_gt->_field_gt->_field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any(_158038_gt->_field_gt->_field_label._field_kind)}));
							return false;
						}
						goto _match_end_4391801744;
						_case_end_4391802064:;
						_match_end_4391801744:;
					}
				}
				_iter_next_4391799456:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_104180810_i; _104180810_stmt = *__julec_range_begin; goto _iter_begin_4391799456; }
				_iter_end_4391799456:;
			}
		}
		goto _julec_label_parent_scopes;
	}
	return true;
}



inline void _104180810_ScopeChecker::_method_check_goto_scope(jule::Ref<_104180810_ScopeGoto> _160339_gt,jule::Ref<_104180810_ScopeLabel> _160355_label) {
	jule::Int _160417_i = _160339_gt->_field_pos;
	_iter_begin_4391812400:;
	if (!(_160417_i < _160339_gt->_field_scope->_field_scope->_field_stmts.len())) { goto _iter_end_4391812400; }
	{
		{
			if (!((_160417_i >= _160355_label->_field_pos))) { goto _case_end_4391814208; }
			_case_begin_4391814208:;
			{
				return;
			}
			goto _match_end_4391814016;
			_case_end_4391814208:;
			if (!((_104180810_st_is_def(_160339_gt->_field_scope->_field_scope->_field_stmts[static_cast<jule::Int>(_160417_i)])))) { goto _case_end_4391814336; }
			_case_begin_4391814336:;
			{
				(*this)._field_s->_method_push_err(_160339_gt->_field_gt->_field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any(_160339_gt->_field_gt->_field_label._field_kind)}));
				return;
			}
			goto _match_end_4391814016;
			_case_end_4391814336:;
			_match_end_4391814016:;
		}
	}
	_iter_next_4391812400:;
	(_160417_i)++;
	goto _iter_begin_4391812400;
	_iter_end_4391812400:;
}



inline void _104180810_ScopeChecker::_method_check_diff_scope_goto(jule::Ref<_104180810_ScopeGoto> _161744_gt,jule::Ref<_104180810_ScopeLabel> _161764_label) {
	{
		if (!(((_161764_label->_field_scope->_field_child_index > 0LL) && (_161744_gt->_field_scope->_field_child_index == 0LL)))) { goto _case_end_4391824192; }
		_case_begin_4391824192:;
		{
			if ((!((*this)._method_check_label_parents(_161744_gt,_161764_label)))) {
				return;
			}
		}
		goto _match_end_4391823984;
		_case_end_4391824192:;
		if (!((_161764_label->_field_scope->_field_child_index < _161744_gt->_field_scope->_field_child_index))) { goto _case_end_4391824320; }
		_case_begin_4391824320:;
		{
			return;
		}
		goto _match_end_4391823984;
		_case_end_4391824320:;
		_match_end_4391823984:;
	}
	jule::Ref<_104180810_ScopeChecker> _162817_scope = _161764_label->_field_scope;
	jule::Int _162917_i = _161764_label->_field_pos - 1LL;
	_iter_begin_4391830016:;
	if (!(_162917_i >= 0LL)) { goto _iter_end_4391830016; }
	{
		jule::Any _163117_s = _162817_scope->_field_scope->_field_stmts[static_cast<jule::Int>(_162917_i)];
		{
			auto _match_expr{ _163117_s };
			if (!(_match_expr.type_is<jule::Ref<_104180810_Scope>>())) { goto _case_end_4391834080; }
			_case_begin_4391834080:;
			{
				if (_162917_i <= _161744_gt->_field_pos) {
					return;
				}
			}
			goto _match_end_4391832176;
			_case_end_4391834080:;
			_match_end_4391832176:;
		}
		if (_104180810_st_is_def(_163117_s)) {
			(*this)._field_s->_method_push_err(_161744_gt->_field_gt->_field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any(_161744_gt->_field_gt->_field_label._field_kind)}));
			goto _iter_end_4391830016;
		}
	}
	_iter_next_4391830016:;
	(_162917_i)--;
	goto _iter_begin_4391830016;
	_iter_end_4391830016:;
	if (jule::real(_162817_scope->_field_parent) && ((_162817_scope->_field_parent).alloc != (_161744_gt->_field_scope).alloc)) {
		(*this)._method_check_label_parents(_161744_gt,_161764_label);
	} else {
		(*this)._method_check_goto_scope(_161744_gt,_161764_label);
	}
}



inline void _104180810_ScopeChecker::_method_check_goto(jule::Ref<_104180810_ScopeGoto> _165333_gt,jule::Ref<_104180810_ScopeLabel> _165353_label) {
	{
		if (!(((_165333_gt->_field_scope).alloc == (_165353_label->_field_scope).alloc))) { goto _case_end_4391845808; }
		_case_begin_4391845808:;
		{
			(*this)._method_check_same_scope_goto(_165333_gt,_165353_label);
		}
		goto _match_end_4391845600;
		_case_end_4391845808:;
		if (!((_165353_label->_field_scope->_field_child_index > 0LL))) { goto _case_end_4391845936; }
		_case_begin_4391845936:;
		{
			(*this)._method_check_diff_scope_goto(_165333_gt,_165353_label);
		}
		goto _match_end_4391845600;
		_case_end_4391845936:;
		_match_end_4391845600:;
	}
}



inline void _104180810_ScopeChecker::_method_check_gotos(void) {
	{
		auto __julec_range_expr = (*this)._field_gotos.get();
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104180810_ScopeGoto> _104180810_gt = *__julec_range_begin;
			_iter_begin_4391851392:;
			{
				jule::Ref<_104180810_ScopeLabel> _166521_label = (*this)._method_find_label_all(_104180810_gt->_field_gt->_field_label._field_kind);
				if ((!(jule::real(_166521_label)))) {
					(*this)._field_s->_method_push_err(_104180810_gt->_field_gt->_field_token,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any(_104180810_gt->_field_gt->_field_label._field_kind)}));
					goto _iter_next_4391851392;
				}
				_166521_label->_field_used=true;
				(*this)._method_check_goto(_104180810_gt,_166521_label);
			}
			_iter_next_4391851392:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104180810_gt = *__julec_range_begin; goto _iter_begin_4391851392; }
			_iter_end_4391851392:;
		}
	}
}



inline void _104180810_ScopeChecker::_method_check_labels(void) {
	{
		auto __julec_range_expr = (*this)._field_labels.get();
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104180810_ScopeLabel> _104180810_l = *__julec_range_begin;
			_iter_begin_4391862128:;
			{
				if ((!(_104180810_l->_field_used))) {
					(*this)._field_s->_method_push_err(_104180810_l->_field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any(_104180810_l->_field_label->_field_ident)}));
				}
			}
			_iter_next_4391862128:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104180810_l = *__julec_range_begin; goto _iter_begin_4391862128; }
			_iter_end_4391862128:;
		}
	}
}



inline void _104180810_ScopeChecker::_method_check_vars(void) {
	{
		auto __julec_range_expr = (*this)._field_table->_field_vars;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104598e40_Var> _104180810_v = *__julec_range_begin;
			_iter_begin_4391867824:;
			{
				if ((((!(_104180810_v->_field_used)) && (!(_108e15ff0_is_ignore_ident(_104180810_v->_field_ident)))) && (!(_108e15ff0_is_anon_ident(_104180810_v->_field_ident)))) && (_104180810_v->_field_ident != jule::Str("self", 4))) {
					(*this)._field_s->_method_push_err(_104180810_v->_field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any(_104180810_v->_field_ident)}));
				}
			}
			_iter_next_4391867824:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104180810_v = *__julec_range_begin; goto _iter_begin_4391867824; }
			_iter_end_4391867824:;
		}
	}
}



inline void _104180810_ScopeChecker::_method_check_aliases(void) {
	{
		auto __julec_range_expr = (*this)._field_table->_field_type_aliases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104a21a10_TypeAlias> _104180810_a = *__julec_range_begin;
			_iter_begin_4391875808:;
			{
				if (((!(_104180810_a->_field_used)) && (!(_108e15ff0_is_ignore_ident(_104180810_a->_field_ident)))) && (!(_108e15ff0_is_anon_ident(_104180810_a->_field_ident)))) {
					(*this)._field_s->_method_push_err(_104180810_a->_field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any(_104180810_a->_field_ident)}));
				}
			}
			_iter_next_4391875808:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104180810_a = *__julec_range_begin; goto _iter_begin_4391875808; }
			_iter_end_4391875808:;
		}
	}
}



inline void _104180810_ScopeChecker::_method_check(jule::Ref<_1487f5920_ScopeTree> _170129_tree,jule::Ref<_104180810_Scope> _170151_s) {
	_170151_s->_field_deferred=_170129_tree->_field_deferred;
	_170151_s->_field_unsafety=_170129_tree->_field_unsafety;
	jule::I64 _170513_errors = this->self->_field_s->_field_errors.len();
	this->self->_field_tree=_170129_tree;
	this->self->_field_scope=_170151_s;
	this->self->_method_check_tree();
	if (_170513_errors == this->self->_field_s->_field_errors.len()) {
		this->self->_method_check_vars();
		this->self->_method_check_aliases();
	}
	if (this->self->_method_is_root()) {
		this->self->_method_check_gotos();
		this->self->_method_check_labels();
	}
}



inline jule::Ref<_104180810_ScopeChecker> _104180810_ScopeChecker::_method_new_child_checker(void) {
	jule::Ref<_104180810_ScopeChecker> _172517_base = _104180810_new_scope_checker_base(this->self->_field_s,jule::new_ref<_1037649f0_FnIns>());
	_172517_base->_field_parent=this->self;
	_172517_base->_field_labels=this->self->_field_labels;
	_172517_base->_field_gotos=this->self->_field_gotos;
	_172517_base->_field_child_index=static_cast<jule::Int>(this->self->_field_child_index + 1LL);
	return _172517_base;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_ScopeChecker &_Src) {
	_Stream << "ScopeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "child_index:" << _Src._field_child_index << ", ";
	_Stream << "table:" << _Src._field_table << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "tree:" << _Src._field_tree << ", ";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "cse:" << _Src._field_cse << ", ";
	_Stream << "labels:" << _Src._field_labels << ", ";
	_Stream << "gotos:" << _Src._field_gotos << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_BinopExprModel &_Src) {
	_Stream << "BinopExprModel{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_UnaryExprModel &_Src) {
	_Stream << "UnaryExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_GetRefPtrExprModel &_Src) {
	_Stream << "GetRefPtrExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_StructArgExprModel &_Src) {
	_Stream << "StructArgExprModel{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_StructLitExprModel &_Src) {
	_Stream << "StructLitExprModel{";
	_Stream << "strct:" << _Src._field_strct << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_AllocStructLitExprModel &_Src) {
	_Stream << "AllocStructLitExprModel{";
	_Stream << "lit:" << _Src._field_lit;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_CastingExprModel &_Src) {
	_Stream << "CastingExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_FnCallExprModel &_Src) {
	_Stream << "FnCallExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "is_co:" << _Src._field_is_co << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_SliceExprModel &_Src) {
	_Stream << "SliceExprModel{";
	_Stream << "elem_kind:" << _Src._field_elem_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_IndexigExprModel &_Src) {
	_Stream << "IndexigExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_AnonFnExprModel &_Src) {
	_Stream << "AnonFnExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "global:" << _Src._field_global;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_KeyValPairExprModel &_Src) {
	_Stream << "KeyValPairExprModel{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_MapExprModel &_Src) {
	_Stream << "MapExprModel{";
	_Stream << "key_kind:" << _Src._field_key_kind << ", ";
	_Stream << "val_kind:" << _Src._field_val_kind << ", ";
	_Stream << "entries:" << _Src._field_entries;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_SlicingExprModel &_Src) {
	_Stream << "SlicingExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_TraitSubIdentExprModel &_Src) {
	_Stream << "TraitSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_StructSubIdentExprModel &_Src) {
	_Stream << "StructSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "method:" << _Src._field_method << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_StructStaticIdentExprModel &_Src) {
	_Stream << "StructStaticIdentExprModel{";
	_Stream << "structure:" << _Src._field_structure << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "method:" << _Src._field_method;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_ArrayExprModel &_Src) {
	_Stream << "ArrayExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_CommonIdentExprModel &_Src) {
	_Stream << "CommonIdentExprModel{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_CommonSubIdentExprModel &_Src) {
	_Stream << "CommonSubIdentExprModel{";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_TupleExprModel &_Src) {
	_Stream << "TupleExprModel{";
	_Stream << "datas:" << _Src._field_datas;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_BuiltinOutCallExprModel &_Src) {
	_Stream << "BuiltinOutCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_BuiltinOutlnCallExprModel &_Src) {
	_Stream << "BuiltinOutlnCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_BuiltinCloneCallExprModel &_Src) {
	_Stream << "BuiltinCloneCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_BuiltinNewCallExprModel &_Src) {
	_Stream << "BuiltinNewCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "init:" << _Src._field_init;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_BuiltinRealCallExprModel &_Src) {
	_Stream << "BuiltinRealCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_BuiltinDropCallExprModel &_Src) {
	_Stream << "BuiltinDropCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_BuiltinPanicCallExprModel &_Src) {
	_Stream << "BuiltinPanicCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_BuiltinMakeCallExprModel &_Src) {
	_Stream << "BuiltinMakeCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "len:" << _Src._field_len << ", ";
	_Stream << "cap:" << _Src._field_cap;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_BuiltinAppendCallExprModel &_Src) {
	_Stream << "BuiltinAppendCallExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "elements:" << _Src._field_elements;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_BuiltinErrorTraitSubIdentExprModel &_Src) {
	_Stream << "BuiltinErrorTraitSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_SizeofExprModel &_Src) {
	_Stream << "SizeofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_AlignofExprModel &_Src) {
	_Stream << "AlignofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_RuneExprModel &_Src) {
	_Stream << "RuneExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11911f320_ExplicitDerefExprModel &_Src) {
	_Stream << "ExplicitDerefExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_119162660_ImportInfo> _119162660_Package::_method_find_package(jule::Str ) {
	return jule::new_ref<_119162660_ImportInfo>();
}



inline jule::Ref<_119162660_ImportInfo> _119162660_Package::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)> ) {
	return jule::new_ref<_119162660_ImportInfo>();
}



inline jule::Ref<_104598e40_Var> _119162660_Package::_method_find_var(jule::Str _26631_ident,jule::Bool _26643_cpp_linked) {
	return _119162660_find_var_in_package((*this)._field_files,_26631_ident,_26643_cpp_linked);
}



inline jule::Ref<_104a21a10_TypeAlias> _119162660_Package::_method_find_type_alias(jule::Str _27238_ident,jule::Bool _27250_cpp_linked) {
	return _119162660_find_type_alias_in_package((*this)._field_files,_27238_ident,_27250_cpp_linked);
}



inline jule::Ref<_1037370d0_Struct> _119162660_Package::_method_find_struct(jule::Str _27834_ident,jule::Bool _27846_cpp_linked) {
	return _119162660_find_struct_in_package((*this)._field_files,_27834_ident,_27846_cpp_linked);
}



inline jule::Ref<_1037649f0_Fn> _119162660_Package::_method_find_fn(jule::Str _28430_ident,jule::Bool _28442_cpp_linked) {
	return _119162660_find_fn_in_package((*this)._field_files,_28430_ident,_28442_cpp_linked);
}



inline jule::Ref<_1036e5da0_Trait> _119162660_Package::_method_find_trait(jule::Str _29033_ident) {
	return _119162660_find_trait_in_package((*this)._field_files,_29033_ident);
}



inline jule::Ref<_1036dad50_Enum> _119162660_Package::_method_find_enum(jule::Str _29632_ident) {
	return _119162660_find_enum_in_package((*this)._field_files,_29632_ident);
}







std::ostream &operator<<(std::ostream &_Stream, const _119162660_Package &_Src) {
	_Stream << "Package{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_119162660_ImportInfo> _119177e90_Sema::_method_find_package(jule::Str _30535_ident) {
	return (*this)._field_file->_method_find_package(_30535_ident);
}



inline jule::Ref<_119162660_ImportInfo> _119177e90_Sema::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)> _31537_selector) {
	return (*this)._field_file->_method_select_package(_31537_selector);
}



inline jule::Ref<_104598e40_Var> _119177e90_Sema::_method_find_var(jule::Str _32531_ident,jule::Bool _32543_cpp_linked) {
	jule::Ref<_104598e40_Var> _32717_v = _119162660_find_var_in_package((*this)._field_files,_32531_ident,_32543_cpp_linked);
	if (jule::real(_32717_v)) {
		return _32717_v;
	}
	{
		auto __julec_range_expr = (*this)._field_file->_field_imports;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _119177e90_imp = *__julec_range_begin;
			_iter_begin_4391992064:;
			{
				if ((!(_119177e90_imp_is_lookupable(_119177e90_imp,_32531_ident)))) {
					goto _iter_next_4391992064;
				}
				jule::Ref<_104598e40_Var> _33721_v = _119177e90_imp->_method_find_var(_32531_ident,_32543_cpp_linked);
				if (jule::real(_33721_v) && (*this)._method_is_accessible_define(_33721_v->_field_public,_33721_v->_field_token)) {
					return _33721_v;
				}
			}
			_iter_next_4391992064:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_imp = *__julec_range_begin; goto _iter_begin_4391992064; }
			_iter_end_4391992064:;
		}
	}
	return jule::new_ref<_104598e40_Var>();
}



inline jule::Ref<_104a21a10_TypeAlias> _119177e90_Sema::_method_find_type_alias(jule::Str _35238_ident,jule::Bool _35250_cpp_linked) {
	jule::Ref<_104a21a10_TypeAlias> _35417_ta = _119162660_find_type_alias_in_package((*this)._field_files,_35238_ident,_35250_cpp_linked);
	if (jule::real(_35417_ta)) {
		return _35417_ta;
	}
	{
		auto __julec_range_expr = (*this)._field_file->_field_imports;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _119177e90_imp = *__julec_range_begin;
			_iter_begin_4392004704:;
			{
				if ((!(_119177e90_imp_is_lookupable(_119177e90_imp,_35238_ident)))) {
					goto _iter_next_4392004704;
				}
				jule::Ref<_104a21a10_TypeAlias> _36421_ta = _119177e90_imp->_method_find_type_alias(_35238_ident,_35250_cpp_linked);
				if (jule::real(_36421_ta) && (*this)._method_is_accessible_define(_36421_ta->_field_public,_36421_ta->_field_token)) {
					return _36421_ta;
				}
			}
			_iter_next_4392004704:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_imp = *__julec_range_begin; goto _iter_begin_4392004704; }
			_iter_end_4392004704:;
		}
	}
	return jule::new_ref<_104a21a10_TypeAlias>();
}



inline jule::Ref<_1037370d0_Struct> _119177e90_Sema::_method_find_struct(jule::Str _37934_ident,jule::Bool _37946_cpp_linked) {
	jule::Ref<_1037370d0_Struct> _38117_strct = _119162660_find_struct_in_package((*this)._field_files,_37934_ident,_37946_cpp_linked);
	if (jule::real(_38117_strct)) {
		return _38117_strct;
	}
	{
		auto __julec_range_expr = (*this)._field_file->_field_imports;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _119177e90_imp = *__julec_range_begin;
			_iter_begin_4392015552:;
			{
				if ((!(_119177e90_imp_is_lookupable(_119177e90_imp,_37934_ident)))) {
					goto _iter_next_4392015552;
				}
				jule::Ref<_1037370d0_Struct> _39121_strct = _119177e90_imp->_method_find_struct(_37934_ident,_37946_cpp_linked);
				if (jule::real(_39121_strct) && (*this)._method_is_accessible_define(_39121_strct->_field_public,_39121_strct->_field_token)) {
					return _39121_strct;
				}
			}
			_iter_next_4392015552:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_imp = *__julec_range_begin; goto _iter_begin_4392015552; }
			_iter_end_4392015552:;
		}
	}
	return jule::new_ref<_1037370d0_Struct>();
}



inline jule::Ref<_1037649f0_Fn> _119177e90_Sema::_method_find_fn(jule::Str _40630_ident,jule::Bool _40642_cpp_linked) {
	jule::Ref<_1037649f0_Fn> _40817_f = _119162660_find_fn_in_package((*this)._field_files,_40630_ident,_40642_cpp_linked);
	if (jule::real(_40817_f)) {
		return _40817_f;
	}
	{
		auto __julec_range_expr = (*this)._field_file->_field_imports;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _119177e90_imp = *__julec_range_begin;
			_iter_begin_4392026560:;
			{
				if ((!(_119177e90_imp_is_lookupable(_119177e90_imp,_40630_ident)))) {
					goto _iter_next_4392026560;
				}
				jule::Ref<_1037649f0_Fn> _41821_f = _119177e90_imp->_method_find_fn(_40630_ident,_40642_cpp_linked);
				if (jule::real(_41821_f) && (*this)._method_is_accessible_define(_41821_f->_field_public,_41821_f->_field_token)) {
					return _41821_f;
				}
			}
			_iter_next_4392026560:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_imp = *__julec_range_begin; goto _iter_begin_4392026560; }
			_iter_end_4392026560:;
		}
	}
	return jule::new_ref<_1037649f0_Fn>();
}



inline jule::Ref<_1036e5da0_Trait> _119177e90_Sema::_method_find_trait(jule::Str _43333_ident) {
	jule::Ref<_1036e5da0_Trait> _43517_t = _119162660_find_trait_in_package((*this)._field_files,_43333_ident);
	if (jule::real(_43517_t)) {
		return _43517_t;
	}
	{
		auto __julec_range_expr = (*this)._field_file->_field_imports;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _119177e90_imp = *__julec_range_begin;
			_iter_begin_4392036976:;
			{
				if ((!(_119177e90_imp_is_lookupable(_119177e90_imp,_43333_ident)))) {
					goto _iter_next_4392036976;
				}
				jule::Ref<_1036e5da0_Trait> _44521_t = _119177e90_imp->_method_find_trait(_43333_ident);
				if (jule::real(_44521_t) && (*this)._method_is_accessible_define(_44521_t->_field_public,_44521_t->_field_token)) {
					return _44521_t;
				}
			}
			_iter_next_4392036976:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_imp = *__julec_range_begin; goto _iter_begin_4392036976; }
			_iter_end_4392036976:;
		}
	}
	return jule::new_ref<_1036e5da0_Trait>();
}



inline jule::Ref<_1036dad50_Enum> _119177e90_Sema::_method_find_enum(jule::Str _46032_ident) {
	jule::Ref<_1036dad50_Enum> _46217_e = _119162660_find_enum_in_package((*this)._field_files,_46032_ident);
	if (jule::real(_46217_e)) {
		return _46217_e;
	}
	{
		auto __julec_range_expr = (*this)._field_file->_field_imports;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _119177e90_imp = *__julec_range_begin;
			_iter_begin_4392047168:;
			{
				if ((!(_119177e90_imp_is_lookupable(_119177e90_imp,_46032_ident)))) {
					goto _iter_next_4392047168;
				}
				jule::Ref<_1036dad50_Enum> _47221_e = _119177e90_imp->_method_find_enum(_46032_ident);
				if (jule::real(_47221_e) && (*this)._method_is_accessible_define(_47221_e->_field_public,_47221_e->_field_token)) {
					return _47221_e;
				}
			}
			_iter_next_4392047168:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_imp = *__julec_range_begin; goto _iter_begin_4392047168; }
			_iter_end_4392047168:;
		}
	}
	return jule::new_ref<_1036dad50_Enum>();
}



inline void _119177e90_Sema::_method_set_current_file(jule::Ref<_1191dcd40_SymbolTable> _48339_f) {
	(*this)._field_file=_48339_f;
}



inline void _119177e90_Sema::_method_push_err(_108e15ff0_Token _48527_token,jule::Str _48541_fmt,jule::Slice<jule::Any> _48554_args) {
	(*this)._field_errors=jule::append((*this)._field_errors,jule::Slice<_1486379e0_Log>({_119177e90_compiler_err(_48527_token,true,_48541_fmt,_48554_args)}));
}



inline void _119177e90_Sema::_method_push_suggestion(jule::Str _49034_fmt,jule::Slice<jule::Any> _49047_args) {
	{
		_119177e90_push_suggestion((&((*this)._field_errors[static_cast<jule::Int>((*this)._field_errors.len() - 1LL)])),_49034_fmt,_49047_args);
	}
}



inline jule::Bool _119177e90_Sema::_method_is_accessible_define(jule::Bool _49535_public,_108e15ff0_Token _49549_token) {
	return (_49535_public || (!(jule::real(_49549_token._field_file)))) || ((*this)._field_file->_field_file->_method_dir() == _49549_token._field_file->_method_dir());
}



inline jule::Bool _119177e90_Sema::_method_is_duplicated_ident(jule::Uintptr _50234_itself,jule::Str _50251_ident,jule::Bool _50263_cpp_linked) {
	{
		auto __julec_range_expr = (*this)._field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4392075344:;
			{
				if (_119177e90_f->_method_is_duplicated_ident(_50234_itself,_50251_ident,_50263_cpp_linked)) {
					return true;
				}
				{
					auto __julec_range_expr = _119177e90_f->_field_imports;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_119162660_ImportInfo> _119177e90_imp = *__julec_range_begin;
						_iter_begin_4392080096:;
						{
							{
								auto __julec_range_expr = _119177e90_imp->_field_selected;
								if (__julec_range_expr.begin() != __julec_range_expr.end()) {
									auto __julec_range_begin = __julec_range_expr.begin();
									const auto __julec_range_end = __julec_range_expr.end();
									_108e15ff0_Token _119177e90_selected = *__julec_range_begin;
									_iter_begin_4392081968:;
									{
										if (_119177e90_selected._field_kind == _50251_ident) {
											return true;
										}
									}
									_iter_next_4392081968:;
									++__julec_range_begin;
									if (__julec_range_begin != __julec_range_end) { _119177e90_selected = *__julec_range_begin; goto _iter_begin_4392081968; }
									_iter_end_4392081968:;
								}
							}
						}
						_iter_next_4392080096:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _119177e90_imp = *__julec_range_begin; goto _iter_begin_4392080096; }
						_iter_end_4392080096:;
					}
				}
			}
			_iter_next_4392075344:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4392075344; }
			_iter_end_4392075344:;
		}
	}
	return false;
}



inline jule::Bool _119177e90_Sema::_method_check_generic_quantity(jule::Int _51941_required,jule::Int _51956_given,_108e15ff0_Token _51968_error_token) {
	jule::Bool _51990_ok = jule::Bool();
	{
		if (!(((_51941_required == 0LL) && (_51956_given > 0LL)))) { goto _case_end_4392088912; }
		_case_begin_4392088912:;
		{
			(*this)._method_push_err(_51968_error_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
			_51990_ok = false;
			return _51990_ok;
		}
		goto _match_end_4392087792;
		_case_end_4392088912:;
		if (!(((_51941_required > 0LL) && (_51956_given == 0LL)))) { goto _case_end_4392089024; }
		_case_begin_4392089024:;
		{
			(*this)._method_push_err(_51968_error_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>({}));
			_51990_ok = false;
			return _51990_ok;
		}
		goto _match_end_4392087792;
		_case_end_4392089024:;
		if (!((_51941_required < _51956_given))) { goto _case_end_4392089136; }
		_case_begin_4392089136:;
		{
			(*this)._method_push_err(_51968_error_token,jule::Str("overflow generics", 17),jule::Slice<jule::Any>({}));
			_51990_ok = false;
			return _51990_ok;
		}
		goto _match_end_4392087792;
		_case_end_4392089136:;
		if (!((_51941_required > _51956_given))) { goto _case_end_4392088208; }
		_case_begin_4392088208:;
		{
			(*this)._method_push_err(_51968_error_token,jule::Str("missing generics", 16),jule::Slice<jule::Any>({}));
			_51990_ok = false;
			return _51990_ok;
		}
		goto _match_end_4392087792;
		_case_end_4392088208:;
		_case_begin_4392087904:;
		{
			_51990_ok = true;
			return _51990_ok;
		}
		goto _match_end_4392087792;
		_case_end_4392087904:;
		_match_end_4392087792:;
	}
}



inline jule::Bool _119177e90_Sema::_method_is_duplicated_import_selection(jule::Uintptr _54245_itself,jule::Str _54262_ident) {
	{
		auto __julec_range_expr = (*this)._field_file->_field_imports;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _119177e90_imp = *__julec_range_begin;
			_iter_begin_4392100512:;
			{
				if (((jule::Uintptr)((_119177e90_imp).alloc)) == _54245_itself) {
					goto _iter_end_4392100512;
				}
				if (_119177e90_imp->_method_exist_ident(_54262_ident)) {
					return true;
				}
			}
			_iter_next_4392100512:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_imp = *__julec_range_begin; goto _iter_begin_4392100512; }
			_iter_end_4392100512:;
		}
	}
	return false;
}



inline jule::Any _119177e90_Sema::_method_get_import_def(jule::Str _55729_ident,jule::Ref<_119162660_ImportInfo>& _55746_imp) {
	if (_104b4ffd0_find_package_builtin_def(_55746_imp->_field_link_path,_55729_ident) != nullptr) {
		return jule::Any(true);
	}
	{
		auto __julec_range_expr = _55746_imp->_field_package->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4392107664:;
			{
				
				jule::Any _56421_def = _119177e90_f->_method_def_by_ident(_55729_ident,false);
				if (_56421_def != nullptr) {
					return _56421_def;
				}
			}
			_iter_next_4392107664:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4392107664; }
			_iter_end_4392107664:;
		}
	}
	return jule::Any(nullptr);
}



inline void _119177e90_Sema::_method_check_import_selections(jule::Ref<_119162660_ImportInfo> _57346_imp) {
	{
		auto __julec_range_expr = _57346_imp->_field_selected;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_108e15ff0_Token _119177e90_ident = *__julec_range_begin;
			_iter_begin_4392116032:;
			{
				if (_119177e90_ident._field_kind == jule::Str("self", 4)) {
					goto _iter_next_4392116032;
				}
				if ((*this)._method_is_duplicated_import_selection(((jule::Uintptr)((_57346_imp).alloc)),_119177e90_ident._field_kind)) {
					(*this)._method_push_err(_119177e90_ident,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_119177e90_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
					goto _iter_next_4392116032;
				}
				jule::Any _58521_def = (*this)._method_get_import_def(_119177e90_ident._field_kind,_57346_imp);
				{
					auto _match_expr{ _58521_def };
					if (!(_match_expr.type_is<jule::Bool>())) { goto _case_end_4392125328; }
					_case_begin_4392125328:;
					{
						goto _iter_next_4392116032;
					}
					goto _match_end_4392123968;
					_case_end_4392125328:;
					if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4392125440; }
					_case_begin_4392125440:;
					{
						jule::Ref<_104598e40_Var> _59225_v = _58521_def.operator jule::Ref<_104598e40_Var>();
						if ((*this)._method_is_accessible_define(_59225_v->_field_public,_59225_v->_field_token)) {
							goto _iter_next_4392116032;
						}
					}
					goto _match_end_4392123968;
					_case_end_4392125440:;
					if (!(_match_expr.type_is<jule::Ref<_104a21a10_TypeAlias>>())) { goto _case_end_4392127568; }
					_case_begin_4392127568:;
					{
						jule::Ref<_104a21a10_TypeAlias> _59825_ta = _58521_def.operator jule::Ref<_104a21a10_TypeAlias>();
						if ((*this)._method_is_accessible_define(_59825_ta->_field_public,_59825_ta->_field_token)) {
							goto _iter_next_4392116032;
						}
					}
					goto _match_end_4392123968;
					_case_end_4392127568:;
					if (!(_match_expr.type_is<jule::Ref<_1037370d0_Struct>>())) { goto _case_end_4392127680; }
					_case_begin_4392127680:;
					{
						jule::Ref<_1037370d0_Struct> _60425_strct = _58521_def.operator jule::Ref<_1037370d0_Struct>();
						if ((*this)._method_is_accessible_define(_60425_strct->_field_public,_60425_strct->_field_token)) {
							goto _iter_next_4392116032;
						}
					}
					goto _match_end_4392123968;
					_case_end_4392127680:;
					if (!(_match_expr.type_is<jule::Ref<_1036e5da0_Trait>>())) { goto _case_end_4392127792; }
					_case_begin_4392127792:;
					{
						jule::Ref<_1036e5da0_Trait> _61025_t = _58521_def.operator jule::Ref<_1036e5da0_Trait>();
						if ((*this)._method_is_accessible_define(_61025_t->_field_public,_61025_t->_field_token)) {
							goto _iter_next_4392116032;
						}
					}
					goto _match_end_4392123968;
					_case_end_4392127792:;
					if (!(_match_expr.type_is<jule::Ref<_1036dad50_Enum>>())) { goto _case_end_4392127904; }
					_case_begin_4392127904:;
					{
						jule::Ref<_1036dad50_Enum> _61625_e = _58521_def.operator jule::Ref<_1036dad50_Enum>();
						if ((*this)._method_is_accessible_define(_61625_e->_field_public,_61625_e->_field_token)) {
							goto _iter_next_4392116032;
						}
					}
					goto _match_end_4392123968;
					_case_end_4392127904:;
					if (!(_match_expr.type_is<jule::Ref<_1037649f0_Fn>>())) { goto _case_end_4392128016; }
					_case_begin_4392128016:;
					{
						jule::Ref<_1037649f0_Fn> _62225_f = _58521_def.operator jule::Ref<_1037649f0_Fn>();
						if ((*this)._method_is_accessible_define(_62225_f->_field_public,_62225_f->_field_token)) {
							goto _iter_next_4392116032;
						}
					}
					goto _match_end_4392123968;
					_case_end_4392128016:;
					_case_begin_4392124800:;
					{
						(*this)._method_push_err(_119177e90_ident,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_119177e90_ident._field_kind)}));
						goto _iter_next_4392116032;
					}
					goto _match_end_4392123968;
					_case_end_4392124800:;
					_match_end_4392123968:;
				}
				(*this)._method_push_err(_119177e90_ident,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_119177e90_ident._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
			}
			_iter_next_4392116032:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_ident = *__julec_range_begin; goto _iter_begin_4392116032; }
			_iter_end_4392116032:;
		}
	}
}



inline jule::Bool _119177e90_Sema::_method_is_use_alias_duplication(jule::Ref<_119162660_ImportInfo>& _63744_imp) {
	if (_63744_imp->_field_alias.len() == 0LL) {
		return false;
	}
	{
		auto __julec_range_expr = (*this)._field_file->_field_imports;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _119177e90_imp2 = *__julec_range_begin;
			_iter_begin_4392153920:;
			{
				if ((_119177e90_imp2).alloc == (_63744_imp).alloc) {
					goto _iter_end_4392153920;
				}
				if (_119177e90_imp2->_field_alias == _63744_imp->_field_alias) {
					return true;
				}
			}
			_iter_next_4392153920:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_imp2 = *__julec_range_begin; goto _iter_begin_4392153920; }
			_iter_end_4392153920:;
		}
	}
	return false;
}



inline jule::Bool _119177e90_Sema::_method_check_import(jule::Ref<_119162660_ImportInfo> _65335_imp) {
	if (_65335_imp->_field_cpp_linked || (_65335_imp->_field_package->_field_files.len() == 0LL)) {
		return true;
	}
	if ((*this)._method_is_use_alias_duplication(_65335_imp)) {
		(*this)._method_push_err(_65335_imp->_field_token,jule::Str("identifier \"@\" is already used for another use declaration", 58),jule::Slice<jule::Any>({jule::Any(_65335_imp->_field_alias)}));
		(*this)._method_push_suggestion(jule::Str("rename alias for this use declaration to avoid duplication", 58),jule::Slice<jule::Any>({}));
	}
	if (_65335_imp->_field_duplicate) {
		return true;
	}
	jule::Ref<_119177e90_Sema> _66717_sema = jule::new_struct<_119177e90_Sema>(new( std::nothrow ) _119177e90_Sema());
	_66717_sema->_method_check(_65335_imp->_field_package->_field_files);
	if (_66717_sema->_field_errors.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_66717_sema->_field_errors);
		return false;
	}
	(*this)._method_check_import_selections(_65335_imp);
	return true;
}



inline void _119177e90_Sema::_method_check_imports(void) {
	{
		auto __julec_range_expr = (*this)._field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_file = *__julec_range_begin;
			_iter_begin_4392174352:;
			{
				(*this)._method_set_current_file(_119177e90_file);
				{
					auto __julec_range_expr = _119177e90_file->_field_imports;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_119162660_ImportInfo> _119177e90_imp = *__julec_range_begin;
						_iter_begin_4392177008:;
						{
							jule::Bool _68321_ok = (*this)._method_check_import(_119177e90_imp);
							if ((!(_68321_ok))) {
								(*this)._method_push_err(_119177e90_imp->_field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any(_119177e90_imp->_field_link_path)}));
								return;
							}
						}
						_iter_next_4392177008:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _119177e90_imp = *__julec_range_begin; goto _iter_begin_4392177008; }
						_iter_end_4392177008:;
					}
				}
			}
			_iter_next_4392174352:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_file = *__julec_range_begin; goto _iter_begin_4392174352; }
			_iter_end_4392174352:;
		}
	}
}



inline void _119177e90_Sema::_method_impl_file_impls(void) {
	{
		auto __julec_range_expr = this->self->_field_file->_field_impls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_10417abf0_Impl> _119177e90_imp = *__julec_range_begin;
			_iter_begin_4392178128:;
			{
				this->self->_method_impl_impl(_119177e90_imp);
			}
			_iter_next_4392178128:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_imp = *__julec_range_begin; goto _iter_begin_4392178128; }
			_iter_end_4392178128:;
		}
	}
}



inline void _119177e90_Sema::_method_impl_impls(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_file = *__julec_range_begin;
			_iter_begin_4392187680:;
			{
				this->self->_method_set_current_file(_119177e90_file);
				this->self->_method_impl_file_impls();
			}
			_iter_next_4392187680:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_file = *__julec_range_begin; goto _iter_begin_4392187680; }
			_iter_end_4392187680:;
		}
	}
}



inline void _119177e90_Sema::_method_check_enums(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_file = *__julec_range_begin;
			_iter_begin_4392192048:;
			{
				this->self->_method_set_current_file(_119177e90_file);
				this->self->_method_check_enum_decls();
			}
			_iter_next_4392192048:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_file = *__julec_range_begin; goto _iter_begin_4392192048; }
			_iter_end_4392192048:;
		}
	}
}



inline jule::Bool _119177e90_Sema::_method_check_type_with_refers(jule::Ref<_104a21a10_TypeSymbol> _71646_t,jule::Trait<_10459ee60_Lookup> _7179_l,jule::Ref<_104a21a10_Referencer> _71720_referencer) {
	jule::Bool _71747_ok = jule::Bool();
	if (_71646_t->_method_checked()) {
		_71747_ok = true;
		return _71747_ok;
	}
	_104a21a10_TypeChecker _72117_tc = _104a21a10_TypeChecker(this->self,_7179_l,_71720_referencer,_108e15ff0_Token(),jule::Slice<jule::Ref<_1487f5920_GenericDecl>>(),jule::Slice<jule::Ref<_104a21a10_TypeAlias>>(),jule::Bool());
	_72117_tc._method_check(_71646_t);
	_71747_ok = _71646_t->_method_checked();
	return _71747_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_type(jule::Ref<_104a21a10_TypeSymbol> _73234_t,jule::Trait<_10459ee60_Lookup> _73250_l) {
	jule::Bool _73263_ok = jule::Bool();
	_73263_ok = this->self->_method_check_type_with_refers(_73234_t,_73250_l,jule::new_ref<_104a21a10_Referencer>());
	return _73263_ok;
}



inline jule::Ref<_104a21a10_TypeKind> _119177e90_Sema::_method_build_type_with_generics(jule::Ref<_1487f5920_TypeDecl> _73848_t,jule::Slice<jule::Ref<_104a21a10_TypeAlias>> _7399_generics) {
	jule::Ref<_104a21a10_TypeChecker> _74017_tc = jule::new_struct<_104a21a10_TypeChecker>(new( std::nothrow ) _104a21a10_TypeChecker(this->self,this->self,jule::Ref<_104a21a10_Referencer>(),_108e15ff0_Token(),jule::Slice<jule::Ref<_1487f5920_GenericDecl>>(),_7399_generics,jule::Bool()));
	return _74017_tc->_method_check_decl(_73848_t);
}



inline jule::Ref<_104a21a10_TypeKind> _119177e90_Sema::_method_build_type(jule::Ref<_1487f5920_TypeDecl> _74934_t) {
	return this->self->_method_build_type_with_generics(_74934_t,nullptr);
}



inline jule::Ref<_1191dc300_Data> _119177e90_Sema::_method_evalpd(jule::Ref<_1487f5920_Expr> _75530_expr,jule::Trait<_10459ee60_Lookup> _75547_l,jule::Ref<_104a21a10_TypeKind> _75613_p,jule::Ref<_104598e40_Var> _75627_owner) {
	jule::Ref<_1191dc300_Eval> _75717_e = jule::new_struct<_1191dc300_Eval>(new( std::nothrow ) _1191dc300_Eval(this->self,_75547_l,jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),_75627_owner));
	{
		auto _match_expr{ _75547_l };
		if (!(_match_expr.type_is<jule::Ref<_104180810_ScopeChecker>>())) { goto _case_end_4392245120; }
		_case_begin_4392245120:;
		{
			_75717_e->_field_unsafety=_75547_l.operator jule::Ref<_104180810_ScopeChecker>()->_method_is_unsafe();
		}
		goto _match_end_4392239312;
		_case_end_4392245120:;
		_match_end_4392239312:;
	}
	_75717_e->_field_prefix=_75613_p;
	return _75717_e->_method_eval_expr(_75530_expr);
}



inline jule::Ref<_1191dc300_Data> _119177e90_Sema::_method_evalp(jule::Ref<_1487f5920_Expr> _77429_expr,jule::Trait<_10459ee60_Lookup> _77446_l,jule::Ref<_104a21a10_TypeKind> _77461_p) {
	return this->self->_method_evalpd(_77429_expr,_77446_l,_77461_p,jule::new_ref<_104598e40_Var>());
}



inline jule::Ref<_1191dc300_Data> _119177e90_Sema::_method_eval(jule::Ref<_1487f5920_Expr> _77928_expr,jule::Trait<_10459ee60_Lookup> _77945_l) {
	return this->self->_method_evalp(_77928_expr,_77945_l,jule::new_ref<_104a21a10_TypeKind>());
}



inline void _119177e90_Sema::_method_check_assign_type(jule::Ref<_104a21a10_TypeKind> _78341_dest,jule::Ref<_1191dc300_Data> _78362_d,_108e15ff0_Token _7849_error_token,jule::Bool _78429_deref) {
	jule::Ref<_1044463d0_AssignTypeChecker> _78517_atc = jule::new_struct<_1044463d0_AssignTypeChecker>(new( std::nothrow ) _1044463d0_AssignTypeChecker(this->self,_78341_dest,_78362_d,_7849_error_token,_78429_deref));
	jule::Bool _79213_ok = _78517_atc->_method_check();
	if ((!(_79213_ok))) {
		return;
	}
	if ((!(_78362_d->_method_is_const())) || (!(jule::real(_78341_dest->_method_prim())))) {
		return;
	}
	jule::Str _80117_kind = _78341_dest->_method_prim()->_field_kind;
	{
		if (!((_104c56790_is_sig_int(_80117_kind)))) { goto _case_end_4392266320; }
		_case_begin_4392266320:;
		{
			_78362_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_78362_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4392266128;
		_case_end_4392266320:;
		if (!((_104c56790_is_unsig_int(_80117_kind)))) { goto _case_end_4392266448; }
		_case_begin_4392266448:;
		{
			_78362_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_78362_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4392266128;
		_case_end_4392266448:;
		if (!((_104c56790_is_float(_80117_kind)))) { goto _case_end_4392266576; }
		_case_begin_4392266576:;
		{
			_78362_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_78362_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4392266128;
		_case_end_4392266576:;
		_match_end_4392266128:;
	}
}



inline jule::Bool _119177e90_Sema::_method_check_type_compatibility(jule::Ref<_104a21a10_TypeKind> _81048_dest,jule::Ref<_104a21a10_TypeKind> _81113_src,_108e15ff0_Token _81129_error_token,jule::Bool _81149_deref) {
	if (jule::real(_81113_src->_method_tup())) {
		this->self->_method_push_err(_81129_error_token,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_81048_dest->_method_to_str()),jule::Any(_81113_src->_method_to_str())}));
		return false;
	}
	jule::Ref<_1044463d0_TypeCompatibilityChecker> _81917_tcc = jule::new_struct<_1044463d0_TypeCompatibilityChecker>(new( std::nothrow ) _1044463d0_TypeCompatibilityChecker(this->self,_81048_dest,_81113_src,_81129_error_token,jule::Bool(),_81149_deref,jule::Bool()));
	jule::Bool _82613_ok = _81917_tcc->_method_check();
	if ((!(_82613_ok))) {
		this->self->_method_push_err(_81129_error_token,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_81048_dest->_method_to_str()),jule::Any(_81113_src->_method_to_str())}));
	}
	return _82613_ok;
}



inline jule::Ref<_104a21a10_TypeKind> _119177e90_Sema::_method_build_non_generic_type_kind(jule::Ref<_1487f5920_TypeDecl> _84051_ast,jule::Slice<jule::Ref<_1487f5920_GenericDecl>> _8419_generics) {
	jule::Ref<_104a21a10_TypeChecker> _84217_tc = jule::new_struct<_104a21a10_TypeChecker>(new( std::nothrow ) _104a21a10_TypeChecker(this->self,this->self,jule::Ref<_104a21a10_Referencer>(),_108e15ff0_Token(),_8419_generics,jule::Slice<jule::Ref<_104a21a10_TypeAlias>>(),jule::Bool()));
	return _84217_tc->_method_check_decl(_84051_ast);
}



inline void _119177e90_Sema::_method_build_fn_non_generic_type_kinds(jule::Ref<_1037649f0_FnIns> _85055_f) {
	jule::Slice<jule::Ref<_1487f5920_GenericDecl>> _85117_generics = nullptr;
	if (_85055_f->_field_decl->_method_is_method()) {
		_85117_generics=jule::append(_85055_f->_field_decl->_field_generics,_85055_f->_field_decl->_field_owner->_field_generics);
	} else {
		_85117_generics=_85055_f->_field_decl->_field_generics;
	}
	{
		auto __julec_range_expr = _85055_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_ParamIns> _119177e90_p = *__julec_range_begin;
			_iter_begin_4392304928:;
			{
				if ((!(_119177e90_p->_field_decl->_method_is_self()))) {
					_119177e90_p->_field_kind=this->self->_method_build_non_generic_type_kind(_119177e90_p->_field_decl->_field_kind->_field_decl,_85117_generics);
				}
			}
			_iter_next_4392304928:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_p = *__julec_range_begin; goto _iter_begin_4392304928; }
			_iter_end_4392304928:;
		}
	}
	if ((!(_85055_f->_field_decl->_method_is_void()))) {
		_85055_f->_field_result=this->self->_method_build_non_generic_type_kind(_85055_f->_field_decl->_field_result->_field_kind->_field_decl,_85117_generics);
	}
}



inline jule::Ref<_1037649f0_FnIns> _119177e90_Sema::_method_get_trait_check_fn_kind(jule::Ref<_1037649f0_Fn> _86847_f) {
	jule::Ref<_1037649f0_FnIns> _86917_ins = _86847_f->_method_instance_force();
	this->self->_method_build_fn_non_generic_type_kinds(_86917_ins);
	return _86917_ins;
}



inline jule::Bool _119177e90_Sema::_method_reload_fn_ins_types(jule::Ref<_1037649f0_FnIns> _87443_f) {
	jule::Bool _87456_ok = jule::Bool();
	if (_87443_f->_method_is_builtin() || _87443_f->_method_is_anon()) {
		_87456_ok = true;
		return _87456_ok;
	}
	jule::Ref<_119177e90_Sema> _87917_sema = _87443_f->_field_decl->_field_sema;
	jule::Ref<_1191dcd40_SymbolTable> _88117_old = _87443_f->_field_decl->_field_sema->_field_file;
	__JULE_DEFER({
		_87443_f->_field_decl->_field_sema->_method_set_current_file(_88117_old);
	});
	jule::Ref<_1191dcd40_SymbolTable> _88317_file = _119177e90_find_file(_87443_f->_field_decl->_field_sema->_field_files,_87443_f->_field_decl->_field_token._field_file);
	if (jule::real(_88317_file)) {
		_87443_f->_field_decl->_field_sema->_method_set_current_file(_88317_file);
	}
	jule::I64 _88817_size = _87443_f->_field_generics.len();
	if (jule::real(_87443_f->_field_decl) && jule::real(_87443_f->_field_decl->_field_owner)) {
		_88817_size+=static_cast<jule::I64>(_87443_f->_field_decl->_field_owner->_field_generics.len());
	}
	jule::Slice<jule::Ref<_104a21a10_TypeAlias>> _89317_generics = jule::Slice<jule::Ref<_104a21a10_TypeAlias>>::alloc(0LL,static_cast<jule::Int>(_88817_size));
	{
		auto __julec_range_expr = _87443_f->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _119177e90_i = 0;
			jule::Ref<_104a21a10_TypeKind> _119177e90_g = *__julec_range_begin;
			_iter_begin_4392338832:;
			{
				_89317_generics=jule::append(_89317_generics,jule::Slice<jule::Ref<_104a21a10_TypeAlias>>({jule::new_struct<_104a21a10_TypeAlias>(new( std::nothrow ) _104a21a10_TypeAlias(jule::Ref<_1487f5920_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),_108e15ff0_Token(),_87443_f->_field_decl->_field_generics[static_cast<jule::Int>(_119177e90_i)]->_field_ident,jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),_119177e90_g)),jule::Str(),jule::Slice<jule::Any>()))}));
			}
			_iter_next_4392338832:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_119177e90_i; _119177e90_g = *__julec_range_begin; goto _iter_begin_4392338832; }
			_iter_end_4392338832:;
		}
	}
	if (jule::real(_87443_f->_field_decl) && jule::real(_87443_f->_field_decl->_field_owner)) {
		jule::Ref<_1037370d0_StructIns> _90521_owner = _87443_f->_field_owner;
		{
			auto __julec_range_expr = _90521_owner->_field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _119177e90_i = 0;
				jule::Ref<_104a21a10_TypeKind> _119177e90_g = *__julec_range_begin;
				_iter_begin_4392342528:;
				{
					_89317_generics=jule::append(_89317_generics,jule::Slice<jule::Ref<_104a21a10_TypeAlias>>({jule::new_struct<_104a21a10_TypeAlias>(new( std::nothrow ) _104a21a10_TypeAlias(jule::Ref<_1487f5920_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),_108e15ff0_Token(),_90521_owner->_field_decl->_field_generics[static_cast<jule::Int>(_119177e90_i)]->_field_ident,jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),_119177e90_g)),jule::Str(),jule::Slice<jule::Any>()))}));
				}
				_iter_next_4392342528:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_119177e90_i; _119177e90_g = *__julec_range_begin; goto _iter_begin_4392342528; }
				_iter_end_4392342528:;
			}
		}
	}
	_87456_ok=true;
	{
		auto __julec_range_expr = _87443_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_ParamIns> _119177e90_p = *__julec_range_begin;
			_iter_begin_4392353360:;
			{
				if ((!(_119177e90_p->_field_decl->_method_is_self()))) {
					_119177e90_p->_field_kind=_87917_sema->_method_build_type_with_generics(_119177e90_p->_field_decl->_field_kind->_field_decl,_89317_generics);
					_87456_ok=jule::real(_119177e90_p->_field_kind) && _87456_ok;
				}
			}
			_iter_next_4392353360:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_p = *__julec_range_begin; goto _iter_begin_4392353360; }
			_iter_end_4392353360:;
		}
	}
	if ((!(_87443_f->_field_decl->_method_is_void()))) {
		_87443_f->_field_result=_87917_sema->_method_build_type_with_generics(_87443_f->_field_decl->_field_result->_field_kind->_field_decl,_89317_generics);
		_87456_ok=jule::real(_87443_f->_field_result) && _87456_ok;
	}
	if ((_87917_sema).alloc != (this->self).alloc) {
		this->self->_field_errors=jule::append(this->self->_field_errors,_87917_sema->_field_errors);
	}
	_87456_ok = _87456_ok;
	return _87456_ok;
}



inline void _119177e90_Sema::_method_check_validity_for_init_expr(jule::Bool _93648_left_mut,jule::Bool _93664_left_ref,jule::Ref<_104a21a10_TypeKind> _9379_left_kind,jule::Ref<_1191dc300_Data> _93735_d,_108e15ff0_Token _93745_error_token) {
	if ((_93648_left_mut && (!(_93735_d->_field_mutable))) && _104a21a10_is_mut(_93735_d->_field_kind)) {
		this->self->_method_push_err(_93745_error_token,jule::Str("cannot assign mutable type used immutable define to mutable define", 66),jule::Slice<jule::Any>({}));
	}
	if (_93664_left_ref) {
		{
			auto _match_expr{ _93735_d->_field_model };
			if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>() || _match_expr.type_is<jule::Ref<_11911f320_TraitSubIdentExprModel>>() || _match_expr.type_is<jule::Ref<_11911f320_CommonIdentExprModel>>() || _match_expr.type_is<jule::Ref<_11911f320_StructSubIdentExprModel>>() || _match_expr.type_is<jule::Ref<_11911f320_CommonSubIdentExprModel>>())) { goto _case_end_4392369728; }
			goto _match_end_4392367520;
			_case_end_4392369728:;
			if (!(_match_expr.type_is<jule::Ref<_11911f320_UnaryExprModel>>())) { goto _case_end_4392369200; }
			_case_begin_4392369200:;
			{
				jule::Ref<_11911f320_UnaryExprModel> _95121_unary = _93735_d->_field_model.operator jule::Ref<_11911f320_UnaryExprModel>();
				if (_95121_unary->_field_op == jule::Str("*", 1)) {
					goto _match_end_4392367520;
				}
				goto _case_begin_4392368880;
			}
			goto _match_end_4392367520;
			_case_end_4392369200:;
			_case_begin_4392368880:;
			{
				this->self->_method_push_err(_93745_error_token,jule::Str("references requires variable for assignment", 43),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4392367520;
			_case_end_4392368880:;
			_match_end_4392367520:;
		}
		if (_93648_left_mut && (!(_93735_d->_field_mutable))) {
			this->self->_method_push_err(_93745_error_token,jule::Str("mutable reference cannot point to immutable data", 48),jule::Slice<jule::Any>({}));
		}
	}
	jule::Ref<_1044463d0_AssignTypeChecker> _96717_atc = jule::new_struct<_1044463d0_AssignTypeChecker>(new( std::nothrow ) _1044463d0_AssignTypeChecker(this->self,jule::Ref<_104a21a10_TypeKind>(),_93735_d,_93745_error_token,jule::Bool()));
	_96717_atc->_method_check_validity();
}



inline jule::Bool _119177e90_Sema::_method_check_type_alias_decl_kind(jule::Ref<_104a21a10_TypeAlias> _97550_ta,jule::Trait<_10459ee60_Lookup> _97566_l) {
	jule::Bool _97579_ok = jule::Bool();
	jule::Ref<_1191dcd40_SymbolTable> _97617_old = this->self->_field_file;
	__JULE_DEFER({
		this->self->_method_set_current_file(_97617_old);
	});
	jule::Ref<_1191dcd40_SymbolTable> _97817_file = _119177e90_find_file(this->self->_field_files,_97550_ta->_field_token._field_file);
	if (jule::real(_97817_file)) {
		this->self->_method_set_current_file(_97817_file);
	}
	_97579_ok=this->self->_method_check_type_with_refers(_97550_ta->_field_kind,_97566_l,jule::new_struct<_104a21a10_Referencer>(new( std::nothrow ) _104a21a10_Referencer(_97550_ta->_field_ident,jule::Any(_97550_ta),(&(_97550_ta->_field_refers)))));
	if ((_97579_ok && jule::real(_97550_ta->_field_kind->_field_kind->_method_arr())) && _97550_ta->_field_kind->_field_kind->_method_arr()->_field_auto) {
		this->self->_method_push_err(_97550_ta->_field_kind->_field_decl->_field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>({}));
		_97579_ok=false;
	}
	return _97579_ok;
}



inline void _119177e90_Sema::_method_check_type_alias_decl(jule::Ref<_104a21a10_TypeAlias> _99545_ta,jule::Trait<_10459ee60_Lookup> _99561_l) {
	if (_108e15ff0_is_ignore_ident(_99545_ta->_field_ident)) {
		this->self->_method_push_err(_99545_ta->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_type_alias_decl_kind(_99545_ta,_99561_l);
}



inline void _119177e90_Sema::_method_check_type_alias_decl_dup(jule::Ref<_104a21a10_TypeAlias> _100349_ta) {
	if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_100349_ta).alloc)),_100349_ta->_field_ident,_100349_ta->_field_cpp_linked)) {
		this->self->_method_push_err(_100349_ta->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_100349_ta->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_type_alias_decl_kind(_100349_ta,this->self);
}



inline jule::Bool _119177e90_Sema::_method_check_type_alias_decls(void) {
	jule::Bool _101244_ok = jule::Bool();
	{
		auto __julec_range_expr = this->self->_field_file->_field_type_aliases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104a21a10_TypeAlias> _119177e90_ta = *__julec_range_begin;
			_iter_begin_4392411856:;
			{
				this->self->_method_check_type_alias_decl_dup(_119177e90_ta);
				if (this->self->_field_errors.len() > 0LL) {
					_101244_ok = false;
					return _101244_ok;
				}
			}
			_iter_next_4392411856:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_ta = *__julec_range_begin; goto _iter_begin_4392411856; }
			_iter_end_4392411856:;
		}
	}
	_101244_ok = true;
	return _101244_ok;
}



inline void _119177e90_Sema::_method_check_enum_items_dup(jule::Ref<_1036dad50_Enum> _102439_e) {
	{
		auto __julec_range_expr = _102439_e->_field_items;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036dad50_EnumItem> _119177e90_item = *__julec_range_begin;
			_iter_begin_4392417920:;
			{
				if (_108e15ff0_is_ignore_ident(_119177e90_item->_field_ident)) {
					(*this)._method_push_err(_119177e90_item->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
				} else {
					{
						auto __julec_range_expr = _102439_e->_field_items;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Ref<_1036dad50_EnumItem> _119177e90_citem = *__julec_range_begin;
							_iter_begin_4392422832:;
							{
								if (_119177e90_item == _119177e90_citem) {
									goto _iter_end_4392422832;
								} else if (_119177e90_item->_field_ident == _119177e90_citem->_field_ident) {
									(*this)._method_push_err(_119177e90_item->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_119177e90_item->_field_ident)}));
									(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
									goto _iter_end_4392422832;
								}
							}
							_iter_next_4392422832:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _119177e90_citem = *__julec_range_begin; goto _iter_begin_4392422832; }
							_iter_end_4392422832:;
						}
					}
				}
			}
			_iter_next_4392417920:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_item = *__julec_range_begin; goto _iter_begin_4392417920; }
			_iter_end_4392417920:;
		}
	}
}



inline void _119177e90_Sema::_method_check_enum_items_str(jule::Ref<_1036dad50_Enum> _104244_e) {
	{
		auto __julec_range_expr = _104244_e->_field_items;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036dad50_EnumItem> _119177e90_item = *__julec_range_begin;
			_iter_begin_4392429712:;
			{
				if (_119177e90_item->_method_auto_expr()) {
					_119177e90_item->_field_value=jule::new_struct<_1191dc300_Value>(new( std::nothrow ) _1191dc300_Value(jule::Ref<_1487f5920_Expr>(),jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::Ref<_104a21a10_TypeKind>(),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_104c409b0_Const::_static_method_new_str(_119177e90_item->_field_ident)))));
					_119177e90_item->_field_value->_field_data->_field_model=jule::Any(_119177e90_item->_field_value->_field_data->_field_constant);
				} else {
					jule::Ref<_1191dc300_Data> _105225_d = this->self->_method_eval(_119177e90_item->_field_value->_field_expr,this->self);
					if ((!(jule::real(_105225_d)))) {
						goto _iter_next_4392429712;
					}
					if ((!(_105225_d->_method_is_const()))) {
						this->self->_method_push_err(_119177e90_item->_field_value->_field_expr->_field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>({}));
					}
					this->self->_method_check_assign_type(_104244_e->_field_kind->_field_kind,_105225_d,_119177e90_item->_field_token,false);
					_119177e90_item->_field_value->_field_data=_105225_d;
				}
			}
			_iter_next_4392429712:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_item = *__julec_range_begin; goto _iter_begin_4392429712; }
			_iter_end_4392429712:;
		}
	}
}



inline void _119177e90_Sema::_method_check_enum_items_int(jule::Ref<_1036dad50_Enum> _106744_e) {
	jule::U64 _106817_max = static_cast<jule::U64>(_104c42960_max(_106744_e->_field_kind->_field_kind->_method_prim()->_method_to_str()));
	{
		auto __julec_range_expr = _106744_e->_field_items;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _119177e90_i = 0;
			jule::Ref<_1036dad50_EnumItem> _119177e90_item = *__julec_range_begin;
			_iter_begin_4392449312:;
			{
				if (_106817_max == 0LL) {
					this->self->_method_push_err(_119177e90_item->_field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>({}));
				} else {
					(_106817_max)--;
				}
				if (_119177e90_item->_method_auto_expr()) {
					_119177e90_item->_field_value=jule::new_struct<_1191dc300_Value>(new( std::nothrow ) _1191dc300_Value(jule::Ref<_1487f5920_Expr>(),jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::Ref<_104a21a10_TypeKind>(),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_104c409b0_Const::_static_method_new_u64(static_cast<jule::U64>(_106817_max - (_106817_max - static_cast<jule::U64>(_119177e90_i))))))));
					_119177e90_item->_field_value->_field_data->_field_model=jule::Any(_119177e90_item->_field_value->_field_data->_field_constant);
				} else {
					jule::Ref<_1191dc300_Data> _108425_d = this->self->_method_eval(_119177e90_item->_field_value->_field_expr,this->self);
					if ((!(jule::real(_108425_d)))) {
						goto _iter_next_4392449312;
					}
					if ((!(_108425_d->_method_is_const()))) {
						this->self->_method_push_err(_119177e90_item->_field_value->_field_expr->_field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>({}));
					}
					this->self->_method_check_assign_type(_106744_e->_field_kind->_field_kind,_108425_d,_119177e90_item->_field_token,false);
					_119177e90_item->_field_value->_field_data=_108425_d;
				}
			}
			_iter_next_4392449312:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_119177e90_i; _119177e90_item = *__julec_range_begin; goto _iter_begin_4392449312; }
			_iter_end_4392449312:;
		}
	}
}



inline void _119177e90_Sema::_method_check_enum_decl(jule::Ref<_1036dad50_Enum> _109939_e) {
	if (_108e15ff0_is_ignore_ident(_109939_e->_field_ident)) {
		this->self->_method_push_err(_109939_e->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	} else if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_109939_e).alloc)),_109939_e->_field_ident,false)) {
		this->self->_method_push_err(_109939_e->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_109939_e->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	if (_109939_e->_field_items.len() == 0LL) {
		this->self->_method_push_err(_109939_e->_field_token,jule::Str("there is no member for enum: @", 30),jule::Slice<jule::Any>({jule::Any(_109939_e->_field_ident)}));
	}
	this->self->_method_check_enum_items_dup(_109939_e);
	if (jule::real(_109939_e->_field_kind)) {
		if ((!(this->self->_method_check_type(_109939_e->_field_kind,this->self)))) {
			return;
		}
	} else {
		_109939_e->_field_kind=jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("int", 3))))));
	}
	jule::Ref<_104a21a10_Prim> _112617_t = _109939_e->_field_kind->_field_kind->_method_prim();
	if ((!(jule::real(_112617_t)))) {
		this->self->_method_push_err(_109939_e->_field_token,jule::Str("invalid data-type source", 24),jule::Slice<jule::Any>({}));
		return;
	}
	{
		if (!((_112617_t->_method_is_str()))) { goto _case_end_4393555584; }
		_case_begin_4393555584:;
		{
			this->self->_method_check_enum_items_str(_109939_e);
		}
		goto _match_end_4393551296;
		_case_end_4393555584:;
		if (!((_104c56790_is_int(_112617_t->_method_to_str())))) { goto _case_end_4393553488; }
		_case_begin_4393553488:;
		{
			this->self->_method_check_enum_items_int(_109939_e);
		}
		goto _match_end_4393551296;
		_case_end_4393553488:;
		_case_begin_4393553072:;
		{
			this->self->_method_push_err(_109939_e->_field_token,jule::Str("invalid data-type source", 24),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4393551296;
		_case_end_4393553072:;
		_match_end_4393551296:;
	}
}



inline jule::Bool _119177e90_Sema::_method_check_enum_decls(void) {
	jule::Bool _114638_ok = jule::Bool();
	{
		auto __julec_range_expr = this->self->_field_file->_field_enums;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036dad50_Enum> _119177e90_e = *__julec_range_begin;
			_iter_begin_4393561456:;
			{
				this->self->_method_check_enum_decl(_119177e90_e);
				if (this->self->_field_errors.len() > 0LL) {
					_114638_ok = false;
					return _114638_ok;
				}
			}
			_iter_next_4393561456:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_e = *__julec_range_begin; goto _iter_begin_4393561456; }
			_iter_end_4393561456:;
		}
	}
	_114638_ok = true;
	return _114638_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_decl_generics(jule::Slice<jule::Ref<_1487f5920_GenericDecl>> _115838_generics) {
	jule::Bool _115866_ok = jule::Bool();
	_115866_ok=true;
	{
		auto __julec_range_expr = _115838_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _119177e90_i = 0;
			jule::Ref<_1487f5920_GenericDecl> _119177e90_g = *__julec_range_begin;
			_iter_begin_4393568192:;
			{
				if (_108e15ff0_is_ignore_ident(_119177e90_g->_field_ident)) {
					(*this)._method_push_err(_119177e90_g->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
					_115866_ok=false;
					goto _iter_next_4393568192;
				}
				_julec_label_duplication_lookup:;
				{
					auto __julec_range_expr = _115838_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _119177e90_j = 0;
						jule::Ref<_1487f5920_GenericDecl> _119177e90_ct = *__julec_range_begin;
						_iter_begin_4393571072:;
						{
							{
								if (!((_119177e90_j >= _119177e90_i))) { goto _case_end_4393576304; }
								_case_begin_4393576304:;
								{
									goto _iter_end_4393571072;
								}
								goto _match_end_4393576112;
								_case_end_4393576304:;
								if (!((_119177e90_g->_field_ident == _119177e90_ct->_field_ident))) { goto _case_end_4393576432; }
								_case_begin_4393576432:;
								{
									(*this)._method_push_err(_119177e90_g->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_119177e90_g->_field_ident)}));
									(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
									_115866_ok=false;
									goto _iter_end_4393571072;
								}
								goto _match_end_4393576112;
								_case_end_4393576432:;
								_match_end_4393576112:;
							}
						}
						_iter_next_4393571072:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_119177e90_j; _119177e90_ct = *__julec_range_begin; goto _iter_begin_4393571072; }
						_iter_end_4393571072:;
					}
				}
			}
			_iter_next_4393568192:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_119177e90_i; _119177e90_g = *__julec_range_begin; goto _iter_begin_4393568192; }
			_iter_end_4393568192:;
		}
	}
	return _115866_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_fn_decl_params_dup(jule::Ref<_1037649f0_Fn> _118643_f) {
	jule::Bool _118653_ok = jule::Bool();
	_118653_ok=true;
	_julec_label_check:;
	{
		auto __julec_range_expr = _118643_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _119177e90_i = 0;
			jule::Ref<_1037649f0_Param> _119177e90_p = *__julec_range_begin;
			_iter_begin_4393585808:;
			{
				{
					auto __julec_range_expr = _118643_f->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1487f5920_GenericDecl> _119177e90_g = *__julec_range_begin;
						_iter_begin_4393588368:;
						{
							if (_119177e90_p->_field_ident == _119177e90_g->_field_ident) {
								_118653_ok=false;
								(*this)._method_push_err(_119177e90_p->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_119177e90_p->_field_ident)}));
								(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
								goto _iter_next_4393585808;
							}
						}
						_iter_next_4393588368:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _119177e90_g = *__julec_range_begin; goto _iter_begin_4393588368; }
						_iter_end_4393588368:;
					}
				}
				_julec_label_params_lookup:;
				{
					auto __julec_range_expr = _118643_f->_field_params;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _119177e90_j = 0;
						jule::Ref<_1037649f0_Param> _119177e90_jp = *__julec_range_begin;
						_iter_begin_4393589136:;
						{
							{
								if (!((_119177e90_j >= _119177e90_i))) { goto _case_end_4393596672; }
								_case_begin_4393596672:;
								{
									goto _iter_end_4393589136;
								}
								goto _match_end_4393596464;
								_case_end_4393596672:;
								if (!((_108e15ff0_is_anon_ident(_119177e90_p->_field_ident) || _108e15ff0_is_anon_ident(_119177e90_jp->_field_ident)))) { goto _case_end_4393596800; }
								_case_begin_4393596800:;
								{
									goto _iter_end_4393589136;
								}
								goto _match_end_4393596464;
								_case_end_4393596800:;
								if (!((_119177e90_p->_field_ident == _119177e90_jp->_field_ident))) { goto _case_end_4393596928; }
								_case_begin_4393596928:;
								{
									_118653_ok=false;
									(*this)._method_push_err(_119177e90_p->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_119177e90_p->_field_ident)}));
									(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
									goto _iter_next_4393585808;
								}
								goto _match_end_4393596464;
								_case_end_4393596928:;
								_match_end_4393596464:;
							}
						}
						_iter_next_4393589136:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_119177e90_j; _119177e90_jp = *__julec_range_begin; goto _iter_begin_4393589136; }
						_iter_end_4393589136:;
					}
				}
			}
			_iter_next_4393585808:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_119177e90_i; _119177e90_p = *__julec_range_begin; goto _iter_begin_4393585808; }
			_iter_end_4393585808:;
		}
	}
	return _118653_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_fn_decl_result_dup(jule::Ref<_1037649f0_Fn> _122243_f) {
	jule::Bool _122253_ok = jule::Bool();
	_122253_ok=true;
	if (_122243_f->_method_is_void()) {
		return _122253_ok;
	}
	{
		auto __julec_range_expr = _122243_f->_field_result->_field_idents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _119177e90_i = 0;
			_108e15ff0_Token _119177e90_v = *__julec_range_begin;
			_iter_begin_4393608832:;
			{
				if (_108e15ff0_is_ignore_ident(_119177e90_v._field_kind)) {
					goto _iter_next_4393608832;
				}
				{
					auto __julec_range_expr = _122243_f->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1487f5920_GenericDecl> _119177e90_g = *__julec_range_begin;
						_iter_begin_4393612304:;
						{
							if (_119177e90_v._field_kind == _119177e90_g->_field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_4393612304:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _119177e90_g = *__julec_range_begin; goto _iter_begin_4393612304; }
						_iter_end_4393612304:;
					}
				}
				{
					auto __julec_range_expr = _122243_f->_field_params;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1037649f0_Param> _119177e90_p = *__julec_range_begin;
						_iter_begin_4393615792:;
						{
							if (_119177e90_v._field_kind == _119177e90_p->_field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_4393615792:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _119177e90_p = *__julec_range_begin; goto _iter_begin_4393615792; }
						_iter_end_4393615792:;
					}
				}
				_julec_label_itself_lookup:;
				{
					auto __julec_range_expr = _122243_f->_field_result->_field_idents;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _119177e90_j = 0;
						_108e15ff0_Token _119177e90_jv = *__julec_range_begin;
						_iter_begin_4393620192:;
						{
							{
								if (!((_119177e90_j >= _119177e90_i))) { goto _case_end_4393622704; }
								_case_begin_4393622704:;
								{
									goto _iter_end_4393620192;
								}
								goto _match_end_4393622512;
								_case_end_4393622704:;
								if (!((_119177e90_jv._field_kind == _119177e90_v._field_kind))) { goto _case_end_4393622832; }
								_case_begin_4393622832:;
								{
									goto _julec_label_exist;
								}
								goto _match_end_4393622512;
								_case_end_4393622832:;
								_match_end_4393622512:;
							}
						}
						_iter_next_4393620192:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_119177e90_j; _119177e90_jv = *__julec_range_begin; goto _iter_begin_4393620192; }
						_iter_end_4393620192:;
					}
				}
				goto _iter_next_4393608832;
				_julec_label_exist:;
				(*this)._method_push_err(_119177e90_v,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_119177e90_v._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
				_122253_ok=false;
			}
			_iter_next_4393608832:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_119177e90_i; _119177e90_v = *__julec_range_begin; goto _iter_begin_4393608832; }
			_iter_end_4393608832:;
		}
	}
	return _122253_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_fn_decl_types(jule::Ref<_1037649f0_Fn> _127143_f) {
	jule::Bool _127153_ok = jule::Bool();
	_127153_ok=true;
	jule::Slice<jule::Ref<_1487f5920_GenericDecl>> _127417_generics = _127143_f->_field_generics;
	if (jule::real(_127143_f->_field_owner)) {
		_127417_generics=jule::append(_127417_generics,_127143_f->_field_owner->_field_generics);
	}
	{
		auto __julec_range_expr = _127143_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Param> _119177e90_p = *__julec_range_begin;
			_iter_begin_4393634752:;
			{
				if ((!(_119177e90_p->_method_is_self()))) {
					jule::Ref<_104a21a10_TypeKind> _128125_kind = this->self->_method_build_non_generic_type_kind(_119177e90_p->_field_kind->_field_decl,_127417_generics);
					_127153_ok=jule::real(_128125_kind) && _127153_ok;
					_119177e90_p->_field_kind->_field_kind=_128125_kind;
				}
			}
			_iter_next_4393634752:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_p = *__julec_range_begin; goto _iter_begin_4393634752; }
			_iter_end_4393634752:;
		}
	}
	if ((!(_127143_f->_method_is_void()))) {
		jule::Ref<_104a21a10_TypeKind> _128821_kind = this->self->_method_build_non_generic_type_kind(_127143_f->_field_result->_field_kind->_field_decl,_127417_generics);
		_127153_ok=jule::real(_128821_kind) && _127153_ok;
		_127143_f->_field_result->_field_kind->_field_kind=_128821_kind;
	}
	_127153_ok = _127153_ok;
	return _127153_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_fn_decl_prototype(jule::Ref<_1037649f0_Fn> _129847_f) {
	jule::Bool _129857_ok = jule::Bool();
	{
		if (!(((!(this->self->_method_check_decl_generics(_129847_f->_field_generics)))))) { goto _case_end_4393649536; }
		_case_begin_4393649536:;
		{
			_129857_ok = false;
			return _129857_ok;
		}
		goto _match_end_4393648384;
		_case_end_4393649536:;
		if (!(((!(this->self->_method_check_fn_decl_params_dup(_129847_f)))))) { goto _case_end_4393649648; }
		_case_begin_4393649648:;
		{
			_129857_ok = false;
			return _129857_ok;
		}
		goto _match_end_4393648384;
		_case_end_4393649648:;
		if (!(((!(this->self->_method_check_fn_decl_result_dup(_129847_f)))))) { goto _case_end_4393649760; }
		_case_begin_4393649760:;
		{
			_129857_ok = false;
			return _129857_ok;
		}
		goto _match_end_4393648384;
		_case_end_4393649760:;
		if (!(((!(this->self->_method_check_fn_decl_types(_129847_f)))))) { goto _case_end_4393648832; }
		_case_begin_4393648832:;
		{
			_129857_ok = false;
			return _129857_ok;
		}
		goto _match_end_4393648384;
		_case_end_4393648832:;
		_case_begin_4393648528:;
		{
			_129857_ok = true;
			return _129857_ok;
		}
		goto _match_end_4393648384;
		_case_end_4393648528:;
		_match_end_4393648384:;
	}
}



inline void _119177e90_Sema::_method_check_trait_decl_method(jule::Ref<_1037649f0_Fn> _130847_f) {
	if (_108e15ff0_is_ignore_ident(_130847_f->_field_ident)) {
		this->self->_method_push_err(_130847_f->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_fn_decl_prototype(_130847_f);
	_130847_f->_field_sema=this->self;
}



inline void _119177e90_Sema::_method_check_trait_decl_methods(jule::Ref<_1036e5da0_Trait> _131748_t) {
	{
		auto __julec_range_expr = _131748_t->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _119177e90_i = 0;
			jule::Ref<_1037649f0_Fn> _119177e90_f = *__julec_range_begin;
			_iter_begin_4393662928:;
			{
				this->self->_method_check_trait_decl_method(_119177e90_f);
				if (this->self->_field_errors.len() > 0LL) {
					return;
				}
				_julec_label_duplicate_lookup:;
				{
					auto __julec_range_expr = _131748_t->_field_methods;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _119177e90_j = 0;
						jule::Ref<_1037649f0_Fn> _119177e90_jf = *__julec_range_begin;
						_iter_begin_4393667984:;
						{
							{
								if (!((_119177e90_j >= _119177e90_i))) { goto _case_end_4393670448; }
								_case_begin_4393670448:;
								{
									goto _iter_end_4393667984;
								}
								goto _match_end_4393670256;
								_case_end_4393670448:;
								if (!((_119177e90_f->_field_ident == _119177e90_jf->_field_ident))) { goto _case_end_4393670576; }
								_case_begin_4393670576:;
								{
									this->self->_method_push_err(_119177e90_f->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_119177e90_f->_field_ident)}));
									this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
									goto _iter_end_4393667984;
								}
								goto _match_end_4393670256;
								_case_end_4393670576:;
								_match_end_4393670256:;
							}
						}
						_iter_next_4393667984:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_119177e90_j; _119177e90_jf = *__julec_range_begin; goto _iter_begin_4393667984; }
						_iter_end_4393667984:;
					}
				}
			}
			_iter_next_4393662928:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_119177e90_i; _119177e90_f = *__julec_range_begin; goto _iter_begin_4393662928; }
			_iter_end_4393662928:;
		}
	}
}



inline void _119177e90_Sema::_method_check_trait_decl(jule::Ref<_1036e5da0_Trait> _134840_t) {
	if (_108e15ff0_is_ignore_ident(_134840_t->_field_ident)) {
		this->self->_method_push_err(_134840_t->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	} else if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_134840_t).alloc)),_134840_t->_field_ident,false)) {
		this->self->_method_push_err(_134840_t->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_134840_t->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_trait_decl_methods(_134840_t);
}



inline jule::Bool _119177e90_Sema::_method_check_trait_decls(void) {
	jule::Bool _136039_ok = jule::Bool();
	{
		auto __julec_range_expr = this->self->_field_file->_field_traits;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036e5da0_Trait> _119177e90_t = *__julec_range_begin;
			_iter_begin_4393688656:;
			{
				this->self->_method_check_trait_decl(_119177e90_t);
				if (this->self->_field_errors.len() > 0LL) {
					_136039_ok = false;
					return _136039_ok;
				}
			}
			_iter_next_4393688656:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_t = *__julec_range_begin; goto _iter_begin_4393688656; }
			_iter_end_4393688656:;
		}
	}
	_136039_ok = true;
	return _136039_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_trait_impl_methods(jule::Ref<_1036e5da0_Trait> _137247_base,jule::Ref<_10417abf0_Impl> _137261_ipl) {
	jule::Bool _137275_ok = jule::Bool();
	_137275_ok=true;
	{
		auto __julec_range_expr = _137261_ipl->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _119177e90_f = *__julec_range_begin;
			_iter_begin_4393696640:;
			{
				if ((!(jule::real(_137247_base->_method_find_method(_119177e90_f->_field_ident))))) {
					(*this)._method_push_err(_119177e90_f->_field_token,jule::Str("trait @ have not any define in this identifier: @", 49),jule::Slice<jule::Any>({jule::Any(_137247_base->_field_ident),jule::Any(_119177e90_f->_field_ident)}));
					_137275_ok=false;
				}
			}
			_iter_next_4393696640:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4393696640; }
			_iter_end_4393696640:;
		}
	}
	return _137275_ok;
}



inline jule::Bool _119177e90_Sema::_method_impl_to_struct(jule::Ref<_1037370d0_Struct> _138338_dest,jule::Ref<_10417abf0_Impl> _138357_ipl) {
	jule::Bool _138371_ok = jule::Bool();
	_138371_ok=true;
	{
		auto __julec_range_expr = _138357_ipl->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _119177e90_f = *__julec_range_begin;
			_iter_begin_4393706608:;
			{
				if (jule::real(_138338_dest->_method_find_method(_119177e90_f->_field_ident,_119177e90_f->_field_statically)) || jule::real(_138338_dest->_method_find_field(_119177e90_f->_field_ident))) {
					this->self->_method_push_err(_119177e90_f->_field_token,jule::Str("struct @ already have a define in this identifier: @", 52),jule::Slice<jule::Any>({jule::Any(_138338_dest->_field_ident),jule::Any(_119177e90_f->_field_ident)}));
					_138371_ok=false;
					goto _iter_next_4393706608;
				}
				if ((_138338_dest->_field_generics.len() > 0LL) && (_119177e90_f->_field_generics.len() > 0LL)) {
					{
						auto __julec_range_expr = _119177e90_f->_field_generics;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Ref<_1487f5920_GenericDecl> _119177e90_fg = *__julec_range_begin;
							_iter_begin_4393714688:;
							{
								{
									auto __julec_range_expr = _138338_dest->_field_generics;
									if (__julec_range_expr.begin() != __julec_range_expr.end()) {
										auto __julec_range_begin = __julec_range_expr.begin();
										const auto __julec_range_end = __julec_range_expr.end();
										jule::Ref<_1487f5920_GenericDecl> _119177e90_dg = *__julec_range_begin;
										_iter_begin_4393716608:;
										{
											if (_119177e90_fg->_field_ident == _119177e90_dg->_field_ident) {
												this->self->_method_push_err(_119177e90_fg->_field_token,jule::Str("methods cannot have same generic identifier with owner same time", 64),jule::Slice<jule::Any>({}));
												_138371_ok=false;
											}
										}
										_iter_next_4393716608:;
										++__julec_range_begin;
										if (__julec_range_begin != __julec_range_end) { _119177e90_dg = *__julec_range_begin; goto _iter_begin_4393716608; }
										_iter_end_4393716608:;
									}
								}
							}
							_iter_next_4393714688:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _119177e90_fg = *__julec_range_begin; goto _iter_begin_4393714688; }
							_iter_end_4393714688:;
						}
					}
				}
				_119177e90_f->_field_sema=this->self;
				_119177e90_f->_field_owner=_138338_dest;
				_138338_dest->_field_methods=jule::append(_138338_dest->_field_methods,jule::Slice<jule::Ref<_1037649f0_Fn>>({_119177e90_f}));
			}
			_iter_next_4393706608:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4393706608; }
			_iter_end_4393706608:;
		}
	}
	return _138371_ok;
}



inline void _119177e90_Sema::_method_impl_trait(jule::Ref<_10417abf0_Impl> _141134_decl) {
	jule::Ref<_1036e5da0_Trait> _141217_base = this->self->_method_find_trait(_141134_decl->_field_base._field_kind);
	if ((!(jule::real(_141217_base)))) {
		_141217_base=_104b4ffd0_find_builtin_trait(_141134_decl->_field_base._field_kind);
	}
	if ((!(jule::real(_141217_base)))) {
		this->self->_method_push_err(_141134_decl->_field_base,jule::Str("any valid base definition is not exist in this identifier: @", 60),jule::Slice<jule::Any>({jule::Any(_141134_decl->_field_base._field_kind)}));
		return;
	}
	
	jule::Ref<_1037370d0_Struct> _142517_dest = this->self->_method_find_struct(_141134_decl->_field_dest._field_kind,false);
	if ((!(jule::real(_142517_dest)))) {
		this->self->_method_push_err(_141134_decl->_field_dest,jule::Str("any valid destination definition is not exist in this identifier: @", 67),jule::Slice<jule::Any>({jule::Any(_141134_decl->_field_dest._field_kind)}));
		return;
	}
	if (_142517_dest->_field_token._field_file->_method_dir() != this->self->_field_file->_field_file->_method_dir()) {
		this->self->_method_push_err(_141134_decl->_field_dest,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>({}));
		return;
	}
	_141217_base->_field_implemented=jule::append(_141217_base->_field_implemented,jule::Slice<jule::Ref<_1037370d0_Struct>>({_142517_dest}));
	_142517_dest->_field_implements=jule::append(_142517_dest->_field_implements,jule::Slice<jule::Ref<_1036e5da0_Trait>>({_141217_base}));
	{
		if (!(((!(this->self->_method_check_trait_impl_methods(_141217_base,_141134_decl)))))) { goto _case_end_4393745008; }
		_case_begin_4393745008:;
		{
			return;
		}
		goto _match_end_4393740288;
		_case_end_4393745008:;
		if (!(((!(this->self->_method_impl_to_struct(_142517_dest,_141134_decl)))))) { goto _case_end_4393742768; }
		_case_begin_4393742768:;
		{
			return;
		}
		goto _match_end_4393740288;
		_case_end_4393742768:;
		_match_end_4393740288:;
	}
}



inline void _119177e90_Sema::_method_impl_struct(jule::Ref<_10417abf0_Impl> _144535_decl) {
	
	jule::Ref<_1037370d0_Struct> _145017_dest = this->self->_method_find_struct(_144535_decl->_field_dest._field_kind,false);
	if ((!(jule::real(_145017_dest)))) {
		this->self->_method_push_err(_144535_decl->_field_dest,jule::Str("any valid destination definition is not exist in this identifier: @", 67),jule::Slice<jule::Any>({jule::Any(_144535_decl->_field_dest._field_kind)}));
		return;
	}
	if (_145017_dest->_field_token._field_file->_method_dir() != this->self->_field_file->_field_file->_method_dir()) {
		this->self->_method_push_err(_144535_decl->_field_dest,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>({}));
		return;
	}
	{
		if (!(((!(this->self->_method_impl_to_struct(_145017_dest,_144535_decl)))))) { goto _case_end_4393757984; }
		_case_begin_4393757984:;
		{
			return;
		}
		goto _match_end_4393756704;
		_case_end_4393757984:;
		_match_end_4393756704:;
	}
}



inline void _119177e90_Sema::_method_impl_impl(jule::Ref<_10417abf0_Impl> _146833_decl) {
	{
		if (!((_146833_decl->_method_is_trait_impl()))) { goto _case_end_4393761056; }
		_case_begin_4393761056:;
		{
			this->self->_method_impl_trait(_146833_decl);
		}
		goto _match_end_4393760864;
		_case_end_4393761056:;
		if (!((_146833_decl->_method_is_struct_impl()))) { goto _case_end_4393761184; }
		_case_begin_4393761184:;
		{
			this->self->_method_impl_struct(_146833_decl);
		}
		goto _match_end_4393760864;
		_case_end_4393761184:;
		_match_end_4393760864:;
	}
}



inline void _119177e90_Sema::_method_check_var_decl(jule::Ref<_104598e40_Var> _147738_decl,jule::Trait<_10459ee60_Lookup> _147750_l) {
	if (_108e15ff0_is_ignore_ident(_147738_decl->_field_ident)) {
		this->self->_method_push_err(_147738_decl->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	}
	if (_147738_decl->_method_is_type_inferred()) {
		if (_147738_decl->_field_statically) {
			this->self->_method_push_err(_147738_decl->_field_token,jule::Str("static variables must be have type annotation", 45),jule::Slice<jule::Any>({}));
		}
		if ((!(_147738_decl->_method_is_initialized()))) {
			this->self->_method_push_err(_147738_decl->_field_token,jule::Str("type inference declarations should have a initializer", 53),jule::Slice<jule::Any>({}));
		}
	} else {
		this->self->_method_check_type(_147738_decl->_field_kind,_147750_l);
	}
	if (_147738_decl->_field_constant && _147738_decl->_field_reference) {
		this->self->_method_push_err(_147738_decl->_field_token,jule::Str("references cannot be constant", 29),jule::Slice<jule::Any>({}));
	}
	if ((!(_147738_decl->_method_is_initialized()))) {
		if (_147738_decl->_field_constant) {
			this->self->_method_push_err(_147738_decl->_field_token,jule::Str("constant variable must have initialize expression", 49),jule::Slice<jule::Any>({}));
		}
		if (_147738_decl->_field_statically) {
			this->self->_method_push_err(_147738_decl->_field_token,jule::Str("static variables must be have initialize expression", 51),jule::Slice<jule::Any>({}));
		}
		if (_147738_decl->_field_reference) {
			this->self->_method_push_err(_147738_decl->_field_token,jule::Str("reference variables must be have lvalue initialize expression", 61),jule::Slice<jule::Any>({}));
		}
	}
}



inline void _119177e90_Sema::_method_check_global_var_decl(jule::Ref<_104598e40_Var> _151445_decl) {
	if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_151445_decl).alloc)),_151445_decl->_field_ident,_151445_decl->_field_cpp_linked)) {
		this->self->_method_push_err(_151445_decl->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_151445_decl->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	if (_151445_decl->_field_cpp_linked && _151445_decl->_field_constant) {
		this->self->_method_push_err(_151445_decl->_field_token,jule::Str("cpp linked variables cannot constant", 36),jule::Slice<jule::Any>({}));
	}
	if (((!(_151445_decl->_field_cpp_linked)) && (!(_151445_decl->_field_constant))) && (!(_151445_decl->_field_statically))) {
		this->self->_method_push_err(_151445_decl->_field_token,jule::Str("global variables must be static", 31),jule::Slice<jule::Any>({}));
		this->self->_method_push_suggestion(jule::Str("use \"static\" keyword to define", 30),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_var_decl(_151445_decl,this->self);
}



inline jule::Bool _119177e90_Sema::_method_check_global_decls(void) {
	jule::Bool _153140_ok = jule::Bool();
	{
		auto __julec_range_expr = this->self->_field_file->_field_vars;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104598e40_Var> _119177e90_decl = *__julec_range_begin;
			_iter_begin_4393802624:;
			{
				this->self->_method_check_global_var_decl(_119177e90_decl);
				if (this->self->_field_errors.len() > 0LL) {
					_153140_ok = false;
					return _153140_ok;
				}
			}
			_iter_next_4393802624:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_decl = *__julec_range_begin; goto _iter_begin_4393802624; }
			_iter_end_4393802624:;
		}
	}
	_153140_ok = true;
	return _153140_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_struct_trait_impl(jule::Ref<_1037370d0_Struct> _154347_strct,jule::Ref<_1036e5da0_Trait> _154367_trt) {
	jule::Bool _154382_ok = jule::Bool();
	{
		auto __julec_range_expr = _154367_trt->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _119177e90_tf = *__julec_range_begin;
			_iter_begin_4393810864:;
			{
				jule::Bool _154521_exist = false;
				jule::Ref<_1037649f0_Fn> _154621_sf = _154347_strct->_method_find_method(_119177e90_tf->_field_ident,_119177e90_tf->_field_statically);
				jule::Ref<_1037649f0_FnIns> _154717_tf_k = this->self->_method_get_trait_check_fn_kind(_119177e90_tf);
				if (jule::real(_154621_sf)) {
					jule::Ref<_1037649f0_FnIns> _154921_sf_k = this->self->_method_get_trait_check_fn_kind(_154621_sf);
					_154521_exist=((_154717_tf_k->_field_decl->_field_public == _154921_sf_k->_field_decl->_field_public) && (_154717_tf_k->_field_decl->_field_ident == _154921_sf_k->_field_decl->_field_ident)) && _154717_tf_k->_method_equals(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_154921_sf_k)));
				}
				if ((!(_154521_exist))) {
					
					jule::Str _155825_s = _154717_tf_k->_method_get_kind_str(true);
					if (_119177e90_tf->_field_public) {
						_155825_s=jule::Str("pub ", 4) + _155825_s;
					}
					this->self->_method_push_err(_154347_strct->_field_token,jule::Str("trait @ derived but not implemented trait's \"@\" define", 54),jule::Slice<jule::Any>({jule::Any(_154367_trt->_field_ident),jule::Any(_155825_s)}));
					_154382_ok=false;
				}
			}
			_iter_next_4393810864:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_tf = *__julec_range_begin; goto _iter_begin_4393810864; }
			_iter_end_4393810864:;
		}
	}
	return _154382_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_struct_impls(jule::Ref<_1037370d0_Struct> _156942_s) {
	jule::Bool _156956_ok = jule::Bool();
	_156956_ok=true;
	{
		auto __julec_range_expr = _156942_s->_field_implements;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036e5da0_Trait> _119177e90_trt = *__julec_range_begin;
			_iter_begin_4391434848:;
			{
				_156956_ok=this->self->_method_check_struct_trait_impl(_156942_s,_119177e90_trt) && _156956_ok;
			}
			_iter_next_4391434848:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_trt = *__julec_range_begin; goto _iter_begin_4391434848; }
			_iter_end_4391434848:;
		}
	}
	_156956_ok = _156956_ok;
	return _156956_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_struct_fields(jule::Ref<_1037370d0_Struct> _157743_st) {
	jule::Bool _157758_ok = jule::Bool();
	_157758_ok=true;
	jule::Ref<_104a21a10_TypeChecker> _158017_tc = jule::new_struct<_104a21a10_TypeChecker>(new( std::nothrow ) _104a21a10_TypeChecker(this->self,this->self,jule::new_struct<_104a21a10_Referencer>(new( std::nothrow ) _104a21a10_Referencer(_157743_st->_field_ident,jule::Any(_157743_st),nullptr)),_108e15ff0_Token(),_157743_st->_field_generics,jule::Slice<jule::Ref<_104a21a10_TypeAlias>>(),jule::Bool()));
	jule::I64 _159013_n = _157743_st->_field_instances.len();
	{
		auto __julec_range_expr = _157743_st->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Field> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394607664:;
			{
				_119177e90_f->_field_owner=_157743_st;
				_119177e90_f->_field_kind->_field_kind=_158017_tc->_method_check_decl(_119177e90_f->_field_kind->_field_decl);
				_157758_ok=jule::real(_119177e90_f->_field_kind->_field_kind) && _157758_ok;
				{
					auto __julec_range_expr = _157743_st->_field_fields;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1037370d0_Field> _119177e90_cf = *__julec_range_begin;
						_iter_begin_4394612528:;
						{
							if (_119177e90_f == _119177e90_cf) {
								goto _iter_end_4394612528;
							} else if (_119177e90_f->_field_ident == _119177e90_cf->_field_ident) {
								this->self->_method_push_err(_119177e90_f->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_119177e90_f->_field_ident)}));
								this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
								_157758_ok=false;
							}
						}
						_iter_next_4394612528:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _119177e90_cf = *__julec_range_begin; goto _iter_begin_4394612528; }
						_iter_end_4394612528:;
					}
				}
			}
			_iter_next_4394607664:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394607664; }
			_iter_end_4394607664:;
		}
	}
	if (_157758_ok && (_159013_n != _157743_st->_field_instances.len())) {
		jule::drop(_158017_tc->_field_referencer);
		_157743_st->_field_instances=_157743_st->_field_instances.slice(0LL,static_cast<jule::Int>(_159013_n));
		{
			auto __julec_range_expr = _157743_st->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1037370d0_Field> _119177e90_f = *__julec_range_begin;
				_iter_begin_4394619728:;
				{
					_119177e90_f->_field_kind->_field_kind=_158017_tc->_method_check_decl(_119177e90_f->_field_kind->_field_decl);
				}
				_iter_next_4394619728:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394619728; }
				_iter_end_4394619728:;
			}
		}
	}
	_157758_ok = _157758_ok;
	return _157758_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_struct_decl_methods(jule::Ref<_1037370d0_Struct> _161949_s) {
	jule::Bool _161963_ok = jule::Bool();
	{
		auto __julec_range_expr = _161949_s->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _119177e90_m = *__julec_range_begin;
			_iter_begin_4394626704:;
			{
				if ((!(this->self->_method_check_fn_decl_types(_119177e90_m)))) {
					_161963_ok = false;
					return _161963_ok;
				}
			}
			_iter_next_4394626704:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_m = *__julec_range_begin; goto _iter_begin_4394626704; }
			_iter_end_4394626704:;
		}
	}
	_161963_ok = true;
	return _161963_ok;
}



inline void _119177e90_Sema::_method_check_struct_decl(jule::Ref<_1037370d0_Struct> _162841_s) {
	if (_108e15ff0_is_ignore_ident(_162841_s->_field_ident)) {
		this->self->_method_push_err(_162841_s->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	} else if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_162841_s).alloc)),_162841_s->_field_ident,_162841_s->_field_cpp_linked)) {
		this->self->_method_push_err(_162841_s->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_162841_s->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	_162841_s->_field_sema=this->self;
	{
		if (!(((!(this->self->_method_check_decl_generics(_162841_s->_field_generics)))))) { goto _case_end_4394639392; }
		_case_begin_4394639392:;
		{
			return;
		}
		goto _match_end_4394639104;
		_case_end_4394639392:;
		if (!(((!(this->self->_method_check_struct_fields(_162841_s)))))) { goto _case_end_4394639504; }
		_case_begin_4394639504:;
		{
			return;
		}
		goto _match_end_4394639104;
		_case_end_4394639504:;
		if (!(((!(this->self->_method_check_struct_decl_methods(_162841_s)))))) { goto _case_end_4394639696; }
		_case_begin_4394639696:;
		{
			return;
		}
		goto _match_end_4394639104;
		_case_end_4394639696:;
		if (!(((!(this->self->_method_check_struct_impls(_162841_s)))))) { goto _case_end_4394639808; }
		_case_begin_4394639808:;
		{
			return;
		}
		goto _match_end_4394639104;
		_case_end_4394639808:;
		_match_end_4394639104:;
	}
}



inline jule::Bool _119177e90_Sema::_method_check_struct_decls(void) {
	jule::Bool _164640_ok = jule::Bool();
	{
		auto __julec_range_expr = this->self->_field_file->_field_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _119177e90_s = *__julec_range_begin;
			_iter_begin_4394646880:;
			{
				this->self->_method_check_struct_decl(_119177e90_s);
				if (this->self->_field_errors.len() > 0LL) {
					_164640_ok = false;
					return _164640_ok;
				}
			}
			_iter_next_4394646880:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_s = *__julec_range_begin; goto _iter_begin_4394646880; }
			_iter_end_4394646880:;
		}
	}
	_164640_ok = true;
	return _164640_ok;
}



inline void _119177e90_Sema::_method_check_fn_decl(jule::Ref<_1037649f0_Fn> _165937_f) {
	if (_108e15ff0_is_ignore_ident(_165937_f->_field_ident)) {
		this->self->_method_push_err(_165937_f->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>({}));
	} else if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_165937_f).alloc)),_165937_f->_field_ident,_165937_f->_field_cpp_linked)) {
		this->self->_method_push_err(_165937_f->_field_token,jule::Str("duplicated identifier for declarations in scope: @", 50),jule::Slice<jule::Any>({jule::Any(_165937_f->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>({}));
	}
	_165937_f->_field_sema=this->self;
	this->self->_method_check_fn_decl_prototype(_165937_f);
}



inline jule::Bool _119177e90_Sema::_method_check_fn_decls(void) {
	jule::Bool _167236_ok = jule::Bool();
	{
		auto __julec_range_expr = this->self->_field_file->_field_funcs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394663664:;
			{
				this->self->_method_check_fn_decl(_119177e90_f);
				if (this->self->_field_errors.len() > 0LL) {
					_167236_ok = false;
					return _167236_ok;
				}
			}
			_iter_next_4394663664:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394663664; }
			_iter_end_4394663664:;
		}
	}
	_167236_ok = true;
	return _167236_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_directive_pass(_1036da950_Pass _168439_pass) {
	jule::Bool _168453_ok = jule::Bool();
	if (_168439_pass._field_text == jule::Str("", 0)) {
		_168453_ok = true;
		return _168453_ok;
	}
	if (_168439_pass._field_text[0LL] != '-') {
		(*this)._method_push_err(_168439_pass._field_token,jule::Str("the pass directive must be start with dash", 42),jule::Slice<jule::Any>({}));
		_168453_ok = false;
		return _168453_ok;
	}
	_168453_ok = true;
	return _168453_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_passes(void) {
	jule::Bool _169733_ok = jule::Bool();
	_169733_ok=true;
	{
		auto __julec_range_expr = (*this)._field_file->_field_passes;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_1036da950_Pass _119177e90_pass = *__julec_range_begin;
			_iter_begin_4394676992:;
			{
				_169733_ok=(*this)._method_check_directive_pass(_119177e90_pass) && _169733_ok;
			}
			_iter_next_4394676992:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_pass = *__julec_range_begin; goto _iter_begin_4394676992; }
			_iter_end_4394676992:;
		}
	}
	return _169733_ok;
}



inline void _119177e90_Sema::_method_push_cycle_error(jule::Ref<_1037370d0_Struct> _170531_st1,jule::Ref<_1037370d0_Struct> _170545_st2,jule::Str& _170564_message) {
	
	jule::Str _170813_refers_to = _1486379e0_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_170531_st1->_field_ident),jule::Any(_170545_st2->_field_ident)}));
	_170564_message=((_1036da950_str_repeat(jule::Str(" ", 1),4LL) + _170813_refers_to) + jule::Str("\n", 1)) + _170564_message;
}



inline jule::Bool _119177e90_Sema::_method_check_cross_cycle(jule::Ref<_1037370d0_Struct> _171232_st1,jule::Ref<_1037370d0_Struct> _171246_st2,jule::Str& _171265_message) {
	{
		auto __julec_range_expr = _171246_st2->_field_uses;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _119177e90_u = *__julec_range_begin;
			_iter_begin_4394692176:;
			{
				if ((_119177e90_u).alloc == (_171232_st1).alloc) {
					(*this)._method_push_cycle_error(_171246_st2,_119177e90_u,_171265_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_171232_st1,_119177e90_u,_171265_message)))) {
					(*this)._method_push_cycle_error(_171246_st2,_119177e90_u,_171265_message);
					return false;
				}
			}
			_iter_next_4394692176:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_u = *__julec_range_begin; goto _iter_begin_4394692176; }
			_iter_end_4394692176:;
		}
	}
	return true;
}



inline jule::Bool _119177e90_Sema::_method_check_struct_derive_illegal_cycles(jule::Str _172853_derive,jule::Ref<_1037370d0_Struct> _172866_st1,jule::Ref<_104a21a10_TypeKind> _172884_k) {
	jule::Bool _1728100_ok = jule::Bool();
	jule::Ref<_1037370d0_Struct> _172917_st2 = _104a21a10_get_struct_from_kind(_172884_k);
	if ((!(jule::real(_172917_st2)))) {
		_1728100_ok = true;
		return _1728100_ok;
	}
	if ((_172866_st1).alloc == (_172917_st2).alloc) {
		(*this)._method_push_err(_172866_st1->_field_token,jule::Str("illegal cycle for \"@\" derive, struct \"@\" refers to itself", 57),jule::Slice<jule::Any>({jule::Any(_172853_derive),jule::Any(_172866_st1->_field_ident)}));
		_1728100_ok = false;
		return _1728100_ok;
	}
	jule::Str _174117_message = jule::Str("", 0);
	if ((!((*this)._method_check_cross_cycle(_172866_st1,_172917_st2,_174117_message)))) {
		jule::Str _174421_err_msg = _174117_message;
		_174117_message=jule::Str("", 0);
		(*this)._method_push_cycle_error(_172866_st1,_172917_st2,_174117_message);
		_174421_err_msg=_174421_err_msg + _174117_message;
		(*this)._method_push_err(_172866_st1->_field_token,jule::Str("illegal cross cycle for \"@\" derive;\n@", 37),jule::Slice<jule::Any>({jule::Any(_172853_derive),jule::Any(_174421_err_msg)}));
		_1728100_ok = false;
		return _1728100_ok;
	}
	_1728100_ok = true;
	return _1728100_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_struct_ins_derive_clone(jule::Ref<_1037370d0_StructIns> _175552_st) {
	jule::Bool _175570_ok = jule::Bool();
	if ((!(_175552_st->_field_decl->_method_is_derives(jule::Str("Clone", 5))))) {
		_175570_ok = true;
		return _175570_ok;
	}
	{
		auto __julec_range_expr = _175552_st->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_FieldIns> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394717440:;
			{
				if ((!(jule::real(_119177e90_f->_field_kind))) || (!(_104a21a10_is_mut(_119177e90_f->_field_kind)))) {
					goto _iter_next_4394717440;
				}
				if ((!(_104a21a10_supports_cloning(_119177e90_f->_field_kind)))) {
					(*this)._method_push_err(_175552_st->_field_decl->_field_token,jule::Str("type \"@\" is not compatible to derive \"@\"", 40),jule::Slice<jule::Any>({jule::Any(_119177e90_f->_field_kind->_method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					_175570_ok = false;
					return _175570_ok;
				}
				if ((!((*this)._method_check_struct_derive_illegal_cycles(jule::Str("Clone", 5),_175552_st->_field_decl,_119177e90_f->_field_kind)))) {
					_175570_ok = false;
					return _175570_ok;
				}
			}
			_iter_next_4394717440:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394717440; }
			_iter_end_4394717440:;
		}
	}
	_175570_ok = true;
	return _175570_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_struct_derive_clone(jule::Ref<_1037370d0_Struct> _177848_st) {
	jule::Bool _177863_ok = jule::Bool();
	_177863_ok = (*this)._method_check_struct_ins_derive_clone(_177848_st->_method_instance());
	return _177863_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_file_derives(void) {
	jule::Bool _178239_ok = jule::Bool();
	{
		auto __julec_range_expr = (*this)._field_file->_field_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _119177e90_st = *__julec_range_begin;
			_iter_begin_4394736368:;
			{
				jule::Bool _178517_ok = (*this)._method_check_struct_derive_clone(_119177e90_st);
				if ((!(_178517_ok))) {
					_178239_ok = false;
					return _178239_ok;
				}
			}
			_iter_next_4394736368:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_st = *__julec_range_begin; goto _iter_begin_4394736368; }
			_iter_end_4394736368:;
		}
	}
	_178239_ok = true;
	return _178239_ok;
}



inline void _119177e90_Sema::_method_check_package_derives(void) {
	{
		auto __julec_range_expr = (*this)._field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394740032:;
			{
				(*this)._method_set_current_file(_119177e90_f);
				jule::Bool _179717_ok = (*this)._method_check_file_derives();
				if ((!(_179717_ok))) {
					return;
				}
			}
			_iter_next_4394740032:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394740032; }
			_iter_end_4394740032:;
		}
	}
}



inline void _119177e90_Sema::_method_check_package_decls(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394746528:;
			{
				this->self->_method_set_current_file(_119177e90_f);
				if ((!(this->self->_method_check_passes()))) {
					return;
				}
			}
			_iter_next_4394746528:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394746528; }
			_iter_end_4394746528:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394747392:;
			{
				this->self->_method_set_current_file(_119177e90_f);
				if ((!(this->self->_method_check_type_alias_decls()))) {
					return;
				}
			}
			_iter_next_4394747392:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394747392; }
			_iter_end_4394747392:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394750512:;
			{
				this->self->_method_set_current_file(_119177e90_f);
				if ((!(this->self->_method_check_trait_decls()))) {
					return;
				}
			}
			_iter_next_4394750512:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394750512; }
			_iter_end_4394750512:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394753616:;
			{
				this->self->_method_set_current_file(_119177e90_f);
				if ((!(this->self->_method_check_global_decls()))) {
					return;
				}
			}
			_iter_next_4394753616:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394753616; }
			_iter_end_4394753616:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394756784:;
			{
				this->self->_method_set_current_file(_119177e90_f);
				if ((!(this->self->_method_check_fn_decls()))) {
					return;
				}
			}
			_iter_next_4394756784:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394756784; }
			_iter_end_4394756784:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394759760:;
			{
				this->self->_method_set_current_file(_119177e90_f);
				if ((!(this->self->_method_check_struct_decls()))) {
					return;
				}
			}
			_iter_next_4394759760:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394759760; }
			_iter_end_4394759760:;
		}
	}
	this->self->_method_check_package_derives();
}



inline void _119177e90_Sema::_method_check_data_for_type_inference(jule::Ref<_1191dc300_Data> _185248_d,_108e15ff0_Token _185258_err_token) {
	{
		if (!((_185248_d->_method_is_nil()))) { goto _case_end_4394769056; }
		_case_begin_4394769056:;
		{
			(*this)._method_push_err(_185258_err_token,jule::Str("nil is cannot use with type inferred definitions", 48),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4394768832;
		_case_end_4394769056:;
		if (!((_185248_d->_method_is_void()))) { goto _case_end_4394769184; }
		_case_begin_4394769184:;
		{
			(*this)._method_push_err(_185258_err_token,jule::Str("void data is cannot use for type inferred definitions", 53),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4394768832;
		_case_end_4394769184:;
		if (!((_185248_d->_field_kind->_field_variadic))) { goto _case_end_4394769312; }
		_case_begin_4394769312:;
		{
			(*this)._method_push_err(_185258_err_token,jule::Str("invalid expression for type inference", 37),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4394768832;
		_case_end_4394769312:;
		_match_end_4394768832:;
	}
}



inline void _119177e90_Sema::_method_check_var(jule::Ref<_104598e40_Var> _186533_v) {
	if (_186533_v->_field_cpp_linked) {
		return;
	}
	if (_186533_v->_method_is_type_inferred()) {
		_186533_v->_field_kind=jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),_186533_v->_field_value->_field_data->_field_kind));
		this->self->_method_check_data_for_type_inference(_186533_v->_field_value->_field_data,_186533_v->_field_value->_field_expr->_field_token);
	} else {
		jule::Ref<_104a21a10_Arr> _187721_arr = _186533_v->_field_kind->_field_kind->_method_arr();
		if (jule::real(_187721_arr)) {
			if (_187721_arr->_field_auto) {
				jule::Ref<_104a21a10_Arr> _188025_data_arr = _186533_v->_field_value->_field_data->_field_kind->_method_arr();
				if (jule::real(_188025_data_arr)) {
					_187721_arr->_field_n=_188025_data_arr->_field_n;
				}
			}
		}
		this->self->_method_check_assign_type(_186533_v->_field_kind->_field_kind,_186533_v->_field_value->_field_data,_186533_v->_field_value->_field_expr->_field_token,false);
	}
	this->self->_method_check_validity_for_init_expr(_186533_v->_field_mutable,_186533_v->_field_reference,_186533_v->_field_kind->_field_kind,_186533_v->_field_value->_field_data,_186533_v->_field_value->_field_expr->_field_token);
	if ((!(_186533_v->_field_constant))) {
		jule::drop(_186533_v->_field_value->_field_data->_field_constant);
	}
	if (jule::real(_186533_v->_field_kind->_field_kind->_method_tup())) {
		jule::drop(_186533_v->_field_kind->_field_kind);
	}
}



inline void _119177e90_Sema::_method_check_type_var(jule::Ref<_104598e40_Var> _190838_decl,jule::Trait<_10459ee60_Lookup> _190850_l) {
	if (_190838_decl->_field_cpp_linked || (!(_190838_decl->_method_is_initialized()))) {
		return;
	}
	if (jule::real(_190838_decl->_field_kind)) {
		_190838_decl->_field_value->_field_data=this->self->_method_evalpd(_190838_decl->_field_value->_field_expr,_190850_l,_190838_decl->_field_kind->_field_kind,_190838_decl);
	} else {
		_190838_decl->_field_value->_field_data=this->self->_method_evalpd(_190838_decl->_field_value->_field_expr,_190850_l,jule::new_ref<_104a21a10_TypeKind>(),_190838_decl);
	}
	if ((!(jule::real(_190838_decl->_field_value->_field_data)))) {
		return;
	}
	this->self->_method_check_var(_190838_decl);
}



inline void _119177e90_Sema::_method_check_global_types(void) {
	{
		auto __julec_range_expr = this->self->_field_file->_field_vars;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104598e40_Var> _119177e90_decl = *__julec_range_begin;
			_iter_begin_4394810016:;
			{
				this->self->_method_check_type_var(_119177e90_decl,this->self);
			}
			_iter_next_4394810016:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_decl = *__julec_range_begin; goto _iter_begin_4394810016; }
			_iter_end_4394810016:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_file->_field_vars;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104598e40_Var> _119177e90_decl = *__julec_range_begin;
			_iter_begin_4394810992:;
			{
				if (_119177e90_decl->_method_is_initialized() && (_119177e90_decl->_field_depends.len() > 0LL)) {
					this->self->_method_check_type_var(_119177e90_decl,this->self);
				}
			}
			_iter_next_4394810992:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_decl = *__julec_range_begin; goto _iter_begin_4394810992; }
			_iter_end_4394810992:;
		}
	}
}



inline void _119177e90_Sema::_method_check_type_method(jule::Ref<_1037370d0_StructIns> _194141_strct,jule::Ref<_1037649f0_Fn> _194164_f) {
	if (_194164_f->_field_cpp_linked) {
		return;
	}
	if (_194164_f->_field_generics.len() > 0LL) {
		return;
	}
	if (_194164_f->_field_instances.len() == 0LL) {
		jule::Ref<_1037649f0_FnIns> _195221_ins = _194164_f->_method_instance();
		_195221_ins->_field_owner=_194141_strct;
		_194164_f->_method_append_instance(_195221_ins);
		this->self->_method_reload_fn_ins_types(_195221_ins);
		_195221_ins->_field_reloaded=true;
	}
	{
		auto __julec_range_expr = _194164_f->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_FnIns> _119177e90_ins = *__julec_range_begin;
			_iter_begin_4394821424:;
			{
				if (_119177e90_ins->_field_scope->_field_stmts.len() > 0LL) {
					goto _iter_next_4394821424;
				}
				this->self->_method_check_fn_ins(_119177e90_ins);
			}
			_iter_next_4394821424:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_ins = *__julec_range_begin; goto _iter_begin_4394821424; }
			_iter_end_4394821424:;
		}
	}
}



inline void _119177e90_Sema::_method_check_type_struct(jule::Ref<_1037370d0_Struct> _196841_strct) {
	if (_196841_strct->_field_cpp_linked) {
		return;
	}
	if ((_196841_strct->_field_generics.len() == 0LL) && (_196841_strct->_field_instances.len() == 0LL)) {
		jule::Ref<_1037370d0_StructIns> _197421_ins = _196841_strct->_method_instance();
		_197421_ins->_field_checked=true;
		_196841_strct->_method_append_instance(_197421_ins);
	}
	{
		auto __julec_range_expr = _196841_strct->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_StructIns> _119177e90_ins = *__julec_range_begin;
			_iter_begin_4394838992:;
			{
				{
					auto __julec_range_expr = _119177e90_ins->_field_methods;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1037649f0_Fn> _119177e90_f = *__julec_range_begin;
						_iter_begin_4394841104:;
						{
							this->self->_method_check_type_method(_119177e90_ins,_119177e90_f);
						}
						_iter_next_4394841104:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394841104; }
						_iter_end_4394841104:;
					}
				}
			}
			_iter_next_4394838992:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_ins = *__julec_range_begin; goto _iter_begin_4394838992; }
			_iter_end_4394838992:;
		}
	}
}



inline void _119177e90_Sema::_method_check_struct_types(void) {
	{
		auto __julec_range_expr = this->self->_field_file->_field_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _119177e90_s = *__julec_range_begin;
			_iter_begin_4394844240:;
			{
				this->self->_method_check_type_struct(_119177e90_s);
			}
			_iter_next_4394844240:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_s = *__julec_range_begin; goto _iter_begin_4394844240; }
			_iter_end_4394844240:;
		}
	}
}



inline void _119177e90_Sema::_method_check_rets(jule::Ref<_1037649f0_FnIns> _199233_f) {
	if (_199233_f->_field_decl->_method_is_void()) {
		return;
	}
	jule::Bool _199713_ok = _119177e90_has_ret(_199233_f->_field_scope);
	if ((!(_199713_ok))) {
		(*this)._method_push_err(_199233_f->_field_decl->_field_token,jule::Str("missing return at end of function", 33),jule::Slice<jule::Any>({}));
	}
}



inline void _119177e90_Sema::_method_check_fn_ins_sc(jule::Ref<_1037649f0_FnIns> _200338_f,jule::Ref<_104180810_ScopeChecker> _200353_sc) {
	if (_200338_f->_field_decl->_field_cpp_linked) {
		return;
	}
	jule::Slice<jule::Ref<_104598e40_Var>> _200817_vars = _119177e90_build_ret_vars(_200338_f);
	_200353_sc->_field_table->_field_vars=jule::append(_200353_sc->_field_table->_field_vars,_200817_vars);
	_200353_sc->_field_table->_field_vars=jule::append(_200353_sc->_field_table->_field_vars,_119177e90_build_param_vars(_200338_f));
	_200353_sc->_field_table->_field_type_aliases=jule::append(_200353_sc->_field_table->_field_type_aliases,_119177e90_build_generic_type_aliases(_200338_f));
	_200353_sc->_method_check(_200338_f->_field_decl->_field_scope,_200338_f->_field_scope);
	if (_200817_vars.len() > 0LL) {
		jule::Slice<jule::Any> _201821_stmts = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::Int>(static_cast<jule::I64>(_200338_f->_field_scope->_field_stmts.len() + _200817_vars.len())));
		{
			auto __julec_range_expr = _200817_vars;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_104598e40_Var> _119177e90_v = *__julec_range_begin;
				_iter_begin_4394866000:;
				{
					_201821_stmts=jule::append(_201821_stmts,jule::Slice<jule::Any>({jule::Any(_119177e90_v)}));
				}
				_iter_next_4394866000:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _119177e90_v = *__julec_range_begin; goto _iter_begin_4394866000; }
				_iter_end_4394866000:;
			}
		}
		_201821_stmts=jule::append(_201821_stmts,_200338_f->_field_scope->_field_stmts);
		_200338_f->_field_scope->_field_stmts=_201821_stmts;
	}
	(*this)._method_check_rets(_200338_f);
}



inline void _119177e90_Sema::_method_check_fn_ins(jule::Ref<_1037649f0_FnIns> _203035_f) {
	if (_203035_f->_field_decl->_field_cpp_linked) {
		return;
	}
	jule::Ref<_1191dcd40_SymbolTable> _203517_old = _203035_f->_field_decl->_field_sema->_field_file;
	__JULE_DEFER({
		_203035_f->_field_decl->_field_sema->_method_set_current_file(_203517_old);
	});
	jule::Ref<_1191dcd40_SymbolTable> _203717_file = _119177e90_find_file(_203035_f->_field_decl->_field_sema->_field_files,_203035_f->_field_decl->_field_token._field_file);
	if (jule::real(_203717_file)) {
		_203035_f->_field_decl->_field_sema->_method_set_current_file(_203717_file);
	}
	jule::Ref<_104180810_ScopeChecker> _204217_sc = _104180810_new_scope_checker(_203035_f->_field_decl->_field_sema,_203035_f);
	(*this)._method_check_fn_ins_sc(_203035_f,_204217_sc);
	if ((_203035_f->_field_decl->_field_sema).alloc != (&((*this)))) {
		(*this)._field_errors=jule::append((*this)._field_errors,_203035_f->_field_decl->_field_sema->_field_errors);
	}
}



inline void _119177e90_Sema::_method_check_type_fn(jule::Ref<_1037649f0_Fn> _205037_f) {
	if (_205037_f->_field_cpp_linked) {
		return;
	}
	if (_205037_f->_field_generics.len() > 0LL) {
		return;
	}
	{
		auto __julec_range_expr = _205037_f->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_FnIns> _119177e90_ins = *__julec_range_begin;
			_iter_begin_4394890080:;
			{
				this->self->_method_check_fn_ins(_119177e90_ins);
			}
			_iter_next_4394890080:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_ins = *__julec_range_begin; goto _iter_begin_4394890080; }
			_iter_end_4394890080:;
		}
	}
}



inline void _119177e90_Sema::_method_precheck_type_fn(jule::Ref<_1037649f0_Fn> _206540_f) {
	if (_206540_f->_field_cpp_linked) {
		return;
	}
	if (_206540_f->_field_generics.len() > 0LL) {
		return;
	}
	if (_206540_f->_field_instances.len() == 0LL) {
		jule::Ref<_1037649f0_FnIns> _207621_ins = _206540_f->_method_instance();
		_206540_f->_field_instances=jule::append(_206540_f->_field_instances,jule::Slice<jule::Ref<_1037649f0_FnIns>>({_207621_ins}));
		this->self->_method_reload_fn_ins_types(_207621_ins);
		_207621_ins->_field_reloaded=true;
	}
}



inline jule::Bool _119177e90_Sema::_method_precheck_fn_types(void) {
	jule::Bool _208439_ok = jule::Bool();
	{
		auto __julec_range_expr = this->self->_field_file->_field_funcs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _119177e90_decl = *__julec_range_begin;
			_iter_begin_4394904112:;
			{
				this->self->_method_precheck_type_fn(_119177e90_decl);
			}
			_iter_next_4394904112:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_decl = *__julec_range_begin; goto _iter_begin_4394904112; }
			_iter_end_4394904112:;
		}
	}
	_208439_ok = true;
	return _208439_ok;
}



inline jule::Bool _119177e90_Sema::_method_check_fn_types(void) {
	jule::Bool _209236_ok = jule::Bool();
	{
		auto __julec_range_expr = this->self->_field_file->_field_funcs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _119177e90_decl = *__julec_range_begin;
			_iter_begin_4394908992:;
			{
				this->self->_method_check_type_fn(_119177e90_decl);
			}
			_iter_next_4394908992:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_decl = *__julec_range_begin; goto _iter_begin_4394908992; }
			_iter_end_4394908992:;
		}
	}
	_209236_ok = true;
	return _209236_ok;
}



inline void _119177e90_Sema::_method_check_package_types(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394912848:;
			{
				this->self->_method_set_current_file(_119177e90_f);
				this->self->_method_check_global_types();
			}
			_iter_next_4394912848:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394912848; }
			_iter_end_4394912848:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394913920:;
			{
				this->self->_method_set_current_file(_119177e90_f);
				this->self->_method_precheck_fn_types();
			}
			_iter_next_4394913920:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394913920; }
			_iter_end_4394913920:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394916848:;
			{
				this->self->_method_set_current_file(_119177e90_f);
				this->self->_method_check_fn_types();
			}
			_iter_next_4394916848:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394916848; }
			_iter_end_4394916848:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394919536:;
			{
				this->self->_method_set_current_file(_119177e90_f);
				this->self->_method_check_struct_types();
			}
			_iter_next_4394919536:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394919536; }
			_iter_end_4394919536:;
		}
	}
}



inline void _119177e90_Sema::_method_set_file_sema_fields(void) {
	{
		auto __julec_range_expr = this->self->_field_file->_field_funcs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _119177e90_f = *__julec_range_begin;
			_iter_begin_4394925488:;
			{
				_119177e90_f->_field_sema=this->self;
			}
			_iter_next_4394925488:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_f = *__julec_range_begin; goto _iter_begin_4394925488; }
			_iter_end_4394925488:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_file->_field_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _119177e90_st = *__julec_range_begin;
			_iter_begin_4394926288:;
			{
				_119177e90_st->_field_sema=this->self;
			}
			_iter_next_4394926288:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_st = *__julec_range_begin; goto _iter_begin_4394926288; }
			_iter_end_4394926288:;
		}
	}
}



inline void _119177e90_Sema::_method_set_sema_fields(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_file = *__julec_range_begin;
			_iter_begin_4394930496:;
			{
				this->self->_method_set_current_file(_119177e90_file);
				this->self->_method_set_file_sema_fields();
			}
			_iter_next_4394930496:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_file = *__julec_range_begin; goto _iter_begin_4394930496; }
			_iter_end_4394930496:;
		}
	}
}



inline void _119177e90_Sema::_method_check(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> _214029_files) {
	this->self->_field_files=_214029_files;
	this->self->_method_check_imports();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_check_enums();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_set_sema_fields();
	this->self->_method_impl_impls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_check_package_decls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_check_package_types();
}







std::ostream &operator<<(std::ostream &_Stream, const _119177e90_Sema &_Src) {
	_Stream << "Sema{";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "files:" << _Src._field_files << ", ";
	_Stream << "file:" << _Src._field_file;
	_Stream << "}";
	return _Stream;
}



inline void _1044463d0_DynamicTypeAnnotation::_method_push_generic(jule::Ref<_104a21a10_TypeKind> _53435_k,jule::Int _53449_i) {
	(*this)._field_f->_field_generics[static_cast<jule::Int>(_53449_i)]=_53435_k;
}



inline jule::Bool _1044463d0_DynamicTypeAnnotation::_method_annotate_prim(jule::Ref<_104a21a10_TypeKind> _53843_k) {
	jule::Bool _53859_ok = jule::Bool();
	jule::Str _53913_kind = (*((*this)._field_k))->_method_to_str();
	{
		auto __julec_range_expr = (*this)._field_f->_field_decl->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1044463d0_i = 0;
			jule::Ref<_1487f5920_GenericDecl> _1044463d0_g = *__julec_range_begin;
			_iter_begin_4395806928:;
			{
				if (_53913_kind != _1044463d0_g->_field_ident) {
					goto _iter_next_4395806928;
				}
				jule::Ref<_104a21a10_TypeKind> _54517_t = (*this)._field_f->_field_generics[static_cast<jule::Int>(_1044463d0_i)];
				{
					if (!(((!(jule::real(_54517_t)))))) { goto _case_end_4395812128; }
					_case_begin_4395812128:;
					{
						(*this)._method_push_generic(_53843_k,_1044463d0_i);
					}
					goto _match_end_4395811984;
					_case_end_4395812128:;
					if (!((_54517_t->_method_to_str() != _53843_k->_method_to_str()))) { goto _case_end_4395812240; }
					_case_begin_4395812240:;
					{
						_53859_ok = false;
						return _53859_ok;
					}
					goto _match_end_4395811984;
					_case_end_4395812240:;
					_match_end_4395811984:;
				}
				(*((*this)._field_k))->_field_kind=_53843_k->_field_kind;
				_53859_ok = true;
				return _53859_ok;
			}
			_iter_next_4395806928:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1044463d0_i; _1044463d0_g = *__julec_range_begin; goto _iter_begin_4395806928; }
			_iter_end_4395806928:;
		}
	}
	_53859_ok = false;
	return _53859_ok;
}



inline jule::Bool _1044463d0_DynamicTypeAnnotation::_method_annotate_slc(jule::Ref<_104a21a10_TypeKind> _56242_k) {
	jule::Bool _56258_ok = jule::Bool();
	jule::Ref<_104a21a10_Slc> _56317_pslc = (*((*this)._field_k))->_method_slc();
	if ((!(jule::real(_56317_pslc)))) {
		_56258_ok = false;
		return _56258_ok;
	}
	jule::Ref<_104a21a10_Slc> _56817_slc = _56242_k->_method_slc();
	_104a21a10_TypeKind* _56917_kk = (_56317_pslc->_field_elem).alloc;
	(*this)._field_k=(&(_56917_kk));
	_56258_ok = (*this)._method_annotate_kind(_56817_slc->_field_elem);
	return _56258_ok;
}



inline jule::Bool _1044463d0_DynamicTypeAnnotation::_method_check_map_key(_104a21a10_TypeKind** _57443_k,jule::Ref<_104a21a10_TypeKind> _57462_ck) {
	jule::Bool _57479_ok = jule::Bool();
	_104a21a10_TypeKind** _57517_old = (*this)._field_k;
	(*this)._field_k=_57443_k;
	_57479_ok=(*this)._method_annotate_kind(_57462_ck);
	(*this)._field_k=_57517_old;
	_57479_ok = _57479_ok;
	return _57479_ok;
}



inline jule::Bool _1044463d0_DynamicTypeAnnotation::_method_annotate_map(jule::Ref<_104a21a10_TypeKind> _58242_k) {
	jule::Bool _58258_ok = jule::Bool();
	jule::Ref<_104a21a10_Map> _58317_pmap = (*((*this)._field_k))->_method_map();
	if ((!(jule::real(_58317_pmap)))) {
		_58258_ok = false;
		return _58258_ok;
	}
	jule::Ref<_104a21a10_Map> _58817_m = _58242_k->_method_map();
	_104a21a10_TypeKind* _59017_key = (_58317_pmap->_field_key).alloc;
	_104a21a10_TypeKind* _59117_val = (_58317_pmap->_field_val).alloc;
	_58258_ok = (*this)._method_check_map_key((&(_59017_key)),_58817_m->_field_key) && (*this)._method_check_map_key((&(_59117_val)),_58817_m->_field_val);
	return _58258_ok;
}



inline jule::Bool _1044463d0_DynamicTypeAnnotation::_method_annotate_fn(jule::Ref<_104a21a10_TypeKind> _59541_k) {
	jule::Bool _59557_ok = jule::Bool();
	jule::Ref<_1037649f0_FnIns> _59617_pf = (*((*this)._field_k))->_method_fnc();
	if ((!(jule::real(_59617_pf)))) {
		_59557_ok = false;
		return _59557_ok;
	}
	jule::Ref<_1037649f0_FnIns> _60017_f = _59541_k->_method_fnc();
	{
		if (!((_59617_pf->_field_params.len() != _60017_f->_field_params.len()))) { goto _case_end_4395852592; }
		_case_begin_4395852592:;
		{
			_59557_ok = false;
			return _59557_ok;
		}
		goto _match_end_4395852304;
		_case_end_4395852592:;
		if (!((_59617_pf->_field_decl->_method_is_void() != _60017_f->_field_decl->_method_is_void()))) { goto _case_end_4395852704; }
		_case_begin_4395852704:;
		{
			_59557_ok = false;
			return _59557_ok;
		}
		goto _match_end_4395852304;
		_case_end_4395852704:;
		_match_end_4395852304:;
	}
	_59557_ok=true;
	_104a21a10_TypeKind** _61017_old = (*this)._field_k;
	{
		auto __julec_range_expr = _60017_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1044463d0_i = 0;
			jule::Ref<_1037649f0_ParamIns> _1044463d0_fp = *__julec_range_begin;
			_iter_begin_4392949296:;
			{
				_104a21a10_TypeKind* _61221_pfp = (_59617_pf->_field_params[static_cast<jule::Int>(_1044463d0_i)]->_field_kind).alloc;
				(*this)._field_k=(&(_61221_pfp));
				_59557_ok=(*this)._method_annotate_kind(_1044463d0_fp->_field_kind) && _59557_ok;
			}
			_iter_next_4392949296:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1044463d0_i; _1044463d0_fp = *__julec_range_begin; goto _iter_begin_4392949296; }
			_iter_end_4392949296:;
		}
	}
	if ((!(_59617_pf->_field_decl->_method_is_void()))) {
		_104a21a10_TypeKind* _61821_result = (_59617_pf->_field_result).alloc;
		(*this)._field_k=(&(_61821_result));
		_59557_ok=(*this)._method_annotate_kind(_60017_f->_field_result) && _59557_ok;
	}
	(*this)._field_k=_61017_old;
	_59557_ok = _59557_ok;
	return _59557_ok;
}



inline jule::Bool _1044463d0_DynamicTypeAnnotation::_method_annotate_ptr(jule::Ref<_104a21a10_TypeKind> _62742_k) {
	jule::Bool _62758_ok = jule::Bool();
	jule::Ref<_104a21a10_Ptr> _62817_pptr = (*((*this)._field_k))->_method_ptr();
	if ((!(jule::real(_62817_pptr)))) {
		_62758_ok = false;
		return _62758_ok;
	}
	jule::Ref<_104a21a10_Ptr> _63317_ptr = _62742_k->_method_ptr();
	_104a21a10_TypeKind* _63417_cpptr = (_62817_pptr->_field_elem).alloc;
	(*this)._field_k=(&(_63417_cpptr));
	_62758_ok = (*this)._method_annotate_kind(_63317_ptr->_field_elem);
	return _62758_ok;
}



inline jule::Bool _1044463d0_DynamicTypeAnnotation::_method_annotate_any(jule::Ref<_104a21a10_TypeKind> _63942_k) {
	jule::Bool _63958_ok = jule::Bool();
	jule::Str _64013_kind = (*((*this)._field_k))->_method_to_str();
	{
		auto __julec_range_expr = (*this)._field_f->_field_decl->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1044463d0_i = 0;
			jule::Ref<_1487f5920_GenericDecl> _1044463d0_g = *__julec_range_begin;
			_iter_begin_4394981360:;
			{
				if (_64013_kind != _1044463d0_g->_field_ident) {
					goto _iter_next_4394981360;
				}
				jule::Ref<_104a21a10_TypeKind> _64617_t = (*this)._field_f->_field_generics[static_cast<jule::Int>(_1044463d0_i)];
				{
					if (!(((!(jule::real(_64617_t)))))) { goto _case_end_4394986608; }
					_case_begin_4394986608:;
					{
						(*this)._method_push_generic(_63942_k,_1044463d0_i);
					}
					goto _match_end_4394986464;
					_case_end_4394986608:;
					if (!((_64617_t->_method_to_str() != _63942_k->_method_to_str()))) { goto _case_end_4394986720; }
					_case_begin_4394986720:;
					{
						_63958_ok = false;
						return _63958_ok;
					}
					goto _match_end_4394986464;
					_case_end_4394986720:;
					_match_end_4394986464:;
				}
				(*((*this)._field_k))->_field_kind=_63942_k->_field_kind;
				_63958_ok = true;
				return _63958_ok;
			}
			_iter_next_4394981360:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1044463d0_i; _1044463d0_g = *__julec_range_begin; goto _iter_begin_4394981360; }
			_iter_end_4394981360:;
		}
	}
	_63958_ok = false;
	return _63958_ok;
}



inline jule::Bool _1044463d0_DynamicTypeAnnotation::_method_annotate_kind(jule::Ref<_104a21a10_TypeKind> _66343_k) {
	jule::Bool _66359_ok = jule::Bool();
	if (((*this)._field_k == nullptr) || ((*((*this)._field_k)) == nullptr)) {
		return _66359_ok;
	}
	{
		if (!(((*this)._method_annotate_any(_66343_k)))) { goto _case_end_4394997472; }
		_case_begin_4394997472:;
		{
			_66359_ok = true;
			return _66359_ok;
		}
		goto _match_end_4394995088;
		_case_end_4394997472:;
		if (!((jule::real(_66343_k->_method_prim())))) { goto _case_end_4394997584; }
		_case_begin_4394997584:;
		{
			_66359_ok = (*this)._method_annotate_prim(_66343_k);
			return _66359_ok;
		}
		goto _match_end_4394995088;
		_case_end_4394997584:;
		if (!((jule::real(_66343_k->_method_slc())))) { goto _case_end_4394997696; }
		_case_begin_4394997696:;
		{
			_66359_ok = (*this)._method_annotate_slc(_66343_k);
			return _66359_ok;
		}
		goto _match_end_4394995088;
		_case_end_4394997696:;
		if (!((jule::real(_66343_k->_method_map())))) { goto _case_end_4394997808; }
		_case_begin_4394997808:;
		{
			_66359_ok = (*this)._method_annotate_map(_66343_k);
			return _66359_ok;
		}
		goto _match_end_4394995088;
		_case_end_4394997808:;
		if (!((jule::real(_66343_k->_method_fnc())))) { goto _case_end_4394996400; }
		_case_begin_4394996400:;
		{
			_66359_ok = (*this)._method_annotate_fn(_66343_k);
			return _66359_ok;
		}
		goto _match_end_4394995088;
		_case_end_4394996400:;
		if (!((jule::real(_66343_k->_method_ptr())))) { goto _case_end_4394996512; }
		_case_begin_4394996512:;
		{
			_66359_ok = (*this)._method_annotate_ptr(_66343_k);
			return _66359_ok;
		}
		goto _match_end_4394995088;
		_case_end_4394996512:;
		_case_begin_4394995728:;
		{
			_66359_ok = false;
			return _66359_ok;
		}
		goto _match_end_4394995088;
		_case_end_4394995728:;
		_match_end_4394995088:;
	}
}



inline jule::Bool _1044463d0_DynamicTypeAnnotation::_method_annotate(void) {
	jule::Bool _67936_ok = jule::Bool();
	_104a21a10_TypeKind* _68017_pk = ((*this)._field_p->_field_kind).alloc;
	(*this)._field_k=(&(_68017_pk));
	_67936_ok = (*this)._method_annotate_kind((*this)._field_a->_field_kind);
	return _67936_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _1044463d0_DynamicTypeAnnotation &_Src) {
	_Stream << "DynamicTypeAnnotation{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "a:" << _Src._field_a << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "k:" << _Src._field_k;
	_Stream << "}";
	return _Stream;
}



inline void _1044463d0_StructLitChecker::_method_push_err(_108e15ff0_Token _91027_token,jule::Str _91041_fmt,jule::Slice<jule::Any> _91054_args) {
	(*this)._field_e->_method_push_err(_91027_token,_91041_fmt,_91054_args);
}



inline void _1044463d0_StructLitChecker::_method_push_suggestion(jule::Str _91534_fmt,jule::Slice<jule::Any> _91547_args) {
	(*this)._field_e->_method_push_suggestion(_91534_fmt,_91547_args);
}



inline void _1044463d0_StructLitChecker::_method_push_match(jule::Ref<_1037370d0_FieldIns> _91933_f,jule::Ref<_1191dc300_Data> _91951_d,_108e15ff0_Token _91961_error_token) {
	(*this)._field_args=jule::append((*this)._field_args,jule::Slice<jule::Ref<_11911f320_StructArgExprModel>>({jule::new_struct<_11911f320_StructArgExprModel>(new( std::nothrow ) _11911f320_StructArgExprModel(_91933_f,_91951_d->_field_model))}));
	
	(*this)._field_e->_field_s->_method_check_validity_for_init_expr(_91933_f->_field_decl->_field_mutable,false,_91933_f->_field_kind,_91951_d,_91961_error_token);
	(*this)._field_e->_field_s->_method_check_assign_type(_91933_f->_field_kind,_91951_d,_91961_error_token,false);
}



inline void _1044463d0_StructLitChecker::_method_check_pair(jule::Ref<_1487f5920_FieldExprPair> _93033_pair,jule::Slice<jule::Any> _93059_exprs) {
	jule::Ref<_1037370d0_FieldIns> _93217_f = (*this)._field_s->_method_find_field(_93033_pair->_field_field._field_kind);
	if ((!(jule::real(_93217_f)))) {
		(*this)._method_push_err(_93033_pair->_field_field,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_93033_pair->_field_field._field_kind)}));
		return;
	}
	if ((!((*this)._field_e->_field_s->_method_is_accessible_define(_93217_f->_field_decl->_field_public,_93217_f->_field_decl->_field_token)))) {
		(*this)._method_push_err(_93033_pair->_field_field,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_93033_pair->_field_field._field_kind)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
	}
	_julec_label_dup_lookup:;
	{
		auto __julec_range_expr = _93059_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1044463d0_expr = *__julec_range_begin;
			_iter_begin_4395181328:;
			{
				{
					auto _match_expr{ _1044463d0_expr };
					if (!(_match_expr.type_is<jule::Ref<_1487f5920_FieldExprPair>>())) { goto _case_end_4395183216; }
					_case_begin_4395183216:;
					{
						jule::Ref<_1487f5920_FieldExprPair> _94825_dpair = _1044463d0_expr.operator jule::Ref<_1487f5920_FieldExprPair>();
						{
							if (!((_93033_pair == _94825_dpair))) { goto _case_end_4395186304; }
							_case_begin_4395186304:;
							{
								goto _iter_end_4395181328;
							}
							goto _match_end_4395186064;
							_case_end_4395186304:;
							if (!((_93033_pair->_field_field._field_kind == _94825_dpair->_field_field._field_kind))) { goto _case_end_4395186416; }
							_case_begin_4395186416:;
							{
								(*this)._method_push_err(_93033_pair->_field_field,jule::Str("@ already has expression", 24),jule::Slice<jule::Any>({jule::Any(_93033_pair->_field_field._field_kind)}));
								goto _iter_end_4395181328;
							}
							goto _match_end_4395186064;
							_case_end_4395186416:;
							_match_end_4395186064:;
						}
					}
					goto _match_end_4395182128;
					_case_end_4395183216:;
					_match_end_4395182128:;
				}
			}
			_iter_next_4395181328:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1044463d0_expr = *__julec_range_begin; goto _iter_begin_4395181328; }
			_iter_end_4395181328:;
		}
	}
	jule::Ref<_104a21a10_TypeKind> _96017_prefix = (*this)._field_e->_field_prefix;
	__JULE_DEFER({
		(*this)._field_e->_field_prefix=_96017_prefix;
	});
	(*this)._field_e->_field_prefix=_93217_f->_field_kind;
	jule::Ref<_1191dc300_Data> _96417_d = (*this)._field_e->_method_eval_expr_kind(_93033_pair->_field_expr);
	if ((!(jule::real(_96417_d)))) {
		return;
	}
	(*this)._method_push_match(_93217_f,_96417_d,_93033_pair->_field_field);
}



inline jule::Bool _1044463d0_StructLitChecker::_method_ready_exprs(jule::Slice<jule::Any> _97134_exprs) {
	jule::Bool _97217_ok = true;
	{
		auto __julec_range_expr = _97134_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1044463d0_i = 0;
			jule::Any _1044463d0_expr = *__julec_range_begin;
			_iter_begin_4395200624:;
			{
				{
					auto _match_expr{ _1044463d0_expr };
					if (!(_match_expr.type_is<jule::Ref<_1487f5920_KeyValPair>>())) { goto _case_end_4395202944; }
					_case_begin_4395202944:;
					{
						jule::Ref<_1487f5920_KeyValPair> _97625_pair = _1044463d0_expr.operator jule::Ref<_1487f5920_KeyValPair>();
						{
							auto _match_expr{ _97625_pair->_field_key };
							if (!(_match_expr.type_is<jule::Ref<_1487f5920_IdentExpr>>())) { goto _case_end_4395206928; }
							goto _match_end_4395203152;
							_case_end_4395206928:;
							_case_begin_4395206128:;
							{
								(*this)._method_push_err(_97625_pair->_field_colon,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
								_97217_ok=false;
								goto _iter_next_4395200624;
							}
							goto _match_end_4395203152;
							_case_end_4395206128:;
							_match_end_4395203152:;
						}
						_97134_exprs[static_cast<jule::Int>(_1044463d0_i)]=jule::Any(jule::new_struct<_1487f5920_FieldExprPair>(new( std::nothrow ) _1487f5920_FieldExprPair(_97625_pair->_field_key.operator jule::Ref<_1487f5920_IdentExpr>()->_field_token,_97625_pair->_field_val)));
					}
					goto _match_end_4395202512;
					_case_end_4395202944:;
					_match_end_4395202512:;
				}
			}
			_iter_next_4395200624:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1044463d0_i; _1044463d0_expr = *__julec_range_begin; goto _iter_begin_4395200624; }
			_iter_end_4395200624:;
		}
	}
	return _97217_ok;
}



inline void _1044463d0_StructLitChecker::_method_check(jule::Slice<jule::Any> _99728_exprs) {
	if (_99728_exprs.len() == 0LL) {
		return;
	}
	if ((!((*this)._method_ready_exprs(_99728_exprs)))) {
		return;
	}
	jule::Bool _100617_paired = false;
	{
		auto __julec_range_expr = _99728_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1044463d0_i = 0;
			jule::Any _1044463d0_expr = *__julec_range_begin;
			_iter_begin_4395217424:;
			{
				{
					auto _match_expr{ _1044463d0_expr };
					if (!(_match_expr.type_is<jule::Ref<_1487f5920_FieldExprPair>>())) { goto _case_end_4395219840; }
					_case_begin_4395219840:;
					{
						jule::Ref<_1487f5920_FieldExprPair> _101025_pair = _1044463d0_expr.operator jule::Ref<_1487f5920_FieldExprPair>();
						if ((_1044463d0_i > 0LL) && (!(_100617_paired))) {
							(*this)._method_push_err(_101025_pair->_field_field,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
						}
						_100617_paired=true;
						(*this)._method_check_pair(_101025_pair,_99728_exprs);
					}
					goto _match_end_4395219376;
					_case_end_4395219840:;
					if (!(_match_expr.type_is<jule::Ref<_1487f5920_Expr>>())) { goto _case_end_4395220032; }
					_case_begin_4395220032:;
					{
						jule::Ref<_1487f5920_Expr> _101825_e = _1044463d0_expr.operator jule::Ref<_1487f5920_Expr>();
						if (_100617_paired) {
							(*this)._method_push_err(_101825_e->_field_token,jule::Str("argument must target to field", 29),jule::Slice<jule::Any>({}));
						}
						if (_1044463d0_i >= (*this)._field_s->_field_fields.len()) {
							(*this)._method_push_err(_101825_e->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
							goto _iter_next_4395217424;
						}
						jule::Ref<_1037370d0_FieldIns> _102725_field = (*this)._field_s->_field_fields[static_cast<jule::Int>(_1044463d0_i)];
						jule::Ref<_104a21a10_TypeKind> _102925_prefix = (*this)._field_e->_field_prefix;
						__JULE_DEFER({
							(*this)._field_e->_field_prefix=_102925_prefix;
						});
						(*this)._field_e->_field_prefix=_102725_field->_field_kind;
						jule::Ref<_1191dc300_Data> _103325_d = (*this)._field_e->_method_eval_expr_kind(_101825_e->_field_kind);
						if ((!(jule::real(_103325_d)))) {
							goto _iter_next_4395217424;
						}
						(*this)._method_push_match(_102725_field,_103325_d,_101825_e->_field_token);
					}
					goto _match_end_4395219376;
					_case_end_4395220032:;
					_match_end_4395219376:;
				}
			}
			_iter_next_4395217424:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1044463d0_i; _1044463d0_expr = *__julec_range_begin; goto _iter_begin_4395217424; }
			_iter_end_4395217424:;
		}
	}
	if ((!(_100617_paired))) {
		jule::I64 _104417_n = (*this)._field_s->_field_fields.len();
		jule::I64 _104521_diff = _104417_n - _99728_exprs.len();
		{
			if (!((_104521_diff <= 0LL))) { goto _case_end_4395243600; }
			_case_begin_4395243600:;
			{
				return;
			}
			goto _match_end_4395243472;
			_case_end_4395243600:;
			_match_end_4395243472:;
		}
		jule::Str _105121_idents = jule::Str("", 0);
		_iter_begin_4395242768:;
		if (!(_104521_diff > 0LL)) { goto _iter_end_4395242768; }
		{
			_105121_idents+=jule::Str(", ", 2) + (*this)._field_s->_field_fields[static_cast<jule::Int>(_104417_n - _104521_diff)]->_field_decl->_field_ident;
		}
		_iter_next_4395242768:;
		(_104521_diff)--;
		goto _iter_begin_4395242768;
		_iter_end_4395242768:;
		_105121_idents=_105121_idents.slice(2LL);
		(*this)._method_push_err((*this)._field_error_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_105121_idents)}));
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1044463d0_StructLitChecker &_Src) {
	_Stream << "StructLitChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_104598e40_Var> _1044463d0_RangeChecker::_method_build_var(jule::Ref<_1487f5920_VarDecl> _107028_decl) {
	jule::Ref<_104598e40_Var> _107117_v = _1036da950_build_var(_107028_decl);
	return _107117_v;
}



inline void _1044463d0_RangeChecker::_method_set_size_key(void) {
	if ((!(jule::real((*this)._field_rang->_field_key_a))) || _108e15ff0_is_ignore_ident((*this)._field_rang->_field_key_a->_field_ident)) {
		return;
	}
	(*this)._field_kind->_field_key_a=(*this)._method_build_var((*this)._field_rang->_field_key_a);
	(*this)._field_kind->_field_key_a->_field_kind=jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("int", 3))))));
}



inline void _1044463d0_RangeChecker::_method_check_slice(void) {
	(*this)._method_set_size_key();
	if ((!(jule::real((*this)._field_rang->_field_key_b))) || _108e15ff0_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	jule::Ref<_104a21a10_Slc> _109417_slc = (*this)._field_d->_field_kind->_method_slc();
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),_109417_slc->_field_elem));
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr((*this)._field_kind->_field_key_b->_field_mutable,(*this)._field_kind->_field_key_b->_field_reference,(*this)._field_kind->_field_key_b->_field_kind->_field_kind,(*this)._field_d,(*this)._field_rang->_field_in_token);
}



inline void _1044463d0_RangeChecker::_method_check_array(void) {
	(*this)._method_set_size_key();
	if ((!(jule::real((*this)._field_rang->_field_key_b))) || _108e15ff0_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	jule::Ref<_104a21a10_Arr> _111117_arr = (*this)._field_d->_field_kind->_method_arr();
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),_111117_arr->_field_elem));
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr((*this)._field_kind->_field_key_b->_field_mutable,(*this)._field_kind->_field_key_b->_field_reference,(*this)._field_kind->_field_key_b->_field_kind->_field_kind,(*this)._field_d,(*this)._field_rang->_field_in_token);
}



inline void _1044463d0_RangeChecker::_method_check_map_key_a(void) {
	if ((!(jule::real((*this)._field_rang->_field_key_a))) || _108e15ff0_is_ignore_ident((*this)._field_rang->_field_key_a->_field_ident)) {
		return;
	}
	jule::Ref<_104a21a10_Map> _112717_m = (*this)._field_d->_field_kind->_method_map();
	(*this)._field_kind->_field_key_a=(*this)._method_build_var((*this)._field_rang->_field_key_a);
	(*this)._field_kind->_field_key_a->_field_kind=jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),_112717_m->_field_key));
	jule::Ref<_1191dc300_Data> _113117_d = jule::new_ref<_1191dc300_Data>((*this)._field_d.get());
	_113117_d->_field_kind=_112717_m->_field_key;
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr((*this)._field_kind->_field_key_a->_field_mutable,(*this)._field_kind->_field_key_a->_field_reference,(*this)._field_kind->_field_key_a->_field_kind->_field_kind,_113117_d,(*this)._field_rang->_field_in_token);
}



inline void _1044463d0_RangeChecker::_method_check_map_key_b(void) {
	if ((!(jule::real((*this)._field_rang->_field_key_b))) || _108e15ff0_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	jule::Ref<_104a21a10_Map> _114617_m = (*this)._field_d->_field_kind->_method_map();
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),_114617_m->_field_val));
	jule::Ref<_1191dc300_Data> _115017_d = jule::new_ref<_1191dc300_Data>((*this)._field_d.get());
	_115017_d->_field_kind=_114617_m->_field_val;
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr((*this)._field_kind->_field_key_b->_field_mutable,(*this)._field_kind->_field_key_b->_field_reference,(*this)._field_kind->_field_key_b->_field_kind->_field_kind,_115017_d,(*this)._field_rang->_field_in_token);
}



inline void _1044463d0_RangeChecker::_method_check_map(void) {
	(*this)._method_check_map_key_a();
	(*this)._method_check_map_key_b();
}



inline void _1044463d0_RangeChecker::_method_check_str(void) {
	(*this)._method_set_size_key();
	if ((!(jule::real((*this)._field_rang->_field_key_b))) || _108e15ff0_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("u8", 2))))));
}



inline jule::Bool _1044463d0_RangeChecker::_method_check(void) {
	if (jule::real((*this)._field_d->_field_kind->_method_ref())) {
		(*this)._field_d->_field_model=jule::Any(jule::new_struct<_11911f320_ExplicitDerefExprModel>(new( std::nothrow ) _11911f320_ExplicitDerefExprModel((*this)._field_d->_field_model)));
		(*this)._field_d->_field_kind=(*this)._field_d->_field_kind->_method_ref()->_field_elem;
	}
	{
		if (!((jule::real((*this)._field_d->_field_kind->_method_slc())))) { goto _case_end_4395331472; }
		_case_begin_4395331472:;
		{
			(*this)._method_check_slice();
			return true;
		}
		goto _match_end_4395330864;
		_case_end_4395331472:;
		if (!((jule::real((*this)._field_d->_field_kind->_method_arr())))) { goto _case_end_4395331584; }
		_case_begin_4395331584:;
		{
			(*this)._method_check_array();
			return true;
		}
		goto _match_end_4395330864;
		_case_end_4395331584:;
		if (!((jule::real((*this)._field_d->_field_kind->_method_map())))) { goto _case_end_4395331696; }
		_case_begin_4395331696:;
		{
			(*this)._method_check_map();
			return true;
		}
		goto _match_end_4395330864;
		_case_end_4395331696:;
		_match_end_4395330864:;
	}
	jule::Ref<_104a21a10_Prim> _120113_prim = (*this)._field_d->_field_kind->_method_prim();
	if (jule::real(_120113_prim) && _120113_prim->_method_is_str()) {
		(*this)._method_check_str();
		return true;
	}
	(*this)._field_sc->_field_s->_method_push_err((*this)._field_rang->_field_in_token,jule::Str("range iterations must be have enumerable expression", 51),jule::Slice<jule::Any>({}));
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1044463d0_RangeChecker &_Src) {
	_Stream << "RangeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "rang:" << _Src._field_rang << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_119162660_ImportInfo> _1191dcd40_SymbolTable::_method_find_package(jule::Str _2535_ident) {
	{
		auto __julec_range_expr = (*this)._field_imports;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _1191dcd40_pkg = *__julec_range_begin;
			_iter_begin_4395415792:;
			{
				if (_1191dcd40_pkg->_field_ident == _2535_ident) {
					return _1191dcd40_pkg;
				}
			}
			_iter_next_4395415792:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_pkg = *__julec_range_begin; goto _iter_begin_4395415792; }
			_iter_end_4395415792:;
		}
	}
	return jule::new_ref<_119162660_ImportInfo>();
}



inline jule::Ref<_119162660_ImportInfo> _1191dcd40_SymbolTable::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)> _3737_selector) {
	if (_3737_selector == nullptr) {
		return jule::new_ref<_119162660_ImportInfo>();
	}
	{
		auto __julec_range_expr = (*this)._field_imports;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _1191dcd40_pkg = *__julec_range_begin;
			_iter_begin_4395421120:;
			{
				if (_3737_selector(_1191dcd40_pkg)) {
					return _1191dcd40_pkg;
				}
			}
			_iter_next_4395421120:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_pkg = *__julec_range_begin; goto _iter_begin_4395421120; }
			_iter_end_4395421120:;
		}
	}
	return jule::new_ref<_119162660_ImportInfo>();
}



inline jule::Ref<_104598e40_Var> _1191dcd40_SymbolTable::_method_find_var(jule::Str _5231_ident,jule::Bool _5243_cpp_linked) {
	return (*this)._method___find_var(_5231_ident,_5243_cpp_linked,false);
}



inline jule::Ref<_104a21a10_TypeAlias> _1191dcd40_SymbolTable::_method_find_type_alias(jule::Str _5838_ident,jule::Bool _5850_cpp_linked) {
	return (*this)._method___find_type_alias(_5838_ident,_5850_cpp_linked,false);
}



inline jule::Ref<_1037370d0_Struct> _1191dcd40_SymbolTable::_method_find_struct(jule::Str _6434_ident,jule::Bool _6446_cpp_linked) {
	{
		auto __julec_range_expr = (*this)._field_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _1191dcd40_s = *__julec_range_begin;
			_iter_begin_4395430800:;
			{
				if ((_1191dcd40_s->_field_ident == _6434_ident) && (_1191dcd40_s->_field_cpp_linked == _6446_cpp_linked)) {
					return _1191dcd40_s;
				}
			}
			_iter_next_4395430800:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_s = *__julec_range_begin; goto _iter_begin_4395430800; }
			_iter_end_4395430800:;
		}
	}
	return jule::new_ref<_1037370d0_Struct>();
}



inline jule::Ref<_1037649f0_Fn> _1191dcd40_SymbolTable::_method_find_fn(jule::Str _7530_ident,jule::Bool _7542_cpp_linked) {
	{
		auto __julec_range_expr = (*this)._field_funcs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _1191dcd40_f = *__julec_range_begin;
			_iter_begin_4395435904:;
			{
				if ((_1191dcd40_f->_field_ident == _7530_ident) && (_1191dcd40_f->_field_cpp_linked == _7542_cpp_linked)) {
					return _1191dcd40_f;
				}
			}
			_iter_next_4395435904:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_f = *__julec_range_begin; goto _iter_begin_4395435904; }
			_iter_end_4395435904:;
		}
	}
	return jule::new_ref<_1037649f0_Fn>();
}



inline jule::Ref<_1036e5da0_Trait> _1191dcd40_SymbolTable::_method_find_trait(jule::Str _8633_ident) {
	{
		auto __julec_range_expr = (*this)._field_traits;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036e5da0_Trait> _1191dcd40_t = *__julec_range_begin;
			_iter_begin_4395440144:;
			{
				if (_1191dcd40_t->_field_ident == _8633_ident) {
					return _1191dcd40_t;
				}
			}
			_iter_next_4395440144:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_t = *__julec_range_begin; goto _iter_begin_4395440144; }
			_iter_end_4395440144:;
		}
	}
	return jule::new_ref<_1036e5da0_Trait>();
}



inline jule::Ref<_1036dad50_Enum> _1191dcd40_SymbolTable::_method_find_enum(jule::Str _9732_ident) {
	{
		auto __julec_range_expr = (*this)._field_enums;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036dad50_Enum> _1191dcd40_e = *__julec_range_begin;
			_iter_begin_4395444032:;
			{
				if (_1191dcd40_e->_field_ident == _9732_ident) {
					return _1191dcd40_e;
				}
			}
			_iter_next_4395444032:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_e = *__julec_range_begin; goto _iter_begin_4395444032; }
			_iter_end_4395444032:;
		}
	}
	return jule::new_ref<_1036dad50_Enum>();
}



inline jule::Ref<_104598e40_Var> _1191dcd40_SymbolTable::_method___find_var(jule::Str _10829_ident,jule::Bool _10841_cpp_linked,jule::Bool _10859_reverse) {
	if (_10859_reverse) {
		jule::I64 _11021_i = (*this)._field_vars.len() - 1LL;
		_iter_begin_4395450352:;
		if (!(_11021_i >= 0LL)) { goto _iter_end_4395450352; }
		{
			jule::Ref<_104598e40_Var> _11225_v = (*this)._field_vars[static_cast<jule::Int>(_11021_i)];
			if ((_11225_v->_field_ident == _10829_ident) && (_11225_v->_field_cpp_linked == _10841_cpp_linked)) {
				return _11225_v;
			}
		}
		_iter_next_4395450352:;
		(_11021_i)--;
		goto _iter_begin_4395450352;
		_iter_end_4395450352:;
	} else {
		{
			auto __julec_range_expr = (*this)._field_vars;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_104598e40_Var> _1191dcd40_v = *__julec_range_begin;
				_iter_begin_4395448848:;
				{
					if ((_1191dcd40_v->_field_ident == _10829_ident) && (_1191dcd40_v->_field_cpp_linked == _10841_cpp_linked)) {
						return _1191dcd40_v;
					}
				}
				_iter_next_4395448848:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1191dcd40_v = *__julec_range_begin; goto _iter_begin_4395448848; }
				_iter_end_4395448848:;
			}
		}
	}
	return jule::new_ref<_104598e40_Var>();
}



inline jule::Ref<_104a21a10_TypeAlias> _1191dcd40_SymbolTable::_method___find_type_alias(jule::Str _12736_ident,jule::Bool _12748_cpp_linked,jule::Bool _12766_reverse) {
	if (_12766_reverse) {
		jule::I64 _12921_i = (*this)._field_type_aliases.len() - 1LL;
		_iter_begin_4395461664:;
		if (!(_12921_i >= 0LL)) { goto _iter_end_4395461664; }
		{
			jule::Ref<_104a21a10_TypeAlias> _13125_ta = (*this)._field_type_aliases[static_cast<jule::Int>(_12921_i)];
			if ((_13125_ta->_field_ident == _12736_ident) && (_13125_ta->_field_cpp_linked == _12748_cpp_linked)) {
				return _13125_ta;
			}
		}
		_iter_next_4395461664:;
		(_12921_i)--;
		goto _iter_begin_4395461664;
		_iter_end_4395461664:;
	} else {
		{
			auto __julec_range_expr = (*this)._field_type_aliases;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_104a21a10_TypeAlias> _1191dcd40_ta = *__julec_range_begin;
				_iter_begin_4395460160:;
				{
					if ((_1191dcd40_ta->_field_ident == _12736_ident) && (_1191dcd40_ta->_field_cpp_linked == _12748_cpp_linked)) {
						return _1191dcd40_ta;
					}
				}
				_iter_next_4395460160:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1191dcd40_ta = *__julec_range_begin; goto _iter_begin_4395460160; }
				_iter_end_4395460160:;
			}
		}
	}
	return jule::new_ref<_104a21a10_TypeAlias>();
}



inline jule::Any _1191dcd40_SymbolTable::_method_def_by_ident(jule::Str _14831_ident,jule::Bool _14843_cpp_linked) {
	{
		auto __julec_range_expr = (*this)._field_vars;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104598e40_Var> _1191dcd40_v = *__julec_range_begin;
			_iter_begin_4395471200:;
			{
				if ((_1191dcd40_v->_field_ident == _14831_ident) && (_1191dcd40_v->_field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1191dcd40_v);
				}
			}
			_iter_next_4395471200:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_v = *__julec_range_begin; goto _iter_begin_4395471200; }
			_iter_end_4395471200:;
		}
	}
	{
		auto __julec_range_expr = (*this)._field_type_aliases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104a21a10_TypeAlias> _1191dcd40_ta = *__julec_range_begin;
			_iter_begin_4395472608:;
			{
				if ((_1191dcd40_ta->_field_ident == _14831_ident) && (_1191dcd40_ta->_field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1191dcd40_ta);
				}
			}
			_iter_next_4395472608:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_ta = *__julec_range_begin; goto _iter_begin_4395472608; }
			_iter_end_4395472608:;
		}
	}
	{
		auto __julec_range_expr = (*this)._field_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _1191dcd40_s = *__julec_range_begin;
			_iter_begin_4395477568:;
			{
				if ((_1191dcd40_s->_field_ident == _14831_ident) && (_1191dcd40_s->_field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1191dcd40_s);
				}
			}
			_iter_next_4395477568:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_s = *__julec_range_begin; goto _iter_begin_4395477568; }
			_iter_end_4395477568:;
		}
	}
	{
		auto __julec_range_expr = (*this)._field_funcs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _1191dcd40_f = *__julec_range_begin;
			_iter_begin_4395475200:;
			{
				if ((_1191dcd40_f->_field_ident == _14831_ident) && (_1191dcd40_f->_field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1191dcd40_f);
				}
			}
			_iter_next_4395475200:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_f = *__julec_range_begin; goto _iter_begin_4395475200; }
			_iter_end_4395475200:;
		}
	}
	if (_14843_cpp_linked) {
		return jule::Any(nullptr);
	}
	{
		auto __julec_range_expr = (*this)._field_traits;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036e5da0_Trait> _1191dcd40_t = *__julec_range_begin;
			_iter_begin_4395480336:;
			{
				if (_1191dcd40_t->_field_ident == _14831_ident) {
					return jule::Any(_1191dcd40_t);
				}
			}
			_iter_next_4395480336:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_t = *__julec_range_begin; goto _iter_begin_4395480336; }
			_iter_end_4395480336:;
		}
	}
	{
		auto __julec_range_expr = (*this)._field_enums;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036dad50_Enum> _1191dcd40_e = *__julec_range_begin;
			_iter_begin_4395484800:;
			{
				if (_1191dcd40_e->_field_ident == _14831_ident) {
					return jule::Any(_1191dcd40_e);
				}
			}
			_iter_next_4395484800:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_e = *__julec_range_begin; goto _iter_begin_4395484800; }
			_iter_end_4395484800:;
		}
	}
	return jule::Any(nullptr);
}



inline jule::Bool _1191dcd40_SymbolTable::_method_is_duplicated_ident(jule::Uintptr _19534_itself,jule::Str _19551_ident,jule::Bool _19563_cpp_linked) {
	{
		auto __julec_range_expr = (*this)._field_vars;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104598e40_Var> _1191dcd40_v = *__julec_range_begin;
			_iter_begin_4395490992:;
			{
				if (((((jule::Uintptr)((_1191dcd40_v).alloc)) != _19534_itself) && (_1191dcd40_v->_field_ident == _19551_ident)) && (_1191dcd40_v->_field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_4395490992:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_v = *__julec_range_begin; goto _iter_begin_4395490992; }
			_iter_end_4395490992:;
		}
	}
	{
		auto __julec_range_expr = (*this)._field_type_aliases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104a21a10_TypeAlias> _1191dcd40_ta = *__julec_range_begin;
			_iter_begin_4395495232:;
			{
				if (((((jule::Uintptr)((_1191dcd40_ta).alloc)) != _19534_itself) && (_1191dcd40_ta->_field_ident == _19551_ident)) && (_1191dcd40_ta->_field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_4395495232:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_ta = *__julec_range_begin; goto _iter_begin_4395495232; }
			_iter_end_4395495232:;
		}
	}
	{
		auto __julec_range_expr = (*this)._field_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _1191dcd40_s = *__julec_range_begin;
			_iter_begin_4395492016:;
			{
				if (((((jule::Uintptr)((_1191dcd40_s).alloc)) != _19534_itself) && (_1191dcd40_s->_field_ident == _19551_ident)) && (_1191dcd40_s->_field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_4395492016:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_s = *__julec_range_begin; goto _iter_begin_4395492016; }
			_iter_end_4395492016:;
		}
	}
	{
		auto __julec_range_expr = (*this)._field_funcs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _1191dcd40_f = *__julec_range_begin;
			_iter_begin_4395495552:;
			{
				if (((((jule::Uintptr)((_1191dcd40_f).alloc)) != _19534_itself) && (_1191dcd40_f->_field_ident == _19551_ident)) && (_1191dcd40_f->_field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_4395495552:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_f = *__julec_range_begin; goto _iter_begin_4395495552; }
			_iter_end_4395495552:;
		}
	}
	if (_19563_cpp_linked) {
		return false;
	}
	{
		auto __julec_range_expr = (*this)._field_traits;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036e5da0_Trait> _1191dcd40_t = *__julec_range_begin;
			_iter_begin_4395502544:;
			{
				if ((((jule::Uintptr)((_1191dcd40_t).alloc)) != _19534_itself) && (_1191dcd40_t->_field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_4395502544:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_t = *__julec_range_begin; goto _iter_begin_4395502544; }
			_iter_end_4395502544:;
		}
	}
	{
		auto __julec_range_expr = (*this)._field_enums;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036dad50_Enum> _1191dcd40_e = *__julec_range_begin;
			_iter_begin_4395508256:;
			{
				if ((((jule::Uintptr)((_1191dcd40_e).alloc)) != _19534_itself) && (_1191dcd40_e->_field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_4395508256:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dcd40_e = *__julec_range_begin; goto _iter_begin_4395508256; }
			_iter_end_4395508256:;
		}
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1191dcd40_SymbolTable &_Src) {
	_Stream << "SymbolTable{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "imports:" << _Src._field_imports << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "type_aliases:" << _Src._field_type_aliases << ", ";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "funcs:" << _Src._field_funcs << ", ";
	_Stream << "traits:" << _Src._field_traits << ", ";
	_Stream << "enums:" << _Src._field_enums << ", ";
	_Stream << "impls:" << _Src._field_impls;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1191dc300_Data::_method_is_nil(void) {
	return (*this)._field_kind->_method_is_nil();
}



inline jule::Bool _1191dc300_Data::_method_is_void(void) {
	return (*this)._field_kind->_method_is_void();
}



inline jule::Bool _1191dc300_Data::_method_is_const(void) {
	return jule::real((*this)._field_constant);
}







std::ostream &operator<<(std::ostream &_Stream, const _1191dc300_Data &_Src) {
	_Stream << "Data{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "cast_kind:" << _Src._field_cast_kind << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "lvalue:" << _Src._field_lvalue << ", ";
	_Stream << "variadiced:" << _Src._field_variadiced << ", ";
	_Stream << "is_rune:" << _Src._field_is_rune << ", ";
	_Stream << "model:" << _Src._field_model << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "constant:" << _Src._field_constant;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1191dc300_Value &_Src) {
	_Stream << "Value{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline void _1191dc300_Eval::_method_push_err(_108e15ff0_Token _25127_token,jule::Str _25141_fmt,jule::Slice<jule::Any> _25154_args) {
	(*this)._field_s->_method_push_err(_25127_token,_25141_fmt,_25154_args);
}



inline void _1191dc300_Eval::_method_push_suggestion(jule::Str _25634_fmt,jule::Slice<jule::Any> _25647_args) {
	(*this)._field_s->_method_push_suggestion(_25634_fmt,_25647_args);
}



inline jule::Bool _1191dc300_Eval::_method_is_unsafe(void) {
	return (*this)._field_unsafety;
}



inline jule::Bool _1191dc300_Eval::_method_is_global(void) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_119177e90_Sema>>())) { goto _case_end_4395527536; }
		_case_begin_4395527536:;
		{
			return true;
		}
		goto _match_end_4395526592;
		_case_end_4395527536:;
		_case_begin_4395527200:;
		{
			return false;
		}
		goto _match_end_4395526592;
		_case_end_4395527200:;
		_match_end_4395526592:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_lit_nil(void) {
	jule::Ref<_104c409b0_Const> _27517_constant = _104c409b0_Const::_static_method_new_nil();
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),nullptr)),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_27517_constant),false,_27517_constant));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_lit_str(jule::Ref<_1487f5920_LitExpr> _28622_lt) {
	jule::Str _28717_s = _28622_lt->_field_value.slice(1LL,static_cast<jule::Int>(_28622_lt->_field_value.len() - 1LL));
	if (_108e15ff0_is_raw_str(_28622_lt->_field_value)) {
		_28717_s=_104dc5cd0_to_raw_str(static_cast<jule::Slice<jule::U8>>(_28717_s));
	} else {
		_28717_s=_104dc5cd0_to_str(static_cast<jule::Slice<jule::U8>>(_28717_s));
	}
	jule::Ref<_104c409b0_Const> _29317_constant = _104c409b0_Const::_static_method_new_str(_28717_s);
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("str", 3)))),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_29317_constant),false,_29317_constant));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_lit_bool(jule::Ref<_1487f5920_LitExpr> _30723_lit) {
	jule::Ref<_104c409b0_Const> _30817_constant = _104c409b0_Const::_static_method_new_bool(_30723_lit->_field_value == jule::Str("true", 4));
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_30817_constant),false,_30817_constant));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_lit_rune(jule::Ref<_1487f5920_LitExpr> _32123_l) {
	
	
	jule::Str _32513_lt = _32123_l->_field_value.slice(1LL,static_cast<jule::Int>(_32123_l->_field_value.len() - 1LL));
	jule::I32 _32613_r = _104dc5cd0_to_rune(static_cast<jule::Slice<jule::U8>>(_32513_lt));
	jule::Ref<_1191dc300_Data> _32717_data = jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::Ref<_104a21a10_TypeKind>(),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,_104c409b0_Const::_static_method_new_i64(static_cast<jule::I64>(_32613_r))));
	jule::Bool _33417_is_byte;
	std::tie(std::ignore,_33417_is_byte) = _104dc5cd0_is_byte_lit(_32123_l->_field_value);
	if (_33417_is_byte) {
		_32717_data->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("u8", 2))));
	} else {
		_32717_data->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i32", 3))));
	}
	_32717_data->_field_model=jule::Any(jule::new_struct<_11911f320_RuneExprModel>(new( std::nothrow ) _11911f320_RuneExprModel(_32613_r)));
	_32717_data->_field_is_rune=true;
	return _32717_data;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_lit_float(jule::Ref<_1487f5920_LitExpr> _35024_l) {
	
	jule::F64 _35314_f;
	std::tie(_35314_f,std::ignore) = _1186f6b70_parse_float(_35024_l->_field_value,64LL);
	jule::Ref<_104c409b0_Const> _35417_constant = _104c409b0_Const::_static_method_new_f64(_35314_f);
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("f64", 3)))),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_35417_constant),false,_35417_constant));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_lit_int(jule::Ref<_1487f5920_LitExpr> _36826_l) {
	
	jule::Str _37117_lit = _36826_l->_field_value;
	jule::Int _37217_base = 0LL;
	{
		if (!((_37117_lit.has_prefix(jule::Str("0x", 2))))) { goto _case_end_4392990352; }
		_case_begin_4392990352:;
		{
			_37117_lit=_37117_lit.slice(2LL);
			_37217_base=16LL;
		}
		goto _match_end_4392988656;
		_case_end_4392990352:;
		if (!((_37117_lit.has_prefix(jule::Str("0b", 2))))) { goto _case_end_4392990016; }
		_case_begin_4392990016:;
		{
			_37117_lit=_37117_lit.slice(2LL);
			_37217_base=2LL;
		}
		goto _match_end_4392988656;
		_case_end_4392990016:;
		if (!((_37117_lit.has_prefix(jule::Str("0o", 2))))) { goto _case_end_4392990128; }
		_case_begin_4392990128:;
		{
			_37117_lit=_37117_lit.slice(2LL);
			_37217_base=8LL;
		}
		goto _match_end_4392988656;
		_case_end_4392990128:;
		if (!(((_37117_lit[0LL] == '0') && (_37117_lit.len() > 1LL)))) { goto _case_end_4392989248; }
		_case_begin_4392989248:;
		{
			_37117_lit=_37117_lit.slice(1LL);
			_37217_base=8LL;
		}
		goto _match_end_4392988656;
		_case_end_4392989248:;
		_case_begin_4392988944:;
		{
			_37217_base=10LL;
		}
		goto _match_end_4392988656;
		_case_end_4392988944:;
		_match_end_4392988656:;
	}
	jule::Ref<_1191dc300_Data> _39517_d = jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::Ref<_104a21a10_TypeKind>(),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,jule::Ref<_104c409b0_Const>()));
	jule::Any _40117_value = jule::Any(nullptr);
	jule::I64 _40214_sig;
	jule::Int _40219_err;
	std::tie(_40214_sig,_40219_err) = _1186cfb10_parse_int(_37117_lit,_37217_base,64LL);
	if (_40219_err == 0LLU) {
		_40117_value=jule::Any(_40214_sig);
		_39517_d->_field_constant=_104c409b0_Const::_static_method_new_i64(_40214_sig);
	} else {
		jule::U64 _40718_unsig;
		jule::Int _40725_err;
		std::tie(_40718_unsig,_40725_err) = _1186cfb10_parse_uint(_37117_lit,_37217_base,64LL);
		if (_40725_err != 0LLU) {
			(*this)._method_push_err(_36826_l->_field_token,jule::Str("arithmetic value overflow", 25),jule::Slice<jule::Any>({}));
			(*this)._method_push_suggestion(jule::Str("floating-point literals may solve your problem", 46),jule::Slice<jule::Any>({}));
		}
		_39517_d->_field_constant=_104c409b0_Const::_static_method_new_u64(_40718_unsig);
		_40117_value=jule::Any(_40718_unsig);
	}
	_39517_d->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(_1191dc300_kind_by_bitsize(_40117_value))));
	_1191dc300_normalize_bitsize(_39517_d);
	_39517_d->_field_model=jule::Any(_39517_d->_field_constant);
	return _39517_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_lit_num(jule::Ref<_1487f5920_LitExpr> _42626_l) {
	{
		if (!((_108e15ff0_is_float(_42626_l->_field_value)))) { goto _case_end_4393019568; }
		_case_begin_4393019568:;
		{
			return (*this)._method_lit_float(_42626_l);
		}
		goto _match_end_4393017680;
		_case_end_4393019568:;
		_case_begin_4393017824:;
		{
			return (*this)._method_lit_int(_42626_l);
		}
		goto _match_end_4393017680;
		_case_end_4393017824:;
		_match_end_4393017680:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_lit(jule::Ref<_1487f5920_LitExpr> _43327_lit) {
	{
		if (!((_43327_lit->_method_is_nil()))) { goto _case_end_4393025840; }
		_case_begin_4393025840:;
		{
			return (*this)._method_lit_nil();
		}
		goto _match_end_4393023296;
		_case_end_4393025840:;
		if (!((_108e15ff0_is_str(_43327_lit->_field_value)))) { goto _case_end_4393024848; }
		_case_begin_4393024848:;
		{
			return (*this)._method_lit_str(_43327_lit);
		}
		goto _match_end_4393023296;
		_case_end_4393024848:;
		if (!((_108e15ff0_is_bool(_43327_lit->_field_value)))) { goto _case_end_4393025056; }
		_case_begin_4393025056:;
		{
			return (*this)._method_lit_bool(_43327_lit);
		}
		goto _match_end_4393023296;
		_case_end_4393025056:;
		if (!((_108e15ff0_is_rune(_43327_lit->_field_value)))) { goto _case_end_4393025504; }
		_case_begin_4393025504:;
		{
			return (*this)._method_lit_rune(_43327_lit);
		}
		goto _match_end_4393023296;
		_case_end_4393025504:;
		if (!((_108e15ff0_is_num(_43327_lit->_field_value)))) { goto _case_end_4393025616; }
		_case_begin_4393025616:;
		{
			return (*this)._method_lit_num(_43327_lit);
		}
		goto _match_end_4393023296;
		_case_end_4393025616:;
		_case_begin_4393023440:;
		{
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4393023296;
		_case_end_4393023440:;
		_match_end_4393023296:;
	}
}



inline jule::Any _1191dc300_Eval::_method_find_builtins(jule::Str _44432_ident) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_119162660_ImportInfo>>())) { goto _case_end_4393034656; }
		_case_begin_4393034656:;
		{
			jule::Any _44721_def = _1191dc300_find_builtins_import(_44432_ident,(*this)._field_lookup.operator jule::Ref<_119162660_ImportInfo>());
			if (_44721_def != nullptr) {
				return _44721_def;
			}
		}
		goto _match_end_4393034032;
		_case_end_4393034656:;
		if (!(_match_expr.type_is<jule::Ref<_119177e90_Sema>>())) { goto _case_end_4393034784; }
		_case_begin_4393034784:;
		{
			jule::Any _45321_def = _1191dc300_find_builtins_sema(_44432_ident,(*this)._field_lookup.operator jule::Ref<_119177e90_Sema>());
			if (_45321_def != nullptr) {
				return _45321_def;
			}
		}
		goto _match_end_4393034032;
		_case_end_4393034784:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_ScopeChecker>>())) { goto _case_end_4393034944; }
		_case_begin_4393034944:;
		{
			jule::Any _45921_def = _1191dc300_find_builtins_sema(_44432_ident,(*this)._field_lookup.operator jule::Ref<_104180810_ScopeChecker>()->_field_s);
			if (_45921_def != nullptr) {
				return _45921_def;
			}
		}
		goto _match_end_4393034032;
		_case_end_4393034944:;
		_match_end_4393034032:;
	}
	return _104b4ffd0_find_builtin_def(_44432_ident);
}



inline jule::Any _1191dc300_Eval::_method_get_def(jule::Str _46826_ident,jule::Bool _46838_cpp_linked) {
	if ((!(_46838_cpp_linked))) {
		jule::Ref<_1036dad50_Enum> _47021_enm = (*this)._field_lookup.get()._method_find_enum(_46826_ident);
		if (jule::real(_47021_enm)) {
			return jule::Any(_47021_enm);
		}
	}
	jule::Ref<_104598e40_Var> _47617_v = (*this)._field_lookup.get()._method_find_var(_46826_ident,_46838_cpp_linked);
	if (jule::real(_47617_v)) {
		return jule::Any(_47617_v);
	}
	jule::Ref<_1037649f0_Fn> _48117_f = (*this)._field_lookup.get()._method_find_fn(_46826_ident,_46838_cpp_linked);
	if (jule::real(_48117_f)) {
		return jule::Any(_48117_f);
	}
	jule::Ref<_1037370d0_Struct> _48617_s = (*this)._field_lookup.get()._method_find_struct(_46826_ident,_46838_cpp_linked);
	if (jule::real(_48617_s)) {
		return jule::Any(_48617_s);
	}
	jule::Ref<_104a21a10_TypeAlias> _49117_ta = (*this)._field_lookup.get()._method_find_type_alias(_46826_ident,_46838_cpp_linked);
	if (jule::real(_49117_ta)) {
		return jule::Any(_49117_ta);
	}
	return (*this)._method_find_builtins(_46826_ident);
}



inline void _1191dc300_Eval::_method_push_reference(jule::Ref<_1036da950_ReferenceStack> _49937_references) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_104180810_ScopeChecker>>())) { goto _case_end_4393080864; }
		_case_begin_4393080864:;
		{
			jule::Ref<_104180810_ScopeChecker> _50221_sc = (*this)._field_lookup.operator jule::Ref<_104180810_ScopeChecker>()->_method_get_root();
			if ((!(_49937_references->_method_exist_1(_50221_sc->_field_owner)))) {
				_49937_references->_method_push(jule::Any(_50221_sc->_field_owner));
			}
		}
		goto _match_end_4393069424;
		_case_end_4393080864:;
		_case_begin_4393070016:;
		{
			if (jule::real((*this)._field_owner) && (!(_49937_references->_method_exist_0((*this)._field_owner)))) {
				_49937_references->_method_push(jule::Any((*this)._field_owner));
			}
		}
		goto _match_end_4393069424;
		_case_end_4393070016:;
		_match_end_4393069424:;
	}
}



inline void _1191dc300_Eval::_method_push_reference_to_fn(jule::Ref<_1037649f0_FnIns> _51443_f) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_104180810_ScopeChecker>>())) { goto _case_end_4393070448; }
		_case_begin_4393070448:;
		{
			jule::Ref<_104180810_ScopeChecker> _51721_sc = (*this)._field_lookup.operator jule::Ref<_104180810_ScopeChecker>()->_method_get_root();
			if (_51721_sc->_field_owner->_field_decl->_method_is_init() && (!(_51721_sc->_field_owner->_field_references->_method_exist_1(_51443_f)))) {
				_51721_sc->_field_owner->_field_refers->_method_push(jule::Any(_51443_f));
			}
		}
		goto _match_end_4393095072;
		_case_end_4393070448:;
		_match_end_4393095072:;
	}
	(*this)._method_push_reference(_51443_f->_field_references);
}



inline void _1191dc300_Eval::_method_push_reference_to_var(jule::Ref<_104598e40_Var> _52544_v) {
	if ((!(jule::real(_52544_v->_field_references)))) {
		return;
	}
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_104180810_ScopeChecker>>())) { goto _case_end_4393107008; }
		_case_begin_4393107008:;
		{
			jule::Ref<_104180810_ScopeChecker> _53221_sc = (*this)._field_lookup.operator jule::Ref<_104180810_ScopeChecker>()->_method_get_root();
			if (_53221_sc->_field_owner->_field_decl->_method_is_init() && (!(_53221_sc->_field_owner->_field_references->_method_exist_0(_52544_v)))) {
				_53221_sc->_field_owner->_field_refers->_method_push(jule::Any(_52544_v));
			}
		}
		goto _match_end_4393106496;
		_case_end_4393107008:;
		_match_end_4393106496:;
	}
	(*this)._method_push_reference(_52544_v->_field_references);
}



inline void _1191dc300_Eval::_method_push_reference_to_struct(jule::Ref<_1037370d0_StructIns> _54147_s) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_104180810_ScopeChecker>>())) { goto _case_end_4393118512; }
		_case_begin_4393118512:;
		{
			jule::Ref<_104180810_ScopeChecker> _54421_sc = (*this)._field_lookup.operator jule::Ref<_104180810_ScopeChecker>()->_method_get_root();
			if (_54421_sc->_field_owner->_field_decl->_method_is_init() && (!(_54421_sc->_field_owner->_field_references->_method_exist_2(_54147_s)))) {
				_54421_sc->_field_owner->_field_refers->_method_push(jule::Any(_54147_s));
			}
		}
		goto _match_end_4393117888;
		_case_end_4393118512:;
		_match_end_4393117888:;
	}
	(*this)._method_push_reference(_54147_s->_field_references);
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_enum(jule::Ref<_1036dad50_Enum> _55228_enm,_108e15ff0_Token _55240_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_55228_enm->_field_public,_55228_enm->_field_token)))) {
		(*this)._method_push_err(_55240_error_token,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_55228_enm->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_55228_enm)),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),true,jule::new_ref<_104c409b0_Const>()));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_struct(jule::Ref<_1037370d0_StructIns> _57034_s,_108e15ff0_Token _57049_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_57034_s->_field_decl->_field_public,_57034_s->_field_decl->_field_token)))) {
		(*this)._method_push_err(_57049_error_token,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_57034_s->_field_decl->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_57034_s)),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_57034_s),true,jule::new_ref<_104c409b0_Const>()));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_fn_ins(jule::Ref<_1037649f0_FnIns> _58930_f) {
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_58930_f)),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_58930_f),false,jule::new_ref<_104c409b0_Const>()));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_fn(jule::Ref<_1037649f0_Fn> _60230_f,_108e15ff0_Token _60238_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_60230_f->_field_public,_60230_f->_field_token)))) {
		(*this)._method_push_err(_60238_error_token,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_60230_f->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_1037649f0_FnIns> _61017_ins = _60230_f->_method_instance();
	(*this)._method_push_reference_to_fn(_61017_ins);
	return (*this)._method_eval_fn_ins(_61017_ins);
}



inline void _1191dc300_Eval::_method_push_illegal_cycle_error(jule::Ref<_104598e40_Var> _61543_v1,jule::Ref<_104598e40_Var> _61553_v2,jule::Str& _61568_message) {
	
	jule::Str _61813_refers_to = _1486379e0_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_61543_v1->_field_ident),jule::Any(_61553_v2->_field_ident)}));
	_61568_message=((_1036da950_str_repeat(jule::Str(" ", 1),4LL) + _61813_refers_to) + jule::Str("\n", 1)) + _61568_message;
}



inline jule::Bool _1191dc300_Eval::_method_check_cross_cycle(jule::Ref<_104598e40_Var> _62236_v,jule::Str& _62250_message) {
	{
		auto __julec_range_expr = _62236_v->_field_depends;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104598e40_Var> _1191dc300_d = *__julec_range_begin;
			_iter_begin_4393179600:;
			{
				if ((_1191dc300_d).alloc == ((*this)._field_owner).alloc) {
					(*this)._method_push_illegal_cycle_error(_62236_v,_1191dc300_d,_62250_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_1191dc300_d,_62250_message)))) {
					(*this)._method_push_illegal_cycle_error(_62236_v,_1191dc300_d,_62250_message);
					return false;
				}
			}
			_iter_next_4393179600:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dc300_d = *__julec_range_begin; goto _iter_begin_4393179600; }
			_iter_end_4393179600:;
		}
	}
	return true;
}



inline jule::Bool _1191dc300_Eval::_method_check_illegal_cycles(jule::Ref<_104598e40_Var> _64143_v,_108e15ff0_Token _64152_decl_token) {
	jule::Bool _64173_ok = jule::Bool();
	if ((!(jule::real((*this)._field_owner)))) {
		_64173_ok = true;
		return _64173_ok;
	}
	if (((*this)._field_owner).alloc == (_64143_v).alloc) {
		(*this)._method_push_err((*this)._field_owner->_field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*this)._field_owner->_field_ident)}));
		_64173_ok = false;
		return _64173_ok;
	}
	jule::Str _65317_message = jule::Str("", 0);
	if ((!((*this)._method_check_cross_cycle(_64143_v,_65317_message)))) {
		jule::Str _65621_err_msg = _65317_message;
		_65317_message=jule::Str("", 0);
		(*this)._method_push_illegal_cycle_error((*this)._field_owner,_64143_v,_65317_message);
		_65621_err_msg=_65621_err_msg + _65317_message;
		(*this)._method_push_err(_64152_decl_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_65621_err_msg)}));
		_64173_ok = false;
		return _64173_ok;
	}
	(*this)._field_owner->_field_depends=jule::append((*this)._field_owner->_field_depends,jule::Slice<jule::Ref<_104598e40_Var>>({_64143_v}));
	_64173_ok = true;
	return _64173_ok;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_var(jule::Ref<_104598e40_Var> _66831_v,_108e15ff0_Token _66840_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_66831_v->_field_public,_66831_v->_field_token)))) {
		(*this)._method_push_err(_66840_error_token,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_66831_v->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	_66831_v->_field_used=true;
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_119177e90_Sema>>())) { goto _case_end_4393210592; }
		_case_begin_4393210592:;
		{
			jule::Bool _68017_ok = (*this)._method_check_illegal_cycles(_66831_v,_66840_error_token);
			if ((!(_68017_ok))) {
				return jule::new_ref<_1191dc300_Data>();
			}
		}
		goto _match_end_4393205488;
		_case_end_4393210592:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_ScopeChecker>>())) { goto _case_end_4393210784; }
		_case_begin_4393210784:;
		{
			if ((!(_66831_v->_field_reference)) || (*this)._method_is_unsafe()) {
				goto _match_end_4393205488;
			}
			jule::Ref<_104180810_ScopeChecker> _69021_s = (*this)._field_lookup.operator jule::Ref<_104180810_ScopeChecker>();
			_iter_begin_4393213808:;
			if (!((!(jule::real(_69021_s->_field_owner))) && jule::real(_69021_s->_field_parent))) { goto _iter_end_4393213808; }
			{
				_69021_s=_69021_s->_field_parent;
			}
			_iter_next_4393213808:;
			goto _iter_begin_4393213808;
			_iter_end_4393213808:;
			if ((jule::real(_69021_s->_field_owner) && _69021_s->_field_owner->_field_anon) && ((_66831_v->_field_scope).alloc != (_69021_s->_field_owner->_field_scope).alloc)) {
				(*this)._method_push_err(_66840_error_token,jule::Str("anonymous functions cannot access to reference \"@\" definition of parent scope", 77),jule::Slice<jule::Any>({jule::Any(_66831_v->_field_ident)}));
			}
		}
		goto _match_end_4393205488;
		_case_end_4393210784:;
		_match_end_4393205488:;
	}
	(*this)._method_push_reference_to_var(_66831_v);
	if ((!(_66831_v->_field_cpp_linked)) && ((!(jule::real(_66831_v->_field_value))) || (!(jule::real(_66831_v->_field_value->_field_data))))) {
		if (_66831_v->_field_constant) {
			(*this)._field_s->_method_check_type_var(_66831_v,(*this)._field_s);
			if ((!(jule::real(_66831_v->_field_value->_field_data)))) {
				return jule::new_ref<_1191dc300_Data>();
			}
		}
	}
	if ((!(jule::real(_66831_v->_field_kind))) || (!(jule::real(_66831_v->_field_kind->_field_kind)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_1191dc300_Data> _71617_d = jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(_66831_v->_field_kind->_field_kind->_method_clone(),jule::Ref<_104a21a10_TypeKind>(),_66831_v->_field_mutable,_66831_v->_field_reference,(!(_66831_v->_field_constant)),jule::Bool(),jule::Bool(),jule::Any(_66831_v),false,jule::Ref<_104c409b0_Const>()));
	if (((!(_66831_v->_field_cpp_linked)) && _66831_v->_method_is_initialized()) && jule::real(_66831_v->_field_value->_field_data)) {
		_71617_d->_field_is_rune=_66831_v->_field_value->_field_data->_field_is_rune;
	}
	if (_66831_v->_field_constant && jule::real(_66831_v->_field_value->_field_data->_field_constant)) {
		_71617_d->_field_constant=jule::new_ref<_104c409b0_Const>(_66831_v->_field_value->_field_data->_field_constant.get());
		_71617_d->_field_model=jule::Any(_71617_d->_field_constant);
	}
	if (jule::real(_71617_d->_field_kind->_method_fnc())) {
		jule::Ref<_1037649f0_FnIns> _73521_f = _71617_d->_field_kind->_method_fnc();
		if (jule::real(_73521_f->_field_decl)) {
			_73521_f->_field_decl->_field_ident=_66831_v->_field_ident;
		}
	}
	return _71617_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_type_alias(jule::Ref<_104a21a10_TypeAlias> _74638_ta,_108e15ff0_Token _74654_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_74638_ta->_field_public,_74638_ta->_field_token)))) {
		(*this)._method_push_err(_74654_error_token,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_74638_ta->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	_74638_ta->_field_used=true;
	jule::Trait<_104a21a10_Kind> _75517_kind = _74638_ta->_field_kind->_field_kind->_field_kind;
	{
		auto _match_expr{ _75517_kind };
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_StructIns>>())) { goto _case_end_4393828160; }
		_case_begin_4393828160:;
		{
			return (*this)._method_eval_struct(_75517_kind.operator jule::Ref<_1037370d0_StructIns>(),_74654_error_token);
		}
		goto _match_end_4393827376;
		_case_end_4393828160:;
		if (!(_match_expr.type_is<jule::Ref<_1036dad50_Enum>>())) { goto _case_end_4393828272; }
		_case_begin_4393828272:;
		{
			return (*this)._method_eval_enum(_75517_kind.operator jule::Ref<_1036dad50_Enum>(),_74654_error_token);
		}
		goto _match_end_4393827376;
		_case_end_4393828272:;
		_case_begin_4393827856:;
		{
			jule::Ref<_1191dc300_Data> _76421_d = jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(_74638_ta->_field_kind->_field_kind->_method_clone(),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),true,jule::Ref<_104c409b0_Const>()));
			if (_74638_ta->_field_cpp_linked) {
				_76421_d->_field_kind->_field_cpp_ident=_74638_ta->_field_ident;
			}
			_76421_d->_field_model=jule::Any(_76421_d->_field_kind);
			return _76421_d;
		}
		goto _match_end_4393827376;
		_case_end_4393827856:;
		_match_end_4393827376:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_def(jule::Any _77931_def,_108e15ff0_Token _77941_ident) {
	{
		auto _match_expr{ _77931_def };
		if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4393844448; }
		_case_begin_4393844448:;
		{
			return (*this)._method_eval_var(_77931_def.operator jule::Ref<_104598e40_Var>(),_77941_ident);
		}
		goto _match_end_4393840080;
		_case_end_4393844448:;
		if (!(_match_expr.type_is<jule::Ref<_1036dad50_Enum>>())) { goto _case_end_4393844112; }
		_case_begin_4393844112:;
		{
			return (*this)._method_eval_enum(_77931_def.operator jule::Ref<_1036dad50_Enum>(),_77941_ident);
		}
		goto _match_end_4393840080;
		_case_end_4393844112:;
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_Struct>>())) { goto _case_end_4393844224; }
		_case_begin_4393844224:;
		{
			return (*this)._method_eval_struct(_77931_def.operator jule::Ref<_1037370d0_Struct>()->_method_instance(),_77941_ident);
		}
		goto _match_end_4393840080;
		_case_end_4393844224:;
		if (!(_match_expr.type_is<jule::Ref<_1037649f0_Fn>>())) { goto _case_end_4393840848; }
		_case_begin_4393840848:;
		{
			return (*this)._method_eval_fn(_77931_def.operator jule::Ref<_1037649f0_Fn>(),_77941_ident);
		}
		goto _match_end_4393840080;
		_case_end_4393840848:;
		if (!(_match_expr.type_is<jule::Ref<_1037649f0_FnIns>>())) { goto _case_end_4393840960; }
		_case_begin_4393840960:;
		{
			return (*this)._method_eval_fn_ins(_77931_def.operator jule::Ref<_1037649f0_FnIns>());
		}
		goto _match_end_4393840080;
		_case_end_4393840960:;
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_TypeAlias>>())) { goto _case_end_4393841072; }
		_case_begin_4393841072:;
		{
			return (*this)._method_eval_type_alias(_77931_def.operator jule::Ref<_104a21a10_TypeAlias>(),_77941_ident);
		}
		goto _match_end_4393840080;
		_case_end_4393841072:;
		_case_begin_4393840464:;
		{
			(*this)._method_push_err(_77941_ident,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_77941_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4393840080;
		_case_end_4393840464:;
		_match_end_4393840080:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_ident(jule::Ref<_1487f5920_IdentExpr> _80529_ident) {
	jule::Any _80617_def = (*this)._method_get_def(_80529_ident->_field_ident,_80529_ident->_field_cpp_linked);
	return (*this)._method_eval_def(_80617_def,_80529_ident->_field_token);
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_unary_minus(jule::Ref<_1191dc300_Data> _81035_d) {
	jule::Ref<_104a21a10_Prim> _81113_t = _81035_d->_field_kind->_method_prim();
	if ((!(jule::real(_81113_t))) || (!(_104c56790_is_num(_81113_t->_method_to_str())))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_81035_d->_method_is_const()) {
		{
			if (!((_81035_d->_field_constant->_method_is_f64()))) { goto _case_end_4393866288; }
			_case_begin_4393866288:;
			{
				_81035_d->_field_constant->_method_set_f64(static_cast<jule::F64>((-(_81035_d->_field_constant->_method_read_f64()))));
			}
			goto _match_end_4393866080;
			_case_end_4393866288:;
			if (!((_81035_d->_field_constant->_method_is_i64()))) { goto _case_end_4393866416; }
			_case_begin_4393866416:;
			{
				_81035_d->_field_constant->_method_set_f64(static_cast<jule::F64>((-(_81035_d->_field_constant->_method_as_f64()))));
			}
			goto _match_end_4393866080;
			_case_end_4393866416:;
			if (!((_81035_d->_field_constant->_method_is_u64()))) { goto _case_end_4393866544; }
			_case_begin_4393866544:;
			{
				_81035_d->_field_constant->_method_set_f64(static_cast<jule::F64>((-(_81035_d->_field_constant->_method_as_f64()))));
			}
			goto _match_end_4393866080;
			_case_end_4393866544:;
			_match_end_4393866080:;
		}
		_1191dc300_normalize_type(_81035_d);
	}
	_81035_d->_field_lvalue=false;
	_81035_d->_field_model=jule::Any(jule::new_struct<_11911f320_UnaryExprModel>(new( std::nothrow ) _11911f320_UnaryExprModel(_81035_d->_field_model,jule::Str("-", 1))));
	return _81035_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_unary_plus(jule::Ref<_1191dc300_Data> _83334_d) {
	jule::Ref<_104a21a10_Prim> _83413_t = _83334_d->_field_kind->_method_prim();
	if ((!(jule::real(_83413_t))) || (!(_104c56790_is_num(_83413_t->_method_to_str())))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_83334_d->_method_is_const()) {
		{
			if (!((_83334_d->_field_constant->_method_is_f64()))) { goto _case_end_4393884032; }
			_case_begin_4393884032:;
			{
				_83334_d->_field_constant->_method_set_f64(static_cast<jule::F64>((+(_83334_d->_field_constant->_method_read_f64()))));
			}
			goto _match_end_4393883824;
			_case_end_4393884032:;
			if (!((_83334_d->_field_constant->_method_is_i64()))) { goto _case_end_4393884160; }
			_case_begin_4393884160:;
			{
				_83334_d->_field_constant->_method_set_f64(static_cast<jule::F64>((+(_83334_d->_field_constant->_method_as_f64()))));
			}
			goto _match_end_4393883824;
			_case_end_4393884160:;
			if (!((_83334_d->_field_constant->_method_is_u64()))) { goto _case_end_4393884288; }
			_case_begin_4393884288:;
			{
				_83334_d->_field_constant->_method_set_f64(static_cast<jule::F64>((+(_83334_d->_field_constant->_method_as_f64()))));
			}
			goto _match_end_4393883824;
			_case_end_4393884288:;
			_match_end_4393883824:;
		}
		_1191dc300_normalize_type(_83334_d);
	}
	_83334_d->_field_lvalue=false;
	_83334_d->_field_model=jule::Any(jule::new_struct<_11911f320_UnaryExprModel>(new( std::nothrow ) _11911f320_UnaryExprModel(_83334_d->_field_model,jule::Str("+", 1))));
	return _83334_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_unary_caret(jule::Ref<_1191dc300_Data> _85635_d) {
	jule::Ref<_104a21a10_Prim> _85713_t = _85635_d->_field_kind->_method_prim();
	if ((!(jule::real(_85713_t))) || (!(_104c56790_is_int(_85713_t->_method_to_str())))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_85635_d->_method_is_const()) {
		{
			if (!((_85635_d->_field_constant->_method_is_i64()))) { goto _case_end_4393901424; }
			_case_begin_4393901424:;
			{
				_85635_d->_field_constant->_method_set_i64(static_cast<jule::I64>((~(_85635_d->_field_constant->_method_read_i64()))));
			}
			goto _match_end_4393901232;
			_case_end_4393901424:;
			if (!((_85635_d->_field_constant->_method_is_u64()))) { goto _case_end_4393901552; }
			_case_begin_4393901552:;
			{
				_85635_d->_field_constant->_method_set_u64(static_cast<jule::U64>((~(_85635_d->_field_constant->_method_read_u64()))));
			}
			goto _match_end_4393901232;
			_case_end_4393901552:;
			_match_end_4393901232:;
		}
	}
	_85635_d->_field_lvalue=false;
	_85635_d->_field_model=jule::Any(jule::new_struct<_11911f320_UnaryExprModel>(new( std::nothrow ) _11911f320_UnaryExprModel(_85635_d->_field_model,jule::Str("^", 1))));
	return _85635_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_unary_excl(jule::Ref<_1191dc300_Data> _88034_d) {
	jule::Ref<_104a21a10_Prim> _88113_t = _88034_d->_field_kind->_method_prim();
	if ((!(jule::real(_88113_t))) || (!(_88113_t->_method_is_bool()))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_88034_d->_method_is_const()) {
		{
			if (!((_88034_d->_field_constant->_method_is_bool()))) { goto _case_end_4393915184; }
			_case_begin_4393915184:;
			{
				_88034_d->_field_constant->_method_set_bool((!(_88034_d->_field_constant->_method_read_bool())));
			}
			goto _match_end_4393915008;
			_case_end_4393915184:;
			_match_end_4393915008:;
		}
	}
	_88034_d->_field_lvalue=false;
	_88034_d->_field_model=jule::Any(jule::new_struct<_11911f320_UnaryExprModel>(new( std::nothrow ) _11911f320_UnaryExprModel(_88034_d->_field_model,jule::Str("!", 1))));
	return _88034_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_unary_star(jule::Ref<_1191dc300_Data> _90138_d,_108e15ff0_Token _90148_op) {
	if ((!((*this)._method_is_unsafe()))) {
		(*this)._method_push_err(_90148_op,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_104a21a10_Ptr> _90617_t = _90138_d->_field_kind->_method_ptr();
	if ((!(jule::real(_90617_t))) || _90617_t->_method_is_unsafe()) {
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::drop(_90138_d->_field_constant);
	_90138_d->_field_lvalue=true;
	_90138_d->_field_kind=_90617_t->_field_elem;
	_90138_d->_field_model=jule::Any(jule::new_struct<_11911f320_UnaryExprModel>(new( std::nothrow ) _11911f320_UnaryExprModel(_90138_d->_field_model,jule::Str("*", 1))));
	return _90138_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_unary_amper(jule::Ref<_1191dc300_Data> _92035_d) {
	{
		auto _match_expr{ _92035_d->_field_model };
		if (!(_match_expr.type_is<jule::Ref<_11911f320_StructLitExprModel>>())) { goto _case_end_4393938512; }
		_case_begin_4393938512:;
		{
			jule::Ref<_11911f320_StructLitExprModel> _92321_lit = _92035_d->_field_model.operator jule::Ref<_11911f320_StructLitExprModel>();
			_92035_d->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_104a21a10_Ref>(new( std::nothrow ) _104a21a10_Ref(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_92321_lit->_field_strct))))));
			_92035_d->_field_model=jule::Any(jule::new_struct<_11911f320_AllocStructLitExprModel>(new( std::nothrow ) _11911f320_AllocStructLitExprModel(_92321_lit)));
		}
		goto _match_end_4393934096;
		_case_end_4393938512:;
		_case_begin_4393934752:;
		{
			{
				if (!((jule::real(_92035_d->_field_kind->_method_ref())))) { goto _case_end_4393937488; }
				_case_begin_4393937488:;
				{
					_92035_d->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_104a21a10_Ptr>(new( std::nothrow ) _104a21a10_Ptr(_92035_d->_field_kind->_method_ref()->_field_elem->_method_clone()))));
					_92035_d->_field_model=jule::Any(jule::new_struct<_11911f320_GetRefPtrExprModel>(new( std::nothrow ) _11911f320_GetRefPtrExprModel(_92035_d->_field_model)));
				}
				goto _match_end_4393935920;
				_case_end_4393937488:;
				if (!((_104a21a10_can_get_ptr(_92035_d)))) { goto _case_end_4393937072; }
				_case_begin_4393937072:;
				{
					_92035_d->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_104a21a10_Ptr>(new( std::nothrow ) _104a21a10_Ptr(_92035_d->_field_kind->_method_clone()))));
					_92035_d->_field_model=jule::Any(jule::new_struct<_11911f320_UnaryExprModel>(new( std::nothrow ) _11911f320_UnaryExprModel(_92035_d->_field_model,jule::Str("&", 1))));
				}
				goto _match_end_4393935920;
				_case_end_4393937072:;
				_case_begin_4393936064:;
				{
					jule::drop(_92035_d);
				}
				goto _match_end_4393935920;
				_case_end_4393936064:;
				_match_end_4393935920:;
			}
		}
		goto _match_end_4393934096;
		_case_end_4393934752:;
		_match_end_4393934096:;
	}
	if (jule::real(_92035_d)) {
		jule::drop(_92035_d->_field_constant);
		_92035_d->_field_lvalue=true;
		_92035_d->_field_mutable=true;
	}
	return _92035_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_unary_type_decl(jule::Ref<_1191dc300_Data> _96743_d,jule::Ref<_1487f5920_UnaryExpr> _96753_u) {
	_104a21a10_TypeChecker _96817_tc = _104a21a10_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ref<_104a21a10_Referencer>(),_96753_u->_field_op,jule::Slice<jule::Ref<_1487f5920_GenericDecl>>(),jule::Slice<jule::Ref<_104a21a10_TypeAlias>>(),jule::Bool());
	{
		auto _match_expr{ _96753_u->_field_op._field_kind };
		if (!((jule::Str("*", 1)) == _match_expr)) { goto _case_end_4393961536; }
		_case_begin_4393961536:;
		{
			_96743_d->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_96817_tc._method_build_ptr_from_type(_96743_d->_field_kind)));
		}
		goto _match_end_4393955440;
		_case_end_4393961536:;
		if (!((jule::Str("&", 1)) == _match_expr)) { goto _case_end_4393962096; }
		_case_begin_4393962096:;
		{
			_96743_d->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_96817_tc._method_build_ref_from_type(_96743_d->_field_kind)));
		}
		goto _match_end_4393955440;
		_case_end_4393962096:;
		_case_begin_4393957696:;
		{
			(*this)._method_push_err(_96753_u->_field_op,jule::Str("invalid expression for unary @ operator", 39),jule::Slice<jule::Any>({jule::Any(_96753_u->_field_op._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4393955440;
		_case_end_4393957696:;
		_match_end_4393955440:;
	}
	_96743_d->_field_decl=true;
	return _96743_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_unary(jule::Ref<_1487f5920_UnaryExpr> _99034_u) {
	jule::Ref<_104a21a10_TypeKind> _99117_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_99117_prefix;
	});
	jule::Ref<_1191dc300_Data> _99517_d = this->self->_method_eval_expr_kind(_99034_u->_field_expr);
	if ((!(jule::real(_99517_d)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_99517_d->_field_decl) {
		return this->self->_method_eval_unary_type_decl(_99517_d,_99034_u);
	}
	jule::Ref<_104a21a10_TypeKind> _100417_cast_kind = _99517_d->_field_cast_kind;
	{
		auto _match_expr{ _99034_u->_field_op._field_kind };
		if (!((jule::Str("-", 1)) == _match_expr)) { goto _case_end_4393979232; }
		_case_begin_4393979232:;
		{
			_99517_d=this->self->_method_eval_unary_minus(_99517_d);
		}
		goto _match_end_4393976864;
		_case_end_4393979232:;
		if (!((jule::Str("+", 1)) == _match_expr)) { goto _case_end_4393978864; }
		_case_begin_4393978864:;
		{
			_99517_d=this->self->_method_eval_unary_plus(_99517_d);
		}
		goto _match_end_4393976864;
		_case_end_4393978864:;
		if (!((jule::Str("^", 1)) == _match_expr)) { goto _case_end_4393978976; }
		_case_begin_4393978976:;
		{
			_99517_d=this->self->_method_eval_unary_caret(_99517_d);
		}
		goto _match_end_4393976864;
		_case_end_4393978976:;
		if (!((jule::Str("!", 1)) == _match_expr)) { goto _case_end_4393978272; }
		_case_begin_4393978272:;
		{
			_99517_d=this->self->_method_eval_unary_excl(_99517_d);
		}
		goto _match_end_4393976864;
		_case_end_4393978272:;
		if (!((jule::Str("*", 1)) == _match_expr)) { goto _case_end_4393978384; }
		_case_begin_4393978384:;
		{
			_99517_d=this->self->_method_eval_unary_star(_99517_d,_99034_u->_field_op);
		}
		goto _match_end_4393976864;
		_case_end_4393978384:;
		if (!((jule::Str("&", 1)) == _match_expr)) { goto _case_end_4393978496; }
		_case_begin_4393978496:;
		{
			_99517_d=this->self->_method_eval_unary_amper(_99517_d);
		}
		goto _match_end_4393976864;
		_case_end_4393978496:;
		_case_begin_4393973952:;
		{
			jule::drop(_99517_d);
		}
		goto _match_end_4393976864;
		_case_end_4393973952:;
		_match_end_4393976864:;
	}
	if ((!(jule::real(_99517_d)))) {
		this->self->_method_push_err(_99034_u->_field_op,jule::Str("invalid expression for unary @ operator", 39),jule::Slice<jule::Any>({jule::Any(_99034_u->_field_op._field_kind)}));
	} else if (_99517_d->_method_is_const()) {
		_99517_d->_field_model=jule::Any(_99517_d->_field_constant);
	} else if (jule::real(_100417_cast_kind)) {
		_99517_d->_field_cast_kind=_100417_cast_kind;
		_1191dc300_apply_cast_kind(_99517_d);
	}
	return _99517_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_variadic(jule::Ref<_1487f5920_VariadicExpr> _102737_v) {
	jule::Ref<_104a21a10_TypeKind> _102817_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_102817_prefix;
	});
	jule::Ref<_1191dc300_Data> _103217_d = this->self->_method_eval_expr_kind(_102737_v->_field_expr);
	if ((!(jule::real(_103217_d)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if (jule::real(_103217_d->_field_kind->_method_ref())) {
		_103217_d->_field_kind=_103217_d->_field_kind->_method_ref()->_field_elem;
		_103217_d->_field_model=jule::Any(jule::new_struct<_11911f320_ExplicitDerefExprModel>(new( std::nothrow ) _11911f320_ExplicitDerefExprModel(_103217_d->_field_model)));
	}
	if ((!(_104a21a10_is_variadicable(_103217_d->_field_kind)))) {
		this->self->_method_push_err(_102737_v->_field_token,jule::Str("@ data-type is not variadicable", 31),jule::Slice<jule::Any>({jule::Any(_103217_d->_field_kind->_method_to_str())}));
		return jule::new_ref<_1191dc300_Data>();
	}
	_103217_d->_field_variadiced=true;
	_103217_d->_field_kind=_103217_d->_field_kind->_method_slc()->_field_elem;
	_103217_d->_field_kind->_field_variadic=true;
	return _103217_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_unsafe(jule::Ref<_1487f5920_UnsafeExpr> _105535_u) {
	jule::Bool _105613_unsafety = this->self->_field_unsafety;
	this->self->_field_unsafety=true;
	jule::Ref<_1191dc300_Data> _105917_d = this->self->_method_eval_expr_kind(_105535_u->_field_expr);
	this->self->_field_unsafety=_105613_unsafety;
	return _105917_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_arr(jule::Ref<_1487f5920_SliceExpr> _106632_s) {
	jule::Ref<_104a21a10_Arr> _106817_pt = this->self->_field_prefix->_method_arr();
	jule::Ref<_104a21a10_Arr> _107017_arr = jule::new_struct<_104a21a10_Arr>(new( std::nothrow ) _104a21a10_Arr(false,0LL,_106817_pt->_field_elem));
	if (_106817_pt->_field_auto) {
		_107017_arr->_field_n=static_cast<jule::I64>(_106632_s->_field_elems.len());
	} else {
		_107017_arr->_field_n=static_cast<jule::I64>(_106632_s->_field_elems.len());
		if (_107017_arr->_field_n > _106817_pt->_field_n) {
			this->self->_method_push_err(_106632_s->_field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>({}));
		} else if (_107017_arr->_field_n < _106817_pt->_field_n) {
			_107017_arr->_field_n=_106817_pt->_field_n;
		}
	}
	jule::Ref<_11911f320_ArrayExprModel> _108717_model = jule::new_struct<_11911f320_ArrayExprModel>(new( std::nothrow ) _11911f320_ArrayExprModel(_107017_arr,jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_106632_s->_field_elems.len())))));
	jule::Ref<_104a21a10_TypeKind> _109217_prefix = this->self->_field_prefix;
	this->self->_field_prefix=_107017_arr->_field_elem;
	{
		auto __julec_range_expr = _106632_s->_field_elems;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1191dc300_i = 0;
			jule::Any _1191dc300_elem = *__julec_range_begin;
			_iter_begin_4394032080:;
			{
				jule::Ref<_1191dc300_Data> _109521_d = this->self->_method_eval_expr_kind(_1191dc300_elem);
				if ((!(jule::real(_109521_d)))) {
					goto _iter_next_4394032080;
				}
				this->self->_field_s->_method_check_assign_type(_107017_arr->_field_elem,_109521_d,_106632_s->_field_token,true);
				_108717_model->_field_elems[static_cast<jule::Int>(_1191dc300_i)]=_109521_d->_field_model;
			}
			_iter_next_4394032080:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1191dc300_i; _1191dc300_elem = *__julec_range_begin; goto _iter_begin_4394032080; }
			_iter_end_4394032080:;
		}
	}
	this->self->_field_prefix=_109217_prefix;
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_107017_arr)),jule::Ref<_104a21a10_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_108717_model),jule::Bool(),jule::Ref<_104c409b0_Const>()));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_exp_slc(jule::Ref<_1487f5920_SliceExpr> _111236_s,jule::Ref<_104a21a10_TypeKind> _111251_elem_type) {
	jule::Ref<_104a21a10_Slc> _111317_slc = jule::new_struct<_104a21a10_Slc>(new( std::nothrow ) _104a21a10_Slc(_111251_elem_type));
	jule::Ref<_11911f320_SliceExprModel> _111717_model = jule::new_struct<_11911f320_SliceExprModel>(new( std::nothrow ) _11911f320_SliceExprModel(_111251_elem_type,jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_111236_s->_field_elems.len())))));
	jule::Ref<_104a21a10_TypeKind> _112217_prefix = this->self->_field_prefix;
	this->self->_field_prefix=_111317_slc->_field_elem;
	{
		auto __julec_range_expr = _111236_s->_field_elems;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1191dc300_i = 0;
			jule::Any _1191dc300_elem = *__julec_range_begin;
			_iter_begin_4394051008:;
			{
				jule::Ref<_1191dc300_Data> _112521_d = this->self->_method_eval_expr_kind(_1191dc300_elem);
				if ((!(jule::real(_112521_d)))) {
					goto _iter_next_4394051008;
				}
				this->self->_field_s->_method_check_assign_type(_111317_slc->_field_elem,_112521_d,_111236_s->_field_token,true);
				_111717_model->_field_elems[static_cast<jule::Int>(_1191dc300_i)]=_112521_d->_field_model;
			}
			_iter_next_4394051008:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1191dc300_i; _1191dc300_elem = *__julec_range_begin; goto _iter_begin_4394051008; }
			_iter_end_4394051008:;
		}
	}
	this->self->_field_prefix=_112217_prefix;
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_111317_slc)),jule::Ref<_104a21a10_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_111717_model),jule::Bool(),jule::Ref<_104c409b0_Const>()));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_slice_expr(jule::Ref<_1487f5920_SliceExpr> _114239_s) {
	if (jule::real(this->self->_field_prefix)) {
		{
			if (!((jule::real(this->self->_field_prefix->_method_arr())))) { goto _case_end_4394065456; }
			_case_begin_4394065456:;
			{
				return this->self->_method_eval_arr(_114239_s);
			}
			goto _match_end_4394065264;
			_case_end_4394065456:;
			if (!((jule::real(this->self->_field_prefix->_method_slc())))) { goto _case_end_4394065584; }
			_case_begin_4394065584:;
			{
				jule::Ref<_104a21a10_Slc> _114925_pt = this->self->_field_prefix->_method_slc();
				return this->self->_method_eval_exp_slc(_114239_s,_114925_pt->_field_elem);
			}
			goto _match_end_4394065264;
			_case_end_4394065584:;
			_match_end_4394065264:;
		}
	}
	jule::Ref<_104a21a10_TypeKind> _115417_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	if (_114239_s->_field_elems.len() == 0LL) {
		this->self->_method_push_err(_114239_s->_field_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_1191dc300_Data> _116217_first_elem = this->self->_method_eval_expr_kind(_114239_s->_field_elems[0LL]);
	if ((!(jule::real(_116217_first_elem)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_1191dc300_Data> _116717_d = this->self->_method_eval_exp_slc(_114239_s,_116217_first_elem->_field_kind);
	this->self->_field_prefix=_115417_prefix;
	return _116717_d;
}



inline void _1191dc300_Eval::_method_check_integer_indexing_by_data(jule::Ref<_1191dc300_Data> _117353_d,_108e15ff0_Token _117363_token) {
	jule::Str _117413_err_key = _1191dc300_check_data_for_integer_indexing(_117353_d);
	if (_117413_err_key != jule::Str("", 0)) {
		(*this)._method_push_err(_117363_token,_117413_err_key,jule::Slice<jule::Any>({}));
	}
}



inline void _1191dc300_Eval::_method_indexing_ptr(jule::Ref<_1191dc300_Data> _118035_d,jule::Ref<_1191dc300_Data> _118049_index,jule::Ref<_1487f5920_IndexingExpr> _118063_i) {
	(*this)._method_check_integer_indexing_by_data(_118049_index,_118063_i->_field_token);
	jule::Ref<_104a21a10_Ptr> _118317_ptr = _118035_d->_field_kind->_method_ptr();
	{
		if (!((_118317_ptr->_method_is_unsafe()))) { goto _case_end_4394091232; }
		_case_begin_4394091232:;
		{
			(*this)._method_push_err(_118063_i->_field_token,jule::Str("unsafe pointers not supports indexing", 37),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4394091056;
		_case_end_4394091232:;
		if (!(((!((*this)._method_is_unsafe()))))) { goto _case_end_4394091360; }
		_case_begin_4394091360:;
		{
			(*this)._method_push_err(_118063_i->_field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4394091056;
		_case_end_4394091360:;
		_match_end_4394091056:;
	}
	_118035_d->_field_kind=_118317_ptr->_field_elem->_method_clone();
}



inline void _1191dc300_Eval::_method_indexing_arr(jule::Ref<_1191dc300_Data> _119635_d,jule::Ref<_1191dc300_Data> _119649_index,jule::Ref<_1487f5920_IndexingExpr> _119663_i) {
	jule::Ref<_104a21a10_Arr> _119717_arr = _119635_d->_field_kind->_method_arr();
	_119635_d->_field_kind=_119717_arr->_field_elem->_method_clone();
	(*this)._method_check_integer_indexing_by_data(_119649_index,_119663_i->_field_token);
	if (_119649_index->_method_is_const() && (_119649_index->_field_constant->_method_as_f64() >= _119717_arr->_field_n)) {
		(*this)._method_push_err(_119663_i->_field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>({}));
	}
}



inline void _1191dc300_Eval::_method_indexing_slc(jule::Ref<_1191dc300_Data> _120535_d,jule::Ref<_1191dc300_Data> _120548_index,jule::Ref<_1487f5920_IndexingExpr> _120562_i) {
	jule::Ref<_104a21a10_Slc> _120617_slc = _120535_d->_field_kind->_method_slc();
	_120535_d->_field_kind=_120617_slc->_field_elem->_method_clone();
	(*this)._method_check_integer_indexing_by_data(_120548_index,_120562_i->_field_token);
}



inline void _1191dc300_Eval::_method_indexing_map(jule::Ref<_1191dc300_Data> _121135_d,jule::Ref<_1191dc300_Data> _121149_index,jule::Ref<_1487f5920_IndexingExpr> _121167_i) {
	if ((!(jule::real(_121149_index)))) {
		return;
	}
	jule::Ref<_104a21a10_Map> _121617_m = _121135_d->_field_kind->_method_map();
	_1044463d0_AssignTypeChecker _121717_atc = _1044463d0_AssignTypeChecker((*this)._field_s,_121617_m->_field_key,_121149_index,_121167_i->_field_token,true);
	_121717_atc._method_check();
	_121135_d->_field_kind=_121617_m->_field_val->_method_clone();
}



inline void _1191dc300_Eval::_method_indexing_str(jule::Ref<_1191dc300_Data> _122935_d,jule::Ref<_1191dc300_Data> _122949_index,jule::Ref<_1487f5920_IndexingExpr> _122963_i) {
	
	_122935_d->_field_kind->_field_kind=_104a21a10_build_prim_type(jule::Str("u8", 2));
	if ((!(jule::real(_122949_index)))) {
		return;
	}
	(*this)._method_check_integer_indexing_by_data(_122949_index,_122963_i->_field_token);
	if ((!(_122949_index->_method_is_const()))) {
		jule::drop(_122935_d->_field_constant);
		return;
	}
	if (_122935_d->_method_is_const()) {
		_108e15ff0_Token _124517_error_token = _122963_i->_field_token;
		jule::I64 _124617_i = _122949_index->_field_constant->_method_as_i64();
		jule::Str _124717_s = _122935_d->_field_constant->_method_read_str();
		if (static_cast<jule::Int>(_124617_i) >= _124717_s.len()) {
			(*this)._method_push_err(_124517_error_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>({}));
		} else {
			_122935_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_124717_s[static_cast<jule::Int>(_124617_i)]));
		}
	}
}



inline void _1191dc300_Eval::_method_to_indexing(jule::Ref<_1191dc300_Data> _125634_d,jule::Ref<_1191dc300_Data> _125648_index,jule::Ref<_1487f5920_IndexingExpr> _125666_i) {
	{
		if (!((jule::real(_125634_d->_field_kind->_method_ptr())))) { goto _case_end_4394150608; }
		_case_begin_4394150608:;
		{
			(*this)._method_indexing_ptr(_125634_d,_125648_index,_125666_i);
			return;
		}
		goto _match_end_4394150400;
		_case_end_4394150608:;
		if (!((jule::real(_125634_d->_field_kind->_method_arr())))) { goto _case_end_4394150736; }
		_case_begin_4394150736:;
		{
			(*this)._method_indexing_arr(_125634_d,_125648_index,_125666_i);
			return;
		}
		goto _match_end_4394150400;
		_case_end_4394150736:;
		if (!((jule::real(_125634_d->_field_kind->_method_slc())))) { goto _case_end_4394150864; }
		_case_begin_4394150864:;
		{
			(*this)._method_indexing_slc(_125634_d,_125648_index,_125666_i);
			return;
		}
		goto _match_end_4394150400;
		_case_end_4394150864:;
		if (!((jule::real(_125634_d->_field_kind->_method_map())))) { goto _case_end_4394150992; }
		_case_begin_4394150992:;
		{
			(*this)._method_indexing_map(_125634_d,_125648_index,_125666_i);
			return;
		}
		goto _match_end_4394150400;
		_case_end_4394150992:;
		if (!((jule::real(_125634_d->_field_kind->_method_prim())))) { goto _case_end_4394151120; }
		_case_begin_4394151120:;
		{
			jule::Ref<_104a21a10_Prim> _127517_prim = _125634_d->_field_kind->_method_prim();
			{
				if (!((_127517_prim->_method_is_str()))) { goto _case_end_4394162368; }
				_case_begin_4394162368:;
				{
					(*this)._method_indexing_str(_125634_d,_125648_index,_125666_i);
					return;
				}
				goto _match_end_4394162176;
				_case_end_4394162368:;
				_match_end_4394162176:;
			}
		}
		goto _match_end_4394150400;
		_case_end_4394151120:;
		_match_end_4394150400:;
	}
	(*this)._method_push_err(_125666_i->_field_token,jule::Str("@ data type is not support indexing", 35),jule::Slice<jule::Any>({jule::Any(_125634_d->_field_kind->_method_to_str())}));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_ident_decl_from_indexing(jule::Ref<_1487f5920_IndexingExpr> _128653_i) {
	{
		auto _match_expr{ _128653_i->_field_expr };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_IdentExpr>>())) { goto _case_end_4394170688; }
		goto _match_end_4394169248;
		_case_end_4394170688:;
		_case_begin_4394169904:;
		{
			this->self->_method_push_err(_128653_i->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4394169248;
		_case_end_4394169904:;
		_match_end_4394169248:;
	}
	jule::Ref<_1487f5920_IdentTypeDecl> _129417_decl = jule::new_struct<_1487f5920_IdentTypeDecl>(new( std::nothrow ) _1487f5920_IdentTypeDecl(_108e15ff0_Token(),_128653_i->_field_expr.operator jule::Ref<_1487f5920_IdentExpr>()->_field_ident,jule::Bool(),jule::Slice<jule::Ref<_1487f5920_TypeDecl>>()));
	{
		auto _match_expr{ _128653_i->_field_index };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_UnaryExpr>>())) { goto _case_end_4394177616; }
		_case_begin_4394177616:;
		{
			jule::Ref<_1191dc300_Data> _130221_d = this->self->_method_eval_unary(_128653_i->_field_index.operator jule::Ref<_1487f5920_UnaryExpr>());
			if ((!(_130221_d->_field_decl))) {
				this->self->_method_push_err(_128653_i->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
				return jule::new_ref<_1191dc300_Data>();
			}
			_129417_decl->_field_generics=jule::append(_129417_decl->_field_generics,jule::Slice<jule::Ref<_1487f5920_TypeDecl>>({jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_108e15ff0_Token(),jule::Any(_130221_d->_field_kind)))}));
		}
		goto _match_end_4394174608;
		_case_end_4394177616:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_TypeDecl>>())) { goto _case_end_4394178464; }
		_case_begin_4394178464:;
		{
			_129417_decl->_field_generics=jule::append(_129417_decl->_field_generics,jule::Slice<jule::Ref<_1487f5920_TypeDecl>>({_128653_i->_field_index.operator jule::Ref<_1487f5920_TypeDecl>()}));
		}
		goto _match_end_4394174608;
		_case_end_4394178464:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_IdentExpr>>())) { goto _case_end_4394178576; }
		_case_begin_4394178576:;
		{
			_129417_decl->_field_generics=jule::append(_129417_decl->_field_generics,jule::Slice<jule::Ref<_1487f5920_TypeDecl>>({jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_108e15ff0_Token(),jule::Any(jule::new_struct<_1487f5920_IdentTypeDecl>(new( std::nothrow ) _1487f5920_IdentTypeDecl(_108e15ff0_Token(),_128653_i->_field_index.operator jule::Ref<_1487f5920_IdentExpr>()->_field_ident,jule::Bool(),jule::Slice<jule::Ref<_1487f5920_TypeDecl>>())))))}));
		}
		goto _match_end_4394174608;
		_case_end_4394178576:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_TupleExpr>>())) { goto _case_end_4394175520; }
		_case_begin_4394175520:;
		{
			{
				auto __julec_range_expr = _128653_i->_field_index.operator jule::Ref<_1487f5920_TupleExpr>()->_field_expr;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Ref<_1487f5920_Expr> _1191dc300_expr = *__julec_range_begin;
					_iter_begin_4394192848:;
					{
						{
							auto _match_expr{ _1191dc300_expr->_field_kind };
							if (!(_match_expr.type_is<jule::Ref<_1487f5920_TypeDecl>>())) { goto _case_end_4394193824; }
							_case_begin_4394193824:;
							{
								_129417_decl->_field_generics=jule::append(_129417_decl->_field_generics,jule::Slice<jule::Ref<_1487f5920_TypeDecl>>({_1191dc300_expr->_field_kind.operator jule::Ref<_1487f5920_TypeDecl>()}));
							}
							goto _match_end_4394184704;
							_case_end_4394193824:;
							if (!(_match_expr.type_is<jule::Ref<_1487f5920_IdentExpr>>())) { goto _case_end_4394193936; }
							_case_begin_4394193936:;
							{
								_129417_decl->_field_generics=jule::append(_129417_decl->_field_generics,jule::Slice<jule::Ref<_1487f5920_TypeDecl>>({jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_108e15ff0_Token(),jule::Any(jule::new_struct<_1487f5920_IdentTypeDecl>(new( std::nothrow ) _1487f5920_IdentTypeDecl(_108e15ff0_Token(),_1191dc300_expr->_field_kind.operator jule::Ref<_1487f5920_IdentExpr>()->_field_ident,jule::Bool(),jule::Slice<jule::Ref<_1487f5920_TypeDecl>>())))))}));
							}
							goto _match_end_4394184704;
							_case_end_4394193936:;
							_match_end_4394184704:;
						}
					}
					_iter_next_4394192848:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _1191dc300_expr = *__julec_range_begin; goto _iter_begin_4394192848; }
					_iter_end_4394192848:;
				}
			}
		}
		goto _match_end_4394174608;
		_case_end_4394175520:;
		_case_begin_4394175216:;
		{
			this->self->_method_push_err(_128653_i->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4394174608;
		_case_end_4394175216:;
		_match_end_4394174608:;
	}
	return this->self->_method_eval_type(jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_108e15ff0_Token(),jule::Any(_129417_decl))));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_indexing(jule::Ref<_1487f5920_IndexingExpr> _133837_i) {
	jule::Ref<_104a21a10_TypeKind> _133917_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_133917_prefix;
	});
	jule::Ref<_1191dc300_Data> _134317_d = this->self->_method_eval_expr_kind(_133837_i->_field_expr);
	if ((!(jule::real(_134317_d)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_134317_d->_field_decl) {
		return this->self->_method_eval_ident_decl_from_indexing(_133837_i);
	}
	jule::Any _135317_expr_model = _134317_d->_field_model;
	jule::Ref<_1191dc300_Data> _135417_index = this->self->_method_eval_expr_kind(_133837_i->_field_index);
	this->self->_method_to_indexing(_134317_d,_135417_index,_133837_i);
	if (jule::real(_135417_index)) {
		if (_134317_d->_method_is_const()) {
			_134317_d->_field_model=jule::Any(_134317_d->_field_constant);
		} else {
			_134317_d->_field_model=jule::Any(jule::new_struct<_11911f320_IndexigExprModel>(new( std::nothrow ) _11911f320_IndexigExprModel(_135317_expr_model,_135417_index->_field_model)));
		}
	}
	return _134317_d;
}



inline std::tuple<jule::Ref<_1191dc300_Data>,jule::Ref<_1191dc300_Data>> _1191dc300_Eval::_method_eval_slicing_exprs(jule::Ref<_1487f5920_SlicingExpr> _137542_s) {
	jule::Ref<_104a21a10_TypeKind> _137617_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_137617_prefix;
	});
	jule::Ref<_1191dc300_Data> _138017_l = jule::new_ref<_1191dc300_Data>();
	jule::Ref<_1191dc300_Data> _138117_r = jule::new_ref<_1191dc300_Data>();
	if (_137542_s->_field_start != nullptr) {
		_138017_l=this->self->_method_eval_expr_kind(_137542_s->_field_start);
		if (jule::real(_138017_l)) {
			this->self->_method_check_integer_indexing_by_data(_138017_l,_137542_s->_field_token);
		} else {
			return std::make_tuple(jule::new_ref<_1191dc300_Data>(),jule::new_ref<_1191dc300_Data>());
		}
	} else {
		_138017_l=jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_104c409b0_Const::_static_method_new_i64(0LL)));
		_138017_l->_field_model=jule::Any(_138017_l->_field_constant);
	}
	if (_137542_s->_field_to != nullptr) {
		_138117_r=this->self->_method_eval_expr_kind(_137542_s->_field_to);
		if (jule::real(_138117_r)) {
			this->self->_method_check_integer_indexing_by_data(_138117_r,_137542_s->_field_token);
		} else {
			return std::make_tuple(jule::new_ref<_1191dc300_Data>(),jule::new_ref<_1191dc300_Data>());
		}
	}
	return std::make_tuple(_138017_l,_138117_r);
}



inline void _1191dc300_Eval::_method_slicing_arr(jule::Ref<_1191dc300_Data> _141030_d) {
	jule::Ref<_104a21a10_TypeKind> _141117_elem_type = _141030_d->_field_kind->_method_arr()->_field_elem->_method_clone();
	_141030_d->_field_kind->_field_kind=jule::new_struct<_104a21a10_Slc>(new( std::nothrow ) _104a21a10_Slc(_141117_elem_type));
	_141030_d->_field_lvalue=false;
	_141030_d->_field_mutable=_141030_d->_field_mutable || (!(_104a21a10_is_mut(_141117_elem_type)));
}



inline void _1191dc300_Eval::_method_slicing_slc(jule::Ref<_1191dc300_Data> _142130_d) {
	_142130_d->_field_lvalue=false;
}



inline void _1191dc300_Eval::_method_slicing_str(jule::Ref<_1191dc300_Data> _142530_d,jule::Ref<_1191dc300_Data> _142540_l,jule::Ref<_1191dc300_Data> _142550_r) {
	_142530_d->_field_lvalue=false;
	_142530_d->_field_mutable=true;
	if ((!(_142530_d->_method_is_const()))) {
		return;
	}
	if ((!(jule::real(_142540_l))) || (!(jule::real(_142550_r)))) {
		jule::drop(_142530_d->_field_constant);
		return;
	}
	if (_142540_l->_method_is_const() && _142550_r->_method_is_const()) {
		jule::I64 _143817_left = _142540_l->_field_constant->_method_as_i64();
		if (_143817_left < 0LL) {
			return;
		}
		jule::Str _144317_s = _142530_d->_field_constant->_method_read_str();
		jule::I64 _144421_right = 0LL;
		if ((!(jule::real(_142550_r)))) {
			_144421_right=static_cast<jule::I64>(_144317_s.len());
		} else {
			_144421_right=static_cast<jule::I64>(_142550_r->_field_constant->_method_as_i64());
		}
		if (_143817_left > _144421_right) {
			return;
		}
		_142530_d->_field_constant->_method_set_str(_144317_s.slice(static_cast<jule::Int>(_143817_left),static_cast<jule::Int>(_144421_right)));
	} else {
		jule::drop(_142530_d->_field_constant);
	}
}



inline void _1191dc300_Eval::_method_check_slicing(jule::Ref<_1191dc300_Data> _146036_d,jule::Ref<_1191dc300_Data> _146046_l,jule::Ref<_1191dc300_Data> _146056_r,jule::Ref<_1487f5920_SlicingExpr> _146066_s) {
	{
		if (!((jule::real(_146036_d->_field_kind->_method_arr())))) { goto _case_end_4394272240; }
		_case_begin_4394272240:;
		{
			(*this)._method_slicing_arr(_146036_d);
			return;
		}
		goto _match_end_4394272016;
		_case_end_4394272240:;
		if (!((jule::real(_146036_d->_field_kind->_method_slc())))) { goto _case_end_4394272368; }
		_case_begin_4394272368:;
		{
			(*this)._method_slicing_slc(_146036_d);
			return;
		}
		goto _match_end_4394272016;
		_case_end_4394272368:;
		if (!((jule::real(_146036_d->_field_kind->_method_prim())))) { goto _case_end_4394272496; }
		_case_begin_4394272496:;
		{
			jule::Ref<_104a21a10_Prim> _147117_prim = _146036_d->_field_kind->_method_prim();
			{
				if (!((_147117_prim->_method_is_str()))) { goto _case_end_4394280352; }
				_case_begin_4394280352:;
				{
					(*this)._method_slicing_str(_146036_d,_146046_l,_146056_r);
					return;
				}
				goto _match_end_4394280160;
				_case_end_4394280352:;
				_match_end_4394280160:;
			}
		}
		goto _match_end_4394272016;
		_case_end_4394272496:;
		_match_end_4394272016:;
	}
	(*this)._method_push_err(_146066_s->_field_token,jule::Str("@ data type is not support slicing", 34),jule::Slice<jule::Any>({jule::Any(_146036_d->_field_kind->_method_to_str())}));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_slicing(jule::Ref<_1487f5920_SlicingExpr> _148236_s) {
	jule::Ref<_1191dc300_Data> _148317_d = this->self->_method_eval_expr_kind(_148236_s->_field_expr);
	if ((!(jule::real(_148317_d)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_1191dc300_Data> _148818_l;
	jule::Ref<_1191dc300_Data> _148825_r;
	std::tie(_148818_l,_148825_r) = this->self->_method_eval_slicing_exprs(_148236_s);
	if ((!(jule::real(_148818_l)))) {
		return _148317_d;
	}
	this->self->_method_check_slicing(_148317_d,_148818_l,_148825_r,_148236_s);
	jule::drop(_148317_d->_field_cast_kind);
	jule::Ref<_11911f320_SlicingExprModel> _149617_model = jule::new_struct<_11911f320_SlicingExprModel>(new( std::nothrow ) _11911f320_SlicingExprModel(_148317_d->_field_model,_148818_l->_field_model,jule::Any()));
	if (jule::real(_148825_r)) {
		_149617_model->_field_right=_148825_r->_field_model;
	}
	_148317_d->_field_model=jule::Any(_149617_model);
	return _148317_d;
}



inline void _1191dc300_Eval::_method_cast_ptr(jule::Ref<_104a21a10_TypeKind> _150927_t,jule::Ref<_1191dc300_Data> _150945_d,_108e15ff0_Token _150955_error_token) {
	if ((!((*this)._method_is_unsafe()))) {
		(*this)._method_push_err(_150955_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
		return;
	}
	jule::Ref<_104a21a10_Prim> _151513_prim = _150945_d->_field_kind->_method_prim();
	if ((!(jule::real(_150945_d->_field_kind->_method_ptr()))) && ((!(jule::real(_151513_prim))) || (!(_104c56790_is_int(_151513_prim->_method_to_str()))))) {
		(*this)._method_push_err(_150955_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_150945_d->_field_kind->_method_to_str()),jule::Any(_150927_t->_method_to_str())}));
	}
	jule::drop(_150945_d->_field_constant);
}



inline void _1191dc300_Eval::_method_cast_struct(jule::Ref<_104a21a10_TypeKind> _152334_t,jule::Ref<_1191dc300_Data> _152352_d,_108e15ff0_Token _152362_error_token) {
	jule::Ref<_1036e5da0_Trait> _152417_tr = _152352_d->_field_kind->_method_trt();
	if ((!(jule::real(_152417_tr)))) {
		(*this)._method_push_err(_152362_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_152352_d->_field_kind->_method_to_str()),jule::Any(_152334_t->_method_to_str())}));
		return;
	}
	jule::Ref<_1037370d0_StructIns> _153017_s = jule::new_ref<_1037370d0_StructIns>();
	if (jule::real(_152334_t->_method_ref())) {
		_153017_s=_152334_t->_method_ref()->_field_elem->_method_strct();
	} else {
		_153017_s=_152334_t->_method_strct();
	}
	(*this)._method_push_reference_to_struct(_153017_s);
	if ((!(_153017_s->_field_decl->_method_is_implements(_152417_tr)))) {
		(*this)._method_push_err(_152362_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_152352_d->_field_kind->_method_to_str()),jule::Any(_152334_t->_method_to_str())}));
	}
}



inline void _1191dc300_Eval::_method_cast_ref(jule::Ref<_104a21a10_TypeKind> _154431_t,jule::Ref<_1191dc300_Data> _154449_d,_108e15ff0_Token _154459_error_token) {
	jule::Ref<_104a21a10_Ref> _154517_ref = _154431_t->_method_ref();
	if (jule::real(_154517_ref->_field_elem->_method_strct())) {
		(*this)._method_cast_struct(_154431_t,_154449_d,_154459_error_token);
		return;
	}
	(*this)._method_push_err(_154459_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_154449_d->_field_kind->_method_to_str()),jule::Any(_154431_t->_method_to_str())}));
}



inline void _1191dc300_Eval::_method_cast_slc(jule::Ref<_104a21a10_TypeKind> _155431_t,jule::Ref<_1191dc300_Data> _155449_d,_108e15ff0_Token _155459_error_token) {
	if (jule::real(_155449_d->_field_kind->_method_enm())) {
		if ((!(jule::real(_155449_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_prim()))) || (!(_155449_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_prim()->_method_is_str()))) {
			(*this)._method_push_err(_155459_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_155449_d->_field_kind->_method_to_str()),jule::Any(_155431_t->_method_to_str())}));
			return;
		}
	} else if ((!(jule::real(_155449_d->_field_kind->_method_prim()))) || (!(_155449_d->_field_kind->_method_prim()->_method_is_str()))) {
		(*this)._method_push_err(_155459_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_155449_d->_field_kind->_method_to_str()),jule::Any(_155431_t->_method_to_str())}));
		return;
	}
	_155431_t=_155431_t->_method_slc()->_field_elem;
	jule::Ref<_104a21a10_Prim> _156613_prim = _155431_t->_method_prim();
	if ((!(jule::real(_156613_prim))) || ((!(_156613_prim->_method_is_u8())) && (!(_156613_prim->_method_is_i32())))) {
		(*this)._method_push_err(_155459_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_155449_d->_field_kind->_method_to_str()),jule::Any(_155431_t->_method_to_str())}));
	}
}



inline void _1191dc300_Eval::_method_cast_str(jule::Ref<_1191dc300_Data> _157231_d,_108e15ff0_Token _157241_error_token) {
	if (jule::real(_157231_d->_field_kind->_method_enm())) {
		jule::Ref<_1036dad50_Enum> _157421_e = _157231_d->_field_kind->_method_enm();
		if (jule::real(_157421_e->_field_kind->_field_kind->_method_prim()) && _157421_e->_field_kind->_field_kind->_method_prim()->_method_is_str()) {
			return;
		}
	}
	if (jule::real(_157231_d->_field_kind->_method_prim())) {
		jule::Ref<_104a21a10_Prim> _158117_prim = _157231_d->_field_kind->_method_prim();
		if ((!(_158117_prim->_method_is_u8())) && (!(_158117_prim->_method_is_i32()))) {
			(*this)._method_push_err(_157241_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_157231_d->_field_kind->_method_to_str())}));
		}
		return;
	}
	if ((!(jule::real(_157231_d->_field_kind->_method_slc())))) {
		(*this)._method_push_err(_157241_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_157231_d->_field_kind->_method_to_str())}));
		return;
	}
	jule::Ref<_104a21a10_TypeKind> _159317_t = _157231_d->_field_kind->_method_slc()->_field_elem;
	jule::Ref<_104a21a10_Prim> _159413_prim = _159317_t->_method_prim();
	if ((!(jule::real(_159413_prim))) || ((!(_159413_prim->_method_is_u8())) && (!(_159413_prim->_method_is_i32())))) {
		(*this)._method_push_err(_157241_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_157231_d->_field_kind->_method_to_str())}));
	}
}



inline void _1191dc300_Eval::_method_cast_int(jule::Ref<_104a21a10_TypeKind> _160031_t,jule::Ref<_1191dc300_Data> _160049_d,_108e15ff0_Token _160059_error_token) {
	if (_160049_d->_method_is_const()) {
		jule::Ref<_104a21a10_Prim> _160217_prim = _160031_t->_method_prim();
		{
			if (!((_104c56790_is_sig_int(_160217_prim->_field_kind)))) { goto _case_end_4394392144; }
			_case_begin_4394392144:;
			{
				_160049_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_160049_d->_field_constant->_method_as_i64()));
			}
			goto _match_end_4394391904;
			_case_end_4394392144:;
			if (!((_104c56790_is_unsig_int(_160217_prim->_field_kind)))) { goto _case_end_4394392256; }
			_case_begin_4394392256:;
			{
				_160049_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_160049_d->_field_constant->_method_as_u64()));
			}
			goto _match_end_4394391904;
			_case_end_4394392256:;
			_match_end_4394391904:;
		}
	}
	if (jule::real(_160049_d->_field_kind->_method_enm())) {
		jule::Ref<_1036dad50_Enum> _161317_e = _160049_d->_field_kind->_method_enm();
		if (_104c56790_is_num(_161317_e->_field_kind->_field_kind->_method_to_str())) {
			return;
		}
	}
	if (jule::real(_160049_d->_field_kind->_method_ptr())) {
		jule::Ref<_104a21a10_Prim> _162017_prim = _160031_t->_method_prim();
		if (_162017_prim->_method_is_uintptr()) {
		} else if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_160059_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
		} else if (((((!(_162017_prim->_method_is_i32())) && (!(_162017_prim->_method_is_i64()))) && (!(_162017_prim->_method_is_u16()))) && (!(_162017_prim->_method_is_u32()))) && (!(_162017_prim->_method_is_u64()))) {
			(*this)._method_push_err(_160059_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_160049_d->_field_kind->_method_to_str()),jule::Any(_160031_t->_method_to_str())}));
		}
		return;
	}
	jule::Ref<_104a21a10_Prim> _163113_prim = _160049_d->_field_kind->_method_prim();
	if (jule::real(_163113_prim) && _104c56790_is_num(_163113_prim->_method_to_str())) {
		return;
	}
	(*this)._method_push_err(_160059_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_160049_d->_field_kind->_method_to_str()),jule::Any(_160031_t->_method_to_str())}));
}



inline void _1191dc300_Eval::_method_cast_num(jule::Ref<_104a21a10_TypeKind> _163931_t,jule::Ref<_1191dc300_Data> _163949_d,_108e15ff0_Token _163959_error_token) {
	if (_163949_d->_method_is_const()) {
		jule::Ref<_104a21a10_Prim> _164117_prim = _163931_t->_method_prim();
		{
			if (!((_104c56790_is_float(_164117_prim->_field_kind)))) { goto _case_end_4394428112; }
			_case_begin_4394428112:;
			{
				_163949_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_163949_d->_field_constant->_method_as_f64()));
			}
			goto _match_end_4394427856;
			_case_end_4394428112:;
			if (!((_104c56790_is_sig_int(_164117_prim->_field_kind)))) { goto _case_end_4394428224; }
			_case_begin_4394428224:;
			{
				_163949_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_163949_d->_field_constant->_method_as_i64()));
			}
			goto _match_end_4394427856;
			_case_end_4394428224:;
			if (!((_104c56790_is_unsig_int(_164117_prim->_field_kind)))) { goto _case_end_4394428336; }
			_case_begin_4394428336:;
			{
				_163949_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_163949_d->_field_constant->_method_as_u64()));
			}
			goto _match_end_4394427856;
			_case_end_4394428336:;
			_match_end_4394427856:;
		}
	}
	if (jule::real(_163949_d->_field_kind->_method_enm())) {
		jule::Ref<_1036dad50_Enum> _165517_e = _163949_d->_field_kind->_method_enm();
		if (_104c56790_is_num(_165517_e->_field_kind->_field_kind->_method_to_str())) {
			return;
		}
	}
	jule::Ref<_104a21a10_Prim> _166113_prim = _163949_d->_field_kind->_method_prim();
	if (jule::real(_166113_prim) && _104c56790_is_num(_166113_prim->_method_to_str())) {
		return;
	}
	(*this)._method_push_err(_163959_error_token,jule::Str("@ data-type not supports casting to @ data-type", 47),jule::Slice<jule::Any>({jule::Any(_163949_d->_field_kind->_method_to_str()),jule::Any(_163931_t->_method_to_str())}));
}



inline void _1191dc300_Eval::_method_cast_prim(jule::Ref<_104a21a10_TypeKind> _166932_t,jule::Ref<_1191dc300_Data> _166950_d,_108e15ff0_Token _166960_error_token) {
	jule::Ref<_104a21a10_Prim> _167013_prim = _166932_t->_method_prim();
	{
		if (!((_167013_prim->_method_is_any()))) { goto _case_end_4394450992; }
		goto _match_end_4394449984;
		_case_end_4394450992:;
		if (!((_167013_prim->_method_is_str()))) { goto _case_end_4394450480; }
		_case_begin_4394450480:;
		{
			(*this)._method_cast_str(_166950_d,_166960_error_token);
		}
		goto _match_end_4394449984;
		_case_end_4394450480:;
		if (!((_104c56790_is_int(_167013_prim->_method_to_str())))) { goto _case_end_4394450592; }
		_case_begin_4394450592:;
		{
			(*this)._method_cast_int(_166932_t,_166950_d,_166960_error_token);
		}
		goto _match_end_4394449984;
		_case_end_4394450592:;
		if (!((_104c56790_is_num(_167013_prim->_method_to_str())))) { goto _case_end_4394450704; }
		_case_begin_4394450704:;
		{
			(*this)._method_cast_num(_166932_t,_166950_d,_166960_error_token);
		}
		goto _match_end_4394449984;
		_case_end_4394450704:;
		_case_begin_4394450176:;
		{
			(*this)._method_push_err(_166960_error_token,jule::Str("@ data-type not supports casting", 32),jule::Slice<jule::Any>({jule::Any(_166932_t->_method_to_str())}));
		}
		goto _match_end_4394449984;
		_case_end_4394450176:;
		_match_end_4394449984:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_cast_by_type_n_data(jule::Ref<_104a21a10_TypeKind> _168947_t,jule::Ref<_1191dc300_Data> _168965_d,_108e15ff0_Token _168975_error_token) {
	{
		if (!((jule::real(_168965_d->_field_kind->_method_prim()) && _168965_d->_field_kind->_method_prim()->_method_is_any()))) { goto _case_end_4394466512; }
		_case_begin_4394466512:;
		{
			if (jule::real(_168947_t->_method_enm())) {
				(*this)._method_push_err(_168975_error_token,jule::Str("enum cannot casted from any type", 32),jule::Slice<jule::Any>({}));
				(*this)._method_push_suggestion(jule::Str("try cast to type of enum fields instead of enum", 47),jule::Slice<jule::Any>({}));
			}
		}
		goto _match_end_4394463312;
		_case_end_4394466512:;
		if (!((jule::real(_168947_t->_method_ptr())))) { goto _case_end_4394463728; }
		_case_begin_4394463728:;
		{
			(*this)._method_cast_ptr(_168947_t,_168965_d,_168975_error_token);
		}
		goto _match_end_4394463312;
		_case_end_4394463728:;
		if (!((jule::real(_168947_t->_method_ref())))) { goto _case_end_4394463840; }
		_case_begin_4394463840:;
		{
			(*this)._method_cast_ref(_168947_t,_168965_d,_168975_error_token);
		}
		goto _match_end_4394463312;
		_case_end_4394463840:;
		if (!((jule::real(_168947_t->_method_slc())))) { goto _case_end_4394463952; }
		_case_begin_4394463952:;
		{
			(*this)._method_cast_slc(_168947_t,_168965_d,_168975_error_token);
		}
		goto _match_end_4394463312;
		_case_end_4394463952:;
		if (!((jule::real(_168947_t->_method_strct())))) { goto _case_end_4394466976; }
		_case_begin_4394466976:;
		{
			(*this)._method_cast_struct(_168947_t,_168965_d,_168975_error_token);
		}
		goto _match_end_4394463312;
		_case_end_4394466976:;
		if (!((jule::real(_168947_t->_method_prim())))) { goto _case_end_4394467088; }
		_case_begin_4394467088:;
		{
			(*this)._method_cast_prim(_168947_t,_168965_d,_168975_error_token);
		}
		goto _match_end_4394463312;
		_case_end_4394467088:;
		_case_begin_4394463424:;
		{
			(*this)._method_push_err(_168975_error_token,jule::Str("@ data-type not supports casting", 32),jule::Slice<jule::Any>({jule::Any(_168947_t->_method_to_str())}));
			jule::drop(_168965_d);
		}
		goto _match_end_4394463312;
		_case_end_4394463424:;
		_match_end_4394463312:;
	}
	if ((!(jule::real(_168965_d)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	_168965_d->_field_mutable=_168965_d->_field_mutable || ((!(_104a21a10_is_mut(_168965_d->_field_kind))) && _104a21a10_is_mut(_168947_t));
	_168965_d->_field_lvalue=_104a21a10_is_lvalue(_168947_t);
	_168965_d->_field_decl=false;
	if (jule::real(_168947_t->_method_prim()) && _168965_d->_method_is_const()) {
		_168965_d->_field_model=jule::Any(_168965_d->_field_constant);
	}
	if ((!(jule::real(_168965_d->_field_kind->_method_enm()))) || (_168965_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_to_str() != _168947_t->_method_to_str())) {
		_168965_d->_field_cast_kind=_168947_t;
	} else {
		_168965_d->_field_kind=_168947_t;
	}
	return _168965_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_cast(jule::Ref<_1487f5920_CastExpr> _174133_c) {
	jule::Ref<_104a21a10_TypeSymbol> _174217_t = _1036da950_build_type(_174133_c->_field_kind);
	jule::Bool _174313_ok = this->self->_field_s->_method_check_type(_174217_t,this->self->_field_lookup);
	if ((!(_174313_ok))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_104a21a10_TypeKind> _174817_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_174817_prefix;
	});
	jule::Ref<_1191dc300_Data> _175217_d = this->self->_method_eval_expr_kind(_174133_c->_field_expr);
	if ((!(jule::real(_175217_d)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	_175217_d=this->self->_method_eval_cast_by_type_n_data(_174217_t->_field_kind,_175217_d,_174133_c->_field_kind->_field_token);
	return _175217_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_ns_selection(jule::Ref<_1487f5920_NsSelectionExpr> _176236_s) {
	jule::Str _176313_path = _104a21a10_build_link_path_by_tokens(_176236_s->_field_ns);
	jule::Ref<_119162660_ImportInfo> _176417_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)>([=](jule::Ref<_119162660_ImportInfo> _176453_p) mutable -> jule::Bool {
		if ((_176236_s->_field_ns.len() == 1LL) && (_176453_p->_field_alias == _176313_path)) {
			return true;
		}
		return _176453_p->_field_link_path == _176313_path;
	}));
	if ((!(jule::real(_176417_imp))) || (!(_176417_imp->_method_is_lookupable(jule::Str("self", 4))))) {
		(*this)._method_push_err(_176236_s->_field_ident,jule::Str("namespace not exist: @", 22),jule::Slice<jule::Any>({jule::Any(_176313_path)}));
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Trait<_10459ee60_Lookup> _177617_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_176417_imp;
	
	jule::Any _178017_def = (*this)._method_get_def(_176236_s->_field_ident._field_kind,false);
	(*this)._field_lookup=_177617_lookup;
	jule::Ref<_1191dc300_Data> _178317_d = (*this)._method_eval_def(_178017_def,_176236_s->_field_ident);
	return _178317_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_struct_lit_explicit(jule::Ref<_1037370d0_StructIns> _178848_s,jule::Slice<jule::Any> _178867_exprs,_108e15ff0_Token _178886_error_token) {
	jule::Bool _178913_ok = this->self->_field_s->_method_check_generic_quantity(static_cast<jule::I64>(_178848_s->_field_decl->_field_generics.len()),static_cast<jule::I64>(_178848_s->_field_generics.len()),_178886_error_token);
	if ((!(_178913_ok))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	this->self->_method_push_reference_to_struct(_178848_s);
	_1044463d0_StructLitChecker _179717_slc = _1044463d0_StructLitChecker(this->self,_178886_error_token,_178848_s,jule::Slice<jule::Ref<_11911f320_StructArgExprModel>>());
	_179717_slc._method_check(_178867_exprs);
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_178848_s)),jule::Ref<_104a21a10_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_StructLitExprModel>(new( std::nothrow ) _11911f320_StructLitExprModel(_178848_s,_179717_slc._field_args))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_struct_lit(jule::Ref<_1487f5920_StructLit> _181439_lit) {
	jule::Ref<_104a21a10_TypeSymbol> _181517_t = _1036da950_build_type(_181439_lit->_field_kind);
	jule::Bool _181613_ok = this->self->_field_s->_method_check_type(_181517_t,this->self->_field_lookup);
	if ((!(_181613_ok))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_1037370d0_StructIns> _182117_s = _181517_t->_field_kind->_method_strct();
	if ((!(jule::real(_182117_s)))) {
		this->self->_method_push_err(_181439_lit->_field_kind->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	return this->self->_method_eval_struct_lit_explicit(_182117_s,_181439_lit->_field_exprs,_181439_lit->_field_kind->_field_token);
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_type(jule::Ref<_1487f5920_TypeDecl> _183032_t) {
	jule::Ref<_104a21a10_TypeSymbol> _183117_tk = _1036da950_build_type(_183032_t);
	jule::Bool _183213_ok = (*this)._field_s->_method_check_type(_183117_tk,(*this)._field_lookup);
	if ((!(_183213_ok))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(_183117_tk->_field_kind,jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_183117_tk->_field_kind),true,jule::Ref<_104c409b0_Const>()));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_call_type_fn(jule::Ref<_1487f5920_FnCallExpr> _184436_fc,jule::Ref<_1191dc300_Data> _184457_d) {
	if (_184436_fc->_field_generics.len() > 0LL) {
		this->self->_method_push_err(_184436_fc->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_184457_d->_field_kind->_method_to_str())}));
	} else if (_184436_fc->_field_args.len() < 1LL) {
		this->self->_method_push_err(_184436_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
	} else if (_184436_fc->_field_args.len() > 1LL) {
		this->self->_method_push_err(_184436_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	if (_184436_fc->_field_args.len() > 0LL) {
		jule::Ref<_1191dc300_Data> _185421_arg = this->self->_method_eval_expr_kind(_184436_fc->_field_args[0LL]->_field_kind);
		if (jule::real(_185421_arg)) {
			_184457_d=this->self->_method_eval_cast_by_type_n_data(_184457_d->_field_kind,_185421_arg,_184436_fc->_field_args[0LL]->_field_token);
		}
	}
	_184457_d->_field_decl=false;
	return _184457_d;
}



inline std::tuple<jule::Bool,jule::Bool> _1191dc300_Eval::_method_check_fn_call_generics(jule::Ref<_1037649f0_FnIns> _186545_f,jule::Ref<_1487f5920_FnCallExpr> _186613_fc) {
	jule::Bool _186642_dynamic_annotation = jule::Bool();
	jule::Bool _186632_ok = jule::Bool();
	{
		if (!((((_186545_f->_field_decl->_field_generics.len() > 0LL) && (_186613_fc->_field_generics.len() == 0LL)) && (_186545_f->_field_params.len() > 0LL)))) { goto _case_end_4395564896; }
		_case_begin_4395564896:;
		{
			_186642_dynamic_annotation=true;
			_186545_f->_field_generics=jule::Slice<jule::Ref<_104a21a10_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_186545_f->_field_decl->_field_generics.len())));
			_186632_ok = true;
			_186642_dynamic_annotation = true;
			return std::make_tuple(_186632_ok,_186642_dynamic_annotation);
		}
		goto _match_end_4395559248;
		_case_end_4395564896:;
		if (!(((!((*this)._field_s->_method_check_generic_quantity(static_cast<jule::I64>(_186545_f->_field_decl->_field_generics.len()),static_cast<jule::I64>(_186613_fc->_field_generics.len()),_186613_fc->_field_token)))))) { goto _case_end_4395564464; }
		_case_begin_4395564464:;
		{
			_186632_ok = false;
			_186642_dynamic_annotation = false;
			return std::make_tuple(_186632_ok,_186642_dynamic_annotation);
		}
		goto _match_end_4395559248;
		_case_end_4395564464:;
		_case_begin_4395559408:;
		{
			_186545_f->_field_generics=jule::Slice<jule::Ref<_104a21a10_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_186545_f->_field_decl->_field_generics.len())));
			{
				auto __julec_range_expr = _186613_fc->_field_generics;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Int _1191dc300_i = 0;
					jule::Ref<_1487f5920_TypeDecl> _1191dc300_g = *__julec_range_begin;
					_iter_begin_4395560848:;
					{
						jule::Ref<_104a21a10_TypeSymbol> _188125_k = _1036da950_build_type(_1191dc300_g);
						jule::Bool _188221_ok = (*this)._field_s->_method_check_type(_188125_k,(*this)._field_lookup);
						if ((!(_188221_ok))) {
							_186632_ok = false;
							_186642_dynamic_annotation = false;
							return std::make_tuple(_186632_ok,_186642_dynamic_annotation);
						}
						_186545_f->_field_generics[static_cast<jule::Int>(_1191dc300_i)]=_188125_k->_field_kind;
					}
					_iter_next_4395560848:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { ++_1191dc300_i; _1191dc300_g = *__julec_range_begin; goto _iter_begin_4395560848; }
					_iter_end_4395560848:;
				}
			}
			_186632_ok = true;
			_186642_dynamic_annotation = false;
			return std::make_tuple(_186632_ok,_186642_dynamic_annotation);
		}
		goto _match_end_4395559248;
		_case_end_4395559408:;
		_match_end_4395559248:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_call_builtin_fn(jule::Ref<_1487f5920_FnCallExpr> _189339_fc,jule::Ref<_1191dc300_Data> _189360_d) {
	jule::Ref<_1037649f0_FnIns> _189417_f = _189360_d->_field_kind->_method_fnc();
	_189360_d=_189417_f->_field_caller(this->self,_189339_fc,_189360_d);
	if ((!(jule::real(_189360_d)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	_189360_d->_field_mutable=true;
	return _189360_d;
}



inline void _1191dc300_Eval::_method_check_fn_of_concurrent_call(jule::Ref<_1037649f0_FnIns>& _190547_f,_108e15ff0_Token _190558_error_token) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	{
		auto __julec_range_expr = _190547_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_ParamIns> _1191dc300_p = *__julec_range_begin;
			_iter_begin_4395593632:;
			{
				if (_1191dc300_p->_field_decl->_field_reference) {
					(*this)._method_push_err(_190558_error_token,jule::Str("concurrent calls does not support functions which is has reference parameter(s)", 79),jule::Slice<jule::Any>({}));
					return;
				}
			}
			_iter_next_4395593632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dc300_p = *__julec_range_begin; goto _iter_begin_4395593632; }
			_iter_end_4395593632:;
		}
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_call_fn(jule::Ref<_1487f5920_FnCallExpr> _191831_fc,jule::Ref<_1191dc300_Data> _191852_d) {
	jule::Ref<_1037649f0_FnIns> _191917_f = _191852_d->_field_kind->_method_fnc();
	if (_191917_f->_method_is_builtin()) {
		return this->self->_method_call_builtin_fn(_191831_fc,_191852_d);
	}
	if (_191831_fc->_field_concurrent) {
		this->self->_method_check_fn_of_concurrent_call(_191917_f,_191831_fc->_field_token);
	}
	if ((((!(_191852_d->_field_mutable)) && _191917_f->_field_decl->_method_is_method()) && (!(_191917_f->_field_decl->_field_statically))) && _191917_f->_field_decl->_field_params[0LL]->_field_mutable) {
		this->self->_method_push_err(_191831_fc->_field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>({}));
	} else if ((!(this->self->_method_is_unsafe())) && _191917_f->_field_decl->_field_unsafety) {
		this->self->_method_push_err(_191831_fc->_field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
	}
	jule::Bool _193418_ok;
	jule::Bool _193422_dynamic_annotation;
	std::tie(_193418_ok,_193422_dynamic_annotation) = this->self->_method_check_fn_call_generics(_191917_f,_191831_fc);
	if ((!(_193418_ok))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_119177e90_Sema> _193917_old = this->self->_field_s;
	if (jule::real(_191917_f->_field_decl->_field_owner)) {
		this->self->_field_s=_191917_f->_field_decl->_field_owner->_field_sema;
	}
	__JULE_DEFER({
		if ((_193917_old).alloc != (this->self->_field_s).alloc) {
			_193917_old->_field_errors=jule::append(_193917_old->_field_errors,this->self->_field_s->_field_errors);
		}
		this->self->_field_s=_193917_old;
	});
	if ((!(_193422_dynamic_annotation))) {
		if ((!(_191917_f->_field_reloaded))) {
			jule::Bool _195321_ok = this->self->_field_s->_method_reload_fn_ins_types(_191917_f);
			if ((!(_195321_ok))) {
				return jule::new_ref<_1191dc300_Data>();
			}
			_191917_f->_field_reloaded=true;
		}
	} else {
		this->self->_field_s->_method_build_fn_non_generic_type_kinds(_191917_f);
	}
	_1044463d0_FnCallArgChecker _196317_fcac = _1044463d0_FnCallArgChecker(this->self,_191831_fc->_field_args,_191831_fc->_field_token,_191917_f,_193422_dynamic_annotation,jule::Slice<jule::Any>());
	if (jule::real(_191917_f->_field_decl->_field_owner)) {
		std::tie(_193917_old,this->self->_field_s) = std::make_tuple(this->self->_field_s,_193917_old);
		_193418_ok=_196317_fcac._method_check();
		std::tie(_193917_old,this->self->_field_s) = std::make_tuple(this->self->_field_s,_193917_old);
	} else {
		_193418_ok=_196317_fcac._method_check();
	}
	if ((!(_193418_ok)) && _193422_dynamic_annotation) {
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Bool _198214_is_unique_ins;
	jule::Int _198229_pos;
	std::tie(_198214_is_unique_ins,_198229_pos) = _191917_f->_field_decl->_method_append_instance(_191917_f);
	if ((!(_198214_is_unique_ins))) {
		_191917_f=_191917_f->_field_decl->_field_instances[static_cast<jule::Int>(_198229_pos)];
	}
	jule::Any _198717_call_model = _191852_d->_field_model;
	if (_191917_f->_field_decl->_method_is_void()) {
		_191852_d=_1191dc300_build_void_data();
	} else {
		if (_193422_dynamic_annotation) {
			_193418_ok=this->self->_field_s->_method_reload_fn_ins_types(_191917_f);
			if ((!(_193418_ok))) {
				return jule::new_ref<_1191dc300_Data>();
			}
			_191917_f->_field_reloaded=true;
		}
		_191852_d->_field_kind=_191917_f->_field_result;
		_191852_d->_field_lvalue=_104a21a10_is_lvalue(_191917_f->_field_result);
	}
	_191852_d->_field_mutable=true;
	_191852_d->_field_model=jule::Any(jule::new_struct<_11911f320_FnCallExprModel>(new( std::nothrow ) _11911f320_FnCallExprModel(_191917_f,_191831_fc->_field_concurrent,_198717_call_model,_196317_fcac._field_arg_models)));
	if ((_191917_f->_field_generics.len() > 0LL) && _198214_is_unique_ins) {
		this->self->_field_s->_method_check_fn_ins(_191917_f);
	}
	return _191852_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_fn_call(jule::Ref<_1487f5920_FnCallExpr> _202036_fc) {
	jule::Ref<_104a21a10_TypeKind> _202117_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_202117_prefix;
	});
	jule::Ref<_1191dc300_Data> _202517_d = this->self->_method_eval_expr_kind(_202036_fc->_field_expr->_field_kind);
	if ((!(jule::real(_202517_d)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_202517_d->_field_decl) {
		return this->self->_method_call_type_fn(_202036_fc,_202517_d);
	}
	if ((!(jule::real(_202517_d->_field_kind->_method_fnc())))) {
		this->self->_method_push_err(_202036_fc->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	return this->self->_method_call_fn(_202036_fc,_202517_d);
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_enum_static(jule::Ref<_1036dad50_Enum> _204239_enm,_108e15ff0_Token _204251_ident) {
	jule::Ref<_1191dc300_Data> _204317_d = jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_204239_enm)),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,jule::Ref<_104c409b0_Const>()));
	jule::Ref<_1036dad50_EnumItem> _205017_item = _204239_enm->_method_find_item(_204251_ident._field_kind);
	if ((!(jule::real(_205017_item)))) {
		(*this)._method_push_err(_204251_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_204251_ident._field_kind)}));
	} else {
		_204317_d->_field_constant=jule::new_ref<_104c409b0_Const>(_205017_item->_field_value->_field_data->_field_constant.get());
		_204317_d->_field_model=jule::Any(_204317_d->_field_constant);
	}
	return _204317_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_struct_static(jule::Ref<_1037370d0_StructIns> _206141_s,_108e15ff0_Token _206156_ident) {
	
	jule::Ref<_1037649f0_Fn> _206317_method = _206141_s->_method_find_method(_206156_ident._field_kind,true);
	if ((!(jule::real(_206317_method)))) {
		(*this)._method_push_err(_206156_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_206156_ident._field_kind)}));
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_1191dc300_Data> _206917_d = jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::Ref<_104a21a10_TypeKind>(),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,jule::Ref<_104c409b0_Const>()));
	jule::Ref<_1037649f0_FnIns> _207617_ins = _206317_method->_method_instance();
	_207617_ins->_field_owner=_206141_s;
	(*this)._method_push_reference_to_fn(_207617_ins);
	_206917_d->_field_model=jule::Any(jule::new_struct<_11911f320_StructStaticIdentExprModel>(new( std::nothrow ) _11911f320_StructStaticIdentExprModel(_206141_s,_206917_d->_field_model,_207617_ins)));
	_206917_d->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_207617_ins));
	return _206917_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_trait_sub_ident(jule::Ref<_1191dc300_Data> _208939_d,jule::Ref<_1036e5da0_Trait> _208953_trt,_108e15ff0_Token _208966_ident) {
	jule::Ref<_1037649f0_Fn> _209017_f = _208953_trt->_method_find_method(_208966_ident._field_kind);
	if ((!(jule::real(_209017_f)))) {
		(*this)._method_push_err(_208966_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_208966_ident._field_kind)}));
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Any _209617_model = jule::Any(nullptr);
	if ((_208953_trt).alloc == (_104b4ffd0_BUILTIN_TRAIT_ERROR).alloc) {
		_209617_model=jule::Any(jule::new_struct<_11911f320_BuiltinErrorTraitSubIdentExprModel>(new( std::nothrow ) _11911f320_BuiltinErrorTraitSubIdentExprModel(_208939_d->_field_model,_208966_ident._field_kind)));
	} else {
		_209617_model=jule::Any(jule::new_struct<_11911f320_TraitSubIdentExprModel>(new( std::nothrow ) _11911f320_TraitSubIdentExprModel(_208939_d->_field_model,_208966_ident._field_kind)));
	}
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_209017_f->_method_instance())),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),_209617_model,false,jule::Ref<_104c409b0_Const>()));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_struct_sub_ident(jule::Ref<_1191dc300_Data> _211844_d,jule::Ref<_1037370d0_StructIns> _211858_s,jule::Ref<_1487f5920_SubIdentExpr> _211873_si,jule::Bool _211892_ref) {
	jule::Ref<_1037370d0_FieldIns> _211917_f = _211858_s->_method_find_field(_211873_si->_field_ident._field_kind);
	if (jule::real(_211917_f)) {
		if ((!((*this)._field_s->_method_is_accessible_define(_211917_f->_field_decl->_field_public,_211917_f->_field_decl->_field_token)))) {
			(*this)._method_push_err(_211873_si->_field_ident,jule::Str("identifier is not accessible: @", 31),jule::Slice<jule::Any>({jule::Any(_211917_f->_field_decl->_field_ident)}));
			(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>({}));
		}
		jule::Ref<_11911f320_StructSubIdentExprModel> _212621_model = jule::new_struct<_11911f320_StructSubIdentExprModel>(new( std::nothrow ) _11911f320_StructSubIdentExprModel(_211844_d->_field_model,_211844_d->_field_kind,jule::Ref<_1037649f0_FnIns>(),_211917_f));
		_211844_d->_field_model=jule::Any(_212621_model);
		_211844_d->_field_kind=_211917_f->_field_kind->_method_clone();
		if (_211917_f->_field_decl->_field_mutable && (!(_211844_d->_field_mutable))) {
			{
				auto _match_expr{ (*this)._field_lookup };
				if (!(_match_expr.type_is<jule::Ref<_104180810_ScopeChecker>>())) { goto _case_end_4396787616; }
				_case_begin_4396787616:;
				{
					jule::Ref<_104180810_ScopeChecker> _213825_scope = (*this)._field_lookup.operator jule::Ref<_104180810_ScopeChecker>();
					_211844_d->_field_mutable=jule::real(_213825_scope->_field_owner) && ((_213825_scope->_field_owner->_field_owner).alloc == (_211858_s).alloc);
					if (_211844_d->_field_mutable) {
						jule::Ref<_104598e40_Var> _214133_field = _212621_model->_field_expr.operator jule::Ref<_104598e40_Var>();
						jule::Ref<_104598e40_Var> _214233_v = jule::new_struct<_104598e40_Var>(new( std::nothrow ) _104598e40_Var(_214133_field->_field_scope,_214133_field->_field_token,_214133_field->_field_ident,_214133_field->_field_cpp_linked,_214133_field->_field_constant,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),_214133_field->_field_kind,_214133_field->_field_value,jule::Ref<_1036da950_ReferenceStack>(),jule::Slice<jule::Ref<_1487f5920_Directive>>(),jule::Slice<jule::Ref<_104598e40_Var>>()));
						_214233_v->_field_mutable=true;
						_212621_model->_field_expr=jule::Any(_214233_v);
					}
				}
				goto _match_end_4396785600;
				_case_end_4396787616:;
				_match_end_4396785600:;
			}
		}
		return _211844_d;
	}
	
	jule::Ref<_1037649f0_Fn> _216117_m = _211858_s->_method_find_method(_211873_si->_field_ident._field_kind,false);
	if ((!(jule::real(_216117_m)))) {
		(*this)._method_push_err(_211873_si->_field_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_211873_si->_field_ident._field_kind)}));
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_216117_m->_field_params[0LL]->_method_is_ref() && (!(_211892_ref))) {
		(*this)._method_push_err(_211873_si->_field_ident,jule::Str("reference method cannot use with non-reference instance", 55),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1037649f0_FnIns> _217217_ins = _216117_m->_method_instance();
	_217217_ins->_field_owner=_211858_s;
	(*this)._method_push_reference_to_fn(_217217_ins);
	_211844_d->_field_model=jule::Any(jule::new_struct<_11911f320_StructSubIdentExprModel>(new( std::nothrow ) _11911f320_StructSubIdentExprModel(_211844_d->_field_model,_211844_d->_field_kind,_217217_ins,jule::Ref<_1037370d0_FieldIns>())));
	_211844_d->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_217217_ins));
	return _211844_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_slice_sub_ident(jule::Ref<_1191dc300_Data> _218443_d,_108e15ff0_Token _218453_ident) {
	{
		auto _match_expr{ _218453_ident._field_kind };
		if (!((jule::Str("len", 3)) == _match_expr)) { goto _case_end_4396818992; }
		_case_begin_4396818992:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_218443_d->_field_kind,_218443_d->_field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396814944;
		_case_end_4396818992:;
		if (!((jule::Str("cap", 3)) == _match_expr)) { goto _case_end_4396819552; }
		_case_begin_4396819552:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_218443_d->_field_kind,_218443_d->_field_model,jule::Str("cap()", 5)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396814944;
		_case_end_4396819552:;
		_case_begin_4396815536:;
		{
			(*this)._method_push_err(_218453_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_218453_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4396814944;
		_case_end_4396815536:;
		_match_end_4396814944:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_array_sub_ident(jule::Ref<_1191dc300_Data> _221443_d,_108e15ff0_Token _221453_ident) {
	{
		auto _match_expr{ _221453_ident._field_kind };
		if (!((jule::Str("len", 3)) == _match_expr)) { goto _case_end_4396831824; }
		_case_begin_4396831824:;
		{
			jule::Ref<_104c409b0_Const> _221721_c = _104c409b0_Const::_static_method_new_i64(static_cast<jule::I64>(_221443_d->_field_kind->_method_arr()->_field_n));
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_221721_c),jule::Bool(),_221721_c));
		}
		goto _match_end_4396827776;
		_case_end_4396831824:;
		_case_begin_4396828368:;
		{
			(*this)._method_push_err(_221453_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_221453_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4396827776;
		_case_end_4396828368:;
		_match_end_4396827776:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_map_sub_ident(jule::Ref<_1191dc300_Data> _223141_d,_108e15ff0_Token _223151_ident) {
	{
		auto _match_expr{ _223151_ident._field_kind };
		if (!((jule::Str("len", 3)) == _match_expr)) { goto _case_end_4396843424; }
		_case_begin_4396843424:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_223141_d->_field_kind,_223141_d->_field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396838816;
		_case_end_4396843424:;
		if (!((jule::Str("clear", 5)) == _match_expr)) { goto _case_end_4396843088; }
		_case_begin_4396843088:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>(),jule::Ref<_104a21a10_TypeKind>(),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common_mut,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),_223141_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_223141_d->_field_kind,_223141_d->_field_model,jule::Str("clear", 5)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396838816;
		_case_end_4396843088:;
		if (!((jule::Str("keys", 4)) == _match_expr)) { goto _case_end_4396843200; }
		_case_begin_4396843200:;
		{
			jule::Ref<_104a21a10_Map> _226021_m = _223141_d->_field_kind->_method_map();
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>(),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_104a21a10_Slc>(new( std::nothrow ) _104a21a10_Slc(_226021_m->_field_key)))),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common_mut,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),_223141_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_223141_d->_field_kind,_223141_d->_field_model,jule::Str("keys", 4)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396838816;
		_case_end_4396843200:;
		if (!((jule::Str("values", 6)) == _match_expr)) { goto _case_end_4396839712; }
		_case_begin_4396839712:;
		{
			jule::Ref<_104a21a10_Map> _228121_m = _223141_d->_field_kind->_method_map();
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>(),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_104a21a10_Slc>(new( std::nothrow ) _104a21a10_Slc(_228121_m->_field_val)))),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common_mut,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),_223141_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_223141_d->_field_kind,_223141_d->_field_model,jule::Str("values", 6)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396838816;
		_case_end_4396839712:;
		if (!((jule::Str("has", 3)) == _match_expr)) { goto _case_end_4396839824; }
		_case_begin_4396839824:;
		{
			jule::Ref<_104a21a10_Map> _230221_m = _223141_d->_field_kind->_method_map();
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("key", 3))),_230221_m->_field_key))}),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),_223141_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_223141_d->_field_kind,_223141_d->_field_model,jule::Str("has", 3)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396838816;
		_case_end_4396839824:;
		if (!((jule::Str("del", 3)) == _match_expr)) { goto _case_end_4396839936; }
		_case_begin_4396839936:;
		{
			jule::Ref<_104a21a10_Map> _232721_m = _223141_d->_field_kind->_method_map();
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("key", 3))),_232721_m->_field_key))}),jule::Ref<_104a21a10_TypeKind>(),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common_mut,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),_223141_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_223141_d->_field_kind,_223141_d->_field_model,jule::Str("del", 3)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396838816;
		_case_end_4396839936:;
		_case_begin_4396839408:;
		{
			(*this)._method_push_err(_223151_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_223151_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4396838816;
		_case_end_4396839408:;
		_match_end_4396838816:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_str_sub_ident(jule::Ref<_1191dc300_Data> _235641_d,_108e15ff0_Token _235651_ident) {
	{
		auto _match_expr{ _235651_ident._field_kind };
		if (!((jule::Str("len", 3)) == _match_expr)) { goto _case_end_4396880368; }
		_case_begin_4396880368:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_235641_d->_field_kind,_235641_d->_field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396875920;
		_case_end_4396880368:;
		if (!((jule::Str("has_prefix", 10)) == _match_expr)) { goto _case_end_4396879968; }
		_case_begin_4396879968:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("sub", 3))),_235641_d->_field_kind))}),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_235641_d->_field_kind,_235641_d->_field_model,jule::Str("has_prefix", 10)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396875920;
		_case_end_4396879968:;
		if (!((jule::Str("has_suffix", 10)) == _match_expr)) { goto _case_end_4396880528; }
		_case_begin_4396880528:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("sub", 3))),_235641_d->_field_kind))}),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_235641_d->_field_kind,_235641_d->_field_model,jule::Str("has_suffix", 10)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396875920;
		_case_end_4396880528:;
		if (!((jule::Str("find", 4)) == _match_expr)) { goto _case_end_4396876816; }
		_case_begin_4396876816:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("sub", 3))),_235641_d->_field_kind))}),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("int", 3)))),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_235641_d->_field_kind,_235641_d->_field_model,jule::Str("find", 4)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396875920;
		_case_end_4396876816:;
		if (!((jule::Str("rfind", 5)) == _match_expr)) { goto _case_end_4396876928; }
		_case_begin_4396876928:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("sub", 3))),_235641_d->_field_kind))}),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("int", 3)))),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_235641_d->_field_kind,_235641_d->_field_model,jule::Str("rfind", 5)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396875920;
		_case_end_4396876928:;
		if (!((jule::Str("trim", 4)) == _match_expr)) { goto _case_end_4396877040; }
		_case_begin_4396877040:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("bytes", 5))),_235641_d->_field_kind))}),_235641_d->_field_kind,jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_235641_d->_field_kind,_235641_d->_field_model,jule::Str("trim", 4)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396875920;
		_case_end_4396877040:;
		if (!((jule::Str("ltrim", 5)) == _match_expr)) { goto _case_end_4396879360; }
		_case_begin_4396879360:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("bytes", 5))),_235641_d->_field_kind))}),_235641_d->_field_kind,jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_235641_d->_field_kind,_235641_d->_field_model,jule::Str("ltrim", 5)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396875920;
		_case_end_4396879360:;
		if (!((jule::Str("rtrim", 5)) == _match_expr)) { goto _case_end_4396879472; }
		_case_begin_4396879472:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("bytes", 5))),_235641_d->_field_kind))}),_235641_d->_field_kind,jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_235641_d->_field_kind,_235641_d->_field_model,jule::Str("rtrim", 5)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396875920;
		_case_end_4396879472:;
		if (!((jule::Str("split", 5)) == _match_expr)) { goto _case_end_4396879584; }
		_case_begin_4396879584:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("sub", 3))),_235641_d->_field_kind)),jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("n", 1))),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("int", 3))))))}),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_104a21a10_Slc>(new( std::nothrow ) _104a21a10_Slc(_235641_d->_field_kind)))),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_235641_d->_field_kind,_235641_d->_field_model,jule::Str("split", 5)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396875920;
		_case_end_4396879584:;
		if (!((jule::Str("replace", 7)) == _match_expr)) { goto _case_end_4396879696; }
		_case_begin_4396879696:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("sub", 3))),_235641_d->_field_kind)),jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("new", 3))),_235641_d->_field_kind)),jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str("n", 1))),jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("int", 3))))))}),_235641_d->_field_kind,jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_CommonSubIdentExprModel>(new( std::nothrow ) _11911f320_CommonSubIdentExprModel(_235641_d->_field_kind,_235641_d->_field_model,jule::Str("replace", 7)))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4396875920;
		_case_end_4396879696:;
		_case_begin_4396876512:;
		{
			(*this)._method_push_err(_235651_ident,jule::Str("object is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_235651_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4396875920;
		_case_end_4396876512:;
		_match_end_4396875920:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_int_type_static(_108e15ff0_Token _260439_ident) {
	
	{
		auto _match_expr{ _260439_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4396935952; }
		_case_begin_4396935952:;
		{
			jule::Ref<_104c409b0_Const> _260921_c = _104c409b0_Const::_static_method_new_i64(static_cast<jule::I64>(_104c42960_max(jule::Str("int", 3))));
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("int", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_260921_c),jule::Bool(),_260921_c));
		}
		goto _match_end_4396930960;
		_case_end_4396935952:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4396936528; }
		_case_begin_4396936528:;
		{
			jule::Ref<_104c409b0_Const> _261721_c = _104c409b0_Const::_static_method_new_i64(static_cast<jule::I64>(_104c42960_min(jule::Str("int", 3))));
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("int", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_261721_c),jule::Bool(),_261721_c));
		}
		goto _match_end_4396930960;
		_case_end_4396936528:;
		_case_begin_4396932208:;
		{
			(*this)._method_push_err(_260439_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("int", 3)),jule::Any(_260439_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4396930960;
		_case_end_4396932208:;
		_match_end_4396930960:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_uint_type_static(_108e15ff0_Token _263040_ident) {
	
	{
		auto _match_expr{ _263040_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4396949840; }
		_case_begin_4396949840:;
		{
			jule::Ref<_104c409b0_Const> _263521_c = _104c409b0_Const::_static_method_new_u64(static_cast<jule::U64>(_104c42960_max(jule::Str("uint", 4))));
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("uint", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_263521_c),jule::Bool(),_263521_c));
		}
		goto _match_end_4396944848;
		_case_end_4396949840:;
		_case_begin_4396946096:;
		{
			(*this)._method_push_err(_263040_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("uint", 4)),jule::Any(_263040_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4396944848;
		_case_end_4396946096:;
		_match_end_4396944848:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_i8_type_static(_108e15ff0_Token _264838_ident) {
	
	
	
	{
		auto _match_expr{ _264838_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4396962768; }
		_case_begin_4396962768:;
		{
			jule::Ref<_104c409b0_Const> _265521_c = _104c409b0_Const::_static_method_new_i64(127LL);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i8", 2)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_265521_c),jule::Bool(),_265521_c));
		}
		goto _match_end_4396957216;
		_case_end_4396962768:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4396962432; }
		_case_begin_4396962432:;
		{
			jule::Ref<_104c409b0_Const> _266321_c = _104c409b0_Const::_static_method_new_i64(-128LL);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i8", 2)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_266321_c),jule::Bool(),_266321_c));
		}
		goto _match_end_4396957216;
		_case_end_4396962432:;
		_case_begin_4396958528:;
		{
			(*this)._method_push_err(_264838_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("i8", 2)),jule::Any(_264838_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4396957216;
		_case_end_4396958528:;
		_match_end_4396957216:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_i16_type_static(_108e15ff0_Token _267639_ident) {
	
	
	
	{
		auto _match_expr{ _267639_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4396978304; }
		_case_begin_4396978304:;
		{
			jule::Ref<_104c409b0_Const> _268321_c = _104c409b0_Const::_static_method_new_i64(32767LL);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i16", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_268321_c),jule::Bool(),_268321_c));
		}
		goto _match_end_4396971984;
		_case_end_4396978304:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4396977968; }
		_case_begin_4396977968:;
		{
			jule::Ref<_104c409b0_Const> _269121_c = _104c409b0_Const::_static_method_new_i64(-32768LL);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i16", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_269121_c),jule::Bool(),_269121_c));
		}
		goto _match_end_4396971984;
		_case_end_4396977968:;
		_case_begin_4396973296:;
		{
			(*this)._method_push_err(_267639_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("i16", 3)),jule::Any(_267639_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4396971984;
		_case_end_4396973296:;
		_match_end_4396971984:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_i32_type_static(_108e15ff0_Token _270439_ident) {
	
	
	
	{
		auto _match_expr{ _270439_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4396993072; }
		_case_begin_4396993072:;
		{
			jule::Ref<_104c409b0_Const> _271121_c = _104c409b0_Const::_static_method_new_i64(2147483647LL);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i32", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_271121_c),jule::Bool(),_271121_c));
		}
		goto _match_end_4396987520;
		_case_end_4396993072:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4396992736; }
		_case_begin_4396992736:;
		{
			jule::Ref<_104c409b0_Const> _271921_c = _104c409b0_Const::_static_method_new_i64(-2147483648LL);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i32", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_271921_c),jule::Bool(),_271921_c));
		}
		goto _match_end_4396987520;
		_case_end_4396992736:;
		_case_begin_4396988832:;
		{
			(*this)._method_push_err(_270439_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("i32", 3)),jule::Any(_270439_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4396987520;
		_case_end_4396988832:;
		_match_end_4396987520:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_i64_type_static(_108e15ff0_Token _273239_ident) {
	
	
	
	{
		auto _match_expr{ _273239_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4397008032; }
		_case_begin_4397008032:;
		{
			jule::Ref<_104c409b0_Const> _273921_c = _104c409b0_Const::_static_method_new_i64(jule::MIN_I64);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_273921_c),jule::Bool(),_273921_c));
		}
		goto _match_end_4397002432;
		_case_end_4397008032:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4397007696; }
		_case_begin_4397007696:;
		{
			jule::Ref<_104c409b0_Const> _274721_c = _104c409b0_Const::_static_method_new_i64(jule::MAX_I64);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_274721_c),jule::Bool(),_274721_c));
		}
		goto _match_end_4397002432;
		_case_end_4397007696:;
		_case_begin_4397003792:;
		{
			(*this)._method_push_err(_273239_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("i64", 3)),jule::Any(_273239_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4397002432;
		_case_end_4397003792:;
		_match_end_4397002432:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_u8_type_static(_108e15ff0_Token _276038_ident) {
	
	
	{
		auto _match_expr{ _276038_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4397021472; }
		_case_begin_4397021472:;
		{
			jule::Ref<_104c409b0_Const> _276621_c = _104c409b0_Const::_static_method_new_u64(255LLU);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("u8", 2)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_276621_c),jule::Bool(),_276621_c));
		}
		goto _match_end_4397017120;
		_case_end_4397021472:;
		_case_begin_4397017728:;
		{
			(*this)._method_push_err(_276038_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("u8", 2)),jule::Any(_276038_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4397017120;
		_case_end_4397017728:;
		_match_end_4397017120:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_u16_type_static(_108e15ff0_Token _277939_ident) {
	
	
	{
		auto _match_expr{ _277939_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4397032368; }
		_case_begin_4397032368:;
		{
			jule::Ref<_104c409b0_Const> _278521_c = _104c409b0_Const::_static_method_new_u64(65535LLU);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("u16", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_278521_c),jule::Bool(),_278521_c));
		}
		goto _match_end_4397028016;
		_case_end_4397032368:;
		_case_begin_4397028624:;
		{
			(*this)._method_push_err(_277939_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("u16", 3)),jule::Any(_277939_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4397028016;
		_case_end_4397028624:;
		_match_end_4397028016:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_u32_type_static(_108e15ff0_Token _279839_ident) {
	
	
	{
		auto _match_expr{ _279839_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4397043104; }
		_case_begin_4397043104:;
		{
			jule::Ref<_104c409b0_Const> _280421_c = _104c409b0_Const::_static_method_new_u64(4294967295LLU);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("u32", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_280421_c),jule::Bool(),_280421_c));
		}
		goto _match_end_4397038752;
		_case_end_4397043104:;
		_case_begin_4397039360:;
		{
			(*this)._method_push_err(_279839_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("u32", 3)),jule::Any(_279839_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4397038752;
		_case_end_4397039360:;
		_match_end_4397038752:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_u64_type_static(_108e15ff0_Token _281739_ident) {
	
	
	{
		auto _match_expr{ _281739_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4397053872; }
		_case_begin_4397053872:;
		{
			jule::Ref<_104c409b0_Const> _282321_c = _104c409b0_Const::_static_method_new_u64(jule::MAX_U64);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("u64", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_282321_c),jule::Bool(),_282321_c));
		}
		goto _match_end_4397049504;
		_case_end_4397053872:;
		_case_begin_4397050112:;
		{
			(*this)._method_push_err(_281739_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("u64", 3)),jule::Any(_281739_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4397049504;
		_case_end_4397050112:;
		_match_end_4397049504:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_f32_type_tatic(_108e15ff0_Token _283638_ident) {
	
	
	
	{
		auto _match_expr{ _283638_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4397065552; }
		_case_begin_4397065552:;
		{
			jule::Ref<_104c409b0_Const> _284321_c = _104c409b0_Const::_static_method_new_f64(340282346638528860000000000000000000000.0);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("f32", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_284321_c),jule::Bool(),_284321_c));
		}
		goto _match_end_4397060256;
		_case_end_4397065552:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4397066128; }
		_case_begin_4397066128:;
		{
			jule::Ref<_104c409b0_Const> _285121_c = _104c409b0_Const::_static_method_new_f64(-340282346638528860000000000000000000000.0);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("f32", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_285121_c),jule::Bool(),_285121_c));
		}
		goto _match_end_4397060256;
		_case_end_4397066128:;
		_case_begin_4397061904:;
		{
			(*this)._method_push_err(_283638_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("f32", 3)),jule::Any(_283638_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4397060256;
		_case_end_4397061904:;
		_match_end_4397060256:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_f64_type_static(_108e15ff0_Token _286439_ident) {
	
	
	
	{
		auto _match_expr{ _286439_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4397080336; }
		_case_begin_4397080336:;
		{
			jule::Ref<_104c409b0_Const> _287121_c = _104c409b0_Const::_static_method_new_f64(jule::MAX_F64);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("f64", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_287121_c),jule::Bool(),_287121_c));
		}
		goto _match_end_4397075008;
		_case_end_4397080336:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4397080912; }
		_case_begin_4397080912:;
		{
			jule::Ref<_104c409b0_Const> _287921_c = _104c409b0_Const::_static_method_new_f64(jule::MIN_F64);
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("f64", 3)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_287921_c),jule::Bool(),_287921_c));
		}
		goto _match_end_4397075008;
		_case_end_4397080912:;
		_case_begin_4397076688:;
		{
			(*this)._method_push_err(_286439_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(jule::Str("f64", 3)),jule::Any(_286439_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4397075008;
		_case_end_4397076688:;
		_match_end_4397075008:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_prim_static(jule::Str _289235_kind,_108e15ff0_Token _289246_ident) {
	{
		auto _match_expr{ _289235_kind };
		if (!((jule::Str("int", 3)) == _match_expr)) { goto _case_end_4389459136; }
		_case_begin_4389459136:;
		{
			return (*this)._method_eval_int_type_static(_289246_ident);
		}
		goto _match_end_4389457936;
		_case_end_4389459136:;
		if (!((jule::Str("uint", 4)) == _match_expr)) { goto _case_end_4389458880; }
		_case_begin_4389458880:;
		{
			return (*this)._method_eval_uint_type_static(_289246_ident);
		}
		goto _match_end_4389457936;
		_case_end_4389458880:;
		if (!((jule::Str("i8", 2)) == _match_expr)) { goto _case_end_4389461360; }
		_case_begin_4389461360:;
		{
			return (*this)._method_eval_i8_type_static(_289246_ident);
		}
		goto _match_end_4389457936;
		_case_end_4389461360:;
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4389460688; }
		_case_begin_4389460688:;
		{
			return (*this)._method_eval_i16_type_static(_289246_ident);
		}
		goto _match_end_4389457936;
		_case_end_4389460688:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4389460800; }
		_case_begin_4389460800:;
		{
			return (*this)._method_eval_i32_type_static(_289246_ident);
		}
		goto _match_end_4389457936;
		_case_end_4389460800:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4389460912; }
		_case_begin_4389460912:;
		{
			return (*this)._method_eval_i64_type_static(_289246_ident);
		}
		goto _match_end_4389457936;
		_case_end_4389460912:;
		if (!((jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4389461024; }
		_case_begin_4389461024:;
		{
			return (*this)._method_eval_u8_type_static(_289246_ident);
		}
		goto _match_end_4389457936;
		_case_end_4389461024:;
		if (!((jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4389461136; }
		_case_begin_4389461136:;
		{
			return (*this)._method_eval_u16_type_static(_289246_ident);
		}
		goto _match_end_4389457936;
		_case_end_4389461136:;
		if (!((jule::Str("u32", 3)) == _match_expr)) { goto _case_end_4389461600; }
		_case_begin_4389461600:;
		{
			return (*this)._method_eval_u32_type_static(_289246_ident);
		}
		goto _match_end_4389457936;
		_case_end_4389461600:;
		if (!((jule::Str("u64", 3)) == _match_expr)) { goto _case_end_4389461712; }
		_case_begin_4389461712:;
		{
			return (*this)._method_eval_u64_type_static(_289246_ident);
		}
		goto _match_end_4389457936;
		_case_end_4389461712:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4389461824; }
		_case_begin_4389461824:;
		{
			return (*this)._method_eval_f32_type_tatic(_289246_ident);
		}
		goto _match_end_4389457936;
		_case_end_4389461824:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4389461936; }
		_case_begin_4389461936:;
		{
			return (*this)._method_eval_f64_type_static(_289246_ident);
		}
		goto _match_end_4389457936;
		_case_end_4389461936:;
		_case_begin_4389458288:;
		{
			(*this)._method_push_err(_289246_ident,jule::Str("type @ is not have sub field in this identifier: @", 50),jule::Slice<jule::Any>({jule::Any(_289235_kind),jule::Any(_289246_ident._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389457936;
		_case_end_4389458288:;
		_match_end_4389457936:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_type_static(jule::Ref<_1191dc300_Data> _291239_d,jule::Ref<_1487f5920_SubIdentExpr> _291253_si) {
	{
		if (!((jule::real(_291239_d->_field_kind->_method_prim())))) { goto _case_end_4389480288; }
		_case_begin_4389480288:;
		{
			return (*this)._method_eval_prim_static(_291239_d->_field_kind->_method_prim()->_method_to_str(),_291253_si->_field_ident);
		}
		goto _match_end_4389476128;
		_case_end_4389480288:;
		if (!((jule::real(_291239_d->_field_kind->_method_enm())))) { goto _case_end_4389480848; }
		_case_begin_4389480848:;
		{
			return (*this)._method_eval_enum_static(_291239_d->_field_kind->_method_enm(),_291253_si->_field_ident);
		}
		goto _match_end_4389476128;
		_case_end_4389480848:;
		if (!((jule::real(_291239_d->_field_kind->_method_strct())))) { goto _case_end_4389480512; }
		_case_begin_4389480512:;
		{
			return (*this)._method_eval_struct_static(_291239_d->_field_kind->_method_strct(),_291253_si->_field_ident);
		}
		goto _match_end_4389476128;
		_case_end_4389480512:;
		_case_begin_4389476288:;
		{
			(*this)._method_push_err(_291253_si->_field_ident,jule::Str("type @ is not supports sub fields", 33),jule::Slice<jule::Any>({jule::Any(_291239_d->_field_kind->_method_to_str())}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389476128;
		_case_end_4389476288:;
		_match_end_4389476128:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_obj_sub_ident(jule::Ref<_1191dc300_Data> _292941_d,jule::Ref<_1487f5920_SubIdentExpr> _292955_si) {
	jule::Ref<_104a21a10_TypeKind> _293017_kind = _292941_d->_field_kind;
	if (jule::real(_292941_d->_field_kind->_method_ptr())) {
		jule::Ref<_104a21a10_Ptr> _293217_ptr = _292941_d->_field_kind->_method_ptr();
		if ((!(_293217_ptr->_method_is_unsafe()))) {
			if ((!(_292955_si->_field_is_self)) && (!((*this)._method_is_unsafe()))) {
				(*this)._method_push_err(_292955_si->_field_ident,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>({}));
			}
			_293017_kind=_292941_d->_field_kind->_method_ptr()->_field_elem;
		}
	} else if (jule::real(_292941_d->_field_kind->_method_ref())) {
		_293017_kind=_292941_d->_field_kind->_method_ref()->_field_elem;
	}
	{
		if (!((jule::real(_292941_d->_field_kind->_method_trt())))) { goto _case_end_4389501952; }
		_case_begin_4389501952:;
		{
			return (*this)._method_eval_trait_sub_ident(_292941_d,_292941_d->_field_kind->_method_trt(),_292955_si->_field_ident);
		}
		goto _match_end_4389500528;
		_case_end_4389501952:;
		if (!((jule::real(_293017_kind->_method_strct())))) { goto _case_end_4389502064; }
		_case_begin_4389502064:;
		{
			jule::Ref<_1037370d0_StructIns> _294817_s = _293017_kind->_method_strct();
			if (_1191dc300_is_instanced_struct(_294817_s)) {
				jule::Bool _295025_used_reference_elem = jule::real(_292941_d->_field_kind->_method_ref());
				return (*this)._method_eval_struct_sub_ident(_292941_d,_293017_kind->_method_strct(),_292955_si,_295025_used_reference_elem);
			}
		}
		goto _match_end_4389500528;
		_case_end_4389502064:;
		if (!((jule::real(_293017_kind->_method_slc())))) { goto _case_end_4389502176; }
		_case_begin_4389502176:;
		{
			return (*this)._method_eval_slice_sub_ident(_292941_d,_292955_si->_field_ident);
		}
		goto _match_end_4389500528;
		_case_end_4389502176:;
		if (!((jule::real(_293017_kind->_method_arr())))) { goto _case_end_4389502288; }
		_case_begin_4389502288:;
		{
			return (*this)._method_eval_array_sub_ident(_292941_d,_292955_si->_field_ident);
		}
		goto _match_end_4389500528;
		_case_end_4389502288:;
		if (!((jule::real(_293017_kind->_method_map())))) { goto _case_end_4389502400; }
		_case_begin_4389502400:;
		{
			return (*this)._method_eval_map_sub_ident(_292941_d,_292955_si->_field_ident);
		}
		goto _match_end_4389500528;
		_case_end_4389502400:;
		if (!((jule::real(_293017_kind->_method_prim())))) { goto _case_end_4389502528; }
		_case_begin_4389502528:;
		{
			jule::Ref<_104a21a10_Prim> _296417_p = _293017_kind->_method_prim();
			{
				auto _match_expr{ _296417_p->_field_kind };
				if (!((jule::Str("str", 3)) == _match_expr)) { goto _case_end_4389518528; }
				_case_begin_4389518528:;
				{
					return (*this)._method_eval_str_sub_ident(_292941_d,_292955_si->_field_ident);
				}
				goto _match_end_4389517888;
				_case_end_4389518528:;
				_match_end_4389517888:;
			}
		}
		goto _match_end_4389500528;
		_case_end_4389502528:;
		_match_end_4389500528:;
	}
	(*this)._method_push_err(_292955_si->_field_ident,jule::Str("object @ is not supports sub fields", 35),jule::Slice<jule::Any>({jule::Any(_292941_d->_field_kind->_method_to_str())}));
	return jule::new_ref<_1191dc300_Data>();
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_sub_ident(jule::Ref<_1487f5920_SubIdentExpr> _297538_si) {
	jule::Ref<_104a21a10_TypeKind> _297617_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_297617_prefix;
	});
	jule::Ref<_1191dc300_Data> _298017_d = this->self->_method_eval_expr_kind(_297538_si->_field_expr);
	if ((!(jule::real(_298017_d)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_298017_d->_field_decl) {
		return this->self->_method_eval_type_static(_298017_d,_297538_si);
	}
	return this->self->_method_eval_obj_sub_ident(_298017_d,_297538_si);
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_tuple(jule::Ref<_1487f5920_TupleExpr> _299234_tup) {
	jule::Ref<_104a21a10_Tuple> _299317_tup_t = jule::new_struct<_104a21a10_Tuple>(new( std::nothrow ) _104a21a10_Tuple());
	_299317_tup_t->_field_types=jule::Slice<jule::Ref<_104a21a10_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_299234_tup->_field_expr.len())));
	jule::Ref<_11911f320_TupleExprModel> _299617_model = jule::new_struct<_11911f320_TupleExprModel>(new( std::nothrow ) _11911f320_TupleExprModel(jule::Slice<jule::Ref<_1191dc300_Data>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_299234_tup->_field_expr.len())))));
	jule::Bool _300017_ok = true;
	{
		auto __julec_range_expr = _299234_tup->_field_expr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1191dc300_i = 0;
			jule::Ref<_1487f5920_Expr> _1191dc300_expr = *__julec_range_begin;
			_iter_begin_4389533728:;
			{
				jule::Ref<_1191dc300_Data> _300221_d = this->self->_method_eval_expr_kind(_1191dc300_expr->_field_kind);
				if ((!(jule::real(_300221_d)))) {
					_300017_ok=false;
					goto _iter_next_4389533728;
				}
				_299317_tup_t->_field_types[static_cast<jule::Int>(_1191dc300_i)]=_300221_d->_field_kind;
				_299617_model->_field_datas[static_cast<jule::Int>(_1191dc300_i)]=_300221_d;
			}
			_iter_next_4389533728:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1191dc300_i; _1191dc300_expr = *__julec_range_begin; goto _iter_begin_4389533728; }
			_iter_end_4389533728:;
		}
	}
	if ((!(_300017_ok))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_299317_tup_t)),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_299617_model),jule::Bool(),jule::Ref<_104c409b0_Const>()));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_map(jule::Ref<_104a21a10_Map> _302132_m,jule::Ref<_1487f5920_BraceLit> _302145_lit) {
	jule::Ref<_11911f320_MapExprModel> _302217_model = jule::new_struct<_11911f320_MapExprModel>(new( std::nothrow ) _11911f320_MapExprModel(_302132_m->_field_key,_302132_m->_field_val,jule::Slice<jule::Ref<_11911f320_KeyValPairExprModel>>()));
	{
		auto __julec_range_expr = _302145_lit->_field_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1191dc300_expr = *__julec_range_begin;
			_iter_begin_4389557376:;
			{
				{
					auto _match_expr{ _1191dc300_expr };
					if (!(_match_expr.type_is<jule::Ref<_1487f5920_KeyValPair>>())) { goto _case_end_4389561520; }
					goto _match_end_4389558560;
					_case_end_4389561520:;
					_case_begin_4389559024:;
					{
						this->self->_method_push_err(_302145_lit->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
						return jule::new_ref<_1191dc300_Data>();
					}
					goto _match_end_4389558560;
					_case_end_4389559024:;
					_match_end_4389558560:;
				}
				jule::Ref<_1487f5920_KeyValPair> _303721_pair = _1191dc300_expr.operator jule::Ref<_1487f5920_KeyValPair>();
				jule::Ref<_1191dc300_Data> _303921_key = this->self->_method_eval_expr_kind(_303721_pair->_field_key);
				if ((!(jule::real(_303921_key)))) {
					return jule::new_ref<_1191dc300_Data>();
				}
				jule::Ref<_1191dc300_Data> _304421_val = this->self->_method_eval_expr_kind(_303721_pair->_field_val);
				if ((!(jule::real(_304421_val)))) {
					return jule::new_ref<_1191dc300_Data>();
				}
				this->self->_field_s->_method_check_assign_type(_302132_m->_field_key,_303921_key,_303721_pair->_field_colon,true);
				this->self->_field_s->_method_check_assign_type(_302132_m->_field_val,_304421_val,_303721_pair->_field_colon,true);
				_302217_model->_field_entries=jule::append(_302217_model->_field_entries,jule::Slice<jule::Ref<_11911f320_KeyValPairExprModel>>({jule::new_struct<_11911f320_KeyValPairExprModel>(new( std::nothrow ) _11911f320_KeyValPairExprModel(_303921_key->_field_model,_304421_val->_field_model))}));
			}
			_iter_next_4389557376:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dc300_expr = *__julec_range_begin; goto _iter_begin_4389557376; }
			_iter_end_4389557376:;
		}
	}
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_302132_m)),jule::Ref<_104a21a10_TypeKind>(),true,jule::Bool(),false,false,jule::Bool(),jule::Any(_302217_model),false,jule::Ref<_104c409b0_Const>()));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_brace_lit(jule::Ref<_1487f5920_BraceLit> _306838_lit) {
	{
		if (!(((!(jule::real(this->self->_field_prefix)))))) { goto _case_end_4389579520; }
		_case_begin_4389579520:;
		{
			this->self->_method_push_err(_306838_lit->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389576832;
		_case_end_4389579520:;
		if (!((jule::real(this->self->_field_prefix->_method_map())))) { goto _case_end_4389580352; }
		_case_begin_4389580352:;
		{
			return this->self->_method_eval_map(this->self->_field_prefix->_method_map(),_306838_lit);
		}
		goto _match_end_4389576832;
		_case_end_4389580352:;
		if (!((jule::real(this->self->_field_prefix->_method_strct())))) { goto _case_end_4389580464; }
		_case_begin_4389580464:;
		{
			return this->self->_method_eval_struct_lit_explicit(this->self->_field_prefix->_method_strct(),_306838_lit->_field_exprs,_306838_lit->_field_token);
		}
		goto _match_end_4389576832;
		_case_end_4389580464:;
		_case_begin_4389576976:;
		{
			this->self->_method_push_err(_306838_lit->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389576832;
		_case_end_4389576976:;
		_match_end_4389576832:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_anon_fn(jule::Ref<_1487f5920_FnDecl> _308635_decl) {
	_104a21a10_TypeChecker _308717_tc = _104a21a10_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ref<_104a21a10_Referencer>(),_108e15ff0_Token(),jule::Slice<jule::Ref<_1487f5920_GenericDecl>>(),jule::Slice<jule::Ref<_104a21a10_TypeAlias>>(),jule::Bool());
	jule::Ref<_1037649f0_FnIns> _309117_ins = _308717_tc._method_build_fn(_308635_decl);
	_309117_ins->_field_anon=true;
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_104180810_ScopeChecker>>())) { goto _case_end_4389596864; }
		_case_begin_4389596864:;
		{
			jule::Ref<_104180810_ScopeChecker> _309621_sc = (*this)._field_lookup.operator jule::Ref<_104180810_ScopeChecker>();
			jule::Ref<_104180810_ScopeChecker> _309721_scc = _309621_sc->_method_new_child_checker();
			_309721_scc->_field_labels=jule::new_ref<jule::Slice<jule::Ref<_104180810_ScopeLabel>>>(nullptr);
			_309721_scc->_field_gotos=jule::new_ref<jule::Slice<jule::Ref<_104180810_ScopeGoto>>>(nullptr);
			jule::drop(_309721_scc->_field_owner);
			_309721_scc->_field_child_index=0LL;
			_309721_scc->_field_it=0LL;
			_309721_scc->_field_cse=0LL;
			_309721_scc->_field_owner=_309117_ins;
			(*this)._field_s->_method_check_fn_ins_sc(_309117_ins,_309721_scc);
		}
		goto _match_end_4389594192;
		_case_end_4389596864:;
		_case_begin_4389595344:;
		{
			(*this)._field_s->_method_check_fn_ins(_309117_ins);
		}
		goto _match_end_4389594192;
		_case_end_4389595344:;
		_match_end_4389594192:;
	}
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_309117_ins)),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_11911f320_AnonFnExprModel>(new( std::nothrow ) _11911f320_AnonFnExprModel(_309117_ins,(*this)._method_is_global()))),jule::Bool(),jule::Ref<_104c409b0_Const>()));
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_binop(jule::Ref<_1487f5920_BinopExpr> _312034_op) {
	jule::Ref<_104a21a10_TypeKind> _312117_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_312117_prefix;
	});
	_1191dc300_BinopSolver _312517_bs = _1191dc300_BinopSolver(this->self,jule::Ref<_1191dc300_Data>(),jule::Ref<_1191dc300_Data>(),_108e15ff0_Token());
	return _312517_bs._method_solve(_312034_op);
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_expr_kind(jule::Any _313138_kind) {
	jule::Ref<_1191dc300_Data> _313217_d = jule::new_ref<_1191dc300_Data>();
	{
		auto _match_expr{ _313138_kind };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_LitExpr>>())) { goto _case_end_4389619760; }
		_case_begin_4389619760:;
		{
			_313217_d=this->self->_method_eval_lit(_313138_kind.operator jule::Ref<_1487f5920_LitExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389619760:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_IdentExpr>>())) { goto _case_end_4389619968; }
		_case_begin_4389619968:;
		{
			_313217_d=this->self->_method_eval_ident(_313138_kind.operator jule::Ref<_1487f5920_IdentExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389619968:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_UnaryExpr>>())) { goto _case_end_4389620080; }
		_case_begin_4389620080:;
		{
			_313217_d=this->self->_method_eval_unary(_313138_kind.operator jule::Ref<_1487f5920_UnaryExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389620080:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_VariadicExpr>>())) { goto _case_end_4389620304; }
		_case_begin_4389620304:;
		{
			_313217_d=this->self->_method_eval_variadic(_313138_kind.operator jule::Ref<_1487f5920_VariadicExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389620304:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_UnsafeExpr>>())) { goto _case_end_4389620416; }
		_case_begin_4389620416:;
		{
			_313217_d=this->self->_method_eval_unsafe(_313138_kind.operator jule::Ref<_1487f5920_UnsafeExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389620416:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_SliceExpr>>())) { goto _case_end_4389620880; }
		_case_begin_4389620880:;
		{
			_313217_d=this->self->_method_eval_slice_expr(_313138_kind.operator jule::Ref<_1487f5920_SliceExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389620880:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_IndexingExpr>>())) { goto _case_end_4389620992; }
		_case_begin_4389620992:;
		{
			_313217_d=this->self->_method_eval_indexing(_313138_kind.operator jule::Ref<_1487f5920_IndexingExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389620992:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_SlicingExpr>>())) { goto _case_end_4389621104; }
		_case_begin_4389621104:;
		{
			_313217_d=this->self->_method_eval_slicing(_313138_kind.operator jule::Ref<_1487f5920_SlicingExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389621104:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_CastExpr>>())) { goto _case_end_4389621216; }
		_case_begin_4389621216:;
		{
			_313217_d=this->self->_method_eval_cast(_313138_kind.operator jule::Ref<_1487f5920_CastExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389621216:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_NsSelectionExpr>>())) { goto _case_end_4389621328; }
		_case_begin_4389621328:;
		{
			_313217_d=this->self->_method_eval_ns_selection(_313138_kind.operator jule::Ref<_1487f5920_NsSelectionExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389621328:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_StructLit>>())) { goto _case_end_4389621440; }
		_case_begin_4389621440:;
		{
			_313217_d=this->self->_method_eval_struct_lit(_313138_kind.operator jule::Ref<_1487f5920_StructLit>());
		}
		goto _match_end_4389618096;
		_case_end_4389621440:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_TypeDecl>>())) { goto _case_end_4389621552; }
		_case_begin_4389621552:;
		{
			_313217_d=this->self->_method_eval_type(_313138_kind.operator jule::Ref<_1487f5920_TypeDecl>());
		}
		goto _match_end_4389618096;
		_case_end_4389621552:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_FnCallExpr>>())) { goto _case_end_4389621680; }
		_case_begin_4389621680:;
		{
			_313217_d=this->self->_method_eval_fn_call(_313138_kind.operator jule::Ref<_1487f5920_FnCallExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389621680:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_SubIdentExpr>>())) { goto _case_end_4389621808; }
		_case_begin_4389621808:;
		{
			_313217_d=this->self->_method_eval_sub_ident(_313138_kind.operator jule::Ref<_1487f5920_SubIdentExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389621808:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_TupleExpr>>())) { goto _case_end_4389621936; }
		_case_begin_4389621936:;
		{
			_313217_d=this->self->_method_eval_tuple(_313138_kind.operator jule::Ref<_1487f5920_TupleExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389621936:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_BraceLit>>())) { goto _case_end_4389622064; }
		_case_begin_4389622064:;
		{
			_313217_d=this->self->_method_eval_brace_lit(_313138_kind.operator jule::Ref<_1487f5920_BraceLit>());
		}
		goto _match_end_4389618096;
		_case_end_4389622064:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_FnDecl>>())) { goto _case_end_4389622192; }
		_case_begin_4389622192:;
		{
			_313217_d=this->self->_method_eval_anon_fn(_313138_kind.operator jule::Ref<_1487f5920_FnDecl>());
		}
		goto _match_end_4389618096;
		_case_end_4389622192:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_BinopExpr>>())) { goto _case_end_4389622320; }
		_case_begin_4389622320:;
		{
			_313217_d=this->self->_method_eval_binop(_313138_kind.operator jule::Ref<_1487f5920_BinopExpr>());
		}
		goto _match_end_4389618096;
		_case_end_4389622320:;
		_case_begin_4389619008:;
		{
			jule::drop(_313217_d);
		}
		goto _match_end_4389618096;
		_case_end_4389619008:;
		_match_end_4389618096:;
	}
	if ((!(jule::real(_313217_d)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if ((!(jule::real(_313217_d->_field_kind)))) {
		return _313217_d;
	}
	if ((((!(jule::real(_313217_d->_field_cast_kind))) && _313217_d->_method_is_const()) && (!(_313217_d->_field_is_rune))) && jule::real(_313217_d->_field_kind->_method_prim())) {
		{
			if (!((_313217_d->_field_constant->_method_is_i64()))) { goto _case_end_4389655424; }
			_case_begin_4389655424:;
			{
				if (_1044463d0_int_assignable(jule::Str("int", 3),_313217_d)) {
					_313217_d->_field_kind->_field_kind=_104a21a10_build_prim_type(jule::Str("int", 3));
				}
			}
			goto _match_end_4389655232;
			_case_end_4389655424:;
			if (!((_313217_d->_field_constant->_method_is_u64()))) { goto _case_end_4389655552; }
			_case_begin_4389655552:;
			{
				if (_1044463d0_int_assignable(jule::Str("uint", 4),_313217_d)) {
					_313217_d->_field_kind->_field_kind=_104a21a10_build_prim_type(jule::Str("uint", 4));
				}
			}
			goto _match_end_4389655232;
			_case_end_4389655552:;
			_match_end_4389655232:;
		}
	}
	if ((!(_313217_d->_field_decl))) {
		if ((((((jule::real(this->self->_field_prefix) && (!(jule::real(_313217_d->_field_cast_kind)))) && (!(_313217_d->_field_variadiced))) && (!(_313217_d->_field_lvalue))) && (!(_313217_d->_method_is_const()))) && jule::real(_313217_d->_field_kind->_method_prim())) && _104c56790_is_num(_313217_d->_field_kind->_method_prim()->_field_kind)) {
			_313217_d->_field_cast_kind=_313217_d->_field_kind;
		}
		_1191dc300_apply_cast_kind(_313217_d);
		if ((!(jule::real(_313217_d->_field_kind->_method_prim()))) || (!(_313217_d->_field_kind->_method_prim()->_method_is_any()))) {
			if ((jule::real(this->self->_field_prefix) && jule::real(this->self->_field_prefix->_method_prim())) && this->self->_field_prefix->_method_prim()->_method_is_any()) {
				_313217_d->_field_cast_kind=this->self->_field_prefix;
				_1191dc300_apply_cast_kind_model(_313217_d);
				jule::drop(_313217_d->_field_cast_kind);
			}
		}
	}
	return _313217_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval(jule::Ref<_1487f5920_Expr> _320528_expr) {
	jule::Ref<_1191dc300_Data> _320617_d = this->self->_method_eval_expr_kind(_320528_expr->_field_kind);
	if ((!(jule::real(_320617_d))) || (!(jule::real(_320617_d->_field_kind)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		if (!((jule::real(_320617_d->_field_kind->_method_fnc())))) { goto _case_end_4389680128; }
		_case_begin_4389680128:;
		{
			jule::Ref<_1037649f0_FnIns> _321321_f = _320617_d->_field_kind->_method_fnc();
			if (_321321_f->_method_is_builtin()) {
				goto _match_end_4389680032;
			}
			if (_321321_f->_field_generics.len() != _321321_f->_field_decl->_field_generics.len()) {
				this->self->_field_s->_method_push_err(_320528_expr->_field_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>({}));
			}
			if (_321321_f->_field_decl->_method_is_method()) {
				this->self->_field_s->_method_push_err(_320528_expr->_field_token,jule::Str("methods should be invoked", 25),jule::Slice<jule::Any>({}));
			}
		}
		goto _match_end_4389680032;
		_case_end_4389680128:;
		_match_end_4389680032:;
	}
	return _320617_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_Eval::_method_eval_expr(jule::Ref<_1487f5920_Expr> _323333_expr) {
	jule::Ref<_1191dc300_Data> _323417_d = this->self->_method_eval(_323333_expr);
	{
		if (!(((!(jule::real(_323417_d)))))) { goto _case_end_4389695168; }
		_case_begin_4389695168:;
		{
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389693600;
		_case_end_4389695168:;
		if (!((_323417_d->_field_decl))) { goto _case_end_4389695280; }
		_case_begin_4389695280:;
		{
			this->self->_method_push_err(_323333_expr->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389693600;
		_case_end_4389695280:;
		_case_begin_4389693840:;
		{
			return _323417_d;
		}
		goto _match_end_4389693600;
		_case_end_4389693840:;
		_match_end_4389693600:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1191dc300_Eval &_Src) {
	_Stream << "Eval{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "prefix:" << _Src._field_prefix << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "owner:" << _Src._field_owner;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _104a21a10_TypeKind::_method_to_str(void) {
	if ((*this)._method_is_nil()) {
		return jule::Str("nil", 3);
	}
	jule::Str _6317_kind = jule::Str("", 0);
	if ((*this)._field_variadic) {
		_6317_kind+=jule::Str("...", 3);
	}
	if ((*this)._method_is_cpp_linked()) {
		_6317_kind+=jule::Str("cpp.", 4) + (*this)._field_cpp_ident;
	} else {
		_6317_kind+=(*this)._field_kind.get()._method_to_str();
	}
	return _6317_kind;
}



inline jule::Bool _104a21a10_TypeKind::_method_equals(jule::Ref<_104a21a10_TypeKind> _7821_other) {
	if ((*this)._method_is_nil()) {
		return _7821_other->_method_is_nil();
	}
	if ((*this)._method_is_cpp_linked()) {
		if ((!(_7821_other->_method_is_cpp_linked()))) {
			return false;
		}
		return (*this)._field_cpp_ident == _7821_other->_field_cpp_ident;
	}
	return (*this)._field_kind.get()._method_equals(_7821_other);
}



inline jule::Ref<_104a21a10_TypeKind> _104a21a10_TypeKind::_method_clone(void) {
	if ((!(jule::real(this->self)))) {
		return jule::new_ref<_104a21a10_TypeKind>();
	}
	jule::Ref<_104a21a10_TypeKind> _10117_kind = jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(this->self->_field_cpp_ident,jule::Bool(),this->self->_field_kind));
	return _10117_kind;
}



inline jule::Bool _104a21a10_TypeKind::_method_is_cpp_linked(void) {
	return (*this)._field_cpp_ident.len() != 0LL;
}



inline jule::Bool _104a21a10_TypeKind::_method_is_nil(void) {
	return (*this)._field_kind == nullptr;
}



inline jule::Bool _104a21a10_TypeKind::_method_is_void(void) {
	jule::Ref<_104a21a10_Prim> _11613_prim = (*((&((*this)))))._method_prim();
	return jule::real(_11613_prim) && (_11613_prim->_method_to_str() == jule::Str("void", 4));
}



inline jule::Ref<_104a21a10_Prim> _104a21a10_TypeKind::_method_prim(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_Prim>>())) { goto _case_end_4387576192; }
		_case_begin_4387576192:;
		{
			return (*this)._field_kind.operator jule::Ref<_104a21a10_Prim>();
		}
		goto _match_end_4387573696;
		_case_end_4387576192:;
		_case_begin_4387574112:;
		{
			return jule::new_ref<_104a21a10_Prim>();
		}
		goto _match_end_4387573696;
		_case_end_4387574112:;
		_match_end_4387573696:;
	}
}



inline jule::Ref<_104a21a10_Ref> _104a21a10_TypeKind::_method_ref(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_Ref>>())) { goto _case_end_4387579664; }
		_case_begin_4387579664:;
		{
			return (*this)._field_kind.operator jule::Ref<_104a21a10_Ref>();
		}
		goto _match_end_4387577904;
		_case_end_4387579664:;
		_case_begin_4387574720:;
		{
			return jule::new_ref<_104a21a10_Ref>();
		}
		goto _match_end_4387577904;
		_case_end_4387574720:;
		_match_end_4387577904:;
	}
}



inline jule::Ref<_104a21a10_Ptr> _104a21a10_TypeKind::_method_ptr(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_Ptr>>())) { goto _case_end_4387583264; }
		_case_begin_4387583264:;
		{
			return (*this)._field_kind.operator jule::Ref<_104a21a10_Ptr>();
		}
		goto _match_end_4387581520;
		_case_end_4387583264:;
		_case_begin_4387578352:;
		{
			return jule::new_ref<_104a21a10_Ptr>();
		}
		goto _match_end_4387581520;
		_case_end_4387578352:;
		_match_end_4387581520:;
	}
}



inline jule::Ref<_1036dad50_Enum> _104a21a10_TypeKind::_method_enm(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1036dad50_Enum>>())) { goto _case_end_4387586768; }
		_case_begin_4387586768:;
		{
			return (*this)._field_kind.operator jule::Ref<_1036dad50_Enum>();
		}
		goto _match_end_4387585008;
		_case_end_4387586768:;
		_case_begin_4387583504:;
		{
			return jule::new_ref<_1036dad50_Enum>();
		}
		goto _match_end_4387585008;
		_case_end_4387583504:;
		_match_end_4387585008:;
	}
}



inline jule::Ref<_104a21a10_Arr> _104a21a10_TypeKind::_method_arr(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_Arr>>())) { goto _case_end_4387590192; }
		_case_begin_4387590192:;
		{
			return (*this)._field_kind.operator jule::Ref<_104a21a10_Arr>();
		}
		goto _match_end_4387587008;
		_case_end_4387590192:;
		_case_begin_4387585376:;
		{
			return jule::new_ref<_104a21a10_Arr>();
		}
		goto _match_end_4387587008;
		_case_end_4387585376:;
		_match_end_4387587008:;
	}
}



inline jule::Ref<_104a21a10_Slc> _104a21a10_TypeKind::_method_slc(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_Slc>>())) { goto _case_end_4387593696; }
		_case_begin_4387593696:;
		{
			return (*this)._field_kind.operator jule::Ref<_104a21a10_Slc>();
		}
		goto _match_end_4387591936;
		_case_end_4387593696:;
		_case_begin_4387588800:;
		{
			return jule::new_ref<_104a21a10_Slc>();
		}
		goto _match_end_4387591936;
		_case_end_4387588800:;
		_match_end_4387591936:;
	}
}



inline jule::Ref<_1037649f0_FnIns> _104a21a10_TypeKind::_method_fnc(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1037649f0_FnIns>>())) { goto _case_end_4387597120; }
		_case_begin_4387597120:;
		{
			return (*this)._field_kind.operator jule::Ref<_1037649f0_FnIns>();
		}
		goto _match_end_4387593936;
		_case_end_4387597120:;
		_case_begin_4387592304:;
		{
			return jule::new_ref<_1037649f0_FnIns>();
		}
		goto _match_end_4387593936;
		_case_end_4387592304:;
		_match_end_4387593936:;
	}
}



inline jule::Ref<_1037370d0_StructIns> _104a21a10_TypeKind::_method_strct(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_StructIns>>())) { goto _case_end_4387600544; }
		_case_begin_4387600544:;
		{
			return (*this)._field_kind.operator jule::Ref<_1037370d0_StructIns>();
		}
		goto _match_end_4387597360;
		_case_end_4387600544:;
		_case_begin_4387595728:;
		{
			return jule::new_ref<_1037370d0_StructIns>();
		}
		goto _match_end_4387597360;
		_case_end_4387595728:;
		_match_end_4387597360:;
	}
}



inline jule::Ref<_1036e5da0_Trait> _104a21a10_TypeKind::_method_trt(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1036e5da0_Trait>>())) { goto _case_end_4387603968; }
		_case_begin_4387603968:;
		{
			return (*this)._field_kind.operator jule::Ref<_1036e5da0_Trait>();
		}
		goto _match_end_4387600784;
		_case_end_4387603968:;
		_case_begin_4387599152:;
		{
			return jule::new_ref<_1036e5da0_Trait>();
		}
		goto _match_end_4387600784;
		_case_end_4387599152:;
		_match_end_4387600784:;
	}
}



inline jule::Ref<_104a21a10_Map> _104a21a10_TypeKind::_method_map(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_Map>>())) { goto _case_end_4387607392; }
		_case_begin_4387607392:;
		{
			return (*this)._field_kind.operator jule::Ref<_104a21a10_Map>();
		}
		goto _match_end_4387604208;
		_case_end_4387607392:;
		_case_begin_4387602576:;
		{
			return jule::new_ref<_104a21a10_Map>();
		}
		goto _match_end_4387604208;
		_case_end_4387602576:;
		_match_end_4387604208:;
	}
}



inline jule::Ref<_104a21a10_Tuple> _104a21a10_TypeKind::_method_tup(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_Tuple>>())) { goto _case_end_4387610880; }
		_case_begin_4387610880:;
		{
			return (*this)._field_kind.operator jule::Ref<_104a21a10_Tuple>();
		}
		goto _match_end_4387609120;
		_case_end_4387610880:;
		_case_begin_4387606080:;
		{
			return jule::new_ref<_104a21a10_Tuple>();
		}
		goto _match_end_4387609120;
		_case_end_4387606080:;
		_match_end_4387609120:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _104a21a10_TypeKind &_Src) {
	_Stream << "TypeKind{";
	_Stream << "cpp_ident:" << _Src._field_cpp_ident << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _104a21a10_TypeSymbol::_method_checked(void) {
	return jule::real((*this)._field_kind);
}



inline void _104a21a10_TypeSymbol::_method_remove_kind(void) {
	jule::drop((*this)._field_kind);
}







std::ostream &operator<<(std::ostream &_Stream, const _104a21a10_TypeSymbol &_Src) {
	_Stream << "TypeSymbol{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _104a21a10_Prim::_method_to_str(void) {
	return (*this)._field_kind;
}



inline jule::Bool _104a21a10_Prim::_method_equals(jule::Ref<_104a21a10_TypeKind> _23421_other) {
	jule::Ref<_104a21a10_Prim> _23513_prim = (_23421_other).alloc->_method_prim();
	if ((!(jule::real(_23513_prim)))) {
		return false;
	}
	return (*this)._field_kind == _23513_prim->_field_kind;
}



inline jule::Bool _104a21a10_Prim::_method_is_i8(void) {
	return (*this)._field_kind == jule::Str("i8", 2);
}



inline jule::Bool _104a21a10_Prim::_method_is_i16(void) {
	return (*this)._field_kind == jule::Str("i16", 3);
}



inline jule::Bool _104a21a10_Prim::_method_is_i32(void) {
	return (*this)._field_kind == jule::Str("i32", 3);
}



inline jule::Bool _104a21a10_Prim::_method_is_i64(void) {
	return (*this)._field_kind == jule::Str("i64", 3);
}



inline jule::Bool _104a21a10_Prim::_method_is_u8(void) {
	return (*this)._field_kind == jule::Str("u8", 2);
}



inline jule::Bool _104a21a10_Prim::_method_is_u16(void) {
	return (*this)._field_kind == jule::Str("u16", 3);
}



inline jule::Bool _104a21a10_Prim::_method_is_u32(void) {
	return (*this)._field_kind == jule::Str("u32", 3);
}



inline jule::Bool _104a21a10_Prim::_method_is_u64(void) {
	return (*this)._field_kind == jule::Str("u64", 3);
}



inline jule::Bool _104a21a10_Prim::_method_is_f32(void) {
	return (*this)._field_kind == jule::Str("f32", 3);
}



inline jule::Bool _104a21a10_Prim::_method_is_f64(void) {
	return (*this)._field_kind == jule::Str("f64", 3);
}



inline jule::Bool _104a21a10_Prim::_method_is_int(void) {
	return (*this)._field_kind == jule::Str("int", 3);
}



inline jule::Bool _104a21a10_Prim::_method_is_uint(void) {
	return (*this)._field_kind == jule::Str("uint", 4);
}



inline jule::Bool _104a21a10_Prim::_method_is_uintptr(void) {
	return (*this)._field_kind == jule::Str("uintptr", 7);
}



inline jule::Bool _104a21a10_Prim::_method_is_bool(void) {
	return (*this)._field_kind == jule::Str("bool", 4);
}



inline jule::Bool _104a21a10_Prim::_method_is_str(void) {
	return (*this)._field_kind == jule::Str("str", 3);
}



inline jule::Bool _104a21a10_Prim::_method_is_any(void) {
	return (*this)._field_kind == jule::Str("any", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _104a21a10_Prim &_Src) {
	_Stream << "Prim{";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _104a21a10_Ref::_method_to_str(void) {
	return jule::Str("&", 1) + (*this)._field_elem->_method_to_str();
}



inline jule::Bool _104a21a10_Ref::_method_equals(jule::Ref<_104a21a10_TypeKind> _30321_other) {
	jule::Ref<_104a21a10_Ref> _30413_ref = (_30321_other).alloc->_method_ref();
	if ((!(jule::real(_30413_ref)))) {
		return false;
	}
	return (*this)._field_elem->_method_equals(_30413_ref->_field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _104a21a10_Ref &_Src) {
	_Stream << "Ref{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _104a21a10_Slc::_method_to_str(void) {
	return jule::Str("[]", 2) + (*this)._field_elem->_method_to_str();
}



inline jule::Bool _104a21a10_Slc::_method_equals(jule::Ref<_104a21a10_TypeKind> _32221_other) {
	jule::Ref<_104a21a10_Slc> _32313_slc = (_32221_other).alloc->_method_slc();
	if ((!(jule::real(_32313_slc)))) {
		return false;
	}
	return (*this)._field_elem->_method_equals(_32313_slc->_field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _104a21a10_Slc &_Src) {
	_Stream << "Slc{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _104a21a10_Tuple::_method_to_str(void) {
	jule::Str _33917_s = jule::Str("(", 1);
	_33917_s+=(*this)._field_types[0LL]->_method_to_str();
	{
		auto __julec_range_expr = (*this)._field_types.slice(1LL);
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104a21a10_TypeKind> _104a21a10_t = *__julec_range_begin;
			_iter_begin_4387666656:;
			{
				_33917_s+=jule::Str(",", 1);
				_33917_s+=_104a21a10_t->_method_to_str();
			}
			_iter_next_4387666656:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104a21a10_t = *__julec_range_begin; goto _iter_begin_4387666656; }
			_iter_end_4387666656:;
		}
	}
	_33917_s+=jule::Str(")", 1);
	return _33917_s;
}



inline jule::Bool _104a21a10_Tuple::_method_equals(jule::Ref<_104a21a10_TypeKind> _35021_other) {
	jule::Ref<_104a21a10_Tuple> _35113_tup = (_35021_other).alloc->_method_tup();
	if ((!(jule::real(_35113_tup)))) {
		return false;
	}
	if ((*this)._field_types.len() != _35113_tup->_field_types.len()) {
		return false;
	}
	jule::Int _36017_i = 0LL;
	_iter_begin_4387673056:;
	if (!(_36017_i < (*this)._field_types.len())) { goto _iter_end_4387673056; }
	{
		if ((!((*this)._field_types[static_cast<jule::Int>(_36017_i)]->_method_equals(_35113_tup->_field_types[static_cast<jule::Int>(_36017_i)])))) {
			return false;
		}
	}
	_iter_next_4387673056:;
	(_36017_i)++;
	goto _iter_begin_4387673056;
	_iter_end_4387673056:;
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _104a21a10_Tuple &_Src) {
	_Stream << "Tuple{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _104a21a10_Map::_method_to_str(void) {
	jule::Str _38017_s = jule::Str("[", 1);
	_38017_s+=(*this)._field_key->_method_to_str();
	_38017_s+=jule::Str(":", 1);
	_38017_s+=(*this)._field_val->_method_to_str();
	_38017_s+=jule::Str("]", 1);
	return _38017_s;
}



inline jule::Bool _104a21a10_Map::_method_equals(jule::Ref<_104a21a10_TypeKind> _38921_other) {
	jule::Ref<_104a21a10_Map> _39013_map = (_38921_other).alloc->_method_map();
	if ((!(jule::real(_39013_map)))) {
		return false;
	}
	return (*this)._field_key->_method_equals(_39013_map->_field_key) && (*this)._field_val->_method_equals(_39013_map->_field_val);
}







std::ostream &operator<<(std::ostream &_Stream, const _104a21a10_Map &_Src) {
	_Stream << "Map{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _104a21a10_Arr::_method_to_str(void) {
	jule::Str _40817_s = jule::Str("[", 1);
	_40817_s+=_1486fb320_itoa((*this)._field_n);
	_40817_s+=jule::Str("]", 1);
	_40817_s+=(*this)._field_elem->_method_to_str();
	return _40817_s;
}



inline jule::Bool _104a21a10_Arr::_method_equals(jule::Ref<_104a21a10_TypeKind> _41621_other) {
	jule::Ref<_104a21a10_Arr> _41713_arr = (_41621_other).alloc->_method_arr();
	if ((!(jule::real(_41713_arr)))) {
		return false;
	}
	return ((*this)._field_n == _41713_arr->_field_n) && (*this)._field_elem->_method_equals(_41713_arr->_field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _104a21a10_Arr &_Src) {
	_Stream << "Arr{";
	_Stream << "auto:" << _Src._field_auto << ", ";
	_Stream << "n:" << _Src._field_n << ", ";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _104a21a10_Ptr::_method_to_str(void) {
	if ((*this)._method_is_unsafe()) {
		return jule::Str("*unsafe", 7);
	}
	return jule::Str("*", 1) + (*this)._field_elem->_method_to_str();
}



inline jule::Bool _104a21a10_Ptr::_method_equals(jule::Ref<_104a21a10_TypeKind> _44021_other) {
	jule::Ref<_104a21a10_Ptr> _44113_ptr = (_44021_other).alloc->_method_ptr();
	if ((!(jule::real(_44113_ptr)))) {
		return false;
	}
	return (*this)._field_elem->_method_equals(_44113_ptr->_field_elem);
}



inline jule::Bool _104a21a10_Ptr::_method_is_unsafe(void) {
	return (!(jule::real((*this)._field_elem)));
}







std::ostream &operator<<(std::ostream &_Stream, const _104a21a10_Ptr &_Src) {
	_Stream << "Ptr{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104a21a10_Referencer &_Src) {
	_Stream << "Referencer{";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "refs:" << _Src._field_refs;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_119162660_ImportInfo> _108e14cb0_PlainImporter::_method_get_import(jule::Str _10133_path) {
	{
		auto __julec_range_expr = (*this)._field_all_packages;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _108e14cb0_p = *__julec_range_begin;
			_iter_begin_4389841104:;
			{
				if (_108e14cb0_p->_field_path == _10133_path) {
					return _108e14cb0_p;
				}
			}
			_iter_next_4389841104:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e14cb0_p = *__julec_range_begin; goto _iter_begin_4389841104; }
			_iter_end_4389841104:;
		}
	}
	return jule::new_ref<_119162660_ImportInfo>();
}



inline std::tuple<jule::Slice<jule::Ref<_1487f02c0_Ast>>,jule::Slice<_1486379e0_Log>> _108e14cb0_PlainImporter::_method_import_package(jule::Str _11137_path) {
	jule::Slice<jule::Ref<_14877ba40_DirEntry>> _11214_dirents;
	jule::Str _11223_err_msg;
	std::tie(_11214_dirents,_11223_err_msg) = _108e14cb0_read_package_dirents(_11137_path);
	if (_11223_err_msg != jule::Str("", 0)) {
		jule::Slice<_1486379e0_Log> _11421_errors = jule::Slice<_1486379e0_Log>({_108e14cb0_flat_compiler_err(_11223_err_msg)});
		return std::make_tuple(nullptr,_11421_errors);
	}
	jule::Slice<jule::Ref<_1487f02c0_Ast>> _11817_asts = jule::Slice<jule::Ref<_1487f02c0_Ast>>::alloc(0LL,static_cast<jule::Int>(static_cast<jule::I64>(_11214_dirents.len())));
	{
		auto __julec_range_expr = _11214_dirents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_14877ba40_DirEntry> _108e14cb0_dirent = *__julec_range_begin;
			_iter_begin_4389846336:;
			{
				jule::Str _12017_path = _149060fe0_join(jule::Slice<jule::Str>({_11137_path,_108e14cb0_dirent->_field_name}));
				jule::Ref<_108e58b50_File> _12121_file = _108e58b50_new_file_set(_12017_path);
				_12121_file->_method_fill(_108e14cb0_read_buff(_12121_file->_method_path()));
				jule::Slice<_1486379e0_Log> _12321_errors = _108e171c0_lex(_12121_file);
				if (_12321_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_12321_errors);
				}
				jule::Ref<_1190cb490_FileInfo> _12821_finfo = _1190cb490_parse_file(_12121_file);
				if (_12821_finfo->_field_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_12821_finfo->_field_errors);
				}
				if ((!(_148637750_is_pass_file_annotation(_108e14cb0_dirent->_field_name)))) {
					goto _iter_next_4389846336;
				}
				if ((!(_108e14cb0_is_pass_build_directives(_12821_finfo->_field_ast)))) {
					goto _iter_next_4389846336;
				}
				_11817_asts=jule::append(_11817_asts,jule::Slice<jule::Ref<_1487f02c0_Ast>>({_12821_finfo->_field_ast}));
			}
			_iter_next_4389846336:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e14cb0_dirent = *__julec_range_begin; goto _iter_begin_4389846336; }
			_iter_end_4389846336:;
		}
	}
	return std::make_tuple(_11817_asts,nullptr);
}



inline void _108e14cb0_PlainImporter::_method_imported(jule::Ref<_119162660_ImportInfo> _14935_imp) {
	{
		auto __julec_range_expr = (*this)._field_all_packages;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _108e14cb0_p = *__julec_range_begin;
			_iter_begin_4389872208:;
			{
				if ((_108e14cb0_p->_field_cpp_linked == _14935_imp->_field_cpp_linked) && (_108e14cb0_p->_field_link_path == _14935_imp->_field_link_path)) {
					return;
				}
			}
			_iter_next_4389872208:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e14cb0_p = *__julec_range_begin; goto _iter_begin_4389872208; }
			_iter_end_4389872208:;
		}
	}
	(*this)._field_all_packages=jule::append((*this)._field_all_packages,jule::Slice<jule::Ref<_119162660_ImportInfo>>({_14935_imp}));
}







std::ostream &operator<<(std::ostream &_Stream, const _108e14cb0_PlainImporter &_Src) {
	_Stream << "PlainImporter{";
	_Stream << "all_packages:" << _Src._field_all_packages;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Ref<_108db2720_IR>,jule::Slice<_1486379e0_Log>> _108db2720_IR::_static_method_build(jule::Str _2425_path) {
	jule::Ref<_108e14cb0_PlainImporter> _2517_importer = jule::new_struct<_108e14cb0_PlainImporter>(new( std::nothrow ) _108e14cb0_PlainImporter());
	jule::Slice<jule::Ref<_1487f02c0_Ast>> _2618_files;
	jule::Slice<_1486379e0_Log> _2629_logs;
	std::tie(_2618_files,_2629_logs) = _2517_importer->_method_import_package(_2425_path);
	if (_2629_logs.len() > 0LL) {
		return std::make_tuple(jule::new_ref<_108db2720_IR>(),_2629_logs);
	}
	if (_2618_files.len() == 0LL) {
		return std::make_tuple(jule::new_ref<_108db2720_IR>(),nullptr);
	}
	jule::Ref<_119162660_Package> _3518_pkg;
	std::tie(_3518_pkg,_2629_logs) = _104aa02c0_analyze_package(_2618_files,_2517_importer);
	if (_2629_logs.len() > 0LL) {
		return std::make_tuple(jule::new_ref<_108db2720_IR>(),_2629_logs);
	}
	jule::Ref<_108db2720_IR> _4017_ir = jule::new_struct<_108db2720_IR>(new( std::nothrow ) _108db2720_IR(jule::Slice<jule::Str>(),_3518_pkg,_2517_importer->_field_all_packages));
	_4017_ir->_field_passes=_108db2720_get_all_unique_passes(_4017_ir->_field_main,_4017_ir->_field_used);
	return std::make_tuple(_4017_ir,nullptr);
}



inline void _108db2720_IR::_method_append_structs(jule::Ref<_119162660_Package> _5133_p,jule::Slice<jule::Ref<_1037370d0_Struct>>& _5157_buffer) {
	{
		auto __julec_range_expr = _5133_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _108db2720_f = *__julec_range_begin;
			_iter_begin_4389925808:;
			{
				{
					auto __julec_range_expr = _108db2720_f->_field_structs;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1037370d0_Struct> _108db2720_s = *__julec_range_begin;
						_iter_begin_4389927776:;
						{
							if ((!(_108db2720_s->_field_cpp_linked))) {
								_5157_buffer=jule::append(_5157_buffer,jule::Slice<jule::Ref<_1037370d0_Struct>>({_108db2720_s}));
							}
						}
						_iter_next_4389927776:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _108db2720_s = *__julec_range_begin; goto _iter_begin_4389927776; }
						_iter_end_4389927776:;
					}
				}
			}
			_iter_next_4389925808:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108db2720_f = *__julec_range_begin; goto _iter_begin_4389925808; }
			_iter_end_4389925808:;
		}
	}
}



inline jule::Slice<jule::Ref<_1037370d0_Struct>> _108db2720_IR::_method_get_all_structures(void) {
	jule::Slice<jule::Ref<_1037370d0_Struct>> _6417_buffer = nullptr;
	(*this)._method_append_structs((*this)._field_main,_6417_buffer);
	{
		auto __julec_range_expr = (*this)._field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _108db2720_u = *__julec_range_begin;
			_iter_begin_4389923632:;
			{
				if ((!(_108db2720_u->_field_cpp_linked))) {
					(*this)._method_append_structs(_108db2720_u->_field_package,_6417_buffer);
				}
			}
			_iter_next_4389923632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108db2720_u = *__julec_range_begin; goto _iter_begin_4389923632; }
			_iter_end_4389923632:;
		}
	}
	return _6417_buffer;
}



inline void _108db2720_IR::_method_append_vars(jule::Ref<_119162660_Package> _7730_p,jule::Slice<jule::Ref<_104598e40_Var>>& _7754_buffer) {
	{
		auto __julec_range_expr = _7730_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _108db2720_f = *__julec_range_begin;
			_iter_begin_4389939840:;
			{
				{
					auto __julec_range_expr = _108db2720_f->_field_vars;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_104598e40_Var> _108db2720_v = *__julec_range_begin;
						_iter_begin_4389941808:;
						{
							if ((!(_108db2720_v->_field_cpp_linked))) {
								_7754_buffer=jule::append(_7754_buffer,jule::Slice<jule::Ref<_104598e40_Var>>({_108db2720_v}));
							}
						}
						_iter_next_4389941808:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _108db2720_v = *__julec_range_begin; goto _iter_begin_4389941808; }
						_iter_end_4389941808:;
					}
				}
			}
			_iter_next_4389939840:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108db2720_f = *__julec_range_begin; goto _iter_begin_4389939840; }
			_iter_end_4389939840:;
		}
	}
}



inline jule::Slice<jule::Ref<_104598e40_Var>> _108db2720_IR::_method_get_all_variables(void) {
	jule::Slice<jule::Ref<_104598e40_Var>> _9017_buffer = nullptr;
	(*this)._method_append_vars((*this)._field_main,_9017_buffer);
	{
		auto __julec_range_expr = (*this)._field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _108db2720_u = *__julec_range_begin;
			_iter_begin_4389937664:;
			{
				if ((!(_108db2720_u->_field_cpp_linked))) {
					(*this)._method_append_vars(_108db2720_u->_field_package,_9017_buffer);
				}
			}
			_iter_next_4389937664:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108db2720_u = *__julec_range_begin; goto _iter_begin_4389937664; }
			_iter_end_4389937664:;
		}
	}
	return _9017_buffer;
}







std::ostream &operator<<(std::ostream &_Stream, const _108db2720_IR &_Src) {
	_Stream << "IR{";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "main:" << _Src._field_main << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}



inline void _1086aad20_ScopeDeadCode::_method_optimize_child(jule::Ref<_104180810_Scope> _2238_s) {
	jule::Ref<_1086aad20_ScopeDeadCode> _2317_sdc = jule::new_struct<_1086aad20_ScopeDeadCode>(new( std::nothrow ) _1086aad20_ScopeDeadCode(this->self,_2238_s,(&(_2238_s->_field_stmts)),jule::Int()));
	{
		_2317_sdc->_method_optimize_stmts();
	}
}



inline void _1086aad20_ScopeDeadCode::_method_eliminate_followed(void) {
	(*((*this)._field_stmts))=(*((*this)._field_stmts)).slice(0LL,static_cast<jule::Int>((*this)._field_i + 1LL));
	jule::Ref<_1086aad20_ScopeDeadCode> _3317_parent = (*this)._field_parent;
	_iter_begin_4390220912:;
	if (!(jule::real(_3317_parent))) { goto _iter_end_4390220912; }
	{
		(*(_3317_parent->_field_stmts))=(*(_3317_parent->_field_stmts)).slice(0LL,static_cast<jule::Int>(_3317_parent->_field_i + 1LL));
		_3317_parent=_3317_parent->_field_parent;
	}
	_iter_next_4390220912:;
	goto _iter_begin_4390220912;
	_iter_end_4390220912:;
}



inline void _1086aad20_ScopeDeadCode::_method_optimize_stmt(jule::Any _4044_st) {
	{
		auto _match_expr{ _4044_st };
		if (!(_match_expr.type_is<jule::Ref<_104180810_Scope>>())) { goto _case_end_4390227136; }
		_case_begin_4390227136:;
		{
			jule::Ref<_104180810_Scope> _4321_scope = _4044_st.operator jule::Ref<_104180810_Scope>();
			if (_4321_scope->_field_deferred) {
				_1086aad20_eliminate_dead_code_of_scope(_4321_scope);
			} else {
				this->self->_method_optimize_child(_4321_scope);
			}
		}
		goto _match_end_4390226816;
		_case_end_4390227136:;
		if (!(_match_expr.type_is<jule::Ref<_1191dc300_Data>>())) { goto _case_end_4390227248; }
		_case_begin_4390227248:;
		{
			{
				auto _match_expr{ _4044_st.operator jule::Ref<_1191dc300_Data>()->_field_model };
				if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinPanicCallExprModel>>())) { goto _case_end_4390233632; }
				_case_begin_4390233632:;
				{
					this->self->_method_eliminate_followed();
				}
				goto _match_end_4390231296;
				_case_end_4390233632:;
				_match_end_4390231296:;
			}
		}
		goto _match_end_4390226816;
		_case_end_4390227248:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_RetSt>>())) { goto _case_end_4390227536; }
		_case_begin_4390227536:;
		{
			this->self->_method_eliminate_followed();
		}
		goto _match_end_4390226816;
		_case_end_4390227536:;
		_match_end_4390226816:;
	}
}



inline void _1086aad20_ScopeDeadCode::_method_optimize_stmts(void) {
	this->self->_field_i=0LL;
	_iter_begin_4390237232:;
	if (!(this->self->_field_i < this->self->_field_stmts->len())) { goto _iter_end_4390237232; }
	{
		this->self->_method_optimize_stmt((*(this->self->_field_stmts))[static_cast<jule::Int>(this->self->_field_i)]);
	}
	_iter_next_4390237232:;
	(this->self->_field_i)++;
	goto _iter_begin_4390237232;
	_iter_end_4390237232:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1086aad20_ScopeDeadCode &_Src) {
	_Stream << "ScopeDeadCode{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _104e1b930_IndexRangeSetter::_method_setup_vars(jule::Ref<_104598e40_Var> _4629_key_a,jule::Ref<_104598e40_Var> _4646_key_b) {
	jule::Str _4713_indent = _1190c5fe0_indent();
	jule::Str _4917_obj = jule::Str("", 0);
	if (jule::real(_4629_key_a)) {
		_4917_obj+=_1190c5fe0_gen_var_init_expr(_4629_key_a,jule::Str("0", 1));
		_4917_obj+=jule::Str("\n", 1);
		_4917_obj+=_4713_indent;
	}
	if (jule::real(_4646_key_b)) {
		_4917_obj+=_1190c5fe0_gen_var_init_expr(_4646_key_b,jule::Str("*__julec_range_begin", 20));
		_4917_obj+=jule::Str("\n", 1);
		_4917_obj+=_4713_indent;
	}
	return _4917_obj;
}



inline jule::Str _104e1b930_IndexRangeSetter::_method_next_steps(jule::Ref<_104598e40_Var> _6529_key_a,jule::Ref<_104598e40_Var> _6546_key_b,jule::Str _6559_begin) {
	jule::Str _6613_indent = _1190c5fe0_indent();
	jule::Str _6817_obj = jule::Str("++__julec_range_begin;\n", 23);
	_6817_obj+=_6613_indent;
	_6817_obj+=jule::Str("if (__julec_range_begin != __julec_range_end) { ", 48);
	if (jule::real(_6529_key_a)) {
		_6817_obj+=(jule::Str("++", 2) + _104f406e0_var_out_ident(_6529_key_a)) + jule::Str("; ", 2);
	}
	if (jule::real(_6546_key_b)) {
		_6817_obj+=_104f406e0_var_out_ident(_6546_key_b) + jule::Str(" = *__julec_range_begin; ", 25);
	}
	_6817_obj+=(jule::Str("goto ", 5) + _6559_begin) + jule::Str("; }\n", 4);
	return _6817_obj;
}







std::ostream &operator<<(std::ostream &_Stream, const _104e1b930_IndexRangeSetter &_Src) {
	_Stream << "IndexRangeSetter{";
	_Stream << "}";
	return _Stream;
}



inline jule::Str _104e1b930_MapRangeSetter::_method_setup_vars(jule::Ref<_104598e40_Var> _8729_key_a,jule::Ref<_104598e40_Var> _8746_key_b) {
	jule::Str _8813_indent = _1190c5fe0_indent();
	jule::Str _8917_obj = jule::Str("", 0);
	if (jule::real(_8729_key_a)) {
		_8917_obj+=_1190c5fe0_gen_var_init_expr(_8729_key_a,jule::Str("__julec_range_begin->first", 26));
		_8917_obj+=jule::Str("\n", 1);
		_8917_obj+=_8813_indent;
	}
	if (jule::real(_8746_key_b)) {
		_8917_obj+=_1190c5fe0_gen_var_init_expr(_8746_key_b,jule::Str("__julec_range_begin->second", 27));
		_8917_obj+=jule::Str("\n", 1);
		_8917_obj+=_8813_indent;
	}
	return _8917_obj;
}



inline jule::Str _104e1b930_MapRangeSetter::_method_next_steps(jule::Ref<_104598e40_Var> _10629_key_a,jule::Ref<_104598e40_Var> _10646_key_b,jule::Str _10659_begin) {
	jule::Str _10713_indent = _1190c5fe0_indent();
	jule::Str _10917_obj = jule::Str("++__julec_range_begin;\n", 23);
	_10917_obj+=_10713_indent;
	_10917_obj+=jule::Str("if (__julec_range_begin != __julec_range_end) { ", 48);
	if (jule::real(_10629_key_a)) {
		_10917_obj+=_104f406e0_var_out_ident(_10629_key_a);
		_10917_obj+=jule::Str(" = __julec_range_begin->first; ", 31);
	}
	if (jule::real(_10646_key_b)) {
		_10917_obj+=_104f406e0_var_out_ident(_10646_key_b);
		_10917_obj+=jule::Str(" = __julec_range_begin->second; ", 32);
	}
	_10917_obj+=(jule::Str("goto ", 5) + _10659_begin) + jule::Str("; }\n", 4);
	return _10917_obj;
}







std::ostream &operator<<(std::ostream &_Stream, const _104e1b930_MapRangeSetter &_Src) {
	_Stream << "MapRangeSetter{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1190c5fe0_OrderedDecls &_Src) {
	_Stream << "OrderedDecls{";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "globals:" << _Src._field_globals;
	_Stream << "}";
	return _Stream;
}



inline void _104a21a10_TypeChecker::_method_push_err(_108e15ff0_Token _65427_token,jule::Str _65441_fmt,jule::Slice<jule::Any> _65454_args) {
	(*this)._field_s->_method_push_err(_65427_token,_65441_fmt,_65454_args);
}



inline jule::Ref<_104a21a10_Prim> _104a21a10_TypeChecker::_method_build_prim(jule::Ref<_1487f5920_IdentTypeDecl> _65829_decl) {
	if ((!(_104a21a10_is_prim(_65829_decl->_field_ident)))) {
		(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid data-type", 17),jule::Slice<jule::Any>({}));
		return jule::new_ref<_104a21a10_Prim>();
	}
	if (_65829_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_65829_decl->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_65829_decl->_field_ident)}));
		return jule::new_ref<_104a21a10_Prim>();
	}
	return _104a21a10_build_prim_type(_65829_decl->_field_ident);
}



inline void _104a21a10_TypeChecker::_method_push_cycle_error(jule::Any _67231_def1,jule::Any _67242_def2,jule::Str& _67258_message) {
	
	jule::Fn<jule::Str(jule::Any&)> _67513_get_ident = jule::Fn<jule::Str(jule::Any&)>([=](jule::Any& _67529_def) mutable -> jule::Str {
		{
			auto _match_expr{ _67529_def };
			if (!(_match_expr.type_is<jule::Ref<_104a21a10_TypeAlias>>())) { goto _case_end_4387737648; }
			_case_begin_4387737648:;
			{
				return _67529_def.operator jule::Ref<_104a21a10_TypeAlias>()->_field_ident;
			}
			goto _match_end_4387736720;
			_case_end_4387737648:;
			if (!(_match_expr.type_is<jule::Ref<_1037370d0_Struct>>())) { goto _case_end_4387737760; }
			_case_begin_4387737760:;
			{
				return _67529_def.operator jule::Ref<_1037370d0_Struct>()->_field_ident;
			}
			goto _match_end_4387736720;
			_case_end_4387737760:;
			if (!(_match_expr.type_is<jule::Ref<_1036dad50_Enum>>())) { goto _case_end_4387737872; }
			_case_begin_4387737872:;
			{
				return _67529_def.operator jule::Ref<_1036dad50_Enum>()->_field_ident;
			}
			goto _match_end_4387736720;
			_case_end_4387737872:;
			_case_begin_4387737200:;
			{
				return jule::Str("", 0);
			}
			goto _match_end_4387736720;
			_case_end_4387737200:;
			_match_end_4387736720:;
		}
	});
	jule::Str _68413_def1_ident = _67513_get_ident(_67231_def1);
	jule::Str _68513_def2_ident = _67513_get_ident(_67242_def2);
	jule::Str _68613_refers_to = _1486379e0_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_68413_def1_ident),jule::Any(_68513_def2_ident)}));
	_67258_message=((_1036da950_str_repeat(jule::Str(" ", 1),4LL) + _68613_refers_to) + jule::Str("\n", 1)) + _67258_message;
}



inline jule::Bool _104a21a10_TypeChecker::_method_are_equals_cross_cycle_data_0(jule::Any _69045_a,jule::Any _69053_b) {
	{
		auto _match_expr{ _69045_a };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_TypeAlias>>())) { goto _case_end_4387764272; }
		_case_begin_4387764272:;
		{
			{
				auto _match_expr{ _69053_b };
				if (!(_match_expr.type_is<jule::Ref<_104a21a10_TypeAlias>>())) { goto _case_end_4387766400; }
				_case_begin_4387766400:;
				{
					return (_69045_a.operator jule::Ref<_104a21a10_TypeAlias>()).alloc == (_69053_b.operator jule::Ref<_104a21a10_TypeAlias>()).alloc;
				}
				goto _match_end_4387764432;
				_case_end_4387766400:;
				_case_begin_4387765984:;
				{
					return false;
				}
				goto _match_end_4387764432;
				_case_end_4387765984:;
				_match_end_4387764432:;
			}
		}
		goto _match_end_4387763472;
		_case_end_4387764272:;
		_case_begin_4387763888:;
		{
			return false;
		}
		goto _match_end_4387763472;
		_case_end_4387763888:;
		_match_end_4387763472:;
	}
}

inline jule::Bool _104a21a10_TypeChecker::_method_are_equals_cross_cycle_data_1(jule::Any _69045_a,jule::Any _69053_b) {
	{
		auto _match_expr{ _69045_a };
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_Struct>>())) { goto _case_end_4387779136; }
		_case_begin_4387779136:;
		{
			{
				auto _match_expr{ _69053_b };
				if (!(_match_expr.type_is<jule::Ref<_1037370d0_Struct>>())) { goto _case_end_4387781264; }
				_case_begin_4387781264:;
				{
					return (_69045_a.operator jule::Ref<_1037370d0_Struct>()).alloc == (_69053_b.operator jule::Ref<_1037370d0_Struct>()).alloc;
				}
				goto _match_end_4387779296;
				_case_end_4387781264:;
				_case_begin_4387780848:;
				{
					return false;
				}
				goto _match_end_4387779296;
				_case_end_4387780848:;
				_match_end_4387779296:;
			}
		}
		goto _match_end_4387778336;
		_case_end_4387779136:;
		_case_begin_4387778752:;
		{
			return false;
		}
		goto _match_end_4387778336;
		_case_end_4387778752:;
		_match_end_4387778336:;
	}
}



inline jule::Bool _104a21a10_TypeChecker::_method_check_cross_cycle(jule::Any _70332_decl,jule::Str& _70348_message) {
	{
		auto _match_expr{ _70332_decl };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_TypeAlias>>())) { goto _case_end_4387749424; }
		_case_begin_4387749424:;
		{
			jule::Ref<_104a21a10_TypeAlias> _70617_ta = _70332_decl.operator jule::Ref<_104a21a10_TypeAlias>();
			{
				auto __julec_range_expr = _70617_ta->_field_refers;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Any _104a21a10_d = *__julec_range_begin;
					_iter_begin_4387752656:;
					{
						{
							auto _match_expr{ _104a21a10_d };
							if (!(_match_expr.type_is<jule::Ref<_104a21a10_TypeAlias>>())) { goto _case_end_4387754416; }
							_case_begin_4387754416:;
							{
								if ((*this)._method_are_equals_cross_cycle_data_0(_104a21a10_d,(*this)._field_referencer->_field_owner)) {
									(*this)._method_push_cycle_error(jule::Any(_70617_ta),_104a21a10_d,_70348_message);
									return false;
								}
							}
							goto _match_end_4387753952;
							_case_end_4387754416:;
							_match_end_4387753952:;
						}
						if ((!((*this)._method_check_cross_cycle(_104a21a10_d,_70348_message)))) {
							(*this)._method_push_cycle_error(jule::Any(_70617_ta),_104a21a10_d,_70348_message);
							return false;
						}
					}
					_iter_next_4387752656:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _104a21a10_d = *__julec_range_begin; goto _iter_begin_4387752656; }
					_iter_end_4387752656:;
				}
			}
		}
		goto _match_end_4387749040;
		_case_end_4387749424:;
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_Struct>>())) { goto _case_end_4387749616; }
		_case_begin_4387749616:;
		{
			jule::Ref<_1037370d0_Struct> _72317_s = _70332_decl.operator jule::Ref<_1037370d0_Struct>();
			{
				auto __julec_range_expr = _72317_s->_field_depends;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Ref<_1037370d0_Struct> _104a21a10_d = *__julec_range_begin;
					_iter_begin_4387753872:;
					{
						if ((*this)._method_are_equals_cross_cycle_data_1(jule::Any(_104a21a10_d),(*this)._field_referencer->_field_owner)) {
							(*this)._method_push_cycle_error(jule::Any(_72317_s),jule::Any(_104a21a10_d),_70348_message);
							return false;
						}
						if ((!((*this)._method_check_cross_cycle(jule::Any(_104a21a10_d),_70348_message)))) {
							(*this)._method_push_cycle_error(jule::Any(_72317_s),jule::Any(_104a21a10_d),_70348_message);
							return false;
						}
					}
					_iter_next_4387753872:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _104a21a10_d = *__julec_range_begin; goto _iter_begin_4387753872; }
					_iter_end_4387753872:;
				}
			}
		}
		goto _match_end_4387749040;
		_case_end_4387749616:;
		_match_end_4387749040:;
	}
	return true;
}



inline jule::Bool _104a21a10_TypeChecker::_method_check_illegal_cycles(jule::Ref<_1487f5920_IdentTypeDecl> _74539_ident,jule::Any _74566_decl) {
	jule::Bool _74579_ok = jule::Bool();
	if ((!(jule::real((*this)._field_referencer)))) {
		_74579_ok = true;
		return _74579_ok;
	}
	{
		auto _match_expr{ _74566_decl };
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_Struct>>())) { goto _case_end_4387788272; }
		_case_begin_4387788272:;
		{
			if ((*this)._field_not_plain) {
				_74579_ok = true;
				return _74579_ok;
			}
		}
		goto _match_end_4387787264;
		_case_end_4387788272:;
		_match_end_4387787264:;
	}
	if ((*this)._field_referencer->_field_owner == _74566_decl) {
		(*this)._method_push_err(_74539_ident->_field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*this)._field_referencer->_field_ident)}));
		_74579_ok = false;
		return _74579_ok;
	}
	jule::Str _76417_message = jule::Str("", 0);
	if ((!((*this)._method_check_cross_cycle(_74566_decl,_76417_message)))) {
		jule::Str _76721_err_msg = _76417_message;
		_76417_message=jule::Str("", 0);
		(*this)._method_push_cycle_error((*this)._field_referencer->_field_owner,_74566_decl,_76417_message);
		_76721_err_msg=_76721_err_msg + _76417_message;
		(*this)._method_push_err(_74539_ident->_field_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_76721_err_msg)}));
		_74579_ok = false;
		return _74579_ok;
	}
	{
		auto _match_expr{ (*this)._field_referencer->_field_owner };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_TypeAlias>>())) { goto _case_end_4387800000; }
		_case_begin_4387800000:;
		{
			{
				(*((*this)._field_referencer->_field_refs))=jule::append((*((*this)._field_referencer->_field_refs)),jule::Slice<jule::Any>({_74566_decl}));
			}
		}
		goto _match_end_4387798160;
		_case_end_4387800000:;
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_Struct>>())) { goto _case_end_4387800112; }
		_case_begin_4387800112:;
		{
			{
				auto _match_expr{ _74566_decl };
				if (!(_match_expr.type_is<jule::Ref<_1037370d0_Struct>>())) { goto _case_end_4387806400; }
				_case_begin_4387806400:;
				{
					jule::Ref<_1037370d0_Struct> _78225_s = (*this)._field_referencer->_field_owner.operator jule::Ref<_1037370d0_Struct>();
					_78225_s->_field_depends=jule::append(_78225_s->_field_depends,jule::Slice<jule::Ref<_1037370d0_Struct>>({_74566_decl.operator jule::Ref<_1037370d0_Struct>()}));
				}
				goto _match_end_4387802416;
				_case_end_4387806400:;
				_match_end_4387802416:;
			}
		}
		goto _match_end_4387798160;
		_case_end_4387800112:;
		_match_end_4387798160:;
	}
	_74579_ok = true;
	return _74579_ok;
}



inline jule::Trait<_104a21a10_Kind> _104a21a10_TypeChecker::_method_from_type_alias(jule::Ref<_1487f5920_IdentTypeDecl> _79034_decl,jule::Ref<_104a21a10_TypeAlias> _79060_ta) {
	if ((!((*this)._field_s->_method_is_accessible_define(_79060_ta->_field_public,_79060_ta->_field_token)))) {
		(*this)._method_push_err(_79034_decl->_field_token,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_79034_decl->_field_ident)}));
		return nullptr;
	}
	_79060_ta->_field_used=true;
	if (_79034_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_79034_decl->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_79034_decl->_field_ident)}));
		return nullptr;
	}
	jule::Bool _80317_ok = (*this)._method_check_illegal_cycles(_79034_decl,jule::Any(_79060_ta));
	if ((!(_80317_ok))) {
		return nullptr;
	}
	_80317_ok=(*this)._field_s->_method_check_type_alias_decl_kind(_79060_ta,(*this)._field_lookup);
	if ((!(_80317_ok))) {
		return nullptr;
	}
	jule::Ref<_104a21a10_TypeKind> _81417_kind = _79060_ta->_field_kind->_field_kind->_method_clone();
	if (_79060_ta->_field_cpp_linked) {
		_81417_kind->_field_cpp_ident=_79060_ta->_field_ident;
	}
	return _81417_kind;
}



inline jule::Ref<_1036dad50_Enum> _104a21a10_TypeChecker::_method_from_enum(jule::Ref<_1487f5920_IdentTypeDecl> _82328_decl,jule::Ref<_1036dad50_Enum> _82354_e) {
	if ((!((*this)._field_s->_method_is_accessible_define(_82354_e->_field_public,_82354_e->_field_token)))) {
		(*this)._method_push_err(_82328_decl->_field_token,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_82328_decl->_field_ident)}));
		return jule::new_ref<_1036dad50_Enum>();
	}
	if (_82328_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_82328_decl->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_82328_decl->_field_ident)}));
		return jule::new_ref<_1036dad50_Enum>();
	}
	return _82354_e;
}



inline jule::Bool _104a21a10_TypeChecker::_method_check_struct_ins(jule::Ref<_1037370d0_StructIns> _83739_ins,_108e15ff0_Token _83756_error_token) {
	jule::Bool _83778_ok = jule::Bool();
	if (_83739_ins->_field_checked) {
		_83778_ok = true;
		return _83778_ok;
	}
	_83739_ins->_field_checked=true;
	if (jule::real((*this)._field_referencer) && ((*this)._field_referencer->_field_owner == _83739_ins->_field_decl)) {
		_83778_ok = true;
		return _83778_ok;
	}
	jule::Ref<_1191dcd40_SymbolTable> _85117_old_file = (*this)._field_s->_field_file;
	__JULE_DEFER({
		(*this)._field_s->_method_set_current_file(_85117_old_file);
	});
	jule::Ref<_1191dcd40_SymbolTable> _85417_f = _119177e90_find_file((*this)._field_s->_field_files,_83739_ins->_field_decl->_field_token._field_file);
	if (jule::real(_85417_f)) {
		(*this)._field_s->_method_set_current_file(_85417_f);
	}
	jule::Ref<_104a21a10_Referencer> _85917_referencer = jule::new_struct<_104a21a10_Referencer>(new( std::nothrow ) _104a21a10_Referencer(_83739_ins->_field_decl->_field_ident,jule::Any(_83739_ins->_field_decl),nullptr));
	jule::Slice<jule::Ref<_104a21a10_TypeAlias>> _86417_generics = jule::Slice<jule::Ref<_104a21a10_TypeAlias>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_83739_ins->_field_generics.len())));
	{
		auto __julec_range_expr = _83739_ins->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104a21a10_i = 0;
			jule::Ref<_104a21a10_TypeKind> _104a21a10_g = *__julec_range_begin;
			_iter_begin_4387855584:;
			{
				_86417_generics[static_cast<jule::Int>(_104a21a10_i)]=jule::new_struct<_104a21a10_TypeAlias>(new( std::nothrow ) _104a21a10_TypeAlias(jule::Ref<_1487f5920_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),_108e15ff0_Token(),_83739_ins->_field_decl->_field_generics[static_cast<jule::Int>(_104a21a10_i)]->_field_ident,jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),_104a21a10_g)),jule::Str(),jule::Slice<jule::Any>()));
			}
			_iter_next_4387855584:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104a21a10_i; _104a21a10_g = *__julec_range_begin; goto _iter_begin_4387855584; }
			_iter_end_4387855584:;
		}
	}
	jule::Ref<_1191dcd40_SymbolTable> _87417_old_sema_file = _83739_ins->_field_decl->_field_sema->_field_file;
	__JULE_DEFER({
		_83739_ins->_field_decl->_field_sema->_method_set_current_file(_87417_old_sema_file);
	});
	_104a21a10_TypeChecker _87717_tc = _104a21a10_TypeChecker(_83739_ins->_field_decl->_field_sema,_83739_ins->_field_decl->_field_sema,_85917_referencer,_108e15ff0_Token(),jule::Slice<jule::Ref<_1487f5920_GenericDecl>>(),_86417_generics,jule::Bool());
	{
		auto __julec_range_expr = _83739_ins->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_FieldIns> _104a21a10_f = *__julec_range_begin;
			_iter_begin_4387865568:;
			{
				jule::Ref<_104a21a10_TypeKind> _88621_kind = _87717_tc._method_check_decl(_104a21a10_f->_field_decl->_field_kind->_field_decl);
				_83778_ok=jule::real(_88621_kind);
				if ((jule::real(_83739_ins->_field_decl->_field_sema) && ((*this)._field_s != _83739_ins->_field_decl->_field_sema)) && (_83739_ins->_field_decl->_field_sema->_field_errors.len() > 0LL)) {
					(*this)._field_s->_field_errors=jule::append((*this)._field_s->_field_errors,_83739_ins->_field_decl->_field_sema->_field_errors);
				}
				if ((!(_83778_ok))) {
					_83778_ok = false;
					return _83778_ok;
				}
				_104a21a10_f->_field_kind=_88621_kind;
				if (_104a21a10_is_mut(_104a21a10_f->_field_kind)) {
					_83739_ins->_field_has_mut=true;
					(*this)._field_s->_method_check_struct_ins_derive_clone(_83739_ins);
				}
			}
			_iter_next_4387865568:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104a21a10_f = *__julec_range_begin; goto _iter_begin_4387865568; }
			_iter_end_4387865568:;
		}
	}
	if (_83739_ins->_field_generics.len() > 0LL) {
		{
			auto __julec_range_expr = _83739_ins->_field_methods;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1037649f0_Fn> _104a21a10_m = *__julec_range_begin;
				_iter_begin_4387878656:;
				{
					if (_104a21a10_m->_field_generics.len() > 0LL) {
						goto _iter_next_4387878656;
					}
					(*this)._field_s->_method_check_type_method(_83739_ins,_104a21a10_m);
				}
				_iter_next_4387878656:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _104a21a10_m = *__julec_range_begin; goto _iter_begin_4387878656; }
				_iter_end_4387878656:;
			}
		}
	}
	_83778_ok = true;
	return _83778_ok;
}



inline void _104a21a10_TypeChecker::_method_append_used_struct_reference(jule::Ref<_1037370d0_Struct> _91851_s) {
	if ((!(jule::real((*this)._field_referencer)))) {
		return;
	}
	{
		auto _match_expr{ (*this)._field_referencer->_field_owner };
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_Struct>>())) { goto _case_end_4387888256; }
		_case_begin_4387888256:;
		{
			jule::Ref<_1037370d0_Struct> _92521_ref_s = (*this)._field_referencer->_field_owner.operator jule::Ref<_1037370d0_Struct>();
			if ((!(_92521_ref_s->_method_is_uses(_91851_s)))) {
				_92521_ref_s->_field_uses=jule::append(_92521_ref_s->_field_uses,jule::Slice<jule::Ref<_1037370d0_Struct>>({_91851_s}));
			}
		}
		goto _match_end_4387887664;
		_case_end_4387888256:;
		_match_end_4387887664:;
	}
}



inline jule::Ref<_1037370d0_StructIns> _104a21a10_TypeChecker::_method_from_struct(jule::Ref<_1487f5920_IdentTypeDecl> _93234_decl,jule::Ref<_1037370d0_Struct> _93260_s) {
	if ((!((*this)._field_s->_method_is_accessible_define(_93260_s->_field_public,_93260_s->_field_token)))) {
		(*this)._method_push_err(_93234_decl->_field_token,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_93234_decl->_field_ident)}));
		return jule::new_ref<_1037370d0_StructIns>();
	}
	if ((*this)._field_ignore_generics.len() > 0LL) {
		return jule::new_ref<_1037370d0_StructIns>();
	}
	jule::Bool _94317_ok = (*this)._field_not_plain || (*this)._method_check_illegal_cycles(_93234_decl,jule::Any(_93260_s));
	if ((!(_94317_ok))) {
		return jule::new_ref<_1037370d0_StructIns>();
	}
	(*this)._method_append_used_struct_reference(_93260_s);
	jule::Ref<_1037370d0_StructIns> _94917_ins = _93260_s->_method_instance();
	_94917_ins->_field_generics=jule::Slice<jule::Ref<_104a21a10_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_93234_decl->_field_generics.len())));
	jule::Ref<_104a21a10_Referencer> _95117_referencer = (*this)._field_referencer;
	jule::drop((*this)._field_referencer);
	{
		auto __julec_range_expr = _93234_decl->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104a21a10_i = 0;
			jule::Ref<_1487f5920_TypeDecl> _104a21a10_g = *__julec_range_begin;
			_iter_begin_4387910640:;
			{
				jule::Ref<_104a21a10_TypeKind> _95421_kind = (*this)._method_build(_104a21a10_g->_field_kind);
				if ((!(jule::real(_95421_kind)))) {
					_94317_ok=false;
					goto _iter_next_4387910640;
				}
				_94917_ins->_field_generics[static_cast<jule::Int>(_104a21a10_i)]=_95421_kind;
			}
			_iter_next_4387910640:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104a21a10_i; _104a21a10_g = *__julec_range_begin; goto _iter_begin_4387910640; }
			_iter_end_4387910640:;
		}
	}
	(*this)._field_referencer=_95117_referencer;
	if ((!(_94317_ok))) {
		return jule::new_ref<_1037370d0_StructIns>();
	}
	_94317_ok=(*this)._field_s->_method_check_generic_quantity(static_cast<jule::I64>(_94917_ins->_field_decl->_field_generics.len()),static_cast<jule::I64>(_94917_ins->_field_generics.len()),_93234_decl->_field_token);
	if ((!(_94317_ok))) {
		return jule::new_ref<_1037370d0_StructIns>();
	}
	jule::Ref<_1037370d0_StructIns> _97317_exist_instance = _93260_s->_method_append_instance(_94917_ins);
	if (jule::real(_97317_exist_instance)) {
		return _97317_exist_instance;
	}
	_94317_ok=(*this)._method_check_struct_ins(_94917_ins,_93234_decl->_field_token);
	if ((!(_94317_ok))) {
		return jule::new_ref<_1037370d0_StructIns>();
	}
	return _94917_ins;
}



inline jule::Trait<_104a21a10_Kind> _104a21a10_TypeChecker::_method_get_def(jule::Ref<_1487f5920_IdentTypeDecl> _98830_decl) {
	{
		auto __julec_range_expr = (*this)._field_ignore_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1487f5920_GenericDecl> _104a21a10_g = *__julec_range_begin;
			_iter_begin_4387929744:;
			{
				if (_104a21a10_g->_field_ident == _98830_decl->_field_ident) {
					return _104a21a10_build_prim_type(_104a21a10_g->_field_ident);
				}
			}
			_iter_next_4387929744:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104a21a10_g = *__julec_range_begin; goto _iter_begin_4387929744; }
			_iter_end_4387929744:;
		}
	}
	{
		auto __julec_range_expr = (*this)._field_use_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104a21a10_TypeAlias> _104a21a10_g = *__julec_range_begin;
			_iter_begin_4387932336:;
			{
				if (_104a21a10_g->_field_ident == _98830_decl->_field_ident) {
					jule::Ref<_1037370d0_StructIns> _99725_st = _104a21a10_g->_field_kind->_field_kind->_method_strct();
					if (jule::real(_99725_st)) {
						jule::Bool _99925_ok = (*this)._method_check_illegal_cycles(_98830_decl,jule::Any(_99725_st->_field_decl));
						if ((!(_99925_ok))) {
							return nullptr;
						}
					}
					return _104a21a10_g->_field_kind->_field_kind->_field_kind;
				}
			}
			_iter_next_4387932336:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104a21a10_g = *__julec_range_begin; goto _iter_begin_4387932336; }
			_iter_end_4387932336:;
		}
	}
	if ((!(_98830_decl->_field_cpp_linked))) {
		jule::Ref<_1036dad50_Enum> _100921_e = (*this)._field_lookup.get()._method_find_enum(_98830_decl->_field_ident);
		if (jule::real(_100921_e)) {
			return (*this)._method_from_enum(_98830_decl,_100921_e);
		}
		jule::Ref<_1036e5da0_Trait> _101421_t = (*this)._field_lookup.get()._method_find_trait(_98830_decl->_field_ident);
		if ((!(jule::real(_101421_t)))) {
			_101421_t=_104b4ffd0_find_builtin_trait(_98830_decl->_field_ident);
		}
		if (jule::real(_101421_t)) {
			if ((!((*this)._field_s->_method_is_accessible_define(_101421_t->_field_public,_101421_t->_field_token)))) {
				(*this)._method_push_err(_98830_decl->_field_token,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_98830_decl->_field_ident)}));
				return nullptr;
			}
			if (_98830_decl->_field_generics.len() > 0LL) {
				(*this)._method_push_err(_98830_decl->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_98830_decl->_field_ident)}));
				return nullptr;
			}
			return _101421_t;
		}
	}
	jule::Ref<_1037370d0_Struct> _103217_s = (*this)._field_lookup.get()._method_find_struct(_98830_decl->_field_ident,_98830_decl->_field_cpp_linked);
	if (jule::real(_103217_s)) {
		return (*this)._method_from_struct(_98830_decl,_103217_s);
	}
	jule::Ref<_104a21a10_TypeAlias> _103717_ta = (*this)._field_lookup.get()._method_find_type_alias(_98830_decl->_field_ident,_98830_decl->_field_cpp_linked);
	if ((!(jule::real(_103717_ta)))) {
		_103717_ta=_104b4ffd0_find_builtin_type_alias(_98830_decl->_field_ident);
	}
	if (jule::real(_103717_ta)) {
		return (*this)._method_from_type_alias(_98830_decl,_103717_ta);
	}
	(*this)._method_push_err(_98830_decl->_field_token,jule::Str("identifier is not exist: @", 26),jule::Slice<jule::Any>({jule::Any(_98830_decl->_field_ident)}));
	return nullptr;
}



inline jule::Trait<_104a21a10_Kind> _104a21a10_TypeChecker::_method_build_ident(jule::Ref<_1487f5920_IdentTypeDecl> _104934_decl) {
	{
		if (!((_104a21a10_is_prim(_104934_decl->_field_ident)))) { goto _case_end_4387967648; }
		_case_begin_4387967648:;
		{
			return (*this)._method_build_prim(_104934_decl);
		}
		goto _match_end_4387965760;
		_case_end_4387967648:;
		_case_begin_4387965904:;
		{
			return (*this)._method_get_def(_104934_decl);
		}
		goto _match_end_4387965760;
		_case_end_4387965904:;
		_match_end_4387965760:;
	}
}



inline jule::Ref<_104a21a10_Ref> _104a21a10_TypeChecker::_method_build_ref_from_type(jule::Ref<_104a21a10_TypeKind> _105642_elem) {
	{
		if (!(((!(jule::real(_105642_elem)))))) { goto _case_end_4387970336; }
		_case_begin_4387970336:;
		{
			return jule::new_ref<_104a21a10_Ref>();
		}
		goto _match_end_4387970064;
		_case_end_4387970336:;
		if (!((jule::real(_105642_elem->_method_strct())))) { goto _case_end_4387970448; }
		_case_begin_4387970448:;
		{
			jule::Ref<_1037370d0_StructIns> _106317_s = _105642_elem->_method_strct();
			if (jule::real(_106317_s->_field_decl) && _106317_s->_field_decl->_field_cpp_linked) {
				(*this)._method_push_err((*this)._field_error_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>({}));
				return jule::new_ref<_104a21a10_Ref>();
			}
		}
		goto _match_end_4387970064;
		_case_end_4387970448:;
		if (!((jule::real(_105642_elem->_method_ref())))) { goto _case_end_4387970576; }
		_case_begin_4387970576:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("references cannot reference to another reference", 48),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_Ref>();
		}
		goto _match_end_4387970064;
		_case_end_4387970576:;
		if (!((jule::real(_105642_elem->_method_ptr())))) { goto _case_end_4387970704; }
		_case_begin_4387970704:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("references cannot reference to pointer", 38),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_Ref>();
		}
		goto _match_end_4387970064;
		_case_end_4387970704:;
		if (!((jule::real(_105642_elem->_method_enm())))) { goto _case_end_4387970832; }
		_case_begin_4387970832:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("references cannot reference to enum", 35),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_Ref>();
		}
		goto _match_end_4387970064;
		_case_end_4387970832:;
		if (!((jule::real(_105642_elem->_method_arr())))) { goto _case_end_4387970960; }
		_case_begin_4387970960:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("references cannot reference to array", 36),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_Ref>();
		}
		goto _match_end_4387970064;
		_case_end_4387970960:;
		_match_end_4387970064:;
	}
	return jule::new_struct<_104a21a10_Ref>(new( std::nothrow ) _104a21a10_Ref(_105642_elem));
}



inline jule::Ref<_104a21a10_Ref> _104a21a10_TypeChecker::_method_build_ref(jule::Ref<_1487f5920_RefTypeDecl> _109132_decl) {
	jule::Bool _109213_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_109213_not_plain;
	});
	jule::Ref<_104a21a10_TypeKind> _109617_elem = (*this)._method_check_decl(_109132_decl->_field_elem);
	return (*this)._method_build_ref_from_type(_109617_elem);
}



inline jule::Ref<_104a21a10_Ptr> _104a21a10_TypeChecker::_method_build_ptr_from_type(jule::Ref<_104a21a10_TypeKind> _110042_elem) {
	{
		if (!(((!(jule::real(_110042_elem)))))) { goto _case_end_4387995648; }
		_case_begin_4387995648:;
		{
			return jule::new_ref<_104a21a10_Ptr>();
		}
		goto _match_end_4387995424;
		_case_end_4387995648:;
		if (!((jule::real(_110042_elem->_method_ref())))) { goto _case_end_4387995776; }
		_case_begin_4387995776:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("pointers cannot point to reference", 34),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_Ptr>();
		}
		goto _match_end_4387995424;
		_case_end_4387995776:;
		if (!((jule::real(_110042_elem->_method_enm())))) { goto _case_end_4387995904; }
		_case_begin_4387995904:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("pointers cannot point to enum", 29),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_Ptr>();
		}
		goto _match_end_4387995424;
		_case_end_4387995904:;
		if (!((jule::real(_110042_elem->_method_arr()) && _110042_elem->_method_arr()->_field_auto))) { goto _case_end_4387996032; }
		_case_begin_4387996032:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_Ptr>();
		}
		goto _match_end_4387995424;
		_case_end_4387996032:;
		_match_end_4387995424:;
	}
	return jule::new_struct<_104a21a10_Ptr>(new( std::nothrow ) _104a21a10_Ptr(_110042_elem));
}



inline jule::Ref<_104a21a10_Ptr> _104a21a10_TypeChecker::_method_build_ptr(jule::Ref<_1487f5920_PtrTypeDecl> _112432_decl) {
	jule::Bool _112513_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_112513_not_plain;
	});
	jule::Ref<_104a21a10_TypeKind> _112917_elem = jule::new_ref<_104a21a10_TypeKind>();
	if ((!(_112432_decl->_method_is_unsafe()))) {
		_112917_elem=(*this)._method_check_decl(_112432_decl->_field_elem);
		return (*this)._method_build_ptr_from_type(_112917_elem);
	}
	return jule::new_struct<_104a21a10_Ptr>(new( std::nothrow ) _104a21a10_Ptr(_112917_elem));
}



inline jule::Ref<_104a21a10_Slc> _104a21a10_TypeChecker::_method_build_slc(jule::Ref<_1487f5920_SlcTypeDecl> _114132_decl) {
	jule::Bool _114213_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_114213_not_plain;
	});
	jule::Ref<_104a21a10_TypeKind> _114617_elem = (*this)._method_check_decl(_114132_decl->_field_elem);
	{
		if (!(((!(jule::real(_114617_elem)))))) { goto _case_end_4388020608; }
		_case_begin_4388020608:;
		{
			return jule::new_ref<_104a21a10_Slc>();
		}
		goto _match_end_4388020400;
		_case_end_4388020608:;
		if (!((jule::real(_114617_elem->_method_arr()) && _114617_elem->_method_arr()->_field_auto))) { goto _case_end_4388020720; }
		_case_begin_4388020720:;
		{
			(*this)._method_push_err(_114132_decl->_field_elem->_field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_Slc>();
		}
		goto _match_end_4388020400;
		_case_end_4388020720:;
		_match_end_4388020400:;
	}
	return jule::new_struct<_104a21a10_Slc>(new( std::nothrow ) _104a21a10_Slc(_114617_elem));
}



inline jule::Ref<_104a21a10_Arr> _104a21a10_TypeChecker::_method_build_arr(jule::Ref<_1487f5920_ArrTypeDecl> _116332_decl) {
	jule::Bool _116413_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_116413_not_plain;
	});
	jule::Int _116817_n = 0LL;
	if ((!(_116332_decl->_method_auto_sized()))) {
		jule::Ref<_1191dc300_Data> _117121_size = (*this)._field_s->_method_eval(_116332_decl->_field_size,(*this)._field_lookup);
		if ((!(jule::real(_117121_size)))) {
			return jule::new_ref<_104a21a10_Arr>();
		}
		if ((!(_117121_size->_method_is_const()))) {
			(*this)._method_push_err(_116332_decl->_field_elem->_field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_Arr>();
		} else if ((!(_104c56790_is_int(_117121_size->_field_kind->_method_prim()->_field_kind)))) {
			(*this)._method_push_err(_116332_decl->_field_elem->_field_token,jule::Str("array size must be integer", 26),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_Arr>();
		}
		_116817_n=static_cast<jule::Int>(_117121_size->_field_constant->_method_as_i64());
		if (_116817_n < 0LL) {
			(*this)._method_push_err(_116332_decl->_field_elem->_field_token,jule::Str("array size must be positive integer", 35),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_Arr>();
		}
	}
	jule::Ref<_104a21a10_TypeKind> _119117_elem = (*this)._method_check_decl(_116332_decl->_field_elem);
	{
		if (!(((!(jule::real(_119117_elem)))))) { goto _case_end_4388046448; }
		_case_begin_4388046448:;
		{
			return jule::new_ref<_104a21a10_Arr>();
		}
		goto _match_end_4388045360;
		_case_end_4388046448:;
		if (!((jule::real(_119117_elem->_method_arr()) && _119117_elem->_method_arr()->_field_auto))) { goto _case_end_4388046560; }
		_case_begin_4388046560:;
		{
			(*this)._method_push_err(_116332_decl->_field_elem->_field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_Arr>();
		}
		goto _match_end_4388045360;
		_case_end_4388046560:;
		_match_end_4388045360:;
	}
	return jule::new_struct<_104a21a10_Arr>(new( std::nothrow ) _104a21a10_Arr(_116332_decl->_method_auto_sized(),_116817_n,_119117_elem));
}



inline jule::Ref<_104a21a10_Map> _104a21a10_TypeChecker::_method_build_map(jule::Ref<_1487f5920_MapTypeDecl> _121032_decl) {
	jule::Bool _121113_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_121113_not_plain;
	});
	jule::Ref<_104a21a10_TypeKind> _121517_key = (*this)._method_check_decl(_121032_decl->_field_key);
	if ((!(jule::real(_121517_key)))) {
		return jule::new_ref<_104a21a10_Map>();
	}
	jule::Ref<_104a21a10_TypeKind> _122017_val = (*this)._method_check_decl(_121032_decl->_field_val);
	if ((!(jule::real(_122017_val)))) {
		return jule::new_ref<_104a21a10_Map>();
	}
	if (jule::real(_122017_val->_method_enm())) {
		(*this)._method_push_err(_121032_decl->_field_val->_field_token,jule::Str("maps do not support enums as map key type", 41),jule::Slice<jule::Any>({}));
	}
	return jule::new_struct<_104a21a10_Map>(new( std::nothrow ) _104a21a10_Map(_121517_key,_122017_val));
}



inline jule::Ref<_104a21a10_Tuple> _104a21a10_TypeChecker::_method_build_tuple(jule::Ref<_1487f5920_TupleTypeDecl> _123434_decl) {
	jule::Slice<jule::Ref<_104a21a10_TypeKind>> _123517_types = jule::Slice<jule::Ref<_104a21a10_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_123434_decl->_field_types.len())));
	{
		auto __julec_range_expr = _123434_decl->_field_types;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104a21a10_i = 0;
			jule::Ref<_1487f5920_TypeDecl> _104a21a10_t = *__julec_range_begin;
			_iter_begin_4388069520:;
			{
				jule::Ref<_104a21a10_TypeKind> _123721_kind = (*this)._method_check_decl(_104a21a10_t);
				if ((!(jule::real(_123721_kind)))) {
					return jule::new_ref<_104a21a10_Tuple>();
				}
				_123517_types[static_cast<jule::Int>(_104a21a10_i)]=_123721_kind;
			}
			_iter_next_4388069520:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104a21a10_i; _104a21a10_t = *__julec_range_begin; goto _iter_begin_4388069520; }
			_iter_end_4388069520:;
		}
	}
	return jule::new_struct<_104a21a10_Tuple>(new( std::nothrow ) _104a21a10_Tuple(_123517_types));
}



inline jule::Bool _104a21a10_TypeChecker::_method_check_fn_types(jule::Ref<_1037649f0_FnIns> _124737_f) {
	jule::Bool _124750_ok = jule::Bool();
	{
		auto __julec_range_expr = _124737_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_ParamIns> _104a21a10_p = *__julec_range_begin;
			_iter_begin_4388077872:;
			{
				_104a21a10_p->_field_kind=(*this)._method_build(_104a21a10_p->_field_decl->_field_kind->_field_decl->_field_kind);
				_124750_ok=jule::real(_104a21a10_p->_field_kind);
				if ((!(_124750_ok))) {
					_124750_ok = false;
					return _124750_ok;
				}
			}
			_iter_next_4388077872:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104a21a10_p = *__julec_range_begin; goto _iter_begin_4388077872; }
			_iter_end_4388077872:;
		}
	}
	if ((!(_124737_f->_field_decl->_method_is_void()))) {
		_124737_f->_field_result=(*this)._method_build(_124737_f->_field_decl->_field_result->_field_kind->_field_decl->_field_kind);
		_124750_ok = jule::real(_124737_f->_field_result);
		return _124750_ok;
	}
	_124750_ok = true;
	return _124750_ok;
}



inline jule::Ref<_1037649f0_FnIns> _104a21a10_TypeChecker::_method_build_fn(jule::Ref<_1487f5920_FnDecl> _126431_decl) {
	if (_126431_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_126431_decl->_field_token,jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1037649f0_FnIns>();
	}
	jule::Ref<_1037649f0_Fn> _127017_f = _1036da950_build_fn(_126431_decl);
	jule::Ref<_1037649f0_FnIns> _127117_ins = _127017_f->_method_instance_force();
	_127117_ins->_field_anon=true;
	jule::Bool _127413_ok = (*this)._method_check_fn_types(_127117_ins);
	if ((!(_127413_ok))) {
		return jule::new_ref<_1037649f0_FnIns>();
	}
	return _127117_ins;
}



inline jule::Trait<_104a21a10_Kind> _104a21a10_TypeChecker::_method_build_by_namespace(jule::Ref<_1487f5920_NamespaceTypeDecl> _128241_decl) {
	jule::Str _128313_path = _104a21a10_build_link_path_by_tokens(_128241_decl->_field_idents);
	jule::Ref<_119162660_ImportInfo> _128417_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)>([=](jule::Ref<_119162660_ImportInfo> _128453_imp) mutable -> jule::Bool {
		if ((_128241_decl->_field_idents.len() == 1LL) && (_128453_imp->_field_alias == _128313_path)) {
			return true;
		}
		return _128453_imp->_field_std && (_128453_imp->_field_link_path == _128313_path);
	}));
	if ((!(jule::real(_128417_imp))) || (!(_128417_imp->_method_is_lookupable(jule::Str("self", 4))))) {
		(*this)._method_push_err(_128241_decl->_field_idents[0LL],jule::Str("namespace not exist: @", 22),jule::Slice<jule::Any>({jule::Any(_128313_path)}));
		return nullptr;
	}
	jule::Trait<_10459ee60_Lookup> _129617_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_128417_imp;
	jule::Trait<_104a21a10_Kind> _129917_kind = (*this)._method_build_ident(_128241_decl->_field_kind);
	(*this)._field_lookup=_129617_lookup;
	return _129917_kind;
}



inline jule::Ref<_104a21a10_TypeKind> _104a21a10_TypeChecker::_method_build(jule::Any _130628_decl_kind) {
	jule::Trait<_104a21a10_Kind> _130717_kind = nullptr;
	{
		auto _match_expr{ _130628_decl_kind };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_TypeKind>>())) { goto _case_end_4388118096; }
		_case_begin_4388118096:;
		{
			_130717_kind=_130628_decl_kind.operator jule::Ref<_104a21a10_TypeKind>();
		}
		goto _match_end_4388114224;
		_case_end_4388118096:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_IdentTypeDecl>>())) { goto _case_end_4388117696; }
		_case_begin_4388117696:;
		{
			jule::Trait<_104a21a10_Kind> _131421_t = (*this)._method_build_ident(_130628_decl_kind.operator jule::Ref<_1487f5920_IdentTypeDecl>());
			if (_131421_t != nullptr) {
				_130717_kind=_131421_t;
			}
		}
		goto _match_end_4388114224;
		_case_end_4388117696:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_RefTypeDecl>>())) { goto _case_end_4388118256; }
		_case_begin_4388118256:;
		{
			jule::Ref<_104a21a10_Ref> _132021_t = (*this)._method_build_ref(_130628_decl_kind.operator jule::Ref<_1487f5920_RefTypeDecl>());
			if (jule::real(_132021_t)) {
				_130717_kind=_132021_t;
			}
		}
		goto _match_end_4388114224;
		_case_end_4388118256:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_PtrTypeDecl>>())) { goto _case_end_4388115056; }
		_case_begin_4388115056:;
		{
			jule::Ref<_104a21a10_Ptr> _132621_t = (*this)._method_build_ptr(_130628_decl_kind.operator jule::Ref<_1487f5920_PtrTypeDecl>());
			if (jule::real(_132621_t)) {
				_130717_kind=_132621_t;
			}
		}
		goto _match_end_4388114224;
		_case_end_4388115056:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_SlcTypeDecl>>())) { goto _case_end_4388115168; }
		_case_begin_4388115168:;
		{
			jule::Ref<_104a21a10_Slc> _133221_t = (*this)._method_build_slc(_130628_decl_kind.operator jule::Ref<_1487f5920_SlcTypeDecl>());
			if (jule::real(_133221_t)) {
				_130717_kind=_133221_t;
			}
		}
		goto _match_end_4388114224;
		_case_end_4388115168:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_ArrTypeDecl>>())) { goto _case_end_4388115280; }
		_case_begin_4388115280:;
		{
			jule::Ref<_104a21a10_Arr> _133821_t = (*this)._method_build_arr(_130628_decl_kind.operator jule::Ref<_1487f5920_ArrTypeDecl>());
			if (jule::real(_133821_t)) {
				_130717_kind=_133821_t;
			}
		}
		goto _match_end_4388114224;
		_case_end_4388115280:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_MapTypeDecl>>())) { goto _case_end_4388117088; }
		_case_begin_4388117088:;
		{
			jule::Ref<_104a21a10_Map> _134421_t = (*this)._method_build_map(_130628_decl_kind.operator jule::Ref<_1487f5920_MapTypeDecl>());
			if (jule::real(_134421_t)) {
				_130717_kind=_134421_t;
			}
		}
		goto _match_end_4388114224;
		_case_end_4388117088:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_TupleTypeDecl>>())) { goto _case_end_4388117200; }
		_case_begin_4388117200:;
		{
			jule::Ref<_104a21a10_Tuple> _135021_t = (*this)._method_build_tuple(_130628_decl_kind.operator jule::Ref<_1487f5920_TupleTypeDecl>());
			if (jule::real(_135021_t)) {
				_130717_kind=_135021_t;
			}
		}
		goto _match_end_4388114224;
		_case_end_4388117200:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_FnDecl>>())) { goto _case_end_4388117312; }
		_case_begin_4388117312:;
		{
			jule::Ref<_1037649f0_FnIns> _135621_t = (*this)._method_build_fn(_130628_decl_kind.operator jule::Ref<_1487f5920_FnDecl>());
			if (jule::real(_135621_t)) {
				_130717_kind=_135621_t;
			}
		}
		goto _match_end_4388114224;
		_case_end_4388117312:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_NamespaceTypeDecl>>())) { goto _case_end_4388117424; }
		_case_begin_4388117424:;
		{
			jule::Trait<_104a21a10_Kind> _136221_t = (*this)._method_build_by_namespace(_130628_decl_kind.operator jule::Ref<_1487f5920_NamespaceTypeDecl>());
			if (_136221_t != nullptr) {
				_130717_kind=_136221_t;
			}
		}
		goto _match_end_4388114224;
		_case_end_4388117424:;
		_case_begin_4388114640:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid data-type", 17),jule::Slice<jule::Any>({}));
			return jule::new_ref<_104a21a10_TypeKind>();
		}
		goto _match_end_4388114224;
		_case_end_4388114640:;
		_match_end_4388114224:;
	}
	if (_130717_kind == nullptr) {
		return jule::new_ref<_104a21a10_TypeKind>();
	}
	{
		auto _match_expr{ _130717_kind };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_TypeKind>>())) { goto _case_end_4388147936; }
		_case_begin_4388147936:;
		{
			return _130717_kind.operator jule::Ref<_104a21a10_TypeKind>();
		}
		goto _match_end_4388146480;
		_case_end_4388147936:;
		_case_begin_4388147248:;
		{
			return jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_130717_kind));
		}
		goto _match_end_4388146480;
		_case_end_4388147248:;
		_match_end_4388146480:;
	}
}



inline jule::Ref<_104a21a10_TypeKind> _104a21a10_TypeChecker::_method_check_decl(jule::Ref<_1487f5920_TypeDecl> _138733_decl) {
	_108e15ff0_Token _138917_error_token = (*this)._field_error_token;
	(*this)._field_error_token=_138733_decl->_field_token;
	jule::Ref<_104a21a10_TypeKind> _139217_kind = (*this)._method_build(_138733_decl->_field_kind);
	(*this)._field_error_token=_138917_error_token;
	return _139217_kind;
}



inline void _104a21a10_TypeChecker::_method_check(jule::Ref<_104a21a10_TypeSymbol> _139828_t) {
	if ((!(jule::real(_139828_t->_field_decl)))) {
		return;
	}
	jule::Ref<_104a21a10_TypeKind> _140317_kind = (*this)._method_check_decl(_139828_t->_field_decl);
	if ((!(jule::real(_140317_kind)))) {
		_139828_t->_method_remove_kind();
		return;
	}
	_139828_t->_field_kind=_140317_kind;
}







std::ostream &operator<<(std::ostream &_Stream, const _104a21a10_TypeChecker &_Src) {
	_Stream << "TypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "referencer:" << _Src._field_referencer << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "ignore_generics:" << _Src._field_ignore_generics << ", ";
	_Stream << "use_generics:" << _Src._field_use_generics << ", ";
	_Stream << "not_plain:" << _Src._field_not_plain;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104a21a10_TypeAlias &_Src) {
	_Stream << "TypeAlias{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "refers:" << _Src._field_refers;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1191dc300_BinopSolver::_method_check_type_compatibility(void) {
	_1044463d0_TypeCompatibilityChecker _325817_tcc = _1044463d0_TypeCompatibilityChecker((*this)._field_e->_field_s,(*this)._field_l->_field_kind,(*this)._field_r->_field_kind,(*this)._field_op,jule::Bool(),true,jule::Bool());
	return _325817_tcc._method_check();
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_nil(void) {
	if ((!(_104a21a10_is_nil_compatible((*this)._field_r->_field_kind)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("nil", 3)),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4389714288; }
		_case_begin_4389714288:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4389709808;
		_case_end_4389714288:;
		_case_begin_4389705024:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("nil", 3))}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389709808;
		_case_end_4389705024:;
		_match_end_4389709808:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_enum(void) {
	jule::Ref<_1036dad50_Enum> _329017_enm = (*this)._field_l->_field_kind->_method_enm();
	if ((!(jule::real((*this)._field_r->_field_kind->_method_enm()))) || ((_329017_enm).alloc != ((*this)._field_r->_field_kind->_method_enm()).alloc)) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_329017_enm->_field_ident),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4389729088; }
		_case_begin_4389729088:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4389722736;
		_case_end_4389729088:;
		if (!((jule::Str("&", 1)) == _match_expr || (jule::Str("|", 1)) == _match_expr)) { goto _case_end_4389729648; }
		_case_begin_4389729648:;
		{
			if ((!(jule::real(_329017_enm->_field_kind->_field_kind->_method_prim()))) || (!(_104c56790_is_int(_329017_enm->_field_kind->_field_kind->_method_prim()->_method_to_str())))) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(_329017_enm->_field_ident)}));
			}
			return (*this)._field_l;
		}
		goto _match_end_4389722736;
		_case_end_4389729648:;
		_case_begin_4389724448:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(_329017_enm->_field_ident)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389722736;
		_case_end_4389724448:;
		_match_end_4389722736:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_ptr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str("<=", 2)) == _match_expr || (jule::Str(">=", 2)) == _match_expr)) { goto _case_end_4389748560; }
		_case_begin_4389748560:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4389743904;
		_case_end_4389748560:;
		_case_begin_4389737888:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389743904;
		_case_end_4389737888:;
		_match_end_4389743904:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_arr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4389761520; }
		_case_begin_4389761520:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4389756896;
		_case_end_4389761520:;
		_case_begin_4389755840:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389756896;
		_case_end_4389755840:;
		_match_end_4389756896:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_slc(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4389774000; }
		_case_begin_4389774000:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4389769408;
		_case_end_4389774000:;
		_case_begin_4389768320:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389769408;
		_case_end_4389768320:;
		_match_end_4389769408:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_fn(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4389786544; }
		_case_begin_4389786544:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4389781888;
		_case_end_4389786544:;
		_case_begin_4389780832:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389781888;
		_case_end_4389780832:;
		_match_end_4389781888:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_struct(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4389799888; }
		_case_begin_4389799888:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4389795296;
		_case_end_4389799888:;
		_case_begin_4389794144:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4389795296;
		_case_end_4389794144:;
		_match_end_4389795296:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_trait(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4395863904; }
		_case_begin_4395863904:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4395853488;
		_case_end_4395863904:;
		_case_begin_4395858848:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4395853488;
		_case_end_4395858848:;
		_match_end_4395853488:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_any(void) {
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4395867936; }
		_case_begin_4395867936:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4395859568;
		_case_end_4395867936:;
		_case_begin_4395866752:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("any", 3))}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4395859568;
		_case_end_4395866752:;
		_match_end_4395859568:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_bool(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("&&", 2)) == _match_expr || (jule::Str("||", 2)) == _match_expr)) { goto _case_end_4395883760; }
		_case_begin_4395883760:;
		{
			return (*this)._field_l;
		}
		goto _match_end_4395879168;
		_case_end_4395883760:;
		_case_begin_4395878080:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4395879168;
		_case_end_4395878080:;
		_match_end_4395879168:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_str(void) {
	jule::Str _348417_rk = (*this)._field_r->_field_kind->_method_to_str();
	if (_348417_rk != jule::Str("str", 3)) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any(_348417_rk)}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("+", 1)) == _match_expr)) { goto _case_end_4395894992; }
		_case_begin_4395894992:;
		{
			return (*this)._field_l;
		}
		goto _match_end_4395888016;
		_case_end_4395894992:;
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4395896416; }
		_case_begin_4395896416:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4395888016;
		_case_end_4395896416:;
		_case_begin_4395891824:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("any", 3))}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4395888016;
		_case_end_4395891824:;
		_match_end_4395888016:;
	}
}



inline void _1191dc300_BinopSolver::_method_set_type_to_greater(void) {
	if (((*this)._field_l->_method_is_const() && (*this)._field_r->_method_is_const()) || ((!((*this)._field_l->_method_is_const())) && (!((*this)._field_r->_method_is_const())))) {
		jule::Str _351017_lk = (*this)._field_l->_field_kind->_method_to_str();
		jule::Str _351117_rk = (*this)._field_r->_field_kind->_method_to_str();
		if (_104cc26b0_is_greater(_351117_rk,_351017_lk)) {
			(*this)._field_l->_field_kind=(*this)._field_r->_field_kind;
		}
		return;
	}
	if ((*this)._field_l->_method_is_const()) {
		(*this)._field_l->_field_kind=(*this)._field_r->_field_kind;
		return;
	}
	(*this)._field_r->_field_kind=(*this)._field_l->_field_kind;
}



inline void _1191dc300_BinopSolver::_method_check_mod_data(jule::Ref<_1191dc300_Data> _352637_d) {
	if ((!(_352637_d->_method_is_const()))) {
		if ((!(jule::real(_352637_d->_field_kind->_method_prim()))) || (!(_104c56790_is_int(_352637_d->_field_kind->_method_prim()->_field_kind)))) {
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>({}));
		}
		return;
	}
	{
		if (!((_1044463d0_sig_assignable(jule::Str("i64", 3),_352637_d)))) { goto _case_end_4395920416; }
		_case_begin_4395920416:;
		{
			_352637_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_352637_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4395912640;
		_case_end_4395920416:;
		if (!((_1044463d0_unsig_assignable(jule::Str("u64", 3),_352637_d)))) { goto _case_end_4395920528; }
		_case_begin_4395920528:;
		{
			_352637_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_352637_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4395912640;
		_case_end_4395920528:;
		_case_begin_4395912832:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4395912640;
		_case_end_4395912832:;
		_match_end_4395912640:;
	}
}



inline void _1191dc300_BinopSolver::_method_mod(void) {
	(*this)._method_check_mod_data((*this)._field_l);
	(*this)._method_check_mod_data((*this)._field_r);
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_float(void) {
	jule::Str _355213_lk = (*this)._field_l->_field_kind->_method_to_str();
	jule::Str _355313_rk = (*this)._field_r->_field_kind->_method_to_str();
	if ((!(_104c56790_is_num(_355213_lk))) || (!(_104c56790_is_num(_355313_rk)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_355213_lk),jule::Any(_355313_rk)}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str(">=", 2)) == _match_expr || (jule::Str("<=", 2)) == _match_expr)) { goto _case_end_4395937392; }
		_case_begin_4395937392:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4395936656;
		_case_end_4395937392:;
		_match_end_4395936656:;
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("+", 1)) == _match_expr || (jule::Str("-", 1)) == _match_expr || (jule::Str("*", 1)) == _match_expr || (jule::Str("/", 1)) == _match_expr)) { goto _case_end_4395944144; }
		_case_begin_4395944144:;
		{
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4395940032;
		_case_end_4395944144:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4395944720; }
		_case_begin_4395944720:;
		{
			if ((!(_104c56790_is_int(_355313_rk)))) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_355213_lk),jule::Any(_355313_rk)}));
				return jule::new_ref<_1191dc300_Data>();
			}
			(*this)._method_mod();
			return (*this)._field_r;
		}
		goto _match_end_4395940032;
		_case_end_4395944720:;
		_case_begin_4395937712:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for floating-point type(s)", 52),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4395940032;
		_case_end_4395937712:;
		_match_end_4395940032:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_unsig_int(void) {
	jule::Str _359813_lk = (*this)._field_l->_field_kind->_method_to_str();
	jule::Str _359913_rk = (*this)._field_r->_field_kind->_method_to_str();
	if ((!(_104c56790_is_num(_359813_lk))) || (!(_104c56790_is_num(_359913_rk)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_359813_lk),jule::Any(_359913_rk)}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str(">=", 2)) == _match_expr || (jule::Str("<=", 2)) == _match_expr)) { goto _case_end_4395954816; }
		_case_begin_4395954816:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4395958160;
		_case_end_4395954816:;
		_match_end_4395958160:;
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("+", 1)) == _match_expr || (jule::Str("-", 1)) == _match_expr || (jule::Str("*", 1)) == _match_expr || (jule::Str("/", 1)) == _match_expr || (jule::Str("&", 1)) == _match_expr || (jule::Str("|", 1)) == _match_expr || (jule::Str("^", 1)) == _match_expr)) { goto _case_end_4395965616; }
		_case_begin_4395965616:;
		{
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4395961504;
		_case_end_4395965616:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4395966192; }
		_case_begin_4395966192:;
		{
			(*this)._method_mod();
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4395961504;
		_case_end_4395966192:;
		if (!((jule::Str("<<", 2)) == _match_expr || (jule::Str(">>", 2)) == _match_expr)) { goto _case_end_4395965856; }
		_case_begin_4395965856:;
		{
			if ((!(_1191dc300_is_ok_for_shifting((*this)._field_r)))) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>({}));
				return jule::new_ref<_1191dc300_Data>();
			}
			if ((*this)._field_l->_method_is_const()) {
				(*this)._field_l->_field_kind=(*this)._field_r->_field_kind;
			}
			return (*this)._field_l;
		}
		goto _match_end_4395961504;
		_case_end_4395965856:;
		_case_begin_4395959104:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for unsigned integer type(s)", 54),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4395961504;
		_case_end_4395959104:;
		_match_end_4395961504:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_sig_int(void) {
	jule::Str _365713_lk = (*this)._field_l->_field_kind->_method_to_str();
	jule::Str _365813_rk = (*this)._field_r->_field_kind->_method_to_str();
	if ((!(_104c56790_is_num(_365713_lk))) || (!(_104c56790_is_num(_365813_rk)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_365713_lk),jule::Any(_365813_rk)}));
		return jule::new_ref<_1191dc300_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str(">=", 2)) == _match_expr || (jule::Str("<=", 2)) == _match_expr)) { goto _case_end_4387335424; }
		_case_begin_4387335424:;
		{
			return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
		}
		goto _match_end_4387334688;
		_case_end_4387335424:;
		_match_end_4387334688:;
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("+", 1)) == _match_expr || (jule::Str("-", 1)) == _match_expr || (jule::Str("*", 1)) == _match_expr || (jule::Str("/", 1)) == _match_expr || (jule::Str("&", 1)) == _match_expr || (jule::Str("|", 1)) == _match_expr || (jule::Str("^", 1)) == _match_expr)) { goto _case_end_4387342240; }
		_case_begin_4387342240:;
		{
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4387338096;
		_case_end_4387342240:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4387342800; }
		_case_begin_4387342800:;
		{
			(*this)._method_mod();
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4387338096;
		_case_end_4387342800:;
		if (!((jule::Str("<<", 2)) == _match_expr || (jule::Str(">>", 2)) == _match_expr)) { goto _case_end_4387342464; }
		_case_begin_4387342464:;
		{
			if ((!(_1191dc300_is_ok_for_shifting((*this)._field_r)))) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>({}));
				return jule::new_ref<_1191dc300_Data>();
			}
			return (*this)._field_l;
		}
		goto _match_end_4387338096;
		_case_end_4387342464:;
		_case_begin_4387339168:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for integer type(s)", 45),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4387338096;
		_case_end_4387339168:;
		_match_end_4387338096:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval_prim(void) {
	jule::Ref<_104a21a10_Prim> _371213_prim = (*this)._field_l->_field_kind->_method_prim();
	{
		if (!((_371213_prim->_method_is_any()))) { goto _case_end_4387352912; }
		_case_begin_4387352912:;
		{
			return (*this)._method_eval_any();
		}
		goto _match_end_4387352656;
		_case_end_4387352912:;
		if (!((_371213_prim->_method_is_bool()))) { goto _case_end_4387353024; }
		_case_begin_4387353024:;
		{
			return (*this)._method_eval_bool();
		}
		goto _match_end_4387352656;
		_case_end_4387353024:;
		if (!((_371213_prim->_method_is_str()))) { goto _case_end_4387353136; }
		_case_begin_4387353136:;
		{
			return (*this)._method_eval_str();
		}
		goto _match_end_4387352656;
		_case_end_4387353136:;
		_match_end_4387352656:;
	}
	jule::Ref<_104a21a10_Prim> _371913_rprim = (*this)._field_r->_field_kind->_method_prim();
	if ((!(jule::real(_371913_rprim)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_371213_prim->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Str _372513_lk = _371213_prim->_method_to_str();
	{
		if (!((_104c56790_is_float(_372513_lk)))) { goto _case_end_4387366848; }
		_case_begin_4387366848:;
		{
			return (*this)._method_eval_float();
		}
		goto _match_end_4387359536;
		_case_end_4387366848:;
		if (!((_104c56790_is_unsig_int(_372513_lk)))) { goto _case_end_4387365856; }
		_case_begin_4387365856:;
		{
			return (*this)._method_eval_unsig_int();
		}
		goto _match_end_4387359536;
		_case_end_4387365856:;
		if (!((_104c56790_is_sig_int(_372513_lk)))) { goto _case_end_4387366064; }
		_case_begin_4387366064:;
		{
			return (*this)._method_eval_sig_int();
		}
		goto _match_end_4387359536;
		_case_end_4387366064:;
		_case_begin_4387359664:;
		{
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4387359536;
		_case_end_4387359664:;
		_match_end_4387359536:;
	}
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_eval(void) {
	{
		if (!(((*this)._field_l->_field_kind->_method_is_void()))) { goto _case_end_4387372464; }
		_case_begin_4387372464:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("@ operator is not defined for @ type", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("void", 4))}));
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4387370480;
		_case_end_4387372464:;
		if (!(((*this)._field_l->_field_kind->_method_is_nil()))) { goto _case_end_4387373040; }
		_case_begin_4387373040:;
		{
			return (*this)._method_eval_nil();
		}
		goto _match_end_4387370480;
		_case_end_4387373040:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_enm())))) { goto _case_end_4387372256; }
		_case_begin_4387372256:;
		{
			return (*this)._method_eval_enum();
		}
		goto _match_end_4387370480;
		_case_end_4387372256:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_ptr())))) { goto _case_end_4387372704; }
		_case_begin_4387372704:;
		{
			return (*this)._method_eval_ptr();
		}
		goto _match_end_4387370480;
		_case_end_4387372704:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_arr())))) { goto _case_end_4387372816; }
		_case_begin_4387372816:;
		{
			return (*this)._method_eval_arr();
		}
		goto _match_end_4387370480;
		_case_end_4387372816:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_slc())))) { goto _case_end_4387371648; }
		_case_begin_4387371648:;
		{
			return (*this)._method_eval_slc();
		}
		goto _match_end_4387370480;
		_case_end_4387371648:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_fnc())))) { goto _case_end_4387371760; }
		_case_begin_4387371760:;
		{
			return (*this)._method_eval_fn();
		}
		goto _match_end_4387370480;
		_case_end_4387371760:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_trt()) || jule::real((*this)._field_r->_field_kind->_method_trt())))) { goto _case_end_4387371872; }
		_case_begin_4387371872:;
		{
			if (jule::real((*this)._field_r->_field_kind->_method_trt())) {
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
			}
			return (*this)._method_eval_trait();
		}
		goto _match_end_4387370480;
		_case_end_4387371872:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_strct())))) { goto _case_end_4387370944; }
		_case_begin_4387370944:;
		{
			return (*this)._method_eval_struct();
		}
		goto _match_end_4387370480;
		_case_end_4387370944:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_prim())))) { goto _case_end_4387371056; }
		_case_begin_4387371056:;
		{
			return (*this)._method_eval_prim();
		}
		goto _match_end_4387370480;
		_case_end_4387371056:;
		_case_begin_4387370640:;
		{
			return jule::new_ref<_1191dc300_Data>();
		}
		goto _match_end_4387370480;
		_case_end_4387370640:;
		_match_end_4387370480:;
	}
}



inline void _1191dc300_BinopSolver::_method_assign_shift(jule::Ref<_1191dc300_Data> _377531_d,jule::F64 _377541_r) {
	{
		if (!((_377541_r <= 6LL))) { goto _case_end_4387400560; }
		_case_begin_4387400560:;
		{
			_377531_d->_field_kind->_method_prim()->_field_kind=jule::Str("i8", 2);
			_377531_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_377531_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4387399552;
		_case_end_4387400560:;
		if (!((_377541_r <= 7LL))) { goto _case_end_4387400176; }
		_case_begin_4387400176:;
		{
			_377531_d->_field_kind->_method_prim()->_field_kind=jule::Str("u8", 2);
			_377531_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_377531_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4387399552;
		_case_end_4387400176:;
		if (!((_377541_r <= 14LL))) { goto _case_end_4387400288; }
		_case_begin_4387400288:;
		{
			_377531_d->_field_kind->_method_prim()->_field_kind=jule::Str("i16", 3);
			_377531_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_377531_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4387399552;
		_case_end_4387400288:;
		if (!((_377541_r <= 15LL))) { goto _case_end_4387403680; }
		_case_begin_4387403680:;
		{
			_377531_d->_field_kind->_method_prim()->_field_kind=jule::Str("u16", 3);
			_377531_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_377531_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4387399552;
		_case_end_4387403680:;
		if (!((_377541_r <= 30LL))) { goto _case_end_4387403792; }
		_case_begin_4387403792:;
		{
			_377531_d->_field_kind->_method_prim()->_field_kind=jule::Str("i32", 3);
			_377531_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_377531_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4387399552;
		_case_end_4387403792:;
		if (!((_377541_r <= 31LL))) { goto _case_end_4387403904; }
		_case_begin_4387403904:;
		{
			_377531_d->_field_kind->_method_prim()->_field_kind=jule::Str("u32", 3);
			_377531_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_377531_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4387399552;
		_case_end_4387403904:;
		if (!((_377541_r <= 62LL))) { goto _case_end_4387404016; }
		_case_begin_4387404016:;
		{
			_377531_d->_field_kind->_method_prim()->_field_kind=jule::Str("i64", 3);
			_377531_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_377531_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4387399552;
		_case_end_4387404016:;
		if (!((_377541_r <= 63LL))) { goto _case_end_4387404128; }
		_case_begin_4387404128:;
		{
			_377531_d->_field_kind->_method_prim()->_field_kind=jule::Str("u64", 3);
			_377531_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_377531_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4387399552;
		_case_end_4387404128:;
		if (!((_377541_r <= 127LL))) { goto _case_end_4387404240; }
		_case_begin_4387404240:;
		{
			_377531_d->_field_kind->_method_prim()->_field_kind=jule::Str("f32", 3);
			_377531_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_377531_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4387399552;
		_case_end_4387404240:;
		_case_begin_4387399712:;
		{
			_377531_d->_field_kind->_method_prim()->_field_kind=jule::Str("f64", 3);
			_377531_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_377531_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4387399552;
		_case_end_4387399712:;
		_match_end_4387399552:;
	}
}



inline void _1191dc300_BinopSolver::_method_solve_const(jule::Ref<_1191dc300_Data> _381934_d) {
	{
		if (!(((!(jule::real(_381934_d)))))) { goto _case_end_4387434880; }
		_case_begin_4387434880:;
		{
			return;
		}
		goto _match_end_4387434704;
		_case_end_4387434880:;
		if (!(((!((*this)._field_l->_method_is_const()))) || ((!((*this)._field_r->_method_is_const()))))) { goto _case_end_4387435008; }
		_case_begin_4387435008:;
		{
			jule::drop(_381934_d->_field_constant);
			return;
		}
		goto _match_end_4387434704;
		_case_end_4387435008:;
		_match_end_4387434704:;
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr)) { goto _case_end_4387439328; }
		_case_begin_4387439328:;
		{
			_381934_d->_field_constant=_104c409b0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_eqs((*this)._field_r->_field_constant));
		}
		goto _match_end_4387438640;
		_case_end_4387439328:;
		if (!((jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4387439440; }
		_case_begin_4387439440:;
		{
			_381934_d->_field_constant=_104c409b0_Const::_static_method_new_bool((!((*this)._field_l->_field_constant->_method_eqs((*this)._field_r->_field_constant))));
		}
		goto _match_end_4387438640;
		_case_end_4387439440:;
		if (!((jule::Str("::", 2)) == _match_expr)) { goto _case_end_4387439552; }
		_case_begin_4387439552:;
		{
			_381934_d->_field_constant=_104c409b0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_or((*this)._field_r->_field_constant));
		}
		goto _match_end_4387438640;
		_case_end_4387439552:;
		if (!((jule::Str("&&", 2)) == _match_expr)) { goto _case_end_4387439664; }
		_case_begin_4387439664:;
		{
			_381934_d->_field_constant=_104c409b0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_and((*this)._field_r->_field_constant));
		}
		goto _match_end_4387438640;
		_case_end_4387439664:;
		if (!((jule::Str(">", 1)) == _match_expr)) { goto _case_end_4387439776; }
		_case_begin_4387439776:;
		{
			_381934_d->_field_constant=_104c409b0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_gt((*this)._field_r->_field_constant));
		}
		goto _match_end_4387438640;
		_case_end_4387439776:;
		if (!((jule::Str("<", 1)) == _match_expr)) { goto _case_end_4387439888; }
		_case_begin_4387439888:;
		{
			_381934_d->_field_constant=_104c409b0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_lt((*this)._field_r->_field_constant));
		}
		goto _match_end_4387438640;
		_case_end_4387439888:;
		if (!((jule::Str(">=", 2)) == _match_expr)) { goto _case_end_4387440000; }
		_case_begin_4387440000:;
		{
			_381934_d->_field_constant=_104c409b0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_gt((*this)._field_r->_field_constant) || (*this)._field_l->_field_constant->_method_eqs((*this)._field_r->_field_constant));
		}
		goto _match_end_4387438640;
		_case_end_4387440000:;
		if (!((jule::Str("<=", 2)) == _match_expr)) { goto _case_end_4387440112; }
		_case_begin_4387440112:;
		{
			_381934_d->_field_constant=_104c409b0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_lt((*this)._field_r->_field_constant) || (*this)._field_l->_field_constant->_method_eqs((*this)._field_r->_field_constant));
		}
		goto _match_end_4387438640;
		_case_end_4387440112:;
		if (!((jule::Str("+", 1)) == _match_expr)) { goto _case_end_4387440224; }
		_case_begin_4387440224:;
		{
			(*this)._field_l->_field_constant->_method_add((*this)._field_r->_field_constant);
			_381934_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4387438640;
		_case_end_4387440224:;
		if (!((jule::Str("-", 1)) == _match_expr)) { goto _case_end_4387440336; }
		_case_begin_4387440336:;
		{
			(*this)._field_l->_field_constant->_method_sub((*this)._field_r->_field_constant);
			_381934_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4387438640;
		_case_end_4387440336:;
		if (!((jule::Str("*", 1)) == _match_expr)) { goto _case_end_4387440448; }
		_case_begin_4387440448:;
		{
			(*this)._field_l->_field_constant->_method_mul((*this)._field_r->_field_constant);
			_381934_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4387438640;
		_case_end_4387440448:;
		if (!((jule::Str("/", 1)) == _match_expr)) { goto _case_end_4387440560; }
		_case_begin_4387440560:;
		{
			jule::Bool _386917_ok = (*this)._field_l->_field_constant->_method_div((*this)._field_r->_field_constant);
			if ((!(_386917_ok)) && ((*this)._field_r->_field_constant->_method_as_f64() == 0LL)) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>({}));
			}
			_381934_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4387438640;
		_case_end_4387440560:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4387440672; }
		_case_begin_4387440672:;
		{
			jule::Bool _387617_ok = (*this)._field_l->_field_constant->_method_mod((*this)._field_r->_field_constant);
			if ((!(_387617_ok)) && ((*this)._field_r->_field_constant->_method_as_f64() == 0LL)) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>({}));
			}
			_381934_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4387438640;
		_case_end_4387440672:;
		if (!((jule::Str("|", 1)) == _match_expr)) { goto _case_end_4387440784; }
		_case_begin_4387440784:;
		{
			(*this)._field_l->_field_constant->_method_bitwise_or((*this)._field_r->_field_constant);
			_381934_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4387438640;
		_case_end_4387440784:;
		if (!((jule::Str("&", 1)) == _match_expr)) { goto _case_end_4387440912; }
		_case_begin_4387440912:;
		{
			(*this)._field_l->_field_constant->_method_bitwise_and((*this)._field_r->_field_constant);
			_381934_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4387438640;
		_case_end_4387440912:;
		if (!((jule::Str("^", 1)) == _match_expr)) { goto _case_end_4387441040; }
		_case_begin_4387441040:;
		{
			(*this)._field_l->_field_constant->_method_xor((*this)._field_r->_field_constant);
			_381934_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4387438640;
		_case_end_4387441040:;
		if (!((jule::Str("<<", 2)) == _match_expr)) { goto _case_end_4387441168; }
		_case_begin_4387441168:;
		{
			_381934_d->_field_constant=(*this)._field_l->_field_constant;
			(*this)._field_l->_field_constant->_method_lshift((*this)._field_r->_field_constant);
			(*this)._method_assign_shift(_381934_d,static_cast<jule::F64>((*this)._field_r->_field_constant->_method_as_f64()));
		}
		goto _match_end_4387438640;
		_case_end_4387441168:;
		if (!((jule::Str(">>", 2)) == _match_expr)) { goto _case_end_4387441296; }
		_case_begin_4387441296:;
		{
			_381934_d->_field_constant=(*this)._field_l->_field_constant;
			(*this)._field_l->_field_constant->_method_rshift((*this)._field_r->_field_constant);
			(*this)._method_assign_shift(_381934_d,static_cast<jule::F64>((*this)._field_r->_field_constant->_method_as_f64()));
		}
		goto _match_end_4387438640;
		_case_end_4387441296:;
		_match_end_4387438640:;
	}
	_381934_d->_field_model=jule::Any(_381934_d->_field_constant);
}



inline void _1191dc300_BinopSolver::_method_post_const(jule::Ref<_1191dc300_Data> _390829_d) {
	if ((!(jule::real(_390829_d)))) {
		return;
	}
	if ((!(_390829_d->_method_is_const()))) {
		return;
	}
	_1191dc300_normalize_bitsize(_390829_d);
}



inline void _1191dc300_BinopSolver::_method_prepare_data(jule::Ref<_1191dc300_Data> _391931_d) {
	if (jule::real(_391931_d) && jule::real(_391931_d->_field_kind->_method_ref())) {
		_391931_d->_field_kind=_391931_d->_field_kind->_method_ref()->_field_elem;
	}
}



inline void _1191dc300_BinopSolver::_method_prepare_eval(void) {
	(*this)._method_prepare_data((*this)._field_r);
	(*this)._method_prepare_data((*this)._field_l);
}



inline void _1191dc300_BinopSolver::_method_check_data(jule::Ref<_1191dc300_Data> _393033_d) {
	jule::Ref<_1037649f0_FnIns> _393113_f = _393033_d->_field_kind->_method_fnc();
	if ((jule::real(_393113_f) && jule::real(_393113_f->_field_decl)) && _393113_f->_field_decl->_method_is_method()) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("invalid expression used for binary operation", 44),jule::Slice<jule::Any>({}));
	}
}



inline void _1191dc300_BinopSolver::_method_check_datas(void) {
	(*this)._method_check_data((*this)._field_l);
	(*this)._method_check_data((*this)._field_r);
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_solve_explicit(jule::Ref<_1191dc300_Data> _394237_l,jule::Ref<_1191dc300_Data> _394251_r) {
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_394237_l,_394251_r);
	(*this)._method_prepare_eval();
	(*this)._method_check_datas();
	jule::Ref<_1191dc300_Data> _394817_d = (*this)._method_eval();
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_394237_l,_394251_r);
	(*this)._method_solve_const(_394817_d);
	(*this)._method_post_const(_394817_d);
	if (jule::real(_394817_d)) {
		_394817_d->_field_lvalue=_104a21a10_is_lvalue(_394817_d->_field_kind);
		if ((!(_394817_d->_method_is_const()))) {
			_394817_d->_field_model=jule::Any(jule::new_struct<_11911f320_BinopExprModel>(new( std::nothrow ) _11911f320_BinopExprModel(_394237_l->_field_model,_394251_r->_field_model,(*this)._field_op._field_kind)));
		}
	}
	return _394817_d;
}



inline jule::Ref<_1191dc300_Data> _1191dc300_BinopSolver::_method_solve(jule::Ref<_1487f5920_BinopExpr> _396828_op) {
	jule::Ref<_1191dc300_Data> _396917_l = (*this)._field_e->_method_eval_expr_kind(_396828_op->_field_left);
	if ((!(jule::real(_396917_l))) || (!(jule::real(_396917_l->_field_kind)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_1191dc300_Data> _397417_r = (*this)._field_e->_method_eval_expr_kind(_396828_op->_field_right);
	if ((!(jule::real(_397417_r))) || (!(jule::real(_397417_r->_field_kind)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	(*this)._field_op=_396828_op->_field_op;
	jule::Ref<_1191dc300_Data> _398117_d = (*this)._method_solve_explicit(_396917_l,_397417_r);
	if ((jule::real(_398117_d) && _396917_l->_field_is_rune) && _397417_r->_field_is_rune) {
		_398117_d->_field_is_rune=true;
	}
	return _398117_d;
}







std::ostream &operator<<(std::ostream &_Stream, const _1191dc300_BinopSolver &_Src) {
	_Stream << "BinopSolver{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline void _1044463d0_RetTypeChecker::_method_prepare_types(void) {
	(*this)._field_types=_1044463d0_get_fn_result_types((*this)._field_f);
}



inline void _1044463d0_RetTypeChecker::_method_prepare_exprs(jule::Ref<_1487f5920_Expr> _122836_e) {
	if ((!(jule::real(_122836_e)))) {
		return;
	}
	{
		auto _match_expr{ _122836_e->_field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_TupleExpr>>())) { goto _case_end_4395351168; }
		_case_begin_4395351168:;
		{
			(*this)._field_exprs=_122836_e->_field_kind.operator jule::Ref<_1487f5920_TupleExpr>()->_field_expr;
		}
		goto _match_end_4395350032;
		_case_end_4395351168:;
		_case_begin_4395350224:;
		{
			(*this)._field_exprs=jule::append((*this)._field_exprs,jule::Slice<jule::Ref<_1487f5920_Expr>>({_122836_e}));
		}
		goto _match_end_4395350032;
		_case_end_4395350224:;
		_match_end_4395350032:;
	}
}



inline void _1044463d0_RetTypeChecker::_method_ret_vars(void) {
	if ((*this)._field_f->_field_decl->_method_is_void()) {
		return;
	}
	(*this)._field_vars=jule::Slice<jule::Ref<_104598e40_Var>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>((*this)._field_f->_field_decl->_field_result->_field_idents.len())));
	jule::Ref<_104180810_ScopeChecker> _124817_root_scope = (*this)._field_sc->_method_get_root();
	jule::Int _125017_j = 0LL;
	{
		auto __julec_range_expr = (*this)._field_f->_field_decl->_field_result->_field_idents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1044463d0_i = 0;
			_108e15ff0_Token _1044463d0_ident = *__julec_range_begin;
			_iter_begin_4395362160:;
			{
				if ((!(_108e15ff0_is_ignore_ident(_1044463d0_ident._field_kind)))) {
					(*this)._field_vars[static_cast<jule::Int>(_1044463d0_i)]=_124817_root_scope->_field_table->_field_vars[static_cast<jule::Int>(_125017_j)];
					(_125017_j)++;
				} else {
					(*this)._field_vars[static_cast<jule::Int>(_1044463d0_i)]=jule::new_struct<_104598e40_Var>(new( std::nothrow ) _104598e40_Var(jule::Ref<_104180810_Scope>(),_108e15ff0_Token(),jule::Str("_", 1),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),(*this)._field_types[static_cast<jule::Int>(_1044463d0_i)])),jule::Ref<_1191dc300_Value>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Slice<jule::Ref<_1487f5920_Directive>>(),jule::Slice<jule::Ref<_104598e40_Var>>()));
				}
			}
			_iter_next_4395362160:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1044463d0_i; _1044463d0_ident = *__julec_range_begin; goto _iter_begin_4395362160; }
			_iter_end_4395362160:;
		}
	}
	if (_125017_j == 0LL) {
		(*this)._field_vars=nullptr;
	}
}



inline void _1044463d0_RetTypeChecker::_method_check_exprs(void) {
	if ((*this)._field_exprs.len() == 0LL) {
		return;
	}
	jule::Slice<jule::Ref<_1191dc300_Data>> _127417_datas = jule::Slice<jule::Ref<_1191dc300_Data>>::alloc(0LL,static_cast<jule::Int>(static_cast<jule::I64>((*this)._field_exprs.len())));
	{
		auto __julec_range_expr = (*this)._field_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1044463d0_i = 0;
			jule::Ref<_1487f5920_Expr> _1044463d0_expr = *__julec_range_begin;
			_iter_begin_4395375600:;
			{
				if (_1044463d0_i >= (*this)._field_types.len()) {
					goto _iter_end_4395375600;
				}
				jule::Ref<_104a21a10_TypeKind> _128121_t = (*this)._field_types[static_cast<jule::Int>(_1044463d0_i)];
				jule::Ref<_1191dc300_Data> _128321_d = (*this)._field_sc->_field_s->_method_evalp(_1044463d0_expr,(*this)._field_sc,_128121_t);
				if ((!(jule::real(_128321_d)))) {
					goto _iter_next_4395375600;
				}
				_127417_datas=jule::append(_127417_datas,jule::Slice<jule::Ref<_1191dc300_Data>>({_128321_d}));
				if ((!(_128321_d->_field_mutable)) && _104a21a10_is_mut(_128321_d->_field_kind)) {
					(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("mutable typed return expressions should be mutable", 50),jule::Slice<jule::Any>({}));
					return;
				}
				_1044463d0_AssignTypeChecker _129521_ac = _1044463d0_AssignTypeChecker((*this)._field_sc->_field_s,_128121_t,_128321_d,(*this)._field_error_token,jule::Bool());
				_129521_ac._method_check();
			}
			_iter_next_4395375600:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1044463d0_i; _1044463d0_expr = *__julec_range_begin; goto _iter_begin_4395375600; }
			_iter_end_4395375600:;
		}
	}
	if (_127417_datas.len() > 1LL) {
		(*this)._field_model=jule::Any(jule::new_struct<_11911f320_TupleExprModel>(new( std::nothrow ) _11911f320_TupleExprModel(_127417_datas)));
	} else if (_127417_datas.len() == 1LL) {
		(*this)._field_model=_127417_datas[0LL]->_field_model;
	}
}



inline jule::Bool _1044463d0_RetTypeChecker::_method_check(jule::Ref<_1487f5920_Expr> _131428_e) {
	(*this)._method_prepare_types();
	(*this)._method_prepare_exprs(_131428_e);
	(*this)._method_ret_vars();
	jule::I64 _131913_n = (*this)._field_exprs.len();
	if ((_131913_n == 0LL) && (!((*this)._field_f->_field_decl->_method_is_void()))) {
		if ((!((*this)._field_f->_field_decl->_method_any_var()))) {
			(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("return statements of non-void functions should have return expression", 69),jule::Slice<jule::Any>({}));
			return false;
		}
		return true;
	}
	if ((_131913_n > 0LL) && (*this)._field_f->_field_decl->_method_is_void()) {
		(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("void functions is cannot returns any value", 42),jule::Slice<jule::Any>({}));
		return false;
	}
	if (_131913_n > (*this)._field_types.len()) {
		(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("overflow return expressions", 27),jule::Slice<jule::Any>({}));
	} else if (_131913_n < (*this)._field_types.len()) {
		(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("missing return expressions for multi return", 43),jule::Slice<jule::Any>({}));
	}
	(*this)._method_check_exprs();
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1044463d0_RetTypeChecker &_Src) {
	_Stream << "RetTypeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "types:" << _Src._field_types << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}



inline void _1044463d0_FnCallArgChecker::_method_push_err_token(_108e15ff0_Token _69733_token,jule::Str _69747_fmt,jule::Slice<jule::Any> _69760_args) {
	(*this)._field_e->_field_s->_method_push_err(_69733_token,_69747_fmt,_69760_args);
}



inline void _1044463d0_FnCallArgChecker::_method_push_err(jule::Str _70127_fmt,jule::Slice<jule::Any> _70140_args) {
	(*this)._method_push_err_token((*this)._field_error_token,_70127_fmt,_70140_args);
}



inline jule::Slice<jule::Ref<_1037649f0_ParamIns>> _1044463d0_FnCallArgChecker::_method_get_params(void) {
	if ((((*this)._field_f->_field_params.len() > 0LL) && jule::real((*this)._field_f->_field_params[0LL]->_field_decl)) && (*this)._field_f->_field_params[0LL]->_field_decl->_method_is_self()) {
		return (*this)._field_f->_field_params.slice(1LL);
	}
	return (*this)._field_f->_field_params;
}



inline jule::Bool _1044463d0_FnCallArgChecker::_method_check_counts(jule::Slice<jule::Ref<_1037649f0_ParamIns>> _71231_params) {
	jule::Bool _71254_ok = jule::Bool();
	jule::I64 _71317_n = _71231_params.len();
	if ((_71317_n > 0LL) && _71231_params[0LL]->_field_decl->_method_is_self()) {
		(_71317_n)--;
	}
	jule::I64 _71817_diff = _71317_n - (*this)._field_args.len();
	{
		if (!((_71817_diff == 0LL))) { goto _case_end_4395037120; }
		_case_begin_4395037120:;
		{
			_71254_ok = true;
			return _71254_ok;
		}
		goto _match_end_4395036848;
		_case_end_4395037120:;
		if (!(((_71317_n > 0LL) && _71231_params[static_cast<jule::Int>(_71317_n - 1LL)]->_field_decl->_field_variadic))) { goto _case_end_4395037232; }
		_case_begin_4395037232:;
		{
			_71254_ok = true;
			return _71254_ok;
		}
		goto _match_end_4395036848;
		_case_end_4395037232:;
		if (!(((_71817_diff < 0LL) || (_71817_diff > _71231_params.len())))) { goto _case_end_4395037344; }
		_case_begin_4395037344:;
		{
			(*this)._method_push_err(jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
			_71254_ok = false;
			return _71254_ok;
		}
		goto _match_end_4395036848;
		_case_end_4395037344:;
		_match_end_4395036848:;
	}
	jule::Str _73117_idents = jule::Str("", 0);
	_iter_begin_4395041440:;
	if (!(_71817_diff > 0LL)) { goto _iter_end_4395041440; }
	{
		_73117_idents+=jule::Str(", ", 2) + _71231_params[static_cast<jule::Int>(_71317_n - _71817_diff)]->_field_decl->_field_ident;
	}
	_iter_next_4395041440:;
	(_71817_diff)--;
	goto _iter_begin_4395041440;
	_iter_end_4395041440:;
	_73117_idents=_73117_idents.slice(2LL);
	(*this)._method_push_err(jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_73117_idents)}));
	_71254_ok = false;
	return _71254_ok;
}



inline jule::Bool _1044463d0_FnCallArgChecker::_method_check_arg(jule::Ref<_1037649f0_ParamIns> _74132_p,jule::Ref<_1191dc300_Data> _74150_arg,_108e15ff0_Token _74166_error_token) {
	jule::Bool _74188_ok = jule::Bool();
	if ((*this)._field_dynamic_annotation) {
		_1044463d0_DynamicTypeAnnotation _74321_dta = _1044463d0_DynamicTypeAnnotation((*this)._field_e,(*this)._field_f,_74132_p,_74150_arg,_74166_error_token,nullptr);
		_74188_ok=_74321_dta._method_annotate();
		if ((!(_74188_ok))) {
			(*this)._method_push_err_token(_74166_error_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>({}));
			_74188_ok = false;
			return _74188_ok;
		}
	}
	(*this)._field_e->_field_s->_method_check_validity_for_init_expr(_74132_p->_field_decl->_field_mutable,_74132_p->_field_decl->_field_reference,_74132_p->_field_kind,_74150_arg,_74166_error_token);
	(*this)._field_e->_field_s->_method_check_assign_type(_74132_p->_field_kind,_74150_arg,_74166_error_token,false);
	_74188_ok = true;
	return _74188_ok;
}



inline jule::Bool _1044463d0_FnCallArgChecker::_method_push(jule::Ref<_1037649f0_ParamIns> _76327_p,jule::Ref<_1487f5920_Expr> _76345_arg) {
	jule::Bool _76359_ok = jule::Bool();
	jule::Ref<_1191dc300_Data> _76417_d = jule::new_ref<_1191dc300_Data>();
	if ((!((*this)._field_dynamic_annotation)) && (!(_76327_p->_field_decl->_field_variadic))) {
		jule::Ref<_104a21a10_TypeKind> _76621_old = (*this)._field_e->_field_prefix;
		(*this)._field_e->_field_prefix=_76327_p->_field_kind;
		_76417_d=(*this)._field_e->_method_eval_expr_kind(_76345_arg->_field_kind);
		(*this)._field_e->_field_prefix=_76621_old;
	} else {
		jule::Ref<_104a21a10_TypeKind> _77121_old = (*this)._field_e->_field_prefix;
		jule::drop((*this)._field_e->_field_prefix);
		_76417_d=(*this)._field_e->_method_eval_expr_kind(_76345_arg->_field_kind);
		(*this)._field_e->_field_prefix=_77121_old;
	}
	if ((!(jule::real(_76417_d)))) {
		_76359_ok = false;
		return _76359_ok;
	}
	(*this)._field_arg_models=jule::append((*this)._field_arg_models,jule::Slice<jule::Any>({_76417_d->_field_model}));
	_76359_ok = (*this)._method_check_arg(_76327_p,_76417_d,_76345_arg->_field_token);
	return _76359_ok;
}



inline jule::Bool _1044463d0_FnCallArgChecker::_method_push_variadic(jule::Ref<_1037649f0_ParamIns> _78336_p,jule::Int _78354_i) {
	jule::Bool _78364_ok = jule::Bool();
	_78364_ok=true;
	jule::Bool _78517_variadiced = false;
	jule::Bool _78613_more = (_78354_i + 1LL) < (*this)._field_args.len();
	jule::Ref<_11911f320_SliceExprModel> _78717_model = jule::new_struct<_11911f320_SliceExprModel>(new( std::nothrow ) _11911f320_SliceExprModel(_78336_p->_field_kind,jule::Slice<jule::Any>()));
	jule::Ref<_104a21a10_TypeKind> _79117_old = (*this)._field_e->_field_prefix;
	_iter_begin_4395088480:;
	if (!(_78354_i < (*this)._field_args.len())) { goto _iter_end_4395088480; }
	{
		jule::Ref<_1487f5920_Expr> _79321_arg = (*this)._field_args[static_cast<jule::Int>(_78354_i)];
		{
			auto _match_expr{ _79321_arg->_field_kind };
			if (!(_match_expr.type_is<jule::Ref<_1487f5920_VariadicExpr>>())) { goto _case_end_4395093504; }
			_case_begin_4395093504:;
			{
				(*this)._field_e->_field_prefix=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_104a21a10_Slc>(new( std::nothrow ) _104a21a10_Slc(_78336_p->_field_kind))));
			}
			goto _match_end_4395091648;
			_case_end_4395093504:;
			_case_begin_4395092720:;
			{
				(*this)._field_e->_field_prefix=_78336_p->_field_kind;
			}
			goto _match_end_4395091648;
			_case_end_4395092720:;
			_match_end_4395091648:;
		}
		jule::Ref<_1191dc300_Data> _80321_d = (*this)._field_e->_method_eval_expr_kind(_79321_arg->_field_kind);
		if ((!(jule::real(_80321_d)))) {
			_78364_ok=false;
			goto _iter_next_4395088480;
		}
		if (_80321_d->_field_variadiced) {
			_78517_variadiced=true;
			_80321_d->_field_variadiced=false;
			_78336_p->_field_kind->_field_variadic=true;
			_80321_d->_field_kind->_field_variadic=true;
			__JULE_DEFER({
				_80321_d->_field_kind->_field_variadic=false;
				_78336_p->_field_kind->_field_variadic=false;
			});
			{
				auto _match_expr{ _80321_d->_field_model };
				if (!(_match_expr.type_is<jule::Ref<_11911f320_SliceExprModel>>())) { goto _case_end_4395103824; }
				_case_begin_4395103824:;
				{
					_78717_model=_80321_d->_field_model.operator jule::Ref<_11911f320_SliceExprModel>();
					_78717_model->_field_elem_kind=_78336_p->_field_kind;
				}
				goto _match_end_4395099632;
				_case_end_4395103824:;
				_case_begin_4395103712:;
				{
					jule::drop(_78717_model);
					(*this)._field_arg_models=jule::append((*this)._field_arg_models,jule::Slice<jule::Any>({_80321_d->_field_model}));
				}
				goto _match_end_4395099632;
				_case_end_4395103712:;
				_match_end_4395099632:;
			}
			_78364_ok=(*this)._method_check_arg(_78336_p,_80321_d,_79321_arg->_field_token) && _78364_ok;
			goto _iter_next_4395088480;
		}
		_78717_model->_field_elems=jule::append(_78717_model->_field_elems,jule::Slice<jule::Any>({_80321_d->_field_model}));
		_78364_ok=(*this)._method_check_arg(_78336_p,_80321_d,_79321_arg->_field_token) && _78364_ok;
	}
	_iter_next_4395088480:;
	(_78354_i)++;
	goto _iter_begin_4395088480;
	_iter_end_4395088480:;
	(*this)._field_e->_field_prefix=_79117_old;
	if (_78517_variadiced && _78613_more) {
		(*this)._method_push_err(jule::Str("variadic argument can't use with more argument", 46),jule::Slice<jule::Any>({}));
	}
	if (jule::real(_78717_model)) {
		(*this)._field_arg_models=jule::append((*this)._field_arg_models,jule::Slice<jule::Any>({jule::Any(_78717_model)}));
	}
	_78364_ok = _78364_ok;
	return _78364_ok;
}



inline jule::Bool _1044463d0_FnCallArgChecker::_method_check_args(jule::Slice<jule::Ref<_1037649f0_ParamIns>> _84933_params) {
	jule::Bool _84956_ok = jule::Bool();
	_84956_ok=true;
	jule::Int _85117_i = 0LL;
	_julec_label_iter:;
	_iter_begin_4395121168:;
	if (!(_85117_i < _84933_params.len())) { goto _iter_end_4395121168; }
	{
		jule::Ref<_1037649f0_ParamIns> _85421_p = _84933_params[static_cast<jule::Int>(_85117_i)];
		{
			if (!((_85421_p->_field_decl->_method_is_self()))) { goto _case_end_4395124992; }
			goto _match_end_4395123984;
			_case_end_4395124992:;
			if (!((_85421_p->_field_decl->_field_variadic))) { goto _case_end_4395125296; }
			_case_begin_4395125296:;
			{
				_84956_ok=(*this)._method_push_variadic(_85421_p,_85117_i) && _84956_ok;
				goto _iter_end_4395121168;
			}
			goto _match_end_4395123984;
			_case_end_4395125296:;
			if (!(((*this)._field_args.len() <= _85117_i))) { goto _case_end_4395125408; }
			_case_begin_4395125408:;
			{
				_84956_ok=false;
				goto _iter_end_4395121168;
			}
			goto _match_end_4395123984;
			_case_end_4395125408:;
			_case_begin_4395124176:;
			{
				_84956_ok=(*this)._method_push(_85421_p,(*this)._field_args[static_cast<jule::Int>(_85117_i)]) && _84956_ok;
			}
			goto _match_end_4395123984;
			_case_end_4395124176:;
			_match_end_4395123984:;
		}
		(_85117_i)++;
	}
	_iter_next_4395121168:;
	goto _iter_begin_4395121168;
	_iter_end_4395121168:;
	_84956_ok = _84956_ok;
	return _84956_ok;
}



inline jule::Bool _1044463d0_FnCallArgChecker::_method_check_dynamic_type_annotation(void) {
	jule::Bool _87650_ok = jule::Bool();
	{
		auto __julec_range_expr = (*this)._field_f->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104a21a10_TypeKind> _1044463d0_g = *__julec_range_begin;
			_iter_begin_4395133488:;
			{
				if ((!(jule::real(_1044463d0_g)))) {
					(*this)._method_push_err(jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>({}));
					_87650_ok = false;
					return _87650_ok;
				}
			}
			_iter_next_4395133488:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1044463d0_g = *__julec_range_begin; goto _iter_begin_4395133488; }
			_iter_end_4395133488:;
		}
	}
	_87650_ok = true;
	return _87650_ok;
}



inline jule::Bool _1044463d0_FnCallArgChecker::_method_check(void) {
	jule::Bool _88626_ok = jule::Bool();
	jule::Slice<jule::Ref<_1037649f0_ParamIns>> _88717_params = (*this)._method_get_params();
	_88626_ok=(*this)._method_check_counts(_88717_params);
	if ((!(_88626_ok))) {
		_88626_ok = false;
		return _88626_ok;
	}
	_88626_ok=(*this)._method_check_args(_88717_params);
	if (_88626_ok && (*this)._field_dynamic_annotation) {
		_88626_ok=(*this)._method_check_dynamic_type_annotation();
	}
	_88626_ok = _88626_ok;
	return _88626_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _1044463d0_FnCallArgChecker &_Src) {
	_Stream << "FnCallArgChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "dynamic_annotation:" << _Src._field_dynamic_annotation << ", ";
	_Stream << "arg_models:" << _Src._field_arg_models;
	_Stream << "}";
	return _Stream;
}



inline void _1044463d0_AssignTypeChecker::_method_push_err(jule::Str _44327_fmt,jule::Slice<jule::Any> _44340_args) {
	(*this)._field_s->_method_push_err((*this)._field_error_token,_44327_fmt,_44340_args);
}



inline jule::Bool _1044463d0_AssignTypeChecker::_method_check_validity(void) {
	jule::Bool _44817_valid = true;
	{
		if (!((jule::real((*this)._field_d->_field_kind->_method_fnc())))) { goto _case_end_4395757040; }
		_case_begin_4395757040:;
		{
			jule::Ref<_1037649f0_FnIns> _45217_f = (*this)._field_d->_field_kind->_method_fnc();
			{
				if (!((_45217_f->_method_is_builtin()))) { goto _case_end_4395761152; }
				_case_begin_4395761152:;
				{
					(*this)._method_push_err(jule::Str("built-in define cannot use as anonymous function", 48),jule::Slice<jule::Any>({}));
					_44817_valid=false;
				}
				goto _match_end_4395760896;
				_case_end_4395761152:;
				if (!((_45217_f->_field_decl->_method_is_method()))) { goto _case_end_4395761264; }
				_case_begin_4395761264:;
				{
					(*this)._method_push_err(jule::Str("methods cannot use as anonymous function", 40),jule::Slice<jule::Any>({}));
					_44817_valid=false;
				}
				goto _match_end_4395760896;
				_case_end_4395761264:;
				if (!((_45217_f->_field_decl->_field_generics.len() > 0LL))) { goto _case_end_4395761376; }
				_case_begin_4395761376:;
				{
					(*this)._method_push_err(jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>({}));
					_44817_valid=false;
				}
				goto _match_end_4395760896;
				_case_end_4395761376:;
				_match_end_4395760896:;
			}
		}
		goto _match_end_4395756800;
		_case_end_4395757040:;
		if (!((jule::real((*this)._field_d->_field_kind->_method_tup())))) { goto _case_end_4395757152; }
		_case_begin_4395757152:;
		{
			(*this)._method_push_err(jule::Str("tuples cannot assign to single define in same time", 50),jule::Slice<jule::Any>({}));
			_44817_valid=false;
		}
		goto _match_end_4395756800;
		_case_end_4395757152:;
		_match_end_4395756800:;
	}
	return _44817_valid;
}



inline jule::Bool _1044463d0_AssignTypeChecker::_method_check_const(void) {
	if ((((!((*this)._field_d->_method_is_const())) || (!(jule::real((*this)._field_dest->_method_prim())))) || (!(jule::real((*this)._field_d->_field_kind->_method_prim())))) || (!(_104c56790_is_num((*this)._field_d->_field_kind->_method_prim()->_field_kind)))) {
		return false;
	}
	jule::Str _48413_kind = (*this)._field_dest->_method_prim()->_field_kind;
	{
		if (!((_104c56790_is_float(_48413_kind)))) { goto _case_end_4395778560; }
		_case_begin_4395778560:;
		{
			if ((!(_1044463d0_float_assignable(_48413_kind,(*this)._field_d)))) {
				(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>({}));
				return false;
			}
		}
		goto _match_end_4395778080;
		_case_end_4395778560:;
		if (!((_104c56790_is_int(_48413_kind)))) { goto _case_end_4395778672; }
		_case_begin_4395778672:;
		{
			if ((!(_1044463d0_int_assignable(_48413_kind,(*this)._field_d)))) {
				(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>({}));
				return false;
			}
		}
		goto _match_end_4395778080;
		_case_end_4395778672:;
		_case_begin_4395778208:;
		{
			return false;
		}
		goto _match_end_4395778080;
		_case_end_4395778208:;
		_match_end_4395778080:;
	}
	return true;
}



inline jule::Bool _1044463d0_AssignTypeChecker::_method_check(void) {
	{
		if (!(((!(jule::real((*this)._field_d)))))) { goto _case_end_4395787536; }
		_case_begin_4395787536:;
		{
			return false;
		}
		goto _match_end_4395783088;
		_case_end_4395787536:;
		if (!(((!((*this)._method_check_validity()))))) { goto _case_end_4395787136; }
		_case_begin_4395787136:;
		{
			return false;
		}
		goto _match_end_4395783088;
		_case_end_4395787136:;
		if (!(((*this)._method_check_const()))) { goto _case_end_4395787248; }
		_case_begin_4395787248:;
		{
			return true;
		}
		goto _match_end_4395783088;
		_case_end_4395787248:;
		_case_begin_4395786208:;
		{
			return (*this)._field_s->_method_check_type_compatibility((*this)._field_dest,(*this)._field_d->_field_kind,(*this)._field_error_token,(*this)._field_deref);
		}
		goto _match_end_4395783088;
		_case_end_4395786208:;
		_match_end_4395783088:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1044463d0_AssignTypeChecker &_Src) {
	_Stream << "AssignTypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "deref:" << _Src._field_deref;
	_Stream << "}";
	return _Stream;
}



inline void _1044463d0_TypeCompatibilityChecker::_method_push_err(jule::Str _13927_fmt,jule::Slice<jule::Any> _13940_args) {
	(*this)._field_s->_method_push_err((*this)._field_error_token,_13927_fmt,_13940_args);
}



inline jule::Bool _1044463d0_TypeCompatibilityChecker::_method_check_trait(void) {
	jule::Bool _14332_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_14332_ok = true;
		return _14332_ok;
	}
	jule::Ref<_1036e5da0_Trait> _14813_trt = (*this)._field_dest->_method_trt();
	jule::Bool _14917_ref = false;
	{
		if (!((jule::real((*this)._field_src->_method_ref())))) { goto _case_end_4394959616; }
		_case_begin_4394959616:;
		{
			_14917_ref=true;
			(*this)._field_src=(*this)._field_src->_method_ref()->_field_elem;
			if (jule::real((*this)._field_src->_method_strct())) {
				_14332_ok = false;
				return _14332_ok;
			}
			goto _case_begin_4394959120;
		}
		goto _match_end_4394957920;
		_case_end_4394959616:;
		if (!((jule::real((*this)._field_src->_method_strct())))) { goto _case_end_4394959120; }
		_case_begin_4394959120:;
		{
			jule::Ref<_1037370d0_StructIns> _16017_s = (*this)._field_src->_method_strct();
			if ((!(_16017_s->_field_decl->_method_is_implements(_14813_trt)))) {
				_14332_ok = false;
				return _14332_ok;
			}
			if (_1044463d0_trait_has_reference_receiver(_14813_trt) && (!(_14917_ref))) {
				(*this)._method_push_err(jule::Str("trait has reference receiver parameter used method, cannot assign non-reference instance", 88),jule::Slice<jule::Any>({}));
				_14332_ok = false;
				return _14332_ok;
			}
			_14332_ok = true;
			return _14332_ok;
		}
		goto _match_end_4394957920;
		_case_end_4394959120:;
		if (!((jule::real((*this)._field_src->_method_trt())))) { goto _case_end_4394959232; }
		_case_begin_4394959232:;
		{
			_14332_ok = _14813_trt == (*this)._field_src->_method_trt();
			return _14332_ok;
		}
		goto _match_end_4394957920;
		_case_end_4394959232:;
		_case_begin_4394958208:;
		{
			_14332_ok = false;
			return _14332_ok;
		}
		goto _match_end_4394957920;
		_case_end_4394958208:;
		_match_end_4394957920:;
	}
}



inline jule::Bool _1044463d0_TypeCompatibilityChecker::_method_check_ref(void) {
	jule::Bool _18030_ok = jule::Bool();
	if ((*this)._field_dest->_method_to_str() == (*this)._field_src->_method_to_str()) {
		_18030_ok = true;
		return _18030_ok;
	} else if ((!((*this)._field_deref))) {
		_18030_ok = false;
		return _18030_ok;
	} else if ((!(jule::real((*this)._field_src->_method_ref())))) {
		(*this)._field_dest=(*this)._field_dest->_method_ref()->_field_elem;
		_18030_ok = (*this)._method_check();
		return _18030_ok;
	}
	(*this)._field_src=(*this)._field_src->_method_ref()->_field_elem;
	_18030_ok = (*this)._method_check();
	return _18030_ok;
}



inline jule::Bool _1044463d0_TypeCompatibilityChecker::_method_check_ptr(void) {
	jule::Bool _19430_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_19430_ok = true;
		return _19430_ok;
	}
	jule::Ref<_104a21a10_Ptr> _19917_src = (*this)._field_src->_method_ptr();
	if ((!(jule::real(_19917_src)))) {
		_19430_ok = false;
		return _19430_ok;
	}
	jule::Ref<_104a21a10_Ptr> _20417_dest = (*this)._field_dest->_method_ptr();
	if (_20417_dest->_method_is_unsafe()) {
		_19430_ok = true;
		return _19430_ok;
	}
	_1044463d0_TypeCompatibilityChecker _21017_sub = _1044463d0_TypeCompatibilityChecker((*this)._field_s,_20417_dest->_field_elem,_19917_src->_field_elem,(*this)._field_error_token,true,jule::Bool(),true);
	_19430_ok = _21017_sub._method_check();
	return _19430_ok;
}



inline jule::Bool _1044463d0_TypeCompatibilityChecker::_method_check_slc(void) {
	jule::Bool _22130_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_22130_ok = true;
		return _22130_ok;
	}
	jule::Ref<_104a21a10_Slc> _22617_src = (*this)._field_src->_method_slc();
	if ((!(jule::real(_22617_src)))) {
		_22130_ok = false;
		return _22130_ok;
	}
	jule::Ref<_104a21a10_Slc> _23017_dest = (*this)._field_dest->_method_slc();
	_1044463d0_TypeCompatibilityChecker _23217_sub = _1044463d0_TypeCompatibilityChecker((*this)._field_s,_23017_dest->_field_elem,_22617_src->_field_elem,(*this)._field_error_token,true,jule::Bool(),true);
	_22130_ok = _23217_sub._method_check();
	return _22130_ok;
}



inline jule::Bool _1044463d0_TypeCompatibilityChecker::_method_check_arr(void) {
	jule::Bool _24330_ok = jule::Bool();
	jule::Ref<_104a21a10_Arr> _24417_src = (*this)._field_src->_method_arr();
	if ((!(jule::real(_24417_src)))) {
		_24330_ok = false;
		return _24330_ok;
	}
	jule::Ref<_104a21a10_Arr> _24817_dest = (*this)._field_dest->_method_arr();
	if (_24817_dest->_field_n != _24417_src->_field_n) {
		_24330_ok = false;
		return _24330_ok;
	}
	_1044463d0_TypeCompatibilityChecker _25317_sub = _1044463d0_TypeCompatibilityChecker((*this)._field_s,_24817_dest->_field_elem,_24417_src->_field_elem,(*this)._field_error_token,true,jule::Bool(),true);
	_24330_ok = _25317_sub._method_check();
	return _24330_ok;
}



inline jule::Bool _1044463d0_TypeCompatibilityChecker::_method_check_map(void) {
	jule::Bool _26430_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_26430_ok = true;
		return _26430_ok;
	}
	jule::Ref<_104a21a10_Map> _26917_src = (*this)._field_src->_method_map();
	if ((!(jule::real(_26917_src)))) {
		_26430_ok = false;
		return _26430_ok;
	}
	jule::Ref<_104a21a10_Map> _27417_dest = (*this)._field_dest->_method_map();
	_1044463d0_TypeCompatibilityChecker _27617_sub = _1044463d0_TypeCompatibilityChecker((*this)._field_s,_27417_dest->_field_key,_26917_src->_field_key,(*this)._field_error_token,jule::Bool(),jule::Bool(),true);
	if ((!(_27617_sub._method_check()))) {
		_26430_ok = false;
		return _26430_ok;
	}
	_27617_sub._field_src=_26917_src->_field_val;
	_27617_sub._field_dest=_27417_dest->_field_val;
	_26430_ok = _27617_sub._method_check();
	return _26430_ok;
}



inline jule::Bool _1044463d0_TypeCompatibilityChecker::_method_check_struct(void) {
	jule::Bool _29233_ok = jule::Bool();
	jule::Ref<_1037370d0_StructIns> _29317_src = (*this)._field_src->_method_strct();
	if ((!(jule::real(_29317_src)))) {
		_29233_ok = false;
		return _29233_ok;
	}
	jule::Ref<_1037370d0_StructIns> _29717_dest = (*this)._field_dest->_method_strct();
	{
		if (!(((_29717_dest->_field_decl).alloc != (_29317_src->_field_decl).alloc))) { goto _case_end_4395669456; }
		_case_begin_4395669456:;
		{
			_29233_ok = false;
			return _29233_ok;
		}
		goto _match_end_4395669232;
		_case_end_4395669456:;
		if (!((_29717_dest->_field_generics.len() == 0LL))) { goto _case_end_4395669568; }
		_case_begin_4395669568:;
		{
			_29233_ok = true;
			return _29233_ok;
		}
		goto _match_end_4395669232;
		_case_end_4395669568:;
		_match_end_4395669232:;
	}
	{
		auto __julec_range_expr = _29717_dest->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1044463d0_i = 0;
			jule::Ref<_104a21a10_TypeKind> _1044463d0_dg = *__julec_range_begin;
			_iter_begin_4395672672:;
			{
				jule::Ref<_104a21a10_TypeKind> _30721_sg = _29317_src->_field_generics[static_cast<jule::Int>(_1044463d0_i)];
				_1044463d0_TypeCompatibilityChecker _30821_sub = _1044463d0_TypeCompatibilityChecker((*this)._field_s,_1044463d0_dg,_30721_sg,(*this)._field_error_token,jule::Bool(),jule::Bool(),jule::Bool());
				if ((!(_30821_sub._method_check()))) {
					_29233_ok = false;
					return _29233_ok;
				}
			}
			_iter_next_4395672672:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1044463d0_i; _1044463d0_dg = *__julec_range_begin; goto _iter_begin_4395672672; }
			_iter_end_4395672672:;
		}
	}
	_29233_ok = true;
	return _29233_ok;
}



inline jule::Bool _1044463d0_TypeCompatibilityChecker::_method_check_fn(void) {
	jule::Bool _32129_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_32129_ok = true;
		return _32129_ok;
	}
	jule::Ref<_1037649f0_FnIns> _32617_src = (*this)._field_src->_method_fnc();
	if ((!(jule::real(_32617_src)))) {
		_32129_ok = false;
		return _32129_ok;
	}
	jule::Ref<_1037649f0_FnIns> _33117_dest = (*this)._field_dest->_method_fnc();
	if (jule::real(_32617_src->_field_result) != jule::real(_33117_dest->_field_result)) {
		_32129_ok = false;
		return _32129_ok;
	}
	if (_32617_src->_field_params.len() != _33117_dest->_field_params.len()) {
		_32129_ok = false;
		return _32129_ok;
	}
	{
		auto __julec_range_expr = _32617_src->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1044463d0_i = 0;
			_iter_begin_4395688928:;
			{
				jule::Ref<_1037649f0_ParamIns> _34021_srcp = _32617_src->_field_params[static_cast<jule::Int>(_1044463d0_i)];
				jule::Ref<_1037649f0_ParamIns> _34121_destp = _33117_dest->_field_params[static_cast<jule::Int>(_1044463d0_i)];
				if (jule::real(_34021_srcp) != jule::real(_34121_destp)) {
					_32129_ok = false;
					return _32129_ok;
				}
				_1044463d0_TypeCompatibilityChecker _34621_sub = _1044463d0_TypeCompatibilityChecker((*this)._field_s,_34121_destp->_field_kind,_34021_srcp->_field_kind,(*this)._field_error_token,jule::Bool(),jule::Bool(),jule::Bool());
				if ((!(_34621_sub._method_check()))) {
					_32129_ok = false;
					return _32129_ok;
				}
			}
			_iter_next_4395688928:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1044463d0_i; goto _iter_begin_4395688928; }
			_iter_end_4395688928:;
		}
	}
	if (jule::real(_32617_src->_field_result)) {
		_1044463d0_TypeCompatibilityChecker _35821_sub = _1044463d0_TypeCompatibilityChecker((*this)._field_s,_33117_dest->_field_result,_32617_src->_field_result,(*this)._field_error_token,jule::Bool(),jule::Bool(),jule::Bool());
		if ((!(_35821_sub._method_check()))) {
			_32129_ok = false;
			return _32129_ok;
		}
	}
	_32129_ok = true;
	return _32129_ok;
}



inline jule::Bool _1044463d0_TypeCompatibilityChecker::_method_check_enum(void) {
	jule::Bool _37231_ok = jule::Bool();
	jule::Ref<_1036dad50_Enum> _37313_r = (*this)._field_src->_method_enm();
	if ((!(jule::real(_37313_r)))) {
		_37231_ok = false;
		return _37231_ok;
	}
	_37231_ok = ((*this)._field_dest->_method_enm()).alloc == (_37313_r).alloc;
	return _37231_ok;
}



inline jule::Bool _1044463d0_TypeCompatibilityChecker::_method_check_prim(void) {
	jule::Bool _38031_ok = jule::Bool();
	jule::Ref<_104a21a10_Prim> _38113_dest = (*this)._field_dest->_method_prim();
	jule::Ref<_104a21a10_Prim> _38217_src = (*this)._field_src->_method_prim();
	if ((!(jule::real(_38217_src)))) {
		_38031_ok = _38113_dest->_method_is_any();
		return _38031_ok;
	}
	if (_38113_dest->_method_is_any()) {
		_38031_ok = (!((*this)._field_ignore_any)) || _38217_src->_method_is_any();
		return _38031_ok;
	}
	_38031_ok = _104cc26b0_types_are_compatible(_38113_dest->_method_to_str(),_38217_src->_method_to_str());
	return _38031_ok;
}



inline jule::Bool _1044463d0_TypeCompatibilityChecker::_method_check_cpp_linked(void) {
	jule::Bool _39237_ok = jule::Bool();
	_39237_ok = (*this)._field_src->_method_is_cpp_linked() && ((*this)._field_dest->_field_cpp_ident == (*this)._field_src->_field_cpp_ident);
	return _39237_ok;
}



inline jule::Bool _1044463d0_TypeCompatibilityChecker::_method_check(void) {
	jule::Bool _39726_ok = jule::Bool();
	if ((!(jule::real((*this)._field_src)))) {
		_39726_ok = false;
		return _39726_ok;
	}
	if ((*this)._field_dest->_field_variadic != (*this)._field_src->_field_variadic) {
		_39726_ok = false;
		return _39726_ok;
	} else if ((*this)._field_dest->_field_variadic) {
		(*this)._field_ignore_any=true;
	}
	if (jule::real((*this)._field_dest->_method_ref())) {
		_39726_ok = (*this)._method_check_ref();
		return _39726_ok;
	}
	if ((!((*this)._field_sub_check)) && jule::real((*this)._field_src->_method_ref())) {
		(*this)._field_src=(*this)._field_src->_method_ref()->_field_elem;
	}
	{
		if (!((jule::real((*this)._field_dest->_method_prim())))) { goto _case_end_4395733056; }
		_case_begin_4395733056:;
		{
			_39726_ok = (*this)._method_check_prim();
			return _39726_ok;
		}
		goto _match_end_4395729168;
		_case_end_4395733056:;
		if (!(((*this)._field_dest->_method_is_cpp_linked()))) { goto _case_end_4395732624; }
		_case_begin_4395732624:;
		{
			_39726_ok = (*this)._method_check_cpp_linked();
			return _39726_ok;
		}
		goto _match_end_4395729168;
		_case_end_4395732624:;
		if (!((jule::real((*this)._field_dest->_method_trt())))) { goto _case_end_4395732736; }
		_case_begin_4395732736:;
		{
			_39726_ok = (*this)._method_check_trait();
			return _39726_ok;
		}
		goto _match_end_4395729168;
		_case_end_4395732736:;
		if (!((jule::real((*this)._field_dest->_method_ptr())))) { goto _case_end_4395732848; }
		_case_begin_4395732848:;
		{
			_39726_ok = (*this)._method_check_ptr();
			return _39726_ok;
		}
		goto _match_end_4395729168;
		_case_end_4395732848:;
		if (!((jule::real((*this)._field_dest->_method_slc())))) { goto _case_end_4395731952; }
		_case_begin_4395731952:;
		{
			_39726_ok = (*this)._method_check_slc();
			return _39726_ok;
		}
		goto _match_end_4395729168;
		_case_end_4395731952:;
		if (!((jule::real((*this)._field_dest->_method_arr())))) { goto _case_end_4395732064; }
		_case_begin_4395732064:;
		{
			_39726_ok = (*this)._method_check_arr();
			return _39726_ok;
		}
		goto _match_end_4395729168;
		_case_end_4395732064:;
		if (!((jule::real((*this)._field_dest->_method_map())))) { goto _case_end_4395732176; }
		_case_begin_4395732176:;
		{
			_39726_ok = (*this)._method_check_map();
			return _39726_ok;
		}
		goto _match_end_4395729168;
		_case_end_4395732176:;
		if (!((jule::real((*this)._field_dest->_method_enm())))) { goto _case_end_4395733312; }
		_case_begin_4395733312:;
		{
			_39726_ok = (*this)._method_check_enum();
			return _39726_ok;
		}
		goto _match_end_4395729168;
		_case_end_4395733312:;
		if (!((jule::real((*this)._field_dest->_method_strct())))) { goto _case_end_4395733424; }
		_case_begin_4395733424:;
		{
			_39726_ok = (*this)._method_check_struct();
			return _39726_ok;
		}
		goto _match_end_4395729168;
		_case_end_4395733424:;
		if (!((jule::real((*this)._field_dest->_method_fnc())))) { goto _case_end_4395733536; }
		_case_begin_4395733536:;
		{
			_39726_ok = (*this)._method_check_fn();
			return _39726_ok;
		}
		goto _match_end_4395729168;
		_case_end_4395733536:;
		if (!((_104a21a10_is_nil_compatible((*this)._field_dest)))) { goto _case_end_4395733648; }
		_case_begin_4395733648:;
		{
			_39726_ok = (*this)._field_src->_method_is_nil();
			return _39726_ok;
		}
		goto _match_end_4395729168;
		_case_end_4395733648:;
		_case_begin_4395729296:;
		{
			_39726_ok = false;
			return _39726_ok;
		}
		goto _match_end_4395729168;
		_case_end_4395729296:;
		_match_end_4395729168:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1044463d0_TypeCompatibilityChecker &_Src) {
	_Stream << "TypeCompatibilityChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "src:" << _Src._field_src << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "ignore_any:" << _Src._field_ignore_any << ", ";
	_Stream << "deref:" << _Src._field_deref << ", ";
	_Stream << "sub_check:" << _Src._field_sub_check;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _104598e40_Var::_method_is_initialized(void) {
	return jule::real((*this)._field_value);
}



inline jule::Bool _104598e40_Var::_method_is_type_inferred(void) {
	return (!(jule::real((*this)._field_kind))) || (!(jule::real((*this)._field_kind->_field_decl)));
}







std::ostream &operator<<(std::ostream &_Stream, const _104598e40_Var &_Src) {
	_Stream << "Var{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "value:" << _Src._field_value << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "depends:" << _Src._field_depends;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_119162660_ImportInfo> _119162660_ImportInfo::_method_find_package(jule::Str ) {
	return jule::new_ref<_119162660_ImportInfo>();
}



inline jule::Ref<_119162660_ImportInfo> _119162660_ImportInfo::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_119162660_ImportInfo>)> ) {
	return jule::new_ref<_119162660_ImportInfo>();
}



inline jule::Ref<_104598e40_Var> _119162660_ImportInfo::_method_find_var(jule::Str _14731_ident,jule::Bool _14743_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_14731_ident)))) {
		return jule::new_ref<_104598e40_Var>();
	}
	return _119162660_find_var_in_package((*this)._field_package->_field_files,_14731_ident,false);
}



inline jule::Ref<_104a21a10_TypeAlias> _119162660_ImportInfo::_method_find_type_alias(jule::Str _16038_ident,jule::Bool _16050_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_16038_ident)))) {
		return jule::new_ref<_104a21a10_TypeAlias>();
	}
	return _119162660_find_type_alias_in_package((*this)._field_package->_field_files,_16038_ident,false);
}



inline jule::Ref<_1037370d0_Struct> _119162660_ImportInfo::_method_find_struct(jule::Str _17334_ident,jule::Bool _17346_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_17334_ident)))) {
		return jule::new_ref<_1037370d0_Struct>();
	}
	return _119162660_find_struct_in_package((*this)._field_package->_field_files,_17334_ident,false);
}



inline jule::Ref<_1037649f0_Fn> _119162660_ImportInfo::_method_find_fn(jule::Str _18630_ident,jule::Bool _18642_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_18630_ident)))) {
		return jule::new_ref<_1037649f0_Fn>();
	}
	return _119162660_find_fn_in_package((*this)._field_package->_field_files,_18630_ident,false);
}



inline jule::Ref<_1036e5da0_Trait> _119162660_ImportInfo::_method_find_trait(jule::Str _19833_ident) {
	if ((!((*this)._method_is_lookupable(_19833_ident)))) {
		return jule::new_ref<_1036e5da0_Trait>();
	}
	return _119162660_find_trait_in_package((*this)._field_package->_field_files,_19833_ident);
}



inline jule::Ref<_1036dad50_Enum> _119162660_ImportInfo::_method_find_enum(jule::Str _21032_ident) {
	if ((!((*this)._method_is_lookupable(_21032_ident)))) {
		return jule::new_ref<_1036dad50_Enum>();
	}
	return _119162660_find_enum_in_package((*this)._field_package->_field_files,_21032_ident);
}



inline jule::Bool _119162660_ImportInfo::_method_is_lookupable(jule::Str _22028_ident) {
	if ((*this)._field_cpp_linked) {
		return false;
	}
	if ((!((*this)._field_import_all))) {
		if ((*this)._method_exist_ident(jule::Str("self", 4))) {
			return true;
		}
		if ((*this)._field_selected.len() > 0LL) {
			if ((!((*this)._method_exist_ident(_22028_ident)))) {
				return false;
			}
		}
	}
	return true;
}



inline jule::Bool _119162660_ImportInfo::_method_exist_ident(jule::Str _24026_ident) {
	{
		auto __julec_range_expr = (*this)._field_selected;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_108e15ff0_Token _119162660_sident = *__julec_range_begin;
			_iter_begin_4391952048:;
			{
				if (_119162660_sident._field_kind == _24026_ident) {
					return true;
				}
			}
			_iter_next_4391952048:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119162660_sident = *__julec_range_begin; goto _iter_begin_4391952048; }
			_iter_end_4391952048:;
		}
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _119162660_ImportInfo &_Src) {
	_Stream << "ImportInfo{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "duplicate:" << _Src._field_duplicate << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std << ", ";
	_Stream << "import_all:" << _Src._field_import_all << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "package:" << _Src._field_package;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _104180810_ScopeLabel &_Src) {
	_Stream << "ScopeLabel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _10417abf0_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base._field_id != 0LLU;
}



inline jule::Bool _10417abf0_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base._field_id == 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _10417abf0_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1036dad50_Enum::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _1036dad50_Enum::_method_equals(jule::Ref<_104a21a10_TypeKind> _3521_other) {
	jule::Ref<_1036dad50_Enum> _3613_enm = (_3521_other).alloc->_method_enm();
	if ((!(jule::real(_3613_enm)))) {
		return false;
	}
	return (&((*this))) == (_3613_enm).alloc;
}



inline jule::Ref<_1036dad50_EnumItem> _1036dad50_Enum::_method_find_item(jule::Str _4732_ident) {
	{
		auto __julec_range_expr = (*this)._field_items;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036dad50_EnumItem> _1036dad50_item = *__julec_range_begin;
			_iter_begin_4387039744:;
			{
				if (_1036dad50_item->_field_ident == _4732_ident) {
					return _1036dad50_item;
				}
			}
			_iter_next_4387039744:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1036dad50_item = *__julec_range_begin; goto _iter_begin_4387039744; }
			_iter_end_4387039744:;
		}
	}
	return jule::new_ref<_1036dad50_EnumItem>();
}







std::ostream &operator<<(std::ostream &_Stream, const _1036dad50_Enum &_Src) {
	_Stream << "Enum{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc:" << _Src._field_doc;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1036dad50_EnumItem::_method_auto_expr(void) {
	return (!(jule::real((*this)._field_value)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1036dad50_EnumItem &_Src) {
	_Stream << "EnumItem{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1036e5da0_Trait::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _1036e5da0_Trait::_method_equals(jule::Ref<_104a21a10_TypeKind> _2421_other) {
	jule::Ref<_1036e5da0_Trait> _2513_trt = (_2421_other).alloc->_method_trt();
	if ((!(jule::real(_2513_trt)))) {
		return false;
	}
	return (&((*this))) == (_2513_trt).alloc;
}



inline jule::Bool _1036e5da0_Trait::_method_is_builtin(void) {
	return (*this)._field_token._field_id == 0LLU;
}



inline jule::Ref<_1037649f0_Fn> _1036e5da0_Trait::_method_find_method(jule::Str _3934_ident) {
	{
		auto __julec_range_expr = (*this)._field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _1036e5da0_f = *__julec_range_begin;
			_iter_begin_4387025632:;
			{
				if (_1036e5da0_f->_field_ident == _3934_ident) {
					return _1036e5da0_f;
				}
			}
			_iter_next_4387025632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1036e5da0_f = *__julec_range_begin; goto _iter_begin_4387025632; }
			_iter_end_4387025632:;
		}
	}
	return jule::new_ref<_1037649f0_Fn>();
}







std::ostream &operator<<(std::ostream &_Stream, const _1036e5da0_Trait &_Src) {
	_Stream << "Trait{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "implemented:" << _Src._field_implemented;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1036da950_Pass &_Src) {
	_Stream << "Pass{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1037649f0_Fn::_method_is_void(void) {
	return (!(jule::real((*this)._field_result)));
}



inline jule::Bool _1037649f0_Fn::_method_is_method(void) {
	return jule::real((*this)._field_owner);
}



inline jule::Bool _1037649f0_Fn::_method_is_entry_point(void) {
	return (*this)._field_ident == jule::Str("main", 4);
}



inline jule::Bool _1037649f0_Fn::_method_is_init(void) {
	return (*this)._field_ident == jule::Str("init", 4);
}



inline jule::Bool _1037649f0_Fn::_method_is_anon(void) {
	return _108e15ff0_is_anon_ident((*this)._field_ident);
}



inline jule::Bool _1037649f0_Fn::_method_any_var(void) {
	return jule::real((*this)._field_result) && ((*this)._field_result->_field_idents.len() > 0LL);
}



inline jule::Bool _1037649f0_Fn::_method_parameters_uses_generics(void) {
	if ((*this)._field_generics.len() == 0LL) {
		return false;
	}
	{
		auto __julec_range_expr = (*this)._field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Param> _1037649f0_p = *__julec_range_begin;
			_iter_begin_4391268528:;
			{
				if (_1037649f0_p->_method_is_self()) {
					goto _iter_next_4391268528;
				}
				jule::Str _9317_pk = _1037649f0_p->_field_kind->_field_kind->_method_to_str();
				{
					auto __julec_range_expr = (*this)._field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1487f5920_GenericDecl> _1037649f0_g = *__julec_range_begin;
						_iter_begin_4391273696:;
						{
							if (_9317_pk.find(_1037649f0_g->_field_ident) != -1LL) {
								return true;
							}
						}
						_iter_next_4391273696:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _1037649f0_g = *__julec_range_begin; goto _iter_begin_4391273696; }
						_iter_end_4391273696:;
					}
				}
			}
			_iter_next_4391268528:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1037649f0_p = *__julec_range_begin; goto _iter_begin_4391268528; }
			_iter_end_4391268528:;
		}
	}
	return false;
}



inline jule::Bool _1037649f0_Fn::_method_result_uses_generics(void) {
	if ((*this)._method_is_void()) {
		return false;
	} else if ((!(jule::real((*this)._field_result->_field_kind))) || (!(jule::real((*this)._field_result->_field_kind->_field_kind)))) {
		return false;
	}
	jule::Str _11213_rk = (*this)._field_result->_field_kind->_field_kind->_method_to_str();
	{
		auto __julec_range_expr = (*this)._field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1487f5920_GenericDecl> _1037649f0_g = *__julec_range_begin;
			_iter_begin_4391284288:;
			{
				if (_11213_rk.find(_1037649f0_g->_field_ident) != -1LL) {
					return true;
				}
			}
			_iter_next_4391284288:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1037649f0_g = *__julec_range_begin; goto _iter_begin_4391284288; }
			_iter_end_4391284288:;
		}
	}
	return false;
}



inline jule::Ref<_1037649f0_FnIns> _1037649f0_Fn::_method_instance_force(void) {
	jule::Ref<_1037649f0_FnIns> _12417_ins = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),this->self,jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>(),jule::Ref<_104a21a10_TypeKind>(),jule::new_struct<_104180810_Scope>(new( std::nothrow ) _104180810_Scope()),_1036da950_ReferenceStack::_static_method_new(),jule::Ref<_1036da950_ReferenceStack>(),jule::Fn<jule::Ref<_1191dc300_Data>(jule::Ref<_1191dc300_Eval>,jule::Ref<_1487f5920_FnCallExpr>,jule::Ref<_1191dc300_Data>)>(),jule::Bool(),jule::Bool()));
	if (this->self->_method_is_init()) {
		_12417_ins->_field_refers=_1036da950_ReferenceStack::_static_method_new();
	}
	_12417_ins->_field_params=jule::Slice<jule::Ref<_1037649f0_ParamIns>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(this->self->_field_params.len())));
	{
		auto __julec_range_expr = this->self->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1037649f0_i = 0;
			jule::Ref<_1037649f0_Param> _1037649f0_p = *__julec_range_begin;
			_iter_begin_4391295936:;
			{
				_12417_ins->_field_params[static_cast<jule::Int>(_1037649f0_i)]=_1037649f0_p->_method_instance();
			}
			_iter_next_4391295936:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1037649f0_i; _1037649f0_p = *__julec_range_begin; goto _iter_begin_4391295936; }
			_iter_end_4391295936:;
		}
	}
	if (jule::real(_12417_ins->_field_decl->_field_result)) {
		_12417_ins->_field_result=_12417_ins->_field_decl->_field_result->_field_kind->_field_kind;
	}
	return _12417_ins;
}



inline jule::Ref<_1037649f0_FnIns> _1037649f0_Fn::_method_instance(void) {
	if ((this->self->_field_generics.len() == 0LL) && (this->self->_field_instances.len() == 1LL)) {
		return this->self->_field_instances[0LL];
	}
	return this->self->_method_instance_force();
}



inline std::tuple<jule::Bool,jule::Int> _1037649f0_Fn::_method_append_instance(jule::Ref<_1037649f0_FnIns> _15538_ins) {
	if ((*this)._field_generics.len() == 0LL) {
		if ((*this)._field_instances.len() == 1LL) {
			return std::make_tuple(false,0LL);
		}
		(*this)._field_instances=jule::append((*this)._field_instances,jule::Slice<jule::Ref<_1037649f0_FnIns>>({_15538_ins}));
		return std::make_tuple(true,-1LL);
	}
	if ((*this)._field_instances.len() == 0LL) {
		(*this)._field_instances=jule::append((*this)._field_instances,jule::Slice<jule::Ref<_1037649f0_FnIns>>({_15538_ins}));
		return std::make_tuple(true,-1LL);
	}
	{
		auto __julec_range_expr = (*this)._field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1037649f0_j = 0;
			jule::Ref<_1037649f0_FnIns> _1037649f0_ains = *__julec_range_begin;
			_iter_begin_4391313264:;
			{
				{
					auto __julec_range_expr = _1037649f0_ains->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _1037649f0_i = 0;
						jule::Ref<_104a21a10_TypeKind> _1037649f0_ag = *__julec_range_begin;
						_iter_begin_4391317552:;
						{
							if (_1037649f0_ag->_method_equals(_15538_ins->_field_generics[static_cast<jule::Int>(_1037649f0_i)])) {
								return std::make_tuple(false,_1037649f0_j);
							}
						}
						_iter_next_4391317552:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_1037649f0_i; _1037649f0_ag = *__julec_range_begin; goto _iter_begin_4391317552; }
						_iter_end_4391317552:;
					}
				}
			}
			_iter_next_4391313264:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1037649f0_j; _1037649f0_ains = *__julec_range_begin; goto _iter_begin_4391313264; }
			_iter_end_4391313264:;
		}
	}
	(*this)._field_instances=jule::append((*this)._field_instances,jule::Slice<jule::Ref<_1037649f0_FnIns>>({_15538_ins}));
	return std::make_tuple(true,-1LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _1037649f0_Fn &_Src) {
	_Stream << "Fn{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_1037649f0_ParamIns> _1037649f0_Param::_method_instance(void) {
	return jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(this->self,jule::Ref<_104a21a10_TypeKind>()));
}



inline jule::Bool _1037649f0_Param::_method_is_self(void) {
	return ((*this)._field_ident == jule::Str("&self", 5)) || ((*this)._field_ident == jule::Str("self", 4));
}



inline jule::Bool _1037649f0_Param::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str("", 0)) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _1037649f0_Param &_Src) {
	_Stream << "Param{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_1037370d0_StructIns> _1037370d0_Struct::_method_instance(void) {
	if ((this->self->_field_generics.len() == 0LL) && (this->self->_field_instances.len() == 1LL)) {
		return this->self->_field_instances[0LL];
	}
	jule::Ref<_1037370d0_StructIns> _6617_ins = jule::new_struct<_1037370d0_StructIns>(new( std::nothrow ) _1037370d0_StructIns(jule::Bool(),this->self,jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037370d0_FieldIns>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(this->self->_field_fields.len()))),jule::Slice<jule::Ref<_1037649f0_Fn>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(this->self->_field_methods.len()))),jule::Bool(),_1036da950_ReferenceStack::_static_method_new()));
	{
		auto __julec_range_expr = this->self->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1037370d0_i = 0;
			jule::Ref<_1037370d0_Field> _1037370d0_f = *__julec_range_begin;
			_iter_begin_4391538128:;
			{
				_6617_ins->_field_fields[static_cast<jule::Int>(_1037370d0_i)]=_1037370d0_f->_method_instance();
				if (jule::real(_1037370d0_f->_field_kind->_field_kind) && _104a21a10_is_mut(_1037370d0_f->_field_kind->_field_kind)) {
					_6617_ins->_field_has_mut=true;
				}
			}
			_iter_next_4391538128:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1037370d0_i; _1037370d0_f = *__julec_range_begin; goto _iter_begin_4391538128; }
			_iter_end_4391538128:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1037370d0_i = 0;
			jule::Ref<_1037649f0_Fn> _1037370d0_f = *__julec_range_begin;
			_iter_begin_4391544336:;
			{
				jule::Ref<_1037649f0_Fn> _8121_fins = jule::new_struct<_1037649f0_Fn>(new( std::nothrow ) _1037649f0_Fn(_1037370d0_f->_field_sema,_1037370d0_f->_field_token,_1037370d0_f->_field_global,_1037370d0_f->_field_unsafety,_1037370d0_f->_field_public,_1037370d0_f->_field_cpp_linked,_1037370d0_f->_field_statically,_1037370d0_f->_field_ident,_1037370d0_f->_field_directives,_1037370d0_f->_field_doc,_1037370d0_f->_field_scope,_1037370d0_f->_field_generics,_1037370d0_f->_field_result,_1037370d0_f->_field_params,_1037370d0_f->_field_owner,nullptr));
				_6617_ins->_field_methods[static_cast<jule::Int>(_1037370d0_i)]=_8121_fins;
			}
			_iter_next_4391544336:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1037370d0_i; _1037370d0_f = *__julec_range_begin; goto _iter_begin_4391544336; }
			_iter_end_4391544336:;
		}
	}
	return _6617_ins;
}



inline jule::Ref<_1037370d0_StructIns> _1037370d0_Struct::_method_append_instance(jule::Ref<_1037370d0_StructIns> _10738_ins) {
	if (((*this)._field_generics.len() == 0LL) && ((*this)._field_instances.len() == 1LL)) {
		return (*this)._field_instances[0LL];
	}
	{
		auto __julec_range_expr = (*this)._field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_StructIns> _1037370d0_ains = *__julec_range_begin;
			_iter_begin_4391558080:;
			{
				{
					auto __julec_range_expr = _1037370d0_ains->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _1037370d0_i = 0;
						jule::Ref<_104a21a10_TypeKind> _1037370d0_ag = *__julec_range_begin;
						_iter_begin_4391560032:;
						{
							if (_1037370d0_ag->_method_equals(_10738_ins->_field_generics[static_cast<jule::Int>(_1037370d0_i)])) {
								return _1037370d0_ains;
							}
						}
						_iter_next_4391560032:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_1037370d0_i; _1037370d0_ag = *__julec_range_begin; goto _iter_begin_4391560032; }
						_iter_end_4391560032:;
					}
				}
			}
			_iter_next_4391558080:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1037370d0_ains = *__julec_range_begin; goto _iter_begin_4391558080; }
			_iter_end_4391558080:;
		}
	}
	(*this)._field_instances=jule::append((*this)._field_instances,jule::Slice<jule::Ref<_1037370d0_StructIns>>({_10738_ins}));
	return jule::new_ref<_1037370d0_StructIns>();
}



inline jule::Ref<_1037649f0_Fn> _1037370d0_Struct::_method_find_method(jule::Str _12834_ident,jule::Bool _12846_statically) {
	{
		auto __julec_range_expr = (*this)._field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _1037370d0_f = *__julec_range_begin;
			_iter_begin_4391569088:;
			{
				if ((_1037370d0_f->_field_statically == _12846_statically) && (_1037370d0_f->_field_ident == _12834_ident)) {
					return _1037370d0_f;
				}
			}
			_iter_next_4391569088:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1037370d0_f = *__julec_range_begin; goto _iter_begin_4391569088; }
			_iter_end_4391569088:;
		}
	}
	return jule::new_ref<_1037649f0_Fn>();
}



inline jule::Ref<_1037370d0_Field> _1037370d0_Struct::_method_find_field(jule::Str _13933_ident) {
	{
		auto __julec_range_expr = (*this)._field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Field> _1037370d0_f = *__julec_range_begin;
			_iter_begin_4391574624:;
			{
				if (_1037370d0_f->_field_ident == _13933_ident) {
					return _1037370d0_f;
				}
			}
			_iter_next_4391574624:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1037370d0_f = *__julec_range_begin; goto _iter_begin_4391574624; }
			_iter_end_4391574624:;
		}
	}
	return jule::new_ref<_1037370d0_Field>();
}



inline jule::Bool _1037370d0_Struct::_method_is_implements(jule::Ref<_1036e5da0_Trait> _14932_t) {
	{
		auto __julec_range_expr = (*this)._field_implements;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036e5da0_Trait> _1037370d0_it = *__julec_range_begin;
			_iter_begin_4391203968:;
			{
				if ((_14932_t).alloc == (_1037370d0_it).alloc) {
					return true;
				}
			}
			_iter_next_4391203968:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1037370d0_it = *__julec_range_begin; goto _iter_begin_4391203968; }
			_iter_end_4391203968:;
		}
	}
	return false;
}



inline jule::Bool _1037370d0_Struct::_method_is_derives(jule::Str _15929_ident) {
	{
		auto __julec_range_expr = (*this)._field_directives;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1487f5920_Directive> _1037370d0_d = *__julec_range_begin;
			_iter_begin_4391206576:;
			{
				if (_1037370d0_d->_field_tag == jule::Str("derive", 6)) {
					if ((_1037370d0_d->_field_args.len() == 1LL) && (_1037370d0_d->_field_args[0LL] == _15929_ident)) {
						return true;
					}
				}
			}
			_iter_next_4391206576:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1037370d0_d = *__julec_range_begin; goto _iter_begin_4391206576; }
			_iter_end_4391206576:;
		}
	}
	return false;
}



inline jule::Bool _1037370d0_Struct::_method_is_uses(jule::Ref<_1037370d0_Struct> _17126_s) {
	{
		auto __julec_range_expr = (*this)._field_uses;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _1037370d0_u = *__julec_range_begin;
			_iter_begin_4391213168:;
			{
				_iter_begin_4391214448:;
				if (!((_17126_s).alloc == (_1037370d0_u).alloc)) { goto _iter_end_4391214448; }
				{
					return true;
				}
				_iter_next_4391214448:;
				goto _iter_begin_4391214448;
				_iter_end_4391214448:;
			}
			_iter_next_4391213168:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1037370d0_u = *__julec_range_begin; goto _iter_begin_4391213168; }
			_iter_end_4391213168:;
		}
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1037370d0_Struct &_Src) {
	_Stream << "Struct{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "depends:" << _Src._field_depends << ", ";
	_Stream << "uses:" << _Src._field_uses << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "implements:" << _Src._field_implements << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_1037370d0_FieldIns> _1037370d0_Field::_method_instance(void) {
	return jule::new_struct<_1037370d0_FieldIns>(new( std::nothrow ) _1037370d0_FieldIns(this->self,this->self->_field_kind->_field_kind));
}







std::ostream &operator<<(std::ostream &_Stream, const _1037370d0_Field &_Src) {
	_Stream << "Field{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _149043a20_AssignInfo &_Src) {
	_Stream << "AssignInfo{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "ok:" << _Src._field_ok;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base._field_id != 0LLU;
}



inline jule::Bool _1487f5920_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base._field_id == 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_TraitDecl &_Src) {
	_Stream << "TraitDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_StructDecl &_Src) {
	_Stream << "StructDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_FieldDecl &_Src) {
	_Stream << "FieldDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_EnumDecl::_method_default_typed(void) {
	return (!(jule::real((*this)._field_kind)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_EnumDecl &_Src) {
	_Stream << "EnumDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_EnumItemDecl::_method_auto_expr(void) {
	return (!(jule::real((*this)._field_expr)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_EnumItemDecl &_Src) {
	_Stream << "EnumItemDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_UseDecl &_Src) {
	_Stream << "UseDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "full:" << _Src._field_full << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_Case &_Src) {
	_Stream << "Case{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_TypeAliasDecl &_Src) {
	_Stream << "TypeAliasDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_Else &_Src) {
	_Stream << "Else{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_If &_Src) {
	_Stream << "If{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_VarDecl &_Src) {
	_Stream << "VarDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_FnDecl::_method_is_anon(void) {
	return (*this)._field_ident == jule::Str("<anonymous>", 11);
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_FnDecl &_Src) {
	_Stream << "FnDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_ParamDecl::_method_is_self(void) {
	return (*this)._field_ident.has_suffix(jule::Str("self", 4));
}



inline jule::Bool _1487f5920_ParamDecl::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str("", 0)) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_ParamDecl &_Src) {
	_Stream << "ParamDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_AssignLeft &_Src) {
	_Stream << "AssignLeft{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_GenericDecl &_Src) {
	_Stream << "GenericDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_FnCallExpr &_Src) {
	_Stream << "FnCallExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "concurrent:" << _Src._field_concurrent;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_Expr::_method_is_fn_call(void) {
	if ((*this)._field_kind == nullptr) {
		return false;
	}
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_FnCallExpr>>())) { goto _case_end_4383943696; }
		_case_begin_4383943696:;
		{
			return true;
		}
		goto _match_end_4383941856;
		_case_end_4383943696:;
		_case_begin_4383943216:;
		{
			return false;
		}
		goto _match_end_4383941856;
		_case_end_4383943216:;
		_match_end_4383941856:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_Expr &_Src) {
	_Stream << "Expr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_IdentTypeDecl::_method_is_prim(void) {
	return (*this)._field_token._field_id == 1LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_IdentTypeDecl &_Src) {
	_Stream << "IdentTypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_TypeDecl &_Src) {
	_Stream << "TypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_Directive &_Src) {
	_Stream << "Directive{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "tag:" << _Src._field_tag << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_Comment::_method_is_directive(void) {
	return (*this)._field_text.has_prefix(jule::Str("jule:", 5));
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_Comment &_Src) {
	_Stream << "Comment{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1487f5920_Node::_method_is_decl(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_EnumDecl>>() || _match_expr.type_is<jule::Ref<_1487f5920_FnDecl>>() || _match_expr.type_is<jule::Ref<_1487f5920_StructDecl>>() || _match_expr.type_is<jule::Ref<_1487f5920_TraitDecl>>() || _match_expr.type_is<jule::Ref<_1487f5920_TypeAliasDecl>>() || _match_expr.type_is<jule::Ref<_1487f5920_FieldDecl>>() || _match_expr.type_is<jule::Ref<_1487f5920_UseDecl>>() || _match_expr.type_is<jule::Ref<_1487f5920_VarDecl>>() || _match_expr.type_is<jule::Ref<_1487f5920_TypeDecl>>())) { goto _case_end_4383900720; }
		_case_begin_4383900720:;
		{
			return true;
		}
		goto _match_end_4383899760;
		_case_end_4383900720:;
		_case_begin_4383900368:;
		{
			return false;
		}
		goto _match_end_4383899760;
		_case_end_4383900368:;
		_match_end_4383899760:;
	}
}



inline jule::Bool _1487f5920_Node::_method_is_comment(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_Comment>>() || _match_expr.type_is<jule::Ref<_1487f5920_CommentGroup>>())) { goto _case_end_4383917712; }
		_case_begin_4383917712:;
		{
			return true;
		}
		goto _match_end_4383915680;
		_case_end_4383917712:;
		_case_begin_4383917360:;
		{
			return false;
		}
		goto _match_end_4383915680;
		_case_end_4383917360:;
		_match_end_4383915680:;
	}
}



inline jule::Bool _1487f5920_Node::_method_is_impl(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_Impl>>())) { goto _case_end_4383921456; }
		_case_begin_4383921456:;
		{
			return true;
		}
		goto _match_end_4383920000;
		_case_end_4383921456:;
		_case_begin_4383921104:;
		{
			return false;
		}
		goto _match_end_4383920000;
		_case_end_4383921104:;
		_match_end_4383920000:;
	}
}



inline jule::Bool _1487f5920_Node::_method_is_use_decl(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_UseDecl>>())) { goto _case_end_4383924880; }
		_case_begin_4383924880:;
		{
			return true;
		}
		goto _match_end_4383923360;
		_case_end_4383924880:;
		_case_begin_4383924528:;
		{
			return false;
		}
		goto _match_end_4383923360;
		_case_end_4383924528:;
		_match_end_4383923360:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1487f5920_Node &_Src) {
	_Stream << "Node{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline jule::Int _1490cfc20_get_last_errno(void) {
	return errno;
}



inline jule::Str _1490d0f50_byte_ptr_to_str(jule::U8* _4831_s) {
	if (_4831_s == nullptr) {
		return jule::Str("", 0);
	}
	return __jule_str_from_byte_ptr(_4831_s);
}



inline jule::Int _1490d0f50_stat(jule::U8* _5620_path,struct stat* _5637_stat) {
	return static_cast<jule::Int>(__jule_stat(((char*)(_5620_path)),_5637_stat));
}



inline jule::Int _1490d0f50_open(jule::U8* _6120_path,jule::Int _6133_flag,jule::Int _6144_mode) {
	return static_cast<jule::Int>(open(((char*)(_6120_path)),_6133_flag,_6144_mode));
}



inline jule::U8* _1490d0f50_getcwd(jule::U8* _6722_buff,jule::Uint _6735_bufflen) {
	return ((jule::U8*)(getcwd(((char*)(_6722_buff)),_6735_bufflen)));
}



inline DIR* _1490d0f50_opendir(jule::U8* _7223_path) {
	return opendir(((char*)(_7223_path)));
}



inline struct dirent* _1490d0f50_readdir(DIR* _7527_dir) {
	return readdir(_7527_dir);
}



inline jule::Int _1490d0f50_closedir(DIR* _7828_dir) {
	return static_cast<jule::Int>(closedir(_7828_dir));
}



inline jule::Int _1490d0f50_chdir(jule::U8* _8121_path) {
	return static_cast<jule::Int>(chdir(((char*)(_8121_path))));
}



inline jule::Int _1490d0f50_remove(jule::U8* _8422_path) {
	return static_cast<jule::Int>(remove(((char*)(_8422_path))));
}



inline jule::Int _1490d0f50_mkdir(jule::U8* _8721_path,jule::Int _8734_mode) {
	return static_cast<jule::Int>(mkdir(((char*)(_8721_path)),_8734_mode));
}



inline jule::Int _1490d0f50_rmdir(jule::U8* _9221_path) {
	return static_cast<jule::Int>(rmdir(((char*)(_9221_path))));
}



inline jule::Int _1490d0f50_unlink(jule::U8* _9522_path) {
	return static_cast<jule::Int>(unlink(((char*)(_9522_path))));
}



inline jule::I64 _118613db0_seek(jule::Int _2613_handle,jule::I64 _2626_offset,jule::Int _2639_origin) {
	return static_cast<jule::I64>(lseek(_2613_handle,_2626_offset,_2639_origin));
}



inline jule::Int _118613db0_read(jule::Int _3120_handle,void* _3137_buff,jule::Uint _3152_n) {
	return static_cast<jule::Int>(read(_3120_handle,_3137_buff,_3152_n));
}



inline jule::Int _118613db0_close(jule::Int _3614_handle) {
	return static_cast<jule::Int>(close(_3614_handle));
}



inline jule::Int _118613db0_write(jule::Int _3921_handle,void* _3934_buff,jule::Uint _3949_n) {
	return static_cast<jule::Int>(write(_3921_handle,_3934_buff,_3949_n));
}



inline void _118613db0_exit(jule::Int _4413_code) {
	exit(_4413_code);
}



inline void* _11860afb0_malloc(jule::Uint _1515_size) {
	return malloc(_1515_size);
}



inline void* _11860afb0_calloc(jule::Uint _1915_size,jule::Uint _1927_n) {
	return calloc(_1915_size,_1927_n);
}



inline void* _11860afb0_realloc(void* _2427_ptr,jule::Uint _2441_size) {
	return realloc(_2427_ptr,_2441_size);
}



inline void _11860afb0_free(void* _2924_ptr) {
	free(_2924_ptr);
}



inline jule::Int _1490b8d80_get_last_os_error(void) {
	jule::Int _319_err = _1490cfc20_get_last_errno();
	{
		auto _match_expr{ _319_err };
		if (!((13LL) == _match_expr)) { goto _case_end_4378710192; }
		_case_begin_4378710192:;
		{
			return 1LLU;
		}
		goto _match_end_4378708800;
		_case_end_4378710192:;
		if (!((5LL) == _match_expr)) { goto _case_end_4378710304; }
		_case_begin_4378710304:;
		{
			return 2LLU;
		}
		goto _match_end_4378708800;
		_case_end_4378710304:;
		if (!((40LL) == _match_expr)) { goto _case_end_4378710416; }
		_case_begin_4378710416:;
		{
			return 3LLU;
		}
		goto _match_end_4378708800;
		_case_end_4378710416:;
		if (!((36LL) == _match_expr)) { goto _case_end_4378709632; }
		_case_begin_4378709632:;
		{
			return 4LLU;
		}
		goto _match_end_4378708800;
		_case_end_4378709632:;
		if (!((2LL) == _match_expr)) { goto _case_end_4378709744; }
		_case_begin_4378709744:;
		{
			return 5LLU;
		}
		goto _match_end_4378708800;
		_case_end_4378709744:;
		if (!((20LL) == _match_expr)) { goto _case_end_4378709856; }
		_case_begin_4378709856:;
		{
			return 6LLU;
		}
		goto _match_end_4378708800;
		_case_end_4378709856:;
		if (!((12LL) == _match_expr)) { goto _case_end_4378710800; }
		_case_begin_4378710800:;
		{
			return 7LLU;
		}
		goto _match_end_4378708800;
		_case_end_4378710800:;
		_case_begin_4378709328:;
		{
			return 0LLU;
		}
		goto _match_end_4378708800;
		_case_end_4378709328:;
		_match_end_4378708800:;
	}
}



inline std::tuple<jule::Str,jule::Int> _1490c0580_working_dir(void) {
	jule::Str _3410_p;
	jule::Int _3413_err;
	std::tie(_3410_p,_3413_err) = _1490bd770___getwd();
	return std::make_tuple(_3410_p,_3413_err);
}



inline jule::Int _1490c0580_set_working_dir(jule::Str _4324_path) {
	if (_4324_path == jule::Str("", 0)) {
		return 6LLU;
	}
	return _1490bd770___chdir(_4324_path);
}



inline void _1490c0580_init(void) {
	{
		(*((&(_1490c0580_ARGS))))=jule::command_line_args;
		(*((&(_1490c0580_ENV))))=jule::environment_variables;
	}
}



inline std::tuple<jule::Str,jule::Int> _1490bd770___getwd(void) {
	jule::U8* _1513_buff = _1490d0f50_getcwd(nullptr,0LLU);
	if (_1513_buff == nullptr) {
		return std::make_tuple(jule::Str("", 0),_1490b8d80_get_last_os_error());
	}
	jule::Str _199_pwd = _1490d0f50_byte_ptr_to_str(_1513_buff);
	{
		_11860afb0_free(_1513_buff);
	}
	return std::make_tuple(_199_pwd,0LLU);
}



inline jule::Int _1490bd770___chdir(jule::Str _2612_path) {
	if (_1490d0f50_chdir((&(_2612_path[0LL]))) == 0LL) {
		return 0LLU;
	}
	return _1490b8d80_get_last_os_error();
}



inline jule::Str _149060fe0_clean(jule::Str _10718_path) {
	jule::Str _1089_original_path = _10718_path;
	jule::Int _1099_vol_len = _149056a50_volume_name_len(_10718_path);
	_10718_path=_10718_path.slice(static_cast<jule::Int>(_1099_vol_len));
	if (_10718_path == jule::Str("", 0)) {
		if (((_1099_vol_len > 1LL) && _149056a50_is_path_sep(_1089_original_path[0LL])) && _149056a50_is_path_sep(_1089_original_path[1LL])) {
			return _149060fe0_from_slash(_1089_original_path);
		}
		return _1089_original_path + jule::Str(".", 1);
	}
	jule::Bool _1189_rooted = _149056a50_is_path_sep(_10718_path[0LL]);
	jule::I64 _1259_n = _10718_path.len();
	_149060fe0_LazyBuff _12613_out = _149060fe0_LazyBuff(_10718_path,jule::Slice<jule::U8>(),jule::Int(),_1089_original_path,_1099_vol_len);
	jule::Int _13114_r = 0LL;
	jule::Int _13121_dotdot = 0LL;
	std::tie(_13114_r,_13121_dotdot) = std::make_tuple(0LL,0LL);
	if (_1189_rooted) {
		_12613_out._method_append(47LLU);
		std::tie(_13114_r,_13121_dotdot) = std::make_tuple(1LL,1LL);
	}
	_iter_begin_4378772784:;
	if (!(_13114_r < _1259_n)) { goto _iter_end_4378772784; }
	{
		{
			if (!((_149056a50_is_path_sep(_10718_path[static_cast<jule::Int>(_13114_r)])))) { goto _case_end_4378787888; }
			_case_begin_4378787888:;
			{
				(_13114_r)++;
			}
			goto _match_end_4378773952;
			_case_end_4378787888:;
			if (!(((_10718_path[static_cast<jule::Int>(_13114_r)] == '.') && (((_13114_r + 1LL) == _1259_n) || _149056a50_is_path_sep(_10718_path[static_cast<jule::Int>(_13114_r + 1LL)]))))) { goto _case_end_4378788000; }
			_case_begin_4378788000:;
			{
				(_13114_r)++;
			}
			goto _match_end_4378773952;
			_case_end_4378788000:;
			if (!((((_10718_path[static_cast<jule::Int>(_13114_r)] == '.') && (_10718_path[static_cast<jule::Int>(_13114_r + 1LL)] == '.')) && (((_13114_r + 2LL) == _1259_n) || _149056a50_is_path_sep(_10718_path[static_cast<jule::Int>(_13114_r + 2LL)]))))) { goto _case_end_4378788112; }
			_case_begin_4378788112:;
			{
				_13114_r+=2LL;
				{
					if (!((_12613_out._field_w > _13121_dotdot))) { goto _case_end_4378792144; }
					_case_begin_4378792144:;
					{
						(_12613_out._field_w)--;
						_iter_begin_4378797520:;
						if (!((_12613_out._field_w > _13121_dotdot) && (!(_149056a50_is_path_sep(static_cast<jule::U8>(_12613_out._method_index(_12613_out._field_w))))))) { goto _iter_end_4378797520; }
						{
							(_12613_out._field_w)--;
						}
						_iter_next_4378797520:;
						goto _iter_begin_4378797520;
						_iter_end_4378797520:;
					}
					goto _match_end_4378792976;
					_case_end_4378792144:;
					if (!(((!(_1189_rooted))))) { goto _case_end_4378795584; }
					_case_begin_4378795584:;
					{
						if (_12613_out._field_w > 0LL) {
							_12613_out._method_append(47LLU);
						}
						_12613_out._method_append('.');
						_12613_out._method_append('.');
						_13121_dotdot=_12613_out._field_w;
					}
					goto _match_end_4378792976;
					_case_end_4378795584:;
					_match_end_4378792976:;
				}
			}
			goto _match_end_4378773952;
			_case_end_4378788112:;
			_case_begin_4378774048:;
			{
				if ((_1189_rooted && (_12613_out._field_w != 1LL)) || ((!(_1189_rooted)) && (_12613_out._field_w != 0LL))) {
					_12613_out._method_append(47LLU);
				}
				if (((false && (_12613_out._field_w == 0LL)) && (_12613_out._field_vol_len == 0LL)) && (_13114_r != 0LL)) {
					jule::Int _17425_i = _13114_r;
					_iter_begin_4378778288:;
					if (!((_17425_i < _1259_n) && (!(_149056a50_is_path_sep(_10718_path[static_cast<jule::Int>(_17425_i)]))))) { goto _iter_end_4378778288; }
					{
						if (_10718_path[static_cast<jule::Int>(_17425_i)] == ':') {
							_12613_out._method_append('.');
							_12613_out._method_append(47LLU);
							goto _iter_end_4378778288;
						}
					}
					_iter_next_4378778288:;
					(_17425_i)++;
					goto _iter_begin_4378778288;
					_iter_end_4378778288:;
				}
				_iter_begin_4378778608:;
				if (!((_13114_r < _1259_n) && (!(_149056a50_is_path_sep(_10718_path[static_cast<jule::Int>(_13114_r)]))))) { goto _iter_end_4378778608; }
				{
					_12613_out._method_append(_10718_path[static_cast<jule::Int>(_13114_r)]);
				}
				_iter_next_4378778608:;
				(_13114_r)++;
				goto _iter_begin_4378778608;
				_iter_end_4378778608:;
			}
			goto _match_end_4378773952;
			_case_end_4378774048:;
			_match_end_4378773952:;
		}
	}
	_iter_next_4378772784:;
	goto _iter_begin_4378772784;
	_iter_end_4378772784:;
	if (_12613_out._field_w == 0LL) {
		_12613_out._method_append('.');
	}
	return _149060fe0_from_slash(_12613_out._method_string());
}



inline jule::Str _149060fe0_to_slash(jule::Str _20017_path) {
	if (true) {
		return _20017_path;
	}
	return _20017_path.replace(static_cast<jule::Str>(47LL),jule::Str("/", 1),-1LL);
}



inline jule::Str _149060fe0_from_slash(jule::Str _21019_path) {
	if (true) {
		return _21019_path;
	}
	return _21019_path.replace(jule::Str("/", 1),static_cast<jule::Str>(47LL),-1LL);
}



inline jule::Str _149060fe0_join(jule::Slice<jule::Str> _22413_elem) {
	return _149056a50___join(_22413_elem);
}



inline jule::Str _149060fe0_ext(jule::Str _22912_path) {
	jule::I64 _23013_i = _22912_path.len() - 1LL;
	_iter_begin_4378811632:;
	if (!((_23013_i >= 0LL) && (!(_149056a50_is_path_sep(_22912_path[static_cast<jule::Int>(_23013_i)]))))) { goto _iter_end_4378811632; }
	{
		if (_22912_path[static_cast<jule::Int>(_23013_i)] == '.') {
			return _22912_path.slice(static_cast<jule::Int>(_23013_i));
		}
	}
	_iter_next_4378811632:;
	(_23013_i)--;
	goto _iter_begin_4378811632;
	_iter_end_4378811632:;
	return jule::Str("", 0);
}



inline std::tuple<jule::Str,jule::Bool> _149060fe0_abs(jule::Str _24412_path) {
	jule::Str _24510_abs_path;
	jule::Bool _24520_ok;
	std::tie(_24510_abs_path,_24520_ok) = _149056a50___abs(_24412_path);
	return std::make_tuple(_24510_abs_path,_24520_ok);
}



inline jule::Str _149060fe0_base(jule::Str _25317_path) {
	if (_25317_path == jule::Str("", 0)) {
		return jule::Str(".", 1);
	}
	_iter_begin_4378825680:;
	if (!((_25317_path.len() > 0LL) && _149056a50_is_path_sep(_25317_path[static_cast<jule::Int>(_25317_path.len() - 1LL)]))) { goto _iter_end_4378825680; }
	{
		_25317_path=_25317_path.slice(0LL,static_cast<jule::Int>(_25317_path.len() - 1LL));
	}
	_iter_next_4378825680:;
	goto _iter_begin_4378825680;
	_iter_end_4378825680:;
	_25317_path=_25317_path.slice(static_cast<jule::Int>(_149060fe0_volume_name(_25317_path).len()));
	jule::I64 _26413_i = _25317_path.len() - 1LL;
	_iter_begin_4378825760:;
	if (!((_26413_i >= 0LL) && (!(_149056a50_is_path_sep(_25317_path[static_cast<jule::Int>(_26413_i)]))))) { goto _iter_end_4378825760; }
	{
		(_26413_i)--;
	}
	_iter_next_4378825760:;
	goto _iter_begin_4378825760;
	_iter_end_4378825760:;
	if (_26413_i >= 0LL) {
		_25317_path=_25317_path.slice(static_cast<jule::Int>(_26413_i + 1LL));
	}
	if (_25317_path == jule::Str("", 0)) {
		return static_cast<jule::Str>(47LL);
	}
	return _25317_path;
}



inline jule::Str _149060fe0_dir(jule::Str _28412_path) {
	jule::Str _2859_vol = _149060fe0_volume_name(_28412_path);
	jule::I64 _28613_i = _28412_path.len() - 1LL;
	_iter_begin_4378837504:;
	if (!((_28613_i >= _2859_vol.len()) && (!(_149056a50_is_path_sep(_28412_path[static_cast<jule::Int>(_28613_i)]))))) { goto _iter_end_4378837504; }
	{
		(_28613_i)--;
	}
	_iter_next_4378837504:;
	goto _iter_begin_4378837504;
	_iter_end_4378837504:;
	jule::Str _2909_dir = _149060fe0_clean(_28412_path.slice(static_cast<jule::Int>(_2859_vol.len()),static_cast<jule::Int>(_28613_i + 1LL)));
	if ((_2909_dir == jule::Str(".", 1)) && (_2859_vol.len() > 2LL)) {
		return _2859_vol;
	}
	return _2859_vol + _2909_dir;
}



inline jule::Str _149060fe0_volume_name(jule::Str _30220_path) {
	return _149060fe0_from_slash(_30220_path.slice(0LL,static_cast<jule::Int>(_149056a50_volume_name_len(_30220_path))));
}



inline jule::Bool _149056a50_is_path_sep(jule::U8 _4720_c) {
	return 47LL == _4720_c;
}



inline jule::Bool _149056a50_is_abs(jule::Str _5215_path) {
	return _5215_path.has_prefix(jule::Str("/", 1));
}



inline jule::Int _149056a50_volume_name_len(jule::Str _5620_path) {
	return 0LL;
}



inline std::tuple<jule::Str,jule::Bool> _149056a50___abs(jule::Str _5810_path) {
	jule::Bool _5828_ok = jule::Bool();
	if (_149056a50_is_abs(_5810_path)) {
		_5828_ok = true;
		return std::make_tuple(_149060fe0_clean(_5810_path),_5828_ok);
	}
	jule::Str _6210_wd;
	jule::Int _6214_err;
	std::tie(_6210_wd,_6214_err) = _1490c0580_working_dir();
	if (_6214_err != 0LLU) {
		_5828_ok = false;
		return std::make_tuple(jule::Str("", 0),_5828_ok);
	}
	_5828_ok = true;
	return std::make_tuple(_149056a50___join(jule::Slice<jule::Str>({_6210_wd,_5810_path})),_5828_ok);
}



inline jule::Str _149056a50_str_join(jule::Slice<jule::Str> _6913_elems,jule::Str _6927_sep) {
	{
		auto _match_expr{ _6913_elems.len() };
		if (!((0LL) == _match_expr)) { goto _case_end_4379925632; }
		_case_begin_4379925632:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4379924864;
		_case_end_4379925632:;
		if (!((1LL) == _match_expr)) { goto _case_end_4379925744; }
		_case_begin_4379925744:;
		{
			return _6913_elems[0LL];
		}
		goto _match_end_4379924864;
		_case_end_4379925744:;
		_match_end_4379924864:;
	}
	jule::Str _7513_s = _6913_elems[0LL];
	{
		auto __julec_range_expr = _6913_elems.slice(1LL);
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _149056a50_elem = *__julec_range_begin;
			_iter_begin_4379927888:;
			{
				_7513_s+=_6927_sep + _149056a50_elem;
			}
			_iter_next_4379927888:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _149056a50_elem = *__julec_range_begin; goto _iter_begin_4379927888; }
			_iter_end_4379927888:;
		}
	}
	return _7513_s;
}



inline jule::Str _149056a50___join(jule::Slice<jule::Str> _8211_elem) {
	{
		auto __julec_range_expr = _8211_elem;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _149056a50_i = 0;
			jule::Str _149056a50_e = *__julec_range_begin;
			_iter_begin_4379930704:;
			{
				if (_149056a50_e != jule::Str("", 0)) {
					return _149060fe0_clean(_149056a50_str_join(_8211_elem.slice(static_cast<jule::Int>(_149056a50_i)),static_cast<jule::Str>(47LL)));
				}
			}
			_iter_next_4379930704:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_149056a50_i; _149056a50_e = *__julec_range_begin; goto _iter_begin_4379930704; }
			_iter_end_4379930704:;
		}
	}
	return jule::Str("", 0);
}



inline jule::Int _1191c3b80_leading_zeros(jule::Uint _4922_x) {
	return static_cast<jule::Int>(64LL - _1191c3b80_len(_4922_x));
}



inline jule::Int _1191c3b80_leading_zeros8(jule::U8 _5223_x) {
	return static_cast<jule::Int>(8LL - _1191c3b80_len8(_5223_x));
}



inline jule::Int _1191c3b80_leading_zeros16(jule::U16 _5524_x) {
	return static_cast<jule::Int>(16LL - _1191c3b80_len16(_5524_x));
}



inline jule::Int _1191c3b80_leading_zeros32(jule::U32 _5824_x) {
	return static_cast<jule::Int>(32LL - _1191c3b80_len32(_5824_x));
}



inline jule::Int _1191c3b80_leading_zeros64(jule::U64 _6124_x) {
	return static_cast<jule::Int>(64LL - _1191c3b80_len64(_6124_x));
}



inline jule::Int _1191c3b80_trailing_zeros(jule::Uint _8323_x) {
	if (false) {
		return static_cast<jule::Int>(_1191c3b80_trailing_zeros32(static_cast<jule::U32>(_8323_x)));
	}
	return static_cast<jule::Int>(_1191c3b80_trailing_zeros64(static_cast<jule::U64>(_8323_x)));
}



inline jule::Int _1191c3b80_trailing_zeros8(jule::U8 _9124_x) {
	return static_cast<jule::Int>(jule::Str("\b\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\5\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\6\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\5\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\a\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\5\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\6\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\5\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00", 256)[static_cast<jule::Int>(_9124_x)]);
}



inline jule::Int _1191c3b80_trailing_zeros16(jule::U16 _9625_x) {
	if (_9625_x == 0LL) {
		return 16LL;
	}
	return static_cast<jule::Int>(_1191c3b80_DE_BRUIJN32_TAB[static_cast<jule::Int>((static_cast<jule::U32>(_9625_x & (-(_9625_x))) * 125613361LL) >> 27LL)]);
}



inline jule::Int _1191c3b80_trailing_zeros32(jule::U32 _10525_x) {
	if (_10525_x == 0LL) {
		return 32LL;
	}
	return static_cast<jule::Int>(_1191c3b80_DE_BRUIJN32_TAB[static_cast<jule::Int>(((_10525_x & (-(_10525_x))) * 125613361LL) >> 27LL)]);
}



inline jule::Int _1191c3b80_trailing_zeros64(jule::U64 _11425_x) {
	if (_11425_x == 0LL) {
		return 64LL;
	}
	return static_cast<jule::Int>(_1191c3b80_DE_BRUIJN64_TAB[static_cast<jule::Int>(((_11425_x & (-(_11425_x))) * 285870213051353865LL) >> 58LL)]);
}



inline jule::Int _1191c3b80_ones_count(jule::Uint _14119_x) {
	if (false) {
		return static_cast<jule::Int>(_1191c3b80_ones_count32(static_cast<jule::U32>(_14119_x)));
	}
	return static_cast<jule::Int>(_1191c3b80_ones_count64(static_cast<jule::U64>(_14119_x)));
}



inline jule::Int _1191c3b80_ones_count8(jule::U8 _14920_x) {
	return static_cast<jule::Int>(jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_14920_x)]);
}



inline jule::Int _1191c3b80_ones_count16(jule::U16 _15421_x) {
	return static_cast<jule::Int>(jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_15421_x >> 8LL)] + jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_15421_x & 255LL)]);
}



inline jule::Int _1191c3b80_ones_count32(jule::U32 _15921_x) {
	return static_cast<jule::Int>(((jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_15921_x >> 24LL)] + jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>((_15921_x >> 16LL) & 255LL)]) + jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>((_15921_x >> 8LL) & 255LL)]) + jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_15921_x & 255LL)]);
}



inline jule::Int _1191c3b80_ones_count64(jule::U64 _16425_x) {
	
	_16425_x=static_cast<jule::U64>(((_16425_x >> 1LL) & 6148914691236517205LL) + (_16425_x & 6148914691236517205LL));
	_16425_x=static_cast<jule::U64>(((_16425_x >> 2LL) & 3689348814741910323LL) + (_16425_x & 3689348814741910323LL));
	_16425_x=static_cast<jule::U64>(((_16425_x >> 4LL) + _16425_x) & 1085102592571150095LL);
	_16425_x+=static_cast<jule::U64>(_16425_x >> 8LL);
	_16425_x+=static_cast<jule::U64>(_16425_x >> 16LL);
	_16425_x+=static_cast<jule::U64>(_16425_x >> 32LL);
	return static_cast<jule::Int>(static_cast<jule::Int>(_16425_x) & 127LLU);
}



inline jule::Uint _1191c3b80_rotate_left(jule::Uint _20020_x,jule::Int _20029_k) {
	if (false) {
		return static_cast<jule::Uint>(_1191c3b80_rotate_left32(static_cast<jule::U32>(_20020_x),_20029_k));
	}
	return static_cast<jule::Uint>(_1191c3b80_rotate_left64(static_cast<jule::U64>(_20020_x),_20029_k));
}



inline jule::U8 _1191c3b80_rotate_left8(jule::U8 _21121_x,jule::Int _21128_k) {
	
	jule::Uint _2139_s = static_cast<jule::Uint>(_21128_k) & 7LL;
	return static_cast<jule::U8>((_21121_x << _2139_s) | (_21121_x >> (8LL - _2139_s)));
}



inline jule::U16 _1191c3b80_rotate_left16(jule::U16 _22122_x,jule::Int _22130_k) {
	
	jule::Uint _2239_s = static_cast<jule::Uint>(_22130_k) & 15LL;
	return static_cast<jule::U16>((_22122_x << _2239_s) | (_22122_x >> (16LL - _2239_s)));
}



inline jule::U32 _1191c3b80_rotate_left32(jule::U32 _23122_x,jule::Int _23130_k) {
	
	jule::Uint _2339_s = static_cast<jule::Uint>(_23130_k) & 31LL;
	return static_cast<jule::U32>((_23122_x << _2339_s) | (_23122_x >> (32LL - _2339_s)));
}



inline jule::U64 _1191c3b80_rotate_left64(jule::U64 _24122_x,jule::Int _24130_k) {
	
	jule::Uint _2439_s = static_cast<jule::Uint>(_24130_k) & 63LL;
	return static_cast<jule::U64>((_24122_x << _2439_s) | (_24122_x >> (64LL - _2439_s)));
}



inline jule::Uint _1191c3b80_reverse(jule::Uint _25016_x) {
	if (false) {
		return static_cast<jule::Uint>(_1191c3b80_reverse32(static_cast<jule::U32>(_25016_x)));
	}
	return static_cast<jule::Uint>(_1191c3b80_reverse64(static_cast<jule::U64>(_25016_x)));
}



inline jule::U8 _1191c3b80_reverse8(jule::U8 _25817_x) {
	return static_cast<jule::U8>(jule::Str("\x00\302\200@\303\200 \302\240`\303\240\020\302\220P\303\2200\302\260p\303\260\b\302\210H\303\210(\302\250h\303\250\030\302\230X\303\2308\302\270x\303\270\4\302\204D\303\204$\302\244d\303\244\024\302\224T\303\2244\302\264t\303\264\f\302\214L\303\214,\302\254l\303\254\034\302\234\\\303\234<\302\274|\303\274\2\302\202B\303\202\"\302\242b\303\242\022\302\222R\303\2222\302\262r\303\262\n\302\212J\303\212*\302\252j\303\252\032\302\232Z\303\232:\302\272z\303\272\6\302\206F\303\206&\302\246f\303\246\026\302\226V\303\2266\302\266v\303\266\016\302\216N\303\216.\302\256n\303\256\036\302\236^\303\236>\302\276~\303\276\1\302\201A\303\201!\302\241a\303\241\021\302\221Q\303\2211\302\261q\303\261\t\302\211I\303\211)\302\251i\303\251\031\302\231Y\303\2319\302\271y\303\271\5\302\205E\303\205%\302\245e\303\245\025\302\225U\303\2255\302\265u\303\265\r\302\215M\303\215-\302\255m\303\255\035\302\235]\303\235=\302\275}\303\275\3\302\203C\303\203#\302\243c\303\243\023\302\223S\303\2233\302\263s\303\263\v\302\213K\303\213+\302\253k\303\253\033\302\233[\303\233;\302\273{\303\273\a\302\207G\303\207'\302\247g\303\247\027\302\227W\303\2277\302\267w\303\267\017\302\217O\303\217/\302\257o\303\257\037\302\237_\303\237?\302\277\177\303\277", 384)[static_cast<jule::Int>(_25817_x)]);
}



inline jule::U16 _1191c3b80_reverse16(jule::U16 _26318_x) {
	return static_cast<jule::U16>(static_cast<jule::U16>(jule::Str("\x00\302\200@\303\200 \302\240`\303\240\020\302\220P\303\2200\302\260p\303\260\b\302\210H\303\210(\302\250h\303\250\030\302\230X\303\2308\302\270x\303\270\4\302\204D\303\204$\302\244d\303\244\024\302\224T\303\2244\302\264t\303\264\f\302\214L\303\214,\302\254l\303\254\034\302\234\\\303\234<\302\274|\303\274\2\302\202B\303\202\"\302\242b\303\242\022\302\222R\303\2222\302\262r\303\262\n\302\212J\303\212*\302\252j\303\252\032\302\232Z\303\232:\302\272z\303\272\6\302\206F\303\206&\302\246f\303\246\026\302\226V\303\2266\302\266v\303\266\016\302\216N\303\216.\302\256n\303\256\036\302\236^\303\236>\302\276~\303\276\1\302\201A\303\201!\302\241a\303\241\021\302\221Q\303\2211\302\261q\303\261\t\302\211I\303\211)\302\251i\303\251\031\302\231Y\303\2319\302\271y\303\271\5\302\205E\303\205%\302\245e\303\245\025\302\225U\303\2255\302\265u\303\265\r\302\215M\303\215-\302\255m\303\255\035\302\235]\303\235=\302\275}\303\275\3\302\203C\303\203#\302\243c\303\243\023\302\223S\303\2233\302\263s\303\263\v\302\213K\303\213+\302\253k\303\253\033\302\233[\303\233;\302\273{\303\273\a\302\207G\303\207'\302\247g\303\247\027\302\227W\303\2277\302\267w\303\267\017\302\217O\303\217/\302\257o\303\257\037\302\237_\303\237?\302\277\177\303\277", 384)[static_cast<jule::Int>(_26318_x >> 8LL)]) | (static_cast<jule::U16>(jule::Str("\x00\302\200@\303\200 \302\240`\303\240\020\302\220P\303\2200\302\260p\303\260\b\302\210H\303\210(\302\250h\303\250\030\302\230X\303\2308\302\270x\303\270\4\302\204D\303\204$\302\244d\303\244\024\302\224T\303\2244\302\264t\303\264\f\302\214L\303\214,\302\254l\303\254\034\302\234\\\303\234<\302\274|\303\274\2\302\202B\303\202\"\302\242b\303\242\022\302\222R\303\2222\302\262r\303\262\n\302\212J\303\212*\302\252j\303\252\032\302\232Z\303\232:\302\272z\303\272\6\302\206F\303\206&\302\246f\303\246\026\302\226V\303\2266\302\266v\303\266\016\302\216N\303\216.\302\256n\303\256\036\302\236^\303\236>\302\276~\303\276\1\302\201A\303\201!\302\241a\303\241\021\302\221Q\303\2211\302\261q\303\261\t\302\211I\303\211)\302\251i\303\251\031\302\231Y\303\2319\302\271y\303\271\5\302\205E\303\205%\302\245e\303\245\025\302\225U\303\2255\302\265u\303\265\r\302\215M\303\215-\302\255m\303\255\035\302\235]\303\235=\302\275}\303\275\3\302\203C\303\203#\302\243c\303\243\023\302\223S\303\2233\302\263s\303\263\v\302\213K\303\213+\302\253k\303\253\033\302\233[\303\233;\302\273{\303\273\a\302\207G\303\207'\302\247g\303\247\027\302\227W\303\2277\302\267w\303\267\017\302\217O\303\217/\302\257o\303\257\037\302\237_\303\237?\302\277\177\303\277", 384)[static_cast<jule::Int>(_26318_x & 255LL)]) << 8LL));
}



inline jule::U32 _1191c3b80_reverse32(jule::U32 _26822_x) {
	
	_26822_x=static_cast<jule::U32>(((_26822_x >> 1LL) & 1431655765LL) | ((_26822_x & 1431655765LL) << 1LL));
	_26822_x=static_cast<jule::U32>(((_26822_x >> 2LL) & 858993459LL) | ((_26822_x & 858993459LL) << 2LL));
	_26822_x=static_cast<jule::U32>(((_26822_x >> 4LL) & 252645135LL) | ((_26822_x & 252645135LL) << 4LL));
	return static_cast<jule::U32>(_1191c3b80_reverse_bytes32(_26822_x));
}



inline jule::U64 _1191c3b80_reverse64(jule::U64 _27722_x) {
	
	_27722_x=static_cast<jule::U64>(((_27722_x >> 1LL) & 6148914691236517205LL) | ((_27722_x & 6148914691236517205LL) << 1LL));
	_27722_x=static_cast<jule::U64>(((_27722_x >> 2LL) & 3689348814741910323LL) | ((_27722_x & 3689348814741910323LL) << 2LL));
	_27722_x=static_cast<jule::U64>(((_27722_x >> 4LL) & 1085102592571150095LL) | ((_27722_x & 1085102592571150095LL) << 4LL));
	return static_cast<jule::U64>(_1191c3b80_reverse_bytes64(_27722_x));
}



inline jule::Uint _1191c3b80_reverse_bytes(jule::Uint _29022_x) {
	if (false) {
		return static_cast<jule::Uint>(_1191c3b80_reverse_bytes32(static_cast<jule::U32>(_29022_x)));
	}
	return static_cast<jule::Uint>(_1191c3b80_reverse_bytes64(static_cast<jule::U64>(_29022_x)));
}



inline jule::U16 _1191c3b80_reverse_bytes16(jule::U16 _30024_x) {
	return static_cast<jule::U16>((_30024_x >> 8LL) | (_30024_x << 8LL));
}



inline jule::U32 _1191c3b80_reverse_bytes32(jule::U32 _30728_x) {
	
	_30728_x=static_cast<jule::U32>(((_30728_x >> 8LL) & 16711935LL) | ((_30728_x & 16711935LL) << 8LL));
	return static_cast<jule::U32>((_30728_x >> 16LL) | (_30728_x << 16LL));
}



inline jule::U64 _1191c3b80_reverse_bytes64(jule::U64 _31628_x) {
	
	_31628_x=static_cast<jule::U64>(((_31628_x >> 8LL) & 71777214294589695LL) | ((_31628_x & 71777214294589695LL) << 8LL));
	_31628_x=static_cast<jule::U64>(((_31628_x >> 16LL) & 281470681808895LL) | ((_31628_x & 281470681808895LL) << 16LL));
	return static_cast<jule::U64>((_31628_x >> 32LL) | (_31628_x << 32LL));
}



inline jule::Int _1191c3b80_len(jule::Uint _32712_x) {
	if (false) {
		return static_cast<jule::Int>(_1191c3b80_len32(static_cast<jule::U32>(_32712_x)));
	}
	return static_cast<jule::Int>(_1191c3b80_len64(static_cast<jule::U64>(_32712_x)));
}



inline jule::Int _1191c3b80_len8(jule::U8 _33613_x) {
	return static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_33613_x)]);
}



inline jule::Int _1191c3b80_len16(jule::U16 _34218_x) {
	jule::Int _34228_n = jule::Int();
	if (_34218_x >= 256LL) {
		_34218_x>>=8LL;
		_34228_n=8LL;
	}
	_34228_n = static_cast<jule::Int>(_34228_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_34218_x)]));
	return _34228_n;
}



inline jule::Int _1191c3b80_len32(jule::U32 _35218_x) {
	jule::Int _35228_n = jule::Int();
	if (_35218_x >= 65536LL) {
		_35218_x>>=16LL;
		_35228_n=16LL;
	}
	if (_35218_x >= 256LL) {
		_35218_x>>=8LL;
		_35228_n+=8LL;
	}
	_35228_n = static_cast<jule::Int>(_35228_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_35218_x)]));
	return _35228_n;
}



inline jule::Int _1191c3b80_len64(jule::U64 _36618_x) {
	jule::Int _36628_n = jule::Int();
	if (_36618_x >= 4294967296LL) {
		_36618_x>>=32LL;
		_36628_n=32LL;
	}
	if (_36618_x >= 65536LL) {
		_36618_x>>=16LL;
		_36628_n+=16LL;
	}
	if (_36618_x >= 256LL) {
		_36618_x>>=8LL;
		_36628_n+=8LL;
	}
	_36628_n = static_cast<jule::Int>(_36628_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_36618_x)]));
	return _36628_n;
}



inline std::tuple<jule::Uint,jule::Uint> _1191c3b80_add(jule::Uint _38912_x,jule::Uint _38921_y,jule::Uint _38930_carry) {
	jule::Uint _38956_carry_out = jule::Uint();
	jule::Uint _38945_sum = jule::Uint();
	if (false) {
		jule::U32 _39114_s32;
		jule::U32 _39119_c32;
		std::tie(_39114_s32,_39119_c32) = _1191c3b80_add32(static_cast<jule::U32>(_38912_x),static_cast<jule::U32>(_38921_y),static_cast<jule::U32>(_38930_carry));
		_38945_sum = static_cast<jule::Uint>(_39114_s32);
		_38956_carry_out = static_cast<jule::Uint>(_39119_c32);
		return std::make_tuple(_38945_sum,_38956_carry_out);
	}
	jule::U64 _39410_s64;
	jule::U64 _39415_c64;
	std::tie(_39410_s64,_39415_c64) = _1191c3b80_add64(static_cast<jule::U64>(_38912_x),static_cast<jule::U64>(_38921_y),static_cast<jule::U64>(_38930_carry));
	_38945_sum = static_cast<jule::Uint>(_39410_s64);
	_38956_carry_out = static_cast<jule::Uint>(_39415_c64);
	return std::make_tuple(_38945_sum,_38956_carry_out);
}



inline std::tuple<jule::U32,jule::U32> _1191c3b80_add32(jule::U32 _40314_x,jule::U32 _40322_y,jule::U32 _40330_carry) {
	jule::U32 _40354_carryout = jule::U32();
	jule::U32 _40344_sum = jule::U32();
	jule::U64 _4049_sum64 = (static_cast<jule::U64>(_40314_x) + static_cast<jule::U64>(_40322_y)) + static_cast<jule::U64>(_40330_carry);
	_40344_sum=static_cast<jule::U32>(_4049_sum64);
	_40354_carryout=static_cast<jule::U32>(_4049_sum64 >> 32LL);
	return std::make_tuple(_40344_sum,_40354_carryout);
}



inline std::tuple<jule::U64,jule::U64> _1191c3b80_add64(jule::U64 _41514_x,jule::U64 _41522_y,jule::U64 _41530_carry) {
	jule::U64 _41554_carryout = jule::U64();
	jule::U64 _41544_sum = jule::U64();
	_41544_sum=static_cast<jule::U64>((_41514_x + _41522_y) + _41530_carry);
	_41554_carryout=static_cast<jule::U64>(((_41514_x & _41522_y) | ((_41514_x | _41522_y) & (~(_41544_sum)))) >> 63LL);
	return std::make_tuple(_41544_sum,_41554_carryout);
}



inline std::tuple<jule::Uint,jule::Uint> _1191c3b80_sub(jule::Uint _43112_x,jule::Uint _43121_y,jule::Uint _43130_borrow) {
	jule::Uint _43158_borrow_out = jule::Uint();
	jule::Uint _43146_diff = jule::Uint();
	if (false) {
		jule::U32 _43314_d32;
		jule::U32 _43319_b32;
		std::tie(_43314_d32,_43319_b32) = _1191c3b80_sub32(static_cast<jule::U32>(_43112_x),static_cast<jule::U32>(_43121_y),static_cast<jule::U32>(_43130_borrow));
		_43146_diff = static_cast<jule::Uint>(_43314_d32);
		_43158_borrow_out = static_cast<jule::Uint>(_43319_b32);
		return std::make_tuple(_43146_diff,_43158_borrow_out);
	}
	jule::U64 _43610_d64;
	jule::U64 _43615_b64;
	std::tie(_43610_d64,_43615_b64) = _1191c3b80_sub64(static_cast<jule::U64>(_43112_x),static_cast<jule::U64>(_43121_y),static_cast<jule::U64>(_43130_borrow));
	_43146_diff = static_cast<jule::Uint>(_43610_d64);
	_43158_borrow_out = static_cast<jule::Uint>(_43615_b64);
	return std::make_tuple(_43146_diff,_43158_borrow_out);
}



inline std::tuple<jule::U32,jule::U32> _1191c3b80_sub32(jule::U32 _44514_x,jule::U32 _44522_y,jule::U32 _44530_borrow) {
	jule::U32 _44556_borrowout = jule::U32();
	jule::U32 _44545_diff = jule::U32();
	_44545_diff=static_cast<jule::U32>((_44514_x - _44522_y) - _44530_borrow);
	_44556_borrowout=static_cast<jule::U32>((((~(_44514_x)) & _44522_y) | ((~(_44514_x ^ _44522_y)) & _44545_diff)) >> 31LL);
	return std::make_tuple(_44545_diff,_44556_borrowout);
}



inline std::tuple<jule::U64,jule::U64> _1191c3b80_sub64(jule::U64 _46014_x,jule::U64 _46022_y,jule::U64 _46030_borrow) {
	jule::U64 _46056_borrowout = jule::U64();
	jule::U64 _46045_diff = jule::U64();
	_46045_diff=static_cast<jule::U64>((_46014_x - _46022_y) - _46030_borrow);
	_46056_borrowout=static_cast<jule::U64>((((~(_46014_x)) & _46022_y) | ((~(_46014_x ^ _46022_y)) & _46045_diff)) >> 63LL);
	return std::make_tuple(_46045_diff,_46056_borrowout);
}



inline std::tuple<jule::Uint,jule::Uint> _1191c3b80_mul(jule::Uint _47412_x,jule::Uint _47421_y) {
	jule::Uint _47442_lo = jule::Uint();
	jule::Uint _47432_hi = jule::Uint();
	if (false) {
		jule::U32 _47614_h;
		jule::U32 _47617_l;
		std::tie(_47614_h,_47617_l) = _1191c3b80_mul32(static_cast<jule::U32>(_47412_x),static_cast<jule::U32>(_47421_y));
		_47432_hi = static_cast<jule::Uint>(_47614_h);
		_47442_lo = static_cast<jule::Uint>(_47617_l);
		return std::make_tuple(_47432_hi,_47442_lo);
	}
	jule::U64 _47910_h;
	jule::U64 _47913_l;
	std::tie(_47910_h,_47913_l) = _1191c3b80_mul64(static_cast<jule::U64>(_47412_x),static_cast<jule::U64>(_47421_y));
	_47432_hi = static_cast<jule::Uint>(_47910_h);
	_47442_lo = static_cast<jule::Uint>(_47913_l);
	return std::make_tuple(_47432_hi,_47442_lo);
}



inline std::tuple<jule::U32,jule::U32> _1191c3b80_mul32(jule::U32 _48814_x,jule::U32 _48822_y) {
	jule::U32 _48841_lo = jule::U32();
	jule::U32 _48832_hi = jule::U32();
	jule::U64 _4899_tmp = static_cast<jule::U64>(_48814_x) * static_cast<jule::U64>(_48822_y);
	std::tie(_48832_hi,_48841_lo) = std::make_tuple(static_cast<jule::U32>(_4899_tmp >> 32LL),static_cast<jule::U32>(_4899_tmp));
	return std::make_tuple(_48832_hi,_48841_lo);
}



inline std::tuple<jule::U64,jule::U64> _1191c3b80_mul64(jule::U64 _49914_x,jule::U64 _49922_y) {
	jule::U64 _49941_lo = jule::U64();
	jule::U64 _49932_hi = jule::U64();
	
	jule::U64 _5019_x0 = _49914_x & 4294967295LL;
	jule::U64 _5029_x1 = _49914_x >> 32LL;
	jule::U64 _5039_y0 = _49922_y & 4294967295LL;
	jule::U64 _5049_y1 = _49922_y >> 32LL;
	jule::U64 _5059_w0 = _5019_x0 * _5039_y0;
	jule::U64 _5069_t = (_5029_x1 * _5039_y0) + (_5059_w0 >> 32LL);
	jule::U64 _50713_w1 = _5069_t & 4294967295LL;
	jule::U64 _5089_w2 = _5069_t >> 32LL;
	_50713_w1+=static_cast<jule::U64>(_5019_x0 * _5049_y1);
	_49932_hi=static_cast<jule::U64>(((_5029_x1 * _5049_y1) + _5089_w2) + (_50713_w1 >> 32LL));
	_49941_lo=static_cast<jule::U64>(_49914_x * _49922_y);
	return std::make_tuple(_49932_hi,_49941_lo);
}



inline std::tuple<jule::Uint,jule::Uint> _1191c3b80_div(jule::Uint _52112_hi,jule::Uint _52122_lo,jule::Uint _52132_y) {
	jule::Uint _52154_rem = jule::Uint();
	jule::Uint _52143_quo = jule::Uint();
	if (false) {
		jule::U32 _52314_q;
		jule::U32 _52317_r;
		std::tie(_52314_q,_52317_r) = _1191c3b80_div32(static_cast<jule::U32>(_52112_hi),static_cast<jule::U32>(_52122_lo),static_cast<jule::U32>(_52132_y));
		_52143_quo = static_cast<jule::Uint>(_52314_q);
		_52154_rem = static_cast<jule::Uint>(_52317_r);
		return std::make_tuple(_52143_quo,_52154_rem);
	}
	jule::U64 _52610_q;
	jule::U64 _52613_r;
	std::tie(_52610_q,_52613_r) = _1191c3b80_div64(static_cast<jule::U64>(_52112_hi),static_cast<jule::U64>(_52122_lo),static_cast<jule::U64>(_52132_y));
	_52143_quo = static_cast<jule::Uint>(_52610_q);
	_52154_rem = static_cast<jule::Uint>(_52613_r);
	return std::make_tuple(_52143_quo,_52154_rem);
}



inline std::tuple<jule::U32,jule::U32> _1191c3b80_div32(jule::U32 _53414_hi,jule::U32 _53423_lo,jule::U32 _53432_y) {
	jule::U32 _53452_rem = jule::U32();
	jule::U32 _53442_quo = jule::U32();
	if (_53432_y == 0LL) {
		jule::panic(_108d53590_DIVIDE_ERROR);
	}
	if ((_53432_y != 0LL) && (_53432_y <= _53414_hi)) {
		jule::panic(_108d53590_OVERFLOW_ERROR);
	}
	jule::U64 _5419_z = (static_cast<jule::U64>(_53414_hi) << 32LL) | static_cast<jule::U64>(_53423_lo);
	std::tie(_53442_quo,_53452_rem) = std::make_tuple(static_cast<jule::U32>(jule::div(_5419_z,static_cast<jule::U64>(_53432_y))),static_cast<jule::U32>(jule::mod(_5419_z,static_cast<jule::U64>(_53432_y))));
	return std::make_tuple(_53442_quo,_53452_rem);
}



inline std::tuple<jule::U64,jule::U64> _1191c3b80_div64(jule::U64 _55014_hi,jule::U64 _55023_lo,jule::U64 _55036_y) {
	jule::U64 _55056_rem = jule::U64();
	jule::U64 _55046_quo = jule::U64();
	
	
	if (_55036_y == 0LL) {
		jule::panic(_108d53590_DIVIDE_ERROR);
	}
	if (_55036_y <= _55014_hi) {
		jule::panic(_108d53590_OVERFLOW_ERROR);
	}
	jule::Uint _5609_s = static_cast<jule::Uint>(_1191c3b80_leading_zeros64(_55036_y));
	_55036_y<<=_5609_s;
	jule::U64 _5639_yn1 = _55036_y >> 32LL;
	jule::U64 _5649_yn0 = _55036_y & 4294967295LL;
	jule::U64 _5659_un32 = (_55014_hi << _5609_s) | (_55023_lo >> (64LL - _5609_s));
	jule::U64 _5669_un10 = _55023_lo << _5609_s;
	jule::U64 _5679_un1 = _5669_un10 >> 32LL;
	jule::U64 _5689_un0 = _5669_un10 & 4294967295LL;
	jule::U64 _56913_q1 = jule::div(_5659_un32,_5639_yn1);
	jule::U64 _57013_rhat = _5659_un32 - (_56913_q1 * _5639_yn1);
	_iter_begin_4380324736:;
	if (!((_56913_q1 >= 4294967296LL) || ((_56913_q1 * _5649_yn0) > ((4294967296LL * _57013_rhat) + _5679_un1)))) { goto _iter_end_4380324736; }
	{
		(_56913_q1)--;
		_57013_rhat+=_5639_yn1;
		if (_57013_rhat >= 4294967296LL) {
			goto _iter_end_4380324736;
		}
	}
	_iter_next_4380324736:;
	goto _iter_begin_4380324736;
	_iter_end_4380324736:;
	jule::U64 _5809_un21 = ((_5659_un32 * 4294967296LL) + _5679_un1) - (_56913_q1 * _55036_y);
	jule::U64 _58113_q0 = jule::div(_5809_un21,_5639_yn1);
	_57013_rhat=static_cast<jule::U64>(_5809_un21 - (_58113_q0 * _5639_yn1));
	_iter_begin_4380328400:;
	if (!((_58113_q0 >= 4294967296LL) || ((_58113_q0 * _5649_yn0) > ((4294967296LL * _57013_rhat) + _5689_un0)))) { goto _iter_end_4380328400; }
	{
		(_58113_q0)--;
		_57013_rhat+=_5639_yn1;
		if (_57013_rhat >= 4294967296LL) {
			goto _iter_end_4380328400;
		}
	}
	_iter_next_4380328400:;
	goto _iter_begin_4380328400;
	_iter_end_4380328400:;
	_55046_quo = static_cast<jule::U64>((_56913_q1 * 4294967296LL) + _58113_q0);
	_55056_rem = static_cast<jule::U64>((((_5809_un21 * 4294967296LL) + _5689_un0) - (_58113_q0 * _55036_y)) >> _5609_s);
	return std::make_tuple(_55046_quo,_55056_rem);
}



inline jule::Uint _1191c3b80_rem(jule::Uint _59812_hi,jule::Uint _59822_lo,jule::Uint _59832_y) {
	if (false) {
		return static_cast<jule::Uint>(_1191c3b80_rem32(static_cast<jule::U32>(_59812_hi),static_cast<jule::U32>(_59822_lo),static_cast<jule::U32>(_59832_y)));
	}
	return static_cast<jule::Uint>(_1191c3b80_rem64(static_cast<jule::U64>(_59812_hi),static_cast<jule::U64>(_59822_lo),static_cast<jule::U64>(_59832_y)));
}



inline jule::U32 _1191c3b80_rem32(jule::U32 _60814_hi,jule::U32 _60823_lo,jule::U32 _60832_y) {
	return static_cast<jule::U32>(jule::mod((static_cast<jule::U64>(_60814_hi) << 32LL) | static_cast<jule::U64>(_60823_lo),static_cast<jule::U64>(_60832_y)));
}



inline jule::U64 _1191c3b80_rem64(jule::U64 _61514_hi,jule::U64 _61523_lo,jule::U64 _61532_y) {
	jule::U64 _62213_rem;
	std::tie(std::ignore,_62213_rem) = _1191c3b80_div64(static_cast<jule::U64>(jule::mod(_61514_hi,_61532_y)),_61523_lo,_61532_y);
	return _62213_rem;
}



inline jule::F64 _1190966b0_atanh(jule::F64 _7818_x) {
	
	{
		if (!((_7818_x < -1LL) || (_7818_x > 1LL) || (_10862f890_is_nan(_7818_x)))) { goto _case_end_4380493360; }
		_case_begin_4380493360:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4380492928;
		_case_end_4380493360:;
		if (!((_7818_x == 1LL))) { goto _case_end_4380493488; }
		_case_begin_4380493488:;
		{
			return static_cast<jule::F64>(_10862f890_inf(1LL));
		}
		goto _match_end_4380492928;
		_case_end_4380493488:;
		if (!((_7818_x == -1LL))) { goto _case_end_4380493600; }
		_case_begin_4380493600:;
		{
			return static_cast<jule::F64>(_10862f890_inf(-1LL));
		}
		goto _match_end_4380492928;
		_case_end_4380493600:;
		_match_end_4380492928:;
	}
	jule::Bool _8913_sign = false;
	if (_7818_x < 0LL) {
		_7818_x=static_cast<jule::F64>((-(_7818_x)));
		_8913_sign=true;
	}
	jule::F64 _9413_temp = 0LL;
	{
		if (!((_7818_x < 0.000000003725290298461914))) { goto _case_end_4380502368; }
		_case_begin_4380502368:;
		{
			_9413_temp=_7818_x;
		}
		goto _match_end_4380500800;
		_case_end_4380502368:;
		if (!((_7818_x < 0.5))) { goto _case_end_4380501952; }
		_case_begin_4380501952:;
		{
			_9413_temp=static_cast<jule::F64>(_7818_x + _7818_x);
			_9413_temp=static_cast<jule::F64>(0.5 * _1487ee500_log1p(static_cast<jule::F64>(_9413_temp + jule::div(_9413_temp * _7818_x,1LL - _7818_x))));
		}
		goto _match_end_4380500800;
		_case_end_4380501952:;
		_case_begin_4380500928:;
		{
			_9413_temp=static_cast<jule::F64>(0.5 * _1487ee500_log1p(static_cast<jule::F64>(jule::div(_7818_x + _7818_x,1LL - _7818_x))));
		}
		goto _match_end_4380500800;
		_case_end_4380500928:;
		_match_end_4380500800:;
	}
	if (_8913_sign) {
		_9413_temp=static_cast<jule::F64>((-(_9413_temp)));
	}
	return _9413_temp;
}



inline jule::U32 _119104140_f32_bits(jule::F32 _4117_f) {
	return (*(((jule::U32*)((&(_4117_f))))));
}



inline jule::F32 _119104140_f32_from_bits(jule::U32 _4722_b) {
	return (*(((jule::F32*)((&(_4722_b))))));
}



inline jule::U64 _119104140_f64_bits(jule::F64 _5217_f) {
	return (*(((jule::U64*)((&(_5217_f))))));
}



inline jule::F64 _119104140_f64_from_bits(jule::U64 _5822_b) {
	return (*(((jule::F64*)((&(_5822_b))))));
}



inline jule::F64 _119104730_cos(jule::F64 _14816_x) {
	
	
	
	if (_10862f890_is_nan(_14816_x) || _10862f890_is_inf(_14816_x,0LL)) {
		return static_cast<jule::F64>(_10862f890_nan());
	}
	jule::Bool _15813_sign = false;
	_14816_x=static_cast<jule::F64>(_1086895c0_abs(_14816_x));
	jule::U64 _16113_j = 0LLU;
	jule::F64 _16213_y = 0LL;
	jule::F64 _16313_z = 0LL;
	if (_14816_x >= 536870912LL) {
		std::tie(_16113_j,_16313_z) = _1486fbd30_trig_reduce(_14816_x);
	} else {
		_16113_j=static_cast<jule::U64>(_14816_x * 1.2732395447351628);
		_16213_y=static_cast<jule::F64>(_16113_j);
		if ((_16113_j & 1LL) == 1LL) {
			(_16113_j)++;
			(_16213_y)++;
		}
		_16113_j&=7LL;
		_16313_z=static_cast<jule::F64>(((_14816_x - (_16213_y * 0.7853981256484985)) - (_16213_y * 0.00000003774894707930798)) - (_16213_y * 0.0000000000000026951514290790595));
	}
	if (_16113_j > 3LL) {
		_16113_j-=4LL;
		_15813_sign=(!(_15813_sign));
	}
	if (_16113_j > 1LL) {
		_15813_sign=(!(_15813_sign));
	}
	jule::F64 _1879_zz = _16313_z * _16313_z;
	if ((_16113_j == 1LL) || (_16113_j == 2LL)) {
		_16213_y=static_cast<jule::F64>(_16313_z + ((_16313_z * _1879_zz) * ((((((((((_119104730__SIN[0LL] * _1879_zz) + _119104730__SIN[1LL]) * _1879_zz) + _119104730__SIN[2LL]) * _1879_zz) + _119104730__SIN[3LL]) * _1879_zz) + _119104730__SIN[4LL]) * _1879_zz) + _119104730__SIN[5LL])));
	} else {
		_16213_y=static_cast<jule::F64>((1LL - (0.5 * _1879_zz)) + ((_1879_zz * _1879_zz) * ((((((((((_119104730__COS[0LL] * _1879_zz) + _119104730__COS[1LL]) * _1879_zz) + _119104730__COS[2LL]) * _1879_zz) + _119104730__COS[3LL]) * _1879_zz) + _119104730__COS[4LL]) * _1879_zz) + _119104730__COS[5LL])));
	}
	if (_15813_sign) {
		_16213_y=static_cast<jule::F64>((-(_16213_y)));
	}
	return _16213_y;
}



inline jule::F64 _119104730_sin(jule::F64 _20516_x) {
	
	
	
	{
		if (!((_20516_x == 0LL) || (_10862f890_is_nan(_20516_x)))) { goto _case_end_4380545584; }
		_case_begin_4380545584:;
		{
			return _20516_x;
		}
		goto _match_end_4380545296;
		_case_end_4380545584:;
		if (!((_10862f890_is_inf(_20516_x,0LL)))) { goto _case_end_4380545696; }
		_case_begin_4380545696:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4380545296;
		_case_end_4380545696:;
		_match_end_4380545296:;
	}
	jule::Bool _21813_sign = false;
	if (_20516_x < 0LL) {
		_20516_x=static_cast<jule::F64>((-(_20516_x)));
		_21813_sign=true;
	}
	jule::U64 _22413_j = 0LLU;
	jule::F64 _22513_y = 0LL;
	jule::F64 _22613_z = 0LL;
	if (_20516_x >= 536870912LL) {
		std::tie(_22413_j,_22613_z) = _1486fbd30_trig_reduce(_20516_x);
	} else {
		_22413_j=static_cast<jule::U64>(_20516_x * 1.2732395447351628);
		_22513_y=static_cast<jule::F64>(_22413_j);
		if ((_22413_j & 1LL) == 1LL) {
			(_22413_j)++;
			(_22513_y)++;
		}
		_22413_j&=7LL;
		_22613_z=static_cast<jule::F64>(((_20516_x - (_22513_y * 0.7853981256484985)) - (_22513_y * 0.00000003774894707930798)) - (_22513_y * 0.0000000000000026951514290790595));
	}
	if (_22413_j > 3LL) {
		_21813_sign=(!(_21813_sign));
		_22413_j-=4LL;
	}
	jule::F64 _2469_zz = _22613_z * _22613_z;
	if ((_22413_j == 1LL) || (_22413_j == 2LL)) {
		_22513_y=static_cast<jule::F64>((1LL - (0.5 * _2469_zz)) + ((_2469_zz * _2469_zz) * ((((((((((_119104730__COS[0LL] * _2469_zz) + _119104730__COS[1LL]) * _2469_zz) + _119104730__COS[2LL]) * _2469_zz) + _119104730__COS[3LL]) * _2469_zz) + _119104730__COS[4LL]) * _2469_zz) + _119104730__COS[5LL])));
	} else {
		_22513_y=static_cast<jule::F64>(_22613_z + ((_22613_z * _2469_zz) * ((((((((((_119104730__SIN[0LL] * _2469_zz) + _119104730__SIN[1LL]) * _2469_zz) + _119104730__SIN[2LL]) * _2469_zz) + _119104730__SIN[3LL]) * _2469_zz) + _119104730__SIN[4LL]) * _2469_zz) + _119104730__SIN[5LL])));
	}
	if (_21813_sign) {
		_22513_y=static_cast<jule::F64>((-(_22513_y)));
	}
	return _22513_y;
}



inline jule::F64 _11911b6e0_tan(jule::F64 _11316_x) {
	
	
	
	{
		if (!((_11316_x == 0LL) || (_10862f890_is_nan(_11316_x)))) { goto _case_end_4380573456; }
		_case_begin_4380573456:;
		{
			return _11316_x;
		}
		goto _match_end_4380573168;
		_case_end_4380573456:;
		if (!((_10862f890_is_inf(_11316_x,0LL)))) { goto _case_end_4380573568; }
		_case_begin_4380573568:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4380573168;
		_case_end_4380573568:;
		_match_end_4380573168:;
	}
	jule::Bool _12613_sign = false;
	if (_11316_x < 0LL) {
		_11316_x=static_cast<jule::F64>((-(_11316_x)));
		_12613_sign=true;
	}
	jule::U64 _13113_j = 0LLU;
	jule::F64 _13213_y = 0LL;
	jule::F64 _13313_z = 0LL;
	if (_11316_x >= 536870912LL) {
		std::tie(_13113_j,_13313_z) = _1486fbd30_trig_reduce(_11316_x);
	} else {
		_13113_j=static_cast<jule::U64>(_11316_x * 1.2732395447351628);
		_13213_y=static_cast<jule::F64>(_13113_j);
		if ((_13113_j & 1LL) == 1LL) {
			(_13113_j)++;
			(_13213_y)++;
		}
		_13313_z=static_cast<jule::F64>(((_11316_x - (_13213_y * 0.7853981256484985)) - (_13213_y * 0.00000003774894707930798)) - (_13213_y * 0.0000000000000026951514290790595));
	}
	jule::F64 _1489_zz = _13313_z * _13313_z;
	if (_1489_zz > 0.00000000000001) {
		_13213_y=static_cast<jule::F64>(_13313_z + (_13313_z * jule::div(_1489_zz * ((((_11911b6e0__TAN_P[0LL] * _1489_zz) + _11911b6e0__TAN_P[1LL]) * _1489_zz) + _11911b6e0__TAN_P[2LL]),((((((_1489_zz + _11911b6e0__TAN_Q[1LL]) * _1489_zz) + _11911b6e0__TAN_Q[2LL]) * _1489_zz) + _11911b6e0__TAN_Q[3LL]) * _1489_zz) + _11911b6e0__TAN_Q[4LL])));
	} else {
		_13213_y=_13313_z;
	}
	if ((_13113_j & 2LL) == 2LL) {
		_13213_y=static_cast<jule::F64>(jule::div(-1LL,_13213_y));
	}
	if (_12613_sign) {
		_13213_y=static_cast<jule::F64>((-(_13213_y)));
	}
	return _13213_y;
}



inline jule::F64 _1191228f0_mod(jule::F64 _5212_x,jule::F64 _5224_y) {
	if ((((_5224_y == 0LL) || _10862f890_is_inf(_5212_x,0LL)) || _10862f890_is_nan(_5212_x)) || _10862f890_is_nan(_5224_y)) {
		return static_cast<jule::F64>(_10862f890_nan());
	}
	_5224_y=static_cast<jule::F64>(_1086895c0_abs(_5224_y));
	jule::F64 _5810_yfr;
	jule::Int _5815_yexp;
	std::tie(_5810_yfr,_5815_yexp) = _119106e10_frexp(_5224_y);
	jule::F64 _5913_r = _5212_x;
	if (_5212_x < 0LL) {
		_5913_r=static_cast<jule::F64>((-(_5212_x)));
	}
	_iter_begin_4380602592:;
	if (!(_5913_r >= _5224_y)) { goto _iter_end_4380602592; }
	{
		jule::F64 _6514_rfr;
		jule::Int _6523_rexp;
		std::tie(_6514_rfr,_6523_rexp) = _119106e10_frexp(_5913_r);
		if (_6514_rfr < _5810_yfr) {
			_6523_rexp=static_cast<jule::Int>(_6523_rexp - 1LL);
		}
		_5913_r=static_cast<jule::F64>(_5913_r - _138643ab0_ldexp(_5224_y,static_cast<jule::Int>(_6523_rexp - _5815_yexp)));
	}
	_iter_next_4380602592:;
	goto _iter_begin_4380602592;
	_iter_end_4380602592:;
	if (_5212_x < 0LL) {
		_5913_r=static_cast<jule::F64>((-(_5913_r)));
	}
	return _5913_r;
}



inline std::tuple<jule::F64,jule::Int> _119106e10_frexp(jule::F64 _4718_f) {
	jule::Int _4739_exp = jule::Int();
	jule::F64 _4728_frac = jule::F64();
	{
		if (!((_4718_f == 0LL))) { goto _case_end_4380609536; }
		_case_begin_4380609536:;
		{
			_4728_frac = _4718_f;
			_4739_exp = 0LL;
			return std::make_tuple(_4728_frac,_4739_exp);
		}
		goto _match_end_4380609328;
		_case_end_4380609536:;
		if (!((_10862f890_is_inf(_4718_f,0LL)) || (_10862f890_is_nan(_4718_f)))) { goto _case_end_4380609664; }
		_case_begin_4380609664:;
		{
			_4728_frac = _4718_f;
			_4739_exp = 0LL;
			return std::make_tuple(_4728_frac,_4739_exp);
		}
		goto _match_end_4380609328;
		_case_end_4380609664:;
		_match_end_4380609328:;
	}
	std::tie(_4718_f,_4739_exp) = _10862f890_normalize(_4718_f);
	jule::U64 _5613_x = _119104140_f64_bits(_4718_f);
	_4739_exp+=static_cast<jule::Int>((static_cast<jule::Int>((_5613_x >> 52LL) & 2047LL) - 1023LL) + 1LL);
	_5613_x=static_cast<jule::U64>(_5613_x & -9218868437227405313LL);
	_5613_x|=4602678819172646912LL;
	_4728_frac=static_cast<jule::F64>(_119104140_f64_from_bits(_5613_x));
	return std::make_tuple(_4728_frac,_4739_exp);
}



inline jule::F32 _11917cc70_nextafter32(jule::F32 _4420_x,jule::F32 _4428_y) {
	jule::F32 _4438_r = jule::F32();
	{
		if (!((_10862f890_is_nan(static_cast<jule::F64>(_4420_x))) || (_10862f890_is_nan(static_cast<jule::F64>(_4428_y))))) { goto _case_end_4380621264; }
		_case_begin_4380621264:;
		{
			_4438_r=static_cast<jule::F32>(_10862f890_nan());
		}
		goto _match_end_4380620096;
		_case_end_4380621264:;
		if (!((_4420_x == _4428_y))) { goto _case_end_4380621504; }
		_case_begin_4380621504:;
		{
			_4438_r=_4420_x;
		}
		goto _match_end_4380620096;
		_case_end_4380621504:;
		if (!((_4420_x == 0LL))) { goto _case_end_4380622736; }
		_case_begin_4380622736:;
		{
			_4438_r=static_cast<jule::F32>(_11918d9f0_copysign(static_cast<jule::F64>(_119104140_f32_from_bits(1LLU)),static_cast<jule::F64>(_4428_y)));
		}
		goto _match_end_4380620096;
		_case_end_4380622736:;
		if (!(((_4428_y > _4420_x) == (_4420_x > 0LL)))) { goto _case_end_4380620544; }
		_case_begin_4380620544:;
		{
			_4438_r=static_cast<jule::F32>(_119104140_f32_from_bits(static_cast<jule::U32>(_119104140_f32_bits(_4420_x) + 1LL)));
		}
		goto _match_end_4380620096;
		_case_end_4380620544:;
		_case_begin_4380620240:;
		{
			_4438_r=static_cast<jule::F32>(_119104140_f32_from_bits(static_cast<jule::U32>(_119104140_f32_bits(_4420_x) - 1LL)));
		}
		goto _match_end_4380620096;
		_case_end_4380620240:;
		_match_end_4380620096:;
	}
	return _4438_r;
}



inline jule::F64 _11917cc70_nextafter(jule::F64 _6618_x,jule::F64 _6626_y) {
	jule::F64 _6636_r = jule::F64();
	{
		if (!((_10862f890_is_nan(_6618_x)) || (_10862f890_is_nan(_6626_y)))) { goto _case_end_4380632096; }
		_case_begin_4380632096:;
		{
			_6636_r=static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4380630928;
		_case_end_4380632096:;
		if (!((_6618_x == _6626_y))) { goto _case_end_4380632432; }
		_case_begin_4380632432:;
		{
			_6636_r=_6618_x;
		}
		goto _match_end_4380630928;
		_case_end_4380632432:;
		if (!((_6618_x == 0LL))) { goto _case_end_4380633504; }
		_case_begin_4380633504:;
		{
			_6636_r=static_cast<jule::F64>(_11918d9f0_copysign(static_cast<jule::F64>(_119104140_f64_from_bits(1LLU)),_6626_y));
		}
		goto _match_end_4380630928;
		_case_end_4380633504:;
		if (!(((_6626_y > _6618_x) == (_6618_x > 0LL)))) { goto _case_end_4380633616; }
		_case_begin_4380633616:;
		{
			_6636_r=static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>(_119104140_f64_bits(_6618_x) + 1LL)));
		}
		goto _match_end_4380630928;
		_case_end_4380633616:;
		_case_begin_4380631072:;
		{
			_6636_r=static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>(_119104140_f64_bits(_6618_x) - 1LL)));
		}
		goto _match_end_4380630928;
		_case_end_4380631072:;
		_match_end_4380630928:;
	}
	return _6636_r;
}



inline jule::F64 _11918d9f0_copysign(jule::F64 _3917_f,jule::F64 _3925_sign) {
	
	return static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>((_119104140_f64_bits(_3917_f) & 9223372036854775807LLU) | (_119104140_f64_bits(_3925_sign) & 9223372036854775808LLU))));
}



inline std::tuple<jule::U64,jule::F64> _1486fbd30_trig_reduce(jule::F64 _6020_x) {
	jule::F64 _6038_z = jule::F64();
	jule::U64 _6030_j = jule::U64();
	
	if (_6020_x < 0.7853981633974483) {
		_6030_j = 0LL;
		_6038_z = _6020_x;
		return std::make_tuple(_6030_j,_6038_z);
	}
	jule::U64 _6713_ix = _119104140_f64_bits(_6020_x);
	jule::Int _689_exp = (static_cast<jule::Int>((_6713_ix >> 52LL) & 2047LL) - 1023LL) - 52LL;
	_6713_ix=static_cast<jule::U64>(_6713_ix & -9218868437227405313LL);
	_6713_ix|=4503599627370496LL;
	jule::Uint _7410_digit = jule::div(static_cast<jule::Uint>(_689_exp + 61LL),64LL);
	jule::Uint _7417_bitshift = jule::mod(static_cast<jule::Uint>(_689_exp + 61LL),64LL);
	std::tie(_7410_digit,_7417_bitshift) = std::make_tuple(jule::div(static_cast<jule::Uint>(_689_exp + 61LL),64LL),jule::mod(static_cast<jule::Uint>(_689_exp + 61LL),64LL));
	jule::U64 _759_z0 = (_1486fbd30_M_PI4[static_cast<jule::Int>(_7410_digit)] << _7417_bitshift) | (_1486fbd30_M_PI4[static_cast<jule::Int>(_7410_digit + 1LL)] >> (64LL - _7417_bitshift));
	jule::U64 _769_z1 = (_1486fbd30_M_PI4[static_cast<jule::Int>(_7410_digit + 1LL)] << _7417_bitshift) | (_1486fbd30_M_PI4[static_cast<jule::Int>(_7410_digit + 2LL)] >> (64LL - _7417_bitshift));
	jule::U64 _779_z2 = (_1486fbd30_M_PI4[static_cast<jule::Int>(_7410_digit + 2LL)] << _7417_bitshift) | (_1486fbd30_M_PI4[static_cast<jule::Int>(_7410_digit + 3LL)] >> (64LL - _7417_bitshift));
	jule::U64 _7910_z2hi;
	std::tie(_7910_z2hi,std::ignore) = _1191c3b80_mul64(_779_z2,_6713_ix);
	jule::U64 _8010_z1hi;
	jule::U64 _8016_z1lo;
	std::tie(_8010_z1hi,_8016_z1lo) = _1191c3b80_mul64(_769_z1,_6713_ix);
	jule::U64 _819_z0lo = _759_z0 * _6713_ix;
	jule::U64 _8210_lo;
	jule::U64 _8214_c;
	std::tie(_8210_lo,_8214_c) = _1191c3b80_add64(_8016_z1lo,_7910_z2hi,0LLU);
	jule::U64 _8314_hi;
	std::tie(_8314_hi,std::ignore) = _1191c3b80_add64(_819_z0lo,_8010_z1hi,_8214_c);
	_6030_j=static_cast<jule::U64>(_8314_hi >> 61LL);
	_8314_hi=static_cast<jule::U64>((_8314_hi << 3LL) | (_8210_lo >> 61LL));
	jule::Uint _889_lz = static_cast<jule::Uint>(_1191c3b80_leading_zeros64(_8314_hi));
	jule::U64 _899_e = static_cast<jule::U64>(1023LL - (_889_lz + 1LL));
	_8314_hi=static_cast<jule::U64>((_8314_hi << (_889_lz + 1LL)) | (_8210_lo >> (64LL - (_889_lz + 1LL))));
	_8314_hi>>=12LL;
	_8314_hi|=static_cast<jule::U64>(_899_e << 52LL);
	_6038_z=static_cast<jule::F64>(_119104140_f64_from_bits(_8314_hi));
	if ((_6030_j & 1LL) == 1LL) {
		(_6030_j)++;
		_6030_j&=7LL;
		(_6038_z)--;
	}
	_6030_j = _6030_j;
	_6038_z = static_cast<jule::F64>(_6038_z * 0.7853981633974483);
	return std::make_tuple(_6030_j,_6038_z);
}



inline jule::F64 _1486fca80_atan2(jule::F64 _6014_y,jule::F64 _6022_x) {
	{
		if (!((_10862f890_is_nan(_6014_y)) || (_10862f890_is_nan(_6022_x)))) { goto _case_end_4380679024; }
		_case_begin_4380679024:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4380678784;
		_case_end_4380679024:;
		if (!((_6014_y == 0LL))) { goto _case_end_4380679152; }
		_case_begin_4380679152:;
		{
			if ((_6022_x >= 0LL) && (!(_138652150_signbit(_6022_x)))) {
				return static_cast<jule::F64>(_11918d9f0_copysign(0LL,_6014_y));
			}
			return static_cast<jule::F64>(_11918d9f0_copysign(3.141592653589793,_6014_y));
		}
		goto _match_end_4380678784;
		_case_end_4380679152:;
		if (!((_6022_x == 0LL))) { goto _case_end_4380679280; }
		_case_begin_4380679280:;
		{
			return static_cast<jule::F64>(_11918d9f0_copysign(1.5707963267948966,_6014_y));
		}
		goto _match_end_4380678784;
		_case_end_4380679280:;
		if (!((_10862f890_is_inf(_6022_x,0LL)))) { goto _case_end_4380679408; }
		_case_begin_4380679408:;
		{
			if (_10862f890_is_inf(_6022_x,1LL)) {
				{
					if (!((_10862f890_is_inf(_6014_y,0LL)))) { goto _case_end_4380688320; }
					_case_begin_4380688320:;
					{
						return static_cast<jule::F64>(_11918d9f0_copysign(0.7853981633974483,_6014_y));
					}
					goto _match_end_4380686768;
					_case_end_4380688320:;
					_case_begin_4380686912:;
					{
						return static_cast<jule::F64>(_11918d9f0_copysign(0LL,_6014_y));
					}
					goto _match_end_4380686768;
					_case_end_4380686912:;
					_match_end_4380686768:;
				}
			}
			{
				if (!((_10862f890_is_inf(_6014_y,0LL)))) { goto _case_end_4380689792; }
				_case_begin_4380689792:;
				{
					return static_cast<jule::F64>(_11918d9f0_copysign(2.356194490192345,_6014_y));
				}
				goto _match_end_4380689280;
				_case_end_4380689792:;
				_case_begin_4380690000:;
				{
					return static_cast<jule::F64>(_11918d9f0_copysign(3.141592653589793,_6014_y));
				}
				goto _match_end_4380689280;
				_case_end_4380690000:;
				_match_end_4380689280:;
			}
		}
		goto _match_end_4380678784;
		_case_end_4380679408:;
		if (!((_10862f890_is_inf(_6014_y,0LL)))) { goto _case_end_4380679536; }
		_case_begin_4380679536:;
		{
			return static_cast<jule::F64>(_11918d9f0_copysign(1.5707963267948966,_6014_y));
		}
		goto _match_end_4380678784;
		_case_end_4380679536:;
		_match_end_4380678784:;
	}
	jule::F64 _929_q = _108950f30_atan(static_cast<jule::F64>(jule::div(_6014_y,_6022_x)));
	if (_6022_x < 0LL) {
		if (_929_q <= 0LL) {
			return static_cast<jule::F64>(_929_q + 3.141592653589793);
		}
		return static_cast<jule::F64>(_929_q - 3.141592653589793);
	}
	return _929_q;
}



inline jule::F64 _1486fe210_floor(jule::F64 _4414_x) {
	if (((_4414_x == 0LL) || _10862f890_is_nan(_4414_x)) || _10862f890_is_inf(_4414_x,0LL)) {
		return _4414_x;
	}
	if (_4414_x < 0LL) {
		jule::F64 _4918_d;
		jule::F64 _4921_fract;
		std::tie(_4918_d,_4921_fract) = _14904ec70_modf(static_cast<jule::F64>((-(_4414_x))));
		if (_4921_fract != 0LL) {
			_4918_d=static_cast<jule::F64>(_4918_d + 1LL);
		}
		return static_cast<jule::F64>((-(_4918_d)));
	}
	jule::F64 _5510_d;
	std::tie(_5510_d,std::ignore) = _14904ec70_modf(_4414_x);
	return _5510_d;
}



inline jule::F64 _1486fe210_ceil(jule::F64 _6513_x) {
	return static_cast<jule::F64>((-(_1486fe210_floor(static_cast<jule::F64>((-(_6513_x)))))));
}



inline jule::F64 _1486fe210_trunc(jule::F64 _7314_x) {
	if (((_7314_x == 0LL) || _10862f890_is_nan(_7314_x)) || _10862f890_is_inf(_7314_x,0LL)) {
		return _7314_x;
	}
	jule::F64 _7710_d;
	std::tie(_7710_d,std::ignore) = _14904ec70_modf(_7314_x);
	return _7710_d;
}



inline jule::F64 _1486fe210_round(jule::F64 _8714_x) {
	jule::U64 _9713_bits = _119104140_f64_bits(_8714_x);
	jule::Uint _9813_e = static_cast<jule::Uint>(_9713_bits >> 52LL) & 2047LL;
	if (_9813_e < 1023LL) {
		_9713_bits&=9223372036854775808LLU;
		if (_9813_e == 1022LL) {
			_9713_bits|=4607182418800017408LL;
		}
	} else if (_9813_e < 1075LL) {
		
		_9813_e-=1023LL;
		_9713_bits+=static_cast<jule::Int>(2251799813685248LL >> _9813_e);
		_9713_bits&=static_cast<jule::Int>((~(4503599627370495LL >> _9813_e)));
	}
	return static_cast<jule::F64>(_119104140_f64_from_bits(_9713_bits));
}



inline jule::F64 _1486fe210_round_even(jule::F64 _12419_x) {
	jule::U64 _13613_bits = _119104140_f64_bits(_12419_x);
	jule::Uint _13713_e = static_cast<jule::Uint>(_13613_bits >> 52LL) & 2047LL;
	if (_13713_e >= 1023LL) {
		
		_13713_e-=1023LL;
		_13613_bits+=static_cast<jule::U64>((2251799813685247LL + ((_13613_bits >> (52LL - _13713_e)) & 1LL)) >> _13713_e);
		_13613_bits&=static_cast<jule::Int>((~(4503599627370495LL >> _13713_e)));
	} else if ((_13713_e == 1022LL) && ((_13613_bits & 4503599627370495LL) != 0LL)) {
		_13613_bits=static_cast<jule::U64>((_13613_bits & 9223372036854775808LLU) | 4607182418800017408LL);
	} else {
		_13613_bits&=9223372036854775808LLU;
	}
	return static_cast<jule::F64>(_119104140_f64_from_bits(_13613_bits));
}



inline jule::F64 _10862f890_nan(void) {
	return static_cast<jule::F64>(_119104140_f64_from_bits(9221120237041090561LLU));
}



inline jule::Bool _10862f890_is_nan(jule::F64 _5215_f) {
	return _5215_f != _5215_f;
}



inline jule::F64 _10862f890_inf(jule::Int _6112_sign) {
	if (_6112_sign >= 0LL) {
		return static_cast<jule::F64>(_119104140_f64_from_bits(9218868437227405312LLU));
	}
	return static_cast<jule::F64>(_119104140_f64_from_bits(18442240474082181120LLU));
}



inline jule::Bool _10862f890_is_inf(jule::F64 _7215_f,jule::Int _7223_sign) {
	return ((_7223_sign >= 0LL) && (_7215_f > jule::MAX_F64)) || ((_7223_sign <= 0LL) && (_7215_f < jule::MIN_F64));
}



inline std::tuple<jule::F64,jule::Int> _10862f890_normalize(jule::F64 _8214_x) {
	jule::Int _8232_exp = jule::Int();
	jule::F64 _8224_y = jule::F64();
	
	if (_1086895c0_abs(_8214_x) < 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014) {
		_8224_y = static_cast<jule::F64>(_8214_x * 4503599627370496LL);
		_8232_exp = -52LL;
		return std::make_tuple(_8224_y,_8232_exp);
	}
	_8224_y = _8214_x;
	_8232_exp = 0LL;
	return std::make_tuple(_8224_y,_8232_exp);
}



inline std::tuple<jule::F64,jule::F64> _108647e80_sincos(jule::F64 _4619_x) {
	jule::F64 _4639_cos = jule::F64();
	jule::F64 _4629_sin = jule::F64();
	
	
	
	{
		if (!((_4619_x == 0LL))) { goto _case_end_4380745456; }
		_case_begin_4380745456:;
		{
			_4629_sin = _4619_x;
			_4639_cos = 1LL;
			return std::make_tuple(_4629_sin,_4639_cos);
		}
		goto _match_end_4380745168;
		_case_end_4380745456:;
		if (!((_10862f890_is_nan(_4619_x)) || (_10862f890_is_inf(_4619_x,0LL)))) { goto _case_end_4380745568; }
		_case_begin_4380745568:;
		{
			_4629_sin = static_cast<jule::F64>(_10862f890_nan());
			_4639_cos = static_cast<jule::F64>(_10862f890_nan());
			return std::make_tuple(_4629_sin,_4639_cos);
		}
		goto _match_end_4380745168;
		_case_end_4380745568:;
		_match_end_4380745168:;
	}
	jule::Bool _5914_sin_sign = false;
	jule::Bool _5928_cos_sign = false;
	std::tie(_5914_sin_sign,_5928_cos_sign) = std::make_tuple(false,false);
	if (_4619_x < 0LL) {
		_4619_x=static_cast<jule::F64>((-(_4619_x)));
		_5914_sin_sign=true;
	}
	jule::U64 _6513_j = 0LLU;
	jule::F64 _6613_y = 0LL;
	jule::F64 _6713_z = 0LL;
	if (_4619_x >= 536870912LL) {
		std::tie(_6513_j,_6713_z) = _1486fbd30_trig_reduce(_4619_x);
	} else {
		_6513_j=static_cast<jule::U64>(_4619_x * 1.2732395447351628);
		_6613_y=static_cast<jule::F64>(_6513_j);
		if ((_6513_j & 1LL) == 1LL) {
			(_6513_j)++;
			(_6613_y)++;
		}
		_6513_j&=7LL;
		_6713_z=static_cast<jule::F64>(((_4619_x - (_6613_y * 0.7853981256484985)) - (_6613_y * 0.00000003774894707930798)) - (_6613_y * 0.0000000000000026951514290790595));
	}
	if (_6513_j > 3LL) {
		_6513_j-=4LL;
		std::tie(_5914_sin_sign,_5928_cos_sign) = std::make_tuple((!(_5914_sin_sign)),(!(_5928_cos_sign)));
	}
	if (_6513_j > 1LL) {
		_5928_cos_sign=(!(_5928_cos_sign));
	}
	jule::F64 _899_zz = _6713_z * _6713_z;
	_4639_cos=static_cast<jule::F64>((1LL - (0.5 * _899_zz)) + ((_899_zz * _899_zz) * ((((((((((_119104730__COS[0LL] * _899_zz) + _119104730__COS[1LL]) * _899_zz) + _119104730__COS[2LL]) * _899_zz) + _119104730__COS[3LL]) * _899_zz) + _119104730__COS[4LL]) * _899_zz) + _119104730__COS[5LL])));
	_4629_sin=static_cast<jule::F64>(_6713_z + ((_6713_z * _899_zz) * ((((((((((_119104730__SIN[0LL] * _899_zz) + _119104730__SIN[1LL]) * _899_zz) + _119104730__SIN[2LL]) * _899_zz) + _119104730__SIN[3LL]) * _899_zz) + _119104730__SIN[4LL]) * _899_zz) + _119104730__SIN[5LL])));
	if ((_6513_j == 1LL) || (_6513_j == 2LL)) {
		std::tie(_4629_sin,_4639_cos) = std::make_tuple(_4639_cos,_4629_sin);
	}
	if (_5928_cos_sign) {
		_4639_cos=static_cast<jule::F64>((-(_4639_cos)));
	}
	if (_5914_sin_sign) {
		_4629_sin=static_cast<jule::F64>((-(_4629_sin)));
	}
	return std::make_tuple(_4629_sin,_4639_cos);
}



inline jule::F64 _108648ff0_dim(jule::F64 _4412_x,jule::F64 _4420_y) {
	jule::F64 _509_v = _4412_x - _4420_y;
	if (_509_v <= 0LL) {
		return 0LL;
	}
	return _509_v;
}



inline jule::F64 _108648ff0_max(jule::F64 _6612_x,jule::F64 _6620_y) {
	{
		if (!((_10862f890_is_inf(_6612_x,1LL)) || (_10862f890_is_inf(_6620_y,1LL)))) { goto _case_end_4380780192; }
		_case_begin_4380780192:;
		{
			return static_cast<jule::F64>(_10862f890_inf(1LL));
		}
		goto _match_end_4380779984;
		_case_end_4380780192:;
		if (!((_10862f890_is_nan(_6612_x)) || (_10862f890_is_nan(_6620_y)))) { goto _case_end_4380780320; }
		_case_begin_4380780320:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4380779984;
		_case_end_4380780320:;
		if (!(((_6612_x == 0LL) && (_6612_x == _6620_y)))) { goto _case_end_4380780448; }
		_case_begin_4380780448:;
		{
			if (_138652150_signbit(_6612_x)) {
				return _6620_y;
			}
			return _6612_x;
		}
		goto _match_end_4380779984;
		_case_end_4380780448:;
		_match_end_4380779984:;
	}
	if (_6612_x > _6620_y) {
		return _6612_x;
	}
	return _6620_y;
}



inline jule::F64 _108648ff0_min(jule::F64 _9212_x,jule::F64 _9220_y) {
	{
		if (!((_10862f890_is_inf(_9212_x,-1LL)) || (_10862f890_is_inf(_9220_y,-1LL)))) { goto _case_end_4380787296; }
		_case_begin_4380787296:;
		{
			return static_cast<jule::F64>(_10862f890_inf(-1LL));
		}
		goto _match_end_4380787088;
		_case_end_4380787296:;
		if (!((_10862f890_is_nan(_9212_x)) || (_10862f890_is_nan(_9220_y)))) { goto _case_end_4380787424; }
		_case_begin_4380787424:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4380787088;
		_case_end_4380787424:;
		if (!(((_9212_x == 0LL) && (_9212_x == _9220_y)))) { goto _case_end_4380787552; }
		_case_begin_4380787552:;
		{
			if (_138652150_signbit(_9212_x)) {
				return _9212_x;
			}
			return _9220_y;
		}
		goto _match_end_4380787088;
		_case_end_4380787552:;
		_match_end_4380787088:;
	}
	if (_9212_x < _9220_y) {
		return _9212_x;
	}
	return _9220_y;
}



inline jule::F64 _108658370_log(jule::F64 _11112_x) {
	
	
	
	
	
	
	
	
	
	{
		if (!((_10862f890_is_nan(_11112_x)) || (_10862f890_is_inf(_11112_x,1LL)))) { goto _case_end_4380802480; }
		_case_begin_4380802480:;
		{
			return _11112_x;
		}
		goto _match_end_4380802288;
		_case_end_4380802480:;
		if (!((_11112_x < 0LL))) { goto _case_end_4380802608; }
		_case_begin_4380802608:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4380802288;
		_case_end_4380802608:;
		if (!((_11112_x == 0LL))) { goto _case_end_4380802736; }
		_case_begin_4380802736:;
		{
			return static_cast<jule::F64>(_10862f890_inf(-1LL));
		}
		goto _match_end_4380802288;
		_case_end_4380802736:;
		_match_end_4380802288:;
	}
	jule::F64 _13314_f1;
	jule::Int _13322_ki;
	std::tie(_13314_f1,_13322_ki) = _119106e10_frexp(_11112_x);
	if (_13314_f1 < 0.7071067811865476) {
		_13314_f1*=2LL;
		(_13322_ki)--;
	}
	jule::F64 _1389_f = _13314_f1 - 1LL;
	jule::F64 _1399_k = static_cast<jule::F64>(_13322_ki);
	jule::F64 _1429_s = jule::div(_1389_f,2LL + _1389_f);
	jule::F64 _1439_s2 = _1429_s * _1429_s;
	jule::F64 _1449_s4 = _1439_s2 * _1439_s2;
	jule::F64 _1459_t1 = _1439_s2 * (0.6666666666666735 + (_1449_s4 * (0.2857142874366239 + (_1449_s4 * (0.1818357216161805 + (_1449_s4 * 0.14798198605116586))))));
	jule::F64 _1469_t2 = _1449_s4 * (0.3999999999940942 + (_1449_s4 * (0.22222198432149784 + (_1449_s4 * 0.15313837699209373))));
	jule::F64 _1479_R = _1459_t1 + _1469_t2;
	jule::F64 _1489_hfsq = (0.5 * _1389_f) * _1389_f;
	return static_cast<jule::F64>((_1399_k * 0.6931471803691238) - ((_1489_hfsq - ((_1429_s * (_1489_hfsq + _1479_R)) + (_1399_k * 0.00000000019082149292705877))) - _1389_f));
}



inline jule::F64 _108617560_expm1(jule::F64 _15618_x) {
	
	
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_10862f890_is_inf(_15618_x,1LL)) || (_10862f890_is_nan(_15618_x)))) { goto _case_end_4379355840; }
		_case_begin_4379355840:;
		{
			return _15618_x;
		}
		goto _match_end_4379322976;
		_case_end_4379355840:;
		if (!((_10862f890_is_inf(_15618_x,-1LL)))) { goto _case_end_4379379776; }
		_case_begin_4379379776:;
		{
			return -1LL;
		}
		goto _match_end_4379322976;
		_case_end_4379379776:;
		_match_end_4379322976:;
	}
	jule::F64 _18013_absx = _15618_x;
	jule::Bool _18113_sign = false;
	if (_15618_x < 0LL) {
		_18013_absx=static_cast<jule::F64>((-(_18013_absx)));
		_18113_sign=true;
	}
	if (_18013_absx >= 38.816242111356935) {
		if (_18113_sign) {
			return -1LL;
		}
		if (_18013_absx >= 709.782712893384) {
			return static_cast<jule::F64>(_10862f890_inf(1LL));
		}
	}
	jule::F64 _19813_c = 0LL;
	jule::Int _19913_k = 0LL;
	if (_18013_absx > 0.34657359027997264) {
		jule::F64 _20117_hi = 0LL;
		jule::F64 _20217_lo = 0LL;
		if (_18013_absx < 1.0397207708399179) {
			if ((!(_18113_sign))) {
				_20117_hi=static_cast<jule::F64>(_15618_x - 0.6931471803691238);
				_20217_lo=0.00000000019082149292705877;
				_19913_k=1LL;
			} else {
				_20117_hi=static_cast<jule::F64>(_15618_x + 0.6931471803691238);
				_20217_lo=-0.00000000019082149292705877;
				_19913_k=-1LL;
			}
		} else {
			if ((!(_18113_sign))) {
				_19913_k=static_cast<jule::Int>((1.4426950408889634 * _15618_x) + 0.5);
			} else {
				_19913_k=static_cast<jule::Int>((1.4426950408889634 * _15618_x) - 0.5);
			}
			jule::F64 _21917_t = static_cast<jule::F64>(_19913_k);
			_20117_hi=static_cast<jule::F64>(_15618_x - (_21917_t * 0.6931471803691238));
			_20217_lo=static_cast<jule::F64>(_21917_t * 0.00000000019082149292705877);
		}
		_15618_x=static_cast<jule::F64>(_20117_hi - _20217_lo);
		_19813_c=static_cast<jule::F64>((_20117_hi - _15618_x) - _20217_lo);
	} else if (_18013_absx < 0.00000000000000005551115123125783) {
		return _15618_x;
	} else {
		_19913_k=0LL;
	}
	jule::F64 _2329_hfx = 0.5 * _15618_x;
	jule::F64 _2339_hxs = _15618_x * _2329_hfx;
	jule::F64 _2349_r1 = 1LL + (_2339_hxs * (-0.03333333333333313 + (_2339_hxs * (0.0015873015872548146 + (_2339_hxs * (-0.0000793650757867488 + (_2339_hxs * (0.000004008217827329362 + (_2339_hxs * -0.00000020109921818362437)))))))));
	jule::F64 _23513_t = 3LL - (_2349_r1 * _2329_hfx);
	jule::F64 _23613_e = _2339_hxs * jule::div(_2349_r1 - _23513_t,6LL - (_15618_x * _23513_t));
	if (_19913_k == 0LL) {
		return static_cast<jule::F64>(_15618_x - ((_15618_x * _23613_e) - _2339_hxs));
	}
	_23613_e=static_cast<jule::F64>((_15618_x * (_23613_e - _19813_c)) - _19813_c);
	_23613_e-=_2339_hxs;
	{
		if (!((_19913_k == -1LL))) { goto _case_end_4365625552; }
		_case_begin_4365625552:;
		{
			return static_cast<jule::F64>((0.5 * (_15618_x - _23613_e)) - 0.5);
		}
		goto _match_end_4365288128;
		_case_end_4365625552:;
		if (!((_19913_k == 1LL))) { goto _case_end_4365625664; }
		_case_begin_4365625664:;
		{
			if (_15618_x < -0.25) {
				return static_cast<jule::F64>(-2LL * (_23613_e - (_15618_x + 0.5)));
			}
			return static_cast<jule::F64>(1LL + (2LL * (_15618_x - _23613_e)));
		}
		goto _match_end_4365288128;
		_case_end_4365625664:;
		if (!((_19913_k <= -2LL) || (_19913_k > 56LL))) { goto _case_end_4366086096; }
		_case_begin_4366086096:;
		{
			jule::F64 _25117_y = 1LL - (_23613_e - _15618_x);
			_25117_y=static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>(_119104140_f64_bits(_25117_y) + (static_cast<jule::U64>(_19913_k) << 52LL))));
			return static_cast<jule::F64>(_25117_y - 1LL);
		}
		goto _match_end_4365288128;
		_case_end_4366086096:;
		_match_end_4365288128:;
	}
	if (_19913_k < 20LL) {
		jule::F64 _25613_t = _119104140_f64_from_bits(static_cast<jule::U64>(4607182418800017408LL - (9007199254740992LL >> static_cast<jule::Uint>(_19913_k))));
		jule::F64 _25717_y = _25613_t - (_23613_e - _15618_x);
		_25717_y=static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>(_119104140_f64_bits(_25717_y) + (static_cast<jule::U64>(_19913_k) << 52LL))));
		return _25717_y;
	}
	_23513_t=static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>(static_cast<jule::U64>(1023LL - _19913_k) << 52LL)));
	jule::F64 _26213_y = _15618_x - (_23613_e + _23513_t);
	(_26213_y)++;
	_26213_y=static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>(_119104140_f64_bits(_26213_y) + (static_cast<jule::U64>(_19913_k) << 52LL))));
	return _26213_y;
}



inline jule::F64 _1086895c0_abs(jule::F64 _4312_x) {
	return static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>(_119104140_f64_bits(_4312_x) & 9223372036854775807LLU)));
}



inline jule::F64 _1086b1ee0_j1(jule::F64 _10515_x) {
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_10862f890_is_nan(_10515_x)))) { goto _case_end_4365552976; }
		_case_begin_4365552976:;
		{
			return _10515_x;
		}
		goto _match_end_4365543552;
		_case_end_4365552976:;
		if (!((_10862f890_is_inf(_10515_x,0LL)) || (_10515_x == 0LL))) { goto _case_end_4365553088; }
		_case_begin_4365553088:;
		{
			return 0LL;
		}
		goto _match_end_4365543552;
		_case_end_4365553088:;
		_match_end_4365543552:;
	}
	jule::Bool _12613_sign = false;
	if (_10515_x < 0LL) {
		_10515_x=static_cast<jule::F64>((-(_10515_x)));
		_12613_sign=true;
	}
	if (_10515_x >= 2LL) {
		jule::F64 _13214_s;
		jule::F64 _13217_c;
		std::tie(_13214_s,_13217_c) = _108647e80_sincos(_10515_x);
		jule::F64 _13317_ss = (-(_13214_s)) - _13217_c;
		jule::F64 _13417_cc = _13214_s - _13217_c;
		if (_10515_x < 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) {
			jule::F64 _13817_z = _119104730_cos(static_cast<jule::F64>(_10515_x + _10515_x));
			if ((_13214_s * _13217_c) > 0LL) {
				_13417_cc=static_cast<jule::F64>(jule::div(_13817_z,_13317_ss));
			} else {
				_13317_ss=static_cast<jule::F64>(jule::div(_13817_z,_13417_cc));
			}
		}
		jule::F64 _14917_z = 0LL;
		if (_10515_x > 5188146770730811392LL) {
			_14917_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * _13417_cc,_1487c80f0_sqrt(_10515_x)));
		} else {
			jule::F64 _15317_u = _1086b1ee0_pone(_10515_x);
			jule::F64 _15417_v = _1086b1ee0_qone(_10515_x);
			_14917_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * ((_15317_u * _13417_cc) - (_15417_v * _13317_ss)),_1487c80f0_sqrt(_10515_x)));
		}
		if (_12613_sign) {
			return static_cast<jule::F64>((-(_14917_z)));
		}
		return _14917_z;
	}
	if (_10515_x < 0.000000007450580596923828) {
		return static_cast<jule::F64>(0.5 * _10515_x);
	}
	jule::F64 _16613_z = _10515_x * _10515_x;
	jule::F64 _16713_r = _16613_z * (-0.0625 + (_16613_z * (0.001407056669551897 + (_16613_z * (-0.00001599556310840356 + (_16613_z * 0.000000049672799960958445))))));
	jule::F64 _1689_s = 1LL + (_16613_z * (0.019153759953836346 + (_16613_z * (0.00018594678558863092 + (_16613_z * (0.0000011771846404262368 + (_16613_z * (0.0000000050463625707621704 + (_16613_z * 0.000000000012354227442613791)))))))));
	_16713_r*=_10515_x;
	_16613_z=static_cast<jule::F64>((0.5 * _10515_x) + jule::div(_16713_r,_1689_s));
	if (_12613_sign) {
		return static_cast<jule::F64>((-(_16613_z)));
	}
	return _16613_z;
}



inline jule::F64 _1086b1ee0_y1(jule::F64 _18411_x) {
	
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_18411_x < 0LL) || (_10862f890_is_nan(_18411_x)))) { goto _case_end_4365381376; }
		_case_begin_4365381376:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4365517024;
		_case_end_4365381376:;
		if (!((_10862f890_is_inf(_18411_x,1LL)))) { goto _case_end_4365381488; }
		_case_begin_4365381488:;
		{
			return 0LL;
		}
		goto _match_end_4365517024;
		_case_end_4365381488:;
		if (!((_18411_x == 0LL))) { goto _case_end_4365381600; }
		_case_begin_4365381600:;
		{
			return static_cast<jule::F64>(_10862f890_inf(-1LL));
		}
		goto _match_end_4365517024;
		_case_end_4365381600:;
		_match_end_4365517024:;
	}
	if (_18411_x >= 2LL) {
		jule::F64 _20814_s;
		jule::F64 _20817_c;
		std::tie(_20814_s,_20817_c) = _108647e80_sincos(_18411_x);
		jule::F64 _20917_ss = (-(_20814_s)) - _20817_c;
		jule::F64 _21017_cc = _20814_s - _20817_c;
		if (_18411_x < 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) {
			jule::F64 _21417_z = _119104730_cos(static_cast<jule::F64>(_18411_x + _18411_x));
			if ((_20814_s * _20817_c) > 0LL) {
				_21017_cc=static_cast<jule::F64>(jule::div(_21417_z,_20917_ss));
			} else {
				_20917_ss=static_cast<jule::F64>(jule::div(_21417_z,_21017_cc));
			}
		}
		jule::F64 _23217_z = 0LL;
		if (_18411_x > 5188146770730811392LL) {
			_23217_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * _20917_ss,_1487c80f0_sqrt(_18411_x)));
		} else {
			jule::F64 _23617_u = _1086b1ee0_pone(_18411_x);
			jule::F64 _23717_v = _1086b1ee0_qone(_18411_x);
			_23217_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * ((_23617_u * _20917_ss) + (_23717_v * _21017_cc)),_1487c80f0_sqrt(_18411_x)));
		}
		return _23217_z;
	}
	if (_18411_x <= 0.00000000000000005551115123125783) {
		return static_cast<jule::F64>(jule::div(-0.6366197723675814,_18411_x));
	}
	jule::F64 _2459_z = _18411_x * _18411_x;
	jule::F64 _2469_u = -0.19605709064623894 + (_2459_z * (0.05044387166398113 + (_2459_z * (-0.0019125689587576355 + (_2459_z * (0.00002352526005616105 + (_2459_z * -0.00000009190991580398789)))))));
	jule::F64 _2479_v = 1LL + (_2459_z * (0.01991673182366499 + (_2459_z * (0.00020255258102513517 + (_2459_z * (0.0000013560880109751623 + (_2459_z * (0.000000006227414523646215 + (_2459_z * 0.000000000016655924620799208)))))))));
	return static_cast<jule::F64>((_18411_x * jule::div(_2469_u,_2479_v)) + (0.6366197723675814 * ((_1086b1ee0_j1(_18411_x) * _108658370_log(_18411_x)) - jule::div(1LL,_18411_x))));
}



inline jule::F64 _1086b1ee0_pone(jule::F64 _3289_x) {
	jule::Array<jule::F64,6>* _32913_p = nullptr;
	jule::Array<jule::F64,5>* _33013_q = nullptr;
	if (_3289_x >= 8LL) {
		_32913_p=(&(_1086b1ee0_P_1R8));
		_33013_q=(&(_1086b1ee0_P_1S8));
	} else if (_3289_x >= 4.5454) {
		_32913_p=(&(_1086b1ee0_P_1R5));
		_33013_q=(&(_1086b1ee0_P_1S5));
	} else if (_3289_x >= 2.8571) {
		_32913_p=(&(_1086b1ee0_P_1R3));
		_33013_q=(&(_1086b1ee0_P_1S3));
	} else if (_3289_x >= 2LL) {
		_32913_p=(&(_1086b1ee0_P_1R2));
		_33013_q=(&(_1086b1ee0_P_1S2));
	}
	{
		jule::F64 _34513_z = jule::div(1LL,_3289_x * _3289_x);
		jule::F64 _34613_r = (*(_32913_p))[0LL] + (_34513_z * ((*(_32913_p))[1LL] + (_34513_z * ((*(_32913_p))[2LL] + (_34513_z * ((*(_32913_p))[3LL] + (_34513_z * ((*(_32913_p))[4LL] + (_34513_z * (*(_32913_p))[5LL])))))))));
		jule::F64 _34713_s = 1LL + (_34513_z * ((*(_33013_q))[0LL] + (_34513_z * ((*(_33013_q))[1LL] + (_34513_z * ((*(_33013_q))[2LL] + (_34513_z * ((*(_33013_q))[3LL] + (_34513_z * (*(_33013_q))[4LL])))))))));
		return static_cast<jule::F64>(1LL + jule::div(_34613_r,_34713_s));
	}
}



inline jule::F64 _1086b1ee0_qone(jule::F64 _4339_x) {
	jule::Array<jule::F64,6>* _43413_p = nullptr;
	jule::Array<jule::F64,6>* _43513_q = nullptr;
	if (_4339_x >= 8LL) {
		_43413_p=(&(_1086b1ee0_Q_1R8));
		_43513_q=(&(_1086b1ee0_Q_1S8));
	} else if (_4339_x >= 4.5454) {
		_43413_p=(&(_1086b1ee0_Q_1R5));
		_43513_q=(&(_1086b1ee0_Q_1S5));
	} else if (_4339_x >= 2.8571) {
		_43413_p=(&(_1086b1ee0_Q_1R3));
		_43513_q=(&(_1086b1ee0_Q_1S3));
	} else if (_4339_x >= 2LL) {
		_43413_p=(&(_1086b1ee0_Q_1R2));
		_43513_q=(&(_1086b1ee0_Q_1S2));
	}
	{
		jule::F64 _45013_z = jule::div(1LL,_4339_x * _4339_x);
		jule::F64 _45113_r = (*(_43413_p))[0LL] + (_45013_z * ((*(_43413_p))[1LL] + (_45013_z * ((*(_43413_p))[2LL] + (_45013_z * ((*(_43413_p))[3LL] + (_45013_z * ((*(_43413_p))[4LL] + (_45013_z * (*(_43413_p))[5LL])))))))));
		jule::F64 _45213_s = 1LL + (_45013_z * ((*(_43513_q))[0LL] + (_45013_z * ((*(_43513_q))[1LL] + (_45013_z * ((*(_43513_q))[2LL] + (_45013_z * ((*(_43513_q))[3LL] + (_45013_z * ((*(_43513_q))[4LL] + (_45013_z * (*(_43513_q))[5LL])))))))))));
		return static_cast<jule::F64>(jule::div(0.375 + jule::div(_45113_r,_45213_s),_4339_x));
	}
}



inline jule::U64 _1486ffb20_zero(jule::U64 _409_x) {
	if (_409_x == 0LL) {
		return 1LL;
	}
	return 0LL;
}



inline jule::U64 _1486ffb20_nonzero(jule::U64 _4912_x) {
	if (_4912_x != 0LL) {
		return 1LL;
	}
	return 0LL;
}



inline std::tuple<jule::U64,jule::U64> _1486ffb20_shl(jule::U64 _588_u1,jule::U64 _5817_u2,jule::Uint _5826_n) {
	jule::U64 _5846_r2 = jule::U64();
	jule::U64 _5837_r1 = jule::U64();
	_5837_r1=static_cast<jule::U64>(((_588_u1 << _5826_n) | (_5817_u2 >> (64LL - _5826_n))) | (_5817_u2 << (_5826_n - 64LL)));
	_5846_r2=static_cast<jule::U64>(_5817_u2 << _5826_n);
	return std::make_tuple(_5837_r1,_5846_r2);
}



inline std::tuple<jule::U64,jule::U64> _1486ffb20_shr(jule::U64 _648_u1,jule::U64 _6417_u2,jule::Uint _6426_n) {
	jule::U64 _6446_r2 = jule::U64();
	jule::U64 _6437_r1 = jule::U64();
	jule::U64 _7113_shift = _648_u1;
	jule::Uint _7213_shift_n = _6426_n - 64LL;
	_iter_begin_4368929280:;
	if (!((_7113_shift > 0LL) && (_7213_shift_n > 0LL))) { goto _iter_end_4368929280; }
	{
		(_7213_shift_n)--;
		_7113_shift>>=1LL;
	}
	_iter_next_4368929280:;
	goto _iter_begin_4368929280;
	_iter_end_4368929280:;
	_6446_r2=static_cast<jule::U64>(((_6417_u2 >> _6426_n) | (_648_u1 << (64LL - _6426_n))) | _7113_shift);
	_6437_r1=static_cast<jule::U64>(_648_u1 >> _6426_n);
	return std::make_tuple(_6437_r1,_6446_r2);
}



inline std::tuple<jule::U64,jule::U64> _1486ffb20_shrcompress(jule::U64 _8716_u1,jule::U64 _8725_u2,jule::Uint _8734_n) {
	jule::U64 _8754_r2 = jule::U64();
	jule::U64 _8745_r1 = jule::U64();
	{
		if (!((_8734_n == 0LL))) { goto _case_end_4368936240; }
		_case_begin_4368936240:;
		{
			_8745_r1 = _8716_u1;
			_8754_r2 = _8725_u2;
			return std::make_tuple(_8745_r1,_8754_r2);
		}
		goto _match_end_4368935984;
		_case_end_4368936240:;
		if (!((_8734_n == 64LL))) { goto _case_end_4368936368; }
		_case_begin_4368936368:;
		{
			_8745_r1 = 0LL;
			_8754_r2 = static_cast<jule::U64>(_8716_u1 | _1486ffb20_nonzero(_8725_u2));
			return std::make_tuple(_8745_r1,_8754_r2);
		}
		goto _match_end_4368935984;
		_case_end_4368936368:;
		if (!((_8734_n >= 128LL))) { goto _case_end_4368936496; }
		_case_begin_4368936496:;
		{
			_8745_r1 = 0LL;
			_8754_r2 = static_cast<jule::U64>(_1486ffb20_nonzero(static_cast<jule::U64>(_8716_u1 | _8725_u2)));
			return std::make_tuple(_8745_r1,_8754_r2);
		}
		goto _match_end_4368935984;
		_case_end_4368936496:;
		if (!((_8734_n < 64LL))) { goto _case_end_4368936624; }
		_case_begin_4368936624:;
		{
			std::tie(_8745_r1,_8754_r2) = _1486ffb20_shr(_8716_u1,_8725_u2,_8734_n);
			_8754_r2|=static_cast<jule::U64>(_1486ffb20_nonzero(static_cast<jule::U64>(_8725_u2 & ((1LL << _8734_n) - 1LL))));
		}
		goto _match_end_4368935984;
		_case_end_4368936624:;
		if (!((_8734_n < 128LL))) { goto _case_end_4368936752; }
		_case_begin_4368936752:;
		{
			std::tie(_8745_r1,_8754_r2) = _1486ffb20_shr(_8716_u1,_8725_u2,_8734_n);
			_8754_r2|=static_cast<jule::U64>(_1486ffb20_nonzero(static_cast<jule::U64>((_8716_u1 & ((1LL << (_8734_n - 64LL)) - 1LL)) | _8725_u2)));
		}
		goto _match_end_4368935984;
		_case_end_4368936752:;
		_match_end_4368935984:;
	}
	return std::make_tuple(_8745_r1,_8754_r2);
}



inline jule::I32 _1486ffb20_lz(jule::U64 _1057_u1,jule::U64 _10516_u2) {
	jule::I32 _10527_l = jule::I32();
	_10527_l=static_cast<jule::I32>(_1191c3b80_leading_zeros64(_1057_u1));
	if (_10527_l == 64LL) {
		_10527_l+=static_cast<jule::I32>(_1191c3b80_leading_zeros64(_10516_u2));
	}
	_10527_l = _10527_l;
	return _10527_l;
}



inline std::tuple<jule::U32,jule::I32,jule::U64> _1486ffb20_split(jule::U64 _11610_b) {
	jule::U64 _11641_mantissa = jule::U64();
	jule::I32 _11631_exp = jule::I32();
	jule::U32 _11620_sign = jule::U32();
	_11620_sign=static_cast<jule::U32>(_11610_b >> 63LL);
	_11631_exp=static_cast<jule::I32>(static_cast<jule::I32>(_11610_b >> 52LL) & 2047LL);
	_11641_mantissa=static_cast<jule::U64>(_11610_b & 4503599627370495LL);
	if (_11631_exp == 0LL) {
		jule::Uint _12313_shift = static_cast<jule::Uint>(_1191c3b80_leading_zeros64(_11641_mantissa) - 11LL);
		_11641_mantissa<<=_12313_shift;
		_11631_exp=static_cast<jule::I32>(1LL - static_cast<jule::I32>(_12313_shift));
	} else {
		_11641_mantissa|=4503599627370496LL;
	}
	return std::make_tuple(_11620_sign,_11631_exp,_11641_mantissa);
}



inline jule::F64 _1486ffb20_fma(jule::F64 _13512_x,jule::F64 _13520_y,jule::F64 _13528_z) {
	jule::U64 _13610_bx = _119104140_f64_bits(_13512_x);
	jule::U64 _13614_by = _119104140_f64_bits(_13520_y);
	jule::U64 _13618_bz = _119104140_f64_bits(_13528_z);
	std::tie(_13610_bx,_13614_by,_13618_bz) = std::make_tuple(_119104140_f64_bits(_13512_x),_119104140_f64_bits(_13520_y),_119104140_f64_bits(_13528_z));
	if (((((_13512_x == 0LL) || (_13520_y == 0LL)) || (_13528_z == 0LL)) || ((_13610_bx & 9218868437227405312LL) == 9218868437227405312LL)) || ((_13614_by & 9218868437227405312LL) == 9218868437227405312LL)) {
		return static_cast<jule::F64>((_13512_x * _13520_y) + _13528_z);
	}
	if ((_13618_bz & 9218868437227405312LL) == 9218868437227405312LL) {
		return _13528_z;
	}
	jule::U32 _15010_xs;
	jule::I32 _15014_xe;
	jule::U64 _15018_xm;
	std::tie(_15010_xs,_15014_xe,_15018_xm) = _1486ffb20_split(_13610_bx);
	jule::U32 _15110_ys;
	jule::I32 _15114_ye;
	jule::U64 _15118_ym;
	std::tie(_15110_ys,_15114_ye,_15118_ym) = _1486ffb20_split(_13614_by);
	jule::U32 _15214_zs;
	jule::I32 _15222_ze;
	jule::U64 _15226_zm;
	std::tie(_15214_zs,_15222_ze,_15226_zm) = _1486ffb20_split(_13618_bz);
	jule::I32 _15613_pe = ((_15014_xe + _15114_ye) - 1023LL) + 1LL;
	jule::U64 _16114_pm1;
	jule::U64 _16123_pm2;
	std::tie(_16114_pm1,_16123_pm2) = _1191c3b80_mul64(static_cast<jule::U64>(_15018_xm << 10LL),static_cast<jule::U64>(_15118_ym << 11LL));
	jule::U64 _16214_zm1 = _15226_zm << 10LL;
	jule::U64 _16223_zm2 = static_cast<jule::U64>(0LLU);
	std::tie(_16214_zm1,_16223_zm2) = std::make_tuple(_15226_zm << 10LL,static_cast<jule::U64>(0LLU));
	jule::U32 _16313_ps = _15010_xs ^ _15110_ys;
	jule::Uint _1669_is62zero = static_cast<jule::Uint>(((~(_16114_pm1)) >> 62LL) & 1LL);
	std::tie(_16114_pm1,_16123_pm2) = _1486ffb20_shl(_16114_pm1,_16123_pm2,_1669_is62zero);
	_15613_pe-=static_cast<jule::I32>(_1669_is62zero);
	if ((_15613_pe < _15222_ze) || ((_15613_pe == _15222_ze) && (_16114_pm1 < _16214_zm1))) {
		std::tie(_16313_ps,_15613_pe,_16114_pm1,_16123_pm2,_15214_zs,_15222_ze,_16214_zm1,_16223_zm2) = std::make_tuple(_15214_zs,_15222_ze,_16214_zm1,_16223_zm2,_16313_ps,static_cast<jule::I32>(_15613_pe),_16114_pm1,_16123_pm2);
	}
	std::tie(_16214_zm1,_16223_zm2) = _1486ffb20_shrcompress(_16214_zm1,_16223_zm2,static_cast<jule::Uint>(_15613_pe - _15222_ze));
	jule::U64 _17913_m = 0LLU;
	jule::U64 _18013_c = 0LLU;
	if (_16313_ps == _15214_zs) {
		std::tie(_16123_pm2,_18013_c) = _1191c3b80_add64(_16123_pm2,_16223_zm2,0LLU);
		std::tie(_16114_pm1,std::ignore) = _1191c3b80_add64(_16114_pm1,_16214_zm1,_18013_c);
		_15613_pe-=static_cast<jule::I32>((~(_16114_pm1)) >> 63LL);
		std::tie(_16114_pm1,_17913_m) = _1486ffb20_shrcompress(_16114_pm1,_16123_pm2,static_cast<jule::Uint>(64LL + (_16114_pm1 >> 63LL)));
	} else {
		std::tie(_16123_pm2,_18013_c) = _1191c3b80_sub64(_16123_pm2,_16223_zm2,0LLU);
		std::tie(_16114_pm1,std::ignore) = _1191c3b80_sub64(_16114_pm1,_16214_zm1,_18013_c);
		jule::I32 _19113_nz = _1486ffb20_lz(_16114_pm1,_16123_pm2);
		_15613_pe-=_19113_nz;
		std::tie(_17913_m,_16123_pm2) = _1486ffb20_shl(_16114_pm1,_16123_pm2,static_cast<jule::Uint>(_19113_nz - 1LL));
		_17913_m|=static_cast<jule::U64>(_1486ffb20_nonzero(_16123_pm2));
	}
	if ((_15613_pe > 2045LL) || ((_15613_pe == 2045LL) && (((_17913_m + 512LL) >> 63LL) == 1LL))) {
		return static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>((static_cast<jule::U64>(_16313_ps) << 63LL) | 9218868437227405312LL)));
	}
	if (_15613_pe < 0LL) {
		jule::Uint _20313_n = static_cast<jule::Uint>((-(_15613_pe)));
		_17913_m=static_cast<jule::U64>((_17913_m >> _20313_n) | _1486ffb20_nonzero(static_cast<jule::U64>(_17913_m & ((1LL << _20313_n) - 1LL))));
		_15613_pe=0LL;
	}
	_17913_m=static_cast<jule::U64>(((_17913_m + 512LL) >> 10LL) & (~(_1486ffb20_zero(static_cast<jule::U64>((_17913_m & 1023LL) ^ 512LL)))));
	_15613_pe&=static_cast<jule::I32>((-(static_cast<jule::I32>(_1486ffb20_nonzero(_17913_m)))));
	return static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>(((static_cast<jule::U64>(_16313_ps) << 63LL) + (static_cast<jule::U64>(_15613_pe) << 52LL)) + _17913_m)));
}



inline std::tuple<jule::F64,jule::F64> _14904ec70_modf(jule::F64 _4413_f) {
	jule::F64 _4437_frac = jule::F64();
	jule::F64 _4423_integer = jule::F64();
	
	jule::F64 _469_abs_f = _1086895c0_abs(_4413_f);
	jule::F64 _4713_i = 0LL;
	if (_469_abs_f > 4503599627370496LL) {
		_4713_i=_4413_f;
	} else {
		_4713_i=static_cast<jule::F64>(_469_abs_f + 4503599627370496LL);
		_4713_i-=4503599627370496LL;
		_iter_begin_4369020176:;
		if (!(_4713_i > _469_abs_f)) { goto _iter_end_4369020176; }
		{
			(_4713_i)--;
		}
		_iter_next_4369020176:;
		goto _iter_begin_4369020176;
		_iter_end_4369020176:;
		if (_4413_f < 0LL) {
			_4713_i=static_cast<jule::F64>((-(_4713_i)));
		}
	}
	_4423_integer = _4713_i;
	_4437_frac = static_cast<jule::F64>(_4413_f - _4713_i);
	return std::make_tuple(_4423_integer,_4437_frac);
}



inline jule::F64 _1490b9560_log10(jule::F64 _4014_x) {
	return static_cast<jule::F64>(_108658370_log(_4014_x) * 0.43429448190325176);
}



inline jule::F64 _1490b9560_log2(jule::F64 _4413_x) {
	jule::F64 _4510_frac;
	jule::Int _4516_exp;
	std::tie(_4510_frac,_4516_exp) = _119106e10_frexp(_4413_x);
	if (_4510_frac == 0.5) {
		return static_cast<jule::F64>(_4516_exp - 1LL);
	}
	return static_cast<jule::F64>((_108658370_log(_4510_frac) * 1.4426950408889634) + static_cast<jule::F64>(_4516_exp));
}



inline jule::F64 _138639270_hypot(jule::F64 _5018_p,jule::F64 _5030_q) {
	{
		if (!((_10862f890_is_inf(_5018_p,0LL)) || (_10862f890_is_inf(_5030_q,0LL)))) { goto _case_end_4378928640; }
		_case_begin_4378928640:;
		{
			return static_cast<jule::F64>(_10862f890_inf(1LL));
		}
		goto _match_end_4378889552;
		_case_end_4378928640:;
		if (!((_10862f890_is_nan(_5018_p)) || (_10862f890_is_nan(_5030_q)))) { goto _case_end_4379090016; }
		_case_begin_4379090016:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4378889552;
		_case_end_4379090016:;
		_match_end_4378889552:;
	}
	std::tie(_5018_p,_5030_q) = std::make_tuple(static_cast<jule::F64>(_1086895c0_abs(_5018_p)),static_cast<jule::F64>(_1086895c0_abs(_5030_q)));
	if (_5018_p < _5030_q) {
		std::tie(_5018_p,_5030_q) = std::make_tuple(_5030_q,_5018_p);
	}
	if (_5018_p == 0LL) {
		return 0LL;
	}
	_5030_q=static_cast<jule::F64>(jule::div(_5030_q,_5018_p));
	return static_cast<jule::F64>(_5018_p * _1487c80f0_sqrt(static_cast<jule::F64>(1LL + (_5030_q * _5030_q))));
}



inline jule::F64 _138643e40_j0(jule::F64 _10715_x) {
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_10862f890_is_nan(_10715_x)))) { goto _case_end_4379585872; }
		_case_begin_4379585872:;
		{
			return _10715_x;
		}
		goto _match_end_4379203264;
		_case_end_4379585872:;
		if (!((_10862f890_is_inf(_10715_x,0LL)))) { goto _case_end_4379656512; }
		_case_begin_4379656512:;
		{
			return 0LL;
		}
		goto _match_end_4379203264;
		_case_end_4379656512:;
		if (!((_10715_x == 0LL))) { goto _case_end_4715234576; }
		_case_begin_4715234576:;
		{
			return 1LL;
		}
		goto _match_end_4379203264;
		_case_end_4715234576:;
		_match_end_4379203264:;
	}
	_10715_x=static_cast<jule::F64>(_1086895c0_abs(_10715_x));
	if (_10715_x >= 2LL) {
		jule::F64 _13214_s;
		jule::F64 _13217_c;
		std::tie(_13214_s,_13217_c) = _108647e80_sincos(_10715_x);
		jule::F64 _13317_ss = _13214_s - _13217_c;
		jule::F64 _13417_cc = _13214_s + _13217_c;
		if (_10715_x < 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) {
			jule::F64 _13817_z = (-(_119104730_cos(static_cast<jule::F64>(_10715_x + _10715_x))));
			if ((_13214_s * _13217_c) < 0LL) {
				_13417_cc=static_cast<jule::F64>(jule::div(_13817_z,_13317_ss));
			} else {
				_13317_ss=static_cast<jule::F64>(jule::div(_13817_z,_13417_cc));
			}
		}
		jule::F64 _14917_z = 0LL;
		if (_10715_x > 5188146770730811392LL) {
			_14917_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * _13417_cc,_1487c80f0_sqrt(_10715_x)));
		} else {
			jule::F64 _15317_u = _138643e40_pzero(_10715_x);
			jule::F64 _15417_v = _138643e40_qzero(_10715_x);
			_14917_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * ((_15317_u * _13417_cc) - (_15417_v * _13317_ss)),_1487c80f0_sqrt(_10715_x)));
		}
		return _14917_z;
	}
	if (_10715_x < 0.0001220703125) {
		if (_10715_x < 0.000000007450580596923828) {
			return 1LL;
		}
		return static_cast<jule::F64>(1LL - ((0.25 * _10715_x) * _10715_x));
	}
	jule::F64 _1659_z = _10715_x * _10715_x;
	jule::F64 _1669_r = _1659_z * (0.015624999999999995 + (_1659_z * (-0.00018997929423885472 + (_1659_z * (0.0000018295404953270067 + (_1659_z * -0.000000004618326885321032))))));
	jule::F64 _1679_s = 1LL + (_1659_z * (0.015619102946489001 + (_1659_z * (0.00011692678466333745 + (_1659_z * (0.0000005135465502073181 + (_1659_z * 0.0000000011661400333379)))))));
	if (_10715_x < 1LL) {
		return static_cast<jule::F64>(1LL + (_1659_z * (-0.25 + jule::div(_1669_r,_1679_s))));
	}
	jule::F64 _1719_u = 0.5 * _10715_x;
	return static_cast<jule::F64>(((1LL + _1719_u) * (1LL - _1719_u)) + (_1659_z * jule::div(_1669_r,_1679_s)));
}



inline jule::F64 _138643e40_y0(jule::F64 _18211_x) {
	
	
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_18211_x < 0LL) || (_10862f890_is_nan(_18211_x)))) { goto _case_end_4379681664; }
		_case_begin_4379681664:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4379681472;
		_case_end_4379681664:;
		if (!((_10862f890_is_inf(_18211_x,1LL)))) { goto _case_end_4379681792; }
		_case_begin_4379681792:;
		{
			return 0LL;
		}
		goto _match_end_4379681472;
		_case_end_4379681792:;
		if (!((_18211_x == 0LL))) { goto _case_end_4379681920; }
		_case_begin_4379681920:;
		{
			return static_cast<jule::F64>(_10862f890_inf(-1LL));
		}
		goto _match_end_4379681472;
		_case_end_4379681920:;
		_match_end_4379681472:;
	}
	if (_18211_x >= 2LL) {
		jule::F64 _21814_s;
		jule::F64 _21817_c;
		std::tie(_21814_s,_21817_c) = _108647e80_sincos(_18211_x);
		jule::F64 _21917_ss = _21814_s - _21817_c;
		jule::F64 _22017_cc = _21814_s + _21817_c;
		if (_18211_x < 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) {
			jule::F64 _22717_z = (-(_119104730_cos(static_cast<jule::F64>(_18211_x + _18211_x))));
			if ((_21814_s * _21817_c) < 0LL) {
				_22017_cc=static_cast<jule::F64>(jule::div(_22717_z,_21917_ss));
			} else {
				_21917_ss=static_cast<jule::F64>(jule::div(_22717_z,_22017_cc));
			}
		}
		jule::F64 _23417_z = 0LL;
		if (_18211_x > 5188146770730811392LL) {
			_23417_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * _21917_ss,_1487c80f0_sqrt(_18211_x)));
		} else {
			jule::F64 _23817_u = _138643e40_pzero(_18211_x);
			jule::F64 _23917_v = _138643e40_qzero(_18211_x);
			_23417_z=static_cast<jule::F64>(jule::div(0.5641895835477563 * ((_23817_u * _21917_ss) + (_23917_v * _22017_cc)),_1487c80f0_sqrt(_18211_x)));
		}
		return _23417_z;
	}
	if (_18211_x <= 0.000000007450580596923828) {
		return static_cast<jule::F64>(-0.07380429510868723 + (0.6366197723675814 * _108658370_log(_18211_x)));
	}
	jule::F64 _2479_z = _18211_x * _18211_x;
	jule::F64 _2489_u = -0.07380429510868723 + (_2479_z * (0.17666645250918112 + (_2479_z * (-0.01381856719455969 + (_2479_z * (0.00034745343209368365 + (_2479_z * (-0.0000038140705372436416 + (_2479_z * (0.000000019559013703502292 + (_2479_z * -0.00000000003982051941321034)))))))))));
	jule::F64 _2499_v = 1LL + (_2479_z * (0.01273048348341237 + (_2479_z * (0.00007600686273503533 + (_2479_z * (0.0000002591508518404578 + (_2479_z * 0.00000000044111031133267547)))))));
	return static_cast<jule::F64>(jule::div(_2489_u,_2499_v) + ((0.6366197723675814 * _138643e40_j0(_18211_x)) * _108658370_log(_18211_x)));
}



inline jule::F64 _138643e40_pzero(jule::F64 _33010_x) {
	jule::Array<jule::F64,6>* _33113_p = nullptr;
	jule::Array<jule::F64,5>* _33213_q = nullptr;
	if (_33010_x >= 8LL) {
		_33113_p=(&(_138643e40_P_0R8));
		_33213_q=(&(_138643e40_P_0S8));
	} else if (_33010_x >= 4.5454) {
		_33113_p=(&(_138643e40_P_0R5));
		_33213_q=(&(_138643e40_P_0S5));
	} else if (_33010_x >= 2.8571) {
		_33113_p=(&(_138643e40_P_0R3));
		_33213_q=(&(_138643e40_P_0S3));
	} else if (_33010_x >= 2LL) {
		_33113_p=(&(_138643e40_P_0R2));
		_33213_q=(&(_138643e40_P_0S2));
	}
	{
		jule::F64 _34713_z = jule::div(1LL,_33010_x * _33010_x);
		jule::F64 _34813_r = (*(_33113_p))[0LL] + (_34713_z * ((*(_33113_p))[1LL] + (_34713_z * ((*(_33113_p))[2LL] + (_34713_z * ((*(_33113_p))[3LL] + (_34713_z * ((*(_33113_p))[4LL] + (_34713_z * (*(_33113_p))[5LL])))))))));
		jule::F64 _34913_s = 1LL + (_34713_z * ((*(_33213_q))[0LL] + (_34713_z * ((*(_33213_q))[1LL] + (_34713_z * ((*(_33213_q))[2LL] + (_34713_z * ((*(_33213_q))[3LL] + (_34713_z * (*(_33213_q))[4LL])))))))));
		return static_cast<jule::F64>(1LL + jule::div(_34813_r,_34913_s));
	}
}



inline jule::F64 _138643e40_qzero(jule::F64 _43510_x) {
	jule::Array<jule::F64,6>* _43613_p = nullptr;
	jule::Array<jule::F64,6>* _43713_q = nullptr;
	if (_43510_x >= 8LL) {
		_43613_p=(&(_138643e40_Q_0R8));
		_43713_q=(&(_138643e40_Q_0S8));
	} else if (_43510_x >= 4.5454) {
		_43613_p=(&(_138643e40_Q_0R5));
		_43713_q=(&(_138643e40_Q_0S5));
	} else if (_43510_x >= 2.8571) {
		_43613_p=(&(_138643e40_Q_0R3));
		_43713_q=(&(_138643e40_Q_0S3));
	} else if (_43510_x >= 2LL) {
		_43613_p=(&(_138643e40_Q_0R2));
		_43713_q=(&(_138643e40_Q_0S2));
	}
	{
		jule::F64 _45213_z = jule::div(1LL,_43510_x * _43510_x);
		jule::F64 _45313_r = (*(_43613_p))[0LL] + (_45213_z * ((*(_43613_p))[1LL] + (_45213_z * ((*(_43613_p))[2LL] + (_45213_z * ((*(_43613_p))[3LL] + (_45213_z * ((*(_43613_p))[4LL] + (_45213_z * (*(_43613_p))[5LL])))))))));
		jule::F64 _45413_s = 1LL + (_45213_z * ((*(_43713_q))[0LL] + (_45213_z * ((*(_43713_q))[1LL] + (_45213_z * ((*(_43713_q))[2LL] + (_45213_z * ((*(_43713_q))[3LL] + (_45213_z * ((*(_43713_q))[4LL] + (_45213_z * (*(_43713_q))[5LL])))))))))));
		return static_cast<jule::F64>(jule::div(-0.125 + jule::div(_45313_r,_45413_s),_43510_x));
	}
}



inline jule::F64 _138643ab0_ldexp(jule::F64 _4518_frac,jule::Int _4533_exp) {
	{
		if (!((_4518_frac == 0LL))) { goto _case_end_4379746160; }
		_case_begin_4379746160:;
		{
			return _4518_frac;
		}
		goto _match_end_4379734176;
		_case_end_4379746160:;
		if (!((_10862f890_is_inf(_4518_frac,0LL)) || (_10862f890_is_nan(_4518_frac)))) { goto _case_end_4379746272; }
		_case_begin_4379746272:;
		{
			return _4518_frac;
		}
		goto _match_end_4379734176;
		_case_end_4379746272:;
		_match_end_4379734176:;
	}
	jule::Int _5313_e = 0LL;
	std::tie(_4518_frac,_5313_e) = _10862f890_normalize(_4518_frac);
	_4533_exp+=_5313_e;
	jule::U64 _5613_x = _119104140_f64_bits(_4518_frac);
	_4533_exp+=static_cast<jule::Int>((static_cast<jule::Int>(_5613_x >> 52LL) & 2047LL) - 1023LL);
	if (_4533_exp < -1075LL) {
		return static_cast<jule::F64>(_11918d9f0_copysign(0LL,_4518_frac));
	}
	if (_4533_exp > 1023LL) {
		if (_4518_frac < 0LL) {
			return static_cast<jule::F64>(_10862f890_inf(-1LL));
		}
		return static_cast<jule::F64>(_10862f890_inf(1LL));
	}
	jule::F64 _6713_m = 1LL;
	if (_4533_exp < -1022LL) {
		_4533_exp+=53LL;
		_6713_m=0.00000000000000011102230246251565;
	}
	_5613_x=static_cast<jule::U64>(_5613_x & -9218868437227405313LL);
	_5613_x|=static_cast<jule::U64>(static_cast<jule::U64>(_4533_exp + 1023LL) << 52LL);
	return static_cast<jule::F64>(_6713_m * _119104140_f64_from_bits(_5613_x));
}



inline jule::Bool _138652150_signbit(jule::F64 _3916_x) {
	return (_119104140_f64_bits(_3916_x) & 9223372036854775808LLU) != 0LL;
}



inline jule::F64 _1386c07c0_sinh(jule::F64 _5617_x) {
	
	
	
	
	
	
	
	jule::Bool _6613_sign = false;
	if (_5617_x < 0LL) {
		_5617_x=static_cast<jule::F64>((-(_5617_x)));
		_6613_sign=true;
	}
	jule::F64 _7213_temp = 0LL;
	{
		if (!((_5617_x > 21LL))) { goto _case_end_4379779216; }
		_case_begin_4379779216:;
		{
			_7213_temp=static_cast<jule::F64>(_1487c7630_exp(_5617_x) * 0.5);
		}
		goto _match_end_4379773328;
		_case_end_4379779216:;
		if (!((_5617_x > 0.5))) { goto _case_end_4379773760; }
		_case_begin_4379773760:;
		{
			jule::F64 _7713_ex = _1487c7630_exp(_5617_x);
			_7213_temp=static_cast<jule::F64>((_7713_ex - jule::div(1LL,_7713_ex)) * 0.5);
		}
		goto _match_end_4379773328;
		_case_end_4379773760:;
		_case_begin_4379773456:;
		{
			jule::F64 _8013_sq = _5617_x * _5617_x;
			_7213_temp=static_cast<jule::F64>(((((((-26.30563213397497 * _8013_sq) + -2894.211355989564) * _8013_sq) + -89912.72022039509) * _8013_sq) + -630767.3640497717) * _5617_x);
			_7213_temp=static_cast<jule::F64>(jule::div(_7213_temp,((((_8013_sq + -173.6789535582337) * _8013_sq) + 15215.17378790019) * _8013_sq) + -630767.3640497717));
		}
		goto _match_end_4379773328;
		_case_end_4379773456:;
		_match_end_4379773328:;
	}
	if (_6613_sign) {
		_7213_temp=static_cast<jule::F64>((-(_7213_temp)));
	}
	return _7213_temp;
}



inline jule::F64 _1386c07c0_cosh(jule::F64 _9717_x) {
	_9717_x=static_cast<jule::F64>(_1086895c0_abs(_9717_x));
	if (_9717_x > 21LL) {
		return static_cast<jule::F64>(_1487c7630_exp(_9717_x) * 0.5);
	}
	jule::F64 _1029_ex = _1487c7630_exp(_9717_x);
	return static_cast<jule::F64>((_1029_ex + jule::div(1LL,_1029_ex)) * 0.5);
}



inline std::tuple<jule::F64,jule::Int> _1386c96d0_lgamma(jule::F64 _20519_x) {
	jule::Int _20542_sign = jule::Int();
	jule::F64 _20529_lgamma = jule::F64();
	
	
	
	
	
	
	
	_20542_sign=1LL;
	{
		if (!((_10862f890_is_nan(_20519_x)))) { goto _case_end_4379796256; }
		_case_begin_4379796256:;
		{
			_20529_lgamma=_20519_x;
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		goto _match_end_4379795616;
		_case_end_4379796256:;
		if (!((_10862f890_is_inf(_20519_x,0LL)))) { goto _case_end_4379796368; }
		_case_begin_4379796368:;
		{
			_20529_lgamma=_20519_x;
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		goto _match_end_4379795616;
		_case_end_4379796368:;
		if (!((_20519_x == 0LL))) { goto _case_end_4379796960; }
		_case_begin_4379796960:;
		{
			_20529_lgamma=static_cast<jule::F64>(_10862f890_inf(1LL));
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		goto _match_end_4379795616;
		_case_end_4379796960:;
		_match_end_4379795616:;
	}
	jule::Bool _22813_neg = false;
	if (_20519_x < 0LL) {
		_20519_x=static_cast<jule::F64>((-(_20519_x)));
		_22813_neg=true;
	}
	if (_20519_x < 0.000000000000000000000847033) {
		if (_22813_neg) {
			_20542_sign=-1LL;
		}
		_20529_lgamma=static_cast<jule::F64>((-(_108658370_log(_20519_x))));
		return std::make_tuple(_20529_lgamma,_20542_sign);
	}
	jule::F64 _24113_nadj = 0LL;
	if (_22813_neg) {
		if (_20519_x >= 4503599627370496LL) {
			_20529_lgamma=static_cast<jule::F64>(_10862f890_inf(1LL));
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		jule::F64 _24713_t = _1386c96d0_sin_pi(_20519_x);
		if (_24713_t == 0LL) {
			_20529_lgamma=static_cast<jule::F64>(_10862f890_inf(1LL));
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		_24113_nadj=static_cast<jule::F64>(_108658370_log(static_cast<jule::F64>(jule::div(3.141592653589793,_1086895c0_abs(static_cast<jule::F64>(_24713_t * _20519_x))))));
		if (_24713_t < 0LL) {
			_20542_sign=-1LL;
		}
	}
	{
		if (!((_20519_x == 1LL) || (_20519_x == 2LL))) { goto _case_end_4363166288; }
		_case_begin_4363166288:;
		{
			_20529_lgamma=0LL;
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		goto _match_end_4352531264;
		_case_end_4363166288:;
		if (!((_20519_x < 2LL))) { goto _case_end_4363548368; }
		_case_begin_4363548368:;
		{
			jule::F64 _26317_y = 0LL;
			jule::Int _26417_i = 0LL;
			if (_20519_x <= 0.9) {
				_20529_lgamma=static_cast<jule::F64>((-(_108658370_log(_20519_x))));
				{
					if (!((_20519_x >= 0.7316321449683623))) { goto _case_end_5510285088; }
					_case_begin_5510285088:;
					{
						_26317_y=static_cast<jule::F64>(1LL - _20519_x);
						_26417_i=0LL;
					}
					goto _match_end_4363657040;
					_case_end_5510285088:;
					if (!((_20519_x >= 0.19163214496836223))) { goto _case_end_5511225776; }
					_case_begin_5511225776:;
					{
						_26317_y=static_cast<jule::F64>(_20519_x - 0.46163214496836225);
						_26417_i=1LL;
					}
					goto _match_end_4363657040;
					_case_end_5511225776:;
					_case_begin_5510464240:;
					{
						_26317_y=_20519_x;
						_26417_i=2LL;
					}
					goto _match_end_4363657040;
					_case_end_5510464240:;
					_match_end_4363657040:;
				}
			} else {
				_20529_lgamma=0LL;
				{
					if (!((_20519_x >= 1.7316321449683623))) { goto _case_end_4363235648; }
					_case_begin_4363235648:;
					{
						_26317_y=static_cast<jule::F64>(2LL - _20519_x);
						_26417_i=0LL;
					}
					goto _match_end_4352484960;
					_case_end_4363235648:;
					if (!((_20519_x >= 1.1916321449683622))) { goto _case_end_4352536112; }
					_case_begin_4352536112:;
					{
						_26317_y=static_cast<jule::F64>(_20519_x - 1.4616321449683622);
						_26417_i=1LL;
					}
					goto _match_end_4352484960;
					_case_end_4352536112:;
					_case_begin_4352572336:;
					{
						_26317_y=static_cast<jule::F64>(_20519_x - 1LL);
						_26417_i=2LL;
					}
					goto _match_end_4352484960;
					_case_end_4352572336:;
					_match_end_4352484960:;
				}
			}
			{
				auto _match_expr{ _26417_i };
				if (!((0LL) == _match_expr)) { goto _case_end_4363162896; }
				_case_begin_4363162896:;
				{
					jule::F64 _29417_z = _26317_y * _26317_y;
					jule::F64 _29517_p1 = _1386c96d0__LGAM_A[0LL] + (_29417_z * (_1386c96d0__LGAM_A[2LL] + (_29417_z * (_1386c96d0__LGAM_A[4LL] + (_29417_z * (_1386c96d0__LGAM_A[6LL] + (_29417_z * (_1386c96d0__LGAM_A[8LL] + (_29417_z * _1386c96d0__LGAM_A[10LL])))))))));
					jule::F64 _29617_p2 = _29417_z * (_1386c96d0__LGAM_A[1LL] + (_29417_z * ((+(_1386c96d0__LGAM_A[3LL])) + (_29417_z * (_1386c96d0__LGAM_A[5LL] + (_29417_z * (_1386c96d0__LGAM_A[7LL] + (_29417_z * (_1386c96d0__LGAM_A[9LL] + (_29417_z * _1386c96d0__LGAM_A[11LL]))))))))));
					jule::F64 _29717_p = (_26317_y * _29517_p1) + _29617_p2;
					_20529_lgamma+=static_cast<jule::F64>(_29717_p - (0.5 * _26317_y));
				}
				goto _match_end_4363435520;
				_case_end_4363162896:;
				if (!((1LL) == _match_expr)) { goto _case_end_4363182992; }
				_case_begin_4363182992:;
				{
					jule::F64 _30017_z = _26317_y * _26317_y;
					jule::F64 _30117_w = _30017_z * _26317_y;
					jule::F64 _30217_p1 = _1386c96d0__LGAM_T[0LL] + (_30117_w * (_1386c96d0__LGAM_T[3LL] + (_30117_w * (_1386c96d0__LGAM_T[6LL] + (_30117_w * (_1386c96d0__LGAM_T[9LL] + (_30117_w * _1386c96d0__LGAM_T[12LL])))))));
					jule::F64 _30317_p2 = _1386c96d0__LGAM_T[1LL] + (_30117_w * (_1386c96d0__LGAM_T[4LL] + (_30117_w * (_1386c96d0__LGAM_T[7LL] + (_30117_w * (_1386c96d0__LGAM_T[10LL] + (_30117_w * _1386c96d0__LGAM_T[13LL])))))));
					jule::F64 _30417_p3 = _1386c96d0__LGAM_T[2LL] + (_30117_w * (_1386c96d0__LGAM_T[5LL] + (_30117_w * (_1386c96d0__LGAM_T[8LL] + (_30117_w * (_1386c96d0__LGAM_T[11LL] + (_30117_w * _1386c96d0__LGAM_T[14LL])))))));
					jule::F64 _30517_p = (_30017_z * _30217_p1) - (-0.000000000000000003638676997039505 - (_30117_w * (_30317_p2 + (_26317_y * _30417_p3))));
					_20529_lgamma+=static_cast<jule::F64>(-0.12148629053584961 + _30517_p);
				}
				goto _match_end_4363435520;
				_case_end_4363182992:;
				if (!((2LL) == _match_expr)) { goto _case_end_4363187472; }
				_case_begin_4363187472:;
				{
					jule::F64 _30817_p1 = _26317_y * (_1386c96d0__LGAM_U[0LL] + (_26317_y * (_1386c96d0__LGAM_U[1LL] + (_26317_y * (_1386c96d0__LGAM_U[2LL] + (_26317_y * (_1386c96d0__LGAM_U[3LL] + (_26317_y * (_1386c96d0__LGAM_U[4LL] + (_26317_y * _1386c96d0__LGAM_U[5LL]))))))))));
					jule::F64 _30917_p2 = 1LL + (_26317_y * (_1386c96d0__LGAM_V[1LL] + (_26317_y * (_1386c96d0__LGAM_V[2LL] + (_26317_y * (_1386c96d0__LGAM_V[3LL] + (_26317_y * (_1386c96d0__LGAM_V[4LL] + (_26317_y * _1386c96d0__LGAM_V[5LL])))))))));
					_20529_lgamma+=static_cast<jule::F64>((-0.5 * _26317_y) + jule::div(_30817_p1,_30917_p2));
				}
				goto _match_end_4363435520;
				_case_end_4363187472:;
				_match_end_4363435520:;
			}
		}
		goto _match_end_4352531264;
		_case_end_4363548368:;
		if (!((_20519_x < 8LL))) { goto _case_end_4363797168; }
		_case_begin_4363797168:;
		{
			jule::Int _31313_i = static_cast<jule::Int>(_20519_x);
			jule::F64 _31413_y = _20519_x - static_cast<jule::F64>(_31313_i);
			jule::F64 _31513_p = _31413_y * (_1386c96d0__LGAM_S[0LL] + (_31413_y * (_1386c96d0__LGAM_S[1LL] + (_31413_y * (_1386c96d0__LGAM_S[2LL] + (_31413_y * (_1386c96d0__LGAM_S[3LL] + (_31413_y * (_1386c96d0__LGAM_S[4LL] + (_31413_y * (_1386c96d0__LGAM_S[5LL] + (_31413_y * _1386c96d0__LGAM_S[6LL]))))))))))));
			jule::F64 _31613_q = 1LL + (_31413_y * (_1386c96d0__LGAM_R[1LL] + (_31413_y * (_1386c96d0__LGAM_R[2LL] + (_31413_y * (_1386c96d0__LGAM_R[3LL] + (_31413_y * (_1386c96d0__LGAM_R[4LL] + (_31413_y * (_1386c96d0__LGAM_R[5LL] + (_31413_y * _1386c96d0__LGAM_R[6LL])))))))))));
			_20529_lgamma=static_cast<jule::F64>((0.5 * _31413_y) + jule::div(_31513_p,_31613_q));
			jule::F64 _31817_z = 1LL;
			{
				auto _match_expr{ _31313_i };
				if (!((7LL) == _match_expr)) { goto _case_end_4369033488; }
				_case_begin_4369033488:;
				{
					_31817_z*=static_cast<jule::F64>(_31413_y + 6LL);
					goto _case_begin_4369033600;
				}
				goto _match_end_4369027696;
				_case_end_4369033488:;
				if (!((6LL) == _match_expr)) { goto _case_end_4369033600; }
				_case_begin_4369033600:;
				{
					_31817_z*=static_cast<jule::F64>(_31413_y + 5LL);
					goto _case_begin_4369033712;
				}
				goto _match_end_4369027696;
				_case_end_4369033600:;
				if (!((5LL) == _match_expr)) { goto _case_end_4369033712; }
				_case_begin_4369033712:;
				{
					_31817_z*=static_cast<jule::F64>(_31413_y + 4LL);
					goto _case_begin_4369033824;
				}
				goto _match_end_4369027696;
				_case_end_4369033712:;
				if (!((4LL) == _match_expr)) { goto _case_end_4369033824; }
				_case_begin_4369033824:;
				{
					_31817_z*=static_cast<jule::F64>(_31413_y + 3LL);
					goto _case_begin_4369033936;
				}
				goto _match_end_4369027696;
				_case_end_4369033824:;
				if (!((3LL) == _match_expr)) { goto _case_end_4369033936; }
				_case_begin_4369033936:;
				{
					_31817_z*=static_cast<jule::F64>(_31413_y + 2LL);
					_20529_lgamma+=static_cast<jule::F64>(_108658370_log(_31817_z));
				}
				goto _match_end_4369027696;
				_case_end_4369033936:;
				_match_end_4369027696:;
			}
		}
		goto _match_end_4352531264;
		_case_end_4363797168:;
		if (!((_20519_x < 288230376151711744LL))) { goto _case_end_4363807856; }
		_case_begin_4363807856:;
		{
			jule::F64 _33713_t = _108658370_log(_20519_x);
			jule::F64 _33813_z = jule::div(1LL,_20519_x);
			jule::F64 _33913_y = _33813_z * _33813_z;
			jule::F64 _34013_w = _1386c96d0__LGAM_W[0LL] + (_33813_z * (_1386c96d0__LGAM_W[1LL] + (_33913_y * (_1386c96d0__LGAM_W[2LL] + (_33913_y * (_1386c96d0__LGAM_W[3LL] + (_33913_y * (_1386c96d0__LGAM_W[4LL] + (_33913_y * (_1386c96d0__LGAM_W[5LL] + (_33913_y * _1386c96d0__LGAM_W[6LL])))))))))));
			_20529_lgamma=static_cast<jule::F64>(((_20519_x - 0.5) * (_33713_t - 1LL)) + _34013_w);
		}
		goto _match_end_4352531264;
		_case_end_4363807856:;
		_case_begin_4363387760:;
		{
			_20529_lgamma=static_cast<jule::F64>(_20519_x * (_108658370_log(_20519_x) - 1LL));
		}
		goto _match_end_4352531264;
		_case_end_4363387760:;
		_match_end_4352531264:;
	}
	if (_22813_neg) {
		_20529_lgamma=static_cast<jule::F64>(_24113_nadj - _20529_lgamma);
	}
	return std::make_tuple(_20529_lgamma,_20542_sign);
}



inline jule::F64 _1386c96d0_sin_pi(jule::F64 _35215_x) {
	
	
	if (_35215_x < 0.25) {
		return static_cast<jule::F64>((-(_119104730_sin(static_cast<jule::F64>(3.141592653589793 * _35215_x)))));
	}
	jule::F64 _36013_z = _1486fe210_floor(_35215_x);
	jule::Int _36113_n = 0LL;
	if (_36013_z != _35215_x) {
		_35215_x=static_cast<jule::F64>(_1191228f0_mod(_35215_x,2LL));
		_36113_n=static_cast<jule::Int>(_35215_x * 4LL);
	} else {
		if (_35215_x >= 9007199254740992LL) {
			_35215_x=0LL;
			_36113_n=0LL;
		} else {
			if (_35215_x < 4503599627370496LL) {
				_36013_z=static_cast<jule::F64>(_35215_x + 4503599627370496LL);
			}
			_36113_n=static_cast<jule::Int>(1LL & _119104140_f64_bits(_36013_z));
			_35215_x=static_cast<jule::F64>(_36113_n);
			_36113_n<<=2LL;
		}
	}
	{
		auto _match_expr{ _36113_n };
		if (!((0LL) == _match_expr)) { goto _case_end_4369064448; }
		_case_begin_4369064448:;
		{
			_35215_x=static_cast<jule::F64>(_119104730_sin(static_cast<jule::F64>(3.141592653589793 * _35215_x)));
		}
		goto _match_end_4369061248;
		_case_end_4369064448:;
		if (!((1LL) == _match_expr || (2LL) == _match_expr)) { goto _case_end_4369058672; }
		_case_begin_4369058672:;
		{
			_35215_x=static_cast<jule::F64>(_119104730_cos(static_cast<jule::F64>(3.141592653589793 * (0.5 - _35215_x))));
		}
		goto _match_end_4369061248;
		_case_end_4369058672:;
		if (!((3LL) == _match_expr || (4LL) == _match_expr)) { goto _case_end_4369058784; }
		_case_begin_4369058784:;
		{
			_35215_x=static_cast<jule::F64>(_119104730_sin(static_cast<jule::F64>(3.141592653589793 * (1LL - _35215_x))));
		}
		goto _match_end_4369061248;
		_case_end_4369058784:;
		if (!((5LL) == _match_expr || (6LL) == _match_expr)) { goto _case_end_4369064656; }
		_case_begin_4369064656:;
		{
			_35215_x=static_cast<jule::F64>((-(_119104730_cos(static_cast<jule::F64>(3.141592653589793 * (_35215_x - 1.5))))));
		}
		goto _match_end_4369061248;
		_case_end_4369064656:;
		_case_begin_4369063216:;
		{
			_35215_x=static_cast<jule::F64>(_119104730_sin(static_cast<jule::F64>(3.141592653589793 * (_35215_x - 2LL))));
		}
		goto _match_end_4369061248;
		_case_end_4369063216:;
		_match_end_4369061248:;
	}
	return static_cast<jule::F64>((-(_35215_x)));
}



inline jule::F64 _1386d8910_acosh(jule::F64 _7314_x) {
	
	{
		if (!((_7314_x < 1LL) || (_10862f890_is_nan(_7314_x)))) { goto _case_end_4369072352; }
		_case_begin_4369072352:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4369072112;
		_case_end_4369072352:;
		if (!((_7314_x == 1LL))) { goto _case_end_4369072464; }
		_case_begin_4369072464:;
		{
			return 0LL;
		}
		goto _match_end_4369072112;
		_case_end_4369072464:;
		if (!((_7314_x >= 268435456LL))) { goto _case_end_4369072576; }
		_case_begin_4369072576:;
		{
			return static_cast<jule::F64>(_108658370_log(_7314_x) + 0.6931471805599453);
		}
		goto _match_end_4369072112;
		_case_end_4369072576:;
		if (!((_7314_x > 2LL))) { goto _case_end_4369072688; }
		_case_begin_4369072688:;
		{
			return static_cast<jule::F64>(_108658370_log(static_cast<jule::F64>((2LL * _7314_x) - jule::div(1LL,_7314_x + _1487c80f0_sqrt(static_cast<jule::F64>((_7314_x * _7314_x) - 1LL))))));
		}
		goto _match_end_4369072112;
		_case_end_4369072688:;
		_match_end_4369072112:;
	}
	jule::F64 _869_t = _7314_x - 1LL;
	return static_cast<jule::F64>(_1487ee500_log1p(static_cast<jule::F64>(_869_t + _1487c80f0_sqrt(static_cast<jule::F64>((2LL * _869_t) + (_869_t * _869_t))))));
}



inline jule::F64 _14876a3f0_tanh(jule::F64 _10613_x) {
	
	jule::F64 _10813_z = _1086895c0_abs(_10613_x);
	{
		if (!((_10813_z > 44.014845965556525))) { goto _case_end_4369090912; }
		_case_begin_4369090912:;
		{
			if (_10613_x < 0LL) {
				return -1LL;
			}
			return 1LL;
		}
		goto _match_end_4369084464;
		_case_end_4369090912:;
		if (!((_10813_z >= 0.625))) { goto _case_end_4369091056; }
		_case_begin_4369091056:;
		{
			jule::F64 _11613_s = _1487c7630_exp(static_cast<jule::F64>(2LL * _10813_z));
			_10813_z=static_cast<jule::F64>(1LL - jule::div(2LL,_11613_s + 1LL));
			if (_10613_x < 0LL) {
				_10813_z=static_cast<jule::F64>((-(_10813_z)));
			}
		}
		goto _match_end_4369084464;
		_case_end_4369091056:;
		_case_begin_4369084592:;
		{
			if (_10613_x == 0LL) {
				return _10613_x;
			}
			jule::F64 _12513_s = _10613_x * _10613_x;
			_10813_z=static_cast<jule::F64>(_10613_x + jule::div((_10613_x * _12513_s) * ((((_14876a3f0_TANH_P[0LL] * _12513_s) + _14876a3f0_TANH_P[1LL]) * _12513_s) + _14876a3f0_TANH_P[2LL]),((((_12513_s + _14876a3f0_TANH_Q[0LL]) * _12513_s) + _14876a3f0_TANH_Q[1LL]) * _12513_s) + _14876a3f0_TANH_Q[2LL]));
		}
		goto _match_end_4369084464;
		_case_end_4369084592:;
		_match_end_4369084464:;
	}
	return _10813_z;
}



inline jule::F64 _148779ca0_cbrt(jule::F64 _5617_x) {
	
	
	
	
	
	
	
	
	if (((_5617_x == 0LL) || _10862f890_is_nan(_5617_x)) || _10862f890_is_inf(_5617_x,0LL)) {
		return _5617_x;
	}
	jule::Bool _7113_sign = false;
	if (_5617_x < 0LL) {
		_5617_x=static_cast<jule::F64>((-(_5617_x)));
		_7113_sign=true;
	}
	jule::F64 _7813_t = _119104140_f64_from_bits(static_cast<jule::U64>(jule::div(_119104140_f64_bits(_5617_x),3LL) + 3071306043645493248LL));
	if (_5617_x < 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014) {
		_7813_t=static_cast<jule::F64>(18014398509481984LL);
		_7813_t*=_5617_x;
		_7813_t=static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>(jule::div(_119104140_f64_bits(_7813_t),3LL) + 2990241250352824320LL)));
	}
	jule::F64 _8713_r = jule::div(_7813_t * _7813_t,_5617_x);
	jule::F64 _8813_s = 0.5428571428571428 + (_8713_r * _7813_t);
	_7813_t*=static_cast<jule::F64>(0.35714285714285715 + jule::div(1.6071428571428572,(_8813_s + 1.4142857142857144) + jule::div(-0.7053061224489796,_8813_s)));
	_7813_t=static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>((_119104140_f64_bits(_7813_t) & -1073741824LL) + 1073741824LL)));
	_8813_s=static_cast<jule::F64>(_7813_t * _7813_t);
	_8713_r=static_cast<jule::F64>(jule::div(_5617_x,_8813_s));
	jule::F64 _979_w = _7813_t + _7813_t;
	_8713_r=static_cast<jule::F64>(jule::div(_8713_r - _7813_t,_979_w + _8713_r));
	_7813_t=static_cast<jule::F64>(_7813_t + (_7813_t * _8713_r));
	if (_7113_sign) {
		_7813_t=static_cast<jule::F64>((-(_7813_t)));
	}
	return _7813_t;
}



inline jule::F64 _148759c30_pow(jule::F64 _6412_x,jule::F64 _6420_y) {
	{
		if (!((_6420_y == 0LL) || (_6412_x == 1LL))) { goto _case_end_4369123712; }
		_case_begin_4369123712:;
		{
			return 1LL;
		}
		goto _match_end_4369123424;
		_case_end_4369123712:;
		if (!((_6420_y == 1LL))) { goto _case_end_4369123840; }
		_case_begin_4369123840:;
		{
			return _6412_x;
		}
		goto _match_end_4369123424;
		_case_end_4369123840:;
		if (!((_10862f890_is_nan(_6412_x)) || (_10862f890_is_nan(_6420_y)))) { goto _case_end_4369123968; }
		_case_begin_4369123968:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4369123424;
		_case_end_4369123968:;
		if (!((_6412_x == 0LL))) { goto _case_end_4369124096; }
		_case_begin_4369124096:;
		{
			{
				if (!((_6420_y < 0LL))) { goto _case_end_4369127184; }
				_case_begin_4369127184:;
				{
					if (_148759c30_is_odd_int(_6420_y)) {
						return static_cast<jule::F64>(_11918d9f0_copysign(static_cast<jule::F64>(_10862f890_inf(1LL)),_6412_x));
					}
					return static_cast<jule::F64>(_10862f890_inf(1LL));
				}
				goto _match_end_4369127936;
				_case_end_4369127184:;
				if (!((_6420_y > 0LL))) { goto _case_end_4369127296; }
				_case_begin_4369127296:;
				{
					if (_148759c30_is_odd_int(_6420_y)) {
						return _6412_x;
					}
					return 0LL;
				}
				goto _match_end_4369127936;
				_case_end_4369127296:;
				_match_end_4369127936:;
			}
		}
		goto _match_end_4369123424;
		_case_end_4369124096:;
		if (!((_10862f890_is_inf(_6420_y,0LL)))) { goto _case_end_4369124224; }
		_case_begin_4369124224:;
		{
			{
				if (!((_6412_x == -1LL))) { goto _case_end_4369136032; }
				_case_begin_4369136032:;
				{
					return 1LL;
				}
				goto _match_end_4369133888;
				_case_end_4369136032:;
				if (!(((_1086895c0_abs(_6412_x) < 1LL) == _10862f890_is_inf(_6420_y,1LL)))) { goto _case_end_4369135776; }
				_case_begin_4369135776:;
				{
					return 0LL;
				}
				goto _match_end_4369133888;
				_case_end_4369135776:;
				_case_begin_4369128624:;
				{
					return static_cast<jule::F64>(_10862f890_inf(1LL));
				}
				goto _match_end_4369133888;
				_case_end_4369128624:;
				_match_end_4369133888:;
			}
		}
		goto _match_end_4369123424;
		_case_end_4369124224:;
		if (!((_10862f890_is_inf(_6412_x,0LL)))) { goto _case_end_4369124352; }
		_case_begin_4369124352:;
		{
			if (_10862f890_is_inf(_6412_x,-1LL)) {
				return static_cast<jule::F64>(_148759c30_pow(static_cast<jule::F64>(jule::div(1LL,_6412_x)),static_cast<jule::F64>((-(_6420_y)))));
			}
			{
				if (!((_6420_y < 0LL))) { goto _case_end_4369138512; }
				_case_begin_4369138512:;
				{
					return 0LL;
				}
				goto _match_end_4369138272;
				_case_end_4369138512:;
				if (!((_6420_y > 0LL))) { goto _case_end_4369137264; }
				_case_begin_4369137264:;
				{
					return static_cast<jule::F64>(_10862f890_inf(1LL));
				}
				goto _match_end_4369138272;
				_case_end_4369137264:;
				_match_end_4369138272:;
			}
		}
		goto _match_end_4369123424;
		_case_end_4369124352:;
		if (!((_6420_y == 0.5))) { goto _case_end_4369124480; }
		_case_begin_4369124480:;
		{
			return static_cast<jule::F64>(_1487c80f0_sqrt(_6412_x));
		}
		goto _match_end_4369123424;
		_case_end_4369124480:;
		if (!((_6420_y == -0.5))) { goto _case_end_4369124608; }
		_case_begin_4369124608:;
		{
			return static_cast<jule::F64>(jule::div(1LL,_1487c80f0_sqrt(_6412_x)));
		}
		goto _match_end_4369123424;
		_case_end_4369124608:;
		_match_end_4369123424:;
	}
	jule::F64 _10814_yi;
	jule::F64 _10822_yf;
	std::tie(_10814_yi,_10822_yf) = _14904ec70_modf(static_cast<jule::F64>(_1086895c0_abs(_6420_y)));
	if ((_10822_yf != 0LL) && (_6412_x < 0LL)) {
		return static_cast<jule::F64>(_10862f890_nan());
	}
	if (_10814_yi >= 9223372036854775808LLU) {
		{
			if (!((_6412_x == -1LL))) { goto _case_end_4369149520; }
			_case_begin_4369149520:;
			{
				return 1LL;
			}
			goto _match_end_4369145168;
			_case_end_4369149520:;
			if (!(((_1086895c0_abs(_6412_x) < 1LL) == (_6420_y > 0LL)))) { goto _case_end_4369149264; }
			_case_begin_4369149264:;
			{
				return 0LL;
			}
			goto _match_end_4369145168;
			_case_end_4369149264:;
			_case_begin_4369145312:;
			{
				return static_cast<jule::F64>(_10862f890_inf(1LL));
			}
			goto _match_end_4369145168;
			_case_end_4369145312:;
			_match_end_4369145168:;
		}
	}
	jule::F64 _12613_a1 = 1LL;
	jule::Int _12713_ae = 0LL;
	if (_10822_yf != 0LL) {
		if (_10822_yf > 0.5) {
			(_10822_yf)--;
			(_10814_yi)++;
		}
		_12613_a1=static_cast<jule::F64>(_1487c7630_exp(static_cast<jule::F64>(_10822_yf * _108658370_log(_6412_x))));
	}
	jule::F64 _14214_x1;
	jule::Int _14222_xe;
	std::tie(_14214_x1,_14222_xe) = _119106e10_frexp(_6412_x);
	jule::I64 _14313_i = static_cast<jule::I64>(_10814_yi);
	_iter_begin_4369157072:;
	if (!(_14313_i != 0LL)) { goto _iter_end_4369157072; }
	{
		if ((_14222_xe < -4096LL) || (4096LL < _14222_xe)) {
			_12713_ae+=_14222_xe;
			goto _iter_end_4369157072;
		}
		if ((_14313_i & 1LL) == 1LL) {
			_12613_a1*=_14214_x1;
			_12713_ae+=_14222_xe;
		}
		_14214_x1*=_14214_x1;
		_14222_xe<<=1LL;
		if (_14214_x1 < 0.5) {
			_14214_x1+=_14214_x1;
			(_14222_xe)--;
		}
	}
	_iter_next_4369157072:;
	_14313_i>>=1LL;
	goto _iter_begin_4369157072;
	_iter_end_4369157072:;
	if (_6420_y < 0LL) {
		_12613_a1=static_cast<jule::F64>(jule::div(1LL,_12613_a1));
		_12713_ae=static_cast<jule::Int>((-(_12713_ae)));
	}
	return static_cast<jule::F64>(_138643ab0_ldexp(_12613_a1,_12713_ae));
}



inline jule::Bool _148759c30_is_odd_int(jule::F64 _17615_x) {
	jule::F64 _17710_xi;
	jule::F64 _17714_xf;
	std::tie(_17710_xi,_17714_xf) = _14904ec70_modf(_17615_x);
	return (_17714_xf == 0LL) && ((static_cast<jule::I64>(_17710_xi) & 1LL) == 1LL);
}



inline jule::F64 _1487c7630_exp(jule::F64 _12212_x) {
	
	
	
	
	
	
	{
		if (!((_10862f890_is_nan(_12212_x)) || (_10862f890_is_inf(_12212_x,1LL)))) { goto _case_end_4369175104; }
		_case_begin_4369175104:;
		{
			return _12212_x;
		}
		goto _match_end_4369174688;
		_case_end_4369175104:;
		if (!((_10862f890_is_inf(_12212_x,-1LL)))) { goto _case_end_4369175280; }
		_case_begin_4369175280:;
		{
			return 0LL;
		}
		goto _match_end_4369174688;
		_case_end_4369175280:;
		if (!((_12212_x > 709.782712893384))) { goto _case_end_4369175392; }
		_case_begin_4369175392:;
		{
			return static_cast<jule::F64>(_10862f890_inf(1LL));
		}
		goto _match_end_4369174688;
		_case_end_4369175392:;
		if (!((_12212_x < -745.1332191019411))) { goto _case_end_4369175504; }
		_case_begin_4369175504:;
		{
			return 0LL;
		}
		goto _match_end_4369174688;
		_case_end_4369175504:;
		if (!(((-0.000000003725290298461914 < _12212_x) && (_12212_x < 0.000000003725290298461914)))) { goto _case_end_4369175616; }
		_case_begin_4369175616:;
		{
			return static_cast<jule::F64>(1LL + _12212_x);
		}
		goto _match_end_4369174688;
		_case_end_4369175616:;
		_match_end_4369174688:;
	}
	jule::Int _14613_k = 0LL;
	{
		if (!((_12212_x < 0LL))) { goto _case_end_4369182064; }
		_case_begin_4369182064:;
		{
			_14613_k=static_cast<jule::Int>((1.4426950408889634 * _12212_x) - 0.5);
		}
		goto _match_end_4369181040;
		_case_end_4369182064:;
		if (!((_12212_x > 0LL))) { goto _case_end_4369182176; }
		_case_begin_4369182176:;
		{
			_14613_k=static_cast<jule::Int>((1.4426950408889634 * _12212_x) + 0.5);
		}
		goto _match_end_4369181040;
		_case_end_4369182176:;
		_match_end_4369181040:;
	}
	jule::F64 _1519_hi = _12212_x - (static_cast<jule::F64>(_14613_k) * 0.6931471803691238);
	jule::F64 _1529_lo = static_cast<jule::F64>(_14613_k) * 0.00000000019082149292705877;
	return static_cast<jule::F64>(_1487c7630_expmulti(_1519_hi,_1529_lo,_14613_k));
}



inline jule::F64 _1487c7630_exp2(jule::F64 _16013_x) {
	
	
	
	
	{
		if (!((_10862f890_is_nan(_16013_x)) || (_10862f890_is_inf(_16013_x,1LL)))) { goto _case_end_4369193552; }
		_case_begin_4369193552:;
		{
			return _16013_x;
		}
		goto _match_end_4369193376;
		_case_end_4369193552:;
		if (!((_10862f890_is_inf(_16013_x,-1LL)))) { goto _case_end_4369193664; }
		_case_begin_4369193664:;
		{
			return 0LL;
		}
		goto _match_end_4369193376;
		_case_end_4369193664:;
		if (!((_16013_x > 1023.9999999999999))) { goto _case_end_4369193792; }
		_case_begin_4369193792:;
		{
			return static_cast<jule::F64>(_10862f890_inf(1LL));
		}
		goto _match_end_4369193376;
		_case_end_4369193792:;
		if (!((_16013_x < -1074LL))) { goto _case_end_4369193920; }
		_case_begin_4369193920:;
		{
			return 0LL;
		}
		goto _match_end_4369193376;
		_case_end_4369193920:;
		_match_end_4369193376:;
	}
	jule::Int _18113_k = 0LL;
	{
		if (!((_16013_x > 0LL))) { goto _case_end_4369198976; }
		_case_begin_4369198976:;
		{
			_18113_k=static_cast<jule::Int>(_16013_x + 0.5);
		}
		goto _match_end_4369198608;
		_case_end_4369198976:;
		if (!((_16013_x < 0LL))) { goto _case_end_4369199104; }
		_case_begin_4369199104:;
		{
			_18113_k=static_cast<jule::Int>(_16013_x - 0.5);
		}
		goto _match_end_4369198608;
		_case_end_4369199104:;
		_match_end_4369198608:;
	}
	jule::F64 _1869_t = _16013_x - static_cast<jule::F64>(_18113_k);
	jule::F64 _1879_hi = _1869_t * 0.6931471803691238;
	jule::F64 _1889_lo = (-(_1869_t)) * 0.00000000019082149292705877;
	return static_cast<jule::F64>(_1487c7630_expmulti(_1879_hi,_1889_lo,_18113_k));
}



inline jule::F64 _1487c7630_expmulti(jule::F64 _19513_hi,jule::F64 _19522_lo,jule::Int _19531_k) {
	
	
	
	
	
	jule::F64 _2029_r = _19513_hi - _19522_lo;
	jule::F64 _2039_t = _2029_r * _2029_r;
	jule::F64 _2049_c = _2029_r - (_2039_t * (0.16666666666666666 + (_2039_t * (-0.0027777777777015593 + (_2039_t * (0.00006613756321437934 + (_2039_t * (-0.0000016533902205465252 + (_2039_t * 0.000000041381367970572385)))))))));
	jule::F64 _2059_y = 1LL - ((_19522_lo - jule::div(_2029_r * _2049_c,2LL - _2049_c)) - _19513_hi);
	return static_cast<jule::F64>(_138643ab0_ldexp(_2059_y,_19531_k));
}



inline jule::F64 _1487ee500_log1p(jule::F64 _12614_x) {
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_12614_x < -1LL) || (_10862f890_is_nan(_12614_x)))) { goto _case_end_4369234912; }
		_case_begin_4369234912:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4369234720;
		_case_end_4369234912:;
		if (!((_12614_x == -1LL))) { goto _case_end_4369235040; }
		_case_begin_4369235040:;
		{
			return static_cast<jule::F64>(_10862f890_inf(-1LL));
		}
		goto _match_end_4369234720;
		_case_end_4369235040:;
		if (!((_10862f890_is_inf(_12614_x,1LL)))) { goto _case_end_4369235168; }
		_case_begin_4369235168:;
		{
			return static_cast<jule::F64>(_10862f890_inf(1LL));
		}
		goto _match_end_4369234720;
		_case_end_4369235168:;
		_match_end_4369234720:;
	}
	jule::F64 _1529_absx = _1086895c0_abs(_12614_x);
	jule::F64 _15413_f = 0LL;
	jule::U64 _15513_iu = 0LLU;
	jule::Int _15613_k = 1LL;
	if (_1529_absx < 0.41421356237309503) {
		if (_1529_absx < 0.000000001862645149230957) {
			if (_1529_absx < 0.00000000000000005551115123125783) {
				return _12614_x;
			}
			return static_cast<jule::F64>(_12614_x - ((_12614_x * _12614_x) * 0.5));
		}
		if (_12614_x > -0.2928932188134525) {
			_15613_k=0LL;
			_15413_f=_12614_x;
			_15513_iu=1LL;
		}
	}
	jule::F64 _17113_c = 0LL;
	if (_15613_k != 0LL) {
		jule::F64 _17317_u = 0LL;
		if (_1529_absx < 9007199254740992LL) {
			_17317_u=static_cast<jule::F64>(1LL + _12614_x);
			_15513_iu=static_cast<jule::U64>(_119104140_f64_bits(_17317_u));
			_15613_k=static_cast<jule::Int>((_15513_iu >> 52LL) - 1023LL);
			if (_15613_k > 0LL) {
				_17113_c=static_cast<jule::F64>(1LL - (_17317_u - _12614_x));
			} else {
				_17113_c=static_cast<jule::F64>(_12614_x - (_17317_u - 1LL));
			}
			_17113_c/=_17317_u;
		} else {
			_17317_u=_12614_x;
			_15513_iu=static_cast<jule::U64>(_119104140_f64_bits(_17317_u));
			_15613_k=static_cast<jule::Int>((_15513_iu >> 52LL) - 1023LL);
			_17113_c=0LL;
		}
		_15513_iu&=4503599627370495LL;
		if (_15513_iu < 1865452045155277LL) {
			_17317_u=static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>(_15513_iu | 4607182418800017408LL)));
		} else {
			(_15613_k)++;
			_17317_u=static_cast<jule::F64>(_119104140_f64_from_bits(static_cast<jule::U64>(_15513_iu | 4602678819172646912LL)));
			_15513_iu=static_cast<jule::U64>((4503599627370496LL - _15513_iu) >> 2LL);
		}
		_15413_f=static_cast<jule::F64>(_17317_u - 1LL);
	}
	jule::F64 _2029_hfsq = (0.5 * _15413_f) * _15413_f;
	jule::F64 _20313_s = 0LL;
	jule::F64 _20413_R = 0LL;
	jule::F64 _20513_z = 0LL;
	if (_15513_iu == 0LL) {
		if (_15413_f == 0LL) {
			if (_15613_k == 0LL) {
				return 0LL;
			}
			_17113_c+=static_cast<jule::F64>(static_cast<jule::F64>(_15613_k) * 0.00000000019082149292705877);
			return static_cast<jule::F64>((static_cast<jule::F64>(_15613_k) * 0.6931471803691238) + _17113_c);
		}
		_20413_R=static_cast<jule::F64>(_2029_hfsq * (1LL - (0.6666666666666666 * _15413_f)));
		if (_15613_k == 0LL) {
			return static_cast<jule::F64>(_15413_f - _20413_R);
		}
		return static_cast<jule::F64>((static_cast<jule::F64>(_15613_k) * 0.6931471803691238) - ((_20413_R - ((static_cast<jule::F64>(_15613_k) * 0.00000000019082149292705877) + _17113_c)) - _15413_f));
	}
	_20313_s=static_cast<jule::F64>(jule::div(_15413_f,2LL + _15413_f));
	_20513_z=static_cast<jule::F64>(_20313_s * _20313_s);
	_20413_R=static_cast<jule::F64>(_20513_z * (0.6666666666666735 + (_20513_z * (0.3999999999940942 + (_20513_z * (0.2857142874366239 + (_20513_z * (0.22222198432149784 + (_20513_z * (0.1818357216161805 + (_20513_z * (0.15313837699209373 + (_20513_z * 0.14798198605116586)))))))))))));
	if (_15613_k == 0LL) {
		return static_cast<jule::F64>(_15413_f - (_2029_hfsq - (_20313_s * (_2029_hfsq + _20413_R))));
	}
	return static_cast<jule::F64>((static_cast<jule::F64>(_15613_k) * 0.6931471803691238) - ((_2029_hfsq - ((_20313_s * (_2029_hfsq + _20413_R)) + ((static_cast<jule::F64>(_15613_k) * 0.00000000019082149292705877) + _17113_c))) - _15413_f));
}



inline std::tuple<jule::F64,jule::F64> _108735120_stirling(jule::F64 _13113_x) {
	if (_13113_x > 200LL) {
		return std::make_tuple(static_cast<jule::F64>(_10862f890_inf(1LL)),1LL);
	}
	
	
	jule::F64 _13713_w = jule::div(1LL,_13113_x);
	_13713_w=static_cast<jule::F64>(1LL + (_13713_w * ((((((((_108735120__GAM_S[0LL] * _13713_w) + _108735120__GAM_S[1LL]) * _13713_w) + _108735120__GAM_S[2LL]) * _13713_w) + _108735120__GAM_S[3LL]) * _13713_w) + _108735120__GAM_S[4LL])));
	jule::F64 _13913_y1 = _1487c7630_exp(_13113_x);
	jule::F64 _14013_y2 = 1LL;
	if (_13113_x > 143.01608) {
		jule::F64 _14213_v = _148759c30_pow(_13113_x,static_cast<jule::F64>((0.5 * _13113_x) - 0.25));
		std::tie(_13913_y1,_14013_y2) = std::make_tuple(_14213_v,static_cast<jule::F64>(jule::div(_14213_v,_13913_y1)));
	} else {
		_13913_y1=static_cast<jule::F64>(jule::div(_148759c30_pow(_13113_x,static_cast<jule::F64>(_13113_x - 0.5)),_13913_y1));
	}
	return std::make_tuple(_13913_y1,static_cast<jule::F64>((2.5066282746310007 * _13713_w) * _14013_y2));
}



inline jule::F64 _108735120_gamma(jule::F64 _15918_x) {
	
	{
		if (!((_108735120_is_neg_int(_15918_x)) || (_10862f890_is_inf(_15918_x,-1LL)) || (_10862f890_is_nan(_15918_x)))) { goto _case_end_4369298512; }
		_case_begin_4369298512:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4369298272;
		_case_end_4369298512:;
		if (!((_10862f890_is_inf(_15918_x,1LL)))) { goto _case_end_4369298624; }
		_case_begin_4369298624:;
		{
			return static_cast<jule::F64>(_10862f890_inf(1LL));
		}
		goto _match_end_4369298272;
		_case_end_4369298624:;
		if (!((_15918_x == 0LL))) { goto _case_end_4369298736; }
		_case_begin_4369298736:;
		{
			if (_138652150_signbit(_15918_x)) {
				return static_cast<jule::F64>(_10862f890_inf(-1LL));
			}
			return static_cast<jule::F64>(_10862f890_inf(1LL));
		}
		goto _match_end_4369298272;
		_case_end_4369298736:;
		_match_end_4369298272:;
	}
	jule::F64 _17313_q = _1086895c0_abs(_15918_x);
	jule::F64 _17413_p = _1486fe210_floor(_17313_q);
	if (_17313_q > 33LL) {
		if (_15918_x >= 0LL) {
			jule::F64 _17718_y1;
			jule::F64 _17722_y2;
			std::tie(_17718_y1,_17722_y2) = _108735120_stirling(_15918_x);
			return static_cast<jule::F64>(_17718_y1 * _17722_y2);
		}
		jule::Int _18317_signgam = 1LL;
		jule::I64 _18413_ip = static_cast<jule::I64>(_17413_p);
		if ((_18413_ip & 1LL) == 0LL) {
			_18317_signgam=-1LL;
		}
		jule::F64 _18817_z = _17313_q - _17413_p;
		if (_18817_z > 0.5) {
			_17413_p=static_cast<jule::F64>(_17413_p + 1LL);
			_18817_z=static_cast<jule::F64>(_17313_q - _17413_p);
		}
		_18817_z=static_cast<jule::F64>(_17313_q * _119104730_sin(static_cast<jule::F64>(3.141592653589793 * _18817_z)));
		if (_18817_z == 0LL) {
			return static_cast<jule::F64>(_10862f890_inf(_18317_signgam));
		}
		jule::F64 _19714_sq1;
		jule::F64 _19719_sq2;
		std::tie(_19714_sq1,_19719_sq2) = _108735120_stirling(_17313_q);
		jule::F64 _19813_absz = _1086895c0_abs(_18817_z);
		jule::F64 _19913_d = (_19813_absz * _19714_sq1) * _19719_sq2;
		if (_10862f890_is_inf(_19913_d,0LL)) {
			_18817_z=static_cast<jule::F64>(jule::div(jule::div(jule::div(3.141592653589793,_19813_absz),_19714_sq1),_19719_sq2));
		} else {
			_18817_z=static_cast<jule::F64>(jule::div(3.141592653589793,_19913_d));
		}
		return static_cast<jule::F64>(static_cast<jule::F64>(_18317_signgam) * _18817_z);
	}
	jule::F64 _20913_z = 1LL;
	_iter_begin_4369322528:;
	if (!(_15918_x >= 3LL)) { goto _iter_end_4369322528; }
	{
		_15918_x=static_cast<jule::F64>(_15918_x - 1LL);
		_20913_z=static_cast<jule::F64>(_20913_z * _15918_x);
	}
	_iter_next_4369322528:;
	goto _iter_begin_4369322528;
	_iter_end_4369322528:;
	_iter_begin_4369325616:;
	if (!(_15918_x < 0LL)) { goto _iter_end_4369325616; }
	{
		if (_15918_x > -0.000000001) {
			goto _julec_label_small;
		}
		_20913_z=static_cast<jule::F64>(jule::div(_20913_z,_15918_x));
		_15918_x=static_cast<jule::F64>(_15918_x + 1LL);
	}
	_iter_next_4369325616:;
	goto _iter_begin_4369325616;
	_iter_end_4369325616:;
	_iter_begin_4369329344:;
	if (!(_15918_x < 2LL)) { goto _iter_end_4369329344; }
	{
		if (_15918_x < 0.000000001) {
			goto _julec_label_small;
		}
		_20913_z=static_cast<jule::F64>(jule::div(_20913_z,_15918_x));
		_15918_x=static_cast<jule::F64>(_15918_x + 1LL);
	}
	_iter_next_4369329344:;
	goto _iter_begin_4369329344;
	_iter_end_4369329344:;
	if (_15918_x == 2LL) {
		return _20913_z;
	}
	_15918_x=static_cast<jule::F64>(_15918_x - 2LL);
	_17413_p=static_cast<jule::F64>((((((((((((_15918_x * _108735120__GAM_P[0LL]) + _108735120__GAM_P[1LL]) * _15918_x) + _108735120__GAM_P[2LL]) * _15918_x) + _108735120__GAM_P[3LL]) * _15918_x) + _108735120__GAM_P[4LL]) * _15918_x) + _108735120__GAM_P[5LL]) * _15918_x) + _108735120__GAM_P[6LL]);
	_17313_q=static_cast<jule::F64>((((((((((((((_15918_x * _108735120__GAM_Q[0LL]) + _108735120__GAM_Q[1LL]) * _15918_x) + _108735120__GAM_Q[2LL]) * _15918_x) + _108735120__GAM_Q[3LL]) * _15918_x) + _108735120__GAM_Q[4LL]) * _15918_x) + _108735120__GAM_Q[5LL]) * _15918_x) + _108735120__GAM_Q[6LL]) * _15918_x) + _108735120__GAM_Q[7LL]);
	return static_cast<jule::F64>(jule::div(_20913_z * _17413_p,_17313_q));
	_julec_label_small:;
	if (_15918_x == 0LL) {
		return static_cast<jule::F64>(_10862f890_inf(1LL));
	}
	return static_cast<jule::F64>(jule::div(_20913_z,(1LL + (0.5772156649015329 * _15918_x)) * _15918_x));
}



inline jule::Bool _108735120_is_neg_int(jule::F64 _24515_x) {
	if (_24515_x < 0LL) {
		jule::F64 _24717_xf;
		std::tie(std::ignore,_24717_xf) = _14904ec70_modf(_24515_x);
		return _24717_xf == 0LL;
	}
	return false;
}



inline jule::F64 _10874c060_erfinv(jule::F64 _10519_x) {
	if ((_10862f890_is_nan(_10519_x) || (_10519_x <= -1LL)) || (_10519_x >= 1LL)) {
		if ((_10519_x == -1LL) || (_10519_x == 1LL)) {
			return static_cast<jule::F64>(_10862f890_inf(static_cast<jule::Int>(_10519_x)));
		}
		return static_cast<jule::F64>(_10862f890_nan());
	}
	jule::Bool _11413_sign = false;
	if (_10519_x < 0LL) {
		_10519_x=static_cast<jule::F64>((-(_10519_x)));
		_11413_sign=true;
	}
	jule::F64 _12013_ans = 0LL;
	if (_10519_x <= 0.85) {
		jule::F64 _12213_r = 0.180625 - ((0.25 * _10519_x) * _10519_x);
		jule::F64 _12313_z1 = (((((((((((((887.0940696254552 * _12213_r) + 11819.493347062295) * _12213_r) + 23782.041382114385) * _12213_r) + 16235.862515167575) * _12213_r) + 4854.886889384388) * _12213_r) + 697.062665343896) * _12213_r) + 47.07268811238398) * _12213_r) + 1.1975323115670913;
		jule::F64 _12413_z2 = (((((((((((((5226.495278852854 * _12213_r) + 28729.085735721943) * _12213_r) + 39307.89580009271) * _12213_r) + 21213.794301586597) * _12213_r) + 5394.196021424751) * _12213_r) + 687.1870074920579) * _12213_r) + 42.31333070160091) * _12213_r) + 1LL;
		_12013_ans=static_cast<jule::F64>(jule::div(_10519_x * _12313_z1,_12413_z2));
	} else {
		jule::F64 _12717_z1 = 0LL;
		jule::F64 _12817_z2 = 0LL;
		jule::F64 _12917_r = _1487c80f0_sqrt(static_cast<jule::F64>(0.6931471805599453 - _108658370_log(static_cast<jule::F64>(1LL - _10519_x))));
		if (_12917_r <= 5LL) {
			_12917_r-=1.6;
			_12717_z1=static_cast<jule::F64>((((((((((((((0.0007745450142783414 * _12917_r) + 0.022723844989269184) * _12917_r) + 0.2417807251774506) * _12917_r) + 1.2704582524523684) * _12917_r) + 3.6478483247632045) * _12917_r) + 5.769497221460691) * _12917_r) + 4.630337846156546) * _12917_r) + 1.4234371107496835);
			_12817_z2=static_cast<jule::F64>((((((((((((((0.0000000014859850019840355 * _12917_r) + 0.0007744145906515771) * _12917_r) + 0.021494160384252878) * _12917_r) + 0.2094506521051275) * _12917_r) + 0.9754783200178743) * _12917_r) + 2.3707661626024534) * _12917_r) + 2.9036514445419948) * _12917_r) + 1.4142135623730951);
		} else {
			_12917_r-=5LL;
			_12717_z1=static_cast<jule::F64>((((((((((((((0.00000020103343992922881 * _12917_r) + 0.000027115555687434876) * _12917_r) + 0.0012426609473880784) * _12917_r) + 0.026532189526576124) * _12917_r) + 0.29656057182850487) * _12917_r) + 1.7848265399172913) * _12917_r) + 5.463784911164114) * _12917_r) + 6.657904643501103);
			_12817_z2=static_cast<jule::F64>((((((((((((((0.0000000000000028910246058729655 * _12917_r) + 0.0000002010321207683943) * _12917_r) + 0.000026110884050805935) * _12917_r) + 0.0011128009970788597) * _12917_r) + 0.02103693768272069) * _12917_r) + 0.19364809469506591) * _12917_r) + 0.8482908416595164) * _12917_r) + 1.4142135623730951);
		}
		_12013_ans=static_cast<jule::F64>(jule::div(_12717_z1,_12817_z2));
	}
	if (_11413_sign) {
		return static_cast<jule::F64>((-(_12013_ans)));
	}
	return _12013_ans;
}



inline jule::F64 _10874c060_erfcinv(jule::F64 _15516_x) {
	return static_cast<jule::F64>(_10874c060_erfinv(static_cast<jule::F64>(1LL - _15516_x)));
}



inline jule::F64 _108736510_erf(jule::F64 _21716_x) {
	
	
	{
		if (!((_10862f890_is_nan(_21716_x)))) { goto _case_end_4369391008; }
		_case_begin_4369391008:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4369390848;
		_case_end_4369391008:;
		if (!((_10862f890_is_inf(_21716_x,1LL)))) { goto _case_end_4369391120; }
		_case_begin_4369391120:;
		{
			return 1LL;
		}
		goto _match_end_4369390848;
		_case_end_4369391120:;
		if (!((_10862f890_is_inf(_21716_x,-1LL)))) { goto _case_end_4369391232; }
		_case_begin_4369391232:;
		{
			return -1LL;
		}
		goto _match_end_4369390848;
		_case_end_4369391232:;
		_match_end_4369390848:;
	}
	jule::Bool _22913_sign = false;
	if (_21716_x < 0LL) {
		_21716_x=static_cast<jule::F64>((-(_21716_x)));
		_22913_sign=true;
	}
	if (_21716_x < 0.84375) {
		jule::F64 _23517_temp = 0LL;
		if (_21716_x < 0.000000003725290298461914) {
			if (_21716_x < 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002848094538889218) {
				_23517_temp=static_cast<jule::F64>(0.125 * ((8LL * _21716_x) + (1.0270333367641007 * _21716_x)));
			} else {
				_23517_temp=static_cast<jule::F64>(_21716_x + (0.1283791670955126 * _21716_x));
			}
		} else {
			jule::F64 _24317_z = _21716_x * _21716_x;
			jule::F64 _24417_r = 0.12837916709551256 + (_24317_z * (-0.3250421072470015 + (_24317_z * (-0.02848174957559851 + (_24317_z * (-0.005770270296489442 + (_24317_z * -0.000023763016656650163)))))));
			jule::F64 _24517_s = 1LL + (_24317_z * (0.39791722395915535 + (_24317_z * (0.0650222499887673 + (_24317_z * (0.005081306281875766 + (_24317_z * (0.00013249473800432164 + (_24317_z * -0.000003960228278775368)))))))));
			jule::F64 _24617_y = jule::div(_24417_r,_24517_s);
			_23517_temp=static_cast<jule::F64>(_21716_x + (_21716_x * _24617_y));
		}
		if (_22913_sign) {
			return static_cast<jule::F64>((-(_23517_temp)));
		}
		return _23517_temp;
	}
	if (_21716_x < 1.25) {
		jule::F64 _25513_s = _21716_x - 1LL;
		jule::F64 _25613_P = -0.0023621185607526594 + (_25513_s * (0.41485611868374833 + (_25513_s * (-0.3722078760357013 + (_25513_s * (0.31834661990116175 + (_25513_s * (-0.11089469428239668 + (_25513_s * (0.035478304325618236 + (_25513_s * -0.002166375594868791)))))))))));
		jule::F64 _25713_Q = 1LL + (_25513_s * (0.10642088040084423 + (_25513_s * (0.540397917702171 + (_25513_s * (0.07182865441419627 + (_25513_s * (0.12617121980876164 + (_25513_s * (0.01363708391202905 + (_25513_s * 0.011984499846799107)))))))))));
		if (_22913_sign) {
			return static_cast<jule::F64>(-0.8450629115104675 - jule::div(_25613_P,_25713_Q));
		}
		return static_cast<jule::F64>(0.8450629115104675 + jule::div(_25613_P,_25713_Q));
	}
	if (_21716_x >= 6LL) {
		if (_22913_sign) {
			return -1LL;
		}
		return 1LL;
	}
	jule::F64 _2699_s = jule::div(1LL,_21716_x * _21716_x);
	jule::F64 _27013_R = 0LL;
	jule::F64 _27113_S = 0LL;
	if (_21716_x < 2.857142857142857) {
		_27013_R=static_cast<jule::F64>(-0.009864944034847148 + (_2699_s * (-0.6938585727071818 + (_2699_s * (-10.558626225323291 + (_2699_s * (-62.375332450326006 + (_2699_s * (-162.39666946257347 + (_2699_s * (-184.60509290671104 + (_2699_s * (-81.2874355063066 + (_2699_s * -9.814329344169145))))))))))))));
		_27113_S=static_cast<jule::F64>(1LL + (_2699_s * (19.651271667439257 + (_2699_s * (137.65775414351904 + (_2699_s * (434.56587747522923 + (_2699_s * (645.3872717332679 + (_2699_s * (429.00814002756783 + (_2699_s * (108.63500554177944 + (_2699_s * (6.570249770319282 + (_2699_s * -0.0604244152148581))))))))))))))));
	} else {
		_27013_R=static_cast<jule::F64>(-0.0098649429247001 + (_2699_s * (-0.799283237680523 + (_2699_s * (-17.757954917754752 + (_2699_s * (-160.63638485582192 + (_2699_s * (-637.5664433683896 + (_2699_s * (-1025.0951316110772 + (_2699_s * -483.5191916086514))))))))))));
		_27113_S=static_cast<jule::F64>(1LL + (_2699_s * (30.33806074348246 + (_2699_s * (325.7925129965739 + (_2699_s * (1536.729586084437 + (_2699_s * (3199.8582195085955 + (_2699_s * (2553.0504064331644 + (_2699_s * (474.52854120695537 + (_2699_s * -22.44095244658582))))))))))))));
	}
	jule::F64 _2799_z = _119104140_f64_from_bits(static_cast<jule::U64>(_119104140_f64_bits(_21716_x) & 18446744069414584320LLU));
	jule::F64 _2809_r = _1487c7630_exp(static_cast<jule::F64>(((-(_2799_z)) * _2799_z) - 0.5625)) * _1487c7630_exp(static_cast<jule::F64>(((_2799_z - _21716_x) * (_2799_z + _21716_x)) + jule::div(_27013_R,_27113_S)));
	if (_22913_sign) {
		return static_cast<jule::F64>(jule::div(_2809_r,_21716_x) - 1LL);
	}
	return static_cast<jule::F64>(1LL - jule::div(_2809_r,_21716_x));
}



inline jule::F64 _108736510_erfc(jule::F64 _29317_x) {
	
	{
		if (!((_10862f890_is_nan(_29317_x)))) { goto _case_end_4380834288; }
		_case_begin_4380834288:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4380833856;
		_case_end_4380834288:;
		if (!((_10862f890_is_inf(_29317_x,1LL)))) { goto _case_end_4380834416; }
		_case_begin_4380834416:;
		{
			return 0LL;
		}
		goto _match_end_4380833856;
		_case_end_4380834416:;
		if (!((_10862f890_is_inf(_29317_x,-1LL)))) { goto _case_end_4380834528; }
		_case_begin_4380834528:;
		{
			return 2LL;
		}
		goto _match_end_4380833856;
		_case_end_4380834528:;
		_match_end_4380833856:;
	}
	jule::Bool _30413_sign = false;
	if (_29317_x < 0LL) {
		_29317_x=static_cast<jule::F64>((-(_29317_x)));
		_30413_sign=true;
	}
	if (_29317_x < 0.84375) {
		jule::F64 _31017_temp = 0LL;
		if (_29317_x < 0.000000000000000013877787807814457) {
			_31017_temp=_29317_x;
		} else {
			jule::F64 _31417_z = _29317_x * _29317_x;
			jule::F64 _31517_r = 0.12837916709551256 + (_31417_z * (-0.3250421072470015 + (_31417_z * (-0.02848174957559851 + (_31417_z * (-0.005770270296489442 + (_31417_z * -0.000023763016656650163)))))));
			jule::F64 _31617_s = 1LL + (_31417_z * (0.39791722395915535 + (_31417_z * (0.0650222499887673 + (_31417_z * (0.005081306281875766 + (_31417_z * (0.00013249473800432164 + (_31417_z * -0.000003960228278775368)))))))));
			jule::F64 _31717_y = jule::div(_31517_r,_31617_s);
			if (_29317_x < 0.25) {
				_31017_temp=static_cast<jule::F64>(_29317_x + (_29317_x * _31717_y));
			} else {
				_31017_temp=static_cast<jule::F64>(0.5 + ((_29317_x * _31717_y) + (_29317_x - 0.5)));
			}
		}
		if (_30413_sign) {
			return static_cast<jule::F64>(1LL + _31017_temp);
		}
		return static_cast<jule::F64>(1LL - _31017_temp);
	}
	if (_29317_x < 1.25) {
		jule::F64 _33013_s = _29317_x - 1LL;
		jule::F64 _33113_P = -0.0023621185607526594 + (_33013_s * (0.41485611868374833 + (_33013_s * (-0.3722078760357013 + (_33013_s * (0.31834661990116175 + (_33013_s * (-0.11089469428239668 + (_33013_s * (0.035478304325618236 + (_33013_s * -0.002166375594868791)))))))))));
		jule::F64 _33213_Q = 1LL + (_33013_s * (0.10642088040084423 + (_33013_s * (0.540397917702171 + (_33013_s * (0.07182865441419627 + (_33013_s * (0.12617121980876164 + (_33013_s * (0.01363708391202905 + (_33013_s * 0.011984499846799107)))))))))));
		if (_30413_sign) {
			return static_cast<jule::F64>(1.8450629115104675 + jule::div(_33113_P,_33213_Q));
		}
		return static_cast<jule::F64>(0.15493708848953247 - jule::div(_33113_P,_33213_Q));
	}
	if (_29317_x < 28LL) {
		jule::F64 _34013_s = jule::div(1LL,_29317_x * _29317_x);
		jule::F64 _34117_R = 0LL;
		jule::F64 _34217_S = 0LL;
		if (_29317_x < 2.857142857142857) {
			_34117_R=static_cast<jule::F64>(-0.009864944034847148 + (_34013_s * (-0.6938585727071818 + (_34013_s * (-10.558626225323291 + (_34013_s * (-62.375332450326006 + (_34013_s * (-162.39666946257347 + (_34013_s * (-184.60509290671104 + (_34013_s * (-81.2874355063066 + (_34013_s * -9.814329344169145))))))))))))));
			_34217_S=static_cast<jule::F64>(1LL + (_34013_s * (19.651271667439257 + (_34013_s * (137.65775414351904 + (_34013_s * (434.56587747522923 + (_34013_s * (645.3872717332679 + (_34013_s * (429.00814002756783 + (_34013_s * (108.63500554177944 + (_34013_s * (6.570249770319282 + (_34013_s * -0.0604244152148581))))))))))))))));
		} else {
			if (_30413_sign && (_29317_x > 6LL)) {
				return 2LL;
			}
			_34117_R=static_cast<jule::F64>(-0.0098649429247001 + (_34013_s * (-0.799283237680523 + (_34013_s * (-17.757954917754752 + (_34013_s * (-160.63638485582192 + (_34013_s * (-637.5664433683896 + (_34013_s * (-1025.0951316110772 + (_34013_s * -483.5191916086514))))))))))));
			_34217_S=static_cast<jule::F64>(1LL + (_34013_s * (30.33806074348246 + (_34013_s * (325.7925129965739 + (_34013_s * (1536.729586084437 + (_34013_s * (3199.8582195085955 + (_34013_s * (2553.0504064331644 + (_34013_s * (474.52854120695537 + (_34013_s * -22.44095244658582))))))))))))));
		}
		jule::F64 _35313_z = _119104140_f64_from_bits(static_cast<jule::U64>(_119104140_f64_bits(_29317_x) & 18446744069414584320LLU));
		jule::F64 _35413_r = _1487c7630_exp(static_cast<jule::F64>(((-(_35313_z)) * _35313_z) - 0.5625)) * _1487c7630_exp(static_cast<jule::F64>(((_35313_z - _29317_x) * (_35313_z + _29317_x)) + jule::div(_34117_R,_34217_S)));
		if (_30413_sign) {
			return static_cast<jule::F64>(2LL - jule::div(_35413_r,_29317_x));
		}
		return static_cast<jule::F64>(jule::div(_35413_r,_29317_x));
	}
	if (_30413_sign) {
		return 2LL;
	}
	return 0LL;
}



inline jule::F64 _108783040_pow10(jule::Int _6114_n) {
	if ((0LL <= _6114_n) && (_6114_n <= 308LL)) {
		return static_cast<jule::F64>(_108783040_POW10_POSTAB32[static_cast<jule::Int>(jule::div(static_cast<jule::Uint>(_6114_n),32LL))] * _108783040_POW10_TAB[static_cast<jule::Int>(jule::mod(static_cast<jule::Uint>(_6114_n),32LL))]);
	}
	if ((-323LL <= _6114_n) && (_6114_n <= 0LL)) {
		return static_cast<jule::F64>(jule::div(_108783040_POW10_NEGTAB32[static_cast<jule::Int>(jule::div(static_cast<jule::Uint>((-(_6114_n))),32LL))],_108783040_POW10_TAB[static_cast<jule::Int>(jule::mod(static_cast<jule::Uint>((-(_6114_n))),32LL))]));
	}
	if (_6114_n > 0LL) {
		return static_cast<jule::F64>(_10862f890_inf(1LL));
	}
	return 0LL;
}



inline jule::F64 _1487c80f0_sqrt(jule::F64 _12313_x) {
	{
		if (!((_12313_x == 0LL) || (_10862f890_is_nan(_12313_x)) || (_10862f890_is_inf(_12313_x,1LL)))) { goto _case_end_4380899312; }
		_case_begin_4380899312:;
		{
			return _12313_x;
		}
		goto _match_end_4380891456;
		_case_end_4380899312:;
		if (!((_12313_x < 0LL))) { goto _case_end_4380900960; }
		_case_begin_4380900960:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4380891456;
		_case_end_4380900960:;
		_match_end_4380891456:;
	}
	jule::U64 _13113_ix = _119104140_f64_bits(_12313_x);
	jule::Int _13313_exp = static_cast<jule::Int>((_13113_ix >> 52LL) & 2047LL);
	if (_13313_exp == 0LL) {
		_iter_begin_4380901312:;
		if (!((_13113_ix & 4503599627370496LL) == 0LL)) { goto _iter_end_4380901312; }
		{
			_13113_ix<<=1LL;
			(_13313_exp)--;
		}
		_iter_next_4380901312:;
		goto _iter_begin_4380901312;
		_iter_end_4380901312:;
		(_13313_exp)++;
	}
	_13313_exp-=1023LL;
	_13113_ix=static_cast<jule::U64>(_13113_ix & -9218868437227405313LL);
	_13113_ix|=4503599627370496LL;
	if ((_13313_exp & 1LL) == 1LL) {
		_13113_ix<<=1LL;
	}
	_13313_exp>>=1LL;
	_13113_ix<<=1LL;
	jule::U64 _15013_q = 0LLU;
	jule::U64 _15113_s = 0LLU;
	jule::U64 _15213_r = static_cast<jule::U64>(9007199254740992LLU);
	_iter_begin_4380904384:;
	if (!(_15213_r != 0LL)) { goto _iter_end_4380904384; }
	{
		jule::U64 _15413_t = _15113_s + _15213_r;
		if (_15413_t <= _13113_ix) {
			_15113_s=static_cast<jule::U64>(_15413_t + _15213_r);
			_13113_ix-=_15413_t;
			_15013_q+=_15213_r;
		}
		_13113_ix<<=1LL;
		_15213_r>>=1LL;
	}
	_iter_next_4380904384:;
	goto _iter_begin_4380904384;
	_iter_end_4380904384:;
	if (_13113_ix != 0LL) {
		_15013_q+=static_cast<jule::U64>(_15013_q & 1LL);
	}
	_13113_ix=static_cast<jule::U64>((_15013_q >> 1LL) + (static_cast<jule::U64>((_13313_exp - 1LL) + 1023LL) << 52LL));
	return static_cast<jule::F64>(_119104140_f64_from_bits(_13113_ix));
}



inline jule::F64 _1487c9240_logb(jule::F64 _4413_x) {
	{
		if (!((_4413_x == 0LL))) { goto _case_end_4380921312; }
		_case_begin_4380921312:;
		{
			return static_cast<jule::F64>(_10862f890_inf(-1LL));
		}
		goto _match_end_4380921088;
		_case_end_4380921312:;
		if (!((_10862f890_is_inf(_4413_x,0LL)))) { goto _case_end_4380921488; }
		_case_begin_4380921488:;
		{
			return static_cast<jule::F64>(_10862f890_inf(1LL));
		}
		goto _match_end_4380921088;
		_case_end_4380921488:;
		if (!((_10862f890_is_nan(_4413_x)))) { goto _case_end_4380921600; }
		_case_begin_4380921600:;
		{
			return _4413_x;
		}
		goto _match_end_4380921088;
		_case_end_4380921600:;
		_match_end_4380921088:;
	}
	return static_cast<jule::F64>(_1487c9240__ilogb(_4413_x));
}



inline jule::Int _1487c9240_ilogb(jule::F64 _6314_x) {
	{
		if (!((_6314_x == 0LL))) { goto _case_end_4380926176; }
		_case_begin_4380926176:;
		{
			return -2147483648LL;
		}
		goto _match_end_4380925952;
		_case_end_4380926176:;
		if (!((_10862f890_is_nan(_6314_x)))) { goto _case_end_4380926304; }
		_case_begin_4380926304:;
		{
			return 2147483647LL;
		}
		goto _match_end_4380925952;
		_case_end_4380926304:;
		if (!((_10862f890_is_inf(_6314_x,0LL)))) { goto _case_end_4380926432; }
		_case_begin_4380926432:;
		{
			return 2147483647LL;
		}
		goto _match_end_4380925952;
		_case_end_4380926432:;
		_match_end_4380925952:;
	}
	return static_cast<jule::Int>(_1487c9240__ilogb(_6314_x));
}



inline jule::Int _1487c9240__ilogb(jule::F64 _7715_x) {
	jule::Int _7813_exp = 0LL;
	std::tie(_7715_x,_7813_exp) = _10862f890_normalize(_7715_x);
	return static_cast<jule::Int>((static_cast<jule::Int>((_119104140_f64_bits(_7715_x) >> 52LL) & 2047LL) - 1023LL) + _7813_exp);
}



inline jule::F64 _1487c8260_jn(jule::Int _8415_n,jule::F64 _8427_x) {
	
	
	{
		if (!((_10862f890_is_nan(_8427_x)))) { goto _case_end_4379809920; }
		_case_begin_4379809920:;
		{
			return _8427_x;
		}
		goto _match_end_4379809744;
		_case_end_4379809920:;
		if (!((_10862f890_is_inf(_8427_x,0LL)))) { goto _case_end_4379810048; }
		_case_begin_4379810048:;
		{
			return 0LL;
		}
		goto _match_end_4379809744;
		_case_end_4379810048:;
		_match_end_4379809744:;
	}
	if (_8415_n == 0LL) {
		return static_cast<jule::F64>(_138643e40_j0(_8427_x));
	}
	if (_8427_x == 0LL) {
		return 0LL;
	}
	if (_8415_n < 0LL) {
		std::tie(_8415_n,_8427_x) = std::make_tuple(static_cast<jule::Int>((-(_8415_n))),static_cast<jule::F64>((-(_8427_x))));
	}
	if (_8415_n == 1LL) {
		return static_cast<jule::F64>(_1086b1ee0_j1(_8427_x));
	}
	jule::Bool _10913_sign = false;
	if (_8427_x < 0LL) {
		_8427_x=static_cast<jule::F64>((-(_8427_x)));
		if ((_8415_n & 1LL) == 1LL) {
			_10913_sign=true;
		}
	}
	jule::F64 _11613_b = 0LL;
	if (static_cast<jule::F64>(_8415_n) <= _8427_x) {
		if (_8427_x >= 5967269506265907200LL) {
			jule::F64 _13321_temp = 0LL;
			jule::F64 _13418_s;
			jule::F64 _13421_c;
			std::tie(_13418_s,_13421_c) = _108647e80_sincos(_8427_x);
			{
				auto _match_expr{ _8415_n & 3LL };
				if (!((0LL) == _match_expr)) { goto _case_end_4379825728; }
				_case_begin_4379825728:;
				{
					_13321_temp=static_cast<jule::F64>(_13421_c + _13418_s);
				}
				goto _match_end_4379823488;
				_case_end_4379825728:;
				if (!((1LL) == _match_expr)) { goto _case_end_4379825888; }
				_case_begin_4379825888:;
				{
					_13321_temp=static_cast<jule::F64>((-(_13421_c)) + _13418_s);
				}
				goto _match_end_4379823488;
				_case_end_4379825888:;
				if (!((2LL) == _match_expr)) { goto _case_end_4379826000; }
				_case_begin_4379826000:;
				{
					_13321_temp=static_cast<jule::F64>((-(_13421_c)) - _13418_s);
				}
				goto _match_end_4379823488;
				_case_end_4379826000:;
				if (!((3LL) == _match_expr)) { goto _case_end_4379826112; }
				_case_begin_4379826112:;
				{
					_13321_temp=static_cast<jule::F64>(_13421_c - _13418_s);
				}
				goto _match_end_4379823488;
				_case_end_4379826112:;
				_match_end_4379823488:;
			}
			_11613_b=static_cast<jule::F64>(jule::div(0.5641895835477563 * _13321_temp,_1487c80f0_sqrt(_8427_x)));
		} else {
			_11613_b=static_cast<jule::F64>(_1086b1ee0_j1(_8427_x));
			jule::Int _14422_i = 1LL;
			jule::F64 _14429_a = _138643e40_j0(_8427_x);
			std::tie(_14422_i,_14429_a) = std::make_tuple(1LL,_138643e40_j0(_8427_x));
			_iter_begin_4379832464:;
			if (!(_14422_i < _8415_n)) { goto _iter_end_4379832464; }
			{
				std::tie(_14429_a,_11613_b) = std::make_tuple(_11613_b,static_cast<jule::F64>((_11613_b * jule::div(static_cast<jule::F64>(_14422_i + _14422_i),_8427_x)) - _14429_a));
			}
			_iter_next_4379832464:;
			(_14422_i)++;
			goto _iter_begin_4379832464;
			_iter_end_4379832464:;
		}
	} else {
		if (_8427_x < 0.000000001862645149230957) {
			if (_8415_n > 33LL) {
				_11613_b=0LL;
			} else {
				jule::F64 _15721_temp = _8427_x * 0.5;
				_11613_b=_15721_temp;
				jule::F64 _15925_a = 1LL;
				jule::Int _16025_i = 2LL;
				_iter_begin_4379839920:;
				if (!(_16025_i <= _8415_n)) { goto _iter_end_4379839920; }
				{
					_15925_a*=static_cast<jule::F64>(_16025_i);
					_11613_b*=_15721_temp;
				}
				_iter_next_4379839920:;
				(_16025_i)++;
				goto _iter_begin_4379839920;
				_iter_end_4379839920:;
				_11613_b/=_15925_a;
			}
		} else {
			jule::F64 _19717_w = jule::div(static_cast<jule::F64>(_8415_n + _8415_n),_8427_x);
			jule::F64 _19817_h = jule::div(2LL,_8427_x);
			jule::F64 _19921_q0 = _19717_w;
			jule::F64 _20021_z = _19717_w + _19817_h;
			jule::F64 _20121_q1 = (_19717_w * _20021_z) - 1LL;
			jule::Int _20221_k = 1LL;
			_iter_begin_4379848512:;
			if (!(_20121_q1 < 1000000000LL)) { goto _iter_end_4379848512; }
			{
				(_20221_k)++;
				_20021_z+=_19817_h;
				std::tie(_19921_q0,_20121_q1) = std::make_tuple(_20121_q1,static_cast<jule::F64>((_20021_z * _20121_q1) - _19921_q0));
			}
			_iter_next_4379848512:;
			goto _iter_begin_4379848512;
			_iter_end_4379848512:;
			jule::Int _20817_m = _8415_n + _8415_n;
			jule::F64 _20921_t = 0LL;
			jule::Int _21021_i = 2LL * (_8415_n + _20221_k);
			_iter_begin_4379853472:;
			if (!(_21021_i >= _20817_m)) { goto _iter_end_4379853472; }
			{
				_20921_t=static_cast<jule::F64>(jule::div(1LL,jule::div(static_cast<jule::F64>(_21021_i),_8427_x) - _20921_t));
			}
			_iter_next_4379853472:;
			_21021_i-=2LL;
			goto _iter_begin_4379853472;
			_iter_end_4379853472:;
			jule::F64 _21421_a = _20921_t;
			_11613_b=1LL;
			jule::F64 _22421_tmp = static_cast<jule::F64>(_8415_n);
			jule::F64 _22517_v = jule::div(2LL,_8427_x);
			_22421_tmp=static_cast<jule::F64>(_22421_tmp * _108658370_log(static_cast<jule::F64>(_1086895c0_abs(static_cast<jule::F64>(_22517_v * _22421_tmp)))));
			if (_22421_tmp < 709.782712893384) {
				jule::Int _22825_i = _8415_n - 1LL;
				_iter_begin_4379852880:;
				if (!(_22825_i > 0LL)) { goto _iter_end_4379852880; }
				{
					jule::F64 _23025_di = static_cast<jule::F64>(_22825_i + _22825_i);
					std::tie(_21421_a,_11613_b) = std::make_tuple(_11613_b,static_cast<jule::F64>(jule::div(_11613_b * _23025_di,_8427_x) - _21421_a));
				}
				_iter_next_4379852880:;
				(_22825_i)--;
				goto _iter_begin_4379852880;
				_iter_end_4379852880:;
			} else {
				jule::Int _23425_i = _8415_n - 1LL;
				_iter_begin_4379865904:;
				if (!(_23425_i > 0LL)) { goto _iter_end_4379865904; }
				{
					jule::F64 _23625_di = static_cast<jule::F64>(_23425_i + _23425_i);
					std::tie(_21421_a,_11613_b) = std::make_tuple(_11613_b,static_cast<jule::F64>(jule::div(_11613_b * _23625_di,_8427_x) - _21421_a));
					if (_11613_b > 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) {
						_21421_a/=_11613_b;
						_20921_t/=_11613_b;
						_11613_b=1LL;
					}
				}
				_iter_next_4379865904:;
				(_23425_i)--;
				goto _iter_begin_4379865904;
				_iter_end_4379865904:;
			}
			_11613_b=static_cast<jule::F64>(jule::div(_20921_t * _138643e40_j0(_8427_x),_11613_b));
		}
	}
	if (_10913_sign) {
		return static_cast<jule::F64>((-(_11613_b)));
	}
	return _11613_b;
}



inline jule::F64 _1487c8260_yn(jule::Int _26315_n,jule::F64 _26323_x) {
	
	{
		if (!((_26323_x < 0LL) || (_10862f890_is_nan(_26323_x)))) { goto _case_end_4379874848; }
		_case_begin_4379874848:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4379874608;
		_case_end_4379874848:;
		if (!((_10862f890_is_inf(_26323_x,1LL)))) { goto _case_end_4379874960; }
		_case_begin_4379874960:;
		{
			return 0LL;
		}
		goto _match_end_4379874608;
		_case_end_4379874960:;
		_match_end_4379874608:;
	}
	if (_26315_n == 0LL) {
		return static_cast<jule::F64>(_138643e40_y0(_26323_x));
	}
	if (_26323_x == 0LL) {
		if ((_26315_n < 0LL) && ((_26315_n & 1LL) == 1LL)) {
			return static_cast<jule::F64>(_10862f890_inf(1LL));
		}
		return static_cast<jule::F64>(_10862f890_inf(-1LL));
	}
	jule::Bool _28213_sign = false;
	if (_26315_n < 0LL) {
		_26315_n=static_cast<jule::Int>((-(_26315_n)));
		if ((_26315_n & 1LL) == 1LL) {
			_28213_sign=true;
		}
	}
	if (_26315_n == 1LL) {
		if (_28213_sign) {
			return static_cast<jule::F64>((-(_1086b1ee0_y1(_26323_x))));
		}
		return static_cast<jule::F64>(_1086b1ee0_y1(_26323_x));
	}
	jule::F64 _29513_b = 0LL;
	if (_26323_x >= 5967269506265907200LL) {
		jule::F64 _31017_temp = 0LL;
		jule::F64 _31114_s;
		jule::F64 _31117_c;
		std::tie(_31114_s,_31117_c) = _108647e80_sincos(_26323_x);
		{
			auto _match_expr{ _26315_n & 3LL };
			if (!((0LL) == _match_expr)) { goto _case_end_4379891536; }
			_case_begin_4379891536:;
			{
				_31017_temp=static_cast<jule::F64>(_31114_s - _31117_c);
			}
			goto _match_end_4379889296;
			_case_end_4379891536:;
			if (!((1LL) == _match_expr)) { goto _case_end_4379891696; }
			_case_begin_4379891696:;
			{
				_31017_temp=static_cast<jule::F64>((-(_31114_s)) - _31117_c);
			}
			goto _match_end_4379889296;
			_case_end_4379891696:;
			if (!((2LL) == _match_expr)) { goto _case_end_4379891808; }
			_case_begin_4379891808:;
			{
				_31017_temp=static_cast<jule::F64>((-(_31114_s)) + _31117_c);
			}
			goto _match_end_4379889296;
			_case_end_4379891808:;
			if (!((3LL) == _match_expr)) { goto _case_end_4379891920; }
			_case_begin_4379891920:;
			{
				_31017_temp=static_cast<jule::F64>(_31114_s + _31117_c);
			}
			goto _match_end_4379889296;
			_case_end_4379891920:;
			_match_end_4379889296:;
		}
		_29513_b=static_cast<jule::F64>(jule::div(0.5641895835477563 * _31017_temp,_1487c80f0_sqrt(_26323_x)));
	} else {
		jule::F64 _32017_a = _138643e40_y0(_26323_x);
		_29513_b=static_cast<jule::F64>(_1086b1ee0_y1(_26323_x));
		jule::Int _32317_i = 1LL;
		_iter_begin_4379898912:;
		if (!((_32317_i < _26315_n) && (!(_10862f890_is_inf(_29513_b,-1LL))))) { goto _iter_end_4379898912; }
		{
			std::tie(_32017_a,_29513_b) = std::make_tuple(_29513_b,static_cast<jule::F64>((jule::div(static_cast<jule::F64>(_32317_i + _32317_i),_26323_x) * _29513_b) - _32017_a));
		}
		_iter_next_4379898912:;
		(_32317_i)++;
		goto _iter_begin_4379898912;
		_iter_end_4379898912:;
	}
	if (_28213_sign) {
		return static_cast<jule::F64>((-(_29513_b)));
	}
	return _29513_b;
}



inline jule::F64 _108930a10_remainder(jule::F64 _6822_x,jule::F64 _6834_y) {
	
	
	{
		if (!((_10862f890_is_nan(_6822_x)) || (_10862f890_is_nan(_6834_y)) || (_10862f890_is_inf(_6822_x,0LL)) || (_6834_y == 0LL))) { goto _case_end_4382019680; }
		_case_begin_4382019680:;
		{
			return static_cast<jule::F64>(_10862f890_nan());
		}
		goto _match_end_4382019504;
		_case_end_4382019680:;
		if (!((_10862f890_is_inf(_6834_y,0LL)))) { goto _case_end_4382019792; }
		_case_begin_4382019792:;
		{
			return _6822_x;
		}
		goto _match_end_4382019504;
		_case_end_4382019792:;
		_match_end_4382019504:;
	}
	jule::Bool _7913_sign = false;
	if (_6822_x < 0LL) {
		_6822_x=static_cast<jule::F64>((-(_6822_x)));
		_7913_sign=true;
	}
	if (_6834_y < 0LL) {
		_6834_y=static_cast<jule::F64>((-(_6834_y)));
	}
	if (_6822_x == _6834_y) {
		if (_7913_sign) {
			jule::F64 _8917_zero = 0LL;
			return static_cast<jule::F64>((-(_8917_zero)));
		}
		return 0LL;
	}
	if (_6834_y <= 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) {
		_6822_x=static_cast<jule::F64>(_1191228f0_mod(_6822_x,static_cast<jule::F64>(_6834_y + _6834_y)));
	}
	if (_6834_y < 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403) {
		if ((_6822_x + _6822_x) > _6834_y) {
			_6822_x-=_6834_y;
			if ((_6822_x + _6822_x) >= _6834_y) {
				_6822_x-=_6834_y;
			}
		}
	} else {
		jule::F64 _10513_y_half = 0.5 * _6834_y;
		if (_6822_x > _10513_y_half) {
			_6822_x-=_6834_y;
			if (_6822_x >= _10513_y_half) {
				_6822_x-=_6834_y;
			}
		}
	}
	if (_7913_sign) {
		_6822_x=static_cast<jule::F64>((-(_6822_x)));
	}
	return _6822_x;
}



inline jule::F64 _108950f30_xatan(jule::F64 _8610_x) {
	
	
	
	
	
	
	
	
	
	
	jule::F64 _9813_z = _8610_x * _8610_x;
	_9813_z=static_cast<jule::F64>(jule::div(_9813_z * ((((((((-0.8750608600031904 * _9813_z) + -16.157537187333652) * _9813_z) + -75.00855792314705) * _9813_z) + -122.88666844901361) * _9813_z) + -64.85021904942025),((((((((_9813_z + 24.858464901423062) * _9813_z) + 165.02700983169885) * _9813_z) + 432.88106049129027) * _9813_z) + 485.3903996359137) * _9813_z) + 194.5506571482614));
	_9813_z=static_cast<jule::F64>((_8610_x * _9813_z) + _8610_x);
	return _9813_z;
}



inline jule::F64 _108950f30_satan(jule::F64 _10610_x) {
	
	
	if (_10610_x <= 0.66) {
		return static_cast<jule::F64>(_108950f30_xatan(_10610_x));
	}
	if (_10610_x > 2.414213562373095) {
		return static_cast<jule::F64>((1.5707963267948966 - _108950f30_xatan(static_cast<jule::F64>(jule::div(1LL,_10610_x)))) + 0.00000000000000006123233995736766);
	}
	return static_cast<jule::F64>((0.7853981633974483 + _108950f30_xatan(static_cast<jule::F64>(jule::div(_10610_x - 1LL,_10610_x + 1LL)))) + 0.00000000000000003061616997868383);
}



inline jule::F64 _108950f30_atan(jule::F64 _12413_x) {
	if (_12413_x == 0LL) {
		return _12413_x;
	}
	if (_12413_x > 0LL) {
		return static_cast<jule::F64>(_108950f30_satan(_12413_x));
	}
	return static_cast<jule::F64>((-(_108950f30_satan(static_cast<jule::F64>((-(_12413_x)))))));
}



inline jule::F64 _1191995a0_asin(jule::F64 _5017_x) {
	if (_5017_x == 0LL) {
		return _5017_x;
	}
	jule::Bool _5413_sign = false;
	if (_5017_x < 0LL) {
		_5017_x=static_cast<jule::F64>((-(_5017_x)));
		_5413_sign=true;
	}
	if (_5017_x > 1LL) {
		return static_cast<jule::F64>(_10862f890_nan());
	}
	jule::F64 _6313_temp = _1487c80f0_sqrt(static_cast<jule::F64>(1LL - (_5017_x * _5017_x)));
	if (_5017_x > 0.7) {
		_6313_temp=static_cast<jule::F64>(1.5707963267948966 - _108950f30_satan(static_cast<jule::F64>(jule::div(_6313_temp,_5017_x))));
	} else {
		_6313_temp=static_cast<jule::F64>(_108950f30_satan(static_cast<jule::F64>(jule::div(_5017_x,_6313_temp))));
	}
	if (_5413_sign) {
		_6313_temp=static_cast<jule::F64>((-(_6313_temp)));
	}
	return _6313_temp;
}



inline jule::F64 _1191995a0_acos(jule::F64 _8013_x) {
	return static_cast<jule::F64>(1.5707963267948966 - _1191995a0_asin(_8013_x));
}



inline jule::F64 _119199b00_asinh(jule::F64 _7018_x) {
	
	
	
	if (_10862f890_is_nan(_7018_x) || _10862f890_is_inf(_7018_x,0LL)) {
		return _7018_x;
	}
	jule::Bool _7913_sign = false;
	if (_7018_x < 0LL) {
		_7018_x=static_cast<jule::F64>((-(_7018_x)));
		_7913_sign=true;
	}
	jule::F64 _8413_temp = 0LL;
	{
		if (!((_7018_x > 268435456LL))) { goto _case_end_4382083904; }
		_case_begin_4382083904:;
		{
			_8413_temp=static_cast<jule::F64>(_108658370_log(_7018_x) + 0.6931471805599453);
		}
		goto _match_end_4382082272;
		_case_end_4382083904:;
		if (!((_7018_x > 2LL))) { goto _case_end_4382085376; }
		_case_begin_4382085376:;
		{
			_8413_temp=static_cast<jule::F64>(_108658370_log(static_cast<jule::F64>((2LL * _7018_x) + jule::div(1LL,_1487c80f0_sqrt(static_cast<jule::F64>((_7018_x * _7018_x) + 1LL)) + _7018_x))));
		}
		goto _match_end_4382082272;
		_case_end_4382085376:;
		if (!((_7018_x < 0.000000003725290298461914))) { goto _case_end_4382085904; }
		_case_begin_4382085904:;
		{
			_8413_temp=_7018_x;
		}
		goto _match_end_4382082272;
		_case_end_4382085904:;
		_case_begin_4382077280:;
		{
			_8413_temp=static_cast<jule::F64>(_1487ee500_log1p(static_cast<jule::F64>(_7018_x + jule::div(_7018_x * _7018_x,1LL + _1487c80f0_sqrt(static_cast<jule::F64>(1LL + (_7018_x * _7018_x)))))));
		}
		goto _match_end_4382082272;
		_case_end_4382077280:;
		_match_end_4382082272:;
	}
	if (_7913_sign) {
		_8413_temp=static_cast<jule::F64>((-(_8413_temp)));
	}
	return _8413_temp;
}



inline std::tuple<jule::Bool,jule::Int> _11863f260_conv_bool(jule::Str _4118_s) {
	{
		auto _match_expr{ _4118_s };
		if (!((jule::Str("1", 1)) == _match_expr || (jule::Str("t", 1)) == _match_expr || (jule::Str("T", 1)) == _match_expr || (jule::Str("true", 4)) == _match_expr || (jule::Str("TRUE", 4)) == _match_expr || (jule::Str("True", 4)) == _match_expr)) { goto _case_end_4382590192; }
		_case_begin_4382590192:;
		{
			return std::make_tuple(true,0LLU);
		}
		goto _match_end_4382589856;
		_case_end_4382590192:;
		if (!((jule::Str("0", 1)) == _match_expr || (jule::Str("f", 1)) == _match_expr || (jule::Str("F", 1)) == _match_expr || (jule::Str("false", 5)) == _match_expr || (jule::Str("FALSE", 5)) == _match_expr || (jule::Str("False", 5)) == _match_expr)) { goto _case_end_4382590448; }
		_case_begin_4382590448:;
		{
			return std::make_tuple(false,0LLU);
		}
		goto _match_end_4382589856;
		_case_end_4382590448:;
		_match_end_4382589856:;
	}
	return std::make_tuple(false,2LLU);
}



inline jule::Str _11863f260_fmt_bool(jule::Bool _5217_b) {
	if (_5217_b) {
		return jule::Str("true", 4);
	}
	return jule::Str("false", 5);
}



inline jule::Str _11863fd30_fmt_float(jule::F64 _7818_f,jule::U8 _7826_fmt,jule::Int _7837_prec,jule::Int _7848_bit_size) {
	return static_cast<jule::Str>(_11863fd30_generic_ftoa(nullptr,_7818_f,_7826_fmt,_7837_prec,_7848_bit_size));
}



inline jule::Slice<jule::U8> _11863fd30_generic_ftoa(jule::Slice<jule::U8> _8221_dst,jule::F64 _8234_val,jule::U8 _8244_fmt,jule::Int _8259_prec,jule::Int _8270_bit_size) {
	jule::U64 _8313_bits = 0LLU;
	_11863fd30_FloatInfo* _8413_flt = nullptr;
	{
		auto _match_expr{ _8270_bit_size };
		if (!((32LL) == _match_expr)) { goto _case_end_4382607456; }
		_case_begin_4382607456:;
		{
			_8313_bits=static_cast<jule::U64>(_119104140_f32_bits(static_cast<jule::F32>(_8234_val)));
			_8413_flt=(&(_11863fd30_F32_INFO));
		}
		goto _match_end_4382606320;
		_case_end_4382607456:;
		if (!((64LL) == _match_expr)) { goto _case_end_4382607648; }
		_case_begin_4382607648:;
		{
			_8313_bits=static_cast<jule::U64>(_119104140_f64_bits(_8234_val));
			_8413_flt=(&(_11863fd30_F64_INFO));
		}
		goto _match_end_4382606320;
		_case_end_4382607648:;
		_case_begin_4382606544:;
		{
			jule::panic(jule::Str("std::conv: illegal bit_size", 27));
		}
		goto _match_end_4382606320;
		_case_end_4382606544:;
		_match_end_4382606320:;
	}
	jule::Bool _969_neg = (_8313_bits >> (_8413_flt->_field_expbits + _8413_flt->_field_mantbits)) != 0LL;
	jule::Int _9713_exp = static_cast<jule::Int>(_8313_bits >> _8413_flt->_field_mantbits) & ((1LL << _8413_flt->_field_expbits) - 1LL);
	jule::U64 _9813_mant = _8313_bits & ((static_cast<jule::U64>(1LLU) << _8413_flt->_field_mantbits) - 1LL);
	{
		auto _match_expr{ _9713_exp };
		if (!(((1LL << _8413_flt->_field_expbits) - 1LL) == _match_expr)) { goto _case_end_4382618048; }
		_case_begin_4382618048:;
		{
			jule::Str _10317_s = jule::Str("", 0);
			{
				if (!((_9813_mant != 0LL))) { goto _case_end_4382622928; }
				_case_begin_4382622928:;
				{
					_10317_s=jule::Str("nan", 3);
				}
				goto _match_end_4382621952;
				_case_end_4382622928:;
				if (!((_969_neg))) { goto _case_end_4382623936; }
				_case_begin_4382623936:;
				{
					_10317_s=jule::Str("-inf", 4);
				}
				goto _match_end_4382621952;
				_case_end_4382623936:;
				_case_begin_4382622112:;
				{
					_10317_s=jule::Str("+inf", 4);
				}
				goto _match_end_4382621952;
				_case_end_4382622112:;
				_match_end_4382621952:;
			}
			return jule::append(_8221_dst,static_cast<jule::Slice<jule::U8>>(_10317_s));
		}
		goto _match_end_4382611856;
		_case_end_4382618048:;
		if (!((0LL) == _match_expr)) { goto _case_end_4382618160; }
		_case_begin_4382618160:;
		{
			(_9713_exp)++;
		}
		goto _match_end_4382611856;
		_case_end_4382618160:;
		_case_begin_4382617088:;
		{
			_9813_mant|=static_cast<jule::Uint>(static_cast<jule::U64>(1LLU) << _8413_flt->_field_mantbits);
		}
		goto _match_end_4382611856;
		_case_end_4382617088:;
		_match_end_4382611856:;
	}
	_9713_exp+=_8413_flt->_field_bias;
	if (_8244_fmt == 'b') {
		return _11863fd30_fmt_b(_8221_dst,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if ((_8244_fmt == 'x') || (_8244_fmt == 'X')) {
		return _11863fd30_fmt_x(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if (false) {
		return _11863fd30_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	_11863fd30_DecimalSlice _13413_digs = _11863fd30_DecimalSlice();
	jule::Bool _13513_ok = false;
	jule::Bool _1379_shortest = _8259_prec < 0LL;
	if (_1379_shortest) {
		jule::Array<jule::U8,32> _14013_buf = jule::Array<jule::U8,32>({});
		_13413_digs._field_d=_14013_buf.slice(0LL);
		_11864d0f0_ryu_ftoa_shortest(_13413_digs,_9813_mant,static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>(_8413_flt->_field_mantbits))),(*(_8413_flt)));
		_13513_ok=true;
		{
			auto _match_expr{ _8244_fmt };
			if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4376901920; }
			_case_begin_4376901920:;
			{
				_8259_prec=static_cast<jule::Int>(_11863fd30_max(static_cast<jule::Int>(_13413_digs._field_nd - 1LL),0LL));
			}
			goto _match_end_4377153920;
			_case_end_4376901920:;
			if (!(('f') == _match_expr)) { goto _case_end_4376937280; }
			_case_begin_4376937280:;
			{
				_8259_prec=static_cast<jule::Int>(_11863fd30_max(static_cast<jule::Int>(_13413_digs._field_nd - _13413_digs._field_dp),0LL));
			}
			goto _match_end_4377153920;
			_case_end_4376937280:;
			if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4377427328; }
			_case_begin_4377427328:;
			{
				_8259_prec=_13413_digs._field_nd;
			}
			goto _match_end_4377153920;
			_case_end_4377427328:;
			_match_end_4377153920:;
		}
	} else if (_8244_fmt != 'f') {
		jule::Int _15517_digits = _8259_prec;
		{
			auto _match_expr{ _8244_fmt };
			if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4377446496; }
			_case_begin_4377446496:;
			{
				(_15517_digits)++;
			}
			goto _match_end_4377241040;
			_case_end_4377446496:;
			if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4377526112; }
			_case_begin_4377526112:;
			{
				if (_8259_prec == 0LL) {
					_8259_prec=1LL;
				}
				_15517_digits=_8259_prec;
			}
			goto _match_end_4377241040;
			_case_end_4377526112:;
			_case_begin_4377529424:;
			{
				_15517_digits=1LL;
			}
			goto _match_end_4377241040;
			_case_end_4377529424:;
			_match_end_4377241040:;
		}
		jule::Array<jule::U8,24> _16813_buf = jule::Array<jule::U8,24>({});
		if ((_8270_bit_size == 32LL) && (_15517_digits <= 9LL)) {
			_13413_digs._field_d=_16813_buf.slice(0LL);
			_11864d0f0_ryu_ftoa_fixed32(_13413_digs,static_cast<jule::U32>(_9813_mant),static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>(_8413_flt->_field_mantbits))),_15517_digits);
			_13513_ok=true;
		} else if (_15517_digits <= 18LL) {
			_13413_digs._field_d=_16813_buf.slice(0LL);
			_11864d0f0_ryu_ftoa_fixed64(_13413_digs,_9813_mant,static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>(_8413_flt->_field_mantbits))),_15517_digits);
			_13513_ok=true;
		}
	}
	if ((!(_13513_ok))) {
		return _11863fd30_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	return _11863fd30_fmt_digits(_8221_dst,_1379_shortest,_969_neg,_13413_digs,_8259_prec,_8244_fmt);
}



inline jule::Slice<jule::U8> _11863fd30_big_ftoa(jule::Slice<jule::U8> _18617_dst,jule::Int _18634_prec,jule::U8 _18645_fmt,jule::Bool _18656_neg,jule::U64 _18713_mant,jule::Int _18724_exp,_11863fd30_FloatInfo& _18735_flt) {
	_14873e050_Decimal _18813_d = _14873e050_Decimal();
	_18813_d._method_assign(_18713_mant);
	_18813_d._method_shift(static_cast<jule::Int>(_18724_exp - static_cast<jule::Int>(_18735_flt._field_mantbits)));
	_11863fd30_DecimalSlice _19113_digs = _11863fd30_DecimalSlice();
	jule::Bool _1929_shortest = _18634_prec < 0LL;
	if (_1929_shortest) {
		_11863fd30_round_shortest(_18813_d,_18713_mant,_18724_exp,_18735_flt);
		_19113_digs=_11863fd30_DecimalSlice(_18813_d._field_d.slice(0LL),_18813_d._field_nd,_18813_d._field_dp,jule::Bool());
		{
			auto _match_expr{ _18645_fmt };
			if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4377530752; }
			_case_begin_4377530752:;
			{
				_18634_prec=static_cast<jule::Int>(_19113_digs._field_nd - 1LL);
			}
			goto _match_end_4376886384;
			_case_end_4377530752:;
			if (!(('f') == _match_expr)) { goto _case_end_4376888192; }
			_case_begin_4376888192:;
			{
				_18634_prec=static_cast<jule::Int>(_11863fd30_max(static_cast<jule::Int>(_19113_digs._field_nd - _19113_digs._field_dp),0LL));
			}
			goto _match_end_4376886384;
			_case_end_4376888192:;
			if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4376888304; }
			_case_begin_4376888304:;
			{
				_18634_prec=_19113_digs._field_nd;
			}
			goto _match_end_4376886384;
			_case_end_4376888304:;
			_match_end_4376886384:;
		}
	} else {
		{
			auto _match_expr{ _18645_fmt };
			if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4377530592; }
			_case_begin_4377530592:;
			{
				_18813_d._method_round(static_cast<jule::Int>(_18634_prec + 1LL));
			}
			goto _match_end_4376889744;
			_case_end_4377530592:;
			if (!(('f') == _match_expr)) { goto _case_end_4377535040; }
			_case_begin_4377535040:;
			{
				_18813_d._method_round(static_cast<jule::Int>(_18813_d._field_dp + _18634_prec));
			}
			goto _match_end_4376889744;
			_case_end_4377535040:;
			if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4377535152; }
			_case_begin_4377535152:;
			{
				if (_18634_prec == 0LL) {
					_18634_prec=1LL;
				}
				_18813_d._method_round(_18634_prec);
			}
			goto _match_end_4376889744;
			_case_end_4377535152:;
			_match_end_4376889744:;
		}
		_19113_digs=_11863fd30_DecimalSlice(_18813_d._field_d.slice(0LL),_18813_d._field_nd,_18813_d._field_dp,jule::Bool());
	}
	return _11863fd30_fmt_digits(_18617_dst,_1929_shortest,_18656_neg,_19113_digs,_18634_prec,_18645_fmt);
}



inline jule::Slice<jule::U8> _11863fd30_fmt_digits(jule::Slice<jule::U8> _22319_dst,jule::Bool _22332_shortest,jule::Bool _22348_neg,_11863fd30_DecimalSlice _22413_digs,jule::Int _22437_prec,jule::U8 _22448_fmt) {
	{
		auto _match_expr{ _22448_fmt };
		if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4377546784; }
		_case_begin_4377546784:;
		{
			return _11863fd30_fmt_e(_22319_dst,_22348_neg,_22413_digs,_22437_prec,_22448_fmt);
		}
		goto _match_end_4377546448;
		_case_end_4377546784:;
		if (!(('f') == _match_expr)) { goto _case_end_4377546912; }
		_case_begin_4377546912:;
		{
			return _11863fd30_fmt_f(_22319_dst,_22348_neg,_22413_digs,_22437_prec);
		}
		goto _match_end_4377546448;
		_case_end_4377546912:;
		if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4377547040; }
		_case_begin_4377547040:;
		{
			jule::Int _23217_eprec = _22437_prec;
			if ((_23217_eprec > _22413_digs._field_nd) && (_22413_digs._field_nd >= _22413_digs._field_dp)) {
				_23217_eprec=_22413_digs._field_nd;
			}
			if (_22332_shortest) {
				_23217_eprec=6LL;
			}
			jule::Int _24213_exp = _22413_digs._field_dp - 1LL;
			if ((_24213_exp < -4LL) || (_24213_exp >= _23217_eprec)) {
				if (_22437_prec > _22413_digs._field_nd) {
					_22437_prec=_22413_digs._field_nd;
				}
				return _11863fd30_fmt_e(_22319_dst,_22348_neg,_22413_digs,static_cast<jule::Int>(_22437_prec - 1LL),static_cast<jule::U8>((_22448_fmt + 'e') - 'g'));
			}
			if (_22437_prec > _22413_digs._field_dp) {
				_22437_prec=_22413_digs._field_nd;
			}
			return _11863fd30_fmt_f(_22319_dst,_22348_neg,_22413_digs,static_cast<jule::Int>(_11863fd30_max(static_cast<jule::Int>(_22437_prec - _22413_digs._field_dp),0LL)));
		}
		goto _match_end_4377546448;
		_case_end_4377547040:;
		_match_end_4377546448:;
	}
	return jule::append(_22319_dst,jule::Slice<jule::U8>({'%',_22448_fmt}));
}



inline void _11863fd30_round_shortest(_14873e050_Decimal& _26124_d,jule::U64 _26136_mant,jule::Int _26147_exp,_11863fd30_FloatInfo& _26158_flt) {
	if (_26136_mant == 0LL) {
		_26124_d._field_nd=0LL;
		return;
	}
	jule::Int _2829_minexp = _26158_flt._field_bias + 1LL;
	if ((_26147_exp > _2829_minexp) && ((332LL * (_26124_d._field_dp - _26124_d._field_nd)) >= (100LL * (_26147_exp - static_cast<jule::Int>(_26158_flt._field_mantbits))))) {
		return;
	}
	_14873e050_Decimal _29113_upper = _14873e050_Decimal();
	_29113_upper._method_assign(static_cast<jule::U64>((_26136_mant * 2LL) + 1LL));
	_29113_upper._method_shift(static_cast<jule::Int>((_26147_exp - static_cast<jule::Int>(_26158_flt._field_mantbits)) - 1LL));
	jule::U64 _30113_mantlo = 0LLU;
	jule::Int _30213_explo = 0LL;
	if ((_26136_mant > (1LL << _26158_flt._field_mantbits)) || (_26147_exp == _2829_minexp)) {
		_30113_mantlo=static_cast<jule::U64>(_26136_mant - 1LL);
		_30213_explo=_26147_exp;
	} else {
		_30113_mantlo=static_cast<jule::U64>((_26136_mant * 2LL) - 1LL);
		_30213_explo=static_cast<jule::Int>(_26147_exp - 1LL);
	}
	_14873e050_Decimal _31013_lower = _14873e050_Decimal();
	_31013_lower._method_assign(static_cast<jule::U64>((_30113_mantlo * 2LL) + 1LL));
	_31013_lower._method_shift(static_cast<jule::Int>((_30213_explo - static_cast<jule::Int>(_26158_flt._field_mantbits)) - 1LL));
	jule::Bool _3179_inclusive = jule::mod(_26136_mant,2LL) == 0LL;
	jule::U8 _33013_upperdelta = 0LLU;
	jule::Int _33413_ui = 0LL;
	_iter_begin_4377585168:;
	{
		jule::Int _33913_mi = (_33413_ui - _29113_upper._field_dp) + _26124_d._field_dp;
		if (_33913_mi >= _26124_d._field_nd) {
			goto _iter_end_4377585168;
		}
		jule::Int _34313_li = (_33413_ui - _29113_upper._field_dp) + _31013_lower._field_dp;
		jule::U8 _34417_l = static_cast<jule::U8>(48LLU);
		if ((_34313_li >= 0LL) && (_34313_li < _31013_lower._field_nd)) {
			_34417_l=_31013_lower._field_d[static_cast<jule::Int>(_34313_li)];
		}
		jule::U8 _34817_m = static_cast<jule::U8>(48LLU);
		if (_33913_mi >= 0LL) {
			_34817_m=_26124_d._field_d[static_cast<jule::Int>(_33913_mi)];
		}
		jule::U8 _35217_u = static_cast<jule::U8>(48LLU);
		if (_33413_ui < _29113_upper._field_nd) {
			_35217_u=_29113_upper._field_d[static_cast<jule::Int>(_33413_ui)];
		}
		jule::Bool _36013_okdown = (_34417_l != _34817_m) || (_3179_inclusive && ((_34313_li + 1LL) == _31013_lower._field_nd));
		{
			if (!(((_33013_upperdelta == 0LL) && ((_34817_m + 1LL) < _35217_u)))) { goto _case_end_4377602016; }
			_case_begin_4377602016:;
			{
				_33013_upperdelta=2LL;
			}
			goto _match_end_4377599424;
			_case_end_4377602016:;
			if (!(((_33013_upperdelta == 0LL) && (_34817_m != _35217_u)))) { goto _case_end_4377602128; }
			_case_begin_4377602128:;
			{
				_33013_upperdelta=1LL;
			}
			goto _match_end_4377599424;
			_case_end_4377602128:;
			if (!(((_33013_upperdelta == 1LL) && ((_34817_m != '9') || (_35217_u != '0'))))) { goto _case_end_4377602592; }
			_case_begin_4377602592:;
			{
				_33013_upperdelta=2LL;
			}
			goto _match_end_4377599424;
			_case_end_4377602592:;
			_match_end_4377599424:;
		}
		jule::Bool _38113_okup = (_33013_upperdelta > 0LL) && ((_3179_inclusive || (_33013_upperdelta > 1LL)) || ((_33413_ui + 1LL) < _29113_upper._field_nd));
		{
			if (!((_36013_okdown && _38113_okup))) { goto _case_end_4377608368; }
			_case_begin_4377608368:;
			{
				_26124_d._method_round(static_cast<jule::Int>(_33913_mi + 1LL));
				return;
			}
			goto _match_end_4377607792;
			_case_end_4377608368:;
			if (!((_36013_okdown))) { goto _case_end_4377608480; }
			_case_begin_4377608480:;
			{
				_26124_d._method_round_down(static_cast<jule::Int>(_33913_mi + 1LL));
				return;
			}
			goto _match_end_4377607792;
			_case_end_4377608480:;
			if (!((_38113_okup))) { goto _case_end_4377608896; }
			_case_begin_4377608896:;
			{
				_26124_d._method_round_up(static_cast<jule::Int>(_33913_mi + 1LL));
				return;
			}
			goto _match_end_4377607792;
			_case_end_4377608896:;
			_match_end_4377607792:;
		}
	}
	_iter_next_4377585168:;
	(_33413_ui)++;
	goto _iter_begin_4377585168;
	_iter_end_4377585168:;
}



inline jule::Slice<jule::U8> _11863fd30_fmt_e(jule::Slice<jule::U8> _40014_dst,jule::Bool _40027_neg,_11863fd30_DecimalSlice _40038_d,jule::Int _40055_prec,jule::U8 _40066_fmt) {
	if (_40027_neg) {
		_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({'-'}));
	}
	jule::U8 _40713_ch = '0';
	if (_40038_d._field_nd != 0LL) {
		_40713_ch=_40038_d._field_d[0LL];
	}
	_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({_40713_ch}));
	if (_40055_prec > 0LL) {
		_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({'.'}));
		jule::Int _41617_i = 1LL;
		jule::Int _41713_m = _11863fd30_min(_40038_d._field_nd,static_cast<jule::Int>(_40055_prec + 1LL));
		if (_41617_i < _41713_m) {
			_40014_dst=jule::append(_40014_dst,_40038_d._field_d.slice(static_cast<jule::Int>(_41617_i),static_cast<jule::Int>(_41713_m)));
			_41617_i=_41713_m;
		}
		_iter_begin_4377631056:;
		if (!(_41617_i <= _40055_prec)) { goto _iter_end_4377631056; }
		{
			_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({'0'}));
		}
		_iter_next_4377631056:;
		(_41617_i)++;
		goto _iter_begin_4377631056;
		_iter_end_4377631056:;
	}
	_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({_40066_fmt}));
	jule::Int _42913_exp = _40038_d._field_dp - 1LL;
	if (_40038_d._field_nd == 0LL) {
		_42913_exp=0LL;
	}
	if (_42913_exp < 0LL) {
		_40713_ch='-';
		_42913_exp=static_cast<jule::Int>((-(_42913_exp)));
	} else {
		_40713_ch='+';
	}
	_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({_40713_ch}));
	{
		if (!((_42913_exp < 10LL))) { goto _case_end_4377636304; }
		_case_begin_4377636304:;
		{
			_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({'0',static_cast<jule::U8>(static_cast<jule::U8>(_42913_exp) + '0')}));
		}
		goto _match_end_4377633408;
		_case_end_4377636304:;
		if (!((_42913_exp < 100LL))) { goto _case_end_4377635744; }
		_case_begin_4377635744:;
		{
			_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_42913_exp,10LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(_42913_exp,10LL)) + '0')}));
		}
		goto _match_end_4377633408;
		_case_end_4377635744:;
		_case_begin_4377636192:;
		{
			_40014_dst=jule::append(_40014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_42913_exp,100LL)) + '0'),static_cast<jule::U8>(jule::mod(static_cast<jule::U8>(jule::div(_42913_exp,10LL)),10LL) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(_42913_exp,10LL)) + '0')}));
		}
		goto _match_end_4377633408;
		_case_end_4377636192:;
		_match_end_4377633408:;
	}
	return _40014_dst;
}



inline jule::Slice<jule::U8> _11863fd30_fmt_f(jule::Slice<jule::U8> _45514_dst,jule::Bool _45527_neg,_11863fd30_DecimalSlice _45538_d,jule::Int _45555_prec) {
	if (_45527_neg) {
		_45514_dst=jule::append(_45514_dst,jule::Slice<jule::U8>({'-'}));
	}
	if (_45538_d._field_dp > 0LL) {
		jule::Int _46317_m = _11863fd30_min(_45538_d._field_nd,_45538_d._field_dp);
		_45514_dst=jule::append(_45514_dst,_45538_d._field_d.slice(0LL,static_cast<jule::Int>(_46317_m)));
		_iter_begin_4377648176:;
		if (!(_46317_m < _45538_d._field_dp)) { goto _iter_end_4377648176; }
		{
			_45514_dst=jule::append(_45514_dst,jule::Slice<jule::U8>({'0'}));
		}
		_iter_next_4377648176:;
		(_46317_m)++;
		goto _iter_begin_4377648176;
		_iter_end_4377648176:;
	} else {
		_45514_dst=jule::append(_45514_dst,jule::Slice<jule::U8>({'0'}));
	}
	if (_45555_prec > 0LL) {
		_45514_dst=jule::append(_45514_dst,jule::Slice<jule::U8>({'.'}));
		jule::Int _47417_i = 0LL;
		_iter_begin_4377650384:;
		if (!(_47417_i < _45555_prec)) { goto _iter_end_4377650384; }
		{
			jule::U8 _47621_ch = static_cast<jule::U8>(48LLU);
			jule::Int _47717_j = _45538_d._field_dp + _47417_i;
			if ((0LL <= _47717_j) && (_47717_j < _45538_d._field_nd)) {
				_47621_ch=_45538_d._field_d[static_cast<jule::Int>(_47717_j)];
			}
			_45514_dst=jule::append(_45514_dst,jule::Slice<jule::U8>({_47621_ch}));
		}
		_iter_next_4377650384:;
		(_47417_i)++;
		goto _iter_begin_4377650384;
		_iter_end_4377650384:;
	}
	return _45514_dst;
}



inline jule::Slice<jule::U8> _11863fd30_fmt_b(jule::Slice<jule::U8> _48814_dst,jule::Bool _48827_neg,jule::U64 _48838_mant,jule::Int _48853_exp,_11863fd30_FloatInfo& _48864_flt) {
	if (_48827_neg) {
		_48814_dst=jule::append(_48814_dst,jule::Slice<jule::U8>({'-'}));
	}
	std::tie(_48814_dst,std::ignore) = _1486fb320_fmt_bits(_48814_dst,_48838_mant,10LL,false,true);
	_48814_dst=jule::append(_48814_dst,jule::Slice<jule::U8>({'p'}));
	_48853_exp-=static_cast<jule::Int>(_48864_flt._field_mantbits);
	if (_48853_exp >= 0LL) {
		_48814_dst=jule::append(_48814_dst,jule::Slice<jule::U8>({'+'}));
	}
	std::tie(_48814_dst,std::ignore) = _1486fb320_fmt_bits(_48814_dst,static_cast<jule::U64>(_48853_exp),10LL,_48853_exp < 0LL,true);
	return _48814_dst;
}



inline jule::Slice<jule::U8> _11863fd30_fmt_x(jule::Slice<jule::U8> _51014_dst,jule::Int _51027_prec,jule::U8 _51038_fmt,jule::Bool _51049_neg,jule::U64 _51113_mant,jule::Int _51128_exp,_11863fd30_FloatInfo& _51139_flt) {
	if (_51113_mant == 0LL) {
		_51128_exp=0LL;
	}
	_51113_mant<<=static_cast<jule::Uint>(60LL - _51139_flt._field_mantbits);
	_iter_begin_4377674768:;
	if (!((_51113_mant != 0LL) && ((_51113_mant & 1152921504606846976LL) == 0LL))) { goto _iter_end_4377674768; }
	{
		_51113_mant<<=1LL;
		(_51128_exp)--;
	}
	_iter_next_4377674768:;
	goto _iter_begin_4377674768;
	_iter_end_4377674768:;
	if ((_51027_prec >= 0LL) && (_51027_prec < 15LL)) {
		jule::Uint _52513_shift = static_cast<jule::Uint>(_51027_prec * 4LL);
		jule::U64 _52613_extra = (_51113_mant << _52513_shift) & 1152921504606846976LL;
		_51113_mant>>=static_cast<jule::Uint>(60LL - _52513_shift);
		if ((_52613_extra | (_51113_mant & 1LL)) > 576460752303423488LL) {
			(_51113_mant)++;
		}
		_51113_mant<<=static_cast<jule::Uint>(60LL - _52513_shift);
		if ((_51113_mant & 2305843009213693952LL) != 0LL) {
			_51113_mant>>=1LL;
			(_51128_exp)++;
		}
	}
	jule::Str _53913_hex = jule::Str("0123456789abcdef", 16);
	if (_51038_fmt == 'X') {
		_53913_hex=jule::Str("0123456789ABCDEF", 16);
	}
	if (_51049_neg) {
		_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({'-'}));
	}
	_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({'0',_51038_fmt,static_cast<jule::U8>('0' + static_cast<jule::U8>((_51113_mant >> 60LL) & 1LL))}));
	_51113_mant<<=4LL;
	if ((_51027_prec < 0LL) && (_51113_mant != 0LL)) {
		_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({'.'}));
		_iter_begin_4377690384:;
		if (!(_51113_mant != 0LL)) { goto _iter_end_4377690384; }
		{
			_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({_53913_hex[static_cast<jule::Int>((_51113_mant >> 60LL) & 15LL)]}));
			_51113_mant<<=4LL;
		}
		_iter_next_4377690384:;
		goto _iter_begin_4377690384;
		_iter_end_4377690384:;
	} else if (_51027_prec > 0LL) {
		_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({'.'}));
		jule::Int _56017_i = 0LL;
		_iter_begin_4377693504:;
		if (!(_56017_i < _51027_prec)) { goto _iter_end_4377693504; }
		{
			_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({_53913_hex[static_cast<jule::Int>((_51113_mant >> 60LL) & 15LL)]}));
			_51113_mant<<=4LL;
		}
		_iter_next_4377693504:;
		(_56017_i)++;
		goto _iter_begin_4377693504;
		_iter_end_4377693504:;
	}
	jule::U8 _56813_ch = static_cast<jule::U8>(80LLU);
	if (_51038_fmt == _1186cfb10_lower(_51038_fmt)) {
		_56813_ch='p';
	}
	_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({_56813_ch}));
	if (_51128_exp < 0LL) {
		_56813_ch='-';
		_51128_exp=static_cast<jule::Int>((-(_51128_exp)));
	} else {
		_56813_ch='+';
	}
	_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({_56813_ch}));
	{
		if (!((_51128_exp < 100LL))) { goto _case_end_4377702688; }
		_case_begin_4377702688:;
		{
			_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_51128_exp,10LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(_51128_exp,10LL)) + '0')}));
		}
		goto _match_end_4377699728;
		_case_end_4377702688:;
		if (!((_51128_exp < 1000LL))) { goto _case_end_4377702800; }
		_case_begin_4377702800:;
		{
			_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_51128_exp,100LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(jule::div(_51128_exp,10LL),10LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(_51128_exp,10LL)) + '0')}));
		}
		goto _match_end_4377699728;
		_case_end_4377702800:;
		_case_begin_4377689024:;
		{
			_51014_dst=jule::append(_51014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_51128_exp,1000LL)) + '0'),static_cast<jule::U8>(jule::mod(static_cast<jule::U8>(jule::div(_51128_exp,100LL)),10LL) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(jule::div(_51128_exp,10LL),10LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::mod(_51128_exp,10LL)) + '0')}));
		}
		goto _match_end_4377699728;
		_case_end_4377689024:;
		_match_end_4377699728:;
	}
	return _51014_dst;
}



inline jule::Int _11863fd30_min(jule::Int _5938_a,jule::Int _59316_b) {
	if (_5938_a < _59316_b) {
		return _5938_a;
	}
	return _59316_b;
}



inline jule::Int _11863fd30_max(jule::Int _6008_a,jule::Int _60016_b) {
	if (_6008_a > _60016_b) {
		return _6008_a;
	}
	return _60016_b;
}



inline jule::U8 _1186cfb10_lower(jule::U8 _4910_c) {
	return static_cast<jule::U8>(_4910_c | 32LL);
}



inline std::tuple<jule::U64,jule::Int> _1186cfb10_parse_uint(jule::Str _5423_s,jule::Int _5435_base,jule::Int _5450_bit_size) {
	if (_5423_s == jule::Str("", 0)) {
		return std::make_tuple(0LL,2LLU);
	}
	{
		if (!(((2LL <= _5435_base) && (_5435_base <= 36LL)))) { goto _case_end_4377724736; }
		goto _match_end_4377720832;
		_case_end_4377724736:;
		if (!((_5435_base == 0LL))) { goto _case_end_4377723744; }
		_case_begin_4377723744:;
		{
			_5435_base=10LL;
			if (_5423_s[0LL] == '0') {
				{
					if (!(((_5423_s.len() >= 3LL) && (_1186cfb10_lower(_5423_s[1LL]) == 'b')))) { goto _case_end_4377728512; }
					_case_begin_4377728512:;
					{
						_5435_base=2LL;
						_5423_s=_5423_s.slice(2LL);
					}
					goto _match_end_4377727520;
					_case_end_4377728512:;
					if (!(((_5423_s.len() >= 3LL) && (_1186cfb10_lower(_5423_s[1LL]) == 'o')))) { goto _case_end_4377729456; }
					_case_begin_4377729456:;
					{
						_5435_base=8LL;
						_5423_s=_5423_s.slice(2LL);
					}
					goto _match_end_4377727520;
					_case_end_4377729456:;
					if (!(((_5423_s.len() >= 3LL) && (_1186cfb10_lower(_5423_s[1LL]) == 'x')))) { goto _case_end_4377729664; }
					_case_begin_4377729664:;
					{
						_5435_base=16LL;
						_5423_s=_5423_s.slice(2LL);
					}
					goto _match_end_4377727520;
					_case_end_4377729664:;
					_case_begin_4377727664:;
					{
						_5435_base=8LL;
						_5423_s=_5423_s.slice(1LL);
					}
					goto _match_end_4377727520;
					_case_end_4377727664:;
					_match_end_4377727520:;
				}
			}
		}
		goto _match_end_4377720832;
		_case_end_4377723744:;
		_case_begin_4377720928:;
		{
			return std::make_tuple(0LL,3LLU);
		}
		goto _match_end_4377720832;
		_case_end_4377720928:;
		_match_end_4377720832:;
	}
	if (_5450_bit_size == 0LL) {
		_5450_bit_size=64LL;
	} else if ((_5450_bit_size < 0LL) || (_5450_bit_size > 64LL)) {
		return std::make_tuple(0LL,4LLU);
	}
	jule::U64 _9313_cutoff = 0LLU;
	{
		auto _match_expr{ _5435_base };
		if (!((10LL) == _match_expr)) { goto _case_end_4377738704; }
		_case_begin_4377738704:;
		{
			_9313_cutoff=1844674407370955264LL;
		}
		goto _match_end_4377736992;
		_case_end_4377738704:;
		if (!((16LL) == _match_expr)) { goto _case_end_4377740272; }
		_case_begin_4377740272:;
		{
			_9313_cutoff=1152921504606846976LL;
		}
		goto _match_end_4377736992;
		_case_end_4377740272:;
		_case_begin_4377737920:;
		{
			_9313_cutoff=static_cast<jule::U64>(jule::div(jule::MAX_U64,static_cast<jule::U64>(_5435_base)) + 1LL);
		}
		goto _match_end_4377736992;
		_case_end_4377737920:;
		_match_end_4377736992:;
	}
	jule::U64 _10013_max_val = 0LLU;
	{
		auto _match_expr{ _5450_bit_size };
		if (!((32LL) == _match_expr)) { goto _case_end_4377738464; }
		_case_begin_4377738464:;
		{
			_10013_max_val=4294967295LLU;
		}
		goto _match_end_4377741376;
		_case_end_4377738464:;
		if (!((64LL) == _match_expr)) { goto _case_end_4377742304; }
		_case_begin_4377742304:;
		{
			_10013_max_val=jule::MAX_U64;
		}
		goto _match_end_4377741376;
		_case_end_4377742304:;
		_match_end_4377741376:;
	}
	jule::U64 _11213_n = 0LLU;
	{
		auto __julec_range_expr = _5423_s;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::U8 _1186cfb10_c = *__julec_range_begin;
			_iter_begin_4377745152:;
			{
				jule::U8 _11417_d = 0LLU;
				{
					if (!((('0' <= _1186cfb10_c) && (_1186cfb10_c <= '9')))) { goto _case_end_4377750128; }
					_case_begin_4377750128:;
					{
						_11417_d=static_cast<jule::U8>(_1186cfb10_c - '0');
					}
					goto _match_end_4377747968;
					_case_end_4377750128:;
					if (!((('a' <= _1186cfb10_lower(_1186cfb10_c)) && (_1186cfb10_lower(_1186cfb10_c) <= 'z')))) { goto _case_end_4377749136; }
					_case_begin_4377749136:;
					{
						_11417_d=static_cast<jule::U8>((_1186cfb10_lower(_1186cfb10_c) - 'a') + 10LL);
					}
					goto _match_end_4377747968;
					_case_end_4377749136:;
					_case_begin_4377748160:;
					{
						return std::make_tuple(0LL,2LLU);
					}
					goto _match_end_4377747968;
					_case_end_4377748160:;
					_match_end_4377747968:;
				}
				if (_11417_d >= static_cast<jule::U8>(_5435_base)) {
					return std::make_tuple(0LL,2LLU);
				}
				if (_11213_n >= _9313_cutoff) {
					return std::make_tuple(_10013_max_val,1LLU);
				}
				_11213_n*=static_cast<jule::U64>(_5435_base);
				jule::U64 _13413_n1 = _11213_n + static_cast<jule::U64>(_11417_d);
				if ((_13413_n1 < _11213_n) || (_13413_n1 > _10013_max_val)) {
					return std::make_tuple(_10013_max_val,1LLU);
				}
				_11213_n=_13413_n1;
			}
			_iter_next_4377745152:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1186cfb10_c = *__julec_range_begin; goto _iter_begin_4377745152; }
			_iter_end_4377745152:;
		}
	}
	return std::make_tuple(_11213_n,0LLU);
}



inline std::tuple<jule::I64,jule::Int> _1186cfb10_parse_int(jule::Str _16522_s,jule::Int _16530_base,jule::Int _16545_bit_size) {
	jule::Int _16570_err = 0LLU;
	jule::I64 _16562_i = jule::I64();
	if (_16522_s == jule::Str("", 0)) {
		_16562_i = 0LL;
		_16570_err = 2LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	jule::Bool _17113_neg = false;
	if (_16522_s[0LL] == '+') {
		_16522_s=_16522_s.slice(1LL);
	} else if (_16522_s[0LL] == '-') {
		_17113_neg=true;
		_16522_s=_16522_s.slice(1LL);
	}
	jule::Uint _18013_un = 0LLU;
	std::tie(_18013_un,_16570_err) = _1186cfb10_parse_uint(_16522_s,_16530_base,_16545_bit_size);
	if ((_16570_err != 0LLU) && (_16570_err != 1LLU)) {
		_16562_i = 0LL;
		_16570_err = _16570_err;
		return std::make_tuple(_16562_i,_16570_err);
	}
	if (_16545_bit_size == 0LL) {
		_16545_bit_size=64LL;
	}
	jule::U64 _1909_cutoff = static_cast<jule::U64>(1LL << static_cast<jule::Uint>(_16545_bit_size - 1LL));
	if ((!(_17113_neg)) && (_18013_un >= _1909_cutoff)) {
		_16562_i = static_cast<jule::I64>(_1909_cutoff - 1LL);
		_16570_err = 1LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	if (_17113_neg && (_18013_un > _1909_cutoff)) {
		_16562_i = static_cast<jule::I64>((-(static_cast<jule::I64>(_1909_cutoff))));
		_16570_err = 1LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	jule::I64 _19713_n = static_cast<jule::I64>(_18013_un);
	if (_17113_neg) {
		_19713_n=static_cast<jule::I64>((-(_19713_n)));
	}
	_16562_i = _19713_n;
	_16570_err = 0LLU;
	return std::make_tuple(_16562_i,_16570_err);
}



inline std::tuple<jule::F64,jule::Bool> _1186ed000_eisel_lemire64(jule::U64 _4123_man,jule::Int _4133_exp10,jule::Bool _4145_neg) {
	jule::Bool _4166_ok = jule::Bool();
	jule::F64 _4158_f = jule::F64();
	if (_4123_man == 0LL) {
		if (_4145_neg) {
			_4158_f=static_cast<jule::F64>(_119104140_f64_from_bits(9223372036854775808LLU));
		}
		_4158_f = _4158_f;
		_4166_ok = true;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	if ((_4133_exp10 < -348LL) || (347LL < _4133_exp10)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::Int _579_clz = _1191c3b80_leading_zeros64(_4123_man);
	_4123_man<<=static_cast<jule::Uint>(_579_clz);
	
	jule::U64 _6013_ret_exp2 = static_cast<jule::U64>((((217706LL * _4133_exp10) >> 16LL) + 64LL) + 1023LL) - static_cast<jule::U64>(_579_clz);
	jule::U64 _6314_x_hi;
	jule::U64 _6324_x_lo;
	std::tie(_6314_x_hi,_6324_x_lo) = _1191c3b80_mul64(_4123_man,_1186ed000_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_4133_exp10 - -348LL)][1LL]);
	if (((_6314_x_hi & 511LL) == 511LL) && ((_6324_x_lo + _4123_man) < _4123_man)) {
		jule::U64 _6714_y_hi;
		jule::U64 _6720_y_lo;
		std::tie(_6714_y_hi,_6720_y_lo) = _1191c3b80_mul64(_4123_man,_1186ed000_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_4133_exp10 - -348LL)][0LL]);
		jule::U64 _6818_merged_hi = _6314_x_hi;
		jule::U64 _6829_merged_lo = _6324_x_lo + _6714_y_hi;
		std::tie(_6818_merged_hi,_6829_merged_lo) = std::make_tuple(_6314_x_hi,_6324_x_lo + _6714_y_hi);
		if (_6829_merged_lo < _6324_x_lo) {
			(_6818_merged_hi)++;
		}
		if ((((_6818_merged_hi & 511LL) == 511LL) && ((_6829_merged_lo + 1LL) == 0LL)) && ((_6720_y_lo + _4123_man) < _4123_man)) {
			_4158_f = 0LL;
			_4166_ok = false;
			return std::make_tuple(_4158_f,_4166_ok);
		}
		std::tie(_6314_x_hi,_6324_x_lo) = std::make_tuple(_6818_merged_hi,_6829_merged_lo);
	}
	jule::U64 _799_msb = _6314_x_hi >> 63LL;
	jule::U64 _8013_ret_mantissa = _6314_x_hi >> (_799_msb + 9LL);
	_6013_ret_exp2-=static_cast<jule::U64>(1LL ^ _799_msb);
	if (((_6324_x_lo == 0LL) && ((_6314_x_hi & 511LL) == 0LL)) && ((_8013_ret_mantissa & 3LL) == 1LL)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	_8013_ret_mantissa+=static_cast<jule::U64>(_8013_ret_mantissa & 1LL);
	_8013_ret_mantissa>>=1LL;
	if ((_8013_ret_mantissa >> 53LL) > 0LL) {
		_8013_ret_mantissa>>=1LL;
		_6013_ret_exp2+=1LL;
	}
	if ((_6013_ret_exp2 - 1LL) >= 2046LL) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::U64 _10313_ret_bits = (_6013_ret_exp2 << 52LL) | (_8013_ret_mantissa & 4503599627370495LL);
	if (_4145_neg) {
		_10313_ret_bits|=9223372036854775808LLU;
	}
	_4158_f = static_cast<jule::F64>(_119104140_f64_from_bits(_10313_ret_bits));
	_4166_ok = true;
	return std::make_tuple(_4158_f,_4166_ok);
}



inline std::tuple<jule::F32,jule::Bool> _1186ed000_eisel_lemire32(jule::U64 _11023_man,jule::Int _11033_exp10,jule::Bool _11045_neg) {
	jule::Bool _11066_ok = jule::Bool();
	jule::F32 _11058_f = jule::F32();
	if (_11023_man == 0LL) {
		if (_11045_neg) {
			_11058_f=static_cast<jule::F32>(_119104140_f32_from_bits(2147483648LLU));
		}
		_11058_f = _11058_f;
		_11066_ok = true;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	if ((_11033_exp10 < -348LL) || (347LL < _11033_exp10)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::Int _1329_clz = _1191c3b80_leading_zeros64(_11023_man);
	_11023_man<<=static_cast<jule::Uint>(_1329_clz);
	
	jule::U64 _13513_ret_exp2 = static_cast<jule::U64>((((217706LL * _11033_exp10) >> 16LL) + 64LL) + 127LL) - static_cast<jule::U64>(_1329_clz);
	jule::U64 _13814_x_hi;
	jule::U64 _13824_x_lo;
	std::tie(_13814_x_hi,_13824_x_lo) = _1191c3b80_mul64(_11023_man,_1186ed000_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_11033_exp10 - -348LL)][1LL]);
	if (((_13814_x_hi & 274877906943LL) == 274877906943LL) && ((_13824_x_lo + _11023_man) < _11023_man)) {
		jule::U64 _14214_y_hi;
		jule::U64 _14220_y_lo;
		std::tie(_14214_y_hi,_14220_y_lo) = _1191c3b80_mul64(_11023_man,_1186ed000_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_11033_exp10 - -348LL)][0LL]);
		jule::U64 _14318_merged_hi = _13814_x_hi;
		jule::U64 _14329_merged_lo = _13824_x_lo + _14214_y_hi;
		std::tie(_14318_merged_hi,_14329_merged_lo) = std::make_tuple(_13814_x_hi,_13824_x_lo + _14214_y_hi);
		if (_14329_merged_lo < _13824_x_lo) {
			(_14318_merged_hi)++;
		}
		if ((((_14318_merged_hi & 274877906943LL) == 274877906943LL) && ((_14329_merged_lo + 1LL) == 0LL)) && ((_14220_y_lo + _11023_man) < _11023_man)) {
			_11058_f = 0LL;
			_11066_ok = false;
			return std::make_tuple(_11058_f,_11066_ok);
		}
		std::tie(_13814_x_hi,_13824_x_lo) = std::make_tuple(_14318_merged_hi,_14329_merged_lo);
	}
	jule::U64 _1549_msb = _13814_x_hi >> 63LL;
	jule::U64 _15513_ret_mantissa = _13814_x_hi >> (_1549_msb + 38LL);
	_13513_ret_exp2-=static_cast<jule::U64>(1LL ^ _1549_msb);
	if (((_13824_x_lo == 0LL) && ((_13814_x_hi & 274877906943LL) == 0LL)) && ((_15513_ret_mantissa & 3LL) == 1LL)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	_15513_ret_mantissa+=static_cast<jule::U64>(_15513_ret_mantissa & 1LL);
	_15513_ret_mantissa>>=1LL;
	if ((_15513_ret_mantissa >> 24LL) > 0LL) {
		_15513_ret_mantissa>>=1LL;
		_13513_ret_exp2+=1LL;
	}
	if ((_13513_ret_exp2 - 1LL) >= 254LL) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::U64 _17813_ret_bits = (_13513_ret_exp2 << 23LL) | (_15513_ret_mantissa & 8388607LL);
	if (_11045_neg) {
		_17813_ret_bits|=2147483648LL;
	}
	_11058_f = static_cast<jule::F32>(_119104140_f32_from_bits(static_cast<jule::U32>(_17813_ret_bits)));
	_11066_ok = true;
	return std::make_tuple(_11058_f,_11066_ok);
}



inline jule::Int _1186f6b70_common_prefix_len_ignore_case(jule::Str _4534_s,jule::Str _4542_prefix) {
	jule::I64 _4613_n = _4542_prefix.len();
	if (_4613_n > _4534_s.len()) {
		_4613_n=static_cast<jule::I64>(_4534_s.len());
	}
	jule::Int _5013_i = 0LL;
	_iter_begin_4383122144:;
	if (!(_5013_i < _4613_n)) { goto _iter_end_4383122144; }
	{
		jule::U8 _5217_c = _4534_s[static_cast<jule::Int>(_5013_i)];
		if (('A' <= _5217_c) && (_5217_c <= 'Z')) {
			_5217_c+=32LL;
		}
		if (_5217_c != _4542_prefix[static_cast<jule::Int>(_5013_i)]) {
			return _5013_i;
		}
	}
	_iter_next_4383122144:;
	(_5013_i)++;
	goto _iter_begin_4383122144;
	_iter_end_4383122144:;
	return _4613_n;
}



inline std::tuple<jule::F64,jule::Int,jule::Bool> _1186f6b70_special(jule::Str _6816_s) {
	jule::Bool _6842_ok = jule::Bool();
	jule::Int _6834_n = jule::Int();
	jule::F64 _6826_f = jule::F64();
	if (_6816_s == jule::Str("", 0)) {
		_6826_f = 0LL;
		_6834_n = 0LL;
		_6842_ok = false;
		return std::make_tuple(_6826_f,_6834_n,_6842_ok);
	}
	jule::Int _7213_sign = 1LL;
	jule::Int _7313_nsign = 0LL;
	{
		auto _match_expr{ _6816_s[0LL] };
		if (!(('+') == _match_expr || ('-') == _match_expr)) { goto _case_end_4383134224; }
		_case_begin_4383134224:;
		{
			if (_6816_s[0LL] == '-') {
				_7213_sign=-1LL;
			}
			_7313_nsign=1LL;
			_6816_s=_6816_s.slice(1LL);
			goto _case_begin_4383134880;
		}
		goto _match_end_4383133120;
		_case_end_4383134224:;
		if (!(('i') == _match_expr || ('I') == _match_expr)) { goto _case_end_4383134880; }
		_case_begin_4383134880:;
		{
			jule::Int _8317_case_n = _1186f6b70_common_prefix_len_ignore_case(_6816_s,jule::Str("infinity", 8));
			if ((3LL < _8317_case_n) && (_8317_case_n < 8LL)) {
				_8317_case_n=3LL;
			}
			if ((_8317_case_n == 3LL) || (_8317_case_n == 8LL)) {
				_6826_f = static_cast<jule::F64>(_10862f890_inf(_7213_sign));
				_6834_n = static_cast<jule::Int>(_7313_nsign + _6834_n);
				_6842_ok = true;
				return std::make_tuple(_6826_f,_6834_n,_6842_ok);
			}
		}
		goto _match_end_4383133120;
		_case_end_4383134880:;
		if (!(('n') == _match_expr || ('N') == _match_expr)) { goto _case_end_4383134992; }
		_case_begin_4383134992:;
		{
			if (_1186f6b70_common_prefix_len_ignore_case(_6816_s,jule::Str("nan", 3)) == 3LL) {
				_6826_f = static_cast<jule::F64>(_10862f890_nan());
				_6834_n = 3LL;
				_6842_ok = true;
				return std::make_tuple(_6826_f,_6834_n,_6842_ok);
			}
		}
		goto _match_end_4383133120;
		_case_end_4383134992:;
		_match_end_4383133120:;
	}
	_6826_f = 0LL;
	_6834_n = 0LL;
	_6842_ok = false;
	return std::make_tuple(_6826_f,_6834_n,_6842_ok);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _1186f6b70_read_float(jule::Str _10315_s) {
	jule::Bool _10457_ok = jule::Bool();
	jule::Int _10449_i = jule::Int();
	jule::Bool _10438_hex = jule::Bool();
	jule::Bool _10425_trunc = jule::Bool();
	jule::Bool _10350_neg = jule::Bool();
	jule::Int _10340_exp = jule::Int();
	jule::U64 _10325_mantissa = jule::U64();
	if (_10449_i >= _10315_s.len()) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	{
		if (!((_10315_s[static_cast<jule::Int>(_10449_i)] == '+'))) { goto _case_end_4383151776; }
		_case_begin_4383151776:;
		{
			(_10449_i)++;
		}
		goto _match_end_4383152144;
		_case_end_4383151776:;
		if (!((_10315_s[static_cast<jule::Int>(_10449_i)] == '-'))) { goto _case_end_4383151888; }
		_case_begin_4383151888:;
		{
			_10350_neg=true;
			(_10449_i)++;
		}
		goto _match_end_4383152144;
		_case_end_4383151888:;
		_match_end_4383152144:;
	}
	jule::U64 _11813_base = 10LLU;
	jule::Int _11913_max_mant_digits = 19LL;
	jule::U8 _12013_exp_char = 'e';
	if ((((_10449_i + 2LL) < _10315_s.len()) && (_10315_s[static_cast<jule::Int>(_10449_i)] == '0')) && (_1186cfb10_lower(_10315_s[static_cast<jule::Int>(_10449_i + 1LL)]) == 'x')) {
		_11813_base=16LL;
		_11913_max_mant_digits=16LL;
		_10449_i+=2LL;
		_12013_exp_char='p';
		_10438_hex=true;
	}
	jule::Bool _12813_sawdot = false;
	jule::Bool _12913_sawdigits = false;
	jule::Int _13013_nd = 0LL;
	jule::Int _13113_nd_mant = 0LL;
	jule::Int _13213_dp = 0LL;
	_iter_begin_4383167008:;
	if (!(_10449_i < _10315_s.len())) { goto _iter_end_4383167008; }
	{
		jule::U8 _13413_c = _10315_s[static_cast<jule::Int>(_10449_i)];
		{
			if (!((_13413_c == '.'))) { goto _case_end_4383170912; }
			_case_begin_4383170912:;
			{
				if (_12813_sawdot) {
					goto _julec_label_loop_end;
				}
				_12813_sawdot=true;
				_13213_dp=_13013_nd;
				goto _iter_next_4383167008;
			}
			goto _match_end_4383170064;
			_case_end_4383170912:;
			if (!((('0' <= _13413_c) && (_13413_c <= '9')))) { goto _case_end_4383171024; }
			_case_begin_4383171024:;
			{
				_12913_sawdigits=true;
				if ((_13413_c == '0') && (_13013_nd == 0LL)) {
					(_13213_dp)--;
					goto _iter_next_4383167008;
				}
				(_13013_nd)++;
				if (_13113_nd_mant < _11913_max_mant_digits) {
					_10325_mantissa*=_11813_base;
					_10325_mantissa+=static_cast<jule::U64>(_13413_c - '0');
					(_13113_nd_mant)++;
				} else if (_13413_c != '0') {
					_10425_trunc=true;
				}
				goto _iter_next_4383167008;
			}
			goto _match_end_4383170064;
			_case_end_4383171024:;
			if (!((((_11813_base == 16LL) && ('a' <= _1186cfb10_lower(_13413_c))) && (_1186cfb10_lower(_13413_c) <= 'f')))) { goto _case_end_4383171136; }
			_case_begin_4383171136:;
			{
				_12913_sawdigits=true;
				(_13013_nd)++;
				if (_13113_nd_mant < _11913_max_mant_digits) {
					_10325_mantissa*=16LL;
					_10325_mantissa+=static_cast<jule::U64>((_1186cfb10_lower(_13413_c) - 'a') + 10LL);
					(_13113_nd_mant)++;
				} else {
					_10425_trunc=true;
				}
				goto _iter_next_4383167008;
			}
			goto _match_end_4383170064;
			_case_end_4383171136:;
			_match_end_4383170064:;
		}
		goto _iter_end_4383167008;
	}
	_iter_next_4383167008:;
	(_10449_i)++;
	goto _iter_begin_4383167008;
	_iter_end_4383167008:;
	_julec_label_loop_end:;
	if ((!(_12913_sawdigits))) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if ((!(_12813_sawdot))) {
		_13213_dp=_13013_nd;
	}
	if (_11813_base == 16LL) {
		_13213_dp*=4LL;
		_13113_nd_mant*=4LL;
	}
	if ((_10449_i < _10315_s.len()) && (_1186cfb10_lower(_10315_s[static_cast<jule::Int>(_10449_i)]) == _12013_exp_char)) {
		(_10449_i)++;
		if (_10449_i >= _10315_s.len()) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _19517_esign = 1LL;
		if (_10315_s[static_cast<jule::Int>(_10449_i)] == '+') {
			(_10449_i)++;
		} else if (_10315_s[static_cast<jule::Int>(_10449_i)] == '-') {
			(_10449_i)++;
			_19517_esign=-1LL;
		}
		if (((_10449_i >= _10315_s.len()) || (_10315_s[static_cast<jule::Int>(_10449_i)] < '0')) || (_10315_s[static_cast<jule::Int>(_10449_i)] > '9')) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _20517_e = 0LL;
		_iter_begin_4383194912:;
		if (!((_10449_i < _10315_s.len()) && (('0' <= _10315_s[static_cast<jule::Int>(_10449_i)]) && (_10315_s[static_cast<jule::Int>(_10449_i)] <= '9')))) { goto _iter_end_4383194912; }
		{
			if (_20517_e < 10000LL) {
				_20517_e=static_cast<jule::Int>(((_20517_e * 10LL) + static_cast<jule::Int>(_10315_s[static_cast<jule::Int>(_10449_i)])) - '0');
			}
		}
		_iter_next_4383194912:;
		(_10449_i)++;
		goto _iter_begin_4383194912;
		_iter_end_4383194912:;
		_13213_dp+=static_cast<jule::Int>(_20517_e * _19517_esign);
	} else if (_11813_base == 16LL) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if (_10325_mantissa != 0LL) {
		_10340_exp=static_cast<jule::Int>(_13213_dp - _13113_nd_mant);
	}
	_10457_ok=true;
	return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
}



inline std::tuple<jule::F64,jule::Bool> _1186f6b70_atof64_exact(jule::U64 _43317_mantissa,jule::Int _43336_exp,jule::Bool _43346_neg) {
	jule::Bool _43367_ok = jule::Bool();
	jule::F64 _43359_f = jule::F64();
	if ((_43317_mantissa >> _11863fd30_F64_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_43359_f,_43367_ok);
	}
	_43359_f=static_cast<jule::F64>(_43317_mantissa);
	if (_43346_neg) {
		_43359_f=static_cast<jule::F64>((-(_43359_f)));
	}
	{
		if (!((_43336_exp == 0LL))) { goto _case_end_4383210368; }
		_case_begin_4383210368:;
		{
			_43359_f = _43359_f;
			_43367_ok = true;
			return std::make_tuple(_43359_f,_43367_ok);
		}
		goto _match_end_4383210080;
		_case_end_4383210368:;
		if (!(((_43336_exp > 0LL) && (_43336_exp <= 37LL)))) { goto _case_end_4383210480; }
		_case_begin_4383210480:;
		{
			if (_43336_exp > 22LL) {
				_43359_f*=_1186f6b70_F64_POW10[static_cast<jule::Int>(_43336_exp - 22LL)];
				_43336_exp=22LL;
			}
			if ((_43359_f > 1000000000000000LL) || (_43359_f < -1000000000000000LL)) {
				return std::make_tuple(_43359_f,_43367_ok);
			}
			_43359_f = static_cast<jule::F64>(_43359_f * _1186f6b70_F64_POW10[static_cast<jule::Int>(_43336_exp)]);
			_43367_ok = true;
			return std::make_tuple(_43359_f,_43367_ok);
		}
		goto _match_end_4383210080;
		_case_end_4383210480:;
		if (!(((_43336_exp < 0LL) && (_43336_exp >= -22LL)))) { goto _case_end_4383210592; }
		_case_begin_4383210592:;
		{
			_43359_f = static_cast<jule::F64>(jule::div(_43359_f,_1186f6b70_F64_POW10[static_cast<jule::Int>((-(_43336_exp)))]));
			_43367_ok = true;
			return std::make_tuple(_43359_f,_43367_ok);
		}
		goto _match_end_4383210080;
		_case_end_4383210592:;
		_match_end_4383210080:;
	}
	return std::make_tuple(_43359_f,_43367_ok);
}



inline std::tuple<jule::F64,jule::Bool> _1186f6b70_atof64exact(jule::U64 _47216_mantissa,jule::Int _47235_exp,jule::Bool _47245_neg) {
	jule::Bool _47266_ok = jule::Bool();
	jule::F64 _47258_f = jule::F64();
	if ((_47216_mantissa >> _11863fd30_F64_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_47258_f,_47266_ok);
	}
	_47258_f=static_cast<jule::F64>(_47216_mantissa);
	if (_47245_neg) {
		_47258_f=static_cast<jule::F64>((-(_47258_f)));
	}
	{
		if (!((_47235_exp == 0LL))) { goto _case_end_4383226224; }
		_case_begin_4383226224:;
		{
			_47258_f = _47258_f;
			_47266_ok = true;
			return std::make_tuple(_47258_f,_47266_ok);
		}
		goto _match_end_4383227264;
		_case_end_4383226224:;
		if (!(((_47235_exp > 0LL) && (_47235_exp <= 37LL)))) { goto _case_end_4383226336; }
		_case_begin_4383226336:;
		{
			if (_47235_exp > 22LL) {
				_47258_f*=_1186f6b70_F64_POW10[static_cast<jule::Int>(_47235_exp - 22LL)];
				_47235_exp=22LL;
			}
			if ((_47258_f > 1000000000000000LL) || (_47258_f < -1000000000000000LL)) {
				return std::make_tuple(_47258_f,_47266_ok);
			}
			_47258_f = static_cast<jule::F64>(_47258_f * _1186f6b70_F64_POW10[static_cast<jule::Int>(_47235_exp)]);
			_47266_ok = true;
			return std::make_tuple(_47258_f,_47266_ok);
		}
		goto _match_end_4383227264;
		_case_end_4383226336:;
		if (!(((_47235_exp < 0LL) && (_47235_exp >= -22LL)))) { goto _case_end_4383226448; }
		_case_begin_4383226448:;
		{
			_47258_f = static_cast<jule::F64>(jule::div(_47258_f,_1186f6b70_F64_POW10[static_cast<jule::Int>((-(_47235_exp)))]));
			_47266_ok = true;
			return std::make_tuple(_47258_f,_47266_ok);
		}
		goto _match_end_4383227264;
		_case_end_4383226448:;
		_match_end_4383227264:;
	}
	return std::make_tuple(_47258_f,_47266_ok);
}



inline std::tuple<jule::F32,jule::Bool> _1186f6b70_atof32exact(jule::U64 _50616_mantissa,jule::Int _50635_exp,jule::Bool _50649_neg) {
	jule::Bool _50670_ok = jule::Bool();
	jule::F32 _50662_f = jule::F32();
	if ((_50616_mantissa >> _11863fd30_F32_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_50662_f,_50670_ok);
	}
	_50662_f=static_cast<jule::F32>(_50616_mantissa);
	if (_50649_neg) {
		_50662_f=static_cast<jule::F32>((-(_50662_f)));
	}
	{
		if (!((_50635_exp == 0LL))) { goto _case_end_4383242512; }
		_case_begin_4383242512:;
		{
			_50662_f = _50662_f;
			_50670_ok = true;
			return std::make_tuple(_50662_f,_50670_ok);
		}
		goto _match_end_4383242224;
		_case_end_4383242512:;
		if (!(((_50635_exp > 0LL) && (_50635_exp <= 17LL)))) { goto _case_end_4383242624; }
		_case_begin_4383242624:;
		{
			if (_50635_exp > 10LL) {
				_50662_f*=_1186f6b70_F32_POW10[static_cast<jule::Int>(_50635_exp - 10LL)];
				_50635_exp=10LL;
			}
			if ((_50662_f > 10000000LL) || (_50662_f < -10000000LL)) {
				return std::make_tuple(_50662_f,_50670_ok);
			}
			_50662_f = static_cast<jule::F32>(_50662_f * _1186f6b70_F32_POW10[static_cast<jule::Int>(_50635_exp)]);
			_50670_ok = true;
			return std::make_tuple(_50662_f,_50670_ok);
		}
		goto _match_end_4383242224;
		_case_end_4383242624:;
		if (!(((_50635_exp < 0LL) && (_50635_exp >= -10LL)))) { goto _case_end_4383242736; }
		_case_begin_4383242736:;
		{
			_50662_f = static_cast<jule::F32>(jule::div(_50662_f,_1186f6b70_F32_POW10[static_cast<jule::Int>((-(_50635_exp)))]));
			_50670_ok = true;
			return std::make_tuple(_50662_f,_50670_ok);
		}
		goto _match_end_4383242224;
		_case_end_4383242736:;
		_match_end_4383242224:;
	}
	return std::make_tuple(_50662_f,_50670_ok);
}



inline std::tuple<jule::F64,jule::Int> _1186f6b70_atof_hex(jule::Str _54213_s,_11863fd30_FloatInfo& _54222_flt,jule::U64 _54242_mantissa,jule::Int _54261_exp,jule::Bool _54271_neg,jule::Bool _54282_trunc) {
	jule::Int _5439_max_exp = ((1LL << _54222_flt._field_expbits) + _54222_flt._field_bias) - 2LL;
	jule::Int _5449_min_exp = _54222_flt._field_bias + 1LL;
	_54261_exp+=static_cast<jule::Int>(_54222_flt._field_mantbits);
	_iter_begin_4383260368:;
	if (!((_54242_mantissa != 0LL) && ((_54242_mantissa >> (_54222_flt._field_mantbits + 2LL)) == 0LL))) { goto _iter_end_4383260368; }
	{
		_54242_mantissa<<=1LL;
		(_54261_exp)--;
	}
	_iter_next_4383260368:;
	goto _iter_begin_4383260368;
	_iter_end_4383260368:;
	if (_54282_trunc) {
		_54242_mantissa|=1LL;
	}
	_iter_begin_4383261920:;
	if (!((_54242_mantissa >> ((1LL + _54222_flt._field_mantbits) + 2LL)) != 0LL)) { goto _iter_end_4383261920; }
	{
		_54242_mantissa=static_cast<jule::U64>((_54242_mantissa >> 1LL) | (_54242_mantissa & 1LL));
		(_54261_exp)++;
	}
	_iter_next_4383261920:;
	goto _iter_begin_4383261920;
	_iter_end_4383261920:;
	_iter_begin_4383264320:;
	if (!((_54242_mantissa > 1LL) && (_54261_exp < (_5449_min_exp - 2LL)))) { goto _iter_end_4383264320; }
	{
		_54242_mantissa=static_cast<jule::U64>((_54242_mantissa >> 1LL) | (_54242_mantissa & 1LL));
		(_54261_exp)++;
	}
	_iter_next_4383264320:;
	goto _iter_begin_4383264320;
	_iter_end_4383264320:;
	jule::U64 _57413_round = _54242_mantissa & 3LL;
	_54242_mantissa>>=2LL;
	_57413_round|=static_cast<jule::U64>(_54242_mantissa & 1LL);
	_54261_exp+=2LL;
	if (_57413_round == 3LL) {
		(_54242_mantissa)++;
		if (_54242_mantissa == (1LL << (1LL + _54222_flt._field_mantbits))) {
			_54242_mantissa>>=1LL;
			(_54261_exp)++;
		}
	}
	if ((_54242_mantissa >> _54222_flt._field_mantbits) == 0LL) {
		_54261_exp=_54222_flt._field_bias;
	}
	jule::Int _58913_err = 0LLU;
	if (_54261_exp > _5439_max_exp) {
		_54242_mantissa=static_cast<jule::U64>(1LL << _54222_flt._field_mantbits);
		_54261_exp=static_cast<jule::Int>(_5439_max_exp + 1LL);
		_58913_err=1LLU;
	}
	jule::U64 _59613_bits = _54242_mantissa & ((1LL << _54222_flt._field_mantbits) - 1LL);
	_59613_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_54261_exp - _54222_flt._field_bias) & ((1LL << _54222_flt._field_expbits) - 1LL)) << _54222_flt._field_mantbits);
	if (_54271_neg) {
		_59613_bits|=static_cast<jule::Int>((1LL << _54222_flt._field_mantbits) << _54222_flt._field_expbits);
	}
	if (_54222_flt == _11863fd30_F32_INFO) {
		return std::make_tuple(static_cast<jule::F64>(_119104140_f32_from_bits(static_cast<jule::U32>(_59613_bits))),_58913_err);
	}
	return std::make_tuple(static_cast<jule::F64>(_119104140_f64_from_bits(_59613_bits)),_58913_err);
}



inline std::tuple<jule::F32,jule::Int,jule::Int> _1186f6b70_atof32(jule::Str _60711_s) {
	jule::Int _60745_err = 0LLU;
	jule::Int _60733_n = jule::Int();
	jule::F32 _60721_f = jule::F32();
	{
		jule::F64 _60914_val;
		jule::Int _60919__n;
		jule::Bool _60923_ok;
		std::tie(_60914_val,_60919__n,_60923_ok) = _1186f6b70_special(_60711_s);
		if (_60923_ok) {
			_60721_f = static_cast<jule::F32>(_60914_val);
			_60733_n = _60919__n;
			_60745_err = 0LLU;
			return std::make_tuple(_60721_f,_60733_n,_60745_err);
		}
	}
	jule::U64 _61510_mantissa;
	jule::Int _61520_exp;
	jule::Bool _61525_neg;
	jule::Bool _61530_trunc;
	jule::Bool _61537_hex;
	jule::Int _61542__n;
	jule::Bool _61550_ok;
	std::tie(_61510_mantissa,_61520_exp,_61525_neg,_61530_trunc,_61537_hex,_61542__n,_61550_ok) = _1186f6b70_read_float(_60711_s);
	_60733_n=_61542__n;
	if ((!(_61550_ok))) {
		_60721_f = 0LL;
		_60733_n = _60733_n;
		_60745_err = 2LLU;
		return std::make_tuple(_60721_f,_60733_n,_60745_err);
	}
	if (_61537_hex) {
		jule::F64 _62217_ff = 0LL;
		std::tie(_62217_ff,_60745_err) = _1186f6b70_atof_hex(_60711_s.slice(0LL,static_cast<jule::Int>(_60733_n)),_11863fd30_F32_INFO,_61510_mantissa,_61520_exp,_61525_neg,_61530_trunc);
		_60721_f = static_cast<jule::F32>(_62217_ff);
		_60733_n = _60733_n;
		_60745_err = _60745_err;
		return std::make_tuple(_60721_f,_60733_n,_60745_err);
	}
	if (true) {
		if ((!(_61530_trunc))) {
			std::tie(_60721_f,_61550_ok) = _1186f6b70_atof32exact(_61510_mantissa,_61520_exp,_61525_neg);
			if (_61550_ok) {
				_60721_f = _60721_f;
				_60733_n = _60733_n;
				_60745_err = 0LLU;
				return std::make_tuple(_60721_f,_60733_n,_60745_err);
			}
		}
		std::tie(_60721_f,_61550_ok) = _1186ed000_eisel_lemire32(_61510_mantissa,_61520_exp,_61525_neg);
		if (_61550_ok) {
			if ((!(_61530_trunc))) {
				_60721_f = _60721_f;
				_60733_n = _60733_n;
				_60745_err = 0LLU;
				return std::make_tuple(_60721_f,_60733_n,_60745_err);
			}
			jule::F32 _64421_f_up = 0LL;
			std::tie(_64421_f_up,_61550_ok) = _1186ed000_eisel_lemire32(static_cast<jule::U64>(_61510_mantissa + 1LL),_61520_exp,_61525_neg);
			if (_61550_ok && (_60721_f == _64421_f_up)) {
				_60721_f = _60721_f;
				_60733_n = _60733_n;
				_60745_err = 0LLU;
				return std::make_tuple(_60721_f,_60733_n,_60745_err);
			}
		}
	}
	_14873e050_Decimal _65313_d = _14873e050_Decimal();
	if ((!(_65313_d._method_set(_60711_s.slice(0LL,static_cast<jule::Int>(_60733_n)))))) {
		_60721_f = 0LL;
		_60733_n = _60733_n;
		_60745_err = 2LLU;
		return std::make_tuple(_60721_f,_60733_n,_60745_err);
	}
	jule::U64 _65710_b;
	jule::Bool _65713_ovf;
	std::tie(_65710_b,_65713_ovf) = _65313_d._method_float_bits(_11863fd30_F32_INFO);
	_60721_f=static_cast<jule::F32>(_119104140_f32_from_bits(static_cast<jule::U32>(_65710_b)));
	if (_65713_ovf) {
		_60745_err=1LLU;
	}
	_60721_f = _60721_f;
	_60733_n = _60733_n;
	_60745_err = _60745_err;
	return std::make_tuple(_60721_f,_60733_n,_60745_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _1186f6b70_atof64(jule::Str _66511_s) {
	jule::Int _66545_err = 0LLU;
	jule::Int _66537_n = jule::Int();
	jule::F64 _66525_f = jule::F64();
	{
		jule::F64 _66714_val;
		jule::Int _66719__n;
		jule::Bool _66723_ok;
		std::tie(_66714_val,_66719__n,_66723_ok) = _1186f6b70_special(_66511_s);
		if (_66723_ok) {
			_66525_f = _66714_val;
			_66537_n = _66719__n;
			_66545_err = 0LLU;
			return std::make_tuple(_66525_f,_66537_n,_66545_err);
		}
	}
	jule::U64 _67310_mantissa;
	jule::Int _67320_exp;
	jule::Bool _67325_neg;
	jule::Bool _67330_trunc;
	jule::Bool _67337_hex;
	jule::Int _67342__n;
	jule::Bool _67350_ok;
	std::tie(_67310_mantissa,_67320_exp,_67325_neg,_67330_trunc,_67337_hex,_67342__n,_67350_ok) = _1186f6b70_read_float(_66511_s);
	_66537_n=_67342__n;
	if ((!(_67350_ok))) {
		_66525_f = 0LL;
		_66537_n = _66537_n;
		_66545_err = 2LLU;
		return std::make_tuple(_66525_f,_66537_n,_66545_err);
	}
	if (_67337_hex) {
		std::tie(_66525_f,_66545_err) = _1186f6b70_atof_hex(_66511_s.slice(0LL,static_cast<jule::Int>(_66537_n)),_11863fd30_F64_INFO,_67310_mantissa,_67320_exp,_67325_neg,_67330_trunc);
		_66525_f = _66525_f;
		_66537_n = _66537_n;
		_66545_err = _66545_err;
		return std::make_tuple(_66525_f,_66537_n,_66545_err);
	}
	if (true) {
		if ((!(_67330_trunc))) {
			std::tie(_66525_f,_67350_ok) = _1186f6b70_atof64exact(_67310_mantissa,_67320_exp,_67325_neg);
			if (_67350_ok) {
				_66525_f = _66525_f;
				_66537_n = _66537_n;
				_66545_err = 0LLU;
				return std::make_tuple(_66525_f,_66537_n,_66545_err);
			}
		}
		std::tie(_66525_f,_67350_ok) = _1186ed000_eisel_lemire64(_67310_mantissa,_67320_exp,_67325_neg);
		if (_67350_ok) {
			if ((!(_67330_trunc))) {
				_66525_f = _66525_f;
				_66537_n = _66537_n;
				_66545_err = 0LLU;
				return std::make_tuple(_66525_f,_66537_n,_66545_err);
			}
			jule::F64 _70121_f_up = 0LL;
			std::tie(_70121_f_up,_67350_ok) = _1186ed000_eisel_lemire64(static_cast<jule::U64>(_67310_mantissa + 1LL),_67320_exp,_67325_neg);
			if (_67350_ok && (_66525_f == _70121_f_up)) {
				_66525_f = _66525_f;
				_66537_n = _66537_n;
				_66545_err = 0LLU;
				return std::make_tuple(_66525_f,_66537_n,_66545_err);
			}
		}
	}
	_14873e050_Decimal _71013_d = _14873e050_Decimal();
	if ((!(_71013_d._method_set(_66511_s.slice(0LL,static_cast<jule::Int>(_66537_n)))))) {
		_66525_f = 0LL;
		_66537_n = _66537_n;
		_66545_err = 2LLU;
		return std::make_tuple(_66525_f,_66537_n,_66545_err);
	}
	jule::U64 _71410_b;
	jule::Bool _71413_ovf;
	std::tie(_71410_b,_71413_ovf) = _71013_d._method_float_bits(_11863fd30_F64_INFO);
	_66525_f=static_cast<jule::F64>(_119104140_f64_from_bits(_71410_b));
	if (_71413_ovf) {
		_66545_err=1LLU;
	}
	_66525_f = _66525_f;
	_66537_n = _66537_n;
	_66545_err = _66545_err;
	return std::make_tuple(_66525_f,_66537_n,_66545_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _1186f6b70_parse_float_prefix(jule::Str _72223_s,jule::Int _72231_bit_size) {
	if (_72231_bit_size == 32LL) {
		jule::F32 _72414_f;
		jule::Int _72417_n;
		jule::Int _72420_err;
		std::tie(_72414_f,_72417_n,_72420_err) = _1186f6b70_atof32(_72223_s);
		return std::make_tuple(static_cast<jule::F64>(_72414_f),_72417_n,_72420_err);
	}
	jule::F64 _72810_f;
	jule::Int _72813_n;
	jule::Int _72816_err;
	std::tie(_72810_f,_72813_n,_72816_err) = _1186f6b70_atof64(_72223_s);
	return std::make_tuple(_72810_f,_72813_n,_72816_err);
}



inline std::tuple<jule::F64,jule::Int> _1186f6b70_parse_float(jule::Str _75620_s,jule::Int _75628_bit_size) {
	jule::F64 _75710_f;
	jule::Int _75713_n;
	jule::Int _75716_err;
	std::tie(_75710_f,_75713_n,_75716_err) = _1186f6b70_parse_float_prefix(_75620_s,_75628_bit_size);
	if ((_75713_n != _75620_s.len()) && ((_75716_err == 0LLU) || (_75716_err != 2LLU))) {
		return std::make_tuple(0LL,2LLU);
	}
	return std::make_tuple(_75710_f,_75716_err);
}



inline void _11864d0f0_ryu_ftoa_fixed32(_11863fd30_DecimalSlice& _4926_d,jule::U32 _4947_mant,jule::Int _4958_exp,jule::Int _4968_prec) {
	if (_4968_prec < 0LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with negative prec", 42));
	}
	if (_4968_prec > 9LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with prec > 9", 37));
	}
	if (_4947_mant == 0LL) {
		std::tie(_4926_d._field_nd,_4926_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _6213_e2 = _4958_exp;
	jule::Int _639_b = _1191c3b80_len32(_4947_mant);
	if (_639_b < 25LL) {
		_4947_mant<<=static_cast<jule::Uint>(25LL - _639_b);
		_6213_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_639_b) - 25LL);
	}
	jule::Int _749_q = ((-(_11864d0f0_mul_by_log2_log10(static_cast<jule::Int>(_6213_e2 + 24LL)))) + _4968_prec) - 1LL;
	jule::Bool _7913_exact = (_749_q <= 27LL) && (_749_q >= 0LL);
	jule::U32 _8114_di;
	jule::Int _8118_dexp2;
	jule::Bool _8129_d0;
	std::tie(_8114_di,_8118_dexp2,_8129_d0) = _11864d0f0_mult64bit_pow10(_4947_mant,_6213_e2,_749_q);
	if (_8118_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult64bit_pow10", 49));
	}
	if (((_749_q < 0LL) && (_749_q >= -10LL)) && _11864d0f0_divisible_by_pow5(static_cast<jule::U64>(_4947_mant),static_cast<jule::Int>((-(_749_q))))) {
		_7913_exact=true;
		_8129_d0=true;
	}
	jule::Uint _949_extra = static_cast<jule::Uint>((-(_8118_dexp2)));
	jule::U32 _959_extra_mask = static_cast<jule::U32>((1LL << _949_extra) - 1LL);
	jule::U32 _9713_dfrac = 0LLU;
	std::tie(_8114_di,_9713_dfrac) = std::make_tuple(static_cast<jule::U32>(_8114_di >> _949_extra),static_cast<jule::U32>(_8114_di & _959_extra_mask));
	jule::Bool _9913_round_up = false;
	if (_7913_exact) {
		_9913_round_up=((_9713_dfrac > (1LL << (_949_extra - 1LL))) || ((_9713_dfrac == (1LL << (_949_extra - 1LL))) && (!(_8129_d0)))) || (((_9713_dfrac == (1LL << (_949_extra - 1LL))) && _8129_d0) && ((_8114_di & 1LL) == 1LL));
	} else {
		_9913_round_up=(_9713_dfrac >> (_949_extra - 1LL)) == 1LL;
	}
	if (_9713_dfrac != 0LL) {
		_8129_d0=false;
	}
	_11864d0f0_format_decimal(_4926_d,static_cast<jule::U64>(_8114_di),(!(_8129_d0)),_9913_round_up,_4968_prec);
	_4926_d._field_dp-=_749_q;
}



inline void _11864d0f0_ryu_ftoa_fixed64(_11863fd30_DecimalSlice& _12326_d,jule::U64 _12347_mant,jule::Int _12358_exp,jule::Int _12368_prec) {
	if (_12368_prec > 18LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed64 called with prec > 18", 38));
	}
	if (_12347_mant == 0LL) {
		std::tie(_12326_d._field_nd,_12326_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _13313_e2 = _12358_exp;
	jule::Int _1349_b = _1191c3b80_len64(_12347_mant);
	if (_1349_b < 55LL) {
		_12347_mant=static_cast<jule::U64>(_12347_mant << static_cast<jule::Uint>(55LL - _1349_b));
		_13313_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_1349_b) - 55LL);
	}
	jule::Int _1489_q = ((-(_11864d0f0_mul_by_log2_log10(static_cast<jule::Int>(_13313_e2 + 54LL)))) + _12368_prec) - 1LL;
	jule::Bool _15313_exact = (_1489_q <= 55LL) && (_1489_q >= 0LL);
	jule::U64 _15514_di;
	jule::Int _15518_dexp2;
	jule::Bool _15529_d0;
	std::tie(_15514_di,_15518_dexp2,_15529_d0) = _11864d0f0_mult128bit_pow10(_12347_mant,_13313_e2,_1489_q);
	if (_15518_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50));
	}
	if (((_1489_q < 0LL) && (_1489_q >= -22LL)) && _11864d0f0_divisible_by_pow5(_12347_mant,static_cast<jule::Int>((-(_1489_q))))) {
		_15313_exact=true;
		_15529_d0=true;
	}
	jule::Uint _1689_extra = static_cast<jule::Uint>((-(_15518_dexp2)));
	jule::U64 _1699_extra_mask = static_cast<jule::U64>((1LL << _1689_extra) - 1LL);
	jule::U64 _17113_dfrac = 0LLU;
	std::tie(_15514_di,_17113_dfrac) = std::make_tuple(static_cast<jule::U64>(_15514_di >> _1689_extra),static_cast<jule::U64>(_15514_di & _1699_extra_mask));
	jule::Bool _17313_round_up = false;
	if (_15313_exact) {
		_17313_round_up=((_17113_dfrac > (1LL << (_1689_extra - 1LL))) || ((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && (!(_15529_d0)))) || (((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && _15529_d0) && ((_15514_di & 1LL) == 1LL));
	} else {
		_17313_round_up=(_17113_dfrac >> (_1689_extra - 1LL)) == 1LL;
	}
	if (_17113_dfrac != 0LL) {
		_15529_d0=false;
	}
	_11864d0f0_format_decimal(_12326_d,_15514_di,(!(_15529_d0)),_17313_round_up,_12368_prec);
	_12326_d._field_dp-=_1489_q;
}



inline void _11864d0f0_format_decimal(_11863fd30_DecimalSlice& _20424_d,jule::U64 _20445_m,jule::Bool _20457_trunc,jule::Bool _20474_round_up,jule::Int _20490_prec) {
	jule::U64 _2059_max = _11864d0f0_U64_POW10[static_cast<jule::Int>(_20490_prec)];
	jule::Int _20613_trimmed = 0LL;
	_iter_begin_4383444976:;
	if (!(_20445_m >= _2059_max)) { goto _iter_end_4383444976; }
	{
		jule::U64 _20814_a = jule::div(_20445_m,10LL);
		jule::U64 _20817_b = jule::mod(_20445_m,10LL);
		std::tie(_20814_a,_20817_b) = std::make_tuple(jule::div(_20445_m,10LL),jule::mod(_20445_m,10LL));
		_20445_m=_20814_a;
		(_20613_trimmed)++;
		if (_20817_b > 5LL) {
			_20474_round_up=true;
		} else if (_20817_b < 5LL) {
			_20474_round_up=false;
		} else {
			_20474_round_up=_20457_trunc || ((_20445_m & 1LL) == 1LL);
		}
		if (_20817_b != 0LL) {
			_20457_trunc=true;
		}
	}
	_iter_next_4383444976:;
	goto _iter_begin_4383444976;
	_iter_end_4383444976:;
	if (_20474_round_up) {
		(_20445_m)++;
	}
	if (_20445_m >= _2059_max) {
		_20445_m/=10LL;
		(_20613_trimmed)++;
	}
	jule::Uint _23313_n = static_cast<jule::Uint>(_20490_prec);
	_20424_d._field_nd=static_cast<jule::Int>(_20490_prec);
	jule::U64 _23513_v = _20445_m;
	_iter_begin_4383454352:;
	if (!(_23513_v >= 100LL)) { goto _iter_end_4383454352; }
	{
		jule::U64 _23717_v1 = 0LLU;
		jule::U64 _23817_v2 = 0LLU;
		if ((_23513_v >> 32LL) == 0LL) {
			std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(jule::div(static_cast<jule::U32>(_23513_v),100LL)),static_cast<jule::U64>(jule::mod(static_cast<jule::U32>(_23513_v),100LL)));
		} else {
			std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(jule::div(_23513_v,100LL)),static_cast<jule::U64>(jule::mod(_23513_v,100LL)));
		}
		_23313_n-=2LL;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 1LL)]);
		_20424_d._field_d[static_cast<jule::Int>(_23313_n + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 0LL)]);
		_23513_v=_23717_v1;
	}
	_iter_next_4383454352:;
	goto _iter_begin_4383454352;
	_iter_end_4383454352:;
	if (_23513_v > 0LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23513_v) + 1LL)]);
	}
	if (_23513_v >= 10LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(2LL * _23513_v)]);
	}
	_iter_begin_4383470176:;
	if (!(_20424_d._field_d[static_cast<jule::Int>(_20424_d._field_nd - 1LL)] == '0')) { goto _iter_end_4383470176; }
	{
		(_20424_d._field_nd)--;
		(_20613_trimmed)++;
	}
	_iter_next_4383470176:;
	goto _iter_begin_4383470176;
	_iter_end_4383470176:;
	_20424_d._field_dp=static_cast<jule::Int>(_20424_d._field_nd + _20613_trimmed);
}



inline void _11864d0f0_ryu_ftoa_shortest(_11863fd30_DecimalSlice& _26527_d,jule::U64 _26548_mant,jule::Int _26559_exp,_11863fd30_FloatInfo& _26570_flt) {
	if (_26548_mant == 0LL) {
		std::tie(_26527_d._field_nd,_26527_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	if ((_26559_exp <= 0LL) && (_1191c3b80_trailing_zeros64(_26548_mant) >= (-(_26559_exp)))) {
		_26548_mant>>=static_cast<jule::Uint>((-(_26559_exp)));
		_11864d0f0_ryu_digits(_26527_d,_26548_mant,_26548_mant,_26548_mant,true,false);
		return;
	}
	jule::U64 _27710_ml;
	jule::U64 _27714_mc;
	jule::U64 _27718_mu;
	jule::Int _27726_e2;
	std::tie(_27710_ml,_27714_mc,_27718_mu,_27726_e2) = _11864d0f0_compute_bounds(_26548_mant,_26559_exp,_26570_flt);
	if (_27726_e2 == 0LL) {
		_11864d0f0_ryu_digits(_26527_d,_27710_ml,_27714_mc,_27718_mu,true,false);
		return;
	}
	jule::Int _2839_q = _11864d0f0_mul_by_log2_log10(static_cast<jule::Int>((-(_27726_e2)))) + 1LL;
	jule::U64 _28713_dl = 0LLU;
	jule::U64 _28813_dc = 0LLU;
	jule::U64 _28913_du = 0LLU;
	jule::Bool _29013_dl0 = false;
	jule::Bool _29113_dc0 = false;
	jule::Bool _29213_du0 = false;
	if (_26570_flt == _11863fd30_F32_INFO) {
		jule::U32 _29417_dl32 = 0LLU;
		jule::U32 _29517_dc32 = 0LLU;
		jule::U32 _29617_du32 = 0LLU;
		std::tie(_29417_dl32,std::ignore,_29013_dl0) = _11864d0f0_mult64bit_pow10(static_cast<jule::U32>(_27710_ml),_27726_e2,_2839_q);
		std::tie(_29517_dc32,std::ignore,_29113_dc0) = _11864d0f0_mult64bit_pow10(static_cast<jule::U32>(_27714_mc),_27726_e2,_2839_q);
		std::tie(_29617_du32,_27726_e2,_29213_du0) = _11864d0f0_mult64bit_pow10(static_cast<jule::U32>(_27718_mu),_27726_e2,_2839_q);
		std::tie(_28713_dl,_28813_dc,_28913_du) = std::make_tuple(static_cast<jule::U64>(_29417_dl32),static_cast<jule::U64>(_29517_dc32),static_cast<jule::U64>(_29617_du32));
	} else {
		std::tie(_28713_dl,std::ignore,_29013_dl0) = _11864d0f0_mult128bit_pow10(_27710_ml,_27726_e2,_2839_q);
		std::tie(_28813_dc,std::ignore,_29113_dc0) = _11864d0f0_mult128bit_pow10(_27714_mc,_27726_e2,_2839_q);
		std::tie(_28913_du,_27726_e2,_29213_du0) = _11864d0f0_mult128bit_pow10(_27718_mu,_27726_e2,_2839_q);
	}
	if (_27726_e2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50));
	}
	if (_2839_q > 55LL) {
		std::tie(_29013_dl0,_29113_dc0,_29213_du0) = std::make_tuple(false,false,false);
	}
	if ((_2839_q < 0LL) && (_2839_q >= -24LL)) {
		if (_11864d0f0_divisible_by_pow5(_27710_ml,static_cast<jule::Int>((-(_2839_q))))) {
			_29013_dl0=true;
		}
		if (_11864d0f0_divisible_by_pow5(_27714_mc,static_cast<jule::Int>((-(_2839_q))))) {
			_29113_dc0=true;
		}
		if (_11864d0f0_divisible_by_pow5(_27718_mu,static_cast<jule::Int>((-(_2839_q))))) {
			_29213_du0=true;
		}
	}
	jule::Uint _3299_extra = static_cast<jule::Uint>((-(_27726_e2)));
	jule::U64 _3309_extra_mask = static_cast<jule::U64>((1LL << _3299_extra) - 1LL);
	jule::U64 _33213_fracl = 0LLU;
	std::tie(_28713_dl,_33213_fracl) = std::make_tuple(static_cast<jule::U64>(_28713_dl >> _3299_extra),static_cast<jule::U64>(_28713_dl & _3309_extra_mask));
	jule::U64 _33413_fracc = 0LLU;
	std::tie(_28813_dc,_33413_fracc) = std::make_tuple(static_cast<jule::U64>(_28813_dc >> _3299_extra),static_cast<jule::U64>(_28813_dc & _3309_extra_mask));
	jule::U64 _33613_fracu = 0LLU;
	std::tie(_28913_du,_33613_fracu) = std::make_tuple(static_cast<jule::U64>(_28913_du >> _3299_extra),static_cast<jule::U64>(_28913_du & _3309_extra_mask));
	jule::Bool _34213_uok = (!(_29213_du0)) || (_33613_fracu > 0LL);
	if (_29213_du0 && (_33613_fracu == 0LL)) {
		_34213_uok=(_26548_mant & 1LL) == 0LL;
	}
	if ((!(_34213_uok))) {
		(_28913_du)--;
	}
	jule::Bool _35113_cup = false;
	if (_29113_dc0) {
		_35113_cup=(_33413_fracc > (1LL << (_3299_extra - 1LL))) || ((_33413_fracc == (1LL << (_3299_extra - 1LL))) && ((_28813_dc & 1LL) == 1LL));
	} else {
		_35113_cup=(_33413_fracc >> (_3299_extra - 1LL)) == 1LL;
	}
	jule::Bool _3679_lok = (_29013_dl0 && (_33213_fracl == 0LL)) && ((_26548_mant & 1LL) == 0LL);
	if ((!(_3679_lok))) {
		(_28713_dl)++;
	}
	jule::Bool _3729_c0 = _29113_dc0 && (_33413_fracc == 0LL);
	_11864d0f0_ryu_digits(_26527_d,_28713_dl,_28813_dc,_28913_du,_3729_c0,_35113_cup);
	_26527_d._field_dp-=_2839_q;
}



inline jule::Int _11864d0f0_mul_by_log2_log10(jule::Int _38322_x) {
	return static_cast<jule::Int>((_38322_x * 78913LL) >> 18LL);
}



inline jule::Int _11864d0f0_mul_by_log10_log2(jule::Int _39322_x) {
	return static_cast<jule::Int>((_39322_x * 108853LL) >> 15LL);
}



inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _11864d0f0_compute_bounds(jule::U64 _40119_mant,jule::Int _40130_exp,_11863fd30_FloatInfo& _40218_flt) {
	jule::Int _40274_e2 = jule::Int();
	jule::U64 _40262_upper = jule::U64();
	jule::U64 _40248_central = jule::U64();
	jule::U64 _40236_lower = jule::U64();
	if ((_40119_mant != (1LL << _40218_flt._field_mantbits)) || (_40130_exp == ((_40218_flt._field_bias + 1LL) - static_cast<jule::Int>(_40218_flt._field_mantbits)))) {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((2LL * _40119_mant) - 1LL),static_cast<jule::U64>(2LL * _40119_mant),static_cast<jule::U64>((2LL * _40119_mant) + 1LL));
		_40274_e2=static_cast<jule::Int>(_40130_exp - 1LL);
	} else {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((4LL * _40119_mant) - 1LL),static_cast<jule::U64>(4LL * _40119_mant),static_cast<jule::U64>((4LL * _40119_mant) + 2LL));
		_40274_e2=static_cast<jule::Int>(_40130_exp - 2LL);
	}
	return std::make_tuple(_40236_lower,_40248_central,_40262_upper,_40274_e2);
}



inline void _11864d0f0_ryu_digits(_11863fd30_DecimalSlice& _41520_d,jule::U64 _41537_lower,jule::U64 _41549_central,jule::U64 _41563_upper,jule::Bool _41579_c0,jule::Bool _41593_cup) {
	jule::U32 _41614_lhi;
	jule::U32 _41619_llo;
	std::tie(_41614_lhi,_41619_llo) = _11864d0f0_divmod1e9(_41537_lower);
	jule::U32 _41710_chi;
	jule::U32 _41715_clo;
	std::tie(_41710_chi,_41715_clo) = _11864d0f0_divmod1e9(_41549_central);
	jule::U32 _41810_uhi;
	jule::U32 _41815_ulo;
	std::tie(_41810_uhi,_41815_ulo) = _11864d0f0_divmod1e9(_41563_upper);
	if (_41810_uhi == 0LL) {
		_11864d0f0_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,8LL);
	} else if (_41614_lhi < _41810_uhi) {
		if (_41619_llo != 0LL) {
			(_41614_lhi)++;
		}
		_41579_c0=_41579_c0 && (_41715_clo == 0LL);
		_41593_cup=(_41715_clo > 500000000LL) || ((_41715_clo == 500000000LL) && _41593_cup);
		_11864d0f0_ryu_digits32(_41520_d,_41614_lhi,_41710_chi,_41810_uhi,_41579_c0,_41593_cup,8LL);
		_41520_d._field_dp+=9LL;
	} else {
		_41520_d._field_nd=0LL;
		jule::Uint _43417_n = static_cast<jule::Uint>(9LLU);
		jule::U32 _43517_v = _41710_chi;
		_iter_begin_4383572464:;
		if (!(_43517_v > 0LL)) { goto _iter_end_4383572464; }
		{
			jule::U32 _43718_v1 = jule::div(_43517_v,10LL);
			jule::U32 _43722_v2 = jule::mod(_43517_v,10LL);
			std::tie(_43718_v1,_43722_v2) = std::make_tuple(jule::div(_43517_v,10LL),jule::mod(_43517_v,10LL));
			_43517_v=_43718_v1;
			(_43417_n)--;
			_41520_d._field_d[static_cast<jule::Int>(_43417_n)]=static_cast<jule::U8>(_43722_v2 + '0');
		}
		_iter_next_4383572464:;
		goto _iter_begin_4383572464;
		_iter_end_4383572464:;
		_41520_d._field_d=_41520_d._field_d.slice(static_cast<jule::Int>(_43417_n));
		_41520_d._field_nd=static_cast<jule::Int>(9LL - _43417_n);
		_11864d0f0_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,static_cast<jule::Int>(_41520_d._field_nd + 8LL));
	}
	_iter_begin_4383571808:;
	if (!((_41520_d._field_nd > 0LL) && (_41520_d._field_d[static_cast<jule::Int>(_41520_d._field_nd - 1LL)] == '0'))) { goto _iter_end_4383571808; }
	{
		(_41520_d._field_nd)--;
	}
	_iter_next_4383571808:;
	goto _iter_begin_4383571808;
	_iter_end_4383571808:;
	_iter_begin_4383570512:;
	if (!((_41520_d._field_nd > 0LL) && (_41520_d._field_d[0LL] == '0'))) { goto _iter_end_4383570512; }
	{
		(_41520_d._field_nd)--;
		(_41520_d._field_dp)--;
		_41520_d._field_d=_41520_d._field_d.slice(1LL);
	}
	_iter_next_4383570512:;
	goto _iter_begin_4383570512;
	_iter_end_4383570512:;
}



inline void _11864d0f0_ryu_digits32(_11863fd30_DecimalSlice& _46022_d,jule::U32 _46043_lower,jule::U32 _46059_central,jule::U32 _46121_upper,jule::Bool _46137_c0,jule::Bool _46151_cup,jule::Int _46166_endindex) {
	if (_46121_upper == 0LL) {
		_46022_d._field_dp=static_cast<jule::Int>(_46166_endindex + 1LL);
		return;
	}
	jule::Int _46613_trimmed = 0LL;
	jule::Int _46913_c_next_digit = 0LL;
	_iter_begin_4383592608:;
	if (!(_46121_upper > 0LL)) { goto _iter_end_4383592608; }
	{
		jule::U32 _47613_l = jule::div(_46043_lower + 9LL,10LL);
		jule::U32 _47718_c = jule::div(_46059_central,10LL);
		jule::U32 _47725_cdigit = jule::mod(_46059_central,10LL);
		std::tie(_47718_c,_47725_cdigit) = std::make_tuple(jule::div(_46059_central,10LL),jule::mod(_46059_central,10LL));
		jule::U32 _47813_u = jule::div(_46121_upper,10LL);
		if (_47613_l > _47813_u) {
			goto _iter_end_4383592608;
		}
		if ((_47613_l == (_47718_c + 1LL)) && (_47718_c < _47813_u)) {
			(_47718_c)++;
			_47725_cdigit=0LL;
			_46151_cup=false;
		}
		(_46613_trimmed)++;
		_46137_c0=_46137_c0 && (_46913_c_next_digit == 0LL);
		_46913_c_next_digit=static_cast<jule::Int>(_47725_cdigit);
		std::tie(_46043_lower,_46059_central,_46121_upper) = std::make_tuple(_47613_l,_47718_c,_47813_u);
	}
	_iter_next_4383592608:;
	goto _iter_begin_4383592608;
	_iter_end_4383592608:;
	if (_46613_trimmed > 0LL) {
		_46151_cup=((_46913_c_next_digit > 5LL) || ((_46913_c_next_digit == 5LL) && (!(_46137_c0)))) || (((_46913_c_next_digit == 5LL) && _46137_c0) && ((_46059_central & 1LL) == 1LL));
	}
	if ((_46059_central < _46121_upper) && _46151_cup) {
		(_46059_central)++;
	}
	_46166_endindex-=_46613_trimmed;
	jule::U32 _51713_v = _46059_central;
	jule::Int _51813_n = _46166_endindex;
	_iter_begin_4380937056:;
	if (!(_51813_n > _46022_d._field_nd)) { goto _iter_end_4380937056; }
	{
		jule::U32 _52014_v1 = jule::div(_51713_v,100LL);
		jule::U32 _52018_v2 = jule::mod(_51713_v,100LL);
		std::tie(_52014_v1,_52018_v2) = std::make_tuple(jule::div(_51713_v,100LL),jule::mod(_51713_v,100LL));
		_46022_d._field_d[static_cast<jule::Int>(_51813_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 1LL)]);
		_46022_d._field_d[static_cast<jule::Int>(_51813_n - 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 0LL)]);
		_51813_n-=2LL;
		_51713_v=_52014_v1;
	}
	_iter_next_4380937056:;
	goto _iter_begin_4380937056;
	_iter_end_4380937056:;
	if (_51813_n == _46022_d._field_nd) {
		_46022_d._field_d[static_cast<jule::Int>(_51813_n)]=static_cast<jule::U8>(_51713_v + '0');
	}
	_46022_d._field_nd=static_cast<jule::Int>(_46166_endindex + 1LL);
	_46022_d._field_dp=static_cast<jule::Int>(_46022_d._field_nd + _46613_trimmed);
}



inline std::tuple<jule::U32,jule::Int,jule::Bool> _11864d0f0_mult64bit_pow10(jule::U32 _54220_m,jule::Int _54232_e2,jule::Int _54241_q) {
	jule::Bool _54273_exact = jule::Bool();
	jule::Int _54262_resE = jule::Int();
	jule::U32 _54251_resM = jule::U32();
	if (_54241_q == 0LL) {
		_54251_resM = static_cast<jule::U32>(_54220_m << 6LL);
		_54262_resE = static_cast<jule::Int>(_54232_e2 - 6LL);
		_54273_exact = true;
		return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
	}
	if ((_54241_q < -348LL) || (347LL < _54241_q)) {
		jule::panic(jule::Str("mult64bit_pow10: power of 10 is out of range", 44));
	}
	jule::U64 _55113_pow = _1186ed000_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_54241_q - -348LL)][1LL];
	if (_54241_q < 0LL) {
		_55113_pow+=1LL;
	}
	jule::U64 _55610_hi;
	jule::U64 _55614_lo;
	std::tie(_55610_hi,_55614_lo) = _1191c3b80_mul64(static_cast<jule::U64>(_54220_m),_55113_pow);
	_54232_e2+=static_cast<jule::Int>((_11864d0f0_mul_by_log10_log2(_54241_q) - 63LL) + 57LL);
	_54251_resM = static_cast<jule::U32>((_55610_hi << 7LL) | (_55614_lo >> 57LL));
	_54262_resE = _54232_e2;
	_54273_exact = (_55614_lo << 7LL) == 0LL;
	return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool> _11864d0f0_mult128bit_pow10(jule::U64 _57021_m,jule::Int _57033_e2,jule::Int _57042_q) {
	jule::Bool _57074_exact = jule::Bool();
	jule::Int _57063_resE = jule::Int();
	jule::U64 _57052_resM = jule::U64();
	if (_57042_q == 0LL) {
		_57052_resM = static_cast<jule::U64>(_57021_m << 8LL);
		_57063_resE = static_cast<jule::Int>(_57033_e2 - 8LL);
		_57074_exact = true;
		return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
	}
	if ((_57042_q < -348LL) || (347LL < _57042_q)) {
		jule::panic(jule::Str("mult128bit_pow10: power of 10 is out of range", 45));
	}
	jule::Array<jule::U64,2> _57913_pow = _1186ed000_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_57042_q - -348LL)];
	if (_57042_q < 0LL) {
		_57913_pow[0LL]+=1LL;
	}
	_57033_e2+=static_cast<jule::Int>((_11864d0f0_mul_by_log10_log2(_57042_q) - 127LL) + 119LL);
	jule::U64 _58710_l1;
	jule::U64 _58714_l0;
	std::tie(_58710_l1,_58714_l0) = _1191c3b80_mul64(_57021_m,_57913_pow[0LL]);
	jule::U64 _58814_h1;
	jule::U64 _58818_h0;
	std::tie(_58814_h1,_58818_h0) = _1191c3b80_mul64(_57021_m,_57913_pow[1LL]);
	jule::U64 _58910_mid;
	jule::U64 _58915_carry;
	std::tie(_58910_mid,_58915_carry) = _1191c3b80_add64(_58710_l1,_58818_h0,0LLU);
	_58814_h1+=_58915_carry;
	_57052_resM = static_cast<jule::U64>((_58814_h1 << 9LL) | (_58910_mid >> 55LL));
	_57063_resE = _57033_e2;
	_57074_exact = ((_58910_mid << 9LL) == 0LL) && (_58714_l0 == 0LL);
	return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
}



inline jule::Bool _11864d0f0_divisible_by_pow5(jule::U64 _59426_m,jule::Int _59434_k) {
	if (_59426_m == 0LL) {
		return true;
	}
	jule::Int _59813_i = 0LL;
	_iter_begin_4384151536:;
	if (!(_59813_i < _59434_k)) { goto _iter_end_4384151536; }
	{
		if (jule::mod(_59426_m,5LL) != 0LL) {
			return false;
		}
		_59426_m/=5LL;
	}
	_iter_next_4384151536:;
	(_59813_i)++;
	goto _iter_begin_4384151536;
	_iter_end_4384151536:;
	return true;
}



inline std::tuple<jule::U32,jule::U32> _11864d0f0_divmod1e9(jule::U64 _61014_x) {
	if (true) {
		return std::make_tuple(static_cast<jule::U32>(jule::div(_61014_x,1000000000LL)),static_cast<jule::U32>(jule::mod(_61014_x,1000000000LL)));
	}
	jule::U64 _61510_hi;
	std::tie(_61510_hi,std::ignore) = _1191c3b80_mul64(static_cast<jule::U64>(_61014_x >> 1LL),9903520314283042200LLU);
	jule::U64 _6169_q = _61510_hi >> 28LL;
	return std::make_tuple(static_cast<jule::U32>(_6169_q),static_cast<jule::U32>(_61014_x - (_6169_q * 1000000000LL)));
}



inline jule::Int _14873e050_digit_zero(jule::Slice<jule::U8> _26519_dst) {
	{
		auto __julec_range_expr = _26519_dst;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _14873e050_i = 0;
			_iter_begin_4384160224:;
			{
				_26519_dst[static_cast<jule::Int>(_14873e050_i)]='0';
			}
			_iter_next_4384160224:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_14873e050_i; goto _iter_begin_4384160224; }
			_iter_end_4384160224:;
		}
	}
	return static_cast<jule::I64>(_26519_dst.len());
}



inline void _14873e050_trim(_14873e050_Decimal& _27514_a) {
	_iter_begin_4384164032:;
	if (!((_27514_a._field_nd > 0LL) && (_27514_a._field_d[static_cast<jule::Int>(_27514_a._field_nd - 1LL)] == '0'))) { goto _iter_end_4384164032; }
	{
		(_27514_a._field_nd)--;
	}
	_iter_next_4384164032:;
	goto _iter_begin_4384164032;
	_iter_end_4384164032:;
	if (_27514_a._field_nd == 0LL) {
		_27514_a._field_dp=0LL;
	}
}



inline void _14873e050_right_shift(_14873e050_Decimal& _28521_a,jule::Uint _28533_k) {
	jule::Int _28613_r = 0LL;
	jule::Int _28713_w = 0LL;
	jule::Uint _29013_n = 0LLU;
	_iter_begin_4384173760:;
	if (!((_29013_n >> _28533_k) == 0LL)) { goto _iter_end_4384173760; }
	{
		if (_28613_r >= _28521_a._field_nd) {
			if (_29013_n == 0LL) {
				_28521_a._field_nd=0LL;
				return;
			}
			_iter_begin_4384176240:;
			if (!((_29013_n >> _28533_k) == 0LL)) { goto _iter_end_4384176240; }
			{
				_29013_n=static_cast<jule::Uint>(_29013_n * 10LL);
				(_28613_r)++;
			}
			_iter_next_4384176240:;
			goto _iter_begin_4384176240;
			_iter_end_4384176240:;
			goto _iter_end_4384173760;
		}
		jule::Uint _30413_c = static_cast<jule::Uint>(_28521_a._field_d[static_cast<jule::Int>(_28613_r)]);
		_29013_n=static_cast<jule::Uint>(((_29013_n * 10LL) + _30413_c) - '0');
	}
	_iter_next_4384173760:;
	(_28613_r)++;
	goto _iter_begin_4384173760;
	_iter_end_4384173760:;
	_28521_a._field_dp-=static_cast<jule::Int>(_28613_r - 1LL);
	jule::Uint _3099_mask = static_cast<jule::Uint>(static_cast<jule::Uint>(1LL << _28533_k) - 1LL);
	_iter_begin_4384183232:;
	if (!(_28613_r < _28521_a._field_nd)) { goto _iter_end_4384183232; }
	{
		jule::Uint _31313_c = static_cast<jule::Uint>(_28521_a._field_d[static_cast<jule::Int>(_28613_r)]);
		jule::Uint _31413_dig = _29013_n >> _28533_k;
		_29013_n&=_3099_mask;
		_28521_a._field_d[static_cast<jule::Int>(_28713_w)]=static_cast<jule::U8>(_31413_dig + '0');
		(_28713_w)++;
		_29013_n=static_cast<jule::Uint>(((_29013_n * 10LL) + _31313_c) - '0');
	}
	_iter_next_4384183232:;
	(_28613_r)++;
	goto _iter_begin_4384183232;
	_iter_end_4384183232:;
	_iter_begin_4384188096:;
	if (!(_29013_n > 0LL)) { goto _iter_end_4384188096; }
	{
		jule::Uint _32313_dig = _29013_n >> _28533_k;
		_29013_n&=_3099_mask;
		if (_28713_w < 800LL) {
			_28521_a._field_d[static_cast<jule::Int>(_28713_w)]=static_cast<jule::U8>(_32313_dig + '0');
			(_28713_w)++;
		} else if (_32313_dig > 0LL) {
			_28521_a._field_trunc=true;
		}
		_29013_n=static_cast<jule::Uint>(_29013_n * 10LL);
	}
	_iter_next_4384188096:;
	goto _iter_begin_4384188096;
	_iter_end_4384188096:;
	_28521_a._field_nd=_28713_w;
	_14873e050_trim(_28521_a);
}



inline jule::Bool _14873e050_prefix_is_less_than(jule::Slice<jule::U8> _33924_b,jule::Str _33935_s) {
	jule::Int _34013_i = 0LL;
	_iter_begin_4384197312:;
	if (!(_34013_i < _33935_s.len())) { goto _iter_end_4384197312; }
	{
		if (_34013_i >= _33924_b.len()) {
			return true;
		}
		if (_33924_b[static_cast<jule::Int>(_34013_i)] != _33935_s[static_cast<jule::Int>(_34013_i)]) {
			return _33924_b[static_cast<jule::Int>(_34013_i)] < _33935_s[static_cast<jule::Int>(_34013_i)];
		}
	}
	_iter_next_4384197312:;
	(_34013_i)++;
	goto _iter_begin_4384197312;
	_iter_end_4384197312:;
	return false;
}



inline void _14873e050_left_shift(_14873e050_Decimal& _35320_a,jule::Uint _35332_k) {
	jule::Int _35413_delta = _14873e050_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_delta;
	if (_14873e050_prefix_is_less_than(_35320_a._field_d.slice(0LL,static_cast<jule::Int>(_35320_a._field_nd)),_14873e050_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_cutoff)) {
		(_35413_delta)--;
	}
	jule::Int _35913_r = _35320_a._field_nd;
	jule::Int _36013_w = _35320_a._field_nd + _35413_delta;
	jule::Uint _36313_n = 0LLU;
	(_35913_r)--;
	_iter_begin_4384211616:;
	if (!(_35913_r >= 0LL)) { goto _iter_end_4384211616; }
	{
		_36313_n+=static_cast<jule::Uint>((static_cast<jule::Uint>(_35320_a._field_d[static_cast<jule::Int>(_35913_r)]) - '0') << _35332_k);
		jule::Uint _36713_quo = jule::div(_36313_n,10LL);
		jule::Uint _36813_rem = _36313_n - (10LL * _36713_quo);
		(_36013_w)--;
		if (_36013_w < 800LL) {
			_35320_a._field_d[static_cast<jule::Int>(_36013_w)]=static_cast<jule::U8>(_36813_rem + '0');
		} else if (_36813_rem != 0LL) {
			_35320_a._field_trunc=true;
		}
		_36313_n=_36713_quo;
	}
	_iter_next_4384211616:;
	(_35913_r)--;
	goto _iter_begin_4384211616;
	_iter_end_4384211616:;
	_iter_begin_4384218576:;
	if (!(_36313_n > 0LL)) { goto _iter_end_4384218576; }
	{
		jule::Uint _38013_quo = jule::div(_36313_n,10LL);
		jule::Uint _38113_rem = _36313_n - (10LL * _38013_quo);
		(_36013_w)--;
		if (_36013_w < 800LL) {
			_35320_a._field_d[static_cast<jule::Int>(_36013_w)]=static_cast<jule::U8>(_38113_rem + '0');
		} else if (_38113_rem != 0LL) {
			_35320_a._field_trunc=true;
		}
		_36313_n=_38013_quo;
	}
	_iter_next_4384218576:;
	goto _iter_begin_4384218576;
	_iter_end_4384218576:;
	_35320_a._field_nd+=_35413_delta;
	if (_35320_a._field_nd >= 800LL) {
		_35320_a._field_nd=800LL;
	}
	_35320_a._field_dp+=_35413_delta;
	_14873e050_trim(_35320_a);
}



inline jule::Bool _14873e050_should_round_up(_14873e050_Decimal& _40021_a,jule::Int _40033_nd) {
	if ((_40033_nd < 0LL) || (_40033_nd >= _40021_a._field_nd)) {
		return false;
	}
	if ((_40021_a._field_d[static_cast<jule::Int>(_40033_nd)] == '5') && ((_40033_nd + 1LL) == _40021_a._field_nd)) {
		if (_40021_a._field_trunc) {
			return true;
		}
		return (_40033_nd > 0LL) && (jule::mod(_40021_a._field_d[static_cast<jule::Int>(_40033_nd - 1LL)] - '0',2LL) != 0LL);
	}
	return _40021_a._field_d[static_cast<jule::Int>(_40033_nd)] >= '5';
}



inline jule::Str _1486fb320_fmt_uint(jule::U64 _6217_i,jule::Int _6225_base) {
	if ((true && (_6217_i < 100LL)) && (_6225_base == 10LL)) {
		return _1486fb320_small(static_cast<jule::Int>(_6217_i));
	}
	jule::Str _6613_s;
	std::tie(std::ignore,_6613_s) = _1486fb320_fmt_bits(nullptr,_6217_i,_6225_base,false,false);
	return _6613_s;
}



inline jule::Str _1486fb320_fmt_int(jule::I64 _7316_i,jule::Int _7324_base) {
	if (((true && (0LL <= _7316_i)) && (_7316_i < 100LL)) && (_7324_base == 10LL)) {
		return _1486fb320_small(static_cast<jule::Int>(_7316_i));
	}
	jule::Str _7713_s;
	std::tie(std::ignore,_7713_s) = _1486fb320_fmt_bits(nullptr,static_cast<jule::U64>(_7316_i),_7324_base,_7316_i < 0LL,false);
	return _7713_s;
}



inline jule::Str _1486fb320_itoa(jule::Int _8213_i) {
	return _1486fb320_fmt_int(static_cast<jule::I64>(_8213_i),10LL);
}



inline jule::Str _1486fb320_small(jule::Int _8510_i) {
	if (_8510_i < 10LL) {
		return jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).slice(static_cast<jule::Int>(_8510_i),static_cast<jule::Int>(_8510_i + 1LL));
	}
	return jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200).slice(static_cast<jule::Int>(_8510_i * 2LL),static_cast<jule::Int>((_8510_i * 2LL) + 2LL));
}



inline jule::Bool _1486fb320_is_power_of_two(jule::Int _9220_x) {
	return (_9220_x & (_9220_x - 1LL)) == 0LL;
}



inline std::tuple<jule::Slice<jule::U8>,jule::Str> _1486fb320_fmt_bits(jule::Slice<jule::U8> _9917_dst,jule::U64 _9934_u,jule::Int _9942_base,jule::Bool _9953_neg,jule::Bool _9964_append_) {
	jule::Str _9992_s = jule::Str();
	jule::Slice<jule::U8> _9981_d = jule::Slice<jule::U8>();
	if ((_9942_base < 2LL) || (_9942_base > jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).len())) {
		jule::panic(jule::Str("std::conv: illegal base", 23));
	}
	jule::Array<jule::U8,65> _10513_a = jule::Array<jule::U8,65>({});
	jule::Int _10613_i = 65LL;
	if (_9953_neg) {
		_9934_u=static_cast<jule::U64>((-(_9934_u)));
	}
	if (_9942_base == 10LL) {
		if (false) {
			_iter_begin_4384266192:;
			if (!(_9934_u >= 1000000000LL)) { goto _iter_end_4384266192; }
			{
				jule::U64 _12521_q = jule::div(_9934_u,1000000000LL);
				jule::Uint _12625_us = static_cast<jule::Uint>(_9934_u - (_12521_q * 1000000000LL));
				jule::Int _12725_j = 4LL;
				_iter_begin_4384269984:;
				if (!(_12725_j > 0LL)) { goto _iter_end_4384269984; }
				{
					jule::Uint _12925_is = jule::mod(_12625_us,100LL) * 2LL;
					_12625_us/=100LL;
					_10613_i-=2LL;
					_10513_a[static_cast<jule::Int>(_10613_i + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_12925_is + 1LL)]);
					_10513_a[static_cast<jule::Int>(_10613_i + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_12925_is + 0LL)]);
				}
				_iter_next_4384269984:;
				(_12725_j)--;
				goto _iter_begin_4384269984;
				_iter_end_4384269984:;
				(_10613_i)--;
				_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((_12625_us * 2LL) + 1LL)]);
				_9934_u=_12521_q;
			}
			_iter_next_4384266192:;
			goto _iter_begin_4384266192;
			_iter_end_4384266192:;
		}
		jule::Uint _14717_us = static_cast<jule::Uint>(_9934_u);
		_iter_begin_4384280352:;
		if (!(_14717_us >= 100LL)) { goto _iter_end_4384280352; }
		{
			jule::Uint _14917_is = jule::mod(_14717_us,100LL) * 2LL;
			_14717_us/=100LL;
			_10613_i-=2LL;
			_10513_a[static_cast<jule::Int>(_10613_i + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_14917_is + 1LL)]);
			_10513_a[static_cast<jule::Int>(_10613_i + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_14917_is + 0LL)]);
		}
		_iter_next_4384280352:;
		goto _iter_begin_4384280352;
		_iter_end_4384280352:;
		jule::Uint _15713_is = _14717_us * 2LL;
		(_10613_i)--;
		_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15713_is + 1LL)]);
		if (_14717_us >= 10LL) {
			(_10613_i)--;
			_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15713_is)]);
		}
	} else if (_1486fb320_is_power_of_two(_9942_base)) {
		jule::Uint _17213_shift = static_cast<jule::Uint>(_1191c3b80_trailing_zeros(static_cast<jule::Uint>(_9942_base))) & 7LL;
		jule::U64 _17313_b = static_cast<jule::U64>(_9942_base);
		jule::Uint _17413_m = static_cast<jule::Uint>(_9942_base) - 1LL;
		_iter_begin_4384295504:;
		if (!(_9934_u >= _17313_b)) { goto _iter_end_4384295504; }
		{
			(_10613_i)--;
			_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u) & _17413_m)]);
			_9934_u>>=_17213_shift;
		}
		_iter_next_4384295504:;
		goto _iter_begin_4384295504;
		_iter_end_4384295504:;
		(_10613_i)--;
		_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u))]);
	} else {
		jule::U64 _18513_b = static_cast<jule::U64>(_9942_base);
		_iter_begin_4384300256:;
		if (!(_9934_u >= _18513_b)) { goto _iter_end_4384300256; }
		{
			(_10613_i)--;
			jule::U64 _19117_q = jule::div(_9934_u,_18513_b);
			_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u - (_19117_q * _18513_b)))]);
			_9934_u=_19117_q;
		}
		_iter_next_4384300256:;
		goto _iter_begin_4384300256;
		_iter_end_4384300256:;
		(_10613_i)--;
		_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u))]);
	}
	if (_9953_neg) {
		(_10613_i)--;
		_10513_a[static_cast<jule::Int>(_10613_i)]='-';
	}
	if (_9964_append_) {
		_9981_d=jule::append(_9917_dst,_10513_a.slice(static_cast<jule::Int>(_10613_i)));
		return std::make_tuple(_9981_d,_9992_s);
	}
	_9992_s=static_cast<jule::Str>(_10513_a.slice(static_cast<jule::Int>(_10613_i)));
	return std::make_tuple(_9981_d,_9992_s);
}



inline void _10868c730_exit(jule::Int _1213_code) {
	_118613db0_exit(_1213_code);
}



inline jule::Str _10868c730_executable(void) {
	return jule::executable();
}



inline jule::Bool _148682040_is_std_header_path(jule::Str _2627_p) {
	return (_2627_p[0LL] == '<') && (_2627_p[static_cast<jule::Int>(_2627_p.len() - 1LL)] == '>');
}



inline jule::Bool _148682040_is_valid_header_ext(jule::Str _3128_ext) {
	{
		auto __julec_range_expr = _148682040_CPP_HEADER_EXTS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _148682040_valid_ext = *__julec_range_begin;
			_iter_begin_4384613856:;
			{
				if (_3128_ext == _148682040_valid_ext) {
					return true;
				}
			}
			_iter_next_4384613856:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _148682040_valid_ext = *__julec_range_begin; goto _iter_begin_4384613856; }
			_iter_end_4384613856:;
		}
	}
	return false;
}



inline jule::Bool _148682040_is_valid_cpp_ext(jule::Str _4225_ext) {
	{
		auto __julec_range_expr = _148682040_CPP_EXTS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _148682040_e = *__julec_range_begin;
			_iter_begin_4384612272:;
			{
				if (_4225_ext == _148682040_e) {
					return true;
				}
			}
			_iter_next_4384612272:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _148682040_e = *__julec_range_begin; goto _iter_begin_4384612272; }
			_iter_end_4384612272:;
		}
	}
	{
		auto __julec_range_expr = _148682040_OBJECTIVE_CPP_EXTS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _148682040_e = *__julec_range_begin;
			_iter_begin_4384620528:;
			{
				if (_4225_ext == _148682040_e) {
					return true;
				}
			}
			_iter_next_4384620528:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _148682040_e = *__julec_range_begin; goto _iter_begin_4384620528; }
			_iter_end_4384620528:;
		}
	}
	return false;
}



inline std::tuple<jule::Bool,jule::Bool> _148637750_check_os(jule::Str _713_arg) {
	jule::Bool _735_exist = jule::Bool();
	jule::Bool _725_ok = jule::Bool();
	_725_ok=false;
	_735_exist=true;
	{
		auto _match_expr{ _713_arg };
		if (!((jule::Str("windows", 7)) == _match_expr)) { goto _case_end_4384626960; }
		_case_begin_4384626960:;
		{
			_725_ok=_14903a5c0_is_windows(_149048970_OS);
		}
		goto _match_end_4384624640;
		_case_end_4384626960:;
		if (!((jule::Str("darwin", 6)) == _match_expr)) { goto _case_end_4384625408; }
		_case_begin_4384625408:;
		{
			_725_ok=_14903a5c0_is_darwin(_149048970_OS);
		}
		goto _match_end_4384624640;
		_case_end_4384625408:;
		if (!((jule::Str("linux", 5)) == _match_expr)) { goto _case_end_4384625520; }
		_case_begin_4384625520:;
		{
			_725_ok=_14903a5c0_is_linux(_149048970_OS);
		}
		goto _match_end_4384624640;
		_case_end_4384625520:;
		if (!((jule::Str("unix", 4)) == _match_expr)) { goto _case_end_4384625632; }
		_case_begin_4384625632:;
		{
			_725_ok=_14903a5c0_is_unix(_149048970_OS);
		}
		goto _match_end_4384624640;
		_case_end_4384625632:;
		_case_begin_4384624352:;
		{
			_725_ok=true;
			_735_exist=false;
		}
		goto _match_end_4384624640;
		_case_end_4384624352:;
		_match_end_4384624640:;
	}
	return std::make_tuple(_725_ok,_735_exist);
}



inline std::tuple<jule::Bool,jule::Bool> _148637750_check_arch(jule::Str _2415_arg) {
	jule::Bool _2437_exist = jule::Bool();
	jule::Bool _2427_ok = jule::Bool();
	_2427_ok=false;
	_2437_exist=true;
	{
		auto _match_expr{ _2415_arg };
		if (!((jule::Str("i386", 4)) == _match_expr)) { goto _case_end_4384634096; }
		_case_begin_4384634096:;
		{
			_2427_ok=_14903a5c0_is_i386(_149048970_ARCH);
		}
		goto _match_end_4384631776;
		_case_end_4384634096:;
		if (!((jule::Str("amd64", 5)) == _match_expr)) { goto _case_end_4384632544; }
		_case_begin_4384632544:;
		{
			_2427_ok=_14903a5c0_is_amd64(_149048970_ARCH);
		}
		goto _match_end_4384631776;
		_case_end_4384632544:;
		if (!((jule::Str("arm64", 5)) == _match_expr)) { goto _case_end_4384632656; }
		_case_begin_4384632656:;
		{
			_2427_ok=_14903a5c0_is_arm64(_149048970_ARCH);
		}
		goto _match_end_4384631776;
		_case_end_4384632656:;
		if (!((jule::Str("64bit", 5)) == _match_expr)) { goto _case_end_4384632768; }
		_case_begin_4384632768:;
		{
			_2427_ok=_14903a5c0_is_64bit(_149048970_ARCH);
		}
		goto _match_end_4384631776;
		_case_end_4384632768:;
		if (!((jule::Str("32bit", 5)) == _match_expr)) { goto _case_end_4384633024; }
		_case_begin_4384633024:;
		{
			_2427_ok=_14903a5c0_is_32bit(_149048970_ARCH);
		}
		goto _match_end_4384631776;
		_case_end_4384633024:;
		_case_begin_4384631488:;
		{
			_2427_ok=true;
			_2437_exist=false;
		}
		goto _match_end_4384631776;
		_case_end_4384631488:;
		_match_end_4384631776:;
	}
	return std::make_tuple(_2427_ok,_2437_exist);
}



inline jule::Bool _148637750_is_pass_file_annotation(jule::Str _4336_p) {
	_4336_p=_149060fe0_base(_4336_p);
	jule::I64 _459_n = _4336_p.len();
	_4336_p=_4336_p.slice(0LL,static_cast<jule::Int>(_459_n - _149060fe0_ext(_4336_p).len()));
	jule::Str _5113_a1 = jule::Str("", 0);
	jule::Str _5413_a2 = jule::Str("", 0);
	jule::Int _5713_i = _4336_p.rfind(jule::Str("_", 1));
	if (_5713_i == -1LL) {
		jule::Bool _6018_ok;
		jule::Bool _6026_exist;
		std::tie(_6018_ok,_6026_exist) = _148637750_check_os(_4336_p);
		if (_6026_exist) {
			return _6018_ok;
		}
		std::tie(_6018_ok,_6026_exist) = _148637750_check_arch(_4336_p);
		return (!(_6026_exist)) || _6018_ok;
	}
	if ((_5713_i + 1LL) >= _459_n) {
		return true;
	}
	_5113_a1=_4336_p.slice(static_cast<jule::Int>(_5713_i + 1LL));
	_4336_p=_4336_p.slice(0LL,static_cast<jule::Int>(_5713_i));
	_5713_i=static_cast<jule::Int>(_4336_p.rfind(jule::Str("_", 1)));
	if (_5713_i != -1LL) {
		_5413_a2=_4336_p.slice(static_cast<jule::Int>(_5713_i + 1LL));
	}
	if (_5413_a2 == jule::Str("", 0)) {
		jule::Bool _8118_ok;
		jule::Bool _8126_exist;
		std::tie(_8118_ok,_8126_exist) = _148637750_check_os(_5113_a1);
		if (_8126_exist) {
			return _8118_ok;
		}
		std::tie(_8118_ok,_8126_exist) = _148637750_check_arch(_5113_a1);
		return (!(_8126_exist)) || _8118_ok;
	}
	jule::Bool _8914_ok;
	jule::Bool _8922_exist;
	std::tie(_8914_ok,_8922_exist) = _148637750_check_arch(_5113_a1);
	if (_8922_exist) {
		if ((!(_8914_ok))) {
			return false;
		}
		jule::Bool _9414_ok;
		jule::Bool _9418_exist;
		std::tie(_9414_ok,_9418_exist) = _148637750_check_os(_5413_a2);
		return (!(_9418_exist)) || _9414_ok;
	}
	std::tie(_8914_ok,_8922_exist) = _148637750_check_os(_5113_a1);
	return (!(_8922_exist)) || _8914_ok;
}



inline jule::Str _1486379e0_logf(jule::Str _25113_fmt,jule::Slice<jule::Any> _25126_args) {
	return _1486379e0_apply_fmt(_25113_fmt,_25126_args);
}



inline jule::Str _1486379e0_arg_to_str(jule::Any _25515_arg) {
	{
		auto _match_expr{ _25515_arg };
		if (!(_match_expr.type_is<jule::Str>())) { goto _case_end_4384668240; }
		_case_begin_4384668240:;
		{
			return _25515_arg.operator jule::Str();
		}
		goto _match_end_4384666144;
		_case_end_4384668240:;
		if (!(_match_expr.type_is<jule::U8>())) { goto _case_end_4384668352; }
		_case_begin_4384668352:;
		{
			return static_cast<jule::Str>(_25515_arg.operator jule::U8());
		}
		goto _match_end_4384666144;
		_case_end_4384668352:;
		if (!(_match_expr.type_is<jule::I32>())) { goto _case_end_4384668464; }
		_case_begin_4384668464:;
		{
			return static_cast<jule::Str>(_25515_arg.operator jule::I32());
		}
		goto _match_end_4384666144;
		_case_end_4384668464:;
		_case_begin_4384665264:;
		{
			return jule::Str("<fmt?>", 6);
		}
		goto _match_end_4384666144;
		_case_end_4384665264:;
		_match_end_4384666144:;
	}
}



inline jule::Int _1486379e0_find_next_fmt(jule::Str _26418_fmt) {
	{
		auto __julec_range_expr = _26418_fmt;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1486379e0_i = 0;
			jule::U8 _1486379e0_b = *__julec_range_begin;
			_iter_begin_4384671920:;
			{
				if (_1486379e0_b == '@') {
					return _1486379e0_i;
				}
			}
			_iter_next_4384671920:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1486379e0_i; _1486379e0_b = *__julec_range_begin; goto _iter_begin_4384671920; }
			_iter_end_4384671920:;
		}
	}
	return -1LL;
}



inline jule::Str _1486379e0_apply_fmt(jule::Str _27318_fmt,jule::Slice<jule::Any> _27328_args) {
	jule::Str _27413_s = jule::Str("", 0);
	{
		auto __julec_range_expr = _27328_args;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1486379e0_arg = *__julec_range_begin;
			_iter_begin_4382639088:;
			{
				jule::Int _27713_i = _1486379e0_find_next_fmt(_27318_fmt);
				if (_27713_i == -1LL) {
					goto _iter_end_4382639088;
				}
				_27413_s+=_27318_fmt.slice(0LL,static_cast<jule::Int>(_27713_i));
				_27413_s+=_1486379e0_arg_to_str(_1486379e0_arg);
				_27318_fmt=_27318_fmt.slice(static_cast<jule::Int>(_27713_i + 1LL));
			}
			_iter_next_4382639088:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1486379e0_arg = *__julec_range_begin; goto _iter_begin_4382639088; }
			_iter_end_4382639088:;
		}
	}
	_27413_s+=_27318_fmt;
	return _27413_s;
}



inline jule::Bool _149036e70_is_top_directive(jule::Str _3625_directive) {
	return (_3625_directive == jule::Str("pass", 4)) || (_3625_directive == jule::Str("build", 5));
}



inline jule::Bool _14903a5c0_is_windows(jule::Str _5119_os) {
	return _5119_os == jule::Str("windows", 7);
}



inline jule::Bool _14903a5c0_is_darwin(jule::Str _5318_os) {
	return _5318_os == jule::Str("darwin", 6);
}



inline jule::Bool _14903a5c0_is_linux(jule::Str _5517_os) {
	return _5517_os == jule::Str("linux", 5);
}



inline jule::Bool _14903a5c0_is_i386(jule::Str _5716_arch) {
	return _5716_arch == jule::Str("i386", 4);
}



inline jule::Bool _14903a5c0_is_amd64(jule::Str _5917_arch) {
	return _5917_arch == jule::Str("amd64", 5);
}



inline jule::Bool _14903a5c0_is_arm64(jule::Str _6117_arch) {
	return _6117_arch == jule::Str("arm64", 5);
}



inline jule::Bool _14903a5c0_is_unix(jule::Str _6316_os) {
	return _14903a5c0_is_darwin(_6316_os) || _14903a5c0_is_linux(_6316_os);
}



inline jule::Bool _14903a5c0_is_32bit(jule::Str _6517_arch) {
	return _14903a5c0_is_i386(_6517_arch);
}



inline jule::Bool _14903a5c0_is_64bit(jule::Str _6717_arch) {
	return _14903a5c0_is_amd64(_6717_arch) || _14903a5c0_is_arm64(_6717_arch);
}



inline void _149048970_exit_err(jule::Str _2513_msg) {
	
	jule::outln(_2513_msg);
	_10868c730_exit(1LL);
}



inline void _149048970_init(void) {
	jule::Str _3313_path = _10868c730_executable();
	if (_3313_path == jule::Str("", 0)) {
		_149048970_exit_err(jule::Str("std::jule::build: executable file cannot found", 46));
	}
	jule::Str _3810_pwd;
	jule::Int _3815_err;
	std::tie(_3810_pwd,_3815_err) = _1490c0580_working_dir();
	if (_3815_err != 0LLU) {
		_149048970_exit_err(jule::Str("std::jule::build: working directory path cannot found", 53));
	}
	jule::Str _439_path_exec = _149060fe0_dir(_3313_path);
	_3313_path=_149060fe0_join(jule::Slice<jule::Str>({_439_path_exec,jule::Str("..", 2)}));
	{
		(*((&(_149048970_PATH_WD))))=_3810_pwd;
		(*((&(_149048970_PATH_EXEC))))=_439_path_exec;
		(*((&(_149048970_PATH_STDLIB))))=_149060fe0_join(jule::Slice<jule::Str>({_3313_path,jule::Str("std", 3)}));
		(*((&(_149048970_PATH_API))))=_149060fe0_join(jule::Slice<jule::Str>({_149048970_PATH_EXEC,jule::Str("..", 2)}));
		(*((&(_149048970_PATH_API))))=_149060fe0_join(jule::Slice<jule::Str>({_149048970_PATH_API,jule::Str("api", 3)}));
		(*((&(_149048970_PATH_API))))=_149060fe0_join(jule::Slice<jule::Str>({_149048970_PATH_API,jule::Str("jule.hpp", 8)}));
	}
}



inline jule::Bool _149036530_is_jule(jule::Str _2316_path) {
	return _149060fe0_ext(_2316_path) == jule::Str(".jule", 5);
}



inline jule::Int _14877b170_get_last_fs_error(void) {
	jule::Int _739_err = _1490cfc20_get_last_errno();
	{
		auto _match_expr{ _739_err };
		if (!((13LL) == _match_expr)) { goto _case_end_4381038784; }
		_case_begin_4381038784:;
		{
			return 1LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381038784:;
		if (!((5LL) == _match_expr)) { goto _case_end_4381038384; }
		_case_begin_4381038384:;
		{
			return 2LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381038384:;
		if (!((40LL) == _match_expr)) { goto _case_end_4381038496; }
		_case_begin_4381038496:;
		{
			return 3LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381038496:;
		if (!((36LL) == _match_expr)) { goto _case_end_4381038608; }
		_case_begin_4381038608:;
		{
			return 4LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381038608:;
		if (!((2LL) == _match_expr)) { goto _case_end_4381037824; }
		_case_begin_4381037824:;
		{
			return 5LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381037824:;
		if (!((20LL) == _match_expr)) { goto _case_end_4381037936; }
		_case_begin_4381037936:;
		{
			return 6LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381037936:;
		if (!((75LL) == _match_expr)) { goto _case_end_4381038048; }
		_case_begin_4381038048:;
		{
			return 7LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381038048:;
		if (!((9LL) == _match_expr)) { goto _case_end_4381038992; }
		_case_begin_4381038992:;
		{
			return 8LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381038992:;
		if (!((24LL) == _match_expr)) { goto _case_end_4381039104; }
		_case_begin_4381039104:;
		{
			return 9LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381039104:;
		if (!((23LL) == _match_expr)) { goto _case_end_4381039216; }
		_case_begin_4381039216:;
		{
			return 10LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381039216:;
		if (!((12LL) == _match_expr)) { goto _case_end_4381039952; }
		_case_begin_4381039952:;
		{
			return 11LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381039952:;
		if (!((17LL) == _match_expr)) { goto _case_end_4381040064; }
		_case_begin_4381040064:;
		{
			return 12LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381040064:;
		if (!((4LL) == _match_expr)) { goto _case_end_4381040176; }
		_case_begin_4381040176:;
		{
			return 13LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381040176:;
		if (!((22LL) == _match_expr)) { goto _case_end_4381040288; }
		_case_begin_4381040288:;
		{
			return 14LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381040288:;
		if (!((21LL) == _match_expr)) { goto _case_end_4381040400; }
		_case_begin_4381040400:;
		{
			return 15LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381040400:;
		if (!((63LL) == _match_expr)) { goto _case_end_4381040512; }
		_case_begin_4381040512:;
		{
			return 16LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381040512:;
		if (!((28LL) == _match_expr)) { goto _case_end_4381040624; }
		_case_begin_4381040624:;
		{
			return 17LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381040624:;
		if (!((6LL) == _match_expr)) { goto _case_end_4381040736; }
		_case_begin_4381040736:;
		{
			return 18LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381040736:;
		if (!((30LL) == _match_expr)) { goto _case_end_4381040848; }
		_case_begin_4381040848:;
		{
			return 19LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381040848:;
		if (!((11LL) == _match_expr)) { goto _case_end_4381040960; }
		_case_begin_4381040960:;
		{
			return 20LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381040960:;
		if (!((26LL) == _match_expr || (16LL) == _match_expr)) { goto _case_end_4381041072; }
		_case_begin_4381041072:;
		{
			return 21LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381041072:;
		if (!((27LL) == _match_expr)) { goto _case_end_4381041184; }
		_case_begin_4381041184:;
		{
			return 22LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381041184:;
		if (!((32LL) == _match_expr)) { goto _case_end_4381041296; }
		_case_begin_4381041296:;
		{
			return 23LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381041296:;
		if (!((34LL) == _match_expr)) { goto _case_end_4381041424; }
		_case_begin_4381041424:;
		{
			return 24LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381041424:;
		if (!((29LL) == _match_expr)) { goto _case_end_4381041552; }
		_case_begin_4381041552:;
		{
			return 25LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381041552:;
		if (!((105LL) == _match_expr)) { goto _case_end_4381041680; }
		_case_begin_4381041680:;
		{
			return 26LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381041680:;
		if (!((74LL) == _match_expr)) { goto _case_end_4381041808; }
		_case_begin_4381041808:;
		{
			return 27LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381041808:;
		if (!((39LL) == _match_expr)) { goto _case_end_4381041936; }
		_case_begin_4381041936:;
		{
			return 28LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381041936:;
		_case_begin_4381037520:;
		{
			return 0LLU;
		}
		goto _match_end_4381036992;
		_case_end_4381037520:;
		_match_end_4381036992:;
	}
}



inline std::tuple<jule::Ref<_1487caab0_File>,jule::Int> _14877cb80_open(jule::Str _1813_path,jule::Int _1824_flag,jule::Int _1837_mode) {
	jule::Int _199_handle = _1490d0f50_open((&(_1813_path[0LL])),static_cast<jule::Int>(_1824_flag),_1837_mode);
	if (_199_handle == -1LL) {
		return std::make_tuple(jule::new_ref<_1487caab0_File>(),_14877b170_get_last_fs_error());
	}
	return std::make_tuple(jule::new_struct<_1487caab0_File>(new( std::nothrow ) _1487caab0_File(_199_handle)),0LLU);
}



inline jule::Int _14877cb80_remove_file(jule::Str _3020_path) {
	if (_1490d0f50_unlink((&(_3020_path[0LL]))) == 0LL) {
		return 0LLU;
	}
	return _14877b170_get_last_fs_error();
}



inline std::tuple<jule::Ref<_1487ca390_Status>,jule::Int> _148796140_stat(jule::Str _1113_path) {
	jule::Int _1138_err = 0LLU;
	jule::Ref<_1487ca390_Status> _1126_s = jule::Ref<_1487ca390_Status>();
	struct stat _1213_handle = (struct stat){};
	jule::Int _139_code = _1490d0f50_stat((&(_1113_path[0LL])),(&(_1213_handle)));
	if (_139_code != -1LL) {
		_1138_err=0LLU;
		_1126_s=jule::new_struct<_1487ca390_Status>(new( std::nothrow ) _1487ca390_Status(static_cast<jule::Uint>(_1213_handle.st_mode),static_cast<jule::Uint>(_1213_handle.st_size)));
	} else {
		_1138_err=_14877b170_get_last_fs_error();
	}
	return std::make_tuple(_1126_s,_1138_err);
}



inline std::tuple<jule::Slice<jule::U8>,jule::Int> _1487caab0_read_file(jule::Str _12118_path) {
	jule::Ref<_1487ca390_Status> _12210_s;
	jule::Int _12217_err;
	std::tie(_12210_s,_12217_err) = _148796140_stat(_12118_path);
	if (_12217_err != 0LLU) {
		return std::make_tuple(nullptr,_12217_err);
	}
	if ((!(_12210_s->_method_is_reg()))) {
		return std::make_tuple(nullptr,15LLU);
	}
	if (_12210_s->_field_size == 0LL) {
		return std::make_tuple(jule::Slice<jule::U8>::alloc(0LL),0LLU);
	}
	jule::Ref<_1487caab0_File> _13514_f;
	std::tie(_13514_f,_12217_err) = _14877cb80_open(_12118_path,0LL,0LL);
	if (_12217_err != 0LLU) {
		return std::make_tuple(nullptr,_12217_err);
	}
	__JULE_DEFER({
		_13514_f->_method_close();
	});
	jule::Slice<jule::U8> _14113_buff = jule::Slice<jule::U8>::alloc(static_cast<jule::Int>(_12210_s->_field_size));
	jule::Int _14210_n;
	std::tie(_14210_n,_12217_err) = _13514_f->_method_read(_14113_buff);
	if (_12217_err != 0LLU) {
		return std::make_tuple(nullptr,_12217_err);
	}
	return std::make_tuple(_14113_buff.slice(0LL,static_cast<jule::Int>(_14210_n)),0LLU);
}



inline std::tuple<jule::Slice<jule::Ref<_14877ba40_DirEntry>>,jule::Int> _1089dc920_read_dir(jule::Str _2117_path) {
	jule::Int _2152_err = 0LLU;
	jule::Slice<jule::Ref<_14877ba40_DirEntry>> _2130_dirents = jule::Slice<jule::Ref<_14877ba40_DirEntry>>();
	DIR* _2213_dir = _1490d0f50_opendir((&(_2117_path[0LL])));
	if (_2213_dir == nullptr) {
		_2152_err=_14877b170_get_last_fs_error();
		return std::make_tuple(_2130_dirents,_2152_err);
	}
	_iter_begin_4381097328:;
	{
		struct dirent* _2813_dirent = _1490d0f50_readdir(_2213_dir);
		if (_2813_dirent == nullptr) {
			goto _iter_end_4381097328;
		}
		jule::Str _3213_name = _1490d0f50_byte_ptr_to_str(((jule::U8*)(_2813_dirent->d_name)));
		jule::Ref<_1487ca390_Status> _3314_stat;
		jule::Int _3320_serr;
		std::tie(_3314_stat,_3320_serr) = _148796140_stat(_149060fe0_join(jule::Slice<jule::Str>({_2117_path,_3213_name})));
		if (_3320_serr != 0LLU) {
			_2152_err=_3320_serr;
			_2130_dirents=nullptr;
			goto _iter_end_4381097328;
		}
		_2130_dirents=jule::append(_2130_dirents,jule::Slice<jule::Ref<_14877ba40_DirEntry>>({jule::new_struct<_14877ba40_DirEntry>(new( std::nothrow ) _14877ba40_DirEntry(_3213_name,_3314_stat))}));
	}
	_iter_next_4381097328:;
	goto _iter_begin_4381097328;
	_iter_end_4381097328:;
	_1490d0f50_closedir(_2213_dir);
	return std::make_tuple(_2130_dirents,_2152_err);
}



inline jule::Int _1089dc920_create_dir(jule::Str _5119_path) {
	if (_1490d0f50_mkdir((&(_5119_path[0LL])),448LL) == 0LL) {
		return 0LLU;
	}
	return _14877b170_get_last_fs_error();
}



inline jule::Int _1089dc920_remove_dir(jule::Str _6419_path) {
	if (_1490d0f50_rmdir((&(_6419_path[0LL]))) == 0LL) {
		return 0LLU;
	}
	return _14877b170_get_last_fs_error();
}



inline jule::Bool _103458e80_full_rune(jule::Slice<jule::U8> _13718_p) {
	if (_13718_p.len() == 0LL) {
		return false;
	}
	jule::U8 _1419_x = _103458e80_FIRST[static_cast<jule::Int>(_13718_p[0LL])];
	if (_13718_p.len() >= static_cast<jule::Int>(_1419_x & 7LL)) {
		return true;
	}
	_103458e80_accept_range _1469_accept = _103458e80_ACCEPT_RANGES[static_cast<jule::Int>(_1419_x >> 4LL)];
	if ((_13718_p.len() > 1LL) && ((_13718_p[1LL] < _1469_accept._field_lo) || (_1469_accept._field_hi < _13718_p[1LL]))) {
		return true;
	} else if ((_13718_p.len() > 2LL) && ((_13718_p[2LL] < 128LL) || (191LL < _13718_p[2LL]))) {
		return true;
	}
	return false;
}



inline jule::Bool _103458e80_full_rune_str(jule::Str _15622_s) {
	if (_15622_s.len() == 0LL) {
		return false;
	}
	jule::U8 _1609_x = _103458e80_FIRST[static_cast<jule::Int>(_15622_s[0LL])];
	if (_15622_s.len() >= static_cast<jule::Int>(_1609_x & 7LL)) {
		return true;
	}
	_103458e80_accept_range _1659_accept = _103458e80_ACCEPT_RANGES[static_cast<jule::Int>(_1609_x >> 4LL)];
	if ((_15622_s.len() > 1LL) && ((_15622_s[1LL] < _1659_accept._field_lo) || (_1659_accept._field_hi < _15622_s[1LL]))) {
		return true;
	} else if ((_15622_s.len() > 2LL) && ((_15622_s[2LL] < 128LL) || (191LL < _15622_s[2LL]))) {
		return true;
	}
	return false;
}



inline std::tuple<jule::I32,jule::Int> _103458e80_decode_rune(jule::Slice<jule::U8> _18220_p) {
	jule::Int _18242_size = jule::Int();
	jule::I32 _18233_r = jule::I32();
	if (_18220_p.len() < 1LL) {
		_18233_r = 65533LL;
		_18242_size = 0LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _1869_p0 = _18220_p[0LL];
	jule::U8 _1879_x = _103458e80_FIRST[static_cast<jule::Int>(_1869_p0)];
	if (_1879_x >= 240LL) {
		jule::I32 _19213_mask = static_cast<jule::U8>((_1879_x << 31LL) >> 31LL);
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_18220_p[0LL]) & (~(_19213_mask))) | (65533LL & _19213_mask));
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::Int _1959_sz = static_cast<jule::Int>(_1879_x & 7LL);
	_103458e80_accept_range _1969_accept = _103458e80_ACCEPT_RANGES[static_cast<jule::Int>(_1879_x >> 4LL)];
	if (_18220_p.len() < _1959_sz) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2009_b1 = _18220_p[1LL];
	if ((_2009_b1 < _1969_accept._field_lo) || (_1969_accept._field_hi < _2009_b1)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 2LL) {
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_1869_p0 & 31LL) << 6LL) | static_cast<jule::I32>(_2009_b1 & 63LL));
		_18242_size = 2LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2079_b2 = _18220_p[2LL];
	if ((_2079_b2 < 128LL) || (191LL < _2079_b2)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 3LL) {
		_18233_r = static_cast<jule::I32>(((static_cast<jule::I32>(_1869_p0 & 15LL) << 12LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 6LL)) | static_cast<jule::I32>(_2079_b2 & 63LL));
		_18242_size = 3LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2149_b3 = _18220_p[3LL];
	if ((_2149_b3 < 128LL) || (191LL < _2149_b3)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	_18233_r = static_cast<jule::I32>((((static_cast<jule::I32>(_1869_p0 & 7LL) << 18LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 12LL)) | (static_cast<jule::I32>(_2079_b2 & 63LL) << 6LL)) | static_cast<jule::I32>(_2149_b3 & 63LL));
	_18242_size = 4LL;
	return std::make_tuple(_18233_r,_18242_size);
}



inline std::tuple<jule::I32,jule::Int> _103458e80_decode_rune_str(jule::Str _22924_s) {
	jule::Int _22943_size = jule::Int();
	jule::I32 _22934_r = jule::I32();
	if (_22924_s.len() < 1LL) {
		_22934_r = 65533LL;
		_22943_size = 0LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::U8 _2339_s0 = _22924_s[0LL];
	jule::U8 _2349_x = _103458e80_FIRST[static_cast<jule::Int>(_2339_s0)];
	if (_2349_x >= 240LL) {
		jule::I32 _23913_mask = static_cast<jule::U8>((_2349_x << 31LL) >> 31LL);
		_22934_r = static_cast<jule::I32>((static_cast<jule::I32>(_22924_s[0LL]) & (~(_23913_mask))) | (65533LL & _23913_mask));
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::Int _2429_sz = static_cast<jule::Int>(_2349_x & 7LL);
	_103458e80_accept_range _2439_accept = _103458e80_ACCEPT_RANGES[static_cast<jule::Int>(_2349_x >> 4LL)];
	if (_22924_s.len() < _2429_sz) {
		_22934_r = 65533LL;
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::U8 _2479_s1 = _22924_s[1LL];
	if ((_2479_s1 < _2439_accept._field_lo) || (_2439_accept._field_hi < _2479_s1)) {
		_22934_r = 65533LL;
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	if (_2429_sz <= 2LL) {
		_22934_r = static_cast<jule::I32>((static_cast<jule::I32>(_2339_s0 & 31LL) << 6LL) | static_cast<jule::I32>(_2479_s1 & 63LL));
		_22943_size = 2LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::U8 _2549_s2 = _22924_s[2LL];
	if ((_2549_s2 < 128LL) || (191LL < _2549_s2)) {
		_22934_r = 65533LL;
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	if (_2429_sz <= 3LL) {
		_22934_r = static_cast<jule::I32>(((static_cast<jule::I32>(_2339_s0 & 15LL) << 12LL) | (static_cast<jule::I32>(_2479_s1 & 63LL) << 6LL)) | static_cast<jule::I32>(_2549_s2 & 63LL));
		_22943_size = 3LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::U8 _2619_s3 = _22924_s[3LL];
	if ((_2619_s3 < 128LL) || (191LL < _2619_s3)) {
		_22934_r = 65533LL;
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	_22934_r = static_cast<jule::I32>((((static_cast<jule::I32>(_2339_s0 & 7LL) << 18LL) | (static_cast<jule::I32>(_2479_s1 & 63LL) << 12LL)) | (static_cast<jule::I32>(_2549_s2 & 63LL) << 6LL)) | static_cast<jule::I32>(_2619_s3 & 63LL));
	_22943_size = 4LL;
	return std::make_tuple(_22934_r,_22943_size);
}



inline std::tuple<jule::I32,jule::Int> _103458e80_decode_last_rune(jule::Slice<jule::U8> _27625_p) {
	jule::Int _27647_size = jule::Int();
	jule::I32 _27638_r = jule::I32();
	if (_27625_p.len() == 0LL) {
		_27638_r = 65533LL;
		_27647_size = 0LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I64 _2809_end = _27625_p.len();
	jule::I64 _28113_start = _2809_end - 1LL;
	_27638_r=static_cast<jule::I32>(_27625_p[static_cast<jule::Int>(_28113_start)]);
	if (_27638_r < 128LL) {
		_27638_r = _27638_r;
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I64 _28913_lim = _2809_end - 4LL;
	if (_28913_lim < 0LL) {
		_28913_lim=0LL;
	}
	(_28113_start)--;
	_iter_begin_4384720416:;
	if (!(_28113_start >= _28913_lim)) { goto _iter_end_4384720416; }
	{
		if (_103458e80_rune_start(_27625_p[static_cast<jule::Int>(_28113_start)])) {
			goto _iter_end_4384720416;
		}
	}
	_iter_next_4384720416:;
	(_28113_start)--;
	goto _iter_begin_4384720416;
	_iter_end_4384720416:;
	if (_28113_start < 0LL) {
		_28113_start=0LL;
	}
	std::tie(_27638_r,_27647_size) = _103458e80_decode_rune(_27625_p.slice(static_cast<jule::Int>(_28113_start),static_cast<jule::Int>(_2809_end)));
	if ((_28113_start + _27647_size) != _2809_end) {
		_27638_r = 65533LL;
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	_27638_r = _27638_r;
	_27647_size = _27647_size;
	return std::make_tuple(_27638_r,_27647_size);
}



inline std::tuple<jule::I32,jule::Int> _103458e80_decode_last_rune_str(jule::Str _31729_s) {
	jule::Int _31748_size = jule::Int();
	jule::I32 _31739_r = jule::I32();
	if (_31729_s.len() == 0LL) {
		_31739_r = 65533LL;
		_31748_size = 0LL;
		return std::make_tuple(_31739_r,_31748_size);
	}
	jule::I64 _3219_end = _31729_s.len();
	jule::I64 _32213_start = _3219_end - 1LL;
	_31739_r=static_cast<jule::I32>(_31729_s[static_cast<jule::Int>(_32213_start)]);
	if (_31739_r < 128LL) {
		_31739_r = _31739_r;
		_31748_size = 1LL;
		return std::make_tuple(_31739_r,_31748_size);
	}
	jule::I64 _33013_lim = _3219_end - 4LL;
	if (_33013_lim < 0LL) {
		_33013_lim=0LL;
	}
	(_32213_start)--;
	_iter_begin_4384737856:;
	if (!(_32213_start >= _33013_lim)) { goto _iter_end_4384737856; }
	{
		if (_103458e80_rune_start(_31729_s[static_cast<jule::Int>(_32213_start)])) {
			goto _iter_end_4384737856;
		}
	}
	_iter_next_4384737856:;
	(_32213_start)--;
	goto _iter_begin_4384737856;
	_iter_end_4384737856:;
	if (_32213_start < 0LL) {
		_32213_start=0LL;
	}
	std::tie(_31739_r,_31748_size) = _103458e80_decode_rune_str(_31729_s.slice(static_cast<jule::Int>(_32213_start),static_cast<jule::Int>(_3219_end)));
	if ((_32213_start + _31748_size) != _3219_end) {
		_31739_r = 65533LL;
		_31748_size = 1LL;
		return std::make_tuple(_31739_r,_31748_size);
	}
	_31739_r = _31739_r;
	_31748_size = _31748_size;
	return std::make_tuple(_31739_r,_31748_size);
}



inline jule::Int _103458e80_rune_len(jule::I32 _35217_r) {
	{
		if (!((_35217_r < 0LL))) { goto _case_end_4384746656; }
		_case_begin_4384746656:;
		{
			return -1LL;
		}
		goto _match_end_4384744240;
		_case_end_4384746656:;
		if (!((_35217_r <= 127LLU))) { goto _case_end_4384746928; }
		_case_begin_4384746928:;
		{
			return 1LL;
		}
		goto _match_end_4384744240;
		_case_end_4384746928:;
		if (!((_35217_r <= 2047LL))) { goto _case_end_4384747040; }
		_case_begin_4384747040:;
		{
			return 2LL;
		}
		goto _match_end_4384744240;
		_case_end_4384747040:;
		if (!(((55296LL <= _35217_r) && (_35217_r <= 57343LL)))) { goto _case_end_4384747152; }
		_case_begin_4384747152:;
		{
			return -1LL;
		}
		goto _match_end_4384744240;
		_case_end_4384747152:;
		if (!((_35217_r <= 65535LL))) { goto _case_end_4384746144; }
		_case_begin_4384746144:;
		{
			return 3LL;
		}
		goto _match_end_4384744240;
		_case_end_4384746144:;
		if (!((_35217_r <= 1114111LL))) { goto _case_end_4384746256; }
		_case_begin_4384746256:;
		{
			return 4LL;
		}
		goto _match_end_4384744240;
		_case_end_4384746256:;
		_case_begin_4384745136:;
		{
			return -1LL;
		}
		goto _match_end_4384744240;
		_case_end_4384745136:;
		_match_end_4384744240:;
	}
}



inline jule::Int _103458e80_encode_rune(jule::Slice<jule::U8> _36724_p,jule::I32 _36739_r) {
	jule::U32 _3699_i = static_cast<jule::U32>(_36739_r);
	{
		if (!((_3699_i <= 127LLU))) { goto _case_end_4384759200; }
		_case_begin_4384759200:;
		{
			_36724_p[0LL]=static_cast<jule::U8>(_36739_r);
			return 1LL;
		}
		goto _match_end_4384753472;
		_case_end_4384759200:;
		if (!((_3699_i <= 2047LL))) { goto _case_end_4384753952; }
		_case_begin_4384753952:;
		{
			_36724_p[0LL]=static_cast<jule::U8>(192LL | static_cast<jule::U8>(_36739_r >> 6LL));
			_36724_p[1LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
			return 2LL;
		}
		goto _match_end_4384753472;
		_case_end_4384753952:;
		if (!((_3699_i > 1114111LL) || ((55296LL <= _3699_i) && (_3699_i <= 57343LL)))) { goto _case_end_4384754064; }
		_case_begin_4384754064:;
		{
			_36739_r=65533LL;
			goto _case_begin_4384754176;
		}
		goto _match_end_4384753472;
		_case_end_4384754064:;
		if (!((_3699_i <= 65535LL))) { goto _case_end_4384754176; }
		_case_begin_4384754176:;
		{
			_36724_p[0LL]=static_cast<jule::U8>(224LL | static_cast<jule::U8>(_36739_r >> 12LL));
			_36724_p[1LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 6LL) & 63LL));
			_36724_p[2LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
			return 3LL;
		}
		goto _match_end_4384753472;
		_case_end_4384754176:;
		_case_begin_4384753648:;
		{
			_36724_p[0LL]=static_cast<jule::U8>(240LL | static_cast<jule::U8>(_36739_r >> 18LL));
			_36724_p[1LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 12LL) & 63LL));
			_36724_p[2LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 6LL) & 63LL));
			_36724_p[3LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
			return 4LL;
		}
		goto _match_end_4384753472;
		_case_end_4384753648:;
		_match_end_4384753472:;
	}
}



inline jule::Slice<jule::U8> _103458e80_append_rune(jule::Slice<jule::U8> _39824_p,jule::I32 _39835_r) {
	if (static_cast<jule::U32>(_39835_r) <= 127LLU) {
		return jule::append(_39824_p,jule::Slice<jule::U8>({static_cast<jule::U8>(_39835_r)}));
	}
	return _103458e80_append_rune_non_ascii(_39824_p,_39835_r);
}



inline jule::Slice<jule::U8> _103458e80_append_rune_non_ascii(jule::Slice<jule::U8> _40530_p,jule::I32 _40545_r) {
	jule::U32 _4079_i = static_cast<jule::U32>(_40545_r);
	{
		if (!((_4079_i <= 2047LL))) { goto _case_end_4384776656; }
		_case_begin_4384776656:;
		{
			return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(192LL | static_cast<jule::U8>(_40545_r >> 6LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
		}
		goto _match_end_4384776192;
		_case_end_4384776656:;
		if (!((_4079_i > 1114111LL) || ((55296LL <= _4079_i) && (_4079_i <= 57343LL)))) { goto _case_end_4384776768; }
		_case_begin_4384776768:;
		{
			_40545_r=65533LL;
			goto _case_begin_4384776880;
		}
		goto _match_end_4384776192;
		_case_end_4384776768:;
		if (!((_4079_i <= 65535LL))) { goto _case_end_4384776880; }
		_case_begin_4384776880:;
		{
			return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(224LL | static_cast<jule::U8>(_40545_r >> 12LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
		}
		goto _match_end_4384776192;
		_case_end_4384776880:;
		_case_begin_4384776352:;
		{
			return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(240LL | static_cast<jule::U8>(_40545_r >> 18LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 12LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
		}
		goto _match_end_4384776192;
		_case_end_4384776352:;
		_match_end_4384776192:;
	}
}



inline jule::Int _103458e80_rune_count(jule::Slice<jule::U8> _42319_p) {
	jule::Int _42332_n = jule::Int();
	jule::Int _42413_i = 0LL;
	_iter_begin_4384777456:;
	if (!(_42413_i < _42319_p.len())) { goto _iter_end_4384777456; }
	{
		(_42332_n)++;
		jule::U8 _42717_c = _42319_p[static_cast<jule::Int>(_42413_i)];
		if (_42717_c < 128LL) {
			(_42413_i)++;
			goto _iter_next_4384777456;
		}
		jule::U8 _43313_x = _103458e80_FIRST[static_cast<jule::Int>(_42717_c)];
		if (_43313_x == 241LL) {
			(_42413_i)++;
			goto _iter_next_4384777456;
		}
		jule::Int _43817_size = static_cast<jule::Int>(_43313_x & 7LL);
		if ((_42413_i + _43817_size) > _42319_p.len()) {
			(_42413_i)++;
			goto _iter_next_4384777456;
		}
		_103458e80_accept_range _44313_accept = _103458e80_ACCEPT_RANGES[static_cast<jule::Int>(_43313_x >> 4LL)];
		_42717_c=_42319_p[static_cast<jule::Int>(_42413_i + 1LL)];
		if ((_42717_c < _44313_accept._field_lo) || (_44313_accept._field_hi < _42717_c)) {
			_43817_size=1LL;
		} else if (_43817_size == 2LL) {
		} else {
			_42717_c=_42319_p[static_cast<jule::Int>(_42413_i + 2LL)];
			if ((_42717_c < 128LL) || (191LL < _42717_c)) {
				_43817_size=1LL;
			} else if (_43817_size == 3LL) {
			} else {
				_42717_c=_42319_p[static_cast<jule::Int>(_42413_i + 3LL)];
				if ((_42717_c < 128LL) || (191LL < _42717_c)) {
					_43817_size=1LL;
				}
			}
		}
		_42413_i+=_43817_size;
	}
	_iter_next_4384777456:;
	goto _iter_begin_4384777456;
	_iter_end_4384777456:;
	_42332_n = _42332_n;
	return _42332_n;
}



inline jule::Int _103458e80_rune_count_str(jule::Str _46623_s) {
	jule::Int _46633_n = jule::Int();
	jule::Int _46713_i = 0LL;
	_iter_begin_4384812208:;
	if (!(_46713_i < _46623_s.len())) { goto _iter_end_4384812208; }
	{
		jule::U8 _46917_c = _46623_s[static_cast<jule::Int>(_46713_i)];
		if (_46917_c < 128LL) {
			(_46713_i)++;
			goto _iter_next_4384812208;
		}
		jule::U8 _47513_x = _103458e80_FIRST[static_cast<jule::Int>(_46917_c)];
		if (_47513_x == 241LL) {
			(_46713_i)++;
			goto _iter_next_4384812208;
		}
		jule::Int _48017_size = static_cast<jule::Int>(_47513_x & 7LL);
		if ((_46713_i + _48017_size) > _46623_s.len()) {
			(_46713_i)++;
			goto _iter_next_4384812208;
		}
		_103458e80_accept_range _48513_accept = _103458e80_ACCEPT_RANGES[static_cast<jule::Int>(_47513_x >> 4LL)];
		_46917_c=_46623_s[static_cast<jule::Int>(_46713_i + 1LL)];
		if ((_46917_c < _48513_accept._field_lo) || (_48513_accept._field_hi < _46917_c)) {
			_48017_size=1LL;
		} else if (_48017_size == 2LL) {
		} else {
			_46917_c=_46623_s[static_cast<jule::Int>(_46713_i + 2LL)];
			if ((_46917_c < 128LL) || (191LL < _46917_c)) {
				_48017_size=1LL;
			} else if (_48017_size == 3LL) {
			} else {
				_46917_c=_46623_s[static_cast<jule::Int>(_46713_i + 3LL)];
				if ((_46917_c < 128LL) || (191LL < _46917_c)) {
					_48017_size=1LL;
				}
			}
		}
		_46713_i+=_48017_size;
	}
	_iter_next_4384812208:;
	(_46633_n)++;
	goto _iter_begin_4384812208;
	_iter_end_4384812208:;
	_46633_n = _46633_n;
	return _46633_n;
}



inline jule::Bool _103458e80_rune_start(jule::U8 _51019_b) {
	return (_51019_b & 192LL) != 128LL;
}



inline jule::Bool _103458e80_valid(jule::Slice<jule::U8> _51314_p) {
	jule::Slice<jule::U8> _51613_cp = (*((&(_51314_p))));
	_iter_begin_4384832512:;
	if (!(_51613_cp.len() >= 8LL)) { goto _iter_end_4384832512; }
	{
		jule::U32 _52213_first32 = ((static_cast<jule::U32>(_51613_cp[0LL]) | (static_cast<jule::U32>(_51613_cp[1LL]) << 8LL)) | (static_cast<jule::U32>(_51613_cp[2LL]) << 16LL)) | (static_cast<jule::U32>(_51613_cp[3LL]) << 24LL);
		jule::U32 _52313_second32 = ((static_cast<jule::U32>(_51613_cp[4LL]) | (static_cast<jule::U32>(_51613_cp[5LL]) << 8LL)) | (static_cast<jule::U32>(_51613_cp[6LL]) << 16LL)) | (static_cast<jule::U32>(_51613_cp[7LL]) << 24LL);
		if (((_52213_first32 | _52313_second32) & 2155905152LL) != 0LL) {
			goto _iter_end_4384832512;
		}
		_51613_cp=_51613_cp.slice(8LL);
	}
	_iter_next_4384832512:;
	goto _iter_begin_4384832512;
	_iter_end_4384832512:;
	jule::Int _53013_i = 0LL;
	_iter_begin_4384843104:;
	if (!(_53013_i < _51613_cp.len())) { goto _iter_end_4384843104; }
	{
		jule::U8 _53213_pi = _51613_cp[static_cast<jule::Int>(_53013_i)];
		if (_53213_pi < 128LL) {
			(_53013_i)++;
			goto _iter_next_4384843104;
		}
		jule::U8 _53713_x = _103458e80_FIRST[static_cast<jule::Int>(_53213_pi)];
		if (_53713_x == 241LL) {
			return false;
		}
		jule::Int _54113_size = static_cast<jule::Int>(_53713_x & 7LL);
		if ((_53013_i + _54113_size) > _51613_cp.len()) {
			return false;
		}
		_103458e80_accept_range _54513_accept = _103458e80_ACCEPT_RANGES[static_cast<jule::Int>(_53713_x >> 4LL)];
		jule::U8 _54617_c = _51613_cp[static_cast<jule::Int>(_53013_i + 1LL)];
		if ((_54617_c < _54513_accept._field_lo) || (_54513_accept._field_hi < _54617_c)) {
			return false;
		} else if (_54113_size == 2LL) {
		} else {
			_54617_c=_51613_cp[static_cast<jule::Int>(_53013_i + 2LL)];
			if ((_54617_c < 128LL) || (191LL < _54617_c)) {
				return false;
			} else if (_54113_size == 3LL) {
			} else {
				_54617_c=_51613_cp[static_cast<jule::Int>(_53013_i + 3LL)];
				if ((_54617_c < 128LL) || (191LL < _54617_c)) {
					return false;
				}
			}
		}
		_53013_i+=_54113_size;
	}
	_iter_next_4384843104:;
	goto _iter_begin_4384843104;
	_iter_end_4384843104:;
	return true;
}



inline jule::Bool _103458e80_valid_str(jule::Str _56822_s) {
	_iter_begin_4384864336:;
	if (!(_56822_s.len() >= 8LL)) { goto _iter_end_4384864336; }
	{
		jule::U32 _57313_first32 = ((static_cast<jule::U32>(_56822_s[0LL]) | (static_cast<jule::U32>(_56822_s[1LL]) << 8LL)) | (static_cast<jule::U32>(_56822_s[2LL]) << 16LL)) | (static_cast<jule::U32>(_56822_s[3LL]) << 24LL);
		jule::U32 _57413_second32 = ((static_cast<jule::U32>(_56822_s[4LL]) | (static_cast<jule::U32>(_56822_s[5LL]) << 8LL)) | (static_cast<jule::U32>(_56822_s[6LL]) << 16LL)) | (static_cast<jule::U32>(_56822_s[7LL]) << 24LL);
		if (((_57313_first32 | _57413_second32) & 2155905152LL) != 0LL) {
			goto _iter_end_4384864336;
		}
		_56822_s=_56822_s.slice(8LL);
	}
	_iter_next_4384864336:;
	goto _iter_begin_4384864336;
	_iter_end_4384864336:;
	jule::Int _58113_i = 0LL;
	_iter_begin_4384875680:;
	if (!(_58113_i < _56822_s.len())) { goto _iter_end_4384875680; }
	{
		jule::U8 _58313_si = _56822_s[static_cast<jule::Int>(_58113_i)];
		if (_58313_si < 128LL) {
			(_58113_i)++;
			goto _iter_next_4384875680;
		}
		jule::U8 _58813_x = _103458e80_FIRST[static_cast<jule::Int>(_58313_si)];
		if (_58813_x == 241LL) {
			return false;
		}
		jule::Int _59213_size = static_cast<jule::Int>(_58813_x & 7LL);
		if ((_58113_i + _59213_size) > _56822_s.len()) {
			return false;
		}
		_103458e80_accept_range _59613_accept = _103458e80_ACCEPT_RANGES[static_cast<jule::Int>(_58813_x >> 4LL)];
		jule::U8 _59717_c = _56822_s[static_cast<jule::Int>(_58113_i + 1LL)];
		if ((_59717_c < _59613_accept._field_lo) || (_59613_accept._field_hi < _59717_c)) {
			return false;
		} else if (_59213_size == 2LL) {
		} else {
			_59717_c=_56822_s[static_cast<jule::Int>(_58113_i + 2LL)];
			if ((_59717_c < 128LL) || (191LL < _59717_c)) {
				return false;
			} else if (_59213_size == 3LL) {
			} else {
				_59717_c=_56822_s[static_cast<jule::Int>(_58113_i + 3LL)];
				if ((_59717_c < 128LL) || (191LL < _59717_c)) {
					return false;
				}
			}
		}
		_58113_i+=_59213_size;
	}
	_iter_next_4384875680:;
	goto _iter_begin_4384875680;
	_iter_end_4384875680:;
	return true;
}



inline jule::Bool _103458e80_valid_rune(jule::I32 _62019_r) {
	{
		if (!(((0LL <= _62019_r) && (_62019_r < 55296LL)))) { goto _case_end_4384897520; }
		_case_begin_4384897520:;
		{
			return true;
		}
		goto _match_end_4384897056;
		_case_end_4384897520:;
		if (!(((57343LL < _62019_r) && (_62019_r <= 1114111LL)))) { goto _case_end_4384897632; }
		_case_begin_4384897632:;
		{
			return true;
		}
		goto _match_end_4384897056;
		_case_end_4384897632:;
		_case_begin_4384897168:;
		{
			return false;
		}
		goto _match_end_4384897056;
		_case_end_4384897168:;
		_match_end_4384897056:;
	}
}



inline jule::Bool _108e15ff0_is_unary_op(jule::Str _31020_kind) {
	{
		auto __julec_range_expr = _108e15ff0_UNARY_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _108e15ff0_op = *__julec_range_begin;
			_iter_begin_4385105392:;
			{
				if (_31020_kind == _108e15ff0_op) {
					return true;
				}
			}
			_iter_next_4385105392:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e15ff0_op = *__julec_range_begin; goto _iter_begin_4385105392; }
			_iter_end_4385105392:;
		}
	}
	return false;
}



inline jule::Bool _108e15ff0_is_bin_op(jule::Str _32118_kind) {
	{
		auto __julec_range_expr = _108e15ff0_BIN_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _108e15ff0_op = *__julec_range_begin;
			_iter_begin_4385106992:;
			{
				if (_32118_kind == _108e15ff0_op) {
					return true;
				}
			}
			_iter_next_4385106992:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e15ff0_op = *__julec_range_begin; goto _iter_begin_4385106992; }
			_iter_end_4385106992:;
		}
	}
	return false;
}



inline jule::Bool _108e15ff0_is_weak_op(jule::Str _33219_kind) {
	{
		auto __julec_range_expr = _108e15ff0_WEAK_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _108e15ff0_op = *__julec_range_begin;
			_iter_begin_4385109680:;
			{
				if (_33219_kind == _108e15ff0_op) {
					return true;
				}
			}
			_iter_next_4385109680:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e15ff0_op = *__julec_range_begin; goto _iter_begin_4385109680; }
			_iter_end_4385109680:;
		}
	}
	return false;
}



inline jule::Bool _108e15ff0_is_str(jule::Str _34315_k) {
	return (_34315_k != jule::Str("", 0)) && ((_34315_k[0LL] == '\"') || _108e15ff0_is_raw_str(_34315_k));
}



inline jule::Bool _108e15ff0_is_raw_str(jule::Str _34519_k) {
	return (_34519_k != jule::Str("", 0)) && (_34519_k[0LL] == '`');
}



inline jule::Bool _108e15ff0_is_rune(jule::Str _34816_k) {
	return (_34816_k != jule::Str("", 0)) && (_34816_k[0LL] == '\'');
}



inline jule::Bool _108e15ff0_is_nil(jule::Str _35015_k) {
	return _35015_k == jule::Str("nil", 3);
}



inline jule::Bool _108e15ff0_is_bool(jule::Str _35216_k) {
	return (_35216_k == jule::Str("true", 4)) || (_35216_k == jule::Str("false", 5));
}



inline jule::Bool _108e15ff0_contains_any(jule::Str _35417_s,jule::Str _35425_bytes) {
	{
		auto __julec_range_expr = _35425_bytes;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::U8 _108e15ff0_b = *__julec_range_begin;
			_iter_begin_4385119168:;
			{
				jule::Int _35613_i = _35417_s.find(static_cast<jule::Str>(_108e15ff0_b));
				if (_35613_i >= 0LL) {
					return true;
				}
			}
			_iter_next_4385119168:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e15ff0_b = *__julec_range_begin; goto _iter_begin_4385119168; }
			_iter_end_4385119168:;
		}
	}
	return false;
}



inline jule::Bool _108e15ff0_is_float(jule::Str _36617_k) {
	if (_36617_k.has_prefix(jule::Str("0x", 2))) {
		return _108e15ff0_contains_any(_36617_k,jule::Str(".pP", 3));
	}
	return _108e15ff0_contains_any(_36617_k,jule::Str(".eE", 3));
}



inline jule::Bool _108e15ff0_is_num(jule::Str _37515_k) {
	if (_37515_k == jule::Str("", 0)) {
		return false;
	}
	jule::U8 _3809_b = _37515_k[0LL];
	return (_3809_b == '.') || (('0' <= _3809_b) && (_3809_b <= '9'));
}



inline jule::Bool _108e15ff0_is_lit(jule::Str _38515_k) {
	return (((_108e15ff0_is_num(_38515_k) || _108e15ff0_is_str(_38515_k)) || _108e15ff0_is_rune(_38515_k)) || _108e15ff0_is_nil(_38515_k)) || _108e15ff0_is_bool(_38515_k);
}



inline jule::Bool _108e15ff0_is_ignore_ident(jule::Str _39024_ident) {
	return _39024_ident == jule::Str("_", 1);
}



inline jule::Bool _108e15ff0_is_anon_ident(jule::Str _39222_ident) {
	return _39222_ident == jule::Str("<anonymous>", 11);
}



inline jule::Bool _108e15ff0_is_punct(jule::I32 _39517_r) {
	{
		auto __julec_range_expr = _108e15ff0_PUNCTS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::I32 _108e15ff0_cr = *__julec_range_begin;
			_iter_begin_4382655296:;
			{
				if (_39517_r == _108e15ff0_cr) {
					return true;
				}
			}
			_iter_next_4382655296:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e15ff0_cr = *__julec_range_begin; goto _iter_begin_4382655296; }
			_iter_end_4382655296:;
		}
	}
	return false;
}



inline jule::Bool _108e15ff0_is_space(jule::I32 _40617_r) {
	{
		auto __julec_range_expr = _108e15ff0_SPACES;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::I32 _108e15ff0_cr = *__julec_range_begin;
			_iter_begin_4382658016:;
			{
				if (_40617_r == _108e15ff0_cr) {
					return true;
				}
			}
			_iter_next_4382658016:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e15ff0_cr = *__julec_range_begin; goto _iter_begin_4382658016; }
			_iter_end_4382658016:;
		}
	}
	return false;
}



inline jule::Bool _108e15ff0_is_letter(jule::I32 _41718_r) {
	return (('a' <= _41718_r) && (_41718_r <= 'z')) || (('A' <= _41718_r) && (_41718_r <= 'Z'));
}



inline jule::Bool _108e15ff0_is_ident_rune(jule::Str _42322_s) {
	if (_42322_s == jule::Str("", 0)) {
		return false;
	}
	if (_42322_s[0LL] != '_') {
		jule::I32 _42914_r;
		std::tie(_42914_r,std::ignore) = _103458e80_decode_rune_str(_42322_s);
		if ((!(_108e15ff0_is_letter(_42914_r)))) {
			return false;
		}
	}
	return true;
}



inline jule::Bool _108e15ff0_is_decimal(jule::U8 _43919_b) {
	return ('0' <= _43919_b) && (_43919_b <= '9');
}



inline jule::Bool _108e15ff0_is_binary(jule::U8 _44118_b) {
	return (_44118_b == '0') || (_44118_b == '1');
}



inline jule::Bool _108e15ff0_is_octal(jule::U8 _44317_b) {
	return ('0' <= _44317_b) && (_44317_b <= '7');
}



inline jule::Bool _108e15ff0_is_hex(jule::U8 _44615_b) {
	{
		if (!((('0' <= _44615_b) && (_44615_b <= '9')))) { goto _case_end_4385139024; }
		_case_begin_4385139024:;
		{
			return true;
		}
		goto _match_end_4385138496;
		_case_end_4385139024:;
		if (!((('a' <= _44615_b) && (_44615_b <= 'f')))) { goto _case_end_4385139136; }
		_case_begin_4385139136:;
		{
			return true;
		}
		goto _match_end_4385138496;
		_case_end_4385139136:;
		if (!((('A' <= _44615_b) && (_44615_b <= 'F')))) { goto _case_end_4385139264; }
		_case_begin_4385139264:;
		{
			return true;
		}
		goto _match_end_4385138496;
		_case_end_4385139264:;
		_case_begin_4385138656:;
		{
			return false;
		}
		goto _match_end_4385138496;
		_case_end_4385138656:;
		_match_end_4385138496:;
	}
}



inline jule::Bool _108e15ff0_is_assign(jule::Uint _45818_id) {
	return ((((((_45818_id == 2LLU) || (_45818_id == 31LLU)) || (_45818_id == 34LLU)) || (_45818_id == 20LLU)) || (_45818_id == 28LLU)) || (_45818_id == 3LLU)) || (_45818_id == 7LLU);
}



inline jule::Bool _108e15ff0_is_postfix_op(jule::Str _47122_kind) {
	{
		auto __julec_range_expr = _108e15ff0_POSTFIX_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _108e15ff0_op = *__julec_range_begin;
			_iter_begin_4385162400:;
			{
				if (_47122_kind == _108e15ff0_op) {
					return true;
				}
			}
			_iter_next_4385162400:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e15ff0_op = *__julec_range_begin; goto _iter_begin_4385162400; }
			_iter_end_4385162400:;
		}
	}
	return false;
}



inline jule::Bool _108e15ff0_is_assign_op(jule::Str _48221_kind) {
	if (_108e15ff0_is_postfix_op(_48221_kind)) {
		return true;
	}
	{
		auto __julec_range_expr = _108e15ff0_ASSING_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _108e15ff0_op = *__julec_range_begin;
			_iter_begin_4385166256:;
			{
				if (_48221_kind == _108e15ff0_op) {
					return true;
				}
			}
			_iter_next_4385166256:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e15ff0_op = *__julec_range_begin; goto _iter_begin_4385166256; }
			_iter_end_4385166256:;
		}
	}
	return false;
}



inline jule::Ref<_108e58b50_File> _108e58b50_new_file_set(jule::Str _6421_path) {
	return jule::new_struct<_108e58b50_File>(new( std::nothrow ) _108e58b50_File(jule::Slice<jule::U8>(),_6421_path,jule::Slice<_108e15ff0_Token>()));
}



inline _1486379e0_Log _108e171c0_make_err(jule::Int _10313_row,jule::Int _10323_col,jule::Ref<_108e58b50_File> _10333_f,jule::Str _10343_fmt,jule::Slice<jule::Any> _10356_args) {
	return _1486379e0_Log(1LLU,_10313_row,_10323_col,_10333_f->_method_path(),_1486379e0_logf(_10343_fmt,_10356_args),jule::Str(),jule::Str());
}



inline jule::Bool _108e171c0_bytes_has_prefix(jule::Slice<jule::U8> _11321_bytes,jule::Str _11336_prefix) {
	if (_11321_bytes.len() < _11336_prefix.len()) {
		return false;
	}
	{
		auto __julec_range_expr = _11336_prefix;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _108e171c0_i = 0;
			_iter_begin_4382681120:;
			{
				if (_11321_bytes[static_cast<jule::Int>(_108e171c0_i)] != _11336_prefix[static_cast<jule::Int>(_108e171c0_i)]) {
					return false;
				}
			}
			_iter_next_4382681120:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_108e171c0_i; goto _iter_begin_4382681120; }
			_iter_end_4382681120:;
		}
	}
	return true;
}



inline jule::Str _108e171c0_float_fmt_e(jule::Slice<jule::U8> _12516_txt,jule::Int _12533_i) {
	jule::Str _12543_lit = jule::Str();
	(_12533_i)++;
	if (_12533_i >= _12516_txt.len()) {
		return _12543_lit;
	}
	jule::U8 _1319_b = _12516_txt[static_cast<jule::Int>(_12533_i)];
	if ((_1319_b == '+') || (_1319_b == '-')) {
		(_12533_i)++;
		if (_12533_i >= _12516_txt.len()) {
			return _12543_lit;
		}
	}
	jule::Int _1399_first = _12533_i;
	_iter_begin_4382689904:;
	if (!(_12533_i < _12516_txt.len())) { goto _iter_end_4382689904; }
	{
		jule::U8 _14113_b = _12516_txt[static_cast<jule::Int>(_12533_i)];
		if ((!(_108e15ff0_is_decimal(_14113_b)))) {
			goto _iter_end_4382689904;
		}
	}
	_iter_next_4382689904:;
	(_12533_i)++;
	goto _iter_begin_4382689904;
	_iter_end_4382689904:;
	if (_12533_i == _1399_first) {
		_12543_lit = jule::Str("", 0);
		return _12543_lit;
	}
	_12543_lit = static_cast<jule::Str>(_12516_txt.slice(0LL,static_cast<jule::Int>(_12533_i)));
	return _12543_lit;
}



inline jule::Str _108e171c0_float_fmt_p(jule::Slice<jule::U8> _15316_txt,jule::Int _15329_i) {
	return _108e171c0_float_fmt_e(_15316_txt,_15329_i);
}



inline jule::Str _108e171c0_float_fmt_dotnp(jule::Slice<jule::U8> _15520_txt,jule::Int _15537_i) {
	if (_15520_txt[static_cast<jule::Int>(_15537_i)] != '.') {
		return jule::Str("", 0);
	}
	(_15537_i)++;
	_julec_label_loop:;
	_iter_begin_4382700704:;
	if (!(_15537_i < _15520_txt.len())) { goto _iter_end_4382700704; }
	{
		jule::U8 _16313_b = _15520_txt[static_cast<jule::Int>(_15537_i)];
		{
			if (!((_108e15ff0_is_decimal(_16313_b)))) { goto _case_end_4382704560; }
			_case_begin_4382704560:;
			{
				goto _iter_next_4382700704;
			}
			goto _match_end_4382704016;
			_case_end_4382704560:;
			if (!((_108e171c0_is_float_fmt_p(_16313_b,_15537_i)))) { goto _case_end_4382704672; }
			_case_begin_4382704672:;
			{
				return _108e171c0_float_fmt_p(_15520_txt,_15537_i);
			}
			goto _match_end_4382704016;
			_case_end_4382704672:;
			_case_begin_4382704208:;
			{
				goto _iter_end_4382700704;
			}
			goto _match_end_4382704016;
			_case_end_4382704208:;
			_match_end_4382704016:;
		}
	}
	_iter_next_4382700704:;
	(_15537_i)++;
	goto _iter_begin_4382700704;
	_iter_end_4382700704:;
	return jule::Str("", 0);
}



inline jule::Str _108e171c0_float_fmt_dotfp(jule::Slice<jule::U8> _17320_txt,jule::Int _17337_i) {
	_17337_i+=2LL;
	return _108e171c0_float_fmt_e(_17320_txt,_17337_i);
}



inline jule::Str _108e171c0_float_fmt_dotp(jule::Slice<jule::U8> _18019_txt,jule::Int _18036_i) {
	(_18036_i)++;
	return _108e171c0_float_fmt_e(_18019_txt,_18036_i);
}



inline jule::Str _108e171c0_float_num(jule::Slice<jule::U8> _18714_txt,jule::Int _18731_i) {
	jule::Str _18741_lit = jule::Str();
	(_18731_i)++;
	_iter_begin_4382714320:;
	if (!(_18731_i < _18714_txt.len())) { goto _iter_end_4382714320; }
	{
		jule::U8 _19013_b = _18714_txt[static_cast<jule::Int>(_18731_i)];
		if ((_18731_i > 1LL) && ((_19013_b == 'e') || (_19013_b == 'E'))) {
			_18741_lit = _108e171c0_float_fmt_e(_18714_txt,_18731_i);
			return _18741_lit;
		}
		if ((!(_108e15ff0_is_decimal(_19013_b)))) {
			goto _iter_end_4382714320;
		}
	}
	_iter_next_4382714320:;
	(_18731_i)++;
	goto _iter_begin_4382714320;
	_iter_end_4382714320:;
	if (_18731_i == 1LL) {
		return _18741_lit;
	}
	_18741_lit = static_cast<jule::Str>(_18714_txt.slice(0LL,static_cast<jule::Int>(_18731_i)));
	return _18741_lit;
}



inline jule::Str _108e171c0_common_num(jule::Slice<jule::U8> _20515_txt) {
	jule::Str _20530_lit = jule::Str();
	jule::Int _20613_i = 0LL;
	_julec_label_loop:;
	_iter_begin_4382723040:;
	if (!(_20613_i < _20515_txt.len())) { goto _iter_end_4382723040; }
	{
		jule::U8 _20913_b = _20515_txt[static_cast<jule::Int>(_20613_i)];
		{
			if (!((_20913_b == '.'))) { goto _case_end_4382725904; }
			_case_begin_4382725904:;
			{
				_20530_lit = _108e171c0_float_num(_20515_txt,_20613_i);
				return _20530_lit;
			}
			goto _match_end_4382725648;
			_case_end_4382725904:;
			if (!((_108e171c0_is_float_fmt_e(_20913_b,_20613_i)))) { goto _case_end_4382726016; }
			_case_begin_4382726016:;
			{
				_20530_lit = _108e171c0_float_fmt_e(_20515_txt,_20613_i);
				return _20530_lit;
			}
			goto _match_end_4382725648;
			_case_end_4382726016:;
			if (!(((!(_108e15ff0_is_decimal(_20913_b)))))) { goto _case_end_4382726128; }
			_case_begin_4382726128:;
			{
				goto _iter_end_4382723040;
			}
			goto _match_end_4382725648;
			_case_end_4382726128:;
			_match_end_4382725648:;
		}
	}
	_iter_next_4382723040:;
	(_20613_i)++;
	goto _iter_begin_4382723040;
	_iter_end_4382723040:;
	if (_20613_i == 0LL) {
		return _20530_lit;
	}
	_20530_lit = static_cast<jule::Str>(_20515_txt.slice(0LL,static_cast<jule::Int>(_20613_i)));
	return _20530_lit;
}



inline jule::Str _108e171c0_binary_num(jule::Slice<jule::U8> _22315_txt) {
	jule::Str _22330_lit = jule::Str();
	if ((!(_108e171c0_bytes_has_prefix(_22315_txt,jule::Str("0b", 2))))) {
		_22330_lit = jule::Str("", 0);
		return _22330_lit;
	}
	if (_22315_txt.len() < 2LL) {
		return _22330_lit;
	}
	
	jule::Int _23213_i = 2LL;
	_iter_begin_4382734064:;
	if (!(_23213_i < _22315_txt.len())) { goto _iter_end_4382734064; }
	{
		if ((!(_108e15ff0_is_binary(_22315_txt[static_cast<jule::Int>(_23213_i)])))) {
			goto _iter_end_4382734064;
		}
	}
	_iter_next_4382734064:;
	(_23213_i)++;
	goto _iter_begin_4382734064;
	_iter_end_4382734064:;
	if (_23213_i == 2LL) {
		return _22330_lit;
	}
	_22330_lit = static_cast<jule::Str>(_22315_txt.slice(0LL,static_cast<jule::Int>(_23213_i)));
	return _22330_lit;
}



inline jule::Bool _108e171c0_is_float_fmt_e(jule::U8 _24519_b,jule::Int _24528_i) {
	return (_24528_i > 0LL) && ((_24519_b == 'e') || (_24519_b == 'E'));
}



inline jule::Bool _108e171c0_is_float_fmt_p(jule::U8 _24619_b,jule::Int _24628_i) {
	return (_24628_i > 0LL) && ((_24619_b == 'p') || (_24619_b == 'P'));
}



inline jule::Bool _108e171c0_is_float_fmt_dotnp(jule::Slice<jule::U8> _24823_txt,jule::Int _24840_i) {
	if (_24823_txt[static_cast<jule::Int>(_24840_i)] != '.') {
		return false;
	}
	(_24840_i)++;
	_julec_label_loop:;
	_iter_begin_4382748256:;
	if (!(_24840_i < _24823_txt.len())) { goto _iter_end_4382748256; }
	{
		jule::U8 _25613_b = _24823_txt[static_cast<jule::Int>(_24840_i)];
		{
			if (!((_108e15ff0_is_decimal(_25613_b)))) { goto _case_end_4382751696; }
			_case_begin_4382751696:;
			{
				goto _iter_next_4382748256;
			}
			goto _match_end_4382751152;
			_case_end_4382751696:;
			if (!((_108e171c0_is_float_fmt_p(_25613_b,_24840_i)))) { goto _case_end_4382751808; }
			_case_begin_4382751808:;
			{
				return true;
			}
			goto _match_end_4382751152;
			_case_end_4382751808:;
			_case_begin_4382751344:;
			{
				goto _iter_end_4382748256;
			}
			goto _match_end_4382751152;
			_case_end_4382751344:;
			_match_end_4382751152:;
		}
	}
	_iter_next_4382748256:;
	(_24840_i)++;
	goto _iter_begin_4382748256;
	_iter_end_4382748256:;
	return false;
}



inline jule::Bool _108e171c0_is_float_fmt_dotp(jule::Slice<jule::U8> _26722_txt,jule::Int _26735_i) {
	{
		if (!((_26722_txt.len() < 3LL))) { goto _case_end_4382756912; }
		_case_begin_4382756912:;
		{
			goto _case_begin_4382757024;
		}
		goto _match_end_4382756400;
		_case_end_4382756912:;
		if (!((_26722_txt[static_cast<jule::Int>(_26735_i)] != '.'))) { goto _case_end_4382757024; }
		_case_begin_4382757024:;
		{
			goto _case_begin_4382757152;
		}
		goto _match_end_4382756400;
		_case_end_4382757024:;
		if (!(((_26722_txt[static_cast<jule::Int>(_26735_i + 1LL)] != 'p') && (_26722_txt[static_cast<jule::Int>(_26735_i + 1LL)] != 'P')))) { goto _case_end_4382757152; }
		_case_begin_4382757152:;
		{
			return false;
		}
		goto _match_end_4382756400;
		_case_end_4382757152:;
		_case_begin_4382756544:;
		{
			return true;
		}
		goto _match_end_4382756400;
		_case_end_4382756544:;
		_match_end_4382756400:;
	}
}



inline jule::Bool _108e171c0_is_float_fmt_dotfp(jule::Slice<jule::U8> _27623_txt,jule::Int _27636_i) {
	{
		if (!((_27623_txt.len() < 4LL))) { goto _case_end_4382763600; }
		_case_begin_4382763600:;
		{
			goto _case_begin_4382763712;
		}
		goto _match_end_4382763072;
		_case_end_4382763600:;
		if (!((_27623_txt[static_cast<jule::Int>(_27636_i)] != '.'))) { goto _case_end_4382763712; }
		_case_begin_4382763712:;
		{
			goto _case_begin_4382763840;
		}
		goto _match_end_4382763072;
		_case_end_4382763712:;
		if (!(((_27623_txt[static_cast<jule::Int>(_27636_i + 1LL)] != 'f') && (_27623_txt[static_cast<jule::Int>(_27636_i + 1LL)] != 'F')))) { goto _case_end_4382763840; }
		_case_begin_4382763840:;
		{
			goto _case_begin_4382764880;
		}
		goto _match_end_4382763072;
		_case_end_4382763840:;
		if (!(((_27623_txt[static_cast<jule::Int>(_27636_i + 2LL)] != 'p') && (_27623_txt[static_cast<jule::Int>(_27636_i + 1LL)] != 'P')))) { goto _case_end_4382764880; }
		_case_begin_4382764880:;
		{
			return false;
		}
		goto _match_end_4382763072;
		_case_end_4382764880:;
		_case_begin_4382763216:;
		{
			return true;
		}
		goto _match_end_4382763072;
		_case_end_4382763216:;
		_match_end_4382763072:;
	}
}



inline jule::Str _108e171c0_octal_num(jule::Slice<jule::U8> _28614_txt) {
	jule::Str _28629_lit = jule::Str();
	if (_28614_txt[0LL] != '0') {
		_28629_lit = jule::Str("", 0);
		return _28629_lit;
	}
	if (_28614_txt.len() < 2LL) {
		return _28629_lit;
	}
	jule::Int _29413_octal_start = 1LL;
	if (_28614_txt[1LL] == 'o') {
		if (_28614_txt.len() < 3LL) {
			return _28629_lit;
		}
		(_29413_octal_start)++;
	}
	jule::Int _30313_i = _29413_octal_start;
	_iter_begin_4382775840:;
	if (!(_30313_i < _28614_txt.len())) { goto _iter_end_4382775840; }
	{
		jule::U8 _30513_b = _28614_txt[static_cast<jule::Int>(_30313_i)];
		if (_108e171c0_is_float_fmt_e(_30513_b,_30313_i)) {
			_28629_lit = _108e171c0_float_fmt_e(_28614_txt,_30313_i);
			return _28629_lit;
		}
		if ((!(_108e15ff0_is_octal(_30513_b)))) {
			goto _iter_end_4382775840;
		}
	}
	_iter_next_4382775840:;
	(_30313_i)++;
	goto _iter_begin_4382775840;
	_iter_end_4382775840:;
	if (_30313_i == _29413_octal_start) {
		return _28629_lit;
	}
	_28629_lit = static_cast<jule::Str>(_28614_txt.slice(0LL,static_cast<jule::Int>(_30313_i)));
	return _28629_lit;
}



inline jule::Str _108e171c0_hex_num(jule::Slice<jule::U8> _32012_txt) {
	jule::Str _32027_lit = jule::Str();
	if (_32012_txt.len() < 3LL) {
		return _32027_lit;
	}
	if ((_32012_txt[0LL] != '0') || ((_32012_txt[1LL] != 'x') && (_32012_txt[1LL] != 'X'))) {
		return _32027_lit;
	}
	
	jule::Int _32913_i = 2LL;
	_julec_label_loop:;
	_iter_begin_4382789552:;
	if (!(_32913_i < _32012_txt.len())) { goto _iter_end_4382789552; }
	{
		jule::U8 _33213_b = _32012_txt[static_cast<jule::Int>(_32913_i)];
		{
			if (!((_108e171c0_is_float_fmt_dotp(_32012_txt,_32913_i)))) { goto _case_end_4382792448; }
			_case_begin_4382792448:;
			{
				_32027_lit = _108e171c0_float_fmt_dotp(_32012_txt,_32913_i);
				return _32027_lit;
			}
			goto _match_end_4382792160;
			_case_end_4382792448:;
			if (!((_108e171c0_is_float_fmt_dotfp(_32012_txt,_32913_i)))) { goto _case_end_4382792560; }
			_case_begin_4382792560:;
			{
				_32027_lit = _108e171c0_float_fmt_dotfp(_32012_txt,_32913_i);
				return _32027_lit;
			}
			goto _match_end_4382792160;
			_case_end_4382792560:;
			if (!((_108e171c0_is_float_fmt_p(_33213_b,_32913_i)))) { goto _case_end_4382792672; }
			_case_begin_4382792672:;
			{
				_32027_lit = _108e171c0_float_fmt_p(_32012_txt,_32913_i);
				return _32027_lit;
			}
			goto _match_end_4382792160;
			_case_end_4382792672:;
			if (!((_108e171c0_is_float_fmt_dotnp(_32012_txt,_32913_i)))) { goto _case_end_4382792800; }
			_case_begin_4382792800:;
			{
				_32027_lit = _108e171c0_float_fmt_dotnp(_32012_txt,_32913_i);
				return _32027_lit;
			}
			goto _match_end_4382792160;
			_case_end_4382792800:;
			if (!(((!(_108e15ff0_is_hex(_33213_b)))))) { goto _case_end_4382792928; }
			_case_begin_4382792928:;
			{
				goto _iter_end_4382789552;
			}
			goto _match_end_4382792160;
			_case_end_4382792928:;
			_match_end_4382792160:;
		}
	}
	_iter_next_4382789552:;
	(_32913_i)++;
	goto _iter_begin_4382789552;
	_iter_end_4382789552:;
	if (_32913_i == 2LL) {
		return _32027_lit;
	}
	_32027_lit = static_cast<jule::Str>(_32012_txt.slice(0LL,static_cast<jule::Int>(_32913_i)));
	return _32027_lit;
}



inline jule::Str _108e171c0_hex_escape(jule::Slice<jule::U8> _35715_txt,jule::Int _35728_n) {
	jule::Str _35738_seq = jule::Str();
	if (_35715_txt.len() < _35728_n) {
		return _35738_seq;
	}
	
	jule::Int _36313_i = 2LL;
	_iter_begin_4382803824:;
	if (!(_36313_i < _35728_n)) { goto _iter_end_4382803824; }
	{
		if ((!(_108e15ff0_is_hex(_35715_txt[static_cast<jule::Int>(_36313_i)])))) {
			return _35738_seq;
		}
	}
	_iter_next_4382803824:;
	(_36313_i)++;
	goto _iter_begin_4382803824;
	_iter_end_4382803824:;
	_35738_seq=static_cast<jule::Str>(_35715_txt.slice(0LL,static_cast<jule::Int>(_35728_n)));
	return _35738_seq;
}



inline jule::Str _108e171c0_big_unicode_point_escape(jule::Slice<jule::U8> _37529_txt) {
	return _108e171c0_hex_escape(_37529_txt,10LL);
}



inline jule::Str _108e171c0_little_unicode_point_escape(jule::Slice<jule::U8> _37732_txt) {
	return _108e171c0_hex_escape(_37732_txt,6LL);
}



inline jule::Str _108e171c0_hex_byte_escape(jule::Slice<jule::U8> _37920_txt) {
	return _108e171c0_hex_escape(_37920_txt,4LL);
}



inline jule::Str _108e171c0_byte_escape(jule::Slice<jule::U8> _38216_txt) {
	jule::Str _38231_seq = jule::Str();
	if (_38216_txt.len() < 4LL) {
		return _38231_seq;
	}
	if (((!(_108e15ff0_is_octal(_38216_txt[1LL]))) || (!(_108e15ff0_is_octal(_38216_txt[2LL])))) || (!(_108e15ff0_is_octal(_38216_txt[3LL])))) {
		return _38231_seq;
	}
	_38231_seq = static_cast<jule::Str>(_38216_txt.slice(0LL,4LL));
	return _38231_seq;
}



inline jule::Slice<_1486379e0_Log> _108e171c0_lex(jule::Ref<_108e58b50_File> _77216_f) {
	if ((!(jule::real(_77216_f)))) {
		return nullptr;
	}
	_108e171c0_Lex _77713_lex = _108e171c0_Lex(jule::Slice<_108e15ff0_Token>(),_77216_f,0LL,jule::Int(),-1LL,jule::Slice<_1486379e0_Log>());
	_77713_lex._method_new_line();
	_77713_lex._method_lex();
	if (_77713_lex._field_errors.len() > 0LL) {
		return _77713_lex._field_errors;
	}
	_77216_f->_field__tokens=_77713_lex._field_tokens;
	return nullptr;
}



inline jule::Ref<_1190cb490_FileInfo> _1190cb490_parse_file(jule::Ref<_108e58b50_File> _2223_f) {
	if ((!(jule::real(_2223_f)))) {
		return jule::new_ref<_1190cb490_FileInfo>();
	}
	jule::Ref<_1190cb490_FileInfo> _2713_finf = jule::new_struct<_1190cb490_FileInfo>(new( std::nothrow ) _1190cb490_FileInfo());
	std::tie(_2713_finf->_field_ast,_2713_finf->_field_errors) = _1190cb490_parse_fileset(_2223_f);
	if (_2713_finf->_field_errors.len() > 0LL) {
		jule::drop(_2713_finf->_field_ast);
	}
	return _2713_finf;
}



inline jule::Ref<_1190cb490_PackageInfo> _1190cb490_parse_package(jule::Slice<jule::Ref<_108e58b50_File>> _3926_filesets) {
	if (_3926_filesets == nullptr) {
		return jule::new_ref<_1190cb490_PackageInfo>();
	}
	jule::Ref<_1190cb490_PackageInfo> _4413_pinf = jule::new_struct<_1190cb490_PackageInfo>(new( std::nothrow ) _1190cb490_PackageInfo());
	_4413_pinf->_field_files=jule::Slice<jule::Ref<_1190cb490_FileInfo>>::alloc(0LL,static_cast<jule::Int>(static_cast<jule::I64>(_3926_filesets.len())));
	{
		auto __julec_range_expr = _3926_filesets;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_108e58b50_File> _1190cb490_f = *__julec_range_begin;
			_iter_begin_4364053456:;
			{
				if ((!(jule::real(_1190cb490_f)))) {
					goto _iter_next_4364053456;
				}
				jule::Ref<_1190cb490_FileInfo> _5117_finfo = _1190cb490_parse_file(_1190cb490_f);
				_4413_pinf->_field_files=jule::append(_4413_pinf->_field_files,jule::Slice<jule::Ref<_1190cb490_FileInfo>>({_5117_finfo}));
			}
			_iter_next_4364053456:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190cb490_f = *__julec_range_begin; goto _iter_begin_4364053456; }
			_iter_end_4364053456:;
		}
	}
	return _4413_pinf;
}



inline std::tuple<jule::Ref<_1487f02c0_Ast>,jule::Slice<_1486379e0_Log>> _1190cb490_parse_fileset(jule::Ref<_108e58b50_File> _5822_f) {
	jule::Ref<_138657c70_Parser> _5913_p = jule::new_struct<_138657c70_Parser>(new( std::nothrow ) _138657c70_Parser());
	_5913_p->_method_parse(_5822_f);
	return std::make_tuple(_5913_p->_field_ast,_5913_p->_field_errors);
}



inline jule::Ref<_1487f5920_ScopeTree> _1190d5970_new_scope(void) {
	return jule::new_struct<_1487f5920_ScopeTree>(new( std::nothrow ) _1487f5920_ScopeTree());
}



inline std::tuple<jule::Bool,jule::Bool> _1190d5970_is_st(_108e15ff0_Token _4410_current,_108e15ff0_Token _4426_prev) {
	jule::Bool _4451_terminated = jule::Bool();
	jule::Bool _4441_ok = jule::Bool();
	_4441_ok=(_4410_current._field_id == 5LLU) || (_4426_prev._field_row < _4410_current._field_row);
	_4451_terminated=_4410_current._field_id == 5LLU;
	return std::make_tuple(_4441_ok,_4451_terminated);
}



inline std::tuple<jule::Int,jule::Bool> _1190d5970_next_st_pos(jule::Slice<_108e15ff0_Token> _5116_tokens,jule::Int _5133_start) {
	jule::Int _5213_brace_n = 0LL;
	jule::Int _5313_i = _5133_start;
	_iter_begin_4364074064:;
	if (!(_5313_i < _5116_tokens.len())) { goto _iter_end_4364074064; }
	{
		jule::Bool _5517_ok = false;
		jule::Bool _5617_terminated = false;
		_108e15ff0_Token _5713_tok = _5116_tokens[static_cast<jule::Int>(_5313_i)];
		{
			auto _match_expr{ _5713_tok._field_id };
			if (!((3LLU) == _match_expr)) { goto _case_end_4364080144; }
			_case_begin_4364080144:;
			{
				{
					auto _match_expr{ _5713_tok._field_kind };
					if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4364088176; }
					_case_begin_4364088176:;
					{
						if ((_5213_brace_n == 0LL) && (_5313_i > _5133_start)) {
							std::tie(_5517_ok,_5617_terminated) = _1190d5970_is_st(_5713_tok,_5116_tokens[static_cast<jule::Int>(_5313_i - 1LL)]);
							if (_5517_ok) {
								goto _julec_label_return;
							}
						}
						(_5213_brace_n)++;
						goto _iter_next_4364074064;
					}
					goto _match_end_4364080624;
					_case_end_4364088176:;
					_case_begin_4364081744:;
					{
						(_5213_brace_n)--;
						if ((_5213_brace_n == 0LL) && ((_5313_i + 1LL) < _5116_tokens.len())) {
							std::tie(_5517_ok,_5617_terminated) = _1190d5970_is_st(_5116_tokens[static_cast<jule::Int>(_5313_i + 1LL)],_5713_tok);
							if (_5517_ok) {
								(_5313_i)++;
								goto _julec_label_return;
							}
						}
						goto _iter_next_4364074064;
					}
					goto _match_end_4364080624;
					_case_end_4364081744:;
					_match_end_4364080624:;
				}
			}
			goto _match_end_4364078112;
			_case_end_4364080144:;
			_match_end_4364078112:;
		}
		if (_5213_brace_n != 0LL) {
			goto _iter_next_4364074064;
		} else if (_5313_i > _5133_start) {
			_108e15ff0_Token _8917_prev = _5116_tokens[static_cast<jule::Int>(_5313_i - 1LL)];
			if (((_8917_prev._field_id == 7LLU) && _108e15ff0_is_bin_op(_8917_prev._field_kind)) && (_8917_prev._field_row < _5713_tok._field_row)) {
				goto _iter_next_4364074064;
			}
			std::tie(_5517_ok,_5617_terminated) = _1190d5970_is_st(_5713_tok,_8917_prev);
		} else {
			std::tie(_5517_ok,_5617_terminated) = _1190d5970_is_st(_5713_tok,_5713_tok);
		}
		if ((!(_5517_ok))) {
			goto _iter_next_4364074064;
		}
		_julec_label_return:;
		if (_5617_terminated) {
			(_5313_i)++;
		}
		return std::make_tuple(_5313_i,_5617_terminated);
	}
	_iter_next_4364074064:;
	(_5313_i)++;
	goto _iter_begin_4364074064;
	_iter_end_4364074064:;
	return std::make_tuple(_5313_i,false);
}



inline std::tuple<jule::Slice<_108e15ff0_Token>,jule::Bool> _1190d5970_skip_st(jule::Int& _11217_i,jule::Slice<_108e15ff0_Token> _11229_tokens) {
	jule::Int _1139_start = _11217_i;
	jule::Bool _11413_terminated = false;
	std::tie(_11217_i,_11413_terminated) = _1190d5970_next_st_pos(_11229_tokens,_1139_start);
	jule::Slice<_108e15ff0_Token> _11613_st_tokens = _11229_tokens.slice(static_cast<jule::Int>(_1139_start),static_cast<jule::Int>(_11217_i));
	if (_11413_terminated) {
		if (_11613_st_tokens.len() == 1LL) {
			std::tie(_11613_st_tokens,_11413_terminated) = _1190d5970_skip_st(_11217_i,_11229_tokens);
			return std::make_tuple(_11613_st_tokens,_11413_terminated);
		}
		_11613_st_tokens=_11613_st_tokens.slice(0LL,static_cast<jule::Int>(_11613_st_tokens.len() - 1LL));
	}
	return std::make_tuple(_11613_st_tokens,_11413_terminated);
}



inline jule::Slice<jule::Ref<_1190d5970_Stmt>> _1190d5970_split_stms(jule::Slice<_108e15ff0_Token> _13419_tokens) {
	jule::Slice<jule::Ref<_1190d5970_Stmt>> _13513_stms = nullptr;
	jule::Int _13613_pos = 0LL;
	_iter_begin_4364116160:;
	if (!(_13613_pos < _13419_tokens.len())) { goto _iter_end_4364116160; }
	{
		jule::Slice<_108e15ff0_Token> _13818_tokens;
		jule::Bool _13826_terminated;
		std::tie(_13818_tokens,_13826_terminated) = _1190d5970_skip_st(_13613_pos,_13419_tokens);
		_13513_stms=jule::append(_13513_stms,jule::Slice<jule::Ref<_1190d5970_Stmt>>({jule::new_struct<_1190d5970_Stmt>(new( std::nothrow ) _1190d5970_Stmt(_13818_tokens,_13826_terminated))}));
	}
	_iter_next_4364116160:;
	goto _iter_begin_4364116160;
	_iter_end_4364116160:;
	return _13513_stms;
}



inline jule::Slice<_108e15ff0_Token> _1190cb760_is_fn_call(jule::Slice<_108e15ff0_Token> _3919_tokens) {
	{
		auto _match_expr{ _3919_tokens[0LL]._field_id };
		if (!((3LLU) == _match_expr || (2LLU) == _match_expr || (1LLU) == _match_expr)) { goto _case_end_4364124208; }
		goto _match_end_4364121696;
		_case_end_4364124208:;
		_case_begin_4364116592:;
		{
			_108e15ff0_Token _4713_tok = _3919_tokens[static_cast<jule::Int>(_3919_tokens.len() - 1LL)];
			if ((_4713_tok._field_id != 3LLU) && (_4713_tok._field_kind != jule::Str(")", 1))) {
				return nullptr;
			}
		}
		goto _match_end_4364121696;
		_case_end_4364116592:;
		_match_end_4364121696:;
	}
	_108e15ff0_Token _529_tok = _3919_tokens[static_cast<jule::Int>(_3919_tokens.len() - 1LL)];
	if ((_529_tok._field_id != 3LLU) || (_529_tok._field_kind != jule::Str(")", 1))) {
		return nullptr;
	}
	jule::Int _5613_brace_n = 0LL;
	jule::I64 _5913_i = _3919_tokens.len() - 1LL;
	_iter_begin_4364127504:;
	if (!(_5913_i >= 1LL)) { goto _iter_end_4364127504; }
	{
		_108e15ff0_Token _6113_tok = _3919_tokens[static_cast<jule::Int>(_5913_i)];
		if (_6113_tok._field_id == 3LLU) {
			{
				auto _match_expr{ _6113_tok._field_kind };
				if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4364134976; }
				_case_begin_4364134976:;
				{
					(_5613_brace_n)++;
				}
				goto _match_end_4364134240;
				_case_end_4364134976:;
				if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4364135088; }
				_case_begin_4364135088:;
				{
					(_5613_brace_n)--;
				}
				goto _match_end_4364134240;
				_case_end_4364135088:;
				_match_end_4364134240:;
			}
			if (_5613_brace_n == 0LL) {
				return _3919_tokens.slice(0LL,static_cast<jule::Int>(_5913_i));
			}
		}
	}
	_iter_next_4364127504:;
	(_5913_i)--;
	goto _iter_begin_4364127504;
	_iter_end_4364127504:;
	return nullptr;
}



inline jule::Ref<_1190cb760_CallData> _1190cb760_get_call_data(jule::Slice<_108e15ff0_Token> _8122_tokens) {
	jule::Ref<_1190cb760_CallData> _8213_data = jule::new_struct<_1190cb760_CallData>(new( std::nothrow ) _1190cb760_CallData());
	std::tie(_8213_data->_field_expr_tokens,_8213_data->_field_args_tokens) = _138657c70_range_last(_8122_tokens);
	if (_8213_data->_field_expr_tokens.len() == 0LL) {
		return _8213_data;
	}
	_108e15ff0_Token _899_token = _8213_data->_field_expr_tokens[static_cast<jule::Int>(_8213_data->_field_expr_tokens.len() - 1LL)];
	if ((_899_token._field_id == 3LLU) && (_899_token._field_kind == jule::Str("]", 1))) {
		std::tie(_8213_data->_field_expr_tokens,_8213_data->_field_generics_tokens) = _138657c70_range_last(_8213_data->_field_expr_tokens);
	}
	return _8213_data;
}



inline jule::Slice<_108e15ff0_Token> _1190cb760_get_block_expr(jule::Slice<_108e15ff0_Token> _9723_tokens) {
	jule::Int _9813_brace_n = 0LL;
	{
		auto __julec_range_expr = _9723_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			_108e15ff0_Token _1190cb760_tok = *__julec_range_begin;
			_iter_begin_4364148112:;
			{
				if (_1190cb760_tok._field_id == 3LLU) {
					{
						auto _match_expr{ _1190cb760_tok._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr)) { goto _case_end_4364152992; }
						_case_begin_4364152992:;
						{
							if (_9813_brace_n > 0LL) {
								(_9813_brace_n)++;
								goto _match_end_4364150912;
							}
							return _9723_tokens.slice(0LL,static_cast<jule::Int>(_1190cb760_i));
						}
						goto _match_end_4364150912;
						_case_end_4364152992:;
						if (!((jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4364152752; }
						_case_begin_4364152752:;
						{
							(_9813_brace_n)++;
						}
						goto _match_end_4364150912;
						_case_end_4364152752:;
						_case_begin_4364151600:;
						{
							(_9813_brace_n)--;
						}
						goto _match_end_4364150912;
						_case_end_4364151600:;
						_match_end_4364150912:;
					}
				}
			}
			_iter_next_4364148112:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_tok = *__julec_range_begin; goto _iter_begin_4364148112; }
			_iter_end_4364148112:;
		}
	}
	return nullptr;
}



inline std::tuple<jule::Slice<_108e15ff0_Token>,jule::Slice<_108e15ff0_Token>> _1190cb760_split_colon(jule::Slice<_108e15ff0_Token> _12320_tokens) {
	jule::Int _12413_range_n = 0LL;
	{
		auto __julec_range_expr = _12320_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			_108e15ff0_Token _1190cb760_token = *__julec_range_begin;
			_iter_begin_4364150480:;
			{
				{
					auto _match_expr{ _1190cb760_token._field_id };
					if (!((3LLU) == _match_expr)) { goto _case_end_4364158752; }
					_case_begin_4364158752:;
					{
						{
							auto _match_expr{ _1190cb760_token._field_kind };
							if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4364161312; }
							_case_begin_4364161312:;
							{
								(_12413_range_n)++;
								goto _iter_next_4364150480;
							}
							goto _match_end_4364159408;
							_case_end_4364161312:;
							_case_begin_4364160528:;
							{
								(_12413_range_n)--;
							}
							goto _match_end_4364159408;
							_case_end_4364160528:;
							_match_end_4364159408:;
						}
					}
					goto _match_end_4364158048;
					_case_end_4364158752:;
					if (!((11LLU) == _match_expr)) { goto _case_end_4364158864; }
					_case_begin_4364158864:;
					{
						if (_12413_range_n < 1LL) {
							jule::Slice<_108e15ff0_Token> _14125_l = _12320_tokens.slice(0LL,static_cast<jule::Int>(_1190cb760_i));
							jule::Slice<_108e15ff0_Token> _14225_r = _12320_tokens.slice(static_cast<jule::Int>(_1190cb760_i + 1LL));
							return std::make_tuple(_14125_l,_14225_r);
						}
					}
					goto _match_end_4364158048;
					_case_end_4364158864:;
					_match_end_4364158048:;
				}
			}
			_iter_next_4364150480:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_token = *__julec_range_begin; goto _iter_begin_4364150480; }
			_iter_end_4364150480:;
		}
	}
	return std::make_tuple(nullptr,nullptr);
}



inline jule::Slice<_108e15ff0_Token> _1190cb760_eliminate_comments(jule::Slice<_108e15ff0_Token> _18127_tokens) {
	jule::Slice<_108e15ff0_Token> _18213_cutted = nullptr;
	{
		auto __julec_range_expr = _18127_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_108e15ff0_Token _1190cb760_token = *__julec_range_begin;
			_iter_begin_4364169456:;
			{
				if (_1190cb760_token._field_id != 18LLU) {
					_18213_cutted=jule::append(_18213_cutted,jule::Slice<_108e15ff0_Token>({_1190cb760_token}));
				}
			}
			_iter_next_4364169456:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190cb760_token = *__julec_range_begin; goto _iter_begin_4364169456; }
			_iter_end_4364169456:;
		}
	}
	return _18213_cutted;
}



inline jule::Int _1190cb760_find_lowest_prec_op(jule::Slice<_108e15ff0_Token> _19324_tokens) {
	_1190cb760_Precedencer _19413_prec = _1190cb760_Precedencer();
	jule::Int _19513_brace_n = 0LL;
	{
		auto __julec_range_expr = _19324_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190cb760_i = 0;
			_108e15ff0_Token _1190cb760_token = *__julec_range_begin;
			_iter_begin_4386213216:;
			{
				{
					if (!((_1190cb760_token._field_id == 3LLU))) { goto _case_end_4386215936; }
					_case_begin_4386215936:;
					{
						{
							auto _match_expr{ _1190cb760_token._field_kind };
							if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr)) { goto _case_end_4386219776; }
							_case_begin_4386219776:;
							{
								(_19513_brace_n)++;
							}
							goto _match_end_4386217200;
							_case_end_4386219776:;
							_case_begin_4386218464:;
							{
								(_19513_brace_n)--;
							}
							goto _match_end_4386217200;
							_case_end_4386218464:;
							_match_end_4386217200:;
						}
						goto _iter_next_4386213216;
					}
					goto _match_end_4386215712;
					_case_end_4386215936:;
					if (!((_1190cb760_i == 0LL))) { goto _case_end_4386216064; }
					_case_begin_4386216064:;
					{
						goto _iter_next_4386213216;
					}
					goto _match_end_4386215712;
					_case_end_4386216064:;
					if (!((_1190cb760_token._field_id != 7LLU))) { goto _case_end_4386216192; }
					_case_begin_4386216192:;
					{
						goto _iter_next_4386213216;
					}
					goto _match_end_4386215712;
					_case_end_4386216192:;
					if (!((_19513_brace_n > 0LL))) { goto _case_end_4386216320; }
					_case_begin_4386216320:;
					{
						goto _iter_next_4386213216;
					}
					goto _match_end_4386215712;
					_case_end_4386216320:;
					_match_end_4386215712:;
				}
				_108e15ff0_Token _22013_left = _19324_tokens[static_cast<jule::Int>(_1190cb760_i - 1LL)];
				if ((_22013_left._field_id == 7LLU) || (_22013_left._field_id == 11LLU)) {
					goto _iter_next_4386213216;
				}
				if (((_1190cb760_i > 1LL) && (_22013_left._field_id == 3LLU)) && (_22013_left._field_kind == jule::Str("]", 1))) {
					_108e15ff0_Token _22817_lleft = _19324_tokens[static_cast<jule::Int>(_1190cb760_i - 2LL)];
					if ((_22817_lleft._field_id == 3LLU) && (_22817_lleft._field_kind == jule::Str("[", 1))) {
						if ((_1190cb760_token._field_kind == jule::Str("&", 1)) || (_1190cb760_token._field_kind == jule::Str("*", 1))) {
							goto _iter_next_4386213216;
						}
					}
				}
				jule::Int _23713_p = _1190cb760_token._method_prec();
				if (_23713_p != -1LL) {
					_19413_prec._method_set(_23713_p,jule::Any(_1190cb760_i));
				}
			}
			_iter_next_4386213216:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190cb760_i; _1190cb760_token = *__julec_range_begin; goto _iter_begin_4386213216; }
			_iter_end_4386213216:;
		}
	}
	jule::Any _2439_data = _19413_prec._method_get_lower();
	if (_2439_data == nullptr) {
		return -1LL;
	}
	return _2439_data.operator jule::Int();
}



inline jule::Ref<_1487f5920_IdentExpr> _1190cb760_build_ident_expr(_108e15ff0_Token _25025_token) {
	return jule::new_struct<_1487f5920_IdentExpr>(new( std::nothrow ) _1487f5920_IdentExpr(_25025_token,_25025_token._field_kind,false));
}



inline std::tuple<jule::Slice<_108e15ff0_Token>,jule::Int> _1190cb760_get_range_expr_tokens(jule::Slice<_108e15ff0_Token> _25830_tokens) {
	jule::Int _25913_range_n = 0LL;
	jule::I64 _26013_i = _25830_tokens.len() - 1LL;
	_iter_begin_4381271376:;
	if (!(_26013_i >= 0LL)) { goto _iter_end_4381271376; }
	{
		_108e15ff0_Token _26213_tok = _25830_tokens[static_cast<jule::Int>(_26013_i)];
		if (_26213_tok._field_id == 3LLU) {
			{
				auto _match_expr{ _26213_tok._field_kind };
				if (!((jule::Str("}", 1)) == _match_expr || (jule::Str("]", 1)) == _match_expr || (jule::Str(")", 1)) == _match_expr)) { goto _case_end_4381275904; }
				_case_begin_4381275904:;
				{
					(_25913_range_n)++;
				}
				goto _match_end_4381274384;
				_case_end_4381275904:;
				_case_begin_4381275072:;
				{
					(_25913_range_n)--;
				}
				goto _match_end_4381274384;
				_case_end_4381275072:;
				_match_end_4381274384:;
			}
		}
		if (_25913_range_n == 0LL) {
			return std::make_tuple(_25830_tokens.slice(0LL,static_cast<jule::Int>(_26013_i)),_25913_range_n);
		}
	}
	_iter_next_4381271376:;
	(_26013_i)--;
	goto _iter_begin_4381271376;
	_iter_end_4381271376:;
	return std::make_tuple(nullptr,_25913_range_n);
}



inline jule::Bool _149043a20_check_assign_tokens(jule::Slice<_108e15ff0_Token> _1624_tokens) {
	if ((_1624_tokens.len() == 0LL) || (!(_108e15ff0_is_assign(_1624_tokens[0LL]._field_id)))) {
		return false;
	}
	jule::Int _2113_brace_n = 0LL;
	{
		auto __julec_range_expr = _1624_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_108e15ff0_Token _149043a20_t = *__julec_range_begin;
			_iter_begin_4381282272:;
			{
				if (_149043a20_t._field_id == 3LLU) {
					{
						auto _match_expr{ _149043a20_t._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4381286096; }
						_case_begin_4381286096:;
						{
							(_2113_brace_n)++;
						}
						goto _match_end_4381284576;
						_case_end_4381286096:;
						_case_begin_4381285264:;
						{
							(_2113_brace_n)--;
						}
						goto _match_end_4381284576;
						_case_end_4381285264:;
						_match_end_4381284576:;
					}
				}
				if (_2113_brace_n < 0LL) {
					return false;
				} else if (_2113_brace_n > 0LL) {
					goto _iter_next_4381282272;
				} else if ((_149043a20_t._field_id == 7LLU) && _108e15ff0_is_assign_op(_149043a20_t._field_kind)) {
					return true;
				}
			}
			_iter_next_4381282272:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _149043a20_t = *__julec_range_begin; goto _iter_begin_4381282272; }
			_iter_end_4381282272:;
		}
	}
	return false;
}



inline _1486379e0_Log _138657c70_make_err(jule::Int _5113_row,jule::Int _5123_col,jule::Ref<_108e58b50_File> _5133_f,jule::Str _5143_fmt,jule::Slice<jule::Any> _5156_args) {
	return _1486379e0_Log(1LLU,_5113_row,_5123_col,_5133_f->_method_path(),_1486379e0_logf(_5143_fmt,_5156_args),jule::Str(),jule::Str());
}



inline jule::Slice<_108e15ff0_Token> _138657c70_range(jule::Int& _7015_i,jule::Str _7023_open,jule::Str _7040_close,jule::Slice<_108e15ff0_Token> _7062_tokens) {
	if (_7015_i >= _7062_tokens.len()) {
		return nullptr;
	}
	_108e15ff0_Token _759_tok = _7062_tokens[static_cast<jule::Int>(_7015_i)];
	if ((_759_tok._field_id != 3LLU) || (_759_tok._field_kind != _7023_open)) {
		return nullptr;
	}
	(_7015_i)++;
	jule::Int _8113_range_n = 1LL;
	jule::Int _829_start = _7015_i;
	_iter_begin_4381303424:;
	if (!((_8113_range_n != 0LL) && (_7015_i < _7062_tokens.len()))) { goto _iter_end_4381303424; }
	{
		_108e15ff0_Token _8413_token = _7062_tokens[static_cast<jule::Int>(_7015_i)];
		if (_8413_token._field_id == 3LLU) {
			{
				auto _match_expr{ _8413_token._field_kind };
				if (!((_7023_open) == _match_expr)) { goto _case_end_4381307872; }
				_case_begin_4381307872:;
				{
					(_8113_range_n)++;
				}
				goto _match_end_4381307136;
				_case_end_4381307872:;
				if (!((_7040_close) == _match_expr)) { goto _case_end_4381307984; }
				_case_begin_4381307984:;
				{
					(_8113_range_n)--;
				}
				goto _match_end_4381307136;
				_case_end_4381307984:;
				_match_end_4381307136:;
			}
		}
	}
	_iter_next_4381303424:;
	(_7015_i)++;
	goto _iter_begin_4381303424;
	_iter_end_4381303424:;
	return _7062_tokens.slice(static_cast<jule::Int>(_829_start),static_cast<jule::Int>(_7015_i - 1LL));
}



inline std::tuple<jule::Slice<_108e15ff0_Token>,jule::Slice<_108e15ff0_Token>> _138657c70_range_last(jule::Slice<_108e15ff0_Token> _10319_tokens) {
	jule::Slice<_108e15ff0_Token> _10355_cut = jule::Slice<_108e15ff0_Token>();
	jule::Slice<_108e15ff0_Token> _10338_cutted = jule::Slice<_108e15ff0_Token>();
	if (_10319_tokens.len() == 0LL) {
		_10338_cutted = _10319_tokens;
		_10355_cut = nullptr;
		return std::make_tuple(_10338_cutted,_10355_cut);
	} else if (_10319_tokens[static_cast<jule::Int>(_10319_tokens.len() - 1LL)]._field_id != 3LLU) {
		_10338_cutted = _10319_tokens;
		_10355_cut = nullptr;
		return std::make_tuple(_10338_cutted,_10355_cut);
	}
	jule::Int _11013_brace_n = 0LL;
	jule::I64 _11113_i = _10319_tokens.len() - 1LL;
	_iter_begin_4381307024:;
	if (!(_11113_i >= 0LL)) { goto _iter_end_4381307024; }
	{
		_108e15ff0_Token _11313_token = _10319_tokens[static_cast<jule::Int>(_11113_i)];
		if (_11313_token._field_id == 3LLU) {
			{
				auto _match_expr{ _11313_token._field_kind };
				if (!((jule::Str("}", 1)) == _match_expr || (jule::Str("]", 1)) == _match_expr || (jule::Str(")", 1)) == _match_expr)) { goto _case_end_4381323312; }
				_case_begin_4381323312:;
				{
					(_11013_brace_n)++;
					goto _iter_next_4381307024;
				}
				goto _match_end_4381321792;
				_case_end_4381323312:;
				_case_begin_4381322480:;
				{
					(_11013_brace_n)--;
				}
				goto _match_end_4381321792;
				_case_end_4381322480:;
				_match_end_4381321792:;
			}
		}
		if (_11013_brace_n == 0LL) {
			_10338_cutted = _10319_tokens.slice(0LL,static_cast<jule::Int>(_11113_i));
			_10355_cut = _10319_tokens.slice(static_cast<jule::Int>(_11113_i));
			return std::make_tuple(_10338_cutted,_10355_cut);
		}
	}
	_iter_next_4381307024:;
	(_11113_i)--;
	goto _iter_begin_4381307024;
	_iter_end_4381307024:;
	_10338_cutted = _10319_tokens;
	_10355_cut = nullptr;
	return std::make_tuple(_10338_cutted,_10355_cut);
}



inline std::tuple<jule::Slice<jule::Slice<_108e15ff0_Token>>,jule::Slice<_1486379e0_Log>> _138657c70_parts(jule::Slice<_108e15ff0_Token> _14114_tokens,jule::Uint _14131_id,jule::Bool _14144_expr_must) {
	if (_14114_tokens.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Slice<jule::Slice<_108e15ff0_Token>> _14613_parts = nullptr;
	jule::Slice<_1486379e0_Log> _14713_errors = nullptr;
	jule::Int _14913_range_n = 0LL;
	jule::Int _15013_last = 0LL;
	{
		auto __julec_range_expr = _14114_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _138657c70_i = 0;
			_108e15ff0_Token _138657c70_token = *__julec_range_begin;
			_iter_begin_4381336864:;
			{
				if (_138657c70_token._field_id == 3LLU) {
					{
						auto _match_expr{ _138657c70_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4381341152; }
						_case_begin_4381341152:;
						{
							(_14913_range_n)++;
							goto _iter_next_4381336864;
						}
						goto _match_end_4381339632;
						_case_end_4381341152:;
						_case_begin_4381340320:;
						{
							(_14913_range_n)--;
						}
						goto _match_end_4381339632;
						_case_end_4381340320:;
						_match_end_4381339632:;
					}
				}
				if (_14913_range_n > 0LL) {
					goto _iter_next_4381336864;
				}
				if (_138657c70_token._field_id == _14131_id) {
					if (_14144_expr_must && ((_138657c70_i - _15013_last) <= 0LL)) {
						_1486379e0_Log _17021_err = _138657c70_make_err(_138657c70_token._field_row,_138657c70_token._field_column,_138657c70_token._field_file,jule::Str("expression missing", 18),jule::Slice<jule::Any>({}));
						_14713_errors=jule::append(_14713_errors,jule::Slice<_1486379e0_Log>({_17021_err}));
					}
					_14613_parts=jule::append(_14613_parts,jule::Slice<jule::Slice<_108e15ff0_Token>>({_14114_tokens.slice(static_cast<jule::Int>(_15013_last),static_cast<jule::Int>(_138657c70_i))}));
					_15013_last=static_cast<jule::Int>(_138657c70_i + 1LL);
				}
			}
			_iter_next_4381336864:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_138657c70_i; _138657c70_token = *__julec_range_begin; goto _iter_begin_4381336864; }
			_iter_end_4381336864:;
		}
	}
	if (_15013_last < _14114_tokens.len()) {
		_14613_parts=jule::append(_14613_parts,jule::Slice<jule::Slice<_108e15ff0_Token>>({_14114_tokens.slice(static_cast<jule::Int>(_15013_last))}));
	} else if ((!(_14144_expr_must))) {
		_14613_parts=jule::append(_14613_parts,jule::Slice<jule::Slice<_108e15ff0_Token>>({jule::Slice<_108e15ff0_Token>({})}));
	}
	return std::make_tuple(_14613_parts,_14713_errors);
}



inline jule::Str _138657c70_get_close_kind_of_brace(jule::Str _18728_left) {
	{
		auto _match_expr{ _18728_left };
		if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4381354288; }
		_case_begin_4381354288:;
		{
			return jule::Str("(", 1);
		}
		goto _match_end_4381350576;
		_case_end_4381354288:;
		if (!((jule::Str("}", 1)) == _match_expr)) { goto _case_end_4381354400; }
		_case_begin_4381354400:;
		{
			return jule::Str("{", 1);
		}
		goto _match_end_4381350576;
		_case_end_4381354400:;
		if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4381354512; }
		_case_begin_4381354512:;
		{
			return jule::Str("[", 1);
		}
		goto _match_end_4381350576;
		_case_end_4381354512:;
		_case_begin_4381350768:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4381350576;
		_case_end_4381350768:;
		_match_end_4381350576:;
	}
}



inline _1486379e0_Log _138657c70_compiler_err(_108e15ff0_Token _19617_token,jule::Str _19631_fmt,jule::Slice<jule::Any> _19644_args) {
	return _1486379e0_Log(1LLU,_19617_token._field_row,_19617_token._field_column,_19617_token._field_file->_method_path(),_1486379e0_logf(_19631_fmt,_19644_args),_19617_token._field_file->_method_get_row(_19617_token._field_row),jule::Str());
}



inline void _138657c70_push_suggestion(_1486379e0_Log* _20731_log,jule::Str _20742_fmt,jule::Slice<jule::Any> _20755_args) {
	_20731_log->_field_suggestion=_1486379e0_logf(_20742_fmt,_20755_args);
}



inline jule::Ref<_1487f5920_Comment> _138657c70_build_comment(_108e15ff0_Token _21122_token) {
	_21122_token._field_kind=_21122_token._field_kind.slice(2LL).trim(jule::Str(" \n\r\t\v", 5));
	return jule::new_struct<_1487f5920_Comment>(new( std::nothrow ) _1487f5920_Comment(_21122_token,_21122_token._field_kind));
}



inline jule::Str _138657c70_tokstoa(jule::Slice<_108e15ff0_Token> _22012_tokens) {
	jule::Str _22113_s = jule::Str("", 0);
	{
		auto __julec_range_expr = _22012_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_108e15ff0_Token _138657c70_token = *__julec_range_begin;
			_iter_begin_4381370192:;
			{
				_22113_s+=_138657c70_token._field_kind;
			}
			_iter_next_4381370192:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _138657c70_token = *__julec_range_begin; goto _iter_begin_4381370192; }
			_iter_end_4381370192:;
		}
	}
	return _22113_s;
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_build_void_type(void) {
	return jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl());
}



inline jule::Ref<_1487f5920_TypeDecl> _103796900_build_prim_type(_108e15ff0_Token _2024_token) {
	return jule::new_struct<_1487f5920_TypeDecl>(new( std::nothrow ) _1487f5920_TypeDecl(_2024_token,jule::Any(jule::new_struct<_1487f5920_IdentTypeDecl>(new( std::nothrow ) _1487f5920_IdentTypeDecl(_2024_token,_2024_token._field_kind,false,nullptr)))));
}



inline std::tuple<jule::Slice<_108e15ff0_Token>,jule::Int> _103796900_split_map_range(jule::Slice<_108e15ff0_Token> _3524_tokens,jule::Int& _3546_i) {
	jule::Int _3579_colon = jule::Int();
	jule::Slice<_108e15ff0_Token> _3556_range_tokens = jule::Slice<_108e15ff0_Token>();
	_3579_colon=-1LL;
	jule::Int _3713_range_n = 0LL;
	jule::Int _389_start = _3546_i;
	_iter_begin_4381379008:;
	if (!(_3546_i < _3524_tokens.len())) { goto _iter_end_4381379008; }
	{
		_108e15ff0_Token _4013_token = _3524_tokens[static_cast<jule::Int>(_3546_i)];
		if (_4013_token._field_id == 3LLU) {
			{
				auto _match_expr{ _4013_token._field_kind };
				if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4381383776; }
				_case_begin_4381383776:;
				{
					(_3713_range_n)++;
					goto _iter_next_4381379008;
				}
				goto _match_end_4381382256;
				_case_end_4381383776:;
				_case_begin_4381382944:;
				{
					(_3713_range_n)--;
				}
				goto _match_end_4381382256;
				_case_end_4381382944:;
				_match_end_4381382256:;
			}
		}
		if (_3713_range_n == 0LL) {
			if ((_389_start + 1LL) > _3546_i) {
				return std::make_tuple(_3556_range_tokens,_3579_colon);
			}
			_3556_range_tokens=_3524_tokens.slice(static_cast<jule::Int>(_389_start + 1LL),static_cast<jule::Int>(_3546_i));
			goto _iter_end_4381379008;
		} else if (_3713_range_n != 1LL) {
			goto _iter_next_4381379008;
		}
		if ((_3579_colon == -1LL) && (_4013_token._field_id == 11LLU)) {
			_3579_colon=static_cast<jule::Int>((_3546_i - _389_start) - 1LL);
		}
	}
	_iter_next_4381379008:;
	(_3546_i)++;
	goto _iter_begin_4381379008;
	_iter_end_4381379008:;
	return std::make_tuple(_3556_range_tokens,_3579_colon);
}



inline void _104c409b0_lshift_unsig(_104c409b0_Const& _53222_c,_104c409b0_Const& _53233_x) {
	jule::U64 _5339_l = _53222_c._method_as_u64();
	jule::U64 _5349_r = _53233_x._method_as_u64();
	_53222_c._method_set_u64(static_cast<jule::U64>(_5339_l << _5349_r));
}



inline void _104c409b0_rshift_unsig(_104c409b0_Const& _53822_c,_104c409b0_Const& _53833_x) {
	jule::U64 _5399_l = _53822_c._method_as_u64();
	jule::U64 _5409_r = _53833_x._method_as_u64();
	_53822_c._method_set_u64(static_cast<jule::U64>(_5399_l >> _5409_r));
}



inline jule::Bool _104c40680_check_bit(jule::Str _914_v,jule::Int _922_bit,jule::Fn<jule::Bool(jule::Str,jule::Int,jule::Int)> _932_checker) {
	{
		if (!((_914_v == jule::Str("", 0)))) { goto _case_end_4385427584; }
		_case_begin_4385427584:;
		{
			return false;
		}
		goto _match_end_4385425248;
		_case_end_4385427584:;
		if (!((_914_v.len() == 1LL))) { goto _case_end_4385426416; }
		_case_begin_4385426416:;
		{
			return true;
		}
		goto _match_end_4385425248;
		_case_end_4385426416:;
		if (!((_914_v.has_prefix(jule::Str("0x", 2))))) { goto _case_end_4385426528; }
		_case_begin_4385426528:;
		{
			return _932_checker(_914_v.slice(2LL),16LL,_922_bit);
		}
		goto _match_end_4385425248;
		_case_end_4385426528:;
		if (!((_914_v.has_prefix(jule::Str("0b", 2))))) { goto _case_end_4385426640; }
		_case_begin_4385426640:;
		{
			return _932_checker(_914_v.slice(2LL),2LL,_922_bit);
		}
		goto _match_end_4385425248;
		_case_end_4385426640:;
		if (!((_914_v.has_prefix(jule::Str("0o", 2))))) { goto _case_end_4385425712; }
		_case_begin_4385425712:;
		{
			return _932_checker(_914_v.slice(2LL),8LL,_922_bit);
		}
		goto _match_end_4385425248;
		_case_end_4385425712:;
		if (!((_914_v[0LL] == '0'))) { goto _case_end_4385425824; }
		_case_begin_4385425824:;
		{
			return _932_checker(_914_v.slice(1LL),8LL,_922_bit);
		}
		goto _match_end_4385425248;
		_case_end_4385425824:;
		_case_begin_4385425408:;
		{
			return _932_checker(_914_v,10LL,_922_bit);
		}
		goto _match_end_4385425248;
		_case_end_4385425408:;
		_match_end_4385425248:;
	}
}



inline jule::Str _104c40680_real_kind_of(jule::Str _2421_kind) {
	{
		auto _match_expr{ _2421_kind };
		if (!((jule::Str("int", 3)) == _match_expr)) { goto _case_end_4385438224; }
		_case_begin_4385438224:;
		{
			return jule::Str("i64", 3);
		}
		goto _match_end_4385433456;
		_case_end_4385438224:;
		if (!((jule::Str("uint", 4)) == _match_expr || (jule::Str("uintptr", 7)) == _match_expr)) { goto _case_end_4385438336; }
		_case_begin_4385438336:;
		{
			return jule::Str("u64", 3);
		}
		goto _match_end_4385433456;
		_case_end_4385438336:;
		_case_begin_4385433216:;
		{
			return _2421_kind;
		}
		goto _match_end_4385433456;
		_case_end_4385433216:;
		_match_end_4385433456:;
	}
}



inline jule::Int _104c40680_bitsize_of(jule::Str _4019_k) {
	{
		auto _match_expr{ _4019_k };
		if (!((jule::Str("i8", 2)) == _match_expr || (jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4385441616; }
		_case_begin_4385441616:;
		{
			return 8LL;
		}
		goto _match_end_4385440528;
		_case_end_4385441616:;
		if (!((jule::Str("i16", 3)) == _match_expr || (jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4385441728; }
		_case_begin_4385441728:;
		{
			return 16LL;
		}
		goto _match_end_4385440528;
		_case_end_4385441728:;
		if (!((jule::Str("i32", 3)) == _match_expr || (jule::Str("u32", 3)) == _match_expr || (jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4385441904; }
		_case_begin_4385441904:;
		{
			return 32LL;
		}
		goto _match_end_4385440528;
		_case_end_4385441904:;
		if (!((jule::Str("i64", 3)) == _match_expr || (jule::Str("u64", 3)) == _match_expr || (jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4385442016; }
		_case_begin_4385442016:;
		{
			return 64LL;
		}
		goto _match_end_4385440528;
		_case_end_4385442016:;
		if (!((jule::Str("uint", 4)) == _match_expr || (jule::Str("int", 3)) == _match_expr)) { goto _case_end_4385442144; }
		_case_begin_4385442144:;
		{
			return 64LL;
		}
		goto _match_end_4385440528;
		_case_end_4385442144:;
		_case_begin_4385438880:;
		{
			return -1LL;
		}
		goto _match_end_4385440528;
		_case_end_4385438880:;
		_match_end_4385440528:;
	}
}



inline jule::Str _104c40680_int_from_bits(jule::U64 _7222_bits) {
	{
		auto _match_expr{ _7222_bits };
		if (!((8LL) == _match_expr)) { goto _case_end_4385446080; }
		_case_begin_4385446080:;
		{
			return jule::Str("i8", 2);
		}
		goto _match_end_4385444080;
		_case_end_4385446080:;
		if (!((16LL) == _match_expr)) { goto _case_end_4385446192; }
		_case_begin_4385446192:;
		{
			return jule::Str("i16", 3);
		}
		goto _match_end_4385444080;
		_case_end_4385446192:;
		if (!((32LL) == _match_expr)) { goto _case_end_4385446304; }
		_case_begin_4385446304:;
		{
			return jule::Str("i32", 3);
		}
		goto _match_end_4385444080;
		_case_end_4385446304:;
		if (!((64LL) == _match_expr)) { goto _case_end_4385447248; }
		_case_begin_4385447248:;
		{
			return jule::Str("i64", 3);
		}
		goto _match_end_4385444080;
		_case_end_4385447248:;
		_case_begin_4385445440:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4385444080;
		_case_end_4385445440:;
		_match_end_4385444080:;
	}
}



inline jule::Str _104c40680_uint_from_bits(jule::U64 _8523_bits) {
	{
		auto _match_expr{ _8523_bits };
		if (!((8LL) == _match_expr)) { goto _case_end_4385440080; }
		_case_begin_4385440080:;
		{
			return jule::Str("u8", 2);
		}
		goto _match_end_4385449264;
		_case_end_4385440080:;
		if (!((16LL) == _match_expr)) { goto _case_end_4385440192; }
		_case_begin_4385440192:;
		{
			return jule::Str("u16", 3);
		}
		goto _match_end_4385449264;
		_case_end_4385440192:;
		if (!((32LL) == _match_expr)) { goto _case_end_4385440304; }
		_case_begin_4385440304:;
		{
			return jule::Str("u32", 3);
		}
		goto _match_end_4385449264;
		_case_end_4385440304:;
		if (!((64LL) == _match_expr)) { goto _case_end_4385451264; }
		_case_begin_4385451264:;
		{
			return jule::Str("u64", 3);
		}
		goto _match_end_4385449264;
		_case_end_4385451264:;
		_case_begin_4385450080:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4385449264;
		_case_end_4385450080:;
		_match_end_4385449264:;
	}
}



inline jule::Str _104c40680_float_from_bits(jule::U64 _9924_bits) {
	{
		auto _match_expr{ _9924_bits };
		if (!((32LL) == _match_expr)) { goto _case_end_4385452656; }
		_case_begin_4385452656:;
		{
			return jule::Str("f32", 3);
		}
		goto _match_end_4385453200;
		_case_end_4385452656:;
		if (!((64LL) == _match_expr)) { goto _case_end_4385452768; }
		_case_begin_4385452768:;
		{
			return jule::Str("f64", 3);
		}
		goto _match_end_4385453200;
		_case_end_4385452768:;
		_case_begin_4385454064:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4385453200;
		_case_end_4385454064:;
		_match_end_4385453200:;
	}
}



inline jule::Bool _104c40680_check_bit_int(jule::Str _10822_v,jule::Int _10830_bit) {
	return _104c40680_check_bit(_10822_v,_10830_bit,jule::Fn<jule::Bool(jule::Str,jule::Int,jule::Int)>([=](jule::Str _10930_v,jule::Int _10938_base,jule::Int _10949_bit) mutable -> jule::Bool {
		jule::Int _11017_err;
		std::tie(std::ignore,_11017_err) = _1186cfb10_parse_int(_10930_v,_10938_base,_10949_bit);
		return _11017_err == 0LLU;
	}));
}



inline jule::Bool _104c40680_check_bit_uint(jule::Str _11623_v,jule::Int _11631_bit) {
	return _104c40680_check_bit(_11623_v,_11631_bit,jule::Fn<jule::Bool(jule::Str,jule::Int,jule::Int)>([=](jule::Str _11730_v,jule::Int _11738_base,jule::Int _11749_bit) mutable -> jule::Bool {
		jule::Int _11817_err;
		std::tie(std::ignore,_11817_err) = _1186cfb10_parse_uint(_11730_v,_11738_base,_11749_bit);
		return _11817_err == 0LLU;
	}));
}



inline jule::Bool _104c40680_check_bit_float(jule::Str _12424_val,jule::Int _12434_bit) {
	jule::Int _12513_err;
	std::tie(std::ignore,_12513_err) = _1186f6b70_parse_float(_12424_val,_12434_bit);
	return _12513_err == 0LLU;
}



inline jule::U64 _104c40680_bitsize_of_float(jule::F64 _13425_x) {
	{
		if (!(((-340282346638528860000000000000000000000.0 <= _13425_x) && (_13425_x <= 340282346638528860000000000000000000000.0)))) { goto _case_end_4385478144; }
		_case_begin_4385478144:;
		{
			return 32LL;
		}
		goto _match_end_4385475920;
		_case_end_4385478144:;
		_case_begin_4385476080:;
		{
			return 64LL;
		}
		goto _match_end_4385475920;
		_case_end_4385476080:;
		_match_end_4385475920:;
	}
}



inline jule::U64 _104c40680_bitsize_of_int(jule::I64 _14823_x) {
	{
		if (!(((-128LL <= _14823_x) && (_14823_x <= 127LL)))) { goto _case_end_4385481056; }
		_case_begin_4385481056:;
		{
			return 8LL;
		}
		goto _match_end_4385478800;
		_case_end_4385481056:;
		if (!(((-32768LL <= _14823_x) && (_14823_x <= 32767LL)))) { goto _case_end_4385480624; }
		_case_begin_4385480624:;
		{
			return 16LL;
		}
		goto _match_end_4385478800;
		_case_end_4385480624:;
		if (!(((-2147483648LL <= _14823_x) && (_14823_x <= 2147483647LL)))) { goto _case_end_4385480736; }
		_case_begin_4385480736:;
		{
			return 32LL;
		}
		goto _match_end_4385478800;
		_case_end_4385480736:;
		_case_begin_4385478896:;
		{
			return 64LL;
		}
		goto _match_end_4385478800;
		_case_end_4385478896:;
		_match_end_4385478800:;
	}
}



inline jule::U64 _104c40680_bitsize_of_uint(jule::U64 _16424_x) {
	{
		if (!((_16424_x <= 255LL))) { goto _case_end_4385486176; }
		_case_begin_4385486176:;
		{
			return 8LL;
		}
		goto _match_end_4385483280;
		_case_end_4385486176:;
		if (!((_16424_x <= 65535LL))) { goto _case_end_4385485744; }
		_case_begin_4385485744:;
		{
			return 16LL;
		}
		goto _match_end_4385483280;
		_case_end_4385485744:;
		if (!((_16424_x <= 4294967295LL))) { goto _case_end_4385485856; }
		_case_begin_4385485856:;
		{
			return 32LL;
		}
		goto _match_end_4385483280;
		_case_end_4385485856:;
		_case_begin_4385484320:;
		{
			return 64LL;
		}
		goto _match_end_4385483280;
		_case_end_4385484320:;
		_match_end_4385483280:;
	}
}



inline jule::F64 _104c42960_min(jule::Str _4316_k) {
	_4316_k=_104c40680_real_kind_of(_4316_k);
	{
		auto _match_expr{ _4316_k };
		if (!((jule::Str("i8", 2)) == _match_expr)) { goto _case_end_4385490560; }
		_case_begin_4385490560:;
		{
			return -128LL;
		}
		goto _match_end_4385488176;
		_case_end_4385490560:;
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4385490080; }
		_case_begin_4385490080:;
		{
			return -32768LL;
		}
		goto _match_end_4385488176;
		_case_end_4385490080:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4385490192; }
		_case_begin_4385490192:;
		{
			return -2147483648LL;
		}
		goto _match_end_4385488176;
		_case_end_4385490192:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4385489680; }
		_case_begin_4385489680:;
		{
			return jule::MIN_I64;
		}
		goto _match_end_4385488176;
		_case_end_4385489680:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4385489792; }
		_case_begin_4385489792:;
		{
			return -340282346638528860000000000000000000000.0;
		}
		goto _match_end_4385488176;
		_case_end_4385489792:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4385489904; }
		_case_begin_4385489904:;
		{
			return jule::MIN_F64;
		}
		goto _match_end_4385488176;
		_case_end_4385489904:;
		_case_begin_4385488736:;
		{
			return 0LL;
		}
		goto _match_end_4385488176;
		_case_end_4385488736:;
		_match_end_4385488176:;
	}
}



inline jule::F64 _104c42960_max(jule::Str _5816_k) {
	_5816_k=_104c40680_real_kind_of(_5816_k);
	{
		auto _match_expr{ _5816_k };
		if (!((jule::Str("i8", 2)) == _match_expr)) { goto _case_end_4385496016; }
		_case_begin_4385496016:;
		{
			return 127LL;
		}
		goto _match_end_4385494288;
		_case_end_4385496016:;
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4385496128; }
		_case_begin_4385496128:;
		{
			return 32767LL;
		}
		goto _match_end_4385494288;
		_case_end_4385496128:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4385495216; }
		_case_begin_4385495216:;
		{
			return 2147483647LL;
		}
		goto _match_end_4385494288;
		_case_end_4385495216:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4385495328; }
		_case_begin_4385495328:;
		{
			return jule::MAX_I64;
		}
		goto _match_end_4385494288;
		_case_end_4385495328:;
		if (!((jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4385495440; }
		_case_begin_4385495440:;
		{
			return 255LL;
		}
		goto _match_end_4385494288;
		_case_end_4385495440:;
		if (!((jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4385495552; }
		_case_begin_4385495552:;
		{
			return 65535LL;
		}
		goto _match_end_4385494288;
		_case_end_4385495552:;
		if (!((jule::Str("u32", 3)) == _match_expr)) { goto _case_end_4385495664; }
		_case_begin_4385495664:;
		{
			return 4294967295LL;
		}
		goto _match_end_4385494288;
		_case_end_4385495664:;
		if (!((jule::Str("u64", 3)) == _match_expr)) { goto _case_end_4385495776; }
		_case_begin_4385495776:;
		{
			return jule::MAX_U64;
		}
		goto _match_end_4385494288;
		_case_end_4385495776:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4385495888; }
		_case_begin_4385495888:;
		{
			return 340282346638528860000000000000000000000.0;
		}
		goto _match_end_4385494288;
		_case_end_4385495888:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4385496656; }
		_case_begin_4385496656:;
		{
			return jule::MAX_F64;
		}
		goto _match_end_4385494288;
		_case_end_4385496656:;
		_case_begin_4385492048:;
		{
			return 0LL;
		}
		goto _match_end_4385494288;
		_case_end_4385492048:;
		_match_end_4385494288:;
	}
}



inline jule::Bool _104cc26b0_is_i8_compatible(jule::Str _629_k) {
	_629_k=_104c40680_real_kind_of(_629_k);
	return _629_k == jule::Str("i8", 2);
}



inline jule::Bool _104cc26b0_is_i16_compatible(jule::Str _1230_k) {
	_1230_k=_104c40680_real_kind_of(_1230_k);
	return ((_1230_k == jule::Str("i8", 2)) || (_1230_k == jule::Str("i16", 3))) || (_1230_k == jule::Str("u8", 2));
}



inline jule::Bool _104cc26b0_is_i32_compatible(jule::Str _2030_k) {
	_2030_k=_104c40680_real_kind_of(_2030_k);
	return ((((_2030_k == jule::Str("i8", 2)) || (_2030_k == jule::Str("i16", 3))) || (_2030_k == jule::Str("i32", 3))) || (_2030_k == jule::Str("u8", 2))) || (_2030_k == jule::Str("u16", 3));
}



inline jule::Bool _104cc26b0_is_i64_compatible(jule::Str _3030_k) {
	_3030_k=_104c40680_real_kind_of(_3030_k);
	return ((((((_3030_k == jule::Str("i8", 2)) || (_3030_k == jule::Str("i16", 3))) || (_3030_k == jule::Str("i32", 3))) || (_3030_k == jule::Str("i64", 3))) || (_3030_k == jule::Str("u8", 2))) || (_3030_k == jule::Str("u16", 3))) || (_3030_k == jule::Str("u32", 3));
}



inline jule::Bool _104cc26b0_is_u8_compatible(jule::Str _4229_k) {
	_4229_k=_104c40680_real_kind_of(_4229_k);
	return _4229_k == jule::Str("u8", 2);
}



inline jule::Bool _104cc26b0_is_u16_compatible(jule::Str _4830_k) {
	_4830_k=_104c40680_real_kind_of(_4830_k);
	return (_4830_k == jule::Str("u8", 2)) || (_4830_k == jule::Str("u16", 3));
}



inline jule::Bool _104cc26b0_is_u32_compatible(jule::Str _5430_k) {
	_5430_k=_104c40680_real_kind_of(_5430_k);
	return ((_5430_k == jule::Str("u8", 2)) || (_5430_k == jule::Str("u16", 3))) || (_5430_k == jule::Str("u32", 3));
}



inline jule::Bool _104cc26b0_is_u64_compatible(jule::Str _6230_k) {
	_6230_k=_104c40680_real_kind_of(_6230_k);
	return (((_6230_k == jule::Str("u8", 2)) || (_6230_k == jule::Str("u16", 3))) || (_6230_k == jule::Str("u32", 3))) || (_6230_k == jule::Str("u64", 3));
}



inline jule::Bool _104cc26b0_is_f32_compatible(jule::Str _7130_k) {
	_7130_k=_104c40680_real_kind_of(_7130_k);
	return _7130_k == jule::Str("f32", 3);
}



inline jule::Bool _104cc26b0_is_f64_compatible(jule::Str _7730_k) {
	_7730_k=_104c40680_real_kind_of(_7730_k);
	return (_7730_k == jule::Str("f64", 3)) || (_7730_k == jule::Str("f32", 3));
}



inline jule::Bool _104cc26b0_types_are_compatible(jule::Str _8633_k1,jule::Str _8642_k2) {
	_8633_k1=_104c40680_real_kind_of(_8633_k1);
	{
		auto _match_expr{ _8633_k1 };
		if (!((jule::Str("any", 3)) == _match_expr)) { goto _case_end_4385525808; }
		_case_begin_4385525808:;
		{
			return true;
		}
		goto _match_end_4385518544;
		_case_end_4385525808:;
		if (!((jule::Str("i8", 2)) == _match_expr)) { goto _case_end_4385526080; }
		_case_begin_4385526080:;
		{
			return _104cc26b0_is_i8_compatible(_8642_k2);
		}
		goto _match_end_4385518544;
		_case_end_4385526080:;
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4385526192; }
		_case_begin_4385526192:;
		{
			return _104cc26b0_is_i16_compatible(_8642_k2);
		}
		goto _match_end_4385518544;
		_case_end_4385526192:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4385526304; }
		_case_begin_4385526304:;
		{
			return _104cc26b0_is_i32_compatible(_8642_k2);
		}
		goto _match_end_4385518544;
		_case_end_4385526304:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4385526416; }
		_case_begin_4385526416:;
		{
			return _104cc26b0_is_i64_compatible(_8642_k2);
		}
		goto _match_end_4385518544;
		_case_end_4385526416:;
		if (!((jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4385526640; }
		_case_begin_4385526640:;
		{
			return _104cc26b0_is_u8_compatible(_8642_k2);
		}
		goto _match_end_4385518544;
		_case_end_4385526640:;
		if (!((jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4385526752; }
		_case_begin_4385526752:;
		{
			return _104cc26b0_is_u16_compatible(_8642_k2);
		}
		goto _match_end_4385518544;
		_case_end_4385526752:;
		if (!((jule::Str("u32", 3)) == _match_expr)) { goto _case_end_4385526864; }
		_case_begin_4385526864:;
		{
			return _104cc26b0_is_u32_compatible(_8642_k2);
		}
		goto _match_end_4385518544;
		_case_end_4385526864:;
		if (!((jule::Str("u64", 3)) == _match_expr)) { goto _case_end_4385526976; }
		_case_begin_4385526976:;
		{
			return _104cc26b0_is_u64_compatible(_8642_k2);
		}
		goto _match_end_4385518544;
		_case_end_4385526976:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4385527120; }
		_case_begin_4385527120:;
		{
			return _104cc26b0_is_f32_compatible(_8642_k2);
		}
		goto _match_end_4385518544;
		_case_end_4385527120:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4385527232; }
		_case_begin_4385527232:;
		{
			return _104cc26b0_is_f64_compatible(_8642_k2);
		}
		goto _match_end_4385518544;
		_case_end_4385527232:;
		if (!((jule::Str("bool", 4)) == _match_expr)) { goto _case_end_4385527344; }
		_case_begin_4385527344:;
		{
			return _8642_k2 == jule::Str("bool", 4);
		}
		goto _match_end_4385518544;
		_case_end_4385527344:;
		if (!((jule::Str("str", 3)) == _match_expr)) { goto _case_end_4385527456; }
		_case_begin_4385527456:;
		{
			return _8642_k2 == jule::Str("str", 3);
		}
		goto _match_end_4385518544;
		_case_end_4385527456:;
		_case_begin_4385523648:;
		{
			return false;
		}
		goto _match_end_4385518544;
		_case_end_4385523648:;
		_match_end_4385518544:;
	}
}



inline jule::Bool _104cc26b0_is_i16_greater(jule::Str _10727_k) {
	_10727_k=_104c40680_real_kind_of(_10727_k);
	return _10727_k == jule::Str("u8", 2);
}



inline jule::Bool _104cc26b0_is_i32_greater(jule::Str _11327_k) {
	_11327_k=_104c40680_real_kind_of(_11327_k);
	return (_11327_k == jule::Str("i8", 2)) || (_11327_k == jule::Str("i16", 3));
}



inline jule::Bool _104cc26b0_is_i64_greater(jule::Str _11927_k) {
	_11927_k=_104c40680_real_kind_of(_11927_k);
	return ((_11927_k == jule::Str("i8", 2)) || (_11927_k == jule::Str("i16", 3))) || (_11927_k == jule::Str("i32", 3));
}



inline jule::Bool _104cc26b0_is_u8_greater(jule::Str _12726_k) {
	_12726_k=_104c40680_real_kind_of(_12726_k);
	return _12726_k == jule::Str("i8", 2);
}



inline jule::Bool _104cc26b0_is_u16_greater(jule::Str _13327_k) {
	_13327_k=_104c40680_real_kind_of(_13327_k);
	return ((_13327_k == jule::Str("u8", 2)) || (_13327_k == jule::Str("i8", 2))) || (_13327_k == jule::Str("i16", 3));
}



inline jule::Bool _104cc26b0_is_u32_greater(jule::Str _14127_k) {
	_14127_k=_104c40680_real_kind_of(_14127_k);
	return ((((_14127_k == jule::Str("u8", 2)) || (_14127_k == jule::Str("u16", 3))) || (_14127_k == jule::Str("i8", 2))) || (_14127_k == jule::Str("i16", 3))) || (_14127_k == jule::Str("i32", 3));
}



inline jule::Bool _104cc26b0_is_u64_greater(jule::Str _15127_k) {
	_15127_k=_104c40680_real_kind_of(_15127_k);
	return ((((((_15127_k == jule::Str("u8", 2)) || (_15127_k == jule::Str("u16", 3))) || (_15127_k == jule::Str("u32", 3))) || (_15127_k == jule::Str("i8", 2))) || (_15127_k == jule::Str("i16", 3))) || (_15127_k == jule::Str("i32", 3))) || (_15127_k == jule::Str("i64", 3));
}



inline jule::Bool _104cc26b0_is_f32_greater(jule::Str _16323_k) {
	return _16323_k != jule::Str("f64", 3);
}



inline jule::Bool _104cc26b0_is_f64_greater(jule::Str _16523_k) {
	return true;
}



inline jule::Bool _104cc26b0_is_greater(jule::Str _16823_k1,jule::Str _16832_k2) {
	_16823_k1=_104c40680_real_kind_of(_16823_k1);
	{
		auto _match_expr{ _16823_k1 };
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4385555616; }
		_case_begin_4385555616:;
		{
			return _104cc26b0_is_i16_greater(_16832_k2);
		}
		goto _match_end_4385553664;
		_case_end_4385555616:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4385555728; }
		_case_begin_4385555728:;
		{
			return _104cc26b0_is_i32_greater(_16832_k2);
		}
		goto _match_end_4385553664;
		_case_end_4385555728:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4385556496; }
		_case_begin_4385556496:;
		{
			return _104cc26b0_is_i64_greater(_16832_k2);
		}
		goto _match_end_4385553664;
		_case_end_4385556496:;
		if (!((jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4385556608; }
		_case_begin_4385556608:;
		{
			return _104cc26b0_is_u16_greater(_16832_k2);
		}
		goto _match_end_4385553664;
		_case_end_4385556608:;
		if (!((jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4385556720; }
		_case_begin_4385556720:;
		{
			return _104cc26b0_is_u8_greater(_16832_k2);
		}
		goto _match_end_4385553664;
		_case_end_4385556720:;
		if (!((jule::Str("u32", 3)) == _match_expr)) { goto _case_end_4385556848; }
		_case_begin_4385556848:;
		{
			return _104cc26b0_is_u32_greater(_16832_k2);
		}
		goto _match_end_4385553664;
		_case_end_4385556848:;
		if (!((jule::Str("u64", 3)) == _match_expr)) { goto _case_end_4385555872; }
		_case_begin_4385555872:;
		{
			return _104cc26b0_is_u64_greater(_16832_k2);
		}
		goto _match_end_4385553664;
		_case_end_4385555872:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4385556000; }
		_case_begin_4385556000:;
		{
			return _104cc26b0_is_f32_greater(_16832_k2);
		}
		goto _match_end_4385553664;
		_case_end_4385556000:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4385556128; }
		_case_begin_4385556128:;
		{
			return _104cc26b0_is_f64_greater(_16832_k2);
		}
		goto _match_end_4385553664;
		_case_end_4385556128:;
		if (!((jule::Str("any", 3)) == _match_expr)) { goto _case_end_4385556256; }
		_case_begin_4385556256:;
		{
			return true;
		}
		goto _match_end_4385553664;
		_case_end_4385556256:;
		_case_begin_4385554976:;
		{
			return false;
		}
		goto _match_end_4385553664;
		_case_end_4385554976:;
		_match_end_4385553664:;
	}
}



inline jule::Bool _104c56790_is_sig_int(jule::Str _2723_k) {
	_2723_k=_104c40680_real_kind_of(_2723_k);
	return (((_2723_k == jule::Str("i8", 2)) || (_2723_k == jule::Str("i16", 3))) || (_2723_k == jule::Str("i32", 3))) || (_2723_k == jule::Str("i64", 3));
}



inline jule::Bool _104c56790_is_unsig_int(jule::Str _3825_k) {
	_3825_k=_104c40680_real_kind_of(_3825_k);
	return (((_3825_k == jule::Str("u8", 2)) || (_3825_k == jule::Str("u16", 3))) || (_3825_k == jule::Str("u32", 3))) || (_3825_k == jule::Str("u64", 3));
}



inline jule::Bool _104c56790_is_int(jule::Str _4915_k) {
	return _104c56790_is_sig_int(_4915_k) || _104c56790_is_unsig_int(_4915_k);
}



inline jule::Bool _104c56790_is_float(jule::Str _5417_k) {
	return (_5417_k == jule::Str("f32", 3)) || (_5417_k == jule::Str("f64", 3));
}



inline jule::Bool _104c56790_is_num(jule::Str _5915_k) {
	return _104c56790_is_int(_5915_k) || _104c56790_is_float(_5915_k);
}



inline jule::Bool _104c56790_is_sig_num(jule::Str _6419_k) {
	return _104c56790_is_sig_int(_6419_k) || _104c56790_is_float(_6419_k);
}



inline std::tuple<jule::Str,jule::Bool> _104dc5cd0_is_byte_lit(jule::Str _1524_kind) {
	if (_1524_kind.len() < 3LL) {
		return std::make_tuple(jule::Str("", 0),false);
	}
	_1524_kind=_1524_kind.slice(1LL,static_cast<jule::Int>(_1524_kind.len() - 1LL));
	jule::Bool _2113_is_byte = false;
	{
		if (!(((_1524_kind.len() == 1LL) && (_1524_kind[0LL] <= 255LL)))) { goto _case_end_4385599024; }
		_case_begin_4385599024:;
		{
			_2113_is_byte=true;
		}
		goto _match_end_4385598768;
		_case_end_4385599024:;
		if (!(((_1524_kind[0LL] == '\\') && (_1524_kind[1LL] == 'x')))) { goto _case_end_4385599136; }
		_case_begin_4385599136:;
		{
			_2113_is_byte=true;
		}
		goto _match_end_4385598768;
		_case_end_4385599136:;
		if (!((((_1524_kind[0LL] == '\\') && (_1524_kind[1LL] >= '0')) && (_1524_kind[1LL] <= '7')))) { goto _case_end_4385599248; }
		_case_begin_4385599248:;
		{
			_2113_is_byte=true;
		}
		goto _match_end_4385598768;
		_case_end_4385599248:;
		_match_end_4385598768:;
	}
	return std::make_tuple(_1524_kind,_2113_is_byte);
}



inline jule::I32 _104dc5cd0_to_rune(jule::Slice<jule::U8> _4016_bytes) {
	if (_4016_bytes.len() == 0LL) {
		return 0LL;
	}
	jule::I32 _4513_r = 0LL;
	if ((_4016_bytes[0LL] == '\\') && (_4016_bytes.len() > 1LL)) {
		jule::Int _4717_i = 0LL;
		_4513_r=static_cast<jule::I32>(_104dc5cd0_rune_from_esq_seq(_4016_bytes,_4717_i));
	} else {
		std::tie(_4513_r,std::ignore) = _103458e80_decode_rune(_4016_bytes);
	}
	return _4513_r;
}



inline jule::Str _104dc5cd0_to_raw_str(jule::Slice<jule::U8> _5919_bytes) {
	return static_cast<jule::Str>(_5919_bytes);
}



inline jule::Str _104dc5cd0_to_str(jule::Slice<jule::U8> _6415_bytes) {
	if (_6415_bytes.len() == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _6913_s = jule::Str("", 0);
	jule::Int _7013_i = 0LL;
	_iter_begin_4385616032:;
	if (!(_7013_i < _6415_bytes.len())) { goto _iter_end_4385616032; }
	{
		jule::U8 _7213_b = _6415_bytes[static_cast<jule::Int>(_7013_i)];
		if (_7213_b == '\\') {
			_6913_s+=_104dc5cd0_str_esq_seq(_6415_bytes,_7013_i);
		} else {
			jule::I32 _7618_r;
			jule::Int _7621_size;
			std::tie(_7618_r,_7621_size) = _103458e80_decode_rune(_6415_bytes.slice(static_cast<jule::Int>(_7013_i)));
			_7013_i+=_7621_size;
			_6913_s+=static_cast<jule::Str>(_7618_r);
		}
	}
	_iter_next_4385616032:;
	goto _iter_begin_4385616032;
	_iter_end_4385616032:;
	return _6913_s;
}



inline std::tuple<jule::U8,jule::Bool> _104dc5cd0_try_btoa_common_esq(jule::Slice<jule::U8> _8424_bytes) {
	jule::Bool _8452_ok = jule::Bool();
	jule::U8 _8441_seq = jule::U8();
	if ((_8424_bytes.len() < 2LL) || (_8424_bytes[0LL] != '\\')) {
		return std::make_tuple(_8441_seq,_8452_ok);
	}
	{
		auto _match_expr{ _8424_bytes[1LL] };
		if (!(('\\') == _match_expr)) { goto _case_end_4385626448; }
		_case_begin_4385626448:;
		{
			_8441_seq='\\';
		}
		goto _match_end_4385625264;
		_case_end_4385626448:;
		if (!(('\'') == _match_expr)) { goto _case_end_4385626560; }
		_case_begin_4385626560:;
		{
			_8441_seq='\'';
		}
		goto _match_end_4385625264;
		_case_end_4385626560:;
		if (!(('\"') == _match_expr)) { goto _case_end_4385626880; }
		_case_begin_4385626880:;
		{
			_8441_seq='\"';
		}
		goto _match_end_4385625264;
		_case_end_4385626880:;
		if (!(('a') == _match_expr)) { goto _case_end_4385626992; }
		_case_begin_4385626992:;
		{
			_8441_seq='\a';
		}
		goto _match_end_4385625264;
		_case_end_4385626992:;
		if (!(('b') == _match_expr)) { goto _case_end_4385627104; }
		_case_begin_4385627104:;
		{
			_8441_seq='\b';
		}
		goto _match_end_4385625264;
		_case_end_4385627104:;
		if (!(('f') == _match_expr)) { goto _case_end_4385627216; }
		_case_begin_4385627216:;
		{
			_8441_seq='\f';
		}
		goto _match_end_4385625264;
		_case_end_4385627216:;
		if (!(('n') == _match_expr)) { goto _case_end_4385627328; }
		_case_begin_4385627328:;
		{
			_8441_seq='\n';
		}
		goto _match_end_4385625264;
		_case_end_4385627328:;
		if (!(('r') == _match_expr)) { goto _case_end_4385627440; }
		_case_begin_4385627440:;
		{
			_8441_seq='\r';
		}
		goto _match_end_4385625264;
		_case_end_4385627440:;
		if (!(('t') == _match_expr)) { goto _case_end_4385627552; }
		_case_begin_4385627552:;
		{
			_8441_seq='\t';
		}
		goto _match_end_4385625264;
		_case_end_4385627552:;
		if (!(('v') == _match_expr)) { goto _case_end_4385627664; }
		_case_begin_4385627664:;
		{
			_8441_seq='\v';
		}
		goto _match_end_4385625264;
		_case_end_4385627664:;
		_match_end_4385625264:;
	}
	_8452_ok=_8441_seq != 0LL;
	return std::make_tuple(_8441_seq,_8452_ok);
}



inline jule::I32 _104dc5cd0_rune_from_esq_seq(jule::Slice<jule::U8> _10622_bytes,jule::Int& _10642_i) {
	jule::U8 _10710_b;
	jule::Bool _10713_ok;
	std::tie(_10710_b,_10713_ok) = _104dc5cd0_try_btoa_common_esq(_10622_bytes.slice(static_cast<jule::Int>(_10642_i)));
	(_10642_i)++;
	if (_10713_ok) {
		(_10642_i)++;
		return static_cast<jule::I32>(_10710_b);
	}
	{
		auto _match_expr{ _10622_bytes[static_cast<jule::Int>(_10642_i)] };
		if (!(('u') == _match_expr)) { goto _case_end_4385642976; }
		_case_begin_4385642976:;
		{
			
			jule::U64 _11714_rc;
			std::tie(_11714_rc,std::ignore) = _1186cfb10_parse_uint(static_cast<jule::Str>(_10622_bytes.slice(static_cast<jule::Int>(_10642_i + 1LL),static_cast<jule::Int>(_10642_i + 5LL))),16LL,64LL);
			_10642_i+=5LL;
			jule::I32 _11913_r = static_cast<jule::I32>(_11714_rc);
			return _11913_r;
		}
		goto _match_end_4385638160;
		_case_end_4385642976:;
		if (!(('U') == _match_expr)) { goto _case_end_4385644640; }
		_case_begin_4385644640:;
		{
			
			jule::U64 _12414_rc;
			std::tie(_12414_rc,std::ignore) = _1186cfb10_parse_uint(static_cast<jule::Str>(_10622_bytes.slice(static_cast<jule::Int>(_10642_i + 1LL),static_cast<jule::Int>(_10642_i + 9LL))),16LL,64LL);
			_10642_i+=9LL;
			jule::I32 _12613_r = static_cast<jule::I32>(_12414_rc);
			return _12613_r;
		}
		goto _match_end_4385638160;
		_case_end_4385644640:;
		if (!(('x') == _match_expr)) { goto _case_end_4385644752; }
		_case_begin_4385644752:;
		{
			
			jule::Slice<jule::U8> _13113_seq = _10622_bytes.slice(static_cast<jule::Int>(_10642_i + 1LL),static_cast<jule::Int>(_10642_i + 3LL));
			_10642_i+=3LL;
			jule::U64 _13314_b;
			std::tie(_13314_b,std::ignore) = _1186cfb10_parse_uint(static_cast<jule::Str>(_13113_seq),16LL,64LL);
			return static_cast<jule::I32>(_13314_b);
		}
		goto _match_end_4385638160;
		_case_end_4385644752:;
		_case_begin_4385637232:;
		{
			
			jule::Slice<jule::U8> _13813_seq = _10622_bytes.slice(static_cast<jule::Int>(_10642_i),static_cast<jule::Int>(_10642_i + 3LL));
			_10642_i+=3LL;
			jule::U64 _14014_b;
			std::tie(_14014_b,std::ignore) = _1186cfb10_parse_uint(static_cast<jule::Str>(_13813_seq.slice(1LL)),8LL,64LL);
			return static_cast<jule::I32>(_14014_b);
		}
		goto _match_end_4385638160;
		_case_end_4385637232:;
		_match_end_4385638160:;
	}
}



inline jule::Str _104dc5cd0_str_esq_seq(jule::Slice<jule::U8> _14516_bytes,jule::Int& _14536_i) {
	jule::I32 _1469_r = _104dc5cd0_rune_from_esq_seq(_14516_bytes,_14536_i);
	if (_1469_r <= 255LL) {
		return static_cast<jule::Str>(_1469_r);
	}
	return _104dc5cd0_to_str(static_cast<jule::Slice<jule::U8>>(static_cast<jule::Str>(_1469_r)));
}



inline jule::Str _1036da950_str_repeat(jule::Str _8715_sub,jule::Int _8729_n) {
	if (_8729_n == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _9213_s = jule::Str("", 0);
	_iter_begin_4389396592:;
	if (!(_8729_n > 0LL)) { goto _iter_end_4389396592; }
	{
		_9213_s+=_8715_sub;
	}
	_iter_next_4389396592:;
	(_8729_n)--;
	goto _iter_begin_4389396592;
	_iter_end_4389396592:;
	return _9213_s;
}



inline jule::Str _1036da950_build_doc(jule::Ref<_1487f5920_CommentGroup> _9918_cg) {
	if ((!(jule::real(_9918_cg)))) {
		return jule::Str("", 0);
	}
	jule::Str _10413_doc = jule::Str("", 0);
	{
		auto __julec_range_expr = _9918_cg->_field_comments;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1487f5920_Comment> _1036da950_c = *__julec_range_begin;
			_iter_begin_4389401184:;
			{
				_10413_doc+=_1036da950_c->_field_text;
				_10413_doc+=jule::Str(" ", 1);
			}
			_iter_next_4389401184:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1036da950_c = *__julec_range_begin; goto _iter_begin_4389401184; }
			_iter_end_4389401184:;
		}
	}
	return _10413_doc;
}



inline jule::Ref<_104a21a10_TypeSymbol> _1036da950_build_type(jule::Ref<_1487f5920_TypeDecl> _11219_t) {
	if ((!(jule::real(_11219_t)))) {
		return jule::new_ref<_104a21a10_TypeSymbol>();
	}
	return jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(_11219_t,jule::Ref<_104a21a10_TypeKind>()));
}



inline jule::Ref<_1191dc300_Value> _1036da950_build_expr(jule::Ref<_1487f5920_Expr> _12119_expr) {
	if ((!(jule::real(_12119_expr)))) {
		return jule::new_ref<_1191dc300_Value>();
	}
	return jule::new_struct<_1191dc300_Value>(new( std::nothrow ) _1191dc300_Value(_12119_expr,jule::Ref<_1191dc300_Data>()));
}



inline jule::Ref<_104a21a10_TypeAlias> _1036da950_build_type_alias(jule::Ref<_1487f5920_TypeAliasDecl> _13125_decl) {
	return jule::new_struct<_104a21a10_TypeAlias>(new( std::nothrow ) _104a21a10_TypeAlias(_13125_decl->_field_scope,_13125_decl->_field_public,_13125_decl->_field_cpp_linked,jule::Bool(),_13125_decl->_field_token,_13125_decl->_field_ident,_1036da950_build_type(_13125_decl->_field_kind),_1036da950_build_doc(_13125_decl->_field_doc_comments),jule::Slice<jule::Any>()));
}



inline jule::Ref<_1037370d0_Field> _1036da950_build_field(jule::Ref<_1487f5920_FieldDecl> _14320_decl) {
	return jule::new_struct<_1037370d0_Field>(new( std::nothrow ) _1037370d0_Field(jule::Ref<_1037370d0_Struct>(),_14320_decl->_field_token,_14320_decl->_field_public,_14320_decl->_field_mutable,_14320_decl->_field_ident,_1036da950_build_type(_14320_decl->_field_kind)));
}



inline jule::Slice<jule::Ref<_1037370d0_Field>> _1036da950_build_fields(jule::Slice<jule::Ref<_1487f5920_FieldDecl>> _15321_decls) {
	jule::Slice<jule::Ref<_1037370d0_Field>> _15413_fields = jule::Slice<jule::Ref<_1037370d0_Field>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_15321_decls.len())));
	{
		auto __julec_range_expr = _15321_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1036da950_i = 0;
			jule::Ref<_1487f5920_FieldDecl> _1036da950_decl = *__julec_range_begin;
			_iter_begin_4389406864:;
			{
				_15413_fields[static_cast<jule::Int>(_1036da950_i)]=_1036da950_build_field(_1036da950_decl);
			}
			_iter_next_4389406864:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1036da950_i; _1036da950_decl = *__julec_range_begin; goto _iter_begin_4389406864; }
			_iter_end_4389406864:;
		}
	}
	return _15413_fields;
}



inline jule::Ref<_1037370d0_Struct> _1036da950_build_struct(jule::Ref<_1487f5920_StructDecl> _16121_decl) {
	return jule::new_struct<_1037370d0_Struct>(new( std::nothrow ) _1037370d0_Struct(jule::Ref<_119177e90_Sema>(),jule::Slice<jule::Ref<_1037370d0_Struct>>(),jule::Slice<jule::Ref<_1037370d0_Struct>>(),_16121_decl->_field_token,_16121_decl->_field_ident,_1036da950_build_fields(_16121_decl->_field_fields),jule::Slice<jule::Ref<_1037649f0_Fn>>(),_16121_decl->_field_public,_16121_decl->_field_cpp_linked,_16121_decl->_field_directives,_1036da950_build_doc(_16121_decl->_field_doc_comments),_16121_decl->_field_generics,jule::Slice<jule::Ref<_1036e5da0_Trait>>(),jule::Slice<jule::Ref<_1037370d0_StructIns>>()));
}



inline jule::Ref<_1037649f0_Param> _1036da950_build_param(jule::Ref<_1487f5920_ParamDecl> _17420_decl) {
	return jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_17420_decl->_field_token,_17420_decl->_field_mutable,_17420_decl->_field_variadic,_17420_decl->_field_reference,_1036da950_build_type(_17420_decl->_field_kind),_17420_decl->_field_ident));
}



inline jule::Slice<jule::Ref<_1037649f0_Param>> _1036da950_build_params(jule::Slice<jule::Ref<_1487f5920_ParamDecl>> _18521_decls) {
	jule::Slice<jule::Ref<_1037649f0_Param>> _18613_params = jule::Slice<jule::Ref<_1037649f0_Param>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_18521_decls.len())));
	{
		auto __julec_range_expr = _18521_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1036da950_i = 0;
			jule::Ref<_1487f5920_ParamDecl> _1036da950_decl = *__julec_range_begin;
			_iter_begin_4389429936:;
			{
				_18613_params[static_cast<jule::Int>(_1036da950_i)]=_1036da950_build_param(_1036da950_decl);
			}
			_iter_next_4389429936:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1036da950_i; _1036da950_decl = *__julec_range_begin; goto _iter_begin_4389429936; }
			_iter_end_4389429936:;
		}
	}
	return _18613_params;
}



inline jule::Ref<_1037649f0_RetType> _1036da950_build_ret_type(jule::Ref<_1487f5920_RetTypeDecl> _19323_decl) {
	if ((_19323_decl->_field_idents == nullptr) && (!(jule::real(_19323_decl->_field_kind)))) {
		return jule::new_ref<_1037649f0_RetType>();
	}
	return jule::new_struct<_1037649f0_RetType>(new( std::nothrow ) _1037649f0_RetType(_1036da950_build_type(_19323_decl->_field_kind),_19323_decl->_field_idents));
}



inline jule::Ref<_1037649f0_Fn> _1036da950_build_fn(jule::Ref<_1487f5920_FnDecl> _20317_decl) {
	return jule::new_struct<_1037649f0_Fn>(new( std::nothrow ) _1037649f0_Fn(jule::Ref<_119177e90_Sema>(),_20317_decl->_field_token,_20317_decl->_field_global,_20317_decl->_field_unsafety,_20317_decl->_field_public,_20317_decl->_field_cpp_linked,_20317_decl->_field_statically,_20317_decl->_field_ident,_20317_decl->_field_directives,_1036da950_build_doc(_20317_decl->_field_doc_comments),_20317_decl->_field_scope,_20317_decl->_field_generics,_1036da950_build_ret_type(_20317_decl->_field_result),_1036da950_build_params(_20317_decl->_field_params),jule::Ref<_1037370d0_Struct>(),jule::Slice<jule::Ref<_1037649f0_FnIns>>()));
}



inline jule::Slice<jule::Ref<_1037649f0_Fn>> _1036da950_build_methods(jule::Slice<jule::Ref<_1487f5920_FnDecl>> _22122_decls) {
	jule::Slice<jule::Ref<_1037649f0_Fn>> _22213_methods = jule::Slice<jule::Ref<_1037649f0_Fn>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_22122_decls.len())));
	{
		auto __julec_range_expr = _22122_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1036da950_i = 0;
			jule::Ref<_1487f5920_FnDecl> _1036da950_decl = *__julec_range_begin;
			_iter_begin_4389445232:;
			{
				_22213_methods[static_cast<jule::Int>(_1036da950_i)]=_1036da950_build_fn(_1036da950_decl);
			}
			_iter_next_4389445232:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1036da950_i; _1036da950_decl = *__julec_range_begin; goto _iter_begin_4389445232; }
			_iter_end_4389445232:;
		}
	}
	return _22213_methods;
}



inline jule::Ref<_1036e5da0_Trait> _1036da950_build_trait(jule::Ref<_1487f5920_TraitDecl> _22920_decl) {
	return jule::new_struct<_1036e5da0_Trait>(new( std::nothrow ) _1036e5da0_Trait(_22920_decl->_field_token,_22920_decl->_field_ident,_22920_decl->_field_public,_1036da950_build_doc(_22920_decl->_field_doc_comments),_1036da950_build_methods(_22920_decl->_field_methods),jule::Slice<jule::Ref<_1037370d0_Struct>>()));
}



inline jule::Ref<_1036dad50_EnumItem> _1036da950_build_enum_item(jule::Ref<_1487f5920_EnumItemDecl> _23924_decl) {
	return jule::new_struct<_1036dad50_EnumItem>(new( std::nothrow ) _1036dad50_EnumItem(_23924_decl->_field_token,_23924_decl->_field_ident,_1036da950_build_expr(_23924_decl->_field_expr)));
}



inline jule::Slice<jule::Ref<_1036dad50_EnumItem>> _1036da950_build_enum_items(jule::Slice<jule::Ref<_1487f5920_EnumItemDecl>> _24725_decls) {
	jule::Slice<jule::Ref<_1036dad50_EnumItem>> _24813_items = jule::Slice<jule::Ref<_1036dad50_EnumItem>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_24725_decls.len())));
	{
		auto __julec_range_expr = _24725_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1036da950_i = 0;
			jule::Ref<_1487f5920_EnumItemDecl> _1036da950_decl = *__julec_range_begin;
			_iter_begin_4386167536:;
			{
				_24813_items[static_cast<jule::Int>(_1036da950_i)]=_1036da950_build_enum_item(_1036da950_decl);
			}
			_iter_next_4386167536:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1036da950_i; _1036da950_decl = *__julec_range_begin; goto _iter_begin_4386167536; }
			_iter_end_4386167536:;
		}
	}
	return _24813_items;
}



inline jule::Ref<_1036dad50_Enum> _1036da950_build_enum(jule::Ref<_1487f5920_EnumDecl> _25519_decl) {
	return jule::new_struct<_1036dad50_Enum>(new( std::nothrow ) _1036dad50_Enum(_25519_decl->_field_token,_25519_decl->_field_public,_25519_decl->_field_ident,_1036da950_build_type(_25519_decl->_field_kind),_1036da950_build_enum_items(_25519_decl->_field_items),_1036da950_build_doc(_25519_decl->_field_doc_comments)));
}



inline jule::Ref<_104598e40_Var> _1036da950_build_var(jule::Ref<_1487f5920_VarDecl> _26618_decl) {
	return jule::new_struct<_104598e40_Var>(new( std::nothrow ) _104598e40_Var(jule::Ref<_104180810_Scope>(),_26618_decl->_field_token,_26618_decl->_field_ident,_26618_decl->_field_cpp_linked,_26618_decl->_field_constant,_26618_decl->_field_mutable,_26618_decl->_field_public,jule::Bool(),_26618_decl->_field_statically,_26618_decl->_field_reference,_1036da950_build_doc(_26618_decl->_field_doc_comments),_1036da950_build_type(_26618_decl->_field_kind),_1036da950_build_expr(_26618_decl->_field_expr),_1036da950_ReferenceStack::_static_method_new(),_26618_decl->_field_directives,jule::Slice<jule::Ref<_104598e40_Var>>()));
}



inline jule::Ref<_10417abf0_Impl> _1036da950_build_impl(jule::Ref<_1487f5920_Impl> _28419_decl) {
	return jule::new_struct<_10417abf0_Impl>(new( std::nothrow ) _10417abf0_Impl(_28419_decl->_field_base,_28419_decl->_field_dest,_1036da950_build_methods(_28419_decl->_field_methods)));
}



inline jule::Ref<_104180810_ScopeChecker> _104180810_new_scope_checker_base(jule::Ref<_119177e90_Sema> _3831_s,jule::Ref<_1037649f0_FnIns> _3845_owner) {
	return jule::new_struct<_104180810_ScopeChecker>(new( std::nothrow ) _104180810_ScopeChecker(_3831_s,_3845_owner,jule::Ref<_104180810_ScopeChecker>(),jule::Int(),jule::new_struct<_1191dcd40_SymbolTable>(new( std::nothrow ) _1191dcd40_SymbolTable()),jule::Ref<_104180810_Scope>(),jule::Ref<_1487f5920_ScopeTree>(),jule::Uintptr(),jule::Uintptr(),jule::Ref<jule::Slice<jule::Ref<_104180810_ScopeLabel>>>(),jule::Ref<jule::Slice<jule::Ref<_104180810_ScopeGoto>>>(),jule::Int()));
}



inline jule::Ref<_104180810_ScopeChecker> _104180810_new_scope_checker(jule::Ref<_119177e90_Sema> _4626_s,jule::Ref<_1037649f0_FnIns> _4640_owner) {
	jule::Ref<_104180810_ScopeChecker> _4713_base = _104180810_new_scope_checker_base(_4626_s,_4640_owner);
	_4713_base->_field_labels=jule::new_ref<jule::Slice<jule::Ref<_104180810_ScopeLabel>>>(nullptr);
	_4713_base->_field_gotos=jule::new_ref<jule::Slice<jule::Ref<_104180810_ScopeGoto>>>(nullptr);
	return _4713_base;
}



inline jule::Ref<_104180810_ScopeLabel> _104180810_find_label_parent(jule::Str _5622_ident,jule::Ref<_104180810_ScopeChecker> _5638_scope) {
	jule::Ref<_104180810_ScopeLabel> _5713_label = _5638_scope->_method_find_label_scope(_5622_ident);
	_iter_begin_4386190880:;
	if (!((!(jule::real(_5713_label))))) { goto _iter_end_4386190880; }
	{
		if ((!(jule::real(_5638_scope->_field_parent))) || jule::real(_5638_scope->_field_owner)) {
			return jule::new_ref<_104180810_ScopeLabel>();
		}
		_5638_scope=_5638_scope->_field_parent;
		_5713_label=_5638_scope->_method_find_label_scope(_5622_ident);
	}
	_iter_next_4386190880:;
	goto _iter_begin_4386190880;
	_iter_end_4386190880:;
	return _5713_label;
}



inline jule::Int _104180810_count_match_type(jule::Ref<_104180810_Match> _7021_m,jule::Ref<_104a21a10_TypeKind> _7032_t) {
	jule::Int _7113_n = 0LL;
	jule::Str _729_kind = _7032_t->_method_to_str();
	_julec_label_loop:;
	{
		auto __julec_range_expr = _7021_m->_field_cases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104180810_Case> _104180810_c = *__julec_range_begin;
			_iter_begin_4390411888:;
			{
				if ((!(jule::real(_104180810_c)))) {
					goto _iter_next_4390411888;
				}
				{
					auto __julec_range_expr = _104180810_c->_field_exprs;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Any _104180810_expr = *__julec_range_begin;
						_iter_begin_4390414528:;
						{
							if (_104180810_expr == nullptr) {
								goto _iter_end_4390411888;
							}
							if (_729_kind == _104180810_expr.operator jule::Ref<_104a21a10_TypeKind>()->_method_to_str()) {
								(_7113_n)++;
							}
						}
						_iter_next_4390414528:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _104180810_expr = *__julec_range_begin; goto _iter_begin_4390414528; }
						_iter_end_4390414528:;
					}
				}
			}
			_iter_next_4390411888:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104180810_c = *__julec_range_begin; goto _iter_begin_4390411888; }
			_iter_end_4390411888:;
		}
	}
	return _7113_n;
}



inline jule::Slice<jule::Ref<_1191dc300_Data>> _104180810_get_datas_from_tuple_data(jule::Ref<_1191dc300_Data> _9434_d) {
	if (jule::real(_9434_d->_field_kind->_method_tup())) {
		{
			auto _match_expr{ _9434_d->_field_model };
			if (!(_match_expr.type_is<jule::Ref<_11911f320_TupleExprModel>>())) { goto _case_end_4390430480; }
			_case_begin_4390430480:;
			{
				return _9434_d->_field_model.operator jule::Ref<_11911f320_TupleExprModel>()->_field_datas;
			}
			goto _match_end_4390419760;
			_case_end_4390430480:;
			_case_begin_4390420448:;
			{
				jule::Ref<_104a21a10_Tuple> _10121_t = _9434_d->_field_kind->_method_tup();
				jule::Slice<jule::Ref<_1191dc300_Data>> _10221_r = jule::Slice<jule::Ref<_1191dc300_Data>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_10121_t->_field_types.len())));
				{
					auto __julec_range_expr = _10121_t->_field_types;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _104180810_i = 0;
						jule::Ref<_104a21a10_TypeKind> _104180810_kind = *__julec_range_begin;
						_iter_begin_4390426752:;
						{
							_10221_r[static_cast<jule::Int>(_104180810_i)]=jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(_104180810_kind,jule::Ref<_104a21a10_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
						}
						_iter_next_4390426752:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_104180810_i; _104180810_kind = *__julec_range_begin; goto _iter_begin_4390426752; }
						_iter_end_4390426752:;
					}
				}
				return _10221_r;
			}
			goto _match_end_4390419760;
			_case_end_4390420448:;
			_match_end_4390419760:;
		}
	} else {
		return jule::Slice<jule::Ref<_1191dc300_Data>>({_9434_d});
	}
}



inline jule::Slice<jule::Any> _104180810_get_expr_models(jule::Any _11624_m) {
	{
		auto _match_expr{ _11624_m };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_TupleExpr>>())) { goto _case_end_4390434272; }
		_case_begin_4390434272:;
		{
			jule::Ref<_1487f5920_TupleExpr> _11917_tup = _11624_m.operator jule::Ref<_1487f5920_TupleExpr>();
			jule::Slice<jule::Any> _12017_models = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::Int>(static_cast<jule::I64>(_11917_tup->_field_expr.len())));
			{
				auto __julec_range_expr = _11917_tup->_field_expr;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Ref<_1487f5920_Expr> _104180810_expr = *__julec_range_begin;
					_iter_begin_4390438992:;
					{
						_12017_models=jule::append(_12017_models,jule::Slice<jule::Any>({_104180810_expr->_field_kind}));
					}
					_iter_next_4390438992:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _104180810_expr = *__julec_range_begin; goto _iter_begin_4390438992; }
					_iter_end_4390438992:;
				}
			}
			return _12017_models;
		}
		goto _match_end_4390433376;
		_case_end_4390434272:;
		_case_begin_4390430896:;
		{
			return jule::Slice<jule::Any>({_11624_m});
		}
		goto _match_end_4390433376;
		_case_end_4390430896:;
		_match_end_4390433376:;
	}
}



inline jule::Bool _104180810_check_mut(jule::Ref<_119177e90_Sema> _13118_s,jule::Ref<_1191dc300_Data> _13128_left,jule::Ref<_1191dc300_Data> _13145_right,_108e15ff0_Token _13159_error_token) {
	jule::Bool _13181_ok = jule::Bool();
	{
		if (!(((!(_13128_left->_field_mutable))))) { goto _case_end_4390445312; }
		_case_begin_4390445312:;
		{
			_13118_s->_method_push_err(_13159_error_token,jule::Str("cannot assign to immutable define", 33),jule::Slice<jule::Any>({}));
			_13181_ok = false;
			return _13181_ok;
		}
		goto _match_end_4390443712;
		_case_end_4390445312:;
		if (!(((jule::real(_13145_right) && (!(_13145_right->_field_mutable))) && _104a21a10_is_mut(_13145_right->_field_kind)))) { goto _case_end_4390444832; }
		_case_begin_4390444832:;
		{
			_13118_s->_method_push_err(_13159_error_token,jule::Str("cannot assign mutable type used immutable define to mutable define", 66),jule::Slice<jule::Any>({}));
			_13181_ok = false;
			return _13181_ok;
		}
		goto _match_end_4390443712;
		_case_end_4390444832:;
		_case_begin_4390443824:;
		{
			_13181_ok = true;
			return _13181_ok;
		}
		goto _match_end_4390443712;
		_case_end_4390443824:;
		_match_end_4390443712:;
	}
}



inline jule::Bool _104180810_check_assign(jule::Ref<_119177e90_Sema> _14621_s,jule::Ref<_1191dc300_Data> _14635_left,jule::Ref<_1191dc300_Data> _14652_right,_108e15ff0_Token _14666_error_token) {
	jule::Bool _14688_ok = jule::Bool();
	jule::Ref<_1037649f0_FnIns> _1479_f = _14635_left->_field_kind->_method_fnc();
	if ((jule::real(_1479_f) && jule::real(_1479_f->_field_decl)) && _1479_f->_field_decl->_field_global) {
		_14621_s->_method_push_err(_14666_error_token,jule::Str("type is not support assignment", 30),jule::Slice<jule::Any>({}));
		_14688_ok = false;
		return _14688_ok;
	}
	{
		if (!((_14635_left->_method_is_const()))) { goto _case_end_4390461264; }
		_case_begin_4390461264:;
		{
			_14621_s->_method_push_err(_14666_error_token,jule::Str("constants is can't assign", 25),jule::Slice<jule::Any>({}));
			_14621_s->_method_push_suggestion(jule::Str("remove constant qualifer if you need to assign", 46),jule::Slice<jule::Any>({}));
			_14688_ok = false;
			return _14688_ok;
		}
		goto _match_end_4390459008;
		_case_end_4390461264:;
		if (!(((!(_14635_left->_field_lvalue))))) { goto _case_end_4390460768; }
		_case_begin_4390460768:;
		{
			_14621_s->_method_push_err(_14666_error_token,jule::Str("assignment required lvalue", 26),jule::Slice<jule::Any>({}));
			_14688_ok = false;
			return _14688_ok;
		}
		goto _match_end_4390459008;
		_case_end_4390460768:;
		if (!(((!(_104180810_check_mut(_14621_s,_14635_left,_14652_right,_14666_error_token)))))) { goto _case_end_4390460896; }
		_case_begin_4390460896:;
		{
			_14688_ok = false;
			return _14688_ok;
		}
		goto _match_end_4390459008;
		_case_end_4390460896:;
		_case_begin_4390459760:;
		{
			_14688_ok = true;
			return _14688_ok;
		}
		goto _match_end_4390459008;
		_case_end_4390459760:;
		_match_end_4390459008:;
	}
}



inline jule::Bool _104180810_is_valid_ast_st_for_next_st(jule::Any _17136_n) {
	{
		auto _match_expr{ _17136_n };
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_AssignSt>>())) { goto _case_end_4390471120; }
		_case_begin_4390471120:;
		{
			return (!(_17136_n.operator jule::Ref<_1487f5920_AssignSt>()->_field_declarative));
		}
		goto _match_end_4390469792;
		_case_end_4390471120:;
		if (!(_match_expr.type_is<jule::Ref<_1487f5920_FnCallExpr>>() || _match_expr.type_is<jule::Ref<_1487f5920_Expr>>())) { goto _case_end_4390471232; }
		_case_begin_4390471232:;
		{
			return true;
		}
		goto _match_end_4390469792;
		_case_end_4390471232:;
		_case_begin_4390469888:;
		{
			return false;
		}
		goto _match_end_4390469792;
		_case_end_4390469888:;
		_match_end_4390469792:;
	}
}



inline jule::Bool _104180810_is_valid_st_for_next_st(jule::Any _18528_st) {
	{
		auto _match_expr{ _18528_st };
		if (!(_match_expr.type_is<jule::Ref<_11911f320_FnCallExprModel>>() || _match_expr.type_is<jule::Ref<_104180810_Postfix>>() || _match_expr.type_is<jule::Ref<_104180810_Assign>>() || _match_expr.type_is<jule::Ref<_104180810_MultiAssign>>())) { goto _case_end_4390474336; }
		_case_begin_4390474336:;
		{
			return true;
		}
		goto _match_end_4390473952;
		_case_end_4390474336:;
		if (!(_match_expr.type_is<jule::Ref<_1191dc300_Data>>())) { goto _case_end_4390474448; }
		_case_begin_4390474448:;
		{
			{
				auto _match_expr{ _18528_st.operator jule::Ref<_1191dc300_Data>()->_field_model };
				if (!(_match_expr.type_is<jule::Ref<_11911f320_FnCallExprModel>>())) { goto _case_end_4390482256; }
				_case_begin_4390482256:;
				{
					return true;
				}
				goto _match_end_4390479936;
				_case_end_4390482256:;
				_case_begin_4390481952:;
				{
					return false;
				}
				goto _match_end_4390479936;
				_case_end_4390481952:;
				_match_end_4390479936:;
			}
		}
		goto _match_end_4390473952;
		_case_end_4390474448:;
		_case_begin_4390470368:;
		{
			return false;
		}
		goto _match_end_4390473952;
		_case_end_4390470368:;
		_match_end_4390473952:;
	}
}



inline jule::Bool _104180810_st_is_def(jule::Any _20414_st) {
	{
		auto _match_expr{ _20414_st };
		if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4390484048; }
		_case_begin_4390484048:;
		{
			return true;
		}
		goto _match_end_4390482864;
		_case_end_4390484048:;
		_case_begin_4390484352:;
		{
			return false;
		}
		goto _match_end_4390482864;
		_case_end_4390484352:;
		_match_end_4390482864:;
	}
}



inline jule::Ref<_104598e40_Var> _119162660_find_var_in_package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> _2728_files,jule::Str _2751_ident,jule::Bool _2763_cpp_linked) {
	{
		auto __julec_range_expr = _2728_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119162660_f = *__julec_range_begin;
			_iter_begin_4390487200:;
			{
				jule::Ref<_104598e40_Var> _2917_v = _119162660_f->_method_find_var(_2751_ident,_2763_cpp_linked);
				if (jule::real(_2917_v)) {
					return _2917_v;
				}
			}
			_iter_next_4390487200:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119162660_f = *__julec_range_begin; goto _iter_begin_4390487200; }
			_iter_end_4390487200:;
		}
	}
	return jule::new_ref<_104598e40_Var>();
}



inline jule::Ref<_104a21a10_TypeAlias> _119162660_find_type_alias_in_package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> _3935_files,jule::Str _3958_ident,jule::Bool _3970_cpp_linked) {
	{
		auto __julec_range_expr = _3935_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119162660_f = *__julec_range_begin;
			_iter_begin_4390494288:;
			{
				jule::Ref<_104a21a10_TypeAlias> _4117_ta = _119162660_f->_method_find_type_alias(_3958_ident,_3970_cpp_linked);
				if (jule::real(_4117_ta)) {
					return _4117_ta;
				}
			}
			_iter_next_4390494288:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119162660_f = *__julec_range_begin; goto _iter_begin_4390494288; }
			_iter_end_4390494288:;
		}
	}
	return jule::new_ref<_104a21a10_TypeAlias>();
}



inline jule::Ref<_1037370d0_Struct> _119162660_find_struct_in_package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> _5131_files,jule::Str _5154_ident,jule::Bool _5166_cpp_linked) {
	{
		auto __julec_range_expr = _5131_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119162660_f = *__julec_range_begin;
			_iter_begin_4390501072:;
			{
				jule::Ref<_1037370d0_Struct> _5317_s = _119162660_f->_method_find_struct(_5154_ident,_5166_cpp_linked);
				if (jule::real(_5317_s)) {
					return _5317_s;
				}
			}
			_iter_next_4390501072:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119162660_f = *__julec_range_begin; goto _iter_begin_4390501072; }
			_iter_end_4390501072:;
		}
	}
	return jule::new_ref<_1037370d0_Struct>();
}



inline jule::Ref<_1037649f0_Fn> _119162660_find_fn_in_package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> _6327_files,jule::Str _6350_ident,jule::Bool _6362_cpp_linked) {
	{
		auto __julec_range_expr = _6327_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119162660_file = *__julec_range_begin;
			_iter_begin_4390507856:;
			{
				jule::Ref<_1037649f0_Fn> _6517_f = _119162660_file->_method_find_fn(_6350_ident,_6362_cpp_linked);
				if (jule::real(_6517_f)) {
					return _6517_f;
				}
			}
			_iter_next_4390507856:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119162660_file = *__julec_range_begin; goto _iter_begin_4390507856; }
			_iter_end_4390507856:;
		}
	}
	return jule::new_ref<_1037649f0_Fn>();
}



inline jule::Ref<_1036e5da0_Trait> _119162660_find_trait_in_package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> _7530_files,jule::Str _7553_ident) {
	{
		auto __julec_range_expr = _7530_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119162660_f = *__julec_range_begin;
			_iter_begin_4390514080:;
			{
				jule::Ref<_1036e5da0_Trait> _7717_t = _119162660_f->_method_find_trait(_7553_ident);
				if (jule::real(_7717_t)) {
					return _7717_t;
				}
			}
			_iter_next_4390514080:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119162660_f = *__julec_range_begin; goto _iter_begin_4390514080; }
			_iter_end_4390514080:;
		}
	}
	return jule::new_ref<_1036e5da0_Trait>();
}



inline jule::Ref<_1036dad50_Enum> _119162660_find_enum_in_package(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> _8729_files,jule::Str _8752_ident) {
	{
		auto __julec_range_expr = _8729_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119162660_f = *__julec_range_begin;
			_iter_begin_4390518288:;
			{
				jule::Ref<_1036dad50_Enum> _8917_e = _119162660_f->_method_find_enum(_8752_ident);
				if (jule::real(_8917_e)) {
					return _8917_e;
				}
			}
			_iter_next_4390518288:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119162660_f = *__julec_range_begin; goto _iter_begin_4390518288; }
			_iter_end_4390518288:;
		}
	}
	return jule::new_ref<_1036dad50_Enum>();
}



inline _1486379e0_Log _119177e90_compiler_err(_108e15ff0_Token _1617_token,jule::Bool _1631_line,jule::Str _1643_fmt,jule::Slice<jule::Any> _1656_args) {
	_1486379e0_Log _1713_log = _1486379e0_Log(1LLU,_1617_token._field_row,_1617_token._field_column,_1617_token._field_file->_method_path(),_1486379e0_logf(_1643_fmt,_1656_args),jule::Str(),jule::Str());
	if (_1631_line) {
		_1713_log._field_line=_1617_token._field_file->_method_get_row(_1617_token._field_row);
	}
	return _1713_log;
}



inline jule::Bool _119177e90_imp_is_lookupable(jule::Ref<_119162660_ImportInfo> _3022_i,jule::Str _3038_ident) {
	if (_3022_i->_field_cpp_linked) {
		return false;
	}
	if ((!(_3022_i->_field_import_all))) {
		if (_3022_i->_field_selected.len() > 0LL) {
			return _3022_i->_method_exist_ident(_3038_ident);
		}
	}
	return _3022_i->_field_import_all;
}



inline jule::Slice<jule::Ref<_104598e40_Var>> _119177e90_build_ret_vars(jule::Ref<_1037649f0_FnIns> _4323_f) {
	if (_4323_f->_field_decl->_method_is_void() || (!(jule::real(_4323_f->_field_result)))) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_104598e40_Var>> _4813_vars = nullptr;
	jule::Slice<jule::Ref<_104a21a10_TypeKind>> _4913_types = _1044463d0_get_fn_result_types(_4323_f);
	{
		auto __julec_range_expr = _4323_f->_field_decl->_field_result->_field_idents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _119177e90_i = 0;
			_108e15ff0_Token _119177e90_ident = *__julec_range_begin;
			_iter_begin_4390544432:;
			{
				if (_108e15ff0_is_ignore_ident(_119177e90_ident._field_kind)) {
					goto _iter_next_4390544432;
				}
				jule::Ref<_104598e40_Var> _5517_v = jule::new_struct<_104598e40_Var>(new( std::nothrow ) _104598e40_Var(_4323_f->_field_scope,_119177e90_ident,_119177e90_ident._field_kind,jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),_4913_types[static_cast<jule::Int>(_119177e90_i)])),jule::new_struct<_1191dc300_Value>(new( std::nothrow ) _1191dc300_Value(jule::Ref<_1487f5920_Expr>(),jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data()))),jule::Ref<_1036da950_ReferenceStack>(),jule::Slice<jule::Ref<_1487f5920_Directive>>(),jule::Slice<jule::Ref<_104598e40_Var>>()));
				_4813_vars=jule::append(_4813_vars,jule::Slice<jule::Ref<_104598e40_Var>>({_5517_v}));
			}
			_iter_next_4390544432:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_119177e90_i; _119177e90_ident = *__julec_range_begin; goto _iter_begin_4390544432; }
			_iter_end_4390544432:;
		}
	}
	return _4813_vars;
}



inline jule::Slice<jule::Ref<_104598e40_Var>> _119177e90_build_param_vars(jule::Ref<_1037649f0_FnIns> _7225_f) {
	if (_7225_f->_field_params.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_104598e40_Var>> _7713_vars = jule::Slice<jule::Ref<_104598e40_Var>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_7225_f->_field_params.len())));
	{
		auto __julec_range_expr = _7225_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _119177e90_i = 0;
			jule::Ref<_1037649f0_ParamIns> _119177e90_p = *__julec_range_begin;
			_iter_begin_4390558016:;
			{
				jule::Ref<_104598e40_Var> _7917_v = jule::new_struct<_104598e40_Var>(new( std::nothrow ) _104598e40_Var(_7225_f->_field_scope,_119177e90_p->_field_decl->_field_token,_119177e90_p->_field_decl->_field_ident,jule::Bool(),jule::Bool(),_119177e90_p->_field_decl->_field_mutable,jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol()),jule::new_struct<_1191dc300_Value>(new( std::nothrow ) _1191dc300_Value(jule::Ref<_1487f5920_Expr>(),jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data()))),jule::Ref<_1036da950_ReferenceStack>(),jule::Slice<jule::Ref<_1487f5920_Directive>>(),jule::Slice<jule::Ref<_104598e40_Var>>()));
				{
					if (!((_119177e90_p->_field_decl->_method_is_self()))) { goto _case_end_4390565552; }
					_case_begin_4390565552:;
					{
						_7917_v->_field_kind->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_7225_f->_field_owner));
						_7917_v->_field_reference=true;
						if (_119177e90_p->_field_decl->_method_is_ref()) {
							_7917_v->_field_ident=_7917_v->_field_ident.slice(1LL);
							_7917_v->_field_kind->_field_kind->_field_kind=jule::new_struct<_104a21a10_Ref>(new( std::nothrow ) _104a21a10_Ref(_7917_v->_field_kind->_field_kind->_method_clone()));
						}
					}
					goto _match_end_4390564528;
					_case_end_4390565552:;
					if (!((_119177e90_p->_field_decl->_field_variadic))) { goto _case_end_4390568352; }
					_case_begin_4390568352:;
					{
						_7917_v->_field_kind->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_104a21a10_Slc>(new( std::nothrow ) _104a21a10_Slc(_119177e90_p->_field_kind->_method_clone()))));
					}
					goto _match_end_4390564528;
					_case_end_4390568352:;
					_case_begin_4390564768:;
					{
						_7917_v->_field_kind->_field_kind=_119177e90_p->_field_kind->_method_clone();
					}
					goto _match_end_4390564528;
					_case_end_4390564768:;
					_match_end_4390564528:;
				}
				_7713_vars[static_cast<jule::Int>(_119177e90_i)]=_7917_v;
			}
			_iter_next_4390558016:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_119177e90_i; _119177e90_p = *__julec_range_begin; goto _iter_begin_4390558016; }
			_iter_end_4390558016:;
		}
	}
	return _7713_vars;
}



inline jule::Slice<jule::Ref<_104a21a10_TypeAlias>> _119177e90_build_generic_type_aliases(jule::Ref<_1037649f0_FnIns> _12035_f) {
	jule::I64 _12113_size = _12035_f->_field_generics.len();
	if (jule::real(_12035_f->_field_decl->_field_owner)) {
		_12113_size+=static_cast<jule::I64>(_12035_f->_field_decl->_field_owner->_field_generics.len());
	}
	if (_12113_size == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_104a21a10_TypeAlias>> _13013_aliases = jule::Slice<jule::Ref<_104a21a10_TypeAlias>>::alloc(static_cast<jule::Int>(_12113_size));
	{
		auto __julec_range_expr = _12035_f->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _119177e90_i = 0;
			jule::Ref<_104a21a10_TypeKind> _119177e90_g = *__julec_range_begin;
			_iter_begin_4390585616:;
			{
				jule::Ref<_1487f5920_GenericDecl> _13317_decl = _12035_f->_field_decl->_field_generics[static_cast<jule::Int>(_119177e90_i)];
				_13013_aliases[static_cast<jule::Int>(_119177e90_i)]=jule::new_struct<_104a21a10_TypeAlias>(new( std::nothrow ) _104a21a10_TypeAlias(_12035_f->_field_decl->_field_scope,jule::Bool(),jule::Bool(),true,_13317_decl->_field_token,_13317_decl->_field_ident,jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),_119177e90_g)),jule::Str(),jule::Slice<jule::Any>()));
			}
			_iter_next_4390585616:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_119177e90_i; _119177e90_g = *__julec_range_begin; goto _iter_begin_4390585616; }
			_iter_end_4390585616:;
		}
	}
	if (jule::real(_12035_f->_field_decl->_field_owner)) {
		jule::Ref<_1037370d0_StructIns> _14417_owner = _12035_f->_field_owner;
		{
			auto __julec_range_expr = _14417_owner->_field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _119177e90_i = 0;
				jule::Ref<_104a21a10_TypeKind> _119177e90_g = *__julec_range_begin;
				_iter_begin_4390594128:;
				{
					jule::Ref<_1487f5920_GenericDecl> _14621_decl = _14417_owner->_field_decl->_field_generics[static_cast<jule::Int>(_119177e90_i)];
					_13013_aliases[static_cast<jule::Int>(_12035_f->_field_generics.len() + _119177e90_i)]=jule::new_struct<_104a21a10_TypeAlias>(new( std::nothrow ) _104a21a10_TypeAlias(_12035_f->_field_decl->_field_scope,jule::Bool(),jule::Bool(),true,_14621_decl->_field_token,_14621_decl->_field_ident,jule::new_struct<_104a21a10_TypeSymbol>(new( std::nothrow ) _104a21a10_TypeSymbol(jule::Ref<_1487f5920_TypeDecl>(),_119177e90_g)),jule::Str(),jule::Slice<jule::Any>()));
				}
				_iter_next_4390594128:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_119177e90_i; _119177e90_g = *__julec_range_begin; goto _iter_begin_4390594128; }
				_iter_end_4390594128:;
			}
		}
	}
	return _13013_aliases;
}



inline jule::Ref<_1191dcd40_SymbolTable> _119177e90_find_file(jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> _16018_files,jule::Ref<_108e58b50_File> _16041_handler) {
	{
		auto __julec_range_expr = _16018_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _119177e90_fl = *__julec_range_begin;
			_iter_begin_4390602160:;
			{
				if ((_119177e90_fl->_field_file).alloc == (_16041_handler).alloc) {
					return _119177e90_fl;
				}
			}
			_iter_next_4390602160:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_fl = *__julec_range_begin; goto _iter_begin_4390602160; }
			_iter_end_4390602160:;
		}
	}
	return jule::new_ref<_1191dcd40_SymbolTable>();
}



inline std::tuple<jule::Bool,jule::Bool> _119177e90_conditional_has_ret(jule::Ref<_104180810_Conditional> _16928_c) {
	jule::Bool _16957_breaking = jule::Bool();
	jule::Bool _16947_ok = jule::Bool();
	jule::Bool _17013_breaked = false;
	{
		auto __julec_range_expr = _16928_c->_field_elifs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104180810_If> _119177e90_elif = *__julec_range_begin;
			_iter_begin_4390607728:;
			{
				if ((!(jule::real(_119177e90_elif)))) {
					_16947_ok = false;
					_16957_breaking = false;
					return std::make_tuple(_16947_ok,_16957_breaking);
				}
				std::tie(_16947_ok,std::ignore,_16957_breaking) = _119177e90___has_ret(_119177e90_elif->_field_scope);
				_17013_breaked=_17013_breaked || _16957_breaking;
				if ((!(_16947_ok))) {
					_16947_ok = false;
					_16957_breaking = _17013_breaked;
					return std::make_tuple(_16947_ok,_16957_breaking);
				}
			}
			_iter_next_4390607728:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_elif = *__julec_range_begin; goto _iter_begin_4390607728; }
			_iter_end_4390607728:;
		}
	}
	if ((!(jule::real(_16928_c->_field_default)))) {
		_16947_ok = false;
		_16957_breaking = _17013_breaked;
		return std::make_tuple(_16947_ok,_16957_breaking);
	}
	std::tie(_16947_ok,std::ignore,_16957_breaking) = _119177e90___has_ret(_16928_c->_field_default->_field_scope);
	_17013_breaked=_17013_breaked || _16957_breaking;
	_16947_ok = _16947_ok;
	_16957_breaking = _17013_breaked;
	return std::make_tuple(_16947_ok,_16957_breaking);
}



inline jule::Bool _119177e90_match_has_ret(jule::Ref<_104180810_Match> _19122_m) {
	if ((!(jule::real(_19122_m->_field_default)))) {
		return false;
	}
	jule::Bool _19613_ok = true;
	jule::Bool _19713_falled = false;
	jule::Bool _19813_breaked = false;
	{
		auto __julec_range_expr = _19122_m->_field_cases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104180810_Case> _119177e90_c = *__julec_range_begin;
			_iter_begin_4390621904:;
			{
				if ((!(jule::real(_119177e90_c)))) {
					return false;
				}
				std::tie(_19613_ok,_19713_falled,_19813_breaked) = _119177e90___has_ret(_119177e90_c->_field_scope);
				if (((!(_19613_ok)) && (!(_19713_falled))) || _19813_breaked) {
					return false;
				}
				{
					if (!(((!(_19613_ok))))) { goto _case_end_4390626464; }
					_case_begin_4390626464:;
					{
						if ((!(_19713_falled))) {
							return false;
						}
						goto _case_begin_4390626576;
					}
					goto _match_end_4390625888;
					_case_end_4390626464:;
					if (!((_19713_falled))) { goto _case_end_4390626576; }
					_case_begin_4390626576:;
					{
						if ((!(jule::real(_119177e90_c->_field_next)))) {
							return false;
						}
						goto _iter_next_4390621904;
					}
					goto _match_end_4390625888;
					_case_end_4390626576:;
					_match_end_4390625888:;
				}
				_19713_falled=false;
			}
			_iter_next_4390621904:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_c = *__julec_range_begin; goto _iter_begin_4390621904; }
			_iter_end_4390621904:;
		}
	}
	return _119177e90_has_ret(_19122_m->_field_default->_field_scope);
}



inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _119177e90___has_ret(jule::Ref<_104180810_Scope> _22718_s) {
	jule::Bool _22755_breaked = jule::Bool();
	jule::Bool _22741_falled = jule::Bool();
	jule::Bool _22731_ok = jule::Bool();
	if ((!(jule::real(_22718_s)))) {
		_22731_ok = false;
		_22741_falled = false;
		_22755_breaked = false;
		return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
	}
	{
		auto __julec_range_expr = _22718_s->_field_stmts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _119177e90_st = *__julec_range_begin;
			_iter_begin_4390634000:;
			{
				{
					auto _match_expr{ _119177e90_st };
					if (!(_match_expr.type_is<jule::Ref<_104180810_FallSt>>())) { goto _case_end_4390638064; }
					_case_begin_4390638064:;
					{
						_22741_falled=true;
					}
					goto _match_end_4390637456;
					_case_end_4390638064:;
					if (!(_match_expr.type_is<jule::Ref<_104180810_BreakSt>>())) { goto _case_end_4390638176; }
					_case_begin_4390638176:;
					{
						_22731_ok = false;
						_22741_falled = false;
						_22755_breaked = true;
						return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
					}
					goto _match_end_4390637456;
					_case_end_4390638176:;
					if (!(_match_expr.type_is<jule::Ref<_104180810_RetSt>>())) { goto _case_end_4390638288; }
					_case_begin_4390638288:;
					{
						_22731_ok = true;
						_22741_falled = _22741_falled;
						_22755_breaked = _22755_breaked;
						return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
					}
					goto _match_end_4390637456;
					_case_end_4390638288:;
					if (!(_match_expr.type_is<jule::Ref<_104180810_Scope>>())) { goto _case_end_4390638400; }
					_case_begin_4390638400:;
					{
						jule::Bool _24417_ok = _119177e90_has_ret(_119177e90_st.operator jule::Ref<_104180810_Scope>());
						if (_24417_ok) {
							_22731_ok = true;
							_22741_falled = false;
							_22755_breaked = false;
							return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
						}
					}
					goto _match_end_4390637456;
					_case_end_4390638400:;
					if (!(_match_expr.type_is<jule::Ref<_1191dc300_Data>>())) { goto _case_end_4390638512; }
					_case_begin_4390638512:;
					{
						{
							auto _match_expr{ _119177e90_st.operator jule::Ref<_1191dc300_Data>()->_field_model };
							if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinPanicCallExprModel>>())) { goto _case_end_4390651392; }
							_case_begin_4390651392:;
							{
								_22731_ok = true;
								_22741_falled = _22741_falled;
								_22755_breaked = _22755_breaked;
								return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
							}
							goto _match_end_4390648112;
							_case_end_4390651392:;
							_match_end_4390648112:;
						}
					}
					goto _match_end_4390637456;
					_case_end_4390638512:;
					if (!(_match_expr.type_is<jule::Ref<_104180810_Recover>>())) { goto _case_end_4390638624; }
					_case_begin_4390638624:;
					{
						jule::Bool _25618_ok;
						jule::Bool _25622_falled;
						jule::Bool _25630_breaked;
						std::tie(_25618_ok,_25622_falled,_25630_breaked) = _119177e90___has_ret(_119177e90_st.operator jule::Ref<_104180810_Recover>()->_field_scope);
						if (_25618_ok) {
							_22731_ok = true;
							_22741_falled = _25622_falled;
							_22755_breaked = _25630_breaked;
							return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
						}
					}
					goto _match_end_4390637456;
					_case_end_4390638624:;
					if (!(_match_expr.type_is<jule::Ref<_104180810_Conditional>>())) { goto _case_end_4390638736; }
					_case_begin_4390638736:;
					{
						jule::Bool _26218_ok;
						jule::Bool _26222_breaking;
						std::tie(_26218_ok,_26222_breaking) = _119177e90_conditional_has_ret(_119177e90_st.operator jule::Ref<_104180810_Conditional>());
						if (_26218_ok) {
							_22731_ok = true;
							_22741_falled = false;
							_22755_breaked = false;
							return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
						}
						if (_26222_breaking) {
							_22731_ok = false;
							_22741_falled = false;
							_22755_breaked = _22755_breaked;
							return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
						}
					}
					goto _match_end_4390637456;
					_case_end_4390638736:;
					if (!(_match_expr.type_is<jule::Ref<_104180810_Match>>())) { goto _case_end_4390638848; }
					_case_begin_4390638848:;
					{
						jule::Bool _27217_ok = _119177e90_match_has_ret(_119177e90_st.operator jule::Ref<_104180810_Match>());
						if (_27217_ok) {
							_22731_ok = true;
							_22741_falled = false;
							_22755_breaked = false;
							return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
						}
					}
					goto _match_end_4390637456;
					_case_end_4390638848:;
					_match_end_4390637456:;
				}
			}
			_iter_next_4390634000:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _119177e90_st = *__julec_range_begin; goto _iter_begin_4390634000; }
			_iter_end_4390634000:;
		}
	}
	_22731_ok = false;
	_22741_falled = _22741_falled;
	_22755_breaked = _22755_breaked;
	return std::make_tuple(_22731_ok,_22741_falled,_22755_breaked);
}



inline jule::Bool _119177e90_has_ret(jule::Ref<_104180810_Scope> _28216_s) {
	jule::Bool _28310_ok;
	std::tie(_28310_ok,std::ignore,std::ignore) = _119177e90___has_ret(_28216_s);
	return _28310_ok;
}



inline void _119177e90_push_suggestion(_1486379e0_Log* _28731_log,jule::Str _28742_fmt,jule::Slice<jule::Any> _28755_args) {
	_28731_log->_field_suggestion=_1486379e0_logf(_28742_fmt,_28755_args);
}



inline jule::Slice<jule::Ref<_104a21a10_TypeKind>> _1044463d0_get_fn_result_types(jule::Ref<_1037649f0_FnIns> _2528_f) {
	{
		if (!((_2528_f->_field_decl->_method_is_void() || (!(jule::real(_2528_f->_field_result)))))) { goto _case_end_4390678448; }
		_case_begin_4390678448:;
		{
			return nullptr;
		}
		goto _match_end_4390676880;
		_case_end_4390678448:;
		if (!(((!(jule::real(_2528_f->_field_result->_method_tup())))))) { goto _case_end_4390679504; }
		_case_begin_4390679504:;
		{
			return jule::Slice<jule::Ref<_104a21a10_TypeKind>>({_2528_f->_field_result});
		}
		goto _match_end_4390676880;
		_case_end_4390679504:;
		_case_begin_4390677040:;
		{
			return _2528_f->_field_result->_method_tup()->_field_types;
		}
		goto _match_end_4390676880;
		_case_end_4390677040:;
		_match_end_4390676880:;
	}
}



inline jule::Bool _1044463d0_trait_has_reference_receiver(jule::Ref<_1036e5da0_Trait> _3833_t) {
	{
		auto __julec_range_expr = _3833_t->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _1044463d0_f = *__julec_range_begin;
			_iter_begin_4390681680:;
			{
				if (_1044463d0_f->_field_statically) {
					goto _iter_next_4390681680;
				}
				jule::Ref<_1037649f0_Param> _4513_p = _1044463d0_f->_field_params[0LL];
				if (_4513_p->_method_is_ref() && _4513_p->_method_is_self()) {
					return true;
				}
			}
			_iter_next_4390681680:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1044463d0_f = *__julec_range_begin; goto _iter_begin_4390681680; }
			_iter_end_4390681680:;
		}
	}
	return false;
}



inline jule::Bool _1044463d0_float_assignable(jule::Str _5321_kind,jule::Ref<_1191dc300_Data> _5332_d) {
	jule::Str _549_value = _11863fd30_fmt_float(static_cast<jule::F64>(_5332_d->_field_constant->_method_read_f64()),'e',-1LL,64LL);
	return _104c40680_check_bit_float(_549_value,static_cast<jule::Int>(_104c40680_bitsize_of(_5321_kind)));
}



inline jule::Bool _1044463d0_sig_assignable(jule::Str _5819_kind,jule::Ref<_1191dc300_Data> _5830_d) {
	jule::F64 _599_min = _104c42960_min(_5819_kind);
	jule::F64 _609_max = _104c42960_max(_5819_kind);
	{
		if (!((_5830_d->_field_constant->_method_is_f64()))) { goto _case_end_4390696848; }
		_case_begin_4390696848:;
		{
			jule::F64 _6413_x = static_cast<jule::F64>(_5830_d->_field_constant->_method_read_f64());
			jule::F64 _6514_i;
			jule::F64 _6517_frac;
			std::tie(_6514_i,_6517_frac) = _14904ec70_modf(_6413_x);
			if (_6517_frac != 0LL) {
				return false;
			}
			return (_6514_i >= _599_min) && (_6514_i <= _609_max);
		}
		goto _match_end_4390696560;
		_case_end_4390696848:;
		if (!((_5830_d->_field_constant->_method_is_u64()))) { goto _case_end_4390696960; }
		_case_begin_4390696960:;
		{
			jule::F64 _7213_x = static_cast<jule::F64>(_5830_d->_field_constant->_method_read_u64());
			if (_7213_x <= _609_max) {
				return true;
			}
		}
		goto _match_end_4390696560;
		_case_end_4390696960:;
		if (!((_5830_d->_field_constant->_method_is_i64()))) { goto _case_end_4390697072; }
		_case_begin_4390697072:;
		{
			jule::F64 _7813_x = static_cast<jule::F64>(_5830_d->_field_constant->_method_read_i64());
			return (_599_min <= _7813_x) && (_7813_x <= _609_max);
		}
		goto _match_end_4390696560;
		_case_end_4390697072:;
		_match_end_4390696560:;
	}
	return false;
}



inline jule::Bool _1044463d0_unsig_assignable(jule::Str _8521_kind,jule::Ref<_1191dc300_Data> _8532_d) {
	jule::F64 _869_max = _104c42960_max(_8521_kind);
	{
		if (!((_8532_d->_field_constant->_method_is_f64()))) { goto _case_end_4390712320; }
		_case_begin_4390712320:;
		{
			jule::F64 _9013_x = _8532_d->_field_constant->_method_read_f64();
			if (_9013_x < 0LL) {
				return false;
			}
			jule::F64 _9514_i;
			jule::F64 _9517_frac;
			std::tie(_9514_i,_9517_frac) = _14904ec70_modf(_9013_x);
			if (_9517_frac != 0LL) {
				return false;
			}
			return _9514_i <= _869_max;
		}
		goto _match_end_4390712016;
		_case_end_4390712320:;
		if (!((_8532_d->_field_constant->_method_is_u64()))) { goto _case_end_4390712432; }
		_case_begin_4390712432:;
		{
			jule::F64 _10213_x = static_cast<jule::F64>(_8532_d->_field_constant->_method_read_u64());
			if (_10213_x <= _869_max) {
				return true;
			}
		}
		goto _match_end_4390712016;
		_case_end_4390712432:;
		if (!((_8532_d->_field_constant->_method_is_i64()))) { goto _case_end_4390712544; }
		_case_begin_4390712544:;
		{
			jule::F64 _10813_x = static_cast<jule::F64>(_8532_d->_field_constant->_method_read_i64());
			return (0LL <= _10813_x) && (_10813_x <= _869_max);
		}
		goto _match_end_4390712016;
		_case_end_4390712544:;
		_match_end_4390712016:;
	}
	return false;
}



inline jule::Bool _1044463d0_int_assignable(jule::Str _11519_kind,jule::Ref<_1191dc300_Data> _11530_d) {
	{
		if (!((_104c56790_is_sig_int(_11519_kind)))) { goto _case_end_4390726928; }
		_case_begin_4390726928:;
		{
			return _1044463d0_sig_assignable(_11519_kind,_11530_d);
		}
		goto _match_end_4390722384;
		_case_end_4390726928:;
		if (!((_104c56790_is_unsig_int(_11519_kind)))) { goto _case_end_4390727040; }
		_case_begin_4390727040:;
		{
			return _1044463d0_unsig_assignable(_11519_kind,_11530_d);
		}
		goto _match_end_4390722384;
		_case_end_4390727040:;
		_case_begin_4390722496:;
		{
			return false;
		}
		goto _match_end_4390722384;
		_case_end_4390722496:;
		_match_end_4390722384:;
	}
}



inline jule::Any _1191dc300_find_builtins_import(jule::Str _4525_ident,jule::Ref<_119162660_ImportInfo> _4537_imp) {
	return _104b4ffd0_find_package_builtin_def(_4537_imp->_field_link_path,_4525_ident);
}



inline jule::Any _1191dc300_find_builtins_sema(jule::Str _4923_ident,jule::Ref<_119177e90_Sema> _4939_s) {
	{
		auto __julec_range_expr = _4939_s->_field_file->_field_imports;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _1191dc300_imp = *__julec_range_begin;
			_iter_begin_4390733280:;
			{
				if (_1191dc300_imp->_field_import_all || _1191dc300_imp->_method_exist_ident(_4923_ident)) {
					jule::Any _5221_def = _1191dc300_find_builtins_import(_4923_ident,_1191dc300_imp);
					if (_5221_def != nullptr) {
						return _5221_def;
					}
				}
			}
			_iter_next_4390733280:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1191dc300_imp = *__julec_range_begin; goto _iter_begin_4390733280; }
			_iter_end_4390733280:;
		}
	}
	return jule::Any(nullptr);
}



inline jule::Bool _1191dc300_is_ok_for_shifting(jule::Ref<_1191dc300_Data> _6127_d) {
	jule::Ref<_104a21a10_Prim> _629_prim = _6127_d->_field_kind->_method_prim();
	if ((!(jule::real(_629_prim))) || (!(_104c56790_is_int(_629_prim->_method_to_str())))) {
		return false;
	}
	if ((!(_6127_d->_method_is_const()))) {
		return true;
	}
	{
		if (!((_6127_d->_field_constant->_method_is_i64()))) { goto _case_end_4390745024; }
		_case_begin_4390745024:;
		{
			return _6127_d->_field_constant->_method_read_i64() >= 0LL;
		}
		goto _match_end_4390743696;
		_case_end_4390745024:;
		if (!((_6127_d->_field_constant->_method_is_u64()))) { goto _case_end_4390745136; }
		_case_begin_4390745136:;
		{
			return true;
		}
		goto _match_end_4390743696;
		_case_end_4390745136:;
		_case_begin_4390743984:;
		{
			return false;
		}
		goto _match_end_4390743696;
		_case_end_4390743984:;
		_match_end_4390743696:;
	}
}



inline jule::Bool _1191dc300_is_instanced_struct(jule::Ref<_1037370d0_StructIns> _7824_s) {
	return _7824_s->_field_decl->_field_generics.len() == _7824_s->_field_generics.len();
}



inline void _1191dc300_normalize_bitsize(jule::Ref<_1191dc300_Data> _8226_d) {
	if ((!(_8226_d->_method_is_const()))) {
		return;
	}
	jule::Str _8713_kind = jule::Str("", 0);
	{
		if (!((_8226_d->_field_constant->_method_is_f64()))) { goto _case_end_4390754224; }
		_case_begin_4390754224:;
		{
			jule::F64 _9013_x = _8226_d->_field_constant->_method_read_f64();
			_8713_kind=_104c40680_float_from_bits(static_cast<jule::U64>(_104c40680_bitsize_of_float(_9013_x)));
		}
		goto _match_end_4390753024;
		_case_end_4390754224:;
		if (!((_8226_d->_field_constant->_method_is_i64()))) { goto _case_end_4390753456; }
		_case_begin_4390753456:;
		{
			jule::I64 _9413_x = _8226_d->_field_constant->_method_read_i64();
			_8713_kind=_104c40680_int_from_bits(static_cast<jule::U64>(_104c40680_bitsize_of_int(_9413_x)));
		}
		goto _match_end_4390753024;
		_case_end_4390753456:;
		if (!((_8226_d->_field_constant->_method_is_u64()))) { goto _case_end_4390753568; }
		_case_begin_4390753568:;
		{
			jule::U64 _9813_x = _8226_d->_field_constant->_method_read_u64();
			_8713_kind=_104c40680_uint_from_bits(static_cast<jule::U64>(_104c40680_bitsize_of_uint(_9813_x)));
		}
		goto _match_end_4390753024;
		_case_end_4390753568:;
		_case_begin_4390753152:;
		{
			return;
		}
		goto _match_end_4390753024;
		_case_end_4390753152:;
		_match_end_4390753024:;
	}
	if (jule::real(_8226_d->_field_kind->_method_enm())) {
		return;
	}
	_8226_d->_field_kind->_field_kind=_104a21a10_build_prim_type(_8713_kind);
}



inline void _1191dc300_normalize_type(jule::Ref<_1191dc300_Data> _11323_d) {
	{
		if (!((_1044463d0_int_assignable(jule::Str("int", 3),_11323_d)))) { goto _case_end_4390767344; }
		_case_begin_4390767344:;
		{
			_11323_d->_field_kind->_field_kind=_104a21a10_build_prim_type(jule::Str("int", 3));
			_11323_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_11323_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4390767136;
		_case_end_4390767344:;
		if (!((_1044463d0_int_assignable(jule::Str("uint", 4),_11323_d)))) { goto _case_end_4390767472; }
		_case_begin_4390767472:;
		{
			_11323_d->_field_kind->_field_kind=_104a21a10_build_prim_type(jule::Str("uint", 4));
			_11323_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_11323_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4390767136;
		_case_end_4390767472:;
		_match_end_4390767136:;
	}
}



inline void _1191dc300_apply_cast_kind_model(jule::Ref<_1191dc300_Data> _12530_d) {
	_12530_d->_field_model=jule::Any(jule::new_struct<_11911f320_CastingExprModel>(new( std::nothrow ) _11911f320_CastingExprModel(_12530_d->_field_model,_12530_d->_field_cast_kind,_12530_d->_field_kind)));
}



inline void _1191dc300_apply_cast_kind(jule::Ref<_1191dc300_Data> _13324_d) {
	if ((!(jule::real(_13324_d->_field_cast_kind)))) {
		return;
	}
	_1191dc300_apply_cast_kind_model(_13324_d);
	_13324_d->_field_kind=_13324_d->_field_cast_kind;
	jule::drop(_13324_d->_field_cast_kind);
}



inline jule::Ref<_1191dc300_Data> _1191dc300_build_void_data(void) {
	return jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("void", 4)))),jule::Ref<_104a21a10_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,jule::Ref<_104c409b0_Const>()));
}



inline jule::Str _1191dc300_kind_by_bitsize(jule::Any _15420_expr) {
	{
		auto _match_expr{ _15420_expr };
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4390785808; }
		_case_begin_4390785808:;
		{
			jule::F64 _15713_x = _15420_expr.operator jule::F64();
			return _104c40680_float_from_bits(static_cast<jule::U64>(_104c40680_bitsize_of_float(_15713_x)));
		}
		goto _match_end_4390782368;
		_case_end_4390785808:;
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4390785920; }
		_case_begin_4390785920:;
		{
			jule::I64 _16113_x = _15420_expr.operator jule::I64();
			return _104c40680_int_from_bits(static_cast<jule::U64>(_104c40680_bitsize_of_int(_16113_x)));
		}
		goto _match_end_4390782368;
		_case_end_4390785920:;
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4390786032; }
		_case_begin_4390786032:;
		{
			jule::U64 _16513_x = _15420_expr.operator jule::U64();
			return _104c40680_uint_from_bits(static_cast<jule::U64>(_104c40680_bitsize_of_uint(_16513_x)));
		}
		goto _match_end_4390782368;
		_case_end_4390786032:;
		_case_begin_4390785632:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4390782368;
		_case_end_4390785632:;
		_match_end_4390782368:;
	}
}



inline jule::Str _1191dc300_check_data_for_integer_indexing(jule::Ref<_1191dc300_Data> _17340_d) {
	jule::Str _17352_err_fmt = jule::Str("", 0);
	if ((!(jule::real(_17340_d)))) {
		_17352_err_fmt = jule::Str("", 0);
		return _17352_err_fmt;
	}
	jule::Ref<_104a21a10_TypeKind> _17813_kind = _17340_d->_field_kind;
	if (jule::real(_17813_kind->_method_ref())) {
		_17813_kind=_17813_kind->_method_ref()->_field_elem;
	}
	{
		if (!(((!(jule::real(_17813_kind->_method_prim())))))) { goto _case_end_4390802224; }
		_case_begin_4390802224:;
		{
			_17352_err_fmt = jule::Str("invalid expression", 18);
			return _17352_err_fmt;
		}
		goto _match_end_4390796912;
		_case_end_4390802224:;
		if (!(((!(_104c56790_is_int(_17813_kind->_method_prim()->_method_to_str())))))) { goto _case_end_4390802336; }
		_case_begin_4390802336:;
		{
			_17352_err_fmt = jule::Str("invalid expression", 18);
			return _17352_err_fmt;
		}
		goto _match_end_4390796912;
		_case_end_4390802336:;
		if (!((_17340_d->_method_is_const()))) { goto _case_end_4390799920; }
		_case_begin_4390799920:;
		{
			if (_17340_d->_field_constant->_method_as_f64() < 0LL) {
				_17352_err_fmt = jule::Str("overflow the limit of data-type", 31);
				return _17352_err_fmt;
			}
		}
		goto _match_end_4390796912;
		_case_end_4390799920:;
		_case_begin_4390797152:;
		{
			_17340_d->_field_cast_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("int", 3))));
			_1191dc300_apply_cast_kind(_17340_d);
		}
		goto _match_end_4390796912;
		_case_end_4390797152:;
		_match_end_4390796912:;
	}
	_17352_err_fmt = jule::Str("", 0);
	return _17352_err_fmt;
}



inline jule::Bool _104a21a10_can_get_ptr(jule::Ref<_1191dc300_Data> _45420_d) {
	if ((!(_45420_d->_field_lvalue)) || _45420_d->_method_is_const()) {
		return false;
	}
	{
		if (!((jule::real(_45420_d->_field_kind->_method_fnc()) || jule::real(_45420_d->_field_kind->_method_enm())))) { goto _case_end_4390809824; }
		_case_begin_4390809824:;
		{
			return false;
		}
		goto _match_end_4390808688;
		_case_end_4390809824:;
		_case_begin_4390808848:;
		{
			return true;
		}
		goto _match_end_4390808688;
		_case_end_4390808848:;
		_match_end_4390808688:;
	}
}



inline jule::Bool _104a21a10_is_lvalue(jule::Ref<_104a21a10_TypeKind> _46818_t) {
	return ((jule::real(_46818_t->_method_ref()) || jule::real(_46818_t->_method_ptr())) || jule::real(_46818_t->_method_slc())) || jule::real(_46818_t->_method_map());
}



inline jule::Bool _104a21a10_is_mut(jule::Ref<_104a21a10_TypeKind> _47215_t) {
	if (jule::real(_47215_t->_method_strct())) {
		return _47215_t->_method_strct()->_field_has_mut;
	}
	if (jule::real(_47215_t->_method_prim())) {
		jule::Ref<_104a21a10_Prim> _47713_p = _47215_t->_method_prim();
		return _47713_p->_method_is_any();
	}
	return (jule::real(_47215_t->_method_slc()) || jule::real(_47215_t->_method_ptr())) || jule::real(_47215_t->_method_ref());
}



inline jule::Bool _104a21a10_supports_cloning(jule::Ref<_104a21a10_TypeKind> _48325_k) {
	{
		if (!((jule::real(_48325_k->_method_prim())))) { goto _case_end_4390827840; }
		_case_begin_4390827840:;
		{
			return (!(_48325_k->_method_prim()->_method_is_any()));
		}
		goto _match_end_4390827072;
		_case_end_4390827840:;
		if (!((jule::real(_48325_k->_method_enm())))) { goto _case_end_4390827952; }
		_case_begin_4390827952:;
		{
			return true;
		}
		goto _match_end_4390827072;
		_case_end_4390827952:;
		if (!((jule::real(_48325_k->_method_fnc())))) { goto _case_end_4390828928; }
		_case_begin_4390828928:;
		{
			return true;
		}
		goto _match_end_4390827072;
		_case_end_4390828928:;
		if (!((jule::real(_48325_k->_method_ptr())))) { goto _case_end_4390829040; }
		_case_begin_4390829040:;
		{
			return true;
		}
		goto _match_end_4390827072;
		_case_end_4390829040:;
		if (!((jule::real(_48325_k->_method_slc())))) { goto _case_end_4390829152; }
		_case_begin_4390829152:;
		{
			return _104a21a10_supports_cloning(_48325_k->_method_slc()->_field_elem);
		}
		goto _match_end_4390827072;
		_case_end_4390829152:;
		if (!((jule::real(_48325_k->_method_map())))) { goto _case_end_4390829280; }
		_case_begin_4390829280:;
		{
			return _104a21a10_supports_cloning(_48325_k->_method_map()->_field_key) && _104a21a10_supports_cloning(_48325_k->_method_map()->_field_val);
		}
		goto _match_end_4390827072;
		_case_end_4390829280:;
		if (!((jule::real(_48325_k->_method_arr())))) { goto _case_end_4390828288; }
		_case_begin_4390828288:;
		{
			return _104a21a10_supports_cloning(_48325_k->_method_arr()->_field_elem);
		}
		goto _match_end_4390827072;
		_case_end_4390828288:;
		if (!((jule::real(_48325_k->_method_ref())))) { goto _case_end_4390828416; }
		_case_begin_4390828416:;
		{
			return _104a21a10_supports_cloning(_48325_k->_method_ref()->_field_elem);
		}
		goto _match_end_4390827072;
		_case_end_4390828416:;
		if (!((jule::real(_48325_k->_method_strct())))) { goto _case_end_4390828544; }
		_case_begin_4390828544:;
		{
			jule::Ref<_1037370d0_StructIns> _51017_s = _48325_k->_method_strct();
			if ((!(_51017_s->_field_has_mut))) {
				return true;
			}
			if (((!(jule::real(_51017_s->_field_decl))) || _51017_s->_field_decl->_field_cpp_linked) || (!(_51017_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))))) {
				return false;
			}
			return true;
		}
		goto _match_end_4390827072;
		_case_end_4390828544:;
		_case_begin_4390823312:;
		{
			return false;
		}
		goto _match_end_4390827072;
		_case_end_4390823312:;
		_match_end_4390827072:;
	}
}



inline jule::Bool _104a21a10_is_nil_compatible(jule::Ref<_104a21a10_TypeKind> _52426_t) {
	jule::Ref<_104a21a10_Prim> _5259_prim = _52426_t->_method_prim();
	if (jule::real(_5259_prim) && _5259_prim->_method_is_any()) {
		return true;
	}
	return ((((_52426_t->_method_is_nil() || jule::real(_52426_t->_method_fnc())) || jule::real(_52426_t->_method_ptr())) || jule::real(_52426_t->_method_trt())) || jule::real(_52426_t->_method_slc())) || jule::real(_52426_t->_method_map());
}



inline jule::Bool _104a21a10_is_valid_for_ref(jule::Ref<_104a21a10_TypeKind> _54025_t) {
	jule::Ref<_1037370d0_StructIns> _54113_s = _54025_t->_method_strct();
	if ((jule::real(_54113_s) && jule::real(_54113_s->_field_decl)) && _54113_s->_field_decl->_field_cpp_linked) {
		return false;
	}
	return (!(((jule::real(_54025_t->_method_enm()) || jule::real(_54025_t->_method_ptr())) || jule::real(_54025_t->_method_ref())) || jule::real(_54025_t->_method_arr())));
}



inline jule::Bool _104a21a10_is_variadicable(jule::Ref<_104a21a10_TypeKind> _54824_tk) {
	return jule::real(_54824_tk->_method_slc());
}



inline jule::Str _104a21a10_build_link_path_by_tokens(jule::Slice<_108e15ff0_Token> _55030_tokens) {
	jule::Str _55113_s = _55030_tokens[0LL]._field_kind;
	{
		auto __julec_range_expr = _55030_tokens.slice(1LL);
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_108e15ff0_Token _104a21a10_token = *__julec_range_begin;
			_iter_begin_4390865184:;
			{
				_55113_s+=jule::Str("::", 2);
				_55113_s+=_104a21a10_token._field_kind;
			}
			_iter_next_4390865184:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104a21a10_token = *__julec_range_begin; goto _iter_begin_4390865184; }
			_iter_end_4390865184:;
		}
	}
	return _55113_s;
}



inline jule::Ref<_104a21a10_Prim> _104a21a10_build_prim_type(jule::Str _55920_kind) {
	return jule::new_struct<_104a21a10_Prim>(new( std::nothrow ) _104a21a10_Prim(_55920_kind));
}



inline jule::Ref<_1037370d0_Struct> _104a21a10_get_struct_from_kind(jule::Ref<_104a21a10_TypeKind> _56529_k) {
	{
		if (!(((!(jule::real(_56529_k)))))) { goto _case_end_4390871536; }
		_case_begin_4390871536:;
		{
			return jule::new_ref<_1037370d0_Struct>();
		}
		goto _match_end_4390868992;
		_case_end_4390871536:;
		if (!((jule::real(_56529_k->_method_strct())))) { goto _case_end_4390870544; }
		_case_begin_4390870544:;
		{
			return _56529_k->_method_strct()->_field_decl;
		}
		goto _match_end_4390868992;
		_case_end_4390870544:;
		if (!((jule::real(_56529_k->_method_ref())))) { goto _case_end_4390870752; }
		_case_begin_4390870752:;
		{
			return _104a21a10_get_struct_from_kind(_56529_k->_method_ref()->_field_elem);
		}
		goto _match_end_4390868992;
		_case_end_4390870752:;
		if (!((jule::real(_56529_k->_method_slc())))) { goto _case_end_4390871200; }
		_case_begin_4390871200:;
		{
			return _104a21a10_get_struct_from_kind(_56529_k->_method_slc()->_field_elem);
		}
		goto _match_end_4390868992;
		_case_end_4390871200:;
		if (!((jule::real(_56529_k->_method_arr())))) { goto _case_end_4390871312; }
		_case_begin_4390871312:;
		{
			return _104a21a10_get_struct_from_kind(_56529_k->_method_arr()->_field_elem);
		}
		goto _match_end_4390868992;
		_case_end_4390871312:;
		if (!((jule::real(_56529_k->_method_ptr())))) { goto _case_end_4390870144; }
		_case_begin_4390870144:;
		{
			return jule::new_ref<_1037370d0_Struct>();
		}
		goto _match_end_4390868992;
		_case_end_4390870144:;
		_case_begin_4390869136:;
		{
			return jule::new_ref<_1037370d0_Struct>();
		}
		goto _match_end_4390868992;
		_case_end_4390869136:;
		_match_end_4390868992:;
	}
}



inline jule::Bool _104a21a10_is_prim(jule::Str _59412_kind) {
	return (((((((((((((((_59412_kind == jule::Str("i8", 2)) || (_59412_kind == jule::Str("i16", 3))) || (_59412_kind == jule::Str("i32", 3))) || (_59412_kind == jule::Str("i64", 3))) || (_59412_kind == jule::Str("u8", 2))) || (_59412_kind == jule::Str("u16", 3))) || (_59412_kind == jule::Str("u32", 3))) || (_59412_kind == jule::Str("u64", 3))) || (_59412_kind == jule::Str("f32", 3))) || (_59412_kind == jule::Str("f64", 3))) || (_59412_kind == jule::Str("int", 3))) || (_59412_kind == jule::Str("uint", 4))) || (_59412_kind == jule::Str("uintptr", 7))) || (_59412_kind == jule::Str("bool", 4))) || (_59412_kind == jule::Str("str", 3))) || (_59412_kind == jule::Str("any", 3));
}



inline std::tuple<jule::Ref<_1191dcd40_SymbolTable>,jule::Slice<_1486379e0_Log>> _104aa02c0_build_symbols(jule::Ref<_1487f02c0_Ast> _922_ast,jule::Trait<_119162660_Importer> _937_importer,jule::Ref<_1036da950_SymbolBuilder> _961_owner) {
	jule::Ref<_1036da950_SymbolBuilder> _1013_sb = jule::new_struct<_1036da950_SymbolBuilder>(new( std::nothrow ) _1036da950_SymbolBuilder(_961_owner,_937_importer,jule::Slice<_1486379e0_Log>(),_922_ast,jule::Ref<_1191dcd40_SymbolTable>()));
	_1013_sb->_method_build();
	if (_1013_sb->_field_errors.len() == 0LL) {
		return std::make_tuple(_1013_sb->_field_table,nullptr);
	}
	return std::make_tuple(jule::new_ref<_1191dcd40_SymbolTable>(),_1013_sb->_field_errors);
}



inline std::tuple<jule::Ref<_119162660_Package>,jule::Slice<_1486379e0_Log>> _104aa02c0___analyze_package(jule::Slice<jule::Ref<_1487f02c0_Ast>> _2326_files,jule::Trait<_119162660_Importer> _2345_importer) {
	jule::Slice<jule::Ref<_1191dcd40_SymbolTable>> _2513_tables = jule::Slice<jule::Ref<_1191dcd40_SymbolTable>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_2326_files.len())));
	{
		auto __julec_range_expr = _2326_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104aa02c0_i = 0;
			jule::Ref<_1487f02c0_Ast> _104aa02c0_f = *__julec_range_begin;
			_iter_begin_4390896416:;
			{
				jule::Ref<_1191dcd40_SymbolTable> _2718_table;
				jule::Slice<_1486379e0_Log> _2729_errors;
				std::tie(_2718_table,_2729_errors) = _104aa02c0_build_symbols(_104aa02c0_f,_2345_importer,jule::new_ref<_1036da950_SymbolBuilder>());
				if (_2729_errors.len() > 0LL) {
					return std::make_tuple(jule::new_ref<_119162660_Package>(),_2729_errors);
				}
				_2513_tables[static_cast<jule::Int>(_104aa02c0_i)]=_2718_table;
			}
			_iter_next_4390896416:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104aa02c0_i; _104aa02c0_f = *__julec_range_begin; goto _iter_begin_4390896416; }
			_iter_end_4390896416:;
		}
	}
	jule::Ref<_119177e90_Sema> _3413_sema = jule::new_struct<_119177e90_Sema>(new( std::nothrow ) _119177e90_Sema());
	_3413_sema->_method_check(_2513_tables);
	if (_3413_sema->_field_errors.len() > 0LL) {
		return std::make_tuple(jule::new_ref<_119162660_Package>(),_3413_sema->_field_errors);
	}
	jule::Ref<_119162660_Package> _4013_pkg = jule::new_struct<_119162660_Package>(new( std::nothrow ) _119162660_Package(_3413_sema->_field_files));
	return std::make_tuple(_4013_pkg,nullptr);
}



inline std::tuple<jule::Ref<_119162660_Package>,jule::Slice<_1486379e0_Log>> _104aa02c0_analyze_package(jule::Slice<jule::Ref<_1487f02c0_Ast>> _6428_files,jule::Trait<_119162660_Importer> _6447_importer) {
	if (_6428_files.len() == 0LL) {
		return std::make_tuple(jule::new_ref<_119162660_Package>(),nullptr);
	}
	jule::Ref<_119162660_Package> _6914_package;
	jule::Slice<_1486379e0_Log> _6927_logs;
	std::tie(_6914_package,_6927_logs) = _104aa02c0___analyze_package(_6428_files,_6447_importer);
	return std::make_tuple(_6914_package,_6927_logs);
}



inline std::tuple<jule::Ref<_1191dcd40_SymbolTable>,jule::Slice<_1486379e0_Log>> _104aa02c0_analyze_file(jule::Ref<_1487f02c0_Ast> _9025_f,jule::Trait<_119162660_Importer> _9038_importer) {
	jule::Slice<jule::Ref<_1487f02c0_Ast>> _9113_files = jule::Slice<jule::Ref<_1487f02c0_Ast>>({_9025_f});
	jule::Ref<_119162660_Package> _9214_pkg;
	jule::Slice<_1486379e0_Log> _9223_errors;
	std::tie(_9214_pkg,_9223_errors) = _104aa02c0_analyze_package(_9113_files,_9038_importer);
	if (_9223_errors.len() > 0LL) {
		return std::make_tuple(jule::new_ref<_1191dcd40_SymbolTable>(),_9223_errors);
	}
	jule::Ref<_1191dcd40_SymbolTable> _9913_table = _9214_pkg->_field_files[0LL];
	return std::make_tuple(_9913_table,nullptr);
}



inline void _104b4ffd0_init(void) {
	_104b4ffd0_BUILTIN_FN_OUT->_field_caller=_104b4ffd0_builtin_caller_out;
	_104b4ffd0_BUILTIN_FN_OUTLN->_field_caller=_104b4ffd0_builtin_caller_outln;
	_104b4ffd0_BUILTIN_FN_NEW->_field_caller=_104b4ffd0_builtin_caller_new;
	_104b4ffd0_BUILTIN_FN_REAL->_field_caller=_104b4ffd0_builtin_caller_real;
	_104b4ffd0_BUILTIN_FN_DROP->_field_caller=_104b4ffd0_builtin_caller_drop;
	_104b4ffd0_BUILTIN_FN_PANIC->_field_caller=_104b4ffd0_builtin_caller_panic;
	_104b4ffd0_BUILTIN_FN_MAKE->_field_caller=_104b4ffd0_builtin_caller_make;
	_104b4ffd0_BUILTIN_FN_APPEND->_field_caller=_104b4ffd0_builtin_caller_append;
	_104b4ffd0_BUILTIN_FN_COPY->_field_caller=_104b4ffd0_builtin_caller_copy;
	_104b4ffd0_BUILTIN_FN_RECOVER->_field_caller=_104b4ffd0_builtin_caller_recover;
	_104b4ffd0_BUILTIN_FN_CLONE->_field_caller=_104b4ffd0_builtin_caller_clone;
	_104b4ffd0_BUILTIN_FN_STD_MEM_SIZE_OF->_field_caller=_104b4ffd0_builtin_caller_std_mem_size_of;
	_104b4ffd0_BUILTIN_FN_STD_MEM_ALIGN_OF->_field_caller=_104b4ffd0_builtin_caller_std_mem_align_of;
	jule::Ref<_1037649f0_Fn> _9113_error_method = _104b4ffd0_BUILTIN_TRAIT_ERROR->_method_find_method(jule::Str("error", 5));
	jule::Ref<_1037649f0_FnIns> _9213_error_method_ins = _9113_error_method->_method_instance();
	_9213_error_method_ins->_field_result=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("str", 3))));
	_9213_error_method_ins->_field_caller=_104b4ffd0_builtin_caller_common;
	_9113_error_method->_method_append_instance(_9213_error_method_ins);
}



inline jule::Ref<_1037649f0_FnIns> _104b4ffd0_find_builtin_fn(jule::Str _9820_ident) {
	{
		auto _match_expr{ _9820_ident };
		if (!((jule::Str("out", 3)) == _match_expr)) { goto _case_end_4390943712; }
		_case_begin_4390943712:;
		{
			return _104b4ffd0_BUILTIN_FN_OUT;
		}
		goto _match_end_4390941520;
		_case_end_4390943712:;
		if (!((jule::Str("outln", 5)) == _match_expr)) { goto _case_end_4390944288; }
		_case_begin_4390944288:;
		{
			return _104b4ffd0_BUILTIN_FN_OUTLN;
		}
		goto _match_end_4390941520;
		_case_end_4390944288:;
		if (!((jule::Str("new", 3)) == _match_expr)) { goto _case_end_4390943296; }
		_case_begin_4390943296:;
		{
			return _104b4ffd0_BUILTIN_FN_NEW;
		}
		goto _match_end_4390941520;
		_case_end_4390943296:;
		if (!((jule::Str("real", 4)) == _match_expr)) { goto _case_end_4390943504; }
		_case_begin_4390943504:;
		{
			return _104b4ffd0_BUILTIN_FN_REAL;
		}
		goto _match_end_4390941520;
		_case_end_4390943504:;
		if (!((jule::Str("drop", 4)) == _match_expr)) { goto _case_end_4390943952; }
		_case_begin_4390943952:;
		{
			return _104b4ffd0_BUILTIN_FN_DROP;
		}
		goto _match_end_4390941520;
		_case_end_4390943952:;
		if (!((jule::Str("panic", 5)) == _match_expr)) { goto _case_end_4390944064; }
		_case_begin_4390944064:;
		{
			return _104b4ffd0_BUILTIN_FN_PANIC;
		}
		goto _match_end_4390941520;
		_case_end_4390944064:;
		if (!((jule::Str("make", 4)) == _match_expr)) { goto _case_end_4390942896; }
		_case_begin_4390942896:;
		{
			return _104b4ffd0_BUILTIN_FN_MAKE;
		}
		goto _match_end_4390941520;
		_case_end_4390942896:;
		if (!((jule::Str("append", 6)) == _match_expr)) { goto _case_end_4390943008; }
		_case_begin_4390943008:;
		{
			return _104b4ffd0_BUILTIN_FN_APPEND;
		}
		goto _match_end_4390941520;
		_case_end_4390943008:;
		if (!((jule::Str("copy", 4)) == _match_expr)) { goto _case_end_4390943120; }
		_case_begin_4390943120:;
		{
			return _104b4ffd0_BUILTIN_FN_COPY;
		}
		goto _match_end_4390941520;
		_case_end_4390943120:;
		if (!((jule::Str("recover", 7)) == _match_expr)) { goto _case_end_4390942368; }
		_case_begin_4390942368:;
		{
			return _104b4ffd0_BUILTIN_FN_RECOVER;
		}
		goto _match_end_4390941520;
		_case_end_4390942368:;
		if (!((jule::Str("clone", 5)) == _match_expr)) { goto _case_end_4390942480; }
		_case_begin_4390942480:;
		{
			return _104b4ffd0_BUILTIN_FN_CLONE;
		}
		goto _match_end_4390941520;
		_case_end_4390942480:;
		_case_begin_4390941984:;
		{
			return jule::new_ref<_1037649f0_FnIns>();
		}
		goto _match_end_4390941520;
		_case_end_4390941984:;
		_match_end_4390941520:;
	}
}



inline jule::Ref<_104a21a10_TypeAlias> _104b4ffd0_find_builtin_type_alias(jule::Str _11528_ident) {
	{
		auto _match_expr{ _11528_ident };
		if (!((jule::Str("byte", 4)) == _match_expr)) { goto _case_end_4390952480; }
		_case_begin_4390952480:;
		{
			return _104b4ffd0_BUILTIN_TYPE_ALIAS_BYTE;
		}
		goto _match_end_4390949936;
		_case_end_4390952480:;
		if (!((jule::Str("rune", 4)) == _match_expr)) { goto _case_end_4390951488; }
		_case_begin_4390951488:;
		{
			return _104b4ffd0_BUILTIN_TYPE_ALIAS_RUNE;
		}
		goto _match_end_4390949936;
		_case_end_4390951488:;
		_case_begin_4390950288:;
		{
			return jule::new_ref<_104a21a10_TypeAlias>();
		}
		goto _match_end_4390949936;
		_case_end_4390950288:;
		_match_end_4390949936:;
	}
}



inline jule::Ref<_1036e5da0_Trait> _104b4ffd0_find_builtin_trait(jule::Str _12323_ident) {
	{
		auto _match_expr{ _12323_ident };
		if (!((jule::Str("Error", 5)) == _match_expr)) { goto _case_end_4390953552; }
		_case_begin_4390953552:;
		{
			return _104b4ffd0_BUILTIN_TRAIT_ERROR;
		}
		goto _match_end_4390951696;
		_case_end_4390953552:;
		_case_begin_4390953088:;
		{
			return jule::new_ref<_1036e5da0_Trait>();
		}
		goto _match_end_4390951696;
		_case_end_4390953088:;
		_match_end_4390951696:;
	}
}



inline jule::Any _104b4ffd0_find_builtin_def(jule::Str _13021_ident) {
	jule::Ref<_1037649f0_FnIns> _13113_f = _104b4ffd0_find_builtin_fn(_13021_ident);
	if (jule::real(_13113_f)) {
		return jule::Any(_13113_f);
	}
	jule::Ref<_104a21a10_TypeAlias> _13613_ta = _104b4ffd0_find_builtin_type_alias(_13021_ident);
	if (jule::real(_13613_ta)) {
		return jule::Any(_13613_ta);
	}
	jule::Ref<_1036e5da0_Trait> _14113_t = _104b4ffd0_find_builtin_trait(_13021_ident);
	if (jule::real(_14113_t)) {
		return jule::Any(_14113_t);
	}
	return jule::Any(nullptr);
}



inline jule::Any _104b4ffd0_find_builtin_def_std_mem(jule::Str _14929_ident) {
	{
		auto _match_expr{ _14929_ident };
		if (!((jule::Str("size_of", 7)) == _match_expr)) { goto _case_end_4390963200; }
		_case_begin_4390963200:;
		{
			return jule::Any(_104b4ffd0_BUILTIN_FN_STD_MEM_SIZE_OF);
		}
		goto _match_end_4390960064;
		_case_end_4390963200:;
		if (!((jule::Str("align_of", 8)) == _match_expr)) { goto _case_end_4390963760; }
		_case_begin_4390963760:;
		{
			return jule::Any(_104b4ffd0_BUILTIN_FN_STD_MEM_ALIGN_OF);
		}
		goto _match_end_4390960064;
		_case_end_4390963760:;
		_case_begin_4390961600:;
		{
			return jule::Any(nullptr);
		}
		goto _match_end_4390960064;
		_case_end_4390961600:;
		_match_end_4390960064:;
	}
}



inline jule::Any _104b4ffd0_find_package_builtin_def(jule::Str _15729_link_path,jule::Str _15745_ident) {
	{
		auto _match_expr{ _15729_link_path };
		if (!((jule::Str("std::mem", 8)) == _match_expr)) { goto _case_end_4390967280; }
		_case_begin_4390967280:;
		{
			return _104b4ffd0_find_builtin_def_std_mem(_15745_ident);
		}
		goto _match_end_4390965536;
		_case_end_4390967280:;
		_case_begin_4390965936:;
		{
			return jule::Any(nullptr);
		}
		goto _match_end_4390965536;
		_case_end_4390965936:;
		_match_end_4390965536:;
	}
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_common_plain(jule::Ref<_1191dc300_Eval> _16436_e,jule::Ref<_1487f5920_FnCallExpr> _16450_fc,jule::Ref<_1191dc300_Data> _16471_d) {
	jule::Ref<_1037649f0_FnIns> _16513_f = _16471_d->_field_kind->_method_fnc();
	_1044463d0_FnCallArgChecker _16713_fcac = _1044463d0_FnCallArgChecker(_16436_e,_16450_fc->_field_args,_16450_fc->_field_token,_16513_f,false,jule::Slice<jule::Any>());
	_16713_fcac._method_check();
	jule::Ref<_11911f320_FnCallExprModel> _17613_model = jule::new_struct<_11911f320_FnCallExprModel>(new( std::nothrow ) _11911f320_FnCallExprModel(_16513_f,_16450_fc->_field_concurrent,_16471_d->_field_model,_16713_fcac._field_arg_models));
	if ((!(jule::real(_16513_f->_field_result)))) {
		_16471_d=_1191dc300_build_void_data();
	} else {
		_16471_d=jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(_16513_f->_field_result,jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
	}
	_16471_d->_field_model=jule::Any(_17613_model);
	return _16471_d;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_common(jule::Ref<_1191dc300_Eval> _19530_e,jule::Ref<_1487f5920_FnCallExpr> _19544_fc,jule::Ref<_1191dc300_Data> _19565_d) {
	if (_19544_fc->_field_generics.len() > 0LL) {
		_19530_e->_method_push_err(_19544_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	return _104b4ffd0_builtin_caller_common_plain(_19530_e,_19544_fc,_19565_d);
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_common_mut(jule::Ref<_1191dc300_Eval> _20334_e,jule::Ref<_1487f5920_FnCallExpr> _20348_fc,jule::Ref<_1191dc300_Data> _20369_d) {
	if ((!(_20369_d->_field_mutable))) {
		_20334_e->_method_push_err(_20348_fc->_field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>({}));
	}
	return _104b4ffd0_builtin_caller_common(_20334_e,_20348_fc,_20369_d);
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_out(jule::Ref<_1191dc300_Eval> _21027_e,jule::Ref<_1487f5920_FnCallExpr> _21041_fc,jule::Ref<_1191dc300_Data> ) {
	if (_21041_fc->_field_generics.len() > 0LL) {
		_21027_e->_method_push_err(_21041_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_21041_fc->_field_args.len() < 1LL) {
		_21027_e->_method_push_err(_21041_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_21041_fc->_field_args.len() > 1LL) {
		_21027_e->_method_push_err(_21041_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _22213_expr = _21027_e->_method_eval_expr(_21041_fc->_field_args[0LL]);
	if ((!(jule::real(_22213_expr)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_22213_expr->_method_is_void() || jule::real(_22213_expr->_field_kind->_method_fnc())) {
		_21027_e->_method_push_err(_21041_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_1191dc300_Data> _23213_d = _1191dc300_build_void_data();
	_23213_d->_field_model=jule::Any(jule::new_struct<_11911f320_BuiltinOutCallExprModel>(new( std::nothrow ) _11911f320_BuiltinOutCallExprModel(_22213_expr->_field_model)));
	return _23213_d;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_outln(jule::Ref<_1191dc300_Eval> _23729_e,jule::Ref<_1487f5920_FnCallExpr> _23743_fc,jule::Ref<_1191dc300_Data> ) {
	jule::Ref<_1191dc300_Data> _23813_d = _104b4ffd0_builtin_caller_out(_23729_e,_23743_fc,jule::new_ref<_1191dc300_Data>());
	if ((!(jule::real(_23813_d)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	_23813_d->_field_model=jule::Any(jule::new_struct<_11911f320_BuiltinOutlnCallExprModel>(new( std::nothrow ) _11911f320_BuiltinOutlnCallExprModel(_23813_d->_field_model.operator jule::Ref<_11911f320_BuiltinOutCallExprModel>()->_field_expr)));
	return _23813_d;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_new(jule::Ref<_1191dc300_Eval> _24927_e,jule::Ref<_1487f5920_FnCallExpr> _24941_fc,jule::Ref<_1191dc300_Data> _24962_d) {
	if (_24941_fc->_field_generics.len() > 0LL) {
		_24927_e->_method_push_err(_24941_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_24941_fc->_field_args.len() < 1LL) {
		_24927_e->_method_push_err(_24941_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type", 4))}));
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_24941_fc->_field_args.len() > 2LL) {
		_24927_e->_method_push_err(_24941_fc->_field_args[2LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _26113_t = _24927_e->_method_eval_expr_kind(_24941_fc->_field_args[0LL]->_field_kind);
	if ((!(jule::real(_26113_t)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if ((!(_26113_t->_field_decl))) {
		_24927_e->_method_push_err(_24941_fc->_field_args[0LL]->_field_token,jule::Str("invalid data-type", 17),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	if ((!(_104a21a10_is_valid_for_ref(_26113_t->_field_kind)))) {
		jule::Ref<_1037370d0_StructIns> _27217_s = _26113_t->_field_kind->_method_strct();
		if ((jule::real(_27217_s) && jule::real(_27217_s->_field_decl)) && _27217_s->_field_decl->_field_cpp_linked) {
			_24927_e->_method_push_err(_24941_fc->_field_args[0LL]->_field_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>({}));
		} else {
			_24927_e->_method_push_err(_24941_fc->_field_args[0LL]->_field_token,jule::Str("invalid data-type", 17),jule::Slice<jule::Any>({}));
		}
		return jule::new_ref<_1191dc300_Data>();
	}
	_24962_d->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),jule::new_struct<_104a21a10_Ref>(new( std::nothrow ) _104a21a10_Ref(_26113_t->_field_kind->_method_clone()))));
	if (_24941_fc->_field_args.len() == 2LL) {
		jule::Ref<_1191dc300_Data> _28417_init = _24927_e->_field_s->_method_evalp(_24941_fc->_field_args[1LL],_24927_e->_field_lookup,_26113_t->_field_kind);
		if (jule::real(_28417_init)) {
			_26113_t->_field_mutable=true;
			_104180810_check_mut(_24927_e->_field_s,_26113_t,_28417_init,_24941_fc->_field_args[1LL]->_field_token);
			_24927_e->_field_s->_method_check_assign_type(_26113_t->_field_kind,_28417_init,_24941_fc->_field_args[1LL]->_field_token,false);
			if (jule::real(_28417_init->_field_kind->_method_ref())) {
				_28417_init->_field_model=jule::Any(jule::new_struct<_11911f320_ExplicitDerefExprModel>(new( std::nothrow ) _11911f320_ExplicitDerefExprModel(_28417_init->_field_model)));
			}
			_24962_d->_field_model=jule::Any(jule::new_struct<_11911f320_BuiltinNewCallExprModel>(new( std::nothrow ) _11911f320_BuiltinNewCallExprModel(_26113_t->_field_kind,_28417_init->_field_model)));
		}
	} else {
		_24962_d->_field_model=jule::Any(jule::new_struct<_11911f320_BuiltinNewCallExprModel>(new( std::nothrow ) _11911f320_BuiltinNewCallExprModel(_26113_t->_field_kind,jule::Any())));
	}
	return _24962_d;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_real(jule::Ref<_1191dc300_Eval> _30828_e,jule::Ref<_1487f5920_FnCallExpr> _30842_fc,jule::Ref<_1191dc300_Data> _30863_d) {
	if (_30842_fc->_field_generics.len() > 0LL) {
		_30828_e->_method_push_err(_30842_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_30842_fc->_field_args.len() < 1LL) {
		_30828_e->_method_push_err(_30842_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("ref", 3))}));
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_30842_fc->_field_args.len() > 1LL) {
		_30828_e->_method_push_err(_30842_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _32013_ref = _30828_e->_method_eval_expr(_30842_fc->_field_args[0LL]);
	if ((!(jule::real(_32013_ref)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if ((!(jule::real(_32013_ref->_field_kind->_method_ref())))) {
		_30828_e->_method_push_err(_30842_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		_30828_e->_method_push_suggestion(jule::Str("expression must be reference type", 33),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	_30863_d->_field_kind=_104b4ffd0_BUILTIN_FN_REAL->_field_result;
	_30863_d->_field_model=jule::Any(jule::new_struct<_11911f320_BuiltinRealCallExprModel>(new( std::nothrow ) _11911f320_BuiltinRealCallExprModel(_32013_ref->_field_model)));
	return _30863_d;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_drop(jule::Ref<_1191dc300_Eval> _33628_e,jule::Ref<_1487f5920_FnCallExpr> _33642_fc,jule::Ref<_1191dc300_Data> ) {
	if (_33642_fc->_field_generics.len() > 0LL) {
		_33628_e->_method_push_err(_33642_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_33642_fc->_field_args.len() < 1LL) {
		_33628_e->_method_push_err(_33642_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("ref", 3))}));
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_33642_fc->_field_args.len() > 1LL) {
		_33628_e->_method_push_err(_33642_fc->_field_args[2LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _34813_ref = _33628_e->_method_eval_expr(_33642_fc->_field_args[0LL]);
	if ((!(jule::real(_34813_ref)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if ((!(jule::real(_34813_ref->_field_kind->_method_ref())))) {
		_33628_e->_method_push_err(_33642_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		_33628_e->_method_push_suggestion(jule::Str("expression must be reference type", 33),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	_104180810_check_mut(_33628_e->_field_s,_34813_ref,jule::new_ref<_1191dc300_Data>(),_33642_fc->_field_args[0LL]->_field_token);
	jule::Ref<_1191dc300_Data> _36113_d = _1191dc300_build_void_data();
	_36113_d->_field_model=jule::Any(jule::new_struct<_11911f320_BuiltinDropCallExprModel>(new( std::nothrow ) _11911f320_BuiltinDropCallExprModel(_34813_ref->_field_model)));
	return _36113_d;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_panic(jule::Ref<_1191dc300_Eval> _36629_e,jule::Ref<_1487f5920_FnCallExpr> _36643_fc,jule::Ref<_1191dc300_Data> ) {
	if (_36643_fc->_field_generics.len() > 0LL) {
		_36629_e->_method_push_err(_36643_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_36643_fc->_field_args.len() < 1LL) {
		_36629_e->_method_push_err(_36643_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("error", 5))}));
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_36643_fc->_field_args.len() > 1LL) {
		_36629_e->_method_push_err(_36643_fc->_field_args[2LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _37813_expr = _36629_e->_method_eval_expr(_36643_fc->_field_args[0LL]);
	if ((!(jule::real(_37813_expr)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if (jule::real(_37813_expr->_field_kind->_method_strct())) {
		jule::Ref<_1037370d0_StructIns> _38413_s = _37813_expr->_field_kind->_method_strct();
		if (_38413_s->_field_decl->_method_is_implements(_104b4ffd0_BUILTIN_TRAIT_ERROR)) {
			_37813_expr->_field_cast_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104b4ffd0_BUILTIN_TRAIT_ERROR));
			_1191dc300_apply_cast_kind(_37813_expr);
		}
	}
	jule::Ref<_1191dc300_Data> _39313_d = _1191dc300_build_void_data();
	_39313_d->_field_model=jule::Any(jule::new_struct<_11911f320_BuiltinPanicCallExprModel>(new( std::nothrow ) _11911f320_BuiltinPanicCallExprModel(_37813_expr->_field_model)));
	return _39313_d;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_make(jule::Ref<_1191dc300_Eval> _39828_e,jule::Ref<_1487f5920_FnCallExpr> _39842_fc,jule::Ref<_1191dc300_Data> _39863_d) {
	if (_39842_fc->_field_generics.len() > 0LL) {
		_39828_e->_method_push_err(_39842_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_39842_fc->_field_args.len() < 2LL) {
		if (_39842_fc->_field_args.len() == 1LL) {
			_39828_e->_method_push_err(_39842_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("size", 4))}));
			return jule::new_ref<_1191dc300_Data>();
		}
		_39828_e->_method_push_err(_39842_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type, size", 10))}));
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_39842_fc->_field_args.len() > 3LL) {
		_39828_e->_method_push_err(_39842_fc->_field_args[3LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _41413_t = _39828_e->_method_eval_expr_kind(_39842_fc->_field_args[0LL]->_field_kind);
	if ((!(jule::real(_41413_t)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if ((!(_41413_t->_field_decl)) || (!(jule::real(_41413_t->_field_kind->_method_slc())))) {
		_39828_e->_method_push_err(_39842_fc->_field_args[0LL]->_field_token,jule::Str("invalid data-type", 17),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	_39863_d->_field_kind=_41413_t->_field_kind;
	jule::Ref<_1191dc300_Data> _42613_len = _39828_e->_field_s->_method_evalp(_39842_fc->_field_args[1LL],_39828_e->_field_lookup,_41413_t->_field_kind);
	if ((!(jule::real(_42613_len)))) {
		return _39863_d;
	}
	_39828_e->_method_check_integer_indexing_by_data(_42613_len,_39842_fc->_field_args[1LL]->_field_token);
	if (_39842_fc->_field_args.len() == 3LL) {
		jule::Ref<_1191dc300_Data> _43417_cap = _39828_e->_field_s->_method_evalp(_39842_fc->_field_args[2LL],_39828_e->_field_lookup,_41413_t->_field_kind);
		if ((!(jule::real(_43417_cap)))) {
			return _39863_d;
		}
		_39828_e->_method_check_integer_indexing_by_data(_43417_cap,_39842_fc->_field_args[2LL]->_field_token);
		_39863_d->_field_model=jule::Any(jule::new_struct<_11911f320_BuiltinMakeCallExprModel>(new( std::nothrow ) _11911f320_BuiltinMakeCallExprModel(_41413_t->_field_kind,_42613_len->_field_model,_43417_cap->_field_model)));
	} else {
		_39863_d->_field_model=jule::Any(jule::new_struct<_11911f320_BuiltinMakeCallExprModel>(new( std::nothrow ) _11911f320_BuiltinMakeCallExprModel(_41413_t->_field_kind,_42613_len->_field_model,jule::Any())));
	}
	return _39863_d;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_append(jule::Ref<_1191dc300_Eval> _45530_e,jule::Ref<_1487f5920_FnCallExpr> _45544_fc,jule::Ref<_1191dc300_Data> _45565_d) {
	if (_45544_fc->_field_generics.len() > 0LL) {
		_45530_e->_method_push_err(_45544_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_45544_fc->_field_args.len() < 2LL) {
		if (_45544_fc->_field_args.len() == 1LL) {
			_45530_e->_method_push_err(_45544_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return jule::new_ref<_1191dc300_Data>();
		}
		_45530_e->_method_push_err(_45544_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_1191dc300_Data> _46813_t = _45530_e->_method_eval_expr(_45544_fc->_field_args[0LL]);
	if ((!(jule::real(_46813_t)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Bool _47313_ref = false;
	if (jule::real(_46813_t->_field_kind->_method_ref())) {
		_46813_t->_field_kind=_46813_t->_field_kind->_method_ref()->_field_elem;
		_47313_ref=true;
	}
	if ((!(jule::real(_46813_t->_field_kind->_method_slc())))) {
		_45530_e->_method_push_err(_45544_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Ref<_1037649f0_FnIns> _48413_f = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),true,jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str())),_46813_t->_field_kind->_method_clone())),jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),true,true,jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str())),_46813_t->_field_kind->_method_slc()->_field_elem->_method_clone()))}),_46813_t->_field_kind->_method_clone(),jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common_plain,jule::Bool(),jule::Bool()));
	_45565_d->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_48413_f));
	_45565_d->_field_model=jule::Any(jule::new_struct<_11911f320_CommonIdentExprModel>(new( std::nothrow ) _11911f320_CommonIdentExprModel(jule::Str("append", 6))));
	_45565_d=_104b4ffd0_builtin_caller_common_plain(_45530_e,_45544_fc,_45565_d);
	if (jule::real(_45565_d)) {
		jule::Ref<_11911f320_FnCallExprModel> _50817_model = _45565_d->_field_model.operator jule::Ref<_11911f320_FnCallExprModel>();
		if (_47313_ref) {
			_50817_model->_field_args[0LL]=jule::Any(jule::new_struct<_11911f320_ExplicitDerefExprModel>(new( std::nothrow ) _11911f320_ExplicitDerefExprModel(_46813_t->_field_model)));
		}
		_45565_d->_field_model=jule::Any(jule::new_struct<_11911f320_BuiltinAppendCallExprModel>(new( std::nothrow ) _11911f320_BuiltinAppendCallExprModel(_50817_model->_field_args[0LL],_50817_model->_field_args[1LL])));
	}
	return _45565_d;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_copy(jule::Ref<_1191dc300_Eval> _52228_e,jule::Ref<_1487f5920_FnCallExpr> _52242_fc,jule::Ref<_1191dc300_Data> _52263_d) {
	if (_52242_fc->_field_generics.len() > 0LL) {
		_52228_e->_method_push_err(_52242_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_52242_fc->_field_args.len() < 2LL) {
		if (_52242_fc->_field_args.len() == 1LL) {
			_52228_e->_method_push_err(_52242_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return jule::new_ref<_1191dc300_Data>();
		}
		_52228_e->_method_push_err(_52242_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_52242_fc->_field_args.len() > 2LL) {
		_52228_e->_method_push_err(_52242_fc->_field_args[2LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _53813_t = _52228_e->_method_eval_expr(_52242_fc->_field_args[0LL]);
	if ((!(jule::real(_53813_t)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Bool _54313_ref = false;
	if (jule::real(_53813_t->_field_kind->_method_ref())) {
		_53813_t->_field_kind=_53813_t->_field_kind->_method_ref()->_field_elem;
		_54313_ref=false;
	}
	if ((!(jule::real(_53813_t->_field_kind->_method_slc())))) {
		_52228_e->_method_push_err(_52242_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	if ((!(_53813_t->_field_mutable))) {
		_52228_e->_method_push_err(_52242_fc->_field_args[0LL]->_field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1037649f0_FnIns> _55813_f = jule::new_struct<_1037649f0_FnIns>(new( std::nothrow ) _1037649f0_FnIns(jule::Ref<_1037370d0_StructIns>(),jule::Ref<_1037649f0_Fn>(),jule::Slice<jule::Ref<_104a21a10_TypeKind>>(),jule::Slice<jule::Ref<_1037649f0_ParamIns>>({jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param()),_53813_t->_field_kind->_method_clone())),jule::new_struct<_1037649f0_ParamIns>(new( std::nothrow ) _1037649f0_ParamIns(jule::new_struct<_1037649f0_Param>(new( std::nothrow ) _1037649f0_Param(_108e15ff0_Token(),true,jule::Bool(),jule::Bool(),jule::Ref<_104a21a10_TypeSymbol>(),jule::Str())),_53813_t->_field_kind->_method_clone()))}),_104b4ffd0_BUILTIN_FN_COPY->_field_result,jule::Ref<_104180810_Scope>(),jule::Ref<_1036da950_ReferenceStack>(),jule::Ref<_1036da950_ReferenceStack>(),_104b4ffd0_builtin_caller_common_plain,jule::Bool(),jule::Bool()));
	_52263_d->_field_kind=jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_55813_f));
	_52263_d->_field_model=jule::Any(jule::new_struct<_11911f320_CommonIdentExprModel>(new( std::nothrow ) _11911f320_CommonIdentExprModel(jule::Str("copy", 4))));
	_52263_d=_104b4ffd0_builtin_caller_common_plain(_52228_e,_52242_fc,_52263_d);
	if (jule::real(_52263_d) && _54313_ref) {
		_52263_d->_field_model.operator jule::Ref<_11911f320_FnCallExprModel>()->_field_args[0LL]=jule::Any(jule::new_struct<_11911f320_ExplicitDerefExprModel>(new( std::nothrow ) _11911f320_ExplicitDerefExprModel(_53813_t->_field_model)));
	}
	return _52263_d;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_recover(jule::Ref<_1191dc300_Eval> _58731_e,jule::Ref<_1487f5920_FnCallExpr> _58745_fc,jule::Ref<_1191dc300_Data> ) {
	if (_58745_fc->_field_generics.len() > 0LL) {
		_58731_e->_method_push_err(_58745_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	
	if (_58745_fc->_field_args.len() < 1LL) {
		_58731_e->_method_push_err(_58745_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("handler", 7))}));
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_58745_fc->_field_args.len() > 1LL) {
		_58731_e->_method_push_err(_58745_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _60113_t = _58731_e->_method_eval_expr(_58745_fc->_field_args[0LL]);
	if ((!(jule::real(_60113_t)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	if ((!(jule::real(_60113_t->_field_kind->_method_fnc())))) {
		_58731_e->_method_push_err(_58745_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Str _6119_tkind = _60113_t->_field_kind->_method_fnc()->_method_to_str();
	if (_6119_tkind != jule::Str("fn(Error)", 9)) {
		_58731_e->_method_push_err(_58745_fc->_field_args[0LL]->_field_token,jule::Str("@ and @ data-types are not compatible", 37),jule::Slice<jule::Any>({jule::Any(_6119_tkind),jule::Any(jule::Str("fn(Error)", 9))}));
	}
	jule::Ref<_1191dc300_Data> _61613_d = _1191dc300_build_void_data();
	_61613_d->_field_kind=_60113_t->_field_kind->_method_clone();
	_61613_d->_field_model=jule::Any(jule::new_struct<_104180810_Recover>(new( std::nothrow ) _104180810_Recover(jule::Ref<_1037649f0_FnIns>(),_60113_t->_field_model,jule::Ref<_104180810_Scope>(),jule::Ref<_1037649f0_FnIns>())));
	return _61613_d;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_clone(jule::Ref<_1191dc300_Eval> _62429_e,jule::Ref<_1487f5920_FnCallExpr> _62443_fc,jule::Ref<_1191dc300_Data> ) {
	if (_62443_fc->_field_generics.len() > 0LL) {
		_62429_e->_method_push_err(_62443_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	if (_62443_fc->_field_args.len() < 1LL) {
		_62429_e->_method_push_err(_62443_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return jule::new_ref<_1191dc300_Data>();
	}
	if (_62443_fc->_field_args.len() > 1LL) {
		_62429_e->_method_push_err(_62443_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _63713_d = _62429_e->_method_eval_expr_kind(_62443_fc->_field_args[0LL]->_field_kind);
	if ((!(jule::real(_63713_d)))) {
		return jule::new_ref<_1191dc300_Data>();
	}
	jule::Fn<void(jule::Ref<_104a21a10_TypeKind>)> _6429_check_kind = jule::Fn<void(jule::Ref<_104a21a10_TypeKind>)>([=](jule::Ref<_104a21a10_TypeKind> _64229_k) mutable -> void {
		{
			if (!((jule::real(_64229_k->_method_slc())))) { goto _case_end_4391455888; }
			_case_begin_4391455888:;
			{
				if ((!(_104a21a10_supports_cloning(_64229_k->_method_slc()->_field_elem)))) {
					_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("internal types of \"@\" is not supports cloning", 45),jule::Slice<jule::Any>({jule::Any(_64229_k->_method_to_str())}));
				}
			}
			goto _match_end_4391454880;
			_case_end_4391455888:;
			if (!((jule::real(_64229_k->_method_map())))) { goto _case_end_4391459024; }
			_case_begin_4391459024:;
			{
				if ((!(_104a21a10_supports_cloning(_64229_k->_method_map()->_field_key))) || _104a21a10_supports_cloning(_64229_k->_method_map()->_field_val)) {
					_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("internal types of \"@\" is not supports cloning", 45),jule::Slice<jule::Any>({jule::Any(_64229_k->_method_to_str())}));
				}
			}
			goto _match_end_4391454880;
			_case_end_4391459024:;
			if (!((jule::real(_64229_k->_method_arr())))) { goto _case_end_4391455344; }
			_case_begin_4391455344:;
			{
				if ((!(_104a21a10_supports_cloning(_64229_k->_method_arr()->_field_elem)))) {
					_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("internal types of \"@\" is not supports cloning", 45),jule::Slice<jule::Any>({jule::Any(_64229_k->_method_to_str())}));
				}
			}
			goto _match_end_4391454880;
			_case_end_4391455344:;
			if (!((jule::real(_64229_k->_method_ref())))) { goto _case_end_4391455456; }
			_case_begin_4391455456:;
			{
				if ((!(_104a21a10_supports_cloning(_64229_k->_method_ref()->_field_elem)))) {
					_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("internal types of \"@\" is not supports cloning", 45),jule::Slice<jule::Any>({jule::Any(_64229_k->_method_to_str())}));
				}
			}
			goto _match_end_4391454880;
			_case_end_4391455456:;
			if (!((jule::real(_64229_k->_method_strct())))) { goto _case_end_4391455568; }
			_case_begin_4391455568:;
			{
				jule::Ref<_1037370d0_StructIns> _66517_s = _63713_d->_field_kind->_method_strct();
				if ((!(_66517_s->_field_has_mut))) {
					_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("struct \"@\" is not breaks immutability, do not needs cloning", 59),jule::Slice<jule::Any>({jule::Any(_63713_d->_field_kind->_method_to_str())}));
				}
				if (((!(jule::real(_66517_s->_field_decl))) || _66517_s->_field_decl->_field_cpp_linked) || (!(_66517_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))))) {
					_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("type \"@\" is not derives: @", 26),jule::Slice<jule::Any>({jule::Any(_63713_d->_field_kind->_method_to_str()),jule::Any(jule::Str("Clone", 5))}));
				}
			}
			goto _match_end_4391454880;
			_case_end_4391455568:;
			_case_begin_4391455040:;
			{
				_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("type \"@\" is not derives: @", 26),jule::Slice<jule::Any>({jule::Any(_63713_d->_field_kind->_method_to_str()),jule::Any(jule::Str("Clone", 5))}));
			}
			goto _match_end_4391454880;
			_case_end_4391455040:;
			_match_end_4391454880:;
		}
	});
	{
		if (!(((!(_63713_d->_field_lvalue))))) { goto _case_end_4391477792; }
		_case_begin_4391477792:;
		{
			_62429_e->_method_push_err(_62443_fc->_field_args[0LL]->_field_token,jule::Str("non-lvalue expressions cannot be clone", 38),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4391477648;
		_case_end_4391477792:;
		if (!(((!(_104a21a10_supports_cloning(_63713_d->_field_kind)))))) { goto _case_end_4391477904; }
		_case_begin_4391477904:;
		{
			_6429_check_kind(_63713_d->_field_kind);
		}
		goto _match_end_4391477648;
		_case_end_4391477904:;
		_match_end_4391477648:;
	}
	_63713_d->_field_mutable=true;
	_63713_d->_field_model=jule::Any(jule::new_struct<_11911f320_BuiltinCloneCallExprModel>(new( std::nothrow ) _11911f320_BuiltinCloneCallExprModel(_63713_d->_field_model)));
	return _63713_d;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_std_mem_size_of(jule::Ref<_1191dc300_Eval> _69139_e,jule::Ref<_1487f5920_FnCallExpr> _69153_fc,jule::Ref<_1191dc300_Data> ) {
	if (_69153_fc->_field_generics.len() > 0LL) {
		_69139_e->_method_push_err(_69153_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _69513_result = jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("uint", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
	if (_69153_fc->_field_args.len() < 1LL) {
		_69139_e->_method_push_err(_69153_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _69513_result;
	}
	if (_69153_fc->_field_args.len() > 1LL) {
		_69139_e->_method_push_err(_69153_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _70713_d = _69139_e->_method_eval_expr_kind(_69153_fc->_field_args[0LL]->_field_kind);
	if ((!(jule::real(_70713_d)))) {
		return _69513_result;
	}
	_69513_result->_field_model=jule::Any(jule::new_struct<_11911f320_SizeofExprModel>(new( std::nothrow ) _11911f320_SizeofExprModel(_70713_d->_field_model)));
	return _69513_result;
}



inline jule::Ref<_1191dc300_Data> _104b4ffd0_builtin_caller_std_mem_align_of(jule::Ref<_1191dc300_Eval> _71640_e,jule::Ref<_1487f5920_FnCallExpr> _71654_fc,jule::Ref<_1191dc300_Data> ) {
	if (_71654_fc->_field_generics.len() > 0LL) {
		_71640_e->_method_push_err(_71654_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _72013_result = jule::new_struct<_1191dc300_Data>(new( std::nothrow ) _1191dc300_Data(jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104a21a10_build_prim_type(jule::Str("uint", 4)))),jule::Ref<_104a21a10_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_104c409b0_Const>()));
	if (_71654_fc->_field_args.len() < 1LL) {
		_71640_e->_method_push_err(_71654_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _72013_result;
	}
	if (_71654_fc->_field_args.len() > 1LL) {
		_71640_e->_method_push_err(_71654_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1191dc300_Data> _73213_d = _71640_e->_method_eval_expr_kind(_71654_fc->_field_args[0LL]->_field_kind);
	if ((!(jule::real(_73213_d)))) {
		return _72013_result;
	}
	_72013_result->_field_model=jule::Any(jule::new_struct<_11911f320_AlignofExprModel>(new( std::nothrow ) _11911f320_AlignofExprModel(_73213_d->_field_model)));
	return _72013_result;
}



inline jule::Bool _108dbe630_eval_directive_ident(jule::Str _625_ident) {
	if (_625_ident == jule::Str("", 0)) {
		return false;
	}
	{
		auto __julec_range_expr = _108e075a0_FLAGS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _108dbe630_flag = *__julec_range_begin;
			_iter_begin_4397089488:;
			{
				if (_108dbe630_flag == _625_ident) {
					return true;
				}
			}
			_iter_next_4397089488:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108dbe630_flag = *__julec_range_begin; goto _iter_begin_4397089488; }
			_iter_end_4397089488:;
		}
	}
	return false;
}



inline jule::Bool _108dbe630_eval_directive_part(jule::Str _2228_part) {
	jule::Bool _239_logical_not = _2228_part[0LL] == '!';
	if (_239_logical_not) {
		_2228_part=_2228_part.slice(1LL);
	}
	jule::Bool _2813_result = _108dbe630_eval_directive_ident(_2228_part);
	if (_239_logical_not) {
		_2813_result=(!(_2813_result));
	}
	return _2813_result;
}



inline jule::Slice<jule::Str> _108dbe630_split_operans(jule::Str _3718_op,jule::Str _3727_expr) {
	jule::Slice<jule::Str> _3813_parts = jule::Slice<jule::Str>::alloc(0LL,10LL);
	jule::Int _4013_range_n = 0LL;
	jule::Int _4113_i = 0LL;
	jule::Int _4213_last = 0LL;
	_iter_begin_4397097072:;
	if (!(_4113_i < (_3727_expr.len() - 1LL))) { goto _iter_end_4397097072; }
	{
		jule::U8 _4413_b = _3727_expr[static_cast<jule::Int>(_4113_i)];
		if (_4413_b == '(') {
			(_4013_range_n)++;
			goto _iter_next_4397097072;
		} else if (_4413_b == ')') {
			(_4013_range_n)--;
		}
		if (_4013_range_n > 0LL) {
			goto _iter_next_4397097072;
		}
		{
			auto _match_expr{ _3718_op };
			if (!((jule::Str("||", 2)) == _match_expr)) { goto _case_end_4397105568; }
			_case_begin_4397105568:;
			{
				if ((_4413_b == '|') && (_3727_expr[static_cast<jule::Int>(_4113_i + 1LL)] == '|')) {
					_3813_parts=jule::append(_3813_parts,jule::Slice<jule::Str>({_3727_expr.slice(static_cast<jule::Int>(_4213_last),static_cast<jule::Int>(_4113_i))}));
					_4213_last=static_cast<jule::Int>(_4113_i + 2LL);
				}
			}
			goto _match_end_4397103408;
			_case_end_4397105568:;
			if (!((jule::Str("&&", 2)) == _match_expr)) { goto _case_end_4397105680; }
			_case_begin_4397105680:;
			{
				if ((_4413_b == '&') && (_3727_expr[static_cast<jule::Int>(_4113_i + 1LL)] == '&')) {
					_3813_parts=jule::append(_3813_parts,jule::Slice<jule::Str>({_3727_expr.slice(static_cast<jule::Int>(_4213_last),static_cast<jule::Int>(_4113_i))}));
					_4213_last=static_cast<jule::Int>(_4113_i + 2LL);
				}
			}
			goto _match_end_4397103408;
			_case_end_4397105680:;
			_match_end_4397103408:;
		}
	}
	_iter_next_4397097072:;
	(_4113_i)++;
	goto _iter_begin_4397097072;
	_iter_end_4397097072:;
	if (_4213_last < _3727_expr.len()) {
		_3813_parts=jule::append(_3813_parts,jule::Slice<jule::Str>({_3727_expr.slice(static_cast<jule::Int>(_4213_last))}));
	} else {
		_3813_parts=jule::append(_3813_parts,jule::Slice<jule::Str>({jule::Str("", 0)}));
	}
	return _3813_parts;
}



inline jule::Bool _108dbe630_eval_directive_expr(jule::Str _8724_expr) {
	if (_8724_expr == jule::Str("", 0)) {
		return false;
	}
	jule::Bool _9213_result = false;
	jule::Slice<jule::Str> _949_logical_or_parts = _108dbe630_split_operans(jule::Str("||", 2),_8724_expr);
	{
		auto __julec_range_expr = _949_logical_or_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _108dbe630_part = *__julec_range_begin;
			_iter_begin_4397121744:;
			{
				if (_108dbe630_part == jule::Str("", 0)) {
					return false;
				}
				jule::Bool _10017_and = true;
				jule::Slice<jule::Str> _10113_logical_and_parts = _108dbe630_split_operans(jule::Str("&&", 2),_108dbe630_part);
				{
					auto __julec_range_expr = _10113_logical_and_parts;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Str _108dbe630_and_part = *__julec_range_begin;
						_iter_begin_4397126256:;
						{
							if (_108dbe630_and_part.find(jule::Str("(", 1)) != -1LL) {
								if (_108dbe630_and_part[static_cast<jule::Int>(_108dbe630_and_part.len() - 1LL)] != ')') {
									return false;
								}
								jule::Str _10721_expr = _108dbe630_and_part.slice(1LL,static_cast<jule::Int>(_108dbe630_and_part.len() - 1LL));
								_10017_and=_10017_and && _108dbe630_eval_directive_expr(_10721_expr);
							} else {
								_10017_and=_10017_and && _108dbe630_eval_directive_part(_108dbe630_and_part);
							}
						}
						_iter_next_4397126256:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _108dbe630_and_part = *__julec_range_begin; goto _iter_begin_4397126256; }
						_iter_end_4397126256:;
					}
				}
				_9213_result=_9213_result || _10017_and;
			}
			_iter_next_4397121744:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108dbe630_part = *__julec_range_begin; goto _iter_begin_4397121744; }
			_iter_end_4397121744:;
		}
	}
	return _9213_result;
}



inline void _108e075a0_set_os_flags(void) {
	{
		if (!((jule::Str("windows", 7)) == jule::Str("linux", 5))) { goto _case_end_4392953440; }
		_case_begin_4392953440:;
		{
			_108e075a0_FLAGS=jule::append(_108e075a0_FLAGS,jule::Slice<jule::Str>({jule::Str("windows", 7)}));
		}
		goto _match_end_4393236528;
		_case_end_4392953440:;
		if (!((jule::Str("linux", 5)) == jule::Str("linux", 5))) { goto _case_end_4393236624; }
		_case_begin_4393236624:;
		{
			_108e075a0_FLAGS=jule::append(_108e075a0_FLAGS,jule::Slice<jule::Str>({jule::Str("linux", 5)}));
		}
		goto _match_end_4393236528;
		_case_end_4393236624:;
		if (!((jule::Str("darwin", 6)) == jule::Str("linux", 5))) { goto _case_end_4393236736; }
		_case_begin_4393236736:;
		{
			_108e075a0_FLAGS=jule::append(_108e075a0_FLAGS,jule::Slice<jule::Str>({jule::Str("darwin", 6)}));
		}
		goto _match_end_4393236528;
		_case_end_4393236736:;
		_match_end_4393236528:;
	}
	if (_14903a5c0_is_unix(jule::Str("linux", 5))) {
		_108e075a0_FLAGS=jule::append(_108e075a0_FLAGS,jule::Slice<jule::Str>({jule::Str("unix", 4)}));
	}
}



inline void _108e075a0_set_arch_flags(void) {
	{
		if (!((jule::Str("i386", 4)) == jule::Str("amd64", 5))) { goto _case_end_4393238848; }
		_case_begin_4393238848:;
		{
			_108e075a0_FLAGS=jule::append(_108e075a0_FLAGS,jule::Slice<jule::Str>({jule::Str("i386", 4)}));
		}
		goto _match_end_4393241392;
		_case_end_4393238848:;
		if (!((jule::Str("amd64", 5)) == jule::Str("amd64", 5))) { goto _case_end_4393237664; }
		_case_begin_4393237664:;
		{
			_108e075a0_FLAGS=jule::append(_108e075a0_FLAGS,jule::Slice<jule::Str>({jule::Str("amd64", 5)}));
		}
		goto _match_end_4393241392;
		_case_end_4393237664:;
		if (!((jule::Str("arm64", 5)) == jule::Str("amd64", 5))) { goto _case_end_4393237776; }
		_case_begin_4393237776:;
		{
			_108e075a0_FLAGS=jule::append(_108e075a0_FLAGS,jule::Slice<jule::Str>({jule::Str("arm64", 5)}));
		}
		goto _match_end_4393241392;
		_case_end_4393237776:;
		_match_end_4393241392:;
	}
	if (_14903a5c0_is_64bit(jule::Str("amd64", 5))) {
		_108e075a0_FLAGS=jule::append(_108e075a0_FLAGS,jule::Slice<jule::Str>({jule::Str("64bit", 5)}));
	}
	if (_14903a5c0_is_32bit(jule::Str("amd64", 5))) {
		_108e075a0_FLAGS=jule::append(_108e075a0_FLAGS,jule::Slice<jule::Str>({jule::Str("32bit", 5)}));
	}
}



inline void _108e075a0_init(void) {
	_108e075a0_set_os_flags();
	_108e075a0_set_arch_flags();
}



inline void _108e14cb0_exit_err(jule::Str _2313_msg) {
	
	jule::outln(_2313_msg);
	_10868c730_exit(1LL);
}



inline jule::Slice<jule::U8> _108e14cb0_read_buff(jule::Str _3114_path) {
	jule::Slice<jule::U8> _3214_buffer;
	jule::Int _3222_err;
	std::tie(_3214_buffer,_3222_err) = _1487caab0_read_file(_3114_path);
	if (_3222_err != 0LLU) {
		_108e14cb0_exit_err(jule::Str("error: file cannot read", 23));
	}
	return _3214_buffer;
}



inline _1486379e0_Log _108e14cb0_flat_compiler_err(jule::Str _4122_text) {
	return _1486379e0_Log(1LLU,jule::Int(),jule::Int(),jule::Str(),_4122_text,jule::Str(),jule::Str());
}



inline std::tuple<jule::Slice<jule::Ref<_14877ba40_DirEntry>>,jule::Str> _108e14cb0_read_package_dirents(jule::Str _4925_path) {
	jule::Str _4951_err_msg = jule::Str();
	jule::Slice<jule::Ref<_14877ba40_DirEntry>> _5014_dirents;
	jule::Int _5023_err;
	std::tie(_5014_dirents,_5023_err) = _1089dc920_read_dir(_4925_path);
	if (_5023_err != 0LLU) {
		_4951_err_msg = jule::Str("connot read package directory: ", 31) + _4925_path;
		return std::make_tuple(nullptr,_4951_err_msg);
	}
	jule::Slice<jule::Ref<_14877ba40_DirEntry>> _5513_passed_dirents = nullptr;
	{
		auto __julec_range_expr = _5014_dirents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_14877ba40_DirEntry> _108e14cb0_dirent = *__julec_range_begin;
			_iter_begin_4389817232:;
			{
				jule::Str _5713_name = _108e14cb0_dirent->_field_name;
				if (_108e14cb0_dirent->_field_stat->_method_is_dir() || (!(_5713_name.has_suffix(jule::Str(".jule", 5))))) {
					goto _iter_next_4389817232;
				}
				_5513_passed_dirents=jule::append(_5513_passed_dirents,jule::Slice<jule::Ref<_14877ba40_DirEntry>>({_108e14cb0_dirent}));
			}
			_iter_next_4389817232:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e14cb0_dirent = *__julec_range_begin; goto _iter_begin_4389817232; }
			_iter_end_4389817232:;
		}
	}
	_4951_err_msg = jule::Str("", 0);
	return std::make_tuple(_5513_passed_dirents,_4951_err_msg);
}



inline jule::Str _108e14cb0_concat_all_parts(jule::Slice<jule::Str> _7121_parts) {
	jule::Str _7213_s = jule::Str("", 0);
	{
		auto __julec_range_expr = _7121_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _108e14cb0_part = *__julec_range_begin;
			_iter_begin_4389827408:;
			{
				_7213_s+=_108e14cb0_part;
			}
			_iter_next_4389827408:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e14cb0_part = *__julec_range_begin; goto _iter_begin_4389827408; }
			_iter_end_4389827408:;
		}
	}
	return _7213_s;
}



inline jule::Bool _108e14cb0_is_pass_build_directives(jule::Ref<_1487f02c0_Ast>& _8034_file) {
	{
		auto __julec_range_expr = _8034_file->_field_top_directives;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1487f5920_Directive> _108e14cb0_td = *__julec_range_begin;
			_iter_begin_4389830032:;
			{
				if (_108e14cb0_td->_field_tag != jule::Str("build", 5)) {
					goto _iter_next_4389830032;
				}
				jule::Str _8613_expr = _108e14cb0_concat_all_parts(_108e14cb0_td->_field_args);
				jule::Bool _8713_result = _108dbe630_eval_directive_expr(_8613_expr);
				if ((!(_8713_result))) {
					return false;
				}
			}
			_iter_next_4389830032:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108e14cb0_td = *__julec_range_begin; goto _iter_begin_4389830032; }
			_iter_end_4389830032:;
		}
	}
	return true;
}



inline void _108db2720_push_passes(jule::Ref<_119162660_Package> _10420_p,jule::Slice<jule::Str>& _10444_passes) {
	{
		auto __julec_range_expr = _10420_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _108db2720_f = *__julec_range_begin;
			_iter_begin_4389891552:;
			{
				_julec_label_push:;
				{
					auto __julec_range_expr = _108db2720_f->_field_passes;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						_1036da950_Pass _108db2720_pass = *__julec_range_begin;
						_iter_begin_4389893808:;
						{
							if (_108db2720_pass._field_text == jule::Str("", 0)) {
								goto _iter_next_4389893808;
							}
							{
								auto __julec_range_expr = _10444_passes;
								if (__julec_range_expr.begin() != __julec_range_expr.end()) {
									auto __julec_range_begin = __julec_range_expr.begin();
									const auto __julec_range_end = __julec_range_expr.end();
									jule::Str _108db2720_cpass = *__julec_range_begin;
									_iter_begin_4389896352:;
									{
										if (_108db2720_cpass == _108db2720_pass._field_text) {
											goto _iter_next_4389893808;
										}
									}
									_iter_next_4389896352:;
									++__julec_range_begin;
									if (__julec_range_begin != __julec_range_end) { _108db2720_cpass = *__julec_range_begin; goto _iter_begin_4389896352; }
									_iter_end_4389896352:;
								}
							}
							_10444_passes=jule::append(_10444_passes,jule::Slice<jule::Str>({_108db2720_pass._field_text}));
						}
						_iter_next_4389893808:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _108db2720_pass = *__julec_range_begin; goto _iter_begin_4389893808; }
						_iter_end_4389893808:;
					}
				}
			}
			_iter_next_4389891552:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108db2720_f = *__julec_range_begin; goto _iter_begin_4389891552; }
			_iter_end_4389891552:;
		}
	}
}



inline jule::Slice<jule::Str> _108db2720_get_all_unique_passes(jule::Ref<_119162660_Package> _12130_pkg,jule::Slice<jule::Ref<_119162660_ImportInfo>> _12155_uses) {
	jule::Slice<jule::Str> _12213_passes = nullptr;
	_108db2720_push_passes(_12130_pkg,_12213_passes);
	{
		auto __julec_range_expr = _12155_uses;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _108db2720_u = *__julec_range_begin;
			_iter_begin_4389903216:;
			{
				if ((!(_108db2720_u->_field_cpp_linked))) {
					_108db2720_push_passes(_108db2720_u->_field_package,_12213_passes);
				}
			}
			_iter_next_4389903216:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _108db2720_u = *__julec_range_begin; goto _iter_begin_4389903216; }
			_iter_end_4389903216:;
		}
	}
	return _12213_passes;
}



inline jule::Bool _1086aaa30_is_exist_0(jule::Slice<jule::Any> _3016_arr,jule::Ref<_1037649f0_FnIns> _3028_t) {
	{
		auto __julec_range_expr = _3016_arr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1086aaa30_ref = *__julec_range_begin;
			_iter_begin_4389995568:;
			{
				{
					auto _match_expr{ _1086aaa30_ref };
					if (!(_match_expr.type_is<jule::Ref<_1037649f0_FnIns>>())) { goto _case_end_4389997280; }
					_case_begin_4389997280:;
					{
						if ((_1086aaa30_ref.operator jule::Ref<_1037649f0_FnIns>()).alloc == (_3028_t).alloc) {
							return true;
						}
					}
					goto _match_end_4389996960;
					_case_end_4389997280:;
					_match_end_4389996960:;
				}
			}
			_iter_next_4389995568:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1086aaa30_ref = *__julec_range_begin; goto _iter_begin_4389995568; }
			_iter_end_4389995568:;
		}
	}
	return false;
}

inline jule::Bool _1086aaa30_is_exist_1(jule::Slice<jule::Any> _3016_arr,jule::Ref<_104598e40_Var> _3028_t) {
	{
		auto __julec_range_expr = _3016_arr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1086aaa30_ref = *__julec_range_begin;
			_iter_begin_4390003568:;
			{
				{
					auto _match_expr{ _1086aaa30_ref };
					if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4390005280; }
					_case_begin_4390005280:;
					{
						if ((_1086aaa30_ref.operator jule::Ref<_104598e40_Var>()).alloc == (_3028_t).alloc) {
							return true;
						}
					}
					goto _match_end_4390004960;
					_case_end_4390005280:;
					_match_end_4390004960:;
				}
			}
			_iter_next_4390003568:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1086aaa30_ref = *__julec_range_begin; goto _iter_begin_4390003568; }
			_iter_end_4390003568:;
		}
	}
	return false;
}

inline jule::Bool _1086aaa30_is_exist_2(jule::Slice<jule::Any> _3016_arr,jule::Ref<_1037370d0_StructIns> _3028_t) {
	{
		auto __julec_range_expr = _3016_arr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1086aaa30_ref = *__julec_range_begin;
			_iter_begin_4390011632:;
			{
				{
					auto _match_expr{ _1086aaa30_ref };
					if (!(_match_expr.type_is<jule::Ref<_1037370d0_StructIns>>())) { goto _case_end_4390013344; }
					_case_begin_4390013344:;
					{
						if ((_1086aaa30_ref.operator jule::Ref<_1037370d0_StructIns>()).alloc == (_3028_t).alloc) {
							return true;
						}
					}
					goto _match_end_4390013024;
					_case_end_4390013344:;
					_match_end_4390013024:;
				}
			}
			_iter_next_4390011632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1086aaa30_ref = *__julec_range_begin; goto _iter_begin_4390011632; }
			_iter_end_4390011632:;
		}
	}
	return false;
}

inline jule::Bool _1086aaa30_is_exist_3(jule::Slice<jule::Any> _3016_arr,jule::Ref<_1036e5da0_Trait> _3028_t) {
	{
		auto __julec_range_expr = _3016_arr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1086aaa30_ref = *__julec_range_begin;
			_iter_begin_4390019632:;
			{
				{
					auto _match_expr{ _1086aaa30_ref };
					if (!(_match_expr.type_is<jule::Ref<_1036e5da0_Trait>>())) { goto _case_end_4390021344; }
					_case_begin_4390021344:;
					{
						if ((_1086aaa30_ref.operator jule::Ref<_1036e5da0_Trait>()).alloc == (_3028_t).alloc) {
							return true;
						}
					}
					goto _match_end_4390021024;
					_case_end_4390021344:;
					_match_end_4390021024:;
				}
			}
			_iter_next_4390019632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1086aaa30_ref = *__julec_range_begin; goto _iter_begin_4390019632; }
			_iter_end_4390019632:;
		}
	}
	return false;
}



inline jule::Bool _1086aaa30_is_exist_ref(jule::Slice<jule::Any> _4321_refs,jule::Any _4334_ref) {
	{
		auto _match_expr{ _4334_ref };
		if (!(_match_expr.type_is<jule::Ref<_1037649f0_FnIns>>())) { goto _case_end_4389987632; }
		_case_begin_4389987632:;
		{
			return _1086aaa30_is_exist_0(_4321_refs,_4334_ref.operator jule::Ref<_1037649f0_FnIns>());
		}
		goto _match_end_4389986864;
		_case_end_4389987632:;
		if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4389987744; }
		_case_begin_4389987744:;
		{
			return _1086aaa30_is_exist_1(_4321_refs,_4334_ref.operator jule::Ref<_104598e40_Var>());
		}
		goto _match_end_4389986864;
		_case_end_4389987744:;
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_StructIns>>())) { goto _case_end_4389988848; }
		_case_begin_4389988848:;
		{
			return _1086aaa30_is_exist_2(_4321_refs,_4334_ref.operator jule::Ref<_1037370d0_StructIns>());
		}
		goto _match_end_4389986864;
		_case_end_4389988848:;
		if (!(_match_expr.type_is<jule::Ref<_1036e5da0_Trait>>())) { goto _case_end_4389988960; }
		_case_begin_4389988960:;
		{
			return _1086aaa30_is_exist_3(_4321_refs,_4334_ref.operator jule::Ref<_1036e5da0_Trait>());
		}
		goto _match_end_4389986864;
		_case_end_4389988960:;
		_case_begin_4389987088:;
		{
			return false;
		}
		goto _match_end_4389986864;
		_case_end_4389987088:;
		_match_end_4389986864:;
	}
}



inline jule::Bool _1086aaa30_is_dead(jule::Any _5416_ref) {
	jule::Bool _5428_dead = jule::Bool();
	if (_1086aaa30_is_exist_ref(_1086aaa30_deads,_5416_ref)) {
		_5428_dead = true;
		return _5428_dead;
	}
	{
		auto _match_expr{ _5416_ref };
		if (!(_match_expr.type_is<jule::Ref<_1037649f0_FnIns>>())) { goto _case_end_4390026592; }
		_case_begin_4390026592:;
		{
			if (_5416_ref.operator jule::Ref<_1037649f0_FnIns>()->_field_decl->_method_is_init()) {
				goto _match_end_4389988304;
			}
			goto _case_begin_4389999984;
		}
		goto _match_end_4389988304;
		_case_end_4390026592:;
		_case_begin_4389999984:;
		{
			if (_1086aaa30_is_exist_ref(jule::Slice<jule::Any>({_1086aaa30_current,_1086aaa30_main_current}),_5416_ref)) {
				_5428_dead = true;
				return _5428_dead;
			}
			if (_1086aaa30_is_exist_ref(_1086aaa30_checking,_5416_ref)) {
				_5428_dead = true;
				return _5428_dead;
			}
		}
		goto _match_end_4389988304;
		_case_end_4389999984:;
		_match_end_4389988304:;
	}
	jule::Any _7513_old = _1086aaa30_current;
	_1086aaa30_current=_5416_ref;
	jule::I64 _779_len = _1086aaa30_checking.len();
	_1086aaa30_checking=jule::append(_1086aaa30_checking,jule::Slice<jule::Any>({_5416_ref}));
	__JULE_DEFER({
		_1086aaa30_current=_7513_old;
		_1086aaa30_drop_ref(_1086aaa30_checking,_779_len);
	});
	{
		auto _match_expr{ _5416_ref };
		if (!(_match_expr.type_is<jule::Ref<_1037649f0_FnIns>>())) { goto _case_end_4390030624; }
		_case_begin_4390030624:;
		{
			_5428_dead = _1086aaa30_is_fn_dead(_5416_ref.operator jule::Ref<_1037649f0_FnIns>());
			return _5428_dead;
		}
		goto _match_end_4390028976;
		_case_end_4390030624:;
		if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4390030736; }
		_case_begin_4390030736:;
		{
			_5428_dead = _1086aaa30_is_var_dead(_5416_ref.operator jule::Ref<_104598e40_Var>());
			return _5428_dead;
		}
		goto _match_end_4390028976;
		_case_end_4390030736:;
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_StructIns>>())) { goto _case_end_4390032752; }
		_case_begin_4390032752:;
		{
			_5428_dead = _1086aaa30_is_struct_dead(_5416_ref.operator jule::Ref<_1037370d0_StructIns>());
			return _5428_dead;
		}
		goto _match_end_4390028976;
		_case_end_4390032752:;
		if (!(_match_expr.type_is<jule::Ref<_1036e5da0_Trait>>())) { goto _case_end_4390032864; }
		_case_begin_4390032864:;
		{
			_5428_dead = _1086aaa30_is_trait_dead(_5416_ref.operator jule::Ref<_1036e5da0_Trait>());
			return _5428_dead;
		}
		goto _match_end_4390028976;
		_case_end_4390032864:;
		_case_begin_4390032416:;
		{
			_5428_dead = false;
			return _5428_dead;
		}
		goto _match_end_4390028976;
		_case_end_4390032416:;
		_match_end_4390028976:;
	}
}



inline void _1086aaa30_drop_ref(jule::Slice<jule::Any>& _10618_refs,jule::Int _10631_pos) {
	_10618_refs=_10618_refs.slice(0LL,static_cast<jule::Int>(_10631_pos));
}



inline jule::Bool _1086aaa30_is_all_references_are_dead_0(jule::Ref<_1036da950_ReferenceStack> _11438_references) {
	jule::Int _11513_i = 0LL;
	_iter_begin_4390052864:;
	if (!(_11513_i < _11438_references->_method_len())) { goto _iter_end_4390052864; }
	{
		jule::Any _11717_ref = _11438_references->_method_at(_11513_i);
		{
			auto _match_expr{ _1086aaa30_current };
			if (!(_match_expr.type_is<jule::Ref<_1037649f0_FnIns>>())) { goto _case_end_4390055664; }
			_case_begin_4390055664:;
			{
				{
					auto _match_expr{ _11717_ref };
					if (!(_match_expr.type_is<jule::Ref<_1037649f0_FnIns>>())) { goto _case_end_4390057552; }
					_case_begin_4390057552:;
					{
						if ((_1086aaa30_current.operator jule::Ref<_1037649f0_FnIns>()).alloc == (_11717_ref.operator jule::Ref<_1037649f0_FnIns>()).alloc) {
							goto _iter_next_4390052864;
						}
					}
					goto _match_end_4390056192;
					_case_end_4390057552:;
					_match_end_4390056192:;
				}
			}
			goto _match_end_4390054656;
			_case_end_4390055664:;
			_match_end_4390054656:;
		}
		{
			auto _match_expr{ _1086aaa30_main_current };
			if (!(_match_expr.type_is<jule::Ref<_1037649f0_FnIns>>())) { goto _case_end_4390058224; }
			_case_begin_4390058224:;
			{
				{
					auto _match_expr{ _11717_ref };
					if (!(_match_expr.type_is<jule::Ref<_1037649f0_FnIns>>())) { goto _case_end_4390058672; }
					_case_begin_4390058672:;
					{
						if ((_1086aaa30_main_current.operator jule::Ref<_1037649f0_FnIns>()).alloc == (_11717_ref.operator jule::Ref<_1037649f0_FnIns>()).alloc) {
							goto _iter_next_4390052864;
						}
					}
					goto _match_end_4390056608;
					_case_end_4390058672:;
					_match_end_4390056608:;
				}
			}
			goto _match_end_4390059344;
			_case_end_4390058224:;
			_match_end_4390059344:;
		}
		if ((!(_1086aaa30_is_dead(_11717_ref)))) {
			return false;
		}
	}
	_iter_next_4390052864:;
	(_11513_i)++;
	goto _iter_begin_4390052864;
	_iter_end_4390052864:;
	return true;
}

inline jule::Bool _1086aaa30_is_all_references_are_dead_1(jule::Ref<_1036da950_ReferenceStack> _11438_references) {
	jule::Int _11513_i = 0LL;
	_iter_begin_4390071488:;
	if (!(_11513_i < _11438_references->_method_len())) { goto _iter_end_4390071488; }
	{
		jule::Any _11717_ref = _11438_references->_method_at(_11513_i);
		{
			auto _match_expr{ _1086aaa30_current };
			if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4390074608; }
			_case_begin_4390074608:;
			{
				{
					auto _match_expr{ _11717_ref };
					if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4390076112; }
					_case_begin_4390076112:;
					{
						if ((_1086aaa30_current.operator jule::Ref<_104598e40_Var>()).alloc == (_11717_ref.operator jule::Ref<_104598e40_Var>()).alloc) {
							goto _iter_next_4390071488;
						}
					}
					goto _match_end_4390074720;
					_case_end_4390076112:;
					_match_end_4390074720:;
				}
			}
			goto _match_end_4390073312;
			_case_end_4390074608:;
			_match_end_4390073312:;
		}
		{
			auto _match_expr{ _1086aaa30_main_current };
			if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4390075072; }
			_case_begin_4390075072:;
			{
				{
					auto _match_expr{ _11717_ref };
					if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4390077200; }
					_case_begin_4390077200:;
					{
						if ((_1086aaa30_main_current.operator jule::Ref<_104598e40_Var>()).alloc == (_11717_ref.operator jule::Ref<_104598e40_Var>()).alloc) {
							goto _iter_next_4390071488;
						}
					}
					goto _match_end_4390076784;
					_case_end_4390077200:;
					_match_end_4390076784:;
				}
			}
			goto _match_end_4390077904;
			_case_end_4390075072:;
			_match_end_4390077904:;
		}
		if ((!(_1086aaa30_is_dead(_11717_ref)))) {
			return false;
		}
	}
	_iter_next_4390071488:;
	(_11513_i)++;
	goto _iter_begin_4390071488;
	_iter_end_4390071488:;
	return true;
}

inline jule::Bool _1086aaa30_is_all_references_are_dead_2(jule::Ref<_1036da950_ReferenceStack> _11438_references) {
	jule::Int _11513_i = 0LL;
	_iter_begin_4390106256:;
	if (!(_11513_i < _11438_references->_method_len())) { goto _iter_end_4390106256; }
	{
		jule::Any _11717_ref = _11438_references->_method_at(_11513_i);
		{
			auto _match_expr{ _1086aaa30_current };
			if (!(_match_expr.type_is<jule::Ref<_1037370d0_StructIns>>())) { goto _case_end_4390109376; }
			_case_begin_4390109376:;
			{
				{
					auto _match_expr{ _11717_ref };
					if (!(_match_expr.type_is<jule::Ref<_1037370d0_StructIns>>())) { goto _case_end_4390110912; }
					_case_begin_4390110912:;
					{
						if ((_1086aaa30_current.operator jule::Ref<_1037370d0_StructIns>()).alloc == (_11717_ref.operator jule::Ref<_1037370d0_StructIns>()).alloc) {
							goto _iter_next_4390106256;
						}
					}
					goto _match_end_4390109568;
					_case_end_4390110912:;
					_match_end_4390109568:;
				}
			}
			goto _match_end_4390108848;
			_case_end_4390109376:;
			_match_end_4390108848:;
		}
		{
			auto _match_expr{ _1086aaa30_main_current };
			if (!(_match_expr.type_is<jule::Ref<_1037370d0_StructIns>>())) { goto _case_end_4390111584; }
			_case_begin_4390111584:;
			{
				{
					auto _match_expr{ _11717_ref };
					if (!(_match_expr.type_is<jule::Ref<_1037370d0_StructIns>>())) { goto _case_end_4390112096; }
					_case_begin_4390112096:;
					{
						if ((_1086aaa30_main_current.operator jule::Ref<_1037370d0_StructIns>()).alloc == (_11717_ref.operator jule::Ref<_1037370d0_StructIns>()).alloc) {
							goto _iter_next_4390106256;
						}
					}
					goto _match_end_4390113520;
					_case_end_4390112096:;
					_match_end_4390113520:;
				}
			}
			goto _match_end_4390112704;
			_case_end_4390111584:;
			_match_end_4390112704:;
		}
		if ((!(_1086aaa30_is_dead(_11717_ref)))) {
			return false;
		}
	}
	_iter_next_4390106256:;
	(_11513_i)++;
	goto _iter_begin_4390106256;
	_iter_end_4390106256:;
	return true;
}



inline jule::Bool _1086aaa30_is_fn_dead(jule::Ref<_1037649f0_FnIns> _14319_f) {
	if (_14319_f->_field_decl->_field_cpp_linked) {
		return false;
	}
	if (_14319_f->_field_decl->_method_is_entry_point() || _14319_f->_field_decl->_method_is_init()) {
		return (!(_14319_f->_field_decl->_field_statically));
	}
	if (jule::real(_14319_f->_field_owner)) {
		if (_1086aaa30_is_exist_ref(_1086aaa30_checking,jule::Any(_14319_f->_field_owner))) {
			return true;
		}
		return _1086aaa30_is_dead(jule::Any(_14319_f->_field_owner));
	}
	return _1086aaa30_is_all_references_are_dead_0(_14319_f->_field_references);
}



inline jule::Bool _1086aaa30_is_var_dead(jule::Ref<_104598e40_Var> _16920_v) {
	if (_16920_v->_field_constant) {
		return true;
	}
	if (_16920_v->_field_cpp_linked) {
		return false;
	}
	return _1086aaa30_is_all_references_are_dead_1(_16920_v->_field_references);
}



inline jule::Bool _1086aaa30_kind_is_dead(jule::Ref<_104a21a10_TypeKind> _18121_k) {
	{
		if (!((jule::real(_18121_k->_method_ref())))) { goto _case_end_4390081248; }
		_case_begin_4390081248:;
		{
			return _1086aaa30_kind_is_dead(_18121_k->_method_ref()->_field_elem);
		}
		goto _match_end_4390075728;
		_case_end_4390081248:;
		if (!((jule::real(_18121_k->_method_ptr())))) { goto _case_end_4390084160; }
		_case_begin_4390084160:;
		{
			return _1086aaa30_kind_is_dead(_18121_k->_method_ptr()->_field_elem);
		}
		goto _match_end_4390075728;
		_case_end_4390084160:;
		if (!((jule::real(_18121_k->_method_slc())))) { goto _case_end_4390084272; }
		_case_begin_4390084272:;
		{
			return _1086aaa30_kind_is_dead(_18121_k->_method_slc()->_field_elem);
		}
		goto _match_end_4390075728;
		_case_end_4390084272:;
		if (!((jule::real(_18121_k->_method_arr())))) { goto _case_end_4390084384; }
		_case_begin_4390084384:;
		{
			return _1086aaa30_kind_is_dead(_18121_k->_method_arr()->_field_elem);
		}
		goto _match_end_4390075728;
		_case_end_4390084384:;
		if (!((jule::real(_18121_k->_method_trt())))) { goto _case_end_4390084592; }
		_case_begin_4390084592:;
		{
			jule::Ref<_1036e5da0_Trait> _19617_t = _18121_k->_method_trt();
			if (_1086aaa30_is_dead(jule::Any(_19617_t))) {
				return true;
			}
		}
		goto _match_end_4390075728;
		_case_end_4390084592:;
		if (!((jule::real(_18121_k->_method_strct())))) { goto _case_end_4390084704; }
		_case_begin_4390084704:;
		{
			jule::Ref<_1037370d0_StructIns> _20217_s = _18121_k->_method_strct();
			if (_1086aaa30_is_dead(jule::Any(_20217_s))) {
				return true;
			}
		}
		goto _match_end_4390075728;
		_case_end_4390084704:;
		_match_end_4390075728:;
	}
	return false;
}



inline jule::Bool _1086aaa30_is_any_generic_is_dead(jule::Slice<jule::Ref<_104a21a10_TypeKind>>& _21032_generics) {
	{
		auto __julec_range_expr = _21032_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104a21a10_TypeKind> _1086aaa30_g = *__julec_range_begin;
			_iter_begin_4390090832:;
			{
				if (_1086aaa30_kind_is_dead(_1086aaa30_g)) {
					return true;
				}
			}
			_iter_next_4390090832:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1086aaa30_g = *__julec_range_begin; goto _iter_begin_4390090832; }
			_iter_end_4390090832:;
		}
	}
	return false;
}



inline jule::Bool _1086aaa30_is_struct_dead(jule::Ref<_1037370d0_StructIns> _21923_s) {
	return false;
	if (_21923_s->_field_decl->_field_cpp_linked) {
		return false;
	}
	return _1086aaa30_is_all_references_are_dead_2(_21923_s->_field_references);
}



inline jule::Bool _1086aaa30_is_trait_dead(jule::Ref<_1036e5da0_Trait> _23622_t) {
	return false;
	{
		auto __julec_range_expr = _23622_t->_field_implemented;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _1086aaa30_imp = *__julec_range_begin;
			_iter_begin_4390115936:;
			{
				jule::Int _24117_i = 0LL;
				_iter_begin_4390120800:;
				if (!(_24117_i < _1086aaa30_imp->_field_instances.len())) { goto _iter_end_4390120800; }
				{
					jule::Ref<_1037370d0_StructIns> _24321_ins = _1086aaa30_imp->_field_instances[static_cast<jule::Int>(_24117_i)];
					if ((!(_1086aaa30_is_struct_dead(_24321_ins)))) {
						return false;
					}
				}
				_iter_next_4390120800:;
				(_24117_i)++;
				goto _iter_begin_4390120800;
				_iter_end_4390120800:;
			}
			_iter_next_4390115936:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1086aaa30_imp = *__julec_range_begin; goto _iter_begin_4390115936; }
			_iter_end_4390115936:;
		}
	}
	return true;
}



inline void _1086aaa30_eliminate_dead_functions(jule::Slice<jule::Ref<_1037649f0_Fn>>& _25434_funcs) {
	jule::Int _25513_i = 0LL;
	_iter_begin_4390124400:;
	if (!(_25513_i < _25434_funcs.len())) { goto _iter_end_4390124400; }
	{
		jule::Ref<_1037649f0_Fn> _25717_f = _25434_funcs[static_cast<jule::Int>(_25513_i)];
		jule::Int _25817_j = 0LL;
		_iter_begin_4390127344:;
		if (!(_25817_j < _25717_f->_field_instances.len())) { goto _iter_end_4390127344; }
		{
			jule::Ref<_1037649f0_FnIns> _26021_ins = _25717_f->_field_instances[static_cast<jule::Int>(_25817_j)];
			_1086aaa30_main_current=jule::Any(_26021_ins);
			if (_1086aaa30_is_fn_dead(_26021_ins)) {
				_1086aaa30_deads=jule::append(_1086aaa30_deads,jule::Slice<jule::Any>({jule::Any(_26021_ins)}));
				_25717_f->_field_instances=jule::append(_25717_f->_field_instances.slice(0LL,static_cast<jule::Int>(_25817_j)),_25717_f->_field_instances.slice(static_cast<jule::Int>(_25817_j + 1LL)));
				goto _iter_next_4390127344;
			}
			_1086aad20_eliminate_dead_code_of_scope(_26021_ins->_field_scope);
			(_25817_j)++;
		}
		_iter_next_4390127344:;
		goto _iter_begin_4390127344;
		_iter_end_4390127344:;
		if (_25717_f->_field_instances.len() == 0LL) {
			_25434_funcs=jule::append(_25434_funcs.slice(0LL,static_cast<jule::Int>(_25513_i)),_25434_funcs.slice(static_cast<jule::Int>(_25513_i + 1LL)));
			goto _iter_next_4390124400;
		}
		(_25513_i)++;
	}
	_iter_next_4390124400:;
	goto _iter_begin_4390124400;
	_iter_end_4390124400:;
}



inline void _1086aaa30_eliminate_dead_globals(jule::Ref<_119162660_Package>& _28032_pkg) {
	{
		auto __julec_range_expr = _28032_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _1086aaa30_f = *__julec_range_begin;
			_iter_begin_4390141008:;
			{
				jule::Int _28217_i = 0LL;
				_iter_begin_4390144720:;
				if (!(_28217_i < _1086aaa30_f->_field_vars.len())) { goto _iter_end_4390144720; }
				{
					jule::Ref<_104598e40_Var> _28421_v = _1086aaa30_f->_field_vars[static_cast<jule::Int>(_28217_i)];
					_1086aaa30_main_current=jule::Any(_28421_v);
					if (_1086aaa30_is_var_dead(_28421_v)) {
						_1086aaa30_deads=jule::append(_1086aaa30_deads,jule::Slice<jule::Any>({jule::Any(_28421_v)}));
						_1086aaa30_f->_field_vars=jule::append(_1086aaa30_f->_field_vars.slice(0LL,static_cast<jule::Int>(_28217_i)),_1086aaa30_f->_field_vars.slice(static_cast<jule::Int>(_28217_i + 1LL)));
					} else {
						(_28217_i)++;
					}
				}
				_iter_next_4390144720:;
				goto _iter_begin_4390144720;
				_iter_end_4390144720:;
			}
			_iter_next_4390141008:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1086aaa30_f = *__julec_range_begin; goto _iter_begin_4390141008; }
			_iter_end_4390141008:;
		}
	}
}



inline void _1086aaa30_eliminate_dead_functions_package(jule::Ref<_119162660_Package>& _29642_pkg) {
	{
		auto __julec_range_expr = _29642_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _1086aaa30_f = *__julec_range_begin;
			_iter_begin_4390144000:;
			{
				_1086aaa30_eliminate_dead_functions(_1086aaa30_f->_field_funcs);
			}
			_iter_next_4390144000:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1086aaa30_f = *__julec_range_begin; goto _iter_begin_4390144000; }
			_iter_end_4390144000:;
		}
	}
}



inline void _1086aaa30_eliminate_dead_structs(jule::Ref<_119162660_Package>& _30232_pkg) {
	{
		auto __julec_range_expr = _30232_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _1086aaa30_f = *__julec_range_begin;
			_iter_begin_4390152912:;
			{
				jule::Int _30417_i = 0LL;
				_iter_begin_4390157296:;
				if (!(_30417_i < _1086aaa30_f->_field_structs.len())) { goto _iter_end_4390157296; }
				{
					jule::Ref<_1037370d0_Struct> _30621_s = _1086aaa30_f->_field_structs[static_cast<jule::Int>(_30417_i)];
					jule::Int _30721_j = 0LL;
					_iter_begin_4390161440:;
					if (!(_30721_j < _30621_s->_field_instances.len())) { goto _iter_end_4390161440; }
					{
						jule::Ref<_1037370d0_StructIns> _30925_ins = _30621_s->_field_instances[static_cast<jule::Int>(_30721_j)];
						_1086aaa30_main_current=jule::Any(_30925_ins);
						if (_1086aaa30_is_struct_dead(_30925_ins)) {
							_1086aaa30_deads=jule::append(_1086aaa30_deads,jule::Slice<jule::Any>({jule::Any(_30925_ins)}));
							_30621_s->_field_instances=jule::append(_30621_s->_field_instances.slice(0LL,static_cast<jule::Int>(_30721_j)),_30621_s->_field_instances.slice(static_cast<jule::Int>(_30721_j + 1LL)));
							goto _iter_next_4390161440;
						}
						(_30721_j)++;
					}
					_iter_next_4390161440:;
					goto _iter_begin_4390161440;
					_iter_end_4390161440:;
					if (_30621_s->_field_instances.len() == 0LL) {
						_1086aaa30_f->_field_structs=jule::append(_1086aaa30_f->_field_structs.slice(0LL,static_cast<jule::Int>(_30417_i)),_1086aaa30_f->_field_structs.slice(static_cast<jule::Int>(_30417_i + 1LL)));
						goto _iter_next_4390157296;
					}
					(_30417_i)++;
				}
				_iter_next_4390157296:;
				goto _iter_begin_4390157296;
				_iter_end_4390157296:;
			}
			_iter_next_4390152912:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1086aaa30_f = *__julec_range_begin; goto _iter_begin_4390152912; }
			_iter_end_4390152912:;
		}
	}
}



inline void _1086aaa30_eliminate_dead_traits(jule::Ref<_119162660_Package>& _32831_pkg) {
	{
		auto __julec_range_expr = _32831_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _1086aaa30_f = *__julec_range_begin;
			_iter_begin_4390168720:;
			{
				jule::Int _33017_i = 0LL;
				_iter_begin_4390177328:;
				if (!(_33017_i < _1086aaa30_f->_field_traits.len())) { goto _iter_end_4390177328; }
				{
					jule::Ref<_1036e5da0_Trait> _33221_t = _1086aaa30_f->_field_traits[static_cast<jule::Int>(_33017_i)];
					_1086aaa30_main_current=jule::Any(_33221_t);
					if (_1086aaa30_is_trait_dead(_33221_t)) {
						_1086aaa30_deads=jule::append(_1086aaa30_deads,jule::Slice<jule::Any>({jule::Any(_33221_t)}));
						_1086aaa30_f->_field_traits=jule::append(_1086aaa30_f->_field_traits.slice(0LL,static_cast<jule::Int>(_33017_i)),_1086aaa30_f->_field_traits.slice(static_cast<jule::Int>(_33017_i + 1LL)));
					} else {
						(_33017_i)++;
					}
				}
				_iter_next_4390177328:;
				goto _iter_begin_4390177328;
				_iter_end_4390177328:;
			}
			_iter_next_4390168720:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1086aaa30_f = *__julec_range_begin; goto _iter_begin_4390168720; }
			_iter_end_4390168720:;
		}
	}
}



inline void _1086aaa30_catch_alive_init(jule::Ref<_119162660_Package>& _34426_pkg) {
	
	
	jule::Ref<_1037649f0_Fn> _34713_f = _34426_pkg->_method_find_fn(jule::Str("init", 4),false);
	if ((!(jule::real(_34713_f)))) {
		return;
	}
	jule::I64 _3529_n = _1086aaa30_deads.len();
	__JULE_DEFER({
		_1086aaa30_deads=_1086aaa30_deads.slice(0LL,static_cast<jule::Int>(_3529_n));
		_1086aaa30_checking=nullptr;
		_1086aaa30_current=jule::Any(nullptr);
	});
	jule::Ref<_1037649f0_FnIns> _36013_ins = _34713_f->_field_instances[0LL];
	jule::Int _36113_i = 0LL;
	_iter_begin_4390184928:;
	if (!(_36113_i < _36013_ins->_field_refers->_method_len())) { goto _iter_end_4390184928; }
	{
		if ((!(_1086aaa30_is_dead(_36013_ins->_field_refers->_method_at(_36113_i))))) {
			_34713_f->_field_statically=true;
			return;
		}
	}
	_iter_next_4390184928:;
	(_36113_i)++;
	goto _iter_begin_4390184928;
	_iter_end_4390184928:;
}



inline void _1086aaa30_eliminate_dead_code_package(jule::Ref<_119162660_Package>& _37037_pkg) {
	_1086aaa30_deads=jule::Slice<jule::Any>::alloc(0LL,2000LL);
	_1086aaa30_catch_alive_init(_37037_pkg);
	_1086aaa30_eliminate_dead_globals(_37037_pkg);
	_1086aaa30_eliminate_dead_functions_package(_37037_pkg);
}



inline void _1086aaa30_eliminate_dead_code(jule::Ref<_108db2720_IR> _38132_ir) {
	jule::I64 _38213_i = _38132_ir->_field_used.len() - 1LL;
	_iter_begin_4390201504:;
	if (!(_38213_i >= 0LL)) { goto _iter_end_4390201504; }
	{
		jule::Ref<_119162660_ImportInfo> _38417_u = _38132_ir->_field_used[static_cast<jule::Int>(_38213_i)];
		if ((!(_38417_u->_field_cpp_linked))) {
			_1086aaa30_eliminate_dead_code_package(_38417_u->_field_package);
		}
	}
	_iter_next_4390201504:;
	(_38213_i)--;
	goto _iter_begin_4390201504;
	_iter_end_4390201504:;
	_1086aaa30_eliminate_dead_code_package(_38132_ir->_field_main);
	_1086aaa30_deads=nullptr;
	_1086aaa30_checking=nullptr;
	_1086aaa30_current=jule::Any(nullptr);
}



inline void _1086aad20_eliminate_dead_code_of_scope(jule::Ref<_104180810_Scope> _7337_s) {
	jule::Ref<_1086aad20_ScopeDeadCode> _7413_sdc = jule::new_struct<_1086aad20_ScopeDeadCode>(new( std::nothrow ) _1086aad20_ScopeDeadCode(jule::Ref<_1086aad20_ScopeDeadCode>(),_7337_s,(&(_7337_s->_field_stmts)),jule::Int()));
	{
		_7413_sdc->_method_optimize_stmts();
	}
}



inline void _104862e90_push_opt_level(jule::Int _2823_level) {
	{
		auto _match_expr{ _2823_level };
		if (!((0LLU) == _match_expr)) { goto _case_end_4390247456; }
		_case_begin_4390247456:;
		{
			_104862e90_OPTIMIZATIONS=nullptr;
		}
		goto _match_end_4390246016;
		_case_end_4390247456:;
		if (!((1LLU) == _match_expr)) { goto _case_end_4390247568; }
		_case_begin_4390247568:;
		{
			_104862e90_OPTIMIZATIONS=jule::append(_104862e90_OPTIMIZATIONS,jule::Slice<jule::Str>({jule::Str("--opt-copy", 10),jule::Str("--opt-deadcode", 14),jule::Str("--opt-append", 12)}));
		}
		goto _match_end_4390246016;
		_case_end_4390247568:;
		_case_begin_4390246496:;
		{
			return;
		}
		goto _match_end_4390246016;
		_case_end_4390246496:;
		_match_end_4390246016:;
	}
}



inline jule::Bool _104862e90_is_opt_enabled(jule::Str _4523_opt) {
	{
		auto __julec_range_expr = _104862e90_OPTIMIZATIONS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _104862e90_oopt = *__julec_range_begin;
			_iter_begin_4390250512:;
			{
				if (_4523_opt == _104862e90_oopt) {
					return true;
				}
			}
			_iter_next_4390250512:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104862e90_oopt = *__julec_range_begin; goto _iter_begin_4390250512; }
			_iter_end_4390250512:;
		}
	}
	return false;
}



inline jule::Str _104e1b930_gen_if(jule::Ref<_104180810_If> _12815_i) {
	jule::Str _12913_obj = jule::Str("if (", 4);
	_12913_obj+=_104ebd4a0_gen_expr(_12815_i->_field_expr);
	_12913_obj+=jule::Str(") ", 2);
	_12913_obj+=_104e1b930_gen_scope(_12815_i->_field_scope);
	return _12913_obj;
}



inline jule::Str _104e1b930_gen_conditional(jule::Ref<_104180810_Conditional> _13624_c) {
	jule::Str _13713_obj = _104e1b930_gen_if(_13624_c->_field_elifs[0LL]);
	{
		auto __julec_range_expr = _13624_c->_field_elifs.slice(1LL);
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104180810_If> _104e1b930_elif = *__julec_range_begin;
			_iter_begin_4397933952:;
			{
				_13713_obj+=jule::Str(" else ", 6);
				_13713_obj+=_104e1b930_gen_if(_104e1b930_elif);
			}
			_iter_next_4397933952:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104e1b930_elif = *__julec_range_begin; goto _iter_begin_4397933952; }
			_iter_end_4397933952:;
		}
	}
	if (jule::real(_13624_c->_field_default)) {
		_13713_obj+=jule::Str(" else ", 6);
		_13713_obj+=_104e1b930_gen_scope(_13624_c->_field_default->_field_scope);
	}
	return _13713_obj;
}



inline jule::Str _104e1b930_gen_inf_iter(jule::Ref<_104180810_InfIter> _15221_it) {
	jule::Str _1539_begin = _104f406e0_iter_begin_label_ident(((jule::Uintptr)((_15221_it).alloc)));
	jule::Str _1549_end = _104f406e0_iter_end_label_ident(((jule::Uintptr)((_15221_it).alloc)));
	jule::Str _1559_next = _104f406e0_iter_next_label_ident(((jule::Uintptr)((_15221_it).alloc)));
	jule::Str _1569_indent = _1190c5fe0_indent();
	jule::Str _15813_obj = _1539_begin + jule::Str(":;\n", 3);
	_15813_obj+=_1569_indent;
	_15813_obj+=_104e1b930_gen_scope(_15221_it->_field_scope);
	_15813_obj+=jule::Str("\n", 1);
	_15813_obj+=_1569_indent;
	_15813_obj+=_1559_next + jule::Str(":;\n", 3);
	_15813_obj+=_1569_indent;
	_15813_obj+=(jule::Str("goto ", 5) + _1539_begin) + jule::Str(";\n", 2);
	_15813_obj+=_1569_indent;
	_15813_obj+=_1549_end + jule::Str(":;", 2);
	return _15813_obj;
}



inline jule::Str _104e1b930_gen_while_iter(jule::Ref<_104180810_WhileIter> _17223_it) {
	jule::Str _1739_begin = _104f406e0_iter_begin_label_ident(((jule::Uintptr)((_17223_it).alloc)));
	jule::Str _1749_end = _104f406e0_iter_end_label_ident(((jule::Uintptr)((_17223_it).alloc)));
	jule::Str _1759_next = _104f406e0_iter_next_label_ident(((jule::Uintptr)((_17223_it).alloc)));
	jule::Str _1769_indent = _1190c5fe0_indent();
	jule::Str _17813_obj = _1739_begin + jule::Str(":;\n", 3);
	_17813_obj+=_1769_indent;
	if (_17223_it->_field_expr != nullptr) {
		_17813_obj+=jule::Str("if (!(", 6);
		_17813_obj+=_104ebd4a0_gen_expr(_17223_it->_field_expr);
		_17813_obj+=jule::Str(")) { goto ", 10);
		_17813_obj+=_1749_end;
		_17813_obj+=jule::Str("; }\n", 4);
		_17813_obj+=_1769_indent;
	}
	_17813_obj+=_104e1b930_gen_scope(_17223_it->_field_scope);
	_17813_obj+=jule::Str("\n", 1);
	_17813_obj+=_1769_indent;
	_17813_obj+=_1759_next + jule::Str(":;\n", 3);
	_17813_obj+=_1769_indent;
	if (_17223_it->_field_next != nullptr) {
		_17813_obj+=_104e1b930_gen_st(_17223_it->_field_next);
		_17813_obj+=jule::Str("\n", 1);
		_17813_obj+=_1769_indent;
	}
	_17813_obj+=(jule::Str("goto ", 5) + _1739_begin) + jule::Str(";\n", 2);
	_17813_obj+=_1769_indent;
	_17813_obj+=_1749_end + jule::Str(":;", 2);
	return _17813_obj;
}



inline jule::Trait<_104e1b930_RangeSetter> _104e1b930_get_range_setter(jule::Ref<_104180810_RangeIter> _20525_it) {
	{
		if (!((jule::real(_20525_it->_field_expr->_field_kind->_method_slc())))) { goto _case_end_4397968288; }
		_case_begin_4397968288:;
		{
			return jule::new_struct<_104e1b930_IndexRangeSetter>(new( std::nothrow ) _104e1b930_IndexRangeSetter());
		}
		goto _match_end_4397964944;
		_case_end_4397968288:;
		if (!((jule::real(_20525_it->_field_expr->_field_kind->_method_arr())))) { goto _case_end_4397966480; }
		_case_begin_4397966480:;
		{
			return jule::new_struct<_104e1b930_IndexRangeSetter>(new( std::nothrow ) _104e1b930_IndexRangeSetter());
		}
		goto _match_end_4397964944;
		_case_end_4397966480:;
		if (!((jule::real(_20525_it->_field_expr->_field_kind->_method_map())))) { goto _case_end_4397966592; }
		_case_begin_4397966592:;
		{
			return jule::new_struct<_104e1b930_MapRangeSetter>(new( std::nothrow ) _104e1b930_MapRangeSetter());
		}
		goto _match_end_4397964944;
		_case_end_4397966592:;
		_case_begin_4397965072:;
		{
			return jule::new_struct<_104e1b930_IndexRangeSetter>(new( std::nothrow ) _104e1b930_IndexRangeSetter());
		}
		goto _match_end_4397964944;
		_case_end_4397965072:;
		_match_end_4397964944:;
	}
}



inline jule::Str _104e1b930_gen_range_iter(jule::Ref<_104180810_RangeIter> _21423_it) {
	_1190c5fe0_add_indent();
	jule::Str _2179_begin = _104f406e0_iter_begin_label_ident(((jule::Uintptr)((_21423_it).alloc)));
	jule::Str _2189_end = _104f406e0_iter_end_label_ident(((jule::Uintptr)((_21423_it).alloc)));
	jule::Str _2199_next = _104f406e0_iter_next_label_ident(((jule::Uintptr)((_21423_it).alloc)));
	jule::Str _22013__indent = _1190c5fe0_indent();
	jule::Trait<_104e1b930_RangeSetter> _2219_setter = _104e1b930_get_range_setter(_21423_it);
	jule::Str _22313_obj = jule::Str("{\n", 2);
	_22313_obj+=_22013__indent;
	if (_21423_it->_field_expr->_field_lvalue && _104862e90_is_opt_enabled(jule::Str("--opt-copy", 10))) {
		_22313_obj+=jule::Str("auto &__julec_range_expr = ", 27);
	} else {
		_22313_obj+=jule::Str("auto __julec_range_expr = ", 26);
	}
	_22313_obj+=_104ebd4a0_gen_expr(_21423_it->_field_expr->_field_model) + jule::Str(";\n", 2);
	_22313_obj+=_22013__indent;
	_22313_obj+=jule::Str("if (__julec_range_expr.begin() != __julec_range_expr.end()) {\n", 62);
	_1190c5fe0_add_indent();
	_22013__indent=_1190c5fe0_indent();
	_22313_obj+=_22013__indent;
	_22313_obj+=jule::Str("auto __julec_range_begin = __julec_range_expr.begin();\n", 55);
	_22313_obj+=_22013__indent;
	_22313_obj+=jule::Str("const auto __julec_range_end = __julec_range_expr.end();\n", 57);
	_22313_obj+=_22013__indent;
	_22313_obj+=_2219_setter.get()._method_setup_vars(_21423_it->_field_key_a,_21423_it->_field_key_b);
	_22313_obj+=_2179_begin + jule::Str(":;\n", 3);
	_22313_obj+=_22013__indent;
	_22313_obj+=_104e1b930_gen_scope(_21423_it->_field_scope);
	_22313_obj+=jule::Str("\n", 1);
	_22313_obj+=_22013__indent;
	_22313_obj+=_2199_next + jule::Str(":;\n", 3);
	_22313_obj+=_22013__indent;
	_22313_obj+=_2219_setter.get()._method_next_steps(_21423_it->_field_key_a,_21423_it->_field_key_b,_2179_begin);
	_22313_obj+=_22013__indent;
	_22313_obj+=_2189_end + jule::Str(":;\n", 3);
	_1190c5fe0_done_indent();
	_22013__indent=_1190c5fe0_indent();
	_22313_obj+=_22013__indent;
	_22313_obj+=jule::Str("}\n", 2);
	_1190c5fe0_done_indent();
	_22013__indent=_1190c5fe0_indent();
	_22313_obj+=_22013__indent;
	_22313_obj+=jule::Str("}", 1);
	return _22313_obj;
}



inline jule::Str _104e1b930_gen_cont(jule::Ref<_104180810_ContSt> _26913_c) {
	return (jule::Str("goto ", 5) + _104f406e0_iter_next_label_ident(_26913_c->_field_it)) + jule::Str(";", 1);
}



inline jule::Str _104e1b930_gen_label(jule::Ref<_104180810_Label> _27314_l) {
	return _104f406e0_label_ident(_27314_l->_field_ident) + jule::Str(":;", 2);
}



inline jule::Str _104e1b930_gen_goto(jule::Ref<_104180810_GotoSt> _27713_gt) {
	return (jule::Str("goto ", 5) + _104f406e0_label_ident(_27713_gt->_field_ident)) + jule::Str(";", 1);
}



inline jule::Str _104e1b930_gen_postfix(jule::Ref<_104180810_Postfix> _28120_p) {
	return (((jule::Str("(", 1) + _104ebd4a0_gen_expr(_28120_p->_field_expr)) + jule::Str(")", 1)) + _28120_p->_field_op) + jule::Str(";", 1);
}



inline jule::Str _104e1b930_gen_assign(jule::Ref<_104180810_Assign> _28519_a) {
	jule::Str _28613_obj = _104ebd4a0_gen_expr(_28519_a->_field_l);
	_28613_obj+=_28519_a->_field_op;
	if (_104862e90_is_opt_enabled(jule::Str("--opt-append", 12))) {
		{
			auto _match_expr{ _28519_a->_field_r };
			if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinAppendCallExprModel>>())) { goto _case_end_4398009632; }
			_case_begin_4398009632:;
			{
				jule::Ref<_11911f320_BuiltinAppendCallExprModel> _29121_model = _28519_a->_field_r.operator jule::Ref<_11911f320_BuiltinAppendCallExprModel>();
				jule::Str _29218_expr;
				jule::Bool _29224_optimized;
				std::tie(_29218_expr,_29224_optimized) = _104ebd4a0_gen_builtin_append_call_expr_model_assign(_28519_a->_field_l,_29121_model);
				if (_29224_optimized) {
					return _29218_expr;
				}
				_28613_obj+=_29218_expr;
			}
			goto _match_end_4398007616;
			_case_end_4398009632:;
			_case_begin_4398008848:;
			{
				_28613_obj+=_104ebd4a0_gen_expr(_28519_a->_field_r);
			}
			goto _match_end_4398007616;
			_case_end_4398008848:;
			_match_end_4398007616:;
		}
	} else {
		_28613_obj+=_104ebd4a0_gen_expr(_28519_a->_field_r);
	}
	_28613_obj+=jule::Str(";", 1);
	return _28613_obj;
}



inline jule::Str _104e1b930_gen_multi_assign(jule::Ref<_104180810_MultiAssign> _30825_a) {
	jule::Str _30913_obj = jule::Str("std::tie(", 9);
	{
		auto __julec_range_expr = _30825_a->_field_l;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _104e1b930_l = *__julec_range_begin;
			_iter_begin_4398017712:;
			{
				if (_104e1b930_l == nullptr) {
					_30913_obj+=jule::Str("std::ignore,", 12);
				} else {
					_30913_obj+=_104ebd4a0_gen_expr(_104e1b930_l) + jule::Str(",", 1);
				}
			}
			_iter_next_4398017712:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104e1b930_l = *__julec_range_begin; goto _iter_begin_4398017712; }
			_iter_end_4398017712:;
		}
	}
	_30913_obj=_30913_obj.slice(0LL,static_cast<jule::Int>(_30913_obj.len() - 1LL));
	_30913_obj+=jule::Str(") = ", 4);
	_30913_obj+=_104ebd4a0_gen_expr(_30825_a->_field_r);
	_30913_obj+=jule::Str(";", 1);
	return _30913_obj;
}



inline jule::Str _104e1b930_gen_case(jule::Ref<_104180810_Match> _32617_m,jule::Ref<_104180810_Case> _32632_c) {
	
	jule::Str _3299_end = _104f406e0_case_end_label_ident(((jule::Uintptr)((_32632_c).alloc)));
	jule::Str _33013_obj = jule::Str("", 0);
	if (_32632_c->_field_exprs.len() > 0LL) {
		_33013_obj+=jule::Str("if (!(", 6);
		{
			auto __julec_range_expr = _32632_c->_field_exprs;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _104e1b930_i = 0;
				jule::Any _104e1b930_expr = *__julec_range_begin;
				_iter_begin_4398029232:;
				{
					{
						if (!(((!(_32617_m->_field_type_match))))) { goto _case_end_4398032784; }
						_case_begin_4398032784:;
						{
							_33013_obj+=jule::Str("(", 1);
							_33013_obj+=_104ebd4a0_gen_expr(_104e1b930_expr);
							_33013_obj+=jule::Str(")", 1);
							if (_32617_m->_field_expr->_method_is_const()) {
								if ((!(_32617_m->_field_expr->_field_constant->_method_is_bool())) || (!(_32617_m->_field_expr->_field_constant->_method_read_bool()))) {
									_33013_obj+=jule::Str(" == ", 4);
									_33013_obj+=_104ebd4a0_gen_expr_model(_32617_m->_field_expr->_field_model);
								}
							} else {
								_33013_obj+=jule::Str(" == ", 4);
								_33013_obj+=jule::Str("_match_expr", 11);
							}
						}
						goto _match_end_4398031792;
						_case_end_4398032784:;
						_case_begin_4398031936:;
						{
							_33013_obj+=jule::Str("_match_expr", 11);
							_33013_obj+=(jule::Str(".type_is<", 9) + _104ebd4a0_gen_expr(_104e1b930_expr)) + jule::Str(">()", 3);
						}
						goto _match_end_4398031792;
						_case_end_4398031936:;
						_match_end_4398031792:;
					}
					if ((_104e1b930_i + 1LL) < _32632_c->_field_exprs.len()) {
						_33013_obj+=jule::Str(" || ", 4);
					}
				}
				_iter_next_4398029232:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_104e1b930_i; _104e1b930_expr = *__julec_range_begin; goto _iter_begin_4398029232; }
				_iter_end_4398029232:;
			}
		}
		_33013_obj+=jule::Str(")) { goto ", 10);
		_33013_obj+=_3299_end + jule::Str("; }\n", 4);
	}
	if (_32632_c->_field_scope->_field_stmts.len() > 0LL) {
		_33013_obj+=_1190c5fe0_indent();
		_33013_obj+=_104f406e0_case_begin_label_ident(((jule::Uintptr)((_32632_c).alloc))) + jule::Str(":;\n", 3);
		_33013_obj+=_1190c5fe0_indent();
		_33013_obj+=_104e1b930_gen_scope(_32632_c->_field_scope);
		_33013_obj+=jule::Str("\n", 1);
	}
	_33013_obj+=_1190c5fe0_indent();
	_33013_obj+=jule::Str("goto ", 5);
	_33013_obj+=_104f406e0_match_end_label_ident(((jule::Uintptr)((_32617_m).alloc))) + jule::Str(";", 1);
	_33013_obj+=jule::Str("\n", 1);
	_33013_obj+=_1190c5fe0_indent();
	_33013_obj+=_3299_end + jule::Str(":;", 2);
	return _33013_obj;
}



inline jule::Str _104e1b930_gen_match(jule::Ref<_104180810_Match> _38118_m) {
	jule::Str _38213_obj = jule::Str("{\n", 2);
	_1190c5fe0_add_indent();
	_38213_obj+=_1190c5fe0_indent();
	if ((!(_38118_m->_field_expr->_method_is_const()))) {
		if (_38118_m->_field_expr->_field_lvalue && _104862e90_is_opt_enabled(jule::Str("--opt-copy", 10))) {
			_38213_obj+=jule::Str("auto &_match_expr{ ", 19);
		} else {
			_38213_obj+=jule::Str("auto _match_expr{ ", 18);
		}
		_38213_obj+=_104ebd4a0_gen_expr(_38118_m->_field_expr->_field_model);
		_38213_obj+=jule::Str(" };\n", 4);
		_38213_obj+=_1190c5fe0_indent();
	}
	if (_38118_m->_field_cases.len() > 0LL) {
		_38213_obj+=_104e1b930_gen_case(_38118_m,_38118_m->_field_cases[0LL]);
		{
			auto __julec_range_expr = _38118_m->_field_cases.slice(1LL);
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_104180810_Case> _104e1b930_c = *__julec_range_begin;
				_iter_begin_4398057168:;
				{
					_38213_obj+=jule::Str("\n", 1);
					_38213_obj+=_1190c5fe0_indent();
					_38213_obj+=_104e1b930_gen_case(_38118_m,_104e1b930_c);
				}
				_iter_next_4398057168:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _104e1b930_c = *__julec_range_begin; goto _iter_begin_4398057168; }
				_iter_end_4398057168:;
			}
		}
	}
	if (jule::real(_38118_m->_field_default)) {
		_38213_obj+=jule::Str("\n", 1);
		_38213_obj+=_104e1b930_gen_case(_38118_m,_38118_m->_field_default);
	}
	_38213_obj+=jule::Str("\n", 1);
	_38213_obj+=_1190c5fe0_indent();
	_38213_obj+=_104f406e0_match_end_label_ident(((jule::Uintptr)((_38118_m).alloc))) + jule::Str(":;", 2);
	_38213_obj+=jule::Str("\n", 1);
	_1190c5fe0_done_indent();
	_38213_obj+=_1190c5fe0_indent();
	_38213_obj+=jule::Str("}", 1);
	return _38213_obj;
}



inline jule::Str _104e1b930_gen_fall_st(jule::Ref<_104180810_FallSt> _42716_f) {
	return (jule::Str("goto ", 5) + _104f406e0_case_begin_label_ident(_42716_f->_field_dest_case)) + jule::Str(";", 1);
}



inline jule::Str _104e1b930_gen_break_st(jule::Ref<_104180810_BreakSt> _43117_b) {
	jule::Str _43213_obj = jule::Str("goto ", 5);
	if (_43117_b->_field_it != 0LL) {
		_43213_obj+=_104f406e0_iter_end_label_ident(_43117_b->_field_it);
	} else {
		_43213_obj+=_104f406e0_match_end_label_ident(_43117_b->_field_mtch);
	}
	_43213_obj+=jule::Str(";", 1);
	return _43213_obj;
}



inline jule::Str _104e1b930_gen_ret_vars(jule::Ref<_104180810_RetSt> _44321_r) {
	jule::Str _44413_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _44321_r->_field_vars;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104598e40_Var> _104e1b930_v = *__julec_range_begin;
			_iter_begin_4398073504:;
			{
				if (_108e15ff0_is_ignore_ident(_104e1b930_v->_field_ident)) {
					_44413_obj+=_104ebd4a0_get_init_expr(_104e1b930_v->_field_kind->_field_kind);
				} else {
					_44413_obj+=_104f406e0_var_out_ident(_104e1b930_v);
				}
				_44413_obj+=jule::Str(",", 1);
			}
			_iter_next_4398073504:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104e1b930_v = *__julec_range_begin; goto _iter_begin_4398073504; }
			_iter_end_4398073504:;
		}
	}
	_44413_obj=_44413_obj.slice(0LL,static_cast<jule::Int>(_44413_obj.len() - 1LL));
	if (_44321_r->_field_vars.len() > 1LL) {
		_44413_obj=(jule::Str("return std::make_tuple(", 23) + _44413_obj) + jule::Str(")", 1);
	} else {
		_44413_obj=jule::Str("return ", 7) + _44413_obj;
	}
	_44413_obj+=jule::Str(";", 1);
	return _44413_obj;
}



inline jule::Str _104e1b930_gen_ret_expr_tuple(jule::Ref<_104180810_RetSt> _46727_r) {
	{
		auto _match_expr{ _46727_r->_field_expr };
		if (!(_match_expr.type_is<jule::Ref<_11911f320_FnCallExprModel>>())) { goto _case_end_4398082000; }
		_case_begin_4398082000:;
		{
			return (jule::Str("return ", 7) + _104ebd4a0_gen_expr_model(_46727_r->_field_expr)) + jule::Str(";", 1);
		}
		goto _match_end_4398079744;
		_case_end_4398082000:;
		_match_end_4398079744:;
	}
	jule::Slice<jule::Ref<_1191dc300_Data>> _47313_datas = _46727_r->_field_expr.operator jule::Ref<_11911f320_TupleExprModel>()->_field_datas;
	jule::Str _47413_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _46727_r->_field_vars;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104e1b930_i = 0;
			jule::Ref<_104598e40_Var> _104e1b930_v = *__julec_range_begin;
			_iter_begin_4398086896:;
			{
				if ((!(_108e15ff0_is_ignore_ident(_104e1b930_v->_field_ident)))) {
					jule::Str _47817_ident = _104f406e0_var_out_ident(_104e1b930_v);
					_47413_obj+=((_47817_ident + jule::Str(" = ", 3)) + _104ebd4a0_gen_expr(_47313_datas[static_cast<jule::Int>(_104e1b930_i)]->_field_model)) + jule::Str(";\n", 2);
					_47413_obj+=_1190c5fe0_indent();
				}
			}
			_iter_next_4398086896:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104e1b930_i; _104e1b930_v = *__julec_range_begin; goto _iter_begin_4398086896; }
			_iter_end_4398086896:;
		}
	}
	_47413_obj+=jule::Str("return std::make_tuple(", 23);
	{
		auto __julec_range_expr = _47313_datas;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104e1b930_i = 0;
			jule::Ref<_1191dc300_Data> _104e1b930_d = *__julec_range_begin;
			_iter_begin_4398088512:;
			{
				jule::Ref<_104598e40_Var> _48617_v = _46727_r->_field_vars[static_cast<jule::Int>(_104e1b930_i)];
				if (_108e15ff0_is_ignore_ident(_48617_v->_field_ident)) {
					_47413_obj+=_104ebd4a0_gen_expr(_104e1b930_d->_field_model);
				} else {
					_47413_obj+=_104f406e0_var_out_ident(_48617_v);
				}
				_47413_obj+=jule::Str(",", 1);
			}
			_iter_next_4398088512:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104e1b930_i; _104e1b930_d = *__julec_range_begin; goto _iter_begin_4398088512; }
			_iter_end_4398088512:;
		}
	}
	_47413_obj=_47413_obj.slice(0LL,static_cast<jule::Int>(_47413_obj.len() - 1LL));
	_47413_obj+=jule::Str(");", 2);
	return _47413_obj;
}



inline jule::Str _104e1b930_gen_ret_expr(jule::Ref<_104180810_RetSt> _50121_r) {
	if (_50121_r->_field_vars.len() == 0LL) {
		return (jule::Str("return ", 7) + _104ebd4a0_gen_expr(_50121_r->_field_expr)) + jule::Str(";", 1);
	}
	if (_50121_r->_field_vars.len() > 1LL) {
		return _104e1b930_gen_ret_expr_tuple(_50121_r);
	}
	if ((!(_108e15ff0_is_ignore_ident(_50121_r->_field_vars[0LL]->_field_ident)))) {
		jule::Str _51113_ident = _104f406e0_var_out_ident(_50121_r->_field_vars[0LL]);
		jule::Str _51217_obj = ((_51113_ident + jule::Str(" = ", 3)) + _104ebd4a0_gen_expr(_50121_r->_field_expr)) + jule::Str(";\n", 2);
		_51217_obj+=_1190c5fe0_indent();
		_51217_obj+=(jule::Str("return ", 7) + _51113_ident) + jule::Str(";", 1);
		return _51217_obj;
	}
	return (jule::Str("return ", 7) + _104ebd4a0_gen_expr(_50121_r->_field_expr)) + jule::Str(";", 1);
}



inline jule::Str _104e1b930_gen_ret_st(jule::Ref<_104180810_RetSt> _52119_r) {
	if ((_52119_r->_field_expr == nullptr) && (_52119_r->_field_vars.len() == 0LL)) {
		return jule::Str("return;", 7);
	}
	if (_52119_r->_field_expr == nullptr) {
		return _104e1b930_gen_ret_vars(_52119_r);
	}
	return _104e1b930_gen_ret_expr(_52119_r);
}



inline jule::Str _104e1b930_gen_ret_st_with_defaults(jule::Ref<_104a21a10_TypeKind> _53333_result) {
	jule::Str _53413_obj = jule::Str("return ", 7);
	if (jule::real(_53333_result->_method_tup())) {
		_53413_obj+=jule::Str("std::make_tuple(", 16);
		{
			auto __julec_range_expr = _53333_result->_method_tup()->_field_types;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_104a21a10_TypeKind> _104e1b930_t = *__julec_range_begin;
				_iter_begin_4398118320:;
				{
					_53413_obj+=_104ebd4a0_get_init_expr(_104e1b930_t);
					_53413_obj+=jule::Str(",", 1);
				}
				_iter_next_4398118320:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _104e1b930_t = *__julec_range_begin; goto _iter_begin_4398118320; }
				_iter_end_4398118320:;
			}
		}
		_53413_obj=_53413_obj.slice(0LL,static_cast<jule::Int>(_53413_obj.len() - 1LL));
		_53413_obj+=jule::Str(")", 1);
	} else {
		_53413_obj+=_104ebd4a0_get_init_expr(_53333_result);
	}
	_53413_obj+=jule::Str(";", 1);
	return _53413_obj;
}



inline jule::Str _104e1b930_gen_recover(jule::Ref<_104180810_Recover> _55020_r) {
	jule::Str _55113_obj = jule::Str("try ", 4);
	_55113_obj+=_104e1b930_gen_scope(_55020_r->_field_scope);
	_55113_obj+=jule::Str(" catch(jule::Exception e) ", 26);
	if (_55020_r->_field_handler->_method_is_anon()) {
		_1190c5fe0_add_indent();
		_55113_obj+=jule::Str("{\n", 2);
		_55113_obj+=_1190c5fe0_indent();
		_55113_obj+=_104ebd4a0_gen_expr(_55020_r->_field_handler_expr);
		_55113_obj+=jule::Str("(jule::exception_to_error(e));", 30);
		if ((!(_55020_r->_field_scope_owner->_field_decl->_method_is_void()))) {
			_55113_obj+=jule::Str("\n", 1);
			_55113_obj+=_1190c5fe0_indent();
			_1190c5fe0_done_indent();
			_55113_obj+=_104e1b930_gen_ret_st_with_defaults(_55020_r->_field_scope_owner->_field_result);
		} else {
			_1190c5fe0_done_indent();
		}
		_55113_obj+=jule::Str("\n", 1);
		_55113_obj+=_1190c5fe0_indent();
		_55113_obj+=jule::Str("}", 1);
	} else {
		_55113_obj+=jule::Str("{\n", 2);
		_1190c5fe0_add_indent();
		_55113_obj+=_1190c5fe0_indent();
		_55113_obj+=_104ebd4a0_gen_expr(_55020_r->_field_handler_expr);
		_55113_obj+=jule::Str("(jule::exception_to_error(e));\n", 31);
		_55113_obj+=_1190c5fe0_indent();
		if (_55020_r->_field_scope_owner->_field_decl->_method_is_void()) {
			_1190c5fe0_done_indent();
			_55113_obj+=jule::Str(" }", 2);
		} else {
			_55113_obj+=_104e1b930_gen_ret_st_with_defaults(_55020_r->_field_scope_owner->_field_result);
			_55113_obj+=jule::Str("\n", 1);
			_1190c5fe0_done_indent();
			_55113_obj+=_1190c5fe0_indent();
			_55113_obj+=jule::Str("}", 1);
		}
	}
	return _55113_obj;
}



inline jule::Str _104e1b930_gen_data_expr(jule::Ref<_1191dc300_Data> _59922_d) {
	return _104ebd4a0_gen_expr(_59922_d->_field_model) + jule::Str(";", 1);
}



inline jule::Str _104e1b930_gen_st(jule::Any _60415_st) {
	{
		auto _match_expr{ _60415_st };
		if (!(_match_expr.type_is<jule::Ref<_104180810_Scope>>())) { goto _case_end_4398143920; }
		_case_begin_4398143920:;
		{
			return _104e1b930_gen_scope(_60415_st.operator jule::Ref<_104180810_Scope>());
		}
		goto _match_end_4398142416;
		_case_end_4398143920:;
		if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4398142912; }
		_case_begin_4398142912:;
		{
			return _1190c5fe0_gen_var(_60415_st.operator jule::Ref<_104598e40_Var>());
		}
		goto _match_end_4398142416;
		_case_end_4398142912:;
		if (!(_match_expr.type_is<jule::Ref<_1191dc300_Data>>())) { goto _case_end_4398143024; }
		_case_begin_4398143024:;
		{
			return _104e1b930_gen_data_expr(_60415_st.operator jule::Ref<_1191dc300_Data>());
		}
		goto _match_end_4398142416;
		_case_end_4398143024:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_Conditional>>())) { goto _case_end_4398143136; }
		_case_begin_4398143136:;
		{
			return _104e1b930_gen_conditional(_60415_st.operator jule::Ref<_104180810_Conditional>());
		}
		goto _match_end_4398142416;
		_case_end_4398143136:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_InfIter>>())) { goto _case_end_4398144192; }
		_case_begin_4398144192:;
		{
			return _104e1b930_gen_inf_iter(_60415_st.operator jule::Ref<_104180810_InfIter>());
		}
		goto _match_end_4398142416;
		_case_end_4398144192:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_WhileIter>>())) { goto _case_end_4398144304; }
		_case_begin_4398144304:;
		{
			return _104e1b930_gen_while_iter(_60415_st.operator jule::Ref<_104180810_WhileIter>());
		}
		goto _match_end_4398142416;
		_case_end_4398144304:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_RangeIter>>())) { goto _case_end_4398144416; }
		_case_begin_4398144416:;
		{
			return _104e1b930_gen_range_iter(_60415_st.operator jule::Ref<_104180810_RangeIter>());
		}
		goto _match_end_4398142416;
		_case_end_4398144416:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_ContSt>>())) { goto _case_end_4398144528; }
		_case_begin_4398144528:;
		{
			return _104e1b930_gen_cont(_60415_st.operator jule::Ref<_104180810_ContSt>());
		}
		goto _match_end_4398142416;
		_case_end_4398144528:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_Label>>())) { goto _case_end_4398144688; }
		_case_begin_4398144688:;
		{
			return _104e1b930_gen_label(_60415_st.operator jule::Ref<_104180810_Label>());
		}
		goto _match_end_4398142416;
		_case_end_4398144688:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_GotoSt>>())) { goto _case_end_4398144800; }
		_case_begin_4398144800:;
		{
			return _104e1b930_gen_goto(_60415_st.operator jule::Ref<_104180810_GotoSt>());
		}
		goto _match_end_4398142416;
		_case_end_4398144800:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_Postfix>>())) { goto _case_end_4398144912; }
		_case_begin_4398144912:;
		{
			return _104e1b930_gen_postfix(_60415_st.operator jule::Ref<_104180810_Postfix>());
		}
		goto _match_end_4398142416;
		_case_end_4398144912:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_Assign>>())) { goto _case_end_4398145024; }
		_case_begin_4398145024:;
		{
			return _104e1b930_gen_assign(_60415_st.operator jule::Ref<_104180810_Assign>());
		}
		goto _match_end_4398142416;
		_case_end_4398145024:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_MultiAssign>>())) { goto _case_end_4398145136; }
		_case_begin_4398145136:;
		{
			return _104e1b930_gen_multi_assign(_60415_st.operator jule::Ref<_104180810_MultiAssign>());
		}
		goto _match_end_4398142416;
		_case_end_4398145136:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_Match>>())) { goto _case_end_4398145248; }
		_case_begin_4398145248:;
		{
			return _104e1b930_gen_match(_60415_st.operator jule::Ref<_104180810_Match>());
		}
		goto _match_end_4398142416;
		_case_end_4398145248:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_FallSt>>())) { goto _case_end_4398145360; }
		_case_begin_4398145360:;
		{
			return _104e1b930_gen_fall_st(_60415_st.operator jule::Ref<_104180810_FallSt>());
		}
		goto _match_end_4398142416;
		_case_end_4398145360:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_BreakSt>>())) { goto _case_end_4398145472; }
		_case_begin_4398145472:;
		{
			return _104e1b930_gen_break_st(_60415_st.operator jule::Ref<_104180810_BreakSt>());
		}
		goto _match_end_4398142416;
		_case_end_4398145472:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_RetSt>>())) { goto _case_end_4398145584; }
		_case_begin_4398145584:;
		{
			return _104e1b930_gen_ret_st(_60415_st.operator jule::Ref<_104180810_RetSt>());
		}
		goto _match_end_4398142416;
		_case_end_4398145584:;
		if (!(_match_expr.type_is<jule::Ref<_104180810_Recover>>())) { goto _case_end_4398145696; }
		_case_begin_4398145696:;
		{
			return _104e1b930_gen_recover(_60415_st.operator jule::Ref<_104180810_Recover>());
		}
		goto _match_end_4398142416;
		_case_end_4398145696:;
		_case_begin_4398142512:;
		{
			return jule::Str("<unimplemented_stmt>", 20);
		}
		goto _match_end_4398142416;
		_case_end_4398142512:;
		_match_end_4398142416:;
	}
}



inline jule::Str _104e1b930_gen_scope(jule::Ref<_104180810_Scope> _62918_s) {
	jule::Str _63013_obj = jule::Str("{\n", 2);
	_1190c5fe0_add_indent();
	{
		auto __julec_range_expr = _62918_s->_field_stmts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _104e1b930_st = *__julec_range_begin;
			_iter_begin_4398173616:;
			{
				_63013_obj+=_1190c5fe0_indent();
				_63013_obj+=_104e1b930_gen_st(_104e1b930_st);
				_63013_obj+=jule::Str("\n", 1);
			}
			_iter_next_4398173616:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104e1b930_st = *__julec_range_begin; goto _iter_begin_4398173616; }
			_iter_end_4398173616:;
		}
	}
	_1190c5fe0_done_indent();
	_63013_obj+=_1190c5fe0_indent();
	_63013_obj+=jule::Str("}", 1);
	if (_62918_s->_field_deferred) {
		_63013_obj=(jule::Str("__JULE_DEFER(", 13) + _63013_obj) + jule::Str(");", 2);
	}
	return _63013_obj;
}



inline jule::Str _104e1b930_gen_fn_scope(jule::Ref<_1037649f0_FnIns> _65121_f) {
	if (jule::real(_65121_f->_field_owner)) {
		return _104e1b930_gen_method_scope(_65121_f);
	}
	return _104e1b930_gen_scope(_65121_f->_field_scope);
}



inline jule::Str _104e1b930_gen_method_scope(jule::Ref<_1037649f0_FnIns> _66025_f) {
	return _104e1b930_gen_scope(_66025_f->_field_scope);
}



inline jule::Str _104ebd4a0_concat_all_parts(jule::Slice<jule::Str> _7621_parts) {
	jule::Str _7713_s = jule::Str("", 0);
	{
		auto __julec_range_expr = _7621_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _104ebd4a0_part = *__julec_range_begin;
			_iter_begin_4398183472:;
			{
				_7713_s+=_104ebd4a0_part;
			}
			_iter_next_4398183472:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104ebd4a0_part = *__julec_range_begin; goto _iter_begin_4398183472; }
			_iter_end_4398183472:;
		}
	}
	return _7713_s;
}



inline jule::Str _104ebd4a0_get_accessor(jule::Ref<_104a21a10_TypeKind> _8421_t) {
	if (jule::real(_8421_t->_method_ref()) || jule::real(_8421_t->_method_ptr())) {
		return jule::Str("->", 2);
	}
	return jule::Str(".", 1);
}



inline jule::Str _104ebd4a0_decompose_common_esq(jule::U8 _9125_b) {
	{
		auto _match_expr{ _9125_b };
		if (!(('\\') == _match_expr)) { goto _case_end_4398188944; }
		_case_begin_4398188944:;
		{
			return jule::Str("\\\\", 2);
		}
		goto _match_end_4398187824;
		_case_end_4398188944:;
		if (!(('\'') == _match_expr)) { goto _case_end_4398189056; }
		_case_begin_4398189056:;
		{
			return jule::Str("'", 1);
		}
		goto _match_end_4398187824;
		_case_end_4398189056:;
		if (!(('\"') == _match_expr)) { goto _case_end_4398189936; }
		_case_begin_4398189936:;
		{
			return jule::Str("\\\"", 2);
		}
		goto _match_end_4398187824;
		_case_end_4398189936:;
		if (!(('\a') == _match_expr)) { goto _case_end_4398190048; }
		_case_begin_4398190048:;
		{
			return jule::Str("\\a", 2);
		}
		goto _match_end_4398187824;
		_case_end_4398190048:;
		if (!(('\b') == _match_expr)) { goto _case_end_4398190160; }
		_case_begin_4398190160:;
		{
			return jule::Str("\\b", 2);
		}
		goto _match_end_4398187824;
		_case_end_4398190160:;
		if (!(('\f') == _match_expr)) { goto _case_end_4398190272; }
		_case_begin_4398190272:;
		{
			return jule::Str("\\f", 2);
		}
		goto _match_end_4398187824;
		_case_end_4398190272:;
		if (!(('\n') == _match_expr)) { goto _case_end_4398189248; }
		_case_begin_4398189248:;
		{
			return jule::Str("\\n", 2);
		}
		goto _match_end_4398187824;
		_case_end_4398189248:;
		if (!(('\r') == _match_expr)) { goto _case_end_4398189360; }
		_case_begin_4398189360:;
		{
			return jule::Str("\\r", 2);
		}
		goto _match_end_4398187824;
		_case_end_4398189360:;
		if (!(('\t') == _match_expr)) { goto _case_end_4398189488; }
		_case_begin_4398189488:;
		{
			return jule::Str("\\t", 2);
		}
		goto _match_end_4398187824;
		_case_end_4398189488:;
		if (!(('\v') == _match_expr)) { goto _case_end_4398189616; }
		_case_begin_4398189616:;
		{
			return jule::Str("\\v", 2);
		}
		goto _match_end_4398187824;
		_case_end_4398189616:;
		_case_begin_4398188192:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4398187824;
		_case_end_4398188192:;
		_match_end_4398187824:;
	}
}



inline jule::Str _104ebd4a0_sbtoa(jule::U8 _10710_b) {
	if (_10710_b == 0LL) {
		return jule::Str("\\x00", 4);
	}
	if (_10710_b <= 127LL) {
		jule::Str _11313_seq = _104ebd4a0_decompose_common_esq(_10710_b);
		if (_11313_seq != jule::Str("", 0)) {
			return _11313_seq;
		}
		if ((32LL <= _10710_b) && (_10710_b <= 126LL)) {
			return static_cast<jule::Str>(_10710_b);
		}
	}
	jule::Str _1239_seq = _1486fb320_fmt_uint(static_cast<jule::U64>(_10710_b),8LL);
	if (_1239_seq.len() == 2LL) {
		return jule::Str("\\0", 2) + _1239_seq;
	}
	return jule::Str("\\", 1) + _1239_seq;
}



inline jule::Str _104ebd4a0_get_str_model(jule::Ref<_104c409b0_Const> _13018_c) {
	jule::Str _1319_content = _13018_c->_method_read_str();
	jule::Slice<jule::U8> _1329_bytes = static_cast<jule::Slice<jule::U8>>(_1319_content);
	jule::Str _1339_len = _1486fb320_fmt_int(static_cast<jule::I64>(_1329_bytes.len()),10LL);
	jule::Str _13513_lit = jule::Str("", 0);
	{
		auto __julec_range_expr = _1329_bytes;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::U8 _104ebd4a0_b = *__julec_range_begin;
			_iter_begin_4398209376:;
			{
				_13513_lit+=_104ebd4a0_sbtoa(_104ebd4a0_b);
			}
			_iter_next_4398209376:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104ebd4a0_b = *__julec_range_begin; goto _iter_begin_4398209376; }
			_iter_end_4398209376:;
		}
	}
	return ((((_104f406e0_as_jt(jule::Str("str", 3)) + jule::Str("(\"", 2)) + _13513_lit) + jule::Str("\", ", 3)) + _1339_len) + jule::Str(")", 1);
}



inline jule::Str _104ebd4a0_get_bool_model(jule::Ref<_104c409b0_Const> _14319_c) {
	if (_14319_c->_method_read_bool()) {
		return jule::Str("true", 4);
	}
	return jule::Str("false", 5);
}



inline jule::Str _104ebd4a0_get_nil_model(void) {
	return jule::Str("nullptr", 7);
}



inline jule::Str _104ebd4a0_gen_float_special_cases(jule::F64 _15228_x) {
	{
		if (!((_10862f890_is_nan(_15228_x)))) { goto _case_end_4398215536; }
		_case_begin_4398215536:;
		{
			return jule::Str("NAN", 3);
		}
		goto _match_end_4398215040;
		_case_end_4398215536:;
		if (!((_10862f890_is_inf(_15228_x,1LL)))) { goto _case_end_4398215648; }
		_case_begin_4398215648:;
		{
			return jule::Str("INFINITY", 8);
		}
		goto _match_end_4398215040;
		_case_end_4398215648:;
		if (!((_10862f890_is_inf(_15228_x,-1LL)))) { goto _case_end_4398215760; }
		_case_begin_4398215760:;
		{
			return jule::Str("-INFINITY", 9);
		}
		goto _match_end_4398215040;
		_case_end_4398215760:;
		_case_begin_4398215168:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4398215040;
		_case_end_4398215168:;
		_match_end_4398215040:;
	}
}



inline jule::Str _104ebd4a0_ftoa(jule::F64 _1619_f,jule::Int _16117_bitsize) {
	if (_16117_bitsize != 32LL) {
		if (_1619_f == static_cast<jule::F64>(static_cast<jule::I64>(_1619_f))) {
			return _104ebd4a0_i64toa(static_cast<jule::I64>(_1619_f));
		}
		if (_1619_f == static_cast<jule::F64>(static_cast<jule::U64>(_1619_f))) {
			return _104ebd4a0_u64toa(static_cast<jule::U64>(_1619_f));
		}
	}
	jule::Str _17113_m = _11863fd30_fmt_float(_1619_f,'f',-1LL,_16117_bitsize);
	if (_17113_m.find(jule::Str(".", 1)) == -1LL) {
		_17113_m+=jule::Str(".0", 2);
	}
	return _17113_m;
}



inline jule::Str _104ebd4a0_get_f32_model(jule::Ref<_104c409b0_Const> _17818_c) {
	jule::F64 _1799_x = _17818_c->_method_as_f64();
	jule::Str _1829_f = _104ebd4a0_gen_float_special_cases(_1799_x);
	if (_1829_f != jule::Str("", 0)) {
		return _1829_f;
	}
	{
		if (!((_1799_x == 340282346638528860000000000000000000000.0))) { goto _case_end_4398232592; }
		_case_begin_4398232592:;
		{
			return jule::Str("jule::MAX_F32", 13);
		}
		goto _match_end_4398231360;
		_case_end_4398232592:;
		if (!((_1799_x == -340282346638528860000000000000000000000.0))) { goto _case_end_4398232704; }
		_case_begin_4398232704:;
		{
			return jule::Str("jule::MIN_F32", 13);
		}
		goto _match_end_4398231360;
		_case_end_4398232704:;
		_match_end_4398231360:;
	}
	return _104ebd4a0_ftoa(_1799_x,32LL) + jule::Str("f", 1);
}



inline jule::Str _104ebd4a0_get_f64_model(jule::Ref<_104c409b0_Const> _19518_c) {
	jule::F64 _1969_x = _19518_c->_method_as_f64();
	jule::Str _1999_f = _104ebd4a0_gen_float_special_cases(_1969_x);
	if (_1999_f != jule::Str("", 0)) {
		return _1999_f;
	}
	{
		if (!((_1969_x == jule::MAX_F64))) { goto _case_end_4398239312; }
		_case_begin_4398239312:;
		{
			return jule::Str("jule::MAX_F64", 13);
		}
		goto _match_end_4398238080;
		_case_end_4398239312:;
		if (!((_1969_x == jule::MIN_F64))) { goto _case_end_4398239424; }
		_case_begin_4398239424:;
		{
			return jule::Str("jule::MIN_F64", 13);
		}
		goto _match_end_4398238080;
		_case_end_4398239424:;
		_match_end_4398238080:;
	}
	return _104ebd4a0_ftoa(_1969_x,64LL);
}



inline jule::Str _104ebd4a0_get_float_model(jule::Ref<_1191dc300_Data> _21224_d) {
	{
		if (!((_21224_d->_field_kind->_method_prim()->_method_is_f32()))) { goto _case_end_4398243296; }
		_case_begin_4398243296:;
		{
			return _104ebd4a0_get_f32_model(_21224_d->_field_constant);
		}
		goto _match_end_4398241728;
		_case_end_4398243296:;
		_case_begin_4398241952:;
		{
			return _104ebd4a0_get_f64_model(_21224_d->_field_constant);
		}
		goto _match_end_4398241728;
		_case_end_4398241952:;
		_match_end_4398241728:;
	}
}



inline jule::Str _104ebd4a0_i64toa(jule::I64 _21911_x) {
	{
		if (!((_21911_x == jule::MAX_I64))) { goto _case_end_4398244768; }
		_case_begin_4398244768:;
		{
			return jule::Str("jule::MAX_I64", 13);
		}
		goto _match_end_4398242112;
		_case_end_4398244768:;
		if (!((_21911_x == jule::MIN_I64))) { goto _case_end_4398244896; }
		_case_begin_4398244896:;
		{
			return jule::Str("jule::MIN_I64", 13);
		}
		goto _match_end_4398242112;
		_case_end_4398244896:;
		_match_end_4398242112:;
	}
	jule::Str _2259_fmt = _1486fb320_fmt_int(_21911_x,10LL);
	if (_14903a5c0_is_64bit(jule::Str("amd64", 5))) {
		return _2259_fmt + jule::Str("LL", 2);
	}
	return _2259_fmt + jule::Str("L", 1);
}



inline jule::Str _104ebd4a0_get_i64_model(jule::Ref<_104c409b0_Const> _23218_c) {
	return _104ebd4a0_i64toa(static_cast<jule::I64>(_23218_c->_method_read_i64()));
}



inline jule::Str _104ebd4a0_u64toa(jule::U64 _23611_x) {
	{
		if (!((_23611_x == jule::MAX_U64))) { goto _case_end_4398252864; }
		_case_begin_4398252864:;
		{
			return jule::Str("jule::MAX_U64", 13);
		}
		goto _match_end_4398252736;
		_case_end_4398252864:;
		_match_end_4398252736:;
	}
	jule::Str _2429_fmt = _1486fb320_fmt_uint(_23611_x,10LL);
	if (_14903a5c0_is_64bit(jule::Str("amd64", 5))) {
		return _2429_fmt + jule::Str("LLU", 3);
	}
	return _2429_fmt + jule::Str("LU", 2);
}



inline jule::Str _104ebd4a0_get_u64_model(jule::Ref<_104c409b0_Const> _24918_c) {
	return _104ebd4a0_u64toa(static_cast<jule::U64>(_24918_c->_method_read_u64()));
}



inline jule::Str _104ebd4a0_gen_const_expr(jule::Ref<_1191dc300_Data> _25323_d) {
	{
		if (!((_25323_d->_field_constant->_method_is_str()))) { goto _case_end_4398259616; }
		_case_begin_4398259616:;
		{
			return _104ebd4a0_get_str_model(_25323_d->_field_constant);
		}
		goto _match_end_4398259104;
		_case_end_4398259616:;
		if (!((_25323_d->_field_constant->_method_is_bool()))) { goto _case_end_4398259728; }
		_case_begin_4398259728:;
		{
			return _104ebd4a0_get_bool_model(_25323_d->_field_constant);
		}
		goto _match_end_4398259104;
		_case_end_4398259728:;
		if (!((_25323_d->_field_constant->_method_is_f64()))) { goto _case_end_4398260896; }
		_case_begin_4398260896:;
		{
			return _104ebd4a0_get_float_model(_25323_d);
		}
		goto _match_end_4398259104;
		_case_end_4398260896:;
		if (!((_25323_d->_field_constant->_method_is_i64()))) { goto _case_end_4398261008; }
		_case_begin_4398261008:;
		{
			return _104ebd4a0_get_i64_model(_25323_d->_field_constant);
		}
		goto _match_end_4398259104;
		_case_end_4398261008:;
		if (!((_25323_d->_field_constant->_method_is_u64()))) { goto _case_end_4398261120; }
		_case_begin_4398261120:;
		{
			return _104ebd4a0_get_u64_model(_25323_d->_field_constant);
		}
		goto _match_end_4398259104;
		_case_end_4398261120:;
		if (!((_25323_d->_field_constant->_method_is_nil()))) { goto _case_end_4398261232; }
		_case_begin_4398261232:;
		{
			return _104ebd4a0_get_nil_model();
		}
		goto _match_end_4398259104;
		_case_end_4398261232:;
		_case_begin_4398259200:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4398259104;
		_case_end_4398259200:;
		_match_end_4398259104:;
	}
}



inline jule::Str _104ebd4a0_gen_const_expr_model(jule::Ref<_104c409b0_Const> _26525_m) {
	{
		if (!((_26525_m->_method_is_str()))) { goto _case_end_4398270784; }
		_case_begin_4398270784:;
		{
			return _104ebd4a0_get_str_model(_26525_m);
		}
		goto _match_end_4398270560;
		_case_end_4398270784:;
		if (!((_26525_m->_method_is_bool()))) { goto _case_end_4398270896; }
		_case_begin_4398270896:;
		{
			return _104ebd4a0_get_bool_model(_26525_m);
		}
		goto _match_end_4398270560;
		_case_end_4398270896:;
		if (!((_26525_m->_method_is_f64()))) { goto _case_end_4398272016; }
		_case_begin_4398272016:;
		{
			return _104ebd4a0_get_f64_model(_26525_m);
		}
		goto _match_end_4398270560;
		_case_end_4398272016:;
		if (!((_26525_m->_method_is_i64()))) { goto _case_end_4398272128; }
		_case_begin_4398272128:;
		{
			return _104ebd4a0_get_i64_model(_26525_m);
		}
		goto _match_end_4398270560;
		_case_end_4398272128:;
		if (!((_26525_m->_method_is_u64()))) { goto _case_end_4398272240; }
		_case_begin_4398272240:;
		{
			return _104ebd4a0_get_u64_model(_26525_m);
		}
		goto _match_end_4398270560;
		_case_end_4398272240:;
		if (!((_26525_m->_method_is_nil()))) { goto _case_end_4398272352; }
		_case_begin_4398272352:;
		{
			return _104ebd4a0_get_nil_model();
		}
		goto _match_end_4398270560;
		_case_end_4398272352:;
		_case_begin_4398268160:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4398270560;
		_case_end_4398268160:;
		_match_end_4398270560:;
	}
}



inline jule::Str _104ebd4a0_gen_binop_expr_model(jule::Ref<_11911f320_BinopExprModel> _27729_m) {
	{
		auto _match_expr{ _27729_m->_field_op };
		if (!((jule::Str("/", 1)) == _match_expr)) { goto _case_end_4398282896; }
		_case_begin_4398282896:;
		{
			jule::Str _28017_obj = jule::Str("jule::div(", 10);
			_28017_obj+=_104ebd4a0_gen_expr(_27729_m->_field_left);
			_28017_obj+=jule::Str(",", 1);
			_28017_obj+=_104ebd4a0_gen_expr(_27729_m->_field_right);
			_28017_obj+=jule::Str(")", 1);
			return _28017_obj;
		}
		goto _match_end_4398278176;
		_case_end_4398282896:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4398282464; }
		_case_begin_4398282464:;
		{
			jule::Str _28817_obj = jule::Str("jule::mod(", 10);
			_28817_obj+=_104ebd4a0_gen_expr(_27729_m->_field_left);
			_28817_obj+=jule::Str(",", 1);
			_28817_obj+=_104ebd4a0_gen_expr(_27729_m->_field_right);
			_28817_obj+=jule::Str(")", 1);
			return _28817_obj;
		}
		goto _match_end_4398278176;
		_case_end_4398282464:;
		_case_begin_4398278416:;
		{
			jule::Str _29617_obj = jule::Str("(", 1);
			_29617_obj+=_104ebd4a0_gen_expr_model(_27729_m->_field_left);
			_29617_obj+=jule::Str(" ", 1);
			_29617_obj+=_27729_m->_field_op;
			_29617_obj+=jule::Str(" ", 1);
			_29617_obj+=_104ebd4a0_gen_expr_model(_27729_m->_field_right);
			_29617_obj+=jule::Str(")", 1);
			return _29617_obj;
		}
		goto _match_end_4398278176;
		_case_end_4398278416:;
		_match_end_4398278176:;
	}
}



inline jule::Str _104ebd4a0_gen_var_expr_model(jule::Ref<_104598e40_Var> _30727_m) {
	if (_30727_m->_field_cpp_linked) {
		jule::Ref<_1487f5920_Directive> _30913_d = _104f69330_find_directive(_30727_m->_field_directives,jule::Str("namespace", 9));
		if (jule::real(_30913_d)) {
			return (_104ebd4a0_concat_all_parts(_30913_d->_field_args) + jule::Str("::", 2)) + _104f406e0_var_out_ident(_30727_m);
		}
	}
	return _104f406e0_var_out_ident(_30727_m);
}



inline jule::Str _104ebd4a0_gen_struct_expr_model(jule::Ref<_1037370d0_Struct> _31726_m) {
	return _104f69330_gen_struct_kind(_31726_m);
}



inline jule::Str _104ebd4a0_gen_struct_ins_expr_model(jule::Ref<_1037370d0_StructIns> _32134_m) {
	return _104f69330_gen_struct_kind_ins(_32134_m);
}



inline jule::Str _104ebd4a0_gen_unary_expr_model(jule::Ref<_11911f320_UnaryExprModel> _32529_m) {
	{
		auto _match_expr{ _32529_m->_field_op };
		if (!((jule::Str("^", 1)) == _match_expr)) { goto _case_end_4398300384; }
		_case_begin_4398300384:;
		{
			return (jule::Str("(~(", 3) + _104ebd4a0_gen_expr(_32529_m->_field_expr)) + jule::Str("))", 2);
		}
		goto _match_end_4398293168;
		_case_end_4398300384:;
		_case_begin_4398297376:;
		{
			return (((jule::Str("(", 1) + _32529_m->_field_op) + jule::Str("(", 1)) + _104ebd4a0_gen_expr(_32529_m->_field_expr)) + jule::Str("))", 2);
		}
		goto _match_end_4398293168;
		_case_end_4398297376:;
		_match_end_4398293168:;
	}
}



inline jule::Str _104ebd4a0_gen_get_ref_ptr_expr_model(jule::Ref<_11911f320_GetRefPtrExprModel> _33235_m) {
	return (jule::Str("(", 1) + _104ebd4a0_gen_expr(_33235_m->_field_expr)) + jule::Str(").alloc", 7);
}



inline jule::Str _104ebd4a0_gen_cpp_struct_lit_expr_model(jule::Ref<_11911f320_StructLitExprModel> _33638_m) {
	jule::Str _33713_obj = jule::Str("(", 1) + _104f69330_gen_struct_kind_ins(_33638_m->_field_strct);
	_33713_obj+=jule::Str("){", 2);
	if (_33638_m->_field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto __julec_range_expr = _33638_m->_field_strct->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1037370d0_FieldIns> _104ebd4a0_f = *__julec_range_begin;
				_iter_begin_4398306960:;
				{
					if (_33638_m->_field_strct->_field_decl->_field_cpp_linked) {
						{
							auto __julec_range_expr = _33638_m->_field_args;
							if (__julec_range_expr.begin() != __julec_range_expr.end()) {
								auto __julec_range_begin = __julec_range_expr.begin();
								const auto __julec_range_end = __julec_range_expr.end();
								jule::Ref<_11911f320_StructArgExprModel> _104ebd4a0_arg = *__julec_range_begin;
								_iter_begin_4398309776:;
								{
									if (_104ebd4a0_arg->_field_field == _104ebd4a0_f) {
										_33713_obj+=jule::Str(".", 1);
										_33713_obj+=_104f406e0_field_out_ident(_104ebd4a0_f->_field_decl);
										_33713_obj+=jule::Str("=", 1);
										_33713_obj+=_104ebd4a0_gen_expr(_104ebd4a0_arg->_field_expr) + jule::Str(",", 1);
										goto _iter_next_4398306960;
									}
								}
								_iter_next_4398309776:;
								++__julec_range_begin;
								if (__julec_range_begin != __julec_range_end) { _104ebd4a0_arg = *__julec_range_begin; goto _iter_begin_4398309776; }
								_iter_end_4398309776:;
							}
						}
						goto _iter_next_4398306960;
					}
					_33713_obj+=_104f406e0_field_out_ident(_104ebd4a0_f->_field_decl) + jule::Str(": ", 2);
					{
						auto __julec_range_expr = _33638_m->_field_args;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Ref<_11911f320_StructArgExprModel> _104ebd4a0_arg = *__julec_range_begin;
							_iter_begin_4398308624:;
							{
								if (_104ebd4a0_arg->_field_field == _104ebd4a0_f) {
									_33713_obj+=_104ebd4a0_gen_expr(_104ebd4a0_arg->_field_expr) + jule::Str(",", 1);
									goto _iter_next_4398306960;
								}
							}
							_iter_next_4398308624:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _104ebd4a0_arg = *__julec_range_begin; goto _iter_begin_4398308624; }
							_iter_end_4398308624:;
						}
					}
					_33713_obj+=_104ebd4a0_get_init_expr(_104ebd4a0_f->_field_kind) + jule::Str(",", 1);
				}
				_iter_next_4398306960:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _104ebd4a0_f = *__julec_range_begin; goto _iter_begin_4398306960; }
				_iter_end_4398306960:;
			}
		}
		_33713_obj=_33713_obj.slice(0LL,static_cast<jule::Int>(_33713_obj.len() - 1LL));
	}
	_33713_obj+=jule::Str("}", 1);
	return _33713_obj;
}



inline jule::Str _104ebd4a0_gen_struct_lit_expr_model(jule::Ref<_11911f320_StructLitExprModel> _37034_m) {
	if (_37034_m->_field_strct->_field_decl->_field_cpp_linked) {
		return _104ebd4a0_gen_cpp_struct_lit_expr_model(_37034_m);
	}
	jule::Str _37513_obj = _104f406e0_struct_ins_out_ident(_37034_m->_field_strct);
	_37513_obj+=jule::Str("(", 1);
	if (_37034_m->_field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto __julec_range_expr = _37034_m->_field_strct->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1037370d0_FieldIns> _104ebd4a0_f = *__julec_range_begin;
				_iter_begin_4398327168:;
				{
					{
						auto __julec_range_expr = _37034_m->_field_args;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Ref<_11911f320_StructArgExprModel> _104ebd4a0_arg = *__julec_range_begin;
							_iter_begin_4398329056:;
							{
								if (_104ebd4a0_arg->_field_field == _104ebd4a0_f) {
									_37513_obj+=_104ebd4a0_gen_expr(_104ebd4a0_arg->_field_expr) + jule::Str(",", 1);
									goto _iter_next_4398327168;
								}
							}
							_iter_next_4398329056:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _104ebd4a0_arg = *__julec_range_begin; goto _iter_begin_4398329056; }
							_iter_end_4398329056:;
						}
					}
					_37513_obj+=_104ebd4a0_get_init_expr(_104ebd4a0_f->_field_kind) + jule::Str(",", 1);
				}
				_iter_next_4398327168:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _104ebd4a0_f = *__julec_range_begin; goto _iter_begin_4398327168; }
				_iter_end_4398327168:;
			}
		}
		_37513_obj=_37513_obj.slice(0LL,static_cast<jule::Int>(_37513_obj.len() - 1LL));
	}
	_37513_obj+=jule::Str(")", 1);
	return _37513_obj;
}



inline jule::Str _104ebd4a0_gen_alloc_struct_lit_expr_model(jule::Ref<_11911f320_AllocStructLitExprModel> _39440_m) {
	jule::Str _39513_obj = jule::Str("jule::new_struct<", 17);
	_39513_obj+=_104f406e0_struct_out_ident(_39440_m->_field_lit->_field_strct->_field_decl);
	_39513_obj+=jule::Str(">(new( std::nothrow ) ", 22);
	_39513_obj+=_104ebd4a0_gen_struct_lit_expr_model(_39440_m->_field_lit);
	_39513_obj+=jule::Str(")", 1);
	return _39513_obj;
}



inline jule::Str _104ebd4a0_gen_casting_expr_model(jule::Ref<_11911f320_CastingExprModel> _40331_m) {
	jule::Str _40413_obj = jule::Str("", 0);
	{
		if (!((jule::real(_40331_m->_field_kind->_method_prim()) && _40331_m->_field_kind->_method_prim()->_method_is_any()))) { goto _case_end_4398341888; }
		_case_begin_4398341888:;
		{
			_40413_obj+=_104f69330_gen_type_kind(_40331_m->_field_kind);
			_40413_obj+=jule::Str("(", 1);
			_40413_obj+=_104ebd4a0_gen_expr_model(_40331_m->_field_expr);
			_40413_obj+=jule::Str(")", 1);
		}
		goto _match_end_4398340880;
		_case_end_4398341888:;
		if (!((jule::real(_40331_m->_field_expr_kind->_method_ptr())) || (jule::real(_40331_m->_field_kind->_method_ptr())))) { goto _case_end_4398344368; }
		_case_begin_4398344368:;
		{
			_40413_obj+=jule::Str("((", 2);
			_40413_obj+=_104f69330_gen_type_kind(_40331_m->_field_kind);
			_40413_obj+=jule::Str(")(", 2);
			_40413_obj+=_104ebd4a0_gen_expr(_40331_m->_field_expr);
			_40413_obj+=jule::Str("))", 2);
		}
		goto _match_end_4398340880;
		_case_end_4398344368:;
		if (!((jule::real(_40331_m->_field_expr_kind->_method_trt())) || (jule::real(_40331_m->_field_expr_kind->_method_prim()) && _40331_m->_field_expr_kind->_method_prim()->_method_is_any()))) { goto _case_end_4398344688; }
		_case_begin_4398344688:;
		{
			_40413_obj+=_104ebd4a0_gen_expr_model(_40331_m->_field_expr);
			_40413_obj+=_104ebd4a0_get_accessor(_40331_m->_field_expr_kind);
			_40413_obj+=jule::Str("operator ", 9);
			_40413_obj+=_104f69330_gen_type_kind(_40331_m->_field_kind);
			_40413_obj+=jule::Str("()", 2);
		}
		goto _match_end_4398340880;
		_case_end_4398344688:;
		_case_begin_4398341072:;
		{
			_40413_obj+=jule::Str("static_cast<", 12);
			_40413_obj+=_104f69330_gen_type_kind(_40331_m->_field_kind);
			_40413_obj+=jule::Str(">(", 2);
			_40413_obj+=_104ebd4a0_gen_expr(_40331_m->_field_expr);
			_40413_obj+=jule::Str(")", 1);
		}
		goto _match_end_4398340880;
		_case_end_4398341072:;
		_match_end_4398340880:;
	}
	return _40413_obj;
}



inline jule::Str _104ebd4a0_gen_arg_expr_models(jule::Slice<jule::Any> _43828_models) {
	if (_43828_models.len() == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _44313_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _43828_models;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _104ebd4a0_m = *__julec_range_begin;
			_iter_begin_4398358752:;
			{
				_44313_obj+=_104ebd4a0_gen_expr(_104ebd4a0_m) + jule::Str(",", 1);
			}
			_iter_next_4398358752:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104ebd4a0_m = *__julec_range_begin; goto _iter_begin_4398358752; }
			_iter_end_4398358752:;
		}
	}
	_44313_obj=_44313_obj.slice(0LL,static_cast<jule::Int>(_44313_obj.len() - 1LL));
	return _44313_obj;
}



inline jule::Str _104ebd4a0_gen_fn_call_expr_model(jule::Ref<_11911f320_FnCallExprModel> _45131_m) {
	jule::Str _45213_obj = _104ebd4a0_gen_expr_model(_45131_m->_field_expr);
	if ((!(_45131_m->_field_func->_method_is_builtin()))) {
		if (_45131_m->_field_func->_field_decl->_field_cpp_linked && (_45131_m->_field_func->_field_generics.len() > 0LL)) {
			if ((!(_104f69330_has_directive(_45131_m->_field_func->_field_decl->_field_directives,jule::Str("cdef", 4))))) {
				_45213_obj+=jule::Str("<", 1);
				{
					auto __julec_range_expr = _45131_m->_field_func->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_104a21a10_TypeKind> _104ebd4a0_g = *__julec_range_begin;
						_iter_begin_4398367472:;
						{
							_45213_obj+=_104f69330_gen_type_kind(_104ebd4a0_g) + jule::Str(",", 1);
						}
						_iter_next_4398367472:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _104ebd4a0_g = *__julec_range_begin; goto _iter_begin_4398367472; }
						_iter_end_4398367472:;
					}
				}
				_45213_obj=_45213_obj.slice(0LL,static_cast<jule::Int>(_45213_obj.len() - 1LL));
				_45213_obj+=jule::Str(">", 1);
			}
		}
	}
	_45213_obj+=jule::Str("(", 1);
	_45213_obj+=_104ebd4a0_gen_arg_expr_models(_45131_m->_field_args);
	_45213_obj+=jule::Str(")", 1);
	if (_45131_m->_field_is_co) {
		_45213_obj=(jule::Str("__JULE_CO(", 10) + _45213_obj) + jule::Str(")", 1);
	}
	return _45213_obj;
}



inline jule::Str _104ebd4a0_gen_slice_expr_model(jule::Ref<_11911f320_SliceExprModel> _47629_m) {
	jule::Str _47713_obj = _104f69330_as_slice_kind(_47629_m->_field_elem_kind);
	_47713_obj+=jule::Str("({", 2);
	_47713_obj+=_104ebd4a0_gen_arg_expr_models(_47629_m->_field_elems);
	_47713_obj+=jule::Str("})", 2);
	return _47713_obj;
}



inline jule::Str _104ebd4a0_gen_indexing_expr_model(jule::Ref<_11911f320_IndexigExprModel> _48432_m) {
	jule::Str _48513_obj = _104ebd4a0_gen_expr_model(_48432_m->_field_expr);
	_48513_obj+=jule::Str("[", 1);
	_48513_obj+=_104ebd4a0_gen_expr(_48432_m->_field_index);
	_48513_obj+=jule::Str("]", 1);
	return _48513_obj;
}



inline jule::Str _104ebd4a0_gen_anon_fn_expr_model(jule::Ref<_11911f320_AnonFnExprModel> _49231_m) {
	jule::Str _49313_obj = _104f69330_gen_fn_kind(_49231_m->_field_func);
	_49313_obj+=jule::Str("([=]", 4);
	_49313_obj+=_1190c5fe0_gen_params_ins(_49231_m->_field_func->_field_params);
	_49313_obj+=jule::Str(" mutable -> ", 12);
	_49313_obj+=_1190c5fe0_gen_fn_ins_result(_49231_m->_field_func);
	_49313_obj+=jule::Str(" ", 1);
	_49313_obj+=_104e1b930_gen_fn_scope(_49231_m->_field_func);
	_49313_obj+=jule::Str(")", 1);
	return _49313_obj;
}



inline jule::Str _104ebd4a0_gen_map_expr_model(jule::Ref<_11911f320_MapExprModel> _50927_m) {
	jule::Str _51013_obj = _104f406e0_as_jt(jule::Str("map", 3));
	_51013_obj+=jule::Str("<", 1);
	_51013_obj+=_104f69330_gen_type_kind(_50927_m->_field_key_kind);
	_51013_obj+=jule::Str(",", 1);
	_51013_obj+=_104f69330_gen_type_kind(_50927_m->_field_val_kind);
	_51013_obj+=jule::Str(">({", 3);
	if (_50927_m->_field_entries.len() > 0LL) {
		{
			auto __julec_range_expr = _50927_m->_field_entries;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_11911f320_KeyValPairExprModel> _104ebd4a0_pair = *__julec_range_begin;
				_iter_begin_4398391552:;
				{
					jule::Str _51821_pair_obj = jule::Str("{", 1);
					_51821_pair_obj+=_104ebd4a0_gen_expr(_104ebd4a0_pair->_field_key);
					_51821_pair_obj+=jule::Str(",", 1);
					_51821_pair_obj+=_104ebd4a0_gen_expr(_104ebd4a0_pair->_field_val);
					_51821_pair_obj+=jule::Str("}", 1);
					_51013_obj+=_51821_pair_obj;
					_51013_obj+=jule::Str(",", 1);
				}
				_iter_next_4398391552:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _104ebd4a0_pair = *__julec_range_begin; goto _iter_begin_4398391552; }
				_iter_end_4398391552:;
			}
		}
		_51013_obj=_51013_obj.slice(0LL,static_cast<jule::Int>(_51013_obj.len() - 1LL));
	}
	_51013_obj+=jule::Str("})", 2);
	return _51013_obj;
}



inline jule::Str _104ebd4a0_gen_slicing_expr_model(jule::Ref<_11911f320_SlicingExprModel> _53231_m) {
	jule::Str _53313_obj = _104ebd4a0_gen_expr_model(_53231_m->_field_expr);
	_53313_obj+=jule::Str(".slice(", 7);
	_53313_obj+=_104ebd4a0_gen_expr(_53231_m->_field_left);
	if (_53231_m->_field_right != nullptr) {
		_53313_obj+=jule::Str(",", 1);
		_53313_obj+=_104ebd4a0_gen_expr(_53231_m->_field_right);
	}
	_53313_obj+=jule::Str(")", 1);
	return _53313_obj;
}



inline jule::Str _104ebd4a0_gen_trait_sub_ident_expr_model(jule::Ref<_11911f320_TraitSubIdentExprModel> _54439_m) {
	jule::Str _54513_obj = _104ebd4a0_gen_expr_model(_54439_m->_field_expr);
	_54513_obj+=jule::Str(".get()._method_", 15);
	_54513_obj+=_54439_m->_field_ident;
	return _54513_obj;
}



inline jule::Str _104ebd4a0_gen_struct_sub_ident_expr_model(jule::Ref<_11911f320_StructSubIdentExprModel> _55140_m) {
	jule::Str _55213_obj = _104ebd4a0_gen_expr_model(_55140_m->_field_expr);
	_55213_obj+=_104ebd4a0_get_accessor(_55140_m->_field_expr_kind);
	if (jule::real(_55140_m->_field_field)) {
		_55213_obj+=_104f406e0_field_out_ident(_55140_m->_field_field->_field_decl);
	} else {
		_55213_obj+=_104f406e0_fn_ins_out_ident(_55140_m->_field_method);
	}
	return _55213_obj;
}



inline jule::Str _104ebd4a0_gen_common_ident_expr_model(jule::Ref<_11911f320_CommonIdentExprModel> _56232_m) {
	return _56232_m->_field_ident;
}



inline jule::Str _104ebd4a0_gen_common_sub_ident_expr_model(jule::Ref<_11911f320_CommonSubIdentExprModel> _56640_m) {
	jule::Str _56713_obj = _104ebd4a0_gen_expr_model(_56640_m->_field_expr);
	_56713_obj+=_104ebd4a0_get_accessor(_56640_m->_field_expr_kind);
	_56713_obj+=_56640_m->_field_ident;
	return _56713_obj;
}



inline jule::Str _104ebd4a0_gen_array_expr_model(jule::Ref<_11911f320_ArrayExprModel> _57329_m) {
	jule::Str _57413_obj = _104f69330_gen_array_kind(_57329_m->_field_kind);
	_57413_obj+=jule::Str("({", 2);
	_57413_obj+=_104ebd4a0_gen_arg_expr_models(_57329_m->_field_elems);
	_57413_obj+=jule::Str("})", 2);
	return _57413_obj;
}



inline jule::Str _104ebd4a0_gen_fn_ins_expr_model(jule::Ref<_1037649f0_FnIns> _58130_m) {
	if (jule::real(_58130_m->_field_decl) && _58130_m->_field_decl->_field_cpp_linked) {
		jule::Ref<_1487f5920_Directive> _58313_d = _104f69330_find_directive(_58130_m->_field_decl->_field_directives,jule::Str("namespace", 9));
		if (jule::real(_58313_d)) {
			return (_104ebd4a0_concat_all_parts(_58313_d->_field_args) + jule::Str("::", 2)) + _104f406e0_fn_ins_out_ident(_58130_m);
		}
	}
	return _104f406e0_fn_ins_out_ident(_58130_m);
}



inline jule::Str _104ebd4a0_gen_tuple_expr_model(jule::Ref<_11911f320_TupleExprModel> _59129_m) {
	jule::Str _59213_obj = jule::Str("std::make_tuple(", 16);
	{
		auto __julec_range_expr = _59129_m->_field_datas;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dc300_Data> _104ebd4a0_d = *__julec_range_begin;
			_iter_begin_4398425008:;
			{
				_59213_obj+=_104ebd4a0_gen_expr(_104ebd4a0_d->_field_model) + jule::Str(",", 1);
			}
			_iter_next_4398425008:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104ebd4a0_d = *__julec_range_begin; goto _iter_begin_4398425008; }
			_iter_end_4398425008:;
		}
	}
	_59213_obj=_59213_obj.slice(0LL,static_cast<jule::Int>(_59213_obj.len() - 1LL));
	_59213_obj+=jule::Str(")", 1);
	return _59213_obj;
}



inline jule::Str _104ebd4a0_gen_builtin_new_call_expr_model(jule::Ref<_11911f320_BuiltinNewCallExprModel> _60140_m) {
	jule::Str _60213_obj = jule::Str("jule::new_ref<", 14);
	_60213_obj+=_104f69330_gen_type_kind(_60140_m->_field_kind);
	_60213_obj+=jule::Str(">(", 2);
	if (_60140_m->_field_init != nullptr) {
		_60213_obj+=_104ebd4a0_gen_expr(_60140_m->_field_init);
	}
	_60213_obj+=jule::Str(")", 1);
	return _60213_obj;
}



inline jule::Str _104ebd4a0_gen_builtin_out_call_expr_model(jule::Ref<_11911f320_BuiltinOutCallExprModel> _61240_m) {
	jule::Str _61313_obj = jule::Str("jule::out(", 10);
	_61313_obj+=_104ebd4a0_gen_expr(_61240_m->_field_expr);
	_61313_obj+=jule::Str(")", 1);
	return _61313_obj;
}



inline jule::Str _104ebd4a0_gen_builtin_outln_call_expr_model(jule::Ref<_11911f320_BuiltinOutlnCallExprModel> _61942_m) {
	jule::Str _62013_obj = jule::Str("jule::outln(", 12);
	_62013_obj+=_104ebd4a0_gen_expr(_61942_m->_field_expr);
	_62013_obj+=jule::Str(")", 1);
	return _62013_obj;
}



inline jule::Str _104ebd4a0_gen_builtin_real_call_expr_model(jule::Ref<_11911f320_BuiltinRealCallExprModel> _62641_m) {
	jule::Str _62713_obj = jule::Str("jule::real(", 11);
	_62713_obj+=_104ebd4a0_gen_expr(_62641_m->_field_expr);
	_62713_obj+=jule::Str(")", 1);
	return _62713_obj;
}



inline jule::Str _104ebd4a0_gen_builtin_drop_call_expr_model(jule::Ref<_11911f320_BuiltinDropCallExprModel> _63341_m) {
	jule::Str _63413_obj = jule::Str("jule::drop(", 11);
	_63413_obj+=_104ebd4a0_gen_expr(_63341_m->_field_expr);
	_63413_obj+=jule::Str(")", 1);
	return _63413_obj;
}



inline jule::Str _104ebd4a0_gen_builtin_panic_call_expr_model(jule::Ref<_11911f320_BuiltinPanicCallExprModel> _64042_m) {
	jule::Str _64113_obj = jule::Str("jule::panic(", 12);
	_64113_obj+=_104ebd4a0_gen_expr(_64042_m->_field_expr);
	_64113_obj+=jule::Str(")", 1);
	return _64113_obj;
}



inline jule::Str _104ebd4a0_gen_builtin_make_call_expr_model(jule::Ref<_11911f320_BuiltinMakeCallExprModel> _64741_m) {
	jule::Str _64813_obj = jule::Str("", 0);
	if (_64741_m->_field_len != nullptr) {
		_64813_obj+=_104ebd4a0_gen_expr(_64741_m->_field_len);
	} else {
		_64813_obj+=jule::Str("0", 1);
	}
	if (_64741_m->_field_cap != nullptr) {
		_64813_obj+=jule::Str(",", 1) + _104ebd4a0_gen_expr(_64741_m->_field_cap);
	}
	if (jule::real(_64741_m->_field_kind->_method_slc()->_field_elem->_method_enm())) {
		_64813_obj+=jule::Str(",", 1);
		_64813_obj+=_104ebd4a0_get_init_expr(_64741_m->_field_kind->_method_slc()->_field_elem);
		if (_64741_m->_field_cap != nullptr) {
			_64813_obj=(_104f69330_gen_type_kind(_64741_m->_field_kind) + jule::Str("::alloc(", 8)) + _64813_obj;
		} else {
			_64813_obj=(_104f69330_gen_type_kind(_64741_m->_field_kind) + jule::Str("::alloc_def(", 12)) + _64813_obj;
		}
	} else {
		_64813_obj=(_104f69330_gen_type_kind(_64741_m->_field_kind) + jule::Str("::alloc(", 8)) + _64813_obj;
	}
	_64813_obj+=jule::Str(")", 1);
	return _64813_obj;
}



inline jule::Str _104ebd4a0_gen_builtin_append_call_expr_model_assign_opt(jule::Bool _6755_same_dest,jule::Str& _6766_dest_expr,jule::Ref<_104a21a10_TypeKind>& _67710_dest_kind,jule::Ref<_11911f320_SliceExprModel>& _67810_s,jule::Ref<_11911f320_BuiltinAppendCallExprModel>& _67910_m) {
	jule::Str _68013_obj = jule::Str("", 0);
	if ((!(_6755_same_dest))) {
		_68013_obj+=(((((_6766_dest_expr + jule::Str(" = jule::alloc_for_append(", 26)) + _104ebd4a0_gen_expr_model(_67910_m->_field_dest)) + jule::Str(",", 1)) + _1486fb320_itoa(static_cast<jule::I64>(_67810_s->_field_elems.len()))) + jule::Str(")", 1)) + jule::Str(";", 1);
	}
	{
		auto __julec_range_expr = _67810_s->_field_elems;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _104ebd4a0_e = *__julec_range_begin;
			_iter_begin_4398464880:;
			{
				_68013_obj+=_6766_dest_expr;
				_68013_obj+=_104ebd4a0_get_accessor(_67710_dest_kind);
				_68013_obj+=jule::Str("push(", 5);
				_68013_obj+=_104ebd4a0_gen_expr_model(_104ebd4a0_e);
				_68013_obj+=jule::Str(");", 2);
			}
			_iter_next_4398464880:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104ebd4a0_e = *__julec_range_begin; goto _iter_begin_4398464880; }
			_iter_end_4398464880:;
		}
	}
	return _68013_obj;
}



inline std::tuple<jule::Str,jule::Bool> _104ebd4a0_gen_builtin_append_call_expr_model_assign(jule::Any _69450_dest,jule::Ref<_11911f320_BuiltinAppendCallExprModel> _69471_m) {
	jule::Bool _694110_optimized = jule::Bool();
	{
		auto _match_expr{ _69471_m->_field_elements };
		if (!(_match_expr.type_is<jule::Ref<_11911f320_SliceExprModel>>())) { goto _case_end_4398472096; }
		_case_begin_4398472096:;
		{
			{
				auto _match_expr{ _69450_dest };
				if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4398473712; }
				_case_begin_4398473712:;
				{
					jule::Ref<_11911f320_SliceExprModel> _69921_s = _69471_m->_field_elements.operator jule::Ref<_11911f320_SliceExprModel>();
					jule::Str _70017_dest_expr = _104ebd4a0_gen_expr_model(_69450_dest);
					jule::Ref<_104598e40_Var> _70121_dest_var = _69450_dest.operator jule::Ref<_104598e40_Var>();
					jule::Bool _70217_same_dest = _104f69330_any_equals_0(_70121_dest_var,_69471_m->_field_dest);
					_694110_optimized = true;
					return std::make_tuple(_104ebd4a0_gen_builtin_append_call_expr_model_assign_opt(_70217_same_dest,_70017_dest_expr,_70121_dest_var->_field_kind->_field_kind,_69921_s,_69471_m),_694110_optimized);
				}
				goto _match_end_4398472208;
				_case_end_4398473712:;
				if (!(_match_expr.type_is<jule::Ref<_11911f320_StructSubIdentExprModel>>())) { goto _case_end_4398473824; }
				_case_begin_4398473824:;
				{
					jule::Ref<_11911f320_SliceExprModel> _70721_s = _69471_m->_field_elements.operator jule::Ref<_11911f320_SliceExprModel>();
					jule::Str _70817_dest_expr = _104ebd4a0_gen_expr_model(_69450_dest);
					jule::Ref<_1037370d0_FieldIns> _70921_dest_field = _69450_dest.operator jule::Ref<_11911f320_StructSubIdentExprModel>()->_field_field;
					jule::Bool _71017_same_dest = _104f69330_any_equals_1(_70921_dest_field,_69471_m->_field_dest);
					_694110_optimized = true;
					return std::make_tuple(_104ebd4a0_gen_builtin_append_call_expr_model_assign_opt(_71017_same_dest,_70817_dest_expr,_70921_dest_field->_field_kind,_70721_s,_69471_m),_694110_optimized);
				}
				goto _match_end_4398472208;
				_case_end_4398473824:;
				_match_end_4398472208:;
			}
		}
		goto _match_end_4398471488;
		_case_end_4398472096:;
		_match_end_4398471488:;
	}
	_694110_optimized = false;
	return std::make_tuple(_104ebd4a0_gen_builtin_append_call_expr_model(_69471_m),_694110_optimized);
}



inline jule::Str _104ebd4a0_gen_builtin_append_call_expr_model(jule::Ref<_11911f320_BuiltinAppendCallExprModel> _71943_m) {
	return (((jule::Str("jule::append(", 13) + _104ebd4a0_gen_expr_model(_71943_m->_field_dest)) + jule::Str(",", 1)) + _104ebd4a0_gen_expr_model(_71943_m->_field_elements)) + jule::Str(")", 1);
}



inline jule::Str _104ebd4a0_gen_builtin_clone_call_expr_model(jule::Ref<_11911f320_BuiltinCloneCallExprModel> _72342_m) {
	jule::Str _72413_obj = jule::Str("jule::clone(", 12);
	_72413_obj+=_104ebd4a0_gen_expr_model(_72342_m->_field_expr);
	_72413_obj+=jule::Str(")", 1);
	return _72413_obj;
}



inline jule::Str _104ebd4a0_gen_sizeof_expr_model(jule::Ref<_11911f320_SizeofExprModel> _73030_m) {
	jule::Str _73113_obj = jule::Str("sizeof(", 7);
	_73113_obj+=_104ebd4a0_gen_expr(_73030_m->_field_expr);
	_73113_obj+=jule::Str(")", 1);
	return _73113_obj;
}



inline jule::Str _104ebd4a0_gen_alignof_expr_model(jule::Ref<_11911f320_AlignofExprModel> _73731_m) {
	jule::Str _73813_obj = jule::Str("alignof(", 8);
	_73813_obj+=_104ebd4a0_gen_expr(_73731_m->_field_expr);
	_73813_obj+=jule::Str(")", 1);
	return _73813_obj;
}



inline jule::Str _104ebd4a0_gen_rune_expr_model(jule::Ref<_11911f320_RuneExprModel> _74424_m) {
	if (_74424_m->_field_code <= 127LL) {
		jule::Str _74617_b = _104ebd4a0_sbtoa(static_cast<jule::U8>(_74424_m->_field_code));
		if (_74617_b == jule::Str("'", 1)) {
			_74617_b=jule::Str("\\'", 2);
		}
		return (jule::Str("'", 1) + _74617_b) + jule::Str("'", 1);
	}
	return _104ebd4a0_i64toa(static_cast<jule::I64>(_74424_m->_field_code));
}



inline jule::Str _104ebd4a0_gen_builtin_error_trait_sub_ident_expr_model(jule::Ref<_11911f320_BuiltinErrorTraitSubIdentExprModel> _75553_m) {
	jule::Str _75613_obj = _104ebd4a0_gen_expr_model(_75553_m->_field_expr);
	_75613_obj+=jule::Str(".get().", 7);
	_75613_obj+=_75553_m->_field_ident;
	return _75613_obj;
}



inline jule::Str _104ebd4a0_gen_explicit_deref_expr_model(jule::Ref<_11911f320_ExplicitDerefExprModel> _76238_m) {
	jule::Str _76313_obj = _104ebd4a0_gen_expr_model(_76238_m->_field_expr);
	_76313_obj+=jule::Str(".get()", 6);
	return _76313_obj;
}



inline jule::Str _104ebd4a0_gen_struct_static_ident_expr_model(jule::Ref<_11911f320_StructStaticIdentExprModel> _76843_m) {
	jule::Str _76913_obj = _104f406e0_struct_ins_out_ident(_76843_m->_field_structure);
	_76913_obj+=jule::Str("::", 2);
	_76913_obj+=_104f406e0_fn_ins_out_ident(_76843_m->_field_method);
	return _76913_obj;
}



inline jule::Str _104ebd4a0_gen_expr_model(jule::Any _77523_m) {
	{
		auto _match_expr{ _77523_m };
		if (!(_match_expr.type_is<jule::Ref<_104a21a10_TypeKind>>())) { goto _case_end_4398526768; }
		_case_begin_4398526768:;
		{
			return _104f69330_gen_type_kind(_77523_m.operator jule::Ref<_104a21a10_TypeKind>());
		}
		goto _match_end_4398525008;
		_case_end_4398526768:;
		if (!(_match_expr.type_is<jule::Ref<_104c409b0_Const>>())) { goto _case_end_4398526880; }
		_case_begin_4398526880:;
		{
			return _104ebd4a0_gen_const_expr_model(_77523_m.operator jule::Ref<_104c409b0_Const>());
		}
		goto _match_end_4398525008;
		_case_end_4398526880:;
		if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4398526368; }
		_case_begin_4398526368:;
		{
			return _104ebd4a0_gen_var_expr_model(_77523_m.operator jule::Ref<_104598e40_Var>());
		}
		goto _match_end_4398525008;
		_case_end_4398526368:;
		if (!(_match_expr.type_is<jule::Ref<_1036e5da0_Trait>>())) { goto _case_end_4398526480; }
		_case_begin_4398526480:;
		{
			return _104f406e0_trait_out_ident(_77523_m.operator jule::Ref<_1036e5da0_Trait>());
		}
		goto _match_end_4398525008;
		_case_end_4398526480:;
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_Struct>>())) { goto _case_end_4398526592; }
		_case_begin_4398526592:;
		{
			return _104ebd4a0_gen_struct_expr_model(_77523_m.operator jule::Ref<_1037370d0_Struct>());
		}
		goto _match_end_4398525008;
		_case_end_4398526592:;
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_StructIns>>())) { goto _case_end_4398525888; }
		_case_begin_4398525888:;
		{
			return _104ebd4a0_gen_struct_ins_expr_model(_77523_m.operator jule::Ref<_1037370d0_StructIns>());
		}
		goto _match_end_4398525008;
		_case_end_4398525888:;
		if (!(_match_expr.type_is<jule::Ref<_1037649f0_FnIns>>())) { goto _case_end_4398526000; }
		_case_begin_4398526000:;
		{
			return _104ebd4a0_gen_fn_ins_expr_model(_77523_m.operator jule::Ref<_1037649f0_FnIns>());
		}
		goto _match_end_4398525008;
		_case_end_4398526000:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_BinopExprModel>>())) { goto _case_end_4398526112; }
		_case_begin_4398526112:;
		{
			return _104ebd4a0_gen_binop_expr_model(_77523_m.operator jule::Ref<_11911f320_BinopExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398526112:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_UnaryExprModel>>())) { goto _case_end_4398527232; }
		_case_begin_4398527232:;
		{
			return _104ebd4a0_gen_unary_expr_model(_77523_m.operator jule::Ref<_11911f320_UnaryExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398527232:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_GetRefPtrExprModel>>())) { goto _case_end_4398527344; }
		_case_begin_4398527344:;
		{
			return _104ebd4a0_gen_get_ref_ptr_expr_model(_77523_m.operator jule::Ref<_11911f320_GetRefPtrExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398527344:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_StructLitExprModel>>())) { goto _case_end_4398527456; }
		_case_begin_4398527456:;
		{
			return _104ebd4a0_gen_struct_lit_expr_model(_77523_m.operator jule::Ref<_11911f320_StructLitExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398527456:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_AllocStructLitExprModel>>())) { goto _case_end_4398528304; }
		_case_begin_4398528304:;
		{
			return _104ebd4a0_gen_alloc_struct_lit_expr_model(_77523_m.operator jule::Ref<_11911f320_AllocStructLitExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398528304:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_CastingExprModel>>())) { goto _case_end_4398528416; }
		_case_begin_4398528416:;
		{
			return _104ebd4a0_gen_casting_expr_model(_77523_m.operator jule::Ref<_11911f320_CastingExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398528416:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_FnCallExprModel>>())) { goto _case_end_4398528528; }
		_case_begin_4398528528:;
		{
			return _104ebd4a0_gen_fn_call_expr_model(_77523_m.operator jule::Ref<_11911f320_FnCallExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398528528:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_SliceExprModel>>())) { goto _case_end_4398528640; }
		_case_begin_4398528640:;
		{
			return _104ebd4a0_gen_slice_expr_model(_77523_m.operator jule::Ref<_11911f320_SliceExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398528640:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_ArrayExprModel>>())) { goto _case_end_4398528752; }
		_case_begin_4398528752:;
		{
			return _104ebd4a0_gen_array_expr_model(_77523_m.operator jule::Ref<_11911f320_ArrayExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398528752:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_IndexigExprModel>>())) { goto _case_end_4398528864; }
		_case_begin_4398528864:;
		{
			return _104ebd4a0_gen_indexing_expr_model(_77523_m.operator jule::Ref<_11911f320_IndexigExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398528864:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_AnonFnExprModel>>())) { goto _case_end_4398528976; }
		_case_begin_4398528976:;
		{
			return _104ebd4a0_gen_anon_fn_expr_model(_77523_m.operator jule::Ref<_11911f320_AnonFnExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398528976:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_MapExprModel>>())) { goto _case_end_4398529088; }
		_case_begin_4398529088:;
		{
			return _104ebd4a0_gen_map_expr_model(_77523_m.operator jule::Ref<_11911f320_MapExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398529088:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_SlicingExprModel>>())) { goto _case_end_4398529200; }
		_case_begin_4398529200:;
		{
			return _104ebd4a0_gen_slicing_expr_model(_77523_m.operator jule::Ref<_11911f320_SlicingExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398529200:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_TraitSubIdentExprModel>>())) { goto _case_end_4398529312; }
		_case_begin_4398529312:;
		{
			return _104ebd4a0_gen_trait_sub_ident_expr_model(_77523_m.operator jule::Ref<_11911f320_TraitSubIdentExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398529312:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_StructSubIdentExprModel>>())) { goto _case_end_4398529424; }
		_case_begin_4398529424:;
		{
			return _104ebd4a0_gen_struct_sub_ident_expr_model(_77523_m.operator jule::Ref<_11911f320_StructSubIdentExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398529424:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_CommonIdentExprModel>>())) { goto _case_end_4398529536; }
		_case_begin_4398529536:;
		{
			return _104ebd4a0_gen_common_ident_expr_model(_77523_m.operator jule::Ref<_11911f320_CommonIdentExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398529536:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_CommonSubIdentExprModel>>())) { goto _case_end_4398529664; }
		_case_begin_4398529664:;
		{
			return _104ebd4a0_gen_common_sub_ident_expr_model(_77523_m.operator jule::Ref<_11911f320_CommonSubIdentExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398529664:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_TupleExprModel>>())) { goto _case_end_4398529792; }
		_case_begin_4398529792:;
		{
			return _104ebd4a0_gen_tuple_expr_model(_77523_m.operator jule::Ref<_11911f320_TupleExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398529792:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinOutCallExprModel>>())) { goto _case_end_4398529920; }
		_case_begin_4398529920:;
		{
			return _104ebd4a0_gen_builtin_out_call_expr_model(_77523_m.operator jule::Ref<_11911f320_BuiltinOutCallExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398529920:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinOutlnCallExprModel>>())) { goto _case_end_4398530048; }
		_case_begin_4398530048:;
		{
			return _104ebd4a0_gen_builtin_outln_call_expr_model(_77523_m.operator jule::Ref<_11911f320_BuiltinOutlnCallExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398530048:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinNewCallExprModel>>())) { goto _case_end_4398530176; }
		_case_begin_4398530176:;
		{
			return _104ebd4a0_gen_builtin_new_call_expr_model(_77523_m.operator jule::Ref<_11911f320_BuiltinNewCallExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398530176:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinRealCallExprModel>>())) { goto _case_end_4398530304; }
		_case_begin_4398530304:;
		{
			return _104ebd4a0_gen_builtin_real_call_expr_model(_77523_m.operator jule::Ref<_11911f320_BuiltinRealCallExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398530304:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinDropCallExprModel>>())) { goto _case_end_4398530432; }
		_case_begin_4398530432:;
		{
			return _104ebd4a0_gen_builtin_drop_call_expr_model(_77523_m.operator jule::Ref<_11911f320_BuiltinDropCallExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398530432:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinPanicCallExprModel>>())) { goto _case_end_4398530560; }
		_case_begin_4398530560:;
		{
			return _104ebd4a0_gen_builtin_panic_call_expr_model(_77523_m.operator jule::Ref<_11911f320_BuiltinPanicCallExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398530560:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinMakeCallExprModel>>())) { goto _case_end_4398530688; }
		_case_begin_4398530688:;
		{
			return _104ebd4a0_gen_builtin_make_call_expr_model(_77523_m.operator jule::Ref<_11911f320_BuiltinMakeCallExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398530688:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinAppendCallExprModel>>())) { goto _case_end_4398530816; }
		_case_begin_4398530816:;
		{
			return _104ebd4a0_gen_builtin_append_call_expr_model(_77523_m.operator jule::Ref<_11911f320_BuiltinAppendCallExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398530816:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinCloneCallExprModel>>())) { goto _case_end_4398530944; }
		_case_begin_4398530944:;
		{
			return _104ebd4a0_gen_builtin_clone_call_expr_model(_77523_m.operator jule::Ref<_11911f320_BuiltinCloneCallExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398530944:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_SizeofExprModel>>())) { goto _case_end_4398531072; }
		_case_begin_4398531072:;
		{
			return _104ebd4a0_gen_sizeof_expr_model(_77523_m.operator jule::Ref<_11911f320_SizeofExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398531072:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_AlignofExprModel>>())) { goto _case_end_4398531200; }
		_case_begin_4398531200:;
		{
			return _104ebd4a0_gen_alignof_expr_model(_77523_m.operator jule::Ref<_11911f320_AlignofExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398531200:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_RuneExprModel>>())) { goto _case_end_4398531328; }
		_case_begin_4398531328:;
		{
			return _104ebd4a0_gen_rune_expr_model(_77523_m.operator jule::Ref<_11911f320_RuneExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398531328:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_BuiltinErrorTraitSubIdentExprModel>>())) { goto _case_end_4398531456; }
		_case_begin_4398531456:;
		{
			return _104ebd4a0_gen_builtin_error_trait_sub_ident_expr_model(_77523_m.operator jule::Ref<_11911f320_BuiltinErrorTraitSubIdentExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398531456:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_ExplicitDerefExprModel>>())) { goto _case_end_4398531584; }
		_case_begin_4398531584:;
		{
			return _104ebd4a0_gen_explicit_deref_expr_model(_77523_m.operator jule::Ref<_11911f320_ExplicitDerefExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398531584:;
		if (!(_match_expr.type_is<jule::Ref<_11911f320_StructStaticIdentExprModel>>())) { goto _case_end_4398531712; }
		_case_begin_4398531712:;
		{
			return _104ebd4a0_gen_struct_static_ident_expr_model(_77523_m.operator jule::Ref<_11911f320_StructStaticIdentExprModel>());
		}
		goto _match_end_4398525008;
		_case_end_4398531712:;
		_case_begin_4398525424:;
		{
			return jule::Str("<unimplemented_expression_model>", 32);
		}
		goto _match_end_4398525008;
		_case_end_4398525424:;
		_match_end_4398525008:;
	}
}



inline jule::Str _104ebd4a0_gen_expr(jule::Any _90217_e) {
	jule::Str _90313_obj = _104ebd4a0_gen_expr_model(_90217_e);
	if (_90313_obj[0LL] != '(') {
		return _90313_obj;
	}
	{
		auto _match_expr{ _90217_e };
		if (!(_match_expr.type_is<jule::Ref<_11911f320_BinopExprModel>>())) { goto _case_end_4398589088; }
		_case_begin_4398589088:;
		{
			_90313_obj=_90313_obj.slice(1LL,static_cast<jule::Int>(_90313_obj.len() - 1LL));
		}
		goto _match_end_4398590320;
		_case_end_4398589088:;
		_match_end_4398590320:;
	}
	return _90313_obj;
}



inline jule::Str _104ebd4a0_gen_val(jule::Ref<_1191dc300_Value> _91516_v) {
	if (_91516_v->_field_data->_method_is_const()) {
		return _104ebd4a0_gen_const_expr(_91516_v->_field_data);
	}
	return _104ebd4a0_gen_expr(_91516_v->_field_data->_field_model);
}



inline jule::Str _104ebd4a0_get_init_expr(jule::Ref<_104a21a10_TypeKind> _92222_t) {
	if (jule::real(_92222_t->_method_ptr())) {
		return jule::Str("nullptr", 7);
	}
	jule::Ref<_1036dad50_Enum> _92713_enm = _92222_t->_method_enm();
	if ((!(jule::real(_92713_enm)))) {
		return _104f69330_gen_type_kind(_92222_t) + jule::Str("()", 2);
	}
	return _104ebd4a0_gen_val(_92713_enm->_field_items[0LL]->_field_value);
}



inline jule::Str _104f3f3d0_get_derive_fn_decl_clone(jule::Ref<_1037370d0_Struct> _729_s) {
	jule::Str _813_obj = _104f69330_gen_struct_kind(_729_s);
	_813_obj+=jule::Str(" clone(void) const ", 19);
	return _813_obj;
}



inline jule::Str _104f3f3d0_get_derive_fn_def_clone(jule::Ref<_1037370d0_Struct> _1328_s) {
	jule::Str _1413_obj = _104f69330_gen_struct_kind(_1328_s);
	_1413_obj+=(jule::Str(" ", 1) + _1413_obj) + jule::Str("::clone(void) const ", 20);
	return _1413_obj;
}



inline jule::Str _104f406e0_as_ident(jule::Str _2513_ident) {
	return jule::Str("_", 1) + _2513_ident;
}



inline jule::Str _104f406e0_as_jt(jule::Str _2810_id) {
	jule::Slice<jule::I32> _2913_ident = static_cast<jule::Slice<jule::I32>>(_2810_id);
	if ((97LL <= _2913_ident[0LL]) && (_2913_ident[0LL] <= 122LL)) {
		_2913_ident[0LL]-=32LL;
	}
	return jule::Str("jule::", 6) + static_cast<jule::Str>(_2913_ident);
}



inline jule::Str _104f406e0_get_ptr_as_ident(jule::Uintptr _3721_ptr) {
	jule::Str _3813_addr = jule::Str("_", 1) + _1486fb320_fmt_uint(static_cast<jule::U64>(_3721_ptr),16LL);
	{
		auto __julec_range_expr = _3813_addr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104f406e0_i = 0;
			jule::U8 _104f406e0_r = *__julec_range_begin;
			_iter_begin_4398613200:;
			{
				if (_104f406e0_r != '0') {
					_3813_addr=_3813_addr.slice(static_cast<jule::Int>(_104f406e0_i));
					goto _iter_end_4398613200;
				}
			}
			_iter_next_4398613200:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104f406e0_i; _104f406e0_r = *__julec_range_begin; goto _iter_begin_4398613200; }
			_iter_end_4398613200:;
		}
	}
	return _3813_addr;
}



inline jule::Str _104f406e0_as_out_ident(jule::Str _5317_ident,jule::Uintptr _5329_ptr) {
	if (_5329_ptr != 0LL) {
		return (_104f406e0_get_ptr_as_ident(_5329_ptr) + jule::Str("_", 1)) + _5317_ident;
	}
	return _104f406e0_as_ident(_5317_ident);
}



inline jule::Str _104f406e0_as_local_ident(jule::Int _6619_row,jule::Int _6629_col,jule::Str _6643_ident) {
	_6643_ident=((_1486fb320_itoa(_6619_row) + _1486fb320_itoa(_6629_col)) + jule::Str("_", 1)) + _6643_ident;
	return _104f406e0_as_ident(_6643_ident);
}



inline jule::Str _104f406e0_fn_out_ident(jule::Ref<_1037649f0_Fn> _7217_f) {
	{
		if (!((_7217_f->_field_cpp_linked))) { goto _case_end_4398625536; }
		_case_begin_4398625536:;
		{
			return _7217_f->_field_ident;
		}
		goto _match_end_4398623088;
		_case_end_4398625536:;
		if (!((_7217_f->_field_ident == jule::Str("main", 4)))) { goto _case_end_4398627456; }
		_case_begin_4398627456:;
		{
			return jule::Str("entry_point", 11);
		}
		goto _match_end_4398623088;
		_case_end_4398627456:;
		if (!((_7217_f->_method_is_method()))) { goto _case_end_4398627568; }
		_case_begin_4398627568:;
		{
			if (_7217_f->_field_statically) {
				return jule::Str("_static_method_", 15) + _7217_f->_field_ident;
			}
			return jule::Str("_method_", 8) + _7217_f->_field_ident;
		}
		goto _match_end_4398623088;
		_case_end_4398627568:;
		_case_begin_4398623200:;
		{
			return _104f406e0_as_out_ident(_7217_f->_field_ident,static_cast<jule::Uintptr>(_7217_f->_field_token._field_file->_method_addr()));
		}
		goto _match_end_4398623088;
		_case_end_4398623200:;
		_match_end_4398623088:;
	}
}



inline jule::Str _104f406e0_fn_ins_out_ident(jule::Ref<_1037649f0_FnIns> _9221_f) {
	if (_9221_f->_method_is_builtin()) {
		return jule::Str("jule::", 6) + _9221_f->_field_decl->_field_ident;
	}
	if (_9221_f->_field_decl->_field_cpp_linked || (_9221_f->_field_generics.len() == 0LL)) {
		return _104f406e0_fn_out_ident(_9221_f->_field_decl);
	}
	{
		auto __julec_range_expr = _9221_f->_field_decl->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104f406e0_i = 0;
			jule::Ref<_1037649f0_FnIns> _104f406e0_ins = *__julec_range_begin;
			_iter_begin_4398635744:;
			{
				jule::Ref<_104a21a10_TypeKind> _10213_kind = jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104f406e0_ins));
				if (_9221_f->_method_equals(_10213_kind)) {
					return (_104f406e0_fn_out_ident(_9221_f->_field_decl) + jule::Str("_", 1)) + _1486fb320_itoa(_104f406e0_i);
				}
			}
			_iter_next_4398635744:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104f406e0_i; _104f406e0_ins = *__julec_range_begin; goto _iter_begin_4398635744; }
			_iter_end_4398635744:;
		}
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _104f406e0_trait_out_ident(jule::Ref<_1036e5da0_Trait> _11220_t) {
	if (_11220_t->_method_is_builtin()) {
		return jule::Str("jule::", 6) + _11220_t->_field_ident;
	}
	return _104f406e0_as_out_ident(_11220_t->_field_ident,static_cast<jule::Uintptr>(_11220_t->_field_token._field_file->_method_addr()));
}



inline jule::Str _104f406e0_param_out_ident(jule::Ref<_1037649f0_Param> _12020_p) {
	if (_108e15ff0_is_anon_ident(_12020_p->_field_ident) || _108e15ff0_is_ignore_ident(_12020_p->_field_ident)) {
		return jule::Str("", 0);
	}
	return _104f406e0_as_local_ident(_12020_p->_field_token._field_row,_12020_p->_field_token._field_column,_12020_p->_field_ident);
}



inline jule::Str _104f406e0_struct_out_ident(jule::Ref<_1037370d0_Struct> _12821_s) {
	if (_12821_s->_field_cpp_linked) {
		if (_104f69330_has_directive(_12821_s->_field_directives,jule::Str("typedef", 7))) {
			return _12821_s->_field_ident;
		}
		return jule::Str("struct ", 7) + _12821_s->_field_ident;
	}
	return _104f406e0_as_out_ident(_12821_s->_field_ident,static_cast<jule::Uintptr>(_12821_s->_field_token._field_file->_method_addr()));
}



inline jule::Str _104f406e0_struct_ins_out_ident(jule::Ref<_1037370d0_StructIns> _13925_s) {
	if (_13925_s->_field_decl->_field_cpp_linked || (_13925_s->_field_generics.len() == 0LL)) {
		return _104f406e0_struct_out_ident(_13925_s->_field_decl);
	}
	{
		auto __julec_range_expr = _13925_s->_field_decl->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _104f406e0_i = 0;
			jule::Ref<_1037370d0_StructIns> _104f406e0_ins = *__julec_range_begin;
			_iter_begin_4398657152:;
			{
				jule::Ref<_104a21a10_TypeKind> _14513_kind = jule::new_struct<_104a21a10_TypeKind>(new( std::nothrow ) _104a21a10_TypeKind(jule::Str(),jule::Bool(),_104f406e0_ins));
				if (_13925_s->_method_equals(_14513_kind)) {
					return (_104f406e0_struct_out_ident(_13925_s->_field_decl) + jule::Str("_", 1)) + _1486fb320_itoa(_104f406e0_i);
				}
			}
			_iter_next_4398657152:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_104f406e0_i; _104f406e0_ins = *__julec_range_begin; goto _iter_begin_4398657152; }
			_iter_end_4398657152:;
		}
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _104f406e0_field_out_ident(jule::Ref<_1037370d0_Field> _15520_f) {
	if (_15520_f->_field_owner->_field_cpp_linked) {
		return _15520_f->_field_ident;
	}
	return jule::Str("_field_", 7) + _15520_f->_field_ident;
}



inline jule::Str _104f406e0_var_out_ident(jule::Ref<_104598e40_Var> _16322_v) {
	{
		if (!((_16322_v->_field_cpp_linked))) { goto _case_end_4398669120; }
		_case_begin_4398669120:;
		{
			return _16322_v->_field_ident;
		}
		goto _match_end_4398660912;
		_case_end_4398669120:;
		if (!((_16322_v->_field_ident == jule::Str("self", 4)))) { goto _case_end_4398669232; }
		_case_begin_4398669232:;
		{
			if (jule::real(_16322_v->_field_kind->_field_kind->_method_ref())) {
				return jule::Str("this->self", 10);
			}
			return jule::Str("(*this)", 7);
		}
		goto _match_end_4398660912;
		_case_end_4398669232:;
		if (!((jule::real(_16322_v->_field_scope)))) { goto _case_end_4398666160; }
		_case_begin_4398666160:;
		{
			return _104f406e0_as_local_ident(_16322_v->_field_token._field_row,_16322_v->_field_token._field_column,_16322_v->_field_ident);
		}
		goto _match_end_4398660912;
		_case_end_4398666160:;
		_case_begin_4398665856:;
		{
			return _104f406e0_as_out_ident(_16322_v->_field_ident,static_cast<jule::Uintptr>(_16322_v->_field_token._field_file->_method_addr()));
		}
		goto _match_end_4398660912;
		_case_end_4398665856:;
		_match_end_4398660912:;
	}
}



inline jule::Str _104f406e0_iter_begin_label_ident(jule::Uintptr _18327_it) {
	return jule::Str("_iter_begin_", 12) + _1486fb320_itoa(static_cast<jule::Int>(_18327_it));
}



inline jule::Str _104f406e0_iter_end_label_ident(jule::Uintptr _18825_it) {
	return jule::Str("_iter_end_", 10) + _1486fb320_itoa(static_cast<jule::Int>(_18825_it));
}



inline jule::Str _104f406e0_iter_next_label_ident(jule::Uintptr _19326_it) {
	return jule::Str("_iter_next_", 11) + _1486fb320_itoa(static_cast<jule::Int>(_19326_it));
}



inline jule::Str _104f406e0_label_ident(jule::Str _19816_ident) {
	return jule::Str("_julec_label_", 13) + _19816_ident;
}



inline jule::Str _104f406e0_match_end_label_ident(jule::Uintptr _20326_m) {
	return jule::Str("_match_end_", 11) + _1486fb320_itoa(static_cast<jule::Int>(_20326_m));
}



inline jule::Str _104f406e0_case_begin_label_ident(jule::Uintptr _20827_c) {
	return jule::Str("_case_begin_", 12) + _1486fb320_itoa(static_cast<jule::Int>(_20827_c));
}



inline jule::Str _104f406e0_case_end_label_ident(jule::Uintptr _21325_c) {
	return jule::Str("_case_end_", 10) + _1486fb320_itoa(static_cast<jule::Int>(_21325_c));
}



inline jule::Bool _104f69330_any_equals_0(jule::Ref<_104598e40_Var>& _2619_first,jule::Any& _2631_other) {
	{
		auto _match_expr{ _2631_other };
		if (!(_match_expr.type_is<jule::Ref<_104598e40_Var>>())) { goto _case_end_4398484992; }
		_case_begin_4398484992:;
		{
			return (_2619_first).alloc == (_2631_other.operator jule::Ref<_104598e40_Var>()).alloc;
		}
		goto _match_end_4398484128;
		_case_end_4398484992:;
		_case_begin_4398484608:;
		{
			return false;
		}
		goto _match_end_4398484128;
		_case_end_4398484608:;
		_match_end_4398484128:;
	}
}

inline jule::Bool _104f69330_any_equals_1(jule::Ref<_1037370d0_FieldIns>& _2619_first,jule::Any& _2631_other) {
	{
		auto _match_expr{ _2631_other };
		if (!(_match_expr.type_is<jule::Ref<_1037370d0_FieldIns>>())) { goto _case_end_4398498000; }
		_case_begin_4398498000:;
		{
			return (_2619_first).alloc == (_2631_other.operator jule::Ref<_1037370d0_FieldIns>()).alloc;
		}
		goto _match_end_4398497136;
		_case_end_4398498000:;
		_case_begin_4398497616:;
		{
			return false;
		}
		goto _match_end_4398497136;
		_case_end_4398497616:;
		_match_end_4398497136:;
	}
}



inline jule::Ref<_1487f5920_Directive> _104f69330_find_directive(jule::Slice<jule::Ref<_1487f5920_Directive>> _3423_directives,jule::Str _3465_tag) {
	{
		auto __julec_range_expr = _3423_directives;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1487f5920_Directive> _104f69330_dr = *__julec_range_begin;
			_iter_begin_4398686544:;
			{
				if (_104f69330_dr->_field_tag == _3465_tag) {
					return _104f69330_dr;
				}
			}
			_iter_next_4398686544:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104f69330_dr = *__julec_range_begin; goto _iter_begin_4398686544; }
			_iter_end_4398686544:;
		}
	}
	return jule::new_ref<_1487f5920_Directive>();
}



inline jule::Bool _104f69330_has_directive(jule::Slice<jule::Ref<_1487f5920_Directive>> _4418_directives,jule::Str _4460_tag) {
	return jule::real(_104f69330_find_directive((*((&(_4418_directives)))),_4460_tag));
}



inline jule::Str _104f69330_gen_prim_kind(jule::Ref<_104a21a10_Prim> _4918_p) {
	return _104f406e0_as_jt(_4918_p->_method_to_str());
}



inline jule::Str _104f69330_gen_tuple_kind(jule::Ref<_104a21a10_Tuple> _5423_t) {
	jule::Str _5513_obj = jule::Str("std::tuple<", 11);
	{
		auto __julec_range_expr = _5423_t->_field_types;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104a21a10_TypeKind> _104f69330_t = *__julec_range_begin;
			_iter_begin_4398693904:;
			{
				_5513_obj+=_104f69330_gen_type_kind(_104f69330_t) + jule::Str(",", 1);
			}
			_iter_next_4398693904:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _104f69330_t = *__julec_range_begin; goto _iter_begin_4398693904; }
			_iter_end_4398693904:;
		}
	}
	_5513_obj=_5513_obj.slice(0LL,static_cast<jule::Int>(_5513_obj.len() - 1LL));
	return _5513_obj + jule::Str(">", 1);
}



inline jule::Str _104f69330_as_ref_kind(jule::Str _6416_elem) {
	jule::Str _659_ref = _104f406e0_as_jt(jule::Str("ref", 3));
	return ((_659_ref + jule::Str("<", 1)) + _6416_elem) + jule::Str(">", 1);
}



inline jule::Str _104f69330_gen_ref_kind(jule::Ref<_104a21a10_Ref> _7021_r) {
	jule::Str _719_elem = _104f69330_gen_type_kind(_7021_r->_field_elem);
	return _104f69330_as_ref_kind(_719_elem);
}



inline jule::Str _104f69330_gen_ptr_kind(jule::Ref<_104a21a10_Ptr> _7621_p) {
	
	if (_7621_p->_method_is_unsafe()) {
		return jule::Str("void*", 5);
	}
	jule::Str _829_elem = _104f69330_gen_type_kind(_7621_p->_field_elem);
	return _829_elem + jule::Str("*", 1);
}



inline jule::Str _104f69330_gen_enum_kind(jule::Ref<_1036dad50_Enum> _8722_e) {
	return _104f69330_gen_type_kind(_8722_e->_field_kind->_field_kind);
}



inline jule::Str _104f69330_as_slice_kind(jule::Ref<_104a21a10_TypeKind> _9122_elem) {
	jule::Str _929_elem_s = _104f69330_gen_type_kind(_9122_elem);
	jule::Str _939_slc = _104f406e0_as_jt(jule::Str("slice", 5));
	return ((_939_slc + jule::Str("<", 1)) + _929_elem_s) + jule::Str(">", 1);
}



inline jule::Str _104f69330_gen_slice_kind(jule::Ref<_104a21a10_Slc> _9823_s) {
	return _104f69330_as_slice_kind(_9823_s->_field_elem);
}



inline jule::Str _104f69330_gen_map_kind(jule::Ref<_104a21a10_Map> _10321_m) {
	jule::Str _1049_key = _104f69330_gen_type_kind(_10321_m->_field_key);
	jule::Str _1059_val = _104f69330_gen_type_kind(_10321_m->_field_val);
	jule::Str _1069__map = _104f406e0_as_jt(jule::Str("map", 3));
	return ((((_1069__map + jule::Str("<", 1)) + _1049_key) + jule::Str(",", 1)) + _1059_val) + jule::Str(">", 1);
}



inline jule::Str _104f69330_gen_trait_kind_from_ident(jule::Str _11030_ident) {
	jule::Str _1119_trt = _104f406e0_as_jt(jule::Str("trait", 5));
	return ((_1119_trt + jule::Str("<", 1)) + _11030_ident) + jule::Str(">", 1);
}



inline jule::Str _104f69330_gen_trait_kind(jule::Ref<_1036e5da0_Trait> _11619_t) {
	jule::Str _1179_ident = _104f406e0_trait_out_ident(_11619_t);
	return _104f69330_gen_trait_kind_from_ident(_1179_ident);
}



inline jule::Str _104f69330_gen_struct_kind(jule::Ref<_1037370d0_Struct> _12220_s) {
	jule::Str _12313_rep = jule::Str("", 0);
	if (_12220_s->_field_cpp_linked && (!(_104f69330_has_directive(_12220_s->_field_directives,jule::Str("typedef", 7))))) {
		_12313_rep+=jule::Str("struct ", 7);
	}
	_12313_rep+=_104f406e0_struct_out_ident(_12220_s);
	return _12313_rep;
}



inline jule::Str _104f69330_gen_struct_kind_ins(jule::Ref<_1037370d0_StructIns> _13328_s) {
	if (_13328_s->_field_decl->_field_cpp_linked) {
		jule::Str _13517_ident = _104f406e0_struct_ins_out_ident(_13328_s);
		if (_13328_s->_field_generics.len() > 0LL) {
			_13517_ident+=jule::Str("<", 1);
			{
				auto __julec_range_expr = _13328_s->_field_generics;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Ref<_104a21a10_TypeKind> _104f69330_g = *__julec_range_begin;
					_iter_begin_4398730368:;
					{
						_13517_ident+=_104f69330_gen_type_kind(_104f69330_g) + jule::Str(",", 1);
					}
					_iter_next_4398730368:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _104f69330_g = *__julec_range_begin; goto _iter_begin_4398730368; }
					_iter_end_4398730368:;
				}
			}
			_13517_ident=_13517_ident.slice(0LL,static_cast<jule::Int>(_13517_ident.len() - 1LL));
			_13517_ident+=jule::Str(">", 1);
		}
		jule::Ref<_1487f5920_Directive> _14413_d = _104f69330_find_directive(_13328_s->_field_decl->_field_directives,jule::Str("namespace", 9));
		if (jule::real(_14413_d)) {
			_13517_ident=(_104ebd4a0_concat_all_parts(_14413_d->_field_args) + jule::Str("::", 2)) + _13517_ident;
		}
		return _13517_ident;
	}
	return _104f406e0_struct_ins_out_ident(_13328_s);
}



inline jule::Str _104f69330_gen_array_kind(jule::Ref<_104a21a10_Arr> _15423_a) {
	jule::Str _1559_arr = _104f406e0_as_jt(jule::Str("array", 5));
	jule::Str _1569_elem = _104f69330_gen_type_kind(_15423_a->_field_elem);
	jule::Str _1579_size = _1486fb320_itoa(_15423_a->_field_n);
	return ((((_1559_arr + jule::Str("<", 1)) + _1569_elem) + jule::Str(",", 1)) + _1579_size) + jule::Str(">", 1);
}



inline jule::Str _104f69330_gen_fn_anon_decl(jule::Ref<_1037649f0_FnIns> _16125_f) {
	jule::Str _16213_decl = _1190c5fe0_gen_fn_ins_result(_16125_f);
	_16213_decl+=jule::Str("(", 1);
	if (_16125_f->_field_params.len() > 0LL) {
		{
			auto __julec_range_expr = _16125_f->_field_params;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1037649f0_ParamIns> _104f69330_param = *__julec_range_begin;
				_iter_begin_4398745728:;
				{
					if (_104f69330_param->_field_decl->_method_is_self()) {
						goto _iter_next_4398745728;
					}
					_16213_decl+=_1190c5fe0_gen_param_ins_prototype(_104f69330_param);
					_16213_decl+=jule::Str(",", 1);
				}
				_iter_next_4398745728:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _104f69330_param = *__julec_range_begin; goto _iter_begin_4398745728; }
				_iter_end_4398745728:;
			}
		}
		_16213_decl=_16213_decl.slice(0LL,static_cast<jule::Int>(_16213_decl.len() - 1LL));
	} else {
		_16213_decl+=jule::Str("void", 4);
	}
	_16213_decl+=jule::Str(")", 1);
	return _16213_decl;
}



inline jule::Str _104f69330_gen_fn_kind(jule::Ref<_1037649f0_FnIns> _18420_f) {
	jule::Str _1859_fnc = _104f406e0_as_jt(jule::Str("fn", 2));
	jule::Str _1869_decl = _104f69330_gen_fn_anon_decl(_18420_f);
	return ((_1859_fnc + jule::Str("<", 1)) + _1869_decl) + jule::Str(">", 1);
}



inline jule::Str _104f69330_gen_type_kind(jule::Ref<_104a21a10_TypeKind> _19122_k) {
	{
		if (!((_19122_k->_method_is_cpp_linked()))) { goto _case_end_4398758640; }
		_case_begin_4398758640:;
		{
			return _19122_k->_field_cpp_ident;
		}
		goto _match_end_4398755632;
		_case_end_4398758640:;
		if (!((jule::real(_19122_k->_method_prim())))) { goto _case_end_4398758000; }
		_case_begin_4398758000:;
		{
			return _104f69330_gen_prim_kind(_19122_k->_method_prim());
		}
		goto _match_end_4398755632;
		_case_end_4398758000:;
		if (!((jule::real(_19122_k->_method_tup())))) { goto _case_end_4398758112; }
		_case_begin_4398758112:;
		{
			return _104f69330_gen_tuple_kind(_19122_k->_method_tup());
		}
		goto _match_end_4398755632;
		_case_end_4398758112:;
		if (!((jule::real(_19122_k->_method_ref())))) { goto _case_end_4398758240; }
		_case_begin_4398758240:;
		{
			return _104f69330_gen_ref_kind(_19122_k->_method_ref());
		}
		goto _match_end_4398755632;
		_case_end_4398758240:;
		if (!((jule::real(_19122_k->_method_ptr())))) { goto _case_end_4398757312; }
		_case_begin_4398757312:;
		{
			return _104f69330_gen_ptr_kind(_19122_k->_method_ptr());
		}
		goto _match_end_4398755632;
		_case_end_4398757312:;
		if (!((jule::real(_19122_k->_method_enm())))) { goto _case_end_4398757424; }
		_case_begin_4398757424:;
		{
			return _104f69330_gen_enum_kind(_19122_k->_method_enm());
		}
		goto _match_end_4398755632;
		_case_end_4398757424:;
		if (!((jule::real(_19122_k->_method_slc())))) { goto _case_end_4398757552; }
		_case_begin_4398757552:;
		{
			return _104f69330_gen_slice_kind(_19122_k->_method_slc());
		}
		goto _match_end_4398755632;
		_case_end_4398757552:;
		if (!((jule::real(_19122_k->_method_map())))) { goto _case_end_4398758848; }
		_case_begin_4398758848:;
		{
			return _104f69330_gen_map_kind(_19122_k->_method_map());
		}
		goto _match_end_4398755632;
		_case_end_4398758848:;
		if (!((jule::real(_19122_k->_method_trt())))) { goto _case_end_4398758960; }
		_case_begin_4398758960:;
		{
			return _104f69330_gen_trait_kind(_19122_k->_method_trt());
		}
		goto _match_end_4398755632;
		_case_end_4398758960:;
		if (!((jule::real(_19122_k->_method_strct())))) { goto _case_end_4398759072; }
		_case_begin_4398759072:;
		{
			return _104f69330_gen_struct_kind_ins(_19122_k->_method_strct());
		}
		goto _match_end_4398755632;
		_case_end_4398759072:;
		if (!((jule::real(_19122_k->_method_arr())))) { goto _case_end_4398759264; }
		_case_begin_4398759264:;
		{
			return _104f69330_gen_array_kind(_19122_k->_method_arr());
		}
		goto _match_end_4398755632;
		_case_end_4398759264:;
		if (!((jule::real(_19122_k->_method_fnc())))) { goto _case_end_4398759376; }
		_case_begin_4398759376:;
		{
			return _104f69330_gen_fn_kind(_19122_k->_method_fnc());
		}
		goto _match_end_4398755632;
		_case_end_4398759376:;
		_case_begin_4398756000:;
		{
			return jule::Str("[<unimplemented_type_kind>]", 27);
		}
		goto _match_end_4398755632;
		_case_end_4398756000:;
		_match_end_4398755632:;
	}
}



inline void _1190c5fe0_add_indent(void) {
	(_1190c5fe0_INDENT)++;
}



inline void _1190c5fe0_done_indent(void) {
	(_1190c5fe0_INDENT)--;
}



inline jule::Str _1190c5fe0_indent(void) {
	
	if (_1190c5fe0_INDENT == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _7913_s = jule::Str("", 0);
	jule::Int _8013_i = 0LL;
	_iter_begin_4398793392:;
	if (!(_8013_i < _1190c5fe0_INDENT)) { goto _iter_end_4398793392; }
	{
		_7913_s+=jule::Str("\t", 1);
	}
	_iter_next_4398793392:;
	(_8013_i)++;
	goto _iter_begin_4398793392;
	_iter_end_4398793392:;
	return _7913_s;
}



inline jule::Bool _1190c5fe0_is_cpp_header_file(jule::Str _8723_path) {
	jule::Int _889_offset = _8723_path.rfind(jule::Str(".", 1));
	if (_889_offset == -1LL) {
		return false;
	}
	return _148682040_is_valid_header_ext(_8723_path.slice(static_cast<jule::Int>(_889_offset)));
}



inline jule::Str _1190c5fe0_gen_links(jule::Ref<_108db2720_IR> _9618_ir) {
	jule::Str _9713_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _9618_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _1190c5fe0_pkg = *__julec_range_begin;
			_iter_begin_4398803808:;
			{
				{
					if (!(((!(_1190c5fe0_pkg->_field_cpp_linked))))) { goto _case_end_4398805680; }
					_case_begin_4398805680:;
					{
						goto _iter_next_4398803808;
					}
					goto _match_end_4398805488;
					_case_end_4398805680:;
					if (!((_148682040_is_std_header_path(_1190c5fe0_pkg->_field_path)))) { goto _case_end_4398805808; }
					_case_begin_4398805808:;
					{
						_9713_obj+=(jule::Str("#include ", 9) + _1190c5fe0_pkg->_field_path) + jule::Str("\n", 1);
					}
					goto _match_end_4398805488;
					_case_end_4398805808:;
					_match_end_4398805488:;
				}
			}
			_iter_next_4398803808:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_pkg = *__julec_range_begin; goto _iter_begin_4398803808; }
			_iter_end_4398803808:;
		}
	}
	{
		auto __julec_range_expr = _9618_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _1190c5fe0_pkg = *__julec_range_begin;
			_iter_begin_4398807744:;
			{
				{
					if (!(((!(_1190c5fe0_pkg->_field_cpp_linked))))) { goto _case_end_4398810656; }
					_case_begin_4398810656:;
					{
						goto _iter_next_4398807744;
					}
					goto _match_end_4398810464;
					_case_end_4398810656:;
					if (!((_1190c5fe0_is_cpp_header_file(_1190c5fe0_pkg->_field_path)))) { goto _case_end_4398810784; }
					_case_begin_4398810784:;
					{
						_9713_obj+=(jule::Str("#include \"", 10) + _1190c5fe0_pkg->_field_path) + jule::Str("\"\n", 2);
					}
					goto _match_end_4398810464;
					_case_end_4398810784:;
					_match_end_4398810464:;
				}
			}
			_iter_next_4398807744:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_pkg = *__julec_range_begin; goto _iter_begin_4398807744; }
			_iter_end_4398807744:;
		}
	}
	return _9713_obj;
}



inline jule::Str _1190c5fe0_gen_fn_result(jule::Ref<_1037649f0_Fn> _12122_f) {
	if (_12122_f->_method_is_void()) {
		return jule::Str("void", 4);
	}
	return _104f69330_gen_type_kind(_12122_f->_field_result->_field_kind->_field_kind);
}



inline jule::Str _1190c5fe0_gen_fn_ins_result(jule::Ref<_1037649f0_FnIns> _12926_f) {
	if (_12926_f->_field_decl->_method_is_void()) {
		return jule::Str("void", 4);
	}
	return _104f69330_gen_type_kind(_12926_f->_field_result);
}



inline jule::Str _1190c5fe0_gen_param_prototype(jule::Ref<_1037649f0_Param> _13728_p) {
	jule::Str _13813_obj = jule::Str("", 0);
	if (_13728_p->_field_variadic) {
		_13813_obj+=_104f406e0_as_jt(jule::Str("slice", 5));
		_13813_obj+=jule::Str("<", 1);
		_13813_obj+=_104f69330_gen_type_kind(_13728_p->_field_kind->_field_kind);
		_13813_obj+=jule::Str(">", 1);
	} else {
		_13813_obj+=_104f69330_gen_type_kind(_13728_p->_field_kind->_field_kind);
	}
	return _13813_obj;
}



inline jule::Str _1190c5fe0_gen_param_ins(jule::Ref<_1037649f0_ParamIns> _15122_p) {
	jule::Str _15213_obj = _1190c5fe0_gen_param_ins_prototype(_15122_p);
	_15213_obj+=jule::Str(" ", 1);
	_15213_obj+=_104f406e0_param_out_ident(_15122_p->_field_decl);
	return _15213_obj;
}



inline jule::Str _1190c5fe0_gen_param_ins_prototype(jule::Ref<_1037649f0_ParamIns> _15932_p) {
	jule::Str _16013_obj = jule::Str("", 0);
	if (_15932_p->_field_decl->_field_variadic) {
		_16013_obj+=_104f406e0_as_jt(jule::Str("slice", 5));
		_16013_obj+=jule::Str("<", 1);
		_16013_obj+=_104f69330_gen_type_kind(_15932_p->_field_kind);
		_16013_obj+=jule::Str(">", 1);
	} else {
		_16013_obj+=_104f69330_gen_type_kind(_15932_p->_field_kind);
	}
	if (_15932_p->_field_decl->_field_reference) {
		_16013_obj+=jule::Str("&", 1);
	}
	return _16013_obj;
}



inline jule::Str _1190c5fe0_gen_param(jule::Ref<_1037649f0_Param> _17818_p) {
	jule::Str _17913_obj = _1190c5fe0_gen_param_prototype(_17818_p);
	if (((_17818_p->_field_ident != jule::Str("", 0)) && (!(_108e15ff0_is_ignore_ident(_17818_p->_field_ident)))) && (!(_108e15ff0_is_anon_ident(_17818_p->_field_ident)))) {
		_17913_obj+=jule::Str(" ", 1) + _104f406e0_param_out_ident(_17818_p);
	}
	return _17913_obj;
}



inline jule::Str _1190c5fe0_gen_params(jule::Slice<jule::Ref<_1037649f0_Param>> _18719_params) {
	{
		if (!((_18719_params.len() == 0LL))) { goto _case_end_4398839648; }
		_case_begin_4398839648:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4398839488;
		_case_end_4398839648:;
		if (!(((_18719_params.len() == 1LL) && _18719_params[0LL]->_method_is_self()))) { goto _case_end_4398839776; }
		_case_begin_4398839776:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4398839488;
		_case_end_4398839776:;
		_match_end_4398839488:;
	}
	jule::Str _19613_obj = jule::Str("(", 1);
	{
		auto __julec_range_expr = _18719_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Param> _1190c5fe0_p = *__julec_range_begin;
			_iter_begin_4398843408:;
			{
				if ((!(_1190c5fe0_p->_method_is_self()))) {
					_19613_obj+=_1190c5fe0_gen_param(_1190c5fe0_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4398843408:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_p = *__julec_range_begin; goto _iter_begin_4398843408; }
			_iter_end_4398843408:;
		}
	}
	_19613_obj=_19613_obj.slice(0LL,static_cast<jule::Int>(_19613_obj.len() - 1LL));
	return _19613_obj + jule::Str(")", 1);
}



inline jule::Str _1190c5fe0_gen_params_ins(jule::Slice<jule::Ref<_1037649f0_ParamIns>> _20823_params) {
	{
		if (!((_20823_params.len() == 0LL))) { goto _case_end_4398848640; }
		_case_begin_4398848640:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4398848496;
		_case_end_4398848640:;
		if (!(((_20823_params.len() == 1LL) && _20823_params[0LL]->_field_decl->_method_is_self()))) { goto _case_end_4398848752; }
		_case_begin_4398848752:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4398848496;
		_case_end_4398848752:;
		_match_end_4398848496:;
	}
	jule::Str _21713_obj = jule::Str("(", 1);
	{
		auto __julec_range_expr = _20823_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_ParamIns> _1190c5fe0_p = *__julec_range_begin;
			_iter_begin_4398852608:;
			{
				if ((!(_1190c5fe0_p->_field_decl->_method_is_self()))) {
					_21713_obj+=_1190c5fe0_gen_param_ins(_1190c5fe0_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4398852608:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_p = *__julec_range_begin; goto _iter_begin_4398852608; }
			_iter_end_4398852608:;
		}
	}
	_21713_obj=_21713_obj.slice(0LL,static_cast<jule::Int>(_21713_obj.len() - 1LL));
	return _21713_obj + jule::Str(")", 1);
}



inline jule::Str _1190c5fe0_gen_params_prototypes(jule::Slice<jule::Ref<_1037649f0_ParamIns>> _23030_params) {
	{
		if (!((_23030_params.len() == 0LL))) { goto _case_end_4398857616; }
		_case_begin_4398857616:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4398854496;
		_case_end_4398857616:;
		if (!(((_23030_params.len() == 1LL) && _23030_params[0LL]->_field_decl->_method_is_self()))) { goto _case_end_4398858240; }
		_case_begin_4398858240:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4398854496;
		_case_end_4398858240:;
		_match_end_4398854496:;
	}
	jule::Str _23913_obj = jule::Str("(", 1);
	{
		auto __julec_range_expr = _23030_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_ParamIns> _1190c5fe0_p = *__julec_range_begin;
			_iter_begin_4398862032:;
			{
				if ((!(_1190c5fe0_p->_field_decl->_method_is_self()))) {
					_23913_obj+=_1190c5fe0_gen_param_ins_prototype(_1190c5fe0_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4398862032:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_p = *__julec_range_begin; goto _iter_begin_4398862032; }
			_iter_end_4398862032:;
		}
	}
	_23913_obj=_23913_obj.slice(0LL,static_cast<jule::Int>(_23913_obj.len() - 1LL));
	return _23913_obj + jule::Str(")", 1);
}



inline jule::Str _1190c5fe0_gen_trait(jule::Ref<_1036e5da0_Trait> _25218_t) {
	
	jule::Str _2549_outid = _104f406e0_trait_out_ident(_25218_t);
	jule::Str _25613_obj = jule::Str("struct ", 7);
	_25613_obj+=_2549_outid;
	_25613_obj+=jule::Str(" {\n", 3);
	_25613_obj+=jule::Str("\t", 1);
	_25613_obj+=jule::Str("virtual ~", 9);
	_25613_obj+=_2549_outid;
	_25613_obj+=jule::Str("(void) {}\n\n", 11);
	{
		auto __julec_range_expr = _25218_t->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _1190c5fe0_f = *__julec_range_begin;
			_iter_begin_4398870992:;
			{
				_25613_obj+=jule::Str("\t", 1);
				_25613_obj+=jule::Str("virtual ", 8);
				_25613_obj+=_1190c5fe0_gen_fn_result(_1190c5fe0_f);
				_25613_obj+=jule::Str(" _method_", 9);
				_25613_obj+=_1190c5fe0_f->_field_ident;
				_25613_obj+=_1190c5fe0_gen_params(_1190c5fe0_f->_field_params);
				_25613_obj+=jule::Str(" {", 2);
				if ((!(_1190c5fe0_f->_method_is_void()))) {
					_25613_obj+=jule::Str(" return {}; ", 12);
				}
				_25613_obj+=jule::Str("}\n", 2);
			}
			_iter_next_4398870992:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4398870992; }
			_iter_end_4398870992:;
		}
	}
	_25613_obj+=jule::Str("};", 2);
	return _25613_obj;
}



inline jule::Str _1190c5fe0_gen_traits_tbl(jule::Ref<_1191dcd40_SymbolTable> _28123_tbl) {
	jule::Str _28213_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _28123_tbl->_field_traits;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036e5da0_Trait> _1190c5fe0_t = *__julec_range_begin;
			_iter_begin_4398878928:;
			{
				_28213_obj+=_1190c5fe0_gen_trait(_1190c5fe0_t) + jule::Str("\n\n", 2);
			}
			_iter_next_4398878928:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_t = *__julec_range_begin; goto _iter_begin_4398878928; }
			_iter_end_4398878928:;
		}
	}
	return _28213_obj;
}



inline jule::Str _1190c5fe0_gen_traits_pkg(jule::Ref<_119162660_Package> _29023_pkg) {
	jule::Str _29113_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _29023_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _1190c5fe0_tbl = *__julec_range_begin;
			_iter_begin_4398882688:;
			{
				_29113_obj+=_1190c5fe0_gen_traits_tbl(_1190c5fe0_tbl);
			}
			_iter_next_4398882688:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_tbl = *__julec_range_begin; goto _iter_begin_4398882688; }
			_iter_end_4398882688:;
		}
	}
	return _29113_obj;
}



inline jule::Str _1190c5fe0_gen_traits(jule::Ref<_108db2720_IR> _29919_ir) {
	jule::Str _30013_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _29919_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _1190c5fe0_u = *__julec_range_begin;
			_iter_begin_4398886240:;
			{
				if ((!(_1190c5fe0_u->_field_cpp_linked))) {
					_30013_obj+=_1190c5fe0_gen_traits_pkg(_1190c5fe0_u->_field_package);
				}
			}
			_iter_next_4398886240:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_u = *__julec_range_begin; goto _iter_begin_4398886240; }
			_iter_end_4398886240:;
		}
	}
	_30013_obj+=_1190c5fe0_gen_traits_pkg(_29919_ir->_field_main);
	return _30013_obj;
}



inline jule::Str _1190c5fe0_gen_trait_prototype(jule::Ref<_1036e5da0_Trait> _31124_t) {
	return (jule::Str("struct ", 7) + _104f406e0_trait_out_ident(_31124_t)) + jule::Str(";", 1);
}



inline jule::Str _1190c5fe0_gen_trait_prototypes(jule::Ref<_119162660_Package> _31629_p) {
	jule::Str _31713_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _31629_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _1190c5fe0_f = *__julec_range_begin;
			_iter_begin_4398893184:;
			{
				{
					auto __julec_range_expr = _1190c5fe0_f->_field_traits;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1036e5da0_Trait> _1190c5fe0_t = *__julec_range_begin;
						_iter_begin_4398895136:;
						{
							if (_1190c5fe0_t->_field_token._field_id != 0LLU) {
								_31713_obj+=_1190c5fe0_gen_trait_prototype(_1190c5fe0_t) + jule::Str("\n", 1);
							}
						}
						_iter_next_4398895136:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _1190c5fe0_t = *__julec_range_begin; goto _iter_begin_4398895136; }
						_iter_end_4398895136:;
					}
				}
			}
			_iter_next_4398893184:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4398893184; }
			_iter_end_4398893184:;
		}
	}
	return _31713_obj;
}



inline jule::Str _1190c5fe0_gen_struct_plain_prototype(jule::Ref<_1037370d0_Struct> _32931_s) {
	jule::Str _33013_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _32931_s->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_StructIns> _1190c5fe0_ins = *__julec_range_begin;
			_iter_begin_4398899264:;
			{
				_33013_obj+=jule::Str("\nstruct ", 8);
				_33013_obj+=_104f406e0_struct_ins_out_ident(_1190c5fe0_ins);
				_33013_obj+=jule::Str(";", 1);
				_33013_obj+=jule::Str("\n", 1);
			}
			_iter_next_4398899264:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_ins = *__julec_range_begin; goto _iter_begin_4398899264; }
			_iter_end_4398899264:;
		}
	}
	return _33013_obj;
}



inline jule::Str _1190c5fe0_gen_struct_plain_prototypes(jule::Slice<jule::Ref<_1037370d0_Struct>> _34136_structs) {
	jule::Str _34213_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _34136_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _1190c5fe0_s = *__julec_range_begin;
			_iter_begin_4398903392:;
			{
				if ((!(_1190c5fe0_s->_field_cpp_linked)) && (_1190c5fe0_s->_field_token._field_id != 0LLU)) {
					_34213_obj+=_1190c5fe0_gen_struct_plain_prototype(_1190c5fe0_s) + jule::Str("\n", 1);
				}
			}
			_iter_next_4398903392:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_s = *__julec_range_begin; goto _iter_begin_4398903392; }
			_iter_end_4398903392:;
		}
	}
	return _34213_obj;
}



inline jule::Str _1190c5fe0_gen_struct_traits(jule::Ref<_1037370d0_Struct> _35222_s) {
	if (_35222_s->_field_implements.len() == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _35713_obj = jule::Str(": ", 2);
	{
		auto __julec_range_expr = _35222_s->_field_implements;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1036e5da0_Trait> _1190c5fe0_i = *__julec_range_begin;
			_iter_begin_4398909776:;
			{
				_35713_obj+=jule::Str("public ", 7);
				_35713_obj+=_104f406e0_trait_out_ident(_1190c5fe0_i);
				_35713_obj+=jule::Str(",", 1);
			}
			_iter_next_4398909776:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_i = *__julec_range_begin; goto _iter_begin_4398909776; }
			_iter_end_4398909776:;
		}
	}
	_35713_obj=_35713_obj.slice(0LL,static_cast<jule::Int>(_35713_obj.len() - 1LL));
	return _35713_obj;
}



inline jule::Str _1190c5fe0_gen_field_decl(jule::Ref<_1037370d0_FieldIns> _36823_f) {
	jule::Str _36913_obj = _104f69330_gen_type_kind(_36823_f->_field_kind) + jule::Str(" ", 1);
	_36913_obj+=_104f406e0_field_out_ident(_36823_f->_field_decl);
	_36913_obj+=(jule::Str("{", 1) + _104ebd4a0_get_init_expr(_36823_f->_field_kind)) + jule::Str("}", 1);
	_36913_obj+=jule::Str(";", 1);
	return _36913_obj;
}



inline jule::Str _1190c5fe0_gen_struct_self_field_type_kind(jule::Ref<_1037370d0_StructIns> _37740_s) {
	return _104f69330_as_ref_kind(_104f69330_gen_struct_kind_ins(_37740_s));
}



inline jule::Str _1190c5fe0_gen_struct_self_field(jule::Ref<_1037370d0_StructIns> _38230_s) {
	jule::Str _38313_obj = _1190c5fe0_gen_struct_self_field_type_kind(_38230_s);
	_38313_obj+=jule::Str(" self{};", 8);
	return _38313_obj;
}



inline jule::Str _1190c5fe0_gen_struct_self_field_init_st(jule::Ref<_1037370d0_StructIns> _38838_s) {
	jule::Str _38913_obj = jule::Str("this->self = ", 13);
	_38913_obj+=_1190c5fe0_gen_struct_self_field_type_kind(_38838_s);
	_38913_obj+=jule::Str("::make(this, nullptr);", 22);
	return _38913_obj;
}



inline jule::Str _1190c5fe0_gen_struct_constructor(jule::Ref<_1037370d0_StructIns> _39531_s) {
	jule::Str _39613_obj = _104f406e0_struct_ins_out_ident(_39531_s);
	_39613_obj+=jule::Str("(", 1);
	if (_39531_s->_field_fields.len() > 0LL) {
		{
			auto __julec_range_expr = _39531_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1037370d0_FieldIns> _1190c5fe0_f = *__julec_range_begin;
				_iter_begin_4398926528:;
				{
					_39613_obj+=_104f69330_gen_type_kind(_1190c5fe0_f->_field_kind);
					_39613_obj+=(jule::Str(" __param_", 9) + _1190c5fe0_f->_field_decl->_field_ident) + jule::Str(", ", 2);
				}
				_iter_next_4398926528:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4398926528; }
				_iter_end_4398926528:;
			}
		}
		_39613_obj=_39613_obj.slice(0LL,static_cast<jule::Int>(_39613_obj.len() - 2LL));
	} else {
		_39613_obj+=jule::Str("void", 4);
	}
	_39613_obj+=jule::Str(") {\n", 4);
	_1190c5fe0_add_indent();
	_39613_obj+=_1190c5fe0_indent();
	_39613_obj+=_1190c5fe0_gen_struct_self_field_init_st(_39531_s);
	_39613_obj+=jule::Str("\n", 1);
	if (_39531_s->_field_fields.len() > 0LL) {
		{
			auto __julec_range_expr = _39531_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1037370d0_FieldIns> _1190c5fe0_f = *__julec_range_begin;
				_iter_begin_4398933312:;
				{
					_39613_obj+=jule::Str("\n", 1);
					_39613_obj+=_1190c5fe0_indent();
					_39613_obj+=jule::Str("this->", 6);
					_39613_obj+=_104f406e0_field_out_ident(_1190c5fe0_f->_field_decl);
					_39613_obj+=jule::Str(" = ", 3);
					_39613_obj+=jule::Str("__param_", 8) + _1190c5fe0_f->_field_decl->_field_ident;
					_39613_obj+=jule::Str(";", 1);
				}
				_iter_next_4398933312:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4398933312; }
				_iter_end_4398933312:;
			}
		}
	}
	_1190c5fe0_done_indent();
	_39613_obj+=(jule::Str("\n", 1) + _1190c5fe0_indent()) + jule::Str("}", 1);
	return _39613_obj;
}



inline jule::Str _1190c5fe0_gen_struct_destructor(jule::Ref<_1037370d0_StructIns> _43226_s) {
	jule::Str _43313_obj = jule::Str("~", 1);
	_43313_obj+=_104f406e0_struct_ins_out_ident(_43226_s);
	_43313_obj+=jule::Str("(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }", 91);
	return _43313_obj;
}



inline jule::Str _1190c5fe0_gen_struct_operators(jule::Ref<_1037370d0_StructIns> _43929_s) {
	jule::Str _4409_out_ident = _104f406e0_struct_ins_out_ident(_43929_s);
	jule::Str _44113_obj = jule::Str("", 0);
	_44113_obj+=_1190c5fe0_indent();
	_44113_obj+=jule::Str("inline bool operator==(const ", 29);
	_44113_obj+=_4409_out_ident;
	_44113_obj+=jule::Str(" &_Src) const {", 15);
	if (_43929_s->_field_fields.len() > 0LL) {
		_1190c5fe0_add_indent();
		_44113_obj+=jule::Str("\n", 1);
		_44113_obj+=_1190c5fe0_indent();
		_44113_obj+=jule::Str("return ", 7);
		_1190c5fe0_add_indent();
		jule::Int _45317_n = 0LL;
		{
			auto __julec_range_expr = _43929_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1037370d0_FieldIns> _1190c5fe0_f = *__julec_range_begin;
				_iter_begin_4393242576:;
				{
					jule::Ref<_1037370d0_StructIns> _45617_strct = _1190c5fe0_f->_field_kind->_method_strct();
					if ((jule::real(_45617_strct) && jule::real(_45617_strct->_field_decl)) && _45617_strct->_field_decl->_field_cpp_linked) {
						goto _iter_next_4393242576;
					}
					(_45317_n)++;
					_44113_obj+=jule::Str("\n", 1);
					_44113_obj+=_1190c5fe0_indent();
					_44113_obj+=jule::Str("this->", 6);
					jule::Str _46517_f_ident = _104f406e0_field_out_ident(_1190c5fe0_f->_field_decl);
					_44113_obj+=_46517_f_ident;
					_44113_obj+=jule::Str(" == _Src.", 9);
					_44113_obj+=_46517_f_ident;
					_44113_obj+=jule::Str(" &&", 3);
				}
				_iter_next_4393242576:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4393242576; }
				_iter_end_4393242576:;
			}
		}
		_1190c5fe0_done_indent();
		if (_45317_n > 0LL) {
			_44113_obj=_44113_obj.slice(0LL,static_cast<jule::Int>(_44113_obj.len() - 3LL));
		} else {
			_44113_obj+=jule::Str("true", 4);
		}
		_44113_obj+=jule::Str(";\n", 2);
		_1190c5fe0_done_indent();
		_44113_obj+=_1190c5fe0_indent();
		_44113_obj+=jule::Str("}", 1);
	} else {
		_44113_obj+=jule::Str(" return true; }", 15);
	}
	_44113_obj+=jule::Str("\n\n", 2);
	_44113_obj+=_1190c5fe0_indent();
	_44113_obj+=jule::Str("inline bool operator!=(const ", 29);
	_44113_obj+=_4409_out_ident;
	_44113_obj+=jule::Str(" &_Src) const { return !this->operator==(_Src); }", 49);
	return _44113_obj;
}



inline jule::Str _1190c5fe0_gen_struct_derive_defs_prototypes(jule::Ref<_1037370d0_StructIns> _49238_s) {
	jule::Str _49313_obj = jule::Str("", 0);
	if (_49238_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))) {
		_49313_obj+=_1190c5fe0_indent();
		_49313_obj+=_104f3f3d0_get_derive_fn_decl_clone(_49238_s->_field_decl);
		_49313_obj+=jule::Str(";\n\n", 3);
	}
	return _49313_obj;
}



inline jule::Str _1190c5fe0_gen_struct_ins_prototype(jule::Ref<_1037370d0_StructIns> _50433_s) {
	jule::Str _50513_obj = jule::Str("struct ", 7);
	jule::Str _5069_out_ident = _104f406e0_struct_ins_out_ident(_50433_s);
	_50513_obj+=_5069_out_ident;
	_50513_obj+=_1190c5fe0_gen_struct_traits(_50433_s->_field_decl);
	_50513_obj+=jule::Str(" {\n", 3);
	_1190c5fe0_add_indent();
	_50513_obj+=_1190c5fe0_indent();
	_50513_obj+=_1190c5fe0_gen_struct_self_field(_50433_s);
	_50513_obj+=jule::Str("\n\n", 2);
	if (_50433_s->_field_fields.len() > 0LL) {
		{
			auto __julec_range_expr = _50433_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1037370d0_FieldIns> _1190c5fe0_f = *__julec_range_begin;
				_iter_begin_4393270144:;
				{
					_50513_obj+=_1190c5fe0_indent();
					_50513_obj+=_1190c5fe0_gen_field_decl(_1190c5fe0_f);
					_50513_obj+=jule::Str("\n", 1);
				}
				_iter_next_4393270144:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4393270144; }
				_iter_end_4393270144:;
			}
		}
		_50513_obj+=jule::Str("\n\n", 2);
		_50513_obj+=_1190c5fe0_indent();
		_50513_obj+=_1190c5fe0_gen_struct_constructor(_50433_s);
		_50513_obj+=jule::Str("\n\n", 2);
	}
	_50513_obj+=_1190c5fe0_indent();
	_50513_obj+=_1190c5fe0_gen_struct_destructor(_50433_s);
	_50513_obj+=jule::Str("\n\n", 2);
	_50513_obj+=_1190c5fe0_indent();
	_50513_obj+=_5069_out_ident;
	_50513_obj+=jule::Str("(void) { ", 9);
	_50513_obj+=_1190c5fe0_gen_struct_self_field_init_st(_50433_s);
	_50513_obj+=jule::Str(" }\n\n", 4);
	{
		auto __julec_range_expr = _50433_s->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _1190c5fe0_f = *__julec_range_begin;
			_iter_begin_4393276272:;
			{
				jule::Str _53917_proto = _1190c5fe0_gen_fn_prototype(_1190c5fe0_f,true);
				if (_1190c5fe0_f->_field_statically) {
					_53917_proto=(_1190c5fe0_indent() + jule::Str("static ", 7)) + _53917_proto.trim(jule::Str("\t ", 2));
				}
				_50513_obj+=_53917_proto;
				_50513_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4393276272:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4393276272; }
			_iter_end_4393276272:;
		}
	}
	_50513_obj+=_1190c5fe0_gen_struct_derive_defs_prototypes(_50433_s);
	_50513_obj+=_1190c5fe0_gen_struct_operators(_50433_s);
	_50513_obj+=jule::Str("\n", 1);
	_1190c5fe0_done_indent();
	_50513_obj+=_1190c5fe0_indent() + jule::Str("};", 2);
	return _50513_obj;
}



inline jule::Str _1190c5fe0_gen_struct_prototype(jule::Ref<_1037370d0_Struct> _55829_s) {
	jule::Str _55913_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _55829_s->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_StructIns> _1190c5fe0_ins = *__julec_range_begin;
			_iter_begin_4393285040:;
			{
				_55913_obj+=_1190c5fe0_gen_struct_ins_prototype(_1190c5fe0_ins) + jule::Str("\n\n", 2);
			}
			_iter_next_4393285040:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_ins = *__julec_range_begin; goto _iter_begin_4393285040; }
			_iter_end_4393285040:;
		}
	}
	return _55913_obj;
}



inline jule::Str _1190c5fe0_gen_struct_prototypes(jule::Slice<jule::Ref<_1037370d0_Struct>> _56730_structs) {
	jule::Str _56813_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _56730_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _1190c5fe0_s = *__julec_range_begin;
			_iter_begin_4393288688:;
			{
				if ((!(_1190c5fe0_s->_field_cpp_linked)) && (_1190c5fe0_s->_field_token._field_id != 0LLU)) {
					_56813_obj+=_1190c5fe0_gen_struct_prototype(_1190c5fe0_s) + jule::Str("\n", 1);
				}
			}
			_iter_next_4393288688:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_s = *__julec_range_begin; goto _iter_begin_4393288688; }
			_iter_end_4393288688:;
		}
	}
	return _56813_obj;
}



inline jule::Str _1190c5fe0_gen_fn_decl_head(jule::Ref<_1037649f0_FnIns> _57725_f,jule::Bool _57736_method) {
	jule::Str _57813_obj = jule::Str("", 0);
	if ((!(_57725_f->_field_decl->_method_is_entry_point()))) {
		_57813_obj+=jule::Str("inline ", 7);
	}
	_57813_obj+=_1190c5fe0_gen_fn_ins_result(_57725_f) + jule::Str(" ", 1);
	if ((!(_57736_method)) && jule::real(_57725_f->_field_decl->_field_owner)) {
		_57813_obj+=_104f406e0_struct_ins_out_ident(_57725_f->_field_owner) + jule::Str("::", 2);
	}
	_57813_obj+=_104f406e0_fn_ins_out_ident(_57725_f);
	return _57813_obj;
}



inline jule::Str _1190c5fe0_gen_fn_prototype(jule::Ref<_1037649f0_Fn> _59425_f,jule::Bool _59433_method) {
	jule::Str _59513_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _59425_f->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_FnIns> _1190c5fe0_c = *__julec_range_begin;
			_iter_begin_4393301632:;
			{
				_59513_obj+=_1190c5fe0_indent();
				_59513_obj+=_1190c5fe0_gen_fn_decl_head(_1190c5fe0_c,_59433_method);
				_59513_obj+=_1190c5fe0_gen_params_prototypes(_1190c5fe0_c->_field_params);
				_59513_obj+=jule::Str(";\n", 2);
			}
			_iter_next_4393301632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_c = *__julec_range_begin; goto _iter_begin_4393301632; }
			_iter_end_4393301632:;
		}
	}
	return _59513_obj;
}



inline jule::Str _1190c5fe0_gen_fn_prototypes(jule::Ref<_119162660_Package> _60626_pkg) {
	jule::Str _60713_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _60626_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _1190c5fe0_file = *__julec_range_begin;
			_iter_begin_4393306528:;
			{
				{
					auto __julec_range_expr = _1190c5fe0_file->_field_funcs;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1037649f0_Fn> _1190c5fe0_f = *__julec_range_begin;
						_iter_begin_4393308496:;
						{
							if ((!(_1190c5fe0_f->_field_cpp_linked)) && (_1190c5fe0_f->_field_token._field_id != 0LLU)) {
								_60713_obj+=_1190c5fe0_gen_fn_prototype(_1190c5fe0_f,false);
							}
						}
						_iter_next_4393308496:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4393308496; }
						_iter_end_4393308496:;
					}
				}
			}
			_iter_next_4393306528:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_file = *__julec_range_begin; goto _iter_begin_4393306528; }
			_iter_end_4393306528:;
		}
	}
	return _60713_obj;
}



inline jule::Str _1190c5fe0_gen_prototypes(jule::Ref<_108db2720_IR> _61923_ir,jule::Slice<jule::Ref<_1037370d0_Struct>> _61936_structs) {
	jule::Str _62013_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _61923_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _1190c5fe0_u = *__julec_range_begin;
			_iter_begin_4393313648:;
			{
				if ((!(_1190c5fe0_u->_field_cpp_linked))) {
					_62013_obj+=_1190c5fe0_gen_trait_prototypes(_1190c5fe0_u->_field_package);
				}
			}
			_iter_next_4393313648:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_u = *__julec_range_begin; goto _iter_begin_4393313648; }
			_iter_end_4393313648:;
		}
	}
	_62013_obj+=_1190c5fe0_gen_trait_prototypes(_61923_ir->_field_main);
	_62013_obj+=_1190c5fe0_gen_struct_plain_prototypes(_61936_structs);
	_62013_obj+=_1190c5fe0_gen_traits(_61923_ir) + jule::Str("\n", 1);
	_62013_obj+=_1190c5fe0_gen_struct_prototypes(_61936_structs);
	{
		auto __julec_range_expr = _61923_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _1190c5fe0_u = *__julec_range_begin;
			_iter_begin_4393318352:;
			{
				if ((!(_1190c5fe0_u->_field_cpp_linked))) {
					_62013_obj+=_1190c5fe0_gen_fn_prototypes(_1190c5fe0_u->_field_package);
				}
			}
			_iter_next_4393318352:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_u = *__julec_range_begin; goto _iter_begin_4393318352; }
			_iter_end_4393318352:;
		}
	}
	_62013_obj+=_1190c5fe0_gen_fn_prototypes(_61923_ir->_field_main);
	return _62013_obj;
}



inline jule::Str _1190c5fe0_gen_var_init_expr(jule::Ref<_104598e40_Var> _64726_v,jule::Str _64735_init) {
	jule::Str _64813_obj = jule::Str("", 0);
	if (_64726_v->_field_statically) {
		_64813_obj+=jule::Str("static ", 7);
	}
	_64813_obj+=_104f69330_gen_type_kind(_64726_v->_field_kind->_field_kind) + jule::Str(" ", 1);
	if (_64726_v->_field_reference) {
		_64813_obj+=jule::Str("&", 1);
	}
	_64813_obj+=_104f406e0_var_out_ident(_64726_v);
	if (_64735_init != jule::Str("", 0)) {
		_64813_obj+=jule::Str(" = ", 3) + _64735_init;
	}
	_64813_obj+=jule::Str(";", 1);
	return _64813_obj;
}



inline jule::Str _1190c5fe0_gen_var(jule::Ref<_104598e40_Var> _66616_v) {
	if (_108e15ff0_is_ignore_ident(_66616_v->_field_ident)) {
		return jule::Str("", 0);
	}
	if (_66616_v->_field_constant) {
		return jule::Str("", 0);
	}
	if (jule::real(_66616_v->_field_value) && jule::real(_66616_v->_field_value->_field_expr)) {
		if (_66616_v->_field_value->_field_data->_field_model != nullptr) {
			return _1190c5fe0_gen_var_init_expr(_66616_v,_104ebd4a0_gen_val(_66616_v->_field_value));
		}
		return _1190c5fe0_gen_var_init_expr(_66616_v,jule::Str("", 0));
	}
	return _1190c5fe0_gen_var_init_expr(_66616_v,_104ebd4a0_get_init_expr(_66616_v->_field_kind->_field_kind));
}



inline jule::Str _1190c5fe0_gen_globals(jule::Slice<jule::Ref<_104598e40_Var>> _68420_globals) {
	jule::Str _68513_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _68420_globals;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104598e40_Var> _1190c5fe0_v = *__julec_range_begin;
			_iter_begin_4393338496:;
			{
				if ((!(_1190c5fe0_v->_field_constant)) && (_1190c5fe0_v->_field_token._field_id != 0LLU)) {
					_68513_obj+=_1190c5fe0_gen_var(_1190c5fe0_v) + jule::Str("\n", 1);
				}
			}
			_iter_next_4393338496:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_v = *__julec_range_begin; goto _iter_begin_4393338496; }
			_iter_end_4393338496:;
		}
	}
	return _68513_obj;
}



inline jule::Str _1190c5fe0_gen_fn(jule::Ref<_1037649f0_Fn> _69715_f) {
	jule::Str _69813_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _69715_f->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_FnIns> _1190c5fe0_ins = *__julec_range_begin;
			_iter_begin_4393343648:;
			{
				_69813_obj+=_1190c5fe0_gen_fn_decl_head(_1190c5fe0_ins,false);
				_69813_obj+=_1190c5fe0_gen_params_ins(_1190c5fe0_ins->_field_params) + jule::Str(" ", 1);
				_69813_obj+=_104e1b930_gen_fn_scope(_1190c5fe0_ins);
				_69813_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4393343648:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_ins = *__julec_range_begin; goto _iter_begin_4393343648; }
			_iter_end_4393343648:;
		}
	}
	return _69813_obj;
}



inline jule::Str _1190c5fe0_gen_pkg_fns(jule::Ref<_119162660_Package> _70920_p) {
	jule::Str _71013_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _70920_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1191dcd40_SymbolTable> _1190c5fe0_f = *__julec_range_begin;
			_iter_begin_4393348992:;
			{
				{
					auto __julec_range_expr = _1190c5fe0_f->_field_funcs;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1037649f0_Fn> _1190c5fe0_f = *__julec_range_begin;
						_iter_begin_4393350928:;
						{
							if ((!(_1190c5fe0_f->_field_cpp_linked)) && (_1190c5fe0_f->_field_token._field_id != 0LLU)) {
								_71013_obj+=_1190c5fe0_gen_fn(_1190c5fe0_f) + jule::Str("\n\n", 2);
							}
						}
						_iter_next_4393350928:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4393350928; }
						_iter_end_4393350928:;
					}
				}
			}
			_iter_next_4393348992:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4393348992; }
			_iter_end_4393348992:;
		}
	}
	return _71013_obj;
}



inline jule::Str _1190c5fe0_gen_struct_method_defs(jule::Ref<_1037370d0_StructIns> _72231_s) {
	jule::Str _72313_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _72231_s->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037649f0_Fn> _1190c5fe0_f = *__julec_range_begin;
			_iter_begin_4393355504:;
			{
				_72313_obj+=_1190c5fe0_indent();
				_72313_obj+=_1190c5fe0_gen_fn(_1190c5fe0_f);
				_72313_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4393355504:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4393355504; }
			_iter_end_4393355504:;
		}
	}
	return _72313_obj;
}



inline jule::Str _1190c5fe0_gen_struct_ostream(jule::Ref<_1037370d0_StructIns> _73327_s) {
	jule::Str _73413_obj = jule::Str("", 0);
	_73413_obj+=_1190c5fe0_indent();
	_73413_obj+=jule::Str("std::ostream &operator<<(std::ostream &_Stream, const ", 54);
	_73413_obj+=_104f406e0_struct_ins_out_ident(_73327_s);
	_73413_obj+=jule::Str(" &_Src) {\n", 10);
	_1190c5fe0_add_indent();
	_73413_obj+=_1190c5fe0_indent();
	_73413_obj+=jule::Str("_Stream << \"", 12);
	_73413_obj+=_73327_s->_field_decl->_field_ident;
	_73413_obj+=jule::Str("{\";\n", 4);
	{
		auto __julec_range_expr = _73327_s->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1190c5fe0_i = 0;
			jule::Ref<_1037370d0_FieldIns> _1190c5fe0_f = *__julec_range_begin;
			_iter_begin_4393363664:;
			{
				_73413_obj+=_1190c5fe0_indent();
				_73413_obj+=jule::Str("_Stream << \"", 12);
				_73413_obj+=_1190c5fe0_f->_field_decl->_field_ident;
				_73413_obj+=jule::Str(":", 1);
				jule::Ref<_1037370d0_StructIns> _75213_strct = _1190c5fe0_f->_field_kind->_method_strct();
				if ((jule::real(_75213_strct) && jule::real(_75213_strct->_field_decl)) && _75213_strct->_field_decl->_field_cpp_linked) {
					_73413_obj+=(jule::Str(" cpp.", 5) + _104f406e0_field_out_ident(_1190c5fe0_f->_field_decl)) + jule::Str("\"", 1);
				} else {
					_73413_obj+=jule::Str("\" << _Src.", 10);
					_73413_obj+=_104f406e0_field_out_ident(_1190c5fe0_f->_field_decl);
				}
				if ((_1190c5fe0_i + 1LL) < _73327_s->_field_fields.len()) {
					_73413_obj+=jule::Str(" << \", \"", 8);
				}
				_73413_obj+=jule::Str(";\n", 2);
			}
			_iter_next_4393363664:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1190c5fe0_i; _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4393363664; }
			_iter_end_4393363664:;
		}
	}
	_73413_obj+=_1190c5fe0_indent();
	_73413_obj+=jule::Str("_Stream << \"}\";\n", 16);
	_73413_obj+=_1190c5fe0_indent();
	_73413_obj+=jule::Str("return _Stream;\n", 16);
	_1190c5fe0_done_indent();
	_73413_obj+=_1190c5fe0_indent();
	_73413_obj+=jule::Str("}", 1);
	return _73413_obj;
}



inline jule::Str _1190c5fe0_gen_struct_derive_defs(jule::Ref<_1037370d0_StructIns> _77531_s) {
	jule::Str _77613_obj = jule::Str("", 0);
	if (_77531_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))) {
		_77613_obj+=_1190c5fe0_indent();
		_77613_obj+=_104f3f3d0_get_derive_fn_def_clone(_77531_s->_field_decl);
		_77613_obj+=jule::Str("{\n", 2);
		_1190c5fe0_add_indent();
		_77613_obj+=_1190c5fe0_indent();
		_77613_obj+=_104f69330_gen_struct_kind_ins(_77531_s);
		_77613_obj+=jule::Str(" clone;\n", 8);
		{
			auto __julec_range_expr = _77531_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1037370d0_FieldIns> _1190c5fe0_f = *__julec_range_begin;
				_iter_begin_4393381296:;
				{
					jule::Str _78717_ident = _104f406e0_field_out_ident(_1190c5fe0_f->_field_decl);
					_77613_obj+=_1190c5fe0_indent();
					_77613_obj+=jule::Str("clone.", 6);
					_77613_obj+=_78717_ident;
					_77613_obj+=jule::Str(" = jule::clone(this->", 21);
					_77613_obj+=_78717_ident;
					_77613_obj+=jule::Str(");\n", 3);
				}
				_iter_next_4393381296:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1190c5fe0_f = *__julec_range_begin; goto _iter_begin_4393381296; }
				_iter_end_4393381296:;
			}
		}
		_77613_obj+=_1190c5fe0_indent();
		_77613_obj+=jule::Str("return clone;\n", 14);
		_1190c5fe0_done_indent();
		_77613_obj+=_1190c5fe0_indent();
		_77613_obj+=jule::Str("}", 1);
	}
	return _77613_obj;
}



inline jule::Str _1190c5fe0_gen_struct_ins(jule::Ref<_1037370d0_StructIns> _80723_s) {
	jule::Str _80813_obj = _1190c5fe0_gen_struct_method_defs(_80723_s);
	_80813_obj+=jule::Str("\n\n", 2);
	_80813_obj+=_1190c5fe0_gen_struct_derive_defs(_80723_s);
	_80813_obj+=jule::Str("\n\n", 2);
	_80813_obj+=_1190c5fe0_gen_struct_ostream(_80723_s);
	return _80813_obj;
}



inline jule::Str _1190c5fe0_gen_struct(jule::Ref<_1037370d0_Struct> _81719_s) {
	jule::Str _81813_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _81719_s->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_StructIns> _1190c5fe0_ins = *__julec_range_begin;
			_iter_begin_4393392224:;
			{
				_81813_obj+=_1190c5fe0_gen_struct_ins(_1190c5fe0_ins) + jule::Str("\n\n", 2);
			}
			_iter_next_4393392224:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_ins = *__julec_range_begin; goto _iter_begin_4393392224; }
			_iter_end_4393392224:;
		}
	}
	return _81813_obj;
}



inline jule::Str _1190c5fe0_gen_structs(jule::Slice<jule::Ref<_1037370d0_Struct>> _82620_structs) {
	jule::Str _82713_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _82620_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _1190c5fe0_s = *__julec_range_begin;
			_iter_begin_4393395872:;
			{
				if ((!(_1190c5fe0_s->_field_cpp_linked)) && (_1190c5fe0_s->_field_token._field_id != 0LLU)) {
					_82713_obj+=_1190c5fe0_gen_struct(_1190c5fe0_s);
					_82713_obj+=jule::Str("\n\n", 2);
				}
			}
			_iter_next_4393395872:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_s = *__julec_range_begin; goto _iter_begin_4393395872; }
			_iter_end_4393395872:;
		}
	}
	return _82713_obj;
}



inline jule::Str _1190c5fe0_gen_fns(jule::Ref<_108db2720_IR> _83816_ir) {
	jule::Str _83913_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _83816_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _1190c5fe0_u = *__julec_range_begin;
			_iter_begin_4393401056:;
			{
				if ((!(_1190c5fe0_u->_field_cpp_linked))) {
					_83913_obj+=_1190c5fe0_gen_pkg_fns(_1190c5fe0_u->_field_package);
				}
			}
			_iter_next_4393401056:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_u = *__julec_range_begin; goto _iter_begin_4393401056; }
			_iter_end_4393401056:;
		}
	}
	_83913_obj+=_1190c5fe0_gen_pkg_fns(_83816_ir->_field_main);
	return _83913_obj;
}



inline void _1190c5fe0_push_init(jule::Ref<_119162660_Package> _85118_pkg,jule::Str& _85138_obj) {
	
	
	jule::Ref<_1037649f0_Fn> _8559_f = _85118_pkg->_method_find_fn(jule::Str("init", 4),false);
	if ((!(jule::real(_8559_f)))) {
		return;
	}
	_85138_obj+=(jule::Str("\n\t", 2) + _104f406e0_fn_out_ident(_8559_f)) + jule::Str("();", 3);
}



inline jule::Str _1190c5fe0_gen_init_caller(jule::Ref<_108db2720_IR> _86424_ir) {
	jule::Str _86513_obj = jule::Str("void ", 5);
	_86513_obj+=jule::Str("__jule_call_initializers", 24);
	_86513_obj+=jule::Str("(void) {", 8);
	{
		auto __julec_range_expr = _86424_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _1190c5fe0_u = *__julec_range_begin;
			_iter_begin_4393412752:;
			{
				if ((!(_1190c5fe0_u->_field_cpp_linked))) {
					_1190c5fe0_push_init(_1190c5fe0_u->_field_package,_86513_obj);
				}
			}
			_iter_next_4393412752:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1190c5fe0_u = *__julec_range_begin; goto _iter_begin_4393412752; }
			_iter_end_4393412752:;
		}
	}
	_1190c5fe0_push_init(_86424_ir->_field_main,_86513_obj);
	_86513_obj+=jule::Str("\n}", 2);
	return _86513_obj;
}



inline void _1190c5fe0_append_standard(jule::Str& _88029_obj_code,jule::Str _88044_compiler,jule::Str _88059_compiler_cmd) {
	struct JuleCompileTime _8819_time = time_now();
	jule::Str _88313_time_str = jule::Str("", 0);
	_88313_time_str+=_1486fb320_itoa(_8819_time.day);
	_88313_time_str+=jule::Str("/", 1);
	_88313_time_str+=_1486fb320_itoa(_8819_time.month);
	_88313_time_str+=jule::Str("/", 1);
	_88313_time_str+=_1486fb320_itoa(_8819_time.year);
	_88313_time_str+=jule::Str(" ", 1);
	_88313_time_str+=_1486fb320_itoa(_8819_time.hour);
	_88313_time_str+=jule::Str(".", 1);
	_88313_time_str+=_1486fb320_itoa(_8819_time.minute);
	_88313_time_str+=jule::Str(" (DD/MM/YYYY) (HH.MM)", 21);
	jule::Str _89513_s = jule::Str("", 0);
	_89513_s+=jule::Str("// Auto generated by JuleC.\n", 28);
	_89513_s+=jule::Str("// JuleC version: ", 18);
	_89513_s+=jule::Str("beta 0.0.4 master", 17);
	_89513_s+=jule::Str("\n", 1);
	_89513_s+=jule::Str("// Date: ", 9);
	_89513_s+=_88313_time_str;
	_89513_s+=jule::Str("\n//\n// Recommended Compile Command;\n// ", 39);
	_89513_s+=_88044_compiler;
	_89513_s+=jule::Str(" ", 1);
	_89513_s+=_88059_compiler_cmd;
	_89513_s+=jule::Str("\n\n#include \"", 12);
	_89513_s+=_149048970_PATH_API;
	_89513_s+=jule::Str("\"\n\n", 3);
	_89513_s+=_88029_obj_code;
	_89513_s+=jule::Str("\nint main(int argc, char *argv[], char *envp[]) {\n    std::set_terminate(&jule::terminate_handler);\n    jule::set_sig_handler(jule::signal_handler);\n    jule::setup_command_line_args(argc, argv);\n    jule::setup_environment_variables(envp);\n\n    __jule_call_initializers();\n    entry_point();\n\n    return EXIT_SUCCESS;\n}", 320);
	_88029_obj_code=_89513_s;
}



inline jule::Str _1190c5fe0_gen(jule::Ref<_108db2720_IR> _92916_ir) {
	jule::Ref<_1190c5fe0_OrderedDecls> _93013_od = jule::new_struct<_1190c5fe0_OrderedDecls>(new( std::nothrow ) _1190c5fe0_OrderedDecls());
	_93013_od->_field_structs=_92916_ir->_method_get_all_structures();
	_1035fedb0_order_structures(_93013_od->_field_structs);
	_93013_od->_field_globals=_92916_ir->_method_get_all_variables();
	_1035fedb0_order_variables(_93013_od->_field_globals);
	jule::Str _93713_obj = jule::Str("", 0);
	_93713_obj+=_1190c5fe0_gen_links(_92916_ir) + jule::Str("\n", 1);
	_93713_obj+=_1190c5fe0_gen_prototypes(_92916_ir,_93013_od->_field_structs) + jule::Str("\n\n", 2);
	_93713_obj+=_1190c5fe0_gen_globals(_93013_od->_field_globals) + jule::Str("\n", 1);
	_93713_obj+=_1190c5fe0_gen_structs(_93013_od->_field_structs);
	_93713_obj+=_1190c5fe0_gen_fns(_92916_ir) + jule::Str("\n", 1);
	_93713_obj+=_1190c5fe0_gen_init_caller(_92916_ir) + jule::Str("\n", 1);
	return _93713_obj;
}



inline jule::Bool _1035fedb0_is_struct_ordered(jule::Slice<jule::Ref<_1037370d0_Struct>> _822_structs,jule::Ref<_1037370d0_Struct> _842_s) {
	{
		auto __julec_range_expr = _842_s->_field_depends;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1037370d0_Struct> _1035fedb0_d = *__julec_range_begin;
			_iter_begin_4393445264:;
			{
				{
					auto __julec_range_expr = _822_structs;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1037370d0_Struct> _1035fedb0_ss = *__julec_range_begin;
						_iter_begin_4393446960:;
						{
							if ((_1035fedb0_ss).alloc == (_842_s).alloc) {
								return false;
							} else if ((_1035fedb0_ss).alloc == (_1035fedb0_d).alloc) {
								goto _iter_end_4393446960;
							}
						}
						_iter_next_4393446960:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _1035fedb0_ss = *__julec_range_begin; goto _iter_begin_4393446960; }
						_iter_end_4393446960:;
					}
				}
			}
			_iter_next_4393445264:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1035fedb0_d = *__julec_range_begin; goto _iter_begin_4393445264; }
			_iter_end_4393445264:;
		}
	}
	return true;
}



inline void _1035fedb0_order_structures(jule::Slice<jule::Ref<_1037370d0_Struct>> _2425_structs) {
	jule::I64 _259_n = _2425_structs.len();
	jule::Int _2613_i = 0LL;
	_iter_begin_4397128160:;
	if (!(_2613_i < _259_n)) { goto _iter_end_4397128160; }
	{
		jule::Bool _2817_swapped = false;
		jule::Int _3017_j = 0LL;
		_iter_begin_4397135216:;
		if (!(_3017_j < ((_259_n - _2613_i) - 1LL))) { goto _iter_end_4397135216; }
		{
			if (_2425_structs[static_cast<jule::Int>(_3017_j)]->_field_depends.len() > 1LL) {
				std::tie(_2425_structs[static_cast<jule::Int>(_3017_j)],_2425_structs[static_cast<jule::Int>(_3017_j + 1LL)]) = std::make_tuple(_2425_structs[static_cast<jule::Int>(_3017_j + 1LL)],_2425_structs[static_cast<jule::Int>(_3017_j)]);
				_2817_swapped=true;
			}
		}
		_iter_next_4397135216:;
		(_3017_j)++;
		goto _iter_begin_4397135216;
		_iter_end_4397135216:;
		if ((!(_2817_swapped))) {
			goto _iter_end_4397128160;
		}
	}
	_iter_next_4397128160:;
	(_2613_i)++;
	goto _iter_begin_4397128160;
	_iter_end_4397128160:;
	_2613_i=0LL;
	_iter_begin_4397133216:;
	if (!(_2613_i < _259_n)) { goto _iter_end_4397133216; }
	{
		jule::Bool _4517_swapped = false;
		jule::Int _4717_j = 0LL;
		_iter_begin_4397133520:;
		if (!(_4717_j < ((_259_n - _2613_i) - 1LL))) { goto _iter_end_4397133520; }
		{
			if ((!(_1035fedb0_is_struct_ordered(_2425_structs,_2425_structs[static_cast<jule::Int>(_4717_j)])))) {
				std::tie(_2425_structs[static_cast<jule::Int>(_4717_j)],_2425_structs[static_cast<jule::Int>(_4717_j + 1LL)]) = std::make_tuple(_2425_structs[static_cast<jule::Int>(_4717_j + 1LL)],_2425_structs[static_cast<jule::Int>(_4717_j)]);
				_4517_swapped=true;
			}
		}
		_iter_next_4397133520:;
		(_4717_j)++;
		goto _iter_begin_4397133520;
		_iter_end_4397133520:;
		if ((!(_4517_swapped))) {
			goto _iter_end_4397133216;
		}
	}
	_iter_next_4397133216:;
	(_2613_i)++;
	goto _iter_begin_4397133216;
	_iter_end_4397133216:;
}



inline jule::Bool _1035fedb0_is_var_ordered(jule::Slice<jule::Ref<_104598e40_Var>> _6219_vars,jule::Ref<_104598e40_Var> _6233_v) {
	{
		auto __julec_range_expr = _6233_v->_field_depends;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_104598e40_Var> _1035fedb0_d = *__julec_range_begin;
			_iter_begin_4397151344:;
			{
				{
					auto __julec_range_expr = _6219_vars;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_104598e40_Var> _1035fedb0_vv = *__julec_range_begin;
						_iter_begin_4397153040:;
						{
							if ((_1035fedb0_vv).alloc == (_6233_v).alloc) {
								return false;
							} else if ((_1035fedb0_vv).alloc == (_1035fedb0_d).alloc) {
								goto _iter_end_4397153040;
							}
						}
						_iter_next_4397153040:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _1035fedb0_vv = *__julec_range_begin; goto _iter_begin_4397153040; }
						_iter_end_4397153040:;
					}
				}
			}
			_iter_next_4397151344:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1035fedb0_d = *__julec_range_begin; goto _iter_begin_4397151344; }
			_iter_end_4397151344:;
		}
	}
	return true;
}



inline void _1035fedb0_order_variables(jule::Slice<jule::Ref<_104598e40_Var>> _7824_vars) {
	jule::I64 _799_n = _7824_vars.len();
	jule::Int _8013_i = 0LL;
	_iter_begin_4397157488:;
	if (!(_8013_i < _799_n)) { goto _iter_end_4397157488; }
	{
		jule::Bool _8217_swapped = false;
		jule::Int _8417_j = 0LL;
		_iter_begin_4397160352:;
		if (!(_8417_j < ((_799_n - _8013_i) - 1LL))) { goto _iter_end_4397160352; }
		{
			if ((!(_1035fedb0_is_var_ordered(_7824_vars,_7824_vars[static_cast<jule::Int>(_8417_j)])))) {
				std::tie(_7824_vars[static_cast<jule::Int>(_8417_j)],_7824_vars[static_cast<jule::Int>(_8417_j + 1LL)]) = std::make_tuple(_7824_vars[static_cast<jule::Int>(_8417_j + 1LL)],_7824_vars[static_cast<jule::Int>(_8417_j)]);
				_8217_swapped=true;
			}
		}
		_iter_next_4397160352:;
		(_8417_j)++;
		goto _iter_begin_4397160352;
		_iter_end_4397160352:;
		if ((!(_8217_swapped))) {
			goto _iter_end_4397157488;
		}
	}
	_iter_next_4397157488:;
	(_8013_i)++;
	goto _iter_begin_4397157488;
	_iter_end_4397157488:;
}



inline jule::Str _1486094f0_str_repeat(jule::Str _3515_sub,jule::Int _3529_n) {
	if (_3529_n == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _4013_s = jule::Str("", 0);
	_iter_begin_4397260880:;
	if (!(_3529_n > 0LL)) { goto _iter_end_4397260880; }
	{
		_4013_s+=_3515_sub;
	}
	_iter_next_4397260880:;
	(_3529_n)--;
	goto _iter_begin_4397260880;
	_iter_end_4397260880:;
	return _4013_s;
}



inline void _1486094f0_print_error_message(jule::Str _4724_msg) {
	jule::outln(_4724_msg);
}



inline void _1486094f0_help(void) {
	if (_1490c0580_ARGS.len() > 2LL) {
		_1486094f0_print_error_message(jule::Str("invalid command: ", 17) + _1490c0580_ARGS[2LL]);
		return;
	}
	jule::I64 _5613_max = _1486094f0_HELP_MAP[0LL][0LL].len();
	{
		auto __julec_range_expr = _1486094f0_HELP_MAP;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Array<jule::Str,2> _1486094f0_k = *__julec_range_begin;
			_iter_begin_4397268304:;
			{
				jule::I64 _5813_n = _1486094f0_k[0LL].len();
				if (_5813_n > _5613_max) {
					_5613_max=_5813_n;
				}
			}
			_iter_next_4397268304:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1486094f0_k = *__julec_range_begin; goto _iter_begin_4397268304; }
			_iter_end_4397268304:;
		}
	}
	jule::Str _6413_s = jule::Str("", 0);
	
	{
		auto __julec_range_expr = _1486094f0_HELP_MAP;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1486094f0_i = 0;
			jule::Array<jule::Str,2> _1486094f0_part = *__julec_range_begin;
			_iter_begin_4397273232:;
			{
				_6413_s+=_1486094f0_part[0LL];
				_6413_s+=_1486094f0_str_repeat(jule::Str(" ", 1),static_cast<jule::I64>((_5613_max - _1486094f0_part[0LL].len()) + 5LL));
				_6413_s+=_1486094f0_part[1LL];
				if ((_1486094f0_i + 1LL) < 4LL) {
					_6413_s+=jule::Str("\n", 1);
				}
			}
			_iter_next_4397273232:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1486094f0_i; _1486094f0_part = *__julec_range_begin; goto _iter_begin_4397273232; }
			_iter_end_4397273232:;
		}
	}
	jule::outln(_6413_s);
}



inline void _1486094f0_version(void) {
	if (_1490c0580_ARGS.len() > 2LL) {
		_1486094f0_print_error_message(jule::Str("invalid command: ", 17) + _1490c0580_ARGS[2LL]);
		return;
	}
	jule::out(jule::Str("julec version ", 14));
	jule::outln(jule::Str("beta 0.0.4 master", 17));
}



inline void _1486094f0_tool_distos(void) {
	jule::out(jule::Str("supported operating systems:\n ", 30));
	{
		auto __julec_range_expr = _14903a5c0_DISTOS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1486094f0_os = *__julec_range_begin;
			_iter_begin_4397281792:;
			{
				jule::out(_1486094f0_os);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_4397281792:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1486094f0_os = *__julec_range_begin; goto _iter_begin_4397281792; }
			_iter_end_4397281792:;
		}
	}
	jule::outln(jule::Str("", 0));
}



inline void _1486094f0_tool_distarch(void) {
	jule::out(jule::Str("supported architects:\n ", 23));
	{
		auto __julec_range_expr = _14903a5c0_DISTARCH;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1486094f0_arch = *__julec_range_begin;
			_iter_begin_4397283360:;
			{
				jule::out(_1486094f0_arch);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_4397283360:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1486094f0_arch = *__julec_range_begin; goto _iter_begin_4397283360; }
			_iter_end_4397283360:;
		}
	}
	jule::outln(jule::Str("", 0));
}



inline void _1486094f0_tool(void) {
	if (_1490c0580_ARGS.len() == 2LL) {
		jule::outln(jule::Str("tool commands:\n distos     Lists all supported operating systems\n distarch   Lists all supported architects", 107));
		return;
	} else if (_1490c0580_ARGS.len() > 3LL) {
		_1486094f0_print_error_message(jule::Str("invalid command: ", 17) + _1490c0580_ARGS[3LL]);
		return;
	}
	jule::Str _1199_cmd = _1490c0580_ARGS[2LL];
	{
		auto _match_expr{ _1199_cmd };
		if (!((jule::Str("distos", 6)) == _match_expr)) { goto _case_end_4397293040; }
		_case_begin_4397293040:;
		{
			_1486094f0_tool_distos();
		}
		goto _match_end_4397289888;
		_case_end_4397293040:;
		if (!((jule::Str("distarch", 8)) == _match_expr)) { goto _case_end_4397294048; }
		_case_begin_4397294048:;
		{
			_1486094f0_tool_distarch();
		}
		goto _match_end_4397289888;
		_case_end_4397294048:;
		_case_begin_4397292128:;
		{
			_1486094f0_print_error_message(jule::Str("Undefined command: ", 19) + _1199_cmd);
		}
		goto _match_end_4397289888;
		_case_end_4397292128:;
		_match_end_4397289888:;
	}
}



inline void _1486094f0_julenv(void) {
	jule::outln(jule::Str("julec version: beta 0.0.4 master", 32));
	jule::outln(jule::Str("architecture: amd64", 19));
	jule::outln(jule::Str("operating system: linux", 23));
}



inline jule::Bool _1486094f0_process_command(void) {
	{
		auto _match_expr{ _1490c0580_ARGS[1LL] };
		if (!((jule::Str("help", 4)) == _match_expr)) { goto _case_end_4397298960; }
		_case_begin_4397298960:;
		{
			_1486094f0_help();
		}
		goto _match_end_4397294592;
		_case_end_4397298960:;
		if (!((jule::Str("version", 7)) == _match_expr)) { goto _case_end_4397299072; }
		_case_begin_4397299072:;
		{
			_1486094f0_version();
		}
		goto _match_end_4397294592;
		_case_end_4397299072:;
		if (!((jule::Str("tool", 4)) == _match_expr)) { goto _case_end_4397299184; }
		_case_begin_4397299184:;
		{
			_1486094f0_tool();
		}
		goto _match_end_4397294592;
		_case_end_4397299184:;
		if (!((jule::Str("julenv", 6)) == _match_expr)) { goto _case_end_4397297856; }
		_case_begin_4397297856:;
		{
			_1486094f0_julenv();
		}
		goto _match_end_4397294592;
		_case_end_4397297856:;
		_case_begin_4397292304:;
		{
			return false;
		}
		goto _match_end_4397294592;
		_case_end_4397292304:;
		_match_end_4397294592:;
	}
	return true;
}



inline void _1486094f0_init(void) {
	_1486242d0_COMPILER=jule::Str("clang", 5);
	_1486242d0_COMPILER_PATH=jule::Str("clang++", 7);
}



inline void _1486094f0_exit_err(jule::Str _15413_msg) {
	jule::outln(_15413_msg);
	_10868c730_exit(1LL);
}



void entry_point(void) {
	julec_init();
	if (_1490c0580_ARGS.len() < 2LL) {
		_10868c730_exit(0LL);
	}
	if (_1486094f0_process_command()) {
		return;
	}
	_1486242d0_compile_command();
}



inline jule::Int _1486242d0_system(jule::Str _6711_cmd) {
	return static_cast<jule::Int>(static_cast<jule::Int>(system(((char*)((&(_6711_cmd[0LL])))))));
}



inline std::tuple<jule::Str,jule::Str> _1486242d0_get_option(jule::Slice<jule::Str> _7115_args,jule::Int& _7133_i) {
	jule::Str _7153_content = jule::Str();
	jule::Str _7143_arg = jule::Str();
	_iter_begin_4397314704:;
	if (!(_7133_i < _7115_args.len())) { goto _iter_end_4397314704; }
	{
		_7143_arg=_7115_args[static_cast<jule::Int>(_7133_i)];
		jule::Int _7417_j = 0LL;
		jule::Slice<jule::I32> _7517_runes = static_cast<jule::Slice<jule::I32>>(_7143_arg);
		jule::I32 _7617_r = _7517_runes[static_cast<jule::Int>(_7417_j)];
		if (_7617_r != '-') {
			_7153_content+=_7143_arg;
			_7143_arg=jule::Str("", 0);
			goto _iter_next_4397314704;
		}
		(_7417_j)++;
		if (_7417_j >= _7517_runes.len()) {
			_1486094f0_exit_err(jule::Str("undefined syntax: ", 18) + _7143_arg);
		}
		_7617_r=_7517_runes[static_cast<jule::Int>(_7417_j)];
		if (_7617_r == '-') {
			(_7417_j)++;
			if (_7417_j >= _7517_runes.len()) {
				_1486094f0_exit_err(jule::Str("undefined syntax: ", 18) + _7143_arg);
			}
			_7617_r=_7517_runes[static_cast<jule::Int>(_7417_j)];
		}
		if ((!(_108e15ff0_is_ident_rune(static_cast<jule::Str>(_7617_r))))) {
			_1486094f0_exit_err(jule::Str("undefined syntax: ", 18) + _7143_arg);
		}
		(_7417_j)++;
		_iter_begin_4397325472:;
		if (!(_7417_j < _7517_runes.len())) { goto _iter_end_4397325472; }
		{
			_7617_r=_7517_runes[static_cast<jule::Int>(_7417_j)];
			if (((((!(_108e15ff0_is_space(_7617_r))) && (!(_108e15ff0_is_letter(_7617_r)))) && (!(_108e15ff0_is_decimal(static_cast<jule::U8>(_7617_r))))) && (_7617_r != '_')) && (_7617_r != '-')) {
				_1486094f0_exit_err(jule::Str("undefined syntax: ", 18) + static_cast<jule::Str>(_7517_runes.slice(static_cast<jule::Int>(_7417_j))));
			}
		}
		_iter_next_4397325472:;
		(_7417_j)++;
		goto _iter_begin_4397325472;
		_iter_end_4397325472:;
		goto _iter_end_4397314704;
	}
	_iter_next_4397314704:;
	(_7133_i)++;
	goto _iter_begin_4397314704;
	_iter_end_4397314704:;
	return std::make_tuple(_7143_arg,_7153_content);
}



inline jule::Str _1486242d0_get_option_value(jule::Slice<jule::Str> _11521_args,jule::Int& _11539_i) {
	(_11539_i)++;
	if (_11539_i < _11521_args.len()) {
		jule::Str _11813_arg = _11521_args[static_cast<jule::Int>(_11539_i)];
		return _11813_arg;
	}
	return jule::Str("", 0);
}



inline void _1486242d0_parse_out_option(jule::Slice<jule::Str> _12421_args,jule::Int& _12439_i) {
	jule::Str _1259_value = _1486242d0_get_option_value(_12421_args,_12439_i);
	if (_1259_value == jule::Str("", 0)) {
		_1486094f0_exit_err(jule::Str("missing option value: -o --out", 30));
	}
	_1486242d0_OUT=_1259_value;
}



inline void _1486242d0_parse_opt_option(jule::Slice<jule::Str> _13221_args,jule::Int& _13239_i) {
	jule::Str _1339_value = _1486242d0_get_option_value(_13221_args,_13239_i);
	if (_1339_value == jule::Str("", 0)) {
		_1486094f0_exit_err(jule::Str("missing option value: --opt", 27));
	}
	{
		auto _match_expr{ _1339_value };
		if (!((jule::Str("L0", 2)) == _match_expr)) { goto _case_end_4397349648; }
		_case_begin_4397349648:;
		{
			_104862e90_push_opt_level(0LLU);
		}
		goto _match_end_4397346352;
		_case_end_4397349648:;
		if (!((jule::Str("L1", 2)) == _match_expr)) { goto _case_end_4397349760; }
		_case_begin_4397349760:;
		{
			_104862e90_push_opt_level(1LLU);
		}
		goto _match_end_4397346352;
		_case_end_4397349760:;
		_case_begin_4397348112:;
		{
			_1486094f0_exit_err(jule::Str("invalid optimization level: ", 28) + _1339_value);
		}
		goto _match_end_4397346352;
		_case_end_4397348112:;
		_match_end_4397346352:;
	}
}



inline void _1486242d0_check_target_arch(jule::Str _14522_arch) {
	{
		auto __julec_range_expr = _14903a5c0_DISTARCH;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1486242d0_distarch = *__julec_range_begin;
			_iter_begin_4397351872:;
			{
				if (_14522_arch == _1486242d0_distarch) {
					return;
				}
			}
			_iter_next_4397351872:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1486242d0_distarch = *__julec_range_begin; goto _iter_begin_4397351872; }
			_iter_end_4397351872:;
		}
	}
	_1486094f0_exit_err(jule::Str("unsupported/undefined architecture: ", 36) + _14522_arch);
}



inline void _1486242d0_check_target_os(jule::Str _15520_os) {
	{
		auto __julec_range_expr = _14903a5c0_DISTOS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1486242d0_distos = *__julec_range_begin;
			_iter_begin_4397355168:;
			{
				if (_15520_os == _1486242d0_distos) {
					return;
				}
			}
			_iter_next_4397355168:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1486242d0_distos = *__julec_range_begin; goto _iter_begin_4397355168; }
			_iter_end_4397355168:;
		}
	}
	_1486094f0_exit_err(jule::Str("unsupported/undefined operating system: ", 40) + _15520_os);
}



inline void _1486242d0_parse_target_option(jule::Slice<jule::Str> _16524_args,jule::Int& _16542_i) {
	jule::Str _1669_value = _1486242d0_get_option_value(_16524_args,_16542_i);
	if (_1669_value == jule::Str("", 0)) {
		_1486094f0_exit_err(jule::Str("missing option value: --target", 30));
	}
	jule::Slice<jule::Str> _1719_parts = _1669_value.split(jule::Str("-", 1),-1LL);
	if (_1719_parts.len() != 2LL) {
		_1486094f0_exit_err(jule::Str("undefined platform target format: ", 34) + _1669_value);
	}
	jule::Str _17610_os = _1719_parts[0LL];
	jule::Str _17614_arch = _1719_parts[1LL];
	std::tie(_17610_os,_17614_arch) = std::make_tuple(_1719_parts[0LL],_1719_parts[1LL]);
	if (_17610_os != jule::Str("native", 6)) {
		_1486242d0_check_target_os(_17610_os);
		_149048970_OS=_17610_os;
	}
	if (_17614_arch != jule::Str("native", 6)) {
		_1486242d0_check_target_arch(_17614_arch);
		_149048970_ARCH=_17614_arch;
	}
}



inline void _1486242d0_parse_compiler_option(jule::Slice<jule::Str> _18926_args,jule::Int& _18944_i) {
	jule::Str _1909_value = _1486242d0_get_option_value(_18926_args,_18944_i);
	{
		auto _match_expr{ _1909_value };
		if (!((jule::Str("", 0)) == _match_expr)) { goto _case_end_4397374240; }
		_case_begin_4397374240:;
		{
			_1486094f0_exit_err(jule::Str("missing option value: --compiler", 32));
		}
		goto _match_end_4397372112;
		_case_end_4397374240:;
		if (!((jule::Str("clang", 5)) == _match_expr)) { goto _case_end_4397375200; }
		_case_begin_4397375200:;
		{
			_1486242d0_COMPILER=jule::Str("clang", 5);
			_1486242d0_COMPILER_PATH=jule::Str("clang++", 7);
		}
		goto _match_end_4397372112;
		_case_end_4397375200:;
		if (!((jule::Str("gcc", 3)) == _match_expr)) { goto _case_end_4397375312; }
		_case_begin_4397375312:;
		{
			_1486242d0_COMPILER=jule::Str("gcc", 3);
			_1486242d0_COMPILER_PATH=jule::Str("g++", 3);
		}
		goto _match_end_4397372112;
		_case_end_4397375312:;
		_case_begin_4397373152:;
		{
			_1486094f0_exit_err(jule::Str("invalid option value for --compiler: ", 37) + _1909_value);
		}
		goto _match_end_4397372112;
		_case_end_4397373152:;
		_match_end_4397372112:;
	}
}



inline jule::Str _1486242d0_parse_options(jule::Slice<jule::Str> _20818_args) {
	jule::Str _20913_cmd = jule::Str("", 0);
	jule::Int _21313_i = 1LL;
	_iter_begin_4397379952:;
	if (!(_21313_i < _20818_args.len())) { goto _iter_end_4397379952; }
	{
		jule::Str _21514_arg;
		jule::Str _21519_content;
		std::tie(_21514_arg,_21519_content) = _1486242d0_get_option(_20818_args,_21313_i);
		_20913_cmd+=_21519_content;
		{
			auto _match_expr{ _21514_arg };
			if (!((jule::Str("", 0)) == _match_expr)) { goto _case_end_4397385552; }
			goto _match_end_4397380928;
			_case_end_4397385552:;
			if (!((jule::Str("-o", 2)) == _match_expr || (jule::Str("--out", 5)) == _match_expr)) { goto _case_end_4397383760; }
			_case_begin_4397383760:;
			{
				_1486242d0_parse_out_option(_20818_args,_21313_i);
			}
			goto _match_end_4397380928;
			_case_end_4397383760:;
			if (!((jule::Str("-t", 2)) == _match_expr || (jule::Str("--transpile", 11)) == _match_expr)) { goto _case_end_4397383872; }
			_case_begin_4397383872:;
			{
				_1486242d0_MODE=1LLU;
			}
			goto _match_end_4397380928;
			_case_end_4397383872:;
			if (!((jule::Str("-c", 2)) == _match_expr || (jule::Str("--compile", 9)) == _match_expr)) { goto _case_end_4397383984; }
			_case_begin_4397383984:;
			{
				_1486242d0_MODE=0LLU;
			}
			goto _match_end_4397380928;
			_case_end_4397383984:;
			if (!((jule::Str("--compiler", 10)) == _match_expr)) { goto _case_end_4397385712; }
			_case_begin_4397385712:;
			{
				_1486242d0_parse_compiler_option(_20818_args,_21313_i);
			}
			goto _match_end_4397380928;
			_case_end_4397385712:;
			if (!((jule::Str("--opt-copy", 10)) == _match_expr)) { goto _case_end_4397385824; }
			_case_begin_4397385824:;
			{
				_104862e90_OPTIMIZATIONS=jule::append(_104862e90_OPTIMIZATIONS,jule::Slice<jule::Str>({jule::Str("--opt-copy", 10)}));
			}
			goto _match_end_4397380928;
			_case_end_4397385824:;
			if (!((jule::Str("--opt-deadcode", 14)) == _match_expr)) { goto _case_end_4397385936; }
			_case_begin_4397385936:;
			{
				_104862e90_OPTIMIZATIONS=jule::append(_104862e90_OPTIMIZATIONS,jule::Slice<jule::Str>({jule::Str("--opt-deadcode", 14)}));
			}
			goto _match_end_4397380928;
			_case_end_4397385936:;
			if (!((jule::Str("--opt-append", 12)) == _match_expr)) { goto _case_end_4397386048; }
			_case_begin_4397386048:;
			{
				_104862e90_OPTIMIZATIONS=jule::append(_104862e90_OPTIMIZATIONS,jule::Slice<jule::Str>({jule::Str("--opt-append", 12)}));
			}
			goto _match_end_4397380928;
			_case_end_4397386048:;
			if (!((jule::Str("--opt", 5)) == _match_expr)) { goto _case_end_4397386160; }
			_case_begin_4397386160:;
			{
				_1486242d0_parse_opt_option(_20818_args,_21313_i);
			}
			goto _match_end_4397380928;
			_case_end_4397386160:;
			if (!((jule::Str("--target", 8)) == _match_expr)) { goto _case_end_4397386272; }
			_case_begin_4397386272:;
			{
				_1486242d0_parse_target_option(_20818_args,_21313_i);
			}
			goto _match_end_4397380928;
			_case_end_4397386272:;
			_case_begin_4397382912:;
			{
				_1486094f0_exit_err(jule::Str("undefined option: ", 18) + _21514_arg);
			}
			goto _match_end_4397380928;
			_case_end_4397382912:;
			_match_end_4397380928:;
		}
	}
	_iter_next_4397379952:;
	(_21313_i)++;
	goto _iter_begin_4397379952;
	_iter_end_4397379952:;
	_20913_cmd=_20913_cmd.trim(jule::Str(" \t\r\n\v", 5));
	return _20913_cmd;
}



inline void _1486242d0_write_output(jule::Str _25517_path,jule::Str _25528_content) {
	jule::Str _2569_dir = _149060fe0_dir(_25517_path);
	jule::Int _25817_err;
	std::tie(std::ignore,_25817_err) = _148796140_stat(_2569_dir);
	if (_25817_err != 0LLU) {
		jule::Int _26013_err = _1089dc920_create_dir(_2569_dir);
		if (_26013_err != 0LLU) {
			_1486094f0_exit_err(jule::Str("a problem occurs when code generation", 37));
		}
	}
	jule::Ref<_1487caab0_File> _26614_f;
	std::tie(_26614_f,_25817_err) = _14877cb80_open(_25517_path,578LL,438LL);
	if (_25817_err != 0LLU) {
		_1486094f0_exit_err(jule::Str("a problem occurs when code generation", 37));
	}
	std::tie(std::ignore,_25817_err) = _26614_f->_method_write(static_cast<jule::Slice<jule::U8>>(_25528_content));
	if (_25817_err != 0LLU) {
		_1486094f0_exit_err(jule::Str("a problem occurs when code generation", 37));
	}
	_26614_f->_method_close();
}



inline void _1486242d0_clear_objects(void) {
	if (_14877cb80_remove_file(_1486242d0_get_compile_path()) != 0LLU) {
		jule::outln(jule::Str("a problem occurs when object cleaning", 37));
		return;
	}
	_1089dc920_remove_dir(_1486242d0_OUT_DIR);
}



inline void _1486242d0_compile_ir(jule::Str _29215_compiler,jule::Str _29230_compiler_cmd) {
	jule::Int _2939_status = _1486242d0_system((_29215_compiler + jule::Str(" ", 1)) + _29230_compiler_cmd);
	if (_2939_status != 0LL) {
		jule::out(jule::Str("external compiler failed with status code: ", 43));
		jule::outln(_2939_status);
		_1486094f0_exit_err(jule::Str("", 0));
	}
	_1486242d0_clear_objects();
}



inline void _1486242d0_do_spell(jule::Str _30413_obj,jule::Str _30423_compiler,jule::Str _30438_compiler_cmd) {
	jule::Str _3059_path = _1486242d0_get_compile_path();
	_1486242d0_write_output(_3059_path,_30413_obj);
	{
		auto _match_expr{ _1486242d0_MODE };
		if (!((0LLU) == _match_expr)) { goto _case_end_4397419072; }
		_case_begin_4397419072:;
		{
			_1486242d0_compile_ir(_30423_compiler,_30438_compiler_cmd);
		}
		goto _match_end_4397417440;
		_case_end_4397419072:;
		_match_end_4397417440:;
	}
}



inline void _1486242d0_check_mode(void) {
	if ((_1486242d0_MODE != 1LLU) && (_1486242d0_MODE != 0LLU)) {
		jule::outln(_1486379e0_logf(jule::Str("\"@\" is invalid value for the \"@\" key", 36),jule::Slice<jule::Any>({jule::Any(_1486242d0_MODE),jule::Any(jule::Str("mode", 4))})));
		_1486094f0_exit_err(jule::Str("", 0));
	}
}



inline void _1486242d0_check_compiler(void) {
	if ((_1486242d0_COMPILER != jule::Str("gcc", 3)) && (_1486242d0_COMPILER != jule::Str("clang", 5))) {
		jule::outln(_1486379e0_logf(jule::Str("\"@\" is invalid value for the \"@\" key", 36),jule::Slice<jule::Any>({jule::Any(_1486242d0_COMPILER),jule::Any(jule::Str("compiler", 8))})));
		_1486094f0_exit_err(jule::Str("", 0));
	}
}



inline void _1486242d0_set(void) {
	_1486242d0_check_mode();
	_1486242d0_check_compiler();
}



inline void _1486242d0_print_logs(jule::Slice<_1486379e0_Log>& _33416_logs) {
	{
		auto __julec_range_expr = _33416_logs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_1486379e0_Log _1486242d0_l = *__julec_range_begin;
			_iter_begin_4397428624:;
			{
				_148624eb0_Logger::_static_method_log(_1486242d0_l);
			}
			_iter_next_4397428624:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1486242d0_l = *__julec_range_begin; goto _iter_begin_4397428624; }
			_iter_end_4397428624:;
		}
	}
}



inline jule::Bool _1486242d0_is_cpp_source_file(jule::Str _34023_path) {
	jule::Int _3419_offset = _34023_path.rfind(jule::Str(".", 1));
	if (_3419_offset == -1LL) {
		return false;
	}
	return _148682040_is_valid_cpp_ext(_34023_path.slice(static_cast<jule::Int>(_3419_offset)));
}



inline std::tuple<jule::Str,jule::Str> _1486242d0_gen_compile_cmd(jule::Str _34920_source_path,jule::Ref<_108db2720_IR> _34938_ir) {
	jule::Str _3509_compiler = _1486242d0_COMPILER_PATH;
	
	
	
	jule::Str _3559_SET_STD = jule::Str("--std=", 6) + _1486242d0_CPP_STD;
	jule::Str _35713_cmd = jule::Str("-O0 ", 4);
	{
		auto _match_expr{ _1486242d0_COMPILER };
		if (!((jule::Str("gcc", 3)) == _match_expr)) { goto _case_end_4397445168; }
		_case_begin_4397445168:;
		{
			_35713_cmd+=jule::Str("-w ", 3);
		}
		goto _match_end_4397443712;
		_case_end_4397445168:;
		if (!((jule::Str("clang", 5)) == _match_expr)) { goto _case_end_4397445280; }
		_case_begin_4397445280:;
		{
			_35713_cmd+=jule::Str("-Wno-everything ", 16);
		}
		goto _match_end_4397443712;
		_case_end_4397445280:;
		_match_end_4397443712:;
	}
	_35713_cmd+=_3559_SET_STD + jule::Str(" ", 1);
	{
		auto __julec_range_expr = _34938_ir->_field_passes;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1486242d0_pass = *__julec_range_begin;
			_iter_begin_4397447584:;
			{
				_35713_cmd+=_1486242d0_pass + jule::Str(" ", 1);
			}
			_iter_next_4397447584:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1486242d0_pass = *__julec_range_begin; goto _iter_begin_4397447584; }
			_iter_end_4397447584:;
		}
	}
	{
		auto __julec_range_expr = _34938_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_119162660_ImportInfo> _1486242d0_u = *__julec_range_begin;
			_iter_begin_4397448592:;
			{
				if (_1486242d0_u->_field_cpp_linked && _1486242d0_is_cpp_source_file(_1486242d0_u->_field_path)) {
					_35713_cmd+=_1486242d0_u->_field_path + jule::Str(" ", 1);
				}
			}
			_iter_next_4397448592:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1486242d0_u = *__julec_range_begin; goto _iter_begin_4397448592; }
			_iter_end_4397448592:;
		}
	}
	if (_1486242d0_OUT != jule::Str("", 0)) {
		_35713_cmd+=(jule::Str("-o ", 3) + _1486242d0_OUT) + jule::Str(" ", 1);
	}
	_35713_cmd+=_34920_source_path;
	return std::make_tuple(_3509_compiler,_35713_cmd);
}



inline jule::Str _1486242d0_get_compile_path(void) {
	return _149060fe0_join(jule::Slice<jule::Str>({_1486242d0_OUT_DIR,_1486242d0_OUT_NAME}));
}



inline void _1486242d0_apply_target_independent_optimizations(jule::Ref<_108db2720_IR> _39847_ir) {
	if (_104862e90_is_opt_enabled(jule::Str("--opt-deadcode", 14))) {
		_1086aaa30_eliminate_dead_code(_39847_ir);
	}
}



inline void _1486242d0_compile_command(void) {
	jule::Str _4069_path = _1486242d0_parse_options(_1490c0580_ARGS);
	if (_4069_path == jule::Str("", 0)) {
		_1486094f0_exit_err(_1486379e0_logf(jule::Str("missing compile path", 20),jule::Slice<jule::Any>({})));
	}
	jule::Ref<_1487ca390_Status> _41210_inf;
	jule::Int _41215_err;
	std::tie(_41210_inf,_41215_err) = _148796140_stat(_149048970_PATH_STDLIB);
	if ((_41215_err != 0LLU) || (!(_41210_inf->_method_is_dir()))) {
		_1486094f0_exit_err(_1486379e0_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>({})));
	}
	_1486242d0_set();
	jule::Ref<_108db2720_IR> _41914_ir;
	jule::Slice<_1486379e0_Log> _41918_logs;
	std::tie(_41914_ir,_41918_logs) = _108db2720_IR::_static_method_build(_4069_path);
	if ((!(jule::real(_41914_ir))) && (_41918_logs == nullptr)) {
		_1486094f0_exit_err(_1486379e0_logf(jule::Str("there is no Jule source code in this package: @", 47),jule::Slice<jule::Any>({jule::Any(_4069_path)})));
	}
	if (_41918_logs != nullptr) {
		_1486242d0_print_logs(_41918_logs);
		_1486094f0_exit_err(jule::Str("", 0));
	}
	
	jule::Ref<_1037649f0_Fn> _43113_f = _41914_ir->_field_main->_method_find_fn(jule::Str("main", 4),false);
	if ((!(jule::real(_43113_f)))) {
		_1486094f0_exit_err(_1486379e0_logf(jule::Str("entry point (main) function is not defined", 42),jule::Slice<jule::Any>({})));
	}
	_43113_f->_field_statically=true;
	_43113_f=_41914_ir->_field_main->_method_find_fn(jule::Str("init", 4),false);
	if (jule::real(_43113_f)) {
		_43113_f->_field_statically=true;
	}
	_1486242d0_apply_target_independent_optimizations(_41914_ir);
	jule::Str _44410_compiler;
	jule::Str _44420_compiler_cmd;
	std::tie(_44410_compiler,_44420_compiler_cmd) = _1486242d0_gen_compile_cmd(_1486242d0_get_compile_path(),_41914_ir);
	jule::Str _44613_obj = _1190c5fe0_gen(_41914_ir);
	_1190c5fe0_append_standard(_44613_obj,_44410_compiler,_44420_compiler_cmd);
	_1486242d0_do_spell(_44613_obj,_44410_compiler,_44420_compiler_cmd);
}




void __jule_call_initializers(void) {
	_1490c0580_init();
	_149048970_init();
	_104b4ffd0_init();
	_108e075a0_init();
	_1486094f0_init();
}

int main(int argc, char *argv[], char *envp[]) {
    std::set_terminate(&jule::terminate_handler);
    jule::set_sig_handler(jule::signal_handler);
    jule::setup_command_line_args(argc, argv);
    jule::setup_environment_variables(envp);

    __jule_call_initializers();
    entry_point();

    return EXIT_SUCCESS;
}