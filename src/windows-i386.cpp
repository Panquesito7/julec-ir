// Auto generated by JuleC.
// JuleC version: beta 0.0.3 @master
// Date: 8/8/2023 18.27 (DD/MM/YYYY) (HH.MM)
//
// Recommended Compile Command;
// clang++ -O0 -Wno-everything --std=c++14 dist/ir.cpp

#include "api/jule.hpp"                                   

#include <dirent.h>
#include <cstdio>
#include <sys/stat.h>
#include "std/env/proc.hpp"                                   
#include "std/process/process.hpp"                                   
#include "std/vector/alloc.hpp"                                   
#include "std/jule/parser/parser.hpp"                                   
#include "src/julec/obj/cxx/cxx.hpp"                                   

struct _11265fb90_Importer;
struct _1217f7750_Kind;
struct _112f89930_Lookup;
struct _121b31570_RangeSetter;

struct _131739f50_LazyBuff;


struct _121ef75f0_bits_error;


struct _131769b70_FloatInfo;


struct _131769b70_DecimalSlice;


struct _13207af00_LeftCheat;


struct _13207af00_Decimal;


struct _1316b4080_Log;


struct _1220df4b0_DirEntry;


struct _1220de8f0_File;


struct _1220d93f0_Status;


struct _1220fe860_accept_range;


struct _111613f20_Token;


struct _1116b7f10_KindPair;


struct _111612b20_CommentGroup;


struct _111612b20_NamespaceTypeDecl;


struct _111612b20_RefTypeDecl;


struct _111612b20_SlcTypeDecl;


struct _111612b20_TupleTypeDecl;


struct _111612b20_PtrTypeDecl;


struct _111612b20_ArrTypeDecl;


struct _111612b20_MapTypeDecl;


struct _111612b20_RetTypeDecl;


struct _111612b20_TupleExpr;


struct _111612b20_LitExpr;


struct _111612b20_UnsafeExpr;


struct _111612b20_IdentExpr;


struct _111612b20_UnaryExpr;


struct _111612b20_VariadicExpr;


struct _111612b20_CastExpr;


struct _111612b20_NsSelectionExpr;


struct _111612b20_SubIdentExpr;


struct _111612b20_BinopExpr;


struct _111612b20_FieldExprPair;


struct _111612b20_StructLit;


struct _111612b20_BraceLit;


struct _111612b20_KeyValPair;


struct _111612b20_SliceExpr;


struct _111612b20_IndexingExpr;


struct _111612b20_SlicingExpr;


struct _111612b20_LabelSt;


struct _111612b20_FallSt;


struct _111612b20_AssignSt;


struct _111612b20_ScopeTree;


struct _111612b20_RetSt;


struct _111612b20_Iter;


struct _111612b20_WhileKind;


struct _111612b20_RangeKind;


struct _111612b20_Conditional;


struct _111612b20_MatchCase;


struct _11166e240_FileInfo;


struct _11166e240_PackageInfo;


struct _11167f570_Stmt;


struct _11167f570_ScopeParser;


struct _112190570_CallData;


struct _112190570_Precedencer;


struct _112190570_ExprBuilder;


struct _111681860_Parser;


struct _111680c00_TypeBuilder;


struct _1131530d0_Const;


struct _11209db80_FieldIns;


struct _11209db80_StructIns;


struct _112446fb0_RetType;


struct _112446fb0_ParamIns;


struct _112446fb0_FnIns;


struct _112572770_SymbolBuilder;


struct _1126288e0_If;


struct _1126288e0_Else;


struct _1126288e0_Conditional;


struct _1126288e0_InfIter;


struct _1126288e0_WhileIter;


struct _1126288e0_RangeIter;


struct _1126288e0_ContSt;


struct _1126288e0_BreakSt;


struct _1126288e0_Label;


struct _1126288e0_GotoSt;


struct _1126288e0_Postfix;


struct _1126288e0_Assign;


struct _1126288e0_MultiAssign;


struct _1126288e0_Match;


struct _1126288e0_Case;


struct _1126288e0_FallSt;


struct _1126288e0_RetSt;


struct _1126288e0_Recover;


struct _1126288e0_ScopeGoto;


struct _1126288e0_ScopeChecker;


struct _112673500_BinopExprModel;


struct _112673500_UnaryExprModel;


struct _112673500_GetRefPtrExprModel;


struct _112673500_StructArgExprModel;


struct _112673500_StructLitExprModel;


struct _112673500_AllocStructLitExprModel;


struct _112673500_CastingExprModel;


struct _112673500_FnCallExprModel;


struct _112673500_SliceExprModel;


struct _112673500_IndexigExprModel;


struct _112673500_AnonFnExprModel;


struct _112673500_KeyValPairExprModel;


struct _112673500_MapExprModel;


struct _112673500_SlicingExprModel;


struct _112673500_TraitSubIdentExprModel;


struct _112673500_StructSubIdentExprModel;


struct _112673500_StructStaticIdentExprModel;


struct _112673500_ArrayExprModel;


struct _112673500_CommonIdentExprModel;


struct _112673500_CommonSubIdentExprModel;


struct _112673500_TupleExprModel;


struct _112673500_BuiltinOutCallExprModel;


struct _112673500_BuiltinOutlnCallExprModel;


struct _112673500_BuiltinCloneCallExprModel;


struct _112673500_BuiltinNewCallExprModel;


struct _112673500_BuiltinRealCallExprModel;


struct _112673500_BuiltinDropCallExprModel;


struct _112673500_BuiltinPanicCallExprModel;


struct _112673500_BuiltinMakeCallExprModel;


struct _112673500_BuiltinErrorTraitSubIdentExprModel;


struct _112673500_SizeofExprModel;


struct _112673500_AlignofExprModel;


struct _112673500_RuneExprModel;


struct _112673500_ExplicitDerefExprModel;


struct _11265fb90_Package;


struct _11262c360_Sema;


struct _121807de0_DynamicTypeAnnotation;


struct _121807de0_StructLitChecker;


struct _121807de0_RangeChecker;


struct _121dedce0_Data;


struct _121dedce0_Value;


struct _121dedce0_Eval;


struct _1217f7750_TypeKind;


struct _1217f7750_TypeSymbol;


struct _1217f7750_Prim;


struct _1217f7750_Ref;


struct _1217f7750_Slc;


struct _1217f7750_Tuple;


struct _1217f7750_Map;


struct _1217f7750_Arr;


struct _1217f7750_Ptr;


struct _1217f7750_Referencer;


struct _12209b250_PlainImporter;


struct _122056550_IR;


struct _1220584c0_ScopeDeadCode;


struct _121b31570_IndexRangeSetter;


struct _121b31570_MapRangeSetter;


struct _113497500_OrderedDecls;


struct _1217f7750_TypeChecker;


struct _1217f7750_TypeAlias;


struct _121dedce0_BinopSolver;


struct _121807de0_RetTypeChecker;


struct _121807de0_FnCallArgChecker;


struct _121807de0_AssignTypeChecker;


struct _121807de0_TypeCompatibilityChecker;


struct _1320e22c0_Var;


struct _11265fb90_ImportInfo;


struct _1126288e0_ScopeLabel;


struct _112626410_Impl;


struct _11261eaf0_Enum;


struct _11261eaf0_EnumItem;


struct _11209e2e0_Trait;


struct _112572770_Pass;


struct _112446fb0_Fn;


struct _112446fb0_Param;


struct _11209db80_Field;


struct _111654d60_AssignInfo;


struct _111612b20_Impl;


struct _111612b20_TraitDecl;


struct _111612b20_StructDecl;


struct _111612b20_FieldDecl;


struct _111612b20_EnumDecl;


struct _111612b20_EnumItemDecl;


struct _111612b20_UseDecl;


struct _111612b20_Case;


struct _111612b20_TypeAliasDecl;


struct _111612b20_Else;


struct _111612b20_If;


struct _111612b20_ContSt;


struct _111612b20_BreakSt;


struct _111612b20_VarDecl;


struct _111612b20_FnDecl;


struct _111612b20_ParamDecl;


struct _111612b20_AssignLeft;


struct _111612b20_GotoSt;


struct _111612b20_GenericDecl;


struct _111612b20_FnCallExpr;


struct _111612b20_Expr;


struct _111612b20_IdentTypeDecl;


struct _111612b20_TypeDecl;


struct _111612b20_Directive;


struct _111612b20_Comment;


struct _111612b20_Node;


struct _11203c360_Vector_0;

struct _11203c360_Vector_1;

struct _11203c360_Vector_2;

struct _11203c360_Vector_3;

struct _11203c360_Vector_4;

struct _11203c360_Vector_5;

struct _11203c360_Vector_6;

struct _11203c360_Vector_7;

struct _11203c360_Vector_8;

struct _11203c360_Vector_9;

struct _11203c360_Vector_10;

struct _11203c360_Vector_11;

struct _11203c360_Vector_12;

struct _11203c360_Vector_13;

struct _11203c360_Vector_14;

struct _11203c360_Vector_15;


struct _1220fd110_File;


struct _1116b7f10_Lex;


struct _1220cb5d0_Ast;


struct _11209db80_Struct;


struct _112572770_ReferenceStack;


struct _1126288e0_Scope;


struct _1320e2330_SymbolTable;

struct _11265fb90_Importer {
	virtual ~_11265fb90_Importer(void) {}

	virtual jule::Ref<_11265fb90_ImportInfo> _method_get_import(jule::Str _1633_path) { return {}; }
	virtual std::tuple<jule::Slice<jule::Ref<_1220cb5d0_Ast>>,jule::Slice<_1316b4080_Log>> _method_import_package(jule::Str _2037_path) { return {}; }
	virtual void _method_imported(jule::Ref<_11265fb90_ImportInfo>) {}
};

struct _1217f7750_Kind {
	virtual ~_1217f7750_Kind(void) {}

	virtual jule::Str _method_to_str(void) { return {}; }
	virtual jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind> _4621_other) { return {}; }
};

struct _112f89930_Lookup {
	virtual ~_112f89930_Lookup(void) {}

	virtual jule::Ref<_11265fb90_ImportInfo> _method_find_package(jule::Str _935_ident) { return {}; }
	virtual jule::Ref<_11265fb90_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)> _1337_selector) { return {}; }
	virtual jule::Ref<_1320e22c0_Var> _method_find_var(jule::Str _1731_ident,jule::Bool _1743_cpp_linked) { return {}; }
	virtual jule::Ref<_1217f7750_TypeAlias> _method_find_type_alias(jule::Str _2138_ident,jule::Bool _2150_cpp_linked) { return {}; }
	virtual jule::Ref<_11209db80_Struct> _method_find_struct(jule::Str _2534_ident,jule::Bool _2546_cpp_linked) { return {}; }
	virtual jule::Ref<_112446fb0_Fn> _method_find_fn(jule::Str _2930_ident,jule::Bool _2942_cpp_linked) { return {}; }
	virtual jule::Ref<_11209e2e0_Trait> _method_find_trait(jule::Str _3333_ident) { return {}; }
	virtual jule::Ref<_11261eaf0_Enum> _method_find_enum(jule::Str _3732_ident) { return {}; }
};

struct _121b31570_RangeSetter {
	virtual ~_121b31570_RangeSetter(void) {}

	virtual jule::Str _method_setup_vars(jule::Ref<_1320e22c0_Var> _3829_key_a,jule::Ref<_1320e22c0_Var> _3846_key_b) { return {}; }
	virtual jule::Str _method_next_steps(jule::Ref<_1320e22c0_Var> _3929_key_a,jule::Ref<_1320e22c0_Var> _3946_key_b,jule::Str _3959_begin) { return {}; }
};


struct _131739f50_LazyBuff {
	jule::Ref<_131739f50_LazyBuff> self{};

	jule::Str _field_path{jule::Str()};
	jule::Slice<jule::U8> _field_buff{jule::Slice<jule::U8>()};
	jule::Int _field_w{jule::Int()};
	jule::Str _field_vol_and_path{jule::Str()};
	jule::Int _field_vol_len{jule::Int()};


	_131739f50_LazyBuff(jule::Str __param_path, jule::Slice<jule::U8> __param_buff, jule::Int __param_w, jule::Str __param_vol_and_path, jule::Int __param_vol_len) {
		this->self = jule::Ref<_131739f50_LazyBuff>::make(this, nullptr);

		this->_field_path = __param_path;
		this->_field_buff = __param_buff;
		this->_field_w = __param_w;
		this->_field_vol_and_path = __param_vol_and_path;
		this->_field_vol_len = __param_vol_len;
	}

	~_131739f50_LazyBuff(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_131739f50_LazyBuff(void) { this->self = jule::Ref<_131739f50_LazyBuff>::make(this, nullptr); }

	inline jule::U8 _method_index(jule::Int);


	inline void _method_append(jule::U8);


	inline jule::Str _method_string(void);


	inline bool operator==(const _131739f50_LazyBuff &_Src) {
		return 
			this->_field_path == _Src._field_path &&
			this->_field_buff == _Src._field_buff &&
			this->_field_w == _Src._field_w &&
			this->_field_vol_and_path == _Src._field_vol_and_path &&
			this->_field_vol_len == _Src._field_vol_len;
	}

	inline bool operator!=(const _131739f50_LazyBuff &_Src) { return !this->operator==(_Src); }
};


struct _121ef75f0_bits_error: public jule::Error {
	jule::Ref<_121ef75f0_bits_error> self{};

	jule::Str _field_message{jule::Str()};


	_121ef75f0_bits_error(jule::Str __param_message) {
		this->self = jule::Ref<_121ef75f0_bits_error>::make(this, nullptr);

		this->_field_message = __param_message;
	}

	~_121ef75f0_bits_error(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121ef75f0_bits_error(void) { this->self = jule::Ref<_121ef75f0_bits_error>::make(this, nullptr); }

	inline jule::Str _method_error(void);


	inline bool operator==(const _121ef75f0_bits_error &_Src) {
		return 
			this->_field_message == _Src._field_message;
	}

	inline bool operator!=(const _121ef75f0_bits_error &_Src) { return !this->operator==(_Src); }
};


struct _131769b70_FloatInfo {
	jule::Ref<_131769b70_FloatInfo> self{};

	jule::Uint _field_mantbits{jule::Uint()};
	jule::Uint _field_expbits{jule::Uint()};
	jule::Int _field_bias{jule::Int()};


	_131769b70_FloatInfo(jule::Uint __param_mantbits, jule::Uint __param_expbits, jule::Int __param_bias) {
		this->self = jule::Ref<_131769b70_FloatInfo>::make(this, nullptr);

		this->_field_mantbits = __param_mantbits;
		this->_field_expbits = __param_expbits;
		this->_field_bias = __param_bias;
	}

	~_131769b70_FloatInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_131769b70_FloatInfo(void) { this->self = jule::Ref<_131769b70_FloatInfo>::make(this, nullptr); }

	inline bool operator==(const _131769b70_FloatInfo &_Src) {
		return 
			this->_field_mantbits == _Src._field_mantbits &&
			this->_field_expbits == _Src._field_expbits &&
			this->_field_bias == _Src._field_bias;
	}

	inline bool operator!=(const _131769b70_FloatInfo &_Src) { return !this->operator==(_Src); }
};


struct _131769b70_DecimalSlice {
	jule::Ref<_131769b70_DecimalSlice> self{};

	jule::Slice<jule::U8> _field_d{jule::Slice<jule::U8>()};
	jule::Int _field_nd{jule::Int()};
	jule::Int _field_dp{jule::Int()};
	jule::Bool _field_neg{jule::Bool()};


	_131769b70_DecimalSlice(jule::Slice<jule::U8> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg) {
		this->self = jule::Ref<_131769b70_DecimalSlice>::make(this, nullptr);

		this->_field_d = __param_d;
		this->_field_nd = __param_nd;
		this->_field_dp = __param_dp;
		this->_field_neg = __param_neg;
	}

	~_131769b70_DecimalSlice(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_131769b70_DecimalSlice(void) { this->self = jule::Ref<_131769b70_DecimalSlice>::make(this, nullptr); }

	inline bool operator==(const _131769b70_DecimalSlice &_Src) {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg;
	}

	inline bool operator!=(const _131769b70_DecimalSlice &_Src) { return !this->operator==(_Src); }
};


struct _13207af00_LeftCheat {
	jule::Ref<_13207af00_LeftCheat> self{};

	jule::Int _field_delta{jule::Int()};
	jule::Str _field_cutoff{jule::Str()};


	_13207af00_LeftCheat(jule::Int __param_delta, jule::Str __param_cutoff) {
		this->self = jule::Ref<_13207af00_LeftCheat>::make(this, nullptr);

		this->_field_delta = __param_delta;
		this->_field_cutoff = __param_cutoff;
	}

	~_13207af00_LeftCheat(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_13207af00_LeftCheat(void) { this->self = jule::Ref<_13207af00_LeftCheat>::make(this, nullptr); }

	inline bool operator==(const _13207af00_LeftCheat &_Src) {
		return 
			this->_field_delta == _Src._field_delta &&
			this->_field_cutoff == _Src._field_cutoff;
	}

	inline bool operator!=(const _13207af00_LeftCheat &_Src) { return !this->operator==(_Src); }
};


struct _13207af00_Decimal {
	jule::Ref<_13207af00_Decimal> self{};

	jule::Array<jule::U8,800> _field_d{jule::Array<jule::U8,800>()};
	jule::Int _field_nd{jule::Int()};
	jule::Int _field_dp{jule::Int()};
	jule::Bool _field_neg{jule::Bool()};
	jule::Bool _field_trunc{jule::Bool()};


	_13207af00_Decimal(jule::Array<jule::U8,800> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg, jule::Bool __param_trunc) {
		this->self = jule::Ref<_13207af00_Decimal>::make(this, nullptr);

		this->_field_d = __param_d;
		this->_field_nd = __param_nd;
		this->_field_dp = __param_dp;
		this->_field_neg = __param_neg;
		this->_field_trunc = __param_trunc;
	}

	~_13207af00_Decimal(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_13207af00_Decimal(void) { this->self = jule::Ref<_13207af00_Decimal>::make(this, nullptr); }

	inline jule::Bool _method_set(jule::Str);


	inline std::tuple<jule::U64,jule::Bool> _method_float_bits(_131769b70_FloatInfo&);


	inline void _method_assign(jule::U64);


	inline void _method_shift(jule::Int);


	inline void _method_round_down(jule::Int);


	inline void _method_round_up(jule::Int);


	inline void _method_round(jule::Int);


	inline jule::U64 _method_rounded_integer(void);


	inline bool operator==(const _13207af00_Decimal &_Src) {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg &&
			this->_field_trunc == _Src._field_trunc;
	}

	inline bool operator!=(const _13207af00_Decimal &_Src) { return !this->operator==(_Src); }
};


struct _1316b4080_Log {
	jule::Ref<_1316b4080_Log> self{};

	jule::Int _field_kind{0LLU};
	jule::Int _field_row{jule::Int()};
	jule::Int _field_column{jule::Int()};
	jule::Str _field_path{jule::Str()};
	jule::Str _field_text{jule::Str()};


	_1316b4080_Log(jule::Int __param_kind, jule::Int __param_row, jule::Int __param_column, jule::Str __param_path, jule::Str __param_text) {
		this->self = jule::Ref<_1316b4080_Log>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_row = __param_row;
		this->_field_column = __param_column;
		this->_field_path = __param_path;
		this->_field_text = __param_text;
	}

	~_1316b4080_Log(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1316b4080_Log(void) { this->self = jule::Ref<_1316b4080_Log>::make(this, nullptr); }

	inline jule::Str _method_flat(void);


	inline jule::Str _method_error(void);


	inline jule::Str _method_to_str(void);


	inline bool operator==(const _1316b4080_Log &_Src) {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_path == _Src._field_path &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _1316b4080_Log &_Src) { return !this->operator==(_Src); }
};


struct _1220df4b0_DirEntry {
	jule::Ref<_1220df4b0_DirEntry> self{};

	jule::Str _field_name{jule::Str()};
	jule::Ref<_1220d93f0_Status> _field_stat{jule::Ref<_1220d93f0_Status>()};


	_1220df4b0_DirEntry(jule::Str __param_name, jule::Ref<_1220d93f0_Status> __param_stat) {
		this->self = jule::Ref<_1220df4b0_DirEntry>::make(this, nullptr);

		this->_field_name = __param_name;
		this->_field_stat = __param_stat;
	}

	~_1220df4b0_DirEntry(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1220df4b0_DirEntry(void) { this->self = jule::Ref<_1220df4b0_DirEntry>::make(this, nullptr); }

	inline bool operator==(const _1220df4b0_DirEntry &_Src) {
		return 
			this->_field_name == _Src._field_name &&
			this->_field_stat == _Src._field_stat;
	}

	inline bool operator!=(const _1220df4b0_DirEntry &_Src) { return !this->operator==(_Src); }
};


struct _1220de8f0_File {
	jule::Ref<_1220de8f0_File> self{};

	jule::Int _field_handle{jule::Int()};


	_1220de8f0_File(jule::Int __param_handle) {
		this->self = jule::Ref<_1220de8f0_File>::make(this, nullptr);

		this->_field_handle = __param_handle;
	}

	~_1220de8f0_File(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1220de8f0_File(void) { this->self = jule::Ref<_1220de8f0_File>::make(this, nullptr); }

	inline std::tuple<jule::I64,jule::Int> _method_seek(jule::I64,jule::Int);


	inline std::tuple<jule::Int,jule::Int> _method_read(jule::Slice<jule::U8>);


	inline std::tuple<jule::Int,jule::Int> _method_write(jule::Slice<jule::U8>);


	inline jule::Int _method_close(void);


	inline bool operator==(const _1220de8f0_File &_Src) {
		return 
			this->_field_handle == _Src._field_handle;
	}

	inline bool operator!=(const _1220de8f0_File &_Src) { return !this->operator==(_Src); }
};


struct _1220d93f0_Status {
	jule::Ref<_1220d93f0_Status> self{};

	jule::Uint _field_mode{jule::Uint()};
	jule::Uint _field_size{jule::Uint()};


	_1220d93f0_Status(jule::Uint __param_mode, jule::Uint __param_size) {
		this->self = jule::Ref<_1220d93f0_Status>::make(this, nullptr);

		this->_field_mode = __param_mode;
		this->_field_size = __param_size;
	}

	~_1220d93f0_Status(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1220d93f0_Status(void) { this->self = jule::Ref<_1220d93f0_Status>::make(this, nullptr); }

	inline jule::Bool _method_is_dir(void);


	inline jule::Bool _method_is_reg(void);


	inline bool operator==(const _1220d93f0_Status &_Src) {
		return 
			this->_field_mode == _Src._field_mode &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _1220d93f0_Status &_Src) { return !this->operator==(_Src); }
};


struct _1220fe860_accept_range {
	jule::Ref<_1220fe860_accept_range> self{};

	jule::U8 _field_lo{jule::U8()};
	jule::U8 _field_hi{jule::U8()};


	_1220fe860_accept_range(jule::U8 __param_lo, jule::U8 __param_hi) {
		this->self = jule::Ref<_1220fe860_accept_range>::make(this, nullptr);

		this->_field_lo = __param_lo;
		this->_field_hi = __param_hi;
	}

	~_1220fe860_accept_range(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1220fe860_accept_range(void) { this->self = jule::Ref<_1220fe860_accept_range>::make(this, nullptr); }

	inline bool operator==(const _1220fe860_accept_range &_Src) {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi;
	}

	inline bool operator!=(const _1220fe860_accept_range &_Src) { return !this->operator==(_Src); }
};


struct _111613f20_Token {
	jule::Ref<_111613f20_Token> self{};

	jule::Ref<_1220fd110_File> _field_file{jule::Ref<_1220fd110_File>()};
	jule::Int _field_row{jule::Int()};
	jule::Int _field_column{jule::Int()};
	jule::Str _field_kind{jule::Str()};
	jule::Uint _field_id{0LLU};


	_111613f20_Token(jule::Ref<_1220fd110_File> __param_file, jule::Int __param_row, jule::Int __param_column, jule::Str __param_kind, jule::Uint __param_id) {
		this->self = jule::Ref<_111613f20_Token>::make(this, nullptr);

		this->_field_file = __param_file;
		this->_field_row = __param_row;
		this->_field_column = __param_column;
		this->_field_kind = __param_kind;
		this->_field_id = __param_id;
	}

	~_111613f20_Token(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111613f20_Token(void) { this->self = jule::Ref<_111613f20_Token>::make(this, nullptr); }

	inline jule::Int _method_prec(void);


	inline bool operator==(const _111613f20_Token &_Src) {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _111613f20_Token &_Src) { return !this->operator==(_Src); }
};


struct _1116b7f10_KindPair {
	jule::Ref<_1116b7f10_KindPair> self{};

	jule::Str _field_kind{jule::Str("::", 2)};
	jule::Uint _field_id{0LLU};


	_1116b7f10_KindPair(jule::Str __param_kind, jule::Uint __param_id) {
		this->self = jule::Ref<_1116b7f10_KindPair>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_id = __param_id;
	}

	~_1116b7f10_KindPair(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116b7f10_KindPair(void) { this->self = jule::Ref<_1116b7f10_KindPair>::make(this, nullptr); }

	inline bool operator==(const _1116b7f10_KindPair &_Src) {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _1116b7f10_KindPair &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_CommentGroup {
	jule::Ref<_111612b20_CommentGroup> self{};

	jule::Slice<jule::Ref<_111612b20_Comment>> _field_comments{jule::Slice<jule::Ref<_111612b20_Comment>>()};


	_111612b20_CommentGroup(jule::Slice<jule::Ref<_111612b20_Comment>> __param_comments) {
		this->self = jule::Ref<_111612b20_CommentGroup>::make(this, nullptr);

		this->_field_comments = __param_comments;
	}

	~_111612b20_CommentGroup(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_CommentGroup(void) { this->self = jule::Ref<_111612b20_CommentGroup>::make(this, nullptr); }

	inline bool operator==(const _111612b20_CommentGroup &_Src) {
		return 
			this->_field_comments == _Src._field_comments;
	}

	inline bool operator!=(const _111612b20_CommentGroup &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_NamespaceTypeDecl {
	jule::Ref<_111612b20_NamespaceTypeDecl> self{};

	jule::Slice<_111613f20_Token> _field_idents{jule::Slice<_111613f20_Token>()};
	jule::Ref<_111612b20_IdentTypeDecl> _field_kind{jule::Ref<_111612b20_IdentTypeDecl>()};


	_111612b20_NamespaceTypeDecl(jule::Slice<_111613f20_Token> __param_idents, jule::Ref<_111612b20_IdentTypeDecl> __param_kind) {
		this->self = jule::Ref<_111612b20_NamespaceTypeDecl>::make(this, nullptr);

		this->_field_idents = __param_idents;
		this->_field_kind = __param_kind;
	}

	~_111612b20_NamespaceTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_NamespaceTypeDecl(void) { this->self = jule::Ref<_111612b20_NamespaceTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_NamespaceTypeDecl &_Src) {
		return 
			this->_field_idents == _Src._field_idents &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _111612b20_NamespaceTypeDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_RefTypeDecl {
	jule::Ref<_111612b20_RefTypeDecl> self{};

	jule::Ref<_111612b20_TypeDecl> _field_elem{jule::Ref<_111612b20_TypeDecl>()};


	_111612b20_RefTypeDecl(jule::Ref<_111612b20_TypeDecl> __param_elem) {
		this->self = jule::Ref<_111612b20_RefTypeDecl>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_111612b20_RefTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_RefTypeDecl(void) { this->self = jule::Ref<_111612b20_RefTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_RefTypeDecl &_Src) {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _111612b20_RefTypeDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_SlcTypeDecl {
	jule::Ref<_111612b20_SlcTypeDecl> self{};

	jule::Ref<_111612b20_TypeDecl> _field_elem{jule::Ref<_111612b20_TypeDecl>()};


	_111612b20_SlcTypeDecl(jule::Ref<_111612b20_TypeDecl> __param_elem) {
		this->self = jule::Ref<_111612b20_SlcTypeDecl>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_111612b20_SlcTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_SlcTypeDecl(void) { this->self = jule::Ref<_111612b20_SlcTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_SlcTypeDecl &_Src) {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _111612b20_SlcTypeDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_TupleTypeDecl {
	jule::Ref<_111612b20_TupleTypeDecl> self{};

	jule::Slice<jule::Ref<_111612b20_TypeDecl>> _field_types{jule::Slice<jule::Ref<_111612b20_TypeDecl>>()};


	_111612b20_TupleTypeDecl(jule::Slice<jule::Ref<_111612b20_TypeDecl>> __param_types) {
		this->self = jule::Ref<_111612b20_TupleTypeDecl>::make(this, nullptr);

		this->_field_types = __param_types;
	}

	~_111612b20_TupleTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_TupleTypeDecl(void) { this->self = jule::Ref<_111612b20_TupleTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_TupleTypeDecl &_Src) {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _111612b20_TupleTypeDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_PtrTypeDecl {
	jule::Ref<_111612b20_PtrTypeDecl> self{};

	jule::Ref<_111612b20_TypeDecl> _field_elem{jule::Ref<_111612b20_TypeDecl>()};


	_111612b20_PtrTypeDecl(jule::Ref<_111612b20_TypeDecl> __param_elem) {
		this->self = jule::Ref<_111612b20_PtrTypeDecl>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_111612b20_PtrTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_PtrTypeDecl(void) { this->self = jule::Ref<_111612b20_PtrTypeDecl>::make(this, nullptr); }

	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _111612b20_PtrTypeDecl &_Src) {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _111612b20_PtrTypeDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_ArrTypeDecl {
	jule::Ref<_111612b20_ArrTypeDecl> self{};

	jule::Ref<_111612b20_TypeDecl> _field_elem{jule::Ref<_111612b20_TypeDecl>()};
	jule::Ref<_111612b20_Expr> _field_size{jule::Ref<_111612b20_Expr>()};


	_111612b20_ArrTypeDecl(jule::Ref<_111612b20_TypeDecl> __param_elem, jule::Ref<_111612b20_Expr> __param_size) {
		this->self = jule::Ref<_111612b20_ArrTypeDecl>::make(this, nullptr);

		this->_field_elem = __param_elem;
		this->_field_size = __param_size;
	}

	~_111612b20_ArrTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_ArrTypeDecl(void) { this->self = jule::Ref<_111612b20_ArrTypeDecl>::make(this, nullptr); }

	inline jule::Bool _method_auto_sized(void);


	inline bool operator==(const _111612b20_ArrTypeDecl &_Src) {
		return 
			this->_field_elem == _Src._field_elem &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _111612b20_ArrTypeDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_MapTypeDecl {
	jule::Ref<_111612b20_MapTypeDecl> self{};

	jule::Ref<_111612b20_TypeDecl> _field_key{jule::Ref<_111612b20_TypeDecl>()};
	jule::Ref<_111612b20_TypeDecl> _field_val{jule::Ref<_111612b20_TypeDecl>()};


	_111612b20_MapTypeDecl(jule::Ref<_111612b20_TypeDecl> __param_key, jule::Ref<_111612b20_TypeDecl> __param_val) {
		this->self = jule::Ref<_111612b20_MapTypeDecl>::make(this, nullptr);

		this->_field_key = __param_key;
		this->_field_val = __param_val;
	}

	~_111612b20_MapTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_MapTypeDecl(void) { this->self = jule::Ref<_111612b20_MapTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_MapTypeDecl &_Src) {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _111612b20_MapTypeDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_RetTypeDecl {
	jule::Ref<_111612b20_RetTypeDecl> self{};

	jule::Ref<_111612b20_TypeDecl> _field_kind{jule::Ref<_111612b20_TypeDecl>()};
	jule::Slice<_111613f20_Token> _field_idents{jule::Slice<_111613f20_Token>()};


	_111612b20_RetTypeDecl(jule::Ref<_111612b20_TypeDecl> __param_kind, jule::Slice<_111613f20_Token> __param_idents) {
		this->self = jule::Ref<_111612b20_RetTypeDecl>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_idents = __param_idents;
	}

	~_111612b20_RetTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_RetTypeDecl(void) { this->self = jule::Ref<_111612b20_RetTypeDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_RetTypeDecl &_Src) {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _111612b20_RetTypeDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_TupleExpr {
	jule::Ref<_111612b20_TupleExpr> self{};

	jule::Slice<jule::Any> _field_expr{jule::Slice<jule::Any>()};


	_111612b20_TupleExpr(jule::Slice<jule::Any> __param_expr) {
		this->self = jule::Ref<_111612b20_TupleExpr>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_111612b20_TupleExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_TupleExpr(void) { this->self = jule::Ref<_111612b20_TupleExpr>::make(this, nullptr); }

	inline bool operator==(const _111612b20_TupleExpr &_Src) {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _111612b20_TupleExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_LitExpr {
	jule::Ref<_111612b20_LitExpr> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_value{jule::Str()};


	_111612b20_LitExpr(_111613f20_Token __param_token, jule::Str __param_value) {
		this->self = jule::Ref<_111612b20_LitExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_value = __param_value;
	}

	~_111612b20_LitExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_LitExpr(void) { this->self = jule::Ref<_111612b20_LitExpr>::make(this, nullptr); }

	inline jule::Bool _method_is_nil(void);


	inline bool operator==(const _111612b20_LitExpr &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _111612b20_LitExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_UnsafeExpr {
	jule::Ref<_111612b20_UnsafeExpr> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Any _field_expr{jule::Any()};


	_111612b20_UnsafeExpr(_111613f20_Token __param_token, jule::Any __param_expr) {
		this->self = jule::Ref<_111612b20_UnsafeExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
	}

	~_111612b20_UnsafeExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_UnsafeExpr(void) { this->self = jule::Ref<_111612b20_UnsafeExpr>::make(this, nullptr); }

	inline bool operator==(const _111612b20_UnsafeExpr &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _111612b20_UnsafeExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_IdentExpr {
	jule::Ref<_111612b20_IdentExpr> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_cpp_linked{jule::Bool()};


	_111612b20_IdentExpr(_111613f20_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked) {
		this->self = jule::Ref<_111612b20_IdentExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_cpp_linked = __param_cpp_linked;
	}

	~_111612b20_IdentExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_IdentExpr(void) { this->self = jule::Ref<_111612b20_IdentExpr>::make(this, nullptr); }

	inline jule::Bool _method_is_self(void);


	inline bool operator==(const _111612b20_IdentExpr &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked;
	}

	inline bool operator!=(const _111612b20_IdentExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_UnaryExpr {
	jule::Ref<_111612b20_UnaryExpr> self{};

	_111613f20_Token _field_op{_111613f20_Token()};
	jule::Any _field_expr{jule::Any()};


	_111612b20_UnaryExpr(_111613f20_Token __param_op, jule::Any __param_expr) {
		this->self = jule::Ref<_111612b20_UnaryExpr>::make(this, nullptr);

		this->_field_op = __param_op;
		this->_field_expr = __param_expr;
	}

	~_111612b20_UnaryExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_UnaryExpr(void) { this->self = jule::Ref<_111612b20_UnaryExpr>::make(this, nullptr); }

	inline bool operator==(const _111612b20_UnaryExpr &_Src) {
		return 
			this->_field_op == _Src._field_op &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _111612b20_UnaryExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_VariadicExpr {
	jule::Ref<_111612b20_VariadicExpr> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Any _field_expr{jule::Any()};


	_111612b20_VariadicExpr(_111613f20_Token __param_token, jule::Any __param_expr) {
		this->self = jule::Ref<_111612b20_VariadicExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
	}

	~_111612b20_VariadicExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_VariadicExpr(void) { this->self = jule::Ref<_111612b20_VariadicExpr>::make(this, nullptr); }

	inline bool operator==(const _111612b20_VariadicExpr &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _111612b20_VariadicExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_CastExpr {
	jule::Ref<_111612b20_CastExpr> self{};

	jule::Ref<_111612b20_TypeDecl> _field_kind{jule::Ref<_111612b20_TypeDecl>()};
	jule::Any _field_expr{jule::Any()};


	_111612b20_CastExpr(jule::Ref<_111612b20_TypeDecl> __param_kind, jule::Any __param_expr) {
		this->self = jule::Ref<_111612b20_CastExpr>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_expr = __param_expr;
	}

	~_111612b20_CastExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_CastExpr(void) { this->self = jule::Ref<_111612b20_CastExpr>::make(this, nullptr); }

	inline bool operator==(const _111612b20_CastExpr &_Src) {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _111612b20_CastExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_NsSelectionExpr {
	jule::Ref<_111612b20_NsSelectionExpr> self{};

	jule::Slice<_111613f20_Token> _field_ns{jule::Slice<_111613f20_Token>()};
	_111613f20_Token _field_ident{_111613f20_Token()};


	_111612b20_NsSelectionExpr(jule::Slice<_111613f20_Token> __param_ns, _111613f20_Token __param_ident) {
		this->self = jule::Ref<_111612b20_NsSelectionExpr>::make(this, nullptr);

		this->_field_ns = __param_ns;
		this->_field_ident = __param_ident;
	}

	~_111612b20_NsSelectionExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_NsSelectionExpr(void) { this->self = jule::Ref<_111612b20_NsSelectionExpr>::make(this, nullptr); }

	inline bool operator==(const _111612b20_NsSelectionExpr &_Src) {
		return 
			this->_field_ns == _Src._field_ns &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _111612b20_NsSelectionExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_SubIdentExpr {
	jule::Ref<_111612b20_SubIdentExpr> self{};

	jule::Bool _field_is_self{jule::Bool()};
	jule::Any _field_expr{jule::Any()};
	_111613f20_Token _field_ident{_111613f20_Token()};


	_111612b20_SubIdentExpr(jule::Bool __param_is_self, jule::Any __param_expr, _111613f20_Token __param_ident) {
		this->self = jule::Ref<_111612b20_SubIdentExpr>::make(this, nullptr);

		this->_field_is_self = __param_is_self;
		this->_field_expr = __param_expr;
		this->_field_ident = __param_ident;
	}

	~_111612b20_SubIdentExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_SubIdentExpr(void) { this->self = jule::Ref<_111612b20_SubIdentExpr>::make(this, nullptr); }

	inline bool operator==(const _111612b20_SubIdentExpr &_Src) {
		return 
			this->_field_is_self == _Src._field_is_self &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _111612b20_SubIdentExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_BinopExpr {
	jule::Ref<_111612b20_BinopExpr> self{};

	jule::Any _field_left{jule::Any()};
	jule::Any _field_right{jule::Any()};
	_111613f20_Token _field_op{_111613f20_Token()};


	_111612b20_BinopExpr(jule::Any __param_left, jule::Any __param_right, _111613f20_Token __param_op) {
		this->self = jule::Ref<_111612b20_BinopExpr>::make(this, nullptr);

		this->_field_left = __param_left;
		this->_field_right = __param_right;
		this->_field_op = __param_op;
	}

	~_111612b20_BinopExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_BinopExpr(void) { this->self = jule::Ref<_111612b20_BinopExpr>::make(this, nullptr); }

	inline bool operator==(const _111612b20_BinopExpr &_Src) {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _111612b20_BinopExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_FieldExprPair {
	jule::Ref<_111612b20_FieldExprPair> self{};

	_111613f20_Token _field_field{_111613f20_Token()};
	jule::Any _field_expr{jule::Any()};


	_111612b20_FieldExprPair(_111613f20_Token __param_field, jule::Any __param_expr) {
		this->self = jule::Ref<_111612b20_FieldExprPair>::make(this, nullptr);

		this->_field_field = __param_field;
		this->_field_expr = __param_expr;
	}

	~_111612b20_FieldExprPair(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_FieldExprPair(void) { this->self = jule::Ref<_111612b20_FieldExprPair>::make(this, nullptr); }

	inline jule::Bool _method_is_targeted(void);


	inline bool operator==(const _111612b20_FieldExprPair &_Src) {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _111612b20_FieldExprPair &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_StructLit {
	jule::Ref<_111612b20_StructLit> self{};

	jule::Ref<_111612b20_TypeDecl> _field_kind{jule::Ref<_111612b20_TypeDecl>()};
	jule::Slice<jule::Any> _field_exprs{jule::Slice<jule::Any>()};


	_111612b20_StructLit(jule::Ref<_111612b20_TypeDecl> __param_kind, jule::Slice<jule::Any> __param_exprs) {
		this->self = jule::Ref<_111612b20_StructLit>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_exprs = __param_exprs;
	}

	~_111612b20_StructLit(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_StructLit(void) { this->self = jule::Ref<_111612b20_StructLit>::make(this, nullptr); }

	inline bool operator==(const _111612b20_StructLit &_Src) {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _111612b20_StructLit &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_BraceLit {
	jule::Ref<_111612b20_BraceLit> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Slice<jule::Any> _field_exprs{jule::Slice<jule::Any>()};


	_111612b20_BraceLit(_111613f20_Token __param_token, jule::Slice<jule::Any> __param_exprs) {
		this->self = jule::Ref<_111612b20_BraceLit>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_exprs = __param_exprs;
	}

	~_111612b20_BraceLit(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_BraceLit(void) { this->self = jule::Ref<_111612b20_BraceLit>::make(this, nullptr); }

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _111612b20_BraceLit &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _111612b20_BraceLit &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_KeyValPair {
	jule::Ref<_111612b20_KeyValPair> self{};

	jule::Any _field_key{jule::Any()};
	jule::Any _field_val{jule::Any()};
	_111613f20_Token _field_colon{_111613f20_Token()};


	_111612b20_KeyValPair(jule::Any __param_key, jule::Any __param_val, _111613f20_Token __param_colon) {
		this->self = jule::Ref<_111612b20_KeyValPair>::make(this, nullptr);

		this->_field_key = __param_key;
		this->_field_val = __param_val;
		this->_field_colon = __param_colon;
	}

	~_111612b20_KeyValPair(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_KeyValPair(void) { this->self = jule::Ref<_111612b20_KeyValPair>::make(this, nullptr); }

	inline bool operator==(const _111612b20_KeyValPair &_Src) {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val &&
			this->_field_colon == _Src._field_colon;
	}

	inline bool operator!=(const _111612b20_KeyValPair &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_SliceExpr {
	jule::Ref<_111612b20_SliceExpr> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Slice<jule::Any> _field_elems{jule::Slice<jule::Any>()};


	_111612b20_SliceExpr(_111613f20_Token __param_token, jule::Slice<jule::Any> __param_elems) {
		this->self = jule::Ref<_111612b20_SliceExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_elems = __param_elems;
	}

	~_111612b20_SliceExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_SliceExpr(void) { this->self = jule::Ref<_111612b20_SliceExpr>::make(this, nullptr); }

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _111612b20_SliceExpr &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _111612b20_SliceExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_IndexingExpr {
	jule::Ref<_111612b20_IndexingExpr> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Any _field_expr{jule::Any()};
	jule::Any _field_index{jule::Any()};


	_111612b20_IndexingExpr(_111613f20_Token __param_token, jule::Any __param_expr, jule::Any __param_index) {
		this->self = jule::Ref<_111612b20_IndexingExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
		this->_field_index = __param_index;
	}

	~_111612b20_IndexingExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_IndexingExpr(void) { this->self = jule::Ref<_111612b20_IndexingExpr>::make(this, nullptr); }

	inline bool operator==(const _111612b20_IndexingExpr &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _111612b20_IndexingExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_SlicingExpr {
	jule::Ref<_111612b20_SlicingExpr> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Any _field_expr{jule::Any()};
	jule::Any _field_start{jule::Any()};
	jule::Any _field_to{jule::Any()};


	_111612b20_SlicingExpr(_111613f20_Token __param_token, jule::Any __param_expr, jule::Any __param_start, jule::Any __param_to) {
		this->self = jule::Ref<_111612b20_SlicingExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
		this->_field_start = __param_start;
		this->_field_to = __param_to;
	}

	~_111612b20_SlicingExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_SlicingExpr(void) { this->self = jule::Ref<_111612b20_SlicingExpr>::make(this, nullptr); }

	inline bool operator==(const _111612b20_SlicingExpr &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_start == _Src._field_start &&
			this->_field_to == _Src._field_to;
	}

	inline bool operator!=(const _111612b20_SlicingExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_LabelSt {
	jule::Ref<_111612b20_LabelSt> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};


	_111612b20_LabelSt(_111613f20_Token __param_token, jule::Str __param_ident) {
		this->self = jule::Ref<_111612b20_LabelSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
	}

	~_111612b20_LabelSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_LabelSt(void) { this->self = jule::Ref<_111612b20_LabelSt>::make(this, nullptr); }

	inline bool operator==(const _111612b20_LabelSt &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _111612b20_LabelSt &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_FallSt {
	jule::Ref<_111612b20_FallSt> self{};

	_111613f20_Token _field_token{_111613f20_Token()};


	_111612b20_FallSt(_111613f20_Token __param_token) {
		this->self = jule::Ref<_111612b20_FallSt>::make(this, nullptr);

		this->_field_token = __param_token;
	}

	~_111612b20_FallSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_FallSt(void) { this->self = jule::Ref<_111612b20_FallSt>::make(this, nullptr); }

	inline bool operator==(const _111612b20_FallSt &_Src) {
		return 
			this->_field_token == _Src._field_token;
	}

	inline bool operator!=(const _111612b20_FallSt &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_AssignSt {
	jule::Ref<_111612b20_AssignSt> self{};

	jule::Bool _field_declarative{jule::Bool()};
	_111613f20_Token _field_setter{_111613f20_Token()};
	jule::Slice<jule::Ref<_111612b20_AssignLeft>> _field_left{jule::Slice<jule::Ref<_111612b20_AssignLeft>>()};
	jule::Ref<_111612b20_Expr> _field_right{jule::Ref<_111612b20_Expr>()};


	_111612b20_AssignSt(jule::Bool __param_declarative, _111613f20_Token __param_setter, jule::Slice<jule::Ref<_111612b20_AssignLeft>> __param_left, jule::Ref<_111612b20_Expr> __param_right) {
		this->self = jule::Ref<_111612b20_AssignSt>::make(this, nullptr);

		this->_field_declarative = __param_declarative;
		this->_field_setter = __param_setter;
		this->_field_left = __param_left;
		this->_field_right = __param_right;
	}

	~_111612b20_AssignSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_AssignSt(void) { this->self = jule::Ref<_111612b20_AssignSt>::make(this, nullptr); }

	inline bool operator==(const _111612b20_AssignSt &_Src) {
		return 
			this->_field_declarative == _Src._field_declarative &&
			this->_field_setter == _Src._field_setter &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _111612b20_AssignSt &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_ScopeTree {
	jule::Ref<_111612b20_ScopeTree> self{};

	jule::Ref<_111612b20_ScopeTree> _field_parent{jule::Ref<_111612b20_ScopeTree>()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Bool _field_deferred{jule::Bool()};
	jule::Slice<jule::Any> _field_stmts{jule::Slice<jule::Any>()};


	_111612b20_ScopeTree(jule::Ref<_111612b20_ScopeTree> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts) {
		this->self = jule::Ref<_111612b20_ScopeTree>::make(this, nullptr);

		this->_field_parent = __param_parent;
		this->_field_unsafety = __param_unsafety;
		this->_field_deferred = __param_deferred;
		this->_field_stmts = __param_stmts;
	}

	~_111612b20_ScopeTree(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_ScopeTree(void) { this->self = jule::Ref<_111612b20_ScopeTree>::make(this, nullptr); }

	inline bool operator==(const _111612b20_ScopeTree &_Src) {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _111612b20_ScopeTree &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_RetSt {
	jule::Ref<_111612b20_RetSt> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Ref<_111612b20_Expr> _field_expr{jule::Ref<_111612b20_Expr>()};


	_111612b20_RetSt(_111613f20_Token __param_token, jule::Ref<_111612b20_Expr> __param_expr) {
		this->self = jule::Ref<_111612b20_RetSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
	}

	~_111612b20_RetSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_RetSt(void) { this->self = jule::Ref<_111612b20_RetSt>::make(this, nullptr); }

	inline bool operator==(const _111612b20_RetSt &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _111612b20_RetSt &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_Iter {
	jule::Ref<_111612b20_Iter> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Any _field_kind{jule::Any()};
	jule::Ref<_111612b20_ScopeTree> _field_scope{jule::Ref<_111612b20_ScopeTree>()};


	_111612b20_Iter(_111613f20_Token __param_token, jule::Any __param_kind, jule::Ref<_111612b20_ScopeTree> __param_scope) {
		this->self = jule::Ref<_111612b20_Iter>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_kind = __param_kind;
		this->_field_scope = __param_scope;
	}

	~_111612b20_Iter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_Iter(void) { this->self = jule::Ref<_111612b20_Iter>::make(this, nullptr); }

	inline jule::Bool _method_is_inf(void);


	inline bool operator==(const _111612b20_Iter &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _111612b20_Iter &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_WhileKind {
	jule::Ref<_111612b20_WhileKind> self{};

	jule::Ref<_111612b20_Expr> _field_expr{jule::Ref<_111612b20_Expr>()};
	jule::Any _field_next{jule::Any()};
	_111613f20_Token _field_next_token{_111613f20_Token()};


	_111612b20_WhileKind(jule::Ref<_111612b20_Expr> __param_expr, jule::Any __param_next, _111613f20_Token __param_next_token) {
		this->self = jule::Ref<_111612b20_WhileKind>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_next = __param_next;
		this->_field_next_token = __param_next_token;
	}

	~_111612b20_WhileKind(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_WhileKind(void) { this->self = jule::Ref<_111612b20_WhileKind>::make(this, nullptr); }

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _111612b20_WhileKind &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_next_token == _Src._field_next_token;
	}

	inline bool operator!=(const _111612b20_WhileKind &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_RangeKind {
	jule::Ref<_111612b20_RangeKind> self{};

	_111613f20_Token _field_in_token{_111613f20_Token()};
	jule::Ref<_111612b20_Expr> _field_expr{jule::Ref<_111612b20_Expr>()};
	jule::Ref<_111612b20_VarDecl> _field_key_a{jule::Ref<_111612b20_VarDecl>()};
	jule::Ref<_111612b20_VarDecl> _field_key_b{jule::Ref<_111612b20_VarDecl>()};


	_111612b20_RangeKind(_111613f20_Token __param_in_token, jule::Ref<_111612b20_Expr> __param_expr, jule::Ref<_111612b20_VarDecl> __param_key_a, jule::Ref<_111612b20_VarDecl> __param_key_b) {
		this->self = jule::Ref<_111612b20_RangeKind>::make(this, nullptr);

		this->_field_in_token = __param_in_token;
		this->_field_expr = __param_expr;
		this->_field_key_a = __param_key_a;
		this->_field_key_b = __param_key_b;
	}

	~_111612b20_RangeKind(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_RangeKind(void) { this->self = jule::Ref<_111612b20_RangeKind>::make(this, nullptr); }

	inline bool operator==(const _111612b20_RangeKind &_Src) {
		return 
			this->_field_in_token == _Src._field_in_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _111612b20_RangeKind &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_Conditional {
	jule::Ref<_111612b20_Conditional> self{};

	jule::Ref<_111612b20_If> _field_head{jule::Ref<_111612b20_If>()};
	jule::Slice<jule::Ref<_111612b20_If>> _field_tail{jule::Slice<jule::Ref<_111612b20_If>>()};
	jule::Ref<_111612b20_Else> _field_default{jule::Ref<_111612b20_Else>()};


	_111612b20_Conditional(jule::Ref<_111612b20_If> __param_head, jule::Slice<jule::Ref<_111612b20_If>> __param_tail, jule::Ref<_111612b20_Else> __param_default) {
		this->self = jule::Ref<_111612b20_Conditional>::make(this, nullptr);

		this->_field_head = __param_head;
		this->_field_tail = __param_tail;
		this->_field_default = __param_default;
	}

	~_111612b20_Conditional(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_Conditional(void) { this->self = jule::Ref<_111612b20_Conditional>::make(this, nullptr); }

	inline bool operator==(const _111612b20_Conditional &_Src) {
		return 
			this->_field_head == _Src._field_head &&
			this->_field_tail == _Src._field_tail &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _111612b20_Conditional &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_MatchCase {
	jule::Ref<_111612b20_MatchCase> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Bool _field_type_match{jule::Bool()};
	jule::Ref<_111612b20_Expr> _field_expr{jule::Ref<_111612b20_Expr>()};
	jule::Slice<jule::Ref<_111612b20_Case>> _field_cases{jule::Slice<jule::Ref<_111612b20_Case>>()};
	jule::Ref<_111612b20_Else> _field_default{jule::Ref<_111612b20_Else>()};


	_111612b20_MatchCase(_111613f20_Token __param_token, jule::Bool __param_type_match, jule::Ref<_111612b20_Expr> __param_expr, jule::Slice<jule::Ref<_111612b20_Case>> __param_cases, jule::Ref<_111612b20_Else> __param_default) {
		this->self = jule::Ref<_111612b20_MatchCase>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_type_match = __param_type_match;
		this->_field_expr = __param_expr;
		this->_field_cases = __param_cases;
		this->_field_default = __param_default;
	}

	~_111612b20_MatchCase(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_MatchCase(void) { this->self = jule::Ref<_111612b20_MatchCase>::make(this, nullptr); }

	inline bool operator==(const _111612b20_MatchCase &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_expr == _Src._field_expr &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _111612b20_MatchCase &_Src) { return !this->operator==(_Src); }
};


struct _11166e240_FileInfo {
	jule::Ref<_11166e240_FileInfo> self{};

	jule::Ref<_1220cb5d0_Ast> _field_ast{jule::Ref<_1220cb5d0_Ast>()};
	jule::Slice<_1316b4080_Log> _field_errors{jule::Slice<_1316b4080_Log>()};


	_11166e240_FileInfo(jule::Ref<_1220cb5d0_Ast> __param_ast, jule::Slice<_1316b4080_Log> __param_errors) {
		this->self = jule::Ref<_11166e240_FileInfo>::make(this, nullptr);

		this->_field_ast = __param_ast;
		this->_field_errors = __param_errors;
	}

	~_11166e240_FileInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11166e240_FileInfo(void) { this->self = jule::Ref<_11166e240_FileInfo>::make(this, nullptr); }

	inline bool operator==(const _11166e240_FileInfo &_Src) {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _11166e240_FileInfo &_Src) { return !this->operator==(_Src); }
};


struct _11166e240_PackageInfo {
	jule::Ref<_11166e240_PackageInfo> self{};

	jule::Slice<jule::Ref<_11166e240_FileInfo>> _field_files{jule::Slice<jule::Ref<_11166e240_FileInfo>>()};


	_11166e240_PackageInfo(jule::Slice<jule::Ref<_11166e240_FileInfo>> __param_files) {
		this->self = jule::Ref<_11166e240_PackageInfo>::make(this, nullptr);

		this->_field_files = __param_files;
	}

	~_11166e240_PackageInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11166e240_PackageInfo(void) { this->self = jule::Ref<_11166e240_PackageInfo>::make(this, nullptr); }

	inline bool operator==(const _11166e240_PackageInfo &_Src) {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _11166e240_PackageInfo &_Src) { return !this->operator==(_Src); }
};


struct _11167f570_Stmt {
	jule::Ref<_11167f570_Stmt> self{};

	jule::Slice<_111613f20_Token> _field_tokens{jule::Slice<_111613f20_Token>()};
	jule::Bool _field_terminated{jule::Bool()};


	_11167f570_Stmt(jule::Slice<_111613f20_Token> __param_tokens, jule::Bool __param_terminated) {
		this->self = jule::Ref<_11167f570_Stmt>::make(this, nullptr);

		this->_field_tokens = __param_tokens;
		this->_field_terminated = __param_terminated;
	}

	~_11167f570_Stmt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11167f570_Stmt(void) { this->self = jule::Ref<_11167f570_Stmt>::make(this, nullptr); }

	inline bool operator==(const _11167f570_Stmt &_Src) {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_terminated == _Src._field_terminated;
	}

	inline bool operator!=(const _11167f570_Stmt &_Src) { return !this->operator==(_Src); }
};


struct _11167f570_ScopeParser {
	jule::Ref<_11167f570_ScopeParser> self{};

	jule::Ref<_111681860_Parser> _field_p{jule::Ref<_111681860_Parser>()};
	jule::Ref<_111612b20_ScopeTree> _field_s{jule::Ref<_111612b20_ScopeTree>()};
	jule::Slice<jule::Ref<_11167f570_Stmt>> _field_stms{jule::Slice<jule::Ref<_11167f570_Stmt>>()};
	jule::Int _field_pos{jule::Int()};


	_11167f570_ScopeParser(jule::Ref<_111681860_Parser> __param_p, jule::Ref<_111612b20_ScopeTree> __param_s, jule::Slice<jule::Ref<_11167f570_Stmt>> __param_stms, jule::Int __param_pos) {
		this->self = jule::Ref<_11167f570_ScopeParser>::make(this, nullptr);

		this->_field_p = __param_p;
		this->_field_s = __param_s;
		this->_field_stms = __param_stms;
		this->_field_pos = __param_pos;
	}

	~_11167f570_ScopeParser(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11167f570_ScopeParser(void) { this->self = jule::Ref<_11167f570_ScopeParser>::make(this, nullptr); }

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline jule::Bool _method_finished(void);


	inline jule::Bool _method_is_last_st(void);


	inline void _method_push_err(_111613f20_Token,jule::Str);


	inline void _method_insert_as_next(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_11167f570_Stmt> _method_next(void);


	inline jule::Ref<_111612b20_ScopeTree> _method_build_scope(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_var_st(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_ret_st(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_while_next_iter(jule::Ref<_11167f570_Stmt>);


	inline jule::Ref<_111612b20_WhileKind> _method_build_while_iter_kind(jule::Slice<_111613f20_Token>);


	inline jule::Slice<jule::Slice<_111613f20_Token>> _method_get_range_kind_keys_tokens(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_VarDecl> _method_build_range_kind_key(jule::Slice<_111613f20_Token>);


	inline jule::Slice<jule::Ref<_111612b20_VarDecl>> _method_build_range_kind_keys(jule::Slice<jule::Slice<_111613f20_Token>>);


	inline void _method_setup_range_kind_keys_plain(jule::Ref<_111612b20_RangeKind>,jule::Slice<_111613f20_Token>);


	inline void _method_setup_range_kind_keys_explicit(jule::Ref<_111612b20_RangeKind>,jule::Slice<_111613f20_Token>);


	inline void _method_setup_range_kind_keys(jule::Ref<_111612b20_RangeKind>,jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_RangeKind> _method_build_range_iter_kind(jule::Slice<_111613f20_Token>,jule::Slice<_111613f20_Token>,_111613f20_Token);


	inline jule::Any _method_build_common_iter_kind(jule::Slice<_111613f20_Token>,_111613f20_Token);


	inline jule::Any _method_build_common_iter(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_buid_iter_st(jule::Ref<_11167f570_Stmt>);


	inline jule::Any _method_build_break_st(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_cont_st(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_If> _method_build_if(jule::Slice<_111613f20_Token>&);


	inline jule::Ref<_111612b20_Else> _method_build_else(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_if_else_chain(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_comment_st(_111613f20_Token);


	inline jule::Any _method_build_call_st(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_co_call_st(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_goto_st(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_fall_st(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_type_alias_st(jule::Slice<_111613f20_Token>);


	inline void _method_push_case_expr(jule::Slice<_111613f20_Token>,_111613f20_Token,jule::Bool,jule::Slice<jule::Ref<_111612b20_Expr>>&);


	inline jule::Slice<jule::Ref<_111612b20_Expr>> _method_build_case_exprs(jule::Slice<_111613f20_Token>&,jule::Bool);


	inline jule::Ref<_111612b20_ScopeTree> _method_build_case_scope(jule::Slice<_111613f20_Token>&);


	inline std::tuple<jule::Ref<_111612b20_Case>,jule::Bool> _method_build_case(jule::Slice<_111613f20_Token>&,jule::Bool);


	inline std::tuple<jule::Slice<jule::Ref<_111612b20_Case>>,jule::Ref<_111612b20_Else>> _method_build_cases(jule::Slice<_111613f20_Token>,jule::Bool);


	inline jule::Ref<_111612b20_MatchCase> _method_build_match_case(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_ScopeTree> _method_build_scope_st(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_LabelSt> _method_build_label_st(jule::Slice<_111613f20_Token>);


	inline std::tuple<jule::Any,jule::Bool> _method_build_id_st(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111654d60_AssignInfo> _method_build_assign_info(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_AssignLeft> _method_build_assign_l(jule::Slice<_111613f20_Token>);


	inline jule::Slice<jule::Ref<_111612b20_AssignLeft>> _method_build_assign_ls(jule::Slice<jule::Slice<_111613f20_Token>>);


	inline std::tuple<jule::Ref<_111612b20_AssignSt>,jule::Bool> _method_build_plain_assign(jule::Slice<_111613f20_Token>);


	inline std::tuple<jule::Ref<_111612b20_AssignSt>,jule::Bool> _method_build_decl_assign(jule::Slice<_111613f20_Token>);


	inline std::tuple<jule::Ref<_111612b20_AssignSt>,jule::Bool> _method_build_assign_st(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_st(jule::Ref<_11167f570_Stmt>);


	inline void _method_build(jule::Slice<_111613f20_Token>,jule::Ref<_111612b20_ScopeTree>);


	inline bool operator==(const _11167f570_ScopeParser &_Src) {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_s == _Src._field_s &&
			this->_field_stms == _Src._field_stms &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _11167f570_ScopeParser &_Src) { return !this->operator==(_Src); }
};


struct _112190570_CallData {
	jule::Ref<_112190570_CallData> self{};

	jule::Slice<_111613f20_Token> _field_expr_tokens{jule::Slice<_111613f20_Token>()};
	jule::Slice<_111613f20_Token> _field_args_tokens{jule::Slice<_111613f20_Token>()};
	jule::Slice<_111613f20_Token> _field_generics_tokens{jule::Slice<_111613f20_Token>()};


	_112190570_CallData(jule::Slice<_111613f20_Token> __param_expr_tokens, jule::Slice<_111613f20_Token> __param_args_tokens, jule::Slice<_111613f20_Token> __param_generics_tokens) {
		this->self = jule::Ref<_112190570_CallData>::make(this, nullptr);

		this->_field_expr_tokens = __param_expr_tokens;
		this->_field_args_tokens = __param_args_tokens;
		this->_field_generics_tokens = __param_generics_tokens;
	}

	~_112190570_CallData(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112190570_CallData(void) { this->self = jule::Ref<_112190570_CallData>::make(this, nullptr); }

	inline bool operator==(const _112190570_CallData &_Src) {
		return 
			this->_field_expr_tokens == _Src._field_expr_tokens &&
			this->_field_args_tokens == _Src._field_args_tokens &&
			this->_field_generics_tokens == _Src._field_generics_tokens;
	}

	inline bool operator!=(const _112190570_CallData &_Src) { return !this->operator==(_Src); }
};


struct _112190570_Precedencer {
	jule::Ref<_112190570_Precedencer> self{};

	jule::Slice<jule::Slice<jule::Any>> _field_pairs{jule::Slice<jule::Slice<jule::Any>>()};


	_112190570_Precedencer(jule::Slice<jule::Slice<jule::Any>> __param_pairs) {
		this->self = jule::Ref<_112190570_Precedencer>::make(this, nullptr);

		this->_field_pairs = __param_pairs;
	}

	~_112190570_Precedencer(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112190570_Precedencer(void) { this->self = jule::Ref<_112190570_Precedencer>::make(this, nullptr); }

	inline void _method_set(jule::Int,jule::Any);


	inline jule::Any _method_get_lower(void);


	inline bool operator==(const _112190570_Precedencer &_Src) {
		return 
			this->_field_pairs == _Src._field_pairs;
	}

	inline bool operator!=(const _112190570_Precedencer &_Src) { return !this->operator==(_Src); }
};


struct _112190570_ExprBuilder {
	jule::Ref<_112190570_ExprBuilder> self{};

	jule::Ref<_111681860_Parser> _field_p{jule::Ref<_111681860_Parser>()};


	_112190570_ExprBuilder(jule::Ref<_111681860_Parser> __param_p) {
		this->self = jule::Ref<_112190570_ExprBuilder>::make(this, nullptr);

		this->_field_p = __param_p;
	}

	~_112190570_ExprBuilder(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112190570_ExprBuilder(void) { this->self = jule::Ref<_112190570_ExprBuilder>::make(this, nullptr); }

	inline void _method_push_err(_111613f20_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Ref<_111612b20_TupleExpr> _method_build_tuple(jule::Slice<jule::Slice<_111613f20_Token>>);


	inline jule::Ref<_111612b20_LitExpr> _method_build_lit(_111613f20_Token);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_primitive_type(_111613f20_Token);


	inline jule::Any _method_build_single(_111613f20_Token);


	inline jule::Ref<_111612b20_IdentExpr> _method_build_cpp_linked_ident(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_UnaryExpr> _method_build_unary(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_SubIdentExpr> _method_build_obj_sub_ident(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_NsSelectionExpr> _method_build_ns_sub_ident(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_type(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_sub_ident(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_VariadicExpr> _method_build_variadic(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_op_right(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_between_parentheses(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_CastExpr> _method_try_build_cast(jule::Slice<_111613f20_Token>);


	inline void _method_push_arg(jule::Slice<jule::Ref<_111612b20_Expr>>&,jule::Slice<_111613f20_Token>,_111613f20_Token);


	inline jule::Slice<jule::Ref<_111612b20_Expr>> _method_build_args(jule::Slice<_111613f20_Token>);


	inline jule::Slice<jule::Ref<_111612b20_TypeDecl>> _method_build_call_generics(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_FnCallExpr> _method_build_fn_call(_111613f20_Token,jule::Ref<_112190570_CallData>);


	inline jule::Any _method_build_parentheses_range(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_UnsafeExpr> _method_build_unsafe_expr(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_FnDecl> _method_build_anon_fn(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_unsafe(jule::Slice<_111613f20_Token>);


	inline void _method_push_range_lit_part(jule::Slice<_111613f20_Token>,_111613f20_Token,jule::Slice<jule::Slice<_111613f20_Token>>&);


	inline jule::Slice<jule::Slice<_111613f20_Token>> _method_get_brace_range_lit_expr_parts(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_FieldExprPair> _method_build_field_expr_pair(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_struct_lit_expr(jule::Slice<_111613f20_Token>);


	inline jule::Slice<jule::Any> _method_build_struct_lit_exprs(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_StructLit> _method_build_typed_struct_literal(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_brace_lit_part(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_BraceLit> _method_build_brace_lit(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_brace_range(jule::Slice<_111613f20_Token>);


	inline jule::Slice<jule::Slice<_111613f20_Token>> _method_get_enumerable_parts(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_SliceExpr> _method_build_slice(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_IndexingExpr> _method_build_indexing(jule::Slice<_111613f20_Token>,jule::Slice<_111613f20_Token>,_111613f20_Token);


	inline jule::Ref<_111612b20_SlicingExpr> _method_build_slicing(jule::Slice<_111613f20_Token>,jule::Slice<_111613f20_Token>,jule::Int,_111613f20_Token);


	inline jule::Any _method_build_bracket_range(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_data(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_BinopExpr> _method_build_binop(jule::Slice<_111613f20_Token>,jule::Int);


	inline jule::Any _method_build(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_kind(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_Expr> _method_build_from_tokens(jule::Slice<_111613f20_Token>);


	inline bool operator==(const _112190570_ExprBuilder &_Src) {
		return 
			this->_field_p == _Src._field_p;
	}

	inline bool operator!=(const _112190570_ExprBuilder &_Src) { return !this->operator==(_Src); }
};


struct _111681860_Parser {
	jule::Ref<_111681860_Parser> self{};

	jule::Ref<_1220cb5d0_Ast> _field_ast{jule::Ref<_1220cb5d0_Ast>()};
	jule::Slice<jule::Ref<_111612b20_Directive>> _field_directives{jule::Slice<jule::Ref<_111612b20_Directive>>()};
	jule::Ref<_111612b20_CommentGroup> _field_comment_group{jule::Ref<_111612b20_CommentGroup>()};
	jule::Slice<_1316b4080_Log> _field_errors{jule::Slice<_1316b4080_Log>()};


	_111681860_Parser(jule::Ref<_1220cb5d0_Ast> __param_ast, jule::Slice<jule::Ref<_111612b20_Directive>> __param_directives, jule::Ref<_111612b20_CommentGroup> __param_comment_group, jule::Slice<_1316b4080_Log> __param_errors) {
		this->self = jule::Ref<_111681860_Parser>::make(this, nullptr);

		this->_field_ast = __param_ast;
		this->_field_directives = __param_directives;
		this->_field_comment_group = __param_comment_group;
		this->_field_errors = __param_errors;
	}

	~_111681860_Parser(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111681860_Parser(void) { this->self = jule::Ref<_111681860_Parser>::make(this, nullptr); }

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline void _method_push_err(_111613f20_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Ref<_111612b20_Expr> _method_build_expr(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_Directive> _method_get_directive(jule::Ref<_111612b20_Comment>);


	inline void _method_push_directive(jule::Ref<_111612b20_Comment>);


	inline void _method_process_comment(jule::Ref<_111612b20_Comment>);


	inline jule::Ref<_111612b20_ScopeTree> _method_build_scope(jule::Slice<_111613f20_Token>);


	inline std::tuple<jule::Ref<_111612b20_TypeDecl>,jule::Bool> _method___build_type(jule::Slice<_111613f20_Token>,jule::Int*,jule::Bool);


	inline std::tuple<jule::Ref<_111612b20_TypeDecl>,jule::Bool> _method_build_type(jule::Slice<_111613f20_Token>,jule::Int*,jule::Bool);


	inline jule::Ref<_111612b20_TypeAliasDecl> _method_build_type_alias_decl(jule::Slice<_111613f20_Token>);


	inline void _method_build_var_type_and_expr(jule::Ref<_111612b20_VarDecl>,jule::Slice<_111613f20_Token>);


	inline void _method_build_var_common(jule::Ref<_111612b20_VarDecl>,jule::Slice<_111613f20_Token>);


	inline void _method_build_var_begin(jule::Ref<_111612b20_VarDecl>,jule::Ref<jule::Int>,jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_VarDecl> _method_build_var(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_GenericDecl> _method_build_generic(jule::Slice<_111613f20_Token>);


	inline jule::Slice<jule::Ref<_111612b20_GenericDecl>> _method_build_generics(jule::Slice<_111613f20_Token>,_111613f20_Token);


	inline jule::Ref<_111612b20_ParamDecl> _method_build_self_param(jule::Slice<_111613f20_Token>);


	inline void _method_param_type_begin(jule::Ref<_111612b20_ParamDecl>,jule::Int&,jule::Slice<_111613f20_Token>);


	inline void _method_build_param_type(jule::Ref<_111612b20_ParamDecl>,jule::Slice<_111613f20_Token>,jule::Bool);


	inline void _method_param_body_id(jule::Ref<_111612b20_ParamDecl>,_111613f20_Token);


	inline void _method_build_param_body(jule::Ref<_111612b20_ParamDecl>,jule::Ref<jule::Int>,jule::Slice<_111613f20_Token>,jule::Bool);


	inline jule::Ref<_111612b20_ParamDecl> _method_build_param(jule::Slice<_111613f20_Token>,jule::Bool);


	inline void _method_check_params(jule::Slice<jule::Ref<_111612b20_ParamDecl>>);


	inline jule::Slice<jule::Ref<_111612b20_ParamDecl>> _method_build_params(jule::Slice<_111613f20_Token>,jule::Bool,jule::Bool);


	inline std::tuple<jule::Ref<_111612b20_RetTypeDecl>,jule::Bool> _method_build_multi_ret_type(jule::Slice<_111613f20_Token>,jule::Int&);


	inline std::tuple<jule::Ref<_111612b20_RetTypeDecl>,jule::Bool> _method_build_ret_type(jule::Slice<_111613f20_Token>,jule::Int&);


	inline jule::Ref<_111612b20_FnDecl> _method_build_fn_prototype(jule::Slice<_111613f20_Token>,jule::Int&,jule::Bool,jule::Bool);


	inline jule::Ref<_111612b20_FnDecl> _method_build_fn(jule::Slice<_111613f20_Token>,jule::Bool,jule::Bool,jule::Bool);


	inline jule::Slice<_111613f20_Token> _method_get_use_decl_selectors(jule::Slice<_111613f20_Token>);


	inline void _method_build_cpp_use_decl(jule::Ref<_111612b20_UseDecl>,jule::Slice<_111613f20_Token>);


	inline void _method_build_std_use_decl(jule::Ref<_111612b20_UseDecl>,jule::Slice<_111613f20_Token>);


	inline void _method_build_ident_use_decl(jule::Ref<_111612b20_UseDecl>,jule::Slice<_111613f20_Token>);


	inline void _method_parse_use_decl(jule::Ref<_111612b20_UseDecl>,jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_UseDecl> _method_build_use_decl(jule::Slice<_111613f20_Token>,jule::Bool);


	inline jule::Ref<_111612b20_Expr> _method_build_enum_item_expr(jule::Ref<jule::Int>,jule::Slice<_111613f20_Token>);


	inline jule::Slice<jule::Ref<_111612b20_EnumItemDecl>> _method_build_enum_items(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_EnumDecl> _method_build_enum_decl(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_FieldDecl> _method_build_field(jule::Slice<_111613f20_Token>);


	inline jule::Slice<jule::Ref<_111612b20_FieldDecl>> _method_build_struct_decl_fields(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_StructDecl> _method_build_struct_decl(jule::Slice<_111613f20_Token>);


	inline void _method_check_method_receiver(jule::Ref<_111612b20_FnDecl>);


	inline jule::Slice<jule::Ref<_111612b20_FnDecl>> _method_build_trait_methods(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_TraitDecl> _method_build_trait_decl(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_FnDecl> _method_build_cpp_link_fn(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_VarDecl> _method_build_cpp_link_var(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_StructDecl> _method_build_cpp_link_struct(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_TypeAliasDecl> _method_build_cpp_link_type_alias(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_UseDecl> _method_build_cpp_link_use(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_cpp_link(jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_FnDecl> _method_get_method(jule::Slice<_111613f20_Token>);


	inline void _method_parse_impl_trait(jule::Ref<_111612b20_Impl>,jule::Slice<_111613f20_Token>);


	inline void _method_parse_impl_struct(jule::Ref<_111612b20_Impl>,jule::Slice<_111613f20_Token>);


	inline void _method_parse_impl_body(jule::Ref<_111612b20_Impl>,jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_Impl> _method_build_impl(jule::Slice<_111613f20_Token>);


	inline jule::Any _method_build_node_data(jule::Slice<_111613f20_Token>);


	inline void _method_check_comment_group(_111612b20_Node);


	inline void _method_check_directive(_111612b20_Node);


	inline void _method_apply_meta(_111612b20_Node,jule::Bool);


	inline void _method_check_use_decl(_111612b20_Node);


	inline std::tuple<jule::Bool,jule::Any> _method_build_general_scope_node_data(jule::Slice<_111613f20_Token>);


	inline _111612b20_Node _method_parse_node(jule::Slice<_111613f20_Token>);


	inline void _method_append_node(jule::Slice<_111613f20_Token>);


	inline void _method_remove_range(jule::Int,jule::Str,jule::Slice<_111613f20_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_wrong_order_close_err(_111613f20_Token,jule::Slice<_111613f20_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_range_close(_111613f20_Token,jule::Str,jule::Slice<_111613f20_Token>&,jule::Slice<jule::Int>&);


	inline void _method_check_ranges(jule::Slice<_111613f20_Token>);


	inline void _method_parse(jule::Ref<_1220fd110_File>);


	inline bool operator==(const _111681860_Parser &_Src) {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_directives == _Src._field_directives &&
			this->_field_comment_group == _Src._field_comment_group &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _111681860_Parser &_Src) { return !this->operator==(_Src); }
};


struct _111680c00_TypeBuilder {
	jule::Ref<_111680c00_TypeBuilder> self{};

	jule::Ref<_111681860_Parser> _field_p{jule::Ref<_111681860_Parser>()};
	jule::Slice<_111613f20_Token> _field_tokens{jule::Slice<_111613f20_Token>()};
	jule::Int* _field_i{nullptr};
	jule::Bool _field_err{jule::Bool()};


	_111680c00_TypeBuilder(jule::Ref<_111681860_Parser> __param_p, jule::Slice<_111613f20_Token> __param_tokens, jule::Int* __param_i, jule::Bool __param_err) {
		this->self = jule::Ref<_111680c00_TypeBuilder>::make(this, nullptr);

		this->_field_p = __param_p;
		this->_field_tokens = __param_tokens;
		this->_field_i = __param_i;
		this->_field_err = __param_err;
	}

	~_111680c00_TypeBuilder(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111680c00_TypeBuilder(void) { this->self = jule::Ref<_111680c00_TypeBuilder>::make(this, nullptr); }

	inline void _method_push_err(_111613f20_Token,jule::Str);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_prim(void);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_namespace(void);


	inline jule::Slice<jule::Ref<_111612b20_TypeDecl>> _method_build_generics(void);


	inline jule::Slice<jule::Slice<_111613f20_Token>> _method_ident_generics(void);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_ident(void);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_cpp_link(void);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_fn(void);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_ptr(void);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_ref(void);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_op(void);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_slc(void);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_arr(void);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_map(jule::Int,jule::Slice<_111613f20_Token>);


	inline jule::Ref<_111612b20_TypeDecl> _method_build_enumerable(void);


	inline jule::Ref<_111612b20_TypeDecl> _method_step(void);


	inline std::tuple<jule::Ref<_111612b20_TypeDecl>,jule::Bool> _method_build(void);


	inline bool operator==(const _111680c00_TypeBuilder &_Src) {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_tokens == _Src._field_tokens &&
			this->_field_i == _Src._field_i &&
			this->_field_err == _Src._field_err;
	}

	inline bool operator!=(const _111680c00_TypeBuilder &_Src) { return !this->operator==(_Src); }
};


struct _1131530d0_Const {
	jule::Ref<_1131530d0_Const> self{};

	jule::Any _field_data{jule::Any()};


	_1131530d0_Const(jule::Any __param_data) {
		this->self = jule::Ref<_1131530d0_Const>::make(this, nullptr);

		this->_field_data = __param_data;
	}

	~_1131530d0_Const(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1131530d0_Const(void) { this->self = jule::Ref<_1131530d0_Const>::make(this, nullptr); }

	static inline jule::Ref<_1131530d0_Const> _static_method_new_i64(jule::I64);


	static inline jule::Ref<_1131530d0_Const> _static_method_new_u64(jule::U64);


	static inline jule::Ref<_1131530d0_Const> _static_method_new_bool(jule::Bool);


	static inline jule::Ref<_1131530d0_Const> _static_method_new_str(jule::Str);


	static inline jule::Ref<_1131530d0_Const> _static_method_new_f64(jule::F64);


	static inline jule::Ref<_1131530d0_Const> _static_method_new_nil(void);


	inline jule::I64 _method_read_i64(void);


	inline jule::U64 _method_read_u64(void);


	inline jule::Bool _method_read_bool(void);


	inline jule::Str _method_read_str(void);


	inline jule::F64 _method_read_f64(void);


	inline jule::I64 _method_as_i64(void);


	inline jule::U64 _method_as_u64(void);


	inline jule::F64 _method_as_f64(void);


	inline void _method_set_i64(jule::I64);


	inline void _method_set_u64(jule::U64);


	inline void _method_set_bool(jule::Bool);


	inline void _method_set_str(jule::Str);


	inline void _method_set_f64(jule::F64);


	inline void _method_set_nil(void);


	inline void _method_set_by_type(jule::F64,_1131530d0_Const);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_are_same_types(_1131530d0_Const);


	inline jule::Bool _method_and(_1131530d0_Const);


	inline jule::Bool _method_or(_1131530d0_Const);


	inline jule::Bool _method_eqs(_1131530d0_Const);


	inline jule::Bool _method_lt(_1131530d0_Const);


	inline jule::Bool _method_gt(_1131530d0_Const);


	inline jule::Bool _method_add(_1131530d0_Const);


	inline jule::Bool _method_sub(_1131530d0_Const);


	inline jule::Bool _method_mul(_1131530d0_Const);


	inline jule::Bool _method_div(_1131530d0_Const);


	inline jule::Bool _method_mod(_1131530d0_Const);


	inline jule::Bool _method_bitwise_and(_1131530d0_Const);


	inline jule::Bool _method_bitwise_or(_1131530d0_Const);


	inline jule::Bool _method_xor(_1131530d0_Const);


	inline jule::Bool _method_lshift(_1131530d0_Const);


	inline jule::Bool _method_rshift(_1131530d0_Const);


	inline bool operator==(const _1131530d0_Const &_Src) {
		return 
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _1131530d0_Const &_Src) { return !this->operator==(_Src); }
};


struct _11209db80_FieldIns {
	jule::Ref<_11209db80_FieldIns> self{};

	jule::Ref<_11209db80_Field> _field_decl{jule::Ref<_11209db80_Field>()};
	jule::Ref<_1217f7750_TypeKind> _field_kind{jule::Ref<_1217f7750_TypeKind>()};


	_11209db80_FieldIns(jule::Ref<_11209db80_Field> __param_decl, jule::Ref<_1217f7750_TypeKind> __param_kind) {
		this->self = jule::Ref<_11209db80_FieldIns>::make(this, nullptr);

		this->_field_decl = __param_decl;
		this->_field_kind = __param_kind;
	}

	~_11209db80_FieldIns(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11209db80_FieldIns(void) { this->self = jule::Ref<_11209db80_FieldIns>::make(this, nullptr); }

	inline bool operator==(const _11209db80_FieldIns &_Src) {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _11209db80_FieldIns &_Src) { return !this->operator==(_Src); }
};


struct _11209db80_StructIns: public _1217f7750_Kind {
	jule::Ref<_11209db80_StructIns> self{};

	jule::Bool _field_checked{jule::Bool()};
	jule::Ref<_11209db80_Struct> _field_decl{jule::Ref<_11209db80_Struct>()};
	jule::Slice<jule::Ref<_1217f7750_TypeKind>> _field_generics{jule::Slice<jule::Ref<_1217f7750_TypeKind>>()};
	jule::Slice<jule::Ref<_11209db80_FieldIns>> _field_fields{jule::Slice<jule::Ref<_11209db80_FieldIns>>()};
	jule::Slice<jule::Ref<_112446fb0_Fn>> _field_methods{jule::Slice<jule::Ref<_112446fb0_Fn>>()};
	jule::Bool _field_has_mut{jule::Bool()};
	jule::Ref<_112572770_ReferenceStack> _field_references{jule::Ref<_112572770_ReferenceStack>()};


	_11209db80_StructIns(jule::Bool __param_checked, jule::Ref<_11209db80_Struct> __param_decl, jule::Slice<jule::Ref<_1217f7750_TypeKind>> __param_generics, jule::Slice<jule::Ref<_11209db80_FieldIns>> __param_fields, jule::Slice<jule::Ref<_112446fb0_Fn>> __param_methods, jule::Bool __param_has_mut, jule::Ref<_112572770_ReferenceStack> __param_references) {
		this->self = jule::Ref<_11209db80_StructIns>::make(this, nullptr);

		this->_field_checked = __param_checked;
		this->_field_decl = __param_decl;
		this->_field_generics = __param_generics;
		this->_field_fields = __param_fields;
		this->_field_methods = __param_methods;
		this->_field_has_mut = __param_has_mut;
		this->_field_references = __param_references;
	}

	~_11209db80_StructIns(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11209db80_StructIns(void) { this->self = jule::Ref<_11209db80_StructIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Ref<_112446fb0_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ref<_11209db80_FieldIns> _method_find_field(jule::Str);


	inline bool operator==(const _11209db80_StructIns &_Src) {
		return 
			this->_field_checked == _Src._field_checked &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_has_mut == _Src._field_has_mut &&
			this->_field_references == _Src._field_references;
	}

	inline bool operator!=(const _11209db80_StructIns &_Src) { return !this->operator==(_Src); }
};


struct _112446fb0_RetType {
	jule::Ref<_112446fb0_RetType> self{};

	jule::Ref<_1217f7750_TypeSymbol> _field_kind{jule::Ref<_1217f7750_TypeSymbol>()};
	jule::Slice<_111613f20_Token> _field_idents{jule::Slice<_111613f20_Token>()};


	_112446fb0_RetType(jule::Ref<_1217f7750_TypeSymbol> __param_kind, jule::Slice<_111613f20_Token> __param_idents) {
		this->self = jule::Ref<_112446fb0_RetType>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_idents = __param_idents;
	}

	~_112446fb0_RetType(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112446fb0_RetType(void) { this->self = jule::Ref<_112446fb0_RetType>::make(this, nullptr); }

	inline bool operator==(const _112446fb0_RetType &_Src) {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _112446fb0_RetType &_Src) { return !this->operator==(_Src); }
};


struct _112446fb0_ParamIns {
	jule::Ref<_112446fb0_ParamIns> self{};

	jule::Ref<_112446fb0_Param> _field_decl{jule::Ref<_112446fb0_Param>()};
	jule::Ref<_1217f7750_TypeKind> _field_kind{jule::Ref<_1217f7750_TypeKind>()};


	_112446fb0_ParamIns(jule::Ref<_112446fb0_Param> __param_decl, jule::Ref<_1217f7750_TypeKind> __param_kind) {
		this->self = jule::Ref<_112446fb0_ParamIns>::make(this, nullptr);

		this->_field_decl = __param_decl;
		this->_field_kind = __param_kind;
	}

	~_112446fb0_ParamIns(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112446fb0_ParamIns(void) { this->self = jule::Ref<_112446fb0_ParamIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline bool operator==(const _112446fb0_ParamIns &_Src) {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _112446fb0_ParamIns &_Src) { return !this->operator==(_Src); }
};


struct _112446fb0_FnIns: public _1217f7750_Kind {
	jule::Ref<_112446fb0_FnIns> self{};

	jule::Ref<_11209db80_StructIns> _field_owner{jule::Ref<_11209db80_StructIns>()};
	jule::Ref<_112446fb0_Fn> _field_decl{jule::Ref<_112446fb0_Fn>()};
	jule::Slice<jule::Ref<_1217f7750_TypeKind>> _field_generics{jule::Slice<jule::Ref<_1217f7750_TypeKind>>()};
	jule::Slice<jule::Ref<_112446fb0_ParamIns>> _field_params{jule::Slice<jule::Ref<_112446fb0_ParamIns>>()};
	jule::Ref<_1217f7750_TypeKind> _field_result{jule::Ref<_1217f7750_TypeKind>()};
	jule::Ref<_1126288e0_Scope> _field_scope{jule::Ref<_1126288e0_Scope>()};
	jule::Ref<_112572770_ReferenceStack> _field_references{jule::Ref<_112572770_ReferenceStack>()};
	jule::Ref<_112572770_ReferenceStack> _field_refers{jule::Ref<_112572770_ReferenceStack>()};
	jule::Fn<jule::Ref<_121dedce0_Data>(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>)> _field_caller{jule::Fn<jule::Ref<_121dedce0_Data>(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>)>()};
	jule::Bool _field_reloaded{jule::Bool()};
	jule::Bool _field_anon{jule::Bool()};


	_112446fb0_FnIns(jule::Ref<_11209db80_StructIns> __param_owner, jule::Ref<_112446fb0_Fn> __param_decl, jule::Slice<jule::Ref<_1217f7750_TypeKind>> __param_generics, jule::Slice<jule::Ref<_112446fb0_ParamIns>> __param_params, jule::Ref<_1217f7750_TypeKind> __param_result, jule::Ref<_1126288e0_Scope> __param_scope, jule::Ref<_112572770_ReferenceStack> __param_references, jule::Ref<_112572770_ReferenceStack> __param_refers, jule::Fn<jule::Ref<_121dedce0_Data>(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>)> __param_caller, jule::Bool __param_reloaded, jule::Bool __param_anon) {
		this->self = jule::Ref<_112446fb0_FnIns>::make(this, nullptr);

		this->_field_owner = __param_owner;
		this->_field_decl = __param_decl;
		this->_field_generics = __param_generics;
		this->_field_params = __param_params;
		this->_field_result = __param_result;
		this->_field_scope = __param_scope;
		this->_field_references = __param_references;
		this->_field_refers = __param_refers;
		this->_field_caller = __param_caller;
		this->_field_reloaded = __param_reloaded;
		this->_field_anon = __param_anon;
	}

	~_112446fb0_FnIns(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112446fb0_FnIns(void) { this->self = jule::Ref<_112446fb0_FnIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Bool _method_is_anon(void);


	inline bool operator==(const _112446fb0_FnIns &_Src) {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_params == _Src._field_params &&
			this->_field_result == _Src._field_result &&
			this->_field_scope == _Src._field_scope &&
			this->_field_references == _Src._field_references &&
			this->_field_refers == _Src._field_refers &&
			this->_field_caller == _Src._field_caller &&
			this->_field_reloaded == _Src._field_reloaded &&
			this->_field_anon == _Src._field_anon;
	}

	inline bool operator!=(const _112446fb0_FnIns &_Src) { return !this->operator==(_Src); }
};


struct _112572770_SymbolBuilder {
	jule::Ref<_112572770_SymbolBuilder> self{};

	jule::Ref<_112572770_SymbolBuilder> _field_owner{jule::Ref<_112572770_SymbolBuilder>()};
	jule::Trait<_11265fb90_Importer> _field_importer{jule::Trait<_11265fb90_Importer>()};
	jule::Slice<_1316b4080_Log> _field_errors{jule::Slice<_1316b4080_Log>()};
	jule::Ref<_1220cb5d0_Ast> _field_ast{jule::Ref<_1220cb5d0_Ast>()};
	jule::Ref<_1320e2330_SymbolTable> _field_table{jule::Ref<_1320e2330_SymbolTable>()};


	_112572770_SymbolBuilder(jule::Ref<_112572770_SymbolBuilder> __param_owner, jule::Trait<_11265fb90_Importer> __param_importer, jule::Slice<_1316b4080_Log> __param_errors, jule::Ref<_1220cb5d0_Ast> __param_ast, jule::Ref<_1320e2330_SymbolTable> __param_table) {
		this->self = jule::Ref<_112572770_SymbolBuilder>::make(this, nullptr);

		this->_field_owner = __param_owner;
		this->_field_importer = __param_importer;
		this->_field_errors = __param_errors;
		this->_field_ast = __param_ast;
		this->_field_table = __param_table;
	}

	~_112572770_SymbolBuilder(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112572770_SymbolBuilder(void) { this->self = jule::Ref<_112572770_SymbolBuilder>::make(this, nullptr); }

	inline jule::Ref<_112572770_SymbolBuilder> _method_get_root(void);


	inline void _method_push_err(_111613f20_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_cpp_use_decl_path(jule::Ref<_111612b20_UseDecl>);


	inline jule::Ref<_11265fb90_ImportInfo> _method_build_cpp_header_import(jule::Ref<_111612b20_UseDecl>);


	inline jule::Ref<_11265fb90_ImportInfo> _method_build_std_import(jule::Ref<_111612b20_UseDecl>);


	inline jule::Ref<_11265fb90_ImportInfo> _method_build_ident_import(jule::Ref<_111612b20_UseDecl>);


	inline jule::Ref<_11265fb90_ImportInfo> _method_build_import(jule::Ref<_111612b20_UseDecl>);


	inline jule::Bool _method_check_duplicate_use_decl(jule::Ref<_11265fb90_ImportInfo>);


	inline void _method_impl_import_selections(jule::Ref<_11265fb90_ImportInfo>,jule::Ref<_111612b20_UseDecl>);


	inline jule::Str _method_get_as_link_path(jule::Str);


	inline void _method_push_cycle_error(jule::Ref<_112572770_SymbolBuilder>,jule::Str,jule::Str&);


	inline void _method_push_cross_cycle_error(jule::Ref<_112572770_SymbolBuilder>,jule::Ref<_11265fb90_ImportInfo>,_111613f20_Token);


	inline jule::Bool _method_check_import_cycles(jule::Ref<_11265fb90_ImportInfo>,jule::Ref<_111612b20_UseDecl>);


	inline jule::Bool _method_import_package(jule::Ref<_11265fb90_ImportInfo>,jule::Ref<_111612b20_UseDecl>);


	inline jule::Ref<_11265fb90_ImportInfo> _method_import_use_decl(jule::Ref<_111612b20_UseDecl>);


	inline void _method_import_use_decls(void);


	inline void _method_append_decl(_111612b20_Node);


	inline void _method_append_decls(void);


	inline void _method_append_impls(void);


	inline void _method_push_directive_pass(jule::Ref<_111612b20_Directive>);


	inline void _method_append_top_directives(void);


	inline void _method_build(void);


	inline bool operator==(const _112572770_SymbolBuilder &_Src) {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_importer == _Src._field_importer &&
			this->_field_errors == _Src._field_errors &&
			this->_field_ast == _Src._field_ast &&
			this->_field_table == _Src._field_table;
	}

	inline bool operator!=(const _112572770_SymbolBuilder &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_If {
	jule::Ref<_1126288e0_If> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Ref<_1126288e0_Scope> _field_scope{jule::Ref<_1126288e0_Scope>()};


	_1126288e0_If(jule::Any __param_expr, jule::Ref<_1126288e0_Scope> __param_scope) {
		this->self = jule::Ref<_1126288e0_If>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_scope = __param_scope;
	}

	~_1126288e0_If(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_If(void) { this->self = jule::Ref<_1126288e0_If>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_If &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1126288e0_If &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_Else {
	jule::Ref<_1126288e0_Else> self{};

	jule::Ref<_1126288e0_Scope> _field_scope{jule::Ref<_1126288e0_Scope>()};


	_1126288e0_Else(jule::Ref<_1126288e0_Scope> __param_scope) {
		this->self = jule::Ref<_1126288e0_Else>::make(this, nullptr);

		this->_field_scope = __param_scope;
	}

	~_1126288e0_Else(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_Else(void) { this->self = jule::Ref<_1126288e0_Else>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_Else &_Src) {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1126288e0_Else &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_Conditional {
	jule::Ref<_1126288e0_Conditional> self{};

	jule::Slice<jule::Ref<_1126288e0_If>> _field_elifs{jule::Slice<jule::Ref<_1126288e0_If>>()};
	jule::Ref<_1126288e0_Else> _field_default{jule::Ref<_1126288e0_Else>()};


	_1126288e0_Conditional(jule::Slice<jule::Ref<_1126288e0_If>> __param_elifs, jule::Ref<_1126288e0_Else> __param_default) {
		this->self = jule::Ref<_1126288e0_Conditional>::make(this, nullptr);

		this->_field_elifs = __param_elifs;
		this->_field_default = __param_default;
	}

	~_1126288e0_Conditional(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_Conditional(void) { this->self = jule::Ref<_1126288e0_Conditional>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_Conditional &_Src) {
		return 
			this->_field_elifs == _Src._field_elifs &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1126288e0_Conditional &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_InfIter {
	jule::Ref<_1126288e0_InfIter> self{};

	jule::Ref<_1126288e0_Scope> _field_scope{jule::Ref<_1126288e0_Scope>()};


	_1126288e0_InfIter(jule::Ref<_1126288e0_Scope> __param_scope) {
		this->self = jule::Ref<_1126288e0_InfIter>::make(this, nullptr);

		this->_field_scope = __param_scope;
	}

	~_1126288e0_InfIter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_InfIter(void) { this->self = jule::Ref<_1126288e0_InfIter>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_InfIter &_Src) {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1126288e0_InfIter &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_WhileIter {
	jule::Ref<_1126288e0_WhileIter> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Any _field_next{jule::Any()};
	jule::Ref<_1126288e0_Scope> _field_scope{jule::Ref<_1126288e0_Scope>()};


	_1126288e0_WhileIter(jule::Any __param_expr, jule::Any __param_next, jule::Ref<_1126288e0_Scope> __param_scope) {
		this->self = jule::Ref<_1126288e0_WhileIter>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_next = __param_next;
		this->_field_scope = __param_scope;
	}

	~_1126288e0_WhileIter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_WhileIter(void) { this->self = jule::Ref<_1126288e0_WhileIter>::make(this, nullptr); }

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _1126288e0_WhileIter &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1126288e0_WhileIter &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_RangeIter {
	jule::Ref<_1126288e0_RangeIter> self{};

	jule::Ref<_121dedce0_Data> _field_expr{jule::Ref<_121dedce0_Data>()};
	jule::Ref<_1126288e0_Scope> _field_scope{jule::Ref<_1126288e0_Scope>()};
	jule::Ref<_1320e22c0_Var> _field_key_a{jule::Ref<_1320e22c0_Var>()};
	jule::Ref<_1320e22c0_Var> _field_key_b{jule::Ref<_1320e22c0_Var>()};


	_1126288e0_RangeIter(jule::Ref<_121dedce0_Data> __param_expr, jule::Ref<_1126288e0_Scope> __param_scope, jule::Ref<_1320e22c0_Var> __param_key_a, jule::Ref<_1320e22c0_Var> __param_key_b) {
		this->self = jule::Ref<_1126288e0_RangeIter>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_scope = __param_scope;
		this->_field_key_a = __param_key_a;
		this->_field_key_b = __param_key_b;
	}

	~_1126288e0_RangeIter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_RangeIter(void) { this->self = jule::Ref<_1126288e0_RangeIter>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_RangeIter &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _1126288e0_RangeIter &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_ContSt {
	jule::Ref<_1126288e0_ContSt> self{};

	jule::Uintptr _field_it{jule::Uintptr()};


	_1126288e0_ContSt(jule::Uintptr __param_it) {
		this->self = jule::Ref<_1126288e0_ContSt>::make(this, nullptr);

		this->_field_it = __param_it;
	}

	~_1126288e0_ContSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_ContSt(void) { this->self = jule::Ref<_1126288e0_ContSt>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_ContSt &_Src) {
		return 
			this->_field_it == _Src._field_it;
	}

	inline bool operator!=(const _1126288e0_ContSt &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_BreakSt {
	jule::Ref<_1126288e0_BreakSt> self{};

	jule::Uintptr _field_it{jule::Uintptr()};
	jule::Uintptr _field_mtch{jule::Uintptr()};


	_1126288e0_BreakSt(jule::Uintptr __param_it, jule::Uintptr __param_mtch) {
		this->self = jule::Ref<_1126288e0_BreakSt>::make(this, nullptr);

		this->_field_it = __param_it;
		this->_field_mtch = __param_mtch;
	}

	~_1126288e0_BreakSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_BreakSt(void) { this->self = jule::Ref<_1126288e0_BreakSt>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_BreakSt &_Src) {
		return 
			this->_field_it == _Src._field_it &&
			this->_field_mtch == _Src._field_mtch;
	}

	inline bool operator!=(const _1126288e0_BreakSt &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_Label {
	jule::Ref<_1126288e0_Label> self{};

	jule::Str _field_ident{jule::Str()};


	_1126288e0_Label(jule::Str __param_ident) {
		this->self = jule::Ref<_1126288e0_Label>::make(this, nullptr);

		this->_field_ident = __param_ident;
	}

	~_1126288e0_Label(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_Label(void) { this->self = jule::Ref<_1126288e0_Label>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_Label &_Src) {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1126288e0_Label &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_GotoSt {
	jule::Ref<_1126288e0_GotoSt> self{};

	jule::Str _field_ident{jule::Str()};


	_1126288e0_GotoSt(jule::Str __param_ident) {
		this->self = jule::Ref<_1126288e0_GotoSt>::make(this, nullptr);

		this->_field_ident = __param_ident;
	}

	~_1126288e0_GotoSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_GotoSt(void) { this->self = jule::Ref<_1126288e0_GotoSt>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_GotoSt &_Src) {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1126288e0_GotoSt &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_Postfix {
	jule::Ref<_1126288e0_Postfix> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Str _field_op{jule::Str()};


	_1126288e0_Postfix(jule::Any __param_expr, jule::Str __param_op) {
		this->self = jule::Ref<_1126288e0_Postfix>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_op = __param_op;
	}

	~_1126288e0_Postfix(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_Postfix(void) { this->self = jule::Ref<_1126288e0_Postfix>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_Postfix &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1126288e0_Postfix &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_Assign {
	jule::Ref<_1126288e0_Assign> self{};

	jule::Any _field_l{jule::Any()};
	jule::Any _field_r{jule::Any()};
	jule::Str _field_op{jule::Str()};


	_1126288e0_Assign(jule::Any __param_l, jule::Any __param_r, jule::Str __param_op) {
		this->self = jule::Ref<_1126288e0_Assign>::make(this, nullptr);

		this->_field_l = __param_l;
		this->_field_r = __param_r;
		this->_field_op = __param_op;
	}

	~_1126288e0_Assign(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_Assign(void) { this->self = jule::Ref<_1126288e0_Assign>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_Assign &_Src) {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1126288e0_Assign &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_MultiAssign {
	jule::Ref<_1126288e0_MultiAssign> self{};

	jule::Slice<jule::Any> _field_l{jule::Slice<jule::Any>()};
	jule::Any _field_r{jule::Any()};


	_1126288e0_MultiAssign(jule::Slice<jule::Any> __param_l, jule::Any __param_r) {
		this->self = jule::Ref<_1126288e0_MultiAssign>::make(this, nullptr);

		this->_field_l = __param_l;
		this->_field_r = __param_r;
	}

	~_1126288e0_MultiAssign(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_MultiAssign(void) { this->self = jule::Ref<_1126288e0_MultiAssign>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_MultiAssign &_Src) {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r;
	}

	inline bool operator!=(const _1126288e0_MultiAssign &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_Match {
	jule::Ref<_1126288e0_Match> self{};

	jule::Ref<_121dedce0_Data> _field_expr{jule::Ref<_121dedce0_Data>()};
	jule::Bool _field_type_match{jule::Bool()};
	jule::Slice<jule::Ref<_1126288e0_Case>> _field_cases{jule::Slice<jule::Ref<_1126288e0_Case>>()};
	jule::Ref<_1126288e0_Case> _field_default{jule::Ref<_1126288e0_Case>()};


	_1126288e0_Match(jule::Ref<_121dedce0_Data> __param_expr, jule::Bool __param_type_match, jule::Slice<jule::Ref<_1126288e0_Case>> __param_cases, jule::Ref<_1126288e0_Case> __param_default) {
		this->self = jule::Ref<_1126288e0_Match>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_type_match = __param_type_match;
		this->_field_cases = __param_cases;
		this->_field_default = __param_default;
	}

	~_1126288e0_Match(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_Match(void) { this->self = jule::Ref<_1126288e0_Match>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_Match &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1126288e0_Match &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_Case {
	jule::Ref<_1126288e0_Case> self{};

	jule::Ref<_1126288e0_Match> _field_owner{jule::Ref<_1126288e0_Match>()};
	jule::Ref<_1126288e0_Scope> _field_scope{jule::Ref<_1126288e0_Scope>()};
	jule::Slice<jule::Any> _field_exprs{jule::Slice<jule::Any>()};
	jule::Ref<_1126288e0_Case> _field_next{jule::Ref<_1126288e0_Case>()};


	_1126288e0_Case(jule::Ref<_1126288e0_Match> __param_owner, jule::Ref<_1126288e0_Scope> __param_scope, jule::Slice<jule::Any> __param_exprs, jule::Ref<_1126288e0_Case> __param_next) {
		this->self = jule::Ref<_1126288e0_Case>::make(this, nullptr);

		this->_field_owner = __param_owner;
		this->_field_scope = __param_scope;
		this->_field_exprs = __param_exprs;
		this->_field_next = __param_next;
	}

	~_1126288e0_Case(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_Case(void) { this->self = jule::Ref<_1126288e0_Case>::make(this, nullptr); }

	inline jule::Bool _method_is_default(void);


	inline bool operator==(const _1126288e0_Case &_Src) {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_next == _Src._field_next;
	}

	inline bool operator!=(const _1126288e0_Case &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_FallSt {
	jule::Ref<_1126288e0_FallSt> self{};

	jule::Uintptr _field_dest_case{jule::Uintptr()};


	_1126288e0_FallSt(jule::Uintptr __param_dest_case) {
		this->self = jule::Ref<_1126288e0_FallSt>::make(this, nullptr);

		this->_field_dest_case = __param_dest_case;
	}

	~_1126288e0_FallSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_FallSt(void) { this->self = jule::Ref<_1126288e0_FallSt>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_FallSt &_Src) {
		return 
			this->_field_dest_case == _Src._field_dest_case;
	}

	inline bool operator!=(const _1126288e0_FallSt &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_RetSt {
	jule::Ref<_1126288e0_RetSt> self{};

	jule::Slice<jule::Ref<_1320e22c0_Var>> _field_vars{jule::Slice<jule::Ref<_1320e22c0_Var>>()};
	jule::Any _field_expr{jule::Any()};


	_1126288e0_RetSt(jule::Slice<jule::Ref<_1320e22c0_Var>> __param_vars, jule::Any __param_expr) {
		this->self = jule::Ref<_1126288e0_RetSt>::make(this, nullptr);

		this->_field_vars = __param_vars;
		this->_field_expr = __param_expr;
	}

	~_1126288e0_RetSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_RetSt(void) { this->self = jule::Ref<_1126288e0_RetSt>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_RetSt &_Src) {
		return 
			this->_field_vars == _Src._field_vars &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1126288e0_RetSt &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_Recover {
	jule::Ref<_1126288e0_Recover> self{};

	jule::Ref<_112446fb0_FnIns> _field_handler{jule::Ref<_112446fb0_FnIns>()};
	jule::Any _field_handler_expr{jule::Any()};
	jule::Ref<_1126288e0_Scope> _field_scope{jule::Ref<_1126288e0_Scope>()};
	jule::Ref<_112446fb0_FnIns> _field_scope_owner{jule::Ref<_112446fb0_FnIns>()};


	_1126288e0_Recover(jule::Ref<_112446fb0_FnIns> __param_handler, jule::Any __param_handler_expr, jule::Ref<_1126288e0_Scope> __param_scope, jule::Ref<_112446fb0_FnIns> __param_scope_owner) {
		this->self = jule::Ref<_1126288e0_Recover>::make(this, nullptr);

		this->_field_handler = __param_handler;
		this->_field_handler_expr = __param_handler_expr;
		this->_field_scope = __param_scope;
		this->_field_scope_owner = __param_scope_owner;
	}

	~_1126288e0_Recover(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_Recover(void) { this->self = jule::Ref<_1126288e0_Recover>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_Recover &_Src) {
		return 
			this->_field_handler == _Src._field_handler &&
			this->_field_handler_expr == _Src._field_handler_expr &&
			this->_field_scope == _Src._field_scope &&
			this->_field_scope_owner == _Src._field_scope_owner;
	}

	inline bool operator!=(const _1126288e0_Recover &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_ScopeGoto {
	jule::Ref<_1126288e0_ScopeGoto> self{};

	jule::Ref<_111612b20_GotoSt> _field_gt{jule::Ref<_111612b20_GotoSt>()};
	jule::Ref<_1126288e0_ScopeChecker> _field_scope{jule::Ref<_1126288e0_ScopeChecker>()};
	jule::Int _field_pos{jule::Int()};


	_1126288e0_ScopeGoto(jule::Ref<_111612b20_GotoSt> __param_gt, jule::Ref<_1126288e0_ScopeChecker> __param_scope, jule::Int __param_pos) {
		this->self = jule::Ref<_1126288e0_ScopeGoto>::make(this, nullptr);

		this->_field_gt = __param_gt;
		this->_field_scope = __param_scope;
		this->_field_pos = __param_pos;
	}

	~_1126288e0_ScopeGoto(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_ScopeGoto(void) { this->self = jule::Ref<_1126288e0_ScopeGoto>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_ScopeGoto &_Src) {
		return 
			this->_field_gt == _Src._field_gt &&
			this->_field_scope == _Src._field_scope &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _1126288e0_ScopeGoto &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_ScopeChecker: public _112f89930_Lookup {
	jule::Ref<_1126288e0_ScopeChecker> self{};

	jule::Ref<_11262c360_Sema> _field_s{jule::Ref<_11262c360_Sema>()};
	jule::Ref<_112446fb0_FnIns> _field_owner{jule::Ref<_112446fb0_FnIns>()};
	jule::Ref<_1126288e0_ScopeChecker> _field_parent{jule::Ref<_1126288e0_ScopeChecker>()};
	jule::Int _field_child_index{jule::Int()};
	jule::Ref<_1320e2330_SymbolTable> _field_table{jule::Ref<_1320e2330_SymbolTable>()};
	jule::Ref<_1126288e0_Scope> _field_scope{jule::Ref<_1126288e0_Scope>()};
	jule::Ref<_111612b20_ScopeTree> _field_tree{jule::Ref<_111612b20_ScopeTree>()};
	jule::Uintptr _field_it{jule::Uintptr()};
	jule::Uintptr _field_cse{jule::Uintptr()};
	jule::Ref<jule::Slice<jule::Ref<_1126288e0_ScopeLabel>>> _field_labels{jule::Ref<jule::Slice<jule::Ref<_1126288e0_ScopeLabel>>>()};
	jule::Ref<jule::Slice<jule::Ref<_1126288e0_ScopeGoto>>> _field_gotos{jule::Ref<jule::Slice<jule::Ref<_1126288e0_ScopeGoto>>>()};
	jule::Int _field_i{jule::Int()};


	_1126288e0_ScopeChecker(jule::Ref<_11262c360_Sema> __param_s, jule::Ref<_112446fb0_FnIns> __param_owner, jule::Ref<_1126288e0_ScopeChecker> __param_parent, jule::Int __param_child_index, jule::Ref<_1320e2330_SymbolTable> __param_table, jule::Ref<_1126288e0_Scope> __param_scope, jule::Ref<_111612b20_ScopeTree> __param_tree, jule::Uintptr __param_it, jule::Uintptr __param_cse, jule::Ref<jule::Slice<jule::Ref<_1126288e0_ScopeLabel>>> __param_labels, jule::Ref<jule::Slice<jule::Ref<_1126288e0_ScopeGoto>>> __param_gotos, jule::Int __param_i) {
		this->self = jule::Ref<_1126288e0_ScopeChecker>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_owner = __param_owner;
		this->_field_parent = __param_parent;
		this->_field_child_index = __param_child_index;
		this->_field_table = __param_table;
		this->_field_scope = __param_scope;
		this->_field_tree = __param_tree;
		this->_field_it = __param_it;
		this->_field_cse = __param_cse;
		this->_field_labels = __param_labels;
		this->_field_gotos = __param_gotos;
		this->_field_i = __param_i;
	}

	~_1126288e0_ScopeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_ScopeChecker(void) { this->self = jule::Ref<_1126288e0_ScopeChecker>::make(this, nullptr); }

	inline jule::Ref<_11265fb90_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_11265fb90_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)>);


	inline jule::Ref<_1320e22c0_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_1217f7750_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_11209db80_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_112446fb0_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_11209e2e0_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_11261eaf0_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_root(void);


	inline jule::Ref<_1126288e0_ScopeChecker> _method_get_root(void);


	inline jule::Ref<_1126288e0_Label> _method_find_label(jule::Str);


	inline jule::Ref<_1126288e0_ScopeLabel> _method_find_label_scope(jule::Str);


	inline jule::Ref<_1126288e0_ScopeLabel> _method_find_label_all(jule::Str);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str);


	inline void _method_check_var_decl(jule::Ref<_111612b20_VarDecl>);


	inline void _method_check_type_alias_decl(jule::Ref<_111612b20_TypeAliasDecl>);


	inline jule::Ref<_1126288e0_Scope> _method_get_child(void);


	inline void _method_check_child_ssc(jule::Ref<_111612b20_ScopeTree>,jule::Ref<_1126288e0_Scope>,jule::Ref<_1126288e0_ScopeChecker>);


	inline jule::Ref<_1126288e0_Scope> _method_check_child_sc(jule::Ref<_111612b20_ScopeTree>,jule::Ref<_1126288e0_ScopeChecker>);


	inline jule::Ref<_1126288e0_Scope> _method_check_child(jule::Ref<_111612b20_ScopeTree>);


	inline void _method_check_anon_scope(jule::Ref<_111612b20_ScopeTree>);


	inline jule::Bool _method_try_call_recover(jule::Ref<_121dedce0_Data>);


	inline void _method_check_expr(jule::Ref<_111612b20_Expr>);


	inline jule::Ref<_1126288e0_If> _method_check_if(jule::Ref<_111612b20_If>);


	inline jule::Ref<_1126288e0_Else> _method_check_else(jule::Ref<_111612b20_Else>);


	inline void _method_check_conditional(jule::Ref<_111612b20_Conditional>);


	inline jule::Ref<_1126288e0_Scope> _method_check_iter_scope_sc(jule::Uintptr,jule::Ref<_111612b20_ScopeTree>,jule::Ref<_1126288e0_ScopeChecker>);


	inline jule::Ref<_1126288e0_Scope> _method_check_iter_scope(jule::Uintptr,jule::Ref<_111612b20_ScopeTree>);


	inline void _method_check_inf_iter(jule::Ref<_111612b20_Iter>);


	inline void _method_check_while_iter(jule::Ref<_111612b20_Iter>);


	inline void _method_check_range_iter(jule::Ref<_111612b20_Iter>);


	inline void _method_check_iter(jule::Ref<_111612b20_Iter>);


	inline jule::Bool _method_check_valid_cont_label(jule::Uintptr);


	inline jule::Bool _method_check_valid_break_label(jule::Uintptr);


	inline jule::Ref<_1126288e0_ContSt> _method_check_cont_valid_scope(jule::Ref<_111612b20_ContSt>);


	inline void _method_check_cont(jule::Ref<_111612b20_ContSt>);


	inline void _method_check_label(jule::Ref<_111612b20_LabelSt>);


	inline void _method_push_goto(jule::Ref<_111612b20_GotoSt>);


	inline void _method_check_postfix(jule::Ref<_111612b20_AssignSt>);


	inline jule::Bool _method_is_new_assign_ident(jule::Str);


	inline void _method_check_single_assign(jule::Ref<_111612b20_AssignSt>);


	inline void _method___process_end_part_of_multi_assign(jule::Ref<_1126288e0_MultiAssign>,jule::Ref<_111612b20_AssignSt>,jule::Ref<_111612b20_AssignLeft>,jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>);


	inline void _method_check_ret_multi_assign(jule::Ref<_111612b20_AssignSt>);


	inline void _method_check_multi_assign(jule::Ref<_111612b20_AssignSt>);


	inline void _method_check_assign_st(jule::Ref<_111612b20_AssignSt>);


	inline jule::Ref<_1126288e0_Scope> _method_check_case_scope(jule::Ref<_1126288e0_Case>,jule::Ref<_111612b20_ScopeTree>);


	inline jule::Ref<_1126288e0_Case> _method_check_case(jule::Ref<_1126288e0_Match>,jule::Int,jule::Ref<_111612b20_Case>,jule::Ref<_121dedce0_Data>);


	inline void _method_check_cases(jule::Ref<_111612b20_MatchCase>,jule::Ref<_1126288e0_Match>,jule::Ref<_121dedce0_Data>);


	inline jule::Ref<_1126288e0_Case> _method_check_default(jule::Ref<_1126288e0_Match>,jule::Ref<_111612b20_Else>);


	inline void _method_check_type_match(jule::Ref<_111612b20_MatchCase>);


	inline void _method_check_common_match(jule::Ref<_111612b20_MatchCase>);


	inline void _method_check_match(jule::Ref<_111612b20_MatchCase>);


	inline void _method_check_fall(jule::Ref<_111612b20_FallSt>);


	inline jule::Ref<_1126288e0_BreakSt> _method_check_break_with_label(jule::Ref<_111612b20_BreakSt>);


	inline jule::Ref<_1126288e0_BreakSt> _method_check_plain_break(jule::Ref<_111612b20_BreakSt>);


	inline void _method_check_break(jule::Ref<_111612b20_BreakSt>);


	inline void _method_check_ret(jule::Ref<_111612b20_RetSt>);


	inline void _method_check_node(jule::Any);


	inline void _method_check_tree(void);


	inline void _method_check_same_scope_goto(jule::Ref<_1126288e0_ScopeGoto>,jule::Ref<_1126288e0_ScopeLabel>);


	inline jule::Bool _method_check_label_parents(jule::Ref<_1126288e0_ScopeGoto>,jule::Ref<_1126288e0_ScopeLabel>);


	inline void _method_check_goto_scope(jule::Ref<_1126288e0_ScopeGoto>,jule::Ref<_1126288e0_ScopeLabel>);


	inline void _method_check_diff_scope_goto(jule::Ref<_1126288e0_ScopeGoto>,jule::Ref<_1126288e0_ScopeLabel>);


	inline void _method_check_goto(jule::Ref<_1126288e0_ScopeGoto>,jule::Ref<_1126288e0_ScopeLabel>);


	inline void _method_check_gotos(void);


	inline void _method_check_labels(void);


	inline void _method_check_vars(void);


	inline void _method_check_aliases(void);


	inline void _method_check(jule::Ref<_111612b20_ScopeTree>,jule::Ref<_1126288e0_Scope>);


	inline jule::Ref<_1126288e0_ScopeChecker> _method_new_child_checker(void);


	inline bool operator==(const _1126288e0_ScopeChecker &_Src) {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_owner == _Src._field_owner &&
			this->_field_parent == _Src._field_parent &&
			this->_field_child_index == _Src._field_child_index &&
			this->_field_table == _Src._field_table &&
			this->_field_scope == _Src._field_scope &&
			this->_field_tree == _Src._field_tree &&
			this->_field_it == _Src._field_it &&
			this->_field_cse == _Src._field_cse &&
			this->_field_labels == _Src._field_labels &&
			this->_field_gotos == _Src._field_gotos &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _1126288e0_ScopeChecker &_Src) { return !this->operator==(_Src); }
};


struct _112673500_BinopExprModel {
	jule::Ref<_112673500_BinopExprModel> self{};

	jule::Any _field_left{jule::Any()};
	jule::Any _field_right{jule::Any()};
	jule::Str _field_op{jule::Str()};


	_112673500_BinopExprModel(jule::Any __param_left, jule::Any __param_right, jule::Str __param_op) {
		this->self = jule::Ref<_112673500_BinopExprModel>::make(this, nullptr);

		this->_field_left = __param_left;
		this->_field_right = __param_right;
		this->_field_op = __param_op;
	}

	~_112673500_BinopExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_BinopExprModel(void) { this->self = jule::Ref<_112673500_BinopExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_BinopExprModel &_Src) {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _112673500_BinopExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_UnaryExprModel {
	jule::Ref<_112673500_UnaryExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Str _field_op{jule::Str()};


	_112673500_UnaryExprModel(jule::Any __param_expr, jule::Str __param_op) {
		this->self = jule::Ref<_112673500_UnaryExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_op = __param_op;
	}

	~_112673500_UnaryExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_UnaryExprModel(void) { this->self = jule::Ref<_112673500_UnaryExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_UnaryExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _112673500_UnaryExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_GetRefPtrExprModel {
	jule::Ref<_112673500_GetRefPtrExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_112673500_GetRefPtrExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_112673500_GetRefPtrExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_112673500_GetRefPtrExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_GetRefPtrExprModel(void) { this->self = jule::Ref<_112673500_GetRefPtrExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_GetRefPtrExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _112673500_GetRefPtrExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_StructArgExprModel {
	jule::Ref<_112673500_StructArgExprModel> self{};

	jule::Ref<_11209db80_FieldIns> _field_field{jule::Ref<_11209db80_FieldIns>()};
	jule::Any _field_expr{jule::Any()};


	_112673500_StructArgExprModel(jule::Ref<_11209db80_FieldIns> __param_field, jule::Any __param_expr) {
		this->self = jule::Ref<_112673500_StructArgExprModel>::make(this, nullptr);

		this->_field_field = __param_field;
		this->_field_expr = __param_expr;
	}

	~_112673500_StructArgExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_StructArgExprModel(void) { this->self = jule::Ref<_112673500_StructArgExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_StructArgExprModel &_Src) {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _112673500_StructArgExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_StructLitExprModel {
	jule::Ref<_112673500_StructLitExprModel> self{};

	jule::Ref<_11209db80_StructIns> _field_strct{jule::Ref<_11209db80_StructIns>()};
	jule::Slice<jule::Ref<_112673500_StructArgExprModel>> _field_args{jule::Slice<jule::Ref<_112673500_StructArgExprModel>>()};


	_112673500_StructLitExprModel(jule::Ref<_11209db80_StructIns> __param_strct, jule::Slice<jule::Ref<_112673500_StructArgExprModel>> __param_args) {
		this->self = jule::Ref<_112673500_StructLitExprModel>::make(this, nullptr);

		this->_field_strct = __param_strct;
		this->_field_args = __param_args;
	}

	~_112673500_StructLitExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_StructLitExprModel(void) { this->self = jule::Ref<_112673500_StructLitExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_StructLitExprModel &_Src) {
		return 
			this->_field_strct == _Src._field_strct &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _112673500_StructLitExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_AllocStructLitExprModel {
	jule::Ref<_112673500_AllocStructLitExprModel> self{};

	jule::Ref<_112673500_StructLitExprModel> _field_lit{jule::Ref<_112673500_StructLitExprModel>()};


	_112673500_AllocStructLitExprModel(jule::Ref<_112673500_StructLitExprModel> __param_lit) {
		this->self = jule::Ref<_112673500_AllocStructLitExprModel>::make(this, nullptr);

		this->_field_lit = __param_lit;
	}

	~_112673500_AllocStructLitExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_AllocStructLitExprModel(void) { this->self = jule::Ref<_112673500_AllocStructLitExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_AllocStructLitExprModel &_Src) {
		return 
			this->_field_lit == _Src._field_lit;
	}

	inline bool operator!=(const _112673500_AllocStructLitExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_CastingExprModel {
	jule::Ref<_112673500_CastingExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Ref<_1217f7750_TypeKind> _field_kind{jule::Ref<_1217f7750_TypeKind>()};
	jule::Ref<_1217f7750_TypeKind> _field_expr_kind{jule::Ref<_1217f7750_TypeKind>()};


	_112673500_CastingExprModel(jule::Any __param_expr, jule::Ref<_1217f7750_TypeKind> __param_kind, jule::Ref<_1217f7750_TypeKind> __param_expr_kind) {
		this->self = jule::Ref<_112673500_CastingExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_kind = __param_kind;
		this->_field_expr_kind = __param_expr_kind;
	}

	~_112673500_CastingExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_CastingExprModel(void) { this->self = jule::Ref<_112673500_CastingExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_CastingExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr_kind == _Src._field_expr_kind;
	}

	inline bool operator!=(const _112673500_CastingExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_FnCallExprModel {
	jule::Ref<_112673500_FnCallExprModel> self{};

	jule::Ref<_112446fb0_FnIns> _field_func{jule::Ref<_112446fb0_FnIns>()};
	jule::Bool _field_is_co{jule::Bool()};
	jule::Any _field_expr{jule::Any()};
	jule::Slice<jule::Any> _field_args{jule::Slice<jule::Any>()};


	_112673500_FnCallExprModel(jule::Ref<_112446fb0_FnIns> __param_func, jule::Bool __param_is_co, jule::Any __param_expr, jule::Slice<jule::Any> __param_args) {
		this->self = jule::Ref<_112673500_FnCallExprModel>::make(this, nullptr);

		this->_field_func = __param_func;
		this->_field_is_co = __param_is_co;
		this->_field_expr = __param_expr;
		this->_field_args = __param_args;
	}

	~_112673500_FnCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_FnCallExprModel(void) { this->self = jule::Ref<_112673500_FnCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_FnCallExprModel &_Src) {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_is_co == _Src._field_is_co &&
			this->_field_expr == _Src._field_expr &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _112673500_FnCallExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_SliceExprModel {
	jule::Ref<_112673500_SliceExprModel> self{};

	jule::Ref<_1217f7750_TypeKind> _field_elem_kind{jule::Ref<_1217f7750_TypeKind>()};
	jule::Slice<jule::Any> _field_elems{jule::Slice<jule::Any>()};


	_112673500_SliceExprModel(jule::Ref<_1217f7750_TypeKind> __param_elem_kind, jule::Slice<jule::Any> __param_elems) {
		this->self = jule::Ref<_112673500_SliceExprModel>::make(this, nullptr);

		this->_field_elem_kind = __param_elem_kind;
		this->_field_elems = __param_elems;
	}

	~_112673500_SliceExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_SliceExprModel(void) { this->self = jule::Ref<_112673500_SliceExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_SliceExprModel &_Src) {
		return 
			this->_field_elem_kind == _Src._field_elem_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _112673500_SliceExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_IndexigExprModel {
	jule::Ref<_112673500_IndexigExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Any _field_index{jule::Any()};


	_112673500_IndexigExprModel(jule::Any __param_expr, jule::Any __param_index) {
		this->self = jule::Ref<_112673500_IndexigExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_index = __param_index;
	}

	~_112673500_IndexigExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_IndexigExprModel(void) { this->self = jule::Ref<_112673500_IndexigExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_IndexigExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _112673500_IndexigExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_AnonFnExprModel {
	jule::Ref<_112673500_AnonFnExprModel> self{};

	jule::Ref<_112446fb0_FnIns> _field_func{jule::Ref<_112446fb0_FnIns>()};
	jule::Bool _field_global{jule::Bool()};


	_112673500_AnonFnExprModel(jule::Ref<_112446fb0_FnIns> __param_func, jule::Bool __param_global) {
		this->self = jule::Ref<_112673500_AnonFnExprModel>::make(this, nullptr);

		this->_field_func = __param_func;
		this->_field_global = __param_global;
	}

	~_112673500_AnonFnExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_AnonFnExprModel(void) { this->self = jule::Ref<_112673500_AnonFnExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_AnonFnExprModel &_Src) {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_global == _Src._field_global;
	}

	inline bool operator!=(const _112673500_AnonFnExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_KeyValPairExprModel {
	jule::Ref<_112673500_KeyValPairExprModel> self{};

	jule::Any _field_key{jule::Any()};
	jule::Any _field_val{jule::Any()};


	_112673500_KeyValPairExprModel(jule::Any __param_key, jule::Any __param_val) {
		this->self = jule::Ref<_112673500_KeyValPairExprModel>::make(this, nullptr);

		this->_field_key = __param_key;
		this->_field_val = __param_val;
	}

	~_112673500_KeyValPairExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_KeyValPairExprModel(void) { this->self = jule::Ref<_112673500_KeyValPairExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_KeyValPairExprModel &_Src) {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _112673500_KeyValPairExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_MapExprModel {
	jule::Ref<_112673500_MapExprModel> self{};

	jule::Ref<_1217f7750_TypeKind> _field_key_kind{jule::Ref<_1217f7750_TypeKind>()};
	jule::Ref<_1217f7750_TypeKind> _field_val_kind{jule::Ref<_1217f7750_TypeKind>()};
	jule::Slice<jule::Ref<_112673500_KeyValPairExprModel>> _field_entries{jule::Slice<jule::Ref<_112673500_KeyValPairExprModel>>()};


	_112673500_MapExprModel(jule::Ref<_1217f7750_TypeKind> __param_key_kind, jule::Ref<_1217f7750_TypeKind> __param_val_kind, jule::Slice<jule::Ref<_112673500_KeyValPairExprModel>> __param_entries) {
		this->self = jule::Ref<_112673500_MapExprModel>::make(this, nullptr);

		this->_field_key_kind = __param_key_kind;
		this->_field_val_kind = __param_val_kind;
		this->_field_entries = __param_entries;
	}

	~_112673500_MapExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_MapExprModel(void) { this->self = jule::Ref<_112673500_MapExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_MapExprModel &_Src) {
		return 
			this->_field_key_kind == _Src._field_key_kind &&
			this->_field_val_kind == _Src._field_val_kind &&
			this->_field_entries == _Src._field_entries;
	}

	inline bool operator!=(const _112673500_MapExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_SlicingExprModel {
	jule::Ref<_112673500_SlicingExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Any _field_left{jule::Any()};
	jule::Any _field_right{jule::Any()};


	_112673500_SlicingExprModel(jule::Any __param_expr, jule::Any __param_left, jule::Any __param_right) {
		this->self = jule::Ref<_112673500_SlicingExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_left = __param_left;
		this->_field_right = __param_right;
	}

	~_112673500_SlicingExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_SlicingExprModel(void) { this->self = jule::Ref<_112673500_SlicingExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_SlicingExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _112673500_SlicingExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_TraitSubIdentExprModel {
	jule::Ref<_112673500_TraitSubIdentExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Str _field_ident{jule::Str()};


	_112673500_TraitSubIdentExprModel(jule::Any __param_expr, jule::Str __param_ident) {
		this->self = jule::Ref<_112673500_TraitSubIdentExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_ident = __param_ident;
	}

	~_112673500_TraitSubIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_TraitSubIdentExprModel(void) { this->self = jule::Ref<_112673500_TraitSubIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_TraitSubIdentExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _112673500_TraitSubIdentExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_StructSubIdentExprModel {
	jule::Ref<_112673500_StructSubIdentExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Ref<_1217f7750_TypeKind> _field_expr_kind{jule::Ref<_1217f7750_TypeKind>()};
	jule::Ref<_112446fb0_FnIns> _field_method{jule::Ref<_112446fb0_FnIns>()};
	jule::Ref<_11209db80_FieldIns> _field_field{jule::Ref<_11209db80_FieldIns>()};


	_112673500_StructSubIdentExprModel(jule::Any __param_expr, jule::Ref<_1217f7750_TypeKind> __param_expr_kind, jule::Ref<_112446fb0_FnIns> __param_method, jule::Ref<_11209db80_FieldIns> __param_field) {
		this->self = jule::Ref<_112673500_StructSubIdentExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_expr_kind = __param_expr_kind;
		this->_field_method = __param_method;
		this->_field_field = __param_field;
	}

	~_112673500_StructSubIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_StructSubIdentExprModel(void) { this->self = jule::Ref<_112673500_StructSubIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_StructSubIdentExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_method == _Src._field_method &&
			this->_field_field == _Src._field_field;
	}

	inline bool operator!=(const _112673500_StructSubIdentExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_StructStaticIdentExprModel {
	jule::Ref<_112673500_StructStaticIdentExprModel> self{};

	jule::Ref<_11209db80_StructIns> _field_structure{jule::Ref<_11209db80_StructIns>()};
	jule::Any _field_expr{jule::Any()};
	jule::Ref<_112446fb0_FnIns> _field_method{jule::Ref<_112446fb0_FnIns>()};


	_112673500_StructStaticIdentExprModel(jule::Ref<_11209db80_StructIns> __param_structure, jule::Any __param_expr, jule::Ref<_112446fb0_FnIns> __param_method) {
		this->self = jule::Ref<_112673500_StructStaticIdentExprModel>::make(this, nullptr);

		this->_field_structure = __param_structure;
		this->_field_expr = __param_expr;
		this->_field_method = __param_method;
	}

	~_112673500_StructStaticIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_StructStaticIdentExprModel(void) { this->self = jule::Ref<_112673500_StructStaticIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_StructStaticIdentExprModel &_Src) {
		return 
			this->_field_structure == _Src._field_structure &&
			this->_field_expr == _Src._field_expr &&
			this->_field_method == _Src._field_method;
	}

	inline bool operator!=(const _112673500_StructStaticIdentExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_ArrayExprModel {
	jule::Ref<_112673500_ArrayExprModel> self{};

	jule::Ref<_1217f7750_Arr> _field_kind{jule::Ref<_1217f7750_Arr>()};
	jule::Slice<jule::Any> _field_elems{jule::Slice<jule::Any>()};


	_112673500_ArrayExprModel(jule::Ref<_1217f7750_Arr> __param_kind, jule::Slice<jule::Any> __param_elems) {
		this->self = jule::Ref<_112673500_ArrayExprModel>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_elems = __param_elems;
	}

	~_112673500_ArrayExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_ArrayExprModel(void) { this->self = jule::Ref<_112673500_ArrayExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_ArrayExprModel &_Src) {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _112673500_ArrayExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_CommonIdentExprModel {
	jule::Ref<_112673500_CommonIdentExprModel> self{};

	jule::Str _field_ident{jule::Str()};


	_112673500_CommonIdentExprModel(jule::Str __param_ident) {
		this->self = jule::Ref<_112673500_CommonIdentExprModel>::make(this, nullptr);

		this->_field_ident = __param_ident;
	}

	~_112673500_CommonIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_CommonIdentExprModel(void) { this->self = jule::Ref<_112673500_CommonIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_CommonIdentExprModel &_Src) {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _112673500_CommonIdentExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_CommonSubIdentExprModel {
	jule::Ref<_112673500_CommonSubIdentExprModel> self{};

	jule::Ref<_1217f7750_TypeKind> _field_expr_kind{jule::Ref<_1217f7750_TypeKind>()};
	jule::Any _field_expr{jule::Any()};
	jule::Str _field_ident{jule::Str()};


	_112673500_CommonSubIdentExprModel(jule::Ref<_1217f7750_TypeKind> __param_expr_kind, jule::Any __param_expr, jule::Str __param_ident) {
		this->self = jule::Ref<_112673500_CommonSubIdentExprModel>::make(this, nullptr);

		this->_field_expr_kind = __param_expr_kind;
		this->_field_expr = __param_expr;
		this->_field_ident = __param_ident;
	}

	~_112673500_CommonSubIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_CommonSubIdentExprModel(void) { this->self = jule::Ref<_112673500_CommonSubIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_CommonSubIdentExprModel &_Src) {
		return 
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _112673500_CommonSubIdentExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_TupleExprModel {
	jule::Ref<_112673500_TupleExprModel> self{};

	jule::Slice<jule::Ref<_121dedce0_Data>> _field_datas{jule::Slice<jule::Ref<_121dedce0_Data>>()};


	_112673500_TupleExprModel(jule::Slice<jule::Ref<_121dedce0_Data>> __param_datas) {
		this->self = jule::Ref<_112673500_TupleExprModel>::make(this, nullptr);

		this->_field_datas = __param_datas;
	}

	~_112673500_TupleExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_TupleExprModel(void) { this->self = jule::Ref<_112673500_TupleExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_TupleExprModel &_Src) {
		return 
			this->_field_datas == _Src._field_datas;
	}

	inline bool operator!=(const _112673500_TupleExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_BuiltinOutCallExprModel {
	jule::Ref<_112673500_BuiltinOutCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_112673500_BuiltinOutCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_112673500_BuiltinOutCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_112673500_BuiltinOutCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_BuiltinOutCallExprModel(void) { this->self = jule::Ref<_112673500_BuiltinOutCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_BuiltinOutCallExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _112673500_BuiltinOutCallExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_BuiltinOutlnCallExprModel {
	jule::Ref<_112673500_BuiltinOutlnCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_112673500_BuiltinOutlnCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_112673500_BuiltinOutlnCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_112673500_BuiltinOutlnCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_BuiltinOutlnCallExprModel(void) { this->self = jule::Ref<_112673500_BuiltinOutlnCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_BuiltinOutlnCallExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _112673500_BuiltinOutlnCallExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_BuiltinCloneCallExprModel {
	jule::Ref<_112673500_BuiltinCloneCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_112673500_BuiltinCloneCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_112673500_BuiltinCloneCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_112673500_BuiltinCloneCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_BuiltinCloneCallExprModel(void) { this->self = jule::Ref<_112673500_BuiltinCloneCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_BuiltinCloneCallExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _112673500_BuiltinCloneCallExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_BuiltinNewCallExprModel {
	jule::Ref<_112673500_BuiltinNewCallExprModel> self{};

	jule::Ref<_1217f7750_TypeKind> _field_kind{jule::Ref<_1217f7750_TypeKind>()};
	jule::Any _field_init{jule::Any()};


	_112673500_BuiltinNewCallExprModel(jule::Ref<_1217f7750_TypeKind> __param_kind, jule::Any __param_init) {
		this->self = jule::Ref<_112673500_BuiltinNewCallExprModel>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_init = __param_init;
	}

	~_112673500_BuiltinNewCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_BuiltinNewCallExprModel(void) { this->self = jule::Ref<_112673500_BuiltinNewCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_BuiltinNewCallExprModel &_Src) {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_init == _Src._field_init;
	}

	inline bool operator!=(const _112673500_BuiltinNewCallExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_BuiltinRealCallExprModel {
	jule::Ref<_112673500_BuiltinRealCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_112673500_BuiltinRealCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_112673500_BuiltinRealCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_112673500_BuiltinRealCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_BuiltinRealCallExprModel(void) { this->self = jule::Ref<_112673500_BuiltinRealCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_BuiltinRealCallExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _112673500_BuiltinRealCallExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_BuiltinDropCallExprModel {
	jule::Ref<_112673500_BuiltinDropCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_112673500_BuiltinDropCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_112673500_BuiltinDropCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_112673500_BuiltinDropCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_BuiltinDropCallExprModel(void) { this->self = jule::Ref<_112673500_BuiltinDropCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_BuiltinDropCallExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _112673500_BuiltinDropCallExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_BuiltinPanicCallExprModel {
	jule::Ref<_112673500_BuiltinPanicCallExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_112673500_BuiltinPanicCallExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_112673500_BuiltinPanicCallExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_112673500_BuiltinPanicCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_BuiltinPanicCallExprModel(void) { this->self = jule::Ref<_112673500_BuiltinPanicCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_BuiltinPanicCallExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _112673500_BuiltinPanicCallExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_BuiltinMakeCallExprModel {
	jule::Ref<_112673500_BuiltinMakeCallExprModel> self{};

	jule::Ref<_1217f7750_TypeKind> _field_kind{jule::Ref<_1217f7750_TypeKind>()};
	jule::Any _field_len{jule::Any()};
	jule::Any _field_cap{jule::Any()};


	_112673500_BuiltinMakeCallExprModel(jule::Ref<_1217f7750_TypeKind> __param_kind, jule::Any __param_len, jule::Any __param_cap) {
		this->self = jule::Ref<_112673500_BuiltinMakeCallExprModel>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_len = __param_len;
		this->_field_cap = __param_cap;
	}

	~_112673500_BuiltinMakeCallExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_BuiltinMakeCallExprModel(void) { this->self = jule::Ref<_112673500_BuiltinMakeCallExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_BuiltinMakeCallExprModel &_Src) {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_len == _Src._field_len &&
			this->_field_cap == _Src._field_cap;
	}

	inline bool operator!=(const _112673500_BuiltinMakeCallExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_BuiltinErrorTraitSubIdentExprModel {
	jule::Ref<_112673500_BuiltinErrorTraitSubIdentExprModel> self{};

	jule::Any _field_expr{jule::Any()};
	jule::Str _field_ident{jule::Str()};


	_112673500_BuiltinErrorTraitSubIdentExprModel(jule::Any __param_expr, jule::Str __param_ident) {
		this->self = jule::Ref<_112673500_BuiltinErrorTraitSubIdentExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_ident = __param_ident;
	}

	~_112673500_BuiltinErrorTraitSubIdentExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_BuiltinErrorTraitSubIdentExprModel(void) { this->self = jule::Ref<_112673500_BuiltinErrorTraitSubIdentExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_BuiltinErrorTraitSubIdentExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _112673500_BuiltinErrorTraitSubIdentExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_SizeofExprModel {
	jule::Ref<_112673500_SizeofExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_112673500_SizeofExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_112673500_SizeofExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_112673500_SizeofExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_SizeofExprModel(void) { this->self = jule::Ref<_112673500_SizeofExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_SizeofExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _112673500_SizeofExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_AlignofExprModel {
	jule::Ref<_112673500_AlignofExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_112673500_AlignofExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_112673500_AlignofExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_112673500_AlignofExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_AlignofExprModel(void) { this->self = jule::Ref<_112673500_AlignofExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_AlignofExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _112673500_AlignofExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_RuneExprModel {
	jule::Ref<_112673500_RuneExprModel> self{};

	jule::I32 _field_code{jule::I32()};


	_112673500_RuneExprModel(jule::I32 __param_code) {
		this->self = jule::Ref<_112673500_RuneExprModel>::make(this, nullptr);

		this->_field_code = __param_code;
	}

	~_112673500_RuneExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_RuneExprModel(void) { this->self = jule::Ref<_112673500_RuneExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_RuneExprModel &_Src) {
		return 
			this->_field_code == _Src._field_code;
	}

	inline bool operator!=(const _112673500_RuneExprModel &_Src) { return !this->operator==(_Src); }
};


struct _112673500_ExplicitDerefExprModel {
	jule::Ref<_112673500_ExplicitDerefExprModel> self{};

	jule::Any _field_expr{jule::Any()};


	_112673500_ExplicitDerefExprModel(jule::Any __param_expr) {
		this->self = jule::Ref<_112673500_ExplicitDerefExprModel>::make(this, nullptr);

		this->_field_expr = __param_expr;
	}

	~_112673500_ExplicitDerefExprModel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112673500_ExplicitDerefExprModel(void) { this->self = jule::Ref<_112673500_ExplicitDerefExprModel>::make(this, nullptr); }

	inline bool operator==(const _112673500_ExplicitDerefExprModel &_Src) {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _112673500_ExplicitDerefExprModel &_Src) { return !this->operator==(_Src); }
};


struct _11265fb90_Package: public _112f89930_Lookup {
	jule::Ref<_11265fb90_Package> self{};

	jule::Slice<jule::Ref<_1320e2330_SymbolTable>> _field_files{jule::Slice<jule::Ref<_1320e2330_SymbolTable>>()};


	_11265fb90_Package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>> __param_files) {
		this->self = jule::Ref<_11265fb90_Package>::make(this, nullptr);

		this->_field_files = __param_files;
	}

	~_11265fb90_Package(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11265fb90_Package(void) { this->self = jule::Ref<_11265fb90_Package>::make(this, nullptr); }

	inline jule::Ref<_11265fb90_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_11265fb90_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)>);


	inline jule::Ref<_1320e22c0_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_1217f7750_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_11209db80_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_112446fb0_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_11209e2e0_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_11261eaf0_Enum> _method_find_enum(jule::Str);


	inline bool operator==(const _11265fb90_Package &_Src) {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _11265fb90_Package &_Src) { return !this->operator==(_Src); }
};


struct _11262c360_Sema: public _112f89930_Lookup {
	jule::Ref<_11262c360_Sema> self{};

	jule::Slice<_1316b4080_Log> _field_errors{jule::Slice<_1316b4080_Log>()};
	jule::Slice<jule::Ref<_1320e2330_SymbolTable>> _field_files{jule::Slice<jule::Ref<_1320e2330_SymbolTable>>()};
	jule::Ref<_1320e2330_SymbolTable> _field_file{jule::Ref<_1320e2330_SymbolTable>()};


	_11262c360_Sema(jule::Slice<_1316b4080_Log> __param_errors, jule::Slice<jule::Ref<_1320e2330_SymbolTable>> __param_files, jule::Ref<_1320e2330_SymbolTable> __param_file) {
		this->self = jule::Ref<_11262c360_Sema>::make(this, nullptr);

		this->_field_errors = __param_errors;
		this->_field_files = __param_files;
		this->_field_file = __param_file;
	}

	~_11262c360_Sema(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11262c360_Sema(void) { this->self = jule::Ref<_11262c360_Sema>::make(this, nullptr); }

	inline jule::Ref<_11265fb90_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_11265fb90_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)>);


	inline jule::Ref<_1320e22c0_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_1217f7750_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_11209db80_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_112446fb0_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_11209e2e0_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_11261eaf0_Enum> _method_find_enum(jule::Str);


	inline void _method_set_current_file(jule::Ref<_1320e2330_SymbolTable>);


	inline void _method_push_err(_111613f20_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_is_accessible_define(jule::Bool,_111613f20_Token);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline jule::Bool _method_check_generic_quantity(jule::Int,jule::Int,_111613f20_Token);


	inline jule::Bool _method_is_duplicated_import_selection(jule::Uintptr,jule::Str);


	inline jule::Any _method_get_import_def(jule::Str,jule::Ref<_11265fb90_ImportInfo>&);


	inline void _method_check_import_selections(jule::Ref<_11265fb90_ImportInfo>);


	inline jule::Bool _method_check_import(jule::Ref<_11265fb90_ImportInfo>);


	inline void _method_check_imports(void);


	inline void _method_impl_file_impls(void);


	inline void _method_impl_impls(void);


	inline void _method_check_enums(void);


	inline jule::Bool _method_check_type_with_refers(jule::Ref<_1217f7750_TypeSymbol>,jule::Trait<_112f89930_Lookup>,jule::Ref<_1217f7750_Referencer>);


	inline jule::Bool _method_check_type(jule::Ref<_1217f7750_TypeSymbol>,jule::Trait<_112f89930_Lookup>);


	inline jule::Ref<_1217f7750_TypeKind> _method_build_type_with_generics(jule::Ref<_111612b20_TypeDecl>,jule::Slice<jule::Ref<_1217f7750_TypeAlias>>);


	inline jule::Ref<_1217f7750_TypeKind> _method_build_type(jule::Ref<_111612b20_TypeDecl>);


	inline jule::Ref<_121dedce0_Data> _method_evalpd(jule::Ref<_111612b20_Expr>,jule::Trait<_112f89930_Lookup>,jule::Ref<_1217f7750_TypeKind>,jule::Ref<_1320e22c0_Var>);


	inline jule::Ref<_121dedce0_Data> _method_evalp(jule::Ref<_111612b20_Expr>,jule::Trait<_112f89930_Lookup>,jule::Ref<_1217f7750_TypeKind>);


	inline jule::Ref<_121dedce0_Data> _method_eval(jule::Ref<_111612b20_Expr>,jule::Trait<_112f89930_Lookup>);


	inline void _method_check_assign_type(jule::Ref<_1217f7750_TypeKind>,jule::Ref<_121dedce0_Data>,_111613f20_Token,jule::Bool);


	inline jule::Bool _method_check_type_compatibility(jule::Ref<_1217f7750_TypeKind>,jule::Ref<_1217f7750_TypeKind>,_111613f20_Token,jule::Bool);


	inline jule::Ref<_1217f7750_TypeKind> _method_build_non_generic_type_kind(jule::Ref<_111612b20_TypeDecl>,jule::Slice<jule::Ref<_111612b20_GenericDecl>>);


	inline void _method_build_fn_non_generic_type_kinds(jule::Ref<_112446fb0_FnIns>);


	inline jule::Ref<_112446fb0_FnIns> _method_get_trait_check_fn_kind(jule::Ref<_112446fb0_Fn>);


	inline jule::Bool _method_reload_fn_ins_types(jule::Ref<_112446fb0_FnIns>);


	inline void _method_check_validity_for_init_expr(jule::Bool,jule::Bool,jule::Ref<_1217f7750_TypeKind>,jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline jule::Bool _method_check_type_alias_decl_kind(jule::Ref<_1217f7750_TypeAlias>,jule::Trait<_112f89930_Lookup>);


	inline void _method_check_type_alias_decl(jule::Ref<_1217f7750_TypeAlias>,jule::Trait<_112f89930_Lookup>);


	inline void _method_check_type_alias_decl_dup(jule::Ref<_1217f7750_TypeAlias>);


	inline jule::Bool _method_check_type_alias_decls(void);


	inline void _method_check_enum_items_dup(jule::Ref<_11261eaf0_Enum>);


	inline void _method_check_enum_items_str(jule::Ref<_11261eaf0_Enum>);


	inline void _method_check_enum_items_int(jule::Ref<_11261eaf0_Enum>);


	inline void _method_check_enum_decl(jule::Ref<_11261eaf0_Enum>);


	inline jule::Bool _method_check_enum_decls(void);


	inline jule::Bool _method_check_decl_generics(jule::Slice<jule::Ref<_111612b20_GenericDecl>>);


	inline jule::Bool _method_check_fn_decl_params_dup(jule::Ref<_112446fb0_Fn>);


	inline jule::Bool _method_check_fn_decl_result_dup(jule::Ref<_112446fb0_Fn>);


	inline jule::Bool _method_check_fn_decl_types(jule::Ref<_112446fb0_Fn>);


	inline jule::Bool _method_check_fn_decl_prototype(jule::Ref<_112446fb0_Fn>);


	inline void _method_check_trait_decl_method(jule::Ref<_112446fb0_Fn>);


	inline void _method_check_trait_decl_methods(jule::Ref<_11209e2e0_Trait>);


	inline void _method_check_trait_decl(jule::Ref<_11209e2e0_Trait>);


	inline jule::Bool _method_check_trait_decls(void);


	inline jule::Bool _method_check_trait_impl_methods(jule::Ref<_11209e2e0_Trait>,jule::Ref<_112626410_Impl>);


	inline jule::Bool _method_impl_to_struct(jule::Ref<_11209db80_Struct>,jule::Ref<_112626410_Impl>);


	inline void _method_impl_trait(jule::Ref<_112626410_Impl>);


	inline void _method_impl_struct(jule::Ref<_112626410_Impl>);


	inline void _method_impl_impl(jule::Ref<_112626410_Impl>);


	inline void _method_check_var_decl(jule::Ref<_1320e22c0_Var>,jule::Trait<_112f89930_Lookup>);


	inline void _method_check_global_var_decl(jule::Ref<_1320e22c0_Var>);


	inline jule::Bool _method_check_global_decls(void);


	inline jule::Bool _method_check_struct_trait_impl(jule::Ref<_11209db80_Struct>,jule::Ref<_11209e2e0_Trait>);


	inline jule::Bool _method_check_struct_impls(jule::Ref<_11209db80_Struct>);


	inline jule::Bool _method_check_struct_fields(jule::Ref<_11209db80_Struct>);


	inline void _method_check_struct_decl(jule::Ref<_11209db80_Struct>);


	inline jule::Bool _method_check_struct_decls(void);


	inline void _method_check_fn_decl(jule::Ref<_112446fb0_Fn>);


	inline jule::Bool _method_check_fn_decls(void);


	inline jule::Bool _method_check_directive_pass(_112572770_Pass);


	inline jule::Bool _method_check_passes(void);


	inline void _method_push_cycle_error(jule::Ref<_11209db80_Struct>,jule::Ref<_11209db80_Struct>,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ref<_11209db80_Struct>,jule::Ref<_11209db80_Struct>,jule::Str&);


	inline jule::Bool _method_check_struct_derive_illegal_cycles(jule::Str,jule::Ref<_11209db80_Struct>,jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_check_struct_ins_derive_clone(jule::Ref<_11209db80_StructIns>);


	inline jule::Bool _method_check_struct_derive_clone(jule::Ref<_11209db80_Struct>);


	inline jule::Bool _method_check_file_derives(void);


	inline void _method_check_package_derives(void);


	inline void _method_check_package_decls(void);


	inline void _method_check_data_for_type_inference(jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline void _method_check_var(jule::Ref<_1320e22c0_Var>);


	inline void _method_check_type_var(jule::Ref<_1320e22c0_Var>,jule::Trait<_112f89930_Lookup>);


	inline void _method_check_global_types(void);


	inline void _method_check_type_method(jule::Ref<_11209db80_StructIns>,jule::Ref<_112446fb0_Fn>);


	inline void _method_check_type_struct(jule::Ref<_11209db80_Struct>);


	inline void _method_check_struct_types(void);


	inline void _method_check_rets(jule::Ref<_112446fb0_FnIns>);


	inline void _method_check_fn_ins_sc(jule::Ref<_112446fb0_FnIns>,jule::Ref<_1126288e0_ScopeChecker>);


	inline void _method_check_fn_ins(jule::Ref<_112446fb0_FnIns>);


	inline void _method_check_type_fn(jule::Ref<_112446fb0_Fn>);


	inline void _method_precheck_type_fn(jule::Ref<_112446fb0_Fn>);


	inline jule::Bool _method_precheck_fn_types(void);


	inline jule::Bool _method_check_fn_types(void);


	inline void _method_check_package_types(void);


	inline void _method_set_file_sema_fields(void);


	inline void _method_set_sema_fields(void);


	inline void _method_check(jule::Slice<jule::Ref<_1320e2330_SymbolTable>>);


	inline bool operator==(const _11262c360_Sema &_Src) {
		return 
			this->_field_errors == _Src._field_errors &&
			this->_field_files == _Src._field_files &&
			this->_field_file == _Src._field_file;
	}

	inline bool operator!=(const _11262c360_Sema &_Src) { return !this->operator==(_Src); }
};


struct _121807de0_DynamicTypeAnnotation {
	jule::Ref<_121807de0_DynamicTypeAnnotation> self{};

	jule::Ref<_121dedce0_Eval> _field_e{jule::Ref<_121dedce0_Eval>()};
	jule::Ref<_112446fb0_FnIns> _field_f{jule::Ref<_112446fb0_FnIns>()};
	jule::Ref<_112446fb0_ParamIns> _field_p{jule::Ref<_112446fb0_ParamIns>()};
	jule::Ref<_121dedce0_Data> _field_a{jule::Ref<_121dedce0_Data>()};
	_111613f20_Token _field_error_token{_111613f20_Token()};
	_1217f7750_TypeKind** _field_k{nullptr};


	_121807de0_DynamicTypeAnnotation(jule::Ref<_121dedce0_Eval> __param_e, jule::Ref<_112446fb0_FnIns> __param_f, jule::Ref<_112446fb0_ParamIns> __param_p, jule::Ref<_121dedce0_Data> __param_a, _111613f20_Token __param_error_token, _1217f7750_TypeKind** __param_k) {
		this->self = jule::Ref<_121807de0_DynamicTypeAnnotation>::make(this, nullptr);

		this->_field_e = __param_e;
		this->_field_f = __param_f;
		this->_field_p = __param_p;
		this->_field_a = __param_a;
		this->_field_error_token = __param_error_token;
		this->_field_k = __param_k;
	}

	~_121807de0_DynamicTypeAnnotation(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121807de0_DynamicTypeAnnotation(void) { this->self = jule::Ref<_121807de0_DynamicTypeAnnotation>::make(this, nullptr); }

	inline void _method_push_generic(jule::Ref<_1217f7750_TypeKind>,jule::Int);


	inline jule::Bool _method_annotate_prim(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_annotate_slc(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_check_map_key(_1217f7750_TypeKind**,jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_annotate_map(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_annotate_fn(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_annotate_ptr(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_annotate_any(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_annotate_kind(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_annotate(void);


	inline bool operator==(const _121807de0_DynamicTypeAnnotation &_Src) {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_f == _Src._field_f &&
			this->_field_p == _Src._field_p &&
			this->_field_a == _Src._field_a &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_k == _Src._field_k;
	}

	inline bool operator!=(const _121807de0_DynamicTypeAnnotation &_Src) { return !this->operator==(_Src); }
};


struct _121807de0_StructLitChecker {
	jule::Ref<_121807de0_StructLitChecker> self{};

	jule::Ref<_121dedce0_Eval> _field_e{jule::Ref<_121dedce0_Eval>()};
	_111613f20_Token _field_error_token{_111613f20_Token()};
	jule::Ref<_11209db80_StructIns> _field_s{jule::Ref<_11209db80_StructIns>()};
	jule::Slice<jule::Ref<_112673500_StructArgExprModel>> _field_args{jule::Slice<jule::Ref<_112673500_StructArgExprModel>>()};


	_121807de0_StructLitChecker(jule::Ref<_121dedce0_Eval> __param_e, _111613f20_Token __param_error_token, jule::Ref<_11209db80_StructIns> __param_s, jule::Slice<jule::Ref<_112673500_StructArgExprModel>> __param_args) {
		this->self = jule::Ref<_121807de0_StructLitChecker>::make(this, nullptr);

		this->_field_e = __param_e;
		this->_field_error_token = __param_error_token;
		this->_field_s = __param_s;
		this->_field_args = __param_args;
	}

	~_121807de0_StructLitChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121807de0_StructLitChecker(void) { this->self = jule::Ref<_121807de0_StructLitChecker>::make(this, nullptr); }

	inline void _method_push_err(_111613f20_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_match(jule::Ref<_11209db80_FieldIns>,jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline void _method_check_pair(jule::Ref<_111612b20_FieldExprPair>,jule::Slice<jule::Any>);


	inline jule::Bool _method_ready_exprs(jule::Slice<jule::Any>);


	inline void _method_check(jule::Slice<jule::Any>);


	inline bool operator==(const _121807de0_StructLitChecker &_Src) {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_s == _Src._field_s &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _121807de0_StructLitChecker &_Src) { return !this->operator==(_Src); }
};


struct _121807de0_RangeChecker {
	jule::Ref<_121807de0_RangeChecker> self{};

	jule::Ref<_1126288e0_ScopeChecker> _field_sc{jule::Ref<_1126288e0_ScopeChecker>()};
	jule::Ref<_111612b20_RangeKind> _field_rang{jule::Ref<_111612b20_RangeKind>()};
	jule::Ref<_1126288e0_RangeIter> _field_kind{jule::Ref<_1126288e0_RangeIter>()};
	jule::Ref<_121dedce0_Data> _field_d{jule::Ref<_121dedce0_Data>()};


	_121807de0_RangeChecker(jule::Ref<_1126288e0_ScopeChecker> __param_sc, jule::Ref<_111612b20_RangeKind> __param_rang, jule::Ref<_1126288e0_RangeIter> __param_kind, jule::Ref<_121dedce0_Data> __param_d) {
		this->self = jule::Ref<_121807de0_RangeChecker>::make(this, nullptr);

		this->_field_sc = __param_sc;
		this->_field_rang = __param_rang;
		this->_field_kind = __param_kind;
		this->_field_d = __param_d;
	}

	~_121807de0_RangeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121807de0_RangeChecker(void) { this->self = jule::Ref<_121807de0_RangeChecker>::make(this, nullptr); }

	inline jule::Ref<_1320e22c0_Var> _method_build_var(jule::Ref<_111612b20_VarDecl>);


	inline void _method_set_size_key(void);


	inline void _method_check_slice(void);


	inline void _method_check_array(void);


	inline void _method_check_map_key_a(void);


	inline void _method_check_map_key_b(void);


	inline void _method_check_map(void);


	inline void _method_check_str(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _121807de0_RangeChecker &_Src) {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_rang == _Src._field_rang &&
			this->_field_kind == _Src._field_kind &&
			this->_field_d == _Src._field_d;
	}

	inline bool operator!=(const _121807de0_RangeChecker &_Src) { return !this->operator==(_Src); }
};


struct _121dedce0_Data {
	jule::Ref<_121dedce0_Data> self{};

	jule::Ref<_1217f7750_TypeKind> _field_kind{jule::Ref<_1217f7750_TypeKind>()};
	jule::Ref<_1217f7750_TypeKind> _field_cast_kind{jule::Ref<_1217f7750_TypeKind>()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Bool _field_lvalue{jule::Bool()};
	jule::Bool _field_variadiced{jule::Bool()};
	jule::Bool _field_is_rune{jule::Bool()};
	jule::Any _field_model{jule::Any()};
	jule::Bool _field_decl{jule::Bool()};
	jule::Ref<_1131530d0_Const> _field_constant{jule::Ref<_1131530d0_Const>()};


	_121dedce0_Data(jule::Ref<_1217f7750_TypeKind> __param_kind, jule::Ref<_1217f7750_TypeKind> __param_cast_kind, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Bool __param_lvalue, jule::Bool __param_variadiced, jule::Bool __param_is_rune, jule::Any __param_model, jule::Bool __param_decl, jule::Ref<_1131530d0_Const> __param_constant) {
		this->self = jule::Ref<_121dedce0_Data>::make(this, nullptr);

		this->_field_kind = __param_kind;
		this->_field_cast_kind = __param_cast_kind;
		this->_field_mutable = __param_mutable;
		this->_field_reference = __param_reference;
		this->_field_lvalue = __param_lvalue;
		this->_field_variadiced = __param_variadiced;
		this->_field_is_rune = __param_is_rune;
		this->_field_model = __param_model;
		this->_field_decl = __param_decl;
		this->_field_constant = __param_constant;
	}

	~_121dedce0_Data(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121dedce0_Data(void) { this->self = jule::Ref<_121dedce0_Data>::make(this, nullptr); }

	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_const(void);


	inline bool operator==(const _121dedce0_Data &_Src) {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_cast_kind == _Src._field_cast_kind &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_lvalue == _Src._field_lvalue &&
			this->_field_variadiced == _Src._field_variadiced &&
			this->_field_is_rune == _Src._field_is_rune &&
			this->_field_model == _Src._field_model &&
			this->_field_decl == _Src._field_decl &&
			this->_field_constant == _Src._field_constant;
	}

	inline bool operator!=(const _121dedce0_Data &_Src) { return !this->operator==(_Src); }
};


struct _121dedce0_Value {
	jule::Ref<_121dedce0_Value> self{};

	jule::Ref<_111612b20_Expr> _field_expr{jule::Ref<_111612b20_Expr>()};
	jule::Ref<_121dedce0_Data> _field_data{jule::Ref<_121dedce0_Data>()};


	_121dedce0_Value(jule::Ref<_111612b20_Expr> __param_expr, jule::Ref<_121dedce0_Data> __param_data) {
		this->self = jule::Ref<_121dedce0_Value>::make(this, nullptr);

		this->_field_expr = __param_expr;
		this->_field_data = __param_data;
	}

	~_121dedce0_Value(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121dedce0_Value(void) { this->self = jule::Ref<_121dedce0_Value>::make(this, nullptr); }

	inline bool operator==(const _121dedce0_Value &_Src) {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _121dedce0_Value &_Src) { return !this->operator==(_Src); }
};


struct _121dedce0_Eval {
	jule::Ref<_121dedce0_Eval> self{};

	jule::Ref<_11262c360_Sema> _field_s{jule::Ref<_11262c360_Sema>()};
	jule::Trait<_112f89930_Lookup> _field_lookup{jule::Trait<_112f89930_Lookup>()};
	jule::Ref<_1217f7750_TypeKind> _field_prefix{jule::Ref<_1217f7750_TypeKind>()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Ref<_1320e22c0_Var> _field_owner{jule::Ref<_1320e22c0_Var>()};


	_121dedce0_Eval(jule::Ref<_11262c360_Sema> __param_s, jule::Trait<_112f89930_Lookup> __param_lookup, jule::Ref<_1217f7750_TypeKind> __param_prefix, jule::Bool __param_unsafety, jule::Ref<_1320e22c0_Var> __param_owner) {
		this->self = jule::Ref<_121dedce0_Eval>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_lookup = __param_lookup;
		this->_field_prefix = __param_prefix;
		this->_field_unsafety = __param_unsafety;
		this->_field_owner = __param_owner;
	}

	~_121dedce0_Eval(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121dedce0_Eval(void) { this->self = jule::Ref<_121dedce0_Eval>::make(this, nullptr); }

	inline void _method_push_err(_111613f20_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_global(void);


	inline jule::Ref<_121dedce0_Data> _method_lit_nil(void);


	inline jule::Ref<_121dedce0_Data> _method_lit_str(jule::Ref<_111612b20_LitExpr>);


	inline jule::Ref<_121dedce0_Data> _method_lit_bool(jule::Ref<_111612b20_LitExpr>);


	inline jule::Ref<_121dedce0_Data> _method_lit_rune(jule::Ref<_111612b20_LitExpr>);


	inline jule::Ref<_121dedce0_Data> _method_lit_float(jule::Ref<_111612b20_LitExpr>);


	inline jule::Ref<_121dedce0_Data> _method_lit_int(jule::Ref<_111612b20_LitExpr>);


	inline jule::Ref<_121dedce0_Data> _method_lit_num(jule::Ref<_111612b20_LitExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_lit(jule::Ref<_111612b20_LitExpr>);


	inline jule::Any _method_find_builtins(jule::Str);


	inline jule::Any _method_get_def(jule::Str,jule::Bool);


	inline void _method_push_reference(jule::Ref<_112572770_ReferenceStack>);


	inline void _method_push_reference_to_fn(jule::Ref<_112446fb0_FnIns>);


	inline void _method_push_reference_to_var(jule::Ref<_1320e22c0_Var>);


	inline void _method_push_reference_to_struct(jule::Ref<_11209db80_StructIns>);


	inline jule::Ref<_121dedce0_Data> _method_eval_enum(jule::Ref<_11261eaf0_Enum>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_struct(jule::Ref<_11209db80_StructIns>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_fn_ins(jule::Ref<_112446fb0_FnIns>);


	inline jule::Ref<_121dedce0_Data> _method_eval_fn(jule::Ref<_112446fb0_Fn>,_111613f20_Token);


	inline void _method_push_illegal_cycle_error(jule::Ref<_1320e22c0_Var>,jule::Ref<_1320e22c0_Var>,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ref<_1320e22c0_Var>,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ref<_1320e22c0_Var>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_var(jule::Ref<_1320e22c0_Var>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_type_alias(jule::Ref<_1217f7750_TypeAlias>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_def(jule::Any,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_ident(jule::Ref<_111612b20_IdentExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_unary_minus(jule::Ref<_121dedce0_Data>);


	inline jule::Ref<_121dedce0_Data> _method_eval_unary_plus(jule::Ref<_121dedce0_Data>);


	inline jule::Ref<_121dedce0_Data> _method_eval_unary_caret(jule::Ref<_121dedce0_Data>);


	inline jule::Ref<_121dedce0_Data> _method_eval_unary_excl(jule::Ref<_121dedce0_Data>);


	inline jule::Ref<_121dedce0_Data> _method_eval_unary_star(jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_unary_amper(jule::Ref<_121dedce0_Data>);


	inline jule::Ref<_121dedce0_Data> _method_eval_unary_type_decl(jule::Ref<_121dedce0_Data>,jule::Ref<_111612b20_UnaryExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_unary(jule::Ref<_111612b20_UnaryExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_variadic(jule::Ref<_111612b20_VariadicExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_unsafe(jule::Ref<_111612b20_UnsafeExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_arr(jule::Ref<_111612b20_SliceExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_exp_slc(jule::Ref<_111612b20_SliceExpr>,jule::Ref<_1217f7750_TypeKind>);


	inline jule::Ref<_121dedce0_Data> _method_eval_slice_expr(jule::Ref<_111612b20_SliceExpr>);


	inline void _method_check_integer_indexing_by_data(jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline void _method_indexing_ptr(jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>,jule::Ref<_111612b20_IndexingExpr>);


	inline void _method_indexing_arr(jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>,jule::Ref<_111612b20_IndexingExpr>);


	inline void _method_indexing_slc(jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>,jule::Ref<_111612b20_IndexingExpr>);


	inline void _method_indexing_map(jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>,jule::Ref<_111612b20_IndexingExpr>);


	inline void _method_indexing_str(jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>,jule::Ref<_111612b20_IndexingExpr>);


	inline void _method_to_indexing(jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>,jule::Ref<_111612b20_IndexingExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_ident_decl_from_indexing(jule::Ref<_111612b20_IndexingExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_indexing(jule::Ref<_111612b20_IndexingExpr>);


	inline std::tuple<jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>> _method_eval_slicing_exprs(jule::Ref<_111612b20_SlicingExpr>);


	inline void _method_slicing_arr(jule::Ref<_121dedce0_Data>);


	inline void _method_slicing_slc(jule::Ref<_121dedce0_Data>);


	inline void _method_slicing_str(jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>);


	inline void _method_check_slicing(jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>,jule::Ref<_111612b20_SlicingExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_slicing(jule::Ref<_111612b20_SlicingExpr>);


	inline void _method_cast_ptr(jule::Ref<_1217f7750_TypeKind>,jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline void _method_cast_struct(jule::Ref<_1217f7750_TypeKind>,jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline void _method_cast_ref(jule::Ref<_1217f7750_TypeKind>,jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline void _method_cast_slc(jule::Ref<_1217f7750_TypeKind>,jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline void _method_cast_str(jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline void _method_cast_int(jule::Ref<_1217f7750_TypeKind>,jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline void _method_cast_num(jule::Ref<_1217f7750_TypeKind>,jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline void _method_cast_prim(jule::Ref<_1217f7750_TypeKind>,jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_cast_by_type_n_data(jule::Ref<_1217f7750_TypeKind>,jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_cast(jule::Ref<_111612b20_CastExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_ns_selection(jule::Ref<_111612b20_NsSelectionExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_struct_lit_explicit(jule::Ref<_11209db80_StructIns>,jule::Slice<jule::Any>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_struct_lit(jule::Ref<_111612b20_StructLit>);


	inline jule::Ref<_121dedce0_Data> _method_eval_type(jule::Ref<_111612b20_TypeDecl>);


	inline jule::Ref<_121dedce0_Data> _method_call_type_fn(jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);


	inline std::tuple<jule::Bool,jule::Bool> _method_check_fn_call_generics(jule::Ref<_112446fb0_FnIns>,jule::Ref<_111612b20_FnCallExpr>);


	inline jule::Ref<_121dedce0_Data> _method_call_builtin_fn(jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);


	inline void _method_check_fn_of_concurrent_call(jule::Ref<_112446fb0_FnIns>&,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_call_fn(jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);


	inline jule::Ref<_121dedce0_Data> _method_eval_fn_call(jule::Ref<_111612b20_FnCallExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_enum_static(jule::Ref<_11261eaf0_Enum>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_struct_static(jule::Ref<_11209db80_StructIns>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_trait_sub_ident(jule::Ref<_121dedce0_Data>,jule::Ref<_11209e2e0_Trait>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_struct_sub_ident(jule::Ref<_121dedce0_Data>,jule::Ref<_11209db80_StructIns>,jule::Ref<_111612b20_SubIdentExpr>,jule::Bool);


	inline jule::Ref<_121dedce0_Data> _method_eval_slice_sub_ident(jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_array_sub_ident(jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_map_sub_ident(jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_str_sub_ident(jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_int_type_static(_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_uint_type_static(_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_i8_type_static(_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_i16_type_static(_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_i32_type_static(_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_i64_type_static(_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_u8_type_static(_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_u16_type_static(_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_u32_type_static(_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_u64_type_static(_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_f32_type_tatic(_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_f64_type_static(_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_prim_static(jule::Str,_111613f20_Token);


	inline jule::Ref<_121dedce0_Data> _method_eval_type_static(jule::Ref<_121dedce0_Data>,jule::Ref<_111612b20_SubIdentExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_obj_sub_ident(jule::Ref<_121dedce0_Data>,jule::Ref<_111612b20_SubIdentExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_sub_ident(jule::Ref<_111612b20_SubIdentExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_tuple(jule::Ref<_111612b20_TupleExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_map(jule::Ref<_1217f7750_Map>,jule::Ref<_111612b20_BraceLit>);


	inline jule::Ref<_121dedce0_Data> _method_eval_brace_lit(jule::Ref<_111612b20_BraceLit>);


	inline jule::Ref<_121dedce0_Data> _method_eval_anon_fn(jule::Ref<_111612b20_FnDecl>);


	inline jule::Ref<_121dedce0_Data> _method_eval_binop(jule::Ref<_111612b20_BinopExpr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_expr_kind(jule::Any);


	inline jule::Ref<_121dedce0_Data> _method_eval(jule::Ref<_111612b20_Expr>);


	inline jule::Ref<_121dedce0_Data> _method_eval_expr(jule::Ref<_111612b20_Expr>);


	inline bool operator==(const _121dedce0_Eval &_Src) {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_prefix == _Src._field_prefix &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_owner == _Src._field_owner;
	}

	inline bool operator!=(const _121dedce0_Eval &_Src) { return !this->operator==(_Src); }
};


struct _1217f7750_TypeKind: public _1217f7750_Kind {
	jule::Ref<_1217f7750_TypeKind> self{};

	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Str _field_cpp_ident{jule::Str()};
	jule::Trait<_1217f7750_Kind> _field_kind{jule::Trait<_1217f7750_Kind>()};


	_1217f7750_TypeKind(jule::Bool __param_cpp_linked, jule::Str __param_cpp_ident, jule::Trait<_1217f7750_Kind> __param_kind) {
		this->self = jule::Ref<_1217f7750_TypeKind>::make(this, nullptr);

		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_cpp_ident = __param_cpp_ident;
		this->_field_kind = __param_kind;
	}

	~_1217f7750_TypeKind(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1217f7750_TypeKind(void) { this->self = jule::Ref<_1217f7750_TypeKind>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Ref<_1217f7750_TypeKind> _method_clone(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_is_void(void);


	inline jule::Ref<_1217f7750_Prim> _method_prim(void);


	inline jule::Ref<_1217f7750_Ref> _method_ref(void);


	inline jule::Ref<_1217f7750_Ptr> _method_ptr(void);


	inline jule::Ref<_11261eaf0_Enum> _method_enm(void);


	inline jule::Ref<_1217f7750_Arr> _method_arr(void);


	inline jule::Ref<_1217f7750_Slc> _method_slc(void);


	inline jule::Ref<_112446fb0_FnIns> _method_fnc(void);


	inline jule::Ref<_11209db80_StructIns> _method_strct(void);


	inline jule::Ref<_11209e2e0_Trait> _method_trt(void);


	inline jule::Ref<_1217f7750_Map> _method_map(void);


	inline jule::Ref<_1217f7750_Tuple> _method_tup(void);


	inline bool operator==(const _1217f7750_TypeKind &_Src) {
		return 
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_cpp_ident == _Src._field_cpp_ident &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1217f7750_TypeKind &_Src) { return !this->operator==(_Src); }
};


struct _1217f7750_TypeSymbol {
	jule::Ref<_1217f7750_TypeSymbol> self{};

	jule::Ref<_111612b20_TypeDecl> _field_decl{jule::Ref<_111612b20_TypeDecl>()};
	jule::Ref<_1217f7750_TypeKind> _field_kind{jule::Ref<_1217f7750_TypeKind>()};


	_1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl> __param_decl, jule::Ref<_1217f7750_TypeKind> __param_kind) {
		this->self = jule::Ref<_1217f7750_TypeSymbol>::make(this, nullptr);

		this->_field_decl = __param_decl;
		this->_field_kind = __param_kind;
	}

	~_1217f7750_TypeSymbol(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1217f7750_TypeSymbol(void) { this->self = jule::Ref<_1217f7750_TypeSymbol>::make(this, nullptr); }

	inline jule::Bool _method_checked(void);


	inline void _method_remove_kind(void);


	inline bool operator==(const _1217f7750_TypeSymbol &_Src) {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1217f7750_TypeSymbol &_Src) { return !this->operator==(_Src); }
};


struct _1217f7750_Prim: public _1217f7750_Kind {
	jule::Ref<_1217f7750_Prim> self{};

	jule::Str _field_kind{jule::Str()};


	_1217f7750_Prim(jule::Str __param_kind) {
		this->self = jule::Ref<_1217f7750_Prim>::make(this, nullptr);

		this->_field_kind = __param_kind;
	}

	~_1217f7750_Prim(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1217f7750_Prim(void) { this->self = jule::Ref<_1217f7750_Prim>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_is_i8(void);


	inline jule::Bool _method_is_i16(void);


	inline jule::Bool _method_is_i32(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u8(void);


	inline jule::Bool _method_is_u16(void);


	inline jule::Bool _method_is_u32(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_f32(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_int(void);


	inline jule::Bool _method_is_uint(void);


	inline jule::Bool _method_is_uintptr(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_any(void);


	inline bool operator==(const _1217f7750_Prim &_Src) {
		return 
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1217f7750_Prim &_Src) { return !this->operator==(_Src); }
};


struct _1217f7750_Ref: public _1217f7750_Kind {
	jule::Ref<_1217f7750_Ref> self{};

	jule::Ref<_1217f7750_TypeKind> _field_elem{jule::Ref<_1217f7750_TypeKind>()};


	_1217f7750_Ref(jule::Ref<_1217f7750_TypeKind> __param_elem) {
		this->self = jule::Ref<_1217f7750_Ref>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_1217f7750_Ref(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1217f7750_Ref(void) { this->self = jule::Ref<_1217f7750_Ref>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind>);


	inline bool operator==(const _1217f7750_Ref &_Src) {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1217f7750_Ref &_Src) { return !this->operator==(_Src); }
};


struct _1217f7750_Slc: public _1217f7750_Kind {
	jule::Ref<_1217f7750_Slc> self{};

	jule::Ref<_1217f7750_TypeKind> _field_elem{jule::Ref<_1217f7750_TypeKind>()};


	_1217f7750_Slc(jule::Ref<_1217f7750_TypeKind> __param_elem) {
		this->self = jule::Ref<_1217f7750_Slc>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_1217f7750_Slc(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1217f7750_Slc(void) { this->self = jule::Ref<_1217f7750_Slc>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind>);


	inline bool operator==(const _1217f7750_Slc &_Src) {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1217f7750_Slc &_Src) { return !this->operator==(_Src); }
};


struct _1217f7750_Tuple: public _1217f7750_Kind {
	jule::Ref<_1217f7750_Tuple> self{};

	jule::Slice<jule::Ref<_1217f7750_TypeKind>> _field_types{jule::Slice<jule::Ref<_1217f7750_TypeKind>>()};


	_1217f7750_Tuple(jule::Slice<jule::Ref<_1217f7750_TypeKind>> __param_types) {
		this->self = jule::Ref<_1217f7750_Tuple>::make(this, nullptr);

		this->_field_types = __param_types;
	}

	~_1217f7750_Tuple(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1217f7750_Tuple(void) { this->self = jule::Ref<_1217f7750_Tuple>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind>);


	inline bool operator==(const _1217f7750_Tuple &_Src) {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _1217f7750_Tuple &_Src) { return !this->operator==(_Src); }
};


struct _1217f7750_Map: public _1217f7750_Kind {
	jule::Ref<_1217f7750_Map> self{};

	jule::Ref<_1217f7750_TypeKind> _field_key{jule::Ref<_1217f7750_TypeKind>()};
	jule::Ref<_1217f7750_TypeKind> _field_val{jule::Ref<_1217f7750_TypeKind>()};


	_1217f7750_Map(jule::Ref<_1217f7750_TypeKind> __param_key, jule::Ref<_1217f7750_TypeKind> __param_val) {
		this->self = jule::Ref<_1217f7750_Map>::make(this, nullptr);

		this->_field_key = __param_key;
		this->_field_val = __param_val;
	}

	~_1217f7750_Map(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1217f7750_Map(void) { this->self = jule::Ref<_1217f7750_Map>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind>);


	inline bool operator==(const _1217f7750_Map &_Src) {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _1217f7750_Map &_Src) { return !this->operator==(_Src); }
};


struct _1217f7750_Arr: public _1217f7750_Kind {
	jule::Ref<_1217f7750_Arr> self{};

	jule::Bool _field_auto{jule::Bool()};
	jule::Int _field_n{jule::Int()};
	jule::Ref<_1217f7750_TypeKind> _field_elem{jule::Ref<_1217f7750_TypeKind>()};


	_1217f7750_Arr(jule::Bool __param_auto, jule::Int __param_n, jule::Ref<_1217f7750_TypeKind> __param_elem) {
		this->self = jule::Ref<_1217f7750_Arr>::make(this, nullptr);

		this->_field_auto = __param_auto;
		this->_field_n = __param_n;
		this->_field_elem = __param_elem;
	}

	~_1217f7750_Arr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1217f7750_Arr(void) { this->self = jule::Ref<_1217f7750_Arr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind>);


	inline bool operator==(const _1217f7750_Arr &_Src) {
		return 
			this->_field_auto == _Src._field_auto &&
			this->_field_n == _Src._field_n &&
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1217f7750_Arr &_Src) { return !this->operator==(_Src); }
};


struct _1217f7750_Ptr: public _1217f7750_Kind {
	jule::Ref<_1217f7750_Ptr> self{};

	jule::Ref<_1217f7750_TypeKind> _field_elem{jule::Ref<_1217f7750_TypeKind>()};


	_1217f7750_Ptr(jule::Ref<_1217f7750_TypeKind> __param_elem) {
		this->self = jule::Ref<_1217f7750_Ptr>::make(this, nullptr);

		this->_field_elem = __param_elem;
	}

	~_1217f7750_Ptr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1217f7750_Ptr(void) { this->self = jule::Ref<_1217f7750_Ptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _1217f7750_Ptr &_Src) {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1217f7750_Ptr &_Src) { return !this->operator==(_Src); }
};


struct _1217f7750_Referencer {
	jule::Ref<_1217f7750_Referencer> self{};

	jule::Str _field_ident{jule::Str()};
	jule::Any _field_owner{jule::Any()};
	jule::Slice<jule::Any>* _field_refs{nullptr};


	_1217f7750_Referencer(jule::Str __param_ident, jule::Any __param_owner, jule::Slice<jule::Any>* __param_refs) {
		this->self = jule::Ref<_1217f7750_Referencer>::make(this, nullptr);

		this->_field_ident = __param_ident;
		this->_field_owner = __param_owner;
		this->_field_refs = __param_refs;
	}

	~_1217f7750_Referencer(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1217f7750_Referencer(void) { this->self = jule::Ref<_1217f7750_Referencer>::make(this, nullptr); }

	inline bool operator==(const _1217f7750_Referencer &_Src) {
		return 
			this->_field_ident == _Src._field_ident &&
			this->_field_owner == _Src._field_owner &&
			this->_field_refs == _Src._field_refs;
	}

	inline bool operator!=(const _1217f7750_Referencer &_Src) { return !this->operator==(_Src); }
};


struct _12209b250_PlainImporter: public _11265fb90_Importer {
	jule::Ref<_12209b250_PlainImporter> self{};

	jule::Slice<jule::Ref<_11265fb90_ImportInfo>> _field_all_packages{jule::Slice<jule::Ref<_11265fb90_ImportInfo>>()};


	_12209b250_PlainImporter(jule::Slice<jule::Ref<_11265fb90_ImportInfo>> __param_all_packages) {
		this->self = jule::Ref<_12209b250_PlainImporter>::make(this, nullptr);

		this->_field_all_packages = __param_all_packages;
	}

	~_12209b250_PlainImporter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_12209b250_PlainImporter(void) { this->self = jule::Ref<_12209b250_PlainImporter>::make(this, nullptr); }

	inline jule::Ref<_11265fb90_ImportInfo> _method_get_import(jule::Str);


	inline std::tuple<jule::Slice<jule::Ref<_1220cb5d0_Ast>>,jule::Slice<_1316b4080_Log>> _method_import_package(jule::Str);


	inline void _method_imported(jule::Ref<_11265fb90_ImportInfo>);


	inline bool operator==(const _12209b250_PlainImporter &_Src) {
		return 
			this->_field_all_packages == _Src._field_all_packages;
	}

	inline bool operator!=(const _12209b250_PlainImporter &_Src) { return !this->operator==(_Src); }
};


struct _122056550_IR {
	jule::Ref<_122056550_IR> self{};

	jule::Slice<jule::Str> _field_passes{jule::Slice<jule::Str>()};
	jule::Ref<_11265fb90_Package> _field_main{jule::Ref<_11265fb90_Package>()};
	jule::Slice<jule::Ref<_11265fb90_ImportInfo>> _field_used{jule::Slice<jule::Ref<_11265fb90_ImportInfo>>()};


	_122056550_IR(jule::Slice<jule::Str> __param_passes, jule::Ref<_11265fb90_Package> __param_main, jule::Slice<jule::Ref<_11265fb90_ImportInfo>> __param_used) {
		this->self = jule::Ref<_122056550_IR>::make(this, nullptr);

		this->_field_passes = __param_passes;
		this->_field_main = __param_main;
		this->_field_used = __param_used;
	}

	~_122056550_IR(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_122056550_IR(void) { this->self = jule::Ref<_122056550_IR>::make(this, nullptr); }

	inline void _method_append_structs(jule::Ref<_11265fb90_Package>,jule::Slice<jule::Ref<_11209db80_Struct>>&);


	inline jule::Slice<jule::Ref<_11209db80_Struct>> _method_get_all_structures(void);


	inline void _method_append_vars(jule::Ref<_11265fb90_Package>,jule::Slice<jule::Ref<_1320e22c0_Var>>&);


	inline jule::Slice<jule::Ref<_1320e22c0_Var>> _method_get_all_variables(void);


	inline bool operator==(const _122056550_IR &_Src) {
		return 
			this->_field_passes == _Src._field_passes &&
			this->_field_main == _Src._field_main &&
			this->_field_used == _Src._field_used;
	}

	inline bool operator!=(const _122056550_IR &_Src) { return !this->operator==(_Src); }
};


struct _1220584c0_ScopeDeadCode {
	jule::Ref<_1220584c0_ScopeDeadCode> self{};

	jule::Ref<_1220584c0_ScopeDeadCode> _field_parent{jule::Ref<_1220584c0_ScopeDeadCode>()};
	jule::Ref<_1126288e0_Scope> _field_s{jule::Ref<_1126288e0_Scope>()};
	_11203c360_Vector_8* _field_stmts{nullptr};
	jule::Int _field_i{jule::Int()};


	_1220584c0_ScopeDeadCode(jule::Ref<_1220584c0_ScopeDeadCode> __param_parent, jule::Ref<_1126288e0_Scope> __param_s, _11203c360_Vector_8* __param_stmts, jule::Int __param_i) {
		this->self = jule::Ref<_1220584c0_ScopeDeadCode>::make(this, nullptr);

		this->_field_parent = __param_parent;
		this->_field_s = __param_s;
		this->_field_stmts = __param_stmts;
		this->_field_i = __param_i;
	}

	~_1220584c0_ScopeDeadCode(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1220584c0_ScopeDeadCode(void) { this->self = jule::Ref<_1220584c0_ScopeDeadCode>::make(this, nullptr); }

	inline void _method_optimize_child(jule::Ref<_1126288e0_Scope>);


	inline void _method_eliminate_followed(void);


	inline void _method_optimize_stmt(jule::Any);


	inline void _method_optimize_stmts(void);


	inline bool operator==(const _1220584c0_ScopeDeadCode &_Src) {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_s == _Src._field_s &&
			this->_field_stmts == _Src._field_stmts &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _1220584c0_ScopeDeadCode &_Src) { return !this->operator==(_Src); }
};


struct _121b31570_IndexRangeSetter: public _121b31570_RangeSetter {
	jule::Ref<_121b31570_IndexRangeSetter> self{};

	~_121b31570_IndexRangeSetter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121b31570_IndexRangeSetter(void) { this->self = jule::Ref<_121b31570_IndexRangeSetter>::make(this, nullptr); }

	inline jule::Str _method_setup_vars(jule::Ref<_1320e22c0_Var>,jule::Ref<_1320e22c0_Var>);


	inline jule::Str _method_next_steps(jule::Ref<_1320e22c0_Var>,jule::Ref<_1320e22c0_Var>,jule::Str);


	inline bool operator==(const _121b31570_IndexRangeSetter &_Src) { return true; }

	inline bool operator!=(const _121b31570_IndexRangeSetter &_Src) { return !this->operator==(_Src); }
};


struct _121b31570_MapRangeSetter: public _121b31570_RangeSetter {
	jule::Ref<_121b31570_MapRangeSetter> self{};

	~_121b31570_MapRangeSetter(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121b31570_MapRangeSetter(void) { this->self = jule::Ref<_121b31570_MapRangeSetter>::make(this, nullptr); }

	inline jule::Str _method_setup_vars(jule::Ref<_1320e22c0_Var>,jule::Ref<_1320e22c0_Var>);


	inline jule::Str _method_next_steps(jule::Ref<_1320e22c0_Var>,jule::Ref<_1320e22c0_Var>,jule::Str);


	inline bool operator==(const _121b31570_MapRangeSetter &_Src) { return true; }

	inline bool operator!=(const _121b31570_MapRangeSetter &_Src) { return !this->operator==(_Src); }
};


struct _113497500_OrderedDecls {
	jule::Ref<_113497500_OrderedDecls> self{};

	jule::Slice<jule::Ref<_11209db80_Struct>> _field_structs{jule::Slice<jule::Ref<_11209db80_Struct>>()};
	jule::Slice<jule::Ref<_1320e22c0_Var>> _field_globals{jule::Slice<jule::Ref<_1320e22c0_Var>>()};


	_113497500_OrderedDecls(jule::Slice<jule::Ref<_11209db80_Struct>> __param_structs, jule::Slice<jule::Ref<_1320e22c0_Var>> __param_globals) {
		this->self = jule::Ref<_113497500_OrderedDecls>::make(this, nullptr);

		this->_field_structs = __param_structs;
		this->_field_globals = __param_globals;
	}

	~_113497500_OrderedDecls(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_113497500_OrderedDecls(void) { this->self = jule::Ref<_113497500_OrderedDecls>::make(this, nullptr); }

	inline bool operator==(const _113497500_OrderedDecls &_Src) {
		return 
			this->_field_structs == _Src._field_structs &&
			this->_field_globals == _Src._field_globals;
	}

	inline bool operator!=(const _113497500_OrderedDecls &_Src) { return !this->operator==(_Src); }
};


struct _1217f7750_TypeChecker {
	jule::Ref<_1217f7750_TypeChecker> self{};

	jule::Ref<_11262c360_Sema> _field_s{jule::Ref<_11262c360_Sema>()};
	jule::Trait<_112f89930_Lookup> _field_lookup{jule::Trait<_112f89930_Lookup>()};
	jule::Ref<_1217f7750_Referencer> _field_referencer{jule::Ref<_1217f7750_Referencer>()};
	_111613f20_Token _field_error_token{_111613f20_Token()};
	jule::Slice<jule::Ref<_111612b20_GenericDecl>> _field_ignore_generics{jule::Slice<jule::Ref<_111612b20_GenericDecl>>()};
	jule::Slice<jule::Ref<_1217f7750_TypeAlias>> _field_use_generics{jule::Slice<jule::Ref<_1217f7750_TypeAlias>>()};
	jule::Bool _field_not_plain{jule::Bool()};


	_1217f7750_TypeChecker(jule::Ref<_11262c360_Sema> __param_s, jule::Trait<_112f89930_Lookup> __param_lookup, jule::Ref<_1217f7750_Referencer> __param_referencer, _111613f20_Token __param_error_token, jule::Slice<jule::Ref<_111612b20_GenericDecl>> __param_ignore_generics, jule::Slice<jule::Ref<_1217f7750_TypeAlias>> __param_use_generics, jule::Bool __param_not_plain) {
		this->self = jule::Ref<_1217f7750_TypeChecker>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_lookup = __param_lookup;
		this->_field_referencer = __param_referencer;
		this->_field_error_token = __param_error_token;
		this->_field_ignore_generics = __param_ignore_generics;
		this->_field_use_generics = __param_use_generics;
		this->_field_not_plain = __param_not_plain;
	}

	~_1217f7750_TypeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1217f7750_TypeChecker(void) { this->self = jule::Ref<_1217f7750_TypeChecker>::make(this, nullptr); }

	inline void _method_push_err(_111613f20_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Ref<_1217f7750_Prim> _method_build_prim(jule::Ref<_111612b20_IdentTypeDecl>);


	inline void _method_push_cycle_error(jule::Any,jule::Any,jule::Str&);


	inline jule::Bool _method_are_equals_cross_cycle_data_0(jule::Any,jule::Any);
	inline jule::Bool _method_are_equals_cross_cycle_data_1(jule::Any,jule::Any);


	inline jule::Bool _method_check_cross_cycle(jule::Any,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ref<_111612b20_IdentTypeDecl>,jule::Any);


	inline jule::Trait<_1217f7750_Kind> _method_from_type_alias(jule::Ref<_111612b20_IdentTypeDecl>,jule::Ref<_1217f7750_TypeAlias>);


	inline jule::Ref<_11261eaf0_Enum> _method_from_enum(jule::Ref<_111612b20_IdentTypeDecl>,jule::Ref<_11261eaf0_Enum>);


	inline jule::Bool _method_check_struct_ins(jule::Ref<_11209db80_StructIns>,_111613f20_Token);


	inline void _method_append_used_struct_reference(jule::Ref<_11209db80_Struct>);


	inline jule::Ref<_11209db80_StructIns> _method_from_struct(jule::Ref<_111612b20_IdentTypeDecl>,jule::Ref<_11209db80_Struct>);


	inline jule::Trait<_1217f7750_Kind> _method_get_def(jule::Ref<_111612b20_IdentTypeDecl>);


	inline jule::Trait<_1217f7750_Kind> _method_build_ident(jule::Ref<_111612b20_IdentTypeDecl>);


	inline jule::Ref<_1217f7750_Ref> _method_build_ref_from_type(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Ref<_1217f7750_Ref> _method_build_ref(jule::Ref<_111612b20_RefTypeDecl>);


	inline jule::Ref<_1217f7750_Ptr> _method_build_ptr_from_type(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Ref<_1217f7750_Ptr> _method_build_ptr(jule::Ref<_111612b20_PtrTypeDecl>);


	inline jule::Ref<_1217f7750_Slc> _method_build_slc(jule::Ref<_111612b20_SlcTypeDecl>);


	inline jule::Ref<_1217f7750_Arr> _method_build_arr(jule::Ref<_111612b20_ArrTypeDecl>);


	inline jule::Ref<_1217f7750_Map> _method_build_map(jule::Ref<_111612b20_MapTypeDecl>);


	inline jule::Ref<_1217f7750_Tuple> _method_build_tuple(jule::Ref<_111612b20_TupleTypeDecl>);


	inline jule::Bool _method_check_fn_types(jule::Ref<_112446fb0_FnIns>);


	inline jule::Ref<_112446fb0_FnIns> _method_build_fn(jule::Ref<_111612b20_FnDecl>);


	inline jule::Trait<_1217f7750_Kind> _method_build_by_std_namespace(jule::Ref<_111612b20_NamespaceTypeDecl>);


	inline jule::Trait<_1217f7750_Kind> _method_build_by_namespace(jule::Ref<_111612b20_NamespaceTypeDecl>);


	inline jule::Ref<_1217f7750_TypeKind> _method_build(jule::Any);


	inline jule::Ref<_1217f7750_TypeKind> _method_check_decl(jule::Ref<_111612b20_TypeDecl>);


	inline void _method_check(jule::Ref<_1217f7750_TypeSymbol>);


	inline bool operator==(const _1217f7750_TypeChecker &_Src) {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_referencer == _Src._field_referencer &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_ignore_generics == _Src._field_ignore_generics &&
			this->_field_use_generics == _Src._field_use_generics &&
			this->_field_not_plain == _Src._field_not_plain;
	}

	inline bool operator!=(const _1217f7750_TypeChecker &_Src) { return !this->operator==(_Src); }
};


struct _1217f7750_TypeAlias {
	jule::Ref<_1217f7750_TypeAlias> self{};

	jule::Ref<_111612b20_ScopeTree> _field_scope{jule::Ref<_111612b20_ScopeTree>()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_used{jule::Bool()};
	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1217f7750_TypeSymbol> _field_kind{jule::Ref<_1217f7750_TypeSymbol>()};
	jule::Str _field_doc{jule::Str()};
	jule::Slice<jule::Any> _field_refers{jule::Slice<jule::Any>()};


	_1217f7750_TypeAlias(jule::Ref<_111612b20_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_used, _111613f20_Token __param_token, jule::Str __param_ident, jule::Ref<_1217f7750_TypeSymbol> __param_kind, jule::Str __param_doc, jule::Slice<jule::Any> __param_refers) {
		this->self = jule::Ref<_1217f7750_TypeAlias>::make(this, nullptr);

		this->_field_scope = __param_scope;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_used = __param_used;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
		this->_field_doc = __param_doc;
		this->_field_refers = __param_refers;
	}

	~_1217f7750_TypeAlias(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1217f7750_TypeAlias(void) { this->self = jule::Ref<_1217f7750_TypeAlias>::make(this, nullptr); }

	inline bool operator==(const _1217f7750_TypeAlias &_Src) {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_used == _Src._field_used &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc == _Src._field_doc &&
			this->_field_refers == _Src._field_refers;
	}

	inline bool operator!=(const _1217f7750_TypeAlias &_Src) { return !this->operator==(_Src); }
};


struct _121dedce0_BinopSolver {
	jule::Ref<_121dedce0_BinopSolver> self{};

	jule::Ref<_121dedce0_Eval> _field_e{jule::Ref<_121dedce0_Eval>()};
	jule::Ref<_121dedce0_Data> _field_l{jule::Ref<_121dedce0_Data>()};
	jule::Ref<_121dedce0_Data> _field_r{jule::Ref<_121dedce0_Data>()};
	_111613f20_Token _field_op{_111613f20_Token()};


	_121dedce0_BinopSolver(jule::Ref<_121dedce0_Eval> __param_e, jule::Ref<_121dedce0_Data> __param_l, jule::Ref<_121dedce0_Data> __param_r, _111613f20_Token __param_op) {
		this->self = jule::Ref<_121dedce0_BinopSolver>::make(this, nullptr);

		this->_field_e = __param_e;
		this->_field_l = __param_l;
		this->_field_r = __param_r;
		this->_field_op = __param_op;
	}

	~_121dedce0_BinopSolver(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121dedce0_BinopSolver(void) { this->self = jule::Ref<_121dedce0_BinopSolver>::make(this, nullptr); }

	inline jule::Bool _method_check_type_compatibility(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_nil(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_enum(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_ptr(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_arr(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_slc(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_fn(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_struct(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_trait(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_any(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_bool(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_str(void);


	inline void _method_set_type_to_greater(void);


	inline void _method_check_mod_data(jule::Ref<_121dedce0_Data>);


	inline void _method_mod(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_float(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_unsig_int(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_sig_int(void);


	inline jule::Ref<_121dedce0_Data> _method_eval_prim(void);


	inline jule::Ref<_121dedce0_Data> _method_eval(void);


	inline void _method_assign_shift(jule::Ref<_121dedce0_Data>,jule::F64);


	inline void _method_solve_const(jule::Ref<_121dedce0_Data>);


	inline void _method_post_const(jule::Ref<_121dedce0_Data>);


	inline void _method_prepare_data(jule::Ref<_121dedce0_Data>);


	inline void _method_prepare_eval(void);


	inline void _method_check_data(jule::Ref<_121dedce0_Data>);


	inline void _method_check_datas(void);


	inline jule::Ref<_121dedce0_Data> _method_solve_explicit(jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>);


	inline jule::Ref<_121dedce0_Data> _method_solve(jule::Ref<_111612b20_BinopExpr>);


	inline bool operator==(const _121dedce0_BinopSolver &_Src) {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _121dedce0_BinopSolver &_Src) { return !this->operator==(_Src); }
};


struct _121807de0_RetTypeChecker {
	jule::Ref<_121807de0_RetTypeChecker> self{};

	jule::Ref<_1126288e0_ScopeChecker> _field_sc{jule::Ref<_1126288e0_ScopeChecker>()};
	jule::Ref<_112446fb0_FnIns> _field_f{jule::Ref<_112446fb0_FnIns>()};
	jule::Slice<jule::Ref<_1217f7750_TypeKind>> _field_types{jule::Slice<jule::Ref<_1217f7750_TypeKind>>()};
	jule::Slice<jule::Any> _field_exprs{jule::Slice<jule::Any>()};
	jule::Slice<jule::Ref<_1320e22c0_Var>> _field_vars{jule::Slice<jule::Ref<_1320e22c0_Var>>()};
	_111613f20_Token _field_error_token{_111613f20_Token()};
	jule::Any _field_model{jule::Any()};


	_121807de0_RetTypeChecker(jule::Ref<_1126288e0_ScopeChecker> __param_sc, jule::Ref<_112446fb0_FnIns> __param_f, jule::Slice<jule::Ref<_1217f7750_TypeKind>> __param_types, jule::Slice<jule::Any> __param_exprs, jule::Slice<jule::Ref<_1320e22c0_Var>> __param_vars, _111613f20_Token __param_error_token, jule::Any __param_model) {
		this->self = jule::Ref<_121807de0_RetTypeChecker>::make(this, nullptr);

		this->_field_sc = __param_sc;
		this->_field_f = __param_f;
		this->_field_types = __param_types;
		this->_field_exprs = __param_exprs;
		this->_field_vars = __param_vars;
		this->_field_error_token = __param_error_token;
		this->_field_model = __param_model;
	}

	~_121807de0_RetTypeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121807de0_RetTypeChecker(void) { this->self = jule::Ref<_121807de0_RetTypeChecker>::make(this, nullptr); }

	inline void _method_prepare_types(void);


	inline void _method_prepare_exprs(jule::Ref<_111612b20_Expr>);


	inline void _method_ret_vars(void);


	inline void _method_check_exprs(void);


	inline jule::Bool _method_check(jule::Ref<_111612b20_Expr>);


	inline bool operator==(const _121807de0_RetTypeChecker &_Src) {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_f == _Src._field_f &&
			this->_field_types == _Src._field_types &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_vars == _Src._field_vars &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_model == _Src._field_model;
	}

	inline bool operator!=(const _121807de0_RetTypeChecker &_Src) { return !this->operator==(_Src); }
};


struct _121807de0_FnCallArgChecker {
	jule::Ref<_121807de0_FnCallArgChecker> self{};

	jule::Ref<_121dedce0_Eval> _field_e{jule::Ref<_121dedce0_Eval>()};
	jule::Slice<jule::Ref<_111612b20_Expr>> _field_args{jule::Slice<jule::Ref<_111612b20_Expr>>()};
	_111613f20_Token _field_error_token{_111613f20_Token()};
	jule::Ref<_112446fb0_FnIns> _field_f{jule::Ref<_112446fb0_FnIns>()};
	jule::Bool _field_dynamic_annotation{jule::Bool()};
	jule::Slice<jule::Any> _field_arg_models{jule::Slice<jule::Any>()};


	_121807de0_FnCallArgChecker(jule::Ref<_121dedce0_Eval> __param_e, jule::Slice<jule::Ref<_111612b20_Expr>> __param_args, _111613f20_Token __param_error_token, jule::Ref<_112446fb0_FnIns> __param_f, jule::Bool __param_dynamic_annotation, jule::Slice<jule::Any> __param_arg_models) {
		this->self = jule::Ref<_121807de0_FnCallArgChecker>::make(this, nullptr);

		this->_field_e = __param_e;
		this->_field_args = __param_args;
		this->_field_error_token = __param_error_token;
		this->_field_f = __param_f;
		this->_field_dynamic_annotation = __param_dynamic_annotation;
		this->_field_arg_models = __param_arg_models;
	}

	~_121807de0_FnCallArgChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121807de0_FnCallArgChecker(void) { this->self = jule::Ref<_121807de0_FnCallArgChecker>::make(this, nullptr); }

	inline void _method_push_err_token(_111613f20_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Ref<_112446fb0_ParamIns>> _method_get_params(void);


	inline jule::Bool _method_check_counts(jule::Slice<jule::Ref<_112446fb0_ParamIns>>);


	inline jule::Bool _method_check_arg(jule::Ref<_112446fb0_ParamIns>,jule::Ref<_121dedce0_Data>,_111613f20_Token);


	inline jule::Bool _method_push(jule::Ref<_112446fb0_ParamIns>,jule::Ref<_111612b20_Expr>);


	inline jule::Bool _method_push_variadic(jule::Ref<_112446fb0_ParamIns>,jule::Int);


	inline jule::Bool _method_check_args(jule::Slice<jule::Ref<_112446fb0_ParamIns>>);


	inline jule::Bool _method_check_dynamic_type_annotation(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _121807de0_FnCallArgChecker &_Src) {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_args == _Src._field_args &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_f == _Src._field_f &&
			this->_field_dynamic_annotation == _Src._field_dynamic_annotation &&
			this->_field_arg_models == _Src._field_arg_models;
	}

	inline bool operator!=(const _121807de0_FnCallArgChecker &_Src) { return !this->operator==(_Src); }
};


struct _121807de0_AssignTypeChecker {
	jule::Ref<_121807de0_AssignTypeChecker> self{};

	jule::Ref<_11262c360_Sema> _field_s{jule::Ref<_11262c360_Sema>()};
	jule::Ref<_1217f7750_TypeKind> _field_dest{jule::Ref<_1217f7750_TypeKind>()};
	jule::Ref<_121dedce0_Data> _field_d{jule::Ref<_121dedce0_Data>()};
	_111613f20_Token _field_error_token{_111613f20_Token()};
	jule::Bool _field_deref{jule::Bool()};


	_121807de0_AssignTypeChecker(jule::Ref<_11262c360_Sema> __param_s, jule::Ref<_1217f7750_TypeKind> __param_dest, jule::Ref<_121dedce0_Data> __param_d, _111613f20_Token __param_error_token, jule::Bool __param_deref) {
		this->self = jule::Ref<_121807de0_AssignTypeChecker>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_dest = __param_dest;
		this->_field_d = __param_d;
		this->_field_error_token = __param_error_token;
		this->_field_deref = __param_deref;
	}

	~_121807de0_AssignTypeChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121807de0_AssignTypeChecker(void) { this->self = jule::Ref<_121807de0_AssignTypeChecker>::make(this, nullptr); }

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_validity(void);


	inline jule::Bool _method_check_const(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _121807de0_AssignTypeChecker &_Src) {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_d == _Src._field_d &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_deref == _Src._field_deref;
	}

	inline bool operator!=(const _121807de0_AssignTypeChecker &_Src) { return !this->operator==(_Src); }
};


struct _121807de0_TypeCompatibilityChecker {
	jule::Ref<_121807de0_TypeCompatibilityChecker> self{};

	jule::Ref<_11262c360_Sema> _field_s{jule::Ref<_11262c360_Sema>()};
	jule::Ref<_1217f7750_TypeKind> _field_dest{jule::Ref<_1217f7750_TypeKind>()};
	jule::Ref<_1217f7750_TypeKind> _field_src{jule::Ref<_1217f7750_TypeKind>()};
	_111613f20_Token _field_error_token{_111613f20_Token()};
	jule::Bool _field_deref{jule::Bool()};
	jule::Bool _field_ignore_any{jule::Bool()};
	jule::Bool _field_sub_check{jule::Bool()};


	_121807de0_TypeCompatibilityChecker(jule::Ref<_11262c360_Sema> __param_s, jule::Ref<_1217f7750_TypeKind> __param_dest, jule::Ref<_1217f7750_TypeKind> __param_src, _111613f20_Token __param_error_token, jule::Bool __param_deref, jule::Bool __param_ignore_any, jule::Bool __param_sub_check) {
		this->self = jule::Ref<_121807de0_TypeCompatibilityChecker>::make(this, nullptr);

		this->_field_s = __param_s;
		this->_field_dest = __param_dest;
		this->_field_src = __param_src;
		this->_field_error_token = __param_error_token;
		this->_field_deref = __param_deref;
		this->_field_ignore_any = __param_ignore_any;
		this->_field_sub_check = __param_sub_check;
	}

	~_121807de0_TypeCompatibilityChecker(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_121807de0_TypeCompatibilityChecker(void) { this->self = jule::Ref<_121807de0_TypeCompatibilityChecker>::make(this, nullptr); }

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_trait(void);


	inline jule::Bool _method_check_ref(void);


	inline jule::Bool _method_check_ptr(void);


	inline jule::Bool _method_check_slc(void);


	inline jule::Bool _method_check_arr(void);


	inline jule::Bool _method_check_map(void);


	inline jule::Bool _method_check_struct(void);


	inline jule::Bool _method_check_fn(void);


	inline jule::Bool _method_check_enum(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _121807de0_TypeCompatibilityChecker &_Src) {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_src == _Src._field_src &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_deref == _Src._field_deref &&
			this->_field_ignore_any == _Src._field_ignore_any &&
			this->_field_sub_check == _Src._field_sub_check;
	}

	inline bool operator!=(const _121807de0_TypeCompatibilityChecker &_Src) { return !this->operator==(_Src); }
};


struct _1320e22c0_Var {
	jule::Ref<_1320e22c0_Var> self{};

	jule::Ref<_1126288e0_Scope> _field_scope{jule::Ref<_1126288e0_Scope>()};
	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_constant{jule::Bool()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_used{jule::Bool()};
	jule::Bool _field_statically{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Str _field_doc{jule::Str()};
	jule::Ref<_1217f7750_TypeSymbol> _field_kind{jule::Ref<_1217f7750_TypeSymbol>()};
	jule::Ref<_121dedce0_Value> _field_value{jule::Ref<_121dedce0_Value>()};
	jule::Ref<_112572770_ReferenceStack> _field_references{jule::Ref<_112572770_ReferenceStack>()};
	jule::Slice<jule::Ref<_1320e22c0_Var>> _field_depends{jule::Slice<jule::Ref<_1320e22c0_Var>>()};


	_1320e22c0_Var(jule::Ref<_1126288e0_Scope> __param_scope, _111613f20_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_constant, jule::Bool __param_mutable, jule::Bool __param_public, jule::Bool __param_used, jule::Bool __param_statically, jule::Bool __param_reference, jule::Str __param_doc, jule::Ref<_1217f7750_TypeSymbol> __param_kind, jule::Ref<_121dedce0_Value> __param_value, jule::Ref<_112572770_ReferenceStack> __param_references, jule::Slice<jule::Ref<_1320e22c0_Var>> __param_depends) {
		this->self = jule::Ref<_1320e22c0_Var>::make(this, nullptr);

		this->_field_scope = __param_scope;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_constant = __param_constant;
		this->_field_mutable = __param_mutable;
		this->_field_public = __param_public;
		this->_field_used = __param_used;
		this->_field_statically = __param_statically;
		this->_field_reference = __param_reference;
		this->_field_doc = __param_doc;
		this->_field_kind = __param_kind;
		this->_field_value = __param_value;
		this->_field_references = __param_references;
		this->_field_depends = __param_depends;
	}

	~_1320e22c0_Var(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1320e22c0_Var(void) { this->self = jule::Ref<_1320e22c0_Var>::make(this, nullptr); }

	inline jule::Bool _method_is_initialized(void);


	inline jule::Bool _method_is_type_inferred(void);


	inline bool operator==(const _1320e22c0_Var &_Src) {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_constant == _Src._field_constant &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_public == _Src._field_public &&
			this->_field_used == _Src._field_used &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_doc == _Src._field_doc &&
			this->_field_kind == _Src._field_kind &&
			this->_field_value == _Src._field_value &&
			this->_field_references == _Src._field_references &&
			this->_field_depends == _Src._field_depends;
	}

	inline bool operator!=(const _1320e22c0_Var &_Src) { return !this->operator==(_Src); }
};


struct _11265fb90_ImportInfo: public _112f89930_Lookup {
	jule::Ref<_11265fb90_ImportInfo> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_path{jule::Str()};
	jule::Str _field_link_path{jule::Str()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_duplicate{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_std{jule::Bool()};
	jule::Bool _field_import_all{jule::Bool()};
	jule::Slice<_111613f20_Token> _field_selected{jule::Slice<_111613f20_Token>()};
	jule::Ref<_11265fb90_Package> _field_package{jule::Ref<_11265fb90_Package>()};


	_11265fb90_ImportInfo(_111613f20_Token __param_token, jule::Str __param_path, jule::Str __param_link_path, jule::Str __param_ident, jule::Bool __param_duplicate, jule::Bool __param_cpp_linked, jule::Bool __param_std, jule::Bool __param_import_all, jule::Slice<_111613f20_Token> __param_selected, jule::Ref<_11265fb90_Package> __param_package) {
		this->self = jule::Ref<_11265fb90_ImportInfo>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_path = __param_path;
		this->_field_link_path = __param_link_path;
		this->_field_ident = __param_ident;
		this->_field_duplicate = __param_duplicate;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_std = __param_std;
		this->_field_import_all = __param_import_all;
		this->_field_selected = __param_selected;
		this->_field_package = __param_package;
	}

	~_11265fb90_ImportInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11265fb90_ImportInfo(void) { this->self = jule::Ref<_11265fb90_ImportInfo>::make(this, nullptr); }

	inline jule::Ref<_11265fb90_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_11265fb90_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)>);


	inline jule::Ref<_1320e22c0_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_1217f7750_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_11209db80_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_112446fb0_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_11209e2e0_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_11261eaf0_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_lookupable(jule::Str);


	inline jule::Bool _method_exist_ident(jule::Str);


	inline bool operator==(const _11265fb90_ImportInfo &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_path == _Src._field_path &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_ident == _Src._field_ident &&
			this->_field_duplicate == _Src._field_duplicate &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std &&
			this->_field_import_all == _Src._field_import_all &&
			this->_field_selected == _Src._field_selected &&
			this->_field_package == _Src._field_package;
	}

	inline bool operator!=(const _11265fb90_ImportInfo &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_ScopeLabel {
	jule::Ref<_1126288e0_ScopeLabel> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Ref<_1126288e0_Label> _field_label{jule::Ref<_1126288e0_Label>()};
	jule::Int _field_pos{jule::Int()};
	jule::Ref<_1126288e0_ScopeChecker> _field_scope{jule::Ref<_1126288e0_ScopeChecker>()};
	jule::Bool _field_used{jule::Bool()};


	_1126288e0_ScopeLabel(_111613f20_Token __param_token, jule::Ref<_1126288e0_Label> __param_label, jule::Int __param_pos, jule::Ref<_1126288e0_ScopeChecker> __param_scope, jule::Bool __param_used) {
		this->self = jule::Ref<_1126288e0_ScopeLabel>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_label = __param_label;
		this->_field_pos = __param_pos;
		this->_field_scope = __param_scope;
		this->_field_used = __param_used;
	}

	~_1126288e0_ScopeLabel(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_ScopeLabel(void) { this->self = jule::Ref<_1126288e0_ScopeLabel>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_ScopeLabel &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label &&
			this->_field_pos == _Src._field_pos &&
			this->_field_scope == _Src._field_scope &&
			this->_field_used == _Src._field_used;
	}

	inline bool operator!=(const _1126288e0_ScopeLabel &_Src) { return !this->operator==(_Src); }
};


struct _112626410_Impl {
	jule::Ref<_112626410_Impl> self{};

	_111613f20_Token _field_base{_111613f20_Token()};
	_111613f20_Token _field_dest{_111613f20_Token()};
	jule::Slice<jule::Ref<_112446fb0_Fn>> _field_methods{jule::Slice<jule::Ref<_112446fb0_Fn>>()};


	_112626410_Impl(_111613f20_Token __param_base, _111613f20_Token __param_dest, jule::Slice<jule::Ref<_112446fb0_Fn>> __param_methods) {
		this->self = jule::Ref<_112626410_Impl>::make(this, nullptr);

		this->_field_base = __param_base;
		this->_field_dest = __param_dest;
		this->_field_methods = __param_methods;
	}

	~_112626410_Impl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112626410_Impl(void) { this->self = jule::Ref<_112626410_Impl>::make(this, nullptr); }

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _112626410_Impl &_Src) {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _112626410_Impl &_Src) { return !this->operator==(_Src); }
};


struct _11261eaf0_Enum: public _1217f7750_Kind {
	jule::Ref<_11261eaf0_Enum> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Bool _field_public{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1217f7750_TypeSymbol> _field_kind{jule::Ref<_1217f7750_TypeSymbol>()};
	jule::Slice<jule::Ref<_11261eaf0_EnumItem>> _field_items{jule::Slice<jule::Ref<_11261eaf0_EnumItem>>()};
	jule::Str _field_doc{jule::Str()};


	_11261eaf0_Enum(_111613f20_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ref<_1217f7750_TypeSymbol> __param_kind, jule::Slice<jule::Ref<_11261eaf0_EnumItem>> __param_items, jule::Str __param_doc) {
		this->self = jule::Ref<_11261eaf0_Enum>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_public = __param_public;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
		this->_field_items = __param_items;
		this->_field_doc = __param_doc;
	}

	~_11261eaf0_Enum(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11261eaf0_Enum(void) { this->self = jule::Ref<_11261eaf0_Enum>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Ref<_11261eaf0_EnumItem> _method_find_item(jule::Str);


	inline bool operator==(const _11261eaf0_Enum &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc == _Src._field_doc;
	}

	inline bool operator!=(const _11261eaf0_Enum &_Src) { return !this->operator==(_Src); }
};


struct _11261eaf0_EnumItem {
	jule::Ref<_11261eaf0_EnumItem> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_121dedce0_Value> _field_value{jule::Ref<_121dedce0_Value>()};


	_11261eaf0_EnumItem(_111613f20_Token __param_token, jule::Str __param_ident, jule::Ref<_121dedce0_Value> __param_value) {
		this->self = jule::Ref<_11261eaf0_EnumItem>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_value = __param_value;
	}

	~_11261eaf0_EnumItem(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11261eaf0_EnumItem(void) { this->self = jule::Ref<_11261eaf0_EnumItem>::make(this, nullptr); }

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _11261eaf0_EnumItem &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _11261eaf0_EnumItem &_Src) { return !this->operator==(_Src); }
};


struct _11209e2e0_Trait: public _1217f7750_Kind {
	jule::Ref<_11209e2e0_Trait> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_public{jule::Bool()};
	jule::Str _field_doc{jule::Str()};
	jule::Slice<jule::Ref<_112446fb0_Fn>> _field_methods{jule::Slice<jule::Ref<_112446fb0_Fn>>()};
	jule::Slice<jule::Ref<_11209db80_Struct>> _field_implemented{jule::Slice<jule::Ref<_11209db80_Struct>>()};


	_11209e2e0_Trait(_111613f20_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Str __param_doc, jule::Slice<jule::Ref<_112446fb0_Fn>> __param_methods, jule::Slice<jule::Ref<_11209db80_Struct>> __param_implemented) {
		this->self = jule::Ref<_11209e2e0_Trait>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_public = __param_public;
		this->_field_doc = __param_doc;
		this->_field_methods = __param_methods;
		this->_field_implemented = __param_implemented;
	}

	~_11209e2e0_Trait(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11209e2e0_Trait(void) { this->self = jule::Ref<_11209e2e0_Trait>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ref<_1217f7750_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Ref<_112446fb0_Fn> _method_find_method(jule::Str);


	inline bool operator==(const _11209e2e0_Trait &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_doc == _Src._field_doc &&
			this->_field_methods == _Src._field_methods &&
			this->_field_implemented == _Src._field_implemented;
	}

	inline bool operator!=(const _11209e2e0_Trait &_Src) { return !this->operator==(_Src); }
};


struct _112572770_Pass {
	jule::Ref<_112572770_Pass> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_text{jule::Str()};


	_112572770_Pass(_111613f20_Token __param_token, jule::Str __param_text) {
		this->self = jule::Ref<_112572770_Pass>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_text = __param_text;
	}

	~_112572770_Pass(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112572770_Pass(void) { this->self = jule::Ref<_112572770_Pass>::make(this, nullptr); }

	inline bool operator==(const _112572770_Pass &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _112572770_Pass &_Src) { return !this->operator==(_Src); }
};


struct _112446fb0_Fn {
	jule::Ref<_112446fb0_Fn> self{};

	jule::Ref<_11262c360_Sema> _field_sema{jule::Ref<_11262c360_Sema>()};
	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Bool _field_global{jule::Bool()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_statically{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Slice<jule::Ref<_111612b20_Directive>> _field_directives{jule::Slice<jule::Ref<_111612b20_Directive>>()};
	jule::Str _field_doc{jule::Str()};
	jule::Ref<_111612b20_ScopeTree> _field_scope{jule::Ref<_111612b20_ScopeTree>()};
	jule::Slice<jule::Ref<_111612b20_GenericDecl>> _field_generics{jule::Slice<jule::Ref<_111612b20_GenericDecl>>()};
	jule::Ref<_112446fb0_RetType> _field_result{jule::Ref<_112446fb0_RetType>()};
	jule::Slice<jule::Ref<_112446fb0_Param>> _field_params{jule::Slice<jule::Ref<_112446fb0_Param>>()};
	jule::Ref<_11209db80_Struct> _field_owner{jule::Ref<_11209db80_Struct>()};
	jule::Slice<jule::Ref<_112446fb0_FnIns>> _field_instances{jule::Slice<jule::Ref<_112446fb0_FnIns>>()};


	_112446fb0_Fn(jule::Ref<_11262c360_Sema> __param_sema, _111613f20_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Str __param_ident, jule::Slice<jule::Ref<_111612b20_Directive>> __param_directives, jule::Str __param_doc, jule::Ref<_111612b20_ScopeTree> __param_scope, jule::Slice<jule::Ref<_111612b20_GenericDecl>> __param_generics, jule::Ref<_112446fb0_RetType> __param_result, jule::Slice<jule::Ref<_112446fb0_Param>> __param_params, jule::Ref<_11209db80_Struct> __param_owner, jule::Slice<jule::Ref<_112446fb0_FnIns>> __param_instances) {
		this->self = jule::Ref<_112446fb0_Fn>::make(this, nullptr);

		this->_field_sema = __param_sema;
		this->_field_token = __param_token;
		this->_field_global = __param_global;
		this->_field_unsafety = __param_unsafety;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_statically = __param_statically;
		this->_field_ident = __param_ident;
		this->_field_directives = __param_directives;
		this->_field_doc = __param_doc;
		this->_field_scope = __param_scope;
		this->_field_generics = __param_generics;
		this->_field_result = __param_result;
		this->_field_params = __param_params;
		this->_field_owner = __param_owner;
		this->_field_instances = __param_instances;
	}

	~_112446fb0_Fn(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112446fb0_Fn(void) { this->self = jule::Ref<_112446fb0_Fn>::make(this, nullptr); }

	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_method(void);


	inline jule::Bool _method_is_entry_point(void);


	inline jule::Bool _method_is_init(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_any_var(void);


	inline jule::Bool _method_parameters_uses_generics(void);


	inline jule::Bool _method_result_uses_generics(void);


	inline jule::Ref<_112446fb0_FnIns> _method_instance_force(void);


	inline jule::Ref<_112446fb0_FnIns> _method_instance(void);


	inline std::tuple<jule::Bool,jule::Int> _method_append_instance(jule::Ref<_112446fb0_FnIns>);


	inline bool operator==(const _112446fb0_Fn &_Src) {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params &&
			this->_field_owner == _Src._field_owner &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _112446fb0_Fn &_Src) { return !this->operator==(_Src); }
};


struct _112446fb0_Param {
	jule::Ref<_112446fb0_Param> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_variadic{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Ref<_1217f7750_TypeSymbol> _field_kind{jule::Ref<_1217f7750_TypeSymbol>()};
	jule::Str _field_ident{jule::Str()};


	_112446fb0_Param(_111613f20_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ref<_1217f7750_TypeSymbol> __param_kind, jule::Str __param_ident) {
		this->self = jule::Ref<_112446fb0_Param>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_mutable = __param_mutable;
		this->_field_variadic = __param_variadic;
		this->_field_reference = __param_reference;
		this->_field_kind = __param_kind;
		this->_field_ident = __param_ident;
	}

	~_112446fb0_Param(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112446fb0_Param(void) { this->self = jule::Ref<_112446fb0_Param>::make(this, nullptr); }

	inline jule::Ref<_112446fb0_ParamIns> _method_instance(void);


	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _112446fb0_Param &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _112446fb0_Param &_Src) { return !this->operator==(_Src); }
};


struct _11209db80_Field {
	jule::Ref<_11209db80_Field> self{};

	jule::Ref<_11209db80_Struct> _field_owner{jule::Ref<_11209db80_Struct>()};
	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_1217f7750_TypeSymbol> _field_kind{jule::Ref<_1217f7750_TypeSymbol>()};


	_11209db80_Field(jule::Ref<_11209db80_Struct> __param_owner, _111613f20_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ref<_1217f7750_TypeSymbol> __param_kind) {
		this->self = jule::Ref<_11209db80_Field>::make(this, nullptr);

		this->_field_owner = __param_owner;
		this->_field_token = __param_token;
		this->_field_public = __param_public;
		this->_field_mutable = __param_mutable;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
	}

	~_11209db80_Field(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11209db80_Field(void) { this->self = jule::Ref<_11209db80_Field>::make(this, nullptr); }

	inline jule::Ref<_11209db80_FieldIns> _method_instance(void);


	inline bool operator==(const _11209db80_Field &_Src) {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _11209db80_Field &_Src) { return !this->operator==(_Src); }
};


struct _111654d60_AssignInfo {
	jule::Ref<_111654d60_AssignInfo> self{};

	jule::Slice<_111613f20_Token> _field_l{jule::Slice<_111613f20_Token>()};
	jule::Slice<_111613f20_Token> _field_r{jule::Slice<_111613f20_Token>()};
	_111613f20_Token _field_setter{_111613f20_Token()};
	jule::Bool _field_ok{jule::Bool()};


	_111654d60_AssignInfo(jule::Slice<_111613f20_Token> __param_l, jule::Slice<_111613f20_Token> __param_r, _111613f20_Token __param_setter, jule::Bool __param_ok) {
		this->self = jule::Ref<_111654d60_AssignInfo>::make(this, nullptr);

		this->_field_l = __param_l;
		this->_field_r = __param_r;
		this->_field_setter = __param_setter;
		this->_field_ok = __param_ok;
	}

	~_111654d60_AssignInfo(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111654d60_AssignInfo(void) { this->self = jule::Ref<_111654d60_AssignInfo>::make(this, nullptr); }

	inline bool operator==(const _111654d60_AssignInfo &_Src) {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_setter == _Src._field_setter &&
			this->_field_ok == _Src._field_ok;
	}

	inline bool operator!=(const _111654d60_AssignInfo &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_Impl {
	jule::Ref<_111612b20_Impl> self{};

	_111613f20_Token _field_base{_111613f20_Token()};
	_111613f20_Token _field_dest{_111613f20_Token()};
	jule::Slice<jule::Ref<_111612b20_FnDecl>> _field_methods{jule::Slice<jule::Ref<_111612b20_FnDecl>>()};


	_111612b20_Impl(_111613f20_Token __param_base, _111613f20_Token __param_dest, jule::Slice<jule::Ref<_111612b20_FnDecl>> __param_methods) {
		this->self = jule::Ref<_111612b20_Impl>::make(this, nullptr);

		this->_field_base = __param_base;
		this->_field_dest = __param_dest;
		this->_field_methods = __param_methods;
	}

	~_111612b20_Impl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_Impl(void) { this->self = jule::Ref<_111612b20_Impl>::make(this, nullptr); }

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _111612b20_Impl &_Src) {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _111612b20_Impl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_TraitDecl {
	jule::Ref<_111612b20_TraitDecl> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_public{jule::Bool()};
	jule::Ref<_111612b20_CommentGroup> _field_doc_comments{jule::Ref<_111612b20_CommentGroup>()};
	jule::Slice<jule::Ref<_111612b20_FnDecl>> _field_methods{jule::Slice<jule::Ref<_111612b20_FnDecl>>()};


	_111612b20_TraitDecl(_111613f20_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Ref<_111612b20_CommentGroup> __param_doc_comments, jule::Slice<jule::Ref<_111612b20_FnDecl>> __param_methods) {
		this->self = jule::Ref<_111612b20_TraitDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_public = __param_public;
		this->_field_doc_comments = __param_doc_comments;
		this->_field_methods = __param_methods;
	}

	~_111612b20_TraitDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_TraitDecl(void) { this->self = jule::Ref<_111612b20_TraitDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_TraitDecl &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _111612b20_TraitDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_StructDecl {
	jule::Ref<_111612b20_StructDecl> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Slice<jule::Ref<_111612b20_FieldDecl>> _field_fields{jule::Slice<jule::Ref<_111612b20_FieldDecl>>()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Slice<jule::Ref<_111612b20_Directive>> _field_directives{jule::Slice<jule::Ref<_111612b20_Directive>>()};
	jule::Ref<_111612b20_CommentGroup> _field_doc_comments{jule::Ref<_111612b20_CommentGroup>()};
	jule::Slice<jule::Ref<_111612b20_GenericDecl>> _field_generics{jule::Slice<jule::Ref<_111612b20_GenericDecl>>()};


	_111612b20_StructDecl(_111613f20_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ref<_111612b20_FieldDecl>> __param_fields, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ref<_111612b20_Directive>> __param_directives, jule::Ref<_111612b20_CommentGroup> __param_doc_comments, jule::Slice<jule::Ref<_111612b20_GenericDecl>> __param_generics) {
		this->self = jule::Ref<_111612b20_StructDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_fields = __param_fields;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_directives = __param_directives;
		this->_field_doc_comments = __param_doc_comments;
		this->_field_generics = __param_generics;
	}

	~_111612b20_StructDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_StructDecl(void) { this->self = jule::Ref<_111612b20_StructDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_StructDecl &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _111612b20_StructDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_FieldDecl {
	jule::Ref<_111612b20_FieldDecl> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_111612b20_TypeDecl> _field_kind{jule::Ref<_111612b20_TypeDecl>()};


	_111612b20_FieldDecl(_111613f20_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ref<_111612b20_TypeDecl> __param_kind) {
		this->self = jule::Ref<_111612b20_FieldDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_public = __param_public;
		this->_field_mutable = __param_mutable;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
	}

	~_111612b20_FieldDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_FieldDecl(void) { this->self = jule::Ref<_111612b20_FieldDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_FieldDecl &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _111612b20_FieldDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_EnumDecl {
	jule::Ref<_111612b20_EnumDecl> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Bool _field_public{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_111612b20_TypeDecl> _field_kind{jule::Ref<_111612b20_TypeDecl>()};
	jule::Slice<jule::Ref<_111612b20_EnumItemDecl>> _field_items{jule::Slice<jule::Ref<_111612b20_EnumItemDecl>>()};
	jule::Ref<_111612b20_CommentGroup> _field_doc_comments{jule::Ref<_111612b20_CommentGroup>()};


	_111612b20_EnumDecl(_111613f20_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ref<_111612b20_TypeDecl> __param_kind, jule::Slice<jule::Ref<_111612b20_EnumItemDecl>> __param_items, jule::Ref<_111612b20_CommentGroup> __param_doc_comments) {
		this->self = jule::Ref<_111612b20_EnumDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_public = __param_public;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
		this->_field_items = __param_items;
		this->_field_doc_comments = __param_doc_comments;
	}

	~_111612b20_EnumDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_EnumDecl(void) { this->self = jule::Ref<_111612b20_EnumDecl>::make(this, nullptr); }

	inline jule::Bool _method_default_typed(void);


	inline bool operator==(const _111612b20_EnumDecl &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _111612b20_EnumDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_EnumItemDecl {
	jule::Ref<_111612b20_EnumItemDecl> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_111612b20_Expr> _field_expr{jule::Ref<_111612b20_Expr>()};


	_111612b20_EnumItemDecl(_111613f20_Token __param_token, jule::Str __param_ident, jule::Ref<_111612b20_Expr> __param_expr) {
		this->self = jule::Ref<_111612b20_EnumItemDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_expr = __param_expr;
	}

	~_111612b20_EnumItemDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_EnumItemDecl(void) { this->self = jule::Ref<_111612b20_EnumItemDecl>::make(this, nullptr); }

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _111612b20_EnumItemDecl &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _111612b20_EnumItemDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_UseDecl {
	jule::Ref<_111612b20_UseDecl> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_link_path{jule::Str()};
	jule::Bool _field_full{jule::Bool()};
	jule::Slice<_111613f20_Token> _field_selected{jule::Slice<_111613f20_Token>()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_std{jule::Bool()};


	_111612b20_UseDecl(_111613f20_Token __param_token, jule::Str __param_link_path, jule::Bool __param_full, jule::Slice<_111613f20_Token> __param_selected, jule::Bool __param_cpp_linked, jule::Bool __param_std) {
		this->self = jule::Ref<_111612b20_UseDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_link_path = __param_link_path;
		this->_field_full = __param_full;
		this->_field_selected = __param_selected;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_std = __param_std;
	}

	~_111612b20_UseDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_UseDecl(void) { this->self = jule::Ref<_111612b20_UseDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_UseDecl &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_full == _Src._field_full &&
			this->_field_selected == _Src._field_selected &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std;
	}

	inline bool operator!=(const _111612b20_UseDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_Case {
	jule::Ref<_111612b20_Case> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Ref<_111612b20_ScopeTree> _field_scope{jule::Ref<_111612b20_ScopeTree>()};
	jule::Slice<jule::Ref<_111612b20_Expr>> _field_exprs{jule::Slice<jule::Ref<_111612b20_Expr>>()};


	_111612b20_Case(_111613f20_Token __param_token, jule::Ref<_111612b20_ScopeTree> __param_scope, jule::Slice<jule::Ref<_111612b20_Expr>> __param_exprs) {
		this->self = jule::Ref<_111612b20_Case>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_scope = __param_scope;
		this->_field_exprs = __param_exprs;
	}

	~_111612b20_Case(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_Case(void) { this->self = jule::Ref<_111612b20_Case>::make(this, nullptr); }

	inline bool operator==(const _111612b20_Case &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _111612b20_Case &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_TypeAliasDecl {
	jule::Ref<_111612b20_TypeAliasDecl> self{};

	jule::Ref<_111612b20_ScopeTree> _field_scope{jule::Ref<_111612b20_ScopeTree>()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_111612b20_TypeDecl> _field_kind{jule::Ref<_111612b20_TypeDecl>()};
	jule::Ref<_111612b20_CommentGroup> _field_doc_comments{jule::Ref<_111612b20_CommentGroup>()};


	_111612b20_TypeAliasDecl(jule::Ref<_111612b20_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, _111613f20_Token __param_token, jule::Str __param_ident, jule::Ref<_111612b20_TypeDecl> __param_kind, jule::Ref<_111612b20_CommentGroup> __param_doc_comments) {
		this->self = jule::Ref<_111612b20_TypeAliasDecl>::make(this, nullptr);

		this->_field_scope = __param_scope;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_kind = __param_kind;
		this->_field_doc_comments = __param_doc_comments;
	}

	~_111612b20_TypeAliasDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_TypeAliasDecl(void) { this->self = jule::Ref<_111612b20_TypeAliasDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_TypeAliasDecl &_Src) {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _111612b20_TypeAliasDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_Else {
	jule::Ref<_111612b20_Else> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Ref<_111612b20_ScopeTree> _field_scope{jule::Ref<_111612b20_ScopeTree>()};


	_111612b20_Else(_111613f20_Token __param_token, jule::Ref<_111612b20_ScopeTree> __param_scope) {
		this->self = jule::Ref<_111612b20_Else>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_scope = __param_scope;
	}

	~_111612b20_Else(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_Else(void) { this->self = jule::Ref<_111612b20_Else>::make(this, nullptr); }

	inline bool operator==(const _111612b20_Else &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _111612b20_Else &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_If {
	jule::Ref<_111612b20_If> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Ref<_111612b20_Expr> _field_expr{jule::Ref<_111612b20_Expr>()};
	jule::Ref<_111612b20_ScopeTree> _field_scope{jule::Ref<_111612b20_ScopeTree>()};


	_111612b20_If(_111613f20_Token __param_token, jule::Ref<_111612b20_Expr> __param_expr, jule::Ref<_111612b20_ScopeTree> __param_scope) {
		this->self = jule::Ref<_111612b20_If>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
		this->_field_scope = __param_scope;
	}

	~_111612b20_If(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_If(void) { this->self = jule::Ref<_111612b20_If>::make(this, nullptr); }

	inline bool operator==(const _111612b20_If &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _111612b20_If &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_ContSt {
	jule::Ref<_111612b20_ContSt> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	_111613f20_Token _field_label{_111613f20_Token()};


	_111612b20_ContSt(_111613f20_Token __param_token, _111613f20_Token __param_label) {
		this->self = jule::Ref<_111612b20_ContSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_label = __param_label;
	}

	~_111612b20_ContSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_ContSt(void) { this->self = jule::Ref<_111612b20_ContSt>::make(this, nullptr); }

	inline bool operator==(const _111612b20_ContSt &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _111612b20_ContSt &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_BreakSt {
	jule::Ref<_111612b20_BreakSt> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	_111613f20_Token _field_label{_111613f20_Token()};


	_111612b20_BreakSt(_111613f20_Token __param_token, _111613f20_Token __param_label) {
		this->self = jule::Ref<_111612b20_BreakSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_label = __param_label;
	}

	~_111612b20_BreakSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_BreakSt(void) { this->self = jule::Ref<_111612b20_BreakSt>::make(this, nullptr); }

	inline bool operator==(const _111612b20_BreakSt &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _111612b20_BreakSt &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_VarDecl {
	jule::Ref<_111612b20_VarDecl> self{};

	jule::Ref<_111612b20_ScopeTree> _field_scope{jule::Ref<_111612b20_ScopeTree>()};
	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_constant{jule::Bool()};
	jule::Bool _field_statically{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Ref<_111612b20_CommentGroup> _field_doc_comments{jule::Ref<_111612b20_CommentGroup>()};
	jule::Ref<_111612b20_TypeDecl> _field_kind{jule::Ref<_111612b20_TypeDecl>()};
	jule::Ref<_111612b20_Expr> _field_expr{jule::Ref<_111612b20_Expr>()};


	_111612b20_VarDecl(jule::Ref<_111612b20_ScopeTree> __param_scope, _111613f20_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_public, jule::Bool __param_mutable, jule::Bool __param_constant, jule::Bool __param_statically, jule::Bool __param_reference, jule::Ref<_111612b20_CommentGroup> __param_doc_comments, jule::Ref<_111612b20_TypeDecl> __param_kind, jule::Ref<_111612b20_Expr> __param_expr) {
		this->self = jule::Ref<_111612b20_VarDecl>::make(this, nullptr);

		this->_field_scope = __param_scope;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_public = __param_public;
		this->_field_mutable = __param_mutable;
		this->_field_constant = __param_constant;
		this->_field_statically = __param_statically;
		this->_field_reference = __param_reference;
		this->_field_doc_comments = __param_doc_comments;
		this->_field_kind = __param_kind;
		this->_field_expr = __param_expr;
	}

	~_111612b20_VarDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_VarDecl(void) { this->self = jule::Ref<_111612b20_VarDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_VarDecl &_Src) {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_constant == _Src._field_constant &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _111612b20_VarDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_FnDecl {
	jule::Ref<_111612b20_FnDecl> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Bool _field_global{jule::Bool()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Bool _field_statically{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Slice<jule::Ref<_111612b20_Directive>> _field_directives{jule::Slice<jule::Ref<_111612b20_Directive>>()};
	jule::Ref<_111612b20_CommentGroup> _field_doc_comments{jule::Ref<_111612b20_CommentGroup>()};
	jule::Ref<_111612b20_ScopeTree> _field_scope{jule::Ref<_111612b20_ScopeTree>()};
	jule::Slice<jule::Ref<_111612b20_GenericDecl>> _field_generics{jule::Slice<jule::Ref<_111612b20_GenericDecl>>()};
	jule::Ref<_111612b20_RetTypeDecl> _field_result{jule::Ref<_111612b20_RetTypeDecl>()};
	jule::Slice<jule::Ref<_111612b20_ParamDecl>> _field_params{jule::Slice<jule::Ref<_111612b20_ParamDecl>>()};


	_111612b20_FnDecl(_111613f20_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Str __param_ident, jule::Slice<jule::Ref<_111612b20_Directive>> __param_directives, jule::Ref<_111612b20_CommentGroup> __param_doc_comments, jule::Ref<_111612b20_ScopeTree> __param_scope, jule::Slice<jule::Ref<_111612b20_GenericDecl>> __param_generics, jule::Ref<_111612b20_RetTypeDecl> __param_result, jule::Slice<jule::Ref<_111612b20_ParamDecl>> __param_params) {
		this->self = jule::Ref<_111612b20_FnDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_global = __param_global;
		this->_field_unsafety = __param_unsafety;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_statically = __param_statically;
		this->_field_ident = __param_ident;
		this->_field_directives = __param_directives;
		this->_field_doc_comments = __param_doc_comments;
		this->_field_scope = __param_scope;
		this->_field_generics = __param_generics;
		this->_field_result = __param_result;
		this->_field_params = __param_params;
	}

	~_111612b20_FnDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_FnDecl(void) { this->self = jule::Ref<_111612b20_FnDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_FnDecl &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params;
	}

	inline bool operator!=(const _111612b20_FnDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_ParamDecl {
	jule::Ref<_111612b20_ParamDecl> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_variadic{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Ref<_111612b20_TypeDecl> _field_kind{jule::Ref<_111612b20_TypeDecl>()};
	jule::Str _field_ident{jule::Str()};


	_111612b20_ParamDecl(_111613f20_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ref<_111612b20_TypeDecl> __param_kind, jule::Str __param_ident) {
		this->self = jule::Ref<_111612b20_ParamDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_mutable = __param_mutable;
		this->_field_variadic = __param_variadic;
		this->_field_reference = __param_reference;
		this->_field_kind = __param_kind;
		this->_field_ident = __param_ident;
	}

	~_111612b20_ParamDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_ParamDecl(void) { this->self = jule::Ref<_111612b20_ParamDecl>::make(this, nullptr); }

	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _111612b20_ParamDecl &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _111612b20_ParamDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_AssignLeft {
	jule::Ref<_111612b20_AssignLeft> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Bool _field_mutable{jule::Bool()};
	jule::Bool _field_reference{jule::Bool()};
	jule::Str _field_ident{jule::Str()};
	jule::Ref<_111612b20_Expr> _field_expr{jule::Ref<_111612b20_Expr>()};


	_111612b20_AssignLeft(_111613f20_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Str __param_ident, jule::Ref<_111612b20_Expr> __param_expr) {
		this->self = jule::Ref<_111612b20_AssignLeft>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_mutable = __param_mutable;
		this->_field_reference = __param_reference;
		this->_field_ident = __param_ident;
		this->_field_expr = __param_expr;
	}

	~_111612b20_AssignLeft(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_AssignLeft(void) { this->self = jule::Ref<_111612b20_AssignLeft>::make(this, nullptr); }

	inline bool operator==(const _111612b20_AssignLeft &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _111612b20_AssignLeft &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_GotoSt {
	jule::Ref<_111612b20_GotoSt> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	_111613f20_Token _field_label{_111613f20_Token()};


	_111612b20_GotoSt(_111613f20_Token __param_token, _111613f20_Token __param_label) {
		this->self = jule::Ref<_111612b20_GotoSt>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_label = __param_label;
	}

	~_111612b20_GotoSt(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_GotoSt(void) { this->self = jule::Ref<_111612b20_GotoSt>::make(this, nullptr); }

	inline bool operator==(const _111612b20_GotoSt &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _111612b20_GotoSt &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_GenericDecl {
	jule::Ref<_111612b20_GenericDecl> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};


	_111612b20_GenericDecl(_111613f20_Token __param_token, jule::Str __param_ident) {
		this->self = jule::Ref<_111612b20_GenericDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
	}

	~_111612b20_GenericDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_GenericDecl(void) { this->self = jule::Ref<_111612b20_GenericDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_GenericDecl &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _111612b20_GenericDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_FnCallExpr {
	jule::Ref<_111612b20_FnCallExpr> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Ref<_111612b20_Expr> _field_expr{jule::Ref<_111612b20_Expr>()};
	jule::Slice<jule::Ref<_111612b20_TypeDecl>> _field_generics{jule::Slice<jule::Ref<_111612b20_TypeDecl>>()};
	jule::Slice<jule::Ref<_111612b20_Expr>> _field_args{jule::Slice<jule::Ref<_111612b20_Expr>>()};
	jule::Bool _field_concurrent{jule::Bool()};


	_111612b20_FnCallExpr(_111613f20_Token __param_token, jule::Ref<_111612b20_Expr> __param_expr, jule::Slice<jule::Ref<_111612b20_TypeDecl>> __param_generics, jule::Slice<jule::Ref<_111612b20_Expr>> __param_args, jule::Bool __param_concurrent) {
		this->self = jule::Ref<_111612b20_FnCallExpr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_expr = __param_expr;
		this->_field_generics = __param_generics;
		this->_field_args = __param_args;
		this->_field_concurrent = __param_concurrent;
	}

	~_111612b20_FnCallExpr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_FnCallExpr(void) { this->self = jule::Ref<_111612b20_FnCallExpr>::make(this, nullptr); }

	inline bool operator==(const _111612b20_FnCallExpr &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_generics == _Src._field_generics &&
			this->_field_args == _Src._field_args &&
			this->_field_concurrent == _Src._field_concurrent;
	}

	inline bool operator!=(const _111612b20_FnCallExpr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_Expr {
	jule::Ref<_111612b20_Expr> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Any _field_kind{jule::Any()};


	_111612b20_Expr(_111613f20_Token __param_token, jule::Any __param_kind) {
		this->self = jule::Ref<_111612b20_Expr>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_kind = __param_kind;
	}

	~_111612b20_Expr(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_Expr(void) { this->self = jule::Ref<_111612b20_Expr>::make(this, nullptr); }

	inline jule::Bool _method_is_fn_call(void);


	inline bool operator==(const _111612b20_Expr &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _111612b20_Expr &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_IdentTypeDecl {
	jule::Ref<_111612b20_IdentTypeDecl> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Slice<jule::Ref<_111612b20_TypeDecl>> _field_generics{jule::Slice<jule::Ref<_111612b20_TypeDecl>>()};


	_111612b20_IdentTypeDecl(_111613f20_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Slice<jule::Ref<_111612b20_TypeDecl>> __param_generics) {
		this->self = jule::Ref<_111612b20_IdentTypeDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_generics = __param_generics;
	}

	~_111612b20_IdentTypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_IdentTypeDecl(void) { this->self = jule::Ref<_111612b20_IdentTypeDecl>::make(this, nullptr); }

	inline jule::Bool _method_is_prim(void);


	inline bool operator==(const _111612b20_IdentTypeDecl &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _111612b20_IdentTypeDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_TypeDecl {
	jule::Ref<_111612b20_TypeDecl> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Any _field_kind{jule::Any()};


	_111612b20_TypeDecl(_111613f20_Token __param_token, jule::Any __param_kind) {
		this->self = jule::Ref<_111612b20_TypeDecl>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_kind = __param_kind;
	}

	~_111612b20_TypeDecl(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_TypeDecl(void) { this->self = jule::Ref<_111612b20_TypeDecl>::make(this, nullptr); }

	inline bool operator==(const _111612b20_TypeDecl &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _111612b20_TypeDecl &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_Directive {
	jule::Ref<_111612b20_Directive> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_tag{jule::Str()};
	jule::Slice<jule::Str> _field_args{jule::Slice<jule::Str>()};


	_111612b20_Directive(_111613f20_Token __param_token, jule::Str __param_tag, jule::Slice<jule::Str> __param_args) {
		this->self = jule::Ref<_111612b20_Directive>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_tag = __param_tag;
		this->_field_args = __param_args;
	}

	~_111612b20_Directive(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_Directive(void) { this->self = jule::Ref<_111612b20_Directive>::make(this, nullptr); }

	inline bool operator==(const _111612b20_Directive &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_tag == _Src._field_tag &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _111612b20_Directive &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_Comment {
	jule::Ref<_111612b20_Comment> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_text{jule::Str()};


	_111612b20_Comment(_111613f20_Token __param_token, jule::Str __param_text) {
		this->self = jule::Ref<_111612b20_Comment>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_text = __param_text;
	}

	~_111612b20_Comment(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_Comment(void) { this->self = jule::Ref<_111612b20_Comment>::make(this, nullptr); }

	inline jule::Bool _method_is_directive(void);


	inline bool operator==(const _111612b20_Comment &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _111612b20_Comment &_Src) { return !this->operator==(_Src); }
};


struct _111612b20_Node {
	jule::Ref<_111612b20_Node> self{};

	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Any _field_data{jule::Any()};


	_111612b20_Node(_111613f20_Token __param_token, jule::Any __param_data) {
		this->self = jule::Ref<_111612b20_Node>::make(this, nullptr);

		this->_field_token = __param_token;
		this->_field_data = __param_data;
	}

	~_111612b20_Node(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_111612b20_Node(void) { this->self = jule::Ref<_111612b20_Node>::make(this, nullptr); }

	inline jule::Bool _method_is_decl(void);


	inline jule::Bool _method_is_comment(void);


	inline jule::Bool _method_is_impl(void);


	inline jule::Bool _method_is_use_decl(void);


	inline bool operator==(const _111612b20_Node &_Src) {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _111612b20_Node &_Src) { return !this->operator==(_Src); }
};


struct _11203c360_Vector_0 {
	jule::Ref<_11203c360_Vector_0> self{};

	StdJuleVectorBuffer<_111613f20_Token> _field__buffer{StdJuleVectorBuffer<_111613f20_Token>()};


	_11203c360_Vector_0(StdJuleVectorBuffer<_111613f20_Token> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_0>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_0(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_0(void) { this->self = jule::Ref<_11203c360_Vector_0>::make(this, nullptr); }

	static inline _11203c360_Vector_0 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline _111613f20_Token _method_at(jule::Int);


	inline void _method_set(jule::Int,_111613f20_Token);


	inline void _method_push(_111613f20_Token);


	inline void _method_push_front(_111613f20_Token);


	inline void _method_append(jule::Slice<_111613f20_Token>);


	inline void _method_merge(_11203c360_Vector_0);


	inline void _method_merge_front(_11203c360_Vector_0);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,_111613f20_Token);


	inline _11203c360_Vector_0 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_0 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_0 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_1 {
	jule::Ref<_11203c360_Vector_1> self{};

	StdJuleVectorBuffer<jule::Ref<_111612b20_Directive>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_111612b20_Directive>>()};


	_11203c360_Vector_1(StdJuleVectorBuffer<jule::Ref<_111612b20_Directive>> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_1>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_1(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_1(void) { this->self = jule::Ref<_11203c360_Vector_1>::make(this, nullptr); }

	static inline _11203c360_Vector_1 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_111612b20_Directive> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_111612b20_Directive>);


	inline void _method_push(jule::Ref<_111612b20_Directive>);


	inline void _method_push_front(jule::Ref<_111612b20_Directive>);


	inline void _method_append(jule::Slice<jule::Ref<_111612b20_Directive>>);


	inline void _method_merge(_11203c360_Vector_1);


	inline void _method_merge_front(_11203c360_Vector_1);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_111612b20_Directive>);


	inline _11203c360_Vector_1 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_1 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_1 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_2 {
	jule::Ref<_11203c360_Vector_2> self{};

	StdJuleVectorBuffer<jule::Ref<_111612b20_UseDecl>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_111612b20_UseDecl>>()};


	_11203c360_Vector_2(StdJuleVectorBuffer<jule::Ref<_111612b20_UseDecl>> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_2>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_2(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_2(void) { this->self = jule::Ref<_11203c360_Vector_2>::make(this, nullptr); }

	static inline _11203c360_Vector_2 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_111612b20_UseDecl> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_111612b20_UseDecl>);


	inline void _method_push(jule::Ref<_111612b20_UseDecl>);


	inline void _method_push_front(jule::Ref<_111612b20_UseDecl>);


	inline void _method_append(jule::Slice<jule::Ref<_111612b20_UseDecl>>);


	inline void _method_merge(_11203c360_Vector_2);


	inline void _method_merge_front(_11203c360_Vector_2);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_111612b20_UseDecl>);


	inline _11203c360_Vector_2 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_2 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_2 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_3 {
	jule::Ref<_11203c360_Vector_3> self{};

	StdJuleVectorBuffer<jule::Ref<_111612b20_Impl>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_111612b20_Impl>>()};


	_11203c360_Vector_3(StdJuleVectorBuffer<jule::Ref<_111612b20_Impl>> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_3>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_3(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_3(void) { this->self = jule::Ref<_11203c360_Vector_3>::make(this, nullptr); }

	static inline _11203c360_Vector_3 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_111612b20_Impl> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_111612b20_Impl>);


	inline void _method_push(jule::Ref<_111612b20_Impl>);


	inline void _method_push_front(jule::Ref<_111612b20_Impl>);


	inline void _method_append(jule::Slice<jule::Ref<_111612b20_Impl>>);


	inline void _method_merge(_11203c360_Vector_3);


	inline void _method_merge_front(_11203c360_Vector_3);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_111612b20_Impl>);


	inline _11203c360_Vector_3 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_3 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_3 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_4 {
	jule::Ref<_11203c360_Vector_4> self{};

	StdJuleVectorBuffer<jule::Ref<_111612b20_Comment>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_111612b20_Comment>>()};


	_11203c360_Vector_4(StdJuleVectorBuffer<jule::Ref<_111612b20_Comment>> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_4>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_4(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_4(void) { this->self = jule::Ref<_11203c360_Vector_4>::make(this, nullptr); }

	static inline _11203c360_Vector_4 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_111612b20_Comment> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_111612b20_Comment>);


	inline void _method_push(jule::Ref<_111612b20_Comment>);


	inline void _method_push_front(jule::Ref<_111612b20_Comment>);


	inline void _method_append(jule::Slice<jule::Ref<_111612b20_Comment>>);


	inline void _method_merge(_11203c360_Vector_4);


	inline void _method_merge_front(_11203c360_Vector_4);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_111612b20_Comment>);


	inline _11203c360_Vector_4 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_4 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_4 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_5 {
	jule::Ref<_11203c360_Vector_5> self{};

	StdJuleVectorBuffer<_111612b20_Node> _field__buffer{StdJuleVectorBuffer<_111612b20_Node>()};


	_11203c360_Vector_5(StdJuleVectorBuffer<_111612b20_Node> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_5>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_5(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_5(void) { this->self = jule::Ref<_11203c360_Vector_5>::make(this, nullptr); }

	static inline _11203c360_Vector_5 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline _111612b20_Node _method_at(jule::Int);


	inline void _method_set(jule::Int,_111612b20_Node);


	inline void _method_push(_111612b20_Node);


	inline void _method_push_front(_111612b20_Node);


	inline void _method_append(jule::Slice<_111612b20_Node>);


	inline void _method_merge(_11203c360_Vector_5);


	inline void _method_merge_front(_11203c360_Vector_5);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,_111612b20_Node);


	inline _11203c360_Vector_5 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_5 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_5 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_6 {
	jule::Ref<_11203c360_Vector_6> self{};

	StdJuleVectorBuffer<_112572770_Pass> _field__buffer{StdJuleVectorBuffer<_112572770_Pass>()};


	_11203c360_Vector_6(StdJuleVectorBuffer<_112572770_Pass> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_6>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_6(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_6(void) { this->self = jule::Ref<_11203c360_Vector_6>::make(this, nullptr); }

	static inline _11203c360_Vector_6 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline _112572770_Pass _method_at(jule::Int);


	inline void _method_set(jule::Int,_112572770_Pass);


	inline void _method_push(_112572770_Pass);


	inline void _method_push_front(_112572770_Pass);


	inline void _method_append(jule::Slice<_112572770_Pass>);


	inline void _method_merge(_11203c360_Vector_6);


	inline void _method_merge_front(_11203c360_Vector_6);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,_112572770_Pass);


	inline _11203c360_Vector_6 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_6 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_6 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_7 {
	jule::Ref<_11203c360_Vector_7> self{};

	StdJuleVectorBuffer<jule::Ref<_11265fb90_ImportInfo>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_11265fb90_ImportInfo>>()};


	_11203c360_Vector_7(StdJuleVectorBuffer<jule::Ref<_11265fb90_ImportInfo>> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_7>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_7(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_7(void) { this->self = jule::Ref<_11203c360_Vector_7>::make(this, nullptr); }

	static inline _11203c360_Vector_7 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_11265fb90_ImportInfo> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_11265fb90_ImportInfo>);


	inline void _method_push(jule::Ref<_11265fb90_ImportInfo>);


	inline void _method_push_front(jule::Ref<_11265fb90_ImportInfo>);


	inline void _method_append(jule::Slice<jule::Ref<_11265fb90_ImportInfo>>);


	inline void _method_merge(_11203c360_Vector_7);


	inline void _method_merge_front(_11203c360_Vector_7);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_11265fb90_ImportInfo>);


	inline _11203c360_Vector_7 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_7 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_7 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_8 {
	jule::Ref<_11203c360_Vector_8> self{};

	StdJuleVectorBuffer<jule::Any> _field__buffer{StdJuleVectorBuffer<jule::Any>()};


	_11203c360_Vector_8(StdJuleVectorBuffer<jule::Any> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_8>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_8(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_8(void) { this->self = jule::Ref<_11203c360_Vector_8>::make(this, nullptr); }

	static inline _11203c360_Vector_8 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Any _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Any);


	inline void _method_push(jule::Any);


	inline void _method_push_front(jule::Any);


	inline void _method_append(jule::Slice<jule::Any>);


	inline void _method_merge(_11203c360_Vector_8);


	inline void _method_merge_front(_11203c360_Vector_8);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Any);


	inline _11203c360_Vector_8 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_8 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_8 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_9 {
	jule::Ref<_11203c360_Vector_9> self{};

	StdJuleVectorBuffer<jule::Ref<_1320e22c0_Var>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_1320e22c0_Var>>()};


	_11203c360_Vector_9(StdJuleVectorBuffer<jule::Ref<_1320e22c0_Var>> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_9>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_9(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_9(void) { this->self = jule::Ref<_11203c360_Vector_9>::make(this, nullptr); }

	static inline _11203c360_Vector_9 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_1320e22c0_Var> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_1320e22c0_Var>);


	inline void _method_push(jule::Ref<_1320e22c0_Var>);


	inline void _method_push_front(jule::Ref<_1320e22c0_Var>);


	inline void _method_append(jule::Slice<jule::Ref<_1320e22c0_Var>>);


	inline void _method_merge(_11203c360_Vector_9);


	inline void _method_merge_front(_11203c360_Vector_9);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_1320e22c0_Var>);


	inline _11203c360_Vector_9 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_9 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_9 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_10 {
	jule::Ref<_11203c360_Vector_10> self{};

	StdJuleVectorBuffer<jule::Ref<_1217f7750_TypeAlias>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_1217f7750_TypeAlias>>()};


	_11203c360_Vector_10(StdJuleVectorBuffer<jule::Ref<_1217f7750_TypeAlias>> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_10>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_10(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_10(void) { this->self = jule::Ref<_11203c360_Vector_10>::make(this, nullptr); }

	static inline _11203c360_Vector_10 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_1217f7750_TypeAlias> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_1217f7750_TypeAlias>);


	inline void _method_push(jule::Ref<_1217f7750_TypeAlias>);


	inline void _method_push_front(jule::Ref<_1217f7750_TypeAlias>);


	inline void _method_append(jule::Slice<jule::Ref<_1217f7750_TypeAlias>>);


	inline void _method_merge(_11203c360_Vector_10);


	inline void _method_merge_front(_11203c360_Vector_10);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_1217f7750_TypeAlias>);


	inline _11203c360_Vector_10 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_10 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_10 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_11 {
	jule::Ref<_11203c360_Vector_11> self{};

	StdJuleVectorBuffer<jule::Ref<_112446fb0_Fn>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_112446fb0_Fn>>()};


	_11203c360_Vector_11(StdJuleVectorBuffer<jule::Ref<_112446fb0_Fn>> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_11>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_11(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_11(void) { this->self = jule::Ref<_11203c360_Vector_11>::make(this, nullptr); }

	static inline _11203c360_Vector_11 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_112446fb0_Fn> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_112446fb0_Fn>);


	inline void _method_push(jule::Ref<_112446fb0_Fn>);


	inline void _method_push_front(jule::Ref<_112446fb0_Fn>);


	inline void _method_append(jule::Slice<jule::Ref<_112446fb0_Fn>>);


	inline void _method_merge(_11203c360_Vector_11);


	inline void _method_merge_front(_11203c360_Vector_11);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_112446fb0_Fn>);


	inline _11203c360_Vector_11 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_11 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_11 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_12 {
	jule::Ref<_11203c360_Vector_12> self{};

	StdJuleVectorBuffer<jule::Ref<_11209db80_Struct>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_11209db80_Struct>>()};


	_11203c360_Vector_12(StdJuleVectorBuffer<jule::Ref<_11209db80_Struct>> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_12>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_12(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_12(void) { this->self = jule::Ref<_11203c360_Vector_12>::make(this, nullptr); }

	static inline _11203c360_Vector_12 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_11209db80_Struct> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_11209db80_Struct>);


	inline void _method_push(jule::Ref<_11209db80_Struct>);


	inline void _method_push_front(jule::Ref<_11209db80_Struct>);


	inline void _method_append(jule::Slice<jule::Ref<_11209db80_Struct>>);


	inline void _method_merge(_11203c360_Vector_12);


	inline void _method_merge_front(_11203c360_Vector_12);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_11209db80_Struct>);


	inline _11203c360_Vector_12 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_12 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_12 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_13 {
	jule::Ref<_11203c360_Vector_13> self{};

	StdJuleVectorBuffer<jule::Ref<_11209e2e0_Trait>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_11209e2e0_Trait>>()};


	_11203c360_Vector_13(StdJuleVectorBuffer<jule::Ref<_11209e2e0_Trait>> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_13>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_13(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_13(void) { this->self = jule::Ref<_11203c360_Vector_13>::make(this, nullptr); }

	static inline _11203c360_Vector_13 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_11209e2e0_Trait> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_11209e2e0_Trait>);


	inline void _method_push(jule::Ref<_11209e2e0_Trait>);


	inline void _method_push_front(jule::Ref<_11209e2e0_Trait>);


	inline void _method_append(jule::Slice<jule::Ref<_11209e2e0_Trait>>);


	inline void _method_merge(_11203c360_Vector_13);


	inline void _method_merge_front(_11203c360_Vector_13);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_11209e2e0_Trait>);


	inline _11203c360_Vector_13 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_13 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_13 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_14 {
	jule::Ref<_11203c360_Vector_14> self{};

	StdJuleVectorBuffer<jule::Ref<_11261eaf0_Enum>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_11261eaf0_Enum>>()};


	_11203c360_Vector_14(StdJuleVectorBuffer<jule::Ref<_11261eaf0_Enum>> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_14>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_14(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_14(void) { this->self = jule::Ref<_11203c360_Vector_14>::make(this, nullptr); }

	static inline _11203c360_Vector_14 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_11261eaf0_Enum> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_11261eaf0_Enum>);


	inline void _method_push(jule::Ref<_11261eaf0_Enum>);


	inline void _method_push_front(jule::Ref<_11261eaf0_Enum>);


	inline void _method_append(jule::Slice<jule::Ref<_11261eaf0_Enum>>);


	inline void _method_merge(_11203c360_Vector_14);


	inline void _method_merge_front(_11203c360_Vector_14);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_11261eaf0_Enum>);


	inline _11203c360_Vector_14 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_14 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_14 &_Src) { return !this->operator==(_Src); }
};

struct _11203c360_Vector_15 {
	jule::Ref<_11203c360_Vector_15> self{};

	StdJuleVectorBuffer<jule::Ref<_112626410_Impl>> _field__buffer{StdJuleVectorBuffer<jule::Ref<_112626410_Impl>>()};


	_11203c360_Vector_15(StdJuleVectorBuffer<jule::Ref<_112626410_Impl>> __param__buffer) {
		this->self = jule::Ref<_11203c360_Vector_15>::make(this, nullptr);

		this->_field__buffer = __param__buffer;
	}

	~_11203c360_Vector_15(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11203c360_Vector_15(void) { this->self = jule::Ref<_11203c360_Vector_15>::make(this, nullptr); }

	static inline _11203c360_Vector_15 _static_method_new(jule::Int);


	inline jule::Int _method_calc_grow(jule::Int);


	inline void _method_resize_alloc(jule::Int);


	inline void _method_review_allocation(jule::Int);


	inline jule::Int _method_len(void);


	inline jule::Int _method_cap(void);


	inline void _method_dealloc(void);


	inline void _method_set_len(jule::Int);


	inline jule::Ref<_112626410_Impl> _method_at(jule::Int);


	inline void _method_set(jule::Int,jule::Ref<_112626410_Impl>);


	inline void _method_push(jule::Ref<_112626410_Impl>);


	inline void _method_push_front(jule::Ref<_112626410_Impl>);


	inline void _method_append(jule::Slice<jule::Ref<_112626410_Impl>>);


	inline void _method_merge(_11203c360_Vector_15);


	inline void _method_merge_front(_11203c360_Vector_15);


	inline void _method_remove_range(jule::Int,jule::Int);


	inline void _method_insert(jule::Int,jule::Ref<_112626410_Impl>);


	inline _11203c360_Vector_15 _method_slice(jule::Int,jule::Int);


	inline bool operator==(const _11203c360_Vector_15 &_Src) {
		return true;
	}

	inline bool operator!=(const _11203c360_Vector_15 &_Src) { return !this->operator==(_Src); }
};


struct _1220fd110_File {
	jule::Ref<_1220fd110_File> self{};

	jule::Str _field__path{jule::Str()};
	_11203c360_Vector_0 _field__tokens{_11203c360_Vector_0()};


	_1220fd110_File(jule::Str __param__path, _11203c360_Vector_0 __param__tokens) {
		this->self = jule::Ref<_1220fd110_File>::make(this, nullptr);

		this->_field__path = __param__path;
		this->_field__tokens = __param__tokens;
	}

	~_1220fd110_File(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1220fd110_File(void) { this->self = jule::Ref<_1220fd110_File>::make(this, nullptr); }

	inline jule::Bool _method_is_ok(void);


	inline jule::Str _method_path(void);


	inline jule::Str _method_dir(void);


	inline jule::Str _method_name(void);


	inline jule::Uintptr _method_addr(void);


	inline _11203c360_Vector_0 _method_tokens(void);


	inline bool operator==(const _1220fd110_File &_Src) {
		return 
			this->_field__path == _Src._field__path &&
			this->_field__tokens == _Src._field__tokens;
	}

	inline bool operator!=(const _1220fd110_File &_Src) { return !this->operator==(_Src); }
};


struct _1116b7f10_Lex {
	jule::Ref<_1116b7f10_Lex> self{};

	jule::Bool _field_first_token_of_line{jule::Bool()};
	_11203c360_Vector_0 _field_tokens{_11203c360_Vector_0()};
	jule::Slice<jule::U8> _field_data{jule::Slice<jule::U8>()};
	jule::Ref<_1220fd110_File> _field_file{jule::Ref<_1220fd110_File>()};
	jule::Int _field_pos{jule::Int()};
	jule::Int _field_column{jule::Int()};
	jule::Int _field_row{jule::Int()};
	jule::Slice<_1316b4080_Log> _field_errors{jule::Slice<_1316b4080_Log>()};


	_1116b7f10_Lex(jule::Bool __param_first_token_of_line, _11203c360_Vector_0 __param_tokens, jule::Slice<jule::U8> __param_data, jule::Ref<_1220fd110_File> __param_file, jule::Int __param_pos, jule::Int __param_column, jule::Int __param_row, jule::Slice<_1316b4080_Log> __param_errors) {
		this->self = jule::Ref<_1116b7f10_Lex>::make(this, nullptr);

		this->_field_first_token_of_line = __param_first_token_of_line;
		this->_field_tokens = __param_tokens;
		this->_field_data = __param_data;
		this->_field_file = __param_file;
		this->_field_pos = __param_pos;
		this->_field_column = __param_column;
		this->_field_row = __param_row;
		this->_field_errors = __param_errors;
	}

	~_1116b7f10_Lex(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1116b7f10_Lex(void) { this->self = jule::Ref<_1116b7f10_Lex>::make(this, nullptr); }

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_tok(_111613f20_Token,jule::Str);


	inline void _method_lex(void);


	inline jule::Str _method_id(jule::Slice<jule::U8>);


	inline jule::Slice<jule::U8> _method_resume(void);


	inline void _method_lex_line_comment(_111613f20_Token&);


	inline void _method_lex_range_comment(void);


	inline jule::Str _method_num(jule::Slice<jule::U8>);


	inline jule::Str _method_escape_seq(jule::Slice<jule::U8>);


	inline jule::Str _method_get_rune(jule::Slice<jule::U8>,jule::Bool);


	inline jule::Str _method_lex_rune(jule::Slice<jule::U8>);


	inline jule::Str _method_lex_str(void);


	inline void _method_new_line(void);


	inline jule::Bool _method_is_op(jule::Slice<jule::U8>,jule::Str,jule::Uint,_111613f20_Token&);


	inline jule::Bool _method_lex_basic_ops(jule::Slice<jule::U8>,_111613f20_Token&);


	inline jule::Bool _method_lex_id(jule::Slice<jule::U8>,_111613f20_Token&);


	inline jule::Bool _method_lex_num(jule::Slice<jule::U8>,_111613f20_Token&);


	inline _111613f20_Token _method_token(void);


	inline bool operator==(const _1116b7f10_Lex &_Src) {
		return 
			this->_field_first_token_of_line == _Src._field_first_token_of_line &&
			this->_field_tokens == _Src._field_tokens &&
			this->_field_data == _Src._field_data &&
			this->_field_file == _Src._field_file &&
			this->_field_pos == _Src._field_pos &&
			this->_field_column == _Src._field_column &&
			this->_field_row == _Src._field_row &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _1116b7f10_Lex &_Src) { return !this->operator==(_Src); }
};


struct _1220cb5d0_Ast {
	jule::Ref<_1220cb5d0_Ast> self{};

	jule::Ref<_1220fd110_File> _field_file{jule::Ref<_1220fd110_File>()};
	_11203c360_Vector_1 _field_top_directives{_11203c360_Vector_1()};
	_11203c360_Vector_2 _field_use_decls{_11203c360_Vector_2()};
	_11203c360_Vector_3 _field_impls{_11203c360_Vector_3()};
	_11203c360_Vector_4 _field_comments{_11203c360_Vector_4()};
	_11203c360_Vector_5 _field_decls{_11203c360_Vector_5()};


	_1220cb5d0_Ast(jule::Ref<_1220fd110_File> __param_file, _11203c360_Vector_1 __param_top_directives, _11203c360_Vector_2 __param_use_decls, _11203c360_Vector_3 __param_impls, _11203c360_Vector_4 __param_comments, _11203c360_Vector_5 __param_decls) {
		this->self = jule::Ref<_1220cb5d0_Ast>::make(this, nullptr);

		this->_field_file = __param_file;
		this->_field_top_directives = __param_top_directives;
		this->_field_use_decls = __param_use_decls;
		this->_field_impls = __param_impls;
		this->_field_comments = __param_comments;
		this->_field_decls = __param_decls;
	}

	~_1220cb5d0_Ast(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1220cb5d0_Ast(void) { this->self = jule::Ref<_1220cb5d0_Ast>::make(this, nullptr); }

	inline bool operator==(const _1220cb5d0_Ast &_Src) {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_top_directives == _Src._field_top_directives &&
			this->_field_use_decls == _Src._field_use_decls &&
			this->_field_impls == _Src._field_impls &&
			this->_field_comments == _Src._field_comments &&
			this->_field_decls == _Src._field_decls;
	}

	inline bool operator!=(const _1220cb5d0_Ast &_Src) { return !this->operator==(_Src); }
};


struct _11209db80_Struct {
	jule::Ref<_11209db80_Struct> self{};

	jule::Ref<_11262c360_Sema> _field_sema{jule::Ref<_11262c360_Sema>()};
	jule::Slice<jule::Ref<_11209db80_Struct>> _field_depends{jule::Slice<jule::Ref<_11209db80_Struct>>()};
	jule::Slice<jule::Ref<_11209db80_Struct>> _field_uses{jule::Slice<jule::Ref<_11209db80_Struct>>()};
	_111613f20_Token _field_token{_111613f20_Token()};
	jule::Str _field_ident{jule::Str()};
	jule::Slice<jule::Ref<_11209db80_Field>> _field_fields{jule::Slice<jule::Ref<_11209db80_Field>>()};
	_11203c360_Vector_11 _field_methods{_11203c360_Vector_11()};
	jule::Bool _field_public{jule::Bool()};
	jule::Bool _field_cpp_linked{jule::Bool()};
	jule::Slice<jule::Ref<_111612b20_Directive>> _field_directives{jule::Slice<jule::Ref<_111612b20_Directive>>()};
	jule::Str _field_doc{jule::Str()};
	jule::Slice<jule::Ref<_111612b20_GenericDecl>> _field_generics{jule::Slice<jule::Ref<_111612b20_GenericDecl>>()};
	jule::Slice<jule::Ref<_11209e2e0_Trait>> _field_implements{jule::Slice<jule::Ref<_11209e2e0_Trait>>()};
	jule::Slice<jule::Ref<_11209db80_StructIns>> _field_instances{jule::Slice<jule::Ref<_11209db80_StructIns>>()};


	_11209db80_Struct(jule::Ref<_11262c360_Sema> __param_sema, jule::Slice<jule::Ref<_11209db80_Struct>> __param_depends, jule::Slice<jule::Ref<_11209db80_Struct>> __param_uses, _111613f20_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ref<_11209db80_Field>> __param_fields, _11203c360_Vector_11 __param_methods, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ref<_111612b20_Directive>> __param_directives, jule::Str __param_doc, jule::Slice<jule::Ref<_111612b20_GenericDecl>> __param_generics, jule::Slice<jule::Ref<_11209e2e0_Trait>> __param_implements, jule::Slice<jule::Ref<_11209db80_StructIns>> __param_instances) {
		this->self = jule::Ref<_11209db80_Struct>::make(this, nullptr);

		this->_field_sema = __param_sema;
		this->_field_depends = __param_depends;
		this->_field_uses = __param_uses;
		this->_field_token = __param_token;
		this->_field_ident = __param_ident;
		this->_field_fields = __param_fields;
		this->_field_methods = __param_methods;
		this->_field_public = __param_public;
		this->_field_cpp_linked = __param_cpp_linked;
		this->_field_directives = __param_directives;
		this->_field_doc = __param_doc;
		this->_field_generics = __param_generics;
		this->_field_implements = __param_implements;
		this->_field_instances = __param_instances;
	}

	~_11209db80_Struct(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_11209db80_Struct(void) { this->self = jule::Ref<_11209db80_Struct>::make(this, nullptr); }

	inline jule::Ref<_11209db80_StructIns> _method_instance(void);


	inline jule::Ref<_11209db80_StructIns> _method_append_instance(jule::Ref<_11209db80_StructIns>);


	inline jule::Ref<_112446fb0_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ref<_11209db80_Field> _method_find_field(jule::Str);


	inline jule::Bool _method_is_implements(jule::Ref<_11209e2e0_Trait>);


	inline jule::Bool _method_is_derives(jule::Str);


	inline jule::Bool _method_is_uses(jule::Ref<_11209db80_Struct>);


	inline bool operator==(const _11209db80_Struct &_Src) {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_depends == _Src._field_depends &&
			this->_field_uses == _Src._field_uses &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_generics == _Src._field_generics &&
			this->_field_implements == _Src._field_implements &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _11209db80_Struct &_Src) { return !this->operator==(_Src); }
};


struct _112572770_ReferenceStack {
	jule::Ref<_112572770_ReferenceStack> self{};

	_11203c360_Vector_8 _field_buffer{_11203c360_Vector_8()};


	_112572770_ReferenceStack(_11203c360_Vector_8 __param_buffer) {
		this->self = jule::Ref<_112572770_ReferenceStack>::make(this, nullptr);

		this->_field_buffer = __param_buffer;
	}

	~_112572770_ReferenceStack(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_112572770_ReferenceStack(void) { this->self = jule::Ref<_112572770_ReferenceStack>::make(this, nullptr); }

	inline jule::Int _method_len(void);


	inline jule::Any _method_at(jule::Int);


	inline void _method_push(jule::Any);


	inline void _method_push_front(jule::Any);


	inline void _method_remove(jule::Int);


	inline jule::Bool _method_exist_0(jule::Ref<_1320e22c0_Var>);
	inline jule::Bool _method_exist_1(jule::Ref<_112446fb0_FnIns>);
	inline jule::Bool _method_exist_2(jule::Ref<_11209db80_StructIns>);


	inline bool operator==(const _112572770_ReferenceStack &_Src) {
		return 
			this->_field_buffer == _Src._field_buffer;
	}

	inline bool operator!=(const _112572770_ReferenceStack &_Src) { return !this->operator==(_Src); }
};


struct _1126288e0_Scope {
	jule::Ref<_1126288e0_Scope> self{};

	jule::Ref<_1126288e0_Scope> _field_parent{jule::Ref<_1126288e0_Scope>()};
	jule::Bool _field_unsafety{jule::Bool()};
	jule::Bool _field_deferred{jule::Bool()};
	_11203c360_Vector_8 _field_stmts{_11203c360_Vector_8()};


	_1126288e0_Scope(jule::Ref<_1126288e0_Scope> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, _11203c360_Vector_8 __param_stmts) {
		this->self = jule::Ref<_1126288e0_Scope>::make(this, nullptr);

		this->_field_parent = __param_parent;
		this->_field_unsafety = __param_unsafety;
		this->_field_deferred = __param_deferred;
		this->_field_stmts = __param_stmts;
	}

	~_1126288e0_Scope(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1126288e0_Scope(void) { this->self = jule::Ref<_1126288e0_Scope>::make(this, nullptr); }

	inline bool operator==(const _1126288e0_Scope &_Src) {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _1126288e0_Scope &_Src) { return !this->operator==(_Src); }
};


struct _1320e2330_SymbolTable: public _112f89930_Lookup {
	jule::Ref<_1320e2330_SymbolTable> self{};

	jule::Ref<_1220fd110_File> _field_file{jule::Ref<_1220fd110_File>()};
	_11203c360_Vector_6 _field_passes{_11203c360_Vector_6()};
	_11203c360_Vector_7 _field_imports{_11203c360_Vector_7()};
	_11203c360_Vector_9 _field_vars{_11203c360_Vector_9()};
	_11203c360_Vector_10 _field_type_aliases{_11203c360_Vector_10()};
	_11203c360_Vector_12 _field_structs{_11203c360_Vector_12()};
	_11203c360_Vector_11 _field_funcs{_11203c360_Vector_11()};
	_11203c360_Vector_13 _field_traits{_11203c360_Vector_13()};
	_11203c360_Vector_14 _field_enums{_11203c360_Vector_14()};
	_11203c360_Vector_15 _field_impls{_11203c360_Vector_15()};


	_1320e2330_SymbolTable(jule::Ref<_1220fd110_File> __param_file, _11203c360_Vector_6 __param_passes, _11203c360_Vector_7 __param_imports, _11203c360_Vector_9 __param_vars, _11203c360_Vector_10 __param_type_aliases, _11203c360_Vector_12 __param_structs, _11203c360_Vector_11 __param_funcs, _11203c360_Vector_13 __param_traits, _11203c360_Vector_14 __param_enums, _11203c360_Vector_15 __param_impls) {
		this->self = jule::Ref<_1320e2330_SymbolTable>::make(this, nullptr);

		this->_field_file = __param_file;
		this->_field_passes = __param_passes;
		this->_field_imports = __param_imports;
		this->_field_vars = __param_vars;
		this->_field_type_aliases = __param_type_aliases;
		this->_field_structs = __param_structs;
		this->_field_funcs = __param_funcs;
		this->_field_traits = __param_traits;
		this->_field_enums = __param_enums;
		this->_field_impls = __param_impls;
	}

	~_1320e2330_SymbolTable(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }

	_1320e2330_SymbolTable(void) { this->self = jule::Ref<_1320e2330_SymbolTable>::make(this, nullptr); }

	inline jule::Ref<_11265fb90_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ref<_11265fb90_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)>);


	inline jule::Ref<_1320e22c0_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ref<_1217f7750_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ref<_11209db80_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ref<_112446fb0_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ref<_11209e2e0_Trait> _method_find_trait(jule::Str);


	inline jule::Ref<_11261eaf0_Enum> _method_find_enum(jule::Str);


	inline jule::Ref<_1320e22c0_Var> _method___find_var(jule::Str,jule::Bool,jule::Bool);


	inline jule::Ref<_1217f7750_TypeAlias> _method___find_type_alias(jule::Str,jule::Bool,jule::Bool);


	inline jule::Any _method_def_by_ident(jule::Str,jule::Bool);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline bool operator==(const _1320e2330_SymbolTable &_Src) {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_passes == _Src._field_passes &&
			this->_field_imports == _Src._field_imports &&
			this->_field_vars == _Src._field_vars &&
			this->_field_type_aliases == _Src._field_type_aliases &&
			this->_field_structs == _Src._field_structs &&
			this->_field_funcs == _Src._field_funcs &&
			this->_field_traits == _Src._field_traits &&
			this->_field_enums == _Src._field_enums &&
			this->_field_impls == _Src._field_impls;
	}

	inline bool operator!=(const _1320e2330_SymbolTable &_Src) { return !this->operator==(_Src); }
};


inline jule::Bool _1317ed450_is_surrogate(jule::I32);
inline jule::I32 _1317ed450_decode_rune(jule::I32,jule::I32);
inline std::tuple<jule::I32,jule::I32> _1317ed450_encode_rune(jule::I32);
inline jule::Slice<jule::U16> _1317ed450_encode(jule::Slice<jule::I32>);
inline jule::Slice<jule::I32> _1317ed450_decode(jule::Slice<jule::U16>);
inline jule::Slice<jule::U16> _1317ed450_append_rune(jule::Slice<jule::U16>,jule::I32);
inline jule::Int _1317134b0_get_last_errno(void);
inline jule::Slice<jule::U16> _1317a9110_utf16_from_str(jule::Str);
inline jule::Str _1317a9110_utf16_to_str(jule::Slice<jule::U16>);
inline jule::Str _1317a9110_u16_ptr_to_str(jule::U16*);
inline jule::Uintptr _1317a9110_get_std_handle(jule::Uintptr);
inline jule::Bool _1317a9110_close_handle(jule::Uintptr);
inline jule::Int _1317a9110_wstat(jule::U16*,struct stat*);
inline jule::Int _1317a9110__wopen(jule::U16*,jule::Int,jule::Int);
inline jule::U32 _1317a9110_get_last_error(void);
inline jule::U32 _1317a9110_get_current_directory(jule::U32,jule::U16*);
inline jule::Bool _1317a9110_set_current_directory(jule::U16*);
inline jule::Bool _1317a9110_delete_file(jule::U16*);
inline jule::Bool _1317a9110_create_directory(jule::U16*);
inline jule::Bool _1317a9110_remove_directory(jule::U16*);
inline _WDIR* _1317a9110__wopendir(jule::U16*);
inline struct _wdirent* _1317a9110__wreaddir(_WDIR*);
inline jule::Int _1317a9110__wclosedir(_WDIR*);
inline jule::U32 _1317a9110_get_full_path_name(jule::U16*,jule::U32,jule::U16*,jule::U16**);
inline jule::I64 _1317a9f00_seek(jule::Int,jule::I64,jule::Int);
inline jule::Int _1317a9f00_read(jule::Int,void*,jule::Uint);
inline jule::Int _1317a9f00_close(jule::Int);
inline jule::Int _1317a9f00_write(jule::Int,void*,jule::Uint);
inline void _1317a9f00_exit(jule::Int);
inline jule::Bool _131714a10_is_path_sep(jule::U8);
inline jule::Bool _131714a10_is_slash(jule::U8);
inline jule::U8 _131714a10_to_upper(jule::U8);
inline jule::Bool _131714a10_is_abs(jule::Str);
inline jule::Int _131714a10_volume_name_len(jule::Str);
inline std::tuple<jule::Str,jule::Str,jule::Bool> _131714a10_cut_path(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _131714a10_full_path(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _131714a10___abs(jule::Str);
inline jule::Str _131714a10___join(jule::Slice<jule::Str>);
inline jule::Str _131739f50_clean(jule::Str);
inline jule::Str _131739f50_to_slash(jule::Str);
inline jule::Str _131739f50_from_slash(jule::Str);
inline jule::Str _131739f50_join(jule::Slice<jule::Str>);
inline jule::Str _131739f50_ext(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _131739f50_abs(jule::Str);
inline jule::Str _131739f50_base(jule::Str);
inline jule::Str _131739f50_dir(jule::Str);
inline jule::Str _131739f50_volume_name(jule::Str);
inline jule::Int _121ef7c60_leading_zeros(jule::Uint);
inline jule::Int _121ef7c60_leading_zeros8(jule::U8);
inline jule::Int _121ef7c60_leading_zeros16(jule::U16);
inline jule::Int _121ef7c60_leading_zeros32(jule::U32);
inline jule::Int _121ef7c60_leading_zeros64(jule::U64);
inline jule::Int _121ef7c60_trailing_zeros(jule::Uint);
inline jule::Int _121ef7c60_trailing_zeros8(jule::U8);
inline jule::Int _121ef7c60_trailing_zeros16(jule::U16);
inline jule::Int _121ef7c60_trailing_zeros32(jule::U32);
inline jule::Int _121ef7c60_trailing_zeros64(jule::U64);
inline jule::Int _121ef7c60_ones_count(jule::Uint);
inline jule::Int _121ef7c60_ones_count8(jule::U8);
inline jule::Int _121ef7c60_ones_count16(jule::U16);
inline jule::Int _121ef7c60_ones_count32(jule::U32);
inline jule::Int _121ef7c60_ones_count64(jule::U64);
inline jule::Uint _121ef7c60_rotate_left(jule::Uint,jule::Int);
inline jule::U8 _121ef7c60_rotate_left8(jule::U8,jule::Int);
inline jule::U16 _121ef7c60_rotate_left16(jule::U16,jule::Int);
inline jule::U32 _121ef7c60_rotate_left32(jule::U32,jule::Int);
inline jule::U64 _121ef7c60_rotate_left64(jule::U64,jule::Int);
inline jule::Uint _121ef7c60_reverse(jule::Uint);
inline jule::U8 _121ef7c60_reverse8(jule::U8);
inline jule::U16 _121ef7c60_reverse16(jule::U16);
inline jule::U32 _121ef7c60_reverse32(jule::U32);
inline jule::U64 _121ef7c60_reverse64(jule::U64);
inline jule::Uint _121ef7c60_reverse_bytes(jule::Uint);
inline jule::U16 _121ef7c60_reverse_bytes16(jule::U16);
inline jule::U32 _121ef7c60_reverse_bytes32(jule::U32);
inline jule::U64 _121ef7c60_reverse_bytes64(jule::U64);
inline jule::Int _121ef7c60_len(jule::Uint);
inline jule::Int _121ef7c60_len8(jule::U8);
inline jule::Int _121ef7c60_len16(jule::U16);
inline jule::Int _121ef7c60_len32(jule::U32);
inline jule::Int _121ef7c60_len64(jule::U64);
inline std::tuple<jule::Uint,jule::Uint> _121ef7c60_add(jule::Uint,jule::Uint,jule::Uint);
inline std::tuple<jule::U32,jule::U32> _121ef7c60_add32(jule::U32,jule::U32,jule::U32);
inline std::tuple<jule::U64,jule::U64> _121ef7c60_add64(jule::U64,jule::U64,jule::U64);
inline std::tuple<jule::Uint,jule::Uint> _121ef7c60_sub(jule::Uint,jule::Uint,jule::Uint);
inline std::tuple<jule::U32,jule::U32> _121ef7c60_sub32(jule::U32,jule::U32,jule::U32);
inline std::tuple<jule::U64,jule::U64> _121ef7c60_sub64(jule::U64,jule::U64,jule::U64);
inline std::tuple<jule::Uint,jule::Uint> _121ef7c60_mul(jule::Uint,jule::Uint);
inline std::tuple<jule::U32,jule::U32> _121ef7c60_mul32(jule::U32,jule::U32);
inline std::tuple<jule::U64,jule::U64> _121ef7c60_mul64(jule::U64,jule::U64);
inline std::tuple<jule::Uint,jule::Uint> _121ef7c60_div(jule::Uint,jule::Uint,jule::Uint);
inline std::tuple<jule::U32,jule::U32> _121ef7c60_div32(jule::U32,jule::U32,jule::U32);
inline std::tuple<jule::U64,jule::U64> _121ef7c60_div64(jule::U64,jule::U64,jule::U64);
inline jule::Uint _121ef7c60_rem(jule::Uint,jule::Uint,jule::Uint);
inline jule::U32 _121ef7c60_rem32(jule::U32,jule::U32,jule::U32);
inline jule::U64 _121ef7c60_rem64(jule::U64,jule::U64,jule::U64);
inline jule::F64 _12186a100_atanh(jule::F64);
inline jule::U32 _12173aa20_f32_bits(jule::F32);
inline jule::F32 _12173aa20_f32_from_bits(jule::U32);
inline jule::U64 _12173aa20_f64_bits(jule::F64);
inline jule::F64 _12173aa20_f64_from_bits(jule::U64);
inline jule::F64 _121886250_cos(jule::F64);
inline jule::F64 _121886250_sin(jule::F64);
inline jule::F64 _12173a540_tan(jule::F64);
inline jule::F64 _1218a35b0_mod(jule::F64,jule::F64);
inline std::tuple<jule::F64,jule::Int> _1218cec10_frexp(jule::F64);
inline jule::F32 _1218f1050_nextafter32(jule::F32,jule::F32);
inline jule::F64 _1218f1050_nextafter(jule::F64,jule::F64);
inline jule::F64 _121906a20_copysign(jule::F64,jule::F64);
inline std::tuple<jule::U64,jule::F64> _1219212d0_trig_reduce(jule::F64);
inline jule::F64 _121929a30_atan2(jule::F64,jule::F64);
inline jule::F64 _121906e90_floor(jule::F64);
inline jule::F64 _121906e90_ceil(jule::F64);
inline jule::F64 _121906e90_trunc(jule::F64);
inline jule::F64 _121906e90_round(jule::F64);
inline jule::F64 _121906e90_round_even(jule::F64);
inline jule::F64 _12192b6b0_nan(void);
inline jule::Bool _12192b6b0_is_nan(jule::F64);
inline jule::F64 _12192b6b0_inf(jule::Int);
inline jule::Bool _12192b6b0_is_inf(jule::F64,jule::Int);
inline std::tuple<jule::F64,jule::Int> _12192b6b0_normalize(jule::F64);
inline std::tuple<jule::F64,jule::F64> _121973580_sincos(jule::F64);
inline jule::F64 _121990700_dim(jule::F64,jule::F64);
inline jule::F64 _121990700_max(jule::F64,jule::F64);
inline jule::F64 _121990700_min(jule::F64,jule::F64);
inline jule::F64 _121961860_log(jule::F64);
inline jule::F64 _1219f3b40_expm1(jule::F64);
inline jule::F64 _1219bc510_abs(jule::F64);
inline jule::F64 _121a0dc40_j1(jule::F64);
inline jule::F64 _121a0dc40_y1(jule::F64);
inline jule::F64 _121a0dc40_pone(jule::F64);
inline jule::F64 _121a0dc40_qone(jule::F64);
inline jule::U64 _121ab8ba0_zero(jule::U64);
inline jule::U64 _121ab8ba0_nonzero(jule::U64);
inline std::tuple<jule::U64,jule::U64> _121ab8ba0_shl(jule::U64,jule::U64,jule::Uint);
inline std::tuple<jule::U64,jule::U64> _121ab8ba0_shr(jule::U64,jule::U64,jule::Uint);
inline std::tuple<jule::U64,jule::U64> _121ab8ba0_shrcompress(jule::U64,jule::U64,jule::Uint);
inline jule::I32 _121ab8ba0_lz(jule::U64,jule::U64);
inline std::tuple<jule::U32,jule::I32,jule::U64> _121ab8ba0_split(jule::U64);
inline jule::F64 _121ab8ba0_fma(jule::F64,jule::F64,jule::F64);
inline std::tuple<jule::F64,jule::F64> _121af3740_modf(jule::F64);
inline jule::F64 _121afd560_log10(jule::F64);
inline jule::F64 _121afd560_log2(jule::F64);
inline jule::F64 _121b12210_hypot(jule::F64,jule::F64);
inline jule::F64 _121b24710_j0(jule::F64);
inline jule::F64 _121b24710_y0(jule::F64);
inline jule::F64 _121b24710_pzero(jule::F64);
inline jule::F64 _121b24710_qzero(jule::F64);
inline jule::F64 _121a52e30_ldexp(jule::F64,jule::Int);
inline jule::Bool _121b8e680_signbit(jule::F64);
inline jule::F64 _121b137a0_sinh(jule::F64);
inline jule::F64 _121b137a0_cosh(jule::F64);
inline std::tuple<jule::F64,jule::Int> _121baee80_lgamma(jule::F64);
inline jule::F64 _121baee80_sin_pi(jule::F64);
inline jule::F64 _121c28840_acosh(jule::F64);
inline jule::F64 _121baf000_tanh(jule::F64);
inline jule::F64 _121c37c30_cbrt(jule::F64);
inline jule::F64 _121c54600_pow(jule::F64,jule::F64);
inline jule::Bool _121c54600_is_odd_int(jule::F64);
inline jule::F64 _121c3a340_exp(jule::F64);
inline jule::F64 _121c3a340_exp2(jule::F64);
inline jule::F64 _121c3a340_expmulti(jule::F64,jule::F64,jule::Int);
inline jule::F64 _121cd89d0_log1p(jule::F64);
inline std::tuple<jule::F64,jule::F64> _121c6f450_stirling(jule::F64);
inline jule::F64 _121c6f450_gamma(jule::F64);
inline jule::Bool _121c6f450_is_neg_int(jule::F64);
inline jule::F64 _121d46080_erfinv(jule::F64);
inline jule::F64 _121d46080_erfcinv(jule::F64);
inline jule::F64 _121d71c00_erf(jule::F64);
inline jule::F64 _121d71c00_erfc(jule::F64);
inline jule::F64 _121d85980_pow10(jule::Int);
inline jule::F64 _121d2f040_sqrt(jule::F64);
inline jule::F64 _121de84b0_logb(jule::F64);
inline jule::Int _121de84b0_ilogb(jule::F64);
inline jule::Int _121de84b0__ilogb(jule::F64);
inline jule::F64 _121e22f30_jn(jule::Int,jule::F64);
inline jule::F64 _121e22f30_yn(jule::Int,jule::F64);
inline jule::F64 _121e6e8c0_remainder(jule::F64,jule::F64);
inline jule::F64 _121e2b130_xatan(jule::F64);
inline jule::F64 _121e2b130_satan(jule::F64);
inline jule::F64 _121e2b130_atan(jule::F64);
inline jule::F64 _121ec97c0_asin(jule::F64);
inline jule::F64 _121ec97c0_acos(jule::F64);
inline jule::F64 _121e97e50_asinh(jule::F64);
inline std::tuple<jule::Bool,jule::Int> _13174f4d0_conv_bool(jule::Str);
inline jule::Str _13174f4d0_fmt_bool(jule::Bool);
inline jule::Str _131769b70_fmt_float(jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _131769b70_generic_ftoa(jule::Slice<jule::U8>,jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _131769b70_big_ftoa(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_131769b70_FloatInfo&);
inline jule::Slice<jule::U8> _131769b70_fmt_digits(jule::Slice<jule::U8>,jule::Bool,jule::Bool,_131769b70_DecimalSlice,jule::Int,jule::U8);
inline void _131769b70_round_shortest(_13207af00_Decimal&,jule::U64,jule::Int,_131769b70_FloatInfo&);
inline jule::Slice<jule::U8> _131769b70_fmt_e(jule::Slice<jule::U8>,jule::Bool,_131769b70_DecimalSlice,jule::Int,jule::U8);
inline jule::Slice<jule::U8> _131769b70_fmt_f(jule::Slice<jule::U8>,jule::Bool,_131769b70_DecimalSlice,jule::Int);
inline jule::Slice<jule::U8> _131769b70_fmt_b(jule::Slice<jule::U8>,jule::Bool,jule::U64,jule::Int,_131769b70_FloatInfo&);
inline jule::Slice<jule::U8> _131769b70_fmt_x(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_131769b70_FloatInfo&);
inline jule::Int _131769b70_min(jule::Int,jule::Int);
inline jule::Int _131769b70_max(jule::Int,jule::Int);
inline jule::U8 _13219c810_lower(jule::U8);
inline std::tuple<jule::U64,jule::Int> _13219c810_parse_uint(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::I64,jule::Int> _13219c810_parse_int(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::F64,jule::Bool> _1321c5450_eisel_lemire64(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _1321c5450_eisel_lemire32(jule::U64,jule::Int,jule::Bool);
inline jule::Int _1320824b0_common_prefix_len_ignore_case(jule::Str,jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Bool> _1320824b0_special(jule::Str);
inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _1320824b0_read_float(jule::Str);
inline std::tuple<jule::F64,jule::Bool> _1320824b0_atof64_exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F64,jule::Bool> _1320824b0_atof64exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _1320824b0_atof32exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F64,jule::Int> _1320824b0_atof_hex(jule::Str,_131769b70_FloatInfo&,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline std::tuple<jule::F32,jule::Int,jule::Int> _1320824b0_atof32(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _1320824b0_atof64(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _1320824b0_parse_float_prefix(jule::Str,jule::Int);
inline std::tuple<jule::F64,jule::Int> _1320824b0_parse_float(jule::Str,jule::Int);
inline void _121735870_ryu_ftoa_fixed32(_131769b70_DecimalSlice&,jule::U32,jule::Int,jule::Int);
inline void _121735870_ryu_ftoa_fixed64(_131769b70_DecimalSlice&,jule::U64,jule::Int,jule::Int);
inline void _121735870_format_decimal(_131769b70_DecimalSlice&,jule::U64,jule::Bool,jule::Bool,jule::Int);
inline void _121735870_ryu_ftoa_shortest(_131769b70_DecimalSlice&,jule::U64,jule::Int,_131769b70_FloatInfo&);
inline jule::Int _121735870_mul_by_log2_log10(jule::Int);
inline jule::Int _121735870_mul_by_log10_log2(jule::Int);
inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _121735870_compute_bounds(jule::U64,jule::Int,_131769b70_FloatInfo&);
inline void _121735870_ryu_digits(_131769b70_DecimalSlice&,jule::U64,jule::U64,jule::U64,jule::Bool,jule::Bool);
inline void _121735870_ryu_digits32(_131769b70_DecimalSlice&,jule::U32,jule::U32,jule::U32,jule::Bool,jule::Bool,jule::Int);
inline std::tuple<jule::U32,jule::Int,jule::Bool> _121735870_mult64bit_pow10(jule::U32,jule::Int,jule::Int);
inline std::tuple<jule::U64,jule::Int,jule::Bool> _121735870_mult128bit_pow10(jule::U64,jule::Int,jule::Int);
inline jule::Bool _121735870_divisible_by_pow5(jule::U64,jule::Int);
inline std::tuple<jule::U32,jule::U32> _121735870_divmod1e9(jule::U64);
inline jule::Int _13207af00_digit_zero(jule::Slice<jule::U8>);
inline void _13207af00_trim(_13207af00_Decimal&);
inline void _13207af00_right_shift(_13207af00_Decimal&,jule::Uint);
inline jule::Bool _13207af00_prefix_is_less_than(jule::Slice<jule::U8>,jule::Str);
inline void _13207af00_left_shift(_13207af00_Decimal&,jule::Uint);
inline jule::Bool _13207af00_should_round_up(_13207af00_Decimal&,jule::Int);
inline jule::Str _121837910_fmt_uint(jule::U64,jule::Int);
inline jule::Str _121837910_fmt_int(jule::I64,jule::Int);
inline jule::Str _121837910_itoa(jule::Int);
inline jule::Str _121837910_small(jule::Int);
inline jule::Bool _121837910_is_power_of_two(jule::Int);
inline std::tuple<jule::Slice<jule::U8>,jule::Str> _121837910_fmt_bits(jule::Slice<jule::U8>,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline jule::Int _1217e3350_get_last_os_error(void);
inline jule::Int _1217dc7a0_get_last_os_error_windows(void);
inline std::tuple<jule::Str,jule::Int> _121828050_working_dir(void);
inline jule::Int _121828050_set_working_dir(jule::Str);
inline void _121828050_init(void);
inline std::tuple<jule::Str,jule::Int> _121848920___getwd(void);
inline jule::Int _121848920___chdir(jule::Str);
inline void _1217b31d0_exit(jule::Int);
inline jule::Str _1217b31d0_executable(void);
inline jule::Bool _1316301d0_is_std_header_path(jule::Str);
inline jule::Bool _1316301d0_is_valid_header_ext(jule::Str);
inline jule::Bool _1316301d0_is_valid_cpp_ext(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _131696e90_check_os(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _131696e90_check_arch(jule::Str);
inline jule::Bool _131696e90_is_pass_file_annotation(jule::Str);
inline jule::Str _1316b2ff0_errorf(jule::Str,jule::Slice<jule::Any>);
inline jule::Str _1316b2ff0_arg_to_str(jule::Any);
inline jule::Int _1316b2ff0_find_next_fmt(jule::Str);
inline jule::Str _1316b2ff0_apply_fmt(jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1316ed230_is_top_directive(jule::Str);
inline jule::Bool _1316e9330_is_windows(jule::Str);
inline jule::Bool _1316e9330_is_darwin(jule::Str);
inline jule::Bool _1316e9330_is_linux(jule::Str);
inline jule::Bool _1316e9330_is_i386(jule::Str);
inline jule::Bool _1316e9330_is_amd64(jule::Str);
inline jule::Bool _1316e9330_is_arm64(jule::Str);
inline jule::Bool _1316e9330_is_unix(jule::Str);
inline jule::Bool _1316e9330_is_32bit(jule::Str);
inline jule::Bool _1316e9330_is_64bit(jule::Str);
inline void _1316f28b0_exit_err(jule::Str);
inline void _1316f28b0_init(void);
inline jule::Bool _1317087a0_is_jule(jule::Str);
inline jule::Int _1220ca200_get_last_fs_error(void);
inline std::tuple<jule::Slice<jule::U8>,jule::Int> _1220de8f0_read_file(jule::Str);
inline std::tuple<jule::Ref<_1220de8f0_File>,jule::Int> _1220f3000_open(jule::Str,jule::Int,jule::Int);
inline jule::Int _1220f3000_remove_file(jule::Str);
inline std::tuple<jule::Slice<jule::Ref<_1220df4b0_DirEntry>>,jule::Int> _1220e63c0_read_dir(jule::Str);
inline jule::Int _1220e63c0_create_dir(jule::Str);
inline jule::Int _1220e63c0_remove_dir(jule::Str);
inline std::tuple<jule::Ref<_1220d93f0_Status>,jule::Int> _111613f90_stat(jule::Str);
inline jule::Bool _1220fe860_full_rune(jule::Slice<jule::U8>);
inline jule::Bool _1220fe860_full_rune_str(jule::Str);
inline std::tuple<jule::I32,jule::Int> _1220fe860_decode_rune(jule::Slice<jule::U8>);
inline std::tuple<jule::I32,jule::Int> _1220fe860_decode_rune_str(jule::Str);
inline std::tuple<jule::I32,jule::Int> _1220fe860_decode_last_rune(jule::Slice<jule::U8>);
inline std::tuple<jule::I32,jule::Int> _1220fe860_decode_last_rune_str(jule::Str);
inline jule::Int _1220fe860_rune_len(jule::I32);
inline jule::Int _1220fe860_encode_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _1220fe860_append_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _1220fe860_append_rune_non_ascii(jule::Slice<jule::U8>,jule::I32);
inline jule::Int _1220fe860_rune_count(jule::Slice<jule::U8>);
inline jule::Int _1220fe860_rune_count_str(jule::Str);
inline jule::Bool _1220fe860_rune_start(jule::U8);
inline jule::Bool _1220fe860_valid(jule::Slice<jule::U8>);
inline jule::Bool _1220fe860_valid_str(jule::Str);
inline jule::Bool _1220fe860_valid_rune(jule::I32);
inline jule::Bool _111613f20_is_unary_op(jule::Str);
inline jule::Bool _111613f20_is_bin_op(jule::Str);
inline jule::Bool _111613f20_is_weak_op(jule::Str);
inline jule::Bool _111613f20_is_str(jule::Str);
inline jule::Bool _111613f20_is_raw_str(jule::Str);
inline jule::Bool _111613f20_is_rune(jule::Str);
inline jule::Bool _111613f20_is_nil(jule::Str);
inline jule::Bool _111613f20_is_bool(jule::Str);
inline jule::Bool _111613f20_contains_any(jule::Str,jule::Str);
inline jule::Bool _111613f20_is_float(jule::Str);
inline jule::Bool _111613f20_is_num(jule::Str);
inline jule::Bool _111613f20_is_lit(jule::Str);
inline jule::Bool _111613f20_is_ignore_ident(jule::Str);
inline jule::Bool _111613f20_is_anon_ident(jule::Str);
inline jule::Bool _111613f20_is_punct(jule::I32);
inline jule::Bool _111613f20_is_space(jule::I32);
inline jule::Bool _111613f20_is_letter(jule::I32);
inline jule::Bool _111613f20_is_ident_rune(jule::Str);
inline jule::Bool _111613f20_is_decimal(jule::U8);
inline jule::Bool _111613f20_is_binary(jule::U8);
inline jule::Bool _111613f20_is_octal(jule::U8);
inline jule::Bool _111613f20_is_hex(jule::U8);
inline jule::Bool _111613f20_is_assign(jule::Uint);
inline jule::Bool _111613f20_is_postfix_op(jule::Str);
inline jule::Bool _111613f20_is_assign_op(jule::Str);
inline jule::Ref<_1220fd110_File> _1220fd110_new_file_set(jule::Str);
inline _1316b4080_Log _1116b7f10_make_err(jule::Int,jule::Int,jule::Ref<_1220fd110_File>,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1116b7f10_bytes_has_prefix(jule::Slice<jule::U8>,jule::Str);
inline jule::Str _1116b7f10_float_fmt_e(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _1116b7f10_float_fmt_p(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _1116b7f10_float_fmt_dotnp(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _1116b7f10_float_fmt_dotfp(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _1116b7f10_float_fmt_dotp(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _1116b7f10_float_num(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _1116b7f10_common_num(jule::Slice<jule::U8>);
inline jule::Str _1116b7f10_binary_num(jule::Slice<jule::U8>);
inline jule::Bool _1116b7f10_is_float_fmt_e(jule::U8,jule::Int);
inline jule::Bool _1116b7f10_is_float_fmt_p(jule::U8,jule::Int);
inline jule::Bool _1116b7f10_is_float_fmt_dotnp(jule::Slice<jule::U8>,jule::Int);
inline jule::Bool _1116b7f10_is_float_fmt_dotp(jule::Slice<jule::U8>,jule::Int);
inline jule::Bool _1116b7f10_is_float_fmt_dotfp(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _1116b7f10_octal_num(jule::Slice<jule::U8>);
inline jule::Str _1116b7f10_hex_num(jule::Slice<jule::U8>);
inline jule::Str _1116b7f10_hex_escape(jule::Slice<jule::U8>,jule::Int);
inline jule::Str _1116b7f10_big_unicode_point_escape(jule::Slice<jule::U8>);
inline jule::Str _1116b7f10_little_unicode_point_escape(jule::Slice<jule::U8>);
inline jule::Str _1116b7f10_hex_byte_escape(jule::Slice<jule::U8>);
inline jule::Str _1116b7f10_byte_escape(jule::Slice<jule::U8>);
inline jule::Slice<_1316b4080_Log> _1116b7f10_lex(jule::Ref<_1220fd110_File>,jule::Slice<jule::U8>);
inline jule::Ref<_11166e240_FileInfo> _11166e240_parse_file(jule::Ref<_1220fd110_File>);
inline jule::Ref<_11166e240_PackageInfo> _11166e240_parse_package(jule::Slice<jule::Ref<_1220fd110_File>>);
inline std::tuple<jule::Ref<_1220cb5d0_Ast>,jule::Slice<_1316b4080_Log>> _11166e240_parse_fileset(jule::Ref<_1220fd110_File>);
inline jule::Ref<_111612b20_ScopeTree> _11167f570_new_scope(void);
inline std::tuple<jule::Bool,jule::Bool> _11167f570_is_st(_111613f20_Token,_111613f20_Token);
inline std::tuple<jule::Int,jule::Bool> _11167f570_next_st_pos(jule::Slice<_111613f20_Token>,jule::Int);
inline std::tuple<jule::Slice<_111613f20_Token>,jule::Bool> _11167f570_skip_st(jule::Int&,jule::Slice<_111613f20_Token>);
inline jule::Slice<jule::Ref<_11167f570_Stmt>> _11167f570_split_stms(jule::Slice<_111613f20_Token>);
inline jule::Slice<_111613f20_Token> _112190570_is_fn_call(jule::Slice<_111613f20_Token>);
inline jule::Ref<_112190570_CallData> _112190570_get_call_data(jule::Slice<_111613f20_Token>);
inline jule::Slice<_111613f20_Token> _112190570_get_block_expr(jule::Slice<_111613f20_Token>);
inline std::tuple<jule::Slice<_111613f20_Token>,jule::Slice<_111613f20_Token>> _112190570_split_colon(jule::Slice<_111613f20_Token>);
inline jule::Slice<_111613f20_Token> _112190570_eliminate_comments(jule::Slice<_111613f20_Token>);
inline jule::Int _112190570_find_lowest_prec_op(jule::Slice<_111613f20_Token>);
inline jule::Ref<_111612b20_IdentExpr> _112190570_build_ident_expr(_111613f20_Token);
inline std::tuple<jule::Slice<_111613f20_Token>,jule::Int> _112190570_get_range_expr_tokens(jule::Slice<_111613f20_Token>);
inline jule::Bool _111654d60_check_assign_tokens(jule::Slice<_111613f20_Token>);
inline _1316b4080_Log _111681860_make_err(jule::Int,jule::Int,jule::Ref<_1220fd110_File>,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<_111613f20_Token> _111681860_range(jule::Int&,jule::Str,jule::Str,jule::Slice<_111613f20_Token>);
inline std::tuple<jule::Slice<_111613f20_Token>,jule::Slice<_111613f20_Token>> _111681860_range_last(jule::Slice<_111613f20_Token>);
inline std::tuple<jule::Slice<jule::Slice<_111613f20_Token>>,jule::Slice<_1316b4080_Log>> _111681860_parts(jule::Slice<_111613f20_Token>,jule::Uint,jule::Bool);
inline jule::Str _111681860_get_close_kind_of_brace(jule::Str);
inline _1316b4080_Log _111681860_compiler_err(_111613f20_Token,jule::Str,jule::Slice<jule::Any>);
inline jule::Ref<_111612b20_Comment> _111681860_build_comment(_111613f20_Token);
inline jule::Str _111681860_tokstoa(jule::Slice<_111613f20_Token>);
inline jule::Ref<_111612b20_TypeDecl> _111680c00_build_void_type(void);
inline jule::Ref<_111612b20_TypeDecl> _111680c00_build_prim_type(_111613f20_Token);
inline std::tuple<jule::Slice<_111613f20_Token>,jule::Int> _111680c00_split_map_range(jule::Slice<_111613f20_Token>,jule::Int&);
inline void _1131530d0_lshift_unsig(_1131530d0_Const&,_1131530d0_Const&);
inline void _1131530d0_rshift_unsig(_1131530d0_Const&,_1131530d0_Const&);
inline jule::Bool _113157670_check_bit(jule::Str,jule::Int,jule::Fn<jule::Bool(jule::Str,jule::Int,jule::Int)>);
inline jule::Str _113157670_real_kind_of(jule::Str);
inline jule::Int _113157670_bitsize_of(jule::Str);
inline jule::Str _113157670_int_from_bits(jule::U64);
inline jule::Str _113157670_uint_from_bits(jule::U64);
inline jule::Str _113157670_float_from_bits(jule::U64);
inline jule::Bool _113157670_check_bit_int(jule::Str,jule::Int);
inline jule::Bool _113157670_check_bit_uint(jule::Str,jule::Int);
inline jule::Bool _113157670_check_bit_float(jule::Str,jule::Int);
inline jule::U64 _113157670_bitsize_of_float(jule::F64);
inline jule::U64 _113157670_bitsize_of_int(jule::I64);
inline jule::U64 _113157670_bitsize_of_uint(jule::U64);
inline jule::F64 _1131a6a20_min_of(jule::Str);
inline jule::F64 _1131a6a20_max_of(jule::Str);
inline jule::Bool _1131f8900_is_i8_compatible(jule::Str);
inline jule::Bool _1131f8900_is_i16_compatible(jule::Str);
inline jule::Bool _1131f8900_is_i32_compatible(jule::Str);
inline jule::Bool _1131f8900_is_i64_compatible(jule::Str);
inline jule::Bool _1131f8900_is_u8_compatible(jule::Str);
inline jule::Bool _1131f8900_is_u16_compatible(jule::Str);
inline jule::Bool _1131f8900_is_u32_compatible(jule::Str);
inline jule::Bool _1131f8900_is_u64_compatible(jule::Str);
inline jule::Bool _1131f8900_is_f32_compatible(jule::Str);
inline jule::Bool _1131f8900_is_f64_compatible(jule::Str);
inline jule::Bool _1131f8900_types_are_compatible(jule::Str,jule::Str);
inline jule::Bool _1131f8900_is_i16_greater(jule::Str);
inline jule::Bool _1131f8900_is_i32_greater(jule::Str);
inline jule::Bool _1131f8900_is_i64_greater(jule::Str);
inline jule::Bool _1131f8900_is_u8_greater(jule::Str);
inline jule::Bool _1131f8900_is_u16_greater(jule::Str);
inline jule::Bool _1131f8900_is_u32_greater(jule::Str);
inline jule::Bool _1131f8900_is_u64_greater(jule::Str);
inline jule::Bool _1131f8900_is_f32_greater(jule::Str);
inline jule::Bool _1131f8900_is_f64_greater(jule::Str);
inline jule::Bool _1131f8900_is_greater(jule::Str,jule::Str);
inline jule::Bool _1132426f0_is_sig_int(jule::Str);
inline jule::Bool _1132426f0_is_unsig_int(jule::Str);
inline jule::Bool _1132426f0_is_int(jule::Str);
inline jule::Bool _1132426f0_is_float(jule::Str);
inline jule::Bool _1132426f0_is_num(jule::Str);
inline jule::Bool _1132426f0_is_sig_num(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _1132be720_is_byte_lit(jule::Str);
inline jule::I32 _1132be720_to_rune(jule::Slice<jule::U8>);
inline jule::Str _1132be720_to_raw_str(jule::Slice<jule::U8>);
inline jule::Str _1132be720_to_str(jule::Slice<jule::U8>);
inline std::tuple<jule::U8,jule::Bool> _1132be720_try_btoa_common_esq(jule::Slice<jule::U8>);
inline jule::I32 _1132be720_rune_from_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Str _1132be720_str_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Ref<_112572770_ReferenceStack> _112572770_new_reference_stack(void);
inline jule::Str _112572770_str_repeat(jule::Str,jule::Int);
inline jule::Str _112572770_build_doc(jule::Ref<_111612b20_CommentGroup>);
inline jule::Ref<_1217f7750_TypeSymbol> _112572770_build_type(jule::Ref<_111612b20_TypeDecl>);
inline jule::Ref<_121dedce0_Value> _112572770_build_expr(jule::Ref<_111612b20_Expr>);
inline jule::Ref<_1217f7750_TypeAlias> _112572770_build_type_alias(jule::Ref<_111612b20_TypeAliasDecl>);
inline jule::Ref<_11209db80_Field> _112572770_build_field(jule::Ref<_111612b20_FieldDecl>);
inline jule::Slice<jule::Ref<_11209db80_Field>> _112572770_build_fields(jule::Slice<jule::Ref<_111612b20_FieldDecl>>);
inline jule::Ref<_11209db80_Struct> _112572770_build_struct(jule::Ref<_111612b20_StructDecl>);
inline jule::Ref<_112446fb0_Param> _112572770_build_param(jule::Ref<_111612b20_ParamDecl>);
inline jule::Slice<jule::Ref<_112446fb0_Param>> _112572770_build_params(jule::Slice<jule::Ref<_111612b20_ParamDecl>>);
inline jule::Ref<_112446fb0_RetType> _112572770_build_ret_type(jule::Ref<_111612b20_RetTypeDecl>);
inline jule::Ref<_112446fb0_Fn> _112572770_build_fn(jule::Ref<_111612b20_FnDecl>);
inline jule::Slice<jule::Ref<_112446fb0_Fn>> _112572770_build_methods(jule::Slice<jule::Ref<_111612b20_FnDecl>>);
inline jule::Ref<_11209e2e0_Trait> _112572770_build_trait(jule::Ref<_111612b20_TraitDecl>);
inline jule::Ref<_11261eaf0_EnumItem> _112572770_build_enum_item(jule::Ref<_111612b20_EnumItemDecl>);
inline jule::Slice<jule::Ref<_11261eaf0_EnumItem>> _112572770_build_enum_items(jule::Slice<jule::Ref<_111612b20_EnumItemDecl>>);
inline jule::Ref<_11261eaf0_Enum> _112572770_build_enum(jule::Ref<_111612b20_EnumDecl>);
inline jule::Ref<_1320e22c0_Var> _112572770_build_var(jule::Ref<_111612b20_VarDecl>);
inline jule::Ref<_112626410_Impl> _112572770_build_impl(jule::Ref<_111612b20_Impl>);
inline jule::Ref<_1126288e0_ScopeChecker> _1126288e0_new_scope_checker_base(jule::Ref<_11262c360_Sema>,jule::Ref<_112446fb0_FnIns>);
inline jule::Ref<_1126288e0_ScopeChecker> _1126288e0_new_scope_checker(jule::Ref<_11262c360_Sema>,jule::Ref<_112446fb0_FnIns>);
inline jule::Ref<_1126288e0_ScopeLabel> _1126288e0_find_label_parent(jule::Str,jule::Ref<_1126288e0_ScopeChecker>);
inline jule::Int _1126288e0_count_match_type(jule::Ref<_1126288e0_Match>,jule::Ref<_1217f7750_TypeKind>);
inline jule::Slice<jule::Ref<_121dedce0_Data>> _1126288e0_get_datas_from_tuple_data(jule::Ref<_121dedce0_Data>);
inline jule::Slice<jule::Any> _1126288e0_get_expr_models(jule::Any);
inline jule::Bool _1126288e0_check_mut(jule::Ref<_11262c360_Sema>,jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>,_111613f20_Token);
inline jule::Bool _1126288e0_check_assign(jule::Ref<_11262c360_Sema>,jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>,_111613f20_Token);
inline jule::Bool _1126288e0_is_valid_ast_st_for_next_st(jule::Any);
inline jule::Bool _1126288e0_is_valid_st_for_next_st(jule::Any);
inline jule::Bool _1126288e0_st_is_def(jule::Any);
inline jule::Ref<_1320e22c0_Var> _11265fb90_find_var_in_package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>>,jule::Str,jule::Bool);
inline jule::Ref<_1217f7750_TypeAlias> _11265fb90_find_type_alias_in_package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>>,jule::Str,jule::Bool);
inline jule::Ref<_11209db80_Struct> _11265fb90_find_struct_in_package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>>,jule::Str,jule::Bool);
inline jule::Ref<_112446fb0_Fn> _11265fb90_find_fn_in_package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>>,jule::Str,jule::Bool);
inline jule::Ref<_11209e2e0_Trait> _11265fb90_find_trait_in_package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>>,jule::Str);
inline jule::Ref<_11261eaf0_Enum> _11265fb90_find_enum_in_package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>>,jule::Str);
inline _1316b4080_Log _11262c360_compiler_err(_111613f20_Token,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _11262c360_imp_is_lookupable(jule::Ref<_11265fb90_ImportInfo>,jule::Str);
inline jule::Slice<jule::Ref<_1320e22c0_Var>> _11262c360_build_ret_vars(jule::Ref<_112446fb0_FnIns>);
inline jule::Slice<jule::Ref<_1320e22c0_Var>> _11262c360_build_param_vars(jule::Ref<_112446fb0_FnIns>);
inline jule::Slice<jule::Ref<_1217f7750_TypeAlias>> _11262c360_build_generic_type_aliases(jule::Ref<_112446fb0_FnIns>);
inline jule::Ref<_1320e2330_SymbolTable> _11262c360_find_file(jule::Slice<jule::Ref<_1320e2330_SymbolTable>>,jule::Ref<_1220fd110_File>);
inline std::tuple<jule::Bool,jule::Bool> _11262c360_conditional_has_ret(jule::Ref<_1126288e0_Conditional>);
inline jule::Bool _11262c360_match_has_ret(jule::Ref<_1126288e0_Match>);
inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _11262c360___has_ret(jule::Ref<_1126288e0_Scope>);
inline jule::Bool _11262c360_has_ret(jule::Ref<_1126288e0_Scope>);
inline jule::Slice<jule::Ref<_1217f7750_TypeKind>> _121807de0_get_fn_result_types(jule::Ref<_112446fb0_FnIns>);
inline jule::Bool _121807de0_trait_has_reference_receiver(jule::Ref<_11209e2e0_Trait>);
inline jule::Bool _121807de0_float_assignable(jule::Str,jule::Ref<_121dedce0_Data>);
inline jule::Bool _121807de0_sig_assignable(jule::Str,jule::Ref<_121dedce0_Data>);
inline jule::Bool _121807de0_unsig_assignable(jule::Str,jule::Ref<_121dedce0_Data>);
inline jule::Bool _121807de0_int_assignable(jule::Str,jule::Ref<_121dedce0_Data>);
inline jule::Any _121dedce0_find_builtins_import(jule::Str,jule::Ref<_11265fb90_ImportInfo>);
inline jule::Any _121dedce0_find_builtins_sema(jule::Str,jule::Ref<_11262c360_Sema>);
inline jule::Bool _121dedce0_is_ok_for_shifting(jule::Ref<_121dedce0_Data>);
inline jule::Bool _121dedce0_is_instanced_struct(jule::Ref<_11209db80_StructIns>);
inline void _121dedce0_normalize_bitsize(jule::Ref<_121dedce0_Data>);
inline void _121dedce0_normalize_type(jule::Ref<_121dedce0_Data>);
inline void _121dedce0_apply_cast_kind_model(jule::Ref<_121dedce0_Data>);
inline void _121dedce0_apply_cast_kind(jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _121dedce0_build_void_data(void);
inline jule::Str _121dedce0_kind_by_bitsize(jule::Any);
inline jule::Str _121dedce0_check_data_for_integer_indexing(jule::Ref<_121dedce0_Data>);
inline jule::Bool _1217f7750_can_get_ptr(jule::Ref<_121dedce0_Data>);
inline jule::Bool _1217f7750_is_lvalue(jule::Ref<_1217f7750_TypeKind>);
inline jule::Bool _1217f7750_is_mut(jule::Ref<_1217f7750_TypeKind>);
inline jule::Bool _1217f7750_supports_cloning(jule::Ref<_1217f7750_TypeKind>);
inline jule::Bool _1217f7750_is_nil_compatible(jule::Ref<_1217f7750_TypeKind>);
inline jule::Bool _1217f7750_is_valid_for_ref(jule::Ref<_1217f7750_TypeKind>);
inline jule::Bool _1217f7750_is_variadicable(jule::Ref<_1217f7750_TypeKind>);
inline jule::Str _1217f7750_build_link_path_by_tokens(jule::Slice<_111613f20_Token>);
inline jule::Ref<_1217f7750_Prim> _1217f7750_build_prim_type(jule::Str);
inline jule::Ref<_11209db80_Struct> _1217f7750_get_struct_from_kind(jule::Ref<_1217f7750_TypeKind>);
inline jule::Bool _1217f7750_is_prim(jule::Str);
inline std::tuple<jule::Ref<_1320e2330_SymbolTable>,jule::Slice<_1316b4080_Log>> _11304a4a0_build_symbols(jule::Ref<_1220cb5d0_Ast>,jule::Trait<_11265fb90_Importer>,jule::Ref<_112572770_SymbolBuilder>);
inline std::tuple<jule::Ref<_11265fb90_Package>,jule::Slice<_1316b4080_Log>> _11304a4a0___analyze_package(jule::Slice<jule::Ref<_1220cb5d0_Ast>>,jule::Trait<_11265fb90_Importer>);
inline std::tuple<jule::Ref<_11265fb90_Package>,jule::Slice<_1316b4080_Log>> _11304a4a0_analyze_package(jule::Slice<jule::Ref<_1220cb5d0_Ast>>,jule::Trait<_11265fb90_Importer>);
inline std::tuple<jule::Ref<_1320e2330_SymbolTable>,jule::Slice<_1316b4080_Log>> _11304a4a0_analyze_file(jule::Ref<_1220cb5d0_Ast>,jule::Trait<_11265fb90_Importer>);
inline void _1130606b0_init(void);
inline jule::Ref<_112446fb0_FnIns> _1130606b0_find_builtin_fn(jule::Str);
inline jule::Ref<_1217f7750_TypeAlias> _1130606b0_find_builtin_type_alias(jule::Str);
inline jule::Ref<_11209e2e0_Trait> _1130606b0_find_builtin_trait(jule::Str);
inline jule::Any _1130606b0_find_builtin_def(jule::Str);
inline jule::Any _1130606b0_find_builtin_def_std_mem(jule::Str);
inline jule::Any _1130606b0_find_package_builtin_def(jule::Str,jule::Str);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_common_plain(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_common(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_common_mut(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_out(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_outln(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_new(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_real(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_drop(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_panic(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_make(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_append(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_copy(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_recover(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_clone(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_std_mem_size_of(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_std_mem_align_of(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>);
inline jule::Bool _12207c390_eval_directive_ident(jule::Str);
inline jule::Bool _12207c390_eval_directive_part(jule::Str);
inline jule::Slice<jule::Str> _12207c390_split_operans(jule::Str,jule::Str);
inline jule::Bool _12207c390_eval_directive_expr(jule::Str);
inline void _122082160_set_os_flags(void);
inline void _122082160_set_arch_flags(void);
inline void _122082160_init(void);
inline void _12209b250_exit_err(jule::Str);
inline jule::Slice<jule::U8> _12209b250_read_buff(jule::Str);
inline _1316b4080_Log _12209b250_flat_compiler_err(jule::Str);
inline std::tuple<jule::Slice<jule::Ref<_1220df4b0_DirEntry>>,jule::Str> _12209b250_read_package_dirents(jule::Str);
inline jule::Str _12209b250_concat_all_parts(jule::Slice<jule::Str>);
inline jule::Bool _12209b250_is_pass_build_directives(jule::Ref<_1220cb5d0_Ast>&);
inline void _122056550_push_passes(jule::Ref<_11265fb90_Package>,jule::Slice<jule::Str>&);
inline jule::Slice<jule::Str> _122056550_get_all_unique_passes(jule::Ref<_11265fb90_Package>,jule::Slice<jule::Ref<_11265fb90_ImportInfo>>);
inline std::tuple<jule::Ref<_122056550_IR>,jule::Slice<_1316b4080_Log>> _122056550_build_ir(jule::Str);
inline jule::Bool _131692a90_is_exist_0(jule::Slice<jule::Any>,jule::Ref<_112446fb0_FnIns>);
inline jule::Bool _131692a90_is_exist_1(jule::Slice<jule::Any>,jule::Ref<_1320e22c0_Var>);
inline jule::Bool _131692a90_is_exist_2(jule::Slice<jule::Any>,jule::Ref<_11209db80_StructIns>);
inline jule::Bool _131692a90_is_exist_3(jule::Slice<jule::Any>,jule::Ref<_11209e2e0_Trait>);
inline jule::Bool _131692a90_is_exist_ref(jule::Slice<jule::Any>,jule::Any);
inline jule::Bool _131692a90_is_dead(jule::Any);
inline void _131692a90_remove_from_slice_0(jule::Slice<jule::Ref<_112446fb0_FnIns>>&,jule::Int);
inline void _131692a90_remove_from_slice_1(jule::Slice<jule::Ref<_11209db80_StructIns>>&,jule::Int);
inline void _131692a90_drop_ref(jule::Slice<jule::Any>&,jule::Int);
inline jule::Bool _131692a90_is_all_references_are_dead_0(jule::Ref<_112572770_ReferenceStack>);
inline jule::Bool _131692a90_is_all_references_are_dead_1(jule::Ref<_112572770_ReferenceStack>);
inline jule::Bool _131692a90_is_all_references_are_dead_2(jule::Ref<_112572770_ReferenceStack>);
inline jule::Bool _131692a90_is_fn_dead(jule::Ref<_112446fb0_FnIns>);
inline jule::Bool _131692a90_is_var_dead(jule::Ref<_1320e22c0_Var>);
inline jule::Bool _131692a90_kind_is_dead(jule::Ref<_1217f7750_TypeKind>);
inline jule::Bool _131692a90_is_any_generic_is_dead(jule::Slice<jule::Ref<_1217f7750_TypeKind>>&);
inline jule::Bool _131692a90_is_struct_dead(jule::Ref<_11209db80_StructIns>);
inline jule::Bool _131692a90_is_trait_dead(jule::Ref<_11209e2e0_Trait>);
inline void _131692a90_eliminate_dead_functions(_11203c360_Vector_11&);
inline void _131692a90_eliminate_dead_globals(jule::Ref<_11265fb90_Package>&);
inline void _131692a90_eliminate_dead_functions_package(jule::Ref<_11265fb90_Package>&);
inline void _131692a90_eliminate_dead_structs(jule::Ref<_11265fb90_Package>&);
inline void _131692a90_eliminate_dead_traits(jule::Ref<_11265fb90_Package>&);
inline void _131692a90_catch_alive_init(jule::Ref<_11265fb90_Package>&);
inline void _131692a90_eliminate_dead_code_package(jule::Ref<_11265fb90_Package>&);
inline void _131692a90_eliminate_dead_code(jule::Ref<_122056550_IR>);
inline void _1220584c0_eliminate_dead_code_of_scope(jule::Ref<_1126288e0_Scope>);
inline void _1219d92f0_push_opt_level(jule::Int);
inline jule::Bool _1219d92f0_is_opt_enabled(jule::Str);
inline jule::Str _121b31570_gen_if(jule::Ref<_1126288e0_If>);
inline jule::Str _121b31570_gen_conditional(jule::Ref<_1126288e0_Conditional>);
inline jule::Str _121b31570_gen_inf_iter(jule::Ref<_1126288e0_InfIter>);
inline jule::Str _121b31570_gen_while_iter(jule::Ref<_1126288e0_WhileIter>);
inline jule::Trait<_121b31570_RangeSetter> _121b31570_get_range_setter(jule::Ref<_1126288e0_RangeIter>);
inline jule::Str _121b31570_gen_range_iter(jule::Ref<_1126288e0_RangeIter>);
inline jule::Str _121b31570_gen_cont(jule::Ref<_1126288e0_ContSt>);
inline jule::Str _121b31570_gen_label(jule::Ref<_1126288e0_Label>);
inline jule::Str _121b31570_gen_goto(jule::Ref<_1126288e0_GotoSt>);
inline jule::Str _121b31570_gen_postfix(jule::Ref<_1126288e0_Postfix>);
inline jule::Str _121b31570_gen_assign(jule::Ref<_1126288e0_Assign>);
inline jule::Str _121b31570_gen_multi_assign(jule::Ref<_1126288e0_MultiAssign>);
inline jule::Str _121b31570_gen_case(jule::Ref<_1126288e0_Match>,jule::Ref<_1126288e0_Case>);
inline jule::Str _121b31570_gen_match(jule::Ref<_1126288e0_Match>);
inline jule::Str _121b31570_gen_fall_st(jule::Ref<_1126288e0_FallSt>);
inline jule::Str _121b31570_gen_break_st(jule::Ref<_1126288e0_BreakSt>);
inline jule::Str _121b31570_gen_ret_vars(jule::Ref<_1126288e0_RetSt>);
inline jule::Str _121b31570_gen_ret_expr_tuple(jule::Ref<_1126288e0_RetSt>);
inline jule::Str _121b31570_gen_ret_expr(jule::Ref<_1126288e0_RetSt>);
inline jule::Str _121b31570_gen_ret_st(jule::Ref<_1126288e0_RetSt>);
inline jule::Str _121b31570_gen_ret_st_with_defaults(jule::Ref<_1217f7750_TypeKind>);
inline jule::Str _121b31570_gen_recover(jule::Ref<_1126288e0_Recover>);
inline jule::Str _121b31570_gen_data_expr(jule::Ref<_121dedce0_Data>);
inline jule::Str _121b31570_gen_st(jule::Any);
inline jule::Str _121b31570_gen_scope(jule::Ref<_1126288e0_Scope>);
inline jule::Str _121b31570_gen_fn_scope(jule::Ref<_112446fb0_FnIns>);
inline jule::Str _121b31570_gen_method_scope(jule::Ref<_112446fb0_FnIns>);
inline jule::Str _1133950d0_get_accessor(jule::Ref<_1217f7750_TypeKind>);
inline jule::Str _1133950d0_decompose_common_esq(jule::U8);
inline jule::Str _1133950d0_sbtoa(jule::U8);
inline jule::Str _1133950d0_get_str_model(jule::Ref<_1131530d0_Const>);
inline jule::Str _1133950d0_get_bool_model(jule::Ref<_1131530d0_Const>);
inline jule::Str _1133950d0_get_nil_model(void);
inline jule::Str _1133950d0_gen_float_special_cases(jule::F64);
inline jule::Str _1133950d0_get_f32_model(jule::Ref<_1131530d0_Const>);
inline jule::Str _1133950d0_get_f64_model(jule::Ref<_1131530d0_Const>);
inline jule::Str _1133950d0_get_float_model(jule::Ref<_121dedce0_Data>);
inline jule::Str _1133950d0_i64toa(jule::I64);
inline jule::Str _1133950d0_get_i64_model(jule::Ref<_1131530d0_Const>);
inline jule::Str _1133950d0_get_u64_model(jule::Ref<_1131530d0_Const>);
inline jule::Str _1133950d0_gen_const_expr(jule::Ref<_121dedce0_Data>);
inline jule::Str _1133950d0_gen_const_expr_model(jule::Ref<_1131530d0_Const>);
inline jule::Str _1133950d0_gen_binop_expr_model(jule::Ref<_112673500_BinopExprModel>);
inline jule::Str _1133950d0_gen_var_expr_model(jule::Ref<_1320e22c0_Var>);
inline jule::Str _1133950d0_gen_struct_expr_model(jule::Ref<_11209db80_Struct>);
inline jule::Str _1133950d0_gen_struct_ins_expr_model(jule::Ref<_11209db80_StructIns>);
inline jule::Str _1133950d0_gen_unary_expr_model(jule::Ref<_112673500_UnaryExprModel>);
inline jule::Str _1133950d0_gen_get_ref_ptr_expr_model(jule::Ref<_112673500_GetRefPtrExprModel>);
inline jule::Str _1133950d0_gen_cpp_struct_lit_expr_model(jule::Ref<_112673500_StructLitExprModel>);
inline jule::Str _1133950d0_gen_struct_lit_expr_model(jule::Ref<_112673500_StructLitExprModel>);
inline jule::Str _1133950d0_gen_alloc_struct_lit_expr_model(jule::Ref<_112673500_AllocStructLitExprModel>);
inline jule::Str _1133950d0_gen_casting_expr_model(jule::Ref<_112673500_CastingExprModel>);
inline jule::Str _1133950d0_gen_arg_expr_models(jule::Slice<jule::Any>);
inline jule::Str _1133950d0_gen_fn_call_expr_model(jule::Ref<_112673500_FnCallExprModel>);
inline jule::Str _1133950d0_gen_slice_expr_model(jule::Ref<_112673500_SliceExprModel>);
inline jule::Str _1133950d0_gen_indexing_expr_model(jule::Ref<_112673500_IndexigExprModel>);
inline jule::Str _1133950d0_gen_anon_fn_expr_model(jule::Ref<_112673500_AnonFnExprModel>);
inline jule::Str _1133950d0_gen_map_expr_model(jule::Ref<_112673500_MapExprModel>);
inline jule::Str _1133950d0_gen_slicing_expr_model(jule::Ref<_112673500_SlicingExprModel>);
inline jule::Str _1133950d0_gen_trait_sub_ident_expr_model(jule::Ref<_112673500_TraitSubIdentExprModel>);
inline jule::Str _1133950d0_gen_struct_sub_ident_expr_model(jule::Ref<_112673500_StructSubIdentExprModel>);
inline jule::Str _1133950d0_gen_common_ident_expr_model(jule::Ref<_112673500_CommonIdentExprModel>);
inline jule::Str _1133950d0_gen_common_sub_ident_expr_model(jule::Ref<_112673500_CommonSubIdentExprModel>);
inline jule::Str _1133950d0_gen_array_expr_model(jule::Ref<_112673500_ArrayExprModel>);
inline jule::Str _1133950d0_gen_fn_ins_expr_model(jule::Ref<_112446fb0_FnIns>);
inline jule::Str _1133950d0_gen_tuple_expr_model(jule::Ref<_112673500_TupleExprModel>);
inline jule::Str _1133950d0_gen_builtin_new_call_expr_model(jule::Ref<_112673500_BuiltinNewCallExprModel>);
inline jule::Str _1133950d0_gen_builtin_out_call_expr_model(jule::Ref<_112673500_BuiltinOutCallExprModel>);
inline jule::Str _1133950d0_gen_builtin_outln_call_expr_model(jule::Ref<_112673500_BuiltinOutlnCallExprModel>);
inline jule::Str _1133950d0_gen_builtin_real_call_expr_model(jule::Ref<_112673500_BuiltinRealCallExprModel>);
inline jule::Str _1133950d0_gen_builtin_drop_call_expr_model(jule::Ref<_112673500_BuiltinDropCallExprModel>);
inline jule::Str _1133950d0_gen_builtin_panic_call_expr_model(jule::Ref<_112673500_BuiltinPanicCallExprModel>);
inline jule::Str _1133950d0_gen_builtin_make_call_expr_model(jule::Ref<_112673500_BuiltinMakeCallExprModel>);
inline jule::Str _1133950d0_gen_builtin_clone_call_expr_model(jule::Ref<_112673500_BuiltinCloneCallExprModel>);
inline jule::Str _1133950d0_gen_sizeof_expr_model(jule::Ref<_112673500_SizeofExprModel>);
inline jule::Str _1133950d0_gen_alignof_expr_model(jule::Ref<_112673500_AlignofExprModel>);
inline jule::Str _1133950d0_gen_rune_expr_model(jule::Ref<_112673500_RuneExprModel>);
inline jule::Str _1133950d0_gen_builtin_error_trait_sub_ident_expr_model(jule::Ref<_112673500_BuiltinErrorTraitSubIdentExprModel>);
inline jule::Str _1133950d0_gen_explicit_deref_expr_model(jule::Ref<_112673500_ExplicitDerefExprModel>);
inline jule::Str _1133950d0_gen_struct_static_ident_expr_model(jule::Ref<_112673500_StructStaticIdentExprModel>);
inline jule::Str _1133950d0_gen_expr_model(jule::Any);
inline jule::Str _1133950d0_gen_expr(jule::Any);
inline jule::Str _1133950d0_gen_val(jule::Ref<_121dedce0_Value>);
inline jule::Str _1133950d0_get_init_expr(jule::Ref<_1217f7750_TypeKind>);
inline jule::Str _113466390_get_derive_fn_decl_clone(jule::Ref<_11209db80_Struct>);
inline jule::Str _113466390_get_derive_fn_def_clone(jule::Ref<_11209db80_Struct>);
inline jule::Str _113468030_as_ident(jule::Str);
inline jule::Str _113468030_as_jt(jule::Str);
inline jule::Str _113468030_get_ptr_as_ident(jule::Uintptr);
inline jule::Str _113468030_as_out_ident(jule::Str,jule::Uintptr);
inline jule::Str _113468030_as_local_ident(jule::Int,jule::Int,jule::Str);
inline jule::Str _113468030_fn_out_ident(jule::Ref<_112446fb0_Fn>);
inline jule::Str _113468030_fn_ins_out_ident(jule::Ref<_112446fb0_FnIns>);
inline jule::Str _113468030_trait_out_ident(jule::Ref<_11209e2e0_Trait>);
inline jule::Str _113468030_param_out_ident(jule::Ref<_112446fb0_Param>);
inline jule::Str _113468030_struct_out_ident(jule::Ref<_11209db80_Struct>);
inline jule::Str _113468030_struct_ins_out_ident(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113468030_field_out_ident(jule::Ref<_11209db80_Field>);
inline jule::Str _113468030_var_out_ident(jule::Ref<_1320e22c0_Var>);
inline jule::Str _113468030_iter_begin_label_ident(jule::Uintptr);
inline jule::Str _113468030_iter_end_label_ident(jule::Uintptr);
inline jule::Str _113468030_iter_next_label_ident(jule::Uintptr);
inline jule::Str _113468030_label_ident(jule::Str);
inline jule::Str _113468030_match_end_label_ident(jule::Uintptr);
inline jule::Str _113468030_case_begin_label_ident(jule::Uintptr);
inline jule::Str _113468030_case_end_label_ident(jule::Uintptr);
inline jule::Bool _113497140_has_directive(jule::Slice<jule::Ref<_111612b20_Directive>>,jule::Str);
inline jule::Str _113497140_gen_prim_kind(jule::Ref<_1217f7750_Prim>);
inline jule::Str _113497140_gen_tuple_kind(jule::Ref<_1217f7750_Tuple>);
inline jule::Str _113497140_as_ref_kind(jule::Str);
inline jule::Str _113497140_gen_ref_kind(jule::Ref<_1217f7750_Ref>);
inline jule::Str _113497140_gen_ptr_kind(jule::Ref<_1217f7750_Ptr>);
inline jule::Str _113497140_gen_enum_kind(jule::Ref<_11261eaf0_Enum>);
inline jule::Str _113497140_as_slice_kind(jule::Ref<_1217f7750_TypeKind>);
inline jule::Str _113497140_gen_slice_kind(jule::Ref<_1217f7750_Slc>);
inline jule::Str _113497140_gen_map_kind(jule::Ref<_1217f7750_Map>);
inline jule::Str _113497140_gen_trait_kind_from_ident(jule::Str);
inline jule::Str _113497140_gen_trait_kind(jule::Ref<_11209e2e0_Trait>);
inline jule::Str _113497140_gen_struct_kind(jule::Ref<_11209db80_Struct>);
inline jule::Str _113497140_gen_struct_kind_ins(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497140_gen_array_kind(jule::Ref<_1217f7750_Arr>);
inline jule::Str _113497140_gen_fn_anon_decl(jule::Ref<_112446fb0_FnIns>);
inline jule::Str _113497140_gen_fn_kind(jule::Ref<_112446fb0_FnIns>);
inline jule::Str _113497140_gen_type_kind(jule::Ref<_1217f7750_TypeKind>);
inline void _113497500_add_indent(void);
inline void _113497500_done_indent(void);
inline jule::Str _113497500_indent(void);
inline jule::Bool _113497500_is_cpp_header_file(jule::Str);
inline jule::Str _113497500_gen_links(jule::Ref<_122056550_IR>);
inline jule::Str _113497500_gen_fn_result(jule::Ref<_112446fb0_Fn>);
inline jule::Str _113497500_gen_fn_ins_result(jule::Ref<_112446fb0_FnIns>);
inline jule::Str _113497500_gen_param_prototype(jule::Ref<_112446fb0_Param>);
inline jule::Str _113497500_gen_param_ins(jule::Ref<_112446fb0_ParamIns>);
inline jule::Str _113497500_gen_param_ins_prototype(jule::Ref<_112446fb0_ParamIns>);
inline jule::Str _113497500_gen_param(jule::Ref<_112446fb0_Param>);
inline jule::Str _113497500_gen_params(jule::Slice<jule::Ref<_112446fb0_Param>>);
inline jule::Str _113497500_gen_params_ins(jule::Slice<jule::Ref<_112446fb0_ParamIns>>);
inline jule::Str _113497500_gen_params_prototypes(jule::Slice<jule::Ref<_112446fb0_ParamIns>>);
inline jule::Str _113497500_gen_trait(jule::Ref<_11209e2e0_Trait>);
inline jule::Str _113497500_gen_traits_tbl(jule::Ref<_1320e2330_SymbolTable>);
inline jule::Str _113497500_gen_traits_pkg(jule::Ref<_11265fb90_Package>);
inline jule::Str _113497500_gen_traits(jule::Ref<_122056550_IR>);
inline jule::Str _113497500_gen_trait_prototype(jule::Ref<_11209e2e0_Trait>);
inline jule::Str _113497500_gen_trait_prototypes(jule::Ref<_11265fb90_Package>);
inline jule::Str _113497500_gen_struct_plain_prototype(jule::Ref<_11209db80_Struct>);
inline jule::Str _113497500_gen_struct_plain_prototypes(jule::Slice<jule::Ref<_11209db80_Struct>>);
inline jule::Str _113497500_gen_struct_traits(jule::Ref<_11209db80_Struct>);
inline jule::Str _113497500_gen_field_decl(jule::Ref<_11209db80_FieldIns>);
inline jule::Str _113497500_gen_struct_self_field_type_kind(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497500_gen_struct_self_field(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497500_gen_struct_self_field_init_st(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497500_gen_struct_constructor(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497500_gen_struct_destructor(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497500_gen_struct_operators(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497500_gen_struct_derive_defs_prototypes(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497500_gen_struct_ins_prototype(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497500_gen_struct_prototype(jule::Ref<_11209db80_Struct>);
inline jule::Str _113497500_gen_struct_prototypes(jule::Slice<jule::Ref<_11209db80_Struct>>);
inline jule::Str _113497500_gen_fn_decl_head(jule::Ref<_112446fb0_FnIns>,jule::Bool);
inline jule::Str _113497500_gen_fn_prototype(jule::Ref<_112446fb0_Fn>,jule::Bool);
inline jule::Str _113497500_gen_fn_prototypes(jule::Ref<_11265fb90_Package>);
inline jule::Str _113497500_gen_prototypes(jule::Ref<_122056550_IR>,jule::Slice<jule::Ref<_11209db80_Struct>>);
inline jule::Str _113497500_gen_var_init_expr(jule::Ref<_1320e22c0_Var>,jule::Str);
inline jule::Str _113497500_gen_var(jule::Ref<_1320e22c0_Var>);
inline jule::Str _113497500_gen_globals(jule::Slice<jule::Ref<_1320e22c0_Var>>);
inline jule::Str _113497500_gen_fn(jule::Ref<_112446fb0_Fn>);
inline jule::Str _113497500_gen_pkg_fns(jule::Ref<_11265fb90_Package>);
inline jule::Str _113497500_gen_struct_method_defs(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497500_gen_struct_ostream(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497500_gen_struct_derive_defs(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497500_gen_struct_ins(jule::Ref<_11209db80_StructIns>);
inline jule::Str _113497500_gen_struct(jule::Ref<_11209db80_Struct>);
inline jule::Str _113497500_gen_structs(jule::Slice<jule::Ref<_11209db80_Struct>>);
inline jule::Str _113497500_gen_fns(jule::Ref<_122056550_IR>);
inline void _113497500_push_init(jule::Ref<_11265fb90_Package>,jule::Str&);
inline jule::Str _113497500_gen_init_caller(jule::Ref<_122056550_IR>);
inline void _113497500_append_standard(jule::Str&,jule::Str,jule::Str);
inline jule::Str _113497500_gen(jule::Ref<_122056550_IR>);
inline jule::Bool _1134c7790_is_struct_ordered(jule::Slice<jule::Ref<_11209db80_Struct>>,jule::Ref<_11209db80_Struct>);
inline void _1134c7790_order_structures(jule::Slice<jule::Ref<_11209db80_Struct>>);
inline jule::Bool _1134c7790_is_var_ordered(jule::Slice<jule::Ref<_1320e22c0_Var>>,jule::Ref<_1320e22c0_Var>);
inline void _1134c7790_order_variables(jule::Slice<jule::Ref<_1320e22c0_Var>>);
inline jule::Str _1316092f0_str_repeat(jule::Str,jule::Int);
inline void _1316092f0_print_error_message(jule::Str);
inline void _1316092f0_help(void);
inline void _1316092f0_version(void);
inline void _1316092f0_tool_distos(void);
inline void _1316092f0_tool_distarch(void);
inline void _1316092f0_tool(void);
inline void _1316092f0_julenv(void);
inline jule::Bool _1316092f0_process_command(void);
inline void _1316092f0_init(void);
inline void _1316092f0_exit_err(jule::Str);
void entry_point(void);
inline jule::Int _1316303f0_system(jule::Str);
inline std::tuple<jule::Str,jule::Str> _1316303f0_get_option(jule::Slice<jule::Str>,jule::Int&);
inline jule::Str _1316303f0_get_option_value(jule::Slice<jule::Str>,jule::Int&);
inline void _1316303f0_parse_out_option(jule::Slice<jule::Str>,jule::Int&);
inline void _1316303f0_parse_opt_option(jule::Slice<jule::Str>,jule::Int&);
inline void _1316303f0_check_target_arch(jule::Str);
inline void _1316303f0_check_target_os(jule::Str);
inline void _1316303f0_parse_target_option(jule::Slice<jule::Str>,jule::Int&);
inline void _1316303f0_parse_compiler_option(jule::Slice<jule::Str>,jule::Int&);
inline jule::Str _1316303f0_parse_options(jule::Slice<jule::Str>);
inline void _1316303f0_write_output(jule::Str,jule::Str);
inline void _1316303f0_clear_objects(void);
inline void _1316303f0_compile_ir(jule::Str,jule::Str);
inline void _1316303f0_do_spell(jule::Str,jule::Str,jule::Str);
inline void _1316303f0_check_mode(void);
inline void _1316303f0_check_compiler(void);
inline void _1316303f0_set(void);
inline void _1316303f0_print_logs(jule::Slice<_1316b4080_Log>);
inline jule::Bool _1316303f0_is_cpp_source_file(jule::Str);
inline std::tuple<jule::Str,jule::Str> _1316303f0_gen_compile_cmd(jule::Str,jule::Ref<_122056550_IR>);
inline jule::Str _1316303f0_get_compile_path(void);
inline void _1316303f0_apply_target_independent_optimizations(jule::Ref<_122056550_IR>);
inline void _1316303f0_compile_command(void);


static jule::Array<jule::Array<jule::Str,2>,4> _1316092f0_HELP_MAP = jule::Array<jule::Array<jule::Str,2>,4>({jule::Array<jule::Str,2>({jule::Str("help", 4),jule::Str("Show help", 9)}),jule::Array<jule::Str,2>({jule::Str("version", 7),jule::Str("Show version", 12)}),jule::Array<jule::Str,2>({jule::Str("tool", 4),jule::Str("Tools for effective Jule", 24)}),jule::Array<jule::Str,2>({jule::Str("julenv", 6),jule::Str("Show information about native jule environment", 46)})});
static jule::Str _1316303f0_COMPILER = jule::Str("", 0);
static jule::Str _1316303f0_COMPILER_PATH = jule::Str("", 0);
static jule::Str _1316303f0_OUT_DIR = jule::Str("dist", 4);
static jule::Int _1316303f0_MODE = 0LLU;
static jule::Str _1316303f0_OUT_NAME = jule::Str("ir.cpp", 6);
static jule::Str _1316303f0_OUT = jule::Str("", 0);
static jule::Uintptr _1317a9110_STDIN = static_cast<jule::Uintptr>(_1317a9110_get_std_handle(static_cast<jule::Uintptr>(18446744073709551606LLU)));
static jule::Uintptr _1317a9110_STDOUT = static_cast<jule::Uintptr>(_1317a9110_get_std_handle(static_cast<jule::Uintptr>(18446744073709551605LLU)));
static jule::Uintptr _1317a9110_STDERR = static_cast<jule::Uintptr>(_1317a9110_get_std_handle(static_cast<jule::Uintptr>(18446744073709551604LLU)));
static jule::Array<jule::U8,32> _121ef7c60_DE_BRUIJN32_TAB = jule::Array<jule::U8,32>({0LLU,1LLU,28LLU,2LLU,29LLU,14LLU,24LLU,3LLU,30LLU,22LLU,20LLU,15LLU,25LLU,17LLU,4LLU,8LLU,31LLU,27LLU,13LLU,23LLU,21LLU,19LLU,16LLU,7LLU,26LLU,12LLU,18LLU,6LLU,11LLU,5LLU,10LLU,9LLU});
static jule::Array<jule::U8,64> _121ef7c60_DE_BRUIJN64_TAB = jule::Array<jule::U8,64>({0LLU,1LLU,56LLU,2LLU,57LLU,49LLU,28LLU,3LLU,61LLU,58LLU,42LLU,50LLU,38LLU,29LLU,17LLU,4LLU,62LLU,47LLU,59LLU,36LLU,45LLU,43LLU,51LLU,22LLU,53LLU,39LLU,33LLU,30LLU,24LLU,18LLU,12LLU,5LLU,63LLU,55LLU,48LLU,27LLU,60LLU,41LLU,37LLU,16LLU,46LLU,35LLU,44LLU,21LLU,52LLU,32LLU,23LLU,11LLU,54LLU,26LLU,40LLU,15LLU,34LLU,20LLU,31LLU,10LLU,25LLU,14LLU,19LLU,9LLU,13LLU,8LLU,7LLU,6LLU});
static jule::Trait<jule::Error> _121ef75f0_OVERFLOW_ERROR = jule::new_struct<_121ef75f0_bits_error>(new( std::nothrow ) _121ef75f0_bits_error(jule::Str("integer overflow", 16)));
static jule::Trait<jule::Error> _121ef75f0_DIVIDE_ERROR = jule::new_struct<_121ef75f0_bits_error>(new( std::nothrow ) _121ef75f0_bits_error(jule::Str("integer divide by zero", 22)));
static jule::Array<jule::F64,6> _121886250__SIN = jule::Array<jule::F64,6>({1.5896230157654656e-10,-2.5050747762857807e-08,2.7557313621385722e-06,-1.984126982958954e-04,8.333333333322118e-03,-1.666666666666663e-01});
static jule::Array<jule::F64,6> _121886250__COS = jule::Array<jule::F64,6>({-1.1358536521387682e-11,2.087570084197473e-09,-2.755731417929674e-07,2.4801587288851704e-05,-1.3888888888873056e-03,4.1666666666666595e-02});
static jule::Array<jule::F64,3> _12173a540__TAN_P = jule::Array<jule::F64,3>({-1.3093693918138379e+04,1.1535166483858742e+06,-1.7956525197648488e+07});
static jule::Array<jule::F64,5> _12173a540__TAN_Q = jule::Array<jule::F64,5>({1e+00,1.3681296347069296e+04,-1.3208923444021097e+06,2.500838018233579e+07,-5.3869575592945464e+07});
static jule::Array<jule::U64,20> _1219212d0_M_PI4 = jule::Array<jule::U64,20>({1LLU,5040379952546458195LLU,17892431488136887169LLU,13169980181085364355LLU,18204331823439776451LLU,7946843935494350272LLU,905889640498799673LLU,18175356263134875261LLU,15061281708168349961LLU,15220161563773041794LLU,8296664548579374057LLU,4109744767560208502LLU,4607516669194743839LLU,16023283104648321598LLU,15739233654134936430LLU,11424645774684705882LLU,16883842788696515318LLU,8795094592981902804LLU,15561835991111744016LLU,12395701187267450711LLU});
static jule::Array<jule::F64,6> _121a0dc40_P_1R8 = jule::Array<jule::F64,6>({0e+00,1.1718749999998865e-01,1.3239480659307358e+01,4.1205185430737856e+02,3.8747453891396053e+03,7.914479540318917e+03});
static jule::Array<jule::F64,5> _121a0dc40_P_1S8 = jule::Array<jule::F64,5>({1.1420737037567841e+02,3.6509308342085346e+03,3.6956206026903346e+04,9.760279359349508e+04,3.080427206278888e+04});
static jule::Array<jule::F64,6> _121a0dc40_P_1R5 = jule::Array<jule::F64,6>({1.3199051955624352e-11,1.171874931906141e-01,6.802751278684329e+00,1.0830818299018911e+02,5.176361395331998e+02,5.287152013633375e+02});
static jule::Array<jule::F64,5> _121a0dc40_P_1S5 = jule::Array<jule::F64,5>({5.928059872211313e+01,9.914014187336144e+02,5.35326695291488e+03,7.844690317495512e+03,1.5040468881036106e+03});
static jule::Array<jule::F64,6> _121a0dc40_P_1R3 = jule::Array<jule::F64,6>({3.025039161373736e-09,1.1718686556725359e-01,3.9329775003331564e+00,3.511940355916369e+01,9.105501107507813e+01,4.855906851973649e+01});
static jule::Array<jule::F64,5> _121a0dc40_P_1S3 = jule::Array<jule::F64,5>({3.479130950012515e+01,3.3676245874782575e+02,1.0468713997577513e+03,8.908113463982564e+02,1.0378793243963928e+02});
static jule::Array<jule::F64,6> _121a0dc40_P_1R2 = jule::Array<jule::F64,6>({1.0771083010687374e-07,1.1717621946268335e-01,2.368514966676088e+00,1.2242610914826123e+01,1.7693971127168773e+01,5.073523125888185e+00});
static jule::Array<jule::F64,5> _121a0dc40_P_1S2 = jule::Array<jule::F64,5>({2.143648593638214e+01,1.2529022716840275e+02,2.322764690571628e+02,1.176793732871471e+02,8.364638933716183e+00});
static jule::Array<jule::F64,6> _121a0dc40_Q_1R8 = jule::Array<jule::F64,6>({0e+00,-1.0253906249999271e-01,-1.6271753454459e+01,-7.596017225139501e+02,-1.1849806670242959e+04,-4.8438512428575035e+04});
static jule::Array<jule::F64,6> _121a0dc40_Q_1S8 = jule::Array<jule::F64,6>({1.613953697007229e+02,7.825385999233485e+03,1.3387533628724958e+05,7.196577236832409e+05,6.666012326177764e+05,-2.9449026430383464e+05});
static jule::Array<jule::F64,6> _121a0dc40_Q_1R5 = jule::Array<jule::F64,6>({-2.089799311417641e-11,-1.0253905024137543e-01,-8.05644828123936e+00,-1.8366960747488838e+02,-1.3731937606550816e+03,-2.6124444045321566e+03});
static jule::Array<jule::F64,6> _121a0dc40_Q_1S5 = jule::Array<jule::F64,6>({8.127655013843358e+01,1.9917987346048596e+03,1.746848519249089e+04,4.985142709103523e+04,2.7948075163891812e+04,-4.719183547951285e+03});
static jule::Array<jule::F64,6> _121a0dc40_Q_1R3 = jule::Array<jule::F64,6>({-5.078312264617666e-09,-1.0253782982083709e-01,-4.610115811394734e+00,-5.7847221656278364e+01,-2.282445407376317e+02,-2.1921012847890933e+02});
static jule::Array<jule::F64,6> _121a0dc40_Q_1S3 = jule::Array<jule::F64,6>({4.766515503237295e+01,6.738651126766997e+02,3.3801528667952634e+03,5.547729097207228e+03,1.903119193388108e+03,-1.3520119144430734e+02});
static jule::Array<jule::F64,6> _121a0dc40_Q_1R2 = jule::Array<jule::F64,6>({-1.7838172751095887e-07,-1.0251704260798555e-01,-2.7522056827818746e+00,-1.9663616264370372e+01,-4.232531333728305e+01,-2.1371921170370406e+01});
static jule::Array<jule::F64,6> _121a0dc40_Q_1S2 = jule::Array<jule::F64,6>({2.9533362906052385e+01,2.5298154998219053e+02,7.575028348686454e+02,7.393932053204672e+02,1.5594900333666612e+02,-4.959498988226282e+00});
static jule::Array<jule::F64,6> _121b24710_P_0R8 = jule::Array<jule::F64,6>({0e+00,-7.031249999999004e-02,-8.081670412753498e+00,-2.5706310567970485e+02,-2.485216410094288e+03,-5.253043804907295e+03});
static jule::Array<jule::F64,5> _121b24710_P_0S8 = jule::Array<jule::F64,5>({1.1653436461966818e+02,3.8337447536412183e+03,4.0597857264847255e+04,1.1675297256437592e+05,4.7627728414673096e+04});
static jule::Array<jule::F64,6> _121b24710_P_0R5 = jule::Array<jule::F64,6>({-1.141254646918945e-11,-7.031249408735993e-02,-4.159610644705878e+00,-6.767476522651673e+01,-3.3123129964917297e+02,-3.464333883656049e+02});
static jule::Array<jule::F64,5> _121b24710_P_0S5 = jule::Array<jule::F64,5>({6.0753938269230034e+01,1.0512523059570458e+03,5.978970943338558e+03,9.625445143577745e+03,2.406058159229391e+03});
static jule::Array<jule::F64,6> _121b24710_P_0R3 = jule::Array<jule::F64,6>({-2.547046017719519e-09,-7.031196163814817e-02,-2.409032215495296e+00,-2.196597747348831e+01,-5.807917047017376e+01,-3.144794705948885e+01});
static jule::Array<jule::F64,5> _121b24710_P_0S3 = jule::Array<jule::F64,5>({3.585603380552097e+01,3.6151398305030386e+02,1.1936078379211153e+03,1.1279967985690741e+03,1.7358093081333575e+02});
static jule::Array<jule::F64,6> _121b24710_P_0R2 = jule::Array<jule::F64,6>({-8.875343330325264e-08,-7.030309954836247e-02,-1.4507384678095299e+00,-7.635696138235278e+00,-1.1193166886035675e+01,-3.2336457935133534e+00});
static jule::Array<jule::F64,5> _121b24710_P_0S2 = jule::Array<jule::F64,5>({2.222029975320888e+01,1.362067942182152e+02,2.704702786580835e+02,1.5387539420832033e+02,1.465761769482562e+01});
static jule::Array<jule::F64,6> _121b24710_Q_0R8 = jule::Array<jule::F64,6>({0e+00,7.32421874999935e-02,1.176820646822527e+01,5.576733802564019e+02,8.859197207564686e+03,3.701462677768878e+04});
static jule::Array<jule::F64,6> _121b24710_Q_0S8 = jule::Array<jule::F64,6>({1.6377602689568982e+02,8.098344946564498e+03,1.4253829141912048e+05,8.033092571195144e+05,8.405015798190605e+05,-3.438992935378666e+05});
static jule::Array<jule::F64,6> _121b24710_Q_0R5 = jule::Array<jule::F64,6>({1.8408596359451553e-11,7.324217666126848e-02,5.8356350896205695e+00,1.3511157728644983e+02,1.027243765961641e+03,1.9899778586460538e+03});
static jule::Array<jule::F64,6> _121b24710_Q_0S5 = jule::Array<jule::F64,6>({8.277661022365378e+01,2.07781416421393e+03,1.884728877857181e+04,5.675111228949473e+04,3.597675384251145e+04,-5.354342756019448e+03});
static jule::Array<jule::F64,6> _121b24710_Q_0R3 = jule::Array<jule::F64,6>({4.377410140897386e-09,7.324111800429114e-02,3.344231375161707e+00,4.2621844074541265e+01,1.708080913405656e+02,1.6673394869665117e+02});
static jule::Array<jule::F64,6> _121b24710_Q_0S3 = jule::Array<jule::F64,6>({4.875887297245872e+01,7.09689221056606e+02,3.7041482262011136e+03,6.460425167525689e+03,2.5163336892036896e+03,-1.492474518361564e+02});
static jule::Array<jule::F64,6> _121b24710_Q_0R2 = jule::Array<jule::F64,6>({1.5044444488698327e-07,7.322342659630793e-02,1.99819174093816e+00,1.4495602934788574e+01,3.1666231750478154e+01,1.6252707571092927e+01});
static jule::Array<jule::F64,6> _121b24710_Q_0S2 = jule::Array<jule::F64,6>({3.036558483552192e+01,2.6934811860804984e+02,8.447837575953201e+02,8.829358451124886e+02,2.1266638851179883e+02,-5.3109549388266695e+00});
static jule::Array<jule::F64,12> _121baee80__LGAM_A = jule::Array<jule::F64,12>({7.721566490153287e-02,3.224670334241136e-01,6.735230105312927e-02,2.0580808432516733e-02,7.385550860814029e-03,2.8905138367341563e-03,1.1927076318336207e-03,5.100697921535113e-04,2.2086279071390839e-04,1.0801156724758394e-04,2.5214456545125733e-05,4.4864094961891516e-05});
static jule::Array<jule::F64,7> _121baee80__LGAM_R = jule::Array<jule::F64,7>({1e+00,1.3920053346762105e+00,7.219355475671381e-01,1.7193386563280308e-01,1.864591917156529e-02,7.779424963818936e-04,7.326684307446256e-06});
static jule::Array<jule::F64,7> _121baee80__LGAM_S = jule::Array<jule::F64,7>({-7.721566490153287e-02,2.1498241596060885e-01,3.25778796408931e-01,1.4635047265246445e-01,2.664227030336386e-02,1.8402845140733772e-03,3.194753265841009e-05});
static jule::Array<jule::F64,15> _121baee80__LGAM_T = jule::Array<jule::F64,15>({4.8383612272381005e-01,-1.475877229945939e-01,6.462494023913339e-02,-3.2788541075985965e-02,1.797067508118204e-02,-1.0314224129834144e-02,6.100538702462913e-03,-3.6845201678113826e-03,2.2596478090061247e-03,-1.4034646998923284e-03,8.81081882437654e-04,-5.385953053567405e-04,3.1563207090362595e-04,-3.1275416837512086e-04,3.355291926355191e-04});
static jule::Array<jule::F64,6> _121baee80__LGAM_U = jule::Array<jule::F64,6>({-7.721566490153287e-02,6.328270640250934e-01,1.4549225013723477e+00,9.777175279633727e-01,2.2896372806469245e-01,1.3381091853678766e-02});
static jule::Array<jule::F64,6> _121baee80__LGAM_V = jule::Array<jule::F64,6>({1e+00,2.4559779371304113e+00,2.128489763798934e+00,7.692851504566728e-01,1.0422264559336913e-01,3.217092422824239e-03});
static jule::Array<jule::F64,7> _121baee80__LGAM_W = jule::Array<jule::F64,7>({4.189385332046727e-01,8.333333333333297e-02,-2.7777777772877554e-03,7.936505586430196e-04,-5.9518755745034e-04,8.363399189962821e-04,-1.6309293409657527e-03});
static jule::Array<jule::F64,3> _121baf000_TANH_P = jule::Array<jule::F64,3>({-9.643991794250523e-01,-9.928772310019185e+01,-1.6146876844170845e+03});
static jule::Array<jule::F64,3> _121baf000_TANH_Q = jule::Array<jule::F64,3>({1.1281167849163293e+02,2.2354883906010045e+03,4.844063053251255e+03});
static jule::Array<jule::F64,7> _121c6f450__GAM_P = jule::Array<jule::F64,7>({1.6011952247675185e-04,1.1913514700658638e-03,1.0421379756176158e-02,4.763678004571372e-02,2.0744822764843598e-01,4.942148268014971e-01,1e+00});
static jule::Array<jule::F64,8> _121c6f450__GAM_Q = jule::Array<jule::F64,8>({-2.3158187332412014e-05,5.396055804933034e-04,-4.456419138517973e-03,1.1813978522206043e-02,3.5823639860549865e-02,-2.3459179571824335e-01,7.14304917030273e-02,1e+00});
static jule::Array<jule::F64,5> _121c6f450__GAM_S = jule::Array<jule::F64,5>({7.873113957930937e-04,-2.2954996161337813e-04,-2.6813261780578124e-03,3.4722222160545866e-03,8.333333333334822e-02});
static jule::Array<jule::F64,32> _121d85980_POW10_TAB = jule::Array<jule::F64,32>({1e+00,1e+01,1e+02,1e+03,1e+04,1e+05,1e+06,1e+07,1e+08,1e+09,1e+10,1e+11,1e+12,1e+13,1e+14,1e+15,1e+16,1e+17,1e+18,1e+19,1e+20,1e+21,1e+22,1e+23,1.00000000999999998e+24,1e+25,1.00000000000000005e+26,1.00000000000000001e+27,1e+28,1e+29,1.00000000000000002e+30,1e+31});
static jule::Array<jule::F64,10> _121d85980_POW10_POSTAB32 = jule::Array<jule::F64,10>({1e+00,1.00000000000000005e+32,1.00000000000000002e+64,1e+96,1.00000000000000008e+128,1.00000000000000001e+160,1.00000000000000004e+192,1e+224,1.00000000000000003e+256,1.00000000000000001e+288});
static jule::Array<jule::F64,11> _121d85980_POW10_NEGTAB32 = jule::Array<jule::F64,11>({1e+00,1.00000000000000006e-32,1e-64,1e-96,1.00000000000000005e-128,1e-160,1e-192,1.00000000000000002e-224,1e-256,1.00000000000000006e-288,1e-320});
static _131769b70_FloatInfo _131769b70_F32_INFO = _131769b70_FloatInfo(23LLU,8LLU,-127LL);
static _131769b70_FloatInfo _131769b70_F64_INFO = _131769b70_FloatInfo(52LLU,11LLU,-1023LL);
static jule::Array<jule::Array<jule::U64,2>,696> _1321c5450_DETAILED_POWS_OF_TEN = jule::Array<jule::Array<jule::U64,2>,696>({jule::Array<jule::U64,2>({1671618768450675795LLU,18054884314459144840LLU}),jule::Array<jule::U64,2>({1044761730281672372LLU,11284302696536965525LLU}),jule::Array<jule::U64,2>({5917638181279478369LLU,14105378370671206906LLU}),jule::Array<jule::U64,2>({16620419763454123769LLU,17631722963339008632LLU}),jule::Array<jule::U64,2>({10387762352158827356LLU,11019826852086880395LLU}),jule::Array<jule::U64,2>({8373016921771146291LLU,13774783565108600494LLU}),jule::Array<jule::U64,2>({1242899115359157055LLU,17218479456385750618LLU}),jule::Array<jule::U64,2>({5388497965526861063LLU,10761549660241094136LLU}),jule::Array<jule::U64,2>({6735622456908576329LLU,13451937075301367670LLU}),jule::Array<jule::U64,2>({17642900107990496220LLU,16814921344126709587LLU}),jule::Array<jule::U64,2>({8720969558280366185LLU,10509325840079193492LLU}),jule::Array<jule::U64,2>({10901211947850457732LLU,13136657300098991865LLU}),jule::Array<jule::U64,2>({18238200953240460069LLU,16420821625123739831LLU}),jule::Array<jule::U64,2>({18316404623416369399LLU,10263013515702337394LLU}),jule::Array<jule::U64,2>({13672133742415685941LLU,12828766894627921743LLU}),jule::Array<jule::U64,2>({12478481159592219522LLU,16035958618284902179LLU}),jule::Array<jule::U64,2>({5493207715531443249LLU,10022474136428063862LLU}),jule::Array<jule::U64,2>({16089881681269079869LLU,12528092670535079827LLU}),jule::Array<jule::U64,2>({15500666083158961933LLU,15660115838168849784LLU}),jule::Array<jule::U64,2>({9687916301974351208LLU,9787572398855531115LLU}),jule::Array<jule::U64,2>({7498209359040551106LLU,12234465498569413894LLU}),jule::Array<jule::U64,2>({149389661945913074LLU,15293081873211767368LLU}),jule::Array<jule::U64,2>({93368538716195671LLU,9558176170757354605LLU}),jule::Array<jule::U64,2>({4728396691822632493LLU,11947720213446693256LLU}),jule::Array<jule::U64,2>({5910495864778290617LLU,14934650266808366570LLU}),jule::Array<jule::U64,2>({8305745933913819539LLU,9334156416755229106LLU}),jule::Array<jule::U64,2>({1158810380537498616LLU,11667695520944036383LLU}),jule::Array<jule::U64,2>({15283571030954036982LLU,14584619401180045478LLU}),jule::Array<jule::U64,2>({9881091751837770420LLU,18230774251475056848LLU}),jule::Array<jule::U64,2>({6175682344898606512LLU,11394233907171910530LLU}),jule::Array<jule::U64,2>({16942974967978033949LLU,14242792383964888162LLU}),jule::Array<jule::U64,2>({11955346673117766628LLU,17803490479956110203LLU}),jule::Array<jule::U64,2>({5166248661484910190LLU,11127181549972568877LLU}),jule::Array<jule::U64,2>({11069496845283525642LLU,13908976937465711096LLU}),jule::Array<jule::U64,2>({13836871056604407053LLU,17386221171832138870LLU}),jule::Array<jule::U64,2>({4036358391950366504LLU,10866388232395086794LLU}),jule::Array<jule::U64,2>({14268820026792733938LLU,13582985290493858492LLU}),jule::Array<jule::U64,2>({17836025033490917422LLU,16978731613117323115LLU}),jule::Array<jule::U64,2>({8841672636718129437LLU,10611707258198326947LLU}),jule::Array<jule::U64,2>({6440404777470273892LLU,13264634072747908684LLU}),jule::Array<jule::U64,2>({8050505971837842365LLU,16580792590934885855LLU}),jule::Array<jule::U64,2>({11949095260039733334LLU,10362995369334303659LLU}),jule::Array<jule::U64,2>({10324683056622278764LLU,12953744211667879574LLU}),jule::Array<jule::U64,2>({3682481783923072647LLU,16192180264584849468LLU}),jule::Array<jule::U64,2>({11524923151806696212LLU,10120112665365530917LLU}),jule::Array<jule::U64,2>({571095884476206553LLU,12650140831706913647LLU}),jule::Array<jule::U64,2>({14548927910877421904LLU,15812676039633642058LLU}),jule::Array<jule::U64,2>({13704765962725776594LLU,9882922524771026286LLU}),jule::Array<jule::U64,2>({7907585416552444934LLU,12353653155963782858LLU}),jule::Array<jule::U64,2>({661109733835780360LLU,15442066444954728573LLU}),jule::Array<jule::U64,2>({2719036592861056677LLU,9651291528096705358LLU}),jule::Array<jule::U64,2>({12622167777931096654LLU,12064114410120881697LLU}),jule::Array<jule::U64,2>({1942651667131707105LLU,15080143012651102122LLU}),jule::Array<jule::U64,2>({5825843310384704845LLU,9425089382906938826LLU}),jule::Array<jule::U64,2>({16505676174835656864LLU,11781361728633673532LLU}),jule::Array<jule::U64,2>({2185351144835019464LLU,14726702160792091916LLU}),jule::Array<jule::U64,2>({2731688931043774330LLU,18408377700990114895LLU}),jule::Array<jule::U64,2>({8624834609543440812LLU,11505236063118821809LLU}),jule::Array<jule::U64,2>({15392729280356688919LLU,14381545078898527261LLU}),jule::Array<jule::U64,2>({5405853545163697437LLU,17976931348623159077LLU}),jule::Array<jule::U64,2>({5684501474941004850LLU,11235582092889474423LLU}),jule::Array<jule::U64,2>({2493940825248868159LLU,14044477616111843029LLU}),jule::Array<jule::U64,2>({7729112049988473103LLU,17555597020139803786LLU}),jule::Array<jule::U64,2>({9442381049670183593LLU,10972248137587377366LLU}),jule::Array<jule::U64,2>({2579604275232953683LLU,13715310171984221708LLU}),jule::Array<jule::U64,2>({3224505344041192104LLU,17144137714980277135LLU}),jule::Array<jule::U64,2>({8932844867666826921LLU,10715086071862673209LLU}),jule::Array<jule::U64,2>({15777742103010921555LLU,13393857589828341511LLU}),jule::Array<jule::U64,2>({15110491610336264040LLU,16742321987285426889LLU}),jule::Array<jule::U64,2>({2526528228819083169LLU,10463951242053391806LLU}),jule::Array<jule::U64,2>({12381532322878629770LLU,13079939052566739757LLU}),jule::Array<jule::U64,2>({1641857348316123500LLU,16349923815708424697LLU}),jule::Array<jule::U64,2>({12555375888766046947LLU,10218702384817765435LLU}),jule::Array<jule::U64,2>({11082533842530170780LLU,12773377981022206794LLU}),jule::Array<jule::U64,2>({4629795266307937667LLU,15966722476277758493LLU}),jule::Array<jule::U64,2>({5199465050656154994LLU,9979201547673599058LLU}),jule::Array<jule::U64,2>({15722703350174969551LLU,12474001934591998822LLU}),jule::Array<jule::U64,2>({10430007150863936130LLU,15592502418239998528LLU}),jule::Array<jule::U64,2>({6518754469289960081LLU,9745314011399999080LLU}),jule::Array<jule::U64,2>({8148443086612450102LLU,12181642514249998850LLU}),jule::Array<jule::U64,2>({962181821410786819LLU,15227053142812498563LLU}),jule::Array<jule::U64,2>({16742264702877599426LLU,9516908214257811601LLU}),jule::Array<jule::U64,2>({7092772823314835570LLU,11896135267822264502LLU}),jule::Array<jule::U64,2>({18089338065998320271LLU,14870169084777830627LLU}),jule::Array<jule::U64,2>({8999993282035256217LLU,9293855677986144142LLU}),jule::Array<jule::U64,2>({2026619565689294464LLU,11617319597482680178LLU}),jule::Array<jule::U64,2>({11756646493966393888LLU,14521649496853350222LLU}),jule::Array<jule::U64,2>({5472436080603216552LLU,18152061871066687778LLU}),jule::Array<jule::U64,2>({8031958568804398249LLU,11345038669416679861LLU}),jule::Array<jule::U64,2>({14651634229432885715LLU,14181298336770849826LLU}),jule::Array<jule::U64,2>({9091170749936331336LLU,17726622920963562283LLU}),jule::Array<jule::U64,2>({3376138709496513133LLU,11079139325602226427LLU}),jule::Array<jule::U64,2>({18055231442152805128LLU,13848924157002783033LLU}),jule::Array<jule::U64,2>({8733981247408842698LLU,17311155196253478792LLU}),jule::Array<jule::U64,2>({5458738279630526686LLU,10819471997658424245LLU}),jule::Array<jule::U64,2>({11435108867965546262LLU,13524339997073030306LLU}),jule::Array<jule::U64,2>({5070514048102157020LLU,16905424996341287883LLU}),jule::Array<jule::U64,2>({863228270850154185LLU,10565890622713304927LLU}),jule::Array<jule::U64,2>({14914093393844856443LLU,13207363278391631158LLU}),jule::Array<jule::U64,2>({9419244705451294746LLU,16509204097989538948LLU}),jule::Array<jule::U64,2>({15110399977761835024LLU,10318252561243461842LLU}),jule::Array<jule::U64,2>({9664627935347517973LLU,12897815701554327303LLU}),jule::Array<jule::U64,2>({7469098900757009562LLU,16122269626942909129LLU}),jule::Array<jule::U64,2>({16197401859041600736LLU,10076418516839318205LLU}),jule::Array<jule::U64,2>({6411694268519837208LLU,12595523146049147757LLU}),jule::Array<jule::U64,2>({12626303854077184414LLU,15744403932561434696LLU}),jule::Array<jule::U64,2>({7891439908798240259LLU,9840252457850896685LLU}),jule::Array<jule::U64,2>({14475985904425188227LLU,12300315572313620856LLU}),jule::Array<jule::U64,2>({18094982380531485284LLU,15375394465392026070LLU}),jule::Array<jule::U64,2>({6697677969404790399LLU,9609621540870016294LLU}),jule::Array<jule::U64,2>({17595469498610763806LLU,12012026926087520367LLU}),jule::Array<jule::U64,2>({17382650854836066854LLU,15015033657609400459LLU}),jule::Array<jule::U64,2>({8558313775058847832LLU,9384396036005875287LLU}),jule::Array<jule::U64,2>({6086206200396171886LLU,11730495045007344109LLU}),jule::Array<jule::U64,2>({12219443768922602761LLU,14663118806259180136LLU}),jule::Array<jule::U64,2>({15274304711153253452LLU,18328898507823975170LLU}),jule::Array<jule::U64,2>({14158126462898171311LLU,11455561567389984481LLU}),jule::Array<jule::U64,2>({3862600023340550427LLU,14319451959237480602LLU}),jule::Array<jule::U64,2>({14051622066030463842LLU,17899314949046850752LLU}),jule::Array<jule::U64,2>({8782263791269039901LLU,11187071843154281720LLU}),jule::Array<jule::U64,2>({10977829739086299876LLU,13983839803942852150LLU}),jule::Array<jule::U64,2>({4498915137003099037LLU,17479799754928565188LLU}),jule::Array<jule::U64,2>({12035193997481712706LLU,10924874846830353242LLU}),jule::Array<jule::U64,2>({5820620459997365075LLU,13656093558537941553LLU}),jule::Array<jule::U64,2>({11887461593424094248LLU,17070116948172426941LLU}),jule::Array<jule::U64,2>({9735506505103752857LLU,10668823092607766838LLU}),jule::Array<jule::U64,2>({2946011094524915263LLU,13336028865759708548LLU}),jule::Array<jule::U64,2>({3682513868156144079LLU,16670036082199635685LLU}),jule::Array<jule::U64,2>({4607414176811284001LLU,10418772551374772303LLU}),jule::Array<jule::U64,2>({1147581702586717097LLU,13023465689218465379LLU}),jule::Array<jule::U64,2>({15269535183515560084LLU,16279332111523081723LLU}),jule::Array<jule::U64,2>({7237616480483531100LLU,10174582569701926077LLU}),jule::Array<jule::U64,2>({13658706619031801779LLU,12718228212127407596LLU}),jule::Array<jule::U64,2>({17073383273789752224LLU,15897785265159259495LLU}),jule::Array<jule::U64,2>({17588393573759676996LLU,9936115790724537184LLU}),jule::Array<jule::U64,2>({3538747893490044629LLU,12420144738405671481LLU}),jule::Array<jule::U64,2>({9035120885289943691LLU,15525180923007089351LLU}),jule::Array<jule::U64,2>({12564479580947296663LLU,9703238076879430844LLU}),jule::Array<jule::U64,2>({15705599476184120828LLU,12129047596099288555LLU}),jule::Array<jule::U64,2>({15020313326802763131LLU,15161309495124110694LLU}),jule::Array<jule::U64,2>({4776009810824339053LLU,9475818434452569184LLU}),jule::Array<jule::U64,2>({5970012263530423816LLU,11844773043065711480LLU}),jule::Array<jule::U64,2>({7462515329413029771LLU,14805966303832139350LLU}),jule::Array<jule::U64,2>({52386062455755702LLU,9253728939895087094LLU}),jule::Array<jule::U64,2>({9288854614924470436LLU,11567161174868858867LLU}),jule::Array<jule::U64,2>({6999382250228200141LLU,14458951468586073584LLU}),jule::Array<jule::U64,2>({8749227812785250177LLU,18073689335732591980LLU}),jule::Array<jule::U64,2>({14691639419845557168LLU,11296055834832869987LLU}),jule::Array<jule::U64,2>({13752863256379558556LLU,14120069793541087484LLU}),jule::Array<jule::U64,2>({17191079070474448196LLU,17650087241926359355LLU}),jule::Array<jule::U64,2>({8438581409832836170LLU,11031304526203974597LLU}),jule::Array<jule::U64,2>({15159912780718433117LLU,13789130657754968246LLU}),jule::Array<jule::U64,2>({9726518939043265588LLU,17236413322193710308LLU}),jule::Array<jule::U64,2>({15302446373756816800LLU,10772758326371068942LLU}),jule::Array<jule::U64,2>({9904685930341245193LLU,13465947907963836178LLU}),jule::Array<jule::U64,2>({3157485376071780683LLU,16832434884954795223LLU}),jule::Array<jule::U64,2>({8890957387685944783LLU,10520271803096747014LLU}),jule::Array<jule::U64,2>({1890324697752655170LLU,13150339753870933768LLU}),jule::Array<jule::U64,2>({2362905872190818963LLU,16437924692338667210LLU}),jule::Array<jule::U64,2>({6088502188546649756LLU,10273702932711667006LLU}),jule::Array<jule::U64,2>({16833999772538088003LLU,12842128665889583757LLU}),jule::Array<jule::U64,2>({7207441660390446292LLU,16052660832361979697LLU}),jule::Array<jule::U64,2>({16033866083812498692LLU,10032913020226237310LLU}),jule::Array<jule::U64,2>({10818960567910847557LLU,12541141275282796638LLU}),jule::Array<jule::U64,2>({4300328673033783639LLU,15676426594103495798LLU}),jule::Array<jule::U64,2>({16522763475928278486LLU,9797766621314684873LLU}),jule::Array<jule::U64,2>({6818396289628184396LLU,12247208276643356092LLU}),jule::Array<jule::U64,2>({8522995362035230495LLU,15309010345804195115LLU}),jule::Array<jule::U64,2>({3021029092058325107LLU,9568131466127621947LLU}),jule::Array<jule::U64,2>({17611344420355070096LLU,11960164332659527433LLU}),jule::Array<jule::U64,2>({8179122470161673908LLU,14950205415824409292LLU}),jule::Array<jule::U64,2>({14335323580705822000LLU,9343878384890255807LLU}),jule::Array<jule::U64,2>({13307468457454889596LLU,11679847981112819759LLU}),jule::Array<jule::U64,2>({12022649553391224092LLU,14599809976391024699LLU}),jule::Array<jule::U64,2>({10416625923311642211LLU,18249762470488780874LLU}),jule::Array<jule::U64,2>({11122077220497164286LLU,11406101544055488046LLU}),jule::Array<jule::U64,2>({4679224488766679549LLU,14257626930069360058LLU}),jule::Array<jule::U64,2>({15072402647813125244LLU,17822033662586700072LLU}),jule::Array<jule::U64,2>({9420251654883203278LLU,11138771039116687545LLU}),jule::Array<jule::U64,2>({16387000587031392001LLU,13923463798895859431LLU}),jule::Array<jule::U64,2>({15872064715361852097LLU,17404329748619824289LLU}),jule::Array<jule::U64,2>({3002511419460075705LLU,10877706092887390181LLU}),jule::Array<jule::U64,2>({8364825292752482535LLU,13597132616109237726LLU}),jule::Array<jule::U64,2>({1232659579085827361LLU,16996415770136547158LLU}),jule::Array<jule::U64,2>({14605470292210805812LLU,10622759856335341973LLU}),jule::Array<jule::U64,2>({4421779809981343554LLU,13278449820419177467LLU}),jule::Array<jule::U64,2>({915538744049291538LLU,16598062275523971834LLU}),jule::Array<jule::U64,2>({5183897733458195115LLU,10373788922202482396LLU}),jule::Array<jule::U64,2>({6479872166822743894LLU,12967236152753102995LLU}),jule::Array<jule::U64,2>({3488154190101041964LLU,16209045190941378744LLU}),jule::Array<jule::U64,2>({2180096368813151227LLU,10130653244338361715LLU}),jule::Array<jule::U64,2>({16560178516298602746LLU,12663316555422952143LLU}),jule::Array<jule::U64,2>({16088537126945865529LLU,15829145694278690179LLU}),jule::Array<jule::U64,2>({7749492695127472003LLU,9893216058924181362LLU}),jule::Array<jule::U64,2>({463493832054564196LLU,12366520073655226703LLU}),jule::Array<jule::U64,2>({14414425345350368957LLU,15458150092069033378LLU}),jule::Array<jule::U64,2>({13620701859271368502LLU,9661343807543145861LLU}),jule::Array<jule::U64,2>({3190819268807046916LLU,12076679759428932327LLU}),jule::Array<jule::U64,2>({17823582141290972357LLU,15095849699286165408LLU}),jule::Array<jule::U64,2>({11139738838306857723LLU,9434906062053853380LLU}),jule::Array<jule::U64,2>({13924673547883572154LLU,11793632577567316725LLU}),jule::Array<jule::U64,2>({3570783879572301480LLU,14742040721959145907LLU}),jule::Array<jule::U64,2>({18298537904747540562LLU,18427550902448932383LLU}),jule::Array<jule::U64,2>({18354115218108294707LLU,11517219314030582739LLU}),jule::Array<jule::U64,2>({18330958004207980480LLU,14396524142538228424LLU}),jule::Array<jule::U64,2>({4466953431550423984LLU,17995655178172785531LLU}),jule::Array<jule::U64,2>({486002885505321038LLU,11247284486357990957LLU}),jule::Array<jule::U64,2>({5219189625309039202LLU,14059105607947488696LLU}),jule::Array<jule::U64,2>({6523987031636299002LLU,17573882009934360870LLU}),jule::Array<jule::U64,2>({17912549950054850588LLU,10983676256208975543LLU}),jule::Array<jule::U64,2>({17779001419141175331LLU,13729595320261219429LLU}),jule::Array<jule::U64,2>({8388693718644305452LLU,17161994150326524287LLU}),jule::Array<jule::U64,2>({12160462601793772764LLU,10726246343954077679LLU}),jule::Array<jule::U64,2>({10588892233814828051LLU,13407807929942597099LLU}),jule::Array<jule::U64,2>({8624429273841147159LLU,16759759912428246374LLU}),jule::Array<jule::U64,2>({778582277723329070LLU,10474849945267653984LLU}),jule::Array<jule::U64,2>({973227847154161338LLU,13093562431584567480LLU}),jule::Array<jule::U64,2>({1216534808942701673LLU,16366953039480709350LLU}),jule::Array<jule::U64,2>({14595392310871352257LLU,10229345649675443343LLU}),jule::Array<jule::U64,2>({13632554370161802418LLU,12786682062094304179LLU}),jule::Array<jule::U64,2>({12429006944274865118LLU,15983352577617880224LLU}),jule::Array<jule::U64,2>({7768129340171790699LLU,9989595361011175140LLU}),jule::Array<jule::U64,2>({9710161675214738374LLU,12486994201263968925LLU}),jule::Array<jule::U64,2>({16749388112445810871LLU,15608742751579961156LLU}),jule::Array<jule::U64,2>({1244995533423855986LLU,9755464219737475723LLU}),jule::Array<jule::U64,2>({15391302472061983695LLU,12194330274671844653LLU}),jule::Array<jule::U64,2>({5404070034795315907LLU,15242912843339805817LLU}),jule::Array<jule::U64,2>({14906758817815542202LLU,9526820527087378635LLU}),jule::Array<jule::U64,2>({14021762503842039848LLU,11908525658859223294LLU}),jule::Array<jule::U64,2>({8303831092947774002LLU,14885657073574029118LLU}),jule::Array<jule::U64,2>({578208414664970847LLU,9303535670983768199LLU}),jule::Array<jule::U64,2>({14557818573613377271LLU,11629419588729710248LLU}),jule::Array<jule::U64,2>({18197273217016721589LLU,14536774485912137810LLU}),jule::Array<jule::U64,2>({13523219484416126178LLU,18170968107390172263LLU}),jule::Array<jule::U64,2>({15369541205401160717LLU,11356855067118857664LLU}),jule::Array<jule::U64,2>({765182433041899281LLU,14196068833898572081LLU}),jule::Array<jule::U64,2>({5568164059729762005LLU,17745086042373215101LLU}),jule::Array<jule::U64,2>({5785945546544795205LLU,11090678776483259438LLU}),jule::Array<jule::U64,2>({16455803970035769814LLU,13863348470604074297LLU}),jule::Array<jule::U64,2>({6734696907262548556LLU,17329185588255092872LLU}),jule::Array<jule::U64,2>({4209185567039092847LLU,10830740992659433045LLU}),jule::Array<jule::U64,2>({9873167977226253963LLU,13538426240824291306LLU}),jule::Array<jule::U64,2>({3118087934678041646LLU,16923032801030364133LLU}),jule::Array<jule::U64,2>({4254647968387469981LLU,10576895500643977583LLU}),jule::Array<jule::U64,2>({706623942056949572LLU,13221119375804971979LLU}),jule::Array<jule::U64,2>({14718337982853350677LLU,16526399219756214973LLU}),jule::Array<jule::U64,2>({11504804248497038125LLU,10328999512347634358LLU}),jule::Array<jule::U64,2>({5157633273766521849LLU,12911249390434542948LLU}),jule::Array<jule::U64,2>({6447041592208152311LLU,16139061738043178685LLU}),jule::Array<jule::U64,2>({6335244004343789146LLU,10086913586276986678LLU}),jule::Array<jule::U64,2>({17142427042284512241LLU,12608641982846233347LLU}),jule::Array<jule::U64,2>({16816347784428252397LLU,15760802478557791684LLU}),jule::Array<jule::U64,2>({1286845328412881940LLU,9850501549098619803LLU}),jule::Array<jule::U64,2>({15443614715798266137LLU,12313126936373274753LLU}),jule::Array<jule::U64,2>({5469460339465668959LLU,15391408670466593442LLU}),jule::Array<jule::U64,2>({8030098730593431003LLU,9619630419041620901LLU}),jule::Array<jule::U64,2>({14649309431669176658LLU,12024538023802026126LLU}),jule::Array<jule::U64,2>({9088264752731695015LLU,15030672529752532658LLU}),jule::Array<jule::U64,2>({10291851488884697288LLU,9394170331095332911LLU}),jule::Array<jule::U64,2>({8253128342678483706LLU,11742712913869166139LLU}),jule::Array<jule::U64,2>({5704724409920716729LLU,14678391142336457674LLU}),jule::Array<jule::U64,2>({16354277549255671720LLU,18347988927920572092LLU}),jule::Array<jule::U64,2>({998051431430019017LLU,11467493079950357558LLU}),jule::Array<jule::U64,2>({10470936326142299579LLU,14334366349937946947LLU}),jule::Array<jule::U64,2>({8476984389250486570LLU,17917957937422433684LLU}),jule::Array<jule::U64,2>({14521487280136329914LLU,11198723710889021052LLU}),jule::Array<jule::U64,2>({18151859100170412392LLU,13998404638611276315LLU}),jule::Array<jule::U64,2>({18078137856785627587LLU,17498005798264095394LLU}),jule::Array<jule::U64,2>({15910522178918405146LLU,10936253623915059621LLU}),jule::Array<jule::U64,2>({6053094668365842720LLU,13670317029893824527LLU}),jule::Array<jule::U64,2>({2954682317029915496LLU,17087896287367280659LLU}),jule::Array<jule::U64,2>({17987577512639554849LLU,10679935179604550411LLU}),jule::Array<jule::U64,2>({17872785872372055657LLU,13349918974505688014LLU}),jule::Array<jule::U64,2>({13117610303610293764LLU,16687398718132110018LLU}),jule::Array<jule::U64,2>({12810192458183821506LLU,10429624198832568761LLU}),jule::Array<jule::U64,2>({2177682517447613171LLU,13037030248540710952LLU}),jule::Array<jule::U64,2>({2722103146809516464LLU,16296287810675888690LLU}),jule::Array<jule::U64,2>({6313000485183335694LLU,10185179881672430431LLU}),jule::Array<jule::U64,2>({3279564588051781713LLU,12731474852090538039LLU}),jule::Array<jule::U64,2>({17934513790346890853LLU,15914343565113172548LLU}),jule::Array<jule::U64,2>({1985699082112030975LLU,9946464728195732843LLU}),jule::Array<jule::U64,2>({16317181907922202431LLU,12433080910244666053LLU}),jule::Array<jule::U64,2>({6561419329620589327LLU,15541351137805832567LLU}),jule::Array<jule::U64,2>({11018416108653950185LLU,9713344461128645354LLU}),jule::Array<jule::U64,2>({4549648098962661924LLU,12141680576410806693LLU}),jule::Array<jule::U64,2>({10298746142130715309LLU,15177100720513508366LLU}),jule::Array<jule::U64,2>({1825030320404309164LLU,9485687950320942729LLU}),jule::Array<jule::U64,2>({6892973918932774359LLU,11857109937901178411LLU}),jule::Array<jule::U64,2>({4004531380238580045LLU,14821387422376473014LLU}),jule::Array<jule::U64,2>({16337890167931276240LLU,9263367138985295633LLU}),jule::Array<jule::U64,2>({6587304654631931588LLU,11579208923731619542LLU}),jule::Array<jule::U64,2>({17457502855144690293LLU,14474011154664524427LLU}),jule::Array<jule::U64,2>({17210192550503474962LLU,18092513943330655534LLU}),jule::Array<jule::U64,2>({6144684325637283947LLU,11307821214581659709LLU}),jule::Array<jule::U64,2>({12292541425473992838LLU,14134776518227074636LLU}),jule::Array<jule::U64,2>({15365676781842491048LLU,17668470647783843295LLU}),jule::Array<jule::U64,2>({16521077016292638761LLU,11042794154864902059LLU}),jule::Array<jule::U64,2>({16039660251938410547LLU,13803492693581127574LLU}),jule::Array<jule::U64,2>({10826203278068237376LLU,17254365866976409468LLU}),jule::Array<jule::U64,2>({15989749085647424168LLU,10783978666860255917LLU}),jule::Array<jule::U64,2>({6152128301777116498LLU,13479973333575319897LLU}),jule::Array<jule::U64,2>({12301846395648783526LLU,16849966666969149871LLU}),jule::Array<jule::U64,2>({14606183024921571560LLU,10531229166855718669LLU}),jule::Array<jule::U64,2>({4422670725869800738LLU,13164036458569648337LLU}),jule::Array<jule::U64,2>({10140024425764638826LLU,16455045573212060421LLU}),jule::Array<jule::U64,2>({8643358275316593218LLU,10284403483257537763LLU}),jule::Array<jule::U64,2>({6192511825718353619LLU,12855504354071922204LLU}),jule::Array<jule::U64,2>({7740639782147942024LLU,16069380442589902755LLU}),jule::Array<jule::U64,2>({2532056854628769813LLU,10043362776618689222LLU}),jule::Array<jule::U64,2>({12388443105140738074LLU,12554203470773361527LLU}),jule::Array<jule::U64,2>({10873867862998534689LLU,15692754338466701909LLU}),jule::Array<jule::U64,2>({9102010423587778132LLU,9807971461541688693LLU}),jule::Array<jule::U64,2>({15989199047912110569LLU,12259964326927110866LLU}),jule::Array<jule::U64,2>({10763126773035362404LLU,15324955408658888583LLU}),jule::Array<jule::U64,2>({13644483260788183358LLU,9578097130411805364LLU}),jule::Array<jule::U64,2>({17055604075985229198LLU,11972621413014756705LLU}),jule::Array<jule::U64,2>({7484447039699372786LLU,14965776766268445882LLU}),jule::Array<jule::U64,2>({9289465418239495895LLU,9353610478917778676LLU}),jule::Array<jule::U64,2>({11611831772799369869LLU,11692013098647223345LLU}),jule::Array<jule::U64,2>({679731660717048624LLU,14615016373309029182LLU}),jule::Array<jule::U64,2>({10073036612751086588LLU,18268770466636286477LLU}),jule::Array<jule::U64,2>({8601490892183123069LLU,11417981541647679048LLU}),jule::Array<jule::U64,2>({10751863615228903837LLU,14272476927059598810LLU}),jule::Array<jule::U64,2>({4216457482181353988LLU,17840596158824498513LLU}),jule::Array<jule::U64,2>({14164500972431816002LLU,11150372599265311570LLU}),jule::Array<jule::U64,2>({8482254178684994195LLU,13937965749081639463LLU}),jule::Array<jule::U64,2>({5991131704928854840LLU,17422457186352049329LLU}),jule::Array<jule::U64,2>({15273672361649004035LLU,10889035741470030830LLU}),jule::Array<jule::U64,2>({9868718415206479236LLU,13611294676837538538LLU}),jule::Array<jule::U64,2>({3112525982153323237LLU,17014118346046923173LLU}),jule::Array<jule::U64,2>({4251171748059520975LLU,10633823966279326983LLU}),jule::Array<jule::U64,2>({702278666647013314LLU,13292279957849158729LLU}),jule::Array<jule::U64,2>({5489534351736154547LLU,16615349947311448411LLU}),jule::Array<jule::U64,2>({1125115960621402640LLU,10384593717069655257LLU}),jule::Array<jule::U64,2>({6018080969204141204LLU,12980742146337069071LLU}),jule::Array<jule::U64,2>({2910915193077788601LLU,16225927682921336339LLU}),jule::Array<jule::U64,2>({17960223060169475539LLU,10141204801825835211LLU}),jule::Array<jule::U64,2>({17838592806784456520LLU,12676506002282294014LLU}),jule::Array<jule::U64,2>({13074868971625794843LLU,15845632502852867518LLU}),jule::Array<jule::U64,2>({3560107088838733872LLU,9903520314283042199LLU}),jule::Array<jule::U64,2>({18285191916330581053LLU,12379400392853802748LLU}),jule::Array<jule::U64,2>({4409745821703674700LLU,15474250491067253436LLU}),jule::Array<jule::U64,2>({11979463175419572495LLU,9671406556917033397LLU}),jule::Array<jule::U64,2>({1139270913992301907LLU,12089258196146291747LLU}),jule::Array<jule::U64,2>({15259146697772541096LLU,15111572745182864683LLU}),jule::Array<jule::U64,2>({7231123676894144233LLU,9444732965739290427LLU}),jule::Array<jule::U64,2>({4427218577690292387LLU,11805916207174113034LLU}),jule::Array<jule::U64,2>({14757395258967641292LLU,14757395258967641292LLU}),jule::Array<jule::U64,2>({0LLU,9223372036854775808LLU}),jule::Array<jule::U64,2>({0LLU,11529215046068469760LLU}),jule::Array<jule::U64,2>({0LLU,14411518807585587200LLU}),jule::Array<jule::U64,2>({0LLU,18014398509481984000LLU}),jule::Array<jule::U64,2>({0LLU,11258999068426240000LLU}),jule::Array<jule::U64,2>({0LLU,14073748835532800000LLU}),jule::Array<jule::U64,2>({0LLU,17592186044416000000LLU}),jule::Array<jule::U64,2>({0LLU,10995116277760000000LLU}),jule::Array<jule::U64,2>({0LLU,13743895347200000000LLU}),jule::Array<jule::U64,2>({0LLU,17179869184000000000LLU}),jule::Array<jule::U64,2>({0LLU,10737418240000000000LLU}),jule::Array<jule::U64,2>({0LLU,13421772800000000000LLU}),jule::Array<jule::U64,2>({0LLU,16777216000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10485760000000000000LLU}),jule::Array<jule::U64,2>({0LLU,13107200000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16384000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10240000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12800000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12500000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,15625000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,9765625000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12207031250000000000LLU}),jule::Array<jule::U64,2>({0LLU,15258789062500000000LLU}),jule::Array<jule::U64,2>({0LLU,9536743164062500000LLU}),jule::Array<jule::U64,2>({0LLU,11920928955078125000LLU}),jule::Array<jule::U64,2>({0LLU,14901161193847656250LLU}),jule::Array<jule::U64,2>({4611686018427387904LLU,9313225746154785156LLU}),jule::Array<jule::U64,2>({5764607523034234880LLU,11641532182693481445LLU}),jule::Array<jule::U64,2>({11817445422220181504LLU,14551915228366851806LLU}),jule::Array<jule::U64,2>({5548434740920451072LLU,18189894035458564758LLU}),jule::Array<jule::U64,2>({17302829768357445632LLU,11368683772161602973LLU}),jule::Array<jule::U64,2>({7793479155164643328LLU,14210854715202003717LLU}),jule::Array<jule::U64,2>({14353534962383192064LLU,17763568394002504646LLU}),jule::Array<jule::U64,2>({4359273333062107136LLU,11102230246251565404LLU}),jule::Array<jule::U64,2>({5449091666327633920LLU,13877787807814456755LLU}),jule::Array<jule::U64,2>({2199678564482154496LLU,17347234759768070944LLU}),jule::Array<jule::U64,2>({1374799102801346560LLU,10842021724855044340LLU}),jule::Array<jule::U64,2>({1718498878501683200LLU,13552527156068805425LLU}),jule::Array<jule::U64,2>({6759809616554491904LLU,16940658945086006781LLU}),jule::Array<jule::U64,2>({6530724019560251392LLU,10587911840678754238LLU}),jule::Array<jule::U64,2>({17386777061305090048LLU,13234889800848442797LLU}),jule::Array<jule::U64,2>({7898413271349198848LLU,16543612251060553497LLU}),jule::Array<jule::U64,2>({16465723340661719040LLU,10339757656912845935LLU}),jule::Array<jule::U64,2>({15970468157399760896LLU,12924697071141057419LLU}),jule::Array<jule::U64,2>({15351399178322313216LLU,16155871338926321774LLU}),jule::Array<jule::U64,2>({4982938468024057856LLU,10097419586828951109LLU}),jule::Array<jule::U64,2>({10840359103457460224LLU,12621774483536188886LLU}),jule::Array<jule::U64,2>({4327076842467049472LLU,15777218104420236108LLU}),jule::Array<jule::U64,2>({11927795063396681728LLU,9860761315262647567LLU}),jule::Array<jule::U64,2>({10298057810818464256LLU,12325951644078309459LLU}),jule::Array<jule::U64,2>({8260886245095692416LLU,15407439555097886824LLU}),jule::Array<jule::U64,2>({5163053903184807760LLU,9629649721936179265LLU}),jule::Array<jule::U64,2>({11065503397408397604LLU,12037062152420224081LLU}),jule::Array<jule::U64,2>({18443565265187884909LLU,15046327690525280101LLU}),jule::Array<jule::U64,2>({13833071299956122020LLU,9403954806578300063LLU}),jule::Array<jule::U64,2>({12679653106517764621LLU,11754943508222875079LLU}),jule::Array<jule::U64,2>({11237880364719817872LLU,14693679385278593849LLU}),jule::Array<jule::U64,2>({212292400617608628LLU,18367099231598242312LLU}),jule::Array<jule::U64,2>({132682750386005392LLU,11479437019748901445LLU}),jule::Array<jule::U64,2>({4777539456409894645LLU,14349296274686126806LLU}),jule::Array<jule::U64,2>({15195296357367144114LLU,17936620343357658507LLU}),jule::Array<jule::U64,2>({7191217214140771119LLU,11210387714598536567LLU}),jule::Array<jule::U64,2>({4377335499248575995LLU,14012984643248170709LLU}),jule::Array<jule::U64,2>({10083355392488107898LLU,17516230804060213386LLU}),jule::Array<jule::U64,2>({10913783138732455340LLU,10947644252537633366LLU}),jule::Array<jule::U64,2>({4418856886560793367LLU,13684555315672041708LLU}),jule::Array<jule::U64,2>({5523571108200991709LLU,17105694144590052135LLU}),jule::Array<jule::U64,2>({10369760970266701674LLU,10691058840368782584LLU}),jule::Array<jule::U64,2>({12962201212833377092LLU,13363823550460978230LLU}),jule::Array<jule::U64,2>({6979379479186945558LLU,16704779438076222788LLU}),jule::Array<jule::U64,2>({13585484211346616781LLU,10440487148797639242LLU}),jule::Array<jule::U64,2>({7758483227328495169LLU,13050608935997049053LLU}),jule::Array<jule::U64,2>({14309790052588006865LLU,16313261169996311316LLU}),jule::Array<jule::U64,2>({18166990819722280098LLU,10195788231247694572LLU}),jule::Array<jule::U64,2>({4261994450943298507LLU,12744735289059618216LLU}),jule::Array<jule::U64,2>({5327493063679123134LLU,15930919111324522770LLU}),jule::Array<jule::U64,2>({7941369183226839863LLU,9956824444577826731LLU}),jule::Array<jule::U64,2>({5315025460606161924LLU,12446030555722283414LLU}),jule::Array<jule::U64,2>({15867153862612478214LLU,15557538194652854267LLU}),jule::Array<jule::U64,2>({7611128154919104931LLU,9723461371658033917LLU}),jule::Array<jule::U64,2>({14125596212076269068LLU,12154326714572542396LLU}),jule::Array<jule::U64,2>({17656995265095336336LLU,15192908393215677995LLU}),jule::Array<jule::U64,2>({8729779031470891258LLU,9495567745759798747LLU}),jule::Array<jule::U64,2>({6300537770911226168LLU,11869459682199748434LLU}),jule::Array<jule::U64,2>({17099044250493808518LLU,14836824602749685542LLU}),jule::Array<jule::U64,2>({6075216638131242420LLU,9273015376718553464LLU}),jule::Array<jule::U64,2>({7594020797664053025LLU,11591269220898191830LLU}),jule::Array<jule::U64,2>({269153960225290473LLU,14489086526122739788LLU}),jule::Array<jule::U64,2>({336442450281613091LLU,18111358157653424735LLU}),jule::Array<jule::U64,2>({7127805559067090038LLU,11319598848533390459LLU}),jule::Array<jule::U64,2>({4298070930406474644LLU,14149498560666738074LLU}),jule::Array<jule::U64,2>({14595960699862869113LLU,17686873200833422592LLU}),jule::Array<jule::U64,2>({9122475437414293195LLU,11054295750520889120LLU}),jule::Array<jule::U64,2>({11403094296767866494LLU,13817869688151111400LLU}),jule::Array<jule::U64,2>({14253867870959833118LLU,17272337110188889250LLU}),jule::Array<jule::U64,2>({13520353437777283602LLU,10795210693868055781LLU}),jule::Array<jule::U64,2>({3065383741939440791LLU,13494013367335069727LLU}),jule::Array<jule::U64,2>({17666787732706464701LLU,16867516709168837158LLU}),jule::Array<jule::U64,2>({6430056314514152534LLU,10542197943230523224LLU}),jule::Array<jule::U64,2>({8037570393142690668LLU,13177747429038154030LLU}),jule::Array<jule::U64,2>({823590954573587527LLU,16472184286297692538LLU}),jule::Array<jule::U64,2>({5126430365035880108LLU,10295115178936057836LLU}),jule::Array<jule::U64,2>({6408037956294850135LLU,12868893973670072295LLU}),jule::Array<jule::U64,2>({3398361426941174765LLU,16086117467087590369LLU}),jule::Array<jule::U64,2>({13653190937906703988LLU,10053823416929743980LLU}),jule::Array<jule::U64,2>({17066488672383379985LLU,12567279271162179975LLU}),jule::Array<jule::U64,2>({16721424822051837077LLU,15709099088952724969LLU}),jule::Array<jule::U64,2>({3533361486141316317LLU,9818186930595453106LLU}),jule::Array<jule::U64,2>({13640073894531421205LLU,12272733663244316382LLU}),jule::Array<jule::U64,2>({7826720331309500698LLU,15340917079055395478LLU}),jule::Array<jule::U64,2>({280014188641050032LLU,9588073174409622174LLU}),jule::Array<jule::U64,2>({9573389772656088348LLU,11985091468012027717LLU}),jule::Array<jule::U64,2>({16578423234247498339LLU,14981364335015034646LLU}),jule::Array<jule::U64,2>({5749828502977298558LLU,9363352709384396654LLU}),jule::Array<jule::U64,2>({16410657665576399005LLU,11704190886730495817LLU}),jule::Array<jule::U64,2>({6678264026688335045LLU,14630238608413119772LLU}),jule::Array<jule::U64,2>({8347830033360418806LLU,18287798260516399715LLU}),jule::Array<jule::U64,2>({2911550761636567802LLU,11429873912822749822LLU}),jule::Array<jule::U64,2>({12862810488900485560LLU,14287342391028437277LLU}),jule::Array<jule::U64,2>({2243455055843443238LLU,17859177988785546597LLU}),jule::Array<jule::U64,2>({3708002419115845976LLU,11161986242990966623LLU}),jule::Array<jule::U64,2>({23317005467419566LLU,13952482803738708279LLU}),jule::Array<jule::U64,2>({13864204312116438170LLU,17440603504673385348LLU}),jule::Array<jule::U64,2>({17888499731927549664LLU,10900377190420865842LLU}),jule::Array<jule::U64,2>({13137252628054661272LLU,13625471488026082303LLU}),jule::Array<jule::U64,2>({11809879766640938686LLU,17031839360032602879LLU}),jule::Array<jule::U64,2>({14298703881791668535LLU,10644899600020376799LLU}),jule::Array<jule::U64,2>({13261693833812197764LLU,13306124500025470999LLU}),jule::Array<jule::U64,2>({11965431273837859301LLU,16632655625031838749LLU}),jule::Array<jule::U64,2>({9784237555362356015LLU,10395409765644899218LLU}),jule::Array<jule::U64,2>({3006924907348169211LLU,12994262207056124023LLU}),jule::Array<jule::U64,2>({17593714189467375226LLU,16242827758820155028LLU}),jule::Array<jule::U64,2>({1772699331562333708LLU,10151767349262596893LLU}),jule::Array<jule::U64,2>({6827560182880305039LLU,12689709186578246116LLU}),jule::Array<jule::U64,2>({8534450228600381299LLU,15862136483222807645LLU}),jule::Array<jule::U64,2>({7639874402088932264LLU,9913835302014254778LLU}),jule::Array<jule::U64,2>({326470965756389522LLU,12392294127517818473LLU}),jule::Array<jule::U64,2>({5019774725622874806LLU,15490367659397273091LLU}),jule::Array<jule::U64,2>({831516194300602802LLU,9681479787123295682LLU}),jule::Array<jule::U64,2>({10262767279730529310LLU,12101849733904119602LLU}),jule::Array<jule::U64,2>({3605087062808385830LLU,15127312167380149503LLU}),jule::Array<jule::U64,2>({9170708441896323000LLU,9454570104612593439LLU}),jule::Array<jule::U64,2>({6851699533943015846LLU,11818212630765741799LLU}),jule::Array<jule::U64,2>({3952938399001381903LLU,14772765788457177249LLU}),jule::Array<jule::U64,2>({13999801545444333449LLU,9232978617785735780LLU}),jule::Array<jule::U64,2>({17499751931805416812LLU,11541223272232169725LLU}),jule::Array<jule::U64,2>({8039631859474607303LLU,14426529090290212157LLU}),jule::Array<jule::U64,2>({14661225842770647033LLU,18033161362862765196LLU}),jule::Array<jule::U64,2>({18386638188586430203LLU,11270725851789228247LLU}),jule::Array<jule::U64,2>({18371611717305649850LLU,14088407314736535309LLU}),jule::Array<jule::U64,2>({9129456591349898601LLU,17610509143420669137LLU}),jule::Array<jule::U64,2>({17235125415662156385LLU,11006568214637918210LLU}),jule::Array<jule::U64,2>({12320534732722919674LLU,13758210268297397763LLU}),jule::Array<jule::U64,2>({10788982397476261688LLU,17197762835371747204LLU}),jule::Array<jule::U64,2>({15966486035277439363LLU,10748601772107342002LLU}),jule::Array<jule::U64,2>({10734735507242023396LLU,13435752215134177503LLU}),jule::Array<jule::U64,2>({8806733365625141341LLU,16794690268917721879LLU}),jule::Array<jule::U64,2>({12421737381156795194LLU,10496681418073576174LLU}),jule::Array<jule::U64,2>({6303799689591218185LLU,13120851772591970218LLU}),jule::Array<jule::U64,2>({17103121648843798539LLU,16401064715739962772LLU}),jule::Array<jule::U64,2>({1466078993672598279LLU,10250665447337476733LLU}),jule::Array<jule::U64,2>({6444284760518135752LLU,12813331809171845916LLU}),jule::Array<jule::U64,2>({8055355950647669691LLU,16016664761464807395LLU}),jule::Array<jule::U64,2>({2728754459941099604LLU,10010415475915504622LLU}),jule::Array<jule::U64,2>({12634315111781150314LLU,12513019344894380777LLU}),jule::Array<jule::U64,2>({1957835834444274180LLU,15641274181117975972LLU}),jule::Array<jule::U64,2>({10447019433382447170LLU,9775796363198734982LLU}),jule::Array<jule::U64,2>({3835402254873283155LLU,12219745453998418728LLU}),jule::Array<jule::U64,2>({4794252818591603944LLU,15274681817498023410LLU}),jule::Array<jule::U64,2>({7608094030047140369LLU,9546676135936264631LLU}),jule::Array<jule::U64,2>({4898431519131537557LLU,11933345169920330789LLU}),jule::Array<jule::U64,2>({10734725417341809851LLU,14916681462400413486LLU}),jule::Array<jule::U64,2>({2097517367411243253LLU,9322925914000258429LLU}),jule::Array<jule::U64,2>({7233582727691441970LLU,11653657392500323036LLU}),jule::Array<jule::U64,2>({9041978409614302462LLU,14567071740625403795LLU}),jule::Array<jule::U64,2>({6690786993590490174LLU,18208839675781754744LLU}),jule::Array<jule::U64,2>({4181741870994056359LLU,11380524797363596715LLU}),jule::Array<jule::U64,2>({615491320315182544LLU,14225655996704495894LLU}),jule::Array<jule::U64,2>({9992736187248753989LLU,17782069995880619867LLU}),jule::Array<jule::U64,2>({3939617107816777291LLU,11113793747425387417LLU}),jule::Array<jule::U64,2>({9536207403198359517LLU,13892242184281734271LLU}),jule::Array<jule::U64,2>({7308573235570561493LLU,17365302730352167839LLU}),jule::Array<jule::U64,2>({11485387299872682789LLU,10853314206470104899LLU}),jule::Array<jule::U64,2>({9745048106413465582LLU,13566642758087631124LLU}),jule::Array<jule::U64,2>({12181310133016831978LLU,16958303447609538905LLU}),jule::Array<jule::U64,2>({695789805494438130LLU,10598939654755961816LLU}),jule::Array<jule::U64,2>({869737256868047663LLU,13248674568444952270LLU}),jule::Array<jule::U64,2>({10310543607939835386LLU,16560843210556190337LLU}),jule::Array<jule::U64,2>({17973304801030866876LLU,10350527006597618960LLU}),jule::Array<jule::U64,2>({4019886927579031980LLU,12938158758247023701LLU}),jule::Array<jule::U64,2>({9636544677901177879LLU,16172698447808779626LLU}),jule::Array<jule::U64,2>({10634526442115624078LLU,10107936529880487266LLU}),jule::Array<jule::U64,2>({4069786015789754290LLU,12634920662350609083LLU}),jule::Array<jule::U64,2>({475546501309804958LLU,15793650827938261354LLU}),jule::Array<jule::U64,2>({4908902581746016003LLU,9871031767461413346LLU}),jule::Array<jule::U64,2>({15359500264037295811LLU,12338789709326766682LLU}),jule::Array<jule::U64,2>({9976003293191843956LLU,15423487136658458353LLU}),jule::Array<jule::U64,2>({17764217104313372233LLU,9639679460411536470LLU}),jule::Array<jule::U64,2>({12981899343536939483LLU,12049599325514420588LLU}),jule::Array<jule::U64,2>({16227374179421174354LLU,15061999156893025735LLU}),jule::Array<jule::U64,2>({17059637889779315827LLU,9413749473058141084LLU}),jule::Array<jule::U64,2>({2877803288514593168LLU,11767186841322676356LLU}),jule::Array<jule::U64,2>({3597254110643241460LLU,14708983551653345445LLU}),jule::Array<jule::U64,2>({9108253656731439729LLU,18386229439566681806LLU}),jule::Array<jule::U64,2>({1080972517029761926LLU,11491393399729176129LLU}),jule::Array<jule::U64,2>({5962901664714590312LLU,14364241749661470161LLU}),jule::Array<jule::U64,2>({12065313099320625794LLU,17955302187076837701LLU}),jule::Array<jule::U64,2>({9846663696289085073LLU,11222063866923023563LLU}),jule::Array<jule::U64,2>({7696643601933968437LLU,14027579833653779454LLU}),jule::Array<jule::U64,2>({397432465562684739LLU,17534474792067224318LLU}),jule::Array<jule::U64,2>({14083453346258841674LLU,10959046745042015198LLU}),jule::Array<jule::U64,2>({8380944645968776284LLU,13698808431302518998LLU}),jule::Array<jule::U64,2>({1252808770606194547LLU,17123510539128148748LLU}),jule::Array<jule::U64,2>({10006377518483647400LLU,10702194086955092967LLU}),jule::Array<jule::U64,2>({7896285879677171346LLU,13377742608693866209LLU}),jule::Array<jule::U64,2>({14482043368023852087LLU,16722178260867332761LLU}),jule::Array<jule::U64,2>({2133748077373825698LLU,10451361413042082976LLU}),jule::Array<jule::U64,2>({2667185096717282123LLU,13064201766302603720LLU}),jule::Array<jule::U64,2>({3333981370896602653LLU,16330252207878254650LLU}),jule::Array<jule::U64,2>({6695424375237764562LLU,10206407629923909156LLU}),jule::Array<jule::U64,2>({8369280469047205703LLU,12758009537404886445LLU}),jule::Array<jule::U64,2>({15073286604736395033LLU,15947511921756108056LLU}),jule::Array<jule::U64,2>({9420804127960246895LLU,9967194951097567535LLU}),jule::Array<jule::U64,2>({7164319141522920715LLU,12458993688871959419LLU}),jule::Array<jule::U64,2>({4343712908476262990LLU,15573742111089949274LLU}),jule::Array<jule::U64,2>({7326506586225052273LLU,9733588819431218296LLU}),jule::Array<jule::U64,2>({9158133232781315341LLU,12166986024289022870LLU}),jule::Array<jule::U64,2>({2224294504121868368LLU,15208732530361278588LLU}),jule::Array<jule::U64,2>({10613556101930943538LLU,9505457831475799117LLU}),jule::Array<jule::U64,2>({17878631145841067327LLU,11881822289344748896LLU}),jule::Array<jule::U64,2>({3901544858591782542LLU,14852277861680936121LLU}),jule::Array<jule::U64,2>({13967680582688333849LLU,9282673663550585075LLU}),jule::Array<jule::U64,2>({12847914709933029407LLU,11603342079438231344LLU}),jule::Array<jule::U64,2>({16059893387416286759LLU,14504177599297789180LLU}),jule::Array<jule::U64,2>({1628122660560806833LLU,18130221999122236476LLU}),jule::Array<jule::U64,2>({10240948699705280078LLU,11331388749451397797LLU}),jule::Array<jule::U64,2>({17412871893058988002LLU,14164235936814247246LLU}),jule::Array<jule::U64,2>({12542717829468959195LLU,17705294921017809058LLU}),jule::Array<jule::U64,2>({12450884661845487401LLU,11065809325636130661LLU}),jule::Array<jule::U64,2>({1728547772024695539LLU,13832261657045163327LLU}),jule::Array<jule::U64,2>({15995742770313033136LLU,17290327071306454158LLU}),jule::Array<jule::U64,2>({5385653213018257806LLU,10806454419566533849LLU}),jule::Array<jule::U64,2>({11343752534700210161LLU,13508068024458167311LLU}),jule::Array<jule::U64,2>({9568004649947874797LLU,16885085030572709139LLU}),jule::Array<jule::U64,2>({3674159897003727796LLU,10553178144107943212LLU}),jule::Array<jule::U64,2>({4592699871254659745LLU,13191472680134929015LLU}),jule::Array<jule::U64,2>({1129188820640936778LLU,16489340850168661269LLU}),jule::Array<jule::U64,2>({3011586022114279438LLU,10305838031355413293LLU}),jule::Array<jule::U64,2>({8376168546070237202LLU,12882297539194266616LLU}),jule::Array<jule::U64,2>({10470210682587796502LLU,16102871923992833270LLU}),jule::Array<jule::U64,2>({1932195658189984910LLU,10064294952495520794LLU}),jule::Array<jule::U64,2>({11638616609592256945LLU,12580368690619400992LLU}),jule::Array<jule::U64,2>({14548270761990321182LLU,15725460863274251240LLU}),jule::Array<jule::U64,2>({9092669226243950738LLU,9828413039546407025LLU}),jule::Array<jule::U64,2>({15977522551232326327LLU,12285516299433008781LLU}),jule::Array<jule::U64,2>({6136845133758244197LLU,15356895374291260977LLU}),jule::Array<jule::U64,2>({15364743254667372383LLU,9598059608932038110LLU}),jule::Array<jule::U64,2>({9982557031479439671LLU,11997574511165047638LLU}),jule::Array<jule::U64,2>({3254824252494523781LLU,14996968138956309548LLU}),jule::Array<jule::U64,2>({11257637194663853171LLU,9373105086847693467LLU}),jule::Array<jule::U64,2>({9460360474902428559LLU,11716381358559616834LLU}),jule::Array<jule::U64,2>({2602078556773259891LLU,14645476698199521043LLU}),jule::Array<jule::U64,2>({17087656251248738576LLU,18306845872749401303LLU}),jule::Array<jule::U64,2>({17597314184671543466LLU,11441778670468375814LLU}),jule::Array<jule::U64,2>({12773270693984653525LLU,14302223338085469768LLU}),jule::Array<jule::U64,2>({15966588367480816906LLU,17877779172606837210LLU}),jule::Array<jule::U64,2>({14590803748102898470LLU,11173611982879273256LLU}),jule::Array<jule::U64,2>({18238504685128623088LLU,13967014978599091570LLU}),jule::Array<jule::U64,2>({13574758819556003052LLU,17458768723248864463LLU}),jule::Array<jule::U64,2>({15401753289863583763LLU,10911730452030540289LLU}),jule::Array<jule::U64,2>({5417133557047315992LLU,13639663065038175362LLU}),jule::Array<jule::U64,2>({15994788983163920798LLU,17049578831297719202LLU}),jule::Array<jule::U64,2>({14608429132904838403LLU,10655986769561074501LLU}),jule::Array<jule::U64,2>({4425478360848884291LLU,13319983461951343127LLU}),jule::Array<jule::U64,2>({920161932633717460LLU,16649979327439178909LLU}),jule::Array<jule::U64,2>({2880944217109767365LLU,10406237079649486818LLU}),jule::Array<jule::U64,2>({12824552308241985014LLU,13007796349561858522LLU}),jule::Array<jule::U64,2>({6807318348447705459LLU,16259745436952323153LLU}),jule::Array<jule::U64,2>({15783789013848285672LLU,10162340898095201970LLU}),jule::Array<jule::U64,2>({10506364230455581282LLU,12702926122619002463LLU}),jule::Array<jule::U64,2>({8521269269642088699LLU,15878657653273753079LLU}),jule::Array<jule::U64,2>({12243322321167387293LLU,9924161033296095674LLU}),jule::Array<jule::U64,2>({6080780864604458308LLU,12405201291620119593LLU}),jule::Array<jule::U64,2>({12212662099182960789LLU,15506501614525149491LLU}),jule::Array<jule::U64,2>({5327070802775656541LLU,9691563509078218432LLU}),jule::Array<jule::U64,2>({6658838503469570676LLU,12114454386347773040LLU}),jule::Array<jule::U64,2>({8323548129336963345LLU,15143067982934716300LLU}),jule::Array<jule::U64,2>({14425589617690377899LLU,9464417489334197687LLU}),jule::Array<jule::U64,2>({13420301003685584469LLU,11830521861667747109LLU}),jule::Array<jule::U64,2>({2940318199324816875LLU,14788152327084683887LLU}),jule::Array<jule::U64,2>({8755227902219092403LLU,9242595204427927429LLU}),jule::Array<jule::U64,2>({15555720896201253407LLU,11553244005534909286LLU}),jule::Array<jule::U64,2>({10221279083396790951LLU,14441555006918636608LLU}),jule::Array<jule::U64,2>({12776598854245988689LLU,18051943758648295760LLU}),jule::Array<jule::U64,2>({7985374283903742931LLU,11282464849155184850LLU}),jule::Array<jule::U64,2>({758345818024902856LLU,14103081061443981063LLU}),jule::Array<jule::U64,2>({14782990327813292282LLU,17628851326804976328LLU}),jule::Array<jule::U64,2>({9239368954883307676LLU,11018032079253110205LLU}),jule::Array<jule::U64,2>({16160897212031522499LLU,13772540099066387756LLU}),jule::Array<jule::U64,2>({1754377441329851508LLU,17215675123832984696LLU}),jule::Array<jule::U64,2>({1096485900831157192LLU,10759796952395615435LLU}),jule::Array<jule::U64,2>({15205665431321110202LLU,13449746190494519293LLU}),jule::Array<jule::U64,2>({5172023733869224041LLU,16812182738118149117LLU}),jule::Array<jule::U64,2>({5538357842881958977LLU,10507614211323843198LLU}),jule::Array<jule::U64,2>({16146319340457224530LLU,13134517764154803997LLU}),jule::Array<jule::U64,2>({6347841120289366950LLU,16418147205193504997LLU}),jule::Array<jule::U64,2>({6273243709394548296LLU,10261342003245940623LLU}),jule::Array<jule::U64,2>({3229868618315797466LLU,12826677504057425779LLU}),jule::Array<jule::U64,2>({17872393828176910545LLU,16033346880071782223LLU}),jule::Array<jule::U64,2>({18087775170251650946LLU,10020841800044863889LLU}),jule::Array<jule::U64,2>({8774660907532399971LLU,12526052250056079862LLU}),jule::Array<jule::U64,2>({1744954097560724156LLU,15657565312570099828LLU}),jule::Array<jule::U64,2>({10313968347830228405LLU,9785978320356312392LLU}),jule::Array<jule::U64,2>({12892460434787785506LLU,12232472900445390490LLU}),jule::Array<jule::U64,2>({6892203506629956075LLU,15290591125556738113LLU}),jule::Array<jule::U64,2>({15836842237712192307LLU,9556619453472961320LLU}),jule::Array<jule::U64,2>({1349308723430688768LLU,11945774316841201651LLU}),jule::Array<jule::U64,2>({15521693959570524672LLU,14932217896051502063LLU}),jule::Array<jule::U64,2>({16618587752372659776LLU,9332636185032188789LLU}),jule::Array<jule::U64,2>({6938176635183661008LLU,11665795231290235987LLU}),jule::Array<jule::U64,2>({4061034775552188356LLU,14582244039112794984LLU}),jule::Array<jule::U64,2>({5076293469440235445LLU,18227805048890993730LLU}),jule::Array<jule::U64,2>({7784369436827535057LLU,11392378155556871081LLU}),jule::Array<jule::U64,2>({14342147814461806725LLU,14240472694446088851LLU}),jule::Array<jule::U64,2>({13315998749649870503LLU,17800590868057611064LLU}),jule::Array<jule::U64,2>({8322499218531169064LLU,11125369292536006915LLU}),jule::Array<jule::U64,2>({5791438004736573426LLU,13906711615670008644LLU}),jule::Array<jule::U64,2>({7239297505920716783LLU,17383389519587510805LLU}),jule::Array<jule::U64,2>({6830403950414141941LLU,10864618449742194253LLU}),jule::Array<jule::U64,2>({13149690956445065330LLU,13580773062177742816LLU}),jule::Array<jule::U64,2>({16437113695556331663LLU,16975966327722178520LLU}),jule::Array<jule::U64,2>({10273196059722707289LLU,10609978954826361575LLU}),jule::Array<jule::U64,2>({8229809056225996208LLU,13262473693532951969LLU}),jule::Array<jule::U64,2>({14898947338709883164LLU,16578092116916189961LLU}),jule::Array<jule::U64,2>({2394313059052595121LLU,10361307573072618726LLU}),jule::Array<jule::U64,2>({12216263360670519709LLU,12951634466340773407LLU}),jule::Array<jule::U64,2>({10658643182410761733LLU,16189543082925966759LLU}),jule::Array<jule::U64,2>({13579181016647807939LLU,10118464426828729224LLU}),jule::Array<jule::U64,2>({16973976270809759924LLU,12648080533535911530LLU}),jule::Array<jule::U64,2>({11994098301657424097LLU,15810100666919889413LLU}),jule::Array<jule::U64,2>({9802154447749584012LLU,9881312916824930883LLU}),jule::Array<jule::U64,2>({7641007041259592112LLU,12351641146031163604LLU}),jule::Array<jule::U64,2>({9551258801574490140LLU,15439551432538954505LLU}),jule::Array<jule::U64,2>({17498751797052526097LLU,9649719645336846565LLU}),jule::Array<jule::U64,2>({8038381691033493909LLU,12062149556671058207LLU}),jule::Array<jule::U64,2>({5436291095364479483LLU,15077686945838822759LLU})});
static jule::Slice<jule::Int> _1320824b0_POWTAB = jule::Slice<jule::Int>({1LL,3LL,6LL,9LL,13LL,16LL,19LL,23LL,26LL});
static jule::Slice<jule::F64> _1320824b0_F64_POW10 = jule::Slice<jule::F64>({1e+00,1e+01,1e+02,1e+03,1e+04,1e+05,1e+06,1e+07,1e+08,1e+09,1e+10,1e+11,1e+12,1e+13,1e+14,1e+15,1e+16,1e+17,1e+18,1e+19,1e+20,1e+21,1e+22});
static jule::Slice<jule::F32> _1320824b0_F32_POW10 = jule::Slice<jule::F32>({1e+00,1e+01,1e+02,1e+03,1e+04,1e+05,1e+06,1e+07,1e+08,1e+09,1e+10});
static jule::Array<jule::U64,20> _121735870_U64_POW10 = jule::Array<jule::U64,20>({1LLU,10LLU,100LLU,1000LLU,10000LLU,100000LLU,1000000LLU,10000000LLU,100000000LLU,1000000000LLU,10000000000LLU,100000000000LLU,1000000000000LLU,10000000000000LLU,100000000000000LLU,1000000000000000LLU,10000000000000000LLU,100000000000000000LLU,1000000000000000000LLU,10000000000000000000LLU});
static jule::Slice<_13207af00_LeftCheat> _13207af00_LEFTCHEATS = jule::Slice<_13207af00_LeftCheat>({_13207af00_LeftCheat(0LL,jule::Str("", 0)),_13207af00_LeftCheat(1LL,jule::Str("5", 1)),_13207af00_LeftCheat(1LL,jule::Str("25", 2)),_13207af00_LeftCheat(1LL,jule::Str("125", 3)),_13207af00_LeftCheat(2LL,jule::Str("625", 3)),_13207af00_LeftCheat(2LL,jule::Str("3125", 4)),_13207af00_LeftCheat(2LL,jule::Str("15625", 5)),_13207af00_LeftCheat(3LL,jule::Str("78125", 5)),_13207af00_LeftCheat(3LL,jule::Str("390625", 6)),_13207af00_LeftCheat(3LL,jule::Str("1953125", 7)),_13207af00_LeftCheat(4LL,jule::Str("9765625", 7)),_13207af00_LeftCheat(4LL,jule::Str("48828125", 8)),_13207af00_LeftCheat(4LL,jule::Str("244140625", 9)),_13207af00_LeftCheat(4LL,jule::Str("1220703125", 10)),_13207af00_LeftCheat(5LL,jule::Str("6103515625", 10)),_13207af00_LeftCheat(5LL,jule::Str("30517578125", 11)),_13207af00_LeftCheat(5LL,jule::Str("152587890625", 12)),_13207af00_LeftCheat(6LL,jule::Str("762939453125", 12)),_13207af00_LeftCheat(6LL,jule::Str("3814697265625", 13)),_13207af00_LeftCheat(6LL,jule::Str("19073486328125", 14)),_13207af00_LeftCheat(7LL,jule::Str("95367431640625", 14)),_13207af00_LeftCheat(7LL,jule::Str("476837158203125", 15)),_13207af00_LeftCheat(7LL,jule::Str("2384185791015625", 16)),_13207af00_LeftCheat(7LL,jule::Str("11920928955078125", 17)),_13207af00_LeftCheat(8LL,jule::Str("59604644775390625", 17)),_13207af00_LeftCheat(8LL,jule::Str("298023223876953125", 18)),_13207af00_LeftCheat(8LL,jule::Str("1490116119384765625", 19)),_13207af00_LeftCheat(9LL,jule::Str("7450580596923828125", 19)),_13207af00_LeftCheat(9LL,jule::Str("37252902984619140625", 20)),_13207af00_LeftCheat(9LL,jule::Str("186264514923095703125", 21)),_13207af00_LeftCheat(10LL,jule::Str("931322574615478515625", 21)),_13207af00_LeftCheat(10LL,jule::Str("4656612873077392578125", 22)),_13207af00_LeftCheat(10LL,jule::Str("23283064365386962890625", 23)),_13207af00_LeftCheat(10LL,jule::Str("116415321826934814453125", 24)),_13207af00_LeftCheat(11LL,jule::Str("582076609134674072265625", 24)),_13207af00_LeftCheat(11LL,jule::Str("2910383045673370361328125", 25)),_13207af00_LeftCheat(11LL,jule::Str("14551915228366851806640625", 26)),_13207af00_LeftCheat(12LL,jule::Str("72759576141834259033203125", 26)),_13207af00_LeftCheat(12LL,jule::Str("363797880709171295166015625", 27)),_13207af00_LeftCheat(12LL,jule::Str("1818989403545856475830078125", 28)),_13207af00_LeftCheat(13LL,jule::Str("9094947017729282379150390625", 28)),_13207af00_LeftCheat(13LL,jule::Str("45474735088646411895751953125", 29)),_13207af00_LeftCheat(13LL,jule::Str("227373675443232059478759765625", 30)),_13207af00_LeftCheat(13LL,jule::Str("1136868377216160297393798828125", 31)),_13207af00_LeftCheat(14LL,jule::Str("5684341886080801486968994140625", 31)),_13207af00_LeftCheat(14LL,jule::Str("28421709430404007434844970703125", 32)),_13207af00_LeftCheat(14LL,jule::Str("142108547152020037174224853515625", 33)),_13207af00_LeftCheat(15LL,jule::Str("710542735760100185871124267578125", 33)),_13207af00_LeftCheat(15LL,jule::Str("3552713678800500929355621337890625", 34)),_13207af00_LeftCheat(15LL,jule::Str("17763568394002504646778106689453125", 35)),_13207af00_LeftCheat(16LL,jule::Str("88817841970012523233890533447265625", 35)),_13207af00_LeftCheat(16LL,jule::Str("444089209850062616169452667236328125", 36)),_13207af00_LeftCheat(16LL,jule::Str("2220446049250313080847263336181640625", 37)),_13207af00_LeftCheat(16LL,jule::Str("11102230246251565404236316680908203125", 38)),_13207af00_LeftCheat(17LL,jule::Str("55511151231257827021181583404541015625", 38)),_13207af00_LeftCheat(17LL,jule::Str("277555756156289135105907917022705078125", 39)),_13207af00_LeftCheat(17LL,jule::Str("1387778780781445675529539585113525390625", 40)),_13207af00_LeftCheat(18LL,jule::Str("6938893903907228377647697925567626953125", 40)),_13207af00_LeftCheat(18LL,jule::Str("34694469519536141888238489627838134765625", 41)),_13207af00_LeftCheat(18LL,jule::Str("173472347597680709441192448139190673828125", 42)),_13207af00_LeftCheat(19LL,jule::Str("867361737988403547205962240695953369140625", 42))});
static jule::Slice<jule::Str> _121828050_ARGS = nullptr;
static jule::Slice<jule::Str> _121828050_ENV = nullptr;
static jule::Array<jule::Str,4> _1316301d0_CPP_HEADER_EXTS = jule::Array<jule::Str,4>({jule::Str(".h", 2),jule::Str(".hpp", 4),jule::Str(".hxx", 4),jule::Str(".hh", 3)});
static jule::Array<jule::Str,3> _1316301d0_CPP_EXTS = jule::Array<jule::Str,3>({jule::Str(".cpp", 4),jule::Str(".cc", 3),jule::Str(".cxx", 4)});
static jule::Array<jule::Str,1> _1316301d0_OBJECTIVE_CPP_EXTS = jule::Array<jule::Str,1>({jule::Str(".mm", 3)});
static jule::Map<jule::Str,jule::Str> _1316b2ff0_ERRORS = jule::Map<jule::Str,jule::Str>({{jule::Str("stdlib_not_exist", 16),jule::Str("standard library directory not found", 36)},{jule::Str("file_not_useable", 16),jule::Str("file is not useable for this operating system or architecture", 61)},{jule::Str("file_not_jule", 13),jule::Str("this is not jule source file: @", 31)},{jule::Str("no_entry_point", 14),jule::Str("entry point (main) function is not defined", 42)},{jule::Str("duplicated_ident", 16),jule::Str("duplicated identifier for declarations in scope: @", 50)},{jule::Str("extra_closed_parentheses", 24),jule::Str("extra closed parentheses", 24)},{jule::Str("extra_closed_braces", 19),jule::Str("extra closed braces", 19)},{jule::Str("extra_closed_brackets", 21),jule::Str("extra closed brackets", 21)},{jule::Str("wait_close_parentheses", 22),jule::Str("parentheses waiting to close", 28)},{jule::Str("wait_close_brace", 16),jule::Str("brace waiting to close", 22)},{jule::Str("wait_close_bracket", 18),jule::Str("bracket are waiting to close", 28)},{jule::Str("expected_parentheses_close", 26),jule::Str("was expected parentheses close", 30)},{jule::Str("expected_brace_close", 20),jule::Str("was expected brace close", 24)},{jule::Str("expected_bracket_close", 22),jule::Str("was expected bracket close", 26)},{jule::Str("body_not_exist", 14),jule::Str("body is not exist", 17)},{jule::Str("operator_overflow", 17),jule::Str("operator overflow", 17)},{jule::Str("incompatible_types", 18),jule::Str("@ and @ data-types are not compatible", 37)},{jule::Str("operator_not_for_juletype", 25),jule::Str("@ operator is not defined for @ type", 36)},{jule::Str("operator_not_for_float", 22),jule::Str("@ operator is not defined for float type(s)", 43)},{jule::Str("operator_not_for_int", 20),jule::Str("@ operator is not defined for integer type(s)", 45)},{jule::Str("operator_not_for_uint", 21),jule::Str("@ operator is not defined for unsigned integer type(s)", 54)},{jule::Str("ident_not_exist", 15),jule::Str("identifier is not exist: @", 26)},{jule::Str("not_function_call", 17),jule::Str("value is not function", 21)},{jule::Str("argument_overflow", 17),jule::Str("argument overflow", 17)},{jule::Str("fn_have_ret", 11),jule::Str("@ function cannot have return type", 34)},{jule::Str("fn_have_parameters", 18),jule::Str("@ function cannot have parameter(s)", 35)},{jule::Str("fn_is_unsafe", 12),jule::Str("@ function cannot unsafe", 24)},{jule::Str("require_ret_expr", 16),jule::Str("return statements of non-void functions should have return expression", 69)},{jule::Str("void_function_ret_expr", 22),jule::Str("void functions is cannot returns any value", 42)},{jule::Str("bitshift_must_unsigned", 22),jule::Str("bit shifting value is must be unsigned", 38)},{jule::Str("logical_not_bool", 16),jule::Str("logical expression is have only boolean type values", 51)},{jule::Str("assign_const", 12),jule::Str("constants is can't assign", 25)},{jule::Str("assign_require_lvalue", 21),jule::Str("assignment required lvalue", 26)},{jule::Str("assign_type_not_support_value", 29),jule::Str("type is not support assignment", 30)},{jule::Str("invalid_token", 13),jule::Str("undefined code content: @", 25)},{jule::Str("invalid_syntax", 14),jule::Str("invalid syntax", 14)},{jule::Str("invalid_type", 12),jule::Str("invalid data-type", 17)},{jule::Str("invalid_numeric_range", 21),jule::Str("arithmetic value overflow", 25)},{jule::Str("invalid_operator", 16),jule::Str("invalid operator", 16)},{jule::Str("invalid_expr_unary_operator", 27),jule::Str("invalid expression for unary @ operator", 39)},{jule::Str("invalid_escape_sequence", 23),jule::Str("invalid escape sequence", 23)},{jule::Str("invalid_type_source", 19),jule::Str("invalid data-type source", 24)},{jule::Str("invalid_preprocessor", 20),jule::Str("invalid preprocessor directive", 30)},{jule::Str("invalid_pragma_directive", 24),jule::Str("invalid pragma directive", 24)},{jule::Str("invalid_type_for_const", 22),jule::Str("@ is invalid data-type for constant", 35)},{jule::Str("invalid_value_for_key", 21),jule::Str("\"@\" is invalid value for the \"@\" key", 36)},{jule::Str("invalid_expr", 12),jule::Str("invalid expression", 18)},{jule::Str("invalid_cpp_ext", 15),jule::Str("invalid C++ extension: @", 24)},{jule::Str("invalid_label", 13),jule::Str("invalid label", 13)},{jule::Str("missing_value_for_type_inference", 32),jule::Str("type inference declarations should have a initializer", 53)},{jule::Str("missing_type", 12),jule::Str("data-type missing", 17)},{jule::Str("missing_expr", 12),jule::Str("expression missing", 18)},{jule::Str("missing_block_comment", 21),jule::Str("missing block comment close", 27)},{jule::Str("missing_rune_end", 16),jule::Str("rune is not finished", 20)},{jule::Str("missing_ret", 11),jule::Str("missing return at end of function", 33)},{jule::Str("missing_string_end", 18),jule::Str("string is not finished", 22)},{jule::Str("missing_multi_ret", 17),jule::Str("missing return expressions for multi return", 43)},{jule::Str("missing_multi_assign_idents", 27),jule::Str("missing identifier(s) for multiple assignment", 45)},{jule::Str("missing_use_path", 16),jule::Str("missing path of use statement", 29)},{jule::Str("missing_pragma_directive", 24),jule::Str("missing pragma directive", 24)},{jule::Str("missing_goto_label", 18),jule::Str("missing label identifier for goto statement", 43)},{jule::Str("missing_expr_for", 16),jule::Str("missing expression for @", 24)},{jule::Str("missing_generics", 16),jule::Str("missing generics", 16)},{jule::Str("missing_receiver", 16),jule::Str("missing receiver parameter", 26)},{jule::Str("missing_function_parentheses", 28),jule::Str("missing function parentheses", 28)},{jule::Str("expr_not_const", 14),jule::Str("expressions is not constant expression", 38)},{jule::Str("nil_for_type_inference", 22),jule::Str("nil is cannot use with type inferred definitions", 48)},{jule::Str("void_for_type_inference", 23),jule::Str("void data is cannot use for type inferred definitions", 53)},{jule::Str("rune_empty", 10),jule::Str("rune is cannot empty", 20)},{jule::Str("rune_overflow", 13),jule::Str("rune is should be single", 24)},{jule::Str("not_supports_indexing", 21),jule::Str("@ data type is not support indexing", 35)},{jule::Str("not_supports_slicing", 20),jule::Str("@ data type is not support slicing", 34)},{jule::Str("already_const", 13),jule::Str("define is already constant", 26)},{jule::Str("already_variadic", 16),jule::Str("define is already variadic", 26)},{jule::Str("already_reference", 17),jule::Str("define is already reference", 27)},{jule::Str("duplicate_use_decl", 18),jule::Str("duplicate use declaration: @", 28)},{jule::Str("ignore_ident", 12),jule::Str("ignore operator cannot use as identifier for this declaration", 61)},{jule::Str("overflow_multi_assign_idents", 28),jule::Str("overflow multi assignment identifers", 36)},{jule::Str("overflow_ret", 12),jule::Str("overflow return expressions", 27)},{jule::Str("break_at_out_of_valid_scope", 27),jule::Str("break keyword is cannot used at out of iteration and match cases", 64)},{jule::Str("continue_at_out_of_valid_scope", 30),jule::Str("continue keyword is cannot used at out of iteration", 51)},{jule::Str("iter_while_require_bool_expr", 28),jule::Str("while iterations must be have boolean expression", 48)},{jule::Str("iter_range_require_enumerable_expr", 34),jule::Str("range iterations must be have enumerable expression", 51)},{jule::Str("much_range_vars", 15),jule::Str("range variables can be maximum two", 34)},{jule::Str("if_require_bool_expr", 20),jule::Str("if conditions must be have boolean expression", 45)},{jule::Str("else_have_expr", 14),jule::Str("else's cannot have any expression", 33)},{jule::Str("variadic_parameter_not_last", 27),jule::Str("variadic parameter can only be last parameter", 45)},{jule::Str("variadic_with_non_variadicable", 30),jule::Str("@ data-type is not variadicable", 31)},{jule::Str("more_args_with_variadiced", 25),jule::Str("variadic argument can't use with more argument", 46)},{jule::Str("type_not_supports_casting", 25),jule::Str("@ data-type not supports casting", 32)},{jule::Str("type_not_supports_casting_to", 28),jule::Str("@ data-type not supports casting to @ data-type", 47)},{jule::Str("use_at_content", 14),jule::Str("use declaration must be start of source code", 44)},{jule::Str("use_not_found", 13),jule::Str("used directory path not found/access: @", 39)},{jule::Str("used_package_has_errors", 23),jule::Str("used package has errors: @", 26)},{jule::Str("def_not_support_pub", 19),jule::Str("define is not supports pub modifier", 35)},{jule::Str("obj_not_support_sub_fields", 26),jule::Str("object @ is not supports sub fields", 35)},{jule::Str("obj_have_not_ident", 18),jule::Str("object is not have sub field in this identifier: @", 50)},{jule::Str("type_not_support_sub_fields", 27),jule::Str("type @ is not supports sub fields", 33)},{jule::Str("type_have_not_ident", 19),jule::Str("type @ is not have sub field in this identifier: @", 50)},{jule::Str("doc_couldnt_generated", 21),jule::Str("@: documentation could not generated because Jule source code has an errors", 75)},{jule::Str("declared_but_not_used", 21),jule::Str("@ declared but not used", 23)},{jule::Str("expr_not_func_call", 18),jule::Str("statement must have function call expression", 44)},{jule::Str("label_exist", 11),jule::Str("label is already exist in this identifier: @", 44)},{jule::Str("label_not_exist", 15),jule::Str("not exist any label in this identifier: @", 41)},{jule::Str("goto_jumps_declarations", 23),jule::Str("goto @ jumps over declaration(s)", 32)},{jule::Str("fn_not_has_parameter", 20),jule::Str("function is not has parameter in this identifier: @", 51)},{jule::Str("already_has_expr", 16),jule::Str("@ already has expression", 24)},{jule::Str("argument_must_target_to_field", 29),jule::Str("argument must target to field", 29)},{jule::Str("overflow_limits", 15),jule::Str("overflow the limit of data-type", 31)},{jule::Str("generics_overflow", 17),jule::Str("overflow generics", 17)},{jule::Str("has_generics", 12),jule::Str("define has generics", 19)},{jule::Str("not_has_generics", 16),jule::Str("define not has generics", 23)},{jule::Str("type_not_supports_generics", 26),jule::Str("type @ not supports generics", 28)},{jule::Str("divide_by_zero", 14),jule::Str("divide by zero", 14)},{jule::Str("trait_have_not_ident", 20),jule::Str("trait @ have not any define in this identifier: @", 49)},{jule::Str("not_impl_trait_def", 18),jule::Str("trait @ derived but not implemented trait's \"@\" define", 54)},{jule::Str("dynamic_type_annotation_failed", 30),jule::Str("dynamic type annotation failed", 30)},{jule::Str("fallthrough_wrong_use", 21),jule::Str("fallthrough keyword can only useable at end of the case scopes", 62)},{jule::Str("fallthrough_into_final_case", 27),jule::Str("fallthrough cannot useable at final case", 40)},{jule::Str("unsafe_behavior_at_out_of_unsafe_scope", 38),jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54)},{jule::Str("ref_method_used_with_not_ref_instance", 37),jule::Str("reference method cannot use with non-reference instance", 55)},{jule::Str("method_as_anonymous_fn", 22),jule::Str("methods cannot use as anonymous function", 40)},{jule::Str("genericed_fn_as_anonymous_fn", 28),jule::Str("genericed functions cannot use as anonymous function", 52)},{jule::Str("illegal_cycle_refers_itself", 27),jule::Str("illegal cycle in declaration, @ refers to itself", 48)},{jule::Str("illegal_cross_cycle", 19),jule::Str("illegal cross cycle in declarations;\n@", 38)},{jule::Str("assignment_to_non_mut", 21),jule::Str("cannot assign to immutable define", 33)},{jule::Str("assignment_non_mut_to_mut", 25),jule::Str("cannot assign mutable type used immutable define to mutable define", 66)},{jule::Str("ret_with_mut_typed_non_mut", 26),jule::Str("mutable typed return expressions should be mutable", 50)},{jule::Str("mutable_operation_on_immutable", 30),jule::Str("mutable operation cannot used with immutable define", 51)},{jule::Str("trait_has_reference_parametered_function", 40),jule::Str("trait has reference receiver parameter used method, cannot assign non-reference instance", 88)},{jule::Str("enum_have_not_field", 19),jule::Str("enum have not any field: @", 26)},{jule::Str("duplicate_match_type", 20),jule::Str("type is already checked: @", 26)},{jule::Str("cpp_linked_variable_has_expr", 28),jule::Str("cpp linked variables cannot have expression", 43)},{jule::Str("cpp_linked_variable_is_const", 28),jule::Str("cpp linked variables cannot constant", 36)},{jule::Str("const_var_not_have_expr", 23),jule::Str("constant variable must have initialize expression", 49)},{jule::Str("ref_refs_ref", 12),jule::Str("references cannot reference to another reference", 48)},{jule::Str("ref_refs_ptr", 12),jule::Str("references cannot reference to pointer", 38)},{jule::Str("ref_refs_array", 14),jule::Str("references cannot reference to array", 36)},{jule::Str("ref_refs_enum", 13),jule::Str("references cannot reference to enum", 35)},{jule::Str("ptr_points_ref", 14),jule::Str("pointers cannot point to reference", 34)},{jule::Str("ptr_points_enum", 15),jule::Str("pointers cannot point to enum", 29)},{jule::Str("missing_expr_for_unary", 22),jule::Str("missing expression for unary operator", 37)},{jule::Str("invalid_op_for_unary", 20),jule::Str("invalid_operator_for_unary: @", 29)},{jule::Str("use_decl_at_body", 16),jule::Str("use declarations must declared before other declarations", 56)},{jule::Str("pwd_cannot_set", 14),jule::Str("current working directory cannot set", 36)},{jule::Str("array_auto_sized", 16),jule::Str("array must have explicit size", 29)},{jule::Str("namespace_not_exist", 19),jule::Str("namespace not exist: @", 22)},{jule::Str("impl_base_not_exist", 19),jule::Str("any valid base definition is not exist in this identifier: @", 60)},{jule::Str("impl_dest_not_exist", 19),jule::Str("any valid destination definition is not exist in this identifier: @", 67)},{jule::Str("struct_already_have_ident", 25),jule::Str("struct @ already have a define in this identifier: @", 52)},{jule::Str("unsafe_ptr_indexing", 19),jule::Str("unsafe pointers not supports indexing", 37)},{jule::Str("method_has_generic_with_same_ident", 34),jule::Str("methods cannot have same generic identifier with owner same time", 64)},{jule::Str("tuple_assign_to_single", 22),jule::Str("tuples cannot assign to single define in same time", 50)},{jule::Str("missing_compile_path", 20),jule::Str("missing compile path", 20)},{jule::Str("array_size_is_not_int", 21),jule::Str("array size must be integer", 26)},{jule::Str("array_size_is_negative", 22),jule::Str("array size must be positive integer", 35)},{jule::Str("builtin_as_anonymous_fn", 23),jule::Str("built-in define cannot use as anonymous function", 48)},{jule::Str("type_case_has_not_valid_expr", 28),jule::Str("type-case must be have <any> or trait typed expression", 54)},{jule::Str("illegal_impl_out_of_package", 27),jule::Str("illegal implementation via definition from out of package", 57)},{jule::Str("method_not_invoked", 18),jule::Str("methods should be invoked", 25)},{jule::Str("duplicated_import_selection", 27),jule::Str("duplicated identifier selection: @", 34)},{jule::Str("ident_is_not_accessible", 23),jule::Str("identifier is not accessible: @", 31)},{jule::Str("invalid_stmt_for_next", 21),jule::Str("invalid statement for while-next", 32)},{jule::Str("modulo_with_not_int", 19),jule::Str("module operator must be used with integer type", 46)},{jule::Str("pkg_illegal_cycle_refers_itself", 31),jule::Str("illegal cycle in use declaration, package @ refers to itself", 60)},{jule::Str("pkg_illegal_cross_cycle", 23),jule::Str("illegal cross cycle in use declarations;\n@", 42)},{jule::Str("refers_to", 9),jule::Str("@ refers to @", 13)},{jule::Str("no_file_in_entry_package", 24),jule::Str("there is no Jule source code in this package: @", 47)},{jule::Str("no_member_in_enum", 17),jule::Str("there is no member for enum: @", 30)},{jule::Str("type_is_not_derives", 19),jule::Str("type \"@\" is not derives: @", 26)},{jule::Str("clone_non_lvalue", 16),jule::Str("non-lvalue expressions cannot be clone", 38)},{jule::Str("clone_immut_struct", 18),jule::Str("struct \"@\" is not breaks immutability, do not needs cloning", 59)},{jule::Str("internal_type_not_supports_clone", 32),jule::Str("internal types of \"@\" is not supports cloning", 45)},{jule::Str("type_not_compatible_for_derive", 30),jule::Str("type \"@\" is not compatible to derive \"@\"", 40)},{jule::Str("pass_directive_not_starts_with_dash", 35),jule::Str("the pass directive must be start with dash", 42)},{jule::Str("derive_illegal_cycle_refers_itself", 34),jule::Str("illegal cycle for \"@\" derive, struct \"@\" refers to itself", 57)},{jule::Str("derive_illegal_cross_cycle", 26),jule::Str("illegal cross cycle for \"@\" derive;\n@", 37)},{jule::Str("invalid_expr_for_binop", 22),jule::Str("invalid expression used for binary operation", 44)},{jule::Str("cpp_linked_struct_for_ref", 25),jule::Str("cpp-linked structures cannot supports reference counting", 56)},{jule::Str("trait_method_has_generics", 25),jule::Str("trait methods cannot have generics", 34)},{jule::Str("enum_as_map_val", 15),jule::Str("maps do not support enums as map key type", 41)},{jule::Str("global_not_static", 17),jule::Str("global variables must be static", 31)},{jule::Str("static_is_type_inferred", 23),jule::Str("static variables must be have type annotation", 45)},{jule::Str("static_not_have_expr", 20),jule::Str("static variables must be have initialize expression", 51)},{jule::Str("static_function_has_receiver", 28),jule::Str("static functions cannot have receiver parameter", 47)},{jule::Str("reference_assign_non_var", 24),jule::Str("references requires variable for assignment", 43)},{jule::Str("mut_reference_points_to_immut", 29),jule::Str("mutable reference cannot point to immutable data", 48)},{jule::Str("reference_not_initialized", 25),jule::Str("reference variables must be have lvalue initialize expression", 61)},{jule::Str("constant_reference", 18),jule::Str("references cannot be constant", 29)},{jule::Str("reference_is_dangling", 21),jule::Str("you cannot use \"@\" reference variable, because reference is dangling", 68)},{jule::Str("concurrent_call_with_reference_parameter", 40),jule::Str("concurrent calls does not support functions which is has reference parameter(s)", 79)},{jule::Str("used_ref_in_anon_fn_from_parent_scope", 37),jule::Str("anonymous functions cannot access to reference \"@\" definition of parent scope", 77)}});
static jule::Array<jule::Str,5> _1316ed230_DIRECTIVES = jule::Array<jule::Str,5>({jule::Str("cdef", 4),jule::Str("typedef", 7),jule::Str("derive", 6),jule::Str("pass", 4),jule::Str("build", 5)});
static jule::Array<jule::Str,3> _1316e9330_DISTOS = jule::Array<jule::Str,3>({jule::Str("windows", 7),jule::Str("linux", 5),jule::Str("darwin", 6)});
static jule::Array<jule::Str,3> _1316e9330_DISTARCH = jule::Array<jule::Str,3>({jule::Str("arm64", 5),jule::Str("amd64", 5),jule::Str("i386", 4)});
static jule::Str _1316f28b0_OS = jule::Str("windows", 7);
static jule::Str _1316f28b0_ARCH = jule::Str("i386", 4);
static jule::Str _1316f28b0_PATH_STDLIB = jule::Str("", 0);
static jule::Str _1316f28b0_PATH_EXEC = jule::Str("", 0);
static jule::Str _1316f28b0_PATH_WD = jule::Str("", 0);
static jule::Str _1316f28b0_PATH_API = jule::Str("", 0);
static jule::Array<jule::U8,256> _1220fe860_FIRST = jule::Array<jule::U8,256>({240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,19LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,35LLU,3LLU,3LLU,52LLU,4LLU,4LLU,4LLU,68LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU});
static jule::Array<_1220fe860_accept_range,16> _1220fe860_ACCEPT_RANGES = jule::Array<_1220fe860_accept_range,16>({_1220fe860_accept_range(128LLU,191LLU),_1220fe860_accept_range(160LLU,191LLU),_1220fe860_accept_range(128LLU,159LLU),_1220fe860_accept_range(144LLU,191LLU),_1220fe860_accept_range(128LLU,143LLU)});
static jule::Array<jule::I32,33> _111613f20_PUNCTS = jule::Array<jule::I32,33>({'!','#','$',',','.','\'','\"',':',';','<','>','=','?','-','+','*','(',')','[',']','{','}','%','&','/','\\','@','^','_','`','|','~',166LL});
static jule::Array<jule::I32,5> _111613f20_SPACES = jule::Array<jule::I32,5>({' ','\t','\v','\r','\n'});
static jule::Array<jule::Str,6> _111613f20_UNARY_OPS = jule::Array<jule::Str,6>({jule::Str("-", 1),jule::Str("+", 1),jule::Str("^", 1),jule::Str("!", 1),jule::Str("*", 1),jule::Str("&", 1)});
static jule::Array<jule::Str,13> _111613f20_BIN_OPS = jule::Array<jule::Str,13>({jule::Str("+", 1),jule::Str("-", 1),jule::Str("*", 1),jule::Str("/", 1),jule::Str("%", 1),jule::Str("&", 1),jule::Str("|", 1),jule::Str("^", 1),jule::Str("<", 1),jule::Str(">", 1),jule::Str("!", 1),jule::Str("&&", 2),jule::Str("||", 2)});
static jule::Array<jule::Str,2> _111613f20_WEAK_OPS = jule::Array<jule::Str,2>({jule::Str("...", 3),jule::Str(":", 1)});
static jule::Array<jule::Str,2> _111613f20_POSTFIX_OPS = jule::Array<jule::Str,2>({jule::Str("++", 2),jule::Str("--", 2)});
static jule::Array<jule::Str,11> _111613f20_ASSING_OPS = jule::Array<jule::Str,11>({jule::Str("=", 1),jule::Str("+=", 2),jule::Str("-=", 2),jule::Str("/=", 2),jule::Str("*=", 2),jule::Str("%=", 2),jule::Str(">>=", 3),jule::Str("<<=", 3),jule::Str("|=", 2),jule::Str("&=", 2),jule::Str("^=", 2)});
static jule::Array<_1116b7f10_KindPair,46> _1116b7f10_KEYWORDS = jule::Array<_1116b7f10_KindPair,46>({_1116b7f10_KindPair(jule::Str("i8", 2),1LLU),_1116b7f10_KindPair(jule::Str("i16", 3),1LLU),_1116b7f10_KindPair(jule::Str("i32", 3),1LLU),_1116b7f10_KindPair(jule::Str("i64", 3),1LLU),_1116b7f10_KindPair(jule::Str("u8", 2),1LLU),_1116b7f10_KindPair(jule::Str("u16", 3),1LLU),_1116b7f10_KindPair(jule::Str("u32", 3),1LLU),_1116b7f10_KindPair(jule::Str("u64", 3),1LLU),_1116b7f10_KindPair(jule::Str("f32", 3),1LLU),_1116b7f10_KindPair(jule::Str("f64", 3),1LLU),_1116b7f10_KindPair(jule::Str("uint", 4),1LLU),_1116b7f10_KindPair(jule::Str("int", 3),1LLU),_1116b7f10_KindPair(jule::Str("uintptr", 7),1LLU),_1116b7f10_KindPair(jule::Str("bool", 4),1LLU),_1116b7f10_KindPair(jule::Str("str", 3),1LLU),_1116b7f10_KindPair(jule::Str("any", 3),1LLU),_1116b7f10_KindPair(jule::Str("true", 4),6LLU),_1116b7f10_KindPair(jule::Str("false", 5),6LLU),_1116b7f10_KindPair(jule::Str("nil", 3),6LLU),_1116b7f10_KindPair(jule::Str("const", 5),9LLU),_1116b7f10_KindPair(jule::Str("ret", 3),4LLU),_1116b7f10_KindPair(jule::Str("type", 4),10LLU),_1116b7f10_KindPair(jule::Str("for", 3),12LLU),_1116b7f10_KindPair(jule::Str("break", 5),13LLU),_1116b7f10_KindPair(jule::Str("continue", 8),14LLU),_1116b7f10_KindPair(jule::Str("in", 2),15LLU),_1116b7f10_KindPair(jule::Str("if", 2),16LLU),_1116b7f10_KindPair(jule::Str("else", 4),17LLU),_1116b7f10_KindPair(jule::Str("use", 3),19LLU),_1116b7f10_KindPair(jule::Str("pub", 3),21LLU),_1116b7f10_KindPair(jule::Str("goto", 4),22LLU),_1116b7f10_KindPair(jule::Str("enum", 4),24LLU),_1116b7f10_KindPair(jule::Str("struct", 6),25LLU),_1116b7f10_KindPair(jule::Str("co", 2),26LLU),_1116b7f10_KindPair(jule::Str("match", 5),27LLU),_1116b7f10_KindPair(jule::Str("self", 4),28LLU),_1116b7f10_KindPair(jule::Str("trait", 5),29LLU),_1116b7f10_KindPair(jule::Str("impl", 4),30LLU),_1116b7f10_KindPair(jule::Str("cpp", 3),31LLU),_1116b7f10_KindPair(jule::Str("fall", 4),32LLU),_1116b7f10_KindPair(jule::Str("fn", 2),33LLU),_1116b7f10_KindPair(jule::Str("let", 3),34LLU),_1116b7f10_KindPair(jule::Str("unsafe", 6),35LLU),_1116b7f10_KindPair(jule::Str("mut", 3),36LLU),_1116b7f10_KindPair(jule::Str("defer", 5),37LLU),_1116b7f10_KindPair(jule::Str("static", 6),38LLU)});
static jule::Array<_1116b7f10_KindPair,38> _1116b7f10_BASIC_OPS = jule::Array<_1116b7f10_KindPair,38>({_1116b7f10_KindPair(jule::Str("::", 2),23LLU),_1116b7f10_KindPair(jule::Str(":", 1),11LLU),_1116b7f10_KindPair(jule::Str(";", 1),5LLU),_1116b7f10_KindPair(jule::Str(",", 1),8LLU),_1116b7f10_KindPair(jule::Str("...", 3),7LLU),_1116b7f10_KindPair(jule::Str(".", 1),20LLU),_1116b7f10_KindPair(jule::Str("+=", 2),7LLU),_1116b7f10_KindPair(jule::Str("-=", 2),7LLU),_1116b7f10_KindPair(jule::Str("*=", 2),7LLU),_1116b7f10_KindPair(jule::Str("/=", 2),7LLU),_1116b7f10_KindPair(jule::Str("%=", 2),7LLU),_1116b7f10_KindPair(jule::Str("<<=", 3),7LLU),_1116b7f10_KindPair(jule::Str(">>=", 3),7LLU),_1116b7f10_KindPair(jule::Str("^=", 2),7LLU),_1116b7f10_KindPair(jule::Str("&=", 2),7LLU),_1116b7f10_KindPair(jule::Str("|=", 2),7LLU),_1116b7f10_KindPair(jule::Str("==", 2),7LLU),_1116b7f10_KindPair(jule::Str("!=", 2),7LLU),_1116b7f10_KindPair(jule::Str(">=", 2),7LLU),_1116b7f10_KindPair(jule::Str("<=", 2),7LLU),_1116b7f10_KindPair(jule::Str("&&", 2),7LLU),_1116b7f10_KindPair(jule::Str("||", 2),7LLU),_1116b7f10_KindPair(jule::Str("<<", 2),7LLU),_1116b7f10_KindPair(jule::Str(">>", 2),7LLU),_1116b7f10_KindPair(jule::Str("++", 2),7LLU),_1116b7f10_KindPair(jule::Str("--", 2),7LLU),_1116b7f10_KindPair(jule::Str("+", 1),7LLU),_1116b7f10_KindPair(jule::Str("-", 1),7LLU),_1116b7f10_KindPair(jule::Str("*", 1),7LLU),_1116b7f10_KindPair(jule::Str("/", 1),7LLU),_1116b7f10_KindPair(jule::Str("%", 1),7LLU),_1116b7f10_KindPair(jule::Str("&", 1),7LLU),_1116b7f10_KindPair(jule::Str("|", 1),7LLU),_1116b7f10_KindPair(jule::Str("^", 1),7LLU),_1116b7f10_KindPair(jule::Str("!", 1),7LLU),_1116b7f10_KindPair(jule::Str("<", 1),7LLU),_1116b7f10_KindPair(jule::Str(">", 1),7LLU),_1116b7f10_KindPair(jule::Str("=", 1),7LLU)});
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_OUT = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns());
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_OUTLN = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns());
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_NEW = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns());
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_DROP = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns());
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_PANIC = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns());
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_MAKE = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns());
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_APPEND = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns());
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_RECOVER = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns());
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_CLONE = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns());
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_STD_MEM_SIZE_OF = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns());
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_STD_MEM_ALIGN_OF = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns());
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_REAL = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>(),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),jule::Fn<jule::Ref<_121dedce0_Data>(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>)>(),jule::Bool(),jule::Bool()));
static jule::Ref<_112446fb0_FnIns> _1130606b0_BUILTIN_FN_COPY = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>(),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("int", 3)))),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),jule::Fn<jule::Ref<_121dedce0_Data>(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>)>(),jule::Bool(),jule::Bool()));
static jule::Ref<_1217f7750_TypeAlias> _1130606b0_BUILTIN_TYPE_ALIAS_BYTE = jule::new_struct<_1217f7750_TypeAlias>(new( std::nothrow ) _1217f7750_TypeAlias(jule::Ref<_111612b20_ScopeTree>(),true,jule::Bool(),jule::Bool(),_111613f20_Token(),jule::Str(),jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("u8", 2)))))),jule::Str(),jule::Slice<jule::Any>()));
static jule::Ref<_1217f7750_TypeAlias> _1130606b0_BUILTIN_TYPE_ALIAS_RUNE = jule::new_struct<_1217f7750_TypeAlias>(new( std::nothrow ) _1217f7750_TypeAlias(jule::Ref<_111612b20_ScopeTree>(),true,jule::Bool(),jule::Bool(),_111613f20_Token(),jule::Str(),jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i32", 3)))))),jule::Str(),jule::Slice<jule::Any>()));
static jule::Ref<_11209e2e0_Trait> _1130606b0_BUILTIN_TRAIT_ERROR = jule::new_struct<_11209e2e0_Trait>(new( std::nothrow ) _11209e2e0_Trait(_111613f20_Token(),jule::Str("Error", 5),true,jule::Str(),jule::Slice<jule::Ref<_112446fb0_Fn>>({jule::new_struct<_112446fb0_Fn>(new( std::nothrow ) _112446fb0_Fn(jule::Ref<_11262c360_Sema>(),_111613f20_Token(),jule::Bool(),jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str("error", 5),jule::Slice<jule::Ref<_111612b20_Directive>>(),jule::Str(),jule::Ref<_111612b20_ScopeTree>(),jule::Slice<jule::Ref<_111612b20_GenericDecl>>(),jule::new_struct<_112446fb0_RetType>(new( std::nothrow ) _112446fb0_RetType(jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_111613f20_Token(),jule::Any(jule::new_struct<_111612b20_IdentTypeDecl>(new( std::nothrow ) _111612b20_IdentTypeDecl(_111613f20_Token(),jule::Str("str", 3),jule::Bool(),jule::Slice<jule::Ref<_111612b20_TypeDecl>>()))))),jule::Ref<_1217f7750_TypeKind>())),jule::Slice<_111613f20_Token>())),jule::Slice<jule::Ref<_112446fb0_Param>>({jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("self", 4)))}),jule::Ref<_11209db80_Struct>(),jule::Slice<jule::Ref<_112446fb0_FnIns>>()))}),jule::Slice<jule::Ref<_11209db80_Struct>>()));
static jule::Slice<jule::Str> _122082160_FLAGS = nullptr;
static jule::Slice<jule::Any> _131692a90_deads = nullptr;
static jule::Slice<jule::Any> _131692a90_checking = nullptr;
static jule::Any _131692a90_current = jule::Any(nullptr);
static jule::Any _131692a90_main_current = jule::Any(nullptr);
static jule::Slice<jule::Str> _1219d92f0_OPTIMIZATIONS = nullptr;
static jule::U64 _113497500_INDENT = 0LLU;

inline jule::U8 _131739f50_LazyBuff::_method_index(jule::Int _5324_i) {
	if ((*this)._field_buff != nullptr) {
		return (*this)._field_buff[static_cast<jule::Int>(_5324_i)];
	}
	return (*this)._field_path[static_cast<jule::Int>(_5324_i)];
}



inline void _131739f50_LazyBuff::_method_append(jule::U8 _6025_c) {
	if ((*this)._field_buff == nullptr) {
		if (((*this)._field_w < (*this)._field_path.len()) && ((*this)._field_path[static_cast<jule::Int>((*this)._field_w)] == _6025_c)) {
			((*this)._field_w)++;
			return;
		}
		(*this)._field_buff=jule::Slice<jule::U8>::alloc(static_cast<jule::Int>(static_cast<jule::I64>((*this)._field_path.len())));
		copy((*this)._field_buff,static_cast<jule::Slice<jule::U8>>((*this)._field_path.slice(0LL,static_cast<jule::Int>((*this)._field_w))));
	}
	(*this)._field_buff[static_cast<jule::Int>((*this)._field_w)]=_6025_c;
	((*this)._field_w)++;
}



inline jule::Str _131739f50_LazyBuff::_method_string(void) {
	if ((*this)._field_buff == nullptr) {
		return (*this)._field_vol_and_path.slice(0LL,static_cast<jule::Int>((*this)._field_vol_len + (*this)._field_w));
	}
	return (*this)._field_vol_and_path.slice(0LL,static_cast<jule::Int>((*this)._field_vol_len)) + static_cast<jule::Str>((*this)._field_buff.slice(0LL,static_cast<jule::Int>((*this)._field_w)));
}







std::ostream &operator<<(std::ostream &_Stream, const _131739f50_LazyBuff &_Src) {
	_Stream << "LazyBuff{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "buff:" << _Src._field_buff << ", ";
	_Stream << "w:" << _Src._field_w << ", ";
	_Stream << "vol_and_path:" << _Src._field_vol_and_path << ", ";
	_Stream << "vol_len:" << _Src._field_vol_len;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _121ef75f0_bits_error::_method_error(void) {
	return jule::Str("runtime error: ", 15) + (*this)._field_message;
}







std::ostream &operator<<(std::ostream &_Stream, const _121ef75f0_bits_error &_Src) {
	_Stream << "bits_error{";
	_Stream << "message:" << _Src._field_message;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _131769b70_FloatInfo &_Src) {
	_Stream << "FloatInfo{";
	_Stream << "mantbits:" << _Src._field_mantbits << ", ";
	_Stream << "expbits:" << _Src._field_expbits << ", ";
	_Stream << "bias:" << _Src._field_bias;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _131769b70_DecimalSlice &_Src) {
	_Stream << "DecimalSlice{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _13207af00_LeftCheat &_Src) {
	_Stream << "LeftCheat{";
	_Stream << "delta:" << _Src._field_delta << ", ";
	_Stream << "cutoff:" << _Src._field_cutoff;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _13207af00_Decimal::_method_set(jule::Str _22922_s) {
	jule::Bool _22932_ok = jule::Bool();
	jule::Int _23017_i = 0LL;
	(*this)._field_neg=false;
	(*this)._field_trunc=false;
	if (_23017_i >= _22922_s.len()) {
		return _22932_ok;
	}
	{
		if (!((_22922_s[static_cast<jule::Int>(_23017_i)] == '+'))) { goto _case_end_4625588016; }
		_case_begin_4625588016:;
		{
			(_23017_i)++;
		}
		goto _match_end_4625589072;
		_case_end_4625588016:;
		if (!((_22922_s[static_cast<jule::Int>(_23017_i)] == '-'))) { goto _case_end_4625588128; }
		_case_begin_4625588128:;
		{
			(*this)._field_neg=true;
			(_23017_i)++;
		}
		goto _match_end_4625589072;
		_case_end_4625588128:;
		_match_end_4625589072:;
	}
	jule::Bool _24717_sawdot = false;
	jule::Bool _24817_sawdigits = false;
	_iter_begin_4625594864:;
	if (!(_23017_i < _22922_s.len())) { goto _iter_end_4625594864; }
	{
		{
			if (!((_22922_s[static_cast<jule::Int>(_23017_i)] == '.'))) { goto _case_end_4625596656; }
			_case_begin_4625596656:;
			{
				if (_24717_sawdot) {
					return _22932_ok;
				}
				_24717_sawdot=true;
				(*this)._field_dp=(*this)._field_nd;
				goto _iter_next_4625594864;
			}
			goto _match_end_4625596416;
			_case_end_4625596656:;
			if (!((('0' <= _22922_s[static_cast<jule::Int>(_23017_i)]) && (_22922_s[static_cast<jule::Int>(_23017_i)] <= '9')))) { goto _case_end_4625596768; }
			_case_begin_4625596768:;
			{
				_24817_sawdigits=true;
				if ((_22922_s[static_cast<jule::Int>(_23017_i)] == '0') && ((*this)._field_nd == 0LL)) {
					((*this)._field_dp)--;
					goto _iter_next_4625594864;
				}
				if ((*this)._field_nd < 800LL) {
					(*this)._field_d[static_cast<jule::Int>((*this)._field_nd)]=_22922_s[static_cast<jule::Int>(_23017_i)];
					((*this)._field_nd)++;
				} else if (_22922_s[static_cast<jule::Int>(_23017_i)] != '0') {
					(*this)._field_trunc=true;
				}
				goto _iter_next_4625594864;
			}
			goto _match_end_4625596416;
			_case_end_4625596768:;
			_match_end_4625596416:;
		}
		goto _iter_end_4625594864;
	}
	_iter_next_4625594864:;
	(_23017_i)++;
	goto _iter_begin_4625594864;
	_iter_end_4625594864:;
	if ((!(_24817_sawdigits))) {
		return _22932_ok;
	}
	if ((!(_24717_sawdot))) {
		(*this)._field_dp=(*this)._field_nd;
	}
	if ((_23017_i < _22922_s.len()) && (_13219c810_lower(_22922_s[static_cast<jule::Int>(_23017_i)]) == 'e')) {
		(_23017_i)++;
		if (_23017_i >= _22922_s.len()) {
			return _22932_ok;
		}
		jule::Int _29121_esign = 1LL;
		if (_22922_s[static_cast<jule::Int>(_23017_i)] == '+') {
			(_23017_i)++;
		} else if (_22922_s[static_cast<jule::Int>(_23017_i)] == '-') {
			(_23017_i)++;
			_29121_esign=-1LL;
		}
		if (((_23017_i >= _22922_s.len()) || (_22922_s[static_cast<jule::Int>(_23017_i)] < '0')) || (_22922_s[static_cast<jule::Int>(_23017_i)] > '9')) {
			return _22932_ok;
		}
		jule::Int _30121_e = 0LL;
		_iter_begin_4625623296:;
		if (!((_23017_i < _22922_s.len()) && (('0' <= _22922_s[static_cast<jule::Int>(_23017_i)]) && (_22922_s[static_cast<jule::Int>(_23017_i)] <= '9')))) { goto _iter_end_4625623296; }
		{
			if (_30121_e < 10000LL) {
				_30121_e=((_30121_e * 10LL) + static_cast<jule::Int>(_22922_s[static_cast<jule::Int>(_23017_i)])) - '0';
			}
		}
		_iter_next_4625623296:;
		(_23017_i)++;
		goto _iter_begin_4625623296;
		_iter_end_4625623296:;
		(*this)._field_dp+=_30121_e * _29121_esign;
	}
	if (_23017_i != _22922_s.len()) {
		return _22932_ok;
	}
	_22932_ok=true;
	return _22932_ok;
}



inline std::tuple<jule::U64,jule::Bool> _13207af00_Decimal::_method_float_bits(_131769b70_FloatInfo& _31830_flt) {
	jule::Bool _31856_overflow = jule::Bool();
	jule::U64 _31848_b = jule::U64();
	jule::Int _31917_exp = 0LL;
	jule::U64 _32017_mant = 0LLU;
	if ((*this)._field_nd == 0LL) {
		_32017_mant=0LL;
		_31917_exp=_31830_flt._field_bias;
		goto _julec_label_out;
	}
	if ((*this)._field_dp > 310LL) {
		goto _julec_label_overflow;
	}
	if ((*this)._field_dp < -330LL) {
		_32017_mant=0LL;
		_31917_exp=_31830_flt._field_bias;
		goto _julec_label_out;
	}
	_31917_exp=0LL;
	_iter_begin_4625645648:;
	if (!((*this)._field_dp > 0LL)) { goto _iter_end_4625645648; }
	{
		jule::Int _34521_n = 0LL;
		if ((*this)._field_dp >= _1320824b0_POWTAB.len()) {
			_34521_n=27LL;
		} else {
			_34521_n=_1320824b0_POWTAB[static_cast<jule::Int>((*this)._field_dp)];
		}
		(*this)._method_shift(static_cast<jule::Int>((-(_34521_n))));
		_31917_exp+=_34521_n;
	}
	_iter_next_4625645648:;
	goto _iter_begin_4625645648;
	_iter_end_4625645648:;
	_iter_begin_4625658512:;
	if (!(((*this)._field_dp < 0LL) || (((*this)._field_dp == 0LL) && ((*this)._field_d[static_cast<jule::Int>(0LL)] < '5')))) { goto _iter_end_4625658512; }
	{
		jule::Int _35521_n = 0LL;
		if ((-((*this)._field_dp)) >= _1320824b0_POWTAB.len()) {
			_35521_n=27LL;
		} else {
			_35521_n=_1320824b0_POWTAB[static_cast<jule::Int>((-((*this)._field_dp)))];
		}
		(*this)._method_shift(_35521_n);
		_31917_exp-=_35521_n;
	}
	_iter_next_4625658512:;
	goto _iter_begin_4625658512;
	_iter_end_4625658512:;
	(_31917_exp)--;
	if (_31917_exp < (_31830_flt._field_bias + 1LL)) {
		jule::Int _37217_n = (_31830_flt._field_bias + 1LL) - _31917_exp;
		(*this)._method_shift(static_cast<jule::Int>((-(_37217_n))));
		_31917_exp+=_37217_n;
	}
	if ((_31917_exp - _31830_flt._field_bias) >= ((1LL << _31830_flt._field_expbits) - 1LL)) {
		goto _julec_label_overflow;
	}
	(*this)._method_shift(static_cast<jule::Int>(1LL + _31830_flt._field_mantbits));
	_32017_mant=static_cast<jule::U64>((*this)._method_rounded_integer());
	if (_32017_mant == (2LL << _31830_flt._field_mantbits)) {
		_32017_mant>>=1LL;
		(_31917_exp)++;
		if ((_31917_exp - _31830_flt._field_bias) >= ((1LL << _31830_flt._field_expbits) - 1LL)) {
			goto _julec_label_overflow;
		}
	}
	if ((_32017_mant & (1LL << _31830_flt._field_mantbits)) == 0LL) {
		_31917_exp=_31830_flt._field_bias;
	}
	goto _julec_label_out;
	_julec_label_overflow:;
	_32017_mant=0LL;
	_31917_exp=static_cast<jule::Int>(((1LL << _31830_flt._field_expbits) - 1LL) + _31830_flt._field_bias);
	_31856_overflow=true;
	_julec_label_out:;
	jule::U64 _40817_bits = _32017_mant & ((static_cast<jule::U64>(1LLU) << _31830_flt._field_mantbits) - 1LL);
	_40817_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_31917_exp - _31830_flt._field_bias) & ((1LL << _31830_flt._field_expbits) - 1LL)) << _31830_flt._field_mantbits);
	if ((*this)._field_neg) {
		_40817_bits|=static_cast<jule::Int>((1LL << _31830_flt._field_mantbits) << _31830_flt._field_expbits);
	}
	_31848_b = _40817_bits;
	_31856_overflow = _31856_overflow;
	return std::make_tuple(_31848_b,_31856_overflow);
}



inline void _13207af00_Decimal::_method_assign(jule::U64 _15229_v) {
	jule::Array<jule::U8,24> _15317_buf = jule::Array<jule::U8,24>({});
	jule::Int _15617_n = 0LL;
	_iter_begin_4625703520:;
	if (!(_15229_v > 0LL)) { goto _iter_end_4625703520; }
	{
		jule::U64 _15817_v1 = jule::div(_15229_v,10LL);
		_15229_v-=static_cast<jule::U64>(10LL * _15817_v1);
		_15317_buf[static_cast<jule::Int>(_15617_n)]=static_cast<jule::U8>(_15229_v + '0');
		(_15617_n)++;
		_15229_v=_15817_v1;
	}
	_iter_next_4625703520:;
	goto _iter_begin_4625703520;
	_iter_end_4625703520:;
	(*this)._field_nd=0LL;
	(_15617_n)--;
	_iter_begin_4625707664:;
	if (!(_15617_n >= 0LL)) { goto _iter_end_4625707664; }
	{
		(*this)._field_d[static_cast<jule::Int>((*this)._field_nd)]=_15317_buf[static_cast<jule::Int>(_15617_n)];
		((*this)._field_nd)++;
	}
	_iter_next_4625707664:;
	(_15617_n)--;
	goto _iter_begin_4625707664;
	_iter_end_4625707664:;
	(*this)._field_dp=(*this)._field_nd;
	_13207af00_trim((*this));
}



inline void _13207af00_Decimal::_method_shift(jule::Int _17728_k) {
	{
		if (!(((*this)._field_nd == 0LL))) { goto _case_end_4625716640; }
		goto _match_end_4625716368;
		_case_end_4625716640:;
		if (!((_17728_k > 0LL))) { goto _case_end_4625716752; }
		_case_begin_4625716752:;
		{
			_iter_begin_4625719424:;
			if (!(_17728_k > 60LL)) { goto _iter_end_4625719424; }
			{
				_13207af00_left_shift((*this),60LLU);
				_17728_k-=60LL;
			}
			_iter_next_4625719424:;
			goto _iter_begin_4625719424;
			_iter_end_4625719424:;
			_13207af00_left_shift((*this),static_cast<jule::Uint>(_17728_k));
		}
		goto _match_end_4625716368;
		_case_end_4625716752:;
		if (!((_17728_k < 0LL))) { goto _case_end_4625716864; }
		_case_begin_4625716864:;
		{
			_iter_begin_4625718896:;
			if (!(_17728_k < -60LL)) { goto _iter_end_4625718896; }
			{
				_13207af00_right_shift((*this),60LLU);
				_17728_k+=60LL;
			}
			_iter_next_4625718896:;
			goto _iter_begin_4625718896;
			_iter_end_4625718896:;
			_13207af00_right_shift((*this),static_cast<jule::Uint>((-(_17728_k))));
		}
		goto _match_end_4625716368;
		_case_end_4625716864:;
		_match_end_4625716368:;
	}
}



inline void _13207af00_Decimal::_method_round_down(jule::Int _19729_nd) {
	if ((_19729_nd < 0LL) || (_19729_nd >= (*this)._field_nd)) {
		return;
	}
	(*this)._field_nd=_19729_nd;
	_13207af00_trim((*this));
}



inline void _13207af00_Decimal::_method_round_up(jule::Int _20627_nd) {
	if ((_20627_nd < 0LL) || (_20627_nd >= (*this)._field_nd)) {
		return;
	}
	jule::Int _21217_i = _20627_nd - 1LL;
	_iter_begin_4625734272:;
	if (!(_21217_i >= 0LL)) { goto _iter_end_4625734272; }
	{
		jule::U8 _21417_c = (*this)._field_d[static_cast<jule::Int>(_21217_i)];
		if (_21417_c < '9') {
			((*this)._field_d[static_cast<jule::Int>(_21217_i)])++;
			(*this)._field_nd=_21217_i + 1LL;
			return;
		}
	}
	_iter_next_4625734272:;
	(_21217_i)--;
	goto _iter_begin_4625734272;
	_iter_end_4625734272:;
	(*this)._field_d[static_cast<jule::Int>(0LL)]='1';
	(*this)._field_nd=1LL;
	((*this)._field_dp)++;
}



inline void _13207af00_Decimal::_method_round(jule::Int _23324_nd) {
	if ((_23324_nd < 0LL) || (_23324_nd >= (*this)._field_nd)) {
		return;
	}
	if (_13207af00_should_round_up((*this),_23324_nd)) {
		(*this)._method_round_up(_23324_nd);
	} else {
		(*this)._method_round_down(_23324_nd);
	}
}



inline jule::U64 _13207af00_Decimal::_method_rounded_integer(void) {
	if ((*this)._field_dp > 20LL) {
		return jule::MAX_U64;
	}
	jule::Int _25017_i = 0LL;
	jule::U64 _25117_n = 0LLU;
	_iter_begin_4625754032:;
	if (!((_25017_i < (*this)._field_dp) && (_25017_i < (*this)._field_nd))) { goto _iter_end_4625754032; }
	{
		_25117_n=(_25117_n * 10LL) + static_cast<jule::U64>((*this)._field_d[static_cast<jule::Int>(_25017_i)] - '0');
	}
	_iter_next_4625754032:;
	(_25017_i)++;
	goto _iter_begin_4625754032;
	_iter_end_4625754032:;
	_iter_begin_4625755760:;
	if (!(_25017_i < (*this)._field_dp)) { goto _iter_end_4625755760; }
	{
		_25117_n*=10LL;
	}
	_iter_next_4625755760:;
	(_25017_i)++;
	goto _iter_begin_4625755760;
	_iter_end_4625755760:;
	if (_13207af00_should_round_up((*this),(*this)._field_dp)) {
		(_25117_n)++;
	}
	return _25117_n;
}







std::ostream &operator<<(std::ostream &_Stream, const _13207af00_Decimal &_Src) {
	_Stream << "Decimal{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "trunc:" << _Src._field_trunc;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1316b4080_Log::_method_flat(void) {
	return (*this)._field_text;
}



inline jule::Str _1316b4080_Log::_method_error(void) {
	jule::Str _2817_log = jule::Str("", 0);
	_2817_log+=(*this)._field_path;
	_2817_log+=jule::Str(":", 1);
	_2817_log+=_121837910_itoa((*this)._field_row);
	_2817_log+=jule::Str(":", 1);
	_2817_log+=_121837910_itoa((*this)._field_column);
	_2817_log+=jule::Str(" ", 1);
	_2817_log+=(*this)._field_text;
	return _2817_log;
}



inline jule::Str _1316b4080_Log::_method_to_str(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!((0LLU) == _match_expr)) { goto _case_end_4626119712; }
		_case_begin_4626119712:;
		{
			return (*this)._method_flat();
		}
		goto _match_end_4626109616;
		_case_end_4626119712:;
		if (!((1LLU) == _match_expr)) { goto _case_end_4626119824; }
		_case_begin_4626119824:;
		{
			return (*this)._method_error();
		}
		goto _match_end_4626109616;
		_case_end_4626119824:;
		_case_begin_4626118672:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4626109616;
		_case_end_4626118672:;
		_match_end_4626109616:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1316b4080_Log &_Src) {
	_Stream << "Log{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1220df4b0_DirEntry &_Src) {
	_Stream << "DirEntry{";
	_Stream << "name:" << _Src._field_name << ", ";
	_Stream << "stat:" << _Src._field_stat;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::I64,jule::Int> _1220de8f0_File::_method_seek(jule::I64 _5527_offset,jule::Int _5540_origin) {
	jule::I64 _5613_pos = _1317a9f00_seek((*this)._field_handle,_5527_offset,static_cast<jule::Int>(_5540_origin));
	return std::make_tuple(_5613_pos,0LLU);
}



inline std::tuple<jule::Int,jule::Int> _1220de8f0_File::_method_read(jule::Slice<jule::U8> _7031_buff) {
	jule::Int _7047_n = jule::Int();
	if (_7031_buff.len() == 0LL) {
		_7047_n = 0LL;
		return std::make_tuple(_7047_n,0LLU);
	}
	_7047_n=static_cast<jule::Int>(static_cast<jule::Int>(_1317a9f00_read((*this)._field_handle,(&(_7031_buff[static_cast<jule::Int>(0LL)])),static_cast<jule::Uint>(_7031_buff.len()))));
	if (_7047_n == -1LL) {
		_7047_n=0LL;
		_7047_n = _7047_n;
		return std::make_tuple(_7047_n,_1220ca200_get_last_fs_error());
	}
	_7047_n = _7047_n;
	return std::make_tuple(_7047_n,0LLU);
}



inline std::tuple<jule::Int,jule::Int> _1220de8f0_File::_method_write(jule::Slice<jule::U8> _8928_buff) {
	jule::Int _8944_n = jule::Int();
	if (_8928_buff.len() == 0LL) {
		_8944_n = 0LL;
		return std::make_tuple(_8944_n,0LLU);
	}
	_8944_n=static_cast<jule::Int>(static_cast<jule::Int>(_1317a9f00_write((*this)._field_handle,(&(_8928_buff[static_cast<jule::Int>(0LL)])),static_cast<jule::Uint>(_8928_buff.len()))));
	if (_8944_n == -1LL) {
		_8944_n=0LL;
		_8944_n = _8944_n;
		return std::make_tuple(_8944_n,_1220ca200_get_last_fs_error());
	}
	_8944_n = _8944_n;
	return std::make_tuple(_8944_n,0LLU);
}



inline jule::Int _1220de8f0_File::_method_close(void) {
	if (_1317a9f00_close((*this)._field_handle) == -1LL) {
		return _1220ca200_get_last_fs_error();
	}
	return 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _1220de8f0_File &_Src) {
	_Stream << "File{";
	_Stream << "handle:" << _Src._field_handle;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1220d93f0_Status::_method_is_dir(void) {
	return ((*this)._field_mode & 16384LL) == 16384LL;
}



inline jule::Bool _1220d93f0_Status::_method_is_reg(void) {
	return ((*this)._field_mode & 32768LL) == 32768LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _1220d93f0_Status &_Src) {
	_Stream << "Status{";
	_Stream << "mode:" << _Src._field_mode << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1220fe860_accept_range &_Src) {
	_Stream << "accept_range{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi;
	_Stream << "}";
	return _Stream;
}



inline jule::Int _111613f20_Token::_method_prec(void) {
	if ((*this)._field_id != 7LLU) {
		return -1LL;
	}
	{
		auto _match_expr{ (*this)._field_kind };
		if (!((jule::Str("*", 1)) == _match_expr || (jule::Str("%", 1)) == _match_expr || (jule::Str("/", 1)) == _match_expr || (jule::Str(">>", 2)) == _match_expr || (jule::Str("<<", 2)) == _match_expr || (jule::Str("&", 1)) == _match_expr)) { goto _case_end_4627581296; }
		_case_begin_4627581296:;
		{
			return 5LL;
		}
		goto _match_end_4627577872;
		_case_end_4627581296:;
		if (!((jule::Str("+", 1)) == _match_expr || (jule::Str("-", 1)) == _match_expr || (jule::Str("|", 1)) == _match_expr || (jule::Str("^", 1)) == _match_expr)) { goto _case_end_4627581408; }
		_case_begin_4627581408:;
		{
			return 4LL;
		}
		goto _match_end_4627577872;
		_case_end_4627581408:;
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("=", 1)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str("<=", 2)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str(">=", 2)) == _match_expr)) { goto _case_end_4627579552; }
		_case_begin_4627579552:;
		{
			return 3LL;
		}
		goto _match_end_4627577872;
		_case_end_4627579552:;
		if (!((jule::Str("&&", 2)) == _match_expr)) { goto _case_end_4627579664; }
		_case_begin_4627579664:;
		{
			return 2LL;
		}
		goto _match_end_4627577872;
		_case_end_4627579664:;
		if (!((jule::Str("||", 2)) == _match_expr)) { goto _case_end_4627579776; }
		_case_begin_4627579776:;
		{
			return 1LL;
		}
		goto _match_end_4627577872;
		_case_end_4627579776:;
		_case_begin_4627576800:;
		{
			return -1LL;
		}
		goto _match_end_4627577872;
		_case_end_4627576800:;
		_match_end_4627577872:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _111613f20_Token &_Src) {
	_Stream << "Token{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1116b7f10_KindPair &_Src) {
	_Stream << "KindPair{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_CommentGroup &_Src) {
	_Stream << "CommentGroup{";
	_Stream << "comments:" << _Src._field_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_NamespaceTypeDecl &_Src) {
	_Stream << "NamespaceTypeDecl{";
	_Stream << "idents:" << _Src._field_idents << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_RefTypeDecl &_Src) {
	_Stream << "RefTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_SlcTypeDecl &_Src) {
	_Stream << "SlcTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_TupleTypeDecl &_Src) {
	_Stream << "TupleTypeDecl{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_PtrTypeDecl::_method_is_unsafe(void) {
	return (!(jule::real((*this)._field_elem)));
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_PtrTypeDecl &_Src) {
	_Stream << "PtrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_ArrTypeDecl::_method_auto_sized(void) {
	return (!(jule::real((*this)._field_size)));
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_ArrTypeDecl &_Src) {
	_Stream << "ArrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_MapTypeDecl &_Src) {
	_Stream << "MapTypeDecl{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_RetTypeDecl &_Src) {
	_Stream << "RetTypeDecl{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_TupleExpr &_Src) {
	_Stream << "TupleExpr{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_LitExpr::_method_is_nil(void) {
	return (*this)._field_value == jule::Str("nil", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_LitExpr &_Src) {
	_Stream << "LitExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_UnsafeExpr &_Src) {
	_Stream << "UnsafeExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_IdentExpr::_method_is_self(void) {
	return (*this)._field_ident == jule::Str("self", 4);
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_IdentExpr &_Src) {
	_Stream << "IdentExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_UnaryExpr &_Src) {
	_Stream << "UnaryExpr{";
	_Stream << "op:" << _Src._field_op << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_VariadicExpr &_Src) {
	_Stream << "VariadicExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_CastExpr &_Src) {
	_Stream << "CastExpr{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_NsSelectionExpr &_Src) {
	_Stream << "NsSelectionExpr{";
	_Stream << "ns:" << _Src._field_ns << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_SubIdentExpr &_Src) {
	_Stream << "SubIdentExpr{";
	_Stream << "is_self:" << _Src._field_is_self << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_BinopExpr &_Src) {
	_Stream << "BinopExpr{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_FieldExprPair::_method_is_targeted(void) {
	return (*this)._field_field._field_id != 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_FieldExprPair &_Src) {
	_Stream << "FieldExprPair{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_StructLit &_Src) {
	_Stream << "StructLit{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_BraceLit::_method_is_empty(void) {
	return (*this)._field_exprs.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_BraceLit &_Src) {
	_Stream << "BraceLit{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_KeyValPair &_Src) {
	_Stream << "KeyValPair{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val << ", ";
	_Stream << "colon:" << _Src._field_colon;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_SliceExpr::_method_is_empty(void) {
	return (*this)._field_elems.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_SliceExpr &_Src) {
	_Stream << "SliceExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_IndexingExpr &_Src) {
	_Stream << "IndexingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_SlicingExpr &_Src) {
	_Stream << "SlicingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "start:" << _Src._field_start << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_LabelSt &_Src) {
	_Stream << "LabelSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "token:" << _Src._field_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_AssignSt &_Src) {
	_Stream << "AssignSt{";
	_Stream << "declarative:" << _Src._field_declarative << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_ScopeTree &_Src) {
	_Stream << "ScopeTree{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_Iter::_method_is_inf(void) {
	return (*this)._field_kind == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_Iter &_Src) {
	_Stream << "Iter{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_WhileKind::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_WhileKind &_Src) {
	_Stream << "WhileKind{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "next_token:" << _Src._field_next_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_RangeKind &_Src) {
	_Stream << "RangeKind{";
	_Stream << "in_token:" << _Src._field_in_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "head:" << _Src._field_head << ", ";
	_Stream << "tail:" << _Src._field_tail << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_MatchCase &_Src) {
	_Stream << "MatchCase{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11166e240_FileInfo &_Src) {
	_Stream << "FileInfo{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11166e240_PackageInfo &_Src) {
	_Stream << "PackageInfo{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11167f570_Stmt &_Src) {
	_Stream << "Stmt{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "terminated:" << _Src._field_terminated;
	_Stream << "}";
	return _Stream;
}



inline void _11167f570_ScopeParser::_method_stop(void) {
	(*this)._field_pos=-1LL;
}



inline jule::Bool _11167f570_ScopeParser::_method_stopped(void) {
	return (*this)._field_pos == -1LL;
}



inline jule::Bool _11167f570_ScopeParser::_method_finished(void) {
	return (*this)._field_pos >= (*this)._field_stms.len();
}



inline jule::Bool _11167f570_ScopeParser::_method_is_last_st(void) {
	return ((*this)._field_pos + 1LL) >= (*this)._field_stms.len();
}



inline void _11167f570_ScopeParser::_method_push_err(_111613f20_Token _15827_token,jule::Str _15841_key) {
	(*this)._field_p->_method_push_err(_15827_token,_15841_key,jule::Slice<jule::Any>({}));
}



inline void _11167f570_ScopeParser::_method_insert_as_next(jule::Slice<_111613f20_Token> _16037_tokens) {
	(*this)._field_stms=append((*this)._field_stms.slice(0LL,static_cast<jule::Int>((*this)._field_pos + 1LL)),(*this)._field_stms.slice(static_cast<jule::Int>((*this)._field_pos)));
	(*this)._field_stms[static_cast<jule::Int>((*this)._field_pos + 1LL)]=jule::new_struct<_11167f570_Stmt>(new( std::nothrow ) _11167f570_Stmt(_16037_tokens,jule::Bool()));
}



inline jule::Ref<_11167f570_Stmt> _11167f570_ScopeParser::_method_next(void) {
	((*this)._field_pos)++;
	return (*this)._field_stms[static_cast<jule::Int>((*this)._field_pos)];
}



inline jule::Ref<_111612b20_ScopeTree> _11167f570_ScopeParser::_method_build_scope(jule::Slice<_111613f20_Token> _17034_tokens) {
	jule::Ref<_111612b20_ScopeTree> _17117_s = _11167f570_new_scope();
	_17117_s->_field_parent=(*this)._field_s;
	_11167f570_ScopeParser _17317_ssp = _11167f570_ScopeParser((*this)._field_p,jule::Ref<_111612b20_ScopeTree>(),jule::Slice<jule::Ref<_11167f570_Stmt>>(),jule::Int());
	_17317_ssp._method_build(_17034_tokens,_17117_s);
	return _17117_s;
}



inline jule::Any _11167f570_ScopeParser::_method_build_var_st(jule::Slice<_111613f20_Token> _18035_tokens) {
	jule::Ref<_111612b20_VarDecl> _18117_v = (*this)._field_p->_method_build_var(_18035_tokens);
	_18117_v->_field_scope=(*this)._field_s;
	return jule::Any(_18117_v);
}



inline jule::Any _11167f570_ScopeParser::_method_build_ret_st(jule::Slice<_111613f20_Token> _18635_tokens) {
	jule::Ref<_111612b20_RetSt> _18717_st = jule::new_struct<_111612b20_RetSt>(new( std::nothrow ) _111612b20_RetSt(_18635_tokens[static_cast<jule::Int>(0LL)],jule::Ref<_111612b20_Expr>()));
	if (_18635_tokens.len() > 1LL) {
		_18635_tokens=_18635_tokens.slice(static_cast<jule::Int>(1LL));
		_18717_st->_field_expr=(*this)._field_p->_method_build_expr(_18635_tokens);
	}
	return jule::Any(_18717_st);
}



inline jule::Any _11167f570_ScopeParser::_method_build_while_next_iter(jule::Ref<_11167f570_Stmt> _19744_s) {
	jule::Ref<_111612b20_Iter> _19817_it = jule::new_struct<_111612b20_Iter>(new( std::nothrow ) _111612b20_Iter(_19744_s->_field_tokens[static_cast<jule::Int>(0LL)],jule::Any(),jule::Ref<_111612b20_ScopeTree>()));
	jule::Slice<_111613f20_Token> _20117_tokens = _19744_s->_field_tokens.slice(static_cast<jule::Int>(1LL));
	jule::Ref<_111612b20_WhileKind> _20217_kind = jule::new_struct<_111612b20_WhileKind>(new( std::nothrow ) _111612b20_WhileKind());
	if (_20117_tokens.len() > 0LL) {
		_20217_kind->_field_expr=(*this)._field_p->_method_build_expr(_20117_tokens);
	}
	if ((*this)._method_is_last_st()) {
		(*this)._method_push_err(_19817_it->_field_token,jule::Str("invalid_syntax", 14));
		return jule::Any(nullptr);
	}
	_20117_tokens=(*this)._method_next()->_field_tokens;
	jule::Slice<_111613f20_Token> _21417_st_tokens = _112190570_get_block_expr(_20117_tokens);
	if (_21417_st_tokens.len() > 0LL) {
		jule::Ref<_11167f570_Stmt> _21621_s = jule::new_struct<_11167f570_Stmt>(new( std::nothrow ) _11167f570_Stmt(_21417_st_tokens,_19744_s->_field_terminated));
		_20217_kind->_field_next_token=_21417_st_tokens[static_cast<jule::Int>(0LL)];
		_20217_kind->_field_next=(*this)._method_build_st(_21621_s);
	}
	jule::I64 _22417_i = _21417_st_tokens.len();
	jule::Slice<_111613f20_Token> _22517_block_tokens = _111681860_range(_22417_i,jule::Str("{", 1),jule::Str("}", 1),_20117_tokens);
	if (_22517_block_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_19817_it->_field_token,jule::Str("body_not_exist", 14));
		return jule::Any(nullptr);
	}
	if (_22417_i < _20117_tokens.len()) {
		(*this)._method_push_err(_20117_tokens[static_cast<jule::Int>(_22417_i)],jule::Str("invalid_syntax", 14));
	}
	_19817_it->_field_scope=(*this)._method_build_scope(_22517_block_tokens);
	_19817_it->_field_kind=jule::Any(_20217_kind);
	return jule::Any(_19817_it);
}



inline jule::Ref<_111612b20_WhileKind> _11167f570_ScopeParser::_method_build_while_iter_kind(jule::Slice<_111613f20_Token> _24144_tokens) {
	return jule::new_struct<_111612b20_WhileKind>(new( std::nothrow ) _111612b20_WhileKind((*this)._field_p->_method_build_expr(_24144_tokens),jule::Any(),_111613f20_Token()));
}



inline jule::Slice<jule::Slice<_111613f20_Token>> _11167f570_ScopeParser::_method_get_range_kind_keys_tokens(jule::Slice<_111613f20_Token> _24749_toks) {
	jule::Slice<jule::Slice<_111613f20_Token>> _24818_vars;
	jule::Slice<_1316b4080_Log> _24824_errs;
	std::tie(_24818_vars,_24824_errs) = _111681860_parts(_24749_toks,8LLU,true);
	(*this)._field_p->_field_errors=append((*this)._field_p->_field_errors,_24824_errs);
	return _24818_vars;
}



inline jule::Ref<_111612b20_VarDecl> _11167f570_ScopeParser::_method_build_range_kind_key(jule::Slice<_111613f20_Token> _25343_tokens) {
	if (_25343_tokens.len() == 0LL) {
		return jule::new_ref<_111612b20_VarDecl>();
	}
	jule::Ref<_111612b20_VarDecl> _25717_key = jule::new_struct<_111612b20_VarDecl>(new( std::nothrow ) _111612b20_VarDecl(jule::Ref<_111612b20_ScopeTree>(),_25343_tokens[static_cast<jule::Int>(0LL)],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_111612b20_CommentGroup>(),jule::Ref<_111612b20_TypeDecl>(),jule::Ref<_111612b20_Expr>()));
	if (_25717_key->_field_token._field_id == 36LLU) {
		_25717_key->_field_mutable=true;
		if (_25343_tokens.len() == 1LL) {
			(*this)._method_push_err(_25717_key->_field_token,jule::Str("invalid_syntax", 14));
		}
		_25717_key->_field_token=_25343_tokens[static_cast<jule::Int>(1LL)];
	} else if (_25343_tokens.len() > 1LL) {
		(*this)._method_push_err(_25343_tokens[static_cast<jule::Int>(1LL)],jule::Str("invalid_syntax", 14));
	}
	if (_25717_key->_field_token._field_id != 2LLU) {
		(*this)._method_push_err(_25717_key->_field_token,jule::Str("invalid_syntax", 14));
		return jule::new_ref<_111612b20_VarDecl>();
	}
	_25717_key->_field_ident=_25717_key->_field_token._field_kind;
	return _25717_key;
}



inline jule::Slice<jule::Ref<_111612b20_VarDecl>> _11167f570_ScopeParser::_method_build_range_kind_keys(jule::Slice<jule::Slice<_111613f20_Token>> _27744_parts) {
	jule::Slice<jule::Ref<_111612b20_VarDecl>> _27817_keys = nullptr;
	{
		auto __julec_range_expr = _27744_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Slice<_111613f20_Token> _11167f570_tokens = *__julec_range_begin;
			_iter_begin_4629738672:;
			{
				_27817_keys=append(_27817_keys,jule::Slice<jule::Ref<_111612b20_VarDecl>>({(*this)._method_build_range_kind_key(_11167f570_tokens)}));
			}
			_iter_next_4629738672:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11167f570_tokens = *__julec_range_begin; goto _iter_begin_4629738672; }
			_iter_end_4629738672:;
		}
	}
	return _27817_keys;
}



inline void _11167f570_ScopeParser::_method_setup_range_kind_keys_plain(jule::Ref<_111612b20_RangeKind> _28550_rng,jule::Slice<_111613f20_Token> _28571_tokens) {
	jule::Slice<jule::Slice<_111613f20_Token>> _28617_key_tokens = (*this)._method_get_range_kind_keys_tokens(_28571_tokens);
	if (_28617_key_tokens.len() == 0LL) {
		return;
	}
	if (_28617_key_tokens.len() > 2LL) {
		(*this)._method_push_err(_28550_rng->_field_in_token,jule::Str("much_range_vars", 15));
	}
	jule::Slice<jule::Ref<_111612b20_VarDecl>> _29317_keys = (*this)._method_build_range_kind_keys(_28617_key_tokens);
	_28550_rng->_field_key_a=_29317_keys[static_cast<jule::Int>(0LL)];
	if (_29317_keys.len() > 1LL) {
		_28550_rng->_field_key_b=_29317_keys[static_cast<jule::Int>(1LL)];
	}
}



inline void _11167f570_ScopeParser::_method_setup_range_kind_keys_explicit(jule::Ref<_111612b20_RangeKind> _30053_rng,jule::Slice<_111613f20_Token> _30074_tokens) {
	jule::Int _30117_i = 0LL;
	jule::Slice<_111613f20_Token> _30217_rang = _111681860_range(_30117_i,jule::Str("(", 1),jule::Str(")", 1),_30074_tokens);
	if (_30117_i < _30074_tokens.len()) {
		(*this)._method_push_err(_30053_rng->_field_in_token,jule::Str("invalid_syntax", 14));
	}
	(*this)._method_setup_range_kind_keys_plain(_30053_rng,_30217_rang);
}



inline void _11167f570_ScopeParser::_method_setup_range_kind_keys(jule::Ref<_111612b20_RangeKind> _30944_rng,jule::Slice<_111613f20_Token> _30965_tokens) {
	if (_30965_tokens[static_cast<jule::Int>(0LL)]._field_id == 3LLU) {
		if (_30965_tokens[static_cast<jule::Int>(0LL)]._field_kind != jule::Str("(", 1)) {
			(*this)._method_push_err(_30965_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14));
			return;
		}
		(*this)._method_setup_range_kind_keys_explicit(_30944_rng,_30965_tokens);
		return;
	}
	(*this)._method_setup_range_kind_keys_plain(_30944_rng,_30965_tokens);
}



inline jule::Ref<_111612b20_RangeKind> _11167f570_ScopeParser::_method_build_range_iter_kind(jule::Slice<_111613f20_Token> _32144_var_tokens,jule::Slice<_111613f20_Token> _32169_expr_tokens,_111613f20_Token _32191_in_token) {
	jule::Ref<_111612b20_RangeKind> _32217_rng = jule::new_struct<_111612b20_RangeKind>(new( std::nothrow ) _111612b20_RangeKind(_32191_in_token,jule::Ref<_111612b20_Expr>(),jule::Ref<_111612b20_VarDecl>(),jule::Ref<_111612b20_VarDecl>()));
	if (_32169_expr_tokens.len() == 0LL) {
		(*this)._method_push_err(_32217_rng->_field_in_token,jule::Str("missing_expr", 12));
		return _32217_rng;
	}
	_32217_rng->_field_expr=(*this)._field_p->_method_build_expr(_32169_expr_tokens);
	if (_32144_var_tokens.len() > 0LL) {
		(*this)._method_setup_range_kind_keys(_32217_rng,_32144_var_tokens);
	}
	return _32217_rng;
}



inline jule::Any _11167f570_ScopeParser::_method_build_common_iter_kind(jule::Slice<_111613f20_Token> _33645_tokens,_111613f20_Token _33662_err_tok) {
	jule::Int _33717_brace_n = 0LL;
	{
		auto __julec_range_expr = _33645_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11167f570_i = 0;
			_111613f20_Token _11167f570_tok = *__julec_range_begin;
			_iter_begin_4629796432:;
			{
				if (_11167f570_tok._field_id == 3LLU) {
					{
						auto _match_expr{ _11167f570_tok._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4629801728; }
						_case_begin_4629801728:;
						{
							(_33717_brace_n)++;
							goto _iter_next_4629796432;
						}
						goto _match_end_4629799696;
						_case_end_4629801728:;
						_case_begin_4629800608:;
						{
							(_33717_brace_n)--;
						}
						goto _match_end_4629799696;
						_case_end_4629800608:;
						_match_end_4629799696:;
					}
				}
				if (_33717_brace_n != 0LL) {
					goto _iter_next_4629796432;
				}
				{
					auto _match_expr{ _11167f570_tok._field_id };
					if (!((15LLU) == _match_expr)) { goto _case_end_4629803952; }
					_case_begin_4629803952:;
					{
						jule::Slice<_111613f20_Token> _35625_decl_tokens = _33645_tokens.slice(0LL,static_cast<jule::Int>(_11167f570_i));
						jule::Slice<_111613f20_Token> _35725_expr_tokens = _33645_tokens.slice(static_cast<jule::Int>(_11167f570_i + 1LL));
						return jule::Any((*this)._method_build_range_iter_kind(_35625_decl_tokens,_35725_expr_tokens,_11167f570_tok));
					}
					goto _match_end_4629804480;
					_case_end_4629803952:;
					_match_end_4629804480:;
				}
			}
			_iter_next_4629796432:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11167f570_i; _11167f570_tok = *__julec_range_begin; goto _iter_begin_4629796432; }
			_iter_end_4629796432:;
		}
	}
	return jule::Any((*this)._method_build_while_iter_kind(_33645_tokens));
}



inline jule::Any _11167f570_ScopeParser::_method_build_common_iter(jule::Slice<_111613f20_Token> _36440_tokens) {
	jule::Ref<_111612b20_Iter> _36517_it = jule::new_struct<_111612b20_Iter>(new( std::nothrow ) _111612b20_Iter(_36440_tokens[static_cast<jule::Int>(0LL)],jule::Any(),jule::Ref<_111612b20_ScopeTree>()));
	_36440_tokens=_36440_tokens.slice(static_cast<jule::Int>(1LL));
	if (_36440_tokens.len() == 0LL) {
		(*this)._method_stop();
		(*this)._method_push_err(_36517_it->_field_token,jule::Str("body_not_exist", 14));
		return jule::Any(nullptr);
	}
	jule::Slice<_111613f20_Token> _37417_expr_tokens = _112190570_get_block_expr(_36440_tokens);
	if (_37417_expr_tokens.len() > 0LL) {
		_36517_it->_field_kind=(*this)._method_build_common_iter_kind(_37417_expr_tokens,_36517_it->_field_token);
	}
	jule::I64 _37817_i = _37417_expr_tokens.len();
	jule::Slice<_111613f20_Token> _37917_scope_tokens = _111681860_range(_37817_i,jule::Str("{", 1),jule::Str("}", 1),_36440_tokens);
	if (_37917_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_36517_it->_field_token,jule::Str("body_not_exist", 14));
		return jule::Any(nullptr);
	}
	if (_37817_i < _36440_tokens.len()) {
		(*this)._method_push_err(_36440_tokens[static_cast<jule::Int>(_37817_i)],jule::Str("invalid_syntax", 14));
	}
	_36517_it->_field_scope=(*this)._method_build_scope(_37917_scope_tokens);
	return jule::Any(_36517_it);
}



inline jule::Any _11167f570_ScopeParser::_method_buid_iter_st(jule::Ref<_11167f570_Stmt> _39235_st) {
	if (_39235_st->_field_terminated) {
		return (*this)._method_build_while_next_iter(_39235_st);
	}
	return (*this)._method_build_common_iter(_39235_st->_field_tokens);
}



inline jule::Any _11167f570_ScopeParser::_method_build_break_st(jule::Slice<_111613f20_Token> _39937_tokens) {
	jule::Ref<_111612b20_BreakSt> _40017_brk = jule::new_struct<_111612b20_BreakSt>(new( std::nothrow ) _111612b20_BreakSt(_39937_tokens[static_cast<jule::Int>(0LL)],_111613f20_Token()));
	if (_39937_tokens.len() > 1LL) {
		if (_39937_tokens[static_cast<jule::Int>(1LL)]._field_id != 2LLU) {
			(*this)._method_push_err(_39937_tokens[static_cast<jule::Int>(1LL)],jule::Str("invalid_syntax", 14));
		} else {
			_40017_brk->_field_label=_39937_tokens[static_cast<jule::Int>(1LL)];
			if (_39937_tokens.len() > 2LL) {
				(*this)._method_push_err(_39937_tokens[static_cast<jule::Int>(1LL)],jule::Str("invalid_syntax", 14));
			}
		}
	}
	return jule::Any(_40017_brk);
}



inline jule::Any _11167f570_ScopeParser::_method_build_cont_st(jule::Slice<_111613f20_Token> _41636_tokens) {
	jule::Ref<_111612b20_ContSt> _41717_cont = jule::new_struct<_111612b20_ContSt>(new( std::nothrow ) _111612b20_ContSt(_41636_tokens[static_cast<jule::Int>(0LL)],_111613f20_Token()));
	if (_41636_tokens.len() > 1LL) {
		if (_41636_tokens[static_cast<jule::Int>(1LL)]._field_id != 2LLU) {
			(*this)._method_push_err(_41636_tokens[static_cast<jule::Int>(1LL)],jule::Str("invalid_syntax", 14));
		} else {
			_41717_cont->_field_label=_41636_tokens[static_cast<jule::Int>(1LL)];
			if (_41636_tokens.len() > 2LL) {
				(*this)._method_push_err(_41636_tokens[static_cast<jule::Int>(1LL)],jule::Str("invalid_syntax", 14));
			}
		}
	}
	return jule::Any(_41717_cont);
}



inline jule::Ref<_111612b20_If> _11167f570_ScopeParser::_method_build_if(jule::Slice<_111613f20_Token>& _43332_tokens) {
	jule::Ref<_111612b20_If> _43417_model = jule::new_struct<_111612b20_If>(new( std::nothrow ) _111612b20_If(_43332_tokens[static_cast<jule::Int>(0LL)],jule::Ref<_111612b20_Expr>(),jule::Ref<_111612b20_ScopeTree>()));
	_43332_tokens=_43332_tokens.slice(static_cast<jule::Int>(1LL));
	jule::Slice<_111613f20_Token> _43817_expr_tokens = _112190570_get_block_expr(_43332_tokens);
	jule::Int _43917_i = 0LL;
	if (_43817_expr_tokens.len() == 0LL) {
		(*this)._method_push_err(_43417_model->_field_token,jule::Str("missing_expr", 12));
	} else {
		_43917_i=static_cast<jule::I64>(_43817_expr_tokens.len());
	}
	jule::Slice<_111613f20_Token> _44517_scope_tokens = _111681860_range(_43917_i,jule::Str("{", 1),jule::Str("}", 1),_43332_tokens);
	if (_44517_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_43417_model->_field_token,jule::Str("body_not_exist", 14));
		return jule::new_ref<_111612b20_If>();
	}
	if (_43917_i < _43332_tokens.len()) {
		if (_43332_tokens[static_cast<jule::Int>(_43917_i)]._field_id == 17LLU) {
			_43332_tokens=_43332_tokens.slice(static_cast<jule::Int>(_43917_i));
		} else {
			(*this)._method_push_err(_43332_tokens[static_cast<jule::Int>(_43917_i)],jule::Str("invalid_syntax", 14));
			_43332_tokens=nullptr;
		}
	}
	_43417_model->_field_expr=(*this)._field_p->_method_build_expr(_43817_expr_tokens);
	_43417_model->_field_scope=(*this)._method_build_scope(_44517_scope_tokens);
	return _43417_model;
}



inline jule::Ref<_111612b20_Else> _11167f570_ScopeParser::_method_build_else(jule::Slice<_111613f20_Token> _46433_tokens) {
	jule::Ref<_111612b20_Else> _46517_els = jule::new_struct<_111612b20_Else>(new( std::nothrow ) _111612b20_Else(_46433_tokens[static_cast<jule::Int>(0LL)],jule::Ref<_111612b20_ScopeTree>()));
	_46433_tokens=_46433_tokens.slice(static_cast<jule::Int>(1LL));
	jule::Int _46917_i = 0LL;
	jule::Slice<_111613f20_Token> _47017_scope_tokens = _111681860_range(_46917_i,jule::Str("{", 1),jule::Str("}", 1),_46433_tokens);
	if (_47017_scope_tokens == nullptr) {
		if (_46917_i < _46433_tokens.len()) {
			(*this)._method_push_err(_46517_els->_field_token,jule::Str("else_have_expr", 14));
		} else {
			(*this)._method_stop();
			(*this)._method_push_err(_46517_els->_field_token,jule::Str("body_not_exist", 14));
		}
		return jule::new_ref<_111612b20_Else>();
	}
	if (_46917_i < _46433_tokens.len()) {
		(*this)._method_push_err(_46433_tokens[static_cast<jule::Int>(_46917_i)],jule::Str("invalid_syntax", 14));
	}
	_46517_els->_field_scope=(*this)._method_build_scope(_47017_scope_tokens);
	return _46517_els;
}



inline jule::Any _11167f570_ScopeParser::_method_build_if_else_chain(jule::Slice<_111613f20_Token> _48742_tokens) {
	jule::Ref<_111612b20_Conditional> _48817_chain = jule::new_struct<_111612b20_Conditional>(new( std::nothrow ) _111612b20_Conditional((*this)._method_build_if(_48742_tokens),jule::Slice<jule::Ref<_111612b20_If>>(),jule::Ref<_111612b20_Else>()));
	if ((!(jule::real(_48817_chain->_field_head)))) {
		return jule::Any(nullptr);
	}
	_iter_begin_4629925392:;
	if (!(_48742_tokens != nullptr)) { goto _iter_end_4629925392; }
	{
		if (_48742_tokens[static_cast<jule::Int>(0LL)]._field_id != 17LLU) {
			goto _iter_end_4629925392;
		}
		if ((_48742_tokens.len() > 1LL) && (_48742_tokens[static_cast<jule::Int>(1LL)]._field_id == 16LLU)) {
			_48742_tokens=_48742_tokens.slice(static_cast<jule::Int>(1LL));
			jule::Ref<_111612b20_If> _50025_elif = (*this)._method_build_if(_48742_tokens);
			_48817_chain->_field_tail=append(_48817_chain->_field_tail,jule::Slice<jule::Ref<_111612b20_If>>({_50025_elif}));
			goto _iter_next_4629925392;
		}
		_48817_chain->_field_default=(*this)._method_build_else(_48742_tokens);
		goto _iter_end_4629925392;
	}
	_iter_next_4629925392:;
	goto _iter_begin_4629925392;
	_iter_end_4629925392:;
	return jule::Any(_48817_chain);
}



inline jule::Any _11167f570_ScopeParser::_method_build_comment_st(_111613f20_Token _51035_token) {
	return jule::Any(_111681860_build_comment(_51035_token));
}



inline jule::Any _11167f570_ScopeParser::_method_build_call_st(jule::Slice<_111613f20_Token> _51436_tokens) {
	_111613f20_Token _51513_token = _51436_tokens[static_cast<jule::Int>(0LL)];
	if (_112190570_is_fn_call(_51436_tokens) == nullptr) {
		(*this)._method_push_err(_51513_token,jule::Str("expr_not_func_call", 18));
	}
	jule::Ref<_111612b20_Expr> _51917_expr = (*this)._field_p->_method_build_expr(_51436_tokens);
	if (jule::real(_51917_expr) && (!(_51917_expr->_method_is_fn_call()))) {
		(*this)._method_push_err(_51513_token,jule::Str("invalid_syntax", 14));
	}
	return jule::Any(_51917_expr);
}



inline jule::Any _11167f570_ScopeParser::_method_build_co_call_st(jule::Slice<_111613f20_Token> _52639_tokens) {
	_52639_tokens=_52639_tokens.slice(static_cast<jule::Int>(1LL));
	jule::Any _52817_cc = (*this)._method_build_call_st(_52639_tokens);
	_52817_cc.operator jule::Ref<_111612b20_Expr>()->_field_kind.operator jule::Ref<_111612b20_FnCallExpr>()->_field_concurrent=true;
	return _52817_cc;
}



inline jule::Any _11167f570_ScopeParser::_method_build_goto_st(jule::Slice<_111613f20_Token> _53336_tokens) {
	jule::Ref<_111612b20_GotoSt> _53417_gt = jule::new_struct<_111612b20_GotoSt>(new( std::nothrow ) _111612b20_GotoSt(_53336_tokens[static_cast<jule::Int>(0LL)],_111613f20_Token()));
	if (_53336_tokens.len() == 1LL) {
		(*this)._method_push_err(_53417_gt->_field_token,jule::Str("missing_goto_label", 18));
		return jule::Any(nullptr);
	} else if (_53336_tokens.len() > 2LL) {
		(*this)._method_push_err(_53336_tokens[static_cast<jule::Int>(2LL)],jule::Str("invalid_syntax", 14));
	}
	_111613f20_Token _54317_ident_token = _53336_tokens[static_cast<jule::Int>(1LL)];
	if (_54317_ident_token._field_id != 2LLU) {
		(*this)._method_push_err(_54317_ident_token,jule::Str("invalid_syntax", 14));
		return jule::Any(_53417_gt);
	}
	_53417_gt->_field_label=_54317_ident_token;
	return jule::Any(_53417_gt);
}



inline jule::Any _11167f570_ScopeParser::_method_build_fall_st(jule::Slice<_111613f20_Token> _55236_tokens) {
	jule::Ref<_111612b20_FallSt> _55317_fll = jule::new_struct<_111612b20_FallSt>(new( std::nothrow ) _111612b20_FallSt(_55236_tokens[static_cast<jule::Int>(0LL)]));
	if (_55236_tokens.len() > 1LL) {
		(*this)._method_push_err(_55236_tokens[static_cast<jule::Int>(1LL)],jule::Str("invalid_syntax", 14));
	}
	return jule::Any(_55317_fll);
}



inline jule::Any _11167f570_ScopeParser::_method_build_type_alias_st(jule::Slice<_111613f20_Token> _56242_tokens) {
	jule::Ref<_111612b20_TypeAliasDecl> _56317_tad = (*this)._field_p->_method_build_type_alias_decl(_56242_tokens);
	_56317_tad->_field_scope=(*this)._field_s;
	return jule::Any(_56317_tad);
}



inline void _11167f570_ScopeParser::_method_push_case_expr(jule::Slice<_111613f20_Token> _56837_tokens,_111613f20_Token _56858_token,jule::Bool _5699_type_match,jule::Slice<jule::Ref<_111612b20_Expr>>& _56932_exprs) {
	if (_56837_tokens.len() == 0LL) {
		return;
	}
	if (_5699_type_match) {
		jule::Int _57521_i = 0LL;
		jule::Ref<_111612b20_TypeDecl> _57622_t;
		jule::Bool _57625_ok;
		std::tie(_57622_t,_57625_ok) = (*this)._field_p->_method_build_type(_56837_tokens,(&(_57521_i)),true);
		if (_57625_ok) {
			_56932_exprs=append(_56932_exprs,jule::Slice<jule::Ref<_111612b20_Expr>>({jule::new_struct<_111612b20_Expr>(new( std::nothrow ) _111612b20_Expr(_56858_token,jule::Any(_57622_t)))}));
		}
		if (_57521_i < _56837_tokens.len()) {
			(*this)._method_push_err(_56837_tokens[static_cast<jule::Int>(_57521_i)],jule::Str("invalid_syntax", 14));
		}
		return;
	}
	_56932_exprs=append(_56932_exprs,jule::Slice<jule::Ref<_111612b20_Expr>>({(*this)._field_p->_method_build_expr(_56837_tokens)}));
}



inline jule::Slice<jule::Ref<_111612b20_Expr>> _11167f570_ScopeParser::_method_build_case_exprs(jule::Slice<_111613f20_Token>& _59140_tokens,jule::Bool _59157_type_match) {
	jule::Slice<jule::Ref<_111612b20_Expr>> _59217_exprs = nullptr;
	jule::Int _59417_brace_n = 0LL;
	jule::Int _59517_j = 0LL;
	{
		auto __julec_range_expr = _59140_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11167f570_i = 0;
			_111613f20_Token _11167f570_tok = *__julec_range_begin;
			_iter_begin_4630022672:;
			{
				if (_11167f570_tok._field_id == 3LLU) {
					{
						auto _match_expr{ _11167f570_tok._field_kind };
						if (!((jule::Str("(", 1)) == _match_expr || (jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr)) { goto _case_end_4630027712; }
						_case_begin_4630027712:;
						{
							(_59417_brace_n)++;
						}
						goto _match_end_4630025680;
						_case_end_4630027712:;
						_case_begin_4630026592:;
						{
							(_59417_brace_n)--;
						}
						goto _match_end_4630025680;
						_case_end_4630026592:;
						_match_end_4630025680:;
					}
					goto _iter_next_4630022672;
				} else if (_59417_brace_n != 0LL) {
					goto _iter_next_4630022672;
				}
				{
					if (!(((_11167f570_tok._field_id == 7LLU) && (_11167f570_tok._field_kind == jule::Str("|", 1))))) { goto _case_end_4630029504; }
					_case_begin_4630029504:;
					{
						(*this)._method_push_case_expr(_59140_tokens.slice(static_cast<jule::Int>(_59517_j),static_cast<jule::Int>(_11167f570_i)),_11167f570_tok,_59157_type_match,_59217_exprs);
						_59517_j=_11167f570_i + 1LL;
					}
					goto _match_end_4630028976;
					_case_end_4630029504:;
					if (!((_11167f570_tok._field_id == 11LLU))) { goto _case_end_4630029616; }
					_case_begin_4630029616:;
					{
						(*this)._method_push_case_expr(_59140_tokens.slice(static_cast<jule::Int>(_59517_j),static_cast<jule::Int>(_11167f570_i)),_11167f570_tok,_59157_type_match,_59217_exprs);
						_59140_tokens=_59140_tokens.slice(static_cast<jule::Int>(_11167f570_i + 1LL));
						return _59217_exprs;
					}
					goto _match_end_4630028976;
					_case_end_4630029616:;
					_match_end_4630028976:;
				}
			}
			_iter_next_4630022672:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11167f570_i; _11167f570_tok = *__julec_range_begin; goto _iter_begin_4630022672; }
			_iter_end_4630022672:;
		}
	}
	(*this)._method_push_err(_59140_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14));
	_59140_tokens=nullptr;
	return nullptr;
}



inline jule::Ref<_111612b20_ScopeTree> _11167f570_ScopeParser::_method_build_case_scope(jule::Slice<_111613f20_Token>& _62740_tokens) {
	jule::Int _62817_n = 0LL;
	_iter_begin_4630046768:;
	{
		jule::Int _63021_i = 0LL;
		jule::Slice<_111613f20_Token> _63122_next;
		std::tie(_63122_next,std::ignore) = _11167f570_skip_st(_63021_i,_62740_tokens.slice(static_cast<jule::Int>(_62817_n)));
		if (_63122_next.len() == 0LL) {
			goto _iter_end_4630046768;
		}
		_111613f20_Token _63517_tok = _63122_next[static_cast<jule::Int>(0LL)];
		if ((_63517_tok._field_id != 7LLU) || (_63517_tok._field_kind != jule::Str("|", 1))) {
			_62817_n+=static_cast<jule::I64>(_63122_next.len());
			goto _iter_next_4630046768;
		}
		jule::Ref<_111612b20_ScopeTree> _64021_scope = (*this)._method_build_scope(_62740_tokens.slice(0LL,static_cast<jule::Int>(_62817_n)));
		_62740_tokens=_62740_tokens.slice(static_cast<jule::Int>(_62817_n));
		return _64021_scope;
	}
	_iter_next_4630046768:;
	goto _iter_begin_4630046768;
	_iter_end_4630046768:;
	jule::Ref<_111612b20_ScopeTree> _64417_scope = (*this)._method_build_scope(_62740_tokens);
	_62740_tokens=nullptr;
	return _64417_scope;
}



inline std::tuple<jule::Ref<_111612b20_Case>,jule::Bool> _11167f570_ScopeParser::_method_build_case(jule::Slice<_111613f20_Token>& _64934_tokens,jule::Bool _64951_type_match) {
	jule::Ref<_111612b20_Case> _65017_c = jule::new_struct<_111612b20_Case>(new( std::nothrow ) _111612b20_Case(_64934_tokens[static_cast<jule::Int>(0LL)],jule::Ref<_111612b20_ScopeTree>(),jule::Slice<jule::Ref<_111612b20_Expr>>()));
	_64934_tokens=_64934_tokens.slice(static_cast<jule::Int>(1LL));
	_65017_c->_field_exprs=(*this)._method_build_case_exprs(_64934_tokens,_64951_type_match);
	_65017_c->_field_scope=(*this)._method_build_case_scope(_64934_tokens);
	jule::Bool _65613_is_default = _65017_c->_field_exprs.len() == 0LL;
	return std::make_tuple(_65017_c,_65613_is_default);
}



inline std::tuple<jule::Slice<jule::Ref<_111612b20_Case>>,jule::Ref<_111612b20_Else>> _11167f570_ScopeParser::_method_build_cases(jule::Slice<_111613f20_Token> _66034_tokens,jule::Bool _66051_type_match) {
	jule::Slice<jule::Ref<_111612b20_Case>> _66117_cases = nullptr;
	jule::Ref<_111612b20_Else> _66217_def = jule::new_ref<_111612b20_Else>();
	_iter_begin_4630084192:;
	if (!(_66034_tokens.len() > 0LL)) { goto _iter_end_4630084192; }
	{
		_111613f20_Token _66421_tok = _66034_tokens[static_cast<jule::Int>(0LL)];
		if (_66421_tok._field_id == 18LLU) {
			_66034_tokens=_66034_tokens.slice(static_cast<jule::Int>(1LL));
			goto _iter_next_4630084192;
		}
		if ((_66421_tok._field_id != 7LLU) || (_66421_tok._field_kind != jule::Str("|", 1))) {
			(*this)._method_push_err(_66421_tok,jule::Str("invalid_syntax", 14));
			goto _iter_end_4630084192;
		}
		jule::Ref<_111612b20_Case> _67522_c;
		jule::Bool _67525_is_default;
		std::tie(_67522_c,_67525_is_default) = (*this)._method_build_case(_66034_tokens,_66051_type_match);
		if (_67525_is_default) {
			_67522_c->_field_token=_66421_tok;
			if ((!(jule::real(_66217_def)))) {
				_66217_def=jule::new_struct<_111612b20_Else>(new( std::nothrow ) _111612b20_Else(_67522_c->_field_token,_67522_c->_field_scope));
			} else {
				(*this)._method_push_err(_66421_tok,jule::Str("invalid_syntax", 14));
			}
		} else {
			_66117_cases=append(_66117_cases,jule::Slice<jule::Ref<_111612b20_Case>>({_67522_c}));
		}
	}
	_iter_next_4630084192:;
	goto _iter_begin_4630084192;
	_iter_end_4630084192:;
	return std::make_tuple(_66117_cases,_66217_def);
}



inline jule::Ref<_111612b20_MatchCase> _11167f570_ScopeParser::_method_build_match_case(jule::Slice<_111613f20_Token> _69339_tokens) {
	jule::Ref<_111612b20_MatchCase> _69417_m = jule::new_struct<_111612b20_MatchCase>(new( std::nothrow ) _111612b20_MatchCase(_69339_tokens[static_cast<jule::Int>(0LL)],jule::Bool(),jule::Ref<_111612b20_Expr>(),jule::Slice<jule::Ref<_111612b20_Case>>(),jule::Ref<_111612b20_Else>()));
	_69339_tokens=_69339_tokens.slice(static_cast<jule::Int>(1LL));
	if ((_69339_tokens.len() > 0LL) && (_69339_tokens[static_cast<jule::Int>(0LL)]._field_id == 10LLU)) {
		_69417_m->_field_type_match=true;
		_69339_tokens=_69339_tokens.slice(static_cast<jule::Int>(1LL));
	}
	jule::Slice<_111613f20_Token> _70417_expr_tokens = _112190570_get_block_expr(_69339_tokens);
	if (_70417_expr_tokens.len() > 0LL) {
		_69417_m->_field_expr=(*this)._field_p->_method_build_expr(_70417_expr_tokens);
	} else if (_69417_m->_field_type_match) {
		(*this)._method_push_err(_69417_m->_field_token,jule::Str("missing_expr", 12));
	}
	jule::I64 _71117_i = _70417_expr_tokens.len();
	jule::Slice<_111613f20_Token> _71217_block_toks = _111681860_range(_71117_i,jule::Str("{", 1),jule::Str("}", 1),_69339_tokens);
	if (_71217_block_toks == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_69417_m->_field_token,jule::Str("body_not_exist", 14));
		return jule::new_ref<_111612b20_MatchCase>();
	}
	std::tie(_69417_m->_field_cases,_69417_m->_field_default) = (*this)._method_build_cases(_71217_block_toks,_69417_m->_field_type_match);
	return _69417_m;
}



inline jule::Ref<_111612b20_ScopeTree> _11167f570_ScopeParser::_method_build_scope_st(jule::Slice<_111613f20_Token> _72337_tokens) {
	jule::Bool _72417_is_unsafe = false;
	jule::Bool _72517_is_deferred = false;
	_111613f20_Token _72617_token = _72337_tokens[static_cast<jule::Int>(0LL)];
	if (_72617_token._field_id == 35LLU) {
		_72417_is_unsafe=true;
		_72337_tokens=_72337_tokens.slice(static_cast<jule::Int>(1LL));
		if (_72337_tokens.len() == 0LL) {
			(*this)._method_push_err(_72617_token,jule::Str("invalid_syntax", 14));
			return jule::new_ref<_111612b20_ScopeTree>();
		}
		_72617_token=_72337_tokens[static_cast<jule::Int>(0LL)];
		if (_72617_token._field_id == 37LLU) {
			_72517_is_deferred=true;
			_72337_tokens=_72337_tokens.slice(static_cast<jule::Int>(1LL));
			if (_72337_tokens.len() == 0LL) {
				(*this)._method_push_err(_72617_token,jule::Str("invalid_syntax", 14));
				return jule::new_ref<_111612b20_ScopeTree>();
			}
		}
	} else if (_72617_token._field_id == 37LLU) {
		_72517_is_deferred=true;
		_72337_tokens=_72337_tokens.slice(static_cast<jule::Int>(1LL));
		if (_72337_tokens.len() == 0LL) {
			(*this)._method_push_err(_72617_token,jule::Str("invalid_syntax", 14));
			return jule::new_ref<_111612b20_ScopeTree>();
		}
	}
	jule::Int _75217_i = 0LL;
	jule::Slice<_111613f20_Token> _75317_scope_tokens = _111681860_range(_75217_i,jule::Str("{", 1),jule::Str("}", 1),_72337_tokens);
	if (_75317_scope_tokens == nullptr) {
		(*this)._method_push_err(_72617_token,jule::Str("invalid_syntax", 14));
		return jule::new_ref<_111612b20_ScopeTree>();
	} else if (_75217_i < _72337_tokens.len()) {
		(*this)._method_push_err(_72337_tokens[static_cast<jule::Int>(_75217_i)],jule::Str("invalid_syntax", 14));
	}
	jule::Ref<_111612b20_ScopeTree> _76017_scope = (*this)._method_build_scope(_75317_scope_tokens);
	_76017_scope->_field_unsafety=_72417_is_unsafe;
	_76017_scope->_field_deferred=_72517_is_deferred;
	return _76017_scope;
}



inline jule::Ref<_111612b20_LabelSt> _11167f570_ScopeParser::_method_build_label_st(jule::Slice<_111613f20_Token> _76637_tokens) {
	jule::Ref<_111612b20_LabelSt> _76717_lbl = jule::new_struct<_111612b20_LabelSt>(new( std::nothrow ) _111612b20_LabelSt(_76637_tokens[static_cast<jule::Int>(0LL)],_76637_tokens[static_cast<jule::Int>(0LL)]._field_kind));
	if (_76637_tokens.len() > 2LL) {
		_76637_tokens=_76637_tokens.slice(static_cast<jule::Int>(2LL));
		(*this)._method_insert_as_next(_76637_tokens);
	}
	return _76717_lbl;
}



inline std::tuple<jule::Any,jule::Bool> _11167f570_ScopeParser::_method_build_id_st(jule::Slice<_111613f20_Token> _78134_tokens) {
	jule::Bool _78163_ok = jule::Bool();
	if (_78134_tokens.len() == 1LL) {
		return std::make_tuple(jule::Any(),_78163_ok);
	}
	_111613f20_Token _78617_token = _78134_tokens[static_cast<jule::Int>(1LL)];
	{
		auto _match_expr{ _78617_token._field_id };
		if (!((11LLU) == _match_expr)) { goto _case_end_4630181984; }
		_case_begin_4630181984:;
		{
			_78163_ok = true;
			return std::make_tuple(jule::Any((*this)._method_build_label_st(_78134_tokens)),_78163_ok);
		}
		goto _match_end_4630179024;
		_case_end_4630181984:;
		_match_end_4630179024:;
	}
	return std::make_tuple(jule::Any(),_78163_ok);
}



inline jule::Ref<_111654d60_AssignInfo> _11167f570_ScopeParser::_method_build_assign_info(jule::Slice<_111613f20_Token> _79540_tokens) {
	jule::Ref<_111654d60_AssignInfo> _79617_info = jule::new_struct<_111654d60_AssignInfo>(new( std::nothrow ) _111654d60_AssignInfo(jule::Slice<_111613f20_Token>(),jule::Slice<_111613f20_Token>(),_111613f20_Token(),true));
	jule::Int _79917_brace_n = 0LL;
	{
		auto __julec_range_expr = _79540_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11167f570_i = 0;
			_111613f20_Token _11167f570_token = *__julec_range_begin;
			_iter_begin_4630192928:;
			{
				if (_11167f570_token._field_id == 3LLU) {
					{
						auto _match_expr{ _11167f570_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4630197680; }
						_case_begin_4630197680:;
						{
							(_79917_brace_n)++;
						}
						goto _match_end_4630195648;
						_case_end_4630197680:;
						_case_begin_4630196560:;
						{
							(_79917_brace_n)--;
						}
						goto _match_end_4630195648;
						_case_end_4630196560:;
						_match_end_4630195648:;
					}
				}
				{
					if (!((_79917_brace_n > 0LL))) { goto _case_end_4630195072; }
					_case_begin_4630195072:;
					{
						goto _iter_next_4630192928;
					}
					goto _match_end_4630199280;
					_case_end_4630195072:;
					if (!((_11167f570_token._field_id != 7LLU))) { goto _case_end_4630195184; }
					_case_begin_4630195184:;
					{
						goto _iter_next_4630192928;
					}
					goto _match_end_4630199280;
					_case_end_4630195184:;
					if (!(((!(_111613f20_is_assign_op(_11167f570_token._field_kind)))))) { goto _case_end_4630195296; }
					_case_begin_4630195296:;
					{
						goto _iter_next_4630192928;
					}
					goto _match_end_4630199280;
					_case_end_4630195296:;
					_match_end_4630199280:;
				}
				_79617_info->_field_l=_79540_tokens.slice(0LL,static_cast<jule::Int>(_11167f570_i));
				if (_79617_info->_field_l.len() == 0LL) {
					_79617_info->_field_ok=false;
				}
				_79617_info->_field_setter=_11167f570_token;
				if ((_11167f570_i + 1LL) >= _79540_tokens.len()) {
					_79617_info->_field_r=nullptr;
					_79617_info->_field_ok=_111613f20_is_postfix_op(_79617_info->_field_setter._field_kind);
					goto _iter_end_4630192928;
				}
				_79617_info->_field_r=_79540_tokens.slice(static_cast<jule::Int>(_11167f570_i + 1LL));
				if (_111613f20_is_postfix_op(_79617_info->_field_setter._field_kind)) {
					if (_79617_info->_field_r.len() > 0LL) {
						(*this)._method_push_err(_79617_info->_field_r[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14));
						_79617_info->_field_r=nullptr;
					}
				}
				goto _iter_end_4630192928;
			}
			_iter_next_4630192928:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11167f570_i; _11167f570_token = *__julec_range_begin; goto _iter_begin_4630192928; }
			_iter_end_4630192928:;
		}
	}
	return _79617_info;
}



inline jule::Ref<_111612b20_AssignLeft> _11167f570_ScopeParser::_method_build_assign_l(jule::Slice<_111613f20_Token> _84237_tokens) {
	jule::Ref<_111612b20_AssignLeft> _84317_l = jule::new_struct<_111612b20_AssignLeft>(new( std::nothrow ) _111612b20_AssignLeft(_84237_tokens[static_cast<jule::Int>(0LL)],jule::Bool(),jule::Bool(),jule::Str(),jule::Ref<_111612b20_Expr>()));
	if (_84237_tokens[static_cast<jule::Int>(0LL)]._field_id == 2LLU) {
		_84317_l->_field_ident=_84317_l->_field_token._field_kind;
	}
	_84317_l->_field_expr=(*this)._field_p->_method_build_expr(_84237_tokens);
	return _84317_l;
}



inline jule::Slice<jule::Ref<_111612b20_AssignLeft>> _11167f570_ScopeParser::_method_build_assign_ls(jule::Slice<jule::Slice<_111613f20_Token>> _85538_parts) {
	jule::Slice<jule::Ref<_111612b20_AssignLeft>> _85617_lefts = nullptr;
	{
		auto __julec_range_expr = _85538_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Slice<_111613f20_Token> _11167f570_part = *__julec_range_begin;
			_iter_begin_4630232656:;
			{
				jule::Ref<_111612b20_AssignLeft> _85821_l = (*this)._method_build_assign_l(_11167f570_part);
				_85617_lefts=append(_85617_lefts,jule::Slice<jule::Ref<_111612b20_AssignLeft>>({_85821_l}));
			}
			_iter_next_4630232656:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11167f570_part = *__julec_range_begin; goto _iter_begin_4630232656; }
			_iter_end_4630232656:;
		}
	}
	return _85617_lefts;
}



inline std::tuple<jule::Ref<_111612b20_AssignSt>,jule::Bool> _11167f570_ScopeParser::_method_build_plain_assign(jule::Slice<_111613f20_Token> _86541_tokens) {
	jule::Ref<_111654d60_AssignInfo> _86617_info = (*this)._method_build_assign_info(_86541_tokens);
	if ((!(_86617_info->_field_ok))) {
		return std::make_tuple(jule::new_ref<_111612b20_AssignSt>(),false);
	}
	jule::Ref<_111612b20_AssignSt> _87117_assign = jule::new_struct<_111612b20_AssignSt>(new( std::nothrow ) _111612b20_AssignSt(jule::Bool(),_86617_info->_field_setter,jule::Slice<jule::Ref<_111612b20_AssignLeft>>(),jule::Ref<_111612b20_Expr>()));
	jule::Slice<jule::Slice<_111613f20_Token>> _87518_parts;
	jule::Slice<_1316b4080_Log> _87525_errs;
	std::tie(_87518_parts,_87525_errs) = _111681860_parts(_86617_info->_field_l,8LLU,true);
	if (_87525_errs.len() > 0LL) {
		(*this)._field_p->_field_errors=append((*this)._field_p->_field_errors,_87525_errs);
		return std::make_tuple(jule::new_ref<_111612b20_AssignSt>(),false);
	}
	_87117_assign->_field_left=(*this)._method_build_assign_ls(_87518_parts);
	if (_86617_info->_field_r != nullptr) {
		_87117_assign->_field_right=(*this)._field_p->_method_build_expr(_86617_info->_field_r);
	}
	return std::make_tuple(_87117_assign,true);
}



inline std::tuple<jule::Ref<_111612b20_AssignSt>,jule::Bool> _11167f570_ScopeParser::_method_build_decl_assign(jule::Slice<_111613f20_Token> _88940_tokens) {
	if (_88940_tokens.len() < 1LL) {
		return std::make_tuple(jule::new_ref<_111612b20_AssignSt>(),false);
	}
	_88940_tokens=_88940_tokens.slice(static_cast<jule::Int>(1LL));
	_111613f20_Token _89513_token = _88940_tokens[static_cast<jule::Int>(0LL)];
	if ((_89513_token._field_id != 3LLU) || (_89513_token._field_kind != jule::Str("(", 1))) {
		return std::make_tuple(jule::new_ref<_111612b20_AssignSt>(),false);
	}
	jule::Ref<_111612b20_AssignSt> _90017_assign = jule::new_struct<_111612b20_AssignSt>(new( std::nothrow ) _111612b20_AssignSt(true,_111613f20_Token(),jule::Slice<jule::Ref<_111612b20_AssignLeft>>(),jule::Ref<_111612b20_Expr>()));
	jule::Int _90417_i = 0LL;
	jule::Slice<_111613f20_Token> _90517_rang = _111681860_range(_90417_i,jule::Str("(", 1),jule::Str(")", 1),_88940_tokens);
	if (_90517_rang == nullptr) {
		(*this)._method_push_err(_89513_token,jule::Str("invalid_syntax", 14));
		return std::make_tuple(jule::new_ref<_111612b20_AssignSt>(),false);
	} else if ((_90417_i + 1LL) < _88940_tokens.len()) {
		_90017_assign->_field_setter=_88940_tokens[static_cast<jule::Int>(_90417_i)];
		(_90417_i)++;
		_90017_assign->_field_right=(*this)._field_p->_method_build_expr(_88940_tokens.slice(static_cast<jule::Int>(_90417_i)));
	}
	jule::Slice<jule::Slice<_111613f20_Token>> _91618_parts;
	jule::Slice<_1316b4080_Log> _91625_errs;
	std::tie(_91618_parts,_91625_errs) = _111681860_parts(_90517_rang,8LLU,true);
	if (_91625_errs.len() > 0LL) {
		(*this)._field_p->_field_errors=append((*this)._field_p->_field_errors,_91625_errs);
		return std::make_tuple(jule::new_ref<_111612b20_AssignSt>(),false);
	}
	{
		auto __julec_range_expr = _91618_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Slice<_111613f20_Token> _11167f570_part = *__julec_range_begin;
			_iter_begin_4630289440:;
			{
				jule::Bool _92321_is_mut = false;
				jule::Bool _92421_is_ref = false;
				_111613f20_Token _92617_token = _11167f570_part[static_cast<jule::Int>(0LL)];
				if (_92617_token._field_id == 36LLU) {
					_92321_is_mut=true;
					_11167f570_part=_11167f570_part.slice(static_cast<jule::Int>(1LL));
					if (_11167f570_part.len() == 0LL) {
						(*this)._method_push_err(_92617_token,jule::Str("invalid_syntax", 14));
						goto _iter_next_4630289440;
					}
				}
				if ((_11167f570_part[static_cast<jule::Int>(0LL)]._field_id == 7LLU) && (_11167f570_part[static_cast<jule::Int>(0LL)]._field_kind == jule::Str("&", 1))) {
					_92421_is_ref=true;
					_11167f570_part=_11167f570_part.slice(static_cast<jule::Int>(1LL));
					if (_11167f570_part.len() == 0LL) {
						(*this)._method_push_err(_92617_token,jule::Str("invalid_syntax", 14));
						goto _iter_next_4630289440;
					}
				}
				if (((_11167f570_part[static_cast<jule::Int>(0LL)]._field_id != 2LLU) && (_11167f570_part[static_cast<jule::Int>(0LL)]._field_id != 3LLU)) && (_11167f570_part[static_cast<jule::Int>(0LL)]._field_kind != jule::Str("(", 1))) {
					(*this)._method_push_err(_92617_token,jule::Str("invalid_syntax", 14));
					goto _iter_next_4630289440;
				}
				jule::Ref<_111612b20_AssignLeft> _95221_l = (*this)._method_build_assign_l(_11167f570_part);
				_95221_l->_field_mutable=_92321_is_mut;
				_95221_l->_field_reference=_92421_is_ref;
				_90017_assign->_field_left=append(_90017_assign->_field_left,jule::Slice<jule::Ref<_111612b20_AssignLeft>>({_95221_l}));
			}
			_iter_next_4630289440:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11167f570_part = *__julec_range_begin; goto _iter_begin_4630289440; }
			_iter_end_4630289440:;
		}
	}
	return std::make_tuple(_90017_assign,true);
}



inline std::tuple<jule::Ref<_111612b20_AssignSt>,jule::Bool> _11167f570_ScopeParser::_method_build_assign_st(jule::Slice<_111613f20_Token> _96138_tokens) {
	jule::Bool _96172_ok = jule::Bool();
	jule::Ref<_111612b20_AssignSt> _96157_st = jule::Ref<_111612b20_AssignSt>();
	if ((!(_111654d60_check_assign_tokens(_96138_tokens)))) {
		_96157_st = jule::new_ref<_111612b20_AssignSt>();
		_96172_ok = false;
		return std::make_tuple(_96157_st,_96172_ok);
	}
	{
		auto _match_expr{ _96138_tokens[static_cast<jule::Int>(0LL)]._field_id };
		if (!((34LLU) == _match_expr)) { goto _case_end_4630335392; }
		_case_begin_4630335392:;
		{
			std::tie(_96157_st,_96172_ok) = (*this)._method_build_decl_assign(_96138_tokens);
		}
		goto _match_end_4630330672;
		_case_end_4630335392:;
		_case_begin_4630333536:;
		{
			std::tie(_96157_st,_96172_ok) = (*this)._method_build_plain_assign(_96138_tokens);
		}
		goto _match_end_4630330672;
		_case_end_4630333536:;
		_match_end_4630330672:;
	}
	return std::make_tuple(_96157_st,_96172_ok);
}



inline jule::Any _11167f570_ScopeParser::_method_build_st(jule::Ref<_11167f570_Stmt> _97431_st) {
	_111613f20_Token _97517_token = _97431_st->_field_tokens[static_cast<jule::Int>(0LL)];
	if (_97517_token._field_id == 2LLU) {
		jule::Any _97722_s;
		jule::Bool _97725_ok;
		std::tie(_97722_s,_97725_ok) = (*this)._method_build_id_st(_97431_st->_field_tokens);
		if (_97725_ok) {
			return _97722_s;
		}
	}
	jule::Ref<_111612b20_AssignSt> _98318_s;
	jule::Bool _98321_ok;
	std::tie(_98318_s,_98321_ok) = (*this)._method_build_assign_st(_97431_st->_field_tokens);
	if (_98321_ok) {
		return jule::Any(_98318_s);
	}
	{
		auto _match_expr{ _97517_token._field_id };
		if (!((38LLU) == _match_expr || (9LLU) == _match_expr || (34LLU) == _match_expr || (36LLU) == _match_expr)) { goto _case_end_4630350944; }
		_case_begin_4630350944:;
		{
			return (*this)._method_build_var_st(_97431_st->_field_tokens);
		}
		goto _match_end_4630349472;
		_case_end_4630350944:;
		if (!((4LLU) == _match_expr)) { goto _case_end_4630350432; }
		_case_begin_4630350432:;
		{
			return (*this)._method_build_ret_st(_97431_st->_field_tokens);
		}
		goto _match_end_4630349472;
		_case_end_4630350432:;
		if (!((12LLU) == _match_expr)) { goto _case_end_4630347920; }
		_case_begin_4630347920:;
		{
			return (*this)._method_buid_iter_st(_97431_st);
		}
		goto _match_end_4630349472;
		_case_end_4630347920:;
		if (!((13LLU) == _match_expr)) { goto _case_end_4630353328; }
		_case_begin_4630353328:;
		{
			return (*this)._method_build_break_st(_97431_st->_field_tokens);
		}
		goto _match_end_4630349472;
		_case_end_4630353328:;
		if (!((14LLU) == _match_expr)) { goto _case_end_4630351296; }
		_case_begin_4630351296:;
		{
			return (*this)._method_build_cont_st(_97431_st->_field_tokens);
		}
		goto _match_end_4630349472;
		_case_end_4630351296:;
		if (!((16LLU) == _match_expr)) { goto _case_end_4630351408; }
		_case_begin_4630351408:;
		{
			return (*this)._method_build_if_else_chain(_97431_st->_field_tokens);
		}
		goto _match_end_4630349472;
		_case_end_4630351408:;
		if (!((18LLU) == _match_expr)) { goto _case_end_4630351520; }
		_case_begin_4630351520:;
		{
			return (*this)._method_build_comment_st(_97517_token);
		}
		goto _match_end_4630349472;
		_case_end_4630351520:;
		if (!((26LLU) == _match_expr)) { goto _case_end_4630351632; }
		_case_begin_4630351632:;
		{
			return (*this)._method_build_co_call_st(_97431_st->_field_tokens);
		}
		goto _match_end_4630349472;
		_case_end_4630351632:;
		if (!((22LLU) == _match_expr)) { goto _case_end_4630353728; }
		_case_begin_4630353728:;
		{
			return (*this)._method_build_goto_st(_97431_st->_field_tokens);
		}
		goto _match_end_4630349472;
		_case_end_4630353728:;
		if (!((32LLU) == _match_expr)) { goto _case_end_4630353840; }
		_case_begin_4630353840:;
		{
			return (*this)._method_build_fall_st(_97431_st->_field_tokens);
		}
		goto _match_end_4630349472;
		_case_end_4630353840:;
		if (!((10LLU) == _match_expr)) { goto _case_end_4630353952; }
		_case_begin_4630353952:;
		{
			return (*this)._method_build_type_alias_st(_97431_st->_field_tokens);
		}
		goto _match_end_4630349472;
		_case_end_4630353952:;
		if (!((27LLU) == _match_expr)) { goto _case_end_4630354064; }
		_case_begin_4630354064:;
		{
			return jule::Any((*this)._method_build_match_case(_97431_st->_field_tokens));
		}
		goto _match_end_4630349472;
		_case_end_4630354064:;
		if (!((35LLU) == _match_expr || (37LLU) == _match_expr)) { goto _case_end_4630354176; }
		_case_begin_4630354176:;
		{
			return jule::Any((*this)._method_build_scope_st(_97431_st->_field_tokens));
		}
		goto _match_end_4630349472;
		_case_end_4630354176:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4630354288; }
		_case_begin_4630354288:;
		{
			if (_97517_token._field_kind == jule::Str("{", 1)) {
				return jule::Any((*this)._method_build_scope_st(_97431_st->_field_tokens));
			}
		}
		goto _match_end_4630349472;
		_case_end_4630354288:;
		_case_begin_4630348896:;
		{
			if (_112190570_is_fn_call(_97431_st->_field_tokens) != nullptr) {
				return (*this)._method_build_call_st(_97431_st->_field_tokens);
			}
		}
		goto _match_end_4630349472;
		_case_end_4630348896:;
		_match_end_4630349472:;
	}
	(*this)._method_push_err(_97517_token,jule::Str("invalid_syntax", 14));
	return jule::Any(nullptr);
}



inline void _11167f570_ScopeParser::_method_build(jule::Slice<_111613f20_Token> _105028_tokens,jule::Ref<_111612b20_ScopeTree> _105049_s) {
	if ((!(jule::real(_105049_s)))) {
		return;
	}
	(*this)._field_stms=_11167f570_split_stms(_105028_tokens);
	(*this)._field_pos=-1LL;
	(*this)._field_s=_105049_s;
	_iter_begin_4630383872:;
	if (!((!((*this)._method_is_last_st())) && (!((*this)._method_finished())))) { goto _iter_end_4630383872; }
	{
		jule::Ref<_11167f570_Stmt> _105921_st = (*this)._method_next();
		jule::Any _106021_data = (*this)._method_build_st(_105921_st);
		if (_106021_data != nullptr) {
			(*this)._field_s->_field_stmts=append((*this)._field_s->_field_stmts,jule::Slice<jule::Any>({_106021_data}));
		}
		if ((*this)._method_stopped()) {
			goto _iter_end_4630383872;
		}
	}
	_iter_next_4630383872:;
	goto _iter_begin_4630383872;
	_iter_end_4630383872:;
}







std::ostream &operator<<(std::ostream &_Stream, const _11167f570_ScopeParser &_Src) {
	_Stream << "ScopeParser{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stms:" << _Src._field_stms << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112190570_CallData &_Src) {
	_Stream << "CallData{";
	_Stream << "expr_tokens:" << _Src._field_expr_tokens << ", ";
	_Stream << "args_tokens:" << _Src._field_args_tokens << ", ";
	_Stream << "generics_tokens:" << _Src._field_generics_tokens;
	_Stream << "}";
	return _Stream;
}



inline void _112190570_Precedencer::_method_set(jule::Int _15422_level,jule::Any _15434_expr) {
	{
		auto __julec_range_expr = (*this)._field_pairs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			jule::Slice<jule::Any> _112190570_pair = *__julec_range_begin;
			_iter_begin_4630396608:;
			{
				jule::Int _15617_pair_level = _112190570_pair[static_cast<jule::Int>(0LL)].operator jule::Int();
				if (_15422_level > _15617_pair_level) {
					jule::Slice<jule::Slice<jule::Any>> _15825_first = (*this)._field_pairs.slice(0LL,static_cast<jule::Int>(_112190570_i));
					jule::Slice<jule::Slice<jule::Any>> _15925_buffer = jule::Slice<jule::Slice<jule::Any>>({jule::Slice<jule::Any>({jule::Any(_15422_level),_15434_expr})});
					jule::Slice<jule::Slice<jule::Any>> _16025_appended = append(_15925_buffer,(*this)._field_pairs.slice(static_cast<jule::Int>(_112190570_i)));
					(*this)._field_pairs=append(_15825_first,_16025_appended);
					return;
				}
			}
			_iter_next_4630396608:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_pair = *__julec_range_begin; goto _iter_begin_4630396608; }
			_iter_end_4630396608:;
		}
	}
	(*this)._field_pairs=append((*this)._field_pairs,jule::Slice<jule::Slice<jule::Any>>({jule::Slice<jule::Any>({jule::Any(_15422_level),_15434_expr})}));
}



inline jule::Any _112190570_Precedencer::_method_get_lower(void) {
	jule::I64 _16917_i = (*this)._field_pairs.len() - 1LL;
	_iter_begin_4630398000:;
	if (!(_16917_i >= 0LL)) { goto _iter_end_4630398000; }
	{
		jule::Any _17121_data = (*this)._field_pairs[static_cast<jule::Int>(_16917_i)][static_cast<jule::Int>(1LL)];
		if (_17121_data != nullptr) {
			return _17121_data;
		}
	}
	_iter_next_4630398000:;
	(_16917_i)--;
	goto _iter_begin_4630398000;
	_iter_end_4630398000:;
	return jule::Any(nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _112190570_Precedencer &_Src) {
	_Stream << "Precedencer{";
	_Stream << "pairs:" << _Src._field_pairs;
	_Stream << "}";
	return _Stream;
}



inline void _112190570_ExprBuilder::_method_push_err(_111613f20_Token _28627_token,jule::Str _28641_key,jule::Slice<jule::Any> _28651_args) {
	(*this)._field_p->_method_push_err(_28627_token,_28641_key,_28651_args);
}



inline jule::Ref<_111612b20_TupleExpr> _112190570_ExprBuilder::_method_build_tuple(jule::Slice<jule::Slice<_111613f20_Token>> _29034_parts) {
	jule::Ref<_111612b20_TupleExpr> _29117_tuple = jule::new_struct<_111612b20_TupleExpr>(new( std::nothrow ) _111612b20_TupleExpr(jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_29034_parts.len())))));
	{
		auto __julec_range_expr = _29034_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			jule::Slice<_111613f20_Token> _112190570_part = *__julec_range_begin;
			_iter_begin_4630450896:;
			{
				_29117_tuple->_field_expr[static_cast<jule::Int>(_112190570_i)]=(*this)._method_build(_112190570_part);
			}
			_iter_next_4630450896:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_part = *__julec_range_begin; goto _iter_begin_4630450896; }
			_iter_end_4630450896:;
		}
	}
	return _29117_tuple;
}



inline jule::Ref<_111612b20_LitExpr> _112190570_ExprBuilder::_method_build_lit(_111613f20_Token _30028_token) {
	return jule::new_struct<_111612b20_LitExpr>(new( std::nothrow ) _111612b20_LitExpr(_30028_token,_30028_token._field_kind));
}



inline jule::Ref<_111612b20_TypeDecl> _112190570_ExprBuilder::_method_build_primitive_type(_111613f20_Token _30739_token) {
	return _111680c00_build_prim_type(_30739_token);
}



inline jule::Any _112190570_ExprBuilder::_method_build_single(_111613f20_Token _31135_token) {
	{
		auto _match_expr{ _31135_token._field_id };
		if (!((6LLU) == _match_expr)) { goto _case_end_4630469376; }
		_case_begin_4630469376:;
		{
			return jule::Any((*this)._method_build_lit(_31135_token));
		}
		goto _match_end_4630463408;
		_case_end_4630469376:;
		if (!((2LLU) == _match_expr || (28LLU) == _match_expr)) { goto _case_end_4630466368; }
		_case_begin_4630466368:;
		{
			return jule::Any(_112190570_build_ident_expr(_31135_token));
		}
		goto _match_end_4630463408;
		_case_end_4630466368:;
		if (!((1LLU) == _match_expr)) { goto _case_end_4630465888; }
		_case_begin_4630465888:;
		{
			return jule::Any((*this)._method_build_primitive_type(_31135_token));
		}
		goto _match_end_4630463408;
		_case_end_4630465888:;
		_case_begin_4630465584:;
		{
			(*this)._method_push_err(_31135_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4630463408;
		_case_end_4630465584:;
		_match_end_4630463408:;
	}
}



inline jule::Ref<_111612b20_IdentExpr> _112190570_ExprBuilder::_method_build_cpp_linked_ident(jule::Slice<_111613f20_Token> _32945_tokens) {
	if (_32945_tokens[static_cast<jule::Int>(0LL)]._field_id != 31LLU) {
		return jule::new_ref<_111612b20_IdentExpr>();
	} else if (_32945_tokens[static_cast<jule::Int>(1LL)]._field_id != 20LLU) {
		(*this)._method_push_err(_32945_tokens[static_cast<jule::Int>(1LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_IdentExpr>();
	}
	_111613f20_Token _33617_token = _32945_tokens[static_cast<jule::Int>(2LL)];
	if (_33617_token._field_id != 2LLU) {
		(*this)._method_push_err(_32945_tokens[static_cast<jule::Int>(2LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_IdentExpr>();
	}
	jule::Ref<_111612b20_IdentExpr> _34117_expr = _112190570_build_ident_expr(_33617_token);
	_34117_expr->_field_cpp_linked=true;
	return _34117_expr;
}



inline jule::Ref<_111612b20_UnaryExpr> _112190570_ExprBuilder::_method_build_unary(jule::Slice<_111613f20_Token> _34634_tokens) {
	_111613f20_Token _34717_op = _34634_tokens[static_cast<jule::Int>(0LL)];
	if (_34634_tokens.len() == 1LL) {
		(*this)._method_push_err(_34717_op,jule::Str("missing_expr_for_unary", 22),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_UnaryExpr>();
	} else if ((!(_111613f20_is_unary_op(_34717_op._field_kind)))) {
		(*this)._method_push_err(_34717_op,jule::Str("invalid_op_for_unary", 20),jule::Slice<jule::Any>({jule::Any(_34717_op._field_kind)}));
		return jule::new_ref<_111612b20_UnaryExpr>();
	}
	_34634_tokens=_34634_tokens.slice(static_cast<jule::Int>(1LL));
	return jule::new_struct<_111612b20_UnaryExpr>(new( std::nothrow ) _111612b20_UnaryExpr(_34717_op,(*this)._method_build(_34634_tokens)));
}



inline jule::Ref<_111612b20_SubIdentExpr> _112190570_ExprBuilder::_method_build_obj_sub_ident(jule::Slice<_111613f20_Token> _36742_tokens) {
	jule::I64 _36817_i = _36742_tokens.len() - 1LL;
	_111613f20_Token _36917_ident_token = _36742_tokens[static_cast<jule::Int>(_36817_i)];
	(_36817_i)--;
	_36742_tokens=_36742_tokens.slice(0LL,static_cast<jule::Int>(_36817_i));
	if (_36742_tokens.len() == 0LL) {
		(*this)._method_push_err(_36917_ident_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_SubIdentExpr>();
	}
	return jule::new_struct<_111612b20_SubIdentExpr>(new( std::nothrow ) _111612b20_SubIdentExpr(jule::Bool(),(*this)._method_build(_36742_tokens),_36917_ident_token));
}



inline jule::Ref<_111612b20_NsSelectionExpr> _112190570_ExprBuilder::_method_build_ns_sub_ident(jule::Slice<_111613f20_Token> _38241_tokens) {
	jule::Ref<_111612b20_NsSelectionExpr> _38317_ns = jule::new_struct<_111612b20_NsSelectionExpr>(new( std::nothrow ) _111612b20_NsSelectionExpr());
	{
		auto __julec_range_expr = _38241_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			_111613f20_Token _112190570_token = *__julec_range_begin;
			_iter_begin_4630535552:;
			{
				if ((_112190570_i % 2LL) == 0LL) {
					if (_112190570_token._field_id != 2LLU) {
						(*this)._method_push_err(_112190570_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
					}
					_38317_ns->_field_ns=append(_38317_ns->_field_ns,jule::Slice<_111613f20_Token>({_112190570_token}));
				} else if (_112190570_token._field_id != 23LLU) {
					(*this)._method_push_err(_112190570_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				}
			}
			_iter_next_4630535552:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_token = *__julec_range_begin; goto _iter_begin_4630535552; }
			_iter_end_4630535552:;
		}
	}
	_38317_ns->_field_ident=_38317_ns->_field_ns[static_cast<jule::Int>(_38317_ns->_field_ns.len() - 1LL)];
	_38317_ns->_field_ns=_38317_ns->_field_ns.slice(0LL,static_cast<jule::Int>(_38317_ns->_field_ns.len() - 1LL));
	return _38317_ns;
}



inline jule::Ref<_111612b20_TypeDecl> _112190570_ExprBuilder::_method_build_type(jule::Slice<_111613f20_Token> _39933_tokens) {
	jule::Int _40017_i = 0LL;
	jule::Ref<_111612b20_TypeDecl> _40118_t;
	jule::Bool _40121_ok;
	std::tie(_40118_t,_40121_ok) = (*this)._field_p->_method_build_type(_39933_tokens,(&(_40017_i)),false);
	if ((!(_40121_ok))) {
		(*this)._method_push_err(_39933_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_TypeDecl>();
	}
	if (_40017_i < _39933_tokens.len()) {
		(*this)._method_push_err(_39933_tokens[static_cast<jule::Int>(_40017_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	return _40118_t;
}



inline jule::Any _112190570_ExprBuilder::_method_build_sub_ident(jule::Slice<_111613f20_Token> _41338_tokens) {
	jule::I64 _41413_i = _41338_tokens.len() - 2LL;
	_111613f20_Token _41513_token = _41338_tokens[static_cast<jule::Int>(_41413_i)];
	{
		auto _match_expr{ _41513_token._field_id };
		if (!((20LLU) == _match_expr)) { goto _case_end_4630571216; }
		_case_begin_4630571216:;
		{
			return jule::Any((*this)._method_build_obj_sub_ident(_41338_tokens));
		}
		goto _match_end_4630569936;
		_case_end_4630571216:;
		if (!((23LLU) == _match_expr)) { goto _case_end_4630571328; }
		_case_begin_4630571328:;
		{
			return jule::Any((*this)._method_build_ns_sub_ident(_41338_tokens));
		}
		goto _match_end_4630569936;
		_case_end_4630571328:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4630571440; }
		_case_begin_4630571440:;
		{
			if (_41513_token._field_kind == jule::Str("]", 1)) {
				return jule::Any((*this)._method_build_type(_41338_tokens));
			}
		}
		goto _match_end_4630569936;
		_case_end_4630571440:;
		_match_end_4630569936:;
	}
	(*this)._method_push_err(_41513_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	return jule::Any(nullptr);
}



inline jule::Ref<_111612b20_VariadicExpr> _112190570_ExprBuilder::_method_build_variadic(jule::Slice<_111613f20_Token> _43437_tokens) {
	_111613f20_Token _43517_token = _43437_tokens[static_cast<jule::Int>(_43437_tokens.len() - 1LL)];
	_43437_tokens=_43437_tokens.slice(0LL,static_cast<jule::Int>(_43437_tokens.len() - 1LL));
	return jule::new_struct<_111612b20_VariadicExpr>(new( std::nothrow ) _111612b20_VariadicExpr(_43517_token,(*this)._method_build(_43437_tokens)));
}



inline jule::Any _112190570_ExprBuilder::_method_build_op_right(jule::Slice<_111613f20_Token> _44337_tokens) {
	_111613f20_Token _44417_token = _44337_tokens[static_cast<jule::Int>(_44337_tokens.len() - 1LL)];
	{
		auto _match_expr{ _44417_token._field_kind };
		if (!((jule::Str("...", 3)) == _match_expr)) { goto _case_end_4630596336; }
		_case_begin_4630596336:;
		{
			return jule::Any((*this)._method_build_variadic(_44337_tokens));
		}
		goto _match_end_4630592064;
		_case_end_4630596336:;
		_case_begin_4630592736:;
		{
			(*this)._method_push_err(_44417_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4630592064;
		_case_end_4630592736:;
		_match_end_4630592064:;
	}
}



inline jule::Any _112190570_ExprBuilder::_method_build_between_parentheses(jule::Slice<_111613f20_Token> _45548_tokens) {
	_111613f20_Token _45613_token = _45548_tokens[static_cast<jule::Int>(0LL)];
	_45548_tokens=_45548_tokens.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_45548_tokens.len() - 1LL));
	if (_45548_tokens.len() == 0LL) {
		(*this)._method_push_err(_45613_token,jule::Str("missing_expr", 12),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	return (*this)._method_build(_45548_tokens);
}



inline jule::Ref<_111612b20_CastExpr> _112190570_ExprBuilder::_method_try_build_cast(jule::Slice<_111613f20_Token> _46537_tokens) {
	jule::Int _46617_range_n = 0LL;
	_111613f20_Token _46713_error_token = _46537_tokens[static_cast<jule::Int>(0LL)];
	{
		auto __julec_range_expr = _46537_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			_111613f20_Token _112190570_token = *__julec_range_begin;
			_iter_begin_4630613312:;
			{
				if (_112190570_token._field_id == 3LLU) {
					{
						auto _match_expr{ _112190570_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4630618064; }
						_case_begin_4630618064:;
						{
							(_46617_range_n)++;
							goto _iter_next_4630613312;
						}
						goto _match_end_4630616032;
						_case_end_4630618064:;
						_case_begin_4630616944:;
						{
							(_46617_range_n)--;
						}
						goto _match_end_4630616032;
						_case_end_4630616944:;
						_match_end_4630616032:;
					}
				}
				if (_46617_range_n > 0LL) {
					goto _iter_next_4630613312;
				} else if ((_112190570_i + 1LL) == _46537_tokens.len()) {
					return jule::new_ref<_111612b20_CastExpr>();
				}
				jule::Slice<_111613f20_Token> _48821_type_tokens = _46537_tokens.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_112190570_i));
				jule::Slice<_111613f20_Token> _48921_expr_tokens = _46537_tokens.slice(static_cast<jule::Int>(_112190570_i + 1LL));
				if (_48921_expr_tokens.len() == 0LL) {
					return jule::new_ref<_111612b20_CastExpr>();
				}
				_111613f20_Token _49617_token = _48921_expr_tokens[static_cast<jule::Int>(0LL)];
				if ((_49617_token._field_id != 3LLU) || (_49617_token._field_kind != jule::Str("(", 1))) {
					return jule::new_ref<_111612b20_CastExpr>();
				}
				jule::Ref<_111612b20_CastExpr> _50121_cast = jule::new_struct<_111612b20_CastExpr>(new( std::nothrow ) _111612b20_CastExpr());
				if (_48921_expr_tokens.len() == 2LL) {
					(*this)._method_push_err(_46713_error_token,jule::Str("missing_expr", 12),jule::Slice<jule::Any>({}));
				}
				jule::Int _50821_type_index = 0LL;
				jule::Ref<_111612b20_TypeDecl> _50922_t;
				jule::Bool _50925_ok;
				std::tie(_50922_t,_50925_ok) = (*this)._field_p->_method_build_type(_48821_type_tokens,(&(_50821_type_index)),true);
				if (_50925_ok && (_50821_type_index < _48821_type_tokens.len())) {
					(*this)._method_push_err(_48821_type_tokens[static_cast<jule::Int>(_50821_type_index)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				} else if ((!(_50925_ok))) {
					return _50121_cast;
				}
				_50121_cast->_field_kind=_50922_t;
				jule::Int _51721_i = 0LL;
				_111681860_range(_51721_i,jule::Str("(", 1),jule::Str(")", 1),_48921_expr_tokens);
				if (_51721_i < _48921_expr_tokens.len()) {
					return jule::new_ref<_111612b20_CastExpr>();
				}
				_50121_cast->_field_expr=(*this)._method_build(_48921_expr_tokens.slice(0LL,static_cast<jule::Int>(_51721_i)));
				return _50121_cast;
			}
			_iter_next_4630613312:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_token = *__julec_range_begin; goto _iter_begin_4630613312; }
			_iter_end_4630613312:;
		}
	}
	return jule::new_ref<_111612b20_CastExpr>();
}



inline void _112190570_ExprBuilder::_method_push_arg(jule::Slice<jule::Ref<_111612b20_Expr>>& _53032_args,jule::Slice<_111613f20_Token> _53051_tokens,_111613f20_Token _53068_err_token) {
	if (_53051_tokens.len() == 0LL) {
		(*this)._method_push_err(_53068_err_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return;
	}
	_53032_args=append(_53032_args,jule::Slice<jule::Ref<_111612b20_Expr>>({(*this)._method_build_from_tokens(_53051_tokens)}));
}



inline jule::Slice<jule::Ref<_111612b20_Expr>> _112190570_ExprBuilder::_method_build_args(jule::Slice<_111613f20_Token> _53833_tokens) {
	if (_53833_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_111612b20_Expr>> _54417_args = nullptr;
	jule::Int _54517_last = 0LL;
	jule::Int _54617_range_n = 0LL;
	_53833_tokens=_53833_tokens.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_53833_tokens.len() - 1LL));
	{
		auto __julec_range_expr = _53833_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			_111613f20_Token _112190570_token = *__julec_range_begin;
			_iter_begin_4630673376:;
			{
				if (_112190570_token._field_id == 3LLU) {
					{
						auto _match_expr{ _112190570_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4630677904; }
						_case_begin_4630677904:;
						{
							(_54617_range_n)++;
						}
						goto _match_end_4630675872;
						_case_end_4630677904:;
						_case_begin_4630676784:;
						{
							(_54617_range_n)--;
						}
						goto _match_end_4630675872;
						_case_end_4630676784:;
						_match_end_4630675872:;
					}
				}
				if ((_54617_range_n > 0LL) || (_112190570_token._field_id != 8LLU)) {
					goto _iter_next_4630673376;
				}
				(*this)._method_push_arg(_54417_args,_53833_tokens.slice(static_cast<jule::Int>(_54517_last),static_cast<jule::Int>(_112190570_i)),_112190570_token);
				_54517_last=_112190570_i + 1LL;
			}
			_iter_next_4630673376:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_token = *__julec_range_begin; goto _iter_begin_4630673376; }
			_iter_end_4630673376:;
		}
	}
	if (_54517_last < _53833_tokens.len()) {
		if (_54517_last == 0LL) {
			if (_53833_tokens.len() > 0LL) {
				(*this)._method_push_arg(_54417_args,_53833_tokens.slice(static_cast<jule::Int>(_54517_last)),_53833_tokens[static_cast<jule::Int>(_54517_last)]);
			}
		} else {
			(*this)._method_push_arg(_54417_args,_53833_tokens.slice(static_cast<jule::Int>(_54517_last)),_53833_tokens[static_cast<jule::Int>(_54517_last - 1LL)]);
		}
	}
	return _54417_args;
}



inline jule::Slice<jule::Ref<_111612b20_TypeDecl>> _112190570_ExprBuilder::_method_build_call_generics(jule::Slice<_111613f20_Token> _58142_tokens) {
	if (_58142_tokens.len() == 0LL) {
		return nullptr;
	}
	_58142_tokens=_58142_tokens.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_58142_tokens.len() - 1LL));
	jule::Slice<jule::Slice<_111613f20_Token>> _58718_parts;
	jule::Slice<_1316b4080_Log> _58725_errs;
	std::tie(_58718_parts,_58725_errs) = _111681860_parts(_58142_tokens,8LLU,true);
	jule::Slice<jule::Ref<_111612b20_TypeDecl>> _58817_generics = jule::Slice<jule::Ref<_111612b20_TypeDecl>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_58718_parts.len())));
	(*this)._field_p->_field_errors=append((*this)._field_p->_field_errors,_58725_errs);
	{
		auto __julec_range_expr = _58718_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			jule::Slice<_111613f20_Token> _112190570_part = *__julec_range_begin;
			_iter_begin_4630705088:;
			{
				if (_112190570_part.len() == 0LL) {
					goto _iter_next_4630705088;
				}
				jule::Int _59421_j = 0LL;
				jule::Ref<_111612b20_TypeDecl> _59522_generic;
				std::tie(_59522_generic,std::ignore) = (*this)._field_p->_method_build_type(_112190570_part,(&(_59421_j)),true);
				if (_59421_j < _112190570_part.len()) {
					(*this)._method_push_err(_112190570_part[static_cast<jule::Int>(_59421_j)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				}
				_58817_generics[static_cast<jule::Int>(_112190570_i)]=_59522_generic;
			}
			_iter_next_4630705088:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_part = *__julec_range_begin; goto _iter_begin_4630705088; }
			_iter_end_4630705088:;
		}
	}
	return _58817_generics;
}



inline jule::Ref<_111612b20_FnCallExpr> _112190570_ExprBuilder::_method_build_fn_call(_111613f20_Token _60536_token,jule::Ref<_112190570_CallData> _60554_data) {
	return jule::new_struct<_111612b20_FnCallExpr>(new( std::nothrow ) _111612b20_FnCallExpr(_60536_token,(*this)._method_build_from_tokens(_60554_data->_field_expr_tokens),(*this)._method_build_call_generics(_60554_data->_field_generics_tokens),(*this)._method_build_args(_60554_data->_field_args_tokens),jule::Bool()));
}



inline jule::Any _112190570_ExprBuilder::_method_build_parentheses_range(jule::Slice<_111613f20_Token> _61446_tokens) {
	_111613f20_Token _61517_token = _61446_tokens[static_cast<jule::Int>(0LL)];
	{
		auto _match_expr{ _61517_token._field_id };
		if (!((3LLU) == _match_expr)) { goto _case_end_4630732576; }
		_case_begin_4630732576:;
		{
			{
				auto _match_expr{ _61517_token._field_kind };
				if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4630734528; }
				_case_begin_4630734528:;
				{
					jule::Ref<_111612b20_CastExpr> _62025_expr = (*this)._method_try_build_cast(_61446_tokens);
					if (jule::real(_62025_expr)) {
						return jule::Any(_62025_expr);
					}
				}
				goto _match_end_4630733104;
				_case_end_4630734528:;
				_match_end_4630733104:;
			}
		}
		goto _match_end_4630730672;
		_case_end_4630732576:;
		_match_end_4630730672:;
	}
	jule::Ref<_112190570_CallData> _62717_data = _112190570_get_call_data(_61446_tokens);
	if (_62717_data->_field_expr_tokens.len() == 0LL) {
		return (*this)._method_build_between_parentheses(_62717_data->_field_args_tokens);
	}
	return jule::Any((*this)._method_build_fn_call(_61517_token,_62717_data));
}



inline jule::Ref<_111612b20_UnsafeExpr> _112190570_ExprBuilder::_method_build_unsafe_expr(jule::Slice<_111613f20_Token> _63840_tokens) {
	_111613f20_Token _63917_token = _63840_tokens[static_cast<jule::Int>(0LL)];
	_63840_tokens=_63840_tokens.slice(static_cast<jule::Int>(1LL));
	jule::Int _64117_i = 0LL;
	jule::Slice<_111613f20_Token> _64217_range_tokens = _111681860_range(_64117_i,jule::Str("{", 1),jule::Str("}", 1),_63840_tokens);
	if (_64217_range_tokens.len() == 0LL) {
		(*this)._method_push_err(_63840_tokens[static_cast<jule::Int>(0LL)],jule::Str("missing_expr", 12),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_UnsafeExpr>();
	}
	return jule::new_struct<_111612b20_UnsafeExpr>(new( std::nothrow ) _111612b20_UnsafeExpr(_63917_token,(*this)._method_build_from_tokens(_64217_range_tokens)->_field_kind));
}



inline jule::Ref<_111612b20_FnDecl> _112190570_ExprBuilder::_method_build_anon_fn(jule::Slice<_111613f20_Token> _65336_tokens) {
	return (*this)._field_p->_method_build_fn(_65336_tokens,false,true,false);
}



inline jule::Any _112190570_ExprBuilder::_method_build_unsafe(jule::Slice<_111613f20_Token> _65735_tokens) {
	if (_65735_tokens.len() == 0LL) {
		(*this)._method_push_err(_65735_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	{
		auto _match_expr{ _65735_tokens[static_cast<jule::Int>(1LL)]._field_id };
		if (!((33LLU) == _match_expr)) { goto _case_end_4630772496; }
		_case_begin_4630772496:;
		{
			return jule::Any((*this)._method_build_anon_fn(_65735_tokens));
		}
		goto _match_end_4630769760;
		_case_end_4630772496:;
		_case_begin_4630770352:;
		{
			return jule::Any((*this)._method_build_unsafe_expr(_65735_tokens));
		}
		goto _match_end_4630769760;
		_case_end_4630770352:;
		_match_end_4630769760:;
	}
}



inline void _112190570_ExprBuilder::_method_push_range_lit_part(jule::Slice<_111613f20_Token> _67342_part,_111613f20_Token _6749_error_token,jule::Slice<jule::Slice<_111613f20_Token>>& _67434_parts) {
	if (_67342_part.len() == 0LL) {
		(*this)._method_push_err(_6749_error_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return;
	}
	_67434_parts=append(_67434_parts,jule::Slice<jule::Slice<_111613f20_Token>>({_67342_part}));
}



inline jule::Slice<jule::Slice<_111613f20_Token>> _112190570_ExprBuilder::_method_get_brace_range_lit_expr_parts(jule::Slice<_111613f20_Token> _68353_tokens) {
	if (_68353_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_111613f20_Token>> _68917_parts = nullptr;
	jule::Int _69117_last = 0LL;
	jule::Int _69217_range_n = 0LL;
	_68353_tokens=_68353_tokens.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_68353_tokens.len() - 1LL));
	{
		auto __julec_range_expr = _68353_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			_111613f20_Token _112190570_token = *__julec_range_begin;
			_iter_begin_4630793312:;
			{
				if (_112190570_token._field_id == 3LLU) {
					{
						auto _match_expr{ _112190570_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4630797840; }
						_case_begin_4630797840:;
						{
							(_69217_range_n)++;
						}
						goto _match_end_4630795808;
						_case_end_4630797840:;
						_case_begin_4630796720:;
						{
							(_69217_range_n)--;
						}
						goto _match_end_4630795808;
						_case_end_4630796720:;
						_match_end_4630795808:;
					}
				}
				if ((_69217_range_n > 0LL) || (_112190570_token._field_id != 8LLU)) {
					goto _iter_next_4630793312;
				}
				(*this)._method_push_range_lit_part(_68353_tokens.slice(static_cast<jule::Int>(_69117_last),static_cast<jule::Int>(_112190570_i)),_112190570_token,_68917_parts);
				_69117_last=_112190570_i + 1LL;
			}
			_iter_next_4630793312:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_token = *__julec_range_begin; goto _iter_begin_4630793312; }
			_iter_end_4630793312:;
		}
	}
	if (_69117_last < _68353_tokens.len()) {
		if (_69117_last == 0LL) {
			if (_68353_tokens.len() > 0LL) {
				(*this)._method_push_range_lit_part(_68353_tokens.slice(static_cast<jule::Int>(_69117_last)),_68353_tokens[static_cast<jule::Int>(_69117_last)],_68917_parts);
			}
		} else {
			(*this)._method_push_range_lit_part(_68353_tokens.slice(static_cast<jule::Int>(_69117_last)),_68353_tokens[static_cast<jule::Int>(_69117_last - 1LL)],_68917_parts);
		}
	}
	return _68917_parts;
}



inline jule::Ref<_111612b20_FieldExprPair> _112190570_ExprBuilder::_method_build_field_expr_pair(jule::Slice<_111613f20_Token> _72644_tokens) {
	jule::Ref<_111612b20_FieldExprPair> _72717_pair = jule::new_struct<_111612b20_FieldExprPair>(new( std::nothrow ) _111612b20_FieldExprPair(_72644_tokens[static_cast<jule::Int>(0LL)],jule::Any()));
	_72644_tokens=_72644_tokens.slice(static_cast<jule::Int>(2LL));
	_72717_pair->_field_expr=(*this)._method_build_from_tokens(_72644_tokens)->_field_kind;
	return _72717_pair;
}



inline jule::Any _112190570_ExprBuilder::_method_build_struct_lit_expr(jule::Slice<_111613f20_Token> _73544_tokens) {
	_111613f20_Token _73613_token = _73544_tokens[static_cast<jule::Int>(0LL)];
	if (_73613_token._field_id == 2LLU) {
		if (_73544_tokens.len() > 1LL) {
			_111613f20_Token _73921_token = _73544_tokens[static_cast<jule::Int>(1LL)];
			if (_73921_token._field_id == 11LLU) {
				return jule::Any((*this)._method_build_field_expr_pair(_73544_tokens));
			}
		}
	}
	return jule::Any((*this)._method_build_from_tokens(_73544_tokens));
}



inline jule::Slice<jule::Any> _112190570_ExprBuilder::_method_build_struct_lit_exprs(jule::Slice<_111613f20_Token> _74845_tokens) {
	jule::Slice<jule::Slice<_111613f20_Token>> _74917_parts = (*this)._method_get_brace_range_lit_expr_parts(_74845_tokens);
	if (_74917_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Any> _75417_pairs = jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_74917_parts.len())));
	{
		auto __julec_range_expr = _74917_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			jule::Slice<_111613f20_Token> _112190570_part = *__julec_range_begin;
			_iter_begin_4630840432:;
			{
				_75417_pairs[static_cast<jule::Int>(_112190570_i)]=(*this)._method_build_struct_lit_expr(_112190570_part);
			}
			_iter_next_4630840432:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_part = *__julec_range_begin; goto _iter_begin_4630840432; }
			_iter_end_4630840432:;
		}
	}
	return _75417_pairs;
}



inline jule::Ref<_111612b20_StructLit> _112190570_ExprBuilder::_method_build_typed_struct_literal(jule::Slice<_111613f20_Token> _76149_tokens) {
	jule::Int _76217_i = 0LL;
	jule::Ref<_111612b20_TypeDecl> _76318_t;
	jule::Bool _76321_ok;
	std::tie(_76318_t,_76321_ok) = (*this)._field_p->_method_build_type(_76149_tokens,(&(_76217_i)),true);
	if ((!(_76321_ok))) {
		return jule::new_ref<_111612b20_StructLit>();
	} else if (_76217_i >= _76149_tokens.len()) {
		(*this)._method_push_err(_76149_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_StructLit>();
	}
	_76149_tokens=_76149_tokens.slice(static_cast<jule::Int>(_76217_i));
	_111613f20_Token _77213_token = _76149_tokens[static_cast<jule::Int>(0LL)];
	if ((_77213_token._field_id != 3LLU) || (_77213_token._field_kind != jule::Str("{", 1))) {
		(*this)._method_push_err(_77213_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_StructLit>();
	}
	return jule::new_struct<_111612b20_StructLit>(new( std::nothrow ) _111612b20_StructLit(_76318_t,(*this)._method_build_struct_lit_exprs(_76149_tokens)));
}



inline jule::Any _112190570_ExprBuilder::_method_build_brace_lit_part(jule::Slice<_111613f20_Token> _78443_tokens) {
	jule::Slice<_111613f20_Token> _78518_l;
	jule::Slice<_111613f20_Token> _78525_r;
	std::tie(_78518_l,_78525_r) = _112190570_split_colon(_78443_tokens);
	if (_78518_l != nullptr) {
		return jule::Any(jule::new_struct<_111612b20_KeyValPair>(new( std::nothrow ) _111612b20_KeyValPair((*this)._method_build_from_tokens(_78518_l)->_field_kind,(*this)._method_build_from_tokens(_78525_r)->_field_kind,_78443_tokens[static_cast<jule::Int>(_78518_l.len())])));
	}
	return jule::Any((*this)._method_build_from_tokens(_78443_tokens));
}



inline jule::Ref<_111612b20_BraceLit> _112190570_ExprBuilder::_method_build_brace_lit(jule::Slice<_111613f20_Token> _79738_tokens) {
	jule::Ref<_111612b20_BraceLit> _79817_lit = jule::new_struct<_111612b20_BraceLit>(new( std::nothrow ) _111612b20_BraceLit(_79738_tokens[static_cast<jule::Int>(0LL)],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_111613f20_Token>> _80217_parts = (*this)._method_get_brace_range_lit_expr_parts(_79738_tokens);
	if (_80217_parts == nullptr) {
		return _79817_lit;
	}
	_79817_lit->_field_exprs=jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_80217_parts.len())));
	{
		auto __julec_range_expr = _80217_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			jule::Slice<_111613f20_Token> _112190570_part = *__julec_range_begin;
			_iter_begin_4630884128:;
			{
				_79817_lit->_field_exprs[static_cast<jule::Int>(_112190570_i)]=(*this)._method_build_brace_lit_part(_112190570_part);
			}
			_iter_next_4630884128:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_part = *__julec_range_begin; goto _iter_begin_4630884128; }
			_iter_end_4630884128:;
		}
	}
	return _79817_lit;
}



inline jule::Any _112190570_ExprBuilder::_method_build_brace_range(jule::Slice<_111613f20_Token> _81540_tokens) {
	jule::Slice<_111613f20_Token> _81614_expr_tokens;
	jule::Int _81627_range_n;
	std::tie(_81614_expr_tokens,_81627_range_n) = _112190570_get_range_expr_tokens(_81540_tokens);
	{
		if (!((_81614_expr_tokens.len() == 0LL))) { goto _case_end_4630892656; }
		_case_begin_4630892656:;
		{
			return jule::Any((*this)._method_build_brace_lit(_81540_tokens));
		}
		goto _match_end_4630892208;
		_case_end_4630892656:;
		if (!((_81627_range_n > 0LL))) { goto _case_end_4630892768; }
		_case_begin_4630892768:;
		{
			(*this)._method_push_err(_81540_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4630892208;
		_case_end_4630892768:;
		_match_end_4630892208:;
	}
	{
		auto _match_expr{ _81614_expr_tokens[static_cast<jule::Int>(0LL)]._field_id };
		if (!((35LLU) == _match_expr)) { goto _case_end_4630904144; }
		_case_begin_4630904144:;
		{
			return (*this)._method_build_unsafe(_81540_tokens);
		}
		goto _match_end_4630896400;
		_case_end_4630904144:;
		if (!((33LLU) == _match_expr)) { goto _case_end_4630901216; }
		_case_begin_4630901216:;
		{
			return jule::Any((*this)._method_build_anon_fn(_81540_tokens));
		}
		goto _match_end_4630896400;
		_case_end_4630901216:;
		if (!((2LLU) == _match_expr || (31LLU) == _match_expr)) { goto _case_end_4630900160; }
		_case_begin_4630900160:;
		{
			return jule::Any((*this)._method_build_typed_struct_literal(_81540_tokens));
		}
		goto _match_end_4630896400;
		_case_end_4630900160:;
		_case_begin_4630899856:;
		{
			(*this)._method_push_err(_81614_expr_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4630896400;
		_case_end_4630899856:;
		_match_end_4630896400:;
	}
}



inline jule::Slice<jule::Slice<_111613f20_Token>> _112190570_ExprBuilder::_method_get_enumerable_parts(jule::Slice<_111613f20_Token> _84543_tokens) {
	_84543_tokens=_84543_tokens.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_84543_tokens.len() - 1LL));
	jule::Slice<jule::Slice<_111613f20_Token>> _84718_parts;
	jule::Slice<_1316b4080_Log> _84725_errors;
	std::tie(_84718_parts,_84725_errors) = _111681860_parts(_84543_tokens,8LLU,true);
	(*this)._field_p->_field_errors=append((*this)._field_p->_field_errors,_84725_errors);
	return _84718_parts;
}



inline jule::Ref<_111612b20_SliceExpr> _112190570_ExprBuilder::_method_build_slice(jule::Slice<_111613f20_Token> _85234_tokens) {
	jule::Ref<_111612b20_SliceExpr> _85317_slc = jule::new_struct<_111612b20_SliceExpr>(new( std::nothrow ) _111612b20_SliceExpr(_85234_tokens[static_cast<jule::Int>(0LL)],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_111613f20_Token>> _85717_parts = (*this)._method_get_enumerable_parts(_85234_tokens);
	if (_85717_parts.len() == 0LL) {
		return _85317_slc;
	}
	_85317_slc->_field_elems=jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_85717_parts.len())));
	{
		auto __julec_range_expr = _85717_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			jule::Slice<_111613f20_Token> _112190570_p = *__julec_range_begin;
			_iter_begin_4630926128:;
			{
				_85317_slc->_field_elems[static_cast<jule::Int>(_112190570_i)]=(*this)._method_build_from_tokens(_112190570_p)->_field_kind;
			}
			_iter_next_4630926128:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_p = *__julec_range_begin; goto _iter_begin_4630926128; }
			_iter_end_4630926128:;
		}
	}
	return _85317_slc;
}



inline jule::Ref<_111612b20_IndexingExpr> _112190570_ExprBuilder::_method_build_indexing(jule::Slice<_111613f20_Token> _87037_expr_tokens,jule::Slice<_111613f20_Token> _87113_tokens,_111613f20_Token _87134_error_token) {
	_87113_tokens=_87113_tokens.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_87113_tokens.len() - 1LL));
	return jule::new_struct<_111612b20_IndexingExpr>(new( std::nothrow ) _111612b20_IndexingExpr(_87134_error_token,(*this)._method_build_from_tokens(_87037_expr_tokens)->_field_kind,(*this)._method_build_from_tokens(_87113_tokens)->_field_kind));
}



inline jule::Ref<_111612b20_SlicingExpr> _112190570_ExprBuilder::_method_build_slicing(jule::Slice<_111613f20_Token> _88036_expr_tokens,jule::Slice<_111613f20_Token> _88062_slicing_tokens,jule::Int _8819_colon,_111613f20_Token _88121_error_token) {
	jule::Ref<_111612b20_SlicingExpr> _88217_slc = jule::new_struct<_111612b20_SlicingExpr>(new( std::nothrow ) _111612b20_SlicingExpr(_88121_error_token,(*this)._method_build_from_tokens(_88036_expr_tokens)->_field_kind,jule::Any(),jule::Any()));
	jule::Slice<_111613f20_Token> _88717_start_expr_tokens = _88062_slicing_tokens.slice(0LL,static_cast<jule::Int>(_8819_colon));
	if (_88717_start_expr_tokens.len() > 0LL) {
		_88217_slc->_field_start=(*this)._method_build_from_tokens(_88717_start_expr_tokens)->_field_kind;
	}
	jule::Slice<_111613f20_Token> _89217_to_expr_tokens = _88062_slicing_tokens.slice(static_cast<jule::Int>(_8819_colon + 1LL));
	if (_89217_to_expr_tokens.len() > 0LL) {
		_88217_slc->_field_to=(*this)._method_build_from_tokens(_89217_to_expr_tokens)->_field_kind;
	}
	return _88217_slc;
}



inline jule::Any _112190570_ExprBuilder::_method_build_bracket_range(jule::Slice<_111613f20_Token> _90042_tokens) {
	_111613f20_Token _90117_error_token = _90042_tokens[static_cast<jule::Int>(0LL)];
	jule::Slice<_111613f20_Token> _90218_expr_tokens;
	jule::Int _90231_range_n;
	std::tie(_90218_expr_tokens,_90231_range_n) = _112190570_get_range_expr_tokens(_90042_tokens);
	{
		if (!((_90218_expr_tokens.len() == 0LL))) { goto _case_end_4630965280; }
		_case_begin_4630965280:;
		{
			return jule::Any((*this)._method_build_slice(_90042_tokens));
		}
		goto _match_end_4630965072;
		_case_end_4630965280:;
		if (!(((_90218_expr_tokens.len() == 0LL) || (_90231_range_n > 0LL)))) { goto _case_end_4630965392; }
		_case_begin_4630965392:;
		{
			(*this)._method_push_err(_90117_error_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4630965072;
		_case_end_4630965392:;
		_match_end_4630965072:;
	}
	_90042_tokens=_90042_tokens.slice(static_cast<jule::Int>(_90218_expr_tokens.len()));
	jule::Int _92117_i = 0LL;
	jule::Slice<_111613f20_Token> _92218_slicing_tokens;
	jule::Int _92234_colon;
	std::tie(_92218_slicing_tokens,_92234_colon) = _111680c00_split_map_range(_90042_tokens,_92117_i);
	if (_92234_colon != -1LL) {
		return jule::Any((*this)._method_build_slicing(_90218_expr_tokens,_92218_slicing_tokens,_92234_colon,_90117_error_token));
	}
	return jule::Any((*this)._method_build_indexing(_90218_expr_tokens,_90042_tokens,_90117_error_token));
}



inline jule::Any _112190570_ExprBuilder::_method_build_data(jule::Slice<_111613f20_Token> _92933_tokens) {
	{
		auto _match_expr{ _92933_tokens.len() };
		if (!((0LL) == _match_expr)) { goto _case_end_4630982272; }
		_case_begin_4630982272:;
		{
			return jule::Any(nullptr);
		}
		goto _match_end_4630981264;
		_case_end_4630982272:;
		if (!((1LL) == _match_expr)) { goto _case_end_4630982384; }
		_case_begin_4630982384:;
		{
			return (*this)._method_build_single(_92933_tokens[static_cast<jule::Int>(0LL)]);
		}
		goto _match_end_4630981264;
		_case_end_4630982384:;
		if (!((3LL) == _match_expr)) { goto _case_end_4630982496; }
		_case_begin_4630982496:;
		{
			if (_92933_tokens[static_cast<jule::Int>(0LL)]._field_id == 31LLU) {
				return jule::Any((*this)._method_build_cpp_linked_ident(_92933_tokens));
			}
		}
		goto _match_end_4630981264;
		_case_end_4630982496:;
		_match_end_4630981264:;
	}
	_111613f20_Token _94317_token = _92933_tokens[static_cast<jule::Int>(0LL)];
	{
		auto _match_expr{ _94317_token._field_id };
		if (!((7LLU) == _match_expr)) { goto _case_end_4630991408; }
		_case_begin_4630991408:;
		{
			if ((_92933_tokens.len() > 1LL) && (_94317_token._field_kind == jule::Str("*", 1))) {
				_94317_token=_92933_tokens[static_cast<jule::Int>(1LL)];
				if ((_94317_token._field_id == 1LLU) || (_94317_token._field_id == 35LLU)) {
					return jule::Any((*this)._method_build_type(_92933_tokens));
				}
			}
			return jule::Any((*this)._method_build_unary(_92933_tokens));
		}
		goto _match_end_4630985232;
		_case_end_4630991408:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4630991520; }
		_case_begin_4630991520:;
		{
			if ((_94317_token._field_kind != jule::Str("[", 1)) || (_92933_tokens.len() < 3LL)) {
				goto _match_end_4630985232;
			}
			_111613f20_Token _96117_next = _92933_tokens[static_cast<jule::Int>(1LL)];
			if ((_96117_next._field_id != 3LLU) || (_96117_next._field_kind != jule::Str("]", 1))) {
				goto _match_end_4630985232;
			}
			return jule::Any((*this)._method_build_type(_92933_tokens));
		}
		goto _match_end_4630985232;
		_case_end_4630991520:;
		_match_end_4630985232:;
	}
	_94317_token=_92933_tokens[static_cast<jule::Int>(_92933_tokens.len() - 1LL)];
	{
		auto _match_expr{ _94317_token._field_id };
		if (!((2LLU) == _match_expr)) { goto _case_end_4631008720; }
		_case_begin_4631008720:;
		{
			return (*this)._method_build_sub_ident(_92933_tokens);
		}
		goto _match_end_4631007984;
		_case_end_4631008720:;
		if (!((1LLU) == _match_expr)) { goto _case_end_4631008928; }
		_case_begin_4631008928:;
		{
			return jule::Any((*this)._method_build_type(_92933_tokens));
		}
		goto _match_end_4631007984;
		_case_end_4631008928:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4631009040; }
		_case_begin_4631009040:;
		{
			return (*this)._method_build_op_right(_92933_tokens);
		}
		goto _match_end_4631007984;
		_case_end_4631009040:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4631009152; }
		_case_begin_4631009152:;
		{
			{
				auto _match_expr{ _94317_token._field_kind };
				if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4631009920; }
				_case_begin_4631009920:;
				{
					return (*this)._method_build_parentheses_range(_92933_tokens);
				}
				goto _match_end_4631014736;
				_case_end_4631009920:;
				if (!((jule::Str("}", 1)) == _match_expr)) { goto _case_end_4631010032; }
				_case_begin_4631010032:;
				{
					return (*this)._method_build_brace_range(_92933_tokens);
				}
				goto _match_end_4631014736;
				_case_end_4631010032:;
				if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4631010144; }
				_case_begin_4631010144:;
				{
					return (*this)._method_build_bracket_range(_92933_tokens);
				}
				goto _match_end_4631014736;
				_case_end_4631010144:;
				_match_end_4631014736:;
			}
		}
		goto _match_end_4631007984;
		_case_end_4631009152:;
		_match_end_4631007984:;
	}
	(*this)._method_push_err(_92933_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	return jule::Any(nullptr);
}



inline jule::Ref<_111612b20_BinopExpr> _112190570_ExprBuilder::_method_build_binop(jule::Slice<_111613f20_Token> _99834_tokens,jule::Int _99851_i) {
	jule::Slice<_111613f20_Token> _99917_left_tokens = _99834_tokens.slice(0LL,static_cast<jule::Int>(_99851_i));
	jule::Slice<_111613f20_Token> _100017_right_tokens = _99834_tokens.slice(static_cast<jule::Int>(_99851_i + 1LL));
	if (_99917_left_tokens.len() == 0LL) {
		(*this)._method_push_err(_99834_tokens[static_cast<jule::Int>(_99851_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_BinopExpr>();
	}
	if (_100017_right_tokens.len() == 0LL) {
		(*this)._method_push_err(_99834_tokens[static_cast<jule::Int>(_99851_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_BinopExpr>();
	}
	return jule::new_struct<_111612b20_BinopExpr>(new( std::nothrow ) _111612b20_BinopExpr((*this)._method_build(_99917_left_tokens),(*this)._method_build(_100017_right_tokens),_99834_tokens[static_cast<jule::Int>(_99851_i)]));
}



inline jule::Any _112190570_ExprBuilder::_method_build(jule::Slice<_111613f20_Token> _101928_tokens) {
	jule::Int _102013_i = _112190570_find_lowest_prec_op(_101928_tokens);
	if (_102013_i == -1LL) {
		return (*this)._method_build_data(_101928_tokens);
	}
	return jule::Any((*this)._method_build_binop(_101928_tokens,_102013_i));
}



inline jule::Any _112190570_ExprBuilder::_method_build_kind(jule::Slice<_111613f20_Token> _102733_tokens) {
	jule::Slice<jule::Slice<_111613f20_Token>> _102818_parts;
	jule::Slice<_1316b4080_Log> _102825_errors;
	std::tie(_102818_parts,_102825_errors) = _111681860_parts(_102733_tokens,8LLU,true);
	if (_102825_errors != nullptr) {
		(*this)._field_p->_field_errors=append((*this)._field_p->_field_errors,_102825_errors);
		return jule::Any(nullptr);
	} else if (_102818_parts.len() > 1LL) {
		return jule::Any((*this)._method_build_tuple(_102818_parts));
	}
	return (*this)._method_build(_102733_tokens);
}



inline jule::Ref<_111612b20_Expr> _112190570_ExprBuilder::_method_build_from_tokens(jule::Slice<_111613f20_Token> _103840_tokens) {
	_103840_tokens=_112190570_eliminate_comments(_103840_tokens);
	if (_103840_tokens.len() == 0LL) {
		return jule::new_ref<_111612b20_Expr>();
	}
	return jule::new_struct<_111612b20_Expr>(new( std::nothrow ) _111612b20_Expr(_103840_tokens[static_cast<jule::Int>(0LL)],(*this)._method_build_kind(_103840_tokens)));
}







std::ostream &operator<<(std::ostream &_Stream, const _112190570_ExprBuilder &_Src) {
	_Stream << "ExprBuilder{";
	_Stream << "p:" << _Src._field_p;
	_Stream << "}";
	return _Stream;
}



inline void _111681860_Parser::_method_stop(void) {
	jule::drop((*this)._field_ast);
}



inline jule::Bool _111681860_Parser::_method_stopped(void) {
	return (!(jule::real((*this)._field_ast)));
}



inline void _111681860_Parser::_method_push_err(_111613f20_Token _23927_token,jule::Str _23941_key,jule::Slice<jule::Any> _23951_args) {
	(*this)._field_errors=append((*this)._field_errors,jule::Slice<_1316b4080_Log>({_111681860_compiler_err(_23927_token,_23941_key,_23951_args)}));
}



inline jule::Ref<_111612b20_Expr> _111681860_Parser::_method_build_expr(jule::Slice<_111613f20_Token> _24334_tokens) {
	jule::Ref<_112190570_ExprBuilder> _24417_ep = jule::new_struct<_112190570_ExprBuilder>(new( std::nothrow ) _112190570_ExprBuilder(this->self));
	jule::Ref<_111612b20_Expr> _24517_expr = _24417_ep->_method_build_from_tokens(_24334_tokens);
	return _24517_expr;
}



inline jule::Ref<_111612b20_Directive> _111681860_Parser::_method_get_directive(jule::Ref<_111612b20_Comment> _24928_c) {
	if (_24928_c->_field_text.len() <= jule::Str("jule:", 5).len()) {
		return jule::new_ref<_111612b20_Directive>();
	}
	jule::Ref<_111612b20_Directive> _25417_d = jule::new_struct<_111612b20_Directive>(new( std::nothrow ) _111612b20_Directive(_24928_c->_field_token,jule::Str(),jule::Slice<jule::Str>()));
	jule::Str _25813_pragma = _24928_c->_field_token._field_kind.slice(static_cast<jule::Int>(jule::Str("jule:", 5).len()));
	jule::Slice<jule::Str> _25917_parts = _25813_pragma.split(jule::Str(" ", 1),-1LL);
	_25417_d->_field_tag=_25917_parts[static_cast<jule::Int>(0LL)];
	_25417_d->_field_args=_25917_parts.slice(static_cast<jule::Int>(1LL));
	jule::Bool _26517_ok = false;
	{
		auto __julec_range_expr = _1316ed230_DIRECTIVES;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _111681860_kind = *__julec_range_begin;
			_iter_begin_4631093360:;
			{
				if (_25417_d->_field_tag == _111681860_kind) {
					_26517_ok=true;
					goto _iter_end_4631093360;
				}
			}
			_iter_next_4631093360:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111681860_kind = *__julec_range_begin; goto _iter_begin_4631093360; }
			_iter_end_4631093360:;
		}
	}
	if ((!(_26517_ok))) {
		return jule::new_ref<_111612b20_Directive>();
	}
	return _25417_d;
}



inline void _111681860_Parser::_method_push_directive(jule::Ref<_111612b20_Comment> _27933_c) {
	jule::Ref<_111612b20_Directive> _28017_d = (*this)._method_get_directive(_27933_c);
	if ((!(jule::real(_28017_d)))) {
		return;
	}
	{
		auto __julec_range_expr = (*this)._field_directives;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_111612b20_Directive> _111681860_pd = *__julec_range_begin;
			_iter_begin_4631101328:;
			{
				if (_28017_d->_field_tag == _111681860_pd->_field_tag) {
					return;
				}
			}
			_iter_next_4631101328:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111681860_pd = *__julec_range_begin; goto _iter_begin_4631101328; }
			_iter_end_4631101328:;
		}
	}
	(*this)._field_directives=append((*this)._field_directives,jule::Slice<jule::Ref<_111612b20_Directive>>({_28017_d}));
}



inline void _111681860_Parser::_method_process_comment(jule::Ref<_111612b20_Comment> _29538_c) {
	if (_29538_c->_method_is_directive()) {
		(*this)._method_push_directive(_29538_c);
		return;
	}
	if ((!(jule::real((*this)._field_comment_group)))) {
		(*this)._field_comment_group=jule::new_struct<_111612b20_CommentGroup>(new( std::nothrow ) _111612b20_CommentGroup());
	}
	(*this)._field_comment_group->_field_comments=append((*this)._field_comment_group->_field_comments,jule::Slice<jule::Ref<_111612b20_Comment>>({_29538_c}));
}



inline jule::Ref<_111612b20_ScopeTree> _111681860_Parser::_method_build_scope(jule::Slice<_111613f20_Token> _30635_tokens) {
	jule::Ref<_111612b20_ScopeTree> _30717_s = _11167f570_new_scope();
	_11167f570_ScopeParser _30817_sp = _11167f570_ScopeParser(this->self,jule::Ref<_111612b20_ScopeTree>(),jule::Slice<jule::Ref<_11167f570_Stmt>>(),jule::Int());
	_30817_sp._method_build(_30635_tokens,_30717_s);
	return _30717_s;
}



inline std::tuple<jule::Ref<_111612b20_TypeDecl>,jule::Bool> _111681860_Parser::_method___build_type(jule::Slice<_111613f20_Token> _31543_tokens,jule::Int* _31613_i,jule::Bool _31622_err) {
	_111680c00_TypeBuilder _31717_tb = _111680c00_TypeBuilder(this->self,_31543_tokens,_31613_i,_31622_err);
	jule::Ref<_111612b20_TypeDecl> _32318_decl;
	jule::Bool _32324_ok;
	std::tie(_32318_decl,_32324_ok) = _31717_tb._method_build();
	return std::make_tuple(_32318_decl,_32324_ok);
}



inline std::tuple<jule::Ref<_111612b20_TypeDecl>,jule::Bool> _111681860_Parser::_method_build_type(jule::Slice<_111613f20_Token> _32841_tokens,jule::Int* _32913_i,jule::Bool _32922_err) {
	_111613f20_Token _33013_token = _32841_tokens[static_cast<jule::Int>((*(_32913_i)))];
	jule::Ref<_111612b20_TypeDecl> _33118_t;
	jule::Bool _33121_ok;
	std::tie(_33118_t,_33121_ok) = this->self->_method___build_type(_32841_tokens,_32913_i,_32922_err);
	if (_32922_err && (!(_33121_ok))) {
		this->self->_method_push_err(_33013_token,jule::Str("invalid_type", 12),jule::Slice<jule::Any>({}));
	}
	return std::make_tuple(_33118_t,_33121_ok);
}



inline jule::Ref<_111612b20_TypeAliasDecl> _111681860_Parser::_method_build_type_alias_decl(jule::Slice<_111613f20_Token> _33845_tokens) {
	jule::Int _33917_i = 1LL;
	if (_33917_i >= _33845_tokens.len()) {
		this->self->_method_push_err(_33845_tokens[static_cast<jule::Int>(_33917_i - 1LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_TypeAliasDecl>();
	}
	jule::Ref<_111612b20_TypeAliasDecl> _34417_tad = jule::new_struct<_111612b20_TypeAliasDecl>(new( std::nothrow ) _111612b20_TypeAliasDecl(jule::Ref<_111612b20_ScopeTree>(),jule::Bool(),jule::Bool(),_33845_tokens[static_cast<jule::Int>(1LL)],_33845_tokens[static_cast<jule::Int>(1LL)]._field_kind,jule::Ref<_111612b20_TypeDecl>(),jule::Ref<_111612b20_CommentGroup>()));
	_111613f20_Token _34817_token = _33845_tokens[static_cast<jule::Int>(_33917_i)];
	if (_34817_token._field_id != 2LLU) {
		this->self->_method_push_err(_34817_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	(_33917_i)++;
	if (_33917_i >= _33845_tokens.len()) {
		this->self->_method_push_err(_33845_tokens[static_cast<jule::Int>(_33917_i - 1LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return _34417_tad;
	}
	_34817_token=_33845_tokens[static_cast<jule::Int>(_33917_i)];
	if (_34817_token._field_id != 11LLU) {
		this->self->_method_push_err(_33845_tokens[static_cast<jule::Int>(_33917_i - 1LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return _34417_tad;
	}
	(_33917_i)++;
	if (_33917_i >= _33845_tokens.len()) {
		this->self->_method_push_err(_33845_tokens[static_cast<jule::Int>(_33917_i - 1LL)],jule::Str("missing_type", 12),jule::Slice<jule::Any>({}));
		return _34417_tad;
	}
	jule::Ref<_111612b20_TypeDecl> _36718_t;
	jule::Bool _36721_ok;
	std::tie(_36718_t,_36721_ok) = this->self->_method_build_type(_33845_tokens,(&(_33917_i)),true);
	_34417_tad->_field_kind=_36718_t;
	if (_36721_ok && (_33917_i < _33845_tokens.len())) {
		this->self->_method_push_err(_33845_tokens[static_cast<jule::Int>(_33917_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	return _34417_tad;
}



inline void _111681860_Parser::_method_build_var_type_and_expr(jule::Ref<_111612b20_VarDecl> _37547_v,jule::Slice<_111613f20_Token> _37564_tokens) {
	jule::Int _37617_i = 0LL;
	_111613f20_Token _37717_tok = _37564_tokens[static_cast<jule::Int>(_37617_i)];
	if (_37717_tok._field_id == 11LLU) {
		(_37617_i)++;
		if ((_37617_i >= _37564_tokens.len()) || ((_37564_tokens[static_cast<jule::Int>(_37617_i)]._field_id == 7LLU) && (_37564_tokens[static_cast<jule::Int>(_37617_i)]._field_kind == jule::Str("=", 1)))) {
			this->self->_method_push_err(_37717_tok,jule::Str("missing_type", 12),jule::Slice<jule::Any>({}));
			return;
		}
		jule::Ref<_111612b20_TypeDecl> _38522_t;
		jule::Bool _38525_ok;
		std::tie(_38522_t,_38525_ok) = this->self->_method_build_type(_37564_tokens,(&(_37617_i)),true);
		if (_38525_ok) {
			_37547_v->_field_kind=_38522_t;
			if (_37617_i >= _37564_tokens.len()) {
				return;
			}
			_37717_tok=_37564_tokens[static_cast<jule::Int>(_37617_i)];
		}
	}
	if (_37717_tok._field_id == 7LLU) {
		if (_37717_tok._field_kind != jule::Str("=", 1)) {
			this->self->_method_push_err(_37717_tok,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return;
		}
		jule::Slice<_111613f20_Token> _40021_expr_tokens = _37564_tokens.slice(static_cast<jule::Int>(_37617_i + 1LL));
		if (_40021_expr_tokens.len() == 0LL) {
			this->self->_method_push_err(_37717_tok,jule::Str("missing_expr", 12),jule::Slice<jule::Any>({}));
			return;
		}
		_37547_v->_field_expr=this->self->_method_build_expr(_40021_expr_tokens);
	} else {
		this->self->_method_push_err(_37717_tok,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
}



inline void _111681860_Parser::_method_build_var_common(jule::Ref<_111612b20_VarDecl> _41140_v,jule::Slice<_111613f20_Token> _41157_tokens) {
	_41140_v->_field_token=_41157_tokens[static_cast<jule::Int>(0LL)];
	if (_41140_v->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_41140_v->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return;
	}
	_41140_v->_field_ident=_41140_v->_field_token._field_kind;
	jule::drop(_41140_v->_field_kind);
	if (_41157_tokens.len() > 1LL) {
		_41157_tokens=_41157_tokens.slice(static_cast<jule::Int>(1LL));
		this->self->_method_build_var_type_and_expr(_41140_v,_41157_tokens);
	}
}



inline void _111681860_Parser::_method_build_var_begin(jule::Ref<_111612b20_VarDecl> _42538_v,jule::Ref<jule::Int> _42555_i,jule::Slice<_111613f20_Token> _42564_tokens) {
	_111613f20_Token _42613_tok = _42564_tokens[static_cast<jule::Int>(_42555_i)];
	{
		auto _match_expr{ _42613_tok._field_id };
		if (!((38LLU) == _match_expr)) { goto _case_end_4631241648; }
		_case_begin_4631241648:;
		{
			_42538_v->_field_statically=true;
			goto _case_begin_4631241760;
		}
		goto _match_end_4631237584;
		_case_end_4631241648:;
		if (!((34LLU) == _match_expr)) { goto _case_end_4631241760; }
		_case_begin_4631241760:;
		{
			(_42555_i)++;
			if (_42555_i >= _42564_tokens.len()) {
				(*this)._method_push_err(_42613_tok,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			if (_42564_tokens[static_cast<jule::Int>(_42555_i)]._field_id == 36LLU) {
				_42538_v->_field_mutable=true;
				(_42555_i)++;
			}
		}
		goto _match_end_4631237584;
		_case_end_4631241760:;
		if (!((9LLU) == _match_expr)) { goto _case_end_4631241872; }
		_case_begin_4631241872:;
		{
			(_42555_i)++;
			if (_42538_v->_field_constant) {
				(*this)._method_push_err(_42613_tok,jule::Str("already_const", 13),jule::Slice<jule::Any>({}));
				goto _match_end_4631237584;
			}
			_42538_v->_field_constant=true;
			if ((!(_42538_v->_field_mutable))) {
				goto _match_end_4631237584;
			}
			goto _case_begin_4631238880;
		}
		goto _match_end_4631237584;
		_case_end_4631241872:;
		_case_begin_4631238880:;
		{
			(*this)._method_push_err(_42613_tok,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4631237584;
		_case_end_4631238880:;
		_match_end_4631237584:;
	}
	if (_42555_i >= _42564_tokens.len()) {
		(*this)._method_push_err(_42613_tok,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
}



inline jule::Ref<_111612b20_VarDecl> _111681860_Parser::_method_build_var(jule::Slice<_111613f20_Token> _46733_tokens) {
	jule::Ref<jule::Int> _46817_i = jule::new_ref<jule::Int>(0LL);
	jule::Ref<_111612b20_VarDecl> _46917_v = jule::new_struct<_111612b20_VarDecl>(new( std::nothrow ) _111612b20_VarDecl(jule::Ref<_111612b20_ScopeTree>(),_46733_tokens[static_cast<jule::Int>(_46817_i)],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_111612b20_CommentGroup>(),jule::Ref<_111612b20_TypeDecl>(),jule::Ref<_111612b20_Expr>()));
	this->self->_method_build_var_begin(_46917_v,_46817_i,_46733_tokens);
	if (_46817_i >= _46733_tokens.len()) {
		return jule::new_ref<_111612b20_VarDecl>();
	}
	_46733_tokens=_46733_tokens.slice(static_cast<jule::Int>(_46817_i));
	if ((_46733_tokens[static_cast<jule::Int>(0LL)]._field_id == 7LLU) && (_46733_tokens[static_cast<jule::Int>(0LL)]._field_kind == jule::Str("&", 1))) {
		_46917_v->_field_reference=true;
		if (_46733_tokens.len() == 1LL) {
			return jule::new_ref<_111612b20_VarDecl>();
		}
		_46733_tokens=_46733_tokens.slice(static_cast<jule::Int>(1LL));
	}
	this->self->_method_build_var_common(_46917_v,_46733_tokens);
	return _46917_v;
}



inline jule::Ref<_111612b20_GenericDecl> _111681860_Parser::_method_build_generic(jule::Slice<_111613f20_Token> _48936_tokens) {
	if (_48936_tokens.len() > 1LL) {
		(*this)._method_push_err(_48936_tokens[static_cast<jule::Int>(1LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_111612b20_GenericDecl> _49317_g = jule::new_struct<_111612b20_GenericDecl>(new( std::nothrow ) _111612b20_GenericDecl(_48936_tokens[static_cast<jule::Int>(0LL)],jule::Str()));
	if (_49317_g->_field_token._field_id != 2LLU) {
		(*this)._method_push_err(_49317_g->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	_49317_g->_field_ident=_49317_g->_field_token._field_kind;
	return _49317_g;
}



inline jule::Slice<jule::Ref<_111612b20_GenericDecl>> _111681860_Parser::_method_build_generics(jule::Slice<_111613f20_Token> _50337_tokens,_111613f20_Token _50354_error_token) {
	if (_50337_tokens.len() == 0LL) {
		(*this)._method_push_err(_50354_error_token,jule::Str("missing_expr", 12),jule::Slice<jule::Any>({}));
		return nullptr;
	}
	jule::Slice<jule::Slice<_111613f20_Token>> _50918_parts;
	jule::Slice<_1316b4080_Log> _50925_errors;
	std::tie(_50918_parts,_50925_errors) = _111681860_parts(_50337_tokens,8LLU,true);
	(*this)._field_errors=append((*this)._field_errors,_50925_errors);
	jule::Slice<jule::Ref<_111612b20_GenericDecl>> _51217_generics = jule::Slice<jule::Ref<_111612b20_GenericDecl>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_50918_parts.len())));
	{
		auto __julec_range_expr = _50918_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _111681860_i = 0;
			jule::Slice<_111613f20_Token> _111681860_part = *__julec_range_begin;
			_iter_begin_4631297040:;
			{
				if (_50918_parts.len() > 0LL) {
					_51217_generics[static_cast<jule::Int>(_111681860_i)]=(*this)._method_build_generic(_111681860_part);
				}
			}
			_iter_next_4631297040:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_111681860_i; _111681860_part = *__julec_range_begin; goto _iter_begin_4631297040; }
			_iter_end_4631297040:;
		}
	}
	return _51217_generics;
}



inline jule::Ref<_111612b20_ParamDecl> _111681860_Parser::_method_build_self_param(jule::Slice<_111613f20_Token> _52239_tokens) {
	if (_52239_tokens.len() == 0LL) {
		return jule::new_ref<_111612b20_ParamDecl>();
	}
	jule::Ref<_111612b20_ParamDecl> _52717_param = jule::new_struct<_111612b20_ParamDecl>(new( std::nothrow ) _111612b20_ParamDecl());
	jule::Int _53017_i = 0LL;
	if (_52239_tokens[static_cast<jule::Int>(_53017_i)]._field_id == 36LLU) {
		_52717_param->_field_mutable=true;
		(_53017_i)++;
		if (_53017_i >= _52239_tokens.len()) {
			(*this)._method_push_err(_52239_tokens[static_cast<jule::Int>(_53017_i - 1LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_111612b20_ParamDecl>();
		}
	}
	if (_52239_tokens[static_cast<jule::Int>(_53017_i)]._field_kind == jule::Str("&", 1)) {
		_52717_param->_field_ident=jule::Str("&", 1);
		(_53017_i)++;
		if (_53017_i >= _52239_tokens.len()) {
			(*this)._method_push_err(_52239_tokens[static_cast<jule::Int>(_53017_i - 1LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_111612b20_ParamDecl>();
		}
	}
	if (_52239_tokens[static_cast<jule::Int>(_53017_i)]._field_id == 28LLU) {
		_52717_param->_field_ident+=jule::Str("self", 4);
		_52717_param->_field_token=_52239_tokens[static_cast<jule::Int>(_53017_i)];
		(_53017_i)++;
		if (_53017_i < _52239_tokens.len()) {
			(*this)._method_push_err(_52239_tokens[static_cast<jule::Int>(_53017_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		}
	}
	return _52717_param;
}



inline void _111681860_Parser::_method_param_type_begin(jule::Ref<_111612b20_ParamDecl> _56139_param,jule::Int& _56163_i,jule::Slice<_111613f20_Token> _56171_tokens) {
	_iter_begin_4631331504:;
	if (!(_56163_i < _56171_tokens.len())) { goto _iter_end_4631331504; }
	{
		_111613f20_Token _56317_token = _56171_tokens[static_cast<jule::Int>(_56163_i)];
		if (_56317_token._field_id != 7LLU) {
			return;
		} else if (_56317_token._field_kind != jule::Str("...", 3)) {
			return;
		}
		if (_56139_param->_field_variadic) {
			(*this)._method_push_err(_56317_token,jule::Str("already_variadic", 16),jule::Slice<jule::Any>({}));
			goto _iter_next_4631331504;
		}
		_56139_param->_field_variadic=true;
	}
	_iter_next_4631331504:;
	(_56163_i)++;
	goto _iter_begin_4631331504;
	_iter_end_4631331504:;
}



inline void _111681860_Parser::_method_build_param_type(jule::Ref<_111612b20_ParamDecl> _57840_param,jule::Slice<_111613f20_Token> _57863_tokens,jule::Bool _57880_must_pure) {
	jule::Int _57917_i = 0LL;
	if ((!(_57880_must_pure))) {
		this->self->_method_param_type_begin(_57840_param,_57917_i,_57863_tokens);
		if (_57917_i >= _57863_tokens.len()) {
			return;
		}
	}
	std::tie(_57840_param->_field_kind,std::ignore) = this->self->_method_build_type(_57863_tokens,(&(_57917_i)),true);
	if (_57917_i < _57863_tokens.len()) {
		this->self->_method_push_err(_57863_tokens[static_cast<jule::Int>(_57917_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
}



inline void _111681860_Parser::_method_param_body_id(jule::Ref<_111612b20_ParamDecl> _59232_param,_111613f20_Token _59251_token) {
	if (_111613f20_is_ignore_ident(_59251_token._field_kind)) {
		_59232_param->_field_ident=jule::Str("<anonymous>", 11);
		return;
	}
	_59232_param->_field_ident=_59251_token._field_kind;
}



inline void _111681860_Parser::_method_build_param_body(jule::Ref<_111612b20_ParamDecl> _60040_param,jule::Ref<jule::Int> _60063_i,jule::Slice<_111613f20_Token> _60076_tokens,jule::Bool _60093_must_pure) {
	this->self->_method_param_body_id(_60040_param,_60076_tokens[static_cast<jule::Int>(_60063_i)]);
	_111613f20_Token _60217_tok = _60076_tokens[static_cast<jule::Int>(_60063_i)];
	if ((_60063_i + 1LL) >= _60076_tokens.len()) {
		return;
	} else if (((_60076_tokens.len() - _60063_i) - 1LL) < 2LL) {
		this->self->_method_push_err(_60217_tok,jule::Str("missing_type", 12),jule::Slice<jule::Any>({}));
		return;
	}
	_60217_tok=_60076_tokens[static_cast<jule::Int>(_60063_i + 1LL)];
	if (_60217_tok._field_id != 11LLU) {
		this->self->_method_build_param_type(_60040_param,_60076_tokens,_60093_must_pure);
		return;
	}
	_60076_tokens=_60076_tokens.slice(static_cast<jule::Int>(_60063_i + 2LL));
	this->self->_method_build_param_type(_60040_param,_60076_tokens,_60093_must_pure);
}



inline jule::Ref<_111612b20_ParamDecl> _111681860_Parser::_method_build_param(jule::Slice<_111613f20_Token> _62135_tokens,jule::Bool _62152_must_pure) {
	jule::Ref<_111612b20_ParamDecl> _62217_param = jule::new_struct<_111612b20_ParamDecl>(new( std::nothrow ) _111612b20_ParamDecl(_62135_tokens[static_cast<jule::Int>(0LL)],jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_111612b20_TypeDecl>(),jule::Str()));
	if (_62217_param->_field_token._field_id == 36LLU) {
		_62217_param->_field_mutable=true;
		if (_62135_tokens.len() == 1LL) {
			this->self->_method_push_err(_62135_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_111612b20_ParamDecl>();
		}
		_62135_tokens=_62135_tokens.slice(static_cast<jule::Int>(1LL));
		_62217_param->_field_token=_62135_tokens[static_cast<jule::Int>(0LL)];
	}
	if (_62135_tokens.len() >= 3LL) {
		if ((_62217_param->_field_token._field_id == 7LLU) && (_62217_param->_field_token._field_kind == jule::Str("&", 1))) {
			if (_62135_tokens.len() == 1LL) {
				this->self->_method_push_err(_62135_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return jule::new_ref<_111612b20_ParamDecl>();
			}
			if ((_62135_tokens[static_cast<jule::Int>(1LL)]._field_id == 2LLU) && (_62135_tokens[static_cast<jule::Int>(2LL)]._field_id == 11LLU)) {
				_62217_param->_field_reference=true;
				_62135_tokens=_62135_tokens.slice(static_cast<jule::Int>(1LL));
				_62217_param->_field_token=_62135_tokens[static_cast<jule::Int>(0LL)];
			}
		}
	}
	if (_62217_param->_field_token._field_id != 2LLU) {
		_62217_param->_field_ident=jule::Str("<anonymous>", 11);
		this->self->_method_build_param_type(_62217_param,_62135_tokens,_62152_must_pure);
	} else {
		jule::Ref<jule::Int> _65821_i = jule::new_ref<jule::Int>(0LL);
		this->self->_method_build_param_body(_62217_param,_65821_i,_62135_tokens,_62152_must_pure);
	}
	return _62217_param;
}



inline void _111681860_Parser::_method_check_params(jule::Slice<jule::Ref<_111612b20_ParamDecl>> _66535_params) {
	{
		auto __julec_range_expr = _66535_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_111612b20_ParamDecl> _111681860_param = *__julec_range_begin;
			_iter_begin_4631421328:;
			{
				if (_111681860_param->_method_is_self() || jule::real(_111681860_param->_field_kind)) {
					goto _iter_next_4631421328;
				}
				if (_111681860_param->_field_token._field_id == 0LLU) {
					(*this)._method_push_err(_111681860_param->_field_token,jule::Str("missing_type", 12),jule::Slice<jule::Any>({}));
				} else {
					_111681860_param->_field_kind=jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_111681860_param->_field_token,jule::Any(jule::new_struct<_111612b20_IdentTypeDecl>(new( std::nothrow ) _111612b20_IdentTypeDecl(_111681860_param->_field_token,_111681860_param->_field_token._field_kind,jule::Bool(),jule::Slice<jule::Ref<_111612b20_TypeDecl>>())))));
					_111681860_param->_field_ident=jule::Str("<anonymous>", 11);
					_111681860_param->_field_token=_111613f20_Token();
				}
			}
			_iter_next_4631421328:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111681860_param = *__julec_range_begin; goto _iter_begin_4631421328; }
			_iter_end_4631421328:;
		}
	}
}



inline jule::Slice<jule::Ref<_111612b20_ParamDecl>> _111681860_Parser::_method_build_params(jule::Slice<_111613f20_Token> _68636_tokens,jule::Bool _68653_method,jule::Bool _68667_must_pure) {
	jule::Slice<jule::Slice<_111613f20_Token>> _68718_parts;
	jule::Slice<_1316b4080_Log> _68725_errs;
	std::tie(_68718_parts,_68725_errs) = _111681860_parts(_68636_tokens,8LLU,true);
	this->self->_field_errors=append(this->self->_field_errors,_68725_errs);
	if (_68718_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_111612b20_ParamDecl>> _69317_params = nullptr;
	if (_68653_method && (_68718_parts.len() > 0LL)) {
		jule::Ref<_111612b20_ParamDecl> _69521_param = this->self->_method_build_self_param(_68718_parts[static_cast<jule::Int>(0LL)]);
		if (jule::real(_69521_param) && _69521_param->_method_is_self()) {
			_69317_params=append(_69317_params,jule::Slice<jule::Ref<_111612b20_ParamDecl>>({_69521_param}));
			_68718_parts=_68718_parts.slice(static_cast<jule::Int>(1LL));
		}
	}
	{
		auto __julec_range_expr = _68718_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Slice<_111613f20_Token> _111681860_part = *__julec_range_begin;
			_iter_begin_4631449392:;
			{
				jule::Ref<_111612b20_ParamDecl> _70321_param = this->self->_method_build_param(_111681860_part,_68667_must_pure);
				if (jule::real(_70321_param)) {
					_69317_params=append(_69317_params,jule::Slice<jule::Ref<_111612b20_ParamDecl>>({_70321_param}));
				}
			}
			_iter_next_4631449392:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111681860_part = *__julec_range_begin; goto _iter_begin_4631449392; }
			_iter_end_4631449392:;
		}
	}
	this->self->_method_check_params(_69317_params);
	return _69317_params;
}



inline std::tuple<jule::Ref<_111612b20_RetTypeDecl>,jule::Bool> _111681860_Parser::_method_build_multi_ret_type(jule::Slice<_111613f20_Token> _71344_tokens,jule::Int& _71366_i) {
	jule::Bool _71393_ok = jule::Bool();
	jule::Ref<_111612b20_RetTypeDecl> _71376_t = jule::Ref<_111612b20_RetTypeDecl>();
	_71376_t=jule::new_struct<_111612b20_RetTypeDecl>(new( std::nothrow ) _111612b20_RetTypeDecl());
	(_71366_i)++;
	if (_71366_i >= _71344_tokens.len()) {
		(_71366_i)--;
		std::tie(_71376_t->_field_kind,_71393_ok) = this->self->_method_build_type(_71344_tokens,(&(_71366_i)),false);
		return std::make_tuple(_71376_t,_71393_ok);
	}
	(_71366_i)--;
	jule::Slice<_111613f20_Token> _72317_range_tokens = _111681860_range(_71366_i,jule::Str("(", 1),jule::Str(")", 1),_71344_tokens);
	jule::Slice<jule::Ref<_111612b20_ParamDecl>> _72417_params = this->self->_method_build_params(_72317_range_tokens,false,true);
	jule::Slice<jule::Ref<_111612b20_TypeDecl>> _72617_types = jule::Slice<jule::Ref<_111612b20_TypeDecl>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_72417_params.len())));
	{
		auto __julec_range_expr = _72417_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _111681860_i = 0;
			jule::Ref<_111612b20_ParamDecl> _111681860_param = *__julec_range_begin;
			_iter_begin_4631475472:;
			{
				_72617_types[static_cast<jule::Int>(_111681860_i)]=_111681860_param->_field_kind;
				if (_111681860_param->_field_ident != jule::Str("<anonymous>", 11)) {
					_111681860_param->_field_token._field_kind=_111681860_param->_field_ident;
				} else {
					_111681860_param->_field_token._field_kind=jule::Str("_", 1);
				}
				_71376_t->_field_idents=append(_71376_t->_field_idents,jule::Slice<_111613f20_Token>({_111681860_param->_field_token}));
			}
			_iter_next_4631475472:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_111681860_i; _111681860_param = *__julec_range_begin; goto _iter_begin_4631475472; }
			_iter_end_4631475472:;
		}
	}
	if (_72617_types.len() > 1LL) {
		_71376_t->_field_kind=jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_71344_tokens[static_cast<jule::Int>(0LL)],jule::Any(jule::new_struct<_111612b20_TupleTypeDecl>(new( std::nothrow ) _111612b20_TupleTypeDecl(_72617_types)))));
	} else {
		_71376_t->_field_kind=_72617_types[static_cast<jule::Int>(0LL)];
	}
	_71393_ok=true;
	return std::make_tuple(_71376_t,_71393_ok);
}



inline std::tuple<jule::Ref<_111612b20_RetTypeDecl>,jule::Bool> _111681860_Parser::_method_build_ret_type(jule::Slice<_111613f20_Token> _75338_tokens,jule::Int& _75360_i) {
	jule::Bool _75387_ok = jule::Bool();
	jule::Ref<_111612b20_RetTypeDecl> _75370_t = jule::Ref<_111612b20_RetTypeDecl>();
	_75370_t=jule::new_struct<_111612b20_RetTypeDecl>(new( std::nothrow ) _111612b20_RetTypeDecl());
	if (_75360_i >= _75338_tokens.len()) {
		return std::make_tuple(_75370_t,_75387_ok);
	}
	_111613f20_Token _75917_token = _75338_tokens[static_cast<jule::Int>(_75360_i)];
	{
		auto _match_expr{ _75917_token._field_id };
		if (!((3LLU) == _match_expr)) { goto _case_end_4631501552; }
		_case_begin_4631501552:;
		{
			if (_75917_token._field_kind == jule::Str("{", 1)) {
				return std::make_tuple(_75370_t,_75387_ok);
			}
		}
		goto _match_end_4631499712;
		_case_end_4631501552:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4631501664; }
		_case_begin_4631501664:;
		{
			if (_75917_token._field_kind == jule::Str("=", 1)) {
				return std::make_tuple(_75370_t,_75387_ok);
			}
		}
		goto _match_end_4631499712;
		_case_end_4631501664:;
		if (!((11LLU) == _match_expr)) { goto _case_end_4631501776; }
		_case_begin_4631501776:;
		{
			if ((_75360_i + 1LL) >= _75338_tokens.len()) {
				this->self->_method_push_err(_75917_token,jule::Str("missing_type", 12),jule::Slice<jule::Any>({}));
				return std::make_tuple(_75370_t,_75387_ok);
			}
			(_75360_i)++;
			_75917_token=_75338_tokens[static_cast<jule::Int>(_75360_i)];
			if (_75917_token._field_id == 3LLU) {
				{
					auto _match_expr{ _75917_token._field_kind };
					if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4631512512; }
					_case_begin_4631512512:;
					{
						jule::Ref<_111612b20_RetTypeDecl> _78230_decl;
						jule::Bool _78236_ok;
						std::tie(_78230_decl,_78236_ok) = this->self->_method_build_multi_ret_type(_75338_tokens,_75360_i);
						_75370_t = _78230_decl;
						_75387_ok = _78236_ok;
						return std::make_tuple(_75370_t,_75387_ok);
					}
					goto _match_end_4631510032;
					_case_end_4631512512:;
					if (!((jule::Str("{", 1)) == _match_expr)) { goto _case_end_4631512624; }
					_case_begin_4631512624:;
					{
						this->self->_method_push_err(_75917_token,jule::Str("missing_type", 12),jule::Slice<jule::Any>({}));
						return std::make_tuple(_75370_t,_75387_ok);
					}
					goto _match_end_4631510032;
					_case_end_4631512624:;
					_match_end_4631510032:;
				}
			}
			std::tie(_75370_t->_field_kind,_75387_ok) = this->self->_method_build_type(_75338_tokens,(&(_75360_i)),true);
			return std::make_tuple(_75370_t,_75387_ok);
		}
		goto _match_end_4631499712;
		_case_end_4631501776:;
		_match_end_4631499712:;
	}
	(_75360_i)++;
	this->self->_method_push_err(_75917_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	return std::make_tuple(_75370_t,_75387_ok);
}



inline jule::Ref<_111612b20_FnDecl> _111681860_Parser::_method_build_fn_prototype(jule::Slice<_111613f20_Token> _80142_tokens,jule::Int& _80164_i,jule::Bool _80172_method,jule::Bool _80186_anon) {
	jule::Ref<_111612b20_FnDecl> _80217_f = jule::new_struct<_111612b20_FnDecl>(new( std::nothrow ) _111612b20_FnDecl(_80142_tokens[static_cast<jule::Int>(_80164_i)],jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::Slice<jule::Ref<_111612b20_Directive>>(),jule::Ref<_111612b20_CommentGroup>(),jule::Ref<_111612b20_ScopeTree>(),jule::Slice<jule::Ref<_111612b20_GenericDecl>>(),jule::Ref<_111612b20_RetTypeDecl>(),jule::Slice<jule::Ref<_111612b20_ParamDecl>>()));
	if (_80217_f->_field_token._field_id == 38LLU) {
		_80217_f->_field_statically=true;
		(_80164_i)++;
		if (_80164_i >= _80142_tokens.len()) {
			this->self->_method_push_err(_80217_f->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_111612b20_FnDecl>();
		}
		_80217_f->_field_token=_80142_tokens[static_cast<jule::Int>(_80164_i)];
	}
	if (_80217_f->_field_token._field_id == 35LLU) {
		_80217_f->_field_unsafety=true;
		(_80164_i)++;
		if (_80164_i >= _80142_tokens.len()) {
			this->self->_method_push_err(_80217_f->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_111612b20_FnDecl>();
		}
		_80217_f->_field_token=_80142_tokens[static_cast<jule::Int>(_80164_i)];
	}
	(_80164_i)++;
	if (_80164_i >= _80142_tokens.len()) {
		this->self->_method_push_err(_80217_f->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_FnDecl>();
	}
	if (_80186_anon) {
		_80217_f->_field_ident=jule::Str("<anonymous>", 11);
	} else {
		_111613f20_Token _83817_tok = _80142_tokens[static_cast<jule::Int>(_80164_i)];
		if (_83817_tok._field_id != 2LLU) {
			this->self->_method_push_err(_83817_tok,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_111612b20_FnDecl>();
		}
		_80217_f->_field_ident=_83817_tok._field_kind;
		(_80164_i)++;
	}
	if (_80164_i >= _80142_tokens.len()) {
		this->self->_method_push_err(_80217_f->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_FnDecl>();
	}
	_111613f20_Token _85213_error_token = _80142_tokens[static_cast<jule::Int>(_80164_i)];
	jule::Slice<_111613f20_Token> _85317_generics_tokens = _111681860_range(_80164_i,jule::Str("[", 1),jule::Str("]", 1),_80142_tokens);
	if (_85317_generics_tokens != nullptr) {
		_80217_f->_field_generics=this->self->_method_build_generics(_85317_generics_tokens,_85213_error_token);
	}
	if (_80142_tokens[static_cast<jule::Int>(_80164_i)]._field_kind != jule::Str("(", 1)) {
		this->self->_method_push_err(_80142_tokens[static_cast<jule::Int>(_80164_i)],jule::Str("missing_function_parentheses", 28),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_FnDecl>();
	}
	jule::Slice<_111613f20_Token> _86317_params_toks = _111681860_range(_80164_i,jule::Str("(", 1),jule::Str(")", 1),_80142_tokens);
	if (_86317_params_toks.len() > 0LL) {
		_80217_f->_field_params=this->self->_method_build_params(_86317_params_toks,_80172_method,false);
	}
	std::tie(_80217_f->_field_result,std::ignore) = this->self->_method_build_ret_type(_80142_tokens,_80164_i);
	return _80217_f;
}



inline jule::Ref<_111612b20_FnDecl> _111681860_Parser::_method_build_fn(jule::Slice<_111613f20_Token> _87432_tokens,jule::Bool _87449_method,jule::Bool _87463_anon,jule::Bool _87475_prototype) {
	jule::Int _87517_i = 0LL;
	jule::Ref<_111612b20_FnDecl> _87617_f = this->self->_method_build_fn_prototype(_87432_tokens,_87517_i,_87449_method,_87463_anon);
	if (_87475_prototype) {
		if (_87517_i < _87432_tokens.len()) {
			this->self->_method_push_err(_87432_tokens[static_cast<jule::Int>(_87517_i + 1LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		}
		return _87617_f;
	} else if ((!(jule::real(_87617_f)))) {
		return _87617_f;
	}
	if (_87517_i >= _87432_tokens.len()) {
		this->self->_method_stop();
		this->self->_method_push_err(_87617_f->_field_token,jule::Str("body_not_exist", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_FnDecl>();
	}
	jule::Slice<_111613f20_Token> _89117_block_tokens = _111681860_range(_87517_i,jule::Str("{", 1),jule::Str("}", 1),_87432_tokens);
	if (_89117_block_tokens != nullptr) {
		_87617_f->_field_scope=this->self->_method_build_scope(_89117_block_tokens);
		_87617_f->_field_scope->_field_unsafety=_87617_f->_field_unsafety;
		if (_87517_i < _87432_tokens.len()) {
			this->self->_method_push_err(_87432_tokens[static_cast<jule::Int>(_87517_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		}
	} else {
		this->self->_method_stop();
		this->self->_method_push_err(_87617_f->_field_token,jule::Str("body_not_exist", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_FnDecl>();
	}
	return _87617_f;
}



inline jule::Slice<_111613f20_Token> _111681860_Parser::_method_get_use_decl_selectors(jule::Slice<_111613f20_Token> _90645_tokens) {
	jule::Int _90717_i = 0LL;
	_90645_tokens=_111681860_range(_90717_i,jule::Str("{", 1),jule::Str("}", 1),_90645_tokens);
	jule::Slice<jule::Slice<_111613f20_Token>> _90918_parts;
	jule::Slice<_1316b4080_Log> _90925_errs;
	std::tie(_90918_parts,_90925_errs) = _111681860_parts(_90645_tokens,8LLU,true);
	if (_90925_errs.len() > 0LL) {
		(*this)._field_errors=append((*this)._field_errors,_90925_errs);
		return nullptr;
	}
	jule::Slice<_111613f20_Token> _91517_selectors = jule::Slice<_111613f20_Token>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_90918_parts.len())));
	{
		auto __julec_range_expr = _90918_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _111681860_i = 0;
			jule::Slice<_111613f20_Token> _111681860_part = *__julec_range_begin;
			_iter_begin_4631628416:;
			{
				if (_111681860_part.len() > 1LL) {
					(*this)._method_push_err(_111681860_part[static_cast<jule::Int>(1LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				}
				_111613f20_Token _92021_tok = _111681860_part[static_cast<jule::Int>(0LL)];
				if ((_92021_tok._field_id != 2LLU) && (_92021_tok._field_id != 28LLU)) {
					(*this)._method_push_err(_92021_tok,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
					goto _iter_next_4631628416;
				}
				_91517_selectors[static_cast<jule::Int>(_111681860_i)]=_92021_tok;
			}
			_iter_next_4631628416:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_111681860_i; _111681860_part = *__julec_range_begin; goto _iter_begin_4631628416; }
			_iter_end_4631628416:;
		}
	}
	return _91517_selectors;
}



inline void _111681860_Parser::_method_build_cpp_use_decl(jule::Ref<_111612b20_UseDecl> _93041_decl,jule::Slice<_111613f20_Token> _93057_tokens) {
	if (_93057_tokens.len() > 1LL) {
		(*this)._method_push_err(_93057_tokens[static_cast<jule::Int>(1LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	_111613f20_Token _93413_token = _93057_tokens[static_cast<jule::Int>(0LL)];
	if ((_93413_token._field_id != 6LLU) || ((_93413_token._field_kind[static_cast<jule::Int>(0LL)] != '`') && (_93413_token._field_kind[static_cast<jule::Int>(0LL)] != '\"'))) {
		(*this)._method_push_err(_93413_token,jule::Str("invalid_expr", 12),jule::Slice<jule::Any>({}));
		return;
	}
	_93041_decl->_field_cpp_linked=true;
	_93041_decl->_field_link_path=_93413_token._field_kind.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_93413_token._field_kind.len() - 1LL));
	if ((!(_1316301d0_is_std_header_path(_93041_decl->_field_link_path)))) {
		_93041_decl->_field_link_path=_131739f50_join(jule::Slice<jule::Str>({_93413_token._field_file->_method_dir(),_93041_decl->_field_link_path}));
	}
}



inline void _111681860_Parser::_method_build_std_use_decl(jule::Ref<_111612b20_UseDecl> _94641_decl,jule::Slice<_111613f20_Token> _94661_tokens) {
	_94641_decl->_field_std=true;
	_111613f20_Token _94917_token = _94661_tokens[static_cast<jule::Int>(0LL)];
	if (_94661_tokens.len() < 3LL) {
		(*this)._method_push_err(_94917_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return;
	}
	_94661_tokens=_94661_tokens.slice(static_cast<jule::Int>(2LL));
	_94917_token=_94661_tokens[static_cast<jule::Int>(_94661_tokens.len() - 1LL)];
	{
		auto _match_expr{ _94917_token._field_id };
		if (!((23LLU) == _match_expr)) { goto _case_end_4631675424; }
		_case_begin_4631675424:;
		{
			(*this)._method_push_err(_94917_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4631666720;
		_case_end_4631675424:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4631675536; }
		_case_begin_4631675536:;
		{
			if (_94917_token._field_kind != jule::Str("}", 1)) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			jule::Slice<_111613f20_Token> _96721_selectors = nullptr;
			std::tie(_94661_tokens,_96721_selectors) = _111681860_range_last(_94661_tokens);
			_94641_decl->_field_selected=(*this)._method_get_use_decl_selectors(_96721_selectors);
			if (_94661_tokens.len() == 0LL) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_94917_token=_94661_tokens[static_cast<jule::Int>(_94661_tokens.len() - 1LL)];
			if (_94917_token._field_id != 23LLU) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_94661_tokens=_94661_tokens.slice(0LL,static_cast<jule::Int>(_94661_tokens.len() - 1LL));
			if (_94661_tokens.len() == 0LL) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
		}
		goto _match_end_4631666720;
		_case_end_4631675536:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4631675648; }
		_case_begin_4631675648:;
		{
			if (_94917_token._field_kind != jule::Str("*", 1)) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_94661_tokens=_94661_tokens.slice(0LL,static_cast<jule::Int>(_94661_tokens.len() - 1LL));
			if (_94661_tokens.len() == 0LL) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_94917_token=_94661_tokens[static_cast<jule::Int>(_94661_tokens.len() - 1LL)];
			if (_94917_token._field_id != 23LLU) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_94661_tokens=_94661_tokens.slice(0LL,static_cast<jule::Int>(_94661_tokens.len() - 1LL));
			if (_94661_tokens.len() == 0LL) {
				(*this)._method_push_err(_94917_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_94641_decl->_field_full=true;
		}
		goto _match_end_4631666720;
		_case_end_4631675648:;
		_match_end_4631666720:;
	}
	_94641_decl->_field_link_path=jule::Str("std::", 5) + _111681860_tokstoa(_94661_tokens);
}



inline void _111681860_Parser::_method_build_ident_use_decl(jule::Ref<_111612b20_UseDecl> _101043_decl,jule::Slice<_111613f20_Token> _101063_tokens) {
	_101043_decl->_field_std=false;
	_111613f20_Token _101317_token = _101063_tokens[static_cast<jule::Int>(_101063_tokens.len() - 1LL)];
	{
		auto _match_expr{ _101317_token._field_id };
		if (!((23LLU) == _match_expr)) { goto _case_end_4631721024; }
		_case_begin_4631721024:;
		{
			(*this)._method_push_err(_101317_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4631719088;
		_case_end_4631721024:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4631721136; }
		_case_begin_4631721136:;
		{
			if (_101317_token._field_kind != jule::Str("}", 1)) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			jule::Slice<_111613f20_Token> _102521_selectors = nullptr;
			std::tie(_101063_tokens,_102521_selectors) = _111681860_range_last(_101063_tokens);
			_101043_decl->_field_selected=(*this)._method_get_use_decl_selectors(_102521_selectors);
			if (_101063_tokens.len() == 0LL) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101317_token=_101063_tokens[static_cast<jule::Int>(_101063_tokens.len() - 1LL)];
			if (_101317_token._field_id != 23LLU) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101063_tokens=_101063_tokens.slice(0LL,static_cast<jule::Int>(_101063_tokens.len() - 1LL));
			if (_101063_tokens.len() == 0LL) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
		}
		goto _match_end_4631719088;
		_case_end_4631721136:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4631721248; }
		_case_begin_4631721248:;
		{
			if (_101317_token._field_kind != jule::Str("*", 1)) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101063_tokens=_101063_tokens.slice(0LL,static_cast<jule::Int>(_101063_tokens.len() - 1LL));
			if (_101063_tokens.len() == 0LL) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101317_token=_101063_tokens[static_cast<jule::Int>(_101063_tokens.len() - 1LL)];
			if (_101317_token._field_id != 23LLU) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101063_tokens=_101063_tokens.slice(0LL,static_cast<jule::Int>(_101063_tokens.len() - 1LL));
			if (_101063_tokens.len() == 0LL) {
				(*this)._method_push_err(_101317_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return;
			}
			_101043_decl->_field_full=true;
		}
		goto _match_end_4631719088;
		_case_end_4631721248:;
		_match_end_4631719088:;
	}
	_101043_decl->_field_link_path=_111681860_tokstoa(_101063_tokens);
}



inline void _111681860_Parser::_method_parse_use_decl(jule::Ref<_111612b20_UseDecl> _107537_decl,jule::Slice<_111613f20_Token> _107557_tokens) {
	if (_107537_decl->_field_cpp_linked) {
		(*this)._method_build_cpp_use_decl(_107537_decl,_107557_tokens);
		return;
	}
	_111613f20_Token _108113_token = _107557_tokens[static_cast<jule::Int>(0LL)];
	if (_108113_token._field_id != 2LLU) {
		(*this)._method_push_err(_108113_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return;
	}
	
	{
		if (!((_108113_token._field_kind == jule::Str("std", 3)))) { goto _case_end_4631772496; }
		_case_begin_4631772496:;
		{
			(*this)._method_build_std_use_decl(_107537_decl,_107557_tokens);
		}
		goto _match_end_4631770992;
		_case_end_4631772496:;
		_case_begin_4631771152:;
		{
			(*this)._method_build_ident_use_decl(_107537_decl,_107557_tokens);
		}
		goto _match_end_4631770992;
		_case_end_4631771152:;
		_match_end_4631770992:;
	}
}



inline jule::Ref<_111612b20_UseDecl> _111681860_Parser::_method_build_use_decl(jule::Slice<_111613f20_Token> _109837_tokens,jule::Bool _109854_cpp_linked) {
	jule::Ref<_111612b20_UseDecl> _109917_decl = jule::new_struct<_111612b20_UseDecl>(new( std::nothrow ) _111612b20_UseDecl(_109837_tokens[static_cast<jule::Int>(0LL)],jule::Str(),jule::Bool(),jule::Slice<_111613f20_Token>(),_109854_cpp_linked,jule::Bool()));
	if (_109837_tokens.len() < 2LL) {
		(*this)._method_push_err(_109917_decl->_field_token,jule::Str("missing_use_path", 16),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_UseDecl>();
	}
	_109837_tokens=_109837_tokens.slice(static_cast<jule::Int>(1LL));
	(*this)._method_parse_use_decl(_109917_decl,_109837_tokens);
	return _109917_decl;
}



inline jule::Ref<_111612b20_Expr> _111681860_Parser::_method_build_enum_item_expr(jule::Ref<jule::Int> _111244_i,jule::Slice<_111613f20_Token> _111257_tokens) {
	jule::Int _111317_brace_n = 0LL;
	jule::Int _111413_expr_start = _111244_i;
	_iter_begin_4631792560:;
	if (!(_111244_i < _111257_tokens.len())) { goto _iter_end_4631792560; }
	{
		_111613f20_Token _111617_t = _111257_tokens[static_cast<jule::Int>(_111244_i)];
		if (_111617_t._field_id == 3LLU) {
			{
				auto _match_expr{ _111617_t._field_kind };
				if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4631798400; }
				_case_begin_4631798400:;
				{
					(_111317_brace_n)++;
					goto _iter_next_4631792560;
				}
				goto _match_end_4631796368;
				_case_end_4631798400:;
				_case_begin_4631797280:;
				{
					(_111317_brace_n)--;
				}
				goto _match_end_4631796368;
				_case_end_4631797280:;
				_match_end_4631796368:;
			}
		}
		if (_111317_brace_n > 0LL) {
			goto _iter_next_4631792560;
		}
		if ((_111617_t._field_id == 8LLU) || ((_111244_i + 1LL) >= _111257_tokens.len())) {
			jule::Slice<_111613f20_Token> _113525_expr_tokens = nullptr;
			if (_111617_t._field_id == 8LLU) {
				_113525_expr_tokens=_111257_tokens.slice(static_cast<jule::Int>(_111413_expr_start),static_cast<jule::Int>(_111244_i));
			} else {
				_113525_expr_tokens=_111257_tokens.slice(static_cast<jule::Int>(_111413_expr_start));
			}
			return this->self->_method_build_expr(_113525_expr_tokens);
		}
	}
	_iter_next_4631792560:;
	(_111244_i)++;
	goto _iter_begin_4631792560;
	_iter_end_4631792560:;
	return jule::new_ref<_111612b20_Expr>();
}



inline jule::Slice<jule::Ref<_111612b20_EnumItemDecl>> _111681860_Parser::_method_build_enum_items(jule::Slice<_111613f20_Token> _114740_tokens) {
	jule::Slice<jule::Ref<_111612b20_EnumItemDecl>> _114817_items = jule::Slice<jule::Ref<_111612b20_EnumItemDecl>>::alloc(static_cast<jule::Int>(0LL));
	jule::Ref<jule::Int> _114917_i = jule::new_ref<jule::Int>(0LL);
	_iter_begin_4631815840:;
	if (!(_114917_i < _114740_tokens.len())) { goto _iter_end_4631815840; }
	{
		_111613f20_Token _115121_t = _114740_tokens[static_cast<jule::Int>(_114917_i)];
		if (_115121_t._field_id == 18LLU) {
			goto _iter_next_4631815840;
		}
		jule::Ref<_111612b20_EnumItemDecl> _115621_item = jule::new_struct<_111612b20_EnumItemDecl>(new( std::nothrow ) _111612b20_EnumItemDecl());
		_115621_item->_field_token=_115121_t;
		if (_115621_item->_field_token._field_id != 2LLU) {
			this->self->_method_push_err(_115621_item->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		}
		_115621_item->_field_ident=_115621_item->_field_token._field_kind;
		if (((_114917_i + 1LL) >= _114740_tokens.len()) || (_114740_tokens[static_cast<jule::Int>(_114917_i + 1LL)]._field_id == 8LLU)) {
			if ((_114917_i + 1LL) < _114740_tokens.len()) {
				(_114917_i)++;
			}
			_114817_items=append(_114817_items,jule::Slice<jule::Ref<_111612b20_EnumItemDecl>>({_115621_item}));
			goto _iter_next_4631815840;
		}
		(_114917_i)++;
		_115121_t=_114740_tokens[static_cast<jule::Int>(_114917_i)];
		if ((_115121_t._field_id != 7LLU) && (_115121_t._field_kind != jule::Str("=", 1))) {
			this->self->_method_push_err(_114740_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		}
		(_114917_i)++;
		if ((_114917_i >= _114740_tokens.len()) || (_114740_tokens[static_cast<jule::Int>(_114917_i)]._field_id == 8LLU)) {
			this->self->_method_push_err(_114740_tokens[static_cast<jule::Int>(0LL)],jule::Str("missing_expr", 12),jule::Slice<jule::Any>({}));
			goto _iter_next_4631815840;
		}
		_115621_item->_field_expr=this->self->_method_build_enum_item_expr(_114917_i,_114740_tokens);
		_114817_items=append(_114817_items,jule::Slice<jule::Ref<_111612b20_EnumItemDecl>>({_115621_item}));
	}
	_iter_next_4631815840:;
	(_114917_i)++;
	goto _iter_begin_4631815840;
	_iter_end_4631815840:;
	return _114817_items;
}



inline jule::Ref<_111612b20_EnumDecl> _111681860_Parser::_method_build_enum_decl(jule::Slice<_111613f20_Token> _118539_tokens) {
	if ((_118539_tokens.len() < 2LL) || (_118539_tokens.len() < 3LL)) {
		this->self->_method_push_err(_118539_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_EnumDecl>();
	}
	jule::Ref<_111612b20_EnumDecl> _119017_e = jule::new_struct<_111612b20_EnumDecl>(new( std::nothrow ) _111612b20_EnumDecl(_118539_tokens[static_cast<jule::Int>(1LL)],jule::Bool(),jule::Str(),jule::Ref<_111612b20_TypeDecl>(),jule::Slice<jule::Ref<_111612b20_EnumItemDecl>>(),jule::Ref<_111612b20_CommentGroup>()));
	if (_119017_e->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_119017_e->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	_119017_e->_field_ident=_119017_e->_field_token._field_kind;
	jule::Int _119717_i = 2LL;
	if (_118539_tokens[static_cast<jule::Int>(_119717_i)]._field_id == 11LLU) {
		(_119717_i)++;
		if (_119717_i >= _118539_tokens.len()) {
			this->self->_method_push_err(_118539_tokens[static_cast<jule::Int>(_119717_i - 1LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return _119017_e;
		}
		std::tie(_119017_e->_field_kind,std::ignore) = this->self->_method_build_type(_118539_tokens,(&(_119717_i)),true);
		if (_119717_i >= _118539_tokens.len()) {
			this->self->_method_stop();
			this->self->_method_push_err(_119017_e->_field_token,jule::Str("body_not_exist", 14),jule::Slice<jule::Any>({}));
			return _119017_e;
		}
	} else {
		jule::drop(_119017_e->_field_kind);
	}
	jule::Slice<_111613f20_Token> _121317_item_tokens = _111681860_range(_119717_i,jule::Str("{", 1),jule::Str("}", 1),_118539_tokens);
	if (_121317_item_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_119017_e->_field_token,jule::Str("body_not_exist", 14),jule::Slice<jule::Any>({}));
		return _119017_e;
	} else if (_119717_i < _118539_tokens.len()) {
		this->self->_method_push_err(_118539_tokens[static_cast<jule::Int>(_119717_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	_119017_e->_field_items=this->self->_method_build_enum_items(_121317_item_tokens);
	return _119017_e;
}



inline jule::Ref<_111612b20_FieldDecl> _111681860_Parser::_method_build_field(jule::Slice<_111613f20_Token> _122535_tokens) {
	jule::Ref<_111612b20_FieldDecl> _122617_f = jule::new_struct<_111612b20_FieldDecl>(new( std::nothrow ) _111612b20_FieldDecl());
	_122617_f->_field_public=_122535_tokens[static_cast<jule::Int>(0LL)]._field_id == 21LLU;
	if (_122617_f->_field_public) {
		if (_122535_tokens.len() == 1LL) {
			this->self->_method_push_err(_122535_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_111612b20_FieldDecl>();
		}
		_122535_tokens=_122535_tokens.slice(static_cast<jule::Int>(1LL));
	}
	_122617_f->_field_mutable=_122535_tokens[static_cast<jule::Int>(0LL)]._field_id == 36LLU;
	if (_122617_f->_field_mutable) {
		if (_122535_tokens.len() == 1LL) {
			this->self->_method_push_err(_122535_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_111612b20_FieldDecl>();
		}
		_122535_tokens=_122535_tokens.slice(static_cast<jule::Int>(1LL));
	}
	_122617_f->_field_token=_122535_tokens[static_cast<jule::Int>(0LL)];
	if (_122617_f->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_122617_f->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_FieldDecl>();
	}
	_122617_f->_field_ident=_122617_f->_field_token._field_kind;
	if (_122535_tokens.len() == 1LL) {
		this->self->_method_push_err(_122535_tokens[static_cast<jule::Int>(0LL)],jule::Str("missing_type", 12),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_FieldDecl>();
	} else if (_122535_tokens[static_cast<jule::Int>(1LL)]._field_id != 11LLU) {
		this->self->_method_push_err(_122535_tokens[static_cast<jule::Int>(1LL)],jule::Str("missing_type", 12),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_FieldDecl>();
	}
	_122535_tokens=_122535_tokens.slice(static_cast<jule::Int>(2LL));
	jule::Int _126217_i = 0LL;
	std::tie(_122617_f->_field_kind,std::ignore) = this->self->_method_build_type(_122535_tokens,(&(_126217_i)),true);
	if (_126217_i < _122535_tokens.len()) {
		this->self->_method_push_err(_122535_tokens[static_cast<jule::Int>(_126217_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_FieldDecl>();
	}
	return _122617_f;
}



inline jule::Slice<jule::Ref<_111612b20_FieldDecl>> _111681860_Parser::_method_build_struct_decl_fields(jule::Slice<_111613f20_Token> _127248_tokens) {
	jule::Slice<jule::Ref<_111612b20_FieldDecl>> _127317_fields = nullptr;
	jule::Slice<jule::Ref<_11167f570_Stmt>> _127417_stms = _11167f570_split_stms(_127248_tokens);
	{
		auto __julec_range_expr = _127417_stms;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11167f570_Stmt> _111681860_st = *__julec_range_begin;
			_iter_begin_4631932704:;
			{
				jule::Slice<_111613f20_Token> _127621_tokens = _111681860_st->_field_tokens;
				if (_127621_tokens[static_cast<jule::Int>(0LL)]._field_id == 18LLU) {
					goto _iter_next_4631932704;
				}
				jule::Ref<_111612b20_FieldDecl> _128021_f = this->self->_method_build_field(_127621_tokens);
				_127317_fields=append(_127317_fields,jule::Slice<jule::Ref<_111612b20_FieldDecl>>({_128021_f}));
			}
			_iter_next_4631932704:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111681860_st = *__julec_range_begin; goto _iter_begin_4631932704; }
			_iter_end_4631932704:;
		}
	}
	return _127317_fields;
}



inline jule::Ref<_111612b20_StructDecl> _111681860_Parser::_method_build_struct_decl(jule::Slice<_111613f20_Token> _128641_tokens) {
	if (_128641_tokens.len() < 3LL) {
		this->self->_method_push_err(_128641_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_StructDecl>();
	}
	jule::Int _129217_i = 1LL;
	jule::Ref<_111612b20_StructDecl> _129317_s = jule::new_struct<_111612b20_StructDecl>(new( std::nothrow ) _111612b20_StructDecl(_128641_tokens[static_cast<jule::Int>(_129217_i)],jule::Str(),jule::Slice<jule::Ref<_111612b20_FieldDecl>>(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ref<_111612b20_Directive>>(),jule::Ref<_111612b20_CommentGroup>(),jule::Slice<jule::Ref<_111612b20_GenericDecl>>()));
	if (_129317_s->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_129317_s->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	(_129217_i)++;
	if (_129217_i >= _128641_tokens.len()) {
		this->self->_method_push_err(_128641_tokens[static_cast<jule::Int>(_129217_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return _129317_s;
	}
	_129317_s->_field_ident=_129317_s->_field_token._field_kind;
	_111613f20_Token _130613_error_token = _128641_tokens[static_cast<jule::Int>(_129217_i)];
	jule::Slice<_111613f20_Token> _130717_generics_tokens = _111681860_range(_129217_i,jule::Str("[", 1),jule::Str("]", 1),_128641_tokens);
	if (_130717_generics_tokens != nullptr) {
		_129317_s->_field_generics=this->self->_method_build_generics(_130717_generics_tokens,_130613_error_token);
	}
	if (_129217_i >= _128641_tokens.len()) {
		this->self->_method_push_err(_128641_tokens[static_cast<jule::Int>(_129217_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return _129317_s;
	}
	jule::Slice<_111613f20_Token> _131617_body_tokens = _111681860_range(_129217_i,jule::Str("{", 1),jule::Str("}", 1),_128641_tokens);
	if (_131617_body_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_129317_s->_field_token,jule::Str("body_not_exist", 14),jule::Slice<jule::Any>({}));
		return _129317_s;
	}
	if (_129217_i < _128641_tokens.len()) {
		this->self->_method_push_err(_128641_tokens[static_cast<jule::Int>(_129217_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	_129317_s->_field_fields=this->self->_method_build_struct_decl_fields(_131617_body_tokens);
	return _129317_s;
}



inline void _111681860_Parser::_method_check_method_receiver(jule::Ref<_111612b20_FnDecl> _132940_f) {
	if (_132940_f->_field_statically) {
		if ((_132940_f->_field_params.len() > 0LL) && _132940_f->_field_params[static_cast<jule::Int>(0LL)]->_method_is_self()) {
			(*this)._method_push_err(_132940_f->_field_token,jule::Str("static_function_has_receiver", 28),jule::Slice<jule::Any>({}));
		}
		return;
	}
	if (_132940_f->_field_params.len() == 0LL) {
		(*this)._method_push_err(_132940_f->_field_token,jule::Str("missing_receiver", 16),jule::Slice<jule::Any>({}));
		return;
	}
	jule::Ref<_111612b20_ParamDecl> _134213_param = _132940_f->_field_params[static_cast<jule::Int>(0LL)];
	if ((!(_134213_param->_method_is_self()))) {
		(*this)._method_push_err(_132940_f->_field_token,jule::Str("missing_receiver", 16),jule::Slice<jule::Any>({}));
		return;
	}
}



inline jule::Slice<jule::Ref<_111612b20_FnDecl>> _111681860_Parser::_method_build_trait_methods(jule::Slice<_111613f20_Token> _134943_tokens) {
	jule::Slice<jule::Ref<_111612b20_FnDecl>> _135017_methods = nullptr;
	jule::Slice<jule::Ref<_11167f570_Stmt>> _135117_stms = _11167f570_split_stms(_134943_tokens);
	{
		auto __julec_range_expr = _135117_stms;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11167f570_Stmt> _111681860_st = *__julec_range_begin;
			_iter_begin_4632001344:;
			{
				jule::Slice<_111613f20_Token> _135321_tokens = _112190570_eliminate_comments(_111681860_st->_field_tokens);
				if (_135321_tokens.len() == 0LL) {
					goto _iter_next_4632001344;
				}
				jule::Bool _135821_is_pub = false;
				if (_135321_tokens[static_cast<jule::Int>(0LL)]._field_id == 21LLU) {
					_135821_is_pub=true;
					if (_135321_tokens.len() == 1LL) {
						this->self->_method_push_err(_135321_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
						goto _iter_next_4632001344;
					}
					_135321_tokens=_135321_tokens.slice(static_cast<jule::Int>(1LL));
				}
				jule::Ref<_111612b20_FnDecl> _136821_f = this->self->_method_build_fn(_135321_tokens,true,false,true);
				if (jule::real(_136821_f)) {
					this->self->_method_check_method_receiver(_136821_f);
					if (_136821_f->_field_generics.len() > 0LL) {
						this->self->_method_push_err(_136821_f->_field_token,jule::Str("trait_method_has_generics", 25),jule::Slice<jule::Any>({}));
					}
					_136821_f->_field_public=_135821_is_pub;
					_135017_methods=append(_135017_methods,jule::Slice<jule::Ref<_111612b20_FnDecl>>({_136821_f}));
				}
			}
			_iter_next_4632001344:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111681860_st = *__julec_range_begin; goto _iter_begin_4632001344; }
			_iter_end_4632001344:;
		}
	}
	return _135017_methods;
}



inline jule::Ref<_111612b20_TraitDecl> _111681860_Parser::_method_build_trait_decl(jule::Slice<_111613f20_Token> _138140_tokens) {
	if (_138140_tokens.len() < 3LL) {
		this->self->_method_push_err(_138140_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_TraitDecl>();
	}
	jule::Ref<_111612b20_TraitDecl> _138617_t = jule::new_struct<_111612b20_TraitDecl>(new( std::nothrow ) _111612b20_TraitDecl(_138140_tokens[static_cast<jule::Int>(1LL)],jule::Str(),jule::Bool(),jule::Ref<_111612b20_CommentGroup>(),jule::Slice<jule::Ref<_111612b20_FnDecl>>()));
	if (_138617_t->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_138617_t->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	_138617_t->_field_ident=_138617_t->_field_token._field_kind;
	jule::Int _139317_i = 2LL;
	jule::Slice<_111613f20_Token> _139417_body_tokens = _111681860_range(_139317_i,jule::Str("{", 1),jule::Str("}", 1),_138140_tokens);
	if (_139417_body_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_138617_t->_field_token,jule::Str("body_not_exist", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_TraitDecl>();
	}
	if (_139317_i < _138140_tokens.len()) {
		this->self->_method_push_err(_138140_tokens[static_cast<jule::Int>(_139317_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	_138617_t->_field_methods=this->self->_method_build_trait_methods(_139417_body_tokens);
	return _138617_t;
}



inline jule::Ref<_111612b20_FnDecl> _111681860_Parser::_method_build_cpp_link_fn(jule::Slice<_111613f20_Token> _140741_tokens) {
	_140741_tokens=_140741_tokens.slice(static_cast<jule::Int>(1LL));
	jule::Ref<_111612b20_FnDecl> _140917_f = this->self->_method_build_fn(_140741_tokens,false,false,true);
	if (jule::real(_140917_f)) {
		_140917_f->_field_cpp_linked=true;
	}
	return _140917_f;
}



inline jule::Ref<_111612b20_VarDecl> _111681860_Parser::_method_build_cpp_link_var(jule::Slice<_111613f20_Token> _141642_tokens) {
	_141642_tokens=_141642_tokens.slice(static_cast<jule::Int>(1LL));
	jule::Ref<_111612b20_VarDecl> _141817_v = this->self->_method_build_var(_141642_tokens);
	if (jule::real(_141817_v)) {
		_141817_v->_field_cpp_linked=true;
		if (jule::real(_141817_v->_field_expr)) {
			this->self->_method_push_err(_141817_v->_field_token,jule::Str("cpp_linked_variable_has_expr", 28),jule::Slice<jule::Any>({}));
		}
	}
	return _141817_v;
}



inline jule::Ref<_111612b20_StructDecl> _111681860_Parser::_method_build_cpp_link_struct(jule::Slice<_111613f20_Token> _142845_tokens) {
	_142845_tokens=_142845_tokens.slice(static_cast<jule::Int>(1LL));
	jule::Ref<_111612b20_StructDecl> _143017_s = this->self->_method_build_struct_decl(_142845_tokens);
	if (jule::real(_143017_s)) {
		_143017_s->_field_cpp_linked=true;
	}
	return _143017_s;
}



inline jule::Ref<_111612b20_TypeAliasDecl> _111681860_Parser::_method_build_cpp_link_type_alias(jule::Slice<_111613f20_Token> _143749_tokens) {
	_143749_tokens=_143749_tokens.slice(static_cast<jule::Int>(1LL));
	jule::Ref<_111612b20_TypeAliasDecl> _143917_t = this->self->_method_build_type_alias_decl(_143749_tokens);
	if (jule::real(_143917_t)) {
		_143917_t->_field_cpp_linked=true;
	}
	return _143917_t;
}



inline jule::Ref<_111612b20_UseDecl> _111681860_Parser::_method_build_cpp_link_use(jule::Slice<_111613f20_Token> _144642_tokens) {
	if (_144642_tokens.len() == 1LL) {
		this->self->_method_push_err(_144642_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_UseDecl>();
	}
	_144642_tokens=_144642_tokens.slice(static_cast<jule::Int>(1LL));
	
	return this->self->_method_build_use_decl(_144642_tokens,true);
}



inline jule::Any _111681860_Parser::_method_build_cpp_link(jule::Slice<_111613f20_Token> _145738_tokens) {
	_111613f20_Token _145817_token = _145738_tokens[static_cast<jule::Int>(0LL)];
	if (_145738_tokens.len() == 1LL) {
		this->self->_method_push_err(_145817_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::Any(nullptr);
	}
	_145817_token=_145738_tokens[static_cast<jule::Int>(1LL)];
	{
		auto _match_expr{ _145817_token._field_id };
		if (!((19LLU) == _match_expr)) { goto _case_end_4632099248; }
		_case_begin_4632099248:;
		{
			return jule::Any(this->self->_method_build_cpp_link_use(_145738_tokens));
		}
		goto _match_end_4632097520;
		_case_end_4632099248:;
		if (!((33LLU) == _match_expr || (35LLU) == _match_expr)) { goto _case_end_4632099360; }
		_case_begin_4632099360:;
		{
			return jule::Any(this->self->_method_build_cpp_link_fn(_145738_tokens));
		}
		goto _match_end_4632097520;
		_case_end_4632099360:;
		if (!((9LLU) == _match_expr || (34LLU) == _match_expr)) { goto _case_end_4632099472; }
		_case_begin_4632099472:;
		{
			return jule::Any(this->self->_method_build_cpp_link_var(_145738_tokens));
		}
		goto _match_end_4632097520;
		_case_end_4632099472:;
		if (!((25LLU) == _match_expr)) { goto _case_end_4632099584; }
		_case_begin_4632099584:;
		{
			return jule::Any(this->self->_method_build_cpp_link_struct(_145738_tokens));
		}
		goto _match_end_4632097520;
		_case_end_4632099584:;
		if (!((10LLU) == _match_expr)) { goto _case_end_4632099696; }
		_case_begin_4632099696:;
		{
			return jule::Any(this->self->_method_build_cpp_link_type_alias(_145738_tokens));
		}
		goto _match_end_4632097520;
		_case_end_4632099696:;
		_case_begin_4632098720:;
		{
			this->self->_method_push_err(_145817_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4632097520;
		_case_end_4632098720:;
		_match_end_4632097520:;
	}
	return jule::Any(nullptr);
}



inline jule::Ref<_111612b20_FnDecl> _111681860_Parser::_method_get_method(jule::Slice<_111613f20_Token> _148834_tokens) {
	jule::Int _148917_i = 0LL;
	_111613f20_Token _149017_token = _148834_tokens[static_cast<jule::Int>(_148917_i)];
	if (_149017_token._field_id == 38LLU) {
		if ((_148917_i + 1LL) >= _148834_tokens.len()) {
			this->self->_method_push_err(_149017_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_111612b20_FnDecl>();
		}
		(_148917_i)++;
		_149017_token=_148834_tokens[static_cast<jule::Int>(_148917_i)];
	}
	if (_149017_token._field_id == 35LLU) {
		if ((_148917_i + 1LL) >= _148834_tokens.len()) {
			this->self->_method_push_err(_149017_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_111612b20_FnDecl>();
		}
		(_148917_i)++;
		_149017_token=_148834_tokens[static_cast<jule::Int>(_148917_i)];
	}
	if (_149017_token._field_id != 33LLU) {
		this->self->_method_push_err(_149017_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_FnDecl>();
	}
	return this->self->_method_build_fn(_148834_tokens,true,false,false);
}



inline void _111681860_Parser::_method_parse_impl_trait(jule::Ref<_111612b20_Impl> _151740_ipl,jule::Slice<_111613f20_Token> _151756_tokens) {
	jule::Slice<jule::Ref<_11167f570_Stmt>> _151817_stms = _11167f570_split_stms(_151756_tokens);
	{
		auto __julec_range_expr = _151817_stms;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11167f570_Stmt> _111681860_st = *__julec_range_begin;
			_iter_begin_4632135136:;
			{
				jule::Slice<_111613f20_Token> _152021_tokens = _111681860_st->_field_tokens;
				_111613f20_Token _152121_token = _152021_tokens[static_cast<jule::Int>(0LL)];
				jule::Bool _152221_is_pub = false;
				{
					auto _match_expr{ _152121_token._field_id };
					if (!((18LLU) == _match_expr)) { goto _case_end_4632141632; }
					_case_begin_4632141632:;
					{
						goto _iter_next_4632135136;
					}
					goto _match_end_4632140512;
					_case_end_4632141632:;
					if (!((21LLU) == _match_expr)) { goto _case_end_4632141744; }
					_case_begin_4632141744:;
					{
						_152221_is_pub=true;
						if (_152021_tokens.len() == 1LL) {
							this->self->_method_push_err(_152021_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
							goto _iter_next_4632135136;
						}
						_152021_tokens=_152021_tokens.slice(static_cast<jule::Int>(1LL));
						if (_152021_tokens.len() > 0LL) {
							_152121_token=_152021_tokens[static_cast<jule::Int>(0LL)];
						}
					}
					goto _match_end_4632140512;
					_case_end_4632141744:;
					_match_end_4632140512:;
				}
				{
					auto _match_expr{ _152121_token._field_id };
					if (!((38LLU) == _match_expr || (33LLU) == _match_expr || (35LLU) == _match_expr)) { goto _case_end_4632151968; }
					_case_begin_4632151968:;
					{
						jule::Ref<_111612b20_FnDecl> _154425_f = this->self->_method_get_method(_152021_tokens);
						if (jule::real(_154425_f)) {
							_154425_f->_field_public=_152221_is_pub;
							this->self->_method_check_method_receiver(_154425_f);
							_151740_ipl->_field_methods=append(_151740_ipl->_field_methods,jule::Slice<jule::Ref<_111612b20_FnDecl>>({_154425_f}));
						}
					}
					goto _match_end_4632151712;
					_case_end_4632151968:;
					_case_begin_4632151296:;
					{
						this->self->_method_push_err(_152121_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
						goto _iter_next_4632135136;
					}
					goto _match_end_4632151712;
					_case_end_4632151296:;
					_match_end_4632151712:;
				}
			}
			_iter_next_4632135136:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111681860_st = *__julec_range_begin; goto _iter_begin_4632135136; }
			_iter_end_4632135136:;
		}
	}
}



inline void _111681860_Parser::_method_parse_impl_struct(jule::Ref<_111612b20_Impl> _155841_ipl,jule::Slice<_111613f20_Token> _155857_tokens) {
	jule::Slice<jule::Ref<_11167f570_Stmt>> _155917_stms = _11167f570_split_stms(_155857_tokens);
	{
		auto __julec_range_expr = _155917_stms;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11167f570_Stmt> _111681860_st = *__julec_range_begin;
			_iter_begin_4632165920:;
			{
				jule::Slice<_111613f20_Token> _156121_tokens = _111681860_st->_field_tokens;
				_111613f20_Token _156221_token = _156121_tokens[static_cast<jule::Int>(0LL)];
				jule::Bool _156321_is_pub = false;
				{
					auto _match_expr{ _156221_token._field_id };
					if (!((18LLU) == _match_expr)) { goto _case_end_4632172416; }
					_case_begin_4632172416:;
					{
						goto _iter_next_4632165920;
					}
					goto _match_end_4632171296;
					_case_end_4632172416:;
					if (!((21LLU) == _match_expr)) { goto _case_end_4632172528; }
					_case_begin_4632172528:;
					{
						_156321_is_pub=true;
						if (_156121_tokens.len() == 1LL) {
							this->self->_method_push_err(_156121_tokens[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
							goto _iter_next_4632165920;
						}
						_156121_tokens=_156121_tokens.slice(static_cast<jule::Int>(1LL));
						if (_156121_tokens.len() > 0LL) {
							_156221_token=_156121_tokens[static_cast<jule::Int>(0LL)];
						}
					}
					goto _match_end_4632171296;
					_case_end_4632172528:;
					_match_end_4632171296:;
				}
				{
					auto _match_expr{ _156221_token._field_id };
					if (!((38LLU) == _match_expr || (33LLU) == _match_expr || (35LLU) == _match_expr)) { goto _case_end_4632182752; }
					_case_begin_4632182752:;
					{
						jule::Ref<_111612b20_FnDecl> _158525_f = this->self->_method_get_method(_156121_tokens);
						if (jule::real(_158525_f)) {
							_158525_f->_field_public=_156321_is_pub;
							this->self->_method_check_method_receiver(_158525_f);
							_155841_ipl->_field_methods=append(_155841_ipl->_field_methods,jule::Slice<jule::Ref<_111612b20_FnDecl>>({_158525_f}));
						}
					}
					goto _match_end_4632182496;
					_case_end_4632182752:;
					_case_begin_4632182128:;
					{
						this->self->_method_push_err(_156221_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
						goto _iter_next_4632165920;
					}
					goto _match_end_4632182496;
					_case_end_4632182128:;
					_match_end_4632182496:;
				}
			}
			_iter_next_4632165920:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111681860_st = *__julec_range_begin; goto _iter_begin_4632165920; }
			_iter_end_4632165920:;
		}
	}
}



inline void _111681860_Parser::_method_parse_impl_body(jule::Ref<_111612b20_Impl> _159939_ipl,jule::Slice<_111613f20_Token> _159955_tokens) {
	if (_159939_ipl->_method_is_trait_impl()) {
		this->self->_method_parse_impl_trait(_159939_ipl,_159955_tokens);
		return;
	}
	this->self->_method_parse_impl_struct(_159939_ipl,_159955_tokens);
}



inline jule::Ref<_111612b20_Impl> _111681860_Parser::_method_build_impl(jule::Slice<_111613f20_Token> _160734_tokens) {
	_111613f20_Token _160817_token = _160734_tokens[static_cast<jule::Int>(0LL)];
	if (_160734_tokens.len() < 2LL) {
		this->self->_method_push_err(_160817_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_Impl>();
	}
	_160817_token=_160734_tokens[static_cast<jule::Int>(1LL)];
	if (_160817_token._field_id != 2LLU) {
		this->self->_method_push_err(_160817_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_Impl>();
	}
	if (_160734_tokens.len() < 3LL) {
		this->self->_method_push_err(_160817_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_Impl>();
	}
	jule::Ref<_111612b20_Impl> _162217_ipl = jule::new_struct<_111612b20_Impl>(new( std::nothrow ) _111612b20_Impl(_160817_token,_111613f20_Token(),jule::Slice<jule::Ref<_111612b20_FnDecl>>()));
	_160817_token=_160734_tokens[static_cast<jule::Int>(2LL)];
	if (_160817_token._field_id != 12LLU) {
		if ((_160817_token._field_id == 3LLU) && (_160817_token._field_kind == jule::Str("{", 1))) {
			std::tie(_162217_ipl->_field_base,_162217_ipl->_field_dest) = std::make_tuple(_162217_ipl->_field_dest,_162217_ipl->_field_base);
			_160734_tokens=_160734_tokens.slice(static_cast<jule::Int>(2LL));
			goto _julec_label_body;
		}
		this->self->_method_push_err(_160817_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_Impl>();
	}
	if (_160734_tokens.len() < 4LL) {
		this->self->_method_push_err(_160817_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_Impl>();
	}
	_160817_token=_160734_tokens[static_cast<jule::Int>(3LL)];
	if (_160817_token._field_id != 2LLU) {
		this->self->_method_push_err(_160817_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_Impl>();
	}
	_162217_ipl->_field_dest=_160817_token;
	_160734_tokens=_160734_tokens.slice(static_cast<jule::Int>(4LL));
	_julec_label_body:;
	jule::Int _165117_i = 0LL;
	jule::Slice<_111613f20_Token> _165217_body_tokens = _111681860_range(_165117_i,jule::Str("{", 1),jule::Str("}", 1),_160734_tokens);
	if (_165217_body_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_162217_ipl->_field_base,jule::Str("body_not_exist", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_111612b20_Impl>();
	}
	if (_165117_i < _160734_tokens.len()) {
		this->self->_method_push_err(_160734_tokens[static_cast<jule::Int>(_165117_i)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
	}
	this->self->_method_parse_impl_body(_162217_ipl,_165217_body_tokens);
	return _162217_ipl;
}



inline jule::Any _111681860_Parser::_method_build_node_data(jule::Slice<_111613f20_Token> _166539_tokens) {
	_111613f20_Token _166617_token = _166539_tokens[static_cast<jule::Int>(0LL)];
	{
		auto _match_expr{ _166617_token._field_id };
		if (!((19LLU) == _match_expr)) { goto _case_end_4632255248; }
		_case_begin_4632255248:;
		{
			
			return jule::Any(this->self->_method_build_use_decl(_166539_tokens,false));
		}
		goto _match_end_4632249856;
		_case_end_4632255248:;
		if (!((33LLU) == _match_expr || (35LLU) == _match_expr)) { goto _case_end_4632255472; }
		_case_begin_4632255472:;
		{
			jule::Ref<_111612b20_FnDecl> _167421_f = this->self->_method_build_fn(_166539_tokens,false,false,false);
			if (jule::real(_167421_f)) {
				_167421_f->_field_global=true;
			}
			return jule::Any(_167421_f);
		}
		goto _match_end_4632249856;
		_case_end_4632255472:;
		if (!((34LLU) == _match_expr || (9LLU) == _match_expr || (36LLU) == _match_expr || (38LLU) == _match_expr)) { goto _case_end_4632253264; }
		_case_begin_4632253264:;
		{
			return jule::Any(this->self->_method_build_var(_166539_tokens));
		}
		goto _match_end_4632249856;
		_case_end_4632253264:;
		if (!((10LLU) == _match_expr)) { goto _case_end_4632252240; }
		_case_begin_4632252240:;
		{
			return jule::Any(this->self->_method_build_type_alias_decl(_166539_tokens));
		}
		goto _match_end_4632249856;
		_case_end_4632252240:;
		if (!((24LLU) == _match_expr)) { goto _case_end_4632252352; }
		_case_begin_4632252352:;
		{
			return jule::Any(this->self->_method_build_enum_decl(_166539_tokens));
		}
		goto _match_end_4632249856;
		_case_end_4632252352:;
		if (!((25LLU) == _match_expr)) { goto _case_end_4632254576; }
		_case_begin_4632254576:;
		{
			return jule::Any(this->self->_method_build_struct_decl(_166539_tokens));
		}
		goto _match_end_4632249856;
		_case_end_4632254576:;
		if (!((29LLU) == _match_expr)) { goto _case_end_4632254688; }
		_case_begin_4632254688:;
		{
			return jule::Any(this->self->_method_build_trait_decl(_166539_tokens));
		}
		goto _match_end_4632249856;
		_case_end_4632254688:;
		if (!((30LLU) == _match_expr)) { goto _case_end_4632254800; }
		_case_begin_4632254800:;
		{
			return jule::Any(this->self->_method_build_impl(_166539_tokens));
		}
		goto _match_end_4632249856;
		_case_end_4632254800:;
		if (!((31LLU) == _match_expr)) { goto _case_end_4632254912; }
		_case_begin_4632254912:;
		{
			return this->self->_method_build_cpp_link(_166539_tokens);
		}
		goto _match_end_4632249856;
		_case_end_4632254912:;
		if (!((18LLU) == _match_expr)) { goto _case_end_4632255024; }
		_case_begin_4632255024:;
		{
			jule::Ref<_111612b20_Comment> _170821_c = _111681860_build_comment(_166617_token);
			this->self->_method_process_comment(_170821_c);
			return jule::Any(_170821_c);
		}
		goto _match_end_4632249856;
		_case_end_4632255024:;
		_case_begin_4632251760:;
		{
			this->self->_method_push_err(_166617_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::Any(nullptr);
		}
		goto _match_end_4632249856;
		_case_end_4632251760:;
		_match_end_4632249856:;
	}
}



inline void _111681860_Parser::_method_check_comment_group(_111612b20_Node _171838_node) {
	if ((!(jule::real((*this)._field_comment_group)))) {
		return;
	}
	{
		auto _match_expr{ _171838_node._field_data };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_Comment>>() || _match_expr.type_is<jule::Ref<_111612b20_Directive>>())) { goto _case_end_4632281040; }
		goto _match_end_4632279120;
		_case_end_4632281040:;
		_case_begin_4632280080:;
		{
			jule::drop((*this)._field_comment_group);
		}
		goto _match_end_4632279120;
		_case_end_4632280080:;
		_match_end_4632279120:;
	}
}



inline void _111681860_Parser::_method_check_directive(_111612b20_Node _173234_node) {
	if ((*this)._field_directives == nullptr) {
		return;
	}
	{
		auto _match_expr{ _173234_node._field_data };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_Directive>>() || _match_expr.type_is<jule::Ref<_111612b20_Comment>>())) { goto _case_end_4632288320; }
		goto _match_end_4632286320;
		_case_end_4632288320:;
		_case_begin_4632285936:;
		{
			(*this)._field_directives=nullptr;
		}
		goto _match_end_4632286320;
		_case_end_4632285936:;
		_match_end_4632286320:;
	}
}



inline void _111681860_Parser::_method_apply_meta(_111612b20_Node _174733_node,jule::Bool _174749_is_pub) {
	{
		auto _match_expr{ _174733_node._field_data };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_VarDecl>>())) { goto _case_end_4632292032; }
		_case_begin_4632292032:;
		{
			jule::Ref<_111612b20_VarDecl> _175021_v = _174733_node._field_data.operator jule::Ref<_111612b20_VarDecl>();
			if ((!(jule::real(_175021_v)))) {
				return;
			}
			_175021_v->_field_public=_174749_is_pub;
			_175021_v->_field_doc_comments=(*this)._field_comment_group;
			_174749_is_pub=false;
			jule::drop((*this)._field_comment_group);
		}
		goto _match_end_4632291168;
		_case_end_4632292032:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_FnDecl>>())) { goto _case_end_4632292144; }
		_case_begin_4632292144:;
		{
			jule::Ref<_111612b20_FnDecl> _176021_f = _174733_node._field_data.operator jule::Ref<_111612b20_FnDecl>();
			if ((!(jule::real(_176021_f)))) {
				return;
			}
			_176021_f->_field_public=_174749_is_pub;
			_174749_is_pub=false;
			_176021_f->_field_directives=(*this)._field_directives;
			(*this)._field_directives=nullptr;
			_176021_f->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
		}
		goto _match_end_4632291168;
		_case_end_4632292144:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_TypeAliasDecl>>())) { goto _case_end_4632292256; }
		_case_begin_4632292256:;
		{
			jule::Ref<_111612b20_TypeAliasDecl> _177321_tad = _174733_node._field_data.operator jule::Ref<_111612b20_TypeAliasDecl>();
			if ((!(jule::real(_177321_tad)))) {
				return;
			}
			_177321_tad->_field_public=_174749_is_pub;
			_174749_is_pub=false;
			_177321_tad->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
		}
		goto _match_end_4632291168;
		_case_end_4632292256:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_EnumDecl>>())) { goto _case_end_4632292384; }
		_case_begin_4632292384:;
		{
			jule::Ref<_111612b20_EnumDecl> _178321_ed = _174733_node._field_data.operator jule::Ref<_111612b20_EnumDecl>();
			if ((!(jule::real(_178321_ed)))) {
				return;
			}
			_178321_ed->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
			_178321_ed->_field_public=_174749_is_pub;
			_174749_is_pub=false;
		}
		goto _match_end_4632291168;
		_case_end_4632292384:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_StructDecl>>())) { goto _case_end_4632292512; }
		_case_begin_4632292512:;
		{
			jule::Ref<_111612b20_StructDecl> _179321_sd = _174733_node._field_data.operator jule::Ref<_111612b20_StructDecl>();
			if ((!(jule::real(_179321_sd)))) {
				return;
			}
			_179321_sd->_field_directives=(*this)._field_directives;
			(*this)._field_directives=nullptr;
			_179321_sd->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
			_179321_sd->_field_public=_174749_is_pub;
			_174749_is_pub=false;
		}
		goto _match_end_4632291168;
		_case_end_4632292512:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_TraitDecl>>())) { goto _case_end_4632292640; }
		_case_begin_4632292640:;
		{
			jule::Ref<_111612b20_TraitDecl> _180521_td = _174733_node._field_data.operator jule::Ref<_111612b20_TraitDecl>();
			if ((!(jule::real(_180521_td)))) {
				return;
			}
			_180521_td->_field_doc_comments=(*this)._field_comment_group;
			jule::drop((*this)._field_comment_group);
			_180521_td->_field_public=_174749_is_pub;
			_174749_is_pub=false;
		}
		goto _match_end_4632291168;
		_case_end_4632292640:;
		_match_end_4632291168:;
	}
	if (_174749_is_pub) {
		(*this)._method_push_err(_174733_node._field_token,jule::Str("def_not_support_pub", 19),jule::Slice<jule::Any>({}));
	}
}



inline void _111681860_Parser::_method_check_use_decl(_111612b20_Node _181933_node) {
	{
		auto _match_expr{ _181933_node._field_data };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_UseDecl>>())) { goto _case_end_4632336384; }
		goto _match_end_4632334528;
		_case_end_4632336384:;
		_case_begin_4632335344:;
		{
			return;
		}
		goto _match_end_4632334528;
		_case_end_4632335344:;
		_match_end_4632334528:;
	}
	if ((*this)._field_ast->_field_decls._method_len() > 0LL) {
		(*this)._method_push_err(_181933_node._field_token,jule::Str("use_decl_at_body", 16),jule::Slice<jule::Any>({}));
	}
}



inline std::tuple<jule::Bool,jule::Any> _111681860_Parser::_method_build_general_scope_node_data(jule::Slice<_111613f20_Token> _183353_st) {
	jule::Any _183382_data = jule::Any();
	jule::Bool _183368_is_pub = jule::Bool();
	if (_183353_st[static_cast<jule::Int>(0LL)]._field_id == 21LLU) {
		_183368_is_pub=true;
		_183353_st=_183353_st.slice(static_cast<jule::Int>(1LL));
		if (_183353_st.len() == 0LL) {
			this->self->_method_push_err(_183353_st[static_cast<jule::Int>(0LL)],jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return std::make_tuple(_183368_is_pub,_183382_data);
		}
	}
	_183382_data=this->self->_method_build_node_data(_183353_st);
	_183368_is_pub = _183368_is_pub;
	_183382_data = _183382_data;
	return std::make_tuple(_183368_is_pub,_183382_data);
}



inline _111612b20_Node _111681860_Parser::_method_parse_node(jule::Slice<_111613f20_Token> _184834_st) {
	_111612b20_Node _184917_node = _111612b20_Node(_184834_st[static_cast<jule::Int>(0LL)],jule::Any());
	jule::Bool _185314_is_pub;
	jule::Any _185326_data;
	std::tie(_185314_is_pub,_185326_data) = this->self->_method_build_general_scope_node_data(_184834_st);
	if (_185326_data == nullptr) {
		return _184917_node;
	}
	_184917_node._field_data=_185326_data;
	this->self->_method_apply_meta(_184917_node,_185314_is_pub);
	this->self->_method_check_comment_group(_184917_node);
	this->self->_method_check_directive(_184917_node);
	this->self->_method_check_use_decl(_184917_node);
	return _184917_node;
}



inline void _111681860_Parser::_method_append_node(jule::Slice<_111613f20_Token> _186735_st) {
	if (_186735_st.len() == 0LL) {
		return;
	}
	_111612b20_Node _187217_node = this->self->_method_parse_node(_186735_st);
	if ((_187217_node._field_data == nullptr) || this->self->_method_stopped()) {
		return;
	}
	{
		if (!((_187217_node._method_is_use_decl()))) { goto _case_end_4632376656; }
		_case_begin_4632376656:;
		{
			this->self->_field_ast->_field_use_decls._method_push(_187217_node._field_data.operator jule::Ref<_111612b20_UseDecl>());
		}
		goto _match_end_4632374160;
		_case_end_4632376656:;
		if (!((_187217_node._method_is_decl()))) { goto _case_end_4632375600; }
		_case_begin_4632375600:;
		{
			this->self->_field_ast->_field_decls._method_push(_187217_node);
		}
		goto _match_end_4632374160;
		_case_end_4632375600:;
		if (!((_187217_node._method_is_comment()))) { goto _case_end_4632375712; }
		_case_begin_4632375712:;
		{
			jule::Ref<_111612b20_Comment> _188721_c = _187217_node._field_data.operator jule::Ref<_111612b20_Comment>();
			this->self->_field_ast->_field_comments._method_push(_188721_c);
		}
		goto _match_end_4632374160;
		_case_end_4632375712:;
		if (!((_187217_node._method_is_impl()))) { goto _case_end_4632375824; }
		_case_begin_4632375824:;
		{
			this->self->_field_ast->_field_impls._method_push(_187217_node._field_data.operator jule::Ref<_111612b20_Impl>());
		}
		goto _match_end_4632374160;
		_case_end_4632375824:;
		_case_begin_4632375296:;
		{
			this->self->_method_push_err(_187217_node._field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4632374160;
		_case_end_4632375296:;
		_match_end_4632374160:;
	}
}



inline void _111681860_Parser::_method_remove_range(jule::Int _189831_i,jule::Str _189839_kind,jule::Slice<_111613f20_Token>& _189851_tokens,jule::Slice<jule::Int>& _189873_ranges) {
	jule::Str _189913_close = _111681860_get_close_kind_of_brace(_189839_kind);
	_iter_begin_4632392928:;
	if (!(_189831_i >= 0LL)) { goto _iter_end_4632392928; }
	{
		_111613f20_Token _190117_tok = _189851_tokens[static_cast<jule::Int>(_189873_ranges[static_cast<jule::Int>(_189831_i)])];
		if (_190117_tok._field_kind != _189913_close) {
			goto _iter_next_4632392928;
		}
		_189873_ranges=append(_189873_ranges.slice(0LL,static_cast<jule::Int>(_189831_i)),_189873_ranges.slice(static_cast<jule::Int>(_189831_i + 1LL)));
		goto _iter_end_4632392928;
	}
	_iter_next_4632392928:;
	(_189831_i)--;
	goto _iter_begin_4632392928;
	_iter_end_4632392928:;
}



inline void _111681860_Parser::_method_push_wrong_order_close_err(_111613f20_Token _191145_t,jule::Slice<_111613f20_Token>& _191156_tokens,jule::Slice<jule::Int>& _191174_ranges) {
	jule::Str _191217_msg = jule::Str("", 0);
	{
		auto _match_expr{ _191156_tokens[static_cast<jule::Int>(_191174_ranges[static_cast<jule::Int>(_191174_ranges.len() - 1LL)])]._field_kind };
		if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4632415712; }
		_case_begin_4632415712:;
		{
			_191217_msg=jule::Str("expected_parentheses_close", 26);
		}
		goto _match_end_4632412784;
		_case_end_4632415712:;
		if (!((jule::Str("{", 1)) == _match_expr)) { goto _case_end_4632415824; }
		_case_begin_4632415824:;
		{
			_191217_msg=jule::Str("expected_brace_close", 20);
		}
		goto _match_end_4632412784;
		_case_end_4632415824:;
		if (!((jule::Str("[", 1)) == _match_expr)) { goto _case_end_4632415936; }
		_case_begin_4632415936:;
		{
			_191217_msg=jule::Str("expected_bracket_close", 22);
		}
		goto _match_end_4632412784;
		_case_end_4632415936:;
		_match_end_4632412784:;
	}
	(*this)._method_push_err(_191145_t,_191217_msg,jule::Slice<jule::Any>({}));
}



inline void _111681860_Parser::_method_push_range_close(_111613f20_Token _192235_t,jule::Str _192245_left,jule::Slice<_111613f20_Token>& _192257_tokens,jule::Slice<jule::Int>& _192279_ranges) {
	jule::I64 _192313_n = _192279_ranges.len();
	if (_192313_n == 0LL) {
		{
			auto _match_expr{ _192235_t._field_kind };
			if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4632428128; }
			_case_begin_4632428128:;
			{
				(*this)._method_push_err(_192235_t,jule::Str("extra_closed_brackets", 21),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4632427248;
			_case_end_4632428128:;
			if (!((jule::Str("}", 1)) == _match_expr)) { goto _case_end_4632428240; }
			_case_begin_4632428240:;
			{
				(*this)._method_push_err(_192235_t,jule::Str("extra_closed_braces", 19),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4632427248;
			_case_end_4632428240:;
			if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4632428352; }
			_case_begin_4632428352:;
			{
				(*this)._method_push_err(_192235_t,jule::Str("extra_closed_parentheses", 24),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4632427248;
			_case_end_4632428352:;
			_match_end_4632427248:;
		}
		return;
	} else if (_192257_tokens[static_cast<jule::Int>(_192279_ranges[static_cast<jule::Int>(_192313_n - 1LL)])]._field_kind != _192245_left) {
		(*this)._method_push_wrong_order_close_err(_192235_t,_192257_tokens,_192279_ranges);
	}
	(*this)._method_remove_range(_192313_n - 1LL,_192235_t._field_kind,_192257_tokens,_192279_ranges);
}



inline void _111681860_Parser::_method_check_ranges(jule::Slice<_111613f20_Token> _193731_tokens) {
	jule::Slice<jule::Int> _193817_ranges = nullptr;
	{
		auto __julec_range_expr = _193731_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _111681860_i = 0;
			_111613f20_Token _111681860_token = *__julec_range_begin;
			_iter_begin_4632443424:;
			{
				if (_111681860_token._field_id != 3LLU) {
					goto _iter_next_4632443424;
				}
				{
					auto _match_expr{ _111681860_token._field_kind };
					if (!((jule::Str("(", 1)) == _match_expr || (jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr)) { goto _case_end_4632447280; }
					_case_begin_4632447280:;
					{
						_193817_ranges=append(_193817_ranges,jule::Slice<jule::Int>({_111681860_i}));
					}
					goto _match_end_4632447872;
					_case_end_4632447280:;
					if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4632447968; }
					_case_begin_4632447968:;
					{
						(*this)._method_push_range_close(_111681860_token,jule::Str("(", 1),_193731_tokens,_193817_ranges);
					}
					goto _match_end_4632447872;
					_case_end_4632447968:;
					if (!((jule::Str("}", 1)) == _match_expr)) { goto _case_end_4632448080; }
					_case_begin_4632448080:;
					{
						(*this)._method_push_range_close(_111681860_token,jule::Str("{", 1),_193731_tokens,_193817_ranges);
					}
					goto _match_end_4632447872;
					_case_end_4632448080:;
					if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4632448192; }
					_case_begin_4632448192:;
					{
						(*this)._method_push_range_close(_111681860_token,jule::Str("[", 1),_193731_tokens,_193817_ranges);
					}
					goto _match_end_4632447872;
					_case_end_4632448192:;
					_match_end_4632447872:;
				}
			}
			_iter_next_4632443424:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_111681860_i; _111681860_token = *__julec_range_begin; goto _iter_begin_4632443424; }
			_iter_end_4632443424:;
		}
	}
	{
		auto __julec_range_expr = _193817_ranges;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _111681860_i = *__julec_range_begin;
			_iter_begin_4632454320:;
			{
				_111613f20_Token _196317_token = _193731_tokens[static_cast<jule::Int>(_111681860_i)];
				{
					auto _match_expr{ _196317_token._field_kind };
					if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4632460912; }
					_case_begin_4632460912:;
					{
						(*this)._method_push_err(_196317_token,jule::Str("wait_close_parentheses", 22),jule::Slice<jule::Any>({}));
					}
					goto _match_end_4632458816;
					_case_end_4632460912:;
					if (!((jule::Str("{", 1)) == _match_expr)) { goto _case_end_4632461024; }
					_case_begin_4632461024:;
					{
						(*this)._method_push_err(_196317_token,jule::Str("wait_close_brace", 16),jule::Slice<jule::Any>({}));
					}
					goto _match_end_4632458816;
					_case_end_4632461024:;
					if (!((jule::Str("[", 1)) == _match_expr)) { goto _case_end_4632461136; }
					_case_begin_4632461136:;
					{
						(*this)._method_push_err(_196317_token,jule::Str("wait_close_bracket", 18),jule::Slice<jule::Any>({}));
					}
					goto _match_end_4632458816;
					_case_end_4632461136:;
					_match_end_4632458816:;
				}
			}
			_iter_next_4632454320:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111681860_i = *__julec_range_begin; goto _iter_begin_4632454320; }
			_iter_end_4632454320:;
		}
	}
}



inline void _111681860_Parser::_method_parse(jule::Ref<_1220fd110_File> _197229_f) {
	this->self->_field_ast=jule::new_struct<_1220cb5d0_Ast>(new( std::nothrow ) _1220cb5d0_Ast(_197229_f,_11203c360_Vector_1(),_11203c360_Vector_2(),_11203c360_Vector_3(),_11203c360_Vector_4(),_11203c360_Vector_5()));
	jule::Slice<_111613f20_Token> _197717_tokens = __jule_parser_vector_as_slice<_11203c360_Vector_0,_111613f20_Token>(_197229_f->_method_tokens());
	this->self->_method_check_ranges(_197717_tokens);
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	jule::Slice<jule::Ref<_11167f570_Stmt>> _198417_stms = _11167f570_split_stms(_197717_tokens);
	jule::Int _198717_i = 0LL;
	_iter_begin_4632468320:;
	if (!(_198717_i < _198417_stms.len())) { goto _iter_end_4632468320; }
	{
		jule::Ref<_11167f570_Stmt> _198921_st = _198417_stms[static_cast<jule::Int>(_198717_i)];
		if (_198921_st->_field_tokens.len() == 0LL) {
			return;
		}
		jule::Any _199425_data;
		std::tie(std::ignore,_199425_data) = this->self->_method_build_general_scope_node_data(_198921_st->_field_tokens);
		if (_199425_data == nullptr) {
			goto _iter_end_4632468320;
		}
		if (this->self->_method_stopped()) {
			return;
		}
		_111612b20_Node _200321_node = _111612b20_Node(_111613f20_Token(),_199425_data);
		if (_200321_node._method_is_comment()) {
			jule::Ref<_111612b20_Directive> _200525_d = this->self->_method_get_directive(_200321_node._field_data.operator jule::Ref<_111612b20_Comment>());
			if (jule::real(_200525_d) && _1316ed230_is_top_directive(_200525_d->_field_tag)) {
				this->self->_field_ast->_field_top_directives._method_push(_200525_d);
			}
		} else {
			goto _iter_end_4632468320;
		}
	}
	_iter_next_4632468320:;
	(_198717_i)++;
	goto _iter_begin_4632468320;
	_iter_end_4632468320:;
	this->self->_field_errors=nullptr;
	_iter_begin_4632477664:;
	if (!(_198717_i < _198417_stms.len())) { goto _iter_end_4632477664; }
	{
		jule::Ref<_11167f570_Stmt> _201821_st = _198417_stms[static_cast<jule::Int>(_198717_i)];
		this->self->_method_append_node(_201821_st->_field_tokens);
		if (this->self->_method_stopped()) {
			goto _iter_end_4632477664;
		}
	}
	_iter_next_4632477664:;
	(_198717_i)++;
	goto _iter_begin_4632477664;
	_iter_end_4632477664:;
}







std::ostream &operator<<(std::ostream &_Stream, const _111681860_Parser &_Src) {
	_Stream << "Parser{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "comment_group:" << _Src._field_comment_group << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}



inline void _111680c00_TypeBuilder::_method_push_err(_111613f20_Token _7727_token,jule::Str _7741_key) {
	if ((*this)._field_err) {
		(*this)._field_p->_method_push_err(_7727_token,_7741_key,jule::Slice<jule::Any>({}));
	}
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_build_prim(void) {
	jule::Ref<_111612b20_TypeDecl> _8417_t = _111680c00_build_prim_type((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))]);
	((*((*this)._field_i)))++;
	return _8417_t;
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_build_namespace(void) {
	jule::Ref<_111612b20_TypeDecl> _9017_t = jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))],jule::Any()));
	jule::Ref<_111612b20_NamespaceTypeDecl> _9417_nst = jule::new_struct<_111612b20_NamespaceTypeDecl>(new( std::nothrow ) _111612b20_NamespaceTypeDecl());
	jule::Int _9517_n = 0LL;
	_iter_begin_4632516224:;
	if (!((*((*this)._field_i)) < (*this)._field_tokens.len())) { goto _iter_end_4632516224; }
	{
		_111613f20_Token _9721_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
		if ((_9517_n % 2LL) == 0LL) {
			if (_9721_token._field_id != 2LLU) {
				(*this)._method_push_err(_9721_token,jule::Str("invalid_syntax", 14));
			}
			_9417_nst->_field_idents=append(_9417_nst->_field_idents,jule::Slice<_111613f20_Token>({_9721_token}));
		} else if (_9721_token._field_id != 23LLU) {
			goto _iter_end_4632516224;
		}
		(_9517_n)++;
	}
	_iter_next_4632516224:;
	((*((*this)._field_i)))++;
	goto _iter_begin_4632516224;
	_iter_end_4632516224:;
	_9417_nst->_field_idents=_9417_nst->_field_idents.slice(0LL,static_cast<jule::Int>(_9417_nst->_field_idents.len() - 1LL));
	((*((*this)._field_i)))--;
	_9417_nst->_field_kind=(*this)._method_build_ident()->_field_kind.operator jule::Ref<_111612b20_IdentTypeDecl>();
	_9017_t->_field_kind=jule::Any(_9417_nst);
	return _9017_t;
}



inline jule::Slice<jule::Ref<_111612b20_TypeDecl>> _111680c00_TypeBuilder::_method_build_generics(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		return nullptr;
	}
	_111613f20_Token _12213_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if ((_12213_token._field_id != 3LLU) || (_12213_token._field_kind != jule::Str("[", 1))) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_111613f20_Token>> _12717_parts = (*this)._method_ident_generics();
	if (_12717_parts.len() == 0LL) {
		(*this)._method_push_err(_12213_token,jule::Str("invalid_syntax", 14));
		return nullptr;
	}
	jule::Slice<jule::Ref<_111612b20_TypeDecl>> _13317_types = jule::Slice<jule::Ref<_111612b20_TypeDecl>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_12717_parts.len())));
	{
		auto __julec_range_expr = _12717_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _111680c00_i = 0;
			jule::Slice<_111613f20_Token> _111680c00_part = *__julec_range_begin;
			_iter_begin_4632551952:;
			{
				jule::Int _13521_j = 0LL;
				jule::Ref<_111612b20_TypeDecl> _13622_t;
				std::tie(_13622_t,std::ignore) = (*this)._field_p->_method_build_type(_111680c00_part,(&(_13521_j)),true);
				if (_13521_j < _111680c00_part.len()) {
					(*this)._method_push_err(_111680c00_part[static_cast<jule::Int>(_13521_j)],jule::Str("invalid_syntax", 14));
				}
				_13317_types[static_cast<jule::Int>(_111680c00_i)]=_13622_t;
			}
			_iter_next_4632551952:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_111680c00_i; _111680c00_part = *__julec_range_begin; goto _iter_begin_4632551952; }
			_iter_end_4632551952:;
		}
	}
	return _13317_types;
}



inline jule::Slice<jule::Slice<_111613f20_Token>> _111680c00_TypeBuilder::_method_ident_generics(void) {
	jule::Int _14613_first = (*((*this)._field_i));
	jule::Int _14717_range_n = 0LL;
	_iter_begin_4632564096:;
	if (!((*((*this)._field_i)) < (*this)._field_tokens.len())) { goto _iter_end_4632564096; }
	{
		_111613f20_Token _14917_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
		if (_14917_token._field_id == 3LLU) {
			{
				auto _match_expr{ _14917_token._field_kind };
				if (!((jule::Str("[", 1)) == _match_expr)) { goto _case_end_4632568848; }
				_case_begin_4632568848:;
				{
					(_14717_range_n)++;
				}
				goto _match_end_4632567888;
				_case_end_4632568848:;
				if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4632568960; }
				_case_begin_4632568960:;
				{
					(_14717_range_n)--;
				}
				goto _match_end_4632567888;
				_case_end_4632568960:;
				_match_end_4632567888:;
			}
		}
		if (_14717_range_n == 0LL) {
			((*((*this)._field_i)))++;
			goto _iter_end_4632564096;
		}
	}
	_iter_next_4632564096:;
	((*((*this)._field_i)))++;
	goto _iter_begin_4632564096;
	_iter_end_4632564096:;
	jule::Slice<_111613f20_Token> _16117_tokens = (*this)._field_tokens.slice(static_cast<jule::Int>(_14613_first + 1LL),static_cast<jule::Int>((*((*this)._field_i)) - 1LL));
	jule::Slice<jule::Slice<_111613f20_Token>> _16218_parts;
	jule::Slice<_1316b4080_Log> _16225_errors;
	std::tie(_16218_parts,_16225_errors) = _111681860_parts(_16117_tokens,8LLU,true);
	if ((*this)._field_err) {
		(*this)._field_p->_field_errors=append((*this)._field_p->_field_errors,_16225_errors);
	}
	return _16218_parts;
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_build_ident(void) {
	if ((((*((*this)._field_i)) + 1LL) < (*this)._field_tokens.len()) && ((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)) + 1LL)]._field_id == 23LLU)) {
		return (*this)._method_build_namespace();
	}
	_111613f20_Token _17317_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	jule::Ref<_111612b20_IdentTypeDecl> _17417_it = jule::new_struct<_111612b20_IdentTypeDecl>(new( std::nothrow ) _111612b20_IdentTypeDecl(_17317_token,_17317_token._field_kind,false,jule::Slice<jule::Ref<_111612b20_TypeDecl>>()));
	((*((*this)._field_i)))++;
	_17417_it->_field_generics=(*this)._method_build_generics();
	return jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_17317_token,jule::Any(_17417_it)));
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_build_cpp_link(void) {
	if ((((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) || ((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)) + 1LL)]._field_id != 20LLU)) {
		(*this)._method_push_err((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))],jule::Str("invalid_syntax", 14));
		return jule::new_ref<_111612b20_TypeDecl>();
	}
	(*((*this)._field_i))+=2LL;
	jule::Ref<_111612b20_TypeDecl> _19317_t = (*this)._method_build_ident();
	_19317_t->_field_kind.operator jule::Ref<_111612b20_IdentTypeDecl>()->_field_cpp_linked=true;
	return _19317_t;
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_build_fn(void) {
	_111613f20_Token _19917_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	jule::Ref<_111612b20_FnDecl> _20017_f = (*this)._field_p->_method_build_fn_prototype((*this)._field_tokens,(*((*this)._field_i)),false,true);
	if ((!(jule::real(_20017_f)))) {
		return jule::new_ref<_111612b20_TypeDecl>();
	}
	return jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_19917_token,jule::Any(_20017_f)));
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_build_ptr(void) {
	_111613f20_Token _21117_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_21117_token,jule::Str("invalid_syntax", 14));
		return jule::new_ref<_111612b20_TypeDecl>();
	}
	((*((*this)._field_i)))++;
	if ((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))]._field_id == 35LLU) {
		((*((*this)._field_i)))++;
		return jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_21117_token,jule::Any(jule::new_struct<_111612b20_PtrTypeDecl>(new( std::nothrow ) _111612b20_PtrTypeDecl(jule::new_ref<_111612b20_TypeDecl>())))));
	}
	jule::Ref<_111612b20_TypeDecl> _22817_elem = (*this)._method_step();
	if ((!(jule::real(_22817_elem)))) {
		return jule::new_ref<_111612b20_TypeDecl>();
	}
	return jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_21117_token,jule::Any(jule::new_struct<_111612b20_PtrTypeDecl>(new( std::nothrow ) _111612b20_PtrTypeDecl(_22817_elem)))));
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_build_ref(void) {
	_111613f20_Token _24217_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_24217_token,jule::Str("invalid_syntax", 14));
		return jule::new_ref<_111612b20_TypeDecl>();
	}
	((*((*this)._field_i)))++;
	jule::Ref<_111612b20_TypeDecl> _24917_elem = (*this)._method_step();
	if ((!(jule::real(_24917_elem)))) {
		return jule::new_ref<_111612b20_TypeDecl>();
	}
	return jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_24217_token,jule::Any(jule::new_struct<_111612b20_RefTypeDecl>(new( std::nothrow ) _111612b20_RefTypeDecl(_24917_elem)))));
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_build_op(void) {
	_111613f20_Token _26317_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	{
		auto _match_expr{ _26317_token._field_kind };
		if (!((jule::Str("*", 1)) == _match_expr)) { goto _case_end_4632672160; }
		_case_begin_4632672160:;
		{
			return (*this)._method_build_ptr();
		}
		goto _match_end_4632667008;
		_case_end_4632672160:;
		if (!((jule::Str("&", 1)) == _match_expr)) { goto _case_end_4632672272; }
		_case_begin_4632672272:;
		{
			return (*this)._method_build_ref();
		}
		goto _match_end_4632667008;
		_case_end_4632672272:;
		if (!((jule::Str("&&", 2)) == _match_expr)) { goto _case_end_4632671904; }
		_case_begin_4632671904:;
		{
			(*this)._method_push_err(_26317_token,jule::Str("ref_refs_ref", 12));
			return (*this)._method_build_ref();
		}
		goto _match_end_4632667008;
		_case_end_4632671904:;
		_case_begin_4632668688:;
		{
			(*this)._method_push_err(_26317_token,jule::Str("invalid_syntax", 14));
			return jule::new_ref<_111612b20_TypeDecl>();
		}
		goto _match_end_4632667008;
		_case_end_4632668688:;
		_match_end_4632667008:;
	}
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_build_slc(void) {
	_111613f20_Token _28217_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	((*((*this)._field_i)))++;
	jule::Ref<_111612b20_TypeDecl> _28417_elem = (*this)._method_step();
	if ((!(jule::real(_28417_elem)))) {
		return jule::new_ref<_111612b20_TypeDecl>();
	}
	return jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_28217_token,jule::Any(jule::new_struct<_111612b20_SlcTypeDecl>(new( std::nothrow ) _111612b20_SlcTypeDecl(_28417_elem)))));
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_build_arr(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err((*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)) - 1LL)],jule::Str("missing_type", 12));
		return jule::new_ref<_111612b20_TypeDecl>();
	}
	jule::Int _30513_expr_delta = (*((*this)._field_i));
	jule::Ref<_111612b20_TypeDecl> _30717_elem = (*this)._method_step();
	if ((!(jule::real(_30717_elem)))) {
		return jule::new_ref<_111612b20_TypeDecl>();
	}
	jule::Ref<_111612b20_ArrTypeDecl> _31217_arrt = jule::new_struct<_111612b20_ArrTypeDecl>(new( std::nothrow ) _111612b20_ArrTypeDecl(_30717_elem,jule::Ref<_111612b20_Expr>()));
	jule::Slice<_111613f20_Token> _31621_expr_tokens;
	std::tie(std::ignore,_31621_expr_tokens) = _111681860_range_last((*this)._field_tokens.slice(0LL,static_cast<jule::Int>(_30513_expr_delta)));
	_31621_expr_tokens=_31621_expr_tokens.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_31621_expr_tokens.len() - 1LL));
	_111613f20_Token _31817_token = _31621_expr_tokens[static_cast<jule::Int>(0LL)];
	if (((_31621_expr_tokens.len() == 1LL) && (_31817_token._field_id == 7LLU)) && (_31817_token._field_kind == jule::Str("...", 3))) {
	} else {
		_31217_arrt->_field_size=(*this)._field_p->_method_build_expr(_31621_expr_tokens);
	}
	return jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_31817_token,jule::Any(_31217_arrt)));
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_build_map(jule::Int _33128_colon,jule::Slice<_111613f20_Token> _33144_tokens) {
	_111613f20_Token _33217_colon_token = (*this)._field_tokens[static_cast<jule::Int>(_33128_colon)];
	if ((_33128_colon == 0LL) || ((_33128_colon + 1LL) >= _33144_tokens.len())) {
		(*this)._method_push_err(_33217_colon_token,jule::Str("missing_type", 12));
		return jule::new_ref<_111612b20_TypeDecl>();
	}
	jule::Slice<_111613f20_Token> _33717_key_tokens = _33144_tokens.slice(0LL,static_cast<jule::Int>(_33128_colon));
	jule::Slice<_111613f20_Token> _33817_val_tokens = _33144_tokens.slice(static_cast<jule::Int>(_33128_colon + 1LL));
	jule::Ref<_111612b20_MapTypeDecl> _33917_mapt = jule::new_struct<_111612b20_MapTypeDecl>(new( std::nothrow ) _111612b20_MapTypeDecl());
	jule::Int _34117_j = 0LL;
	jule::Ref<_111612b20_TypeDecl> _34218_keyt;
	jule::Bool _34228_ok;
	std::tie(_34218_keyt,_34228_ok) = (*this)._field_p->_method_build_type(_33717_key_tokens,(&(_34117_j)),(*this)._field_err);
	if ((!(_34228_ok))) {
		return jule::new_ref<_111612b20_TypeDecl>();
	} else if (_34117_j < _33717_key_tokens.len()) {
		(*this)._method_push_err(_33717_key_tokens[static_cast<jule::Int>(_34117_j)],jule::Str("invalid_syntax", 14));
	}
	_33917_mapt->_field_key=_34218_keyt;
	_34117_j=0LL;
	jule::Ref<_111612b20_TypeDecl> _35118_valt;
	std::tie(_35118_valt,_34228_ok) = (*this)._field_p->_method_build_type(_33817_val_tokens,(&(_34117_j)),(*this)._field_err);
	if ((!(_34228_ok))) {
		return jule::new_ref<_111612b20_TypeDecl>();
	} else if (_34117_j < _33817_val_tokens.len()) {
		(*this)._method_push_err(_33817_val_tokens[static_cast<jule::Int>(_34117_j)],jule::Str("invalid_syntax", 14));
	}
	_33917_mapt->_field_val=_35118_valt;
	return jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_33217_colon_token,jule::Any(_33917_mapt)));
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_build_enumerable(void) {
	_111613f20_Token _36617_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if (((((*((*this)._field_i)) + 2LL) >= (*this)._field_tokens.len()) || (_36617_token._field_id != 3LLU)) || (_36617_token._field_kind != jule::Str("[", 1))) {
		(*this)._method_push_err(_36617_token,jule::Str("invalid_syntax", 14));
		return jule::new_ref<_111612b20_TypeDecl>();
	}
	((*((*this)._field_i)))++;
	_36617_token=(*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	if ((_36617_token._field_id == 3LLU) && (_36617_token._field_kind == jule::Str("]", 1))) {
		return (*this)._method_build_slc();
	}
	((*((*this)._field_i)))--;
	jule::Slice<_111613f20_Token> _38018_map_tokens;
	jule::Int _38030_colon;
	std::tie(_38018_map_tokens,_38030_colon) = _111680c00_split_map_range((*this)._field_tokens,(*((*this)._field_i)));
	((*((*this)._field_i)))++;
	if (_38030_colon == -1LL) {
		return (*this)._method_build_arr();
	}
	return (*this)._method_build_map(_38030_colon,_38018_map_tokens);
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_TypeBuilder::_method_step(void) {
	_111613f20_Token _38913_token = (*this)._field_tokens[static_cast<jule::Int>((*((*this)._field_i)))];
	{
		auto _match_expr{ _38913_token._field_id };
		if (!((1LLU) == _match_expr)) { goto _case_end_4632767216; }
		_case_begin_4632767216:;
		{
			return (*this)._method_build_prim();
		}
		goto _match_end_4632761584;
		_case_end_4632767216:;
		if (!((2LLU) == _match_expr)) { goto _case_end_4632767328; }
		_case_begin_4632767328:;
		{
			return (*this)._method_build_ident();
		}
		goto _match_end_4632761584;
		_case_end_4632767328:;
		if (!((31LLU) == _match_expr)) { goto _case_end_4632766960; }
		_case_begin_4632766960:;
		{
			return (*this)._method_build_cpp_link();
		}
		goto _match_end_4632761584;
		_case_end_4632766960:;
		if (!((33LLU) == _match_expr)) { goto _case_end_4632767072; }
		_case_begin_4632767072:;
		{
			return (*this)._method_build_fn();
		}
		goto _match_end_4632761584;
		_case_end_4632767072:;
		if (!((7LLU) == _match_expr)) { goto _case_end_4632763408; }
		_case_begin_4632763408:;
		{
			return (*this)._method_build_op();
		}
		goto _match_end_4632761584;
		_case_end_4632763408:;
		if (!((3LLU) == _match_expr)) { goto _case_end_4632763520; }
		_case_begin_4632763520:;
		{
			return (*this)._method_build_enumerable();
		}
		goto _match_end_4632761584;
		_case_end_4632763520:;
		_case_begin_4632763104:;
		{
			((*((*this)._field_i)))++;
			(*this)._method_push_err(_38913_token,jule::Str("invalid_syntax", 14));
			return jule::new_ref<_111612b20_TypeDecl>();
		}
		goto _match_end_4632761584;
		_case_end_4632763104:;
		_match_end_4632761584:;
	}
}



inline std::tuple<jule::Ref<_111612b20_TypeDecl>,jule::Bool> _111680c00_TypeBuilder::_method_build(void) {
	jule::Bool _41844_ok = jule::Bool();
	jule::Ref<_111612b20_TypeDecl> _41917_root = (*this)._method_step();
	if ((!(jule::real(_41917_root)))) {
		_41844_ok = false;
		return std::make_tuple(_111680c00_build_void_type(),_41844_ok);
	}
	_41844_ok = true;
	return std::make_tuple(_41917_root,_41844_ok);
}







std::ostream &operator<<(std::ostream &_Stream, const _111680c00_TypeBuilder &_Src) {
	_Stream << "TypeBuilder{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_1131530d0_Const> _1131530d0_Const::_static_method_new_i64(jule::I64 _1327_x) {
	return jule::new_struct<_1131530d0_Const>(new( std::nothrow ) _1131530d0_Const(jule::Any(_1327_x)));
}



inline jule::Ref<_1131530d0_Const> _1131530d0_Const::_static_method_new_u64(jule::U64 _1527_x) {
	return jule::new_struct<_1131530d0_Const>(new( std::nothrow ) _1131530d0_Const(jule::Any(_1527_x)));
}



inline jule::Ref<_1131530d0_Const> _1131530d0_Const::_static_method_new_bool(jule::Bool _1728_x) {
	return jule::new_struct<_1131530d0_Const>(new( std::nothrow ) _1131530d0_Const(jule::Any(_1728_x)));
}



inline jule::Ref<_1131530d0_Const> _1131530d0_Const::_static_method_new_str(jule::Str _1927_x) {
	return jule::new_struct<_1131530d0_Const>(new( std::nothrow ) _1131530d0_Const(jule::Any(_1927_x)));
}



inline jule::Ref<_1131530d0_Const> _1131530d0_Const::_static_method_new_f64(jule::F64 _2127_x) {
	return jule::new_struct<_1131530d0_Const>(new( std::nothrow ) _1131530d0_Const(jule::Any(_2127_x)));
}



inline jule::Ref<_1131530d0_Const> _1131530d0_Const::_static_method_new_nil(void) {
	return jule::new_struct<_1131530d0_Const>(new( std::nothrow ) _1131530d0_Const(jule::Any(nullptr)));
}



inline jule::I64 _1131530d0_Const::_method_read_i64(void) {
	if ((!((*this)._method_is_i64()))) {
		return 0LL;
	}
	return (*this)._field_data.operator jule::I64();
}



inline jule::U64 _1131530d0_Const::_method_read_u64(void) {
	if ((!((*this)._method_is_u64()))) {
		return 0LL;
	}
	return (*this)._field_data.operator jule::U64();
}



inline jule::Bool _1131530d0_Const::_method_read_bool(void) {
	if ((!((*this)._method_is_bool()))) {
		return false;
	}
	return (*this)._field_data.operator jule::Bool();
}



inline jule::Str _1131530d0_Const::_method_read_str(void) {
	if ((!((*this)._method_is_str()))) {
		return jule::Str("", 0);
	}
	return (*this)._field_data.operator jule::Str();
}



inline jule::F64 _1131530d0_Const::_method_read_f64(void) {
	if ((!((*this)._method_is_f64()))) {
		return 0LL;
	}
	return (*this)._field_data.operator jule::F64();
}



inline jule::I64 _1131530d0_Const::_method_as_i64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4632858400; }
		_case_begin_4632858400:;
		{
			return (*this)._field_data.operator jule::I64();
		}
		goto _match_end_4632855344;
		_case_end_4632858400:;
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4632858512; }
		_case_begin_4632858512:;
		{
			return static_cast<jule::I64>((*this)._field_data.operator jule::U64());
		}
		goto _match_end_4632855344;
		_case_end_4632858512:;
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4632857184; }
		_case_begin_4632857184:;
		{
			return static_cast<jule::I64>((*this)._field_data.operator jule::F64());
		}
		goto _match_end_4632855344;
		_case_end_4632857184:;
		_case_begin_4632856096:;
		{
			return 0LL;
		}
		goto _match_end_4632855344;
		_case_end_4632856096:;
		_match_end_4632855344:;
	}
}



inline jule::U64 _1131530d0_Const::_method_as_u64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4632865696; }
		_case_begin_4632865696:;
		{
			return (*this)._field_data.operator jule::U64();
		}
		goto _match_end_4632863440;
		_case_end_4632865696:;
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4632865808; }
		_case_begin_4632865808:;
		{
			return static_cast<jule::U64>((*this)._field_data.operator jule::I64());
		}
		goto _match_end_4632863440;
		_case_end_4632865808:;
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4632864880; }
		_case_begin_4632864880:;
		{
			return static_cast<jule::U64>((*this)._field_data.operator jule::F64());
		}
		goto _match_end_4632863440;
		_case_end_4632864880:;
		_case_begin_4632862208:;
		{
			return 0LL;
		}
		goto _match_end_4632863440;
		_case_end_4632862208:;
		_match_end_4632863440:;
	}
}



inline jule::F64 _1131530d0_Const::_method_as_f64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4632873680; }
		_case_begin_4632873680:;
		{
			return (*this)._field_data.operator jule::F64();
		}
		goto _match_end_4632867776;
		_case_end_4632873680:;
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4632873792; }
		_case_begin_4632873792:;
		{
			return static_cast<jule::F64>((*this)._field_data.operator jule::I64());
		}
		goto _match_end_4632867776;
		_case_end_4632873792:;
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4632872464; }
		_case_begin_4632872464:;
		{
			return static_cast<jule::F64>((*this)._field_data.operator jule::U64());
		}
		goto _match_end_4632867776;
		_case_end_4632872464:;
		_case_begin_4632871440:;
		{
			return 0LL;
		}
		goto _match_end_4632867776;
		_case_end_4632871440:;
		_match_end_4632867776:;
	}
}



inline void _1131530d0_Const::_method_set_i64(jule::I64 _14030_x) {
	(*this)._field_data=jule::Any(_14030_x);
}



inline void _1131530d0_Const::_method_set_u64(jule::U64 _14230_x) {
	(*this)._field_data=jule::Any(_14230_x);
}



inline void _1131530d0_Const::_method_set_bool(jule::Bool _14431_x) {
	(*this)._field_data=jule::Any(_14431_x);
}



inline void _1131530d0_Const::_method_set_str(jule::Str _14630_x) {
	(*this)._field_data=jule::Any(_14630_x);
}



inline void _1131530d0_Const::_method_set_f64(jule::F64 _14830_x) {
	(*this)._field_data=jule::Any(_14830_x);
}



inline void _1131530d0_Const::_method_set_nil(void) {
	(*this)._field_data=jule::Any(nullptr);
}



inline void _1131530d0_Const::_method_set_by_type(jule::F64 _15230_v,_1131530d0_Const _15238_x) {
	{
		if (!((_15238_x._method_is_f64()))) { goto _case_end_4632898432; }
		_case_begin_4632898432:;
		{
			(*this)._method_set_f64(_15230_v);
		}
		goto _match_end_4632898144;
		_case_end_4632898432:;
		if (!(((*this)._method_is_f64()))) { goto _case_end_4632898544; }
		_case_begin_4632898544:;
		{
			(*this)._method_set_f64(_15230_v);
		}
		goto _match_end_4632898144;
		_case_end_4632898544:;
		if (!(((*this)._method_is_i64()))) { goto _case_end_4632898656; }
		_case_begin_4632898656:;
		{
			(*this)._method_set_i64(static_cast<jule::I64>(_15230_v));
		}
		goto _match_end_4632898144;
		_case_end_4632898656:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4632898784; }
		_case_begin_4632898784:;
		{
			(*this)._method_set_u64(static_cast<jule::U64>(_15230_v));
		}
		goto _match_end_4632898144;
		_case_end_4632898784:;
		_match_end_4632898144:;
	}
}



inline jule::Bool _1131530d0_Const::_method_is_i64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4632909696; }
		_case_begin_4632909696:;
		{
			return true;
		}
		goto _match_end_4632895424;
		_case_end_4632909696:;
		_case_begin_4632908704:;
		{
			return false;
		}
		goto _match_end_4632895424;
		_case_end_4632908704:;
		_match_end_4632895424:;
	}
}



inline jule::Bool _1131530d0_Const::_method_is_u64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4632912640; }
		_case_begin_4632912640:;
		{
			return true;
		}
		goto _match_end_4632909072;
		_case_end_4632912640:;
		_case_begin_4632910144:;
		{
			return false;
		}
		goto _match_end_4632909072;
		_case_end_4632910144:;
		_match_end_4632909072:;
	}
}



inline jule::Bool _1131530d0_Const::_method_is_bool(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Bool>())) { goto _case_end_4632915584; }
		_case_begin_4632915584:;
		{
			return true;
		}
		goto _match_end_4632912128;
		_case_end_4632915584:;
		_case_begin_4632914144:;
		{
			return false;
		}
		goto _match_end_4632912128;
		_case_end_4632914144:;
		_match_end_4632912128:;
	}
}



inline jule::Bool _1131530d0_Const::_method_is_str(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Str>())) { goto _case_end_4632918528; }
		_case_begin_4632918528:;
		{
			return true;
		}
		goto _match_end_4632915072;
		_case_end_4632918528:;
		_case_begin_4632917088:;
		{
			return false;
		}
		goto _match_end_4632915072;
		_case_end_4632917088:;
		_match_end_4632915072:;
	}
}



inline jule::Bool _1131530d0_Const::_method_is_f64(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4632921472; }
		_case_begin_4632921472:;
		{
			return true;
		}
		goto _match_end_4632918016;
		_case_end_4632921472:;
		_case_begin_4632920032:;
		{
			return false;
		}
		goto _match_end_4632918016;
		_case_end_4632920032:;
		_match_end_4632918016:;
	}
}



inline jule::Bool _1131530d0_Const::_method_is_nil(void) {
	return (*this)._field_data == nullptr;
}



inline jule::Bool _1131530d0_Const::_method_are_same_types(_1131530d0_Const _20933_x) {
	{
		if (!(((*this)._method_is_i64() == _20933_x._method_is_i64()))) { goto _case_end_4632928432; }
		_case_begin_4632928432:;
		{
			return true;
		}
		goto _match_end_4632927024;
		_case_end_4632928432:;
		if (!(((*this)._method_is_u64() == _20933_x._method_is_u64()))) { goto _case_end_4632929360; }
		_case_begin_4632929360:;
		{
			return true;
		}
		goto _match_end_4632927024;
		_case_end_4632929360:;
		if (!(((*this)._method_is_f64() == _20933_x._method_is_f64()))) { goto _case_end_4632929472; }
		_case_begin_4632929472:;
		{
			return true;
		}
		goto _match_end_4632927024;
		_case_end_4632929472:;
		if (!(((*this)._method_is_bool() == _20933_x._method_is_bool()))) { goto _case_end_4632929584; }
		_case_begin_4632929584:;
		{
			return true;
		}
		goto _match_end_4632927024;
		_case_end_4632929584:;
		if (!(((*this)._method_is_str() == _20933_x._method_is_str()))) { goto _case_end_4632927536; }
		_case_begin_4632927536:;
		{
			return true;
		}
		goto _match_end_4632927024;
		_case_end_4632927536:;
		if (!(((*this)._method_is_nil() == _20933_x._method_is_nil()))) { goto _case_end_4632927648; }
		_case_begin_4632927648:;
		{
			return true;
		}
		goto _match_end_4632927024;
		_case_end_4632927648:;
		_case_begin_4632927232:;
		{
			return false;
		}
		goto _match_end_4632927024;
		_case_end_4632927232:;
		_match_end_4632927024:;
	}
}



inline jule::Bool _1131530d0_Const::_method_and(_1131530d0_Const _22722_x) {
	{
		if (!(((*this)._method_is_bool() && _22722_x._method_is_bool()))) { goto _case_end_4632943280; }
		_case_begin_4632943280:;
		{
			return (*this)._method_read_bool() && _22722_x._method_read_bool();
		}
		goto _match_end_4632941984;
		_case_end_4632943280:;
		_case_begin_4632942192:;
		{
			return false;
		}
		goto _match_end_4632941984;
		_case_end_4632942192:;
		_match_end_4632941984:;
	}
}



inline jule::Bool _1131530d0_Const::_method_or(_1131530d0_Const _23921_x) {
	{
		if (!(((*this)._method_is_bool() && _23921_x._method_is_bool()))) { goto _case_end_4632949904; }
		_case_begin_4632949904:;
		{
			return (*this)._method_read_bool() || _23921_x._method_read_bool();
		}
		goto _match_end_4632948608;
		_case_end_4632949904:;
		_case_begin_4632948816:;
		{
			return false;
		}
		goto _match_end_4632948608;
		_case_end_4632948816:;
		_match_end_4632948608:;
	}
}



inline jule::Bool _1131530d0_Const::_method_eqs(_1131530d0_Const _25122_x) {
	{
		if (!(((*this)._method_is_nil()))) { goto _case_end_4632956704; }
		_case_begin_4632956704:;
		{
			return _25122_x._method_is_nil();
		}
		goto _match_end_4632955296;
		_case_end_4632956704:;
		if (!(((*this)._method_is_bool()))) { goto _case_end_4632957632; }
		_case_begin_4632957632:;
		{
			return _25122_x._method_is_bool() && ((*this)._method_read_bool() == _25122_x._method_read_bool());
		}
		goto _match_end_4632955296;
		_case_end_4632957632:;
		if (!(((*this)._method_is_str()))) { goto _case_end_4632957744; }
		_case_begin_4632957744:;
		{
			return _25122_x._method_is_str() && ((*this)._method_read_str() == _25122_x._method_read_str());
		}
		goto _match_end_4632955296;
		_case_end_4632957744:;
		if (!(((*this)._method_is_i64()))) { goto _case_end_4632957856; }
		_case_begin_4632957856:;
		{
			return (*this)._method_read_i64() == _25122_x._method_as_i64();
		}
		goto _match_end_4632955296;
		_case_end_4632957856:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4632955808; }
		_case_begin_4632955808:;
		{
			return (*this)._method_read_u64() == _25122_x._method_as_u64();
		}
		goto _match_end_4632955296;
		_case_end_4632955808:;
		if (!(((*this)._method_is_f64()))) { goto _case_end_4632955920; }
		_case_begin_4632955920:;
		{
			return (*this)._method_read_f64() == _25122_x._method_as_f64();
		}
		goto _match_end_4632955296;
		_case_end_4632955920:;
		_case_begin_4632955504:;
		{
			return false;
		}
		goto _match_end_4632955296;
		_case_end_4632955504:;
		_match_end_4632955296:;
	}
}



inline jule::Bool _1131530d0_Const::_method_lt(_1131530d0_Const _28321_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4632975312; }
		_case_begin_4632975312:;
		{
			return (*this)._method_read_i64() < _28321_x._method_as_i64();
		}
		goto _match_end_4632973952;
		_case_end_4632975312:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4632975424; }
		_case_begin_4632975424:;
		{
			return (*this)._method_read_u64() < _28321_x._method_as_u64();
		}
		goto _match_end_4632973952;
		_case_end_4632975424:;
		if (!(((*this)._method_is_f64()))) { goto _case_end_4632976288; }
		_case_begin_4632976288:;
		{
			return (*this)._method_read_f64() < _28321_x._method_as_f64();
		}
		goto _match_end_4632973952;
		_case_end_4632976288:;
		_case_begin_4632974160:;
		{
			return false;
		}
		goto _match_end_4632973952;
		_case_end_4632974160:;
		_match_end_4632973952:;
	}
}



inline jule::Bool _1131530d0_Const::_method_gt(_1131530d0_Const _30621_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4632986160; }
		_case_begin_4632986160:;
		{
			return (*this)._method_read_i64() > _30621_x._method_as_i64();
		}
		goto _match_end_4632984800;
		_case_end_4632986160:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4632986272; }
		_case_begin_4632986272:;
		{
			return (*this)._method_read_u64() > _30621_x._method_as_u64();
		}
		goto _match_end_4632984800;
		_case_end_4632986272:;
		if (!(((*this)._method_is_f64()))) { goto _case_end_4632987136; }
		_case_begin_4632987136:;
		{
			return (*this)._method_read_f64() > _30621_x._method_as_f64();
		}
		goto _match_end_4632984800;
		_case_end_4632987136:;
		_case_begin_4632985008:;
		{
			return false;
		}
		goto _match_end_4632984800;
		_case_end_4632985008:;
		_match_end_4632984800:;
	}
}



inline jule::Bool _1131530d0_Const::_method_add(_1131530d0_Const _32826_x) {
	{
		if (!(((*this)._method_is_str()))) { goto _case_end_4632996608; }
		_case_begin_4632996608:;
		{
			if ((!(_32826_x._method_is_str()))) {
				return false;
			}
			(*this)._method_set_str((*this)._method_read_str() + _32826_x._method_read_str());
		}
		goto _match_end_4632995312;
		_case_end_4632996608:;
		if (!(((*this)._method_is_f64()) || ((*this)._method_is_i64()) || ((*this)._method_is_u64()))) { goto _case_end_4632996720; }
		_case_begin_4632996720:;
		{
			(*this)._method_set_by_type(static_cast<jule::F64>((*this)._method_as_f64() + _32826_x._method_as_f64()),_32826_x);
		}
		goto _match_end_4632995312;
		_case_end_4632996720:;
		_case_begin_4632995520:;
		{
			return false;
		}
		goto _match_end_4632995312;
		_case_end_4632995520:;
		_match_end_4632995312:;
	}
	return true;
}



inline jule::Bool _1131530d0_Const::_method_sub(_1131530d0_Const _34926_x) {
	{
		if (!(((*this)._method_is_f64()) || ((*this)._method_is_i64()) || ((*this)._method_is_u64()))) { goto _case_end_4633009920; }
		_case_begin_4633009920:;
		{
			(*this)._method_set_by_type(static_cast<jule::F64>((*this)._method_as_f64() - _34926_x._method_as_f64()),_34926_x);
		}
		goto _match_end_4633008624;
		_case_end_4633009920:;
		_case_begin_4633008832:;
		{
			return false;
		}
		goto _match_end_4633008624;
		_case_end_4633008832:;
		_match_end_4633008624:;
	}
	return true;
}



inline jule::Bool _1131530d0_Const::_method_mul(_1131530d0_Const _36426_x) {
	{
		if (!(((*this)._method_is_f64()) || ((*this)._method_is_i64()) || ((*this)._method_is_u64()))) { goto _case_end_4633018960; }
		_case_begin_4633018960:;
		{
			(*this)._method_set_by_type(static_cast<jule::F64>((*this)._method_as_f64() * _36426_x._method_as_f64()),_36426_x);
		}
		goto _match_end_4633017664;
		_case_end_4633018960:;
		_case_begin_4633017872:;
		{
			return false;
		}
		goto _match_end_4633017664;
		_case_end_4633017872:;
		_match_end_4633017664:;
	}
	return true;
}



inline jule::Bool _1131530d0_Const::_method_div(_1131530d0_Const _38326_x) {
	{
		if (!(((*this)._method_is_f64()))) { goto _case_end_4633027440; }
		_case_begin_4633027440:;
		{
			jule::F64 _38617_l = _38326_x._method_as_f64();
			if (_38617_l == 0LL) {
				return false;
			}
			(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_read_f64(),_38617_l)));
		}
		goto _match_end_4633026080;
		_case_end_4633027440:;
		if (!(((*this)._method_is_i64()))) { goto _case_end_4633027552; }
		_case_begin_4633027552:;
		{
			jule::F64 _39317_l = _38326_x._method_as_f64();
			if (_39317_l == 0LL) {
				return false;
			}
			(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_39317_l)));
		}
		goto _match_end_4633026080;
		_case_end_4633027552:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4633028416; }
		_case_begin_4633028416:;
		{
			jule::F64 _40017_l = _38326_x._method_as_f64();
			if (_40017_l == 0LL) {
				return false;
			}
			(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_40017_l)));
		}
		goto _match_end_4633026080;
		_case_end_4633028416:;
		_case_begin_4633026288:;
		{
			return false;
		}
		goto _match_end_4633026080;
		_case_end_4633026288:;
		_match_end_4633026080:;
	}
	return true;
}



inline jule::Bool _1131530d0_Const::_method_mod(_1131530d0_Const _41526_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4633047312; }
		_case_begin_4633047312:;
		{
			jule::I64 _41817_l = _41526_x._method_as_i64();
			if (_41817_l == 0LL) {
				return false;
			}
			(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() % _41817_l));
		}
		goto _match_end_4633046016;
		_case_end_4633047312:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4633047424; }
		_case_begin_4633047424:;
		{
			jule::U64 _42517_l = _41526_x._method_as_u64();
			if (_42517_l == 0LL) {
				return false;
			}
			(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() % _42517_l));
		}
		goto _match_end_4633046016;
		_case_end_4633047424:;
		_case_begin_4633046224:;
		{
			return false;
		}
		goto _match_end_4633046016;
		_case_end_4633046224:;
		_match_end_4633046016:;
	}
	return true;
}



inline jule::Bool _1131530d0_Const::_method_bitwise_and(_1131530d0_Const _43934_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4633062240; }
		_case_begin_4633062240:;
		{
			(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() & _43934_x._method_as_i64()));
		}
		goto _match_end_4633060944;
		_case_end_4633062240:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4633062352; }
		_case_begin_4633062352:;
		{
			(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() & _43934_x._method_as_u64()));
		}
		goto _match_end_4633060944;
		_case_end_4633062352:;
		_case_begin_4633061152:;
		{
			return false;
		}
		goto _match_end_4633060944;
		_case_end_4633061152:;
		_match_end_4633060944:;
	}
	return true;
}



inline jule::Bool _1131530d0_Const::_method_bitwise_or(_1131530d0_Const _45533_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4633072800; }
		_case_begin_4633072800:;
		{
			(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() | _45533_x._method_as_i64()));
		}
		goto _match_end_4633071504;
		_case_end_4633072800:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4633072912; }
		_case_begin_4633072912:;
		{
			(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() | _45533_x._method_as_u64()));
		}
		goto _match_end_4633071504;
		_case_end_4633072912:;
		_case_begin_4633071712:;
		{
			return false;
		}
		goto _match_end_4633071504;
		_case_end_4633071712:;
		_match_end_4633071504:;
	}
	return true;
}



inline jule::Bool _1131530d0_Const::_method_xor(_1131530d0_Const _47126_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4633083648; }
		_case_begin_4633083648:;
		{
			(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() ^ _47126_x._method_as_i64()));
		}
		goto _match_end_4633082352;
		_case_end_4633083648:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4633083760; }
		_case_begin_4633083760:;
		{
			(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() ^ _47126_x._method_as_u64()));
		}
		goto _match_end_4633082352;
		_case_end_4633083760:;
		_case_begin_4633082560:;
		{
			return false;
		}
		goto _match_end_4633082352;
		_case_end_4633082560:;
		_match_end_4633082352:;
	}
	return true;
}



inline jule::Bool _1131530d0_Const::_method_lshift(_1131530d0_Const _48729_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4633094208; }
		_case_begin_4633094208:;
		{
			jule::I64 _49017_l = (*this)._method_as_i64();
			if (_49017_l < 0LL) {
				jule::U64 _49221_r = _48729_x._method_as_u64();
				(*this)._method_set_i64(_49017_l << _49221_r);
			} else {
				_1131530d0_lshift_unsig((*this),_48729_x);
			}
		}
		goto _match_end_4633092912;
		_case_end_4633094208:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4633094320; }
		_case_begin_4633094320:;
		{
			_1131530d0_lshift_unsig((*this),_48729_x);
		}
		goto _match_end_4633092912;
		_case_end_4633094320:;
		_case_begin_4633093120:;
		{
			return false;
		}
		goto _match_end_4633092912;
		_case_end_4633093120:;
		_match_end_4633092912:;
	}
	return true;
}



inline jule::Bool _1131530d0_Const::_method_rshift(_1131530d0_Const _51029_x) {
	{
		if (!(((*this)._method_is_i64()))) { goto _case_end_4633106832; }
		_case_begin_4633106832:;
		{
			jule::I64 _51317_l = (*this)._method_as_i64();
			if (_51317_l < 0LL) {
				jule::U64 _51521_r = _51029_x._method_as_u64();
				(*this)._method_set_i64(_51317_l >> _51521_r);
			} else {
				_1131530d0_rshift_unsig((*this),_51029_x);
			}
		}
		goto _match_end_4633105536;
		_case_end_4633106832:;
		if (!(((*this)._method_is_u64()))) { goto _case_end_4633106944; }
		_case_begin_4633106944:;
		{
			_1131530d0_rshift_unsig((*this),_51029_x);
		}
		goto _match_end_4633105536;
		_case_end_4633106944:;
		_case_begin_4633105744:;
		{
			return false;
		}
		goto _match_end_4633105536;
		_case_end_4633105744:;
		_match_end_4633105536:;
	}
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1131530d0_Const &_Src) {
	_Stream << "Const{";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _11209db80_FieldIns &_Src) {
	_Stream << "FieldIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _11209db80_StructIns::_method_to_str(void) {
	jule::Str _20717_kind = jule::Str("", 0);
	_20717_kind+=(*this)._field_decl->_field_ident;
	if ((*this)._field_generics.len() > 0LL) {
		_20717_kind+=jule::Str("[", 1);
		{
			auto __julec_range_expr = (*this)._field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1217f7750_TypeKind> _11209db80_g = *__julec_range_begin;
				_iter_begin_4637679968:;
				{
					_20717_kind+=_11209db80_g->_method_to_str();
					_20717_kind+=jule::Str(",", 1);
				}
				_iter_next_4637679968:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _11209db80_g = *__julec_range_begin; goto _iter_begin_4637679968; }
				_iter_end_4637679968:;
			}
		}
		_20717_kind=_20717_kind.slice(0LL,static_cast<jule::Int>(_20717_kind.len() - 1LL));
		_20717_kind+=jule::Str("]", 1);
	}
	return _20717_kind;
}



inline jule::Bool _11209db80_StructIns::_method_equals(jule::Ref<_1217f7750_TypeKind> _22221_other) {
	jule::Ref<_11209db80_StructIns> _22313_s = (_22221_other).alloc->_method_strct();
	if ((!(jule::real(_22313_s)))) {
		return false;
	}
	if (((*this)._field_decl).alloc != (_22313_s->_field_decl).alloc) {
		return false;
	}
	if ((*this)._field_generics.len() != _22313_s->_field_generics.len()) {
		return false;
	}
	jule::Int _23617_i = 0LL;
	_iter_begin_4637694400:;
	if (!(_23617_i < (*this)._field_generics.len())) { goto _iter_end_4637694400; }
	{
		if ((!((*this)._field_generics[static_cast<jule::Int>(_23617_i)]->_method_equals(_22313_s->_field_generics[static_cast<jule::Int>(_23617_i)])))) {
			return false;
		}
	}
	_iter_next_4637694400:;
	(_23617_i)++;
	goto _iter_begin_4637694400;
	_iter_end_4637694400:;
	return true;
}



inline jule::Ref<_112446fb0_Fn> _11209db80_StructIns::_method_find_method(jule::Str _25034_ident,jule::Bool _25046_statically) {
	{
		auto __julec_range_expr = (*this)._field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_Fn> _11209db80_f = *__julec_range_begin;
			_iter_begin_4637703616:;
			{
				if ((_11209db80_f->_field_statically == _25046_statically) && (_11209db80_f->_field_ident == _25034_ident)) {
					return _11209db80_f;
				}
			}
			_iter_next_4637703616:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11209db80_f = *__julec_range_begin; goto _iter_begin_4637703616; }
			_iter_end_4637703616:;
		}
	}
	return jule::new_ref<_112446fb0_Fn>();
}



inline jule::Ref<_11209db80_FieldIns> _11209db80_StructIns::_method_find_field(jule::Str _26133_ident) {
	{
		auto __julec_range_expr = (*this)._field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_FieldIns> _11209db80_f = *__julec_range_begin;
			_iter_begin_4637709792:;
			{
				if (_11209db80_f->_field_decl->_field_ident == _26133_ident) {
					return _11209db80_f;
				}
			}
			_iter_next_4637709792:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11209db80_f = *__julec_range_begin; goto _iter_begin_4637709792; }
			_iter_end_4637709792:;
		}
	}
	return jule::new_ref<_11209db80_FieldIns>();
}







std::ostream &operator<<(std::ostream &_Stream, const _11209db80_StructIns &_Src) {
	_Stream << "StructIns{";
	_Stream << "checked:" << _Src._field_checked << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "has_mut:" << _Src._field_has_mut << ", ";
	_Stream << "references:" << _Src._field_references;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112446fb0_RetType &_Src) {
	_Stream << "RetType{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _112446fb0_ParamIns::_method_to_str(void) {
	jule::Str _19517_s = jule::Str("", 0);
	if ((*this)._field_decl->_field_mutable) {
		_19517_s+=jule::Str("mut ", 4);
	}
	if ((*this)._field_decl->_field_reference) {
		_19517_s+=jule::Str("&_:", 3);
	}
	if ((*this)._field_decl->_method_is_self()) {
		if ((*this)._field_decl->_method_is_ref()) {
			_19517_s+=jule::Str("&", 1);
		}
		_19517_s+=jule::Str("self", 4);
		return _19517_s;
	}
	if ((*this)._field_decl->_field_variadic) {
		_19517_s+=jule::Str("...", 3);
	}
	if (jule::real((*this)._field_kind)) {
		_19517_s+=(*this)._field_kind->_method_to_str();
	}
	return _19517_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _112446fb0_ParamIns &_Src) {
	_Stream << "ParamIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _112446fb0_FnIns::_method_to_str(void) {
	jule::Str _24517_s = jule::Str("", 0);
	if ((*this)._field_decl->_field_statically) {
		_24517_s+=jule::Str("static ", 7);
	}
	if ((*this)._field_decl->_field_unsafety) {
		_24517_s+=jule::Str("unsafe ", 7);
	}
	_24517_s+=jule::Str("fn", 2);
	if ((*this)._field_generics.len() > 0LL) {
		_24517_s+=jule::Str("[", 1);
		{
			auto __julec_range_expr = (*this)._field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _112446fb0_i = 0;
				jule::Ref<_1217f7750_TypeKind> _112446fb0_t = *__julec_range_begin;
				_iter_begin_4637827664:;
				{
					_24517_s+=_112446fb0_t->_method_to_str();
					if ((_112446fb0_i + 1LL) < (*this)._field_generics.len()) {
						_24517_s+=jule::Str(",", 1);
					}
				}
				_iter_next_4637827664:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_112446fb0_i; _112446fb0_t = *__julec_range_begin; goto _iter_begin_4637827664; }
				_iter_end_4637827664:;
			}
		}
		_24517_s+=jule::Str("]", 1);
	} else if ((*this)._field_decl->_field_generics.len() > 0LL) {
		_24517_s+=jule::Str("[", 1);
		{
			auto __julec_range_expr = (*this)._field_decl->_field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _112446fb0_i = 0;
				jule::Ref<_111612b20_GenericDecl> _112446fb0_g = *__julec_range_begin;
				_iter_begin_4637826752:;
				{
					_24517_s+=_112446fb0_g->_field_ident;
					if ((_112446fb0_i + 1LL) < (*this)._field_decl->_field_generics.len()) {
						_24517_s+=jule::Str(",", 1);
					}
				}
				_iter_next_4637826752:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_112446fb0_i; _112446fb0_g = *__julec_range_begin; goto _iter_begin_4637826752; }
				_iter_end_4637826752:;
			}
		}
		_24517_s+=jule::Str("]", 1);
	}
	_24517_s+=jule::Str("(", 1);
	jule::I64 _27813_n = (*this)._field_params.len();
	if (_27813_n > 0LL) {
		{
			auto __julec_range_expr = (*this)._field_params;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_112446fb0_ParamIns> _112446fb0_p = *__julec_range_begin;
				_iter_begin_4637843744:;
				{
					_24517_s+=_112446fb0_p->_method_to_str();
					_24517_s+=jule::Str(",", 1);
				}
				_iter_next_4637843744:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _112446fb0_p = *__julec_range_begin; goto _iter_begin_4637843744; }
				_iter_end_4637843744:;
			}
		}
		_24517_s=_24517_s.slice(0LL,static_cast<jule::Int>(_24517_s.len() - 1LL));
	}
	_24517_s+=jule::Str(")", 1);
	if ((!((*this)._field_decl->_method_is_void()))) {
		_24517_s+=jule::Str(":", 1);
		_24517_s+=(*this)._field_result->_method_to_str();
	}
	return _24517_s;
}



inline jule::Bool _112446fb0_FnIns::_method_equals(jule::Ref<_1217f7750_TypeKind> _29521_other) {
	jule::Ref<_112446fb0_FnIns> _29613_f = (_29521_other).alloc->_method_fnc();
	if ((!(jule::real(_29613_f)))) {
		return false;
	}
	if ((*this)._field_decl->_field_statically != _29613_f->_field_decl->_field_statically) {
		return false;
	}
	if ((*this)._field_decl->_field_unsafety != _29613_f->_field_decl->_field_unsafety) {
		return false;
	}
	if ((*this)._field_generics.len() != _29613_f->_field_generics.len()) {
		return false;
	}
	if ((*this)._field_decl->_method_is_void() != _29613_f->_field_decl->_method_is_void()) {
		return false;
	}
	jule::Int _31717_i = 0LL;
	_iter_begin_4637878864:;
	if (!(_31717_i < (*this)._field_generics.len())) { goto _iter_end_4637878864; }
	{
		if ((!((*this)._field_generics[static_cast<jule::Int>(_31717_i)]->_method_equals(_29613_f->_field_generics[static_cast<jule::Int>(_31717_i)])))) {
			return false;
		}
	}
	_iter_next_4637878864:;
	(_31717_i)++;
	goto _iter_begin_4637878864;
	_iter_end_4637878864:;
	jule::Fn<jule::Bool(jule::Ref<_112446fb0_ParamIns>,jule::Ref<_112446fb0_ParamIns>)> _32413_check_params = jule::Fn<jule::Bool(jule::Ref<_112446fb0_ParamIns>,jule::Ref<_112446fb0_ParamIns>)>([=](jule::Ref<_112446fb0_ParamIns> _32431_p1,jule::Ref<_112446fb0_ParamIns> _32446_p2) mutable -> jule::Bool {
		if (_32431_p1->_field_decl->_field_mutable != _32446_p2->_field_decl->_field_mutable) {
			return false;
		}
		if (_32431_p1->_field_decl->_method_is_self()) {
			if ((!(_32446_p2->_field_decl->_method_is_self()))) {
				return false;
			}
			if (_32431_p1->_field_decl->_method_is_ref() != _32446_p2->_field_decl->_method_is_ref()) {
				return false;
			}
			return true;
		}
		if (_32431_p1->_field_decl->_field_reference != _32446_p2->_field_decl->_field_reference) {
			return false;
		}
		if (_32431_p1->_field_decl->_field_variadic != _32446_p2->_field_decl->_field_variadic) {
			return false;
		}
		return _32431_p1->_field_kind->_method_equals(_32446_p2->_field_kind);
	});
	_31717_i=0LL;
	_iter_begin_4637907840:;
	if (!(_31717_i < (*this)._field_params.len())) { goto _iter_end_4637907840; }
	{
		if ((!(_32413_check_params((*this)._field_params[static_cast<jule::Int>(_31717_i)],_29613_f->_field_params[static_cast<jule::Int>(_31717_i)])))) {
			return false;
		}
	}
	_iter_next_4637907840:;
	(_31717_i)++;
	goto _iter_begin_4637907840;
	_iter_end_4637907840:;
	if ((!((*this)._field_decl->_method_is_void()))) {
		if ((!((*this)._field_result->_method_equals(_29613_f->_field_result)))) {
			return false;
		}
	}
	return true;
}



inline jule::Bool _112446fb0_FnIns::_method_is_builtin(void) {
	return (*this)._field_caller != nullptr;
}



inline jule::Bool _112446fb0_FnIns::_method_is_anon(void) {
	return (*this)._field_anon || (jule::real((*this)._field_decl) && (*this)._field_decl->_method_is_anon());
}







std::ostream &operator<<(std::ostream &_Stream, const _112446fb0_FnIns &_Src) {
	_Stream << "FnIns{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "refers:" << _Src._field_refers << ", ";
	_Stream << "caller:" << _Src._field_caller << ", ";
	_Stream << "reloaded:" << _Src._field_reloaded << ", ";
	_Stream << "anon:" << _Src._field_anon;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_112572770_SymbolBuilder> _112572770_SymbolBuilder::_method_get_root(void) {
	jule::Ref<_112572770_SymbolBuilder> _31317_root = this->self;
	_iter_begin_4637940592:;
	if (!(jule::real(_31317_root->_field_owner))) { goto _iter_end_4637940592; }
	{
		_31317_root=_31317_root->_field_owner;
	}
	_iter_next_4637940592:;
	goto _iter_begin_4637940592;
	_iter_end_4637940592:;
	return _31317_root;
}



inline void _112572770_SymbolBuilder::_method_push_err(_111613f20_Token _32027_token,jule::Str _32041_key,jule::Slice<jule::Any> _32051_args) {
	(*this)._field_errors=append((*this)._field_errors,jule::Slice<_1316b4080_Log>({_1316b4080_Log(1LLU,_32027_token._field_row,_32027_token._field_column,_32027_token._field_file->_method_path(),_1316b2ff0_errorf(_32041_key,_32051_args))}));
}



inline jule::Bool _112572770_SymbolBuilder::_method_check_cpp_use_decl_path(jule::Ref<_111612b20_UseDecl> _33042_decl) {
	jule::Bool _33060_ok = jule::Bool();
	if (_1316301d0_is_std_header_path(_33042_decl->_field_link_path)) {
		_33060_ok = true;
		return _33060_ok;
	}
	jule::Str _33513_ext = _131739f50_ext(_33042_decl->_field_link_path);
	if ((!(_1316301d0_is_valid_header_ext(_33513_ext))) && (!(_1316301d0_is_valid_cpp_ext(_33513_ext)))) {
		(*this)._method_push_err(_33042_decl->_field_token,jule::Str("invalid_cpp_ext", 15),jule::Slice<jule::Any>({jule::Any(_33513_ext)}));
		_33060_ok = false;
		return _33060_ok;
	}
	jule::Ref<_1220d93f0_Status> _34114_info;
	jule::Int _34120_err;
	std::tie(_34114_info,_34120_err) = _111613f90_stat(_33042_decl->_field_link_path);
	if ((_34120_err != 0LLU) || _34114_info->_method_is_dir()) {
		(*this)._method_push_err(_33042_decl->_field_token,jule::Str("use_not_found", 13),jule::Slice<jule::Any>({jule::Any(_33042_decl->_field_link_path)}));
		_33060_ok = false;
		return _33060_ok;
	}
	_33060_ok = true;
	return _33060_ok;
}



inline jule::Ref<_11265fb90_ImportInfo> _112572770_SymbolBuilder::_method_build_cpp_header_import(jule::Ref<_111612b20_UseDecl> _35146_decl) {
	jule::Str _35217_path = _35146_decl->_field_link_path;
	if ((!(_1316301d0_is_std_header_path(_35146_decl->_field_link_path)))) {
		jule::Bool _35521_ok = (*this)._method_check_cpp_use_decl_path(_35146_decl);
		if ((!(_35521_ok))) {
			return jule::new_ref<_11265fb90_ImportInfo>();
		}
		std::tie(_35217_path,_35521_ok) = _131739f50_abs(_35146_decl->_field_link_path);
		if ((!(_35521_ok))) {
			(*this)._method_push_err(_35146_decl->_field_token,jule::Str("use_not_found", 13),jule::Slice<jule::Any>({jule::Any(_35146_decl->_field_link_path)}));
		}
	}
	return jule::new_struct<_11265fb90_ImportInfo>(new( std::nothrow ) _11265fb90_ImportInfo(_35146_decl->_field_token,_35217_path,_35146_decl->_field_link_path,jule::Str("", 0),jule::Bool(),true,false,jule::Bool(),jule::Slice<_111613f20_Token>(),jule::new_ref<_11265fb90_Package>()));
}



inline jule::Ref<_11265fb90_ImportInfo> _112572770_SymbolBuilder::_method_build_std_import(jule::Ref<_111612b20_UseDecl> _37839_decl) {
	jule::Str _37917_path = _37839_decl->_field_link_path.slice(static_cast<jule::Int>(jule::Str("std::", 5).len()));
	_37917_path=_37917_path.replace(jule::Str("::", 2),static_cast<jule::Str>(92LL),-1LL);
	_37917_path=_131739f50_join(jule::Slice<jule::Str>({_1316f28b0_PATH_STDLIB,_37917_path}));
	jule::Bool _38220_ok;
	std::tie(_37917_path,_38220_ok) = _131739f50_abs(_37917_path);
	if ((!(_38220_ok))) {
		(*this)._method_push_err(_37839_decl->_field_token,jule::Str("use_not_found", 13),jule::Slice<jule::Any>({jule::Any(_37839_decl->_field_link_path)}));
		return jule::new_ref<_11265fb90_ImportInfo>();
	}
	jule::Ref<_1220d93f0_Status> _38814_info;
	jule::Int _38820_err;
	std::tie(_38814_info,_38820_err) = _111613f90_stat(_37917_path);
	if ((_38820_err != 0LLU) || (!(_38814_info->_method_is_dir()))) {
		(*this)._method_push_err(_37839_decl->_field_token,jule::Str("use_not_found", 13),jule::Slice<jule::Any>({jule::Any(_37839_decl->_field_link_path)}));
		return jule::new_ref<_11265fb90_ImportInfo>();
	}
	jule::Str _39613_ident = _37839_decl->_field_link_path.slice(static_cast<jule::Int>(_37839_decl->_field_link_path.rfind(jule::Str("::", 2)) + 1LL));
	return jule::new_struct<_11265fb90_ImportInfo>(new( std::nothrow ) _11265fb90_ImportInfo(_37839_decl->_field_token,_37917_path,_37839_decl->_field_link_path,_39613_ident,jule::Bool(),false,true,_37839_decl->_field_full,jule::Slice<_111613f20_Token>(),jule::new_struct<_11265fb90_Package>(new( std::nothrow ) _11265fb90_Package(nullptr))));
}



inline jule::Ref<_11265fb90_ImportInfo> _112572770_SymbolBuilder::_method_build_ident_import(jule::Ref<_111612b20_UseDecl> _41242_decl) {
	jule::Str _41317_path = _41242_decl->_field_link_path;
	_41317_path=_41317_path.replace(jule::Str("::", 2),static_cast<jule::Str>(92LL),-1LL);
	_41317_path=_131739f50_join(jule::Slice<jule::Str>({this->self->_method_get_root()->_field_ast->_field_file->_method_dir(),_41317_path}));
	jule::Bool _41720_ok;
	std::tie(_41317_path,_41720_ok) = _131739f50_abs(_41317_path);
	if ((!(_41720_ok))) {
		this->self->_method_push_err(_41242_decl->_field_token,jule::Str("use_not_found", 13),jule::Slice<jule::Any>({jule::Any(_41242_decl->_field_link_path)}));
		return jule::new_ref<_11265fb90_ImportInfo>();
	}
	jule::Ref<_1220d93f0_Status> _42314_info;
	jule::Int _42320_err;
	std::tie(_42314_info,_42320_err) = _111613f90_stat(_41317_path);
	if ((_42320_err != 0LLU) || (!(_42314_info->_method_is_dir()))) {
		this->self->_method_push_err(_41242_decl->_field_token,jule::Str("use_not_found", 13),jule::Slice<jule::Any>({jule::Any(_41242_decl->_field_link_path)}));
		return jule::new_ref<_11265fb90_ImportInfo>();
	}
	jule::Str _43113_ident = _41242_decl->_field_link_path.slice(static_cast<jule::Int>(_41242_decl->_field_link_path.rfind(jule::Str("::", 2)) + 1LL));
	return jule::new_struct<_11265fb90_ImportInfo>(new( std::nothrow ) _11265fb90_ImportInfo(_41242_decl->_field_token,_41317_path,_41242_decl->_field_link_path,_43113_ident,jule::Bool(),false,false,_41242_decl->_field_full,jule::Slice<_111613f20_Token>(),jule::new_struct<_11265fb90_Package>(new( std::nothrow ) _11265fb90_Package(nullptr))));
}



inline jule::Ref<_11265fb90_ImportInfo> _112572770_SymbolBuilder::_method_build_import(jule::Ref<_111612b20_UseDecl> _44736_decl) {
	{
		if (!((_44736_decl->_field_cpp_linked))) { goto _case_end_4638045888; }
		_case_begin_4638045888:;
		{
			return this->self->_method_build_cpp_header_import(_44736_decl);
		}
		goto _match_end_4638043392;
		_case_end_4638045888:;
		if (!((_44736_decl->_field_std))) { goto _case_end_4638046640; }
		_case_begin_4638046640:;
		{
			return this->self->_method_build_std_import(_44736_decl);
		}
		goto _match_end_4638043392;
		_case_end_4638046640:;
		_case_begin_4638043600:;
		{
			return this->self->_method_build_ident_import(_44736_decl);
		}
		goto _match_end_4638043392;
		_case_end_4638043600:;
		_match_end_4638043392:;
	}
}



inline jule::Bool _112572770_SymbolBuilder::_method_check_duplicate_use_decl(jule::Ref<_11265fb90_ImportInfo> _45543_pkg) {
	jule::Bool _45563_ok = jule::Bool();
	jule::Ref<_11265fb90_ImportInfo> _45713_lpkg = (*this)._field_table->_method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)>([=](jule::Ref<_11265fb90_ImportInfo> _45749_spkg) mutable -> jule::Bool {
		return _45543_pkg->_field_path == _45749_spkg->_field_path;
	}));
	if ((!(jule::real(_45713_lpkg)))) {
		_45563_ok = true;
		return _45563_ok;
	}
	(*this)._method_push_err(_45543_pkg->_field_token,jule::Str("duplicate_use_decl", 18),jule::Slice<jule::Any>({jule::Any(_45543_pkg->_field_link_path)}));
	_45563_ok = false;
	return _45563_ok;
}



inline void _112572770_SymbolBuilder::_method_impl_import_selections(jule::Ref<_11265fb90_ImportInfo> _46845_imp,jule::Ref<_111612b20_UseDecl> _46867_decl) {
	{
		auto __julec_range_expr = _46867_decl->_field_selected;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_111613f20_Token _112572770_ident = *__julec_range_begin;
			_iter_begin_4638067040:;
			{
				if (_46845_imp->_method_exist_ident(_112572770_ident._field_kind)) {
					(*this)._method_push_err(_112572770_ident,jule::Str("duplicated_import_selection", 27),jule::Slice<jule::Any>({jule::Any(_112572770_ident._field_kind)}));
					goto _iter_next_4638067040;
				}
				_46845_imp->_field_selected=append(_46845_imp->_field_selected,jule::Slice<_111613f20_Token>({_112572770_ident}));
			}
			_iter_next_4638067040:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _112572770_ident = *__julec_range_begin; goto _iter_begin_4638067040; }
			_iter_end_4638067040:;
		}
	}
}



inline jule::Str _112572770_SymbolBuilder::_method_get_as_link_path(jule::Str _47940_path) {
	if (_47940_path.has_prefix(_1316f28b0_PATH_STDLIB)) {
		_47940_path=_47940_path.slice(static_cast<jule::Int>(_1316f28b0_PATH_STDLIB.len()));
		return jule::Str("std", 3) + _47940_path.replace(static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
	}
	jule::Str _48514_root;
	std::tie(_48514_root,std::ignore) = _131739f50_abs(this->self->_method_get_root()->_field_ast->_field_file->_method_dir());
	_47940_path=_47940_path.slice(static_cast<jule::Int>(_48514_root.len()));
	if (_47940_path[static_cast<jule::Int>(0LL)] == 92LL) {
		_47940_path=_47940_path.slice(static_cast<jule::Int>(1LL));
	}
	return _47940_path.replace(static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
}



inline void _112572770_SymbolBuilder::_method_push_cycle_error(jule::Ref<_112572770_SymbolBuilder> _49336_sb,jule::Str _49356_path,jule::Str& _49372_message) {
	
	jule::Str _49613_refers_to = _1316b2ff0_errorf(jule::Str("refers_to", 9),jule::Slice<jule::Any>({jule::Any(this->self->_method_get_as_link_path(_49336_sb->_field_table->_field_file->_method_dir())),jule::Any(this->self->_method_get_as_link_path(_49356_path))}));
	_49372_message=((_112572770_str_repeat(jule::Str(" ", 1),4LL) + _49613_refers_to) + jule::Str("\n", 1)) + _49372_message;
}



inline void _112572770_SymbolBuilder::_method_push_cross_cycle_error(jule::Ref<_112572770_SymbolBuilder> _50342_target,jule::Ref<_11265fb90_ImportInfo> _50366_imp,_111613f20_Token _50384_error_token) {
	jule::Str _50417_message = jule::Str("", 0);
	this->self->_method_push_cycle_error(this->self,_50366_imp->_field_path,_50417_message);
	jule::Ref<_112572770_SymbolBuilder> _50817_owner = this->self->_field_owner;
	jule::Ref<_112572770_SymbolBuilder> _50917_old = this->self;
	_iter_begin_4638112832:;
	if (!(jule::real(_50817_owner->_field_owner))) { goto _iter_end_4638112832; }
	{
		this->self->_method_push_cycle_error(_50917_old->_field_owner,_50917_old->_field_table->_field_file->_method_dir(),_50417_message);
		if ((_50817_owner->_field_owner).alloc == (_50342_target).alloc) {
			this->self->_method_push_cycle_error(_50342_target,_50817_owner->_field_table->_field_file->_method_dir(),_50417_message);
			goto _iter_end_4638112832;
		}
		_50917_old=_50817_owner;
		_50817_owner=_50817_owner->_field_owner;
	}
	_iter_next_4638112832:;
	goto _iter_begin_4638112832;
	_iter_end_4638112832:;
	this->self->_method_push_err(_50384_error_token,jule::Str("pkg_illegal_cross_cycle", 23),jule::Slice<jule::Any>({jule::Any(_50417_message)}));
}



inline jule::Bool _112572770_SymbolBuilder::_method_check_import_cycles(jule::Ref<_11265fb90_ImportInfo> _52639_imp,jule::Ref<_111612b20_UseDecl> _52657_decl) {
	if (_52639_imp->_field_path == this->self->_field_table->_field_file->_method_dir()) {
		this->self->_method_push_err(_52657_decl->_field_token,jule::Str("pkg_illegal_cycle_refers_itself", 31),jule::Slice<jule::Any>({jule::Any(this->self->_method_get_as_link_path(_52639_imp->_field_path))}));
		return false;
	}
	if ((!(jule::real(this->self->_field_owner)))) {
		return true;
	}
	if (this->self->_field_owner->_field_table->_field_file->_method_dir() == _52639_imp->_field_path) {
		this->self->_method_push_cross_cycle_error(this->self->_field_owner,_52639_imp,_52657_decl->_field_token);
		return false;
	}
	jule::Ref<_112572770_SymbolBuilder> _54117_owner = this->self->_field_owner;
	_julec_label_iter:;
	if (_54117_owner->_field_table->_field_file->_method_dir() == _52639_imp->_field_path) {
		this->self->_method_push_cross_cycle_error(_54117_owner,_52639_imp,_52657_decl->_field_token);
		return false;
	}
	if (jule::real(_54117_owner->_field_owner)) {
		_54117_owner=_54117_owner->_field_owner;
		goto _julec_label_iter;
	}
	return true;
}



inline jule::Bool _112572770_SymbolBuilder::_method_import_package(jule::Ref<_11265fb90_ImportInfo> _55638_imp,jule::Ref<_111612b20_UseDecl> _55660_decl) {
	jule::Bool _55678_ok = jule::Bool();
	if (_55638_imp->_field_cpp_linked) {
		_55678_ok = true;
		return _55678_ok;
	}
	jule::Ref<_11265fb90_ImportInfo> _56117_port = this->self->_field_importer.get()._method_get_import(_55638_imp->_field_path);
	if (jule::real(_56117_port)) {
		_55638_imp->_field_package=_56117_port->_field_package;
		_55638_imp->_field_duplicate=true;
	} else {
		if ((!(this->self->_method_check_import_cycles(_55638_imp,_55660_decl)))) {
			_55678_ok = false;
			return _55678_ok;
		}
		jule::Slice<jule::Ref<_1220cb5d0_Ast>> _57022_asts;
		jule::Slice<_1316b4080_Log> _57028_errors;
		std::tie(_57022_asts,_57028_errors) = this->self->_field_importer.get()._method_import_package(_55638_imp->_field_path);
		if (_57028_errors.len() > 0LL) {
			this->self->_field_errors=append(this->self->_field_errors,_57028_errors);
			_55678_ok = false;
			return _55678_ok;
		}
		{
			auto __julec_range_expr = _57022_asts;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1220cb5d0_Ast> _112572770_ast = *__julec_range_begin;
				_iter_begin_4638170736:;
				{
					jule::Ref<_1320e2330_SymbolTable> _57726_table;
					jule::Slice<_1316b4080_Log> _57733_errors;
					std::tie(_57726_table,_57733_errors) = _11304a4a0_build_symbols(_112572770_ast,this->self->_field_importer,this->self);
					if (_57733_errors.len() > 0LL) {
						this->self->_field_errors=append(this->self->_field_errors,_57733_errors);
						this->self->_method_push_err(_55638_imp->_field_token,jule::Str("used_package_has_errors", 23),jule::Slice<jule::Any>({jule::Any(_55638_imp->_field_link_path)}));
						_55678_ok = false;
						return _55678_ok;
					}
					_55638_imp->_field_package->_field_files=append(_55638_imp->_field_package->_field_files,jule::Slice<jule::Ref<_1320e2330_SymbolTable>>({_57726_table}));
				}
				_iter_next_4638170736:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _112572770_ast = *__julec_range_begin; goto _iter_begin_4638170736; }
				_iter_end_4638170736:;
			}
		}
	}
	this->self->_method_impl_import_selections(_55638_imp,_55660_decl);
	_55678_ok = true;
	return _55678_ok;
}



inline jule::Ref<_11265fb90_ImportInfo> _112572770_SymbolBuilder::_method_import_use_decl(jule::Ref<_111612b20_UseDecl> _59539_decl) {
	jule::Ref<_11265fb90_ImportInfo> _59617_imp = this->self->_method_build_import(_59539_decl);
	if ((!(jule::real(_59617_imp)))) {
		return jule::new_ref<_11265fb90_ImportInfo>();
	}
	jule::Bool _60217_ok = this->self->_method_check_duplicate_use_decl(_59617_imp);
	if ((!(_60217_ok))) {
		return jule::new_ref<_11265fb90_ImportInfo>();
	}
	_60217_ok=this->self->_method_import_package(_59617_imp,_59539_decl);
	this->self->_field_table->_field_imports._method_push(_59617_imp);
	if (_60217_ok) {
		this->self->_field_importer.get()._method_imported(_59617_imp);
		return _59617_imp;
	}
	return jule::new_ref<_11265fb90_ImportInfo>();
}



inline void _112572770_SymbolBuilder::_method_import_use_decls(void) {
	jule::Int _61717_i = 0LL;
	_iter_begin_4638201248:;
	if (!(_61717_i < this->self->_field_ast->_field_use_decls._method_len())) { goto _iter_end_4638201248; }
	{
		jule::Ref<_111612b20_UseDecl> _61921_decl = this->self->_field_ast->_field_use_decls._method_at(_61717_i);
		this->self->_method_import_use_decl(_61921_decl);
		if (this->self->_field_errors.len() > 0LL) {
			goto _iter_end_4638201248;
		}
	}
	_iter_next_4638201248:;
	(_61717_i)++;
	goto _iter_begin_4638201248;
	_iter_end_4638201248:;
}



inline void _112572770_SymbolBuilder::_method_append_decl(_111612b20_Node _62934_decl) {
	{
		auto _match_expr{ _62934_decl._field_data };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_TypeAliasDecl>>())) { goto _case_end_4638214000; }
		_case_begin_4638214000:;
		{
			jule::Ref<_1217f7750_TypeAlias> _63221_ta = _112572770_build_type_alias(_62934_decl._field_data.operator jule::Ref<_111612b20_TypeAliasDecl>());
			(*this)._field_table->_field_type_aliases._method_push(_63221_ta);
		}
		goto _match_end_4638211680;
		_case_end_4638214000:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_StructDecl>>())) { goto _case_end_4638213280; }
		_case_begin_4638213280:;
		{
			jule::Ref<_11209db80_Struct> _63621_srct = _112572770_build_struct(_62934_decl._field_data.operator jule::Ref<_111612b20_StructDecl>());
			(*this)._field_table->_field_structs._method_push(_63621_srct);
		}
		goto _match_end_4638211680;
		_case_end_4638213280:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_FnDecl>>())) { goto _case_end_4638213392; }
		_case_begin_4638213392:;
		{
			jule::Ref<_112446fb0_Fn> _64021_f = _112572770_build_fn(_62934_decl._field_data.operator jule::Ref<_111612b20_FnDecl>());
			(*this)._field_table->_field_funcs._method_push(_64021_f);
		}
		goto _match_end_4638211680;
		_case_end_4638213392:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_TraitDecl>>())) { goto _case_end_4638212800; }
		_case_begin_4638212800:;
		{
			jule::Ref<_11209e2e0_Trait> _64421_t = _112572770_build_trait(_62934_decl._field_data.operator jule::Ref<_111612b20_TraitDecl>());
			(*this)._field_table->_field_traits._method_push(_64421_t);
		}
		goto _match_end_4638211680;
		_case_end_4638212800:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_VarDecl>>())) { goto _case_end_4638212912; }
		_case_begin_4638212912:;
		{
			jule::Ref<_1320e22c0_Var> _64821_v = _112572770_build_var(_62934_decl._field_data.operator jule::Ref<_111612b20_VarDecl>());
			(*this)._field_table->_field_vars._method_push(_64821_v);
		}
		goto _match_end_4638211680;
		_case_end_4638212912:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_EnumDecl>>())) { goto _case_end_4638213024; }
		_case_begin_4638213024:;
		{
			jule::Ref<_11261eaf0_Enum> _65221_e = _112572770_build_enum(_62934_decl._field_data.operator jule::Ref<_111612b20_EnumDecl>());
			(*this)._field_table->_field_enums._method_push(_65221_e);
		}
		goto _match_end_4638211680;
		_case_end_4638213024:;
		_case_begin_4638212496:;
		{
			(*this)._method_push_err(_62934_decl._field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4638211680;
		_case_end_4638212496:;
		_match_end_4638211680:;
	}
}



inline void _112572770_SymbolBuilder::_method_append_decls(void) {
	jule::Int _66117_i = 0LL;
	_iter_begin_4638233968:;
	if (!(_66117_i < (*this)._field_ast->_field_decls._method_len())) { goto _iter_end_4638233968; }
	{
		_111612b20_Node _66321_decl = (*this)._field_ast->_field_decls._method_at(_66117_i);
		(*this)._method_append_decl(_66321_decl);
	}
	_iter_next_4638233968:;
	(_66117_i)++;
	goto _iter_begin_4638233968;
	_iter_end_4638233968:;
}



inline void _112572770_SymbolBuilder::_method_append_impls(void) {
	(*this)._field_table->_field_impls=_11203c360_Vector_15::_static_method_new(static_cast<jule::Int>((*this)._field_ast->_field_impls._method_len()));
	jule::Int _67017_i = 0LL;
	_iter_begin_4638252896:;
	if (!(_67017_i < (*this)._field_ast->_field_impls._method_len())) { goto _iter_end_4638252896; }
	{
		jule::Ref<_111612b20_Impl> _67221_decl = (*this)._field_ast->_field_impls._method_at(_67017_i);
		(*this)._field_table->_field_impls._method_push(_112572770_build_impl(_67221_decl));
	}
	_iter_next_4638252896:;
	(_67017_i)++;
	goto _iter_begin_4638252896;
	_iter_end_4638252896:;
}



inline void _112572770_SymbolBuilder::_method_push_directive_pass(jule::Ref<_111612b20_Directive> _67742_d) {
	_112572770_Pass _67817_pass = _112572770_Pass(_67742_d->_field_token,jule::Str());
	{
		auto __julec_range_expr = _67742_d->_field_args;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _112572770_arg = *__julec_range_begin;
			_iter_begin_4638264800:;
			{
				if (_112572770_arg != jule::Str("", 0)) {
					_67817_pass._field_text+=_112572770_arg + jule::Str(" ", 1);
				}
			}
			_iter_next_4638264800:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _112572770_arg = *__julec_range_begin; goto _iter_begin_4638264800; }
			_iter_end_4638264800:;
		}
	}
	_67817_pass._field_text=_67817_pass._field_text.trim(jule::Str(" \n\r\t\v", 5));
	(*this)._field_table->_field_passes._method_push(_67817_pass);
}



inline void _112572770_SymbolBuilder::_method_append_top_directives(void) {
	jule::Int _69117_i = 0LL;
	_iter_begin_4638272848:;
	if (!(_69117_i < (*this)._field_ast->_field_top_directives._method_len())) { goto _iter_end_4638272848; }
	{
		jule::Ref<_111612b20_Directive> _69321_d = (*this)._field_ast->_field_top_directives._method_at(_69117_i);
		{
			auto _match_expr{ _69321_d->_field_tag };
			if (!((jule::Str("pass", 4)) == _match_expr)) { goto _case_end_4638277504; }
			_case_begin_4638277504:;
			{
				(*this)._method_push_directive_pass(_69321_d);
			}
			goto _match_end_4638276176;
			_case_end_4638277504:;
			_match_end_4638276176:;
		}
	}
	_iter_next_4638272848:;
	(_69117_i)++;
	goto _iter_begin_4638272848;
	_iter_end_4638272848:;
}



inline void _112572770_SymbolBuilder::_method_build(void) {
	this->self->_field_table=jule::new_struct<_1320e2330_SymbolTable>(new( std::nothrow ) _1320e2330_SymbolTable(this->self->_field_ast->_field_file,_11203c360_Vector_6(),_11203c360_Vector_7(),_11203c360_Vector_9(),_11203c360_Vector_10(),_11203c360_Vector_12(),_11203c360_Vector_11(),_11203c360_Vector_13(),_11203c360_Vector_14(),_11203c360_Vector_15()));
	this->self->_method_append_top_directives();
	this->self->_method_import_use_decls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_append_decls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_append_impls();
}







std::ostream &operator<<(std::ostream &_Stream, const _112572770_SymbolBuilder &_Src) {
	_Stream << "SymbolBuilder{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "importer:" << _Src._field_importer << ", ";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "table:" << _Src._field_table;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_If &_Src) {
	_Stream << "If{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_Else &_Src) {
	_Stream << "Else{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "elifs:" << _Src._field_elifs << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_InfIter &_Src) {
	_Stream << "InfIter{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1126288e0_WhileIter::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_WhileIter &_Src) {
	_Stream << "WhileIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_RangeIter &_Src) {
	_Stream << "RangeIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "it:" << _Src._field_it;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "mtch:" << _Src._field_mtch;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_Label &_Src) {
	_Stream << "Label{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_Postfix &_Src) {
	_Stream << "Postfix{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_Assign &_Src) {
	_Stream << "Assign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_MultiAssign &_Src) {
	_Stream << "MultiAssign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_Match &_Src) {
	_Stream << "Match{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1126288e0_Case::_method_is_default(void) {
	return (*this)._field_exprs == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_Case &_Src) {
	_Stream << "Case{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "next:" << _Src._field_next;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "dest_case:" << _Src._field_dest_case;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_Recover &_Src) {
	_Stream << "Recover{";
	_Stream << "handler:" << _Src._field_handler << ", ";
	_Stream << "handler_expr:" << _Src._field_handler_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "scope_owner:" << _Src._field_scope_owner;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_ScopeGoto &_Src) {
	_Stream << "ScopeGoto{";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_11265fb90_ImportInfo> _1126288e0_ScopeChecker::_method_find_package(jule::Str _36835_ident) {
	return (*this)._field_s->_method_find_package(_36835_ident);
}



inline jule::Ref<_11265fb90_ImportInfo> _1126288e0_ScopeChecker::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)> _37837_selector) {
	return (*this)._field_s->_method_select_package(_37837_selector);
}



inline jule::Ref<_1320e22c0_Var> _1126288e0_ScopeChecker::_method_find_var(jule::Str _38931_ident,jule::Bool _38943_cpp_linked) {
	
	jule::Ref<_1320e22c0_Var> _39217_v = (*this)._field_table->_method___find_var(_38931_ident,_38943_cpp_linked,true);
	if (jule::real(_39217_v)) {
		return _39217_v;
	}
	jule::Ref<_1126288e0_ScopeChecker> _39717_parent = (*this)._field_parent;
	_iter_begin_4638350960:;
	if (!(jule::real(_39717_parent))) { goto _iter_end_4638350960; }
	{
		jule::Ref<_1320e22c0_Var> _39921_v = _39717_parent->_field_table->_method___find_var(_38931_ident,_38943_cpp_linked,true);
		if (jule::real(_39921_v)) {
			return _39921_v;
		}
		_39717_parent=_39717_parent->_field_parent;
	}
	_iter_next_4638350960:;
	goto _iter_begin_4638350960;
	_iter_end_4638350960:;
	return (*this)._field_s->_method_find_var(_38931_ident,_38943_cpp_linked);
}



inline jule::Ref<_1217f7750_TypeAlias> _1126288e0_ScopeChecker::_method_find_type_alias(jule::Str _41638_ident,jule::Bool _41650_cpp_linked) {
	
	jule::Ref<_1217f7750_TypeAlias> _41917_ta = (*this)._field_table->_method___find_type_alias(_41638_ident,_41650_cpp_linked,true);
	if (jule::real(_41917_ta)) {
		return _41917_ta;
	}
	jule::Ref<_1126288e0_ScopeChecker> _42417_parent = (*this)._field_parent;
	_iter_begin_4638368032:;
	if (!(jule::real(_42417_parent))) { goto _iter_end_4638368032; }
	{
		jule::Ref<_1217f7750_TypeAlias> _42621_ta = _42417_parent->_field_table->_method___find_type_alias(_41638_ident,_41650_cpp_linked,true);
		if (jule::real(_42621_ta)) {
			return _42621_ta;
		}
		_42417_parent=_42417_parent->_field_parent;
	}
	_iter_next_4638368032:;
	goto _iter_begin_4638368032;
	_iter_end_4638368032:;
	return (*this)._field_s->_method_find_type_alias(_41638_ident,_41650_cpp_linked);
}



inline jule::Ref<_11209db80_Struct> _1126288e0_ScopeChecker::_method_find_struct(jule::Str _44134_ident,jule::Bool _44146_cpp_linked) {
	return (*this)._field_s->_method_find_struct(_44134_ident,_44146_cpp_linked);
}



inline jule::Ref<_112446fb0_Fn> _1126288e0_ScopeChecker::_method_find_fn(jule::Str _45030_ident,jule::Bool _45042_cpp_linked) {
	return (*this)._field_s->_method_find_fn(_45030_ident,_45042_cpp_linked);
}



inline jule::Ref<_11209e2e0_Trait> _1126288e0_ScopeChecker::_method_find_trait(jule::Str _45933_ident) {
	return (*this)._field_s->_method_find_trait(_45933_ident);
}



inline jule::Ref<_11261eaf0_Enum> _1126288e0_ScopeChecker::_method_find_enum(jule::Str _46832_ident) {
	return (*this)._field_s->_method_find_enum(_46832_ident);
}



inline jule::Bool _1126288e0_ScopeChecker::_method_is_unsafe(void) {
	jule::Ref<_1126288e0_ScopeChecker> _47617_scope = this->self;
	_julec_label_iter:;
	if (_47617_scope->_field_scope->_field_unsafety) {
		return true;
	}
	if (jule::real(_47617_scope->_field_parent)) {
		_47617_scope=_47617_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _1126288e0_ScopeChecker::_method_is_root(void) {
	return (!(jule::real((*this)._field_parent))) || jule::real((*this)._field_owner);
}



inline jule::Ref<_1126288e0_ScopeChecker> _1126288e0_ScopeChecker::_method_get_root(void) {
	jule::Ref<_1126288e0_ScopeChecker> _49817_root = this->self;
	_iter_begin_4638415808:;
	if (!(jule::real(_49817_root->_field_parent) && (!(jule::real(_49817_root->_field_owner))))) { goto _iter_end_4638415808; }
	{
		_49817_root=_49817_root->_field_parent;
	}
	_iter_next_4638415808:;
	goto _iter_begin_4638415808;
	_iter_end_4638415808:;
	return _49817_root;
}



inline jule::Ref<_1126288e0_Label> _1126288e0_ScopeChecker::_method_find_label(jule::Str _50829_ident) {
	jule::Int _50917_i = 0LL;
	_iter_begin_4638420928:;
	if (!(_50917_i < (*this)._field_scope->_field_stmts._method_len())) { goto _iter_end_4638420928; }
	{
		jule::Any _51121_st = (*this)._field_scope->_field_stmts._method_at(_50917_i);
		{
			auto _match_expr{ _51121_st };
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_Label>>())) { goto _case_end_4638425424; }
			_case_begin_4638425424:;
			{
				jule::Ref<_1126288e0_Label> _51425_label = _51121_st.operator jule::Ref<_1126288e0_Label>();
				if (_51425_label->_field_ident == _50829_ident) {
					return _51425_label;
				}
			}
			goto _match_end_4638424320;
			_case_end_4638425424:;
			_match_end_4638424320:;
		}
	}
	_iter_next_4638420928:;
	(_50917_i)++;
	goto _iter_begin_4638420928;
	_iter_end_4638420928:;
	return jule::new_ref<_1126288e0_Label>();
}



inline jule::Ref<_1126288e0_ScopeLabel> _1126288e0_ScopeChecker::_method_find_label_scope(jule::Str _52636_ident) {
	jule::Ref<_1126288e0_ScopeLabel> _52717_label = this->self->_method_find_label_all(_52636_ident);
	if (jule::real(_52717_label) && ((_52717_label->_field_scope).alloc == (this->self).alloc)) {
		return _52717_label;
	}
	return jule::new_ref<_1126288e0_ScopeLabel>();
}



inline jule::Ref<_1126288e0_ScopeLabel> _1126288e0_ScopeChecker::_method_find_label_all(jule::Str _53833_ident) {
	{
		auto __julec_range_expr = (*this)._field_labels.get();
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1126288e0_ScopeLabel> _1126288e0_lbl = *__julec_range_begin;
			_iter_begin_4638438208:;
			{
				if (_1126288e0_lbl->_field_label->_field_ident == _53833_ident) {
					return _1126288e0_lbl;
				}
			}
			_iter_next_4638438208:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1126288e0_lbl = *__julec_range_begin; goto _iter_begin_4638438208; }
			_iter_end_4638438208:;
		}
	}
	return jule::new_ref<_1126288e0_ScopeLabel>();
}



inline jule::Bool _1126288e0_ScopeChecker::_method_is_duplicated_ident(jule::Uintptr _55038_itself,jule::Str _55055_ident) {
	jule::Ref<_1320e22c0_Var> _55113_v = (*this)._method_find_var(_55055_ident,false);
	if ((jule::real(_55113_v) && (((jule::Uintptr)((_55113_v).alloc)) != _55038_itself)) && ((_55113_v->_field_scope).alloc == ((*this)._field_scope).alloc)) {
		return true;
	}
	jule::Ref<_1217f7750_TypeAlias> _55613_ta = (*this)._method_find_type_alias(_55055_ident,false);
	if ((jule::real(_55613_ta) && (((jule::Uintptr)((_55613_ta).alloc)) != _55038_itself)) && ((_55613_ta->_field_scope).alloc == ((*this)._field_tree).alloc)) {
		return true;
	}
	return false;
}



inline void _1126288e0_ScopeChecker::_method_check_var_decl(jule::Ref<_111612b20_VarDecl> _56438_decl) {
	jule::Ref<_1320e22c0_Var> _56517_v = _112572770_build_var(_56438_decl);
	_56517_v->_field_scope=this->self->_field_scope;
	__JULE_DEFER({
		this->self->_field_table->_field_vars._method_push(_56517_v);
		this->self->_field_scope->_field_stmts._method_push(jule::Any(_56517_v));
	});
	if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_56517_v).alloc)),_56517_v->_field_ident)) {
		this->self->_field_s->_method_push_err(_56517_v->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_56517_v->_field_ident)}));
	}
	this->self->_field_s->_method_check_var_decl(_56517_v,this->self);
	if ((!(_56517_v->_method_is_type_inferred())) && ((!(jule::real(_56517_v->_field_kind))) || (!(jule::real(_56517_v->_field_kind->_field_kind))))) {
		return;
	}
	this->self->_field_s->_method_check_type_var(_56517_v,this->self);
}



inline void _1126288e0_ScopeChecker::_method_check_type_alias_decl(jule::Ref<_111612b20_TypeAliasDecl> _58545_decl) {
	jule::Ref<_1217f7750_TypeAlias> _58617_ta = _112572770_build_type_alias(_58545_decl);
	if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_58617_ta).alloc)),_58617_ta->_field_ident)) {
		this->self->_field_s->_method_push_err(_58617_ta->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_58617_ta->_field_ident)}));
	}
	this->self->_field_s->_method_check_type_alias_decl(_58617_ta,this->self);
	this->self->_field_table->_field_type_aliases._method_push(_58617_ta);
}



inline jule::Ref<_1126288e0_Scope> _1126288e0_ScopeChecker::_method_get_child(void) {
	return jule::new_struct<_1126288e0_Scope>(new( std::nothrow ) _1126288e0_Scope((*this)._field_scope,jule::Bool(),jule::Bool(),_11203c360_Vector_8()));
}



inline void _1126288e0_ScopeChecker::_method_check_child_ssc(jule::Ref<_111612b20_ScopeTree> _60139_tree,jule::Ref<_1126288e0_Scope> _60161_s,jule::Ref<_1126288e0_ScopeChecker> _60176_ssc) {
	_60176_ssc->_field_parent=this->self;
	_60176_ssc->_method_check(_60139_tree,_60161_s);
}



inline jule::Ref<_1126288e0_Scope> _1126288e0_ScopeChecker::_method_check_child_sc(jule::Ref<_111612b20_ScopeTree> _60638_tree,jule::Ref<_1126288e0_ScopeChecker> _60660_ssc) {
	jule::Ref<_1126288e0_Scope> _60717_s = this->self->_method_get_child();
	this->self->_method_check_child_ssc(_60638_tree,_60717_s,_60660_ssc);
	return _60717_s;
}



inline jule::Ref<_1126288e0_Scope> _1126288e0_ScopeChecker::_method_check_child(jule::Ref<_111612b20_ScopeTree> _61235_tree) {
	jule::Ref<_1126288e0_ScopeChecker> _61317_ssc = this->self->_method_new_child_checker();
	return this->self->_method_check_child_sc(_61235_tree,_61317_ssc);
}



inline void _1126288e0_ScopeChecker::_method_check_anon_scope(jule::Ref<_111612b20_ScopeTree> _61740_tree) {
	jule::Ref<_1126288e0_Scope> _61817_s = this->self->_method_check_child(_61740_tree);
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_61817_s));
}



inline jule::Bool _1126288e0_ScopeChecker::_method_try_call_recover(jule::Ref<_121dedce0_Data> _62240_d) {
	{
		auto _match_expr{ _62240_d->_field_model };
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_Recover>>())) { goto _case_end_4638523888; }
		goto _match_end_4638522032;
		_case_end_4638523888:;
		_case_begin_4638522848:;
		{
			return false;
		}
		goto _match_end_4638522032;
		_case_end_4638522848:;
		_match_end_4638522032:;
	}
	jule::Ref<_1126288e0_Recover> _62817_rec = _62240_d->_field_model.operator jule::Ref<_1126288e0_Recover>();
	_62817_rec->_field_handler=_62240_d->_field_kind->_method_fnc();
	_62817_rec->_field_scope=jule::new_struct<_1126288e0_Scope>(new( std::nothrow ) _1126288e0_Scope());
	_62817_rec->_field_scope_owner=this->self->_method_get_root()->_field_owner;
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_62817_rec));
	this->self->_field_tree->_field_stmts=this->self->_field_tree->_field_stmts.slice(static_cast<jule::Int>(this->self->_field_i + 1LL));
	this->self->_field_scope=_62817_rec->_field_scope;
	this->self->_method_check_tree();
	return true;
}



inline void _1126288e0_ScopeChecker::_method_check_expr(jule::Ref<_111612b20_Expr> _64134_expr) {
	jule::Ref<_121dedce0_Data> _64217_d = this->self->_field_s->_method_eval(_64134_expr,this->self);
	if ((!(jule::real(_64217_d)))) {
		return;
	}
	if (_64134_expr->_method_is_fn_call()) {
		jule::Bool _64817_ok = this->self->_method_try_call_recover(_64217_d);
		if (_64817_ok) {
			return;
		}
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_64217_d));
}



inline jule::Ref<_1126288e0_If> _1126288e0_ScopeChecker::_method_check_if(jule::Ref<_111612b20_If> _65732_i) {
	jule::Ref<_1126288e0_Scope> _65817_s = this->self->_method_check_child(_65732_i->_field_scope);
	jule::Ref<_121dedce0_Data> _66017_d = this->self->_field_s->_method_eval(_65732_i->_field_expr,this->self);
	if ((!(jule::real(_66017_d)))) {
		return jule::new_ref<_1126288e0_If>();
	}
	jule::Ref<_1217f7750_Prim> _66513_prim = _66017_d->_field_kind->_method_prim();
	if ((!(jule::real(_66513_prim)))) {
		this->self->_field_s->_method_push_err(_65732_i->_field_expr->_field_token,jule::Str("if_require_bool_expr", 20),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1126288e0_If>();
	}
	if ((!(_66513_prim->_method_is_bool()))) {
		this->self->_field_s->_method_push_err(_65732_i->_field_expr->_field_token,jule::Str("if_require_bool_expr", 20),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1126288e0_If>();
	}
	return jule::new_struct<_1126288e0_If>(new( std::nothrow ) _1126288e0_If(_66017_d->_field_model,_65817_s));
}



inline jule::Ref<_1126288e0_Else> _1126288e0_ScopeChecker::_method_check_else(jule::Ref<_111612b20_Else> _68234_e) {
	jule::Ref<_1126288e0_Scope> _68317_s = this->self->_method_check_child(_68234_e->_field_scope);
	return jule::new_struct<_1126288e0_Else>(new( std::nothrow ) _1126288e0_Else(_68317_s));
}



inline void _1126288e0_ScopeChecker::_method_check_conditional(jule::Ref<_111612b20_Conditional> _68941_conditional) {
	jule::Ref<_1126288e0_Conditional> _69017_c = jule::new_struct<_1126288e0_Conditional>(new( std::nothrow ) _1126288e0_Conditional());
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_69017_c));
	_69017_c->_field_elifs=jule::Slice<jule::Ref<_1126288e0_If>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_68941_conditional->_field_tail.len() + 1LL)));
	_69017_c->_field_elifs[static_cast<jule::Int>(0LL)]=this->self->_method_check_if(_68941_conditional->_field_head);
	{
		auto __julec_range_expr = _68941_conditional->_field_tail;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1126288e0_i = 0;
			jule::Ref<_111612b20_If> _1126288e0_elif = *__julec_range_begin;
			_iter_begin_4638584176:;
			{
				_69017_c->_field_elifs[static_cast<jule::Int>(_1126288e0_i + 1LL)]=this->self->_method_check_if(_1126288e0_elif);
			}
			_iter_next_4638584176:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1126288e0_i; _1126288e0_elif = *__julec_range_begin; goto _iter_begin_4638584176; }
			_iter_end_4638584176:;
		}
	}
	if (jule::real(_68941_conditional->_field_default)) {
		_69017_c->_field_default=this->self->_method_check_else(_68941_conditional->_field_default);
	}
}



inline jule::Ref<_1126288e0_Scope> _1126288e0_ScopeChecker::_method_check_iter_scope_sc(jule::Uintptr _70539_it,jule::Ref<_111612b20_ScopeTree> _70556_tree,jule::Ref<_1126288e0_ScopeChecker> _70578_ssc) {
	_70578_ssc->_field_it=_70539_it;
	return this->self->_method_check_child_sc(_70556_tree,_70578_ssc);
}



inline jule::Ref<_1126288e0_Scope> _1126288e0_ScopeChecker::_method_check_iter_scope(jule::Uintptr _71036_it,jule::Ref<_111612b20_ScopeTree> _71053_tree) {
	jule::Ref<_1126288e0_ScopeChecker> _71117_ssc = this->self->_method_new_child_checker();
	return this->self->_method_check_iter_scope_sc(_71036_it,_71053_tree,_71117_ssc);
}



inline void _1126288e0_ScopeChecker::_method_check_inf_iter(jule::Ref<_111612b20_Iter> _71538_it) {
	jule::Ref<_1126288e0_InfIter> _71617_kind = jule::new_struct<_1126288e0_InfIter>(new( std::nothrow ) _1126288e0_InfIter());
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_71617_kind));
	_71617_kind->_field_scope=this->self->_method_check_iter_scope(((jule::Uintptr)((_71617_kind).alloc)),_71538_it->_field_scope);
}



inline void _1126288e0_ScopeChecker::_method_check_while_iter(jule::Ref<_111612b20_Iter> _72340_it) {
	jule::Ref<_111612b20_WhileKind> _72417_wh = _72340_it->_field_kind.operator jule::Ref<_111612b20_WhileKind>();
	if ((!(jule::real(_72417_wh->_field_expr))) && (_72417_wh->_field_next == nullptr)) {
		this->self->_method_check_inf_iter(_72340_it);
		return;
	}
	jule::Ref<_1126288e0_WhileIter> _73017_kind = jule::new_struct<_1126288e0_WhileIter>(new( std::nothrow ) _1126288e0_WhileIter());
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_73017_kind));
	_73017_kind->_field_scope=this->self->_method_check_iter_scope(((jule::Uintptr)((_73017_kind).alloc)),_72340_it->_field_scope);
	if (jule::real(_72417_wh->_field_expr)) {
		jule::Ref<_121dedce0_Data> _73721_d = this->self->_field_s->_method_eval(_72417_wh->_field_expr,this->self);
		if ((!(jule::real(_73721_d)))) {
			return;
		}
		jule::Ref<_1217f7750_Prim> _74217_prim = _73721_d->_field_kind->_method_prim();
		if ((!(jule::real(_74217_prim)))) {
			this->self->_field_s->_method_push_err(_72340_it->_field_token,jule::Str("iter_while_require_bool_expr", 28),jule::Slice<jule::Any>({}));
			return;
		}
		if ((!(_74217_prim->_method_is_bool()))) {
			this->self->_field_s->_method_push_err(_72340_it->_field_token,jule::Str("iter_while_require_bool_expr", 28),jule::Slice<jule::Any>({}));
			return;
		}
		_73017_kind->_field_expr=_73721_d->_field_model;
	}
	if (_72417_wh->_method_is_while_next()) {
		if ((!(_1126288e0_is_valid_ast_st_for_next_st(_72417_wh->_field_next)))) {
			this->self->_field_s->_method_push_err(_72417_wh->_field_next_token,jule::Str("invalid_stmt_for_next", 21),jule::Slice<jule::Any>({}));
			return;
		}
		jule::Int _76217_n = this->self->_field_scope->_field_stmts._method_len();
		this->self->_method_check_node(_72417_wh->_field_next);
		if (_76217_n < this->self->_field_scope->_field_stmts._method_len()) {
			jule::Any _76525_st = this->self->_field_scope->_field_stmts._method_at(_76217_n);
			this->self->_field_scope->_field_stmts._method_set_len(_76217_n);
			if ((!(_1126288e0_is_valid_st_for_next_st(_76525_st)))) {
				this->self->_field_s->_method_push_err(_72417_wh->_field_next_token,jule::Str("invalid_stmt_for_next", 21),jule::Slice<jule::Any>({}));
			}
			_73017_kind->_field_next=_76525_st;
		}
	}
}



inline void _1126288e0_ScopeChecker::_method_check_range_iter(jule::Ref<_111612b20_Iter> _77640_it) {
	jule::Ref<_111612b20_RangeKind> _77717_rang = _77640_it->_field_kind.operator jule::Ref<_111612b20_RangeKind>();
	jule::Ref<_121dedce0_Data> _77917_d = this->self->_field_s->_method_eval(_77717_rang->_field_expr,this->self);
	if ((!(jule::real(_77917_d)))) {
		return;
	}
	jule::Ref<_1126288e0_RangeIter> _78417_kind = jule::new_struct<_1126288e0_RangeIter>(new( std::nothrow ) _1126288e0_RangeIter(_77917_d,jule::Ref<_1126288e0_Scope>(),jule::Ref<_1320e22c0_Var>(),jule::Ref<_1320e22c0_Var>()));
	_121807de0_RangeChecker _78817_rc = _121807de0_RangeChecker(this->self,_77717_rang,_78417_kind,_77917_d);
	jule::Bool _79413_ok = _78817_rc._method_check();
	if ((!(_79413_ok))) {
		return;
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_78417_kind));
	jule::Ref<_1126288e0_ScopeChecker> _80117_ssc = this->self->_method_new_child_checker();
	if (jule::real(_78417_kind->_field_key_a)) {
		_80117_ssc->_field_table->_field_vars._method_push(_78417_kind->_field_key_a);
	}
	if (jule::real(_78417_kind->_field_key_b)) {
		_80117_ssc->_field_table->_field_vars._method_push(_78417_kind->_field_key_b);
	}
	_78417_kind->_field_scope=this->self->_method_check_iter_scope_sc(((jule::Uintptr)((_78417_kind).alloc)),_77640_it->_field_scope,_80117_ssc);
}



inline void _1126288e0_ScopeChecker::_method_check_iter(jule::Ref<_111612b20_Iter> _81434_it) {
	if (_81434_it->_method_is_inf()) {
		this->self->_method_check_inf_iter(_81434_it);
		return;
	}
	{
		auto _match_expr{ _81434_it->_field_kind };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_WhileKind>>())) { goto _case_end_4638692192; }
		_case_begin_4638692192:;
		{
			this->self->_method_check_while_iter(_81434_it);
		}
		goto _match_end_4638688272;
		_case_end_4638692192:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_RangeKind>>())) { goto _case_end_4638690896; }
		_case_begin_4638690896:;
		{
			this->self->_method_check_range_iter(_81434_it);
		}
		goto _match_end_4638688272;
		_case_end_4638690896:;
		_case_begin_4638690592:;
		{
			jule::outln(jule::Str("error <unimplemented iteration kind>", 36));
		}
		goto _match_end_4638688272;
		_case_end_4638690592:;
		_match_end_4638688272:;
	}
}



inline jule::Bool _1126288e0_ScopeChecker::_method_check_valid_cont_label(jule::Uintptr _82742_it) {
	jule::Ref<_1126288e0_ScopeChecker> _82817_scope = this->self;
	_julec_label_iter:;
	if (_82817_scope->_field_it == _82742_it) {
		return true;
	}
	if (jule::real(_82817_scope->_field_parent)) {
		_82817_scope=_82817_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _1126288e0_ScopeChecker::_method_check_valid_break_label(jule::Uintptr _84343_ptr) {
	jule::Ref<_1126288e0_ScopeChecker> _84417_scope = this->self;
	_julec_label_iter:;
	if (_84417_scope->_field_it == _84343_ptr) {
		return true;
	}
	if (_84417_scope->_field_cse != 0LL) {
		jule::Uintptr _85217_mtch = ((jule::Uintptr)((((_1126288e0_Case*)(_84417_scope->_field_cse))->_field_owner).alloc));
		if (_85217_mtch == _84343_ptr) {
			return true;
		}
	}
	if (jule::real(_84417_scope->_field_parent)) {
		_84417_scope=_84417_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ref<_1126288e0_ContSt> _1126288e0_ScopeChecker::_method_check_cont_valid_scope(jule::Ref<_111612b20_ContSt> _86641_c) {
	if (_86641_c->_field_label._field_id != 0LLU) {
		return jule::new_struct<_1126288e0_ContSt>(new( std::nothrow ) _1126288e0_ContSt());
	}
	_1126288e0_ScopeChecker _87117_scope = (*this);
	_julec_label_iter:;
	{
		if (!((((_87117_scope._field_it == 0LL) && jule::real(_87117_scope._field_parent)) && (!(jule::real(_87117_scope._field_owner)))))) { goto _case_end_4638723904; }
		_case_begin_4638723904:;
		{
			_87117_scope=_87117_scope._field_parent;
			goto _julec_label_iter;
		}
		goto _match_end_4638723456;
		_case_end_4638723904:;
		if (!((_87117_scope._field_it != 0LL))) { goto _case_end_4638724016; }
		_case_begin_4638724016:;
		{
			return jule::new_struct<_1126288e0_ContSt>(new( std::nothrow ) _1126288e0_ContSt(_87117_scope._field_it));
		}
		goto _match_end_4638723456;
		_case_end_4638724016:;
		_match_end_4638723456:;
	}
	(*this)._field_s->_method_push_err(_86641_c->_field_token,jule::Str("continue_at_out_of_valid_scope", 30),jule::Slice<jule::Any>({}));
	return jule::new_ref<_1126288e0_ContSt>();
}



inline void _1126288e0_ScopeChecker::_method_check_cont(jule::Ref<_111612b20_ContSt> _88630_c) {
	jule::Ref<_1126288e0_ContSt> _88717_cont = this->self->_method_check_cont_valid_scope(_88630_c);
	if ((!(jule::real(_88717_cont)))) {
		return;
	}
	if (_88630_c->_field_label._field_id != 0LLU) {
		jule::Ref<_1126288e0_ScopeLabel> _89321_label = _1126288e0_find_label_parent(_88630_c->_field_label._field_kind,this->self->_field_parent);
		if ((!(jule::real(_89321_label)))) {
			this->self->_field_s->_method_push_err(_88630_c->_field_label,jule::Str("label_not_exist", 15),jule::Slice<jule::Any>({jule::Any(_88630_c->_field_label._field_kind)}));
			return;
		}
		_89321_label->_field_used=true;
		if ((_89321_label->_field_pos + 1LL) >= _89321_label->_field_scope->_field_scope->_field_stmts._method_len()) {
			this->self->_field_s->_method_push_err(_88630_c->_field_label,jule::Str("invalid_label", 13),jule::Slice<jule::Any>({}));
			return;
		}
		jule::Int _90617_i = _89321_label->_field_pos + 1LL;
		if (_90617_i >= _89321_label->_field_scope->_field_scope->_field_stmts._method_len()) {
			this->self->_field_s->_method_push_err(_88630_c->_field_label,jule::Str("invalid_label", 13),jule::Slice<jule::Any>({}));
		} else {
			jule::Any _91025_st = _89321_label->_field_scope->_field_scope->_field_stmts._method_at(_90617_i);
			{
				auto _match_expr{ _91025_st };
				if (!(_match_expr.type_is<jule::Ref<_1126288e0_InfIter>>())) { goto _case_end_4638760848; }
				_case_begin_4638760848:;
				{
					_88717_cont->_field_it=((jule::Uintptr)((_91025_st.operator jule::Ref<_1126288e0_InfIter>()).alloc));
				}
				goto _match_end_4638758640;
				_case_end_4638760848:;
				if (!(_match_expr.type_is<jule::Ref<_1126288e0_RangeIter>>())) { goto _case_end_4638759952; }
				_case_begin_4638759952:;
				{
					_88717_cont->_field_it=((jule::Uintptr)((_91025_st.operator jule::Ref<_1126288e0_RangeIter>()).alloc));
				}
				goto _match_end_4638758640;
				_case_end_4638759952:;
				if (!(_match_expr.type_is<jule::Ref<_1126288e0_WhileIter>>())) { goto _case_end_4638760064; }
				_case_begin_4638760064:;
				{
					_88717_cont->_field_it=((jule::Uintptr)((_91025_st.operator jule::Ref<_1126288e0_WhileIter>()).alloc));
				}
				goto _match_end_4638758640;
				_case_end_4638760064:;
				_case_begin_4638759648:;
				{
					this->self->_field_s->_method_push_err(_88630_c->_field_label,jule::Str("invalid_label", 13),jule::Slice<jule::Any>({}));
				}
				goto _match_end_4638758640;
				_case_end_4638759648:;
				_match_end_4638758640:;
			}
		}
	}
	if (_88717_cont->_field_it != 0LL) {
		if ((!(this->self->_method_check_valid_cont_label(_88717_cont->_field_it)))) {
			this->self->_field_s->_method_push_err(_88630_c->_field_label,jule::Str("invalid_label", 13),jule::Slice<jule::Any>({}));
		}
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_88717_cont));
}



inline void _1126288e0_ScopeChecker::_method_check_label(jule::Ref<_111612b20_LabelSt> _92935_l) {
	if (jule::real(this->self->_method_find_label(_92935_l->_field_ident))) {
		this->self->_field_s->_method_push_err(_92935_l->_field_token,jule::Str("label_exist", 11),jule::Slice<jule::Any>({jule::Any(_92935_l->_field_ident)}));
		return;
	}
	jule::Ref<_1126288e0_Label> _93517_label = jule::new_struct<_1126288e0_Label>(new( std::nothrow ) _1126288e0_Label(_92935_l->_field_ident));
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_93517_label));
	this->self->_field_labels=append(this->self->_field_labels.get(),jule::Slice<jule::Ref<_1126288e0_ScopeLabel>>({jule::new_struct<_1126288e0_ScopeLabel>(new( std::nothrow ) _1126288e0_ScopeLabel(_92935_l->_field_token,_93517_label,static_cast<jule::Int>(this->self->_field_scope->_field_stmts._method_len() - 1LL),this->self,jule::Bool()))}));
}



inline void _1126288e0_ScopeChecker::_method_push_goto(jule::Ref<_111612b20_GotoSt> _94833_gt) {
	this->self->_field_scope->_field_stmts._method_push(jule::Any(jule::new_struct<_1126288e0_GotoSt>(new( std::nothrow ) _1126288e0_GotoSt(_94833_gt->_field_label._field_kind))));
	this->self->_field_gotos=append(this->self->_field_gotos.get(),jule::Slice<jule::Ref<_1126288e0_ScopeGoto>>({jule::new_struct<_1126288e0_ScopeGoto>(new( std::nothrow ) _1126288e0_ScopeGoto(_94833_gt,this->self,static_cast<jule::Int>(this->self->_field_scope->_field_stmts._method_len() - 1LL)))}));
}



inline void _1126288e0_ScopeChecker::_method_check_postfix(jule::Ref<_111612b20_AssignSt> _96037_a) {
	if (_96037_a->_field_left.len() > 1LL) {
		this->self->_field_s->_method_push_err(_96037_a->_field_setter,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return;
	}
	jule::Ref<_121dedce0_Data> _96617_d = this->self->_field_s->_method_eval(_96037_a->_field_left[static_cast<jule::Int>(0LL)]->_field_expr,this->self);
	if ((!(jule::real(_96617_d)))) {
		return;
	}
	_1126288e0_check_assign(this->self->_field_s,_96617_d,jule::new_ref<_121dedce0_Data>(),_96037_a->_field_setter);
	if (jule::real(_96617_d->_field_kind->_method_ptr())) {
		jule::Ref<_1217f7750_Ptr> _97421_ptr = _96617_d->_field_kind->_method_ptr();
		if ((!(_97421_ptr->_method_is_unsafe())) && (!(this->self->_method_is_unsafe()))) {
			this->self->_field_s->_method_push_err(_96037_a->_field_left[static_cast<jule::Int>(0LL)]->_field_expr->_field_token,jule::Str("unsafe_behavior_at_out_of_unsafe_scope", 38),jule::Slice<jule::Any>({}));
			return;
		}
	}
	jule::Ref<_1217f7750_TypeKind> _98117_check_t = _96617_d->_field_kind;
	if (jule::real(_96617_d->_field_kind->_method_ref())) {
		_98117_check_t=_96617_d->_field_kind->_method_ref()->_field_elem;
	}
	if ((!(jule::real(_98117_check_t->_method_prim()))) || (!(_1132426f0_is_num(_98117_check_t->_method_prim()->_field_kind)))) {
		this->self->_field_s->_method_push_err(_96037_a->_field_setter,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any(_96037_a->_field_setter._field_kind),jule::Any(_96617_d->_field_kind->_method_to_str())}));
		return;
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(jule::new_struct<_1126288e0_Postfix>(new( std::nothrow ) _1126288e0_Postfix(_96617_d->_field_model,_96037_a->_field_setter._field_kind))));
}



inline jule::Bool _1126288e0_ScopeChecker::_method_is_new_assign_ident(jule::Str _99738_ident) {
	if (_111613f20_is_ignore_ident(_99738_ident) || (_99738_ident == jule::Str("", 0))) {
		return false;
	}
	return (*this)._field_table->_method_def_by_ident(_99738_ident,false) == nullptr;
}



inline void _1126288e0_ScopeChecker::_method_check_single_assign(jule::Ref<_111612b20_AssignSt> _100543_a) {
	jule::Ref<_121dedce0_Data> _100617_l = jule::new_ref<_121dedce0_Data>();
	jule::Ref<_121dedce0_Data> _100717_r = jule::new_ref<_121dedce0_Data>();
	if ((!(_111613f20_is_ignore_ident(_100543_a->_field_left[static_cast<jule::Int>(0LL)]->_field_ident)))) {
		_100617_l=this->self->_field_s->_method_eval(_100543_a->_field_left[static_cast<jule::Int>(0LL)]->_field_expr,this->self);
		if ((!(jule::real(_100617_l)))) {
			return;
		}
	}
	if (jule::real(_100617_l)) {
		_100717_r=this->self->_field_s->_method_evalp(_100543_a->_field_right,this->self,_100617_l->_field_kind);
	} else {
		_100717_r=this->self->_field_s->_method_eval(_100543_a->_field_right,this->self);
	}
	if ((!(jule::real(_100717_r)))) {
		return;
	}
	if ((!(jule::real(_100617_l)))) {
		if (_100717_r->_field_kind->_method_is_void()) {
			this->self->_field_s->_method_push_err(_100543_a->_field_right->_field_token,jule::Str("invalid_expr", 12),jule::Slice<jule::Any>({}));
		}
		this->self->_field_scope->_field_stmts._method_push(jule::Any(_100717_r));
		return;
	}
	if ((!(_1126288e0_check_assign(this->self->_field_s,_100617_l,_100717_r,_100543_a->_field_setter)))) {
		return;
	}
	if (jule::real(_100717_r->_field_kind->_method_tup())) {
		this->self->_field_s->_method_push_err(_100543_a->_field_setter,jule::Str("missing_multi_assign_idents", 27),jule::Slice<jule::Any>({}));
		return;
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(jule::new_struct<_1126288e0_Assign>(new( std::nothrow ) _1126288e0_Assign(_100617_l->_field_model,_100717_r->_field_model,_100543_a->_field_setter._field_kind))));
	if ((_100543_a->_field_setter._field_kind != jule::Str("=", 1)) && (!(_100717_r->_method_is_const()))) {
		_100543_a->_field_setter._field_kind=_100543_a->_field_setter._field_kind.slice(0LL,static_cast<jule::Int>(_100543_a->_field_setter._field_kind.len() - 1LL));
		_121dedce0_BinopSolver _105221_solver = _121dedce0_BinopSolver(jule::new_struct<_121dedce0_Eval>(new( std::nothrow ) _121dedce0_Eval(this->self->_field_s,this->self,jule::Ref<_1217f7750_TypeKind>(),this->self->_method_is_unsafe(),jule::Ref<_1320e22c0_Var>())),jule::Ref<_121dedce0_Data>(),jule::Ref<_121dedce0_Data>(),_100543_a->_field_setter);
		_100717_r=_105221_solver._method_solve_explicit(_100617_l,_100717_r);
		if ((!(jule::real(_100717_r)))) {
			return;
		}
		_100543_a->_field_setter._field_kind+=jule::Str("=", 1);
	}
	_121807de0_AssignTypeChecker _106817_checker = _121807de0_AssignTypeChecker(this->self->_field_s,_100617_l->_field_kind,_100717_r,_100543_a->_field_setter,true);
	_106817_checker._method_check();
}



inline void _1126288e0_ScopeChecker::_method___process_end_part_of_multi_assign(jule::Ref<_1126288e0_MultiAssign> _107857_st,jule::Ref<_111612b20_AssignSt> _107913_a,jule::Ref<_111612b20_AssignLeft> _107927_lexpr,jule::Ref<_121dedce0_Data> _107951_l,jule::Ref<_121dedce0_Data> _107965_r) {
	if (_111613f20_is_ignore_ident(_107927_lexpr->_field_ident)) {
		if (_107965_r->_field_kind->_method_is_void()) {
			(*this)._field_s->_method_push_err(_107913_a->_field_right->_field_token,jule::Str("invalid_expr", 12),jule::Slice<jule::Any>({}));
		}
		_107857_st->_field_l=append(_107857_st->_field_l,jule::Slice<jule::Any>({jule::Any(nullptr)}));
		return;
	}
	if (_107913_a->_field_declarative && (*this)._method_is_new_assign_ident(_107927_lexpr->_field_ident)) {
		jule::Ref<_1320e22c0_Var> _109121_v = jule::new_struct<_1320e22c0_Var>(new( std::nothrow ) _1320e22c0_Var((*this)._field_scope,_107927_lexpr->_field_token,_107927_lexpr->_field_ident,jule::Bool(),jule::Bool(),_107927_lexpr->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),_107927_lexpr->_field_reference,jule::Str(),jule::Ref<_1217f7750_TypeSymbol>(),jule::new_struct<_121dedce0_Value>(new( std::nothrow ) _121dedce0_Value(_107913_a->_field_right,_107965_r)),jule::Ref<_112572770_ReferenceStack>(),jule::Slice<jule::Ref<_1320e22c0_Var>>()));
		(*this)._field_s->_method_check_var(_109121_v);
		_107857_st->_field_l=append(_107857_st->_field_l,jule::Slice<jule::Any>({jule::Any(_109121_v)}));
		(*this)._field_table->_field_vars._method_push(_109121_v);
		(*this)._field_scope->_field_stmts._method_push(jule::Any(_109121_v));
		return;
	}
	if (_107927_lexpr->_field_mutable || _107927_lexpr->_field_reference) {
		(*this)._field_s->_method_push_err(_107927_lexpr->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_107927_lexpr->_field_ident)}));
	}
	if ((!(_1126288e0_check_assign((*this)._field_s,_107951_l,_107965_r,_107913_a->_field_setter)))) {
		return;
	}
	
	(*this)._field_s->_method_check_validity_for_init_expr(_107951_l->_field_mutable,false,_107951_l->_field_kind,_107965_r,_107913_a->_field_setter);
	_121807de0_AssignTypeChecker _112517_checker = _121807de0_AssignTypeChecker((*this)._field_s,_107951_l->_field_kind,_107965_r,_107913_a->_field_setter,true);
	_112517_checker._method_check();
	_107857_st->_field_l=append(_107857_st->_field_l,jule::Slice<jule::Any>({_107951_l->_field_model}));
}



inline void _1126288e0_ScopeChecker::_method_check_ret_multi_assign(jule::Ref<_111612b20_AssignSt> _113746_a) {
	jule::Ref<_121dedce0_Data> _113817_rd = this->self->_field_s->_method_eval(_113746_a->_field_right,this->self);
	if ((!(jule::real(_113817_rd)))) {
		return;
	}
	jule::Slice<jule::Ref<_121dedce0_Data>> _114317_r = _1126288e0_get_datas_from_tuple_data(_113817_rd);
	{
		if (!((_113746_a->_field_left.len() > _114317_r.len()))) { goto _case_end_4638985856; }
		_case_begin_4638985856:;
		{
			this->self->_field_s->_method_push_err(_113746_a->_field_setter,jule::Str("overflow_multi_assign_idents", 28),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4638985408;
		_case_end_4638985856:;
		if (!((_113746_a->_field_left.len() < _114317_r.len()))) { goto _case_end_4638985968; }
		_case_begin_4638985968:;
		{
			this->self->_field_s->_method_push_err(_113746_a->_field_setter,jule::Str("missing_multi_assign_idents", 27),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4638985408;
		_case_end_4638985968:;
		_match_end_4638985408:;
	}
	jule::Ref<_1126288e0_MultiAssign> _115517_st = jule::new_struct<_1126288e0_MultiAssign>(new( std::nothrow ) _1126288e0_MultiAssign(jule::Slice<jule::Any>(),_113817_rd->_field_model));
	if ((!(jule::real(_113817_rd->_field_kind->_method_tup())))) {
		_115517_st->_field_r=jule::Any(jule::new_struct<_112673500_TupleExprModel>(new( std::nothrow ) _112673500_TupleExprModel(_114317_r)));
	}
	{
		auto __julec_range_expr = _113746_a->_field_left;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1126288e0_i = 0;
			_iter_begin_4638998608:;
			{
				jule::Ref<_111612b20_AssignLeft> _116421_lexpr = _113746_a->_field_left[static_cast<jule::Int>(_1126288e0_i)];
				jule::Ref<_121dedce0_Data> _116521_l = jule::new_ref<_121dedce0_Data>();
				jule::Ref<_121dedce0_Data> _116621_r = _114317_r[static_cast<jule::Int>(_1126288e0_i)];
				if ((!(_111613f20_is_ignore_ident(_116421_lexpr->_field_ident))) && ((!(_113746_a->_field_declarative)) || (!(this->self->_method_is_new_assign_ident(_116421_lexpr->_field_ident))))) {
					_116521_l=this->self->_field_s->_method_eval(_116421_lexpr->_field_expr,this->self);
					if ((!(jule::real(_116521_l)))) {
						goto _iter_next_4638998608;
					}
				}
				this->self->_method___process_end_part_of_multi_assign(_115517_st,_113746_a,_116421_lexpr,_116521_l,_116621_r);
			}
			_iter_next_4638998608:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1126288e0_i; goto _iter_begin_4638998608; }
			_iter_end_4638998608:;
		}
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_115517_st));
}



inline void _1126288e0_ScopeChecker::_method_check_multi_assign(jule::Ref<_111612b20_AssignSt> _118142_a) {
	{
		auto _match_expr{ _118142_a->_field_right->_field_kind };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_FnCallExpr>>())) { goto _case_end_4639018976; }
		_case_begin_4639018976:;
		{
			this->self->_method_check_ret_multi_assign(_118142_a);
			return;
		}
		goto _match_end_4639017872;
		_case_end_4639018976:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_UnsafeExpr>>())) { goto _case_end_4639019088; }
		_case_begin_4639019088:;
		{
			{
				auto _match_expr{ _118142_a->_field_right->_field_kind.operator jule::Ref<_111612b20_UnsafeExpr>()->_field_expr };
				if (!(_match_expr.type_is<jule::Ref<_111612b20_FnCallExpr>>())) { goto _case_end_4639024032; }
				_case_begin_4639024032:;
				{
					this->self->_method_check_ret_multi_assign(_118142_a);
					return;
				}
				goto _match_end_4639020864;
				_case_end_4639024032:;
				_match_end_4639020864:;
			}
		}
		goto _match_end_4639017872;
		_case_end_4639019088:;
		_match_end_4639017872:;
	}
	jule::Slice<jule::Any> _119517_right = _1126288e0_get_expr_models(_118142_a->_field_right->_field_kind);
	{
		if (!((_118142_a->_field_left.len() > _119517_right.len()))) { goto _case_end_4639027680; }
		_case_begin_4639027680:;
		{
			this->self->_field_s->_method_push_err(_118142_a->_field_setter,jule::Str("overflow_multi_assign_idents", 28),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4639027488;
		_case_end_4639027680:;
		if (!((_118142_a->_field_left.len() < _119517_right.len()))) { goto _case_end_4639027792; }
		_case_begin_4639027792:;
		{
			this->self->_field_s->_method_push_err(_118142_a->_field_setter,jule::Str("missing_multi_assign_idents", 27),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4639027488;
		_case_end_4639027792:;
		_match_end_4639027488:;
	}
	jule::Ref<_112673500_TupleExprModel> _120717_right_tuple = jule::new_struct<_112673500_TupleExprModel>(new( std::nothrow ) _112673500_TupleExprModel());
	jule::Ref<_1126288e0_MultiAssign> _120917_st = jule::new_struct<_1126288e0_MultiAssign>(new( std::nothrow ) _1126288e0_MultiAssign(jule::Slice<jule::Any>(),jule::Any(_120717_right_tuple)));
	{
		auto __julec_range_expr = _118142_a->_field_left;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1126288e0_i = 0;
			_iter_begin_4639039056:;
			{
				jule::Ref<_111612b20_AssignLeft> _121421_lexpr = _118142_a->_field_left[static_cast<jule::Int>(_1126288e0_i)];
				jule::Ref<_121dedce0_Data> _121521_l = jule::new_ref<_121dedce0_Data>();
				jule::Ref<_121dedce0_Data> _121621_r = jule::new_ref<_121dedce0_Data>();
				if ((!(_111613f20_is_ignore_ident(_121421_lexpr->_field_ident))) && ((!(_118142_a->_field_declarative)) || (!(this->self->_method_is_new_assign_ident(_121421_lexpr->_field_ident))))) {
					_121521_l=this->self->_field_s->_method_eval(_121421_lexpr->_field_expr,this->self);
					if ((!(jule::real(_121521_l)))) {
						goto _iter_next_4639039056;
					}
				}
				if (jule::real(_121521_l)) {
					jule::Ref<_111612b20_Expr> _122625_expr = jule::new_struct<_111612b20_Expr>(new( std::nothrow ) _111612b20_Expr(_118142_a->_field_right->_field_token,_119517_right[static_cast<jule::Int>(_1126288e0_i)]));
					_121621_r=this->self->_field_s->_method_evalp(_122625_expr,this->self,_121521_l->_field_kind);
				} else {
					jule::Ref<_111612b20_Expr> _122925_expr = jule::new_struct<_111612b20_Expr>(new( std::nothrow ) _111612b20_Expr(_118142_a->_field_right->_field_token,_119517_right[static_cast<jule::Int>(_1126288e0_i)]));
					_121621_r=this->self->_field_s->_method_eval(_122925_expr,this->self);
				}
				if ((!(jule::real(_121621_r)))) {
					goto _iter_next_4639039056;
				}
				_120717_right_tuple->_field_datas=append(_120717_right_tuple->_field_datas,jule::Slice<jule::Ref<_121dedce0_Data>>({_121621_r}));
				this->self->_method___process_end_part_of_multi_assign(_120917_st,_118142_a,_121421_lexpr,_121521_l,_121621_r);
			}
			_iter_next_4639039056:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1126288e0_i; goto _iter_begin_4639039056; }
			_iter_end_4639039056:;
		}
	}
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_120917_st));
}



inline void _1126288e0_ScopeChecker::_method_check_assign_st(jule::Ref<_111612b20_AssignSt> _124439_a) {
	if (_111613f20_is_postfix_op(_124439_a->_field_setter._field_kind)) {
		this->self->_method_check_postfix(_124439_a);
		return;
	}
	if ((_124439_a->_field_left.len() == 1LL) && (!(_124439_a->_field_declarative))) {
		this->self->_method_check_single_assign(_124439_a);
		return;
	}
	this->self->_method_check_multi_assign(_124439_a);
}



inline jule::Ref<_1126288e0_Scope> _1126288e0_ScopeChecker::_method_check_case_scope(jule::Ref<_1126288e0_Case> _125836_c,jule::Ref<_111612b20_ScopeTree> _125850_tree) {
	jule::Ref<_1126288e0_ScopeChecker> _125917_ssc = this->self->_method_new_child_checker();
	_125917_ssc->_field_cse=((jule::Uintptr)((_125836_c).alloc));
	return this->self->_method_check_child_sc(_125850_tree,_125917_ssc);
}



inline jule::Ref<_1126288e0_Case> _1126288e0_ScopeChecker::_method_check_case(jule::Ref<_1126288e0_Match> _126434_m,jule::Int _126445_i,jule::Ref<_111612b20_Case> _126457_c,jule::Ref<_121dedce0_Data> _126487_expr) {
	jule::Ref<_1126288e0_Case> _126517__case = _126434_m->_field_cases[static_cast<jule::Int>(_126445_i)];
	_126517__case->_field_exprs=jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_126457_c->_field_exprs.len())));
	{
		auto __julec_range_expr = _126457_c->_field_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1126288e0_i = 0;
			jule::Ref<_111612b20_Expr> _1126288e0_e = *__julec_range_begin;
			_iter_begin_4639093360:;
			{
				if (_126434_m->_field_type_match) {
					jule::Ref<_121dedce0_Eval> _127025_eval = jule::new_struct<_121dedce0_Eval>(new( std::nothrow ) _121dedce0_Eval(this->self->_field_s,this->self,jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Ref<_1320e22c0_Var>()));
					jule::Ref<_121dedce0_Data> _127525_d = _127025_eval->_method_eval(_1126288e0_e);
					if (jule::real(_127525_d)) {
						_126517__case->_field_exprs[static_cast<jule::Int>(_1126288e0_i)]=jule::Any(_127525_d->_field_kind);
						if (_1126288e0_count_match_type(_126434_m,_127525_d->_field_kind) > 1LL) {
							this->self->_field_s->_method_push_err(_1126288e0_e->_field_token,jule::Str("duplicate_match_type", 20),jule::Slice<jule::Any>({jule::Any(_127525_d->_field_kind->_method_to_str())}));
						}
					}
					jule::Ref<_11209e2e0_Trait> _128321_trt = _126487_expr->_field_kind->_method_trt();
					if (jule::real(_128321_trt)) {
						this->self->_field_s->_method_check_type_compatibility(_126487_expr->_field_kind,_127525_d->_field_kind,_1126288e0_e->_field_token,false);
					}
					goto _iter_next_4639093360;
				}
				jule::Ref<_121dedce0_Data> _129121_d = this->self->_field_s->_method_eval(_1126288e0_e,this->self);
				if ((!(jule::real(_129121_d)))) {
					goto _iter_next_4639093360;
				}
				_126517__case->_field_exprs[static_cast<jule::Int>(_1126288e0_i)]=_129121_d->_field_model;
				_121807de0_AssignTypeChecker _129821_checker = _121807de0_AssignTypeChecker(this->self->_field_s,_126487_expr->_field_kind,_129121_d,_1126288e0_e->_field_token,true);
				_129821_checker._method_check();
			}
			_iter_next_4639093360:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1126288e0_i; _1126288e0_e = *__julec_range_begin; goto _iter_begin_4639093360; }
			_iter_end_4639093360:;
		}
	}
	_126517__case->_field_scope=this->self->_method_check_case_scope(_126517__case,_126457_c->_field_scope);
	return _126517__case;
}



inline void _1126288e0_ScopeChecker::_method_check_cases(jule::Ref<_111612b20_MatchCase> _131235_m,jule::Ref<_1126288e0_Match> _131270_rm,jule::Ref<_121dedce0_Data> _131286_expr) {
	_131270_rm->_field_cases=jule::Slice<jule::Ref<_1126288e0_Case>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_131235_m->_field_cases.len())));
	{
		auto __julec_range_expr = _131235_m->_field_cases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1126288e0_i = 0;
			_iter_begin_4639135616:;
			{
				jule::Ref<_1126288e0_Case> _131521__case = jule::new_struct<_1126288e0_Case>(new( std::nothrow ) _1126288e0_Case(_131270_rm,jule::Ref<_1126288e0_Scope>(),jule::Slice<jule::Any>(),jule::Ref<_1126288e0_Case>()));
				if (_1126288e0_i > 0LL) {
					_131270_rm->_field_cases[static_cast<jule::Int>(_1126288e0_i - 1LL)]->_field_next=_131521__case;
				}
				_131270_rm->_field_cases[static_cast<jule::Int>(_1126288e0_i)]=_131521__case;
			}
			_iter_next_4639135616:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1126288e0_i; goto _iter_begin_4639135616; }
			_iter_end_4639135616:;
		}
	}
	if (jule::real(_131270_rm->_field_default) && (_131235_m->_field_cases.len() > 0LL)) {
		_131270_rm->_field_cases[static_cast<jule::Int>(_131270_rm->_field_cases.len() - 1LL)]->_field_next=_131270_rm->_field_default;
	}
	{
		auto __julec_range_expr = _131235_m->_field_cases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1126288e0_i = 0;
			jule::Ref<_111612b20_Case> _1126288e0_c = *__julec_range_begin;
			_iter_begin_4639146848:;
			{
				this->self->_method_check_case(_131270_rm,_1126288e0_i,_1126288e0_c,_131286_expr);
			}
			_iter_next_4639146848:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1126288e0_i; _1126288e0_c = *__julec_range_begin; goto _iter_begin_4639146848; }
			_iter_end_4639146848:;
		}
	}
}



inline jule::Ref<_1126288e0_Case> _1126288e0_ScopeChecker::_method_check_default(jule::Ref<_1126288e0_Match> _133537_m,jule::Ref<_111612b20_Else> _133552_d) {
	jule::Ref<_1126288e0_Case> _133617_def = jule::new_struct<_1126288e0_Case>(new( std::nothrow ) _1126288e0_Case(_133537_m,jule::Ref<_1126288e0_Scope>(),jule::Slice<jule::Any>(),jule::Ref<_1126288e0_Case>()));
	_133617_def->_field_scope=this->self->_method_check_case_scope(_133617_def,_133552_d->_field_scope);
	return _133617_def;
}



inline void _1126288e0_ScopeChecker::_method_check_type_match(jule::Ref<_111612b20_MatchCase> _134340_m) {
	jule::Ref<_121dedce0_Data> _134417_d = this->self->_field_s->_method_eval(_134340_m->_field_expr,this->self);
	if ((!(jule::real(_134417_d)))) {
		return;
	}
	if ((!((jule::real(_134417_d->_field_kind->_method_prim()) && _134417_d->_field_kind->_method_prim()->_method_is_any()) || jule::real(_134417_d->_field_kind->_method_trt())))) {
		this->self->_field_s->_method_push_err(_134340_m->_field_expr->_field_token,jule::Str("type_case_has_not_valid_expr", 28),jule::Slice<jule::Any>({}));
		return;
	}
	jule::Ref<_1126288e0_Match> _135417_tm = jule::new_struct<_1126288e0_Match>(new( std::nothrow ) _1126288e0_Match(_134417_d,true,jule::Slice<jule::Ref<_1126288e0_Case>>(),jule::Ref<_1126288e0_Case>()));
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_135417_tm));
	if (jule::real(_134340_m->_field_default)) {
		_135417_tm->_field_default=this->self->_method_check_default(_135417_tm,_134340_m->_field_default);
	}
	this->self->_method_check_cases(_134340_m,_135417_tm,_134417_d);
}



inline void _1126288e0_ScopeChecker::_method_check_common_match(jule::Ref<_111612b20_MatchCase> _136742_m) {
	jule::Ref<_121dedce0_Data> _136817_d = jule::new_ref<_121dedce0_Data>();
	if ((!(jule::real(_136742_m->_field_expr)))) {
		_136817_d=jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1131530d0_Const::_static_method_new_bool(true)));
		_136817_d->_field_model=jule::Any(_136817_d->_field_constant);
	} else {
		_136817_d=this->self->_field_s->_method_eval(_136742_m->_field_expr,this->self);
		if ((!(jule::real(_136817_d)))) {
			return;
		}
	}
	jule::Ref<_1126288e0_Match> _138217_mc = jule::new_struct<_1126288e0_Match>(new( std::nothrow ) _1126288e0_Match(_136817_d,jule::Bool(),jule::Slice<jule::Ref<_1126288e0_Case>>(),jule::Ref<_1126288e0_Case>()));
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_138217_mc));
	if (jule::real(_136742_m->_field_default)) {
		_138217_mc->_field_default=this->self->_method_check_default(_138217_mc,_136742_m->_field_default);
	}
	this->self->_method_check_cases(_136742_m,_138217_mc,_136817_d);
}



inline void _1126288e0_ScopeChecker::_method_check_match(jule::Ref<_111612b20_MatchCase> _139435_m) {
	if (_139435_m->_field_type_match) {
		this->self->_method_check_type_match(_139435_m);
		return;
	}
	this->self->_method_check_common_match(_139435_m);
}



inline void _1126288e0_ScopeChecker::_method_check_fall(jule::Ref<_111612b20_FallSt> _140229_f) {
	if (((*this)._field_cse == 0LL) || (((*this)._field_scope->_field_stmts._method_len() + 1LL) < (*this)._field_scope->_field_stmts._method_len())) {
		(*this)._field_s->_method_push_err(_140229_f->_field_token,jule::Str("fallthrough_wrong_use", 21),jule::Slice<jule::Any>({}));
		return;
	}
	_1126288e0_Case* _140817__case = ((_1126288e0_Case*)((*this)._field_cse));
	if ((!(jule::real(_140817__case->_field_next)))) {
		(*this)._field_s->_method_push_err(_140229_f->_field_token,jule::Str("fallthrough_into_final_case", 27),jule::Slice<jule::Any>({}));
		return;
	}
	(*this)._field_scope->_field_stmts._method_push(jule::Any(jule::new_struct<_1126288e0_FallSt>(new( std::nothrow ) _1126288e0_FallSt(static_cast<jule::Uintptr>(((jule::Uintptr)((_140817__case->_field_next).alloc)))))));
}



inline jule::Ref<_1126288e0_BreakSt> _1126288e0_ScopeChecker::_method_check_break_with_label(jule::Ref<_111612b20_BreakSt> _141942_b) {
	jule::Ref<_1126288e0_BreakSt> _142017_brk = this->self->_method_check_plain_break(_141942_b);
	if ((!(jule::real(_142017_brk)))) {
		return jule::new_ref<_1126288e0_BreakSt>();
	}
	_142017_brk->_field_it=0LL;
	_142017_brk->_field_mtch=0LL;
	jule::Ref<_1126288e0_ScopeLabel> _143017_label = _1126288e0_find_label_parent(_141942_b->_field_label._field_kind,this->self->_field_parent);
	if ((!(jule::real(_143017_label)))) {
		this->self->_field_s->_method_push_err(_141942_b->_field_label,jule::Str("label_not_exist", 15),jule::Slice<jule::Any>({jule::Any(_141942_b->_field_label._field_kind)}));
		return jule::new_ref<_1126288e0_BreakSt>();
	}
	_143017_label->_field_used=true;
	if ((_143017_label->_field_pos + 1LL) >= _143017_label->_field_scope->_field_scope->_field_stmts._method_len()) {
		this->self->_field_s->_method_push_err(_141942_b->_field_label,jule::Str("invalid_label", 13),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1126288e0_BreakSt>();
	}
	jule::Int _144313_i = _143017_label->_field_pos + 1LL;
	if (_144313_i >= _143017_label->_field_scope->_field_scope->_field_stmts._method_len()) {
		this->self->_field_s->_method_push_err(_141942_b->_field_label,jule::Str("invalid_label", 13),jule::Slice<jule::Any>({}));
	} else {
		jule::Any _144721_st = _143017_label->_field_scope->_field_scope->_field_stmts._method_at(_144313_i);
		{
			auto _match_expr{ _144721_st };
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_InfIter>>())) { goto _case_end_4639248496; }
			_case_begin_4639248496:;
			{
				_142017_brk->_field_it=((jule::Uintptr)((_144721_st.operator jule::Ref<_1126288e0_InfIter>()).alloc));
			}
			goto _match_end_4639241440;
			_case_end_4639248496:;
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_RangeIter>>())) { goto _case_end_4639247600; }
			_case_begin_4639247600:;
			{
				_142017_brk->_field_it=((jule::Uintptr)((_144721_st.operator jule::Ref<_1126288e0_RangeIter>()).alloc));
			}
			goto _match_end_4639241440;
			_case_end_4639247600:;
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_WhileIter>>())) { goto _case_end_4639247712; }
			_case_begin_4639247712:;
			{
				_142017_brk->_field_it=((jule::Uintptr)((_144721_st.operator jule::Ref<_1126288e0_WhileIter>()).alloc));
			}
			goto _match_end_4639241440;
			_case_end_4639247712:;
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_Match>>())) { goto _case_end_4639247824; }
			_case_begin_4639247824:;
			{
				_142017_brk->_field_mtch=((jule::Uintptr)((_144721_st.operator jule::Ref<_1126288e0_Match>()).alloc));
			}
			goto _match_end_4639241440;
			_case_end_4639247824:;
			_case_begin_4639247296:;
			{
				this->self->_field_s->_method_push_err(_141942_b->_field_label,jule::Str("invalid_label", 13),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4639241440;
			_case_end_4639247296:;
			_match_end_4639241440:;
		}
	}
	if (_142017_brk->_field_it != 0LL) {
		if ((!(this->self->_method_check_valid_break_label(_142017_brk->_field_it)))) {
			this->self->_field_s->_method_push_err(_141942_b->_field_label,jule::Str("invalid_label", 13),jule::Slice<jule::Any>({}));
		}
	}
	if (_142017_brk->_field_mtch != 0LL) {
		if ((!(this->self->_method_check_valid_break_label(_142017_brk->_field_mtch)))) {
			this->self->_field_s->_method_push_err(_141942_b->_field_label,jule::Str("invalid_label", 13),jule::Slice<jule::Any>({}));
		}
	}
	return _142017_brk;
}



inline jule::Ref<_1126288e0_BreakSt> _1126288e0_ScopeChecker::_method_check_plain_break(jule::Ref<_111612b20_BreakSt> _147237_b) {
	jule::Ref<_1126288e0_ScopeChecker> _147317_scope = this->self;
	_julec_label_iter:;
	{
		if (!(((((_147317_scope->_field_it == 0LL) && (_147317_scope->_field_cse == 0LL)) && jule::real(_147317_scope->_field_parent)) && (!(jule::real(_147317_scope->_field_owner)))))) { goto _case_end_4639271376; }
		_case_begin_4639271376:;
		{
			_147317_scope=_147317_scope->_field_parent;
			goto _julec_label_iter;
		}
		goto _match_end_4639271152;
		_case_end_4639271376:;
		if (!((_147317_scope->_field_it != 0LL))) { goto _case_end_4639271488; }
		_case_begin_4639271488:;
		{
			return jule::new_struct<_1126288e0_BreakSt>(new( std::nothrow ) _1126288e0_BreakSt(_147317_scope->_field_it,jule::Uintptr()));
		}
		goto _match_end_4639271152;
		_case_end_4639271488:;
		if (!((_147317_scope->_field_cse != 0LL))) { goto _case_end_4639271600; }
		_case_begin_4639271600:;
		{
			return jule::new_struct<_1126288e0_BreakSt>(new( std::nothrow ) _1126288e0_BreakSt(jule::Uintptr(),static_cast<jule::Uintptr>(((jule::Uintptr)((((_1126288e0_Case*)(_147317_scope->_field_cse))->_field_owner).alloc)))));
		}
		goto _match_end_4639271152;
		_case_end_4639271600:;
		_match_end_4639271152:;
	}
	this->self->_field_s->_method_push_err(_147237_b->_field_token,jule::Str("break_at_out_of_valid_scope", 27),jule::Slice<jule::Any>({}));
	return jule::new_ref<_1126288e0_BreakSt>();
}



inline void _1126288e0_ScopeChecker::_method_check_break(jule::Ref<_111612b20_BreakSt> _149131_b) {
	if (_149131_b->_field_label._field_id != 0LLU) {
		jule::Ref<_1126288e0_BreakSt> _149321_brk = this->self->_method_check_break_with_label(_149131_b);
		this->self->_field_scope->_field_stmts._method_push(jule::Any(_149321_brk));
		return;
	}
	jule::Ref<_1126288e0_BreakSt> _149817_brk = this->self->_method_check_plain_break(_149131_b);
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_149817_brk));
}



inline void _1126288e0_ScopeChecker::_method_check_ret(jule::Ref<_111612b20_RetSt> _150233_r) {
	jule::Ref<_1126288e0_RetSt> _150317_rt = jule::new_struct<_1126288e0_RetSt>(new( std::nothrow ) _1126288e0_RetSt());
	this->self->_field_scope->_field_stmts._method_push(jule::Any(_150317_rt));
	jule::Ref<_121807de0_RetTypeChecker> _150617_rtc = jule::new_struct<_121807de0_RetTypeChecker>(new( std::nothrow ) _121807de0_RetTypeChecker(this->self,this->self->_method_get_root()->_field_owner,jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Any>(),jule::Slice<jule::Ref<_1320e22c0_Var>>(),_150233_r->_field_token,jule::Any()));
	jule::Bool _151113_ok = _150617_rtc->_method_check(_150233_r->_field_expr);
	if ((!(_151113_ok))) {
		return;
	}
	if ((!(jule::real(_150233_r->_field_expr))) && (_150617_rtc->_field_vars.len() == 0LL)) {
		return;
	}
	_150317_rt->_field_vars=_150617_rtc->_field_vars;
	if (jule::real(_150233_r->_field_expr)) {
		_150317_rt->_field_expr=_150617_rtc->_field_model;
	}
}



inline void _1126288e0_ScopeChecker::_method_check_node(jule::Any _152734_node) {
	{
		auto _match_expr{ _152734_node };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_Comment>>())) { goto _case_end_4639321152; }
		_case_begin_4639321152:;
		{
			goto _match_end_4639319584;
		}
		goto _match_end_4639319584;
		_case_end_4639321152:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_ScopeTree>>())) { goto _case_end_4639321264; }
		_case_begin_4639321264:;
		{
			this->self->_method_check_anon_scope(_152734_node.operator jule::Ref<_111612b20_ScopeTree>());
		}
		goto _match_end_4639319584;
		_case_end_4639321264:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_VarDecl>>())) { goto _case_end_4639321376; }
		_case_begin_4639321376:;
		{
			this->self->_method_check_var_decl(_152734_node.operator jule::Ref<_111612b20_VarDecl>());
		}
		goto _match_end_4639319584;
		_case_end_4639321376:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_TypeAliasDecl>>())) { goto _case_end_4639320448; }
		_case_begin_4639320448:;
		{
			this->self->_method_check_type_alias_decl(_152734_node.operator jule::Ref<_111612b20_TypeAliasDecl>());
		}
		goto _match_end_4639319584;
		_case_end_4639320448:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_Expr>>())) { goto _case_end_4639320560; }
		_case_begin_4639320560:;
		{
			this->self->_method_check_expr(_152734_node.operator jule::Ref<_111612b20_Expr>());
		}
		goto _match_end_4639319584;
		_case_end_4639320560:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_Conditional>>())) { goto _case_end_4639320672; }
		_case_begin_4639320672:;
		{
			this->self->_method_check_conditional(_152734_node.operator jule::Ref<_111612b20_Conditional>());
		}
		goto _match_end_4639319584;
		_case_end_4639320672:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_Iter>>())) { goto _case_end_4639320784; }
		_case_begin_4639320784:;
		{
			this->self->_method_check_iter(_152734_node.operator jule::Ref<_111612b20_Iter>());
		}
		goto _match_end_4639319584;
		_case_end_4639320784:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_ContSt>>())) { goto _case_end_4639322416; }
		_case_begin_4639322416:;
		{
			this->self->_method_check_cont(_152734_node.operator jule::Ref<_111612b20_ContSt>());
		}
		goto _match_end_4639319584;
		_case_end_4639322416:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_LabelSt>>())) { goto _case_end_4639322528; }
		_case_begin_4639322528:;
		{
			this->self->_method_check_label(_152734_node.operator jule::Ref<_111612b20_LabelSt>());
		}
		goto _match_end_4639319584;
		_case_end_4639322528:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_GotoSt>>())) { goto _case_end_4639322640; }
		_case_begin_4639322640:;
		{
			this->self->_method_push_goto(_152734_node.operator jule::Ref<_111612b20_GotoSt>());
		}
		goto _match_end_4639319584;
		_case_end_4639322640:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_AssignSt>>())) { goto _case_end_4639322752; }
		_case_begin_4639322752:;
		{
			this->self->_method_check_assign_st(_152734_node.operator jule::Ref<_111612b20_AssignSt>());
		}
		goto _match_end_4639319584;
		_case_end_4639322752:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_MatchCase>>())) { goto _case_end_4639322864; }
		_case_begin_4639322864:;
		{
			this->self->_method_check_match(_152734_node.operator jule::Ref<_111612b20_MatchCase>());
		}
		goto _match_end_4639319584;
		_case_end_4639322864:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_FallSt>>())) { goto _case_end_4639322976; }
		_case_begin_4639322976:;
		{
			this->self->_method_check_fall(_152734_node.operator jule::Ref<_111612b20_FallSt>());
		}
		goto _match_end_4639319584;
		_case_end_4639322976:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_BreakSt>>())) { goto _case_end_4639323088; }
		_case_begin_4639323088:;
		{
			this->self->_method_check_break(_152734_node.operator jule::Ref<_111612b20_BreakSt>());
		}
		goto _match_end_4639319584;
		_case_end_4639323088:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_RetSt>>())) { goto _case_end_4639323200; }
		_case_begin_4639323200:;
		{
			this->self->_method_check_ret(_152734_node.operator jule::Ref<_111612b20_RetSt>());
		}
		goto _match_end_4639319584;
		_case_end_4639323200:;
		_case_begin_4639320096:;
		{
			jule::outln(jule::Str("error <unimplemented scope node>", 32));
		}
		goto _match_end_4639319584;
		_case_end_4639320096:;
		_match_end_4639319584:;
	}
}



inline void _1126288e0_ScopeChecker::_method_check_tree(void) {
	this->self->_field_i=0LL;
	_iter_begin_4639356784:;
	if (!(this->self->_field_i < this->self->_field_tree->_field_stmts.len())) { goto _iter_end_4639356784; }
	{
		this->self->_method_check_node(this->self->_field_tree->_field_stmts[static_cast<jule::Int>(this->self->_field_i)]);
	}
	_iter_next_4639356784:;
	(this->self->_field_i)++;
	goto _iter_begin_4639356784;
	_iter_end_4639356784:;
}



inline void _1126288e0_ScopeChecker::_method_check_same_scope_goto(jule::Ref<_1126288e0_ScopeGoto> _155540_gt,jule::Ref<_1126288e0_ScopeLabel> _155560_label) {
	if (_155560_label->_field_pos < _155540_gt->_field_pos) {
		return;
	}
	jule::Int _156017_i = _155560_label->_field_pos;
	_iter_begin_4639366992:;
	if (!(_156017_i > _155540_gt->_field_pos)) { goto _iter_end_4639366992; }
	{
		jule::Any _156217_s = _155560_label->_field_scope->_field_scope->_field_stmts._method_at(_156017_i);
		if (_1126288e0_st_is_def(_156217_s)) {
			(*this)._field_s->_method_push_err(_155540_gt->_field_gt->_field_token,jule::Str("goto_jumps_declarations", 23),jule::Slice<jule::Any>({jule::Any(_155540_gt->_field_gt->_field_label._field_kind)}));
			goto _iter_end_4639366992;
		}
	}
	_iter_next_4639366992:;
	(_156017_i)--;
	goto _iter_begin_4639366992;
	_iter_end_4639366992:;
}



inline jule::Bool _1126288e0_ScopeChecker::_method_check_label_parents(jule::Ref<_1126288e0_ScopeGoto> _157038_gt,jule::Ref<_1126288e0_ScopeLabel> _157058_label) {
	jule::Ref<_1126288e0_ScopeChecker> _157117_scope = _157058_label->_field_scope;
	_julec_label_parent_scopes:;
	if (jule::real(_157117_scope->_field_parent) && ((_157117_scope->_field_parent).alloc != (_157038_gt->_field_scope).alloc)) {
		_157117_scope=_157117_scope->_field_parent;
		jule::Int _157621_i = 0LL;
		_iter_begin_4639383040:;
		if (!(_157621_i < _157117_scope->_field_scope->_field_stmts._method_len())) { goto _iter_end_4639383040; }
		{
			{
				if (!((_157621_i >= _157058_label->_field_pos))) { goto _case_end_4639384608; }
				_case_begin_4639384608:;
				{
					return true;
				}
				goto _match_end_4639384368;
				_case_end_4639384608:;
				if (!((_1126288e0_st_is_def(_157117_scope->_field_scope->_field_stmts._method_at(_157621_i))))) { goto _case_end_4639384720; }
				_case_begin_4639384720:;
				{
					(*this)._field_s->_method_push_err(_157038_gt->_field_gt->_field_token,jule::Str("goto_jumps_declarations", 23),jule::Slice<jule::Any>({jule::Any(_157038_gt->_field_gt->_field_label._field_kind)}));
					return false;
				}
				goto _match_end_4639384368;
				_case_end_4639384720:;
				_match_end_4639384368:;
			}
		}
		_iter_next_4639383040:;
		(_157621_i)++;
		goto _iter_begin_4639383040;
		_iter_end_4639383040:;
		goto _julec_label_parent_scopes;
	}
	return true;
}



inline void _1126288e0_ScopeChecker::_method_check_goto_scope(jule::Ref<_1126288e0_ScopeGoto> _159439_gt,jule::Ref<_1126288e0_ScopeLabel> _159455_label) {
	jule::Int _159517_i = _159439_gt->_field_pos;
	_iter_begin_4639400576:;
	if (!(_159517_i < _159439_gt->_field_scope->_field_scope->_field_stmts._method_len())) { goto _iter_end_4639400576; }
	{
		{
			if (!((_159517_i >= _159455_label->_field_pos))) { goto _case_end_4639402224; }
			_case_begin_4639402224:;
			{
				return;
			}
			goto _match_end_4639401984;
			_case_end_4639402224:;
			if (!((_1126288e0_st_is_def(_159439_gt->_field_scope->_field_scope->_field_stmts._method_at(_159517_i))))) { goto _case_end_4639402336; }
			_case_begin_4639402336:;
			{
				(*this)._field_s->_method_push_err(_159439_gt->_field_gt->_field_token,jule::Str("goto_jumps_declarations", 23),jule::Slice<jule::Any>({jule::Any(_159439_gt->_field_gt->_field_label._field_kind)}));
				return;
			}
			goto _match_end_4639401984;
			_case_end_4639402336:;
			_match_end_4639401984:;
		}
	}
	_iter_next_4639400576:;
	(_159517_i)++;
	goto _iter_begin_4639400576;
	_iter_end_4639400576:;
}



inline void _1126288e0_ScopeChecker::_method_check_diff_scope_goto(jule::Ref<_1126288e0_ScopeGoto> _160844_gt,jule::Ref<_1126288e0_ScopeLabel> _160864_label) {
	{
		if (!(((_160864_label->_field_scope->_field_child_index > 0LL) && (_160844_gt->_field_scope->_field_child_index == 0LL)))) { goto _case_end_4639414480; }
		_case_begin_4639414480:;
		{
			if ((!((*this)._method_check_label_parents(_160844_gt,_160864_label)))) {
				return;
			}
		}
		goto _match_end_4639414224;
		_case_end_4639414480:;
		if (!((_160864_label->_field_scope->_field_child_index < _160844_gt->_field_scope->_field_child_index))) { goto _case_end_4639414592; }
		_case_begin_4639414592:;
		{
			return;
		}
		goto _match_end_4639414224;
		_case_end_4639414592:;
		_match_end_4639414224:;
	}
	jule::Ref<_1126288e0_ScopeChecker> _161917_scope = _160864_label->_field_scope;
	jule::Int _162017_i = _160864_label->_field_pos - 1LL;
	_iter_begin_4639421504:;
	if (!(_162017_i >= 0LL)) { goto _iter_end_4639421504; }
	{
		jule::Any _162217_s = _161917_scope->_field_scope->_field_stmts._method_at(_162017_i);
		{
			auto _match_expr{ _162217_s };
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_Scope>>())) { goto _case_end_4639426704; }
			_case_begin_4639426704:;
			{
				if (_162017_i <= _160844_gt->_field_pos) {
					return;
				}
			}
			goto _match_end_4639425600;
			_case_end_4639426704:;
			_match_end_4639425600:;
		}
		if (_1126288e0_st_is_def(_162217_s)) {
			(*this)._field_s->_method_push_err(_160844_gt->_field_gt->_field_token,jule::Str("goto_jumps_declarations", 23),jule::Slice<jule::Any>({jule::Any(_160844_gt->_field_gt->_field_label._field_kind)}));
			goto _iter_end_4639421504;
		}
	}
	_iter_next_4639421504:;
	(_162017_i)--;
	goto _iter_begin_4639421504;
	_iter_end_4639421504:;
	if (jule::real(_161917_scope->_field_parent) && ((_161917_scope->_field_parent).alloc != (_160844_gt->_field_scope).alloc)) {
		(*this)._method_check_label_parents(_160844_gt,_160864_label);
	} else {
		(*this)._method_check_goto_scope(_160844_gt,_160864_label);
	}
}



inline void _1126288e0_ScopeChecker::_method_check_goto(jule::Ref<_1126288e0_ScopeGoto> _164433_gt,jule::Ref<_1126288e0_ScopeLabel> _164453_label) {
	{
		if (!(((_164433_gt->_field_scope).alloc == (_164453_label->_field_scope).alloc))) { goto _case_end_4639441120; }
		_case_begin_4639441120:;
		{
			(*this)._method_check_same_scope_goto(_164433_gt,_164453_label);
		}
		goto _match_end_4639440864;
		_case_end_4639441120:;
		if (!((_164453_label->_field_scope->_field_child_index > 0LL))) { goto _case_end_4639441232; }
		_case_begin_4639441232:;
		{
			(*this)._method_check_diff_scope_goto(_164433_gt,_164453_label);
		}
		goto _match_end_4639440864;
		_case_end_4639441232:;
		_match_end_4639440864:;
	}
}



inline void _1126288e0_ScopeChecker::_method_check_gotos(void) {
	{
		auto __julec_range_expr = (*this)._field_gotos.get();
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1126288e0_ScopeGoto> _1126288e0_gt = *__julec_range_begin;
			_iter_begin_4639448064:;
			{
				jule::Ref<_1126288e0_ScopeLabel> _165621_label = (*this)._method_find_label_all(_1126288e0_gt->_field_gt->_field_label._field_kind);
				if ((!(jule::real(_165621_label)))) {
					(*this)._field_s->_method_push_err(_1126288e0_gt->_field_gt->_field_token,jule::Str("label_not_exist", 15),jule::Slice<jule::Any>({jule::Any(_1126288e0_gt->_field_gt->_field_label._field_kind)}));
					goto _iter_next_4639448064;
				}
				_165621_label->_field_used=true;
				(*this)._method_check_goto(_1126288e0_gt,_165621_label);
			}
			_iter_next_4639448064:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1126288e0_gt = *__julec_range_begin; goto _iter_begin_4639448064; }
			_iter_end_4639448064:;
		}
	}
}



inline void _1126288e0_ScopeChecker::_method_check_labels(void) {
	{
		auto __julec_range_expr = (*this)._field_labels.get();
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1126288e0_ScopeLabel> _1126288e0_l = *__julec_range_begin;
			_iter_begin_4639460896:;
			{
				if ((!(_1126288e0_l->_field_used))) {
					(*this)._field_s->_method_push_err(_1126288e0_l->_field_token,jule::Str("declared_but_not_used", 21),jule::Slice<jule::Any>({jule::Any(_1126288e0_l->_field_label->_field_ident)}));
				}
			}
			_iter_next_4639460896:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1126288e0_l = *__julec_range_begin; goto _iter_begin_4639460896; }
			_iter_end_4639460896:;
		}
	}
}



inline void _1126288e0_ScopeChecker::_method_check_vars(void) {
	jule::Int _167617_i = 0LL;
	_iter_begin_4639462032:;
	if (!(_167617_i < (*this)._field_table->_field_vars._method_len())) { goto _iter_end_4639462032; }
	{
		jule::Ref<_1320e22c0_Var> _167817_v = (*this)._field_table->_field_vars._method_at(_167617_i);
		if ((((!(_167817_v->_field_used)) && (!(_111613f20_is_ignore_ident(_167817_v->_field_ident)))) && (!(_111613f20_is_anon_ident(_167817_v->_field_ident)))) && (_167817_v->_field_ident != jule::Str("self", 4))) {
			(*this)._field_s->_method_push_err(_167817_v->_field_token,jule::Str("declared_but_not_used", 21),jule::Slice<jule::Any>({jule::Any(_167817_v->_field_ident)}));
		}
	}
	_iter_next_4639462032:;
	(_167617_i)++;
	goto _iter_begin_4639462032;
	_iter_end_4639462032:;
}



inline void _1126288e0_ScopeChecker::_method_check_aliases(void) {
	jule::Int _168617_i = 0LL;
	_iter_begin_4639478928:;
	if (!(_168617_i < (*this)._field_table->_field_type_aliases._method_len())) { goto _iter_end_4639478928; }
	{
		jule::Ref<_1217f7750_TypeAlias> _168817_a = (*this)._field_table->_field_type_aliases._method_at(_168617_i);
		if (((!(_168817_a->_field_used)) && (!(_111613f20_is_ignore_ident(_168817_a->_field_ident)))) && (!(_111613f20_is_anon_ident(_168817_a->_field_ident)))) {
			(*this)._field_s->_method_push_err(_168817_a->_field_token,jule::Str("declared_but_not_used", 21),jule::Slice<jule::Any>({jule::Any(_168817_a->_field_ident)}));
		}
	}
	_iter_next_4639478928:;
	(_168617_i)++;
	goto _iter_begin_4639478928;
	_iter_end_4639478928:;
}



inline void _1126288e0_ScopeChecker::_method_check(jule::Ref<_111612b20_ScopeTree> _169629_tree,jule::Ref<_1126288e0_Scope> _169651_s) {
	_169651_s->_field_deferred=_169629_tree->_field_deferred;
	_169651_s->_field_unsafety=_169629_tree->_field_unsafety;
	jule::I64 _170013_errors = this->self->_field_s->_field_errors.len();
	this->self->_field_tree=_169629_tree;
	this->self->_field_scope=_169651_s;
	this->self->_method_check_tree();
	if (_170013_errors == this->self->_field_s->_field_errors.len()) {
		this->self->_method_check_vars();
		this->self->_method_check_aliases();
	}
	if (this->self->_method_is_root()) {
		this->self->_method_check_gotos();
		this->self->_method_check_labels();
	}
}



inline jule::Ref<_1126288e0_ScopeChecker> _1126288e0_ScopeChecker::_method_new_child_checker(void) {
	jule::Ref<_1126288e0_ScopeChecker> _172017_base = _1126288e0_new_scope_checker_base(this->self->_field_s,jule::new_ref<_112446fb0_FnIns>());
	_172017_base->_field_parent=this->self;
	_172017_base->_field_labels=this->self->_field_labels;
	_172017_base->_field_gotos=this->self->_field_gotos;
	_172017_base->_field_child_index=this->self->_field_child_index + 1LL;
	return _172017_base;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_ScopeChecker &_Src) {
	_Stream << "ScopeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "child_index:" << _Src._field_child_index << ", ";
	_Stream << "table:" << _Src._field_table << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "tree:" << _Src._field_tree << ", ";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "cse:" << _Src._field_cse << ", ";
	_Stream << "labels:" << _Src._field_labels << ", ";
	_Stream << "gotos:" << _Src._field_gotos << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_BinopExprModel &_Src) {
	_Stream << "BinopExprModel{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_UnaryExprModel &_Src) {
	_Stream << "UnaryExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_GetRefPtrExprModel &_Src) {
	_Stream << "GetRefPtrExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_StructArgExprModel &_Src) {
	_Stream << "StructArgExprModel{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_StructLitExprModel &_Src) {
	_Stream << "StructLitExprModel{";
	_Stream << "strct:" << _Src._field_strct << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_AllocStructLitExprModel &_Src) {
	_Stream << "AllocStructLitExprModel{";
	_Stream << "lit:" << _Src._field_lit;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_CastingExprModel &_Src) {
	_Stream << "CastingExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_FnCallExprModel &_Src) {
	_Stream << "FnCallExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "is_co:" << _Src._field_is_co << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_SliceExprModel &_Src) {
	_Stream << "SliceExprModel{";
	_Stream << "elem_kind:" << _Src._field_elem_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_IndexigExprModel &_Src) {
	_Stream << "IndexigExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_AnonFnExprModel &_Src) {
	_Stream << "AnonFnExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "global:" << _Src._field_global;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_KeyValPairExprModel &_Src) {
	_Stream << "KeyValPairExprModel{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_MapExprModel &_Src) {
	_Stream << "MapExprModel{";
	_Stream << "key_kind:" << _Src._field_key_kind << ", ";
	_Stream << "val_kind:" << _Src._field_val_kind << ", ";
	_Stream << "entries:" << _Src._field_entries;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_SlicingExprModel &_Src) {
	_Stream << "SlicingExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_TraitSubIdentExprModel &_Src) {
	_Stream << "TraitSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_StructSubIdentExprModel &_Src) {
	_Stream << "StructSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "method:" << _Src._field_method << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_StructStaticIdentExprModel &_Src) {
	_Stream << "StructStaticIdentExprModel{";
	_Stream << "structure:" << _Src._field_structure << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "method:" << _Src._field_method;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_ArrayExprModel &_Src) {
	_Stream << "ArrayExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_CommonIdentExprModel &_Src) {
	_Stream << "CommonIdentExprModel{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_CommonSubIdentExprModel &_Src) {
	_Stream << "CommonSubIdentExprModel{";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_TupleExprModel &_Src) {
	_Stream << "TupleExprModel{";
	_Stream << "datas:" << _Src._field_datas;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_BuiltinOutCallExprModel &_Src) {
	_Stream << "BuiltinOutCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_BuiltinOutlnCallExprModel &_Src) {
	_Stream << "BuiltinOutlnCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_BuiltinCloneCallExprModel &_Src) {
	_Stream << "BuiltinCloneCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_BuiltinNewCallExprModel &_Src) {
	_Stream << "BuiltinNewCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "init:" << _Src._field_init;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_BuiltinRealCallExprModel &_Src) {
	_Stream << "BuiltinRealCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_BuiltinDropCallExprModel &_Src) {
	_Stream << "BuiltinDropCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_BuiltinPanicCallExprModel &_Src) {
	_Stream << "BuiltinPanicCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_BuiltinMakeCallExprModel &_Src) {
	_Stream << "BuiltinMakeCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "len:" << _Src._field_len << ", ";
	_Stream << "cap:" << _Src._field_cap;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_BuiltinErrorTraitSubIdentExprModel &_Src) {
	_Stream << "BuiltinErrorTraitSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_SizeofExprModel &_Src) {
	_Stream << "SizeofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_AlignofExprModel &_Src) {
	_Stream << "AlignofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_RuneExprModel &_Src) {
	_Stream << "RuneExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112673500_ExplicitDerefExprModel &_Src) {
	_Stream << "ExplicitDerefExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_11265fb90_ImportInfo> _11265fb90_Package::_method_find_package(jule::Str ) {
	return jule::new_ref<_11265fb90_ImportInfo>();
}



inline jule::Ref<_11265fb90_ImportInfo> _11265fb90_Package::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)> ) {
	return jule::new_ref<_11265fb90_ImportInfo>();
}



inline jule::Ref<_1320e22c0_Var> _11265fb90_Package::_method_find_var(jule::Str _26331_ident,jule::Bool _26343_cpp_linked) {
	return _11265fb90_find_var_in_package((*this)._field_files,_26331_ident,_26343_cpp_linked);
}



inline jule::Ref<_1217f7750_TypeAlias> _11265fb90_Package::_method_find_type_alias(jule::Str _26938_ident,jule::Bool _26950_cpp_linked) {
	return _11265fb90_find_type_alias_in_package((*this)._field_files,_26938_ident,_26950_cpp_linked);
}



inline jule::Ref<_11209db80_Struct> _11265fb90_Package::_method_find_struct(jule::Str _27534_ident,jule::Bool _27546_cpp_linked) {
	return _11265fb90_find_struct_in_package((*this)._field_files,_27534_ident,_27546_cpp_linked);
}



inline jule::Ref<_112446fb0_Fn> _11265fb90_Package::_method_find_fn(jule::Str _28130_ident,jule::Bool _28142_cpp_linked) {
	return _11265fb90_find_fn_in_package((*this)._field_files,_28130_ident,_28142_cpp_linked);
}



inline jule::Ref<_11209e2e0_Trait> _11265fb90_Package::_method_find_trait(jule::Str _28733_ident) {
	return _11265fb90_find_trait_in_package((*this)._field_files,_28733_ident);
}



inline jule::Ref<_11261eaf0_Enum> _11265fb90_Package::_method_find_enum(jule::Str _29332_ident) {
	return _11265fb90_find_enum_in_package((*this)._field_files,_29332_ident);
}







std::ostream &operator<<(std::ostream &_Stream, const _11265fb90_Package &_Src) {
	_Stream << "Package{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_11265fb90_ImportInfo> _11262c360_Sema::_method_find_package(jule::Str _29935_ident) {
	return (*this)._field_file->_method_find_package(_29935_ident);
}



inline jule::Ref<_11265fb90_ImportInfo> _11262c360_Sema::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)> _30937_selector) {
	return (*this)._field_file->_method_select_package(_30937_selector);
}



inline jule::Ref<_1320e22c0_Var> _11262c360_Sema::_method_find_var(jule::Str _31931_ident,jule::Bool _31943_cpp_linked) {
	jule::Ref<_1320e22c0_Var> _32117_v = _11265fb90_find_var_in_package((*this)._field_files,_31931_ident,_31943_cpp_linked);
	if (jule::real(_32117_v)) {
		return _32117_v;
	}
	jule::Int _32717_i = 0LL;
	_iter_begin_4639617504:;
	if (!(_32717_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4639617504; }
	{
		jule::Ref<_11265fb90_ImportInfo> _32921_imp = (*this)._field_file->_field_imports._method_at(_32717_i);
		if ((!(_11262c360_imp_is_lookupable(_32921_imp,_31931_ident)))) {
			goto _iter_next_4639617504;
		}
		jule::Ref<_1320e22c0_Var> _33321_v = _32921_imp->_method_find_var(_31931_ident,_31943_cpp_linked);
		if (jule::real(_33321_v) && (*this)._method_is_accessible_define(_33321_v->_field_public,_33321_v->_field_token)) {
			return _33321_v;
		}
	}
	_iter_next_4639617504:;
	(_32717_i)++;
	goto _iter_begin_4639617504;
	_iter_end_4639617504:;
	return jule::new_ref<_1320e22c0_Var>();
}



inline jule::Ref<_1217f7750_TypeAlias> _11262c360_Sema::_method_find_type_alias(jule::Str _34838_ident,jule::Bool _34850_cpp_linked) {
	jule::Ref<_1217f7750_TypeAlias> _35017_ta = _11265fb90_find_type_alias_in_package((*this)._field_files,_34838_ident,_34850_cpp_linked);
	if (jule::real(_35017_ta)) {
		return _35017_ta;
	}
	jule::Int _35617_i = 0LL;
	_iter_begin_4639635488:;
	if (!(_35617_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4639635488; }
	{
		jule::Ref<_11265fb90_ImportInfo> _35821_imp = (*this)._field_file->_field_imports._method_at(_35617_i);
		if ((!(_11262c360_imp_is_lookupable(_35821_imp,_34838_ident)))) {
			goto _iter_next_4639635488;
		}
		jule::Ref<_1217f7750_TypeAlias> _36221_ta = _35821_imp->_method_find_type_alias(_34838_ident,_34850_cpp_linked);
		if (jule::real(_36221_ta) && (*this)._method_is_accessible_define(_36221_ta->_field_public,_36221_ta->_field_token)) {
			return _36221_ta;
		}
	}
	_iter_next_4639635488:;
	(_35617_i)++;
	goto _iter_begin_4639635488;
	_iter_end_4639635488:;
	return jule::new_ref<_1217f7750_TypeAlias>();
}



inline jule::Ref<_11209db80_Struct> _11262c360_Sema::_method_find_struct(jule::Str _37734_ident,jule::Bool _37746_cpp_linked) {
	jule::Ref<_11209db80_Struct> _37917_strct = _11265fb90_find_struct_in_package((*this)._field_files,_37734_ident,_37746_cpp_linked);
	if (jule::real(_37917_strct)) {
		return _37917_strct;
	}
	jule::Int _38517_i = 0LL;
	_iter_begin_4639652128:;
	if (!(_38517_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4639652128; }
	{
		jule::Ref<_11265fb90_ImportInfo> _38721_imp = (*this)._field_file->_field_imports._method_at(_38517_i);
		if ((!(_11262c360_imp_is_lookupable(_38721_imp,_37734_ident)))) {
			goto _iter_next_4639652128;
		}
		jule::Ref<_11209db80_Struct> _39121_strct = _38721_imp->_method_find_struct(_37734_ident,_37746_cpp_linked);
		if (jule::real(_39121_strct) && (*this)._method_is_accessible_define(_39121_strct->_field_public,_39121_strct->_field_token)) {
			return _39121_strct;
		}
	}
	_iter_next_4639652128:;
	(_38517_i)++;
	goto _iter_begin_4639652128;
	_iter_end_4639652128:;
	return jule::new_ref<_11209db80_Struct>();
}



inline jule::Ref<_112446fb0_Fn> _11262c360_Sema::_method_find_fn(jule::Str _40630_ident,jule::Bool _40642_cpp_linked) {
	jule::Ref<_112446fb0_Fn> _40817_f = _11265fb90_find_fn_in_package((*this)._field_files,_40630_ident,_40642_cpp_linked);
	if (jule::real(_40817_f)) {
		return _40817_f;
	}
	jule::Int _41417_i = 0LL;
	_iter_begin_4639668816:;
	if (!(_41417_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4639668816; }
	{
		jule::Ref<_11265fb90_ImportInfo> _41621_imp = (*this)._field_file->_field_imports._method_at(_41417_i);
		if ((!(_11262c360_imp_is_lookupable(_41621_imp,_40630_ident)))) {
			goto _iter_next_4639668816;
		}
		jule::Ref<_112446fb0_Fn> _42021_f = _41621_imp->_method_find_fn(_40630_ident,_40642_cpp_linked);
		if (jule::real(_42021_f) && (*this)._method_is_accessible_define(_42021_f->_field_public,_42021_f->_field_token)) {
			return _42021_f;
		}
	}
	_iter_next_4639668816:;
	(_41417_i)++;
	goto _iter_begin_4639668816;
	_iter_end_4639668816:;
	return jule::new_ref<_112446fb0_Fn>();
}



inline jule::Ref<_11209e2e0_Trait> _11262c360_Sema::_method_find_trait(jule::Str _43533_ident) {
	jule::Ref<_11209e2e0_Trait> _43717_t = _11265fb90_find_trait_in_package((*this)._field_files,_43533_ident);
	if (jule::real(_43717_t)) {
		return _43717_t;
	}
	jule::Int _44317_i = 0LL;
	_iter_begin_4639683440:;
	if (!(_44317_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4639683440; }
	{
		jule::Ref<_11265fb90_ImportInfo> _44521_imp = (*this)._field_file->_field_imports._method_at(_44317_i);
		if ((!(_11262c360_imp_is_lookupable(_44521_imp,_43533_ident)))) {
			goto _iter_next_4639683440;
		}
		jule::Ref<_11209e2e0_Trait> _44921_t = _44521_imp->_method_find_trait(_43533_ident);
		if (jule::real(_44921_t) && (*this)._method_is_accessible_define(_44921_t->_field_public,_44921_t->_field_token)) {
			return _44921_t;
		}
	}
	_iter_next_4639683440:;
	(_44317_i)++;
	goto _iter_begin_4639683440;
	_iter_end_4639683440:;
	return jule::new_ref<_11209e2e0_Trait>();
}



inline jule::Ref<_11261eaf0_Enum> _11262c360_Sema::_method_find_enum(jule::Str _46432_ident) {
	jule::Ref<_11261eaf0_Enum> _46617_e = _11265fb90_find_enum_in_package((*this)._field_files,_46432_ident);
	if (jule::real(_46617_e)) {
		return _46617_e;
	}
	jule::Int _47217_i = 0LL;
	_iter_begin_4639699040:;
	if (!(_47217_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4639699040; }
	{
		jule::Ref<_11265fb90_ImportInfo> _47421_imp = (*this)._field_file->_field_imports._method_at(_47217_i);
		if ((!(_11262c360_imp_is_lookupable(_47421_imp,_46432_ident)))) {
			goto _iter_next_4639699040;
		}
		jule::Ref<_11261eaf0_Enum> _47821_e = _47421_imp->_method_find_enum(_46432_ident);
		if (jule::real(_47821_e) && (*this)._method_is_accessible_define(_47821_e->_field_public,_47821_e->_field_token)) {
			return _47821_e;
		}
	}
	_iter_next_4639699040:;
	(_47217_i)++;
	goto _iter_begin_4639699040;
	_iter_end_4639699040:;
	return jule::new_ref<_11261eaf0_Enum>();
}



inline void _11262c360_Sema::_method_set_current_file(jule::Ref<_1320e2330_SymbolTable> _48939_f) {
	(*this)._field_file=_48939_f;
}



inline void _11262c360_Sema::_method_push_err(_111613f20_Token _49127_token,jule::Str _49141_key,jule::Slice<jule::Any> _49151_args) {
	(*this)._field_errors=append((*this)._field_errors,jule::Slice<_1316b4080_Log>({_11262c360_compiler_err(_49127_token,_49141_key,_49151_args)}));
}



inline jule::Bool _11262c360_Sema::_method_is_accessible_define(jule::Bool _49635_public,_111613f20_Token _49649_token) {
	return (_49635_public || (!(jule::real(_49649_token._field_file)))) || ((*this)._field_file->_field_file->_method_dir() == _49649_token._field_file->_method_dir());
}



inline jule::Bool _11262c360_Sema::_method_is_duplicated_ident(jule::Uintptr _50334_itself,jule::Str _50351_ident,jule::Bool _50363_cpp_linked) {
	{
		auto __julec_range_expr = (*this)._field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4639729872:;
			{
				if (_11262c360_f->_method_is_duplicated_ident(_50334_itself,_50351_ident,_50363_cpp_linked)) {
					return true;
				}
				jule::Int _50921_i = 0LL;
				_iter_begin_4639735744:;
				if (!(_50921_i < _11262c360_f->_field_imports._method_len())) { goto _iter_end_4639735744; }
				{
					jule::Ref<_11265fb90_ImportInfo> _51121_imp = (&(_11262c360_f->_field_imports))->_method_at(_50921_i);
					{
						auto __julec_range_expr = _51121_imp->_field_selected;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							_111613f20_Token _11262c360_selected = *__julec_range_begin;
							_iter_begin_4639739808:;
							{
								if (_11262c360_selected._field_kind == _50351_ident) {
									return true;
								}
							}
							_iter_next_4639739808:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _11262c360_selected = *__julec_range_begin; goto _iter_begin_4639739808; }
							_iter_end_4639739808:;
						}
					}
				}
				_iter_next_4639735744:;
				(_50921_i)++;
				goto _iter_begin_4639735744;
				_iter_end_4639735744:;
			}
			_iter_next_4639729872:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4639729872; }
			_iter_end_4639729872:;
		}
	}
	return false;
}



inline jule::Bool _11262c360_Sema::_method_check_generic_quantity(jule::Int _52241_required,jule::Int _52256_given,_111613f20_Token _52268_error_token) {
	jule::Bool _52290_ok = jule::Bool();
	{
		if (!(((_52241_required == 0LL) && (_52256_given > 0LL)))) { goto _case_end_4639748896; }
		_case_begin_4639748896:;
		{
			(*this)._method_push_err(_52268_error_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
			_52290_ok = false;
			return _52290_ok;
		}
		goto _match_end_4639747536;
		_case_end_4639748896:;
		if (!(((_52241_required > 0LL) && (_52256_given == 0LL)))) { goto _case_end_4639749008; }
		_case_begin_4639749008:;
		{
			(*this)._method_push_err(_52268_error_token,jule::Str("has_generics", 12),jule::Slice<jule::Any>({}));
			_52290_ok = false;
			return _52290_ok;
		}
		goto _match_end_4639747536;
		_case_end_4639749008:;
		if (!((_52241_required < _52256_given))) { goto _case_end_4639749904; }
		_case_begin_4639749904:;
		{
			(*this)._method_push_err(_52268_error_token,jule::Str("generics_overflow", 17),jule::Slice<jule::Any>({}));
			_52290_ok = false;
			return _52290_ok;
		}
		goto _match_end_4639747536;
		_case_end_4639749904:;
		if (!((_52241_required > _52256_given))) { goto _case_end_4639750016; }
		_case_begin_4639750016:;
		{
			(*this)._method_push_err(_52268_error_token,jule::Str("missing_generics", 16),jule::Slice<jule::Any>({}));
			_52290_ok = false;
			return _52290_ok;
		}
		goto _match_end_4639747536;
		_case_end_4639750016:;
		_case_begin_4639747728:;
		{
			_52290_ok = true;
			return _52290_ok;
		}
		goto _match_end_4639747536;
		_case_end_4639747728:;
		_match_end_4639747536:;
	}
}



inline jule::Bool _11262c360_Sema::_method_is_duplicated_import_selection(jule::Uintptr _54545_itself,jule::Str _54562_ident) {
	jule::Int _54617_i = 0LL;
	_iter_begin_4639763120:;
	if (!(_54617_i < (*this)._field_file->_field_imports._method_len())) { goto _iter_end_4639763120; }
	{
		jule::Ref<_11265fb90_ImportInfo> _54817_imp = ((*this)._field_file).alloc->_field_imports._method_at(_54617_i);
		if (((jule::Uintptr)((_54817_imp).alloc)) == _54545_itself) {
			goto _iter_end_4639763120;
		}
		if (_54817_imp->_method_exist_ident(_54562_ident)) {
			return true;
		}
	}
	_iter_next_4639763120:;
	(_54617_i)++;
	goto _iter_begin_4639763120;
	_iter_end_4639763120:;
	return false;
}



inline jule::Any _11262c360_Sema::_method_get_import_def(jule::Str _56229_ident,jule::Ref<_11265fb90_ImportInfo>& _56246_imp) {
	if (_1130606b0_find_package_builtin_def(_56246_imp->_field_link_path,_56229_ident) != nullptr) {
		return jule::Any(true);
	}
	{
		auto __julec_range_expr = _56246_imp->_field_package->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4639777936:;
			{
				
				jule::Any _56921_def = _11262c360_f->_method_def_by_ident(_56229_ident,false);
				if (_56921_def != nullptr) {
					return _56921_def;
				}
			}
			_iter_next_4639777936:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4639777936; }
			_iter_end_4639777936:;
		}
	}
	return jule::Any(nullptr);
}



inline void _11262c360_Sema::_method_check_import_selections(jule::Ref<_11265fb90_ImportInfo> _57846_imp) {
	(*this)._method_set_current_file((*this)._field_files[static_cast<jule::Int>(0LL)]);
	__JULE_DEFER({
		jule::drop((*this)._field_file);
	});
	{
		auto __julec_range_expr = _57846_imp->_field_selected;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_111613f20_Token _11262c360_ident = *__julec_range_begin;
			_iter_begin_4639787520:;
			{
				if (_11262c360_ident._field_kind == jule::Str("self", 4)) {
					goto _iter_next_4639787520;
				}
				if ((*this)._method_is_duplicated_import_selection(((jule::Uintptr)((_57846_imp).alloc)),_11262c360_ident._field_kind)) {
					(*this)._method_push_err(_11262c360_ident,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_11262c360_ident._field_kind)}));
					goto _iter_next_4639787520;
				}
				jule::Any _59321_def = (*this)._method_get_import_def(_11262c360_ident._field_kind,_57846_imp);
				{
					auto _match_expr{ _59321_def };
					if (!(_match_expr.type_is<jule::Bool>())) { goto _case_end_4639799376; }
					_case_begin_4639799376:;
					{
						goto _iter_next_4639787520;
					}
					goto _match_end_4639796848;
					_case_end_4639799376:;
					if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4639798560; }
					_case_begin_4639798560:;
					{
						jule::Ref<_1320e22c0_Var> _60025_v = _59321_def.operator jule::Ref<_1320e22c0_Var>();
						if ((*this)._method_is_accessible_define(_60025_v->_field_public,_60025_v->_field_token)) {
							goto _iter_next_4639787520;
						}
					}
					goto _match_end_4639796848;
					_case_end_4639798560:;
					if (!(_match_expr.type_is<jule::Ref<_1217f7750_TypeAlias>>())) { goto _case_end_4639798672; }
					_case_begin_4639798672:;
					{
						jule::Ref<_1217f7750_TypeAlias> _60625_ta = _59321_def.operator jule::Ref<_1217f7750_TypeAlias>();
						if ((*this)._method_is_accessible_define(_60625_ta->_field_public,_60625_ta->_field_token)) {
							goto _iter_next_4639787520;
						}
					}
					goto _match_end_4639796848;
					_case_end_4639798672:;
					if (!(_match_expr.type_is<jule::Ref<_11209db80_Struct>>())) { goto _case_end_4639798784; }
					_case_begin_4639798784:;
					{
						jule::Ref<_11209db80_Struct> _61225_strct = _59321_def.operator jule::Ref<_11209db80_Struct>();
						if ((*this)._method_is_accessible_define(_61225_strct->_field_public,_61225_strct->_field_token)) {
							goto _iter_next_4639787520;
						}
					}
					goto _match_end_4639796848;
					_case_end_4639798784:;
					if (!(_match_expr.type_is<jule::Ref<_11209e2e0_Trait>>())) { goto _case_end_4639801504; }
					_case_begin_4639801504:;
					{
						jule::Ref<_11209e2e0_Trait> _61825_t = _59321_def.operator jule::Ref<_11209e2e0_Trait>();
						if ((*this)._method_is_accessible_define(_61825_t->_field_public,_61825_t->_field_token)) {
							goto _iter_next_4639787520;
						}
					}
					goto _match_end_4639796848;
					_case_end_4639801504:;
					if (!(_match_expr.type_is<jule::Ref<_11261eaf0_Enum>>())) { goto _case_end_4639801616; }
					_case_begin_4639801616:;
					{
						jule::Ref<_11261eaf0_Enum> _62425_e = _59321_def.operator jule::Ref<_11261eaf0_Enum>();
						if ((*this)._method_is_accessible_define(_62425_e->_field_public,_62425_e->_field_token)) {
							goto _iter_next_4639787520;
						}
					}
					goto _match_end_4639796848;
					_case_end_4639801616:;
					if (!(_match_expr.type_is<jule::Ref<_112446fb0_Fn>>())) { goto _case_end_4639801728; }
					_case_begin_4639801728:;
					{
						jule::Ref<_112446fb0_Fn> _63025_f = _59321_def.operator jule::Ref<_112446fb0_Fn>();
						if ((*this)._method_is_accessible_define(_63025_f->_field_public,_63025_f->_field_token)) {
							goto _iter_next_4639787520;
						}
					}
					goto _match_end_4639796848;
					_case_end_4639801728:;
					_case_begin_4639798064:;
					{
						(*this)._method_push_err(_11262c360_ident,jule::Str("ident_not_exist", 15),jule::Slice<jule::Any>({jule::Any(_11262c360_ident._field_kind)}));
						goto _iter_next_4639787520;
					}
					goto _match_end_4639796848;
					_case_end_4639798064:;
					_match_end_4639796848:;
				}
				(*this)._method_push_err(_11262c360_ident,jule::Str("ident_is_not_accessible", 23),jule::Slice<jule::Any>({jule::Any(_11262c360_ident._field_kind)}));
			}
			_iter_next_4639787520:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_ident = *__julec_range_begin; goto _iter_begin_4639787520; }
			_iter_end_4639787520:;
		}
	}
}



inline jule::Bool _11262c360_Sema::_method_check_import(jule::Ref<_11265fb90_ImportInfo> _64535_imp) {
	if ((_64535_imp->_field_duplicate || _64535_imp->_field_cpp_linked) || (_64535_imp->_field_package->_field_files.len() == 0LL)) {
		return true;
	}
	jule::Ref<_11262c360_Sema> _65017_sema = jule::new_struct<_11262c360_Sema>(new( std::nothrow ) _11262c360_Sema());
	_65017_sema->_method_check(_64535_imp->_field_package->_field_files);
	if (_65017_sema->_field_errors.len() > 0LL) {
		(*this)._field_errors=append((*this)._field_errors,_65017_sema->_field_errors);
		return false;
	}
	(*this)._method_check_import_selections(_64535_imp);
	return true;
}



inline void _11262c360_Sema::_method_check_imports(void) {
	{
		auto __julec_range_expr = (*this)._field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_file = *__julec_range_begin;
			_iter_begin_4639843552:;
			{
				jule::Int _66321_i = 0LL;
				_iter_begin_4639845216:;
				if (!(_66321_i < _11262c360_file->_field_imports._method_len())) { goto _iter_end_4639845216; }
				{
					jule::Ref<_11265fb90_ImportInfo> _66525_imp = _11262c360_file->_field_imports._method_at(_66321_i);
					jule::Bool _66621_ok = (*this)._method_check_import(_66525_imp);
					if ((!(_66621_ok))) {
						(*this)._method_push_err(_66525_imp->_field_token,jule::Str("used_package_has_errors", 23),jule::Slice<jule::Any>({jule::Any(_66525_imp->_field_link_path)}));
						return;
					}
				}
				_iter_next_4639845216:;
				(_66321_i)++;
				goto _iter_begin_4639845216;
				_iter_end_4639845216:;
			}
			_iter_next_4639843552:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_file = *__julec_range_begin; goto _iter_begin_4639843552; }
			_iter_end_4639843552:;
		}
	}
}



inline void _11262c360_Sema::_method_impl_file_impls(void) {
	jule::Int _67817_i = 0LL;
	_iter_begin_4639854304:;
	if (!(_67817_i < this->self->_field_file->_field_impls._method_len())) { goto _iter_end_4639854304; }
	{
		jule::Ref<_112626410_Impl> _68021_imp = this->self->_field_file->_field_impls._method_at(_67817_i);
		this->self->_method_impl_impl(_68021_imp);
	}
	_iter_next_4639854304:;
	(_67817_i)++;
	goto _iter_begin_4639854304;
	_iter_end_4639854304:;
}



inline void _11262c360_Sema::_method_impl_impls(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_file = *__julec_range_begin;
			_iter_begin_4639864592:;
			{
				this->self->_method_set_current_file(_11262c360_file);
				this->self->_method_impl_file_impls();
			}
			_iter_next_4639864592:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_file = *__julec_range_begin; goto _iter_begin_4639864592; }
			_iter_end_4639864592:;
		}
	}
}



inline void _11262c360_Sema::_method_check_enums(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_file = *__julec_range_begin;
			_iter_begin_4639869632:;
			{
				this->self->_method_set_current_file(_11262c360_file);
				this->self->_method_check_enum_decls();
			}
			_iter_next_4639869632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_file = *__julec_range_begin; goto _iter_begin_4639869632; }
			_iter_end_4639869632:;
		}
	}
}



inline jule::Bool _11262c360_Sema::_method_check_type_with_refers(jule::Ref<_1217f7750_TypeSymbol> _70146_t,jule::Trait<_112f89930_Lookup> _70162_l,jule::Ref<_1217f7750_Referencer> _70173_referencer) {
	jule::Bool _701100_ok = jule::Bool();
	if (_70146_t->_method_checked()) {
		_701100_ok = true;
		return _701100_ok;
	}
	_1217f7750_TypeChecker _70517_tc = _1217f7750_TypeChecker(this->self,_70162_l,_70173_referencer,_111613f20_Token(),jule::Slice<jule::Ref<_111612b20_GenericDecl>>(),jule::Slice<jule::Ref<_1217f7750_TypeAlias>>(),jule::Bool());
	_70517_tc._method_check(_70146_t);
	_701100_ok = _70146_t->_method_checked();
	return _701100_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_type(jule::Ref<_1217f7750_TypeSymbol> _71634_t,jule::Trait<_112f89930_Lookup> _71650_l) {
	jule::Bool _71663_ok = jule::Bool();
	_71663_ok = this->self->_method_check_type_with_refers(_71634_t,_71650_l,jule::new_ref<_1217f7750_Referencer>());
	return _71663_ok;
}



inline jule::Ref<_1217f7750_TypeKind> _11262c360_Sema::_method_build_type_with_generics(jule::Ref<_111612b20_TypeDecl> _72248_t,jule::Slice<jule::Ref<_1217f7750_TypeAlias>> _72262_generics) {
	jule::Ref<_1217f7750_TypeChecker> _72317_tc = jule::new_struct<_1217f7750_TypeChecker>(new( std::nothrow ) _1217f7750_TypeChecker(this->self,this->self,jule::Ref<_1217f7750_Referencer>(),_111613f20_Token(),jule::Slice<jule::Ref<_111612b20_GenericDecl>>(),_72262_generics,jule::Bool()));
	return _72317_tc->_method_check_decl(_72248_t);
}



inline jule::Ref<_1217f7750_TypeKind> _11262c360_Sema::_method_build_type(jule::Ref<_111612b20_TypeDecl> _73234_t) {
	return this->self->_method_build_type_with_generics(_73234_t,nullptr);
}



inline jule::Ref<_121dedce0_Data> _11262c360_Sema::_method_evalpd(jule::Ref<_111612b20_Expr> _73830_expr,jule::Trait<_112f89930_Lookup> _73847_l,jule::Ref<_1217f7750_TypeKind> _73862_p,jule::Ref<_1320e22c0_Var> _73876_owner) {
	jule::Ref<_121dedce0_Eval> _73917_e = jule::new_struct<_121dedce0_Eval>(new( std::nothrow ) _121dedce0_Eval(this->self,_73847_l,jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),_73876_owner));
	{
		auto _match_expr{ _73847_l };
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_ScopeChecker>>())) { goto _case_end_4639926112; }
		_case_begin_4639926112:;
		{
			_73917_e->_field_unsafety=_73847_l.operator jule::Ref<_1126288e0_ScopeChecker>()->_method_is_unsafe();
		}
		goto _match_end_4639917760;
		_case_end_4639926112:;
		_match_end_4639917760:;
	}
	_73917_e->_field_prefix=_73862_p;
	return _73917_e->_method_eval_expr(_73830_expr);
}



inline jule::Ref<_121dedce0_Data> _11262c360_Sema::_method_evalp(jule::Ref<_111612b20_Expr> _75629_expr,jule::Trait<_112f89930_Lookup> _75646_l,jule::Ref<_1217f7750_TypeKind> _75661_p) {
	return this->self->_method_evalpd(_75629_expr,_75646_l,_75661_p,jule::new_ref<_1320e22c0_Var>());
}



inline jule::Ref<_121dedce0_Data> _11262c360_Sema::_method_eval(jule::Ref<_111612b20_Expr> _76128_expr,jule::Trait<_112f89930_Lookup> _76145_l) {
	return this->self->_method_evalp(_76128_expr,_76145_l,jule::new_ref<_1217f7750_TypeKind>());
}



inline void _11262c360_Sema::_method_check_assign_type(jule::Ref<_1217f7750_TypeKind> _76541_dest,jule::Ref<_121dedce0_Data> _76562_d,_111613f20_Token _76572_error_token,jule::Bool _76592_deref) {
	jule::Ref<_121807de0_AssignTypeChecker> _76617_atc = jule::new_struct<_121807de0_AssignTypeChecker>(new( std::nothrow ) _121807de0_AssignTypeChecker(this->self,_76541_dest,_76562_d,_76572_error_token,_76592_deref));
	jule::Bool _77313_ok = _76617_atc->_method_check();
	if ((!(_77313_ok))) {
		return;
	}
	if ((!(_76562_d->_method_is_const())) || (!(jule::real(_76541_dest->_method_prim())))) {
		return;
	}
	jule::Str _78217_kind = _76541_dest->_method_prim()->_field_kind;
	{
		if (!((_1132426f0_is_sig_int(_78217_kind)))) { goto _case_end_4639966608; }
		_case_begin_4639966608:;
		{
			_76562_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_76562_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4639966384;
		_case_end_4639966608:;
		if (!((_1132426f0_is_unsig_int(_78217_kind)))) { goto _case_end_4639966720; }
		_case_begin_4639966720:;
		{
			_76562_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_76562_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4639966384;
		_case_end_4639966720:;
		if (!((_1132426f0_is_float(_78217_kind)))) { goto _case_end_4639966832; }
		_case_begin_4639966832:;
		{
			_76562_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_76562_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4639966384;
		_case_end_4639966832:;
		_match_end_4639966384:;
	}
}



inline jule::Bool _11262c360_Sema::_method_check_type_compatibility(jule::Ref<_1217f7750_TypeKind> _79648_dest,jule::Ref<_1217f7750_TypeKind> _79713_src,_111613f20_Token _79729_error_token,jule::Bool _79749_deref) {
	jule::Str _79813_dest_kind = _79648_dest->_method_to_str();
	if ((!(jule::real(_79713_src)))) {
		this->self->_method_push_err(_79729_error_token,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any(_79813_dest_kind),jule::Any(jule::Str("<untyped>", 9))}));
		return false;
	}
	jule::Str _80313_src_kind = _79713_src->_method_to_str();
	if (jule::real(_79713_src->_method_tup())) {
		this->self->_method_push_err(_79729_error_token,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any(_79813_dest_kind),jule::Any(_80313_src_kind)}));
		return false;
	}
	if (jule::real(_79648_dest->_method_prim()) && _79648_dest->_method_prim()->_method_is_any()) {
		return false;
	}
	jule::Ref<_121807de0_TypeCompatibilityChecker> _81517_tcc = jule::new_struct<_121807de0_TypeCompatibilityChecker>(new( std::nothrow ) _121807de0_TypeCompatibilityChecker(this->self,_79648_dest,_79713_src,_79729_error_token,_79749_deref,jule::Bool(),jule::Bool()));
	jule::Bool _82213_ok = _81517_tcc->_method_check();
	{
		if (!((_82213_ok))) { goto _case_end_4640005136; }
		_case_begin_4640005136:;
		{
			return true;
		}
		goto _match_end_4640003440;
		_case_end_4640005136:;
		if (!((_79813_dest_kind == _80313_src_kind))) { goto _case_end_4640008064; }
		_case_begin_4640008064:;
		{
			return true;
		}
		goto _match_end_4640003440;
		_case_end_4640008064:;
		_case_begin_4639985616:;
		{
			this->self->_method_push_err(_79729_error_token,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any(_79813_dest_kind),jule::Any(_80313_src_kind)}));
			return false;
		}
		goto _match_end_4640003440;
		_case_end_4639985616:;
		_match_end_4640003440:;
	}
}



inline jule::Ref<_1217f7750_TypeKind> _11262c360_Sema::_method_build_non_generic_type_kind(jule::Ref<_111612b20_TypeDecl> _84351_ast,jule::Slice<jule::Ref<_111612b20_GenericDecl>> _84367_generics) {
	jule::Ref<_1217f7750_TypeChecker> _84417_tc = jule::new_struct<_1217f7750_TypeChecker>(new( std::nothrow ) _1217f7750_TypeChecker(this->self,this->self,jule::Ref<_1217f7750_Referencer>(),_111613f20_Token(),_84367_generics,jule::Slice<jule::Ref<_1217f7750_TypeAlias>>(),jule::Bool()));
	return _84417_tc->_method_check_decl(_84351_ast);
}



inline void _11262c360_Sema::_method_build_fn_non_generic_type_kinds(jule::Ref<_112446fb0_FnIns> _85255_f) {
	jule::Slice<jule::Ref<_111612b20_GenericDecl>> _85317_generics = nullptr;
	if (_85255_f->_field_decl->_method_is_method()) {
		_85317_generics=append(_85255_f->_field_decl->_field_generics,_85255_f->_field_decl->_field_owner->_field_generics);
	} else {
		_85317_generics=_85255_f->_field_decl->_field_generics;
	}
	{
		auto __julec_range_expr = _85255_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_ParamIns> _11262c360_p = *__julec_range_begin;
			_iter_begin_4640021152:;
			{
				if ((!(_11262c360_p->_field_decl->_method_is_self()))) {
					_11262c360_p->_field_kind=this->self->_method_build_non_generic_type_kind(_11262c360_p->_field_decl->_field_kind->_field_decl,_85317_generics);
				}
			}
			_iter_next_4640021152:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_p = *__julec_range_begin; goto _iter_begin_4640021152; }
			_iter_end_4640021152:;
		}
	}
	if ((!(_85255_f->_field_decl->_method_is_void()))) {
		_85255_f->_field_result=this->self->_method_build_non_generic_type_kind(_85255_f->_field_decl->_field_result->_field_kind->_field_decl,_85317_generics);
	}
}



inline jule::Ref<_112446fb0_FnIns> _11262c360_Sema::_method_get_trait_check_fn_kind(jule::Ref<_112446fb0_Fn> _87047_f) {
	jule::Ref<_112446fb0_FnIns> _87117_ins = _87047_f->_method_instance_force();
	this->self->_method_build_fn_non_generic_type_kinds(_87117_ins);
	return _87117_ins;
}



inline jule::Bool _11262c360_Sema::_method_reload_fn_ins_types(jule::Ref<_112446fb0_FnIns> _87643_f) {
	jule::Bool _87656_ok = jule::Bool();
	if (_87643_f->_method_is_builtin() || _87643_f->_method_is_anon()) {
		_87656_ok = true;
		return _87656_ok;
	}
	jule::Ref<_11262c360_Sema> _88117_sema = _87643_f->_field_decl->_field_sema;
	jule::Ref<_1320e2330_SymbolTable> _88317_old = _87643_f->_field_decl->_field_sema->_field_file;
	__JULE_DEFER({
		_87643_f->_field_decl->_field_sema->_method_set_current_file(_88317_old);
	});
	jule::Ref<_1320e2330_SymbolTable> _88517_file = _11262c360_find_file(_87643_f->_field_decl->_field_sema->_field_files,_87643_f->_field_decl->_field_token._field_file);
	if (jule::real(_88517_file)) {
		_87643_f->_field_decl->_field_sema->_method_set_current_file(_88517_file);
	}
	jule::I64 _89017_size = _87643_f->_field_generics.len();
	if (jule::real(_87643_f->_field_decl) && jule::real(_87643_f->_field_decl->_field_owner)) {
		_89017_size+=static_cast<jule::I64>(_87643_f->_field_decl->_field_owner->_field_generics.len());
	}
	jule::Slice<jule::Ref<_1217f7750_TypeAlias>> _89517_generics = jule::Slice<jule::Ref<_1217f7750_TypeAlias>>::alloc(static_cast<jule::Int>(0LL),static_cast<jule::Int>(_89017_size));
	{
		auto __julec_range_expr = _87643_f->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11262c360_i = 0;
			jule::Ref<_1217f7750_TypeKind> _11262c360_g = *__julec_range_begin;
			_iter_begin_4640062960:;
			{
				_89517_generics=append(_89517_generics,jule::Slice<jule::Ref<_1217f7750_TypeAlias>>({jule::new_struct<_1217f7750_TypeAlias>(new( std::nothrow ) _1217f7750_TypeAlias(jule::Ref<_111612b20_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),_111613f20_Token(),_87643_f->_field_decl->_field_generics[static_cast<jule::Int>(_11262c360_i)]->_field_ident,jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),_11262c360_g)),jule::Str(),jule::Slice<jule::Any>()))}));
			}
			_iter_next_4640062960:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11262c360_i; _11262c360_g = *__julec_range_begin; goto _iter_begin_4640062960; }
			_iter_end_4640062960:;
		}
	}
	if (jule::real(_87643_f->_field_decl) && jule::real(_87643_f->_field_decl->_field_owner)) {
		jule::Ref<_11209db80_StructIns> _90721_owner = _87643_f->_field_owner;
		{
			auto __julec_range_expr = _90721_owner->_field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _11262c360_i = 0;
				jule::Ref<_1217f7750_TypeKind> _11262c360_g = *__julec_range_begin;
				_iter_begin_4640071392:;
				{
					_89517_generics=append(_89517_generics,jule::Slice<jule::Ref<_1217f7750_TypeAlias>>({jule::new_struct<_1217f7750_TypeAlias>(new( std::nothrow ) _1217f7750_TypeAlias(jule::Ref<_111612b20_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),_111613f20_Token(),_90721_owner->_field_decl->_field_generics[static_cast<jule::Int>(_11262c360_i)]->_field_ident,jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),_11262c360_g)),jule::Str(),jule::Slice<jule::Any>()))}));
				}
				_iter_next_4640071392:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_11262c360_i; _11262c360_g = *__julec_range_begin; goto _iter_begin_4640071392; }
				_iter_end_4640071392:;
			}
		}
	}
	_87656_ok=true;
	{
		auto __julec_range_expr = _87643_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_ParamIns> _11262c360_p = *__julec_range_begin;
			_iter_begin_4640073664:;
			{
				if ((!(_11262c360_p->_field_decl->_method_is_self()))) {
					_11262c360_p->_field_kind=_88117_sema->_method_build_type_with_generics(_11262c360_p->_field_decl->_field_kind->_field_decl,_89517_generics);
					_87656_ok=jule::real(_11262c360_p->_field_kind) && _87656_ok;
				}
			}
			_iter_next_4640073664:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_p = *__julec_range_begin; goto _iter_begin_4640073664; }
			_iter_end_4640073664:;
		}
	}
	if ((!(_87643_f->_field_decl->_method_is_void()))) {
		_87643_f->_field_result=_88117_sema->_method_build_type_with_generics(_87643_f->_field_decl->_field_result->_field_kind->_field_decl,_89517_generics);
		_87656_ok=jule::real(_87643_f->_field_result) && _87656_ok;
	}
	if ((_88117_sema).alloc != (this->self).alloc) {
		this->self->_field_errors=append(this->self->_field_errors,_88117_sema->_field_errors);
	}
	_87656_ok = _87656_ok;
	return _87656_ok;
}



inline void _11262c360_Sema::_method_check_validity_for_init_expr(jule::Bool _93848_left_mut,jule::Bool _93864_left_ref,jule::Ref<_1217f7750_TypeKind> _9399_left_kind,jule::Ref<_121dedce0_Data> _93935_d,_111613f20_Token _93945_error_token) {
	if ((_93848_left_mut && (!(_93935_d->_field_mutable))) && _1217f7750_is_mut(_93935_d->_field_kind)) {
		this->self->_method_push_err(_93945_error_token,jule::Str("assignment_non_mut_to_mut", 25),jule::Slice<jule::Any>({}));
	}
	if (_93864_left_ref) {
		{
			auto _match_expr{ _93935_d->_field_model };
			if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>() || _match_expr.type_is<jule::Ref<_112673500_TraitSubIdentExprModel>>() || _match_expr.type_is<jule::Ref<_112673500_CommonIdentExprModel>>() || _match_expr.type_is<jule::Ref<_112673500_StructSubIdentExprModel>>() || _match_expr.type_is<jule::Ref<_112673500_CommonSubIdentExprModel>>())) { goto _case_end_4640103504; }
			goto _match_end_4640098464;
			_case_end_4640103504:;
			if (!(_match_expr.type_is<jule::Ref<_112673500_UnaryExprModel>>())) { goto _case_end_4640104816; }
			_case_begin_4640104816:;
			{
				jule::Ref<_112673500_UnaryExprModel> _95321_unary = _93935_d->_field_model.operator jule::Ref<_112673500_UnaryExprModel>();
				if (_95321_unary->_field_op == jule::Str("*", 1)) {
					goto _match_end_4640098464;
				}
				goto _case_begin_4640102016;
			}
			goto _match_end_4640098464;
			_case_end_4640104816:;
			_case_begin_4640102016:;
			{
				this->self->_method_push_err(_93945_error_token,jule::Str("reference_assign_non_var", 24),jule::Slice<jule::Any>({}));
			}
			goto _match_end_4640098464;
			_case_end_4640102016:;
			_match_end_4640098464:;
		}
		if (_93848_left_mut && (!(_93935_d->_field_mutable))) {
			this->self->_method_push_err(_93945_error_token,jule::Str("mut_reference_points_to_immut", 29),jule::Slice<jule::Any>({}));
		}
	}
	jule::Ref<_121807de0_AssignTypeChecker> _96917_atc = jule::new_struct<_121807de0_AssignTypeChecker>(new( std::nothrow ) _121807de0_AssignTypeChecker(this->self,jule::Ref<_1217f7750_TypeKind>(),_93935_d,_93945_error_token,jule::Bool()));
	_96917_atc->_method_check_validity();
}



inline jule::Bool _11262c360_Sema::_method_check_type_alias_decl_kind(jule::Ref<_1217f7750_TypeAlias> _97750_ta,jule::Trait<_112f89930_Lookup> _97766_l) {
	jule::Bool _97779_ok = jule::Bool();
	jule::Ref<_1320e2330_SymbolTable> _97817_old = this->self->_field_file;
	__JULE_DEFER({
		this->self->_method_set_current_file(_97817_old);
	});
	jule::Ref<_1320e2330_SymbolTable> _98017_file = _11262c360_find_file(this->self->_field_files,_97750_ta->_field_token._field_file);
	if (jule::real(_98017_file)) {
		this->self->_method_set_current_file(_98017_file);
	}
	_97779_ok=this->self->_method_check_type_with_refers(_97750_ta->_field_kind,_97766_l,jule::new_struct<_1217f7750_Referencer>(new( std::nothrow ) _1217f7750_Referencer(_97750_ta->_field_ident,jule::Any(_97750_ta),(&(_97750_ta->_field_refers)))));
	if ((_97779_ok && jule::real(_97750_ta->_field_kind->_field_kind->_method_arr())) && _97750_ta->_field_kind->_field_kind->_method_arr()->_field_auto) {
		this->self->_method_push_err(_97750_ta->_field_kind->_field_decl->_field_token,jule::Str("array_auto_sized", 16),jule::Slice<jule::Any>({}));
		_97779_ok=false;
	}
	return _97779_ok;
}



inline void _11262c360_Sema::_method_check_type_alias_decl(jule::Ref<_1217f7750_TypeAlias> _99745_ta,jule::Trait<_112f89930_Lookup> _99761_l) {
	if (_111613f20_is_ignore_ident(_99745_ta->_field_ident)) {
		this->self->_method_push_err(_99745_ta->_field_token,jule::Str("ignore_ident", 12),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_type_alias_decl_kind(_99745_ta,_99761_l);
}



inline void _11262c360_Sema::_method_check_type_alias_decl_dup(jule::Ref<_1217f7750_TypeAlias> _100549_ta) {
	if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_100549_ta).alloc)),_100549_ta->_field_ident,_100549_ta->_field_cpp_linked)) {
		this->self->_method_push_err(_100549_ta->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_100549_ta->_field_ident)}));
	}
	this->self->_method_check_type_alias_decl_kind(_100549_ta,this->self);
}



inline jule::Bool _11262c360_Sema::_method_check_type_alias_decls(void) {
	jule::Bool _101344_ok = jule::Bool();
	jule::Int _101417_i = 0LL;
	_iter_begin_4640152304:;
	if (!(_101417_i < this->self->_field_file->_field_type_aliases._method_len())) { goto _iter_end_4640152304; }
	{
		jule::Ref<_1217f7750_TypeAlias> _101621_ta = this->self->_field_file->_field_type_aliases._method_at(_101417_i);
		this->self->_method_check_type_alias_decl_dup(_101621_ta);
		if (this->self->_field_errors.len() > 0LL) {
			_101344_ok = false;
			return _101344_ok;
		}
	}
	_iter_next_4640152304:;
	(_101417_i)++;
	goto _iter_begin_4640152304;
	_iter_end_4640152304:;
	_101344_ok = true;
	return _101344_ok;
}



inline void _11262c360_Sema::_method_check_enum_items_dup(jule::Ref<_11261eaf0_Enum> _102739_e) {
	{
		auto __julec_range_expr = _102739_e->_field_items;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11261eaf0_EnumItem> _11262c360_item = *__julec_range_begin;
			_iter_begin_4640161952:;
			{
				if (_111613f20_is_ignore_ident(_11262c360_item->_field_ident)) {
					(*this)._method_push_err(_11262c360_item->_field_token,jule::Str("ignore_ident", 12),jule::Slice<jule::Any>({}));
				} else {
					{
						auto __julec_range_expr = _102739_e->_field_items;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Ref<_11261eaf0_EnumItem> _11262c360_citem = *__julec_range_begin;
							_iter_begin_4640168352:;
							{
								if (_11262c360_item == _11262c360_citem) {
									goto _iter_end_4640168352;
								} else if (_11262c360_item->_field_ident == _11262c360_citem->_field_ident) {
									(*this)._method_push_err(_11262c360_item->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_11262c360_item->_field_ident)}));
									goto _iter_end_4640168352;
								}
							}
							_iter_next_4640168352:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _11262c360_citem = *__julec_range_begin; goto _iter_begin_4640168352; }
							_iter_end_4640168352:;
						}
					}
				}
			}
			_iter_next_4640161952:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_item = *__julec_range_begin; goto _iter_begin_4640161952; }
			_iter_end_4640161952:;
		}
	}
}



inline void _11262c360_Sema::_method_check_enum_items_str(jule::Ref<_11261eaf0_Enum> _104444_e) {
	{
		auto __julec_range_expr = _104444_e->_field_items;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11261eaf0_EnumItem> _11262c360_item = *__julec_range_begin;
			_iter_begin_4640163328:;
			{
				if (_11262c360_item->_method_auto_expr()) {
					_11262c360_item->_field_value=jule::new_struct<_121dedce0_Value>(new( std::nothrow ) _121dedce0_Value(jule::Ref<_111612b20_Expr>(),jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::Ref<_1217f7750_TypeKind>(),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1131530d0_Const::_static_method_new_str(_11262c360_item->_field_ident)))));
					_11262c360_item->_field_value->_field_data->_field_model=jule::Any(_11262c360_item->_field_value->_field_data->_field_constant);
				} else {
					jule::Ref<_121dedce0_Data> _105425_d = this->self->_method_eval(_11262c360_item->_field_value->_field_expr,this->self);
					if ((!(jule::real(_105425_d)))) {
						goto _iter_next_4640163328;
					}
					if ((!(_105425_d->_method_is_const()))) {
						this->self->_method_push_err(_11262c360_item->_field_value->_field_expr->_field_token,jule::Str("expr_not_const", 14),jule::Slice<jule::Any>({}));
					}
					this->self->_method_check_assign_type(_104444_e->_field_kind->_field_kind,_105425_d,_11262c360_item->_field_token,false);
					_11262c360_item->_field_value->_field_data=_105425_d;
				}
			}
			_iter_next_4640163328:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_item = *__julec_range_begin; goto _iter_begin_4640163328; }
			_iter_end_4640163328:;
		}
	}
}



inline void _11262c360_Sema::_method_check_enum_items_int(jule::Ref<_11261eaf0_Enum> _106944_e) {
	jule::U64 _107017_max = static_cast<jule::U64>(_1131a6a20_max_of(_106944_e->_field_kind->_field_kind->_method_prim()->_method_to_str()));
	{
		auto __julec_range_expr = _106944_e->_field_items;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11262c360_i = 0;
			jule::Ref<_11261eaf0_EnumItem> _11262c360_item = *__julec_range_begin;
			_iter_begin_4640198912:;
			{
				if (_107017_max == 0LL) {
					this->self->_method_push_err(_11262c360_item->_field_token,jule::Str("overflow_limits", 15),jule::Slice<jule::Any>({}));
				} else {
					(_107017_max)--;
				}
				if (_11262c360_item->_method_auto_expr()) {
					_11262c360_item->_field_value=jule::new_struct<_121dedce0_Value>(new( std::nothrow ) _121dedce0_Value(jule::Ref<_111612b20_Expr>(),jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::Ref<_1217f7750_TypeKind>(),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1131530d0_Const::_static_method_new_u64(_107017_max - (_107017_max - static_cast<jule::U64>(_11262c360_i)))))));
					_11262c360_item->_field_value->_field_data->_field_model=jule::Any(_11262c360_item->_field_value->_field_data->_field_constant);
				} else {
					jule::Ref<_121dedce0_Data> _108625_d = this->self->_method_eval(_11262c360_item->_field_value->_field_expr,this->self);
					if ((!(jule::real(_108625_d)))) {
						goto _iter_next_4640198912;
					}
					if ((!(_108625_d->_method_is_const()))) {
						this->self->_method_push_err(_11262c360_item->_field_value->_field_expr->_field_token,jule::Str("expr_not_const", 14),jule::Slice<jule::Any>({}));
					}
					this->self->_method_check_assign_type(_106944_e->_field_kind->_field_kind,_108625_d,_11262c360_item->_field_token,false);
					_11262c360_item->_field_value->_field_data=_108625_d;
				}
			}
			_iter_next_4640198912:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11262c360_i; _11262c360_item = *__julec_range_begin; goto _iter_begin_4640198912; }
			_iter_end_4640198912:;
		}
	}
}



inline void _11262c360_Sema::_method_check_enum_decl(jule::Ref<_11261eaf0_Enum> _110139_e) {
	if (_111613f20_is_ignore_ident(_110139_e->_field_ident)) {
		this->self->_method_push_err(_110139_e->_field_token,jule::Str("ignore_ident", 12),jule::Slice<jule::Any>({}));
	} else if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_110139_e).alloc)),_110139_e->_field_ident,false)) {
		this->self->_method_push_err(_110139_e->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_110139_e->_field_ident)}));
	}
	if (_110139_e->_field_items.len() == 0LL) {
		this->self->_method_push_err(_110139_e->_field_token,jule::Str("no_member_in_enum", 17),jule::Slice<jule::Any>({jule::Any(_110139_e->_field_ident)}));
	}
	this->self->_method_check_enum_items_dup(_110139_e);
	if (jule::real(_110139_e->_field_kind)) {
		if ((!(this->self->_method_check_type(_110139_e->_field_kind,this->self)))) {
			return;
		}
	} else {
		_110139_e->_field_kind=jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("int", 3))))));
	}
	jule::Ref<_1217f7750_Prim> _112717_t = _110139_e->_field_kind->_field_kind->_method_prim();
	if ((!(jule::real(_112717_t)))) {
		this->self->_method_push_err(_110139_e->_field_token,jule::Str("invalid_type_source", 19),jule::Slice<jule::Any>({}));
		return;
	}
	{
		if (!((_112717_t->_method_is_str()))) { goto _case_end_4640246912; }
		_case_begin_4640246912:;
		{
			this->self->_method_check_enum_items_str(_110139_e);
		}
		goto _match_end_4640242560;
		_case_end_4640246912:;
		if (!((_1132426f0_is_int(_112717_t->_method_to_str())))) { goto _case_end_4640246176; }
		_case_begin_4640246176:;
		{
			this->self->_method_check_enum_items_int(_110139_e);
		}
		goto _match_end_4640242560;
		_case_end_4640246176:;
		_case_begin_4640242720:;
		{
			this->self->_method_push_err(_110139_e->_field_token,jule::Str("invalid_type_source", 19),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4640242560;
		_case_end_4640242720:;
		_match_end_4640242560:;
	}
}



inline jule::Bool _11262c360_Sema::_method_check_enum_decls(void) {
	jule::Bool _114738_ok = jule::Bool();
	jule::Int _114817_i = 0LL;
	_iter_begin_4640255456:;
	if (!(_114817_i < this->self->_field_file->_field_enums._method_len())) { goto _iter_end_4640255456; }
	{
		jule::Ref<_11261eaf0_Enum> _115021_e = this->self->_field_file->_field_enums._method_at(_114817_i);
		this->self->_method_check_enum_decl(_115021_e);
		if (this->self->_field_errors.len() > 0LL) {
			_114738_ok = false;
			return _114738_ok;
		}
	}
	_iter_next_4640255456:;
	(_114817_i)++;
	goto _iter_begin_4640255456;
	_iter_end_4640255456:;
	_114738_ok = true;
	return _114738_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_decl_generics(jule::Slice<jule::Ref<_111612b20_GenericDecl>> _116138_generics) {
	jule::Bool _116166_ok = jule::Bool();
	_116166_ok=true;
	{
		auto __julec_range_expr = _116138_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11262c360_i = 0;
			jule::Ref<_111612b20_GenericDecl> _11262c360_g = *__julec_range_begin;
			_iter_begin_4640266320:;
			{
				if (_111613f20_is_ignore_ident(_11262c360_g->_field_ident)) {
					(*this)._method_push_err(_11262c360_g->_field_token,jule::Str("ignore_ident", 12),jule::Slice<jule::Any>({}));
					_116166_ok=false;
					goto _iter_next_4640266320;
				}
				_julec_label_duplication_lookup:;
				{
					auto __julec_range_expr = _116138_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _11262c360_j = 0;
						jule::Ref<_111612b20_GenericDecl> _11262c360_ct = *__julec_range_begin;
						_iter_begin_4640273392:;
						{
							{
								if (!((_11262c360_j >= _11262c360_i))) { goto _case_end_4640275872; }
								_case_begin_4640275872:;
								{
									goto _iter_end_4640273392;
								}
								goto _match_end_4640275632;
								_case_end_4640275872:;
								if (!((_11262c360_g->_field_ident == _11262c360_ct->_field_ident))) { goto _case_end_4640275984; }
								_case_begin_4640275984:;
								{
									(*this)._method_push_err(_11262c360_g->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_11262c360_g->_field_ident)}));
									_116166_ok=false;
									goto _iter_end_4640273392;
								}
								goto _match_end_4640275632;
								_case_end_4640275984:;
								_match_end_4640275632:;
							}
						}
						_iter_next_4640273392:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_11262c360_j; _11262c360_ct = *__julec_range_begin; goto _iter_begin_4640273392; }
						_iter_end_4640273392:;
					}
				}
			}
			_iter_next_4640266320:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11262c360_i; _11262c360_g = *__julec_range_begin; goto _iter_begin_4640266320; }
			_iter_end_4640266320:;
		}
	}
	return _116166_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_fn_decl_params_dup(jule::Ref<_112446fb0_Fn> _118843_f) {
	jule::Bool _118853_ok = jule::Bool();
	_118853_ok=true;
	_julec_label_check:;
	{
		auto __julec_range_expr = _118843_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11262c360_i = 0;
			jule::Ref<_112446fb0_Param> _11262c360_p = *__julec_range_begin;
			_iter_begin_4640285936:;
			{
				{
					auto __julec_range_expr = _118843_f->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_111612b20_GenericDecl> _11262c360_g = *__julec_range_begin;
						_iter_begin_4640288576:;
						{
							if (_11262c360_p->_field_ident == _11262c360_g->_field_ident) {
								_118853_ok=false;
								(*this)._method_push_err(_11262c360_p->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_11262c360_p->_field_ident)}));
								goto _iter_next_4640285936;
							}
						}
						_iter_next_4640288576:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _11262c360_g = *__julec_range_begin; goto _iter_begin_4640288576; }
						_iter_end_4640288576:;
					}
				}
				_julec_label_params_lookup:;
				{
					auto __julec_range_expr = _118843_f->_field_params;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _11262c360_j = 0;
						jule::Ref<_112446fb0_Param> _11262c360_jp = *__julec_range_begin;
						_iter_begin_4640289216:;
						{
							{
								if (!((_11262c360_j >= _11262c360_i))) { goto _case_end_4640297152; }
								_case_begin_4640297152:;
								{
									goto _iter_end_4640289216;
								}
								goto _match_end_4640296896;
								_case_end_4640297152:;
								if (!((_111613f20_is_anon_ident(_11262c360_p->_field_ident) || _111613f20_is_anon_ident(_11262c360_jp->_field_ident)))) { goto _case_end_4640297264; }
								_case_begin_4640297264:;
								{
									goto _iter_end_4640289216;
								}
								goto _match_end_4640296896;
								_case_end_4640297264:;
								if (!((_11262c360_p->_field_ident == _11262c360_jp->_field_ident))) { goto _case_end_4640297376; }
								_case_begin_4640297376:;
								{
									_118853_ok=false;
									(*this)._method_push_err(_11262c360_p->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_11262c360_p->_field_ident)}));
									goto _iter_next_4640285936;
								}
								goto _match_end_4640296896;
								_case_end_4640297376:;
								_match_end_4640296896:;
							}
						}
						_iter_next_4640289216:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_11262c360_j; _11262c360_jp = *__julec_range_begin; goto _iter_begin_4640289216; }
						_iter_end_4640289216:;
					}
				}
			}
			_iter_next_4640285936:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11262c360_i; _11262c360_p = *__julec_range_begin; goto _iter_begin_4640285936; }
			_iter_end_4640285936:;
		}
	}
	return _118853_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_fn_decl_result_dup(jule::Ref<_112446fb0_Fn> _122243_f) {
	jule::Bool _122253_ok = jule::Bool();
	_122253_ok=true;
	if (_122243_f->_method_is_void()) {
		return _122253_ok;
	}
	{
		auto __julec_range_expr = _122243_f->_field_result->_field_idents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11262c360_i = 0;
			_111613f20_Token _11262c360_v = *__julec_range_begin;
			_iter_begin_4640310416:;
			{
				if (_111613f20_is_ignore_ident(_11262c360_v._field_kind)) {
					goto _iter_next_4640310416;
				}
				{
					auto __julec_range_expr = _122243_f->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_111612b20_GenericDecl> _11262c360_g = *__julec_range_begin;
						_iter_begin_4640314512:;
						{
							if (_11262c360_v._field_kind == _11262c360_g->_field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_4640314512:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _11262c360_g = *__julec_range_begin; goto _iter_begin_4640314512; }
						_iter_end_4640314512:;
					}
				}
				{
					auto __julec_range_expr = _122243_f->_field_params;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_112446fb0_Param> _11262c360_p = *__julec_range_begin;
						_iter_begin_4640318128:;
						{
							if (_11262c360_v._field_kind == _11262c360_p->_field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_4640318128:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _11262c360_p = *__julec_range_begin; goto _iter_begin_4640318128; }
						_iter_end_4640318128:;
					}
				}
				_julec_label_itself_lookup:;
				{
					auto __julec_range_expr = _122243_f->_field_result->_field_idents;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _11262c360_j = 0;
						_111613f20_Token _11262c360_jv = *__julec_range_begin;
						_iter_begin_4640323360:;
						{
							{
								if (!((_11262c360_j >= _11262c360_i))) { goto _case_end_4640326000; }
								_case_begin_4640326000:;
								{
									goto _iter_end_4640323360;
								}
								goto _match_end_4640325760;
								_case_end_4640326000:;
								if (!((_11262c360_jv._field_kind == _11262c360_v._field_kind))) { goto _case_end_4640326112; }
								_case_begin_4640326112:;
								{
									goto _julec_label_exist;
								}
								goto _match_end_4640325760;
								_case_end_4640326112:;
								_match_end_4640325760:;
							}
						}
						_iter_next_4640323360:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_11262c360_j; _11262c360_jv = *__julec_range_begin; goto _iter_begin_4640323360; }
						_iter_end_4640323360:;
					}
				}
				goto _iter_next_4640310416;
				_julec_label_exist:;
				(*this)._method_push_err(_11262c360_v,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_11262c360_v._field_kind)}));
				_122253_ok=false;
			}
			_iter_next_4640310416:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11262c360_i; _11262c360_v = *__julec_range_begin; goto _iter_begin_4640310416; }
			_iter_end_4640310416:;
		}
	}
	return _122253_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_fn_decl_types(jule::Ref<_112446fb0_Fn> _127043_f) {
	jule::Bool _127053_ok = jule::Bool();
	_127053_ok=true;
	jule::Slice<jule::Ref<_111612b20_GenericDecl>> _127317_generics = _127043_f->_field_generics;
	if (jule::real(_127043_f->_field_owner)) {
		_127317_generics=append(_127317_generics,_127043_f->_field_owner->_field_generics);
	}
	{
		auto __julec_range_expr = _127043_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_Param> _11262c360_p = *__julec_range_begin;
			_iter_begin_4640342720:;
			{
				if ((!(_11262c360_p->_method_is_self()))) {
					jule::Ref<_1217f7750_TypeKind> _128025_kind = this->self->_method_build_non_generic_type_kind(_11262c360_p->_field_kind->_field_decl,_127317_generics);
					_127053_ok=jule::real(_128025_kind) && _127053_ok;
					_11262c360_p->_field_kind->_field_kind=_128025_kind;
				}
			}
			_iter_next_4640342720:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_p = *__julec_range_begin; goto _iter_begin_4640342720; }
			_iter_end_4640342720:;
		}
	}
	if ((!(_127043_f->_method_is_void()))) {
		jule::Ref<_1217f7750_TypeKind> _128721_kind = this->self->_method_build_non_generic_type_kind(_127043_f->_field_result->_field_kind->_field_decl,_127317_generics);
		_127053_ok=jule::real(_128721_kind) && _127053_ok;
		_127043_f->_field_result->_field_kind->_field_kind=_128721_kind;
	}
	_127053_ok = _127053_ok;
	return _127053_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_fn_decl_prototype(jule::Ref<_112446fb0_Fn> _129747_f) {
	jule::Bool _129757_ok = jule::Bool();
	{
		if (!(((!(this->self->_method_check_decl_generics(_129747_f->_field_generics)))))) { goto _case_end_4640358112; }
		_case_begin_4640358112:;
		{
			_129757_ok = false;
			return _129757_ok;
		}
		goto _match_end_4640356736;
		_case_end_4640358112:;
		if (!(((!(this->self->_method_check_fn_decl_params_dup(_129747_f)))))) { goto _case_end_4640358224; }
		_case_begin_4640358224:;
		{
			_129757_ok = false;
			return _129757_ok;
		}
		goto _match_end_4640356736;
		_case_end_4640358224:;
		if (!(((!(this->self->_method_check_fn_decl_result_dup(_129747_f)))))) { goto _case_end_4640359120; }
		_case_begin_4640359120:;
		{
			_129757_ok = false;
			return _129757_ok;
		}
		goto _match_end_4640356736;
		_case_end_4640359120:;
		if (!(((!(this->self->_method_check_fn_decl_types(_129747_f)))))) { goto _case_end_4640359232; }
		_case_begin_4640359232:;
		{
			_129757_ok = false;
			return _129757_ok;
		}
		goto _match_end_4640356736;
		_case_end_4640359232:;
		_case_begin_4640356944:;
		{
			_129757_ok = true;
			return _129757_ok;
		}
		goto _match_end_4640356736;
		_case_end_4640356944:;
		_match_end_4640356736:;
	}
}



inline void _11262c360_Sema::_method_check_trait_decl_method(jule::Ref<_112446fb0_Fn> _131647_f) {
	if (_111613f20_is_ignore_ident(_131647_f->_field_ident)) {
		this->self->_method_push_err(_131647_f->_field_token,jule::Str("ignore_ident", 12),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_fn_decl_prototype(_131647_f);
	_131647_f->_field_sema=this->self;
}



inline void _11262c360_Sema::_method_check_trait_decl_methods(jule::Ref<_11209e2e0_Trait> _132548_t) {
	{
		auto __julec_range_expr = _132548_t->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11262c360_i = 0;
			jule::Ref<_112446fb0_Fn> _11262c360_f = *__julec_range_begin;
			_iter_begin_4640373760:;
			{
				this->self->_method_check_trait_decl_method(_11262c360_f);
				if (this->self->_field_errors.len() > 0LL) {
					return;
				}
				_julec_label_duplicate_lookup:;
				{
					auto __julec_range_expr = _132548_t->_field_methods;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _11262c360_j = 0;
						jule::Ref<_112446fb0_Fn> _11262c360_jf = *__julec_range_begin;
						_iter_begin_4640379920:;
						{
							{
								if (!((_11262c360_j >= _11262c360_i))) { goto _case_end_4640382928; }
								_case_begin_4640382928:;
								{
									goto _iter_end_4640379920;
								}
								goto _match_end_4640382688;
								_case_end_4640382928:;
								if (!((_11262c360_f->_field_ident == _11262c360_jf->_field_ident))) { goto _case_end_4640383040; }
								_case_begin_4640383040:;
								{
									this->self->_method_push_err(_11262c360_f->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_11262c360_f->_field_ident)}));
									goto _iter_end_4640379920;
								}
								goto _match_end_4640382688;
								_case_end_4640383040:;
								_match_end_4640382688:;
							}
						}
						_iter_next_4640379920:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_11262c360_j; _11262c360_jf = *__julec_range_begin; goto _iter_begin_4640379920; }
						_iter_end_4640379920:;
					}
				}
			}
			_iter_next_4640373760:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11262c360_i; _11262c360_f = *__julec_range_begin; goto _iter_begin_4640373760; }
			_iter_end_4640373760:;
		}
	}
}



inline void _11262c360_Sema::_method_check_trait_decl(jule::Ref<_11209e2e0_Trait> _135540_t) {
	if (_111613f20_is_ignore_ident(_135540_t->_field_ident)) {
		this->self->_method_push_err(_135540_t->_field_token,jule::Str("ignore_ident", 12),jule::Slice<jule::Any>({}));
	} else if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_135540_t).alloc)),_135540_t->_field_ident,false)) {
		this->self->_method_push_err(_135540_t->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_135540_t->_field_ident)}));
	}
	this->self->_method_check_trait_decl_methods(_135540_t);
}



inline jule::Bool _11262c360_Sema::_method_check_trait_decls(void) {
	jule::Bool _136639_ok = jule::Bool();
	jule::Int _136717_i = 0LL;
	_iter_begin_4640402576:;
	if (!(_136717_i < this->self->_field_file->_field_traits._method_len())) { goto _iter_end_4640402576; }
	{
		jule::Ref<_11209e2e0_Trait> _136921_t = this->self->_field_file->_field_traits._method_at(_136717_i);
		this->self->_method_check_trait_decl(_136921_t);
		if (this->self->_field_errors.len() > 0LL) {
			_136639_ok = false;
			return _136639_ok;
		}
	}
	_iter_next_4640402576:;
	(_136717_i)++;
	goto _iter_begin_4640402576;
	_iter_end_4640402576:;
	_136639_ok = true;
	return _136639_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_trait_impl_methods(jule::Ref<_11209e2e0_Trait> _138047_base,jule::Ref<_112626410_Impl> _138061_ipl) {
	jule::Bool _138075_ok = jule::Bool();
	_138075_ok=true;
	{
		auto __julec_range_expr = _138061_ipl->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_Fn> _11262c360_f = *__julec_range_begin;
			_iter_begin_4640414832:;
			{
				if ((!(jule::real(_138047_base->_method_find_method(_11262c360_f->_field_ident))))) {
					(*this)._method_push_err(_11262c360_f->_field_token,jule::Str("trait_have_not_ident", 20),jule::Slice<jule::Any>({jule::Any(_138047_base->_field_ident),jule::Any(_11262c360_f->_field_ident)}));
					_138075_ok=false;
				}
			}
			_iter_next_4640414832:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640414832; }
			_iter_end_4640414832:;
		}
	}
	return _138075_ok;
}



inline jule::Bool _11262c360_Sema::_method_impl_to_struct(jule::Ref<_11209db80_Struct> _139138_dest,jule::Ref<_112626410_Impl> _139157_ipl) {
	jule::Bool _139171_ok = jule::Bool();
	_139171_ok=true;
	{
		auto __julec_range_expr = _139157_ipl->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_Fn> _11262c360_f = *__julec_range_begin;
			_iter_begin_4640426368:;
			{
				if (jule::real(_139138_dest->_method_find_method(_11262c360_f->_field_ident,_11262c360_f->_field_statically)) || jule::real(_139138_dest->_method_find_field(_11262c360_f->_field_ident))) {
					this->self->_method_push_err(_11262c360_f->_field_token,jule::Str("struct_already_have_ident", 25),jule::Slice<jule::Any>({jule::Any(_139138_dest->_field_ident),jule::Any(_11262c360_f->_field_ident)}));
					_139171_ok=false;
					goto _iter_next_4640426368;
				}
				if ((_139138_dest->_field_generics.len() > 0LL) && (_11262c360_f->_field_generics.len() > 0LL)) {
					{
						auto __julec_range_expr = _11262c360_f->_field_generics;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Ref<_111612b20_GenericDecl> _11262c360_fg = *__julec_range_begin;
							_iter_begin_4640436624:;
							{
								{
									auto __julec_range_expr = _139138_dest->_field_generics;
									if (__julec_range_expr.begin() != __julec_range_expr.end()) {
										auto __julec_range_begin = __julec_range_expr.begin();
										const auto __julec_range_end = __julec_range_expr.end();
										jule::Ref<_111612b20_GenericDecl> _11262c360_dg = *__julec_range_begin;
										_iter_begin_4640438688:;
										{
											if (_11262c360_fg->_field_ident == _11262c360_dg->_field_ident) {
												this->self->_method_push_err(_11262c360_fg->_field_token,jule::Str("method_has_generic_with_same_ident", 34),jule::Slice<jule::Any>({}));
												_139171_ok=false;
											}
										}
										_iter_next_4640438688:;
										++__julec_range_begin;
										if (__julec_range_begin != __julec_range_end) { _11262c360_dg = *__julec_range_begin; goto _iter_begin_4640438688; }
										_iter_end_4640438688:;
									}
								}
							}
							_iter_next_4640436624:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _11262c360_fg = *__julec_range_begin; goto _iter_begin_4640436624; }
							_iter_end_4640436624:;
						}
					}
				}
				_11262c360_f->_field_sema=this->self;
				_11262c360_f->_field_owner=_139138_dest;
				_139138_dest->_field_methods._method_push(_11262c360_f);
			}
			_iter_next_4640426368:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640426368; }
			_iter_end_4640426368:;
		}
	}
	return _139171_ok;
}



inline void _11262c360_Sema::_method_impl_trait(jule::Ref<_112626410_Impl> _141934_decl) {
	jule::Ref<_11209e2e0_Trait> _142017_base = this->self->_method_find_trait(_141934_decl->_field_base._field_kind);
	if ((!(jule::real(_142017_base)))) {
		_142017_base=_1130606b0_find_builtin_trait(_141934_decl->_field_base._field_kind);
	}
	if ((!(jule::real(_142017_base)))) {
		this->self->_method_push_err(_141934_decl->_field_base,jule::Str("impl_base_not_exist", 19),jule::Slice<jule::Any>({jule::Any(_141934_decl->_field_base._field_kind)}));
		return;
	}
	
	jule::Ref<_11209db80_Struct> _143317_dest = this->self->_method_find_struct(_141934_decl->_field_dest._field_kind,false);
	if ((!(jule::real(_143317_dest)))) {
		this->self->_method_push_err(_141934_decl->_field_dest,jule::Str("impl_dest_not_exist", 19),jule::Slice<jule::Any>({jule::Any(_141934_decl->_field_dest._field_kind)}));
		return;
	}
	if (_143317_dest->_field_token._field_file->_method_dir() != this->self->_field_file->_field_file->_method_dir()) {
		this->self->_method_push_err(_141934_decl->_field_dest,jule::Str("illegal_impl_out_of_package", 27),jule::Slice<jule::Any>({}));
		return;
	}
	_142017_base->_field_implemented=append(_142017_base->_field_implemented,jule::Slice<jule::Ref<_11209db80_Struct>>({_143317_dest}));
	_143317_dest->_field_implements=append(_143317_dest->_field_implements,jule::Slice<jule::Ref<_11209e2e0_Trait>>({_142017_base}));
	{
		if (!(((!(this->self->_method_check_trait_impl_methods(_142017_base,_141934_decl)))))) { goto _case_end_4640472880; }
		_case_begin_4640472880:;
		{
			return;
		}
		goto _match_end_4640473504;
		_case_end_4640472880:;
		if (!(((!(this->self->_method_impl_to_struct(_143317_dest,_141934_decl)))))) { goto _case_end_4640473296; }
		_case_begin_4640473296:;
		{
			return;
		}
		goto _match_end_4640473504;
		_case_end_4640473296:;
		_match_end_4640473504:;
	}
}



inline void _11262c360_Sema::_method_impl_struct(jule::Ref<_112626410_Impl> _145635_decl) {
	
	jule::Ref<_11209db80_Struct> _146117_dest = this->self->_method_find_struct(_145635_decl->_field_dest._field_kind,false);
	if ((!(jule::real(_146117_dest)))) {
		this->self->_method_push_err(_145635_decl->_field_dest,jule::Str("impl_dest_not_exist", 19),jule::Slice<jule::Any>({jule::Any(_145635_decl->_field_dest._field_kind)}));
		return;
	}
	if (_146117_dest->_field_token._field_file->_method_dir() != this->self->_field_file->_field_file->_method_dir()) {
		this->self->_method_push_err(_145635_decl->_field_dest,jule::Str("illegal_impl_out_of_package", 27),jule::Slice<jule::Any>({}));
		return;
	}
	{
		if (!(((!(this->self->_method_impl_to_struct(_146117_dest,_145635_decl)))))) { goto _case_end_4640492512; }
		_case_begin_4640492512:;
		{
			return;
		}
		goto _match_end_4640491520;
		_case_end_4640492512:;
		_match_end_4640491520:;
	}
}



inline void _11262c360_Sema::_method_impl_impl(jule::Ref<_112626410_Impl> _147933_decl) {
	{
		if (!((_147933_decl->_method_is_trait_impl()))) { goto _case_end_4640496432; }
		_case_begin_4640496432:;
		{
			this->self->_method_impl_trait(_147933_decl);
		}
		goto _match_end_4640496176;
		_case_end_4640496432:;
		if (!((_147933_decl->_method_is_struct_impl()))) { goto _case_end_4640496544; }
		_case_begin_4640496544:;
		{
			this->self->_method_impl_struct(_147933_decl);
		}
		goto _match_end_4640496176;
		_case_end_4640496544:;
		_match_end_4640496176:;
	}
}



inline void _11262c360_Sema::_method_check_var_decl(jule::Ref<_1320e22c0_Var> _149138_decl,jule::Trait<_112f89930_Lookup> _149150_l) {
	if (_111613f20_is_ignore_ident(_149138_decl->_field_ident)) {
		this->self->_method_push_err(_149138_decl->_field_token,jule::Str("ignore_ident", 12),jule::Slice<jule::Any>({}));
	}
	if (_149138_decl->_method_is_type_inferred()) {
		if (_149138_decl->_field_statically) {
			this->self->_method_push_err(_149138_decl->_field_token,jule::Str("static_is_type_inferred", 23),jule::Slice<jule::Any>({}));
		}
		if ((!(_149138_decl->_method_is_initialized()))) {
			this->self->_method_push_err(_149138_decl->_field_token,jule::Str("missing_value_for_type_inference", 32),jule::Slice<jule::Any>({}));
		}
	} else {
		this->self->_method_check_type(_149138_decl->_field_kind,_149150_l);
	}
	if (_149138_decl->_field_constant && _149138_decl->_field_reference) {
		this->self->_method_push_err(_149138_decl->_field_token,jule::Str("constant_reference", 18),jule::Slice<jule::Any>({}));
	}
	if ((!(_149138_decl->_method_is_initialized()))) {
		if (_149138_decl->_field_constant) {
			this->self->_method_push_err(_149138_decl->_field_token,jule::Str("const_var_not_have_expr", 23),jule::Slice<jule::Any>({}));
		}
		if (_149138_decl->_field_statically) {
			this->self->_method_push_err(_149138_decl->_field_token,jule::Str("static_not_have_expr", 20),jule::Slice<jule::Any>({}));
		}
		if (_149138_decl->_field_reference) {
			this->self->_method_push_err(_149138_decl->_field_token,jule::Str("reference_not_initialized", 25),jule::Slice<jule::Any>({}));
		}
	}
}



inline void _11262c360_Sema::_method_check_global_var_decl(jule::Ref<_1320e22c0_Var> _152845_decl) {
	if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_152845_decl).alloc)),_152845_decl->_field_ident,_152845_decl->_field_cpp_linked)) {
		this->self->_method_push_err(_152845_decl->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_152845_decl->_field_ident)}));
	}
	if (_152845_decl->_field_cpp_linked && _152845_decl->_field_constant) {
		this->self->_method_push_err(_152845_decl->_field_token,jule::Str("cpp_linked_variable_is_const", 28),jule::Slice<jule::Any>({}));
	}
	if (((!(_152845_decl->_field_cpp_linked)) && (!(_152845_decl->_field_constant))) && (!(_152845_decl->_field_statically))) {
		this->self->_method_push_err(_152845_decl->_field_token,jule::Str("global_not_static", 17),jule::Slice<jule::Any>({}));
	}
	this->self->_method_check_var_decl(_152845_decl,this->self);
}



inline jule::Bool _11262c360_Sema::_method_check_global_decls(void) {
	jule::Bool _154340_ok = jule::Bool();
	jule::Int _154417_i = 0LL;
	_iter_begin_4640544896:;
	if (!(_154417_i < this->self->_field_file->_field_vars._method_len())) { goto _iter_end_4640544896; }
	{
		jule::Ref<_1320e22c0_Var> _154621_decl = this->self->_field_file->_field_vars._method_at(_154417_i);
		this->self->_method_check_global_var_decl(_154621_decl);
		if (this->self->_field_errors.len() > 0LL) {
			_154340_ok = false;
			return _154340_ok;
		}
	}
	_iter_next_4640544896:;
	(_154417_i)++;
	goto _iter_begin_4640544896;
	_iter_end_4640544896:;
	_154340_ok = true;
	return _154340_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_struct_trait_impl(jule::Ref<_11209db80_Struct> _155747_strct,jule::Ref<_11209e2e0_Trait> _155767_trt) {
	jule::Bool _155782_ok = jule::Bool();
	{
		auto __julec_range_expr = _155767_trt->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_Fn> _11262c360_tf = *__julec_range_begin;
			_iter_begin_4640556848:;
			{
				jule::Bool _155921_exist = false;
				jule::Ref<_112446fb0_Fn> _156021_sf = _155747_strct->_method_find_method(_11262c360_tf->_field_ident,_11262c360_tf->_field_statically);
				jule::Ref<_112446fb0_FnIns> _156117_tf_k = this->self->_method_get_trait_check_fn_kind(_11262c360_tf);
				if (jule::real(_156021_sf)) {
					jule::Ref<_112446fb0_FnIns> _156321_sf_k = this->self->_method_get_trait_check_fn_kind(_156021_sf);
					_155921_exist=((_156117_tf_k->_field_decl->_field_public == _156321_sf_k->_field_decl->_field_public) && (_156117_tf_k->_field_decl->_field_ident == _156321_sf_k->_field_decl->_field_ident)) && _156117_tf_k->_method_equals(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_156321_sf_k)));
				}
				if ((!(_155921_exist))) {
					jule::Str _157125_s = _156117_tf_k->_method_to_str();
					if (_11262c360_tf->_field_public) {
						_157125_s=jule::Str("pub ", 4) + _157125_s;
					}
					this->self->_method_push_err(_155747_strct->_field_token,jule::Str("not_impl_trait_def", 18),jule::Slice<jule::Any>({jule::Any(_155767_trt->_field_ident),jule::Any(_157125_s)}));
					_155782_ok=false;
				}
			}
			_iter_next_4640556848:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_tf = *__julec_range_begin; goto _iter_begin_4640556848; }
			_iter_end_4640556848:;
		}
	}
	return _155782_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_struct_impls(jule::Ref<_11209db80_Struct> _158242_strct) {
	jule::Bool _158260_ok = jule::Bool();
	_158260_ok=true;
	{
		auto __julec_range_expr = _158242_strct->_field_implements;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209e2e0_Trait> _11262c360_trt = *__julec_range_begin;
			_iter_begin_4640579680:;
			{
				_158260_ok=this->self->_method_check_struct_trait_impl(_158242_strct,_11262c360_trt) && _158260_ok;
			}
			_iter_next_4640579680:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_trt = *__julec_range_begin; goto _iter_begin_4640579680; }
			_iter_end_4640579680:;
		}
	}
	_158260_ok = _158260_ok;
	return _158260_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_struct_fields(jule::Ref<_11209db80_Struct> _159043_st) {
	jule::Bool _159058_ok = jule::Bool();
	_159058_ok=true;
	jule::Ref<_1217f7750_TypeChecker> _159317_tc = jule::new_struct<_1217f7750_TypeChecker>(new( std::nothrow ) _1217f7750_TypeChecker(this->self,this->self,jule::new_struct<_1217f7750_Referencer>(new( std::nothrow ) _1217f7750_Referencer(_159043_st->_field_ident,jule::Any(_159043_st),nullptr)),_111613f20_Token(),_159043_st->_field_generics,jule::Slice<jule::Ref<_1217f7750_TypeAlias>>(),jule::Bool()));
	jule::I64 _160313_n = _159043_st->_field_instances.len();
	{
		auto __julec_range_expr = _159043_st->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_Field> _11262c360_f = *__julec_range_begin;
			_iter_begin_4640592096:;
			{
				_11262c360_f->_field_owner=_159043_st;
				_11262c360_f->_field_kind->_field_kind=_159317_tc->_method_check_decl(_11262c360_f->_field_kind->_field_decl);
				_159058_ok=jule::real(_11262c360_f->_field_kind->_field_kind) && _159058_ok;
				{
					auto __julec_range_expr = _159043_st->_field_fields;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_11209db80_Field> _11262c360_cf = *__julec_range_begin;
						_iter_begin_4640597984:;
						{
							if (_11262c360_f == _11262c360_cf) {
								goto _iter_end_4640597984;
							} else if (_11262c360_f->_field_ident == _11262c360_cf->_field_ident) {
								this->self->_method_push_err(_11262c360_f->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_11262c360_f->_field_ident)}));
								_159058_ok=false;
							}
						}
						_iter_next_4640597984:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _11262c360_cf = *__julec_range_begin; goto _iter_begin_4640597984; }
						_iter_end_4640597984:;
					}
				}
			}
			_iter_next_4640592096:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640592096; }
			_iter_end_4640592096:;
		}
	}
	if (_159058_ok && (_160313_n != _159043_st->_field_instances.len())) {
		jule::drop(_159317_tc->_field_referencer);
		_159043_st->_field_instances=_159043_st->_field_instances.slice(0LL,static_cast<jule::Int>(_160313_n));
		{
			auto __julec_range_expr = _159043_st->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_11209db80_Field> _11262c360_f = *__julec_range_begin;
				_iter_begin_4640605840:;
				{
					_11262c360_f->_field_kind->_field_kind=_159317_tc->_method_check_decl(_11262c360_f->_field_kind->_field_decl);
				}
				_iter_next_4640605840:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640605840; }
				_iter_end_4640605840:;
			}
		}
	}
	_159058_ok = _159058_ok;
	return _159058_ok;
}



inline void _11262c360_Sema::_method_check_struct_decl(jule::Ref<_11209db80_Struct> _163141_strct) {
	if (_111613f20_is_ignore_ident(_163141_strct->_field_ident)) {
		this->self->_method_push_err(_163141_strct->_field_token,jule::Str("ignore_ident", 12),jule::Slice<jule::Any>({}));
	} else if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_163141_strct).alloc)),_163141_strct->_field_ident,_163141_strct->_field_cpp_linked)) {
		this->self->_method_push_err(_163141_strct->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_163141_strct->_field_ident)}));
	}
	_163141_strct->_field_sema=this->self;
	{
		if (!(((!(this->self->_method_check_decl_generics(_163141_strct->_field_generics)))))) { goto _case_end_4640621504; }
		_case_begin_4640621504:;
		{
			return;
		}
		goto _match_end_4640621152;
		_case_end_4640621504:;
		if (!(((!(this->self->_method_check_struct_fields(_163141_strct)))))) { goto _case_end_4640621616; }
		_case_begin_4640621616:;
		{
			return;
		}
		goto _match_end_4640621152;
		_case_end_4640621616:;
		if (!(((!(this->self->_method_check_struct_impls(_163141_strct)))))) { goto _case_end_4640621728; }
		_case_begin_4640621728:;
		{
			return;
		}
		goto _match_end_4640621152;
		_case_end_4640621728:;
		_match_end_4640621152:;
	}
}



inline jule::Bool _11262c360_Sema::_method_check_struct_decls(void) {
	jule::Bool _164740_ok = jule::Bool();
	jule::Int _164817_i = 0LL;
	_iter_begin_4640629328:;
	if (!(_164817_i < this->self->_field_file->_field_structs._method_len())) { goto _iter_end_4640629328; }
	{
		jule::Ref<_11209db80_Struct> _165021_strct = this->self->_field_file->_field_structs._method_at(_164817_i);
		this->self->_method_check_struct_decl(_165021_strct);
		if (this->self->_field_errors.len() > 0LL) {
			_164740_ok = false;
			return _164740_ok;
		}
	}
	_iter_next_4640629328:;
	(_164817_i)++;
	goto _iter_begin_4640629328;
	_iter_end_4640629328:;
	_164740_ok = true;
	return _164740_ok;
}



inline void _11262c360_Sema::_method_check_fn_decl(jule::Ref<_112446fb0_Fn> _166237_f) {
	if (_111613f20_is_ignore_ident(_166237_f->_field_ident)) {
		this->self->_method_push_err(_166237_f->_field_token,jule::Str("ignore_ident", 12),jule::Slice<jule::Any>({}));
	} else if (this->self->_method_is_duplicated_ident(((jule::Uintptr)((_166237_f).alloc)),_166237_f->_field_ident,_166237_f->_field_cpp_linked)) {
		this->self->_method_push_err(_166237_f->_field_token,jule::Str("duplicated_ident", 16),jule::Slice<jule::Any>({jule::Any(_166237_f->_field_ident)}));
	}
	_166237_f->_field_sema=this->self;
	this->self->_method_check_fn_decl_prototype(_166237_f);
}



inline jule::Bool _11262c360_Sema::_method_check_fn_decls(void) {
	jule::Bool _167436_ok = jule::Bool();
	jule::Int _167517_i = 0LL;
	_iter_begin_4640651632:;
	if (!(_167517_i < this->self->_field_file->_field_funcs._method_len())) { goto _iter_end_4640651632; }
	{
		jule::Ref<_112446fb0_Fn> _167721_f = this->self->_field_file->_field_funcs._method_at(_167517_i);
		this->self->_method_check_fn_decl(_167721_f);
		if (this->self->_field_errors.len() > 0LL) {
			_167436_ok = false;
			return _167436_ok;
		}
	}
	_iter_next_4640651632:;
	(_167517_i)++;
	goto _iter_begin_4640651632;
	_iter_end_4640651632:;
	_167436_ok = true;
	return _167436_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_directive_pass(_112572770_Pass _168839_pass) {
	jule::Bool _168853_ok = jule::Bool();
	if (_168839_pass._field_text == jule::Str("", 0)) {
		_168853_ok = true;
		return _168853_ok;
	}
	if (_168839_pass._field_text[static_cast<jule::Int>(0LL)] != '-') {
		(*this)._method_push_err(_168839_pass._field_token,jule::Str("pass_directive_not_starts_with_dash", 35),jule::Slice<jule::Any>({}));
		_168853_ok = false;
		return _168853_ok;
	}
	_168853_ok = true;
	return _168853_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_passes(void) {
	jule::Bool _170133_ok = jule::Bool();
	_170133_ok=true;
	jule::Int _170317_i = 0LL;
	_iter_begin_4640670112:;
	if (!(_170317_i < (*this)._field_file->_field_passes._method_len())) { goto _iter_end_4640670112; }
	{
		_112572770_Pass _170517_pass = (*this)._field_file->_field_passes._method_at(_170317_i);
		_170133_ok=(*this)._method_check_directive_pass(_170517_pass) && _170133_ok;
	}
	_iter_next_4640670112:;
	(_170317_i)++;
	goto _iter_begin_4640670112;
	_iter_end_4640670112:;
	return _170133_ok;
}



inline void _11262c360_Sema::_method_push_cycle_error(jule::Ref<_11209db80_Struct> _171131_st1,jule::Ref<_11209db80_Struct> _171145_st2,jule::Str& _171164_message) {
	
	jule::Str _171413_refers_to = _1316b2ff0_errorf(jule::Str("refers_to", 9),jule::Slice<jule::Any>({jule::Any(_171131_st1->_field_ident),jule::Any(_171145_st2->_field_ident)}));
	_171164_message=((_112572770_str_repeat(jule::Str(" ", 1),4LL) + _171413_refers_to) + jule::Str("\n", 1)) + _171164_message;
}



inline jule::Bool _11262c360_Sema::_method_check_cross_cycle(jule::Ref<_11209db80_Struct> _171832_st1,jule::Ref<_11209db80_Struct> _171846_st2,jule::Str& _171865_message) {
	{
		auto __julec_range_expr = _171846_st2->_field_uses;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_Struct> _11262c360_u = *__julec_range_begin;
			_iter_begin_4640690768:;
			{
				if ((_11262c360_u).alloc == (_171832_st1).alloc) {
					(*this)._method_push_cycle_error(_171846_st2,_11262c360_u,_171865_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_171832_st1,_11262c360_u,_171865_message)))) {
					(*this)._method_push_cycle_error(_171846_st2,_11262c360_u,_171865_message);
					return false;
				}
			}
			_iter_next_4640690768:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_u = *__julec_range_begin; goto _iter_begin_4640690768; }
			_iter_end_4640690768:;
		}
	}
	return true;
}



inline jule::Bool _11262c360_Sema::_method_check_struct_derive_illegal_cycles(jule::Str _173453_derive,jule::Ref<_11209db80_Struct> _173466_st1,jule::Ref<_1217f7750_TypeKind> _173484_k) {
	jule::Bool _1734100_ok = jule::Bool();
	jule::Ref<_11209db80_Struct> _173517_st2 = _1217f7750_get_struct_from_kind(_173484_k);
	if ((!(jule::real(_173517_st2)))) {
		_1734100_ok = true;
		return _1734100_ok;
	}
	if ((_173466_st1).alloc == (_173517_st2).alloc) {
		(*this)._method_push_err(_173466_st1->_field_token,jule::Str("derive_illegal_cycle_refers_itself", 34),jule::Slice<jule::Any>({jule::Any(_173453_derive),jule::Any(_173466_st1->_field_ident)}));
		_1734100_ok = false;
		return _1734100_ok;
	}
	jule::Str _174717_message = jule::Str("", 0);
	if ((!((*this)._method_check_cross_cycle(_173466_st1,_173517_st2,_174717_message)))) {
		jule::Str _175021_err_msg = _174717_message;
		_174717_message=jule::Str("", 0);
		(*this)._method_push_cycle_error(_173466_st1,_173517_st2,_174717_message);
		_175021_err_msg=_175021_err_msg + _174717_message;
		(*this)._method_push_err(_173466_st1->_field_token,jule::Str("derive_illegal_cross_cycle", 26),jule::Slice<jule::Any>({jule::Any(_173453_derive),jule::Any(_175021_err_msg)}));
		_1734100_ok = false;
		return _1734100_ok;
	}
	_1734100_ok = true;
	return _1734100_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_struct_ins_derive_clone(jule::Ref<_11209db80_StructIns> _176152_st) {
	jule::Bool _176170_ok = jule::Bool();
	if ((!(_176152_st->_field_decl->_method_is_derives(jule::Str("Clone", 5))))) {
		_176170_ok = true;
		return _176170_ok;
	}
	{
		auto __julec_range_expr = _176152_st->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_FieldIns> _11262c360_f = *__julec_range_begin;
			_iter_begin_4640722352:;
			{
				if ((!(jule::real(_11262c360_f->_field_kind))) || (!(_1217f7750_is_mut(_11262c360_f->_field_kind)))) {
					goto _iter_next_4640722352;
				}
				if ((!(_1217f7750_supports_cloning(_11262c360_f->_field_kind)))) {
					(*this)._method_push_err(_176152_st->_field_decl->_field_token,jule::Str("type_not_compatible_for_derive", 30),jule::Slice<jule::Any>({jule::Any(_11262c360_f->_field_kind->_method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					_176170_ok = false;
					return _176170_ok;
				}
				if ((!((*this)._method_check_struct_derive_illegal_cycles(jule::Str("Clone", 5),_176152_st->_field_decl,_11262c360_f->_field_kind)))) {
					_176170_ok = false;
					return _176170_ok;
				}
			}
			_iter_next_4640722352:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640722352; }
			_iter_end_4640722352:;
		}
	}
	_176170_ok = true;
	return _176170_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_struct_derive_clone(jule::Ref<_11209db80_Struct> _178448_st) {
	jule::Bool _178463_ok = jule::Bool();
	_178463_ok = (*this)._method_check_struct_ins_derive_clone(_178448_st->_method_instance());
	return _178463_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_file_derives(void) {
	jule::Bool _178839_ok = jule::Bool();
	jule::Int _179017_i = 0LL;
	_iter_begin_4640745296:;
	if (!(_179017_i < (*this)._field_file->_field_structs._method_len())) { goto _iter_end_4640745296; }
	{
		jule::Ref<_11209db80_Struct> _179221_st = (*this)._field_file->_field_structs._method_at(_179017_i);
		jule::Bool _179317_ok = (*this)._method_check_struct_derive_clone(_179221_st);
		if ((!(_179317_ok))) {
			_178839_ok = false;
			return _178839_ok;
		}
	}
	_iter_next_4640745296:;
	(_179017_i)++;
	goto _iter_begin_4640745296;
	_iter_end_4640745296:;
	_178839_ok = true;
	return _178839_ok;
}



inline void _11262c360_Sema::_method_check_package_derives(void) {
	{
		auto __julec_range_expr = (*this)._field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4640754224:;
			{
				(*this)._method_set_current_file(_11262c360_f);
				jule::Bool _180517_ok = (*this)._method_check_file_derives();
				if ((!(_180517_ok))) {
					return;
				}
			}
			_iter_next_4640754224:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640754224; }
			_iter_end_4640754224:;
		}
	}
}



inline void _11262c360_Sema::_method_check_package_decls(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4640760384:;
			{
				this->self->_method_set_current_file(_11262c360_f);
				if ((!(this->self->_method_check_passes()))) {
					return;
				}
			}
			_iter_next_4640760384:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640760384; }
			_iter_end_4640760384:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4640761504:;
			{
				this->self->_method_set_current_file(_11262c360_f);
				if ((!(this->self->_method_check_type_alias_decls()))) {
					return;
				}
			}
			_iter_next_4640761504:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640761504; }
			_iter_end_4640761504:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4640765520:;
			{
				this->self->_method_set_current_file(_11262c360_f);
				if ((!(this->self->_method_check_trait_decls()))) {
					return;
				}
			}
			_iter_next_4640765520:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640765520; }
			_iter_end_4640765520:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4640769312:;
			{
				this->self->_method_set_current_file(_11262c360_f);
				if ((!(this->self->_method_check_global_decls()))) {
					return;
				}
			}
			_iter_next_4640769312:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640769312; }
			_iter_end_4640769312:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4640773264:;
			{
				this->self->_method_set_current_file(_11262c360_f);
				if ((!(this->self->_method_check_fn_decls()))) {
					return;
				}
			}
			_iter_next_4640773264:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640773264; }
			_iter_end_4640773264:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4640776928:;
			{
				this->self->_method_set_current_file(_11262c360_f);
				if ((!(this->self->_method_check_struct_decls()))) {
					return;
				}
			}
			_iter_next_4640776928:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640776928; }
			_iter_end_4640776928:;
		}
	}
	this->self->_method_check_package_derives();
}



inline void _11262c360_Sema::_method_check_data_for_type_inference(jule::Ref<_121dedce0_Data> _186048_d,_111613f20_Token _186058_err_token) {
	{
		if (!((_186048_d->_method_is_nil()))) { goto _case_end_4640787424; }
		_case_begin_4640787424:;
		{
			(*this)._method_push_err(_186058_err_token,jule::Str("nil_for_type_inference", 22),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4640787168;
		_case_end_4640787424:;
		if (!((_186048_d->_method_is_void()))) { goto _case_end_4640787536; }
		_case_begin_4640787536:;
		{
			(*this)._method_push_err(_186058_err_token,jule::Str("void_for_type_inreference", 25),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4640787168;
		_case_end_4640787536:;
		_match_end_4640787168:;
	}
}



inline void _11262c360_Sema::_method_check_var(jule::Ref<_1320e22c0_Var> _187033_v) {
	if (_187033_v->_field_cpp_linked) {
		return;
	}
	if (_187033_v->_method_is_type_inferred()) {
		_187033_v->_field_kind=jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),_187033_v->_field_value->_field_data->_field_kind));
		this->self->_method_check_data_for_type_inference(_187033_v->_field_value->_field_data,_187033_v->_field_value->_field_expr->_field_token);
	} else {
		jule::Ref<_1217f7750_Arr> _188221_arr = _187033_v->_field_kind->_field_kind->_method_arr();
		if (jule::real(_188221_arr)) {
			if (_188221_arr->_field_auto) {
				jule::Ref<_1217f7750_Arr> _188525_data_arr = _187033_v->_field_value->_field_data->_field_kind->_method_arr();
				if (jule::real(_188525_data_arr)) {
					_188221_arr->_field_n=_188525_data_arr->_field_n;
				}
			}
		}
		this->self->_method_check_assign_type(_187033_v->_field_kind->_field_kind,_187033_v->_field_value->_field_data,_187033_v->_field_value->_field_expr->_field_token,false);
	}
	this->self->_method_check_validity_for_init_expr(_187033_v->_field_mutable,_187033_v->_field_reference,_187033_v->_field_kind->_field_kind,_187033_v->_field_value->_field_data,_187033_v->_field_value->_field_expr->_field_token);
	if ((!(_187033_v->_field_constant))) {
		jule::drop(_187033_v->_field_value->_field_data->_field_constant);
	}
}



inline void _11262c360_Sema::_method_check_type_var(jule::Ref<_1320e22c0_Var> _190838_decl,jule::Trait<_112f89930_Lookup> _190850_l) {
	if (_190838_decl->_field_cpp_linked || (!(_190838_decl->_method_is_initialized()))) {
		return;
	}
	if (jule::real(_190838_decl->_field_kind)) {
		_190838_decl->_field_value->_field_data=this->self->_method_evalpd(_190838_decl->_field_value->_field_expr,_190850_l,_190838_decl->_field_kind->_field_kind,_190838_decl);
	} else {
		_190838_decl->_field_value->_field_data=this->self->_method_evalpd(_190838_decl->_field_value->_field_expr,_190850_l,jule::new_ref<_1217f7750_TypeKind>(),_190838_decl);
	}
	if ((!(jule::real(_190838_decl->_field_value->_field_data)))) {
		return;
	}
	this->self->_method_check_var(_190838_decl);
}



inline void _11262c360_Sema::_method_check_global_types(void) {
	jule::Int _192917_i = 0LL;
	_iter_begin_4640831984:;
	if (!(_192917_i < this->self->_field_file->_field_vars._method_len())) { goto _iter_end_4640831984; }
	{
		jule::Ref<_1320e22c0_Var> _193121_decl = this->self->_field_file->_field_vars._method_at(_192917_i);
		this->self->_method_check_type_var(_193121_decl,this->self);
	}
	_iter_next_4640831984:;
	(_192917_i)++;
	goto _iter_begin_4640831984;
	_iter_end_4640831984:;
	_192917_i=0LL;
	_iter_begin_4640836512:;
	if (!(_192917_i < this->self->_field_file->_field_vars._method_len())) { goto _iter_end_4640836512; }
	{
		jule::Ref<_1320e22c0_Var> _193821_decl = this->self->_field_file->_field_vars._method_at(_192917_i);
		if (_193821_decl->_method_is_initialized() && (_193821_decl->_field_depends.len() > 0LL)) {
			this->self->_method_check_type_var(_193821_decl,this->self);
		}
	}
	_iter_next_4640836512:;
	(_192917_i)++;
	goto _iter_begin_4640836512;
	_iter_end_4640836512:;
}



inline void _11262c360_Sema::_method_check_type_method(jule::Ref<_11209db80_StructIns> _194541_strct,jule::Ref<_112446fb0_Fn> _194564_f) {
	if (_194564_f->_field_cpp_linked) {
		return;
	}
	if (_194564_f->_field_generics.len() > 0LL) {
		return;
	}
	if (_194564_f->_field_instances.len() == 0LL) {
		jule::Ref<_112446fb0_FnIns> _195621_ins = _194564_f->_method_instance();
		_195621_ins->_field_owner=_194541_strct;
		_194564_f->_method_append_instance(_195621_ins);
		this->self->_method_reload_fn_ins_types(_195621_ins);
		_195621_ins->_field_reloaded=true;
	}
	{
		auto __julec_range_expr = _194564_f->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_FnIns> _11262c360_ins = *__julec_range_begin;
			_iter_begin_4640857536:;
			{
				if (_11262c360_ins->_field_scope->_field_stmts._method_len() > 0LL) {
					goto _iter_next_4640857536;
				}
				this->self->_method_check_fn_ins(_11262c360_ins);
			}
			_iter_next_4640857536:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_ins = *__julec_range_begin; goto _iter_begin_4640857536; }
			_iter_end_4640857536:;
		}
	}
}



inline void _11262c360_Sema::_method_check_type_struct(jule::Ref<_11209db80_Struct> _197241_strct) {
	if (_197241_strct->_field_cpp_linked) {
		return;
	}
	if ((_197241_strct->_field_generics.len() == 0LL) && (_197241_strct->_field_instances.len() == 0LL)) {
		jule::Ref<_11209db80_StructIns> _197821_ins = _197241_strct->_method_instance();
		_197821_ins->_field_checked=true;
		_197241_strct->_method_append_instance(_197821_ins);
	}
	{
		auto __julec_range_expr = _197241_strct->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_StructIns> _11262c360_ins = *__julec_range_begin;
			_iter_begin_4640873184:;
			{
				{
					auto __julec_range_expr = _11262c360_ins->_field_methods;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_112446fb0_Fn> _11262c360_f = *__julec_range_begin;
						_iter_begin_4640875728:;
						{
							this->self->_method_check_type_method(_11262c360_ins,_11262c360_f);
						}
						_iter_next_4640875728:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4640875728; }
						_iter_end_4640875728:;
					}
				}
			}
			_iter_next_4640873184:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_ins = *__julec_range_begin; goto _iter_begin_4640873184; }
			_iter_end_4640873184:;
		}
	}
}



inline void _11262c360_Sema::_method_check_struct_types(void) {
	jule::Int _199117_i = 0LL;
	_iter_begin_4640876896:;
	if (!(_199117_i < this->self->_field_file->_field_structs._method_len())) { goto _iter_end_4640876896; }
	{
		jule::Ref<_11209db80_Struct> _199321_strct = this->self->_field_file->_field_structs._method_at(_199117_i);
		this->self->_method_check_type_struct(_199321_strct);
	}
	_iter_next_4640876896:;
	(_199117_i)++;
	goto _iter_begin_4640876896;
	_iter_end_4640876896:;
}



inline void _11262c360_Sema::_method_check_rets(jule::Ref<_112446fb0_FnIns> _199833_f) {
	if (_199833_f->_field_decl->_method_is_void()) {
		return;
	}
	jule::Bool _200313_ok = _11262c360_has_ret(_199833_f->_field_scope);
	if ((!(_200313_ok))) {
		(*this)._method_push_err(_199833_f->_field_decl->_field_token,jule::Str("missing_ret", 11),jule::Slice<jule::Any>({}));
	}
}



inline void _11262c360_Sema::_method_check_fn_ins_sc(jule::Ref<_112446fb0_FnIns> _200938_f,jule::Ref<_1126288e0_ScopeChecker> _200953_sc) {
	if (_200938_f->_field_decl->_field_cpp_linked) {
		return;
	}
	jule::Slice<jule::Ref<_1320e22c0_Var>> _201417_vars = _11262c360_build_ret_vars(_200938_f);
	_200953_sc->_field_table->_field_vars._method_append(_201417_vars);
	_200953_sc->_field_table->_field_vars._method_append(_11262c360_build_param_vars(_200938_f));
	_200953_sc->_field_table->_field_type_aliases._method_append(_11262c360_build_generic_type_aliases(_200938_f));
	_200953_sc->_method_check(_200938_f->_field_decl->_field_scope,_200938_f->_field_scope);
	if (_201417_vars.len() > 0LL) {
		{
			auto __julec_range_expr = _201417_vars;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1320e22c0_Var> _11262c360_v = *__julec_range_begin;
				_iter_begin_4640906608:;
				{
					_200938_f->_field_scope->_field_stmts._method_push_front(jule::Any(_11262c360_v));
				}
				_iter_next_4640906608:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _11262c360_v = *__julec_range_begin; goto _iter_begin_4640906608; }
				_iter_end_4640906608:;
			}
		}
	}
	(*this)._method_check_rets(_200938_f);
}



inline void _11262c360_Sema::_method_check_fn_ins(jule::Ref<_112446fb0_FnIns> _203235_f) {
	if (_203235_f->_field_decl->_field_cpp_linked) {
		return;
	}
	jule::Ref<_1320e2330_SymbolTable> _203717_old = _203235_f->_field_decl->_field_sema->_field_file;
	__JULE_DEFER({
		_203235_f->_field_decl->_field_sema->_method_set_current_file(_203717_old);
	});
	jule::Ref<_1320e2330_SymbolTable> _203917_file = _11262c360_find_file(_203235_f->_field_decl->_field_sema->_field_files,_203235_f->_field_decl->_field_token._field_file);
	if (jule::real(_203917_file)) {
		_203235_f->_field_decl->_field_sema->_method_set_current_file(_203917_file);
	}
	jule::Ref<_1126288e0_ScopeChecker> _204417_sc = _1126288e0_new_scope_checker(_203235_f->_field_decl->_field_sema,_203235_f);
	(*this)._method_check_fn_ins_sc(_203235_f,_204417_sc);
	if ((_203235_f->_field_decl->_field_sema).alloc != (&((*this)))) {
		(*this)._field_errors=append((*this)._field_errors,_203235_f->_field_decl->_field_sema->_field_errors);
	}
}



inline void _11262c360_Sema::_method_check_type_fn(jule::Ref<_112446fb0_Fn> _205237_f) {
	if (_205237_f->_field_cpp_linked) {
		return;
	}
	if (_205237_f->_field_generics.len() > 0LL) {
		return;
	}
	{
		auto __julec_range_expr = _205237_f->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_FnIns> _11262c360_ins = *__julec_range_begin;
			_iter_begin_4641016848:;
			{
				this->self->_method_check_fn_ins(_11262c360_ins);
			}
			_iter_next_4641016848:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_ins = *__julec_range_begin; goto _iter_begin_4641016848; }
			_iter_end_4641016848:;
		}
	}
}



inline void _11262c360_Sema::_method_precheck_type_fn(jule::Ref<_112446fb0_Fn> _206740_f) {
	if (_206740_f->_field_cpp_linked) {
		return;
	}
	if (_206740_f->_field_generics.len() > 0LL) {
		return;
	}
	if (_206740_f->_field_instances.len() == 0LL) {
		jule::Ref<_112446fb0_FnIns> _207821_ins = _206740_f->_method_instance();
		_206740_f->_field_instances=append(_206740_f->_field_instances,jule::Slice<jule::Ref<_112446fb0_FnIns>>({_207821_ins}));
		this->self->_method_reload_fn_ins_types(_207821_ins);
		_207821_ins->_field_reloaded=true;
	}
}



inline jule::Bool _11262c360_Sema::_method_precheck_fn_types(void) {
	jule::Bool _208639_ok = jule::Bool();
	jule::Int _208717_i = 0LL;
	_iter_begin_4641035312:;
	if (!(_208717_i < this->self->_field_file->_field_funcs._method_len())) { goto _iter_end_4641035312; }
	{
		jule::Ref<_112446fb0_Fn> _208921_decl = this->self->_field_file->_field_funcs._method_at(_208717_i);
		this->self->_method_precheck_type_fn(_208921_decl);
	}
	_iter_next_4641035312:;
	(_208717_i)++;
	goto _iter_begin_4641035312;
	_iter_end_4641035312:;
	_208639_ok = true;
	return _208639_ok;
}



inline jule::Bool _11262c360_Sema::_method_check_fn_types(void) {
	jule::Bool _209736_ok = jule::Bool();
	jule::Int _209817_i = 0LL;
	_iter_begin_4641044944:;
	if (!(_209817_i < this->self->_field_file->_field_funcs._method_len())) { goto _iter_end_4641044944; }
	{
		jule::Ref<_112446fb0_Fn> _210021_decl = this->self->_field_file->_field_funcs._method_at(_209817_i);
		this->self->_method_check_type_fn(_210021_decl);
	}
	_iter_next_4641044944:;
	(_209817_i)++;
	goto _iter_begin_4641044944;
	_iter_end_4641044944:;
	_209736_ok = true;
	return _209736_ok;
}



inline void _11262c360_Sema::_method_check_package_types(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4641052576:;
			{
				this->self->_method_set_current_file(_11262c360_f);
				this->self->_method_check_global_types();
			}
			_iter_next_4641052576:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4641052576; }
			_iter_end_4641052576:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4641053584:;
			{
				this->self->_method_set_current_file(_11262c360_f);
				this->self->_method_precheck_fn_types();
			}
			_iter_next_4641053584:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4641053584; }
			_iter_end_4641053584:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4641059712:;
			{
				this->self->_method_set_current_file(_11262c360_f);
				this->self->_method_check_fn_types();
			}
			_iter_next_4641059712:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4641059712; }
			_iter_end_4641059712:;
		}
	}
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_f = *__julec_range_begin;
			_iter_begin_4641060432:;
			{
				this->self->_method_set_current_file(_11262c360_f);
				this->self->_method_check_struct_types();
			}
			_iter_next_4641060432:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_f = *__julec_range_begin; goto _iter_begin_4641060432; }
			_iter_end_4641060432:;
		}
	}
}



inline void _11262c360_Sema::_method_set_file_sema_fields(void) {
	jule::Int _213217_i = 0LL;
	_iter_begin_4641067312:;
	if (!(_213217_i < this->self->_field_file->_field_funcs._method_len())) { goto _iter_end_4641067312; }
	{
		jule::Ref<_112446fb0_Fn> _213421_f = this->self->_field_file->_field_funcs._method_at(_213217_i);
		_213421_f->_field_sema=this->self;
	}
	_iter_next_4641067312:;
	(_213217_i)++;
	goto _iter_begin_4641067312;
	_iter_end_4641067312:;
	_213217_i=0LL;
	_iter_begin_4641072608:;
	if (!(_213217_i < this->self->_field_file->_field_structs._method_len())) { goto _iter_end_4641072608; }
	{
		jule::Ref<_11209db80_Struct> _214021_st = this->self->_field_file->_field_structs._method_at(_213217_i);
		_214021_st->_field_sema=this->self;
	}
	_iter_next_4641072608:;
	(_213217_i)++;
	goto _iter_begin_4641072608;
	_iter_end_4641072608:;
}



inline void _11262c360_Sema::_method_set_sema_fields(void) {
	{
		auto __julec_range_expr = this->self->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_file = *__julec_range_begin;
			_iter_begin_4641080288:;
			{
				this->self->_method_set_current_file(_11262c360_file);
				this->self->_method_set_file_sema_fields();
			}
			_iter_next_4641080288:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_file = *__julec_range_begin; goto _iter_begin_4641080288; }
			_iter_end_4641080288:;
		}
	}
}



inline void _11262c360_Sema::_method_check(jule::Slice<jule::Ref<_1320e2330_SymbolTable>> _215229_files) {
	this->self->_field_files=_215229_files;
	this->self->_method_check_imports();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_check_enums();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_set_sema_fields();
	this->self->_method_impl_impls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_check_package_decls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_check_package_types();
}







std::ostream &operator<<(std::ostream &_Stream, const _11262c360_Sema &_Src) {
	_Stream << "Sema{";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "files:" << _Src._field_files << ", ";
	_Stream << "file:" << _Src._field_file;
	_Stream << "}";
	return _Stream;
}



inline void _121807de0_DynamicTypeAnnotation::_method_push_generic(jule::Ref<_1217f7750_TypeKind> _53635_k,jule::Int _53649_i) {
	(*this)._field_f->_field_generics[static_cast<jule::Int>(_53649_i)]=_53635_k;
}



inline jule::Bool _121807de0_DynamicTypeAnnotation::_method_annotate_prim(jule::Ref<_1217f7750_TypeKind> _54043_k) {
	jule::Bool _54059_ok = jule::Bool();
	jule::Str _54113_kind = (*((*this)._field_k))->_method_to_str();
	{
		auto __julec_range_expr = (*this)._field_f->_field_decl->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121807de0_i = 0;
			jule::Ref<_111612b20_GenericDecl> _121807de0_g = *__julec_range_begin;
			_iter_begin_4855106256:;
			{
				if (_54113_kind != _121807de0_g->_field_ident) {
					goto _iter_next_4855106256;
				}
				jule::Ref<_1217f7750_TypeKind> _54717_t = (*this)._field_f->_field_generics[static_cast<jule::Int>(_121807de0_i)];
				{
					if (!(((!(jule::real(_54717_t)))))) { goto _case_end_4855112320; }
					_case_begin_4855112320:;
					{
						(*this)._method_push_generic(_54043_k,_121807de0_i);
					}
					goto _match_end_4855112112;
					_case_end_4855112320:;
					if (!((_54717_t->_method_to_str() != _54043_k->_method_to_str()))) { goto _case_end_4855112432; }
					_case_begin_4855112432:;
					{
						_54059_ok = false;
						return _54059_ok;
					}
					goto _match_end_4855112112;
					_case_end_4855112432:;
					_match_end_4855112112:;
				}
				(*((*this)._field_k))->_field_kind=_54043_k->_field_kind;
				_54059_ok = true;
				return _54059_ok;
			}
			_iter_next_4855106256:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121807de0_i; _121807de0_g = *__julec_range_begin; goto _iter_begin_4855106256; }
			_iter_end_4855106256:;
		}
	}
	_54059_ok = false;
	return _54059_ok;
}



inline jule::Bool _121807de0_DynamicTypeAnnotation::_method_annotate_slc(jule::Ref<_1217f7750_TypeKind> _56442_k) {
	jule::Bool _56458_ok = jule::Bool();
	jule::Ref<_1217f7750_Slc> _56517_pslc = (*((*this)._field_k))->_method_slc();
	if ((!(jule::real(_56517_pslc)))) {
		_56458_ok = false;
		return _56458_ok;
	}
	jule::Ref<_1217f7750_Slc> _57017_slc = _56442_k->_method_slc();
	_1217f7750_TypeKind* _57117_kk = (_56517_pslc->_field_elem).alloc;
	(*this)._field_k=(&(_57117_kk));
	_56458_ok = (*this)._method_annotate_kind(_57017_slc->_field_elem);
	return _56458_ok;
}



inline jule::Bool _121807de0_DynamicTypeAnnotation::_method_check_map_key(_1217f7750_TypeKind** _57643_k,jule::Ref<_1217f7750_TypeKind> _57662_ck) {
	jule::Bool _57679_ok = jule::Bool();
	_1217f7750_TypeKind** _57717_old = (*this)._field_k;
	(*this)._field_k=_57643_k;
	_57679_ok=(*this)._method_annotate_kind(_57662_ck);
	(*this)._field_k=_57717_old;
	_57679_ok = _57679_ok;
	return _57679_ok;
}



inline jule::Bool _121807de0_DynamicTypeAnnotation::_method_annotate_map(jule::Ref<_1217f7750_TypeKind> _58442_k) {
	jule::Bool _58458_ok = jule::Bool();
	jule::Ref<_1217f7750_Map> _58517_pmap = (*((*this)._field_k))->_method_map();
	if ((!(jule::real(_58517_pmap)))) {
		_58458_ok = false;
		return _58458_ok;
	}
	jule::Ref<_1217f7750_Map> _59017_m = _58442_k->_method_map();
	_1217f7750_TypeKind* _59217_key = (_58517_pmap->_field_key).alloc;
	_1217f7750_TypeKind* _59317_val = (_58517_pmap->_field_val).alloc;
	_58458_ok = (*this)._method_check_map_key((&(_59217_key)),_59017_m->_field_key) && (*this)._method_check_map_key((&(_59317_val)),_59017_m->_field_val);
	return _58458_ok;
}



inline jule::Bool _121807de0_DynamicTypeAnnotation::_method_annotate_fn(jule::Ref<_1217f7750_TypeKind> _59741_k) {
	jule::Bool _59757_ok = jule::Bool();
	jule::Ref<_112446fb0_FnIns> _59817_pf = (*((*this)._field_k))->_method_fnc();
	if ((!(jule::real(_59817_pf)))) {
		_59757_ok = false;
		return _59757_ok;
	}
	jule::Ref<_112446fb0_FnIns> _60217_f = _59741_k->_method_fnc();
	{
		if (!((_59817_pf->_field_params.len() != _60217_f->_field_params.len()))) { goto _case_end_4855159792; }
		_case_begin_4855159792:;
		{
			_59757_ok = false;
			return _59757_ok;
		}
		goto _match_end_4855159344;
		_case_end_4855159792:;
		if (!((_59817_pf->_field_decl->_method_is_void() != _60217_f->_field_decl->_method_is_void()))) { goto _case_end_4855159904; }
		_case_begin_4855159904:;
		{
			_59757_ok = false;
			return _59757_ok;
		}
		goto _match_end_4855159344;
		_case_end_4855159904:;
		_match_end_4855159344:;
	}
	_59757_ok=true;
	_1217f7750_TypeKind** _61217_old = (*this)._field_k;
	{
		auto __julec_range_expr = _60217_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121807de0_i = 0;
			jule::Ref<_112446fb0_ParamIns> _121807de0_fp = *__julec_range_begin;
			_iter_begin_4855166560:;
			{
				_1217f7750_TypeKind* _61421_pfp = (_59817_pf->_field_params[static_cast<jule::Int>(_121807de0_i)]->_field_kind).alloc;
				(*this)._field_k=(&(_61421_pfp));
				_59757_ok=(*this)._method_annotate_kind(_121807de0_fp->_field_kind) && _59757_ok;
			}
			_iter_next_4855166560:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121807de0_i; _121807de0_fp = *__julec_range_begin; goto _iter_begin_4855166560; }
			_iter_end_4855166560:;
		}
	}
	if ((!(_59817_pf->_field_decl->_method_is_void()))) {
		_1217f7750_TypeKind* _62021_result = (_59817_pf->_field_result).alloc;
		(*this)._field_k=(&(_62021_result));
		_59757_ok=(*this)._method_annotate_kind(_60217_f->_field_result) && _59757_ok;
	}
	(*this)._field_k=_61217_old;
	_59757_ok = _59757_ok;
	return _59757_ok;
}



inline jule::Bool _121807de0_DynamicTypeAnnotation::_method_annotate_ptr(jule::Ref<_1217f7750_TypeKind> _62942_k) {
	jule::Bool _62958_ok = jule::Bool();
	jule::Ref<_1217f7750_Ptr> _63017_pptr = (*((*this)._field_k))->_method_ptr();
	if ((!(jule::real(_63017_pptr)))) {
		_62958_ok = false;
		return _62958_ok;
	}
	jule::Ref<_1217f7750_Ptr> _63517_ptr = _62942_k->_method_ptr();
	_1217f7750_TypeKind* _63617_cpptr = (_63017_pptr->_field_elem).alloc;
	(*this)._field_k=(&(_63617_cpptr));
	_62958_ok = (*this)._method_annotate_kind(_63517_ptr->_field_elem);
	return _62958_ok;
}



inline jule::Bool _121807de0_DynamicTypeAnnotation::_method_annotate_any(jule::Ref<_1217f7750_TypeKind> _64142_k) {
	jule::Bool _64158_ok = jule::Bool();
	jule::Str _64213_kind = (*((*this)._field_k))->_method_to_str();
	{
		auto __julec_range_expr = (*this)._field_f->_field_decl->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121807de0_i = 0;
			jule::Ref<_111612b20_GenericDecl> _121807de0_g = *__julec_range_begin;
			_iter_begin_4855196336:;
			{
				if (_64213_kind != _121807de0_g->_field_ident) {
					goto _iter_next_4855196336;
				}
				jule::Ref<_1217f7750_TypeKind> _64817_t = (*this)._field_f->_field_generics[static_cast<jule::Int>(_121807de0_i)];
				{
					if (!(((!(jule::real(_64817_t)))))) { goto _case_end_4855202400; }
					_case_begin_4855202400:;
					{
						(*this)._method_push_generic(_64142_k,_121807de0_i);
					}
					goto _match_end_4855202192;
					_case_end_4855202400:;
					if (!((_64817_t->_method_to_str() != _64142_k->_method_to_str()))) { goto _case_end_4855202512; }
					_case_begin_4855202512:;
					{
						_64158_ok = false;
						return _64158_ok;
					}
					goto _match_end_4855202192;
					_case_end_4855202512:;
					_match_end_4855202192:;
				}
				(*((*this)._field_k))->_field_kind=_64142_k->_field_kind;
				_64158_ok = true;
				return _64158_ok;
			}
			_iter_next_4855196336:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121807de0_i; _121807de0_g = *__julec_range_begin; goto _iter_begin_4855196336; }
			_iter_end_4855196336:;
		}
	}
	_64158_ok = false;
	return _64158_ok;
}



inline jule::Bool _121807de0_DynamicTypeAnnotation::_method_annotate_kind(jule::Ref<_1217f7750_TypeKind> _66543_k) {
	jule::Bool _66559_ok = jule::Bool();
	if (((*this)._field_k == nullptr) || ((*((*this)._field_k)) == nullptr)) {
		return _66559_ok;
	}
	{
		if (!(((*this)._method_annotate_any(_66543_k)))) { goto _case_end_4855214928; }
		_case_begin_4855214928:;
		{
			_66559_ok = true;
			return _66559_ok;
		}
		goto _match_end_4855211120;
		_case_end_4855214928:;
		if (!((jule::real(_66543_k->_method_prim())))) { goto _case_end_4855215904; }
		_case_begin_4855215904:;
		{
			_66559_ok = (*this)._method_annotate_prim(_66543_k);
			return _66559_ok;
		}
		goto _match_end_4855211120;
		_case_end_4855215904:;
		if (!((jule::real(_66543_k->_method_slc())))) { goto _case_end_4855216016; }
		_case_begin_4855216016:;
		{
			_66559_ok = (*this)._method_annotate_slc(_66543_k);
			return _66559_ok;
		}
		goto _match_end_4855211120;
		_case_end_4855216016:;
		if (!((jule::real(_66543_k->_method_map())))) { goto _case_end_4855216128; }
		_case_begin_4855216128:;
		{
			_66559_ok = (*this)._method_annotate_map(_66543_k);
			return _66559_ok;
		}
		goto _match_end_4855211120;
		_case_end_4855216128:;
		if (!((jule::real(_66543_k->_method_fnc())))) { goto _case_end_4855214192; }
		_case_begin_4855214192:;
		{
			_66559_ok = (*this)._method_annotate_fn(_66543_k);
			return _66559_ok;
		}
		goto _match_end_4855211120;
		_case_end_4855214192:;
		if (!((jule::real(_66543_k->_method_ptr())))) { goto _case_end_4855214304; }
		_case_begin_4855214304:;
		{
			_66559_ok = (*this)._method_annotate_ptr(_66543_k);
			return _66559_ok;
		}
		goto _match_end_4855211120;
		_case_end_4855214304:;
		_case_begin_4855212784:;
		{
			_66559_ok = false;
			return _66559_ok;
		}
		goto _match_end_4855211120;
		_case_end_4855212784:;
		_match_end_4855211120:;
	}
}



inline jule::Bool _121807de0_DynamicTypeAnnotation::_method_annotate(void) {
	jule::Bool _68136_ok = jule::Bool();
	_1217f7750_TypeKind* _68217_pk = ((*this)._field_p->_field_kind).alloc;
	(*this)._field_k=(&(_68217_pk));
	_68136_ok = (*this)._method_annotate_kind((*this)._field_a->_field_kind);
	return _68136_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _121807de0_DynamicTypeAnnotation &_Src) {
	_Stream << "DynamicTypeAnnotation{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "a:" << _Src._field_a << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "k:" << _Src._field_k;
	_Stream << "}";
	return _Stream;
}



inline void _121807de0_StructLitChecker::_method_push_err(_111613f20_Token _90227_token,jule::Str _90241_key,jule::Slice<jule::Any> _90251_args) {
	(*this)._field_e->_method_push_err(_90227_token,_90241_key,_90251_args);
}



inline void _121807de0_StructLitChecker::_method_push_match(jule::Ref<_11209db80_FieldIns> _90633_f,jule::Ref<_121dedce0_Data> _90651_d,_111613f20_Token _90661_error_token) {
	(*this)._field_args=append((*this)._field_args,jule::Slice<jule::Ref<_112673500_StructArgExprModel>>({jule::new_struct<_112673500_StructArgExprModel>(new( std::nothrow ) _112673500_StructArgExprModel(_90633_f,_90651_d->_field_model))}));
	
	(*this)._field_e->_field_s->_method_check_validity_for_init_expr(_90633_f->_field_decl->_field_mutable,false,_90633_f->_field_kind,_90651_d,_90661_error_token);
	(*this)._field_e->_field_s->_method_check_assign_type(_90633_f->_field_kind,_90651_d,_90661_error_token,false);
}



inline void _121807de0_StructLitChecker::_method_check_pair(jule::Ref<_111612b20_FieldExprPair> _91733_pair,jule::Slice<jule::Any> _91759_exprs) {
	jule::Ref<_11209db80_FieldIns> _91917_f = (*this)._field_s->_method_find_field(_91733_pair->_field_field._field_kind);
	if ((!(jule::real(_91917_f)))) {
		(*this)._method_push_err(_91733_pair->_field_field,jule::Str("ident_not_exist", 15),jule::Slice<jule::Any>({jule::Any(_91733_pair->_field_field._field_kind)}));
		return;
	}
	if ((!((*this)._field_e->_field_s->_method_is_accessible_define(_91917_f->_field_decl->_field_public,_91917_f->_field_decl->_field_token)))) {
		(*this)._method_push_err(_91733_pair->_field_field,jule::Str("ident_is_not_accessible", 23),jule::Slice<jule::Any>({jule::Any(_91733_pair->_field_field._field_kind)}));
	}
	_julec_label_dup_lookup:;
	{
		auto __julec_range_expr = _91759_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _121807de0_expr = *__julec_range_begin;
			_iter_begin_4855435904:;
			{
				{
					auto _match_expr{ _121807de0_expr };
					if (!(_match_expr.type_is<jule::Ref<_111612b20_FieldExprPair>>())) { goto _case_end_4855437104; }
					_case_begin_4855437104:;
					{
						jule::Ref<_111612b20_FieldExprPair> _93425_dpair = _121807de0_expr.operator jule::Ref<_111612b20_FieldExprPair>();
						{
							if (!((_91733_pair == _93425_dpair))) { goto _case_end_4855441008; }
							_case_begin_4855441008:;
							{
								goto _iter_end_4855435904;
							}
							goto _match_end_4855440752;
							_case_end_4855441008:;
							if (!((_91733_pair->_field_field._field_kind == _93425_dpair->_field_field._field_kind))) { goto _case_end_4855441120; }
							_case_begin_4855441120:;
							{
								(*this)._method_push_err(_91733_pair->_field_field,jule::Str("already_has_expr", 16),jule::Slice<jule::Any>({jule::Any(_91733_pair->_field_field._field_kind)}));
								goto _iter_end_4855435904;
							}
							goto _match_end_4855440752;
							_case_end_4855441120:;
							_match_end_4855440752:;
						}
					}
					goto _match_end_4855436352;
					_case_end_4855437104:;
					_match_end_4855436352:;
				}
			}
			_iter_next_4855435904:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _121807de0_expr = *__julec_range_begin; goto _iter_begin_4855435904; }
			_iter_end_4855435904:;
		}
	}
	jule::Ref<_1217f7750_TypeKind> _94617_prefix = (*this)._field_e->_field_prefix;
	__JULE_DEFER({
		(*this)._field_e->_field_prefix=_94617_prefix;
	});
	(*this)._field_e->_field_prefix=_91917_f->_field_kind;
	jule::Ref<_121dedce0_Data> _95017_d = (*this)._field_e->_method_eval_expr_kind(_91733_pair->_field_expr);
	if ((!(jule::real(_95017_d)))) {
		return;
	}
	(*this)._method_push_match(_91917_f,_95017_d,_91733_pair->_field_field);
}



inline jule::Bool _121807de0_StructLitChecker::_method_ready_exprs(jule::Slice<jule::Any> _95734_exprs) {
	jule::Bool _95817_ok = true;
	{
		auto __julec_range_expr = _95734_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121807de0_i = 0;
			jule::Any _121807de0_expr = *__julec_range_begin;
			_iter_begin_4855458192:;
			{
				{
					auto _match_expr{ _121807de0_expr };
					if (!(_match_expr.type_is<jule::Ref<_111612b20_KeyValPair>>())) { goto _case_end_4855460624; }
					_case_begin_4855460624:;
					{
						jule::Ref<_111612b20_KeyValPair> _96225_pair = _121807de0_expr.operator jule::Ref<_111612b20_KeyValPair>();
						{
							auto _match_expr{ _96225_pair->_field_key };
							if (!(_match_expr.type_is<jule::Ref<_111612b20_IdentExpr>>())) { goto _case_end_4855466032; }
							goto _match_end_4855463872;
							_case_end_4855466032:;
							_case_begin_4855464784:;
							{
								(*this)._method_push_err(_96225_pair->_field_colon,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
								_95817_ok=false;
								goto _iter_next_4855458192;
							}
							goto _match_end_4855463872;
							_case_end_4855464784:;
							_match_end_4855463872:;
						}
						_95734_exprs[static_cast<jule::Int>(_121807de0_i)]=jule::Any(jule::new_struct<_111612b20_FieldExprPair>(new( std::nothrow ) _111612b20_FieldExprPair(_96225_pair->_field_key.operator jule::Ref<_111612b20_IdentExpr>()->_field_token,_96225_pair->_field_val)));
					}
					goto _match_end_4855460496;
					_case_end_4855460624:;
					_match_end_4855460496:;
				}
			}
			_iter_next_4855458192:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121807de0_i; _121807de0_expr = *__julec_range_begin; goto _iter_begin_4855458192; }
			_iter_end_4855458192:;
		}
	}
	return _95817_ok;
}



inline void _121807de0_StructLitChecker::_method_check(jule::Slice<jule::Any> _98328_exprs) {
	if (_98328_exprs.len() == 0LL) {
		return;
	}
	if ((!((*this)._method_ready_exprs(_98328_exprs)))) {
		return;
	}
	jule::Bool _99217_paired = false;
	{
		auto __julec_range_expr = _98328_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121807de0_i = 0;
			jule::Any _121807de0_expr = *__julec_range_begin;
			_iter_begin_4855477984:;
			{
				{
					auto _match_expr{ _121807de0_expr };
					if (!(_match_expr.type_is<jule::Ref<_111612b20_FieldExprPair>>())) { goto _case_end_4855481104; }
					_case_begin_4855481104:;
					{
						jule::Ref<_111612b20_FieldExprPair> _99625_pair = _121807de0_expr.operator jule::Ref<_111612b20_FieldExprPair>();
						if ((_121807de0_i > 0LL) && (!(_99217_paired))) {
							(*this)._method_push_err(_99625_pair->_field_field,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
						}
						_99217_paired=true;
						(*this)._method_check_pair(_99625_pair,_98328_exprs);
					}
					goto _match_end_4855479376;
					_case_end_4855481104:;
					if (!(_match_expr.type_is<jule::Ref<_111612b20_Expr>>())) { goto _case_end_4855481216; }
					_case_begin_4855481216:;
					{
						jule::Ref<_111612b20_Expr> _100425_e = _121807de0_expr.operator jule::Ref<_111612b20_Expr>();
						if (_99217_paired) {
							(*this)._method_push_err(_100425_e->_field_token,jule::Str("argument_must_target_to_field", 29),jule::Slice<jule::Any>({}));
						}
						if (_121807de0_i >= (*this)._field_s->_field_fields.len()) {
							(*this)._method_push_err(_100425_e->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
							goto _iter_next_4855477984;
						}
						jule::Ref<_11209db80_FieldIns> _101325_field = (*this)._field_s->_field_fields[static_cast<jule::Int>(_121807de0_i)];
						jule::Ref<_1217f7750_TypeKind> _101525_prefix = (*this)._field_e->_field_prefix;
						__JULE_DEFER({
							(*this)._field_e->_field_prefix=_101525_prefix;
						});
						(*this)._field_e->_field_prefix=_101325_field->_field_kind;
						jule::Ref<_121dedce0_Data> _101925_d = (*this)._field_e->_method_eval_expr_kind(_100425_e->_field_kind);
						if ((!(jule::real(_101925_d)))) {
							goto _iter_next_4855477984;
						}
						(*this)._method_push_match(_101325_field,_101925_d,_100425_e->_field_token);
					}
					goto _match_end_4855479376;
					_case_end_4855481216:;
					_match_end_4855479376:;
				}
			}
			_iter_next_4855477984:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121807de0_i; _121807de0_expr = *__julec_range_begin; goto _iter_begin_4855477984; }
			_iter_end_4855477984:;
		}
	}
	if ((!(_99217_paired))) {
		jule::I64 _103017_n = (*this)._field_s->_field_fields.len();
		jule::I64 _103121_diff = _103017_n - _98328_exprs.len();
		{
			if (!((_103121_diff <= 0LL))) { goto _case_end_4855510608; }
			_case_begin_4855510608:;
			{
				return;
			}
			goto _match_end_4855510416;
			_case_end_4855510608:;
			_match_end_4855510416:;
		}
		jule::Str _103721_idents = jule::Str("", 0);
		_iter_begin_4855511104:;
		if (!(_103121_diff > 0LL)) { goto _iter_end_4855511104; }
		{
			_103721_idents+=jule::Str(", ", 2) + (*this)._field_s->_field_fields[static_cast<jule::Int>(_103017_n - _103121_diff)]->_field_decl->_field_ident;
		}
		_iter_next_4855511104:;
		(_103121_diff)--;
		goto _iter_begin_4855511104;
		_iter_end_4855511104:;
		_103721_idents=_103721_idents.slice(static_cast<jule::Int>(2LL));
		(*this)._method_push_err((*this)._field_error_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(_103721_idents)}));
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _121807de0_StructLitChecker &_Src) {
	_Stream << "StructLitChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_1320e22c0_Var> _121807de0_RangeChecker::_method_build_var(jule::Ref<_111612b20_VarDecl> _105628_decl) {
	jule::Ref<_1320e22c0_Var> _105717_v = _112572770_build_var(_105628_decl);
	return _105717_v;
}



inline void _121807de0_RangeChecker::_method_set_size_key(void) {
	if ((!(jule::real((*this)._field_rang->_field_key_a))) || _111613f20_is_ignore_ident((*this)._field_rang->_field_key_a->_field_ident)) {
		return;
	}
	(*this)._field_kind->_field_key_a=(*this)._method_build_var((*this)._field_rang->_field_key_a);
	(*this)._field_kind->_field_key_a->_field_kind=jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("int", 3))))));
}



inline void _121807de0_RangeChecker::_method_check_slice(void) {
	(*this)._method_set_size_key();
	if ((!(jule::real((*this)._field_rang->_field_key_b))) || _111613f20_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	jule::Ref<_1217f7750_Slc> _108017_slc = (*this)._field_d->_field_kind->_method_slc();
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),_108017_slc->_field_elem));
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr((*this)._field_kind->_field_key_b->_field_mutable,(*this)._field_kind->_field_key_b->_field_reference,(*this)._field_kind->_field_key_b->_field_kind->_field_kind,(*this)._field_d,(*this)._field_rang->_field_in_token);
}



inline void _121807de0_RangeChecker::_method_check_array(void) {
	(*this)._method_set_size_key();
	if ((!(jule::real((*this)._field_rang->_field_key_b))) || _111613f20_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	jule::Ref<_1217f7750_Arr> _109717_arr = (*this)._field_d->_field_kind->_method_arr();
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),_109717_arr->_field_elem));
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr((*this)._field_kind->_field_key_b->_field_mutable,(*this)._field_kind->_field_key_b->_field_reference,(*this)._field_kind->_field_key_b->_field_kind->_field_kind,(*this)._field_d,(*this)._field_rang->_field_in_token);
}



inline void _121807de0_RangeChecker::_method_check_map_key_a(void) {
	if ((!(jule::real((*this)._field_rang->_field_key_a))) || _111613f20_is_ignore_ident((*this)._field_rang->_field_key_a->_field_ident)) {
		return;
	}
	jule::Ref<_1217f7750_Map> _111317_m = (*this)._field_d->_field_kind->_method_map();
	(*this)._field_kind->_field_key_a=(*this)._method_build_var((*this)._field_rang->_field_key_a);
	(*this)._field_kind->_field_key_a->_field_kind=jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),_111317_m->_field_key));
	jule::Ref<_121dedce0_Data> _111717_d = jule::new_ref<_121dedce0_Data>((*this)._field_d.get());
	_111717_d->_field_kind=_111317_m->_field_key;
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr((*this)._field_kind->_field_key_a->_field_mutable,(*this)._field_kind->_field_key_a->_field_reference,(*this)._field_kind->_field_key_a->_field_kind->_field_kind,_111717_d,(*this)._field_rang->_field_in_token);
}



inline void _121807de0_RangeChecker::_method_check_map_key_b(void) {
	if ((!(jule::real((*this)._field_rang->_field_key_b))) || _111613f20_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	jule::Ref<_1217f7750_Map> _113217_m = (*this)._field_d->_field_kind->_method_map();
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),_113217_m->_field_val));
	jule::Ref<_121dedce0_Data> _113617_d = jule::new_ref<_121dedce0_Data>((*this)._field_d.get());
	_113617_d->_field_kind=_113217_m->_field_val;
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr((*this)._field_kind->_field_key_b->_field_mutable,(*this)._field_kind->_field_key_b->_field_reference,(*this)._field_kind->_field_key_b->_field_kind->_field_kind,_113617_d,(*this)._field_rang->_field_in_token);
}



inline void _121807de0_RangeChecker::_method_check_map(void) {
	(*this)._method_check_map_key_a();
	(*this)._method_check_map_key_b();
}



inline void _121807de0_RangeChecker::_method_check_str(void) {
	(*this)._method_set_size_key();
	if ((!(jule::real((*this)._field_rang->_field_key_b))) || _111613f20_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("u8", 2))))));
}



inline jule::Bool _121807de0_RangeChecker::_method_check(void) {
	if (jule::real((*this)._field_d->_field_kind->_method_ref())) {
		(*this)._field_d->_field_model=jule::Any(jule::new_struct<_112673500_ExplicitDerefExprModel>(new( std::nothrow ) _112673500_ExplicitDerefExprModel((*this)._field_d->_field_model)));
		(*this)._field_d->_field_kind=(*this)._field_d->_field_kind->_method_ref()->_field_elem;
	}
	{
		if (!((jule::real((*this)._field_d->_field_kind->_method_slc())))) { goto _case_end_4855621536; }
		_case_begin_4855621536:;
		{
			(*this)._method_check_slice();
			return true;
		}
		goto _match_end_4855621248;
		_case_end_4855621536:;
		if (!((jule::real((*this)._field_d->_field_kind->_method_arr())))) { goto _case_end_4855621648; }
		_case_begin_4855621648:;
		{
			(*this)._method_check_array();
			return true;
		}
		goto _match_end_4855621248;
		_case_end_4855621648:;
		if (!((jule::real((*this)._field_d->_field_kind->_method_map())))) { goto _case_end_4855621760; }
		_case_begin_4855621760:;
		{
			(*this)._method_check_map();
			return true;
		}
		goto _match_end_4855621248;
		_case_end_4855621760:;
		_match_end_4855621248:;
	}
	jule::Ref<_1217f7750_Prim> _118713_prim = (*this)._field_d->_field_kind->_method_prim();
	if (jule::real(_118713_prim) && _118713_prim->_method_is_str()) {
		(*this)._method_check_str();
		return true;
	}
	(*this)._field_sc->_field_s->_method_push_err((*this)._field_rang->_field_in_token,jule::Str("iter_range_require_enumerable_expr", 34),jule::Slice<jule::Any>({}));
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _121807de0_RangeChecker &_Src) {
	_Stream << "RangeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "rang:" << _Src._field_rang << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _121dedce0_Data::_method_is_nil(void) {
	return (*this)._field_kind->_method_is_nil();
}



inline jule::Bool _121dedce0_Data::_method_is_void(void) {
	return (*this)._field_kind->_method_is_void();
}



inline jule::Bool _121dedce0_Data::_method_is_const(void) {
	return jule::real((*this)._field_constant);
}







std::ostream &operator<<(std::ostream &_Stream, const _121dedce0_Data &_Src) {
	_Stream << "Data{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "cast_kind:" << _Src._field_cast_kind << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "lvalue:" << _Src._field_lvalue << ", ";
	_Stream << "variadiced:" << _Src._field_variadiced << ", ";
	_Stream << "is_rune:" << _Src._field_is_rune << ", ";
	_Stream << "model:" << _Src._field_model << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "constant:" << _Src._field_constant;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _121dedce0_Value &_Src) {
	_Stream << "Value{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline void _121dedce0_Eval::_method_push_err(_111613f20_Token _28427_token,jule::Str _28441_key,jule::Slice<jule::Any> _28451_args) {
	(*this)._field_s->_field_errors=append((*this)._field_s->_field_errors,jule::Slice<_1316b4080_Log>({_11262c360_compiler_err(_28427_token,_28441_key,_28451_args)}));
}



inline jule::Bool _121dedce0_Eval::_method_is_unsafe(void) {
	return (*this)._field_unsafety;
}



inline jule::Bool _121dedce0_Eval::_method_is_global(void) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_11262c360_Sema>>())) { goto _case_end_4642200272; }
		_case_begin_4642200272:;
		{
			return true;
		}
		goto _match_end_4642198464;
		_case_end_4642200272:;
		_case_begin_4642199184:;
		{
			return false;
		}
		goto _match_end_4642198464;
		_case_end_4642199184:;
		_match_end_4642198464:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_lit_nil(void) {
	jule::Ref<_1131530d0_Const> _30317_constant = _1131530d0_Const::_static_method_new_nil();
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),nullptr)),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_30317_constant),false,_30317_constant));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_lit_str(jule::Ref<_111612b20_LitExpr> _31422_lt) {
	jule::Str _31517_s = _31422_lt->_field_value.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_31422_lt->_field_value.len() - 1LL));
	if (_111613f20_is_raw_str(_31422_lt->_field_value)) {
		_31517_s=_1132be720_to_raw_str(static_cast<jule::Slice<jule::U8>>(_31517_s));
	} else {
		_31517_s=_1132be720_to_str(static_cast<jule::Slice<jule::U8>>(_31517_s));
	}
	jule::Ref<_1131530d0_Const> _32117_constant = _1131530d0_Const::_static_method_new_str(_31517_s);
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("str", 3)))),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_32117_constant),false,_32117_constant));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_lit_bool(jule::Ref<_111612b20_LitExpr> _33523_lit) {
	jule::Ref<_1131530d0_Const> _33617_constant = _1131530d0_Const::_static_method_new_bool(_33523_lit->_field_value == jule::Str("true", 4));
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_33617_constant),false,_33617_constant));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_lit_rune(jule::Ref<_111612b20_LitExpr> _34923_l) {
	
	
	jule::Str _35313_lt = _34923_l->_field_value.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_34923_l->_field_value.len() - 1LL));
	jule::I32 _35413_r = _1132be720_to_rune(static_cast<jule::Slice<jule::U8>>(_35313_lt));
	jule::Ref<_121dedce0_Data> _35517_data = jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::Ref<_1217f7750_TypeKind>(),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,_1131530d0_Const::_static_method_new_i64(static_cast<jule::I64>(_35413_r))));
	jule::Bool _36217_is_byte;
	std::tie(std::ignore,_36217_is_byte) = _1132be720_is_byte_lit(_34923_l->_field_value);
	if (_36217_is_byte) {
		_35517_data->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("u8", 2))));
	} else {
		_35517_data->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i32", 3))));
	}
	_35517_data->_field_model=jule::Any(jule::new_struct<_112673500_RuneExprModel>(new( std::nothrow ) _112673500_RuneExprModel(_35413_r)));
	_35517_data->_field_is_rune=true;
	return _35517_data;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_lit_float(jule::Ref<_111612b20_LitExpr> _37824_l) {
	
	jule::F64 _38114_f;
	std::tie(_38114_f,std::ignore) = _1320824b0_parse_float(_37824_l->_field_value,64LL);
	jule::Ref<_1131530d0_Const> _38217_constant = _1131530d0_Const::_static_method_new_f64(_38114_f);
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("f64", 3)))),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_38217_constant),false,_38217_constant));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_lit_int(jule::Ref<_111612b20_LitExpr> _39622_l) {
	
	jule::Str _39917_lit = _39622_l->_field_value;
	jule::Int _40017_base = 0LL;
	{
		if (!((_39917_lit.has_prefix(jule::Str("0x", 2))))) { goto _case_end_4642263584; }
		_case_begin_4642263584:;
		{
			_39917_lit=_39917_lit.slice(static_cast<jule::Int>(2LL));
			_40017_base=16LL;
		}
		goto _match_end_4642262336;
		_case_end_4642263584:;
		if (!((_39917_lit.has_prefix(jule::Str("0b", 2))))) { goto _case_end_4642263728; }
		_case_begin_4642263728:;
		{
			_39917_lit=_39917_lit.slice(static_cast<jule::Int>(2LL));
			_40017_base=2LL;
		}
		goto _match_end_4642262336;
		_case_end_4642263728:;
		if (!((_39917_lit.has_prefix(jule::Str("0o", 2))))) { goto _case_end_4642263968; }
		_case_begin_4642263968:;
		{
			_39917_lit=_39917_lit.slice(static_cast<jule::Int>(2LL));
			_40017_base=8LL;
		}
		goto _match_end_4642262336;
		_case_end_4642263968:;
		if (!(((_39917_lit[static_cast<jule::Int>(0LL)] == '0') && (_39917_lit.len() > 1LL)))) { goto _case_end_4642264336; }
		_case_begin_4642264336:;
		{
			_39917_lit=_39917_lit.slice(static_cast<jule::Int>(1LL));
			_40017_base=8LL;
		}
		goto _match_end_4642262336;
		_case_end_4642264336:;
		_case_begin_4642262784:;
		{
			_40017_base=10LL;
		}
		goto _match_end_4642262336;
		_case_end_4642262784:;
		_match_end_4642262336:;
	}
	jule::Ref<_121dedce0_Data> _42317_d = jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::Ref<_1217f7750_TypeKind>(),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,jule::Ref<_1131530d0_Const>()));
	jule::Any _42917_value = jule::Any(nullptr);
	jule::I64 _43014_sig;
	jule::Int _43019_err;
	std::tie(_43014_sig,_43019_err) = _13219c810_parse_int(_39917_lit,_40017_base,64LL);
	if (_43019_err == 0LLU) {
		_42917_value=jule::Any(_43014_sig);
		_42317_d->_field_constant=_1131530d0_Const::_static_method_new_i64(_43014_sig);
	} else {
		jule::U64 _43518_unsig;
		std::tie(_43518_unsig,std::ignore) = _13219c810_parse_uint(_39917_lit,_40017_base,64LL);
		_42317_d->_field_constant=_1131530d0_Const::_static_method_new_u64(_43518_unsig);
		_42917_value=jule::Any(_43518_unsig);
	}
	_42317_d->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(_121dedce0_kind_by_bitsize(_42917_value))));
	_121dedce0_normalize_bitsize(_42317_d);
	_42317_d->_field_model=jule::Any(_42317_d->_field_constant);
	return _42317_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_lit_num(jule::Ref<_111612b20_LitExpr> _45022_l) {
	{
		if (!((_111613f20_is_float(_45022_l->_field_value)))) { goto _case_end_4642298736; }
		_case_begin_4642298736:;
		{
			return (*this)._method_lit_float(_45022_l);
		}
		goto _match_end_4642296240;
		_case_end_4642298736:;
		_case_begin_4642296448:;
		{
			return (*this)._method_lit_int(_45022_l);
		}
		goto _match_end_4642296240;
		_case_end_4642296448:;
		_match_end_4642296240:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_lit(jule::Ref<_111612b20_LitExpr> _45723_lit) {
	{
		if (!((_45723_lit->_method_is_nil()))) { goto _case_end_4642305392; }
		_case_begin_4642305392:;
		{
			return (*this)._method_lit_nil();
		}
		goto _match_end_4642302752;
		_case_end_4642305392:;
		if (!((_111613f20_is_str(_45723_lit->_field_value)))) { goto _case_end_4642305040; }
		_case_begin_4642305040:;
		{
			return (*this)._method_lit_str(_45723_lit);
		}
		goto _match_end_4642302752;
		_case_end_4642305040:;
		if (!((_111613f20_is_bool(_45723_lit->_field_value)))) { goto _case_end_4642305152; }
		_case_begin_4642305152:;
		{
			return (*this)._method_lit_bool(_45723_lit);
		}
		goto _match_end_4642302752;
		_case_end_4642305152:;
		if (!((_111613f20_is_rune(_45723_lit->_field_value)))) { goto _case_end_4642305616; }
		_case_begin_4642305616:;
		{
			return (*this)._method_lit_rune(_45723_lit);
		}
		goto _match_end_4642302752;
		_case_end_4642305616:;
		if (!((_111613f20_is_num(_45723_lit->_field_value)))) { goto _case_end_4642305728; }
		_case_begin_4642305728:;
		{
			return (*this)._method_lit_num(_45723_lit);
		}
		goto _match_end_4642302752;
		_case_end_4642305728:;
		_case_begin_4642302960:;
		{
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4642302752;
		_case_end_4642302960:;
		_match_end_4642302752:;
	}
}



inline jule::Any _121dedce0_Eval::_method_find_builtins(jule::Str _46832_ident) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_11265fb90_ImportInfo>>())) { goto _case_end_4642316528; }
		_case_begin_4642316528:;
		{
			jule::Any _47121_def = _121dedce0_find_builtins_import(_46832_ident,(*this)._field_lookup.operator jule::Ref<_11265fb90_ImportInfo>());
			if (_47121_def != nullptr) {
				return _47121_def;
			}
		}
		goto _match_end_4642315728;
		_case_end_4642316528:;
		if (!(_match_expr.type_is<jule::Ref<_11262c360_Sema>>())) { goto _case_end_4642316704; }
		_case_begin_4642316704:;
		{
			jule::Any _47721_def = _121dedce0_find_builtins_sema(_46832_ident,(*this)._field_lookup.operator jule::Ref<_11262c360_Sema>());
			if (_47721_def != nullptr) {
				return _47721_def;
			}
		}
		goto _match_end_4642315728;
		_case_end_4642316704:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_ScopeChecker>>())) { goto _case_end_4642316816; }
		_case_begin_4642316816:;
		{
			jule::Any _48321_def = _121dedce0_find_builtins_sema(_46832_ident,(*this)._field_lookup.operator jule::Ref<_1126288e0_ScopeChecker>()->_field_s);
			if (_48321_def != nullptr) {
				return _48321_def;
			}
		}
		goto _match_end_4642315728;
		_case_end_4642316816:;
		_match_end_4642315728:;
	}
	return _1130606b0_find_builtin_def(_46832_ident);
}



inline jule::Any _121dedce0_Eval::_method_get_def(jule::Str _49226_ident,jule::Bool _49238_cpp_linked) {
	if ((!(_49238_cpp_linked))) {
		jule::Ref<_11261eaf0_Enum> _49421_enm = (*this)._field_lookup.get()._method_find_enum(_49226_ident);
		if (jule::real(_49421_enm)) {
			return jule::Any(_49421_enm);
		}
	}
	jule::Ref<_1320e22c0_Var> _50017_v = (*this)._field_lookup.get()._method_find_var(_49226_ident,_49238_cpp_linked);
	if (jule::real(_50017_v)) {
		return jule::Any(_50017_v);
	}
	jule::Ref<_112446fb0_Fn> _50517_f = (*this)._field_lookup.get()._method_find_fn(_49226_ident,_49238_cpp_linked);
	if (jule::real(_50517_f)) {
		return jule::Any(_50517_f);
	}
	jule::Ref<_11209db80_Struct> _51017_s = (*this)._field_lookup.get()._method_find_struct(_49226_ident,_49238_cpp_linked);
	if (jule::real(_51017_s)) {
		return jule::Any(_51017_s);
	}
	jule::Ref<_1217f7750_TypeAlias> _51517_ta = (*this)._field_lookup.get()._method_find_type_alias(_49226_ident,_49238_cpp_linked);
	if (jule::real(_51517_ta)) {
		return jule::Any(_51517_ta);
	}
	return (*this)._method_find_builtins(_49226_ident);
}



inline void _121dedce0_Eval::_method_push_reference(jule::Ref<_112572770_ReferenceStack> _52337_references) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_ScopeChecker>>())) { goto _case_end_4642363216; }
		_case_begin_4642363216:;
		{
			jule::Ref<_1126288e0_ScopeChecker> _52621_sc = (*this)._field_lookup.operator jule::Ref<_1126288e0_ScopeChecker>()->_method_get_root();
			if ((!(_52337_references->_method_exist_1(_52621_sc->_field_owner)))) {
				_52337_references->_method_push(jule::Any(_52621_sc->_field_owner));
			}
		}
		goto _match_end_4642356736;
		_case_end_4642363216:;
		_case_begin_4642357504:;
		{
			if (jule::real((*this)._field_owner) && (!(_52337_references->_method_exist_0((*this)._field_owner)))) {
				_52337_references->_method_push(jule::Any((*this)._field_owner));
			}
		}
		goto _match_end_4642356736;
		_case_end_4642357504:;
		_match_end_4642356736:;
	}
}



inline void _121dedce0_Eval::_method_push_reference_to_fn(jule::Ref<_112446fb0_FnIns> _53843_f) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_ScopeChecker>>())) { goto _case_end_4642384528; }
		_case_begin_4642384528:;
		{
			jule::Ref<_1126288e0_ScopeChecker> _54121_sc = (*this)._field_lookup.operator jule::Ref<_1126288e0_ScopeChecker>()->_method_get_root();
			if (_54121_sc->_field_owner->_field_decl->_method_is_init() && (!(_54121_sc->_field_owner->_field_references->_method_exist_1(_53843_f)))) {
				_54121_sc->_field_owner->_field_refers->_method_push(jule::Any(_53843_f));
			}
		}
		goto _match_end_4642389136;
		_case_end_4642384528:;
		_match_end_4642389136:;
	}
	(*this)._method_push_reference(_53843_f->_field_references);
}



inline void _121dedce0_Eval::_method_push_reference_to_var(jule::Ref<_1320e22c0_Var> _54944_v) {
	if ((!(jule::real(_54944_v->_field_references)))) {
		return;
	}
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_ScopeChecker>>())) { goto _case_end_4642406816; }
		_case_begin_4642406816:;
		{
			jule::Ref<_1126288e0_ScopeChecker> _55621_sc = (*this)._field_lookup.operator jule::Ref<_1126288e0_ScopeChecker>()->_method_get_root();
			if (_55621_sc->_field_owner->_field_decl->_method_is_init() && (!(_55621_sc->_field_owner->_field_references->_method_exist_0(_54944_v)))) {
				_55621_sc->_field_owner->_field_refers->_method_push(jule::Any(_54944_v));
			}
		}
		goto _match_end_4642405968;
		_case_end_4642406816:;
		_match_end_4642405968:;
	}
	(*this)._method_push_reference(_54944_v->_field_references);
}



inline void _121dedce0_Eval::_method_push_reference_to_struct(jule::Ref<_11209db80_StructIns> _56547_s) {
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_ScopeChecker>>())) { goto _case_end_4642420256; }
		_case_begin_4642420256:;
		{
			jule::Ref<_1126288e0_ScopeChecker> _56821_sc = (*this)._field_lookup.operator jule::Ref<_1126288e0_ScopeChecker>()->_method_get_root();
			if (_56821_sc->_field_owner->_field_decl->_method_is_init() && (!(_56821_sc->_field_owner->_field_references->_method_exist_2(_56547_s)))) {
				_56821_sc->_field_owner->_field_refers->_method_push(jule::Any(_56547_s));
			}
		}
		goto _match_end_4642419456;
		_case_end_4642420256:;
		_match_end_4642419456:;
	}
	(*this)._method_push_reference(_56547_s->_field_references);
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_enum(jule::Ref<_11261eaf0_Enum> _57628_enm,_111613f20_Token _57640_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_57628_enm->_field_public,_57628_enm->_field_token)))) {
		(*this)._method_push_err(_57640_error_token,jule::Str("ident_is_not_accessible", 23),jule::Slice<jule::Any>({jule::Any(_57628_enm->_field_ident)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_57628_enm)),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),true,jule::new_ref<_1131530d0_Const>()));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_struct(jule::Ref<_11209db80_StructIns> _59334_s,_111613f20_Token _59349_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_59334_s->_field_decl->_field_public,_59334_s->_field_decl->_field_token)))) {
		(*this)._method_push_err(_59349_error_token,jule::Str("ident_is_not_accessible", 23),jule::Slice<jule::Any>({jule::Any(_59334_s->_field_decl->_field_ident)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_59334_s)),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_59334_s),true,jule::new_ref<_1131530d0_Const>()));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_fn_ins(jule::Ref<_112446fb0_FnIns> _61130_f) {
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_61130_f)),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(_61130_f),false,jule::new_ref<_1131530d0_Const>()));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_fn(jule::Ref<_112446fb0_Fn> _62430_f,_111613f20_Token _62438_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_62430_f->_field_public,_62430_f->_field_token)))) {
		(*this)._method_push_err(_62438_error_token,jule::Str("ident_is_not_accessible", 23),jule::Slice<jule::Any>({jule::Any(_62430_f->_field_ident)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_112446fb0_FnIns> _63117_ins = _62430_f->_method_instance();
	(*this)._method_push_reference_to_fn(_63117_ins);
	return (*this)._method_eval_fn_ins(_63117_ins);
}



inline void _121dedce0_Eval::_method_push_illegal_cycle_error(jule::Ref<_1320e22c0_Var> _63643_v1,jule::Ref<_1320e22c0_Var> _63653_v2,jule::Str& _63668_message) {
	
	jule::Str _63913_refers_to = _1316b2ff0_errorf(jule::Str("refers_to", 9),jule::Slice<jule::Any>({jule::Any(_63643_v1->_field_ident),jule::Any(_63653_v2->_field_ident)}));
	_63668_message=((_112572770_str_repeat(jule::Str(" ", 1),4LL) + _63913_refers_to) + jule::Str("\n", 1)) + _63668_message;
}



inline jule::Bool _121dedce0_Eval::_method_check_cross_cycle(jule::Ref<_1320e22c0_Var> _64336_v,jule::Str& _64350_message) {
	{
		auto __julec_range_expr = _64336_v->_field_depends;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e22c0_Var> _121dedce0_d = *__julec_range_begin;
			_iter_begin_4642491328:;
			{
				if ((_121dedce0_d).alloc == ((*this)._field_owner).alloc) {
					(*this)._method_push_illegal_cycle_error(_64336_v,_121dedce0_d,_64350_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_121dedce0_d,_64350_message)))) {
					(*this)._method_push_illegal_cycle_error(_64336_v,_121dedce0_d,_64350_message);
					return false;
				}
			}
			_iter_next_4642491328:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _121dedce0_d = *__julec_range_begin; goto _iter_begin_4642491328; }
			_iter_end_4642491328:;
		}
	}
	return true;
}



inline jule::Bool _121dedce0_Eval::_method_check_illegal_cycles(jule::Ref<_1320e22c0_Var> _66243_v,_111613f20_Token _66252_decl_token) {
	jule::Bool _66273_ok = jule::Bool();
	if ((!(jule::real((*this)._field_owner)))) {
		_66273_ok = true;
		return _66273_ok;
	}
	if (((*this)._field_owner).alloc == (_66243_v).alloc) {
		(*this)._method_push_err((*this)._field_owner->_field_token,jule::Str("illegal_cycle_refers_itself", 27),jule::Slice<jule::Any>({jule::Any((*this)._field_owner->_field_ident)}));
		_66273_ok = false;
		return _66273_ok;
	}
	jule::Str _67417_message = jule::Str("", 0);
	if ((!((*this)._method_check_cross_cycle(_66243_v,_67417_message)))) {
		jule::Str _67721_err_msg = _67417_message;
		_67417_message=jule::Str("", 0);
		(*this)._method_push_illegal_cycle_error((*this)._field_owner,_66243_v,_67417_message);
		_67721_err_msg=_67721_err_msg + _67417_message;
		(*this)._method_push_err(_66252_decl_token,jule::Str("illegal_cross_cycle", 19),jule::Slice<jule::Any>({jule::Any(_67721_err_msg)}));
		_66273_ok = false;
		return _66273_ok;
	}
	(*this)._field_owner->_field_depends=append((*this)._field_owner->_field_depends,jule::Slice<jule::Ref<_1320e22c0_Var>>({_66243_v}));
	_66273_ok = true;
	return _66273_ok;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_var(jule::Ref<_1320e22c0_Var> _68931_v,_111613f20_Token _68940_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_68931_v->_field_public,_68931_v->_field_token)))) {
		(*this)._method_push_err(_68940_error_token,jule::Str("ident_is_not_accessible", 23),jule::Slice<jule::Any>({jule::Any(_68931_v->_field_ident)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	_68931_v->_field_used=true;
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_11262c360_Sema>>())) { goto _case_end_4642529584; }
		_case_begin_4642529584:;
		{
			jule::Bool _70017_ok = (*this)._method_check_illegal_cycles(_68931_v,_68940_error_token);
			if ((!(_70017_ok))) {
				return jule::new_ref<_121dedce0_Data>();
			}
		}
		goto _match_end_4642527872;
		_case_end_4642529584:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_ScopeChecker>>())) { goto _case_end_4642529696; }
		_case_begin_4642529696:;
		{
			if ((!(_68931_v->_field_reference)) || (*this)._method_is_unsafe()) {
				goto _match_end_4642527872;
			}
			jule::Ref<_1126288e0_ScopeChecker> _71021_s = (*this)._field_lookup.operator jule::Ref<_1126288e0_ScopeChecker>();
			_iter_begin_4642358080:;
			if (!((!(jule::real(_71021_s->_field_owner))) && jule::real(_71021_s->_field_parent))) { goto _iter_end_4642358080; }
			{
				_71021_s=_71021_s->_field_parent;
			}
			_iter_next_4642358080:;
			goto _iter_begin_4642358080;
			_iter_end_4642358080:;
			if ((jule::real(_71021_s->_field_owner) && _71021_s->_field_owner->_field_anon) && ((_68931_v->_field_scope).alloc != (_71021_s->_field_owner->_field_scope).alloc)) {
				(*this)._method_push_err(_68940_error_token,jule::Str("used_ref_in_anon_fn_from_parent_scope", 37),jule::Slice<jule::Any>({jule::Any(_68931_v->_field_ident)}));
			}
		}
		goto _match_end_4642527872;
		_case_end_4642529696:;
		_match_end_4642527872:;
	}
	(*this)._method_push_reference_to_var(_68931_v);
	if ((!(_68931_v->_field_cpp_linked)) && ((!(jule::real(_68931_v->_field_value))) || (!(jule::real(_68931_v->_field_value->_field_data))))) {
		if (_68931_v->_field_constant) {
			(*this)._field_s->_method_check_type_var(_68931_v,(*this)._field_s);
			if ((!(jule::real(_68931_v->_field_value->_field_data)))) {
				return jule::new_ref<_121dedce0_Data>();
			}
		}
	}
	if ((!(jule::real(_68931_v->_field_kind))) || (!(jule::real(_68931_v->_field_kind->_field_kind)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_121dedce0_Data> _73617_d = jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(_68931_v->_field_kind->_field_kind->_method_clone(),jule::Ref<_1217f7750_TypeKind>(),_68931_v->_field_mutable,_68931_v->_field_reference,(!(_68931_v->_field_constant)),jule::Bool(),jule::Bool(),jule::Any(_68931_v),false,jule::Ref<_1131530d0_Const>()));
	if (((!(_68931_v->_field_cpp_linked)) && _68931_v->_method_is_initialized()) && jule::real(_68931_v->_field_value->_field_data)) {
		_73617_d->_field_is_rune=_68931_v->_field_value->_field_data->_field_is_rune;
	}
	if (_68931_v->_field_constant) {
		_73617_d->_field_constant=jule::new_ref<_1131530d0_Const>(_68931_v->_field_value->_field_data->_field_constant.get());
		_73617_d->_field_model=jule::Any(_73617_d->_field_constant);
	}
	if (jule::real(_73617_d->_field_kind->_method_fnc())) {
		jule::Ref<_112446fb0_FnIns> _75521_f = _73617_d->_field_kind->_method_fnc();
		if (jule::real(_75521_f->_field_decl)) {
			_75521_f->_field_decl->_field_ident=_68931_v->_field_ident;
		}
	}
	return _73617_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_type_alias(jule::Ref<_1217f7750_TypeAlias> _76638_ta,_111613f20_Token _76654_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_76638_ta->_field_public,_76638_ta->_field_token)))) {
		(*this)._method_push_err(_76654_error_token,jule::Str("ident_is_not_accessible", 23),jule::Slice<jule::Any>({jule::Any(_76638_ta->_field_ident)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	_76638_ta->_field_used=true;
	jule::Trait<_1217f7750_Kind> _77417_kind = _76638_ta->_field_kind->_field_kind->_field_kind;
	{
		auto _match_expr{ _77417_kind };
		if (!(_match_expr.type_is<jule::Ref<_11209db80_StructIns>>())) { goto _case_end_4642584432; }
		_case_begin_4642584432:;
		{
			return (*this)._method_eval_struct(_77417_kind.operator jule::Ref<_11209db80_StructIns>(),_76654_error_token);
		}
		goto _match_end_4642580160;
		_case_end_4642584432:;
		if (!(_match_expr.type_is<jule::Ref<_11261eaf0_Enum>>())) { goto _case_end_4642584544; }
		_case_begin_4642584544:;
		{
			return (*this)._method_eval_enum(_77417_kind.operator jule::Ref<_11261eaf0_Enum>(),_76654_error_token);
		}
		goto _match_end_4642580160;
		_case_end_4642584544:;
		_case_begin_4642582304:;
		{
			jule::Ref<_121dedce0_Data> _78321_d = jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(_76638_ta->_field_kind->_field_kind->_method_clone(),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),true,jule::Ref<_1131530d0_Const>()));
			_78321_d->_field_model=jule::Any(_78321_d->_field_kind);
			return _78321_d;
		}
		goto _match_end_4642580160;
		_case_end_4642582304:;
		_match_end_4642580160:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_def(jule::Any _79231_def,_111613f20_Token _79241_ident) {
	{
		auto _match_expr{ _79231_def };
		if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4642601392; }
		_case_begin_4642601392:;
		{
			return (*this)._method_eval_var(_79231_def.operator jule::Ref<_1320e22c0_Var>(),_79241_ident);
		}
		goto _match_end_4642596416;
		_case_end_4642601392:;
		if (!(_match_expr.type_is<jule::Ref<_11261eaf0_Enum>>())) { goto _case_end_4642601504; }
		_case_begin_4642601504:;
		{
			return (*this)._method_eval_enum(_79231_def.operator jule::Ref<_11261eaf0_Enum>(),_79241_ident);
		}
		goto _match_end_4642596416;
		_case_end_4642601504:;
		if (!(_match_expr.type_is<jule::Ref<_11209db80_Struct>>())) { goto _case_end_4642601136; }
		_case_begin_4642601136:;
		{
			return (*this)._method_eval_struct(_79231_def.operator jule::Ref<_11209db80_Struct>()->_method_instance(),_79241_ident);
		}
		goto _match_end_4642596416;
		_case_end_4642601136:;
		if (!(_match_expr.type_is<jule::Ref<_112446fb0_Fn>>())) { goto _case_end_4642601248; }
		_case_begin_4642601248:;
		{
			return (*this)._method_eval_fn(_79231_def.operator jule::Ref<_112446fb0_Fn>(),_79241_ident);
		}
		goto _match_end_4642596416;
		_case_end_4642601248:;
		if (!(_match_expr.type_is<jule::Ref<_112446fb0_FnIns>>())) { goto _case_end_4642601712; }
		_case_begin_4642601712:;
		{
			return (*this)._method_eval_fn_ins(_79231_def.operator jule::Ref<_112446fb0_FnIns>());
		}
		goto _match_end_4642596416;
		_case_end_4642601712:;
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_TypeAlias>>())) { goto _case_end_4642601824; }
		_case_begin_4642601824:;
		{
			return (*this)._method_eval_type_alias(_79231_def.operator jule::Ref<_1217f7750_TypeAlias>(),_79241_ident);
		}
		goto _match_end_4642596416;
		_case_end_4642601824:;
		_case_begin_4642596512:;
		{
			(*this)._method_push_err(_79241_ident,jule::Str("ident_not_exist", 15),jule::Slice<jule::Any>({jule::Any(_79241_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4642596416;
		_case_end_4642596512:;
		_match_end_4642596416:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_ident(jule::Ref<_111612b20_IdentExpr> _81829_ident) {
	jule::Any _81917_def = (*this)._method_get_def(_81829_ident->_field_ident,_81829_ident->_field_cpp_linked);
	return (*this)._method_eval_def(_81917_def,_81829_ident->_field_token);
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_unary_minus(jule::Ref<_121dedce0_Data> _82335_d) {
	jule::Ref<_1217f7750_Prim> _82413_t = _82335_d->_field_kind->_method_prim();
	if ((!(jule::real(_82413_t))) || (!(_1132426f0_is_num(_82413_t->_method_to_str())))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_82335_d->_method_is_const()) {
		{
			if (!((_82335_d->_field_constant->_method_is_f64()))) { goto _case_end_4642627504; }
			_case_begin_4642627504:;
			{
				_82335_d->_field_constant->_method_set_f64(static_cast<jule::F64>((-(_82335_d->_field_constant->_method_read_f64()))));
			}
			goto _match_end_4642627248;
			_case_end_4642627504:;
			if (!((_82335_d->_field_constant->_method_is_i64()))) { goto _case_end_4642627616; }
			_case_begin_4642627616:;
			{
				_82335_d->_field_constant->_method_set_f64(static_cast<jule::F64>((-(_82335_d->_field_constant->_method_as_f64()))));
			}
			goto _match_end_4642627248;
			_case_end_4642627616:;
			if (!((_82335_d->_field_constant->_method_is_u64()))) { goto _case_end_4642627728; }
			_case_begin_4642627728:;
			{
				_82335_d->_field_constant->_method_set_f64(static_cast<jule::F64>((-(_82335_d->_field_constant->_method_as_f64()))));
			}
			goto _match_end_4642627248;
			_case_end_4642627728:;
			_match_end_4642627248:;
		}
		_121dedce0_normalize_type(_82335_d);
	}
	_82335_d->_field_lvalue=false;
	_82335_d->_field_model=jule::Any(jule::new_struct<_112673500_UnaryExprModel>(new( std::nothrow ) _112673500_UnaryExprModel(_82335_d->_field_model,jule::Str("-", 1))));
	return _82335_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_unary_plus(jule::Ref<_121dedce0_Data> _84634_d) {
	jule::Ref<_1217f7750_Prim> _84713_t = _84634_d->_field_kind->_method_prim();
	if ((!(jule::real(_84713_t))) || (!(_1132426f0_is_num(_84713_t->_method_to_str())))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_84634_d->_method_is_const()) {
		{
			if (!((_84634_d->_field_constant->_method_is_f64()))) { goto _case_end_4642649824; }
			_case_begin_4642649824:;
			{
				_84634_d->_field_constant->_method_set_f64(static_cast<jule::F64>((+(_84634_d->_field_constant->_method_read_f64()))));
			}
			goto _match_end_4642649568;
			_case_end_4642649824:;
			if (!((_84634_d->_field_constant->_method_is_i64()))) { goto _case_end_4642649936; }
			_case_begin_4642649936:;
			{
				_84634_d->_field_constant->_method_set_f64(static_cast<jule::F64>((+(_84634_d->_field_constant->_method_as_f64()))));
			}
			goto _match_end_4642649568;
			_case_end_4642649936:;
			if (!((_84634_d->_field_constant->_method_is_u64()))) { goto _case_end_4642650048; }
			_case_begin_4642650048:;
			{
				_84634_d->_field_constant->_method_set_f64(static_cast<jule::F64>((+(_84634_d->_field_constant->_method_as_f64()))));
			}
			goto _match_end_4642649568;
			_case_end_4642650048:;
			_match_end_4642649568:;
		}
		_121dedce0_normalize_type(_84634_d);
	}
	_84634_d->_field_lvalue=false;
	_84634_d->_field_model=jule::Any(jule::new_struct<_112673500_UnaryExprModel>(new( std::nothrow ) _112673500_UnaryExprModel(_84634_d->_field_model,jule::Str("+", 1))));
	return _84634_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_unary_caret(jule::Ref<_121dedce0_Data> _86935_d) {
	jule::Ref<_1217f7750_Prim> _87013_t = _86935_d->_field_kind->_method_prim();
	if ((!(jule::real(_87013_t))) || (!(_1132426f0_is_int(_87013_t->_method_to_str())))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_86935_d->_method_is_const()) {
		{
			if (!((_86935_d->_field_constant->_method_is_i64()))) { goto _case_end_4642671712; }
			_case_begin_4642671712:;
			{
				_86935_d->_field_constant->_method_set_i64(static_cast<jule::I64>((~(_86935_d->_field_constant->_method_read_i64()))));
			}
			goto _match_end_4642671472;
			_case_end_4642671712:;
			if (!((_86935_d->_field_constant->_method_is_u64()))) { goto _case_end_4642671824; }
			_case_begin_4642671824:;
			{
				_86935_d->_field_constant->_method_set_u64(static_cast<jule::U64>((~(_86935_d->_field_constant->_method_read_u64()))));
			}
			goto _match_end_4642671472;
			_case_end_4642671824:;
			_match_end_4642671472:;
		}
	}
	_86935_d->_field_lvalue=false;
	_86935_d->_field_model=jule::Any(jule::new_struct<_112673500_UnaryExprModel>(new( std::nothrow ) _112673500_UnaryExprModel(_86935_d->_field_model,jule::Str("^", 1))));
	return _86935_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_unary_excl(jule::Ref<_121dedce0_Data> _89334_d) {
	jule::Ref<_1217f7750_Prim> _89413_t = _89334_d->_field_kind->_method_prim();
	if ((!(jule::real(_89413_t))) || (!(_89413_t->_method_is_bool()))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_89334_d->_method_is_const()) {
		{
			if (!((_89334_d->_field_constant->_method_is_bool()))) { goto _case_end_4642688912; }
			_case_begin_4642688912:;
			{
				_89334_d->_field_constant->_method_set_bool((!(_89334_d->_field_constant->_method_read_bool())));
			}
			goto _match_end_4642688688;
			_case_end_4642688912:;
			_match_end_4642688688:;
		}
	}
	_89334_d->_field_lvalue=false;
	_89334_d->_field_model=jule::Any(jule::new_struct<_112673500_UnaryExprModel>(new( std::nothrow ) _112673500_UnaryExprModel(_89334_d->_field_model,jule::Str("!", 1))));
	return _89334_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_unary_star(jule::Ref<_121dedce0_Data> _91438_d,_111613f20_Token _91448_op) {
	if ((!((*this)._method_is_unsafe()))) {
		(*this)._method_push_err(_91448_op,jule::Str("unsafe_behavior_at_out_of_unsafe_scope", 38),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_1217f7750_Ptr> _91917_t = _91438_d->_field_kind->_method_ptr();
	if ((!(jule::real(_91917_t))) || _91917_t->_method_is_unsafe()) {
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::drop(_91438_d->_field_constant);
	_91438_d->_field_lvalue=true;
	_91438_d->_field_kind=_91917_t->_field_elem;
	_91438_d->_field_model=jule::Any(jule::new_struct<_112673500_UnaryExprModel>(new( std::nothrow ) _112673500_UnaryExprModel(_91438_d->_field_model,jule::Str("*", 1))));
	return _91438_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_unary_amper(jule::Ref<_121dedce0_Data> _93335_d) {
	{
		auto _match_expr{ _93335_d->_field_model };
		if (!(_match_expr.type_is<jule::Ref<_112673500_StructLitExprModel>>())) { goto _case_end_4642724224; }
		_case_begin_4642724224:;
		{
			jule::Ref<_112673500_StructLitExprModel> _93621_lit = _93335_d->_field_model.operator jule::Ref<_112673500_StructLitExprModel>();
			_93335_d->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_1217f7750_Ref>(new( std::nothrow ) _1217f7750_Ref(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_93621_lit->_field_strct))))));
			_93335_d->_field_model=jule::Any(jule::new_struct<_112673500_AllocStructLitExprModel>(new( std::nothrow ) _112673500_AllocStructLitExprModel(_93621_lit)));
		}
		goto _match_end_4642711808;
		_case_end_4642724224:;
		_case_begin_4642712624:;
		{
			{
				if (!((jule::real(_93335_d->_field_kind->_method_ref())))) { goto _case_end_4642714976; }
				_case_begin_4642714976:;
				{
					_93335_d->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_1217f7750_Ptr>(new( std::nothrow ) _1217f7750_Ptr(_93335_d->_field_kind->_method_ref()->_field_elem->_method_clone()))));
					_93335_d->_field_model=jule::Any(jule::new_struct<_112673500_GetRefPtrExprModel>(new( std::nothrow ) _112673500_GetRefPtrExprModel(_93335_d->_field_model)));
				}
				goto _match_end_4642713968;
				_case_end_4642714976:;
				if (!((_1217f7750_can_get_ptr(_93335_d)))) { goto _case_end_4642715760; }
				_case_begin_4642715760:;
				{
					_93335_d->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_1217f7750_Ptr>(new( std::nothrow ) _1217f7750_Ptr(_93335_d->_field_kind->_method_clone()))));
					_93335_d->_field_model=jule::Any(jule::new_struct<_112673500_UnaryExprModel>(new( std::nothrow ) _112673500_UnaryExprModel(_93335_d->_field_model,jule::Str("&", 1))));
				}
				goto _match_end_4642713968;
				_case_end_4642715760:;
				_case_begin_4642714160:;
				{
					jule::drop(_93335_d);
				}
				goto _match_end_4642713968;
				_case_end_4642714160:;
				_match_end_4642713968:;
			}
		}
		goto _match_end_4642711808;
		_case_end_4642712624:;
		_match_end_4642711808:;
	}
	if (jule::real(_93335_d)) {
		jule::drop(_93335_d->_field_constant);
		_93335_d->_field_lvalue=true;
		_93335_d->_field_mutable=true;
	}
	return _93335_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_unary_type_decl(jule::Ref<_121dedce0_Data> _98043_d,jule::Ref<_111612b20_UnaryExpr> _98053_u) {
	_1217f7750_TypeChecker _98117_tc = _1217f7750_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ref<_1217f7750_Referencer>(),_98053_u->_field_op,jule::Slice<jule::Ref<_111612b20_GenericDecl>>(),jule::Slice<jule::Ref<_1217f7750_TypeAlias>>(),jule::Bool());
	{
		auto _match_expr{ _98053_u->_field_op._field_kind };
		if (!((jule::Str("*", 1)) == _match_expr)) { goto _case_end_4642741952; }
		_case_begin_4642741952:;
		{
			_98043_d->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_98117_tc._method_build_ptr_from_type(_98043_d->_field_kind)));
		}
		goto _match_end_4642737664;
		_case_end_4642741952:;
		if (!((jule::Str("&", 1)) == _match_expr)) { goto _case_end_4642745456; }
		_case_begin_4642745456:;
		{
			_98043_d->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_98117_tc._method_build_ref_from_type(_98043_d->_field_kind)));
		}
		goto _match_end_4642737664;
		_case_end_4642745456:;
		_case_begin_4642740496:;
		{
			(*this)._method_push_err(_98053_u->_field_op,jule::Str("invalid_expr_unary_operator", 27),jule::Slice<jule::Any>({jule::Any(_98053_u->_field_op._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4642737664;
		_case_end_4642740496:;
		_match_end_4642737664:;
	}
	_98043_d->_field_decl=true;
	return _98043_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_unary(jule::Ref<_111612b20_UnaryExpr> _100334_u) {
	jule::Ref<_1217f7750_TypeKind> _100417_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_100417_prefix;
	});
	jule::Ref<_121dedce0_Data> _100817_d = this->self->_method_eval_expr_kind(_100334_u->_field_expr);
	if ((!(jule::real(_100817_d)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_100817_d->_field_decl) {
		return this->self->_method_eval_unary_type_decl(_100817_d,_100334_u);
	}
	jule::Ref<_1217f7750_TypeKind> _101717_cast_kind = _100817_d->_field_cast_kind;
	{
		auto _match_expr{ _100334_u->_field_op._field_kind };
		if (!((jule::Str("-", 1)) == _match_expr)) { goto _case_end_4642766352; }
		_case_begin_4642766352:;
		{
			_100817_d=this->self->_method_eval_unary_minus(_100817_d);
		}
		goto _match_end_4642761216;
		_case_end_4642766352:;
		if (!((jule::Str("+", 1)) == _match_expr)) { goto _case_end_4642765472; }
		_case_begin_4642765472:;
		{
			_100817_d=this->self->_method_eval_unary_plus(_100817_d);
		}
		goto _match_end_4642761216;
		_case_end_4642765472:;
		if (!((jule::Str("^", 1)) == _match_expr)) { goto _case_end_4642765584; }
		_case_begin_4642765584:;
		{
			_100817_d=this->self->_method_eval_unary_caret(_100817_d);
		}
		goto _match_end_4642761216;
		_case_end_4642765584:;
		if (!((jule::Str("!", 1)) == _match_expr)) { goto _case_end_4642765696; }
		_case_begin_4642765696:;
		{
			_100817_d=this->self->_method_eval_unary_excl(_100817_d);
		}
		goto _match_end_4642761216;
		_case_end_4642765696:;
		if (!((jule::Str("*", 1)) == _match_expr)) { goto _case_end_4642765808; }
		_case_begin_4642765808:;
		{
			_100817_d=this->self->_method_eval_unary_star(_100817_d,_100334_u->_field_op);
		}
		goto _match_end_4642761216;
		_case_end_4642765808:;
		if (!((jule::Str("&", 1)) == _match_expr)) { goto _case_end_4642765920; }
		_case_begin_4642765920:;
		{
			_100817_d=this->self->_method_eval_unary_amper(_100817_d);
		}
		goto _match_end_4642761216;
		_case_end_4642765920:;
		_case_begin_4642759984:;
		{
			jule::drop(_100817_d);
		}
		goto _match_end_4642761216;
		_case_end_4642759984:;
		_match_end_4642761216:;
	}
	if ((!(jule::real(_100817_d)))) {
		this->self->_method_push_err(_100334_u->_field_op,jule::Str("invalid_expr_unary_operator", 27),jule::Slice<jule::Any>({jule::Any(_100334_u->_field_op._field_kind)}));
	} else if (_100817_d->_method_is_const()) {
		_100817_d->_field_model=jule::Any(_100817_d->_field_constant);
	} else if (jule::real(_101717_cast_kind)) {
		_100817_d->_field_cast_kind=_101717_cast_kind;
		_121dedce0_apply_cast_kind(_100817_d);
	}
	return _100817_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_variadic(jule::Ref<_111612b20_VariadicExpr> _104037_v) {
	jule::Ref<_1217f7750_TypeKind> _104117_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_104117_prefix;
	});
	jule::Ref<_121dedce0_Data> _104517_d = this->self->_method_eval_expr_kind(_104037_v->_field_expr);
	if ((!(jule::real(_104517_d)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if (jule::real(_104517_d->_field_kind->_method_ref())) {
		_104517_d->_field_kind=_104517_d->_field_kind->_method_ref()->_field_elem;
		_104517_d->_field_model=jule::Any(jule::new_struct<_112673500_ExplicitDerefExprModel>(new( std::nothrow ) _112673500_ExplicitDerefExprModel(_104517_d->_field_model)));
	}
	if ((!(_1217f7750_is_variadicable(_104517_d->_field_kind)))) {
		this->self->_method_push_err(_104037_v->_field_token,jule::Str("variadic_with_non_variadicable", 30),jule::Slice<jule::Any>({jule::Any(_104517_d->_field_kind->_method_to_str())}));
		return jule::new_ref<_121dedce0_Data>();
	}
	_104517_d->_field_variadiced=true;
	_104517_d->_field_kind=_104517_d->_field_kind->_method_slc()->_field_elem;
	return _104517_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_unsafe(jule::Ref<_111612b20_UnsafeExpr> _106735_u) {
	jule::Bool _106813_unsafety = this->self->_field_unsafety;
	this->self->_field_unsafety=true;
	jule::Ref<_121dedce0_Data> _107117_d = this->self->_method_eval_expr_kind(_106735_u->_field_expr);
	this->self->_field_unsafety=_106813_unsafety;
	return _107117_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_arr(jule::Ref<_111612b20_SliceExpr> _107832_s) {
	jule::Ref<_1217f7750_Arr> _108017_pt = this->self->_field_prefix->_method_arr();
	jule::Ref<_1217f7750_Arr> _108217_arr = jule::new_struct<_1217f7750_Arr>(new( std::nothrow ) _1217f7750_Arr(false,0LL,_108017_pt->_field_elem));
	if (_108017_pt->_field_auto) {
		_108217_arr->_field_n=static_cast<jule::I64>(_107832_s->_field_elems.len());
	} else {
		_108217_arr->_field_n=static_cast<jule::I64>(_107832_s->_field_elems.len());
		if (_108217_arr->_field_n > _108017_pt->_field_n) {
			this->self->_method_push_err(_107832_s->_field_token,jule::Str("overflow_limits", 15),jule::Slice<jule::Any>({}));
		} else if (_108217_arr->_field_n < _108017_pt->_field_n) {
			_108217_arr->_field_n=_108017_pt->_field_n;
		}
	}
	jule::Ref<_112673500_ArrayExprModel> _109917_model = jule::new_struct<_112673500_ArrayExprModel>(new( std::nothrow ) _112673500_ArrayExprModel(_108217_arr,jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_107832_s->_field_elems.len())))));
	jule::Ref<_1217f7750_TypeKind> _110417_prefix = this->self->_field_prefix;
	this->self->_field_prefix=_108217_arr->_field_elem;
	{
		auto __julec_range_expr = _107832_s->_field_elems;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121dedce0_i = 0;
			jule::Any _121dedce0_elem = *__julec_range_begin;
			_iter_begin_4642831360:;
			{
				jule::Ref<_121dedce0_Data> _110721_d = this->self->_method_eval_expr_kind(_121dedce0_elem);
				if ((!(jule::real(_110721_d)))) {
					goto _iter_next_4642831360;
				}
				this->self->_field_s->_method_check_assign_type(_108217_arr->_field_elem,_110721_d,_107832_s->_field_token,true);
				_109917_model->_field_elems[static_cast<jule::Int>(_121dedce0_i)]=_110721_d->_field_model;
			}
			_iter_next_4642831360:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121dedce0_i; _121dedce0_elem = *__julec_range_begin; goto _iter_begin_4642831360; }
			_iter_end_4642831360:;
		}
	}
	this->self->_field_prefix=_110417_prefix;
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_108217_arr)),jule::Ref<_1217f7750_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_109917_model),jule::Bool(),jule::Ref<_1131530d0_Const>()));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_exp_slc(jule::Ref<_111612b20_SliceExpr> _112436_s,jule::Ref<_1217f7750_TypeKind> _112451_elem_type) {
	jule::Ref<_1217f7750_Slc> _112517_slc = jule::new_struct<_1217f7750_Slc>(new( std::nothrow ) _1217f7750_Slc(_112451_elem_type));
	jule::Ref<_112673500_SliceExprModel> _112917_model = jule::new_struct<_112673500_SliceExprModel>(new( std::nothrow ) _112673500_SliceExprModel(_112451_elem_type,jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_112436_s->_field_elems.len())))));
	jule::Ref<_1217f7750_TypeKind> _113417_prefix = this->self->_field_prefix;
	this->self->_field_prefix=_112517_slc->_field_elem;
	{
		auto __julec_range_expr = _112436_s->_field_elems;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121dedce0_i = 0;
			jule::Any _121dedce0_elem = *__julec_range_begin;
			_iter_begin_4642854000:;
			{
				jule::Ref<_121dedce0_Data> _113721_d = this->self->_method_eval_expr_kind(_121dedce0_elem);
				if ((!(jule::real(_113721_d)))) {
					goto _iter_next_4642854000;
				}
				this->self->_field_s->_method_check_assign_type(_112517_slc->_field_elem,_113721_d,_112436_s->_field_token,true);
				_112917_model->_field_elems[static_cast<jule::Int>(_121dedce0_i)]=_113721_d->_field_model;
			}
			_iter_next_4642854000:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121dedce0_i; _121dedce0_elem = *__julec_range_begin; goto _iter_begin_4642854000; }
			_iter_end_4642854000:;
		}
	}
	this->self->_field_prefix=_113417_prefix;
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_112517_slc)),jule::Ref<_1217f7750_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_112917_model),jule::Bool(),jule::Ref<_1131530d0_Const>()));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_slice_expr(jule::Ref<_111612b20_SliceExpr> _115439_s) {
	if (jule::real(this->self->_field_prefix)) {
		{
			if (!((jule::real(this->self->_field_prefix->_method_arr())))) { goto _case_end_4642870032; }
			_case_begin_4642870032:;
			{
				return this->self->_method_eval_arr(_115439_s);
			}
			goto _match_end_4642869792;
			_case_end_4642870032:;
			if (!((jule::real(this->self->_field_prefix->_method_slc())))) { goto _case_end_4642870144; }
			_case_begin_4642870144:;
			{
				jule::Ref<_1217f7750_Slc> _116125_pt = this->self->_field_prefix->_method_slc();
				return this->self->_method_eval_exp_slc(_115439_s,_116125_pt->_field_elem);
			}
			goto _match_end_4642869792;
			_case_end_4642870144:;
			_match_end_4642869792:;
		}
	}
	jule::Ref<_1217f7750_TypeKind> _116617_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	if (_115439_s->_field_elems.len() == 0LL) {
		this->self->_method_push_err(_115439_s->_field_token,jule::Str("dynamic_type_annotation_failed", 30),jule::Slice<jule::Any>({}));
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_121dedce0_Data> _117417_first_elem = this->self->_method_eval_expr_kind(_115439_s->_field_elems[static_cast<jule::Int>(0LL)]);
	if ((!(jule::real(_117417_first_elem)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_121dedce0_Data> _117917_d = this->self->_method_eval_exp_slc(_115439_s,_117417_first_elem->_field_kind);
	this->self->_field_prefix=_116617_prefix;
	return _117917_d;
}



inline void _121dedce0_Eval::_method_check_integer_indexing_by_data(jule::Ref<_121dedce0_Data> _118553_d,_111613f20_Token _118563_token) {
	jule::Str _118613_err_key = _121dedce0_check_data_for_integer_indexing(_118553_d);
	if (_118613_err_key != jule::Str("", 0)) {
		(*this)._method_push_err(_118563_token,_118613_err_key,jule::Slice<jule::Any>({}));
	}
}



inline void _121dedce0_Eval::_method_indexing_ptr(jule::Ref<_121dedce0_Data> _119235_d,jule::Ref<_121dedce0_Data> _119249_index,jule::Ref<_111612b20_IndexingExpr> _119263_i) {
	(*this)._method_check_integer_indexing_by_data(_119249_index,_119263_i->_field_token);
	jule::Ref<_1217f7750_Ptr> _119517_ptr = _119235_d->_field_kind->_method_ptr();
	{
		if (!((_119517_ptr->_method_is_unsafe()))) { goto _case_end_4642901792; }
		_case_begin_4642901792:;
		{
			(*this)._method_push_err(_119263_i->_field_token,jule::Str("unsafe_ptr_indexing", 19),jule::Slice<jule::Any>({}));
			return;
		}
		goto _match_end_4642901584;
		_case_end_4642901792:;
		if (!(((!((*this)._method_is_unsafe()))))) { goto _case_end_4642901904; }
		_case_begin_4642901904:;
		{
			(*this)._method_push_err(_119263_i->_field_token,jule::Str("unsafe_behavior_at_out_of_unsafe_scope", 38),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4642901584;
		_case_end_4642901904:;
		_match_end_4642901584:;
	}
	_119235_d->_field_kind=_119517_ptr->_field_elem->_method_clone();
}



inline void _121dedce0_Eval::_method_indexing_arr(jule::Ref<_121dedce0_Data> _120835_d,jule::Ref<_121dedce0_Data> _120849_index,jule::Ref<_111612b20_IndexingExpr> _120863_i) {
	jule::Ref<_1217f7750_Arr> _120917_arr = _120835_d->_field_kind->_method_arr();
	_120835_d->_field_kind=_120917_arr->_field_elem->_method_clone();
	(*this)._method_check_integer_indexing_by_data(_120849_index,_120863_i->_field_token);
}



inline void _121dedce0_Eval::_method_indexing_slc(jule::Ref<_121dedce0_Data> _121435_d,jule::Ref<_121dedce0_Data> _121448_index,jule::Ref<_111612b20_IndexingExpr> _121462_i) {
	jule::Ref<_1217f7750_Slc> _121517_slc = _121435_d->_field_kind->_method_slc();
	_121435_d->_field_kind=_121517_slc->_field_elem->_method_clone();
	(*this)._method_check_integer_indexing_by_data(_121448_index,_121462_i->_field_token);
}



inline void _121dedce0_Eval::_method_indexing_map(jule::Ref<_121dedce0_Data> _122035_d,jule::Ref<_121dedce0_Data> _122049_index,jule::Ref<_111612b20_IndexingExpr> _122067_i) {
	if ((!(jule::real(_122049_index)))) {
		return;
	}
	jule::Ref<_1217f7750_Map> _122517_m = _122035_d->_field_kind->_method_map();
	_121807de0_AssignTypeChecker _122617_atc = _121807de0_AssignTypeChecker((*this)._field_s,_122517_m->_field_key,_122049_index,_122067_i->_field_token,true);
	_122617_atc._method_check();
	_122035_d->_field_kind=_122517_m->_field_val->_method_clone();
}



inline void _121dedce0_Eval::_method_indexing_str(jule::Ref<_121dedce0_Data> _123835_d,jule::Ref<_121dedce0_Data> _123849_index,jule::Ref<_111612b20_IndexingExpr> _123863_i) {
	
	_123835_d->_field_kind->_field_kind=_1217f7750_build_prim_type(jule::Str("u8", 2));
	if ((!(jule::real(_123849_index)))) {
		return;
	}
	(*this)._method_check_integer_indexing_by_data(_123849_index,_123863_i->_field_token);
	if ((!(_123849_index->_method_is_const()))) {
		jule::drop(_123835_d->_field_constant);
		return;
	}
	if (_123835_d->_method_is_const()) {
		_111613f20_Token _125417_error_token = _123863_i->_field_token;
		jule::I64 _125517_i = _123849_index->_field_constant->_method_as_i64();
		jule::Str _125617_s = _123835_d->_field_constant->_method_read_str();
		if (static_cast<jule::Int>(_125517_i) >= _125617_s.len()) {
			(*this)._method_push_err(_125417_error_token,jule::Str("overflow_limits", 15),jule::Slice<jule::Any>({}));
		} else {
			_123835_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_125617_s[static_cast<jule::Int>(_125517_i)]));
		}
	}
}



inline void _121dedce0_Eval::_method_to_indexing(jule::Ref<_121dedce0_Data> _126534_d,jule::Ref<_121dedce0_Data> _126548_index,jule::Ref<_111612b20_IndexingExpr> _126566_i) {
	{
		if (!((jule::real(_126534_d->_field_kind->_method_ptr())))) { goto _case_end_4642967472; }
		_case_begin_4642967472:;
		{
			(*this)._method_indexing_ptr(_126534_d,_126548_index,_126566_i);
			return;
		}
		goto _match_end_4642967184;
		_case_end_4642967472:;
		if (!((jule::real(_126534_d->_field_kind->_method_arr())))) { goto _case_end_4642967584; }
		_case_begin_4642967584:;
		{
			(*this)._method_indexing_arr(_126534_d,_126548_index,_126566_i);
			return;
		}
		goto _match_end_4642967184;
		_case_end_4642967584:;
		if (!((jule::real(_126534_d->_field_kind->_method_slc())))) { goto _case_end_4642967696; }
		_case_begin_4642967696:;
		{
			(*this)._method_indexing_slc(_126534_d,_126548_index,_126566_i);
			return;
		}
		goto _match_end_4642967184;
		_case_end_4642967696:;
		if (!((jule::real(_126534_d->_field_kind->_method_map())))) { goto _case_end_4642967824; }
		_case_begin_4642967824:;
		{
			(*this)._method_indexing_map(_126534_d,_126548_index,_126566_i);
			return;
		}
		goto _match_end_4642967184;
		_case_end_4642967824:;
		if (!((jule::real(_126534_d->_field_kind->_method_prim())))) { goto _case_end_4642967952; }
		_case_begin_4642967952:;
		{
			jule::Ref<_1217f7750_Prim> _128417_prim = _126534_d->_field_kind->_method_prim();
			{
				if (!((_128417_prim->_method_is_str()))) { goto _case_end_4642982720; }
				_case_begin_4642982720:;
				{
					(*this)._method_indexing_str(_126534_d,_126548_index,_126566_i);
					return;
				}
				goto _match_end_4642982464;
				_case_end_4642982720:;
				_match_end_4642982464:;
			}
		}
		goto _match_end_4642967184;
		_case_end_4642967952:;
		_match_end_4642967184:;
	}
	(*this)._method_push_err(_126566_i->_field_token,jule::Str("not_supports_indexing", 21),jule::Slice<jule::Any>({jule::Any(_126534_d->_field_kind->_method_to_str())}));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_ident_decl_from_indexing(jule::Ref<_111612b20_IndexingExpr> _129553_i) {
	{
		auto _match_expr{ _129553_i->_field_expr };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_IdentExpr>>())) { goto _case_end_4642991776; }
		goto _match_end_4642990080;
		_case_end_4642991776:;
		_case_begin_4642990896:;
		{
			this->self->_method_push_err(_129553_i->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4642990080;
		_case_end_4642990896:;
		_match_end_4642990080:;
	}
	jule::Ref<_111612b20_IdentTypeDecl> _130317_decl = jule::new_struct<_111612b20_IdentTypeDecl>(new( std::nothrow ) _111612b20_IdentTypeDecl(_111613f20_Token(),_129553_i->_field_expr.operator jule::Ref<_111612b20_IdentExpr>()->_field_ident,jule::Bool(),jule::Slice<jule::Ref<_111612b20_TypeDecl>>()));
	{
		auto _match_expr{ _129553_i->_field_index };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_UnaryExpr>>())) { goto _case_end_4643001184; }
		_case_begin_4643001184:;
		{
			jule::Ref<_121dedce0_Data> _131121_d = this->self->_method_eval_unary(_129553_i->_field_index.operator jule::Ref<_111612b20_UnaryExpr>());
			if ((!(_131121_d->_field_decl))) {
				this->self->_method_push_err(_129553_i->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
				return jule::new_ref<_121dedce0_Data>();
			}
			_130317_decl->_field_generics=append(_130317_decl->_field_generics,jule::Slice<jule::Ref<_111612b20_TypeDecl>>({jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_111613f20_Token(),jule::Any(_131121_d->_field_kind)))}));
		}
		goto _match_end_4642996096;
		_case_end_4643001184:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_TypeDecl>>())) { goto _case_end_4643001296; }
		_case_begin_4643001296:;
		{
			_130317_decl->_field_generics=append(_130317_decl->_field_generics,jule::Slice<jule::Ref<_111612b20_TypeDecl>>({_129553_i->_field_index.operator jule::Ref<_111612b20_TypeDecl>()}));
		}
		goto _match_end_4642996096;
		_case_end_4643001296:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_IdentExpr>>())) { goto _case_end_4643000928; }
		_case_begin_4643000928:;
		{
			_130317_decl->_field_generics=append(_130317_decl->_field_generics,jule::Slice<jule::Ref<_111612b20_TypeDecl>>({jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_111613f20_Token(),jule::Any(jule::new_struct<_111612b20_IdentTypeDecl>(new( std::nothrow ) _111612b20_IdentTypeDecl(_111613f20_Token(),_129553_i->_field_index.operator jule::Ref<_111612b20_IdentExpr>()->_field_ident,jule::Bool(),jule::Slice<jule::Ref<_111612b20_TypeDecl>>())))))}));
		}
		goto _match_end_4642996096;
		_case_end_4643000928:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_TupleExpr>>())) { goto _case_end_4643001040; }
		_case_begin_4643001040:;
		{
			{
				auto __julec_range_expr = _129553_i->_field_index.operator jule::Ref<_111612b20_TupleExpr>()->_field_expr;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Any _121dedce0_expr = *__julec_range_begin;
					_iter_begin_4643021520:;
					{
						{
							auto _match_expr{ _121dedce0_expr };
							if (!(_match_expr.type_is<jule::Ref<_111612b20_TypeDecl>>())) { goto _case_end_4643023456; }
							_case_begin_4643023456:;
							{
								_130317_decl->_field_generics=append(_130317_decl->_field_generics,jule::Slice<jule::Ref<_111612b20_TypeDecl>>({_121dedce0_expr.operator jule::Ref<_111612b20_TypeDecl>()}));
							}
							goto _match_end_4643022704;
							_case_end_4643023456:;
							if (!(_match_expr.type_is<jule::Ref<_111612b20_IdentExpr>>())) { goto _case_end_4643023568; }
							_case_begin_4643023568:;
							{
								_130317_decl->_field_generics=append(_130317_decl->_field_generics,jule::Slice<jule::Ref<_111612b20_TypeDecl>>({jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_111613f20_Token(),jule::Any(jule::new_struct<_111612b20_IdentTypeDecl>(new( std::nothrow ) _111612b20_IdentTypeDecl(_111613f20_Token(),_121dedce0_expr.operator jule::Ref<_111612b20_IdentExpr>()->_field_ident,jule::Bool(),jule::Slice<jule::Ref<_111612b20_TypeDecl>>())))))}));
							}
							goto _match_end_4643022704;
							_case_end_4643023568:;
							_match_end_4643022704:;
						}
					}
					_iter_next_4643021520:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _121dedce0_expr = *__julec_range_begin; goto _iter_begin_4643021520; }
					_iter_end_4643021520:;
				}
			}
		}
		goto _match_end_4642996096;
		_case_end_4643001040:;
		_case_begin_4642997200:;
		{
			this->self->_method_push_err(_129553_i->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4642996096;
		_case_end_4642997200:;
		_match_end_4642996096:;
	}
	return this->self->_method_eval_type(jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_111613f20_Token(),jule::Any(_130317_decl))));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_indexing(jule::Ref<_111612b20_IndexingExpr> _134737_i) {
	jule::Ref<_1217f7750_TypeKind> _134817_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_134817_prefix;
	});
	jule::Ref<_121dedce0_Data> _135217_d = this->self->_method_eval_expr_kind(_134737_i->_field_expr);
	if ((!(jule::real(_135217_d)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_135217_d->_field_decl) {
		return this->self->_method_eval_ident_decl_from_indexing(_134737_i);
	}
	jule::Any _136217_expr_model = _135217_d->_field_model;
	jule::Ref<_121dedce0_Data> _136317_index = this->self->_method_eval_expr_kind(_134737_i->_field_index);
	this->self->_method_to_indexing(_135217_d,_136317_index,_134737_i);
	if (jule::real(_136317_index)) {
		if (_135217_d->_method_is_const()) {
			_135217_d->_field_model=jule::Any(_135217_d->_field_constant);
		} else {
			_135217_d->_field_model=jule::Any(jule::new_struct<_112673500_IndexigExprModel>(new( std::nothrow ) _112673500_IndexigExprModel(_136217_expr_model,_136317_index->_field_model)));
		}
	}
	return _135217_d;
}



inline std::tuple<jule::Ref<_121dedce0_Data>,jule::Ref<_121dedce0_Data>> _121dedce0_Eval::_method_eval_slicing_exprs(jule::Ref<_111612b20_SlicingExpr> _138442_s) {
	jule::Ref<_1217f7750_TypeKind> _138517_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_138517_prefix;
	});
	jule::Ref<_121dedce0_Data> _138917_l = jule::new_ref<_121dedce0_Data>();
	jule::Ref<_121dedce0_Data> _139017_r = jule::new_ref<_121dedce0_Data>();
	if (_138442_s->_field_start != nullptr) {
		_138917_l=this->self->_method_eval_expr_kind(_138442_s->_field_start);
		if (jule::real(_138917_l)) {
			this->self->_method_check_integer_indexing_by_data(_138917_l,_138442_s->_field_token);
		} else {
			return std::make_tuple(jule::new_ref<_121dedce0_Data>(),jule::new_ref<_121dedce0_Data>());
		}
	} else {
		_138917_l=jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i32", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1131530d0_Const::_static_method_new_i64(0LL)));
		_138917_l->_field_model=jule::Any(_138917_l->_field_constant);
	}
	if (_138442_s->_field_to != nullptr) {
		_139017_r=this->self->_method_eval_expr_kind(_138442_s->_field_to);
		if (jule::real(_139017_r)) {
			this->self->_method_check_integer_indexing_by_data(_139017_r,_138442_s->_field_token);
		} else {
			return std::make_tuple(jule::new_ref<_121dedce0_Data>(),jule::new_ref<_121dedce0_Data>());
		}
	}
	return std::make_tuple(_138917_l,_139017_r);
}



inline void _121dedce0_Eval::_method_slicing_arr(jule::Ref<_121dedce0_Data> _141930_d) {
	jule::Ref<_1217f7750_TypeKind> _142017_elem_type = _141930_d->_field_kind->_method_arr()->_field_elem->_method_clone();
	_141930_d->_field_kind->_field_kind=jule::new_struct<_1217f7750_Slc>(new( std::nothrow ) _1217f7750_Slc(_142017_elem_type));
	_141930_d->_field_lvalue=false;
	_141930_d->_field_mutable=_141930_d->_field_mutable || (!(_1217f7750_is_mut(_142017_elem_type)));
}



inline void _121dedce0_Eval::_method_slicing_slc(jule::Ref<_121dedce0_Data> _143030_d) {
	_143030_d->_field_lvalue=false;
}



inline void _121dedce0_Eval::_method_slicing_str(jule::Ref<_121dedce0_Data> _143430_d,jule::Ref<_121dedce0_Data> _143440_l,jule::Ref<_121dedce0_Data> _143450_r) {
	_143430_d->_field_lvalue=false;
	_143430_d->_field_mutable=true;
	if ((!(_143430_d->_method_is_const()))) {
		return;
	}
	if ((!(jule::real(_143440_l))) || (!(jule::real(_143450_r)))) {
		jule::drop(_143430_d->_field_constant);
		return;
	}
	if (_143440_l->_method_is_const() && _143450_r->_method_is_const()) {
		jule::I64 _144717_left = _143440_l->_field_constant->_method_as_i64();
		if (_144717_left < 0LL) {
			return;
		}
		jule::Str _145217_s = _143430_d->_field_constant->_method_read_str();
		jule::I64 _145321_right = 0LL;
		if ((!(jule::real(_143450_r)))) {
			_145321_right=static_cast<jule::I64>(_145217_s.len());
		} else {
			_145321_right=static_cast<jule::I64>(_143450_r->_field_constant->_method_as_i64());
		}
		if (_144717_left > _145321_right) {
			return;
		}
		_143430_d->_field_constant->_method_set_str(_145217_s.slice(static_cast<jule::Int>(_144717_left),static_cast<jule::Int>(_145321_right)));
	} else {
		jule::drop(_143430_d->_field_constant);
	}
}



inline void _121dedce0_Eval::_method_check_slicing(jule::Ref<_121dedce0_Data> _146936_d,jule::Ref<_121dedce0_Data> _146946_l,jule::Ref<_121dedce0_Data> _146956_r,jule::Ref<_111612b20_SlicingExpr> _146966_s) {
	{
		if (!((jule::real(_146936_d->_field_kind->_method_arr())))) { goto _case_end_4643136368; }
		_case_begin_4643136368:;
		{
			(*this)._method_slicing_arr(_146936_d);
			return;
		}
		goto _match_end_4643136096;
		_case_end_4643136368:;
		if (!((jule::real(_146936_d->_field_kind->_method_slc())))) { goto _case_end_4643136480; }
		_case_begin_4643136480:;
		{
			(*this)._method_slicing_slc(_146936_d);
			return;
		}
		goto _match_end_4643136096;
		_case_end_4643136480:;
		if (!((jule::real(_146936_d->_field_kind->_method_prim())))) { goto _case_end_4643136592; }
		_case_begin_4643136592:;
		{
			jule::Ref<_1217f7750_Prim> _148017_prim = _146936_d->_field_kind->_method_prim();
			{
				if (!((_148017_prim->_method_is_str()))) { goto _case_end_4643146944; }
				_case_begin_4643146944:;
				{
					(*this)._method_slicing_str(_146936_d,_146946_l,_146956_r);
					return;
				}
				goto _match_end_4643146688;
				_case_end_4643146944:;
				_match_end_4643146688:;
			}
		}
		goto _match_end_4643136096;
		_case_end_4643136592:;
		_match_end_4643136096:;
	}
	(*this)._method_push_err(_146966_s->_field_token,jule::Str("not_supports_slicing", 20),jule::Slice<jule::Any>({jule::Any(_146936_d->_field_kind->_method_to_str())}));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_slicing(jule::Ref<_111612b20_SlicingExpr> _149136_s) {
	jule::Ref<_121dedce0_Data> _149217_d = this->self->_method_eval_expr_kind(_149136_s->_field_expr);
	if ((!(jule::real(_149217_d)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_121dedce0_Data> _149718_l;
	jule::Ref<_121dedce0_Data> _149725_r;
	std::tie(_149718_l,_149725_r) = this->self->_method_eval_slicing_exprs(_149136_s);
	if ((!(jule::real(_149718_l)))) {
		return _149217_d;
	}
	this->self->_method_check_slicing(_149217_d,_149718_l,_149725_r,_149136_s);
	jule::drop(_149217_d->_field_cast_kind);
	jule::Ref<_112673500_SlicingExprModel> _150517_model = jule::new_struct<_112673500_SlicingExprModel>(new( std::nothrow ) _112673500_SlicingExprModel(_149217_d->_field_model,_149718_l->_field_model,jule::Any()));
	if (jule::real(_149725_r)) {
		_150517_model->_field_right=_149725_r->_field_model;
	}
	_149217_d->_field_model=jule::Any(_150517_model);
	return _149217_d;
}



inline void _121dedce0_Eval::_method_cast_ptr(jule::Ref<_1217f7750_TypeKind> _151827_t,jule::Ref<_121dedce0_Data> _151845_d,_111613f20_Token _151855_error_token) {
	if ((!((*this)._method_is_unsafe()))) {
		(*this)._method_push_err(_151855_error_token,jule::Str("unsafe_behavior_at_out_of_unsafe_scope", 38),jule::Slice<jule::Any>({}));
		return;
	}
	jule::Ref<_1217f7750_Prim> _152413_prim = _151845_d->_field_kind->_method_prim();
	if ((!(jule::real(_151845_d->_field_kind->_method_ptr()))) && ((!(jule::real(_152413_prim))) || (!(_1132426f0_is_int(_152413_prim->_method_to_str()))))) {
		(*this)._method_push_err(_151855_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(_151845_d->_field_kind->_method_to_str()),jule::Any(_151827_t->_method_to_str())}));
	}
	jule::drop(_151845_d->_field_constant);
}



inline void _121dedce0_Eval::_method_cast_struct(jule::Ref<_1217f7750_TypeKind> _153234_t,jule::Ref<_121dedce0_Data> _153252_d,_111613f20_Token _153262_error_token) {
	jule::Ref<_11209e2e0_Trait> _153317_tr = _153252_d->_field_kind->_method_trt();
	if ((!(jule::real(_153317_tr)))) {
		(*this)._method_push_err(_153262_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(_153252_d->_field_kind->_method_to_str()),jule::Any(_153234_t->_method_to_str())}));
		return;
	}
	jule::Ref<_11209db80_StructIns> _153917_s = jule::new_ref<_11209db80_StructIns>();
	if (jule::real(_153234_t->_method_ref())) {
		_153917_s=_153234_t->_method_ref()->_field_elem->_method_strct();
	} else {
		_153917_s=_153234_t->_method_strct();
	}
	(*this)._method_push_reference_to_struct(_153917_s);
	if ((!(_153917_s->_field_decl->_method_is_implements(_153317_tr)))) {
		(*this)._method_push_err(_153262_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(_153252_d->_field_kind->_method_to_str()),jule::Any(_153234_t->_method_to_str())}));
	}
}



inline void _121dedce0_Eval::_method_cast_ref(jule::Ref<_1217f7750_TypeKind> _155331_t,jule::Ref<_121dedce0_Data> _155349_d,_111613f20_Token _155359_error_token) {
	jule::Ref<_1217f7750_Ref> _155417_ref = _155331_t->_method_ref();
	if (jule::real(_155417_ref->_field_elem->_method_strct())) {
		(*this)._method_cast_struct(_155331_t,_155349_d,_155359_error_token);
		return;
	}
	(*this)._method_push_err(_155359_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(_155349_d->_field_kind->_method_to_str()),jule::Any(_155331_t->_method_to_str())}));
}



inline void _121dedce0_Eval::_method_cast_slc(jule::Ref<_1217f7750_TypeKind> _156331_t,jule::Ref<_121dedce0_Data> _156349_d,_111613f20_Token _156359_error_token) {
	if (jule::real(_156349_d->_field_kind->_method_enm())) {
		if ((!(jule::real(_156349_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_prim()))) || (!(_156349_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_prim()->_method_is_str()))) {
			(*this)._method_push_err(_156359_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(_156349_d->_field_kind->_method_to_str()),jule::Any(_156331_t->_method_to_str())}));
			return;
		}
	} else if ((!(jule::real(_156349_d->_field_kind->_method_prim()))) || (!(_156349_d->_field_kind->_method_prim()->_method_is_str()))) {
		(*this)._method_push_err(_156359_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(_156349_d->_field_kind->_method_to_str()),jule::Any(_156331_t->_method_to_str())}));
		return;
	}
	_156331_t=_156331_t->_method_slc()->_field_elem;
	jule::Ref<_1217f7750_Prim> _157513_prim = _156331_t->_method_prim();
	if ((!(jule::real(_157513_prim))) || ((!(_157513_prim->_method_is_u8())) && (!(_157513_prim->_method_is_i32())))) {
		(*this)._method_push_err(_156359_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(_156349_d->_field_kind->_method_to_str()),jule::Any(_156331_t->_method_to_str())}));
	}
}



inline void _121dedce0_Eval::_method_cast_str(jule::Ref<_121dedce0_Data> _158131_d,_111613f20_Token _158141_error_token) {
	if (jule::real(_158131_d->_field_kind->_method_enm())) {
		jule::Ref<_11261eaf0_Enum> _158321_e = _158131_d->_field_kind->_method_enm();
		if (jule::real(_158321_e->_field_kind->_field_kind->_method_prim()) && _158321_e->_field_kind->_field_kind->_method_prim()->_method_is_str()) {
			return;
		}
	}
	if (jule::real(_158131_d->_field_kind->_method_prim())) {
		jule::Ref<_1217f7750_Prim> _159017_prim = _158131_d->_field_kind->_method_prim();
		if ((!(_159017_prim->_method_is_u8())) && (!(_159017_prim->_method_is_i32()))) {
			(*this)._method_push_err(_158141_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_158131_d->_field_kind->_method_to_str())}));
		}
		return;
	}
	if ((!(jule::real(_158131_d->_field_kind->_method_slc())))) {
		(*this)._method_push_err(_158141_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_158131_d->_field_kind->_method_to_str())}));
		return;
	}
	jule::Ref<_1217f7750_TypeKind> _160217_t = _158131_d->_field_kind->_method_slc()->_field_elem;
	jule::Ref<_1217f7750_Prim> _160313_prim = _160217_t->_method_prim();
	if ((!(jule::real(_160313_prim))) || ((!(_160313_prim->_method_is_u8())) && (!(_160313_prim->_method_is_i32())))) {
		(*this)._method_push_err(_158141_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_158131_d->_field_kind->_method_to_str())}));
	}
}



inline void _121dedce0_Eval::_method_cast_int(jule::Ref<_1217f7750_TypeKind> _160931_t,jule::Ref<_121dedce0_Data> _160949_d,_111613f20_Token _160959_error_token) {
	if (_160949_d->_method_is_const()) {
		jule::Ref<_1217f7750_Prim> _161117_prim = _160931_t->_method_prim();
		{
			if (!((_1132426f0_is_sig_int(_161117_prim->_field_kind)))) { goto _case_end_4643284128; }
			_case_begin_4643284128:;
			{
				_160949_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_160949_d->_field_constant->_method_as_i64()));
			}
			goto _match_end_4643283872;
			_case_end_4643284128:;
			if (!((_1132426f0_is_unsig_int(_161117_prim->_field_kind)))) { goto _case_end_4643284240; }
			_case_begin_4643284240:;
			{
				_160949_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_160949_d->_field_constant->_method_as_u64()));
			}
			goto _match_end_4643283872;
			_case_end_4643284240:;
			_match_end_4643283872:;
		}
	}
	if (jule::real(_160949_d->_field_kind->_method_enm())) {
		jule::Ref<_11261eaf0_Enum> _162217_e = _160949_d->_field_kind->_method_enm();
		if (_1132426f0_is_num(_162217_e->_field_kind->_field_kind->_method_to_str())) {
			return;
		}
	}
	if (jule::real(_160949_d->_field_kind->_method_ptr())) {
		jule::Ref<_1217f7750_Prim> _162917_prim = _160931_t->_method_prim();
		if (_162917_prim->_method_is_uintptr()) {
		} else if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_160959_error_token,jule::Str("unsafe_behavior_at_out_of_unsafe_scope", 38),jule::Slice<jule::Any>({}));
		} else if (((((!(_162917_prim->_method_is_i32())) && (!(_162917_prim->_method_is_i64()))) && (!(_162917_prim->_method_is_u16()))) && (!(_162917_prim->_method_is_u32()))) && (!(_162917_prim->_method_is_u64()))) {
			(*this)._method_push_err(_160959_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(_160949_d->_field_kind->_method_to_str()),jule::Any(_160931_t->_method_to_str())}));
		}
		return;
	}
	jule::Ref<_1217f7750_Prim> _164013_prim = _160949_d->_field_kind->_method_prim();
	if (jule::real(_164013_prim) && _1132426f0_is_num(_164013_prim->_method_to_str())) {
		return;
	}
	(*this)._method_push_err(_160959_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(_160949_d->_field_kind->_method_to_str()),jule::Any(_160931_t->_method_to_str())}));
}



inline void _121dedce0_Eval::_method_cast_num(jule::Ref<_1217f7750_TypeKind> _164831_t,jule::Ref<_121dedce0_Data> _164849_d,_111613f20_Token _164859_error_token) {
	if (_164849_d->_method_is_const()) {
		jule::Ref<_1217f7750_Prim> _165017_prim = _164831_t->_method_prim();
		{
			if (!((_1132426f0_is_float(_165017_prim->_field_kind)))) { goto _case_end_4643328896; }
			_case_begin_4643328896:;
			{
				_164849_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_164849_d->_field_constant->_method_as_f64()));
			}
			goto _match_end_4643328576;
			_case_end_4643328896:;
			if (!((_1132426f0_is_sig_int(_165017_prim->_field_kind)))) { goto _case_end_4643329008; }
			_case_begin_4643329008:;
			{
				_164849_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_164849_d->_field_constant->_method_as_i64()));
			}
			goto _match_end_4643328576;
			_case_end_4643329008:;
			if (!((_1132426f0_is_unsig_int(_165017_prim->_field_kind)))) { goto _case_end_4643329120; }
			_case_begin_4643329120:;
			{
				_164849_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_164849_d->_field_constant->_method_as_u64()));
			}
			goto _match_end_4643328576;
			_case_end_4643329120:;
			_match_end_4643328576:;
		}
	}
	if (jule::real(_164849_d->_field_kind->_method_enm())) {
		jule::Ref<_11261eaf0_Enum> _166417_e = _164849_d->_field_kind->_method_enm();
		if (_1132426f0_is_num(_166417_e->_field_kind->_field_kind->_method_to_str())) {
			return;
		}
	}
	jule::Ref<_1217f7750_Prim> _167013_prim = _164849_d->_field_kind->_method_prim();
	if (jule::real(_167013_prim) && _1132426f0_is_num(_167013_prim->_method_to_str())) {
		return;
	}
	(*this)._method_push_err(_164859_error_token,jule::Str("type_not_supports_casting_to", 28),jule::Slice<jule::Any>({jule::Any(_164849_d->_field_kind->_method_to_str()),jule::Any(_164831_t->_method_to_str())}));
}



inline void _121dedce0_Eval::_method_cast_prim(jule::Ref<_1217f7750_TypeKind> _167832_t,jule::Ref<_121dedce0_Data> _167850_d,_111613f20_Token _167860_error_token) {
	jule::Ref<_1217f7750_Prim> _167913_prim = _167832_t->_method_prim();
	{
		if (!((_167913_prim->_method_is_any()))) { goto _case_end_4643357872; }
		goto _match_end_4643356112;
		_case_end_4643357872:;
		if (!((_167913_prim->_method_is_str()))) { goto _case_end_4643357152; }
		_case_begin_4643357152:;
		{
			(*this)._method_cast_str(_167850_d,_167860_error_token);
		}
		goto _match_end_4643356112;
		_case_end_4643357152:;
		if (!((_1132426f0_is_int(_167913_prim->_method_to_str())))) { goto _case_end_4643356672; }
		_case_begin_4643356672:;
		{
			(*this)._method_cast_int(_167832_t,_167850_d,_167860_error_token);
		}
		goto _match_end_4643356112;
		_case_end_4643356672:;
		if (!((_1132426f0_is_num(_167913_prim->_method_to_str())))) { goto _case_end_4643356784; }
		_case_begin_4643356784:;
		{
			(*this)._method_cast_num(_167832_t,_167850_d,_167860_error_token);
		}
		goto _match_end_4643356112;
		_case_end_4643356784:;
		_case_begin_4643356368:;
		{
			(*this)._method_push_err(_167860_error_token,jule::Str("type_not_supports_casting", 25),jule::Slice<jule::Any>({jule::Any(_167832_t->_method_to_str())}));
		}
		goto _match_end_4643356112;
		_case_end_4643356368:;
		_match_end_4643356112:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_cast_by_type_n_data(jule::Ref<_1217f7750_TypeKind> _169847_t,jule::Ref<_121dedce0_Data> _169865_d,_111613f20_Token _169875_error_token) {
	{
		if (!((jule::real(_169865_d->_field_kind->_method_prim()) && _169865_d->_field_kind->_method_prim()->_method_is_any()))) { goto _case_end_4643374000; }
		goto _match_end_4643372256;
		_case_end_4643374000:;
		if (!((jule::real(_169847_t->_method_ptr())))) { goto _case_end_4643376384; }
		_case_begin_4643376384:;
		{
			(*this)._method_cast_ptr(_169847_t,_169865_d,_169875_error_token);
		}
		goto _match_end_4643372256;
		_case_end_4643376384:;
		if (!((jule::real(_169847_t->_method_ref())))) { goto _case_end_4643376496; }
		_case_begin_4643376496:;
		{
			(*this)._method_cast_ref(_169847_t,_169865_d,_169875_error_token);
		}
		goto _match_end_4643372256;
		_case_end_4643376496:;
		if (!((jule::real(_169847_t->_method_slc())))) { goto _case_end_4643372752; }
		_case_begin_4643372752:;
		{
			(*this)._method_cast_slc(_169847_t,_169865_d,_169875_error_token);
		}
		goto _match_end_4643372256;
		_case_end_4643372752:;
		if (!((jule::real(_169847_t->_method_strct())))) { goto _case_end_4643372864; }
		_case_begin_4643372864:;
		{
			(*this)._method_cast_struct(_169847_t,_169865_d,_169875_error_token);
		}
		goto _match_end_4643372256;
		_case_end_4643372864:;
		if (!((jule::real(_169847_t->_method_prim())))) { goto _case_end_4643372976; }
		_case_begin_4643372976:;
		{
			(*this)._method_cast_prim(_169847_t,_169865_d,_169875_error_token);
		}
		goto _match_end_4643372256;
		_case_end_4643372976:;
		_case_begin_4643372448:;
		{
			(*this)._method_push_err(_169875_error_token,jule::Str("type_not_supports_casting", 25),jule::Slice<jule::Any>({jule::Any(_169847_t->_method_to_str())}));
			jule::drop(_169865_d);
		}
		goto _match_end_4643372256;
		_case_end_4643372448:;
		_match_end_4643372256:;
	}
	if ((!(jule::real(_169865_d)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	_169865_d->_field_mutable=_169865_d->_field_mutable || ((!(_1217f7750_is_mut(_169865_d->_field_kind))) && _1217f7750_is_mut(_169847_t));
	_169865_d->_field_lvalue=_1217f7750_is_lvalue(_169847_t);
	_169865_d->_field_decl=false;
	if (jule::real(_169847_t->_method_prim()) && _169865_d->_method_is_const()) {
		_169865_d->_field_model=jule::Any(_169865_d->_field_constant);
	}
	if ((!(jule::real(_169865_d->_field_kind->_method_enm()))) || (_169865_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_to_str() != _169847_t->_method_to_str())) {
		_169865_d->_field_cast_kind=_169847_t;
	} else {
		_169865_d->_field_kind=_169847_t;
	}
	return _169865_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_cast(jule::Ref<_111612b20_CastExpr> _174733_c) {
	jule::Ref<_1217f7750_TypeSymbol> _174817_t = _112572770_build_type(_174733_c->_field_kind);
	jule::Bool _174913_ok = this->self->_field_s->_method_check_type(_174817_t,this->self->_field_lookup);
	if ((!(_174913_ok))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_1217f7750_TypeKind> _175417_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_175417_prefix;
	});
	jule::Ref<_121dedce0_Data> _175817_d = this->self->_method_eval_expr_kind(_174733_c->_field_expr);
	if ((!(jule::real(_175817_d)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	_175817_d=this->self->_method_eval_cast_by_type_n_data(_174817_t->_field_kind,_175817_d,_174733_c->_field_kind->_field_token);
	return _175817_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_ns_selection(jule::Ref<_111612b20_NsSelectionExpr> _176836_s) {
	jule::Str _176913_path = _1217f7750_build_link_path_by_tokens(_176836_s->_field_ns);
	jule::Ref<_11265fb90_ImportInfo> _177017_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)>([=](jule::Ref<_11265fb90_ImportInfo> _177053_p) mutable -> jule::Bool {
		return _177053_p->_field_link_path == _176913_path;
	}));
	if ((!(jule::real(_177017_imp))) || (!(_177017_imp->_method_is_lookupable(jule::Str("self", 4))))) {
		(*this)._method_push_err(_176836_s->_field_ident,jule::Str("namespace_not_exist", 19),jule::Slice<jule::Any>({jule::Any(_176913_path)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Trait<_112f89930_Lookup> _177917_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_177017_imp;
	
	jule::Any _178317_def = (*this)._method_get_def(_176836_s->_field_ident._field_kind,false);
	(*this)._field_lookup=_177917_lookup;
	jule::Ref<_121dedce0_Data> _178617_d = (*this)._method_eval_def(_178317_def,_176836_s->_field_ident);
	return _178617_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_struct_lit_explicit(jule::Ref<_11209db80_StructIns> _179148_s,jule::Slice<jule::Any> _179167_exprs,_111613f20_Token _179186_error_token) {
	jule::Bool _179213_ok = this->self->_field_s->_method_check_generic_quantity(static_cast<jule::I64>(_179148_s->_field_decl->_field_generics.len()),static_cast<jule::I64>(_179148_s->_field_generics.len()),_179186_error_token);
	if ((!(_179213_ok))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	this->self->_method_push_reference_to_struct(_179148_s);
	_121807de0_StructLitChecker _180017_slc = _121807de0_StructLitChecker(this->self,_179186_error_token,_179148_s,jule::Slice<jule::Ref<_112673500_StructArgExprModel>>());
	_180017_slc._method_check(_179167_exprs);
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_179148_s)),jule::Ref<_1217f7750_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_StructLitExprModel>(new( std::nothrow ) _112673500_StructLitExprModel(_179148_s,_180017_slc._field_args))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_struct_lit(jule::Ref<_111612b20_StructLit> _181739_lit) {
	jule::Ref<_1217f7750_TypeSymbol> _181817_t = _112572770_build_type(_181739_lit->_field_kind);
	jule::Bool _181913_ok = this->self->_field_s->_method_check_type(_181817_t,this->self->_field_lookup);
	if ((!(_181913_ok))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_11209db80_StructIns> _182417_s = _181817_t->_field_kind->_method_strct();
	if ((!(jule::real(_182417_s)))) {
		this->self->_method_push_err(_181739_lit->_field_kind->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_121dedce0_Data>();
	}
	return this->self->_method_eval_struct_lit_explicit(_182417_s,_181739_lit->_field_exprs,_181739_lit->_field_kind->_field_token);
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_type(jule::Ref<_111612b20_TypeDecl> _183332_t) {
	jule::Ref<_1217f7750_TypeSymbol> _183417_tk = _112572770_build_type(_183332_t);
	jule::Bool _183513_ok = (*this)._field_s->_method_check_type(_183417_tk,(*this)._field_lookup);
	if ((!(_183513_ok))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(_183417_tk->_field_kind,jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_183417_tk->_field_kind),true,jule::Ref<_1131530d0_Const>()));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_call_type_fn(jule::Ref<_111612b20_FnCallExpr> _184736_fc,jule::Ref<_121dedce0_Data> _184757_d) {
	if (_184736_fc->_field_generics.len() > 0LL) {
		this->self->_method_push_err(_184736_fc->_field_token,jule::Str("type_not_supports_generics", 26),jule::Slice<jule::Any>({jule::Any(_184757_d->_field_kind->_method_to_str())}));
	} else if (_184736_fc->_field_args.len() < 1LL) {
		this->self->_method_push_err(_184736_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
	} else if (_184736_fc->_field_args.len() > 1LL) {
		this->self->_method_push_err(_184736_fc->_field_args[static_cast<jule::Int>(1LL)]->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
	}
	if (_184736_fc->_field_args.len() > 0LL) {
		jule::Ref<_121dedce0_Data> _185721_arg = this->self->_method_eval_expr_kind(_184736_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_kind);
		if (jule::real(_185721_arg)) {
			_184757_d=this->self->_method_eval_cast_by_type_n_data(_184757_d->_field_kind,_185721_arg,_184736_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token);
		}
	}
	_184757_d->_field_decl=false;
	return _184757_d;
}



inline std::tuple<jule::Bool,jule::Bool> _121dedce0_Eval::_method_check_fn_call_generics(jule::Ref<_112446fb0_FnIns> _186845_f,jule::Ref<_111612b20_FnCallExpr> _186913_fc) {
	jule::Bool _186942_dynamic_annotation = jule::Bool();
	jule::Bool _186932_ok = jule::Bool();
	{
		if (!((((_186845_f->_field_decl->_field_generics.len() > 0LL) && (_186913_fc->_field_generics.len() == 0LL)) && (_186845_f->_field_params.len() > 0LL)))) { goto _case_end_4643521136; }
		_case_begin_4643521136:;
		{
			_186942_dynamic_annotation=true;
			_186845_f->_field_generics=jule::Slice<jule::Ref<_1217f7750_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_186845_f->_field_decl->_field_generics.len())));
			_186932_ok = true;
			_186942_dynamic_annotation = true;
			return std::make_tuple(_186932_ok,_186942_dynamic_annotation);
		}
		goto _match_end_4643511344;
		_case_end_4643521136:;
		if (!(((!((*this)._field_s->_method_check_generic_quantity(static_cast<jule::I64>(_186845_f->_field_decl->_field_generics.len()),static_cast<jule::I64>(_186913_fc->_field_generics.len()),_186913_fc->_field_token)))))) { goto _case_end_4643526000; }
		_case_begin_4643526000:;
		{
			_186932_ok = false;
			_186942_dynamic_annotation = false;
			return std::make_tuple(_186932_ok,_186942_dynamic_annotation);
		}
		goto _match_end_4643511344;
		_case_end_4643526000:;
		_case_begin_4643511552:;
		{
			_186845_f->_field_generics=jule::Slice<jule::Ref<_1217f7750_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_186845_f->_field_decl->_field_generics.len())));
			{
				auto __julec_range_expr = _186913_fc->_field_generics;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Int _121dedce0_i = 0;
					jule::Ref<_111612b20_TypeDecl> _121dedce0_g = *__julec_range_begin;
					_iter_begin_4643513152:;
					{
						jule::Ref<_1217f7750_TypeSymbol> _188425_k = _112572770_build_type(_121dedce0_g);
						jule::Bool _188521_ok = (*this)._field_s->_method_check_type(_188425_k,(*this)._field_lookup);
						if ((!(_188521_ok))) {
							_186932_ok = false;
							_186942_dynamic_annotation = false;
							return std::make_tuple(_186932_ok,_186942_dynamic_annotation);
						}
						_186845_f->_field_generics[static_cast<jule::Int>(_121dedce0_i)]=_188425_k->_field_kind;
					}
					_iter_next_4643513152:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { ++_121dedce0_i; _121dedce0_g = *__julec_range_begin; goto _iter_begin_4643513152; }
					_iter_end_4643513152:;
				}
			}
			_186932_ok = true;
			_186942_dynamic_annotation = false;
			return std::make_tuple(_186932_ok,_186942_dynamic_annotation);
		}
		goto _match_end_4643511344;
		_case_end_4643511552:;
		_match_end_4643511344:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_call_builtin_fn(jule::Ref<_111612b20_FnCallExpr> _189639_fc,jule::Ref<_121dedce0_Data> _189660_d) {
	jule::Ref<_112446fb0_FnIns> _189717_f = _189660_d->_field_kind->_method_fnc();
	_189660_d=_189717_f->_field_caller(this->self,_189639_fc,_189660_d);
	if ((!(jule::real(_189660_d)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	_189660_d->_field_mutable=true;
	return _189660_d;
}



inline void _121dedce0_Eval::_method_check_fn_of_concurrent_call(jule::Ref<_112446fb0_FnIns>& _190847_f,_111613f20_Token _190858_error_token) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	{
		auto __julec_range_expr = _190847_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_ParamIns> _121dedce0_p = *__julec_range_begin;
			_iter_begin_4643552640:;
			{
				if (_121dedce0_p->_field_decl->_field_reference) {
					(*this)._method_push_err(_190858_error_token,jule::Str("concurrent_call_with_reference_parameter", 40),jule::Slice<jule::Any>({}));
					return;
				}
			}
			_iter_next_4643552640:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _121dedce0_p = *__julec_range_begin; goto _iter_begin_4643552640; }
			_iter_end_4643552640:;
		}
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_call_fn(jule::Ref<_111612b20_FnCallExpr> _192131_fc,jule::Ref<_121dedce0_Data> _192152_d) {
	jule::Ref<_112446fb0_FnIns> _192217_f = _192152_d->_field_kind->_method_fnc();
	if (_192217_f->_method_is_builtin()) {
		return this->self->_method_call_builtin_fn(_192131_fc,_192152_d);
	}
	if (_192131_fc->_field_concurrent) {
		this->self->_method_check_fn_of_concurrent_call(_192217_f,_192131_fc->_field_token);
	}
	if ((((!(_192152_d->_field_mutable)) && _192217_f->_field_decl->_method_is_method()) && (!(_192217_f->_field_decl->_field_statically))) && _192217_f->_field_decl->_field_params[static_cast<jule::Int>(0LL)]->_field_mutable) {
		this->self->_method_push_err(_192131_fc->_field_token,jule::Str("mutable_operation_on_immutable", 30),jule::Slice<jule::Any>({}));
	} else if ((!(this->self->_method_is_unsafe())) && _192217_f->_field_decl->_field_unsafety) {
		this->self->_method_push_err(_192131_fc->_field_token,jule::Str("unsafe_behavior_at_out_of_unsafe_scope", 38),jule::Slice<jule::Any>({}));
	}
	jule::Bool _193718_ok;
	jule::Bool _193722_dynamic_annotation;
	std::tie(_193718_ok,_193722_dynamic_annotation) = this->self->_method_check_fn_call_generics(_192217_f,_192131_fc);
	if ((!(_193718_ok))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_11262c360_Sema> _194217_old = this->self->_field_s;
	if (jule::real(_192217_f->_field_decl->_field_owner)) {
		this->self->_field_s=_192217_f->_field_decl->_field_owner->_field_sema;
	}
	__JULE_DEFER({
		if ((_194217_old).alloc != (this->self->_field_s).alloc) {
			_194217_old->_field_errors=append(_194217_old->_field_errors,this->self->_field_s->_field_errors);
		}
		this->self->_field_s=_194217_old;
	});
	if ((!(_193722_dynamic_annotation))) {
		if ((!(_192217_f->_field_reloaded))) {
			jule::Bool _195621_ok = this->self->_field_s->_method_reload_fn_ins_types(_192217_f);
			if ((!(_195621_ok))) {
				return jule::new_ref<_121dedce0_Data>();
			}
			_192217_f->_field_reloaded=true;
		}
	} else {
		this->self->_field_s->_method_build_fn_non_generic_type_kinds(_192217_f);
	}
	_121807de0_FnCallArgChecker _196617_fcac = _121807de0_FnCallArgChecker(this->self,_192131_fc->_field_args,_192131_fc->_field_token,_192217_f,_193722_dynamic_annotation,jule::Slice<jule::Any>());
	if (jule::real(_192217_f->_field_decl->_field_owner)) {
		std::tie(_194217_old,this->self->_field_s) = std::make_tuple(this->self->_field_s,_194217_old);
		_193718_ok=_196617_fcac._method_check();
		std::tie(_194217_old,this->self->_field_s) = std::make_tuple(this->self->_field_s,_194217_old);
	} else {
		_193718_ok=_196617_fcac._method_check();
	}
	if ((!(_193718_ok)) && _193722_dynamic_annotation) {
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Bool _198514_is_unique_ins;
	jule::Int _198529_pos;
	std::tie(_198514_is_unique_ins,_198529_pos) = _192217_f->_field_decl->_method_append_instance(_192217_f);
	if ((!(_198514_is_unique_ins))) {
		_192217_f=_192217_f->_field_decl->_field_instances[static_cast<jule::Int>(_198529_pos)];
	}
	jule::Any _199017_call_model = _192152_d->_field_model;
	if (_192217_f->_field_decl->_method_is_void()) {
		_192152_d=_121dedce0_build_void_data();
	} else {
		if (_193722_dynamic_annotation) {
			_193718_ok=this->self->_field_s->_method_reload_fn_ins_types(_192217_f);
			if ((!(_193718_ok))) {
				return jule::new_ref<_121dedce0_Data>();
			}
			_192217_f->_field_reloaded=true;
		}
		_192152_d->_field_kind=_192217_f->_field_result;
		_192152_d->_field_lvalue=_1217f7750_is_lvalue(_192217_f->_field_result);
	}
	_192152_d->_field_mutable=true;
	_192152_d->_field_model=jule::Any(jule::new_struct<_112673500_FnCallExprModel>(new( std::nothrow ) _112673500_FnCallExprModel(_192217_f,_192131_fc->_field_concurrent,_199017_call_model,_196617_fcac._field_arg_models)));
	if ((_192217_f->_field_generics.len() > 0LL) && _198514_is_unique_ins) {
		this->self->_field_s->_method_check_fn_ins(_192217_f);
	}
	return _192152_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_fn_call(jule::Ref<_111612b20_FnCallExpr> _202336_fc) {
	jule::Ref<_1217f7750_TypeKind> _202417_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_202417_prefix;
	});
	jule::Ref<_121dedce0_Data> _202817_d = this->self->_method_eval_expr_kind(_202336_fc->_field_expr->_field_kind);
	if ((!(jule::real(_202817_d)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_202817_d->_field_decl) {
		return this->self->_method_call_type_fn(_202336_fc,_202817_d);
	}
	if ((!(jule::real(_202817_d->_field_kind->_method_fnc())))) {
		this->self->_method_push_err(_202336_fc->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
		return jule::new_ref<_121dedce0_Data>();
	}
	return this->self->_method_call_fn(_202336_fc,_202817_d);
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_enum_static(jule::Ref<_11261eaf0_Enum> _204539_enm,_111613f20_Token _204551_ident) {
	jule::Ref<_121dedce0_Data> _204617_d = jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_204539_enm)),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,jule::Ref<_1131530d0_Const>()));
	jule::Ref<_11261eaf0_EnumItem> _205317_item = _204539_enm->_method_find_item(_204551_ident._field_kind);
	if ((!(jule::real(_205317_item)))) {
		(*this)._method_push_err(_204551_ident,jule::Str("obj_have_not_ident", 18),jule::Slice<jule::Any>({jule::Any(_204551_ident._field_kind)}));
	} else {
		_204617_d->_field_constant=jule::new_ref<_1131530d0_Const>(_205317_item->_field_value->_field_data->_field_constant.get());
		_204617_d->_field_model=jule::Any(_204617_d->_field_constant);
	}
	return _204617_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_struct_static(jule::Ref<_11209db80_StructIns> _206441_s,_111613f20_Token _206456_ident) {
	
	jule::Ref<_112446fb0_Fn> _206617_method = _206441_s->_method_find_method(_206456_ident._field_kind,true);
	if ((!(jule::real(_206617_method)))) {
		(*this)._method_push_err(_206456_ident,jule::Str("obj_have_not_ident", 18),jule::Slice<jule::Any>({jule::Any(_206456_ident._field_kind)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_121dedce0_Data> _207217_d = jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::Ref<_1217f7750_TypeKind>(),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,jule::Ref<_1131530d0_Const>()));
	jule::Ref<_112446fb0_FnIns> _207917_ins = _206617_method->_method_instance();
	_207917_ins->_field_owner=_206441_s;
	(*this)._method_push_reference_to_fn(_207917_ins);
	_207217_d->_field_model=jule::Any(jule::new_struct<_112673500_StructStaticIdentExprModel>(new( std::nothrow ) _112673500_StructStaticIdentExprModel(_206441_s,_207217_d->_field_model,_207917_ins)));
	_207217_d->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_207917_ins));
	return _207217_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_trait_sub_ident(jule::Ref<_121dedce0_Data> _209239_d,jule::Ref<_11209e2e0_Trait> _209253_trt,_111613f20_Token _209266_ident) {
	jule::Ref<_112446fb0_Fn> _209317_f = _209253_trt->_method_find_method(_209266_ident._field_kind);
	if ((!(jule::real(_209317_f)))) {
		(*this)._method_push_err(_209266_ident,jule::Str("obj_have_not_ident", 18),jule::Slice<jule::Any>({jule::Any(_209266_ident._field_kind)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Any _209917_model = jule::Any(nullptr);
	if ((_209253_trt).alloc == (_1130606b0_BUILTIN_TRAIT_ERROR).alloc) {
		_209917_model=jule::Any(jule::new_struct<_112673500_BuiltinErrorTraitSubIdentExprModel>(new( std::nothrow ) _112673500_BuiltinErrorTraitSubIdentExprModel(_209239_d->_field_model,_209266_ident._field_kind)));
	} else {
		_209917_model=jule::Any(jule::new_struct<_112673500_TraitSubIdentExprModel>(new( std::nothrow ) _112673500_TraitSubIdentExprModel(_209239_d->_field_model,_209266_ident._field_kind)));
	}
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_209317_f->_method_instance())),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),_209917_model,false,jule::Ref<_1131530d0_Const>()));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_struct_sub_ident(jule::Ref<_121dedce0_Data> _212144_d,jule::Ref<_11209db80_StructIns> _212158_s,jule::Ref<_111612b20_SubIdentExpr> _212173_si,jule::Bool _212192_ref) {
	jule::Ref<_11209db80_FieldIns> _212217_f = _212158_s->_method_find_field(_212173_si->_field_ident._field_kind);
	if (jule::real(_212217_f)) {
		if ((!((*this)._field_s->_method_is_accessible_define(_212217_f->_field_decl->_field_public,_212217_f->_field_decl->_field_token)))) {
			(*this)._method_push_err(_212173_si->_field_ident,jule::Str("ident_is_not_accessible", 23),jule::Slice<jule::Any>({jule::Any(_212217_f->_field_decl->_field_ident)}));
		}
		jule::Ref<_112673500_StructSubIdentExprModel> _212821_model = jule::new_struct<_112673500_StructSubIdentExprModel>(new( std::nothrow ) _112673500_StructSubIdentExprModel(_212144_d->_field_model,_212144_d->_field_kind,jule::Ref<_112446fb0_FnIns>(),_212217_f));
		_212144_d->_field_model=jule::Any(_212821_model);
		_212144_d->_field_kind=_212217_f->_field_kind->_method_clone();
		if (_212217_f->_field_decl->_field_mutable && (!(_212144_d->_field_mutable))) {
			{
				auto _match_expr{ (*this)._field_lookup };
				if (!(_match_expr.type_is<jule::Ref<_1126288e0_ScopeChecker>>())) { goto _case_end_4643711072; }
				_case_begin_4643711072:;
				{
					jule::Ref<_1126288e0_ScopeChecker> _214025_scope = (*this)._field_lookup.operator jule::Ref<_1126288e0_ScopeChecker>();
					_212144_d->_field_mutable=jule::real(_214025_scope->_field_owner) && ((_214025_scope->_field_owner->_field_owner).alloc == (_212158_s).alloc);
					if (_212144_d->_field_mutable) {
						jule::Ref<_1320e22c0_Var> _214333_field = _212821_model->_field_expr.operator jule::Ref<_1320e22c0_Var>();
						jule::Ref<_1320e22c0_Var> _214433_v = jule::new_struct<_1320e22c0_Var>(new( std::nothrow ) _1320e22c0_Var(_214333_field->_field_scope,_214333_field->_field_token,_214333_field->_field_ident,_214333_field->_field_cpp_linked,_214333_field->_field_constant,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),_214333_field->_field_kind,_214333_field->_field_value,jule::Ref<_112572770_ReferenceStack>(),jule::Slice<jule::Ref<_1320e22c0_Var>>()));
						_214433_v->_field_mutable=true;
						_212821_model->_field_expr=jule::Any(_214433_v);
					}
				}
				goto _match_end_4643708752;
				_case_end_4643711072:;
				_match_end_4643708752:;
			}
		}
		return _212144_d;
	}
	
	jule::Ref<_112446fb0_Fn> _216317_m = _212158_s->_method_find_method(_212173_si->_field_ident._field_kind,false);
	if ((!(jule::real(_216317_m)))) {
		(*this)._method_push_err(_212173_si->_field_ident,jule::Str("obj_have_not_ident", 18),jule::Slice<jule::Any>({jule::Any(_212173_si->_field_ident._field_kind)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_216317_m->_field_params[static_cast<jule::Int>(0LL)]->_method_is_ref() && (!(_212192_ref))) {
		(*this)._method_push_err(_212173_si->_field_ident,jule::Str("ref_method_used_with_not_ref_instance", 37),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_112446fb0_FnIns> _217417_ins = _216317_m->_method_instance();
	_217417_ins->_field_owner=_212158_s;
	(*this)._method_push_reference_to_fn(_217417_ins);
	_212144_d->_field_model=jule::Any(jule::new_struct<_112673500_StructSubIdentExprModel>(new( std::nothrow ) _112673500_StructSubIdentExprModel(_212144_d->_field_model,_212144_d->_field_kind,_217417_ins,jule::Ref<_11209db80_FieldIns>())));
	_212144_d->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_217417_ins));
	return _212144_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_slice_sub_ident(jule::Ref<_121dedce0_Data> _218643_d,_111613f20_Token _218653_ident) {
	{
		auto _match_expr{ _218653_ident._field_kind };
		if (!((jule::Str("len", 3)) == _match_expr)) { goto _case_end_4641217776; }
		_case_begin_4641217776:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i32", 3)))),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_218643_d->_field_kind,_218643_d->_field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641215440;
		_case_end_4641217776:;
		if (!((jule::Str("cap", 3)) == _match_expr)) { goto _case_end_4641220688; }
		_case_begin_4641220688:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i32", 3)))),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_218643_d->_field_kind,_218643_d->_field_model,jule::Str("cap()", 5)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641215440;
		_case_end_4641220688:;
		_case_begin_4641216192:;
		{
			(*this)._method_push_err(_218653_ident,jule::Str("obj_have_not_ident", 18),jule::Slice<jule::Any>({jule::Any(_218653_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641215440;
		_case_end_4641216192:;
		_match_end_4641215440:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_array_sub_ident(jule::Ref<_121dedce0_Data> _221643_d,_111613f20_Token _221653_ident) {
	{
		auto _match_expr{ _221653_ident._field_kind };
		if (!((jule::Str("len", 3)) == _match_expr)) { goto _case_end_4641233264; }
		_case_begin_4641233264:;
		{
			jule::Ref<_1131530d0_Const> _221921_c = _1131530d0_Const::_static_method_new_i64(static_cast<jule::I64>(_221643_d->_field_kind->_method_arr()->_field_n));
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i32", 3)))),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_221921_c),jule::Bool(),_221921_c));
		}
		goto _match_end_4641230928;
		_case_end_4641233264:;
		_case_begin_4641231680:;
		{
			(*this)._method_push_err(_221653_ident,jule::Str("obj_have_not_ident", 18),jule::Slice<jule::Any>({jule::Any(_221653_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641230928;
		_case_end_4641231680:;
		_match_end_4641230928:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_map_sub_ident(jule::Ref<_121dedce0_Data> _223341_d,_111613f20_Token _223351_ident) {
	{
		auto _match_expr{ _223351_ident._field_kind };
		if (!((jule::Str("len", 3)) == _match_expr)) { goto _case_end_4641249504; }
		_case_begin_4641249504:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i32", 3)))),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_223341_d->_field_kind,_223341_d->_field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641244256;
		_case_end_4641249504:;
		if (!((jule::Str("clear", 5)) == _match_expr)) { goto _case_end_4641249616; }
		_case_begin_4641249616:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>(),jule::Ref<_1217f7750_TypeKind>(),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common_mut,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),_223341_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_223341_d->_field_kind,_223341_d->_field_model,jule::Str("clear", 5)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641244256;
		_case_end_4641249616:;
		if (!((jule::Str("keys", 4)) == _match_expr)) { goto _case_end_4641249248; }
		_case_begin_4641249248:;
		{
			jule::Ref<_1217f7750_Map> _226221_m = _223341_d->_field_kind->_method_map();
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>(),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_1217f7750_Slc>(new( std::nothrow ) _1217f7750_Slc(_226221_m->_field_key)))),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common_mut,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),_223341_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_223341_d->_field_kind,_223341_d->_field_model,jule::Str("keys", 4)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641244256;
		_case_end_4641249248:;
		if (!((jule::Str("values", 6)) == _match_expr)) { goto _case_end_4641249360; }
		_case_begin_4641249360:;
		{
			jule::Ref<_1217f7750_Map> _228321_m = _223341_d->_field_kind->_method_map();
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>(),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_1217f7750_Slc>(new( std::nothrow ) _1217f7750_Slc(_228321_m->_field_val)))),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common_mut,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),_223341_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_223341_d->_field_kind,_223341_d->_field_model,jule::Str("values", 6)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641244256;
		_case_end_4641249360:;
		if (!((jule::Str("has", 3)) == _match_expr)) { goto _case_end_4641249824; }
		_case_begin_4641249824:;
		{
			jule::Ref<_1217f7750_Map> _230421_m = _223341_d->_field_kind->_method_map();
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("key", 3))),_230421_m->_field_key))}),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),_223341_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_223341_d->_field_kind,_223341_d->_field_model,jule::Str("has", 3)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641244256;
		_case_end_4641249824:;
		if (!((jule::Str("del", 3)) == _match_expr)) { goto _case_end_4641249936; }
		_case_begin_4641249936:;
		{
			jule::Ref<_1217f7750_Map> _232921_m = _223341_d->_field_kind->_method_map();
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("key", 3))),_232921_m->_field_key))}),jule::Ref<_1217f7750_TypeKind>(),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common_mut,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),_223341_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_223341_d->_field_kind,_223341_d->_field_model,jule::Str("del", 3)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641244256;
		_case_end_4641249936:;
		_case_begin_4641245008:;
		{
			(*this)._method_push_err(_223351_ident,jule::Str("obj_have_not_ident", 18),jule::Slice<jule::Any>({jule::Any(_223351_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641244256;
		_case_end_4641245008:;
		_match_end_4641244256:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_str_sub_ident(jule::Ref<_121dedce0_Data> _235841_d,_111613f20_Token _235851_ident) {
	{
		auto _match_expr{ _235851_ident._field_kind };
		if (!((jule::Str("len", 3)) == _match_expr)) { goto _case_end_4641293248; }
		_case_begin_4641293248:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i32", 3)))),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641290912;
		_case_end_4641293248:;
		if (!((jule::Str("has_prefix", 10)) == _match_expr)) { goto _case_end_4641295904; }
		_case_begin_4641295904:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("sub", 3))),_235841_d->_field_kind))}),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("has_prefix", 10)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641290912;
		_case_end_4641295904:;
		if (!((jule::Str("has_suffix", 10)) == _match_expr)) { goto _case_end_4641296016; }
		_case_begin_4641296016:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("sub", 3))),_235841_d->_field_kind))}),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("has_suffix", 10)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641290912;
		_case_end_4641296016:;
		if (!((jule::Str("find", 4)) == _match_expr)) { goto _case_end_4641296480; }
		_case_begin_4641296480:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("sub", 3))),_235841_d->_field_kind))}),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("int", 3)))),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("find", 4)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641290912;
		_case_end_4641296480:;
		if (!((jule::Str("rfind", 5)) == _match_expr)) { goto _case_end_4641296592; }
		_case_begin_4641296592:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("sub", 3))),_235841_d->_field_kind))}),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("int", 3)))),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("rfind", 5)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641290912;
		_case_end_4641296592:;
		if (!((jule::Str("trim", 4)) == _match_expr)) { goto _case_end_4641291968; }
		_case_begin_4641291968:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("bytes", 5))),_235841_d->_field_kind))}),_235841_d->_field_kind,jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("trim", 4)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641290912;
		_case_end_4641291968:;
		if (!((jule::Str("ltrim", 5)) == _match_expr)) { goto _case_end_4641292080; }
		_case_begin_4641292080:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("bytes", 5))),_235841_d->_field_kind))}),_235841_d->_field_kind,jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("ltrim", 5)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641290912;
		_case_end_4641292080:;
		if (!((jule::Str("rtrim", 5)) == _match_expr)) { goto _case_end_4641292192; }
		_case_begin_4641292192:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("bytes", 5))),_235841_d->_field_kind))}),_235841_d->_field_kind,jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("rtrim", 5)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641290912;
		_case_end_4641292192:;
		if (!((jule::Str("split", 5)) == _match_expr)) { goto _case_end_4641295184; }
		_case_begin_4641295184:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("sub", 3))),_235841_d->_field_kind)),jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("n", 1))),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("int", 3))))))}),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_1217f7750_Slc>(new( std::nothrow ) _1217f7750_Slc(_235841_d->_field_kind)))),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("split", 5)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641290912;
		_case_end_4641295184:;
		if (!((jule::Str("replace", 7)) == _match_expr)) { goto _case_end_4641295296; }
		_case_begin_4641295296:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("sub", 3))),_235841_d->_field_kind)),jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("new", 3))),_235841_d->_field_kind)),jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str("n", 1))),jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("int", 3))))))}),_235841_d->_field_kind,jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common,jule::Bool(),jule::Bool())))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_CommonSubIdentExprModel>(new( std::nothrow ) _112673500_CommonSubIdentExprModel(_235841_d->_field_kind,_235841_d->_field_model,jule::Str("replace", 7)))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641290912;
		_case_end_4641295296:;
		_case_begin_4641291664:;
		{
			(*this)._method_push_err(_235851_ident,jule::Str("obj_have_not_ident", 18),jule::Slice<jule::Any>({jule::Any(_235851_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641290912;
		_case_end_4641291664:;
		_match_end_4641290912:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_int_type_static(_111613f20_Token _260639_ident) {
	
	{
		auto _match_expr{ _260639_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4641363168; }
		_case_begin_4641363168:;
		{
			jule::Ref<_1131530d0_Const> _261121_c = _1131530d0_Const::_static_method_new_i64(static_cast<jule::I64>(_1131a6a20_max_of(jule::Str("int", 3))));
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("int", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_261121_c),jule::Bool(),_261121_c));
		}
		goto _match_end_4641360624;
		_case_end_4641363168:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4641366608; }
		_case_begin_4641366608:;
		{
			jule::Ref<_1131530d0_Const> _261921_c = _1131530d0_Const::_static_method_new_i64(static_cast<jule::I64>(_1131a6a20_min_of(jule::Str("int", 3))));
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("int", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_261921_c),jule::Bool(),_261921_c));
		}
		goto _match_end_4641360624;
		_case_end_4641366608:;
		_case_begin_4641361680:;
		{
			(*this)._method_push_err(_260639_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("int", 3)),jule::Any(_260639_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641360624;
		_case_end_4641361680:;
		_match_end_4641360624:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_uint_type_static(_111613f20_Token _263240_ident) {
	
	{
		auto _match_expr{ _263240_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4641380592; }
		_case_begin_4641380592:;
		{
			jule::Ref<_1131530d0_Const> _263721_c = _1131530d0_Const::_static_method_new_u64(static_cast<jule::U64>(_1131a6a20_max_of(jule::Str("uint", 4))));
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("uint", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_263721_c),jule::Bool(),_263721_c));
		}
		goto _match_end_4641378048;
		_case_end_4641380592:;
		_case_begin_4641379104:;
		{
			(*this)._method_push_err(_263240_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("uint", 4)),jule::Any(_263240_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641378048;
		_case_end_4641379104:;
		_match_end_4641378048:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_i8_type_static(_111613f20_Token _265038_ident) {
	
	
	
	{
		auto _match_expr{ _265038_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4641398800; }
		_case_begin_4641398800:;
		{
			jule::Ref<_1131530d0_Const> _265721_c = _1131530d0_Const::_static_method_new_i64(127LL);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i8", 2)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_265721_c),jule::Bool(),_265721_c));
		}
		goto _match_end_4641393104;
		_case_end_4641398800:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4641398912; }
		_case_begin_4641398912:;
		{
			jule::Ref<_1131530d0_Const> _266521_c = _1131530d0_Const::_static_method_new_i64(-128LL);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i8", 2)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_266521_c),jule::Bool(),_266521_c));
		}
		goto _match_end_4641393104;
		_case_end_4641398912:;
		_case_begin_4641393968:;
		{
			(*this)._method_push_err(_265038_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("i8", 2)),jule::Any(_265038_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641393104;
		_case_end_4641393968:;
		_match_end_4641393104:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_i16_type_static(_111613f20_Token _267839_ident) {
	
	
	
	{
		auto _match_expr{ _267839_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4641416736; }
		_case_begin_4641416736:;
		{
			jule::Ref<_1131530d0_Const> _268521_c = _1131530d0_Const::_static_method_new_i64(32767LL);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i16", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_268521_c),jule::Bool(),_268521_c));
		}
		goto _match_end_4641411040;
		_case_end_4641416736:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4641416848; }
		_case_begin_4641416848:;
		{
			jule::Ref<_1131530d0_Const> _269321_c = _1131530d0_Const::_static_method_new_i64(-32768LL);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i16", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_269321_c),jule::Bool(),_269321_c));
		}
		goto _match_end_4641411040;
		_case_end_4641416848:;
		_case_begin_4641411904:;
		{
			(*this)._method_push_err(_267839_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("i16", 3)),jule::Any(_267839_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641411040;
		_case_end_4641411904:;
		_match_end_4641411040:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_i32_type_static(_111613f20_Token _270639_ident) {
	
	
	
	{
		auto _match_expr{ _270639_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4641434672; }
		_case_begin_4641434672:;
		{
			jule::Ref<_1131530d0_Const> _271321_c = _1131530d0_Const::_static_method_new_i64(2147483647LL);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i32", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_271321_c),jule::Bool(),_271321_c));
		}
		goto _match_end_4641428976;
		_case_end_4641434672:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4641434784; }
		_case_begin_4641434784:;
		{
			jule::Ref<_1131530d0_Const> _272121_c = _1131530d0_Const::_static_method_new_i64(-2147483648LL);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i32", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_272121_c),jule::Bool(),_272121_c));
		}
		goto _match_end_4641428976;
		_case_end_4641434784:;
		_case_begin_4641429840:;
		{
			(*this)._method_push_err(_270639_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("i32", 3)),jule::Any(_270639_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641428976;
		_case_end_4641429840:;
		_match_end_4641428976:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_i64_type_static(_111613f20_Token _273439_ident) {
	
	
	
	{
		auto _match_expr{ _273439_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4641455728; }
		_case_begin_4641455728:;
		{
			jule::Ref<_1131530d0_Const> _274121_c = _1131530d0_Const::_static_method_new_i64(jule::MIN_I64);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_274121_c),jule::Bool(),_274121_c));
		}
		goto _match_end_4641436768;
		_case_end_4641455728:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4641455424; }
		_case_begin_4641455424:;
		{
			jule::Ref<_1131530d0_Const> _274921_c = _1131530d0_Const::_static_method_new_i64(jule::MAX_I64);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("i64", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_274921_c),jule::Bool(),_274921_c));
		}
		goto _match_end_4641436768;
		_case_end_4641455424:;
		_case_begin_4641448256:;
		{
			(*this)._method_push_err(_273439_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("i64", 3)),jule::Any(_273439_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641436768;
		_case_end_4641448256:;
		_match_end_4641436768:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_u8_type_static(_111613f20_Token _276238_ident) {
	
	
	{
		auto _match_expr{ _276238_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4641469968; }
		_case_begin_4641469968:;
		{
			jule::Ref<_1131530d0_Const> _276821_c = _1131530d0_Const::_static_method_new_u64(255LLU);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("u8", 2)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_276821_c),jule::Bool(),_276821_c));
		}
		goto _match_end_4641467680;
		_case_end_4641469968:;
		_case_begin_4641468432:;
		{
			(*this)._method_push_err(_276238_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("u8", 2)),jule::Any(_276238_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641467680;
		_case_end_4641468432:;
		_match_end_4641467680:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_u16_type_static(_111613f20_Token _278139_ident) {
	
	
	{
		auto _match_expr{ _278139_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4641483120; }
		_case_begin_4641483120:;
		{
			jule::Ref<_1131530d0_Const> _278721_c = _1131530d0_Const::_static_method_new_u64(65535LLU);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("u16", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_278721_c),jule::Bool(),_278721_c));
		}
		goto _match_end_4641480832;
		_case_end_4641483120:;
		_case_begin_4641481584:;
		{
			(*this)._method_push_err(_278139_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("u16", 3)),jule::Any(_278139_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641480832;
		_case_end_4641481584:;
		_match_end_4641480832:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_u32_type_static(_111613f20_Token _280039_ident) {
	
	
	{
		auto _match_expr{ _280039_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4641495984; }
		_case_begin_4641495984:;
		{
			jule::Ref<_1131530d0_Const> _280621_c = _1131530d0_Const::_static_method_new_u64(4294967295LLU);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("u32", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_280621_c),jule::Bool(),_280621_c));
		}
		goto _match_end_4641493696;
		_case_end_4641495984:;
		_case_begin_4641494448:;
		{
			(*this)._method_push_err(_280039_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("u32", 3)),jule::Any(_280039_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641493696;
		_case_end_4641494448:;
		_match_end_4641493696:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_u64_type_static(_111613f20_Token _281939_ident) {
	
	
	{
		auto _match_expr{ _281939_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4641508992; }
		_case_begin_4641508992:;
		{
			jule::Ref<_1131530d0_Const> _282521_c = _1131530d0_Const::_static_method_new_u64(jule::MAX_U64);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("u64", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_282521_c),jule::Bool(),_282521_c));
		}
		goto _match_end_4641506704;
		_case_end_4641508992:;
		_case_begin_4641507456:;
		{
			(*this)._method_push_err(_281939_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("u64", 3)),jule::Any(_281939_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641506704;
		_case_end_4641507456:;
		_match_end_4641506704:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_f32_type_tatic(_111613f20_Token _283838_ident) {
	
	
	
	{
		auto _match_expr{ _283838_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4641526400; }
		_case_begin_4641526400:;
		{
			jule::Ref<_1131530d0_Const> _284521_c = _1131530d0_Const::_static_method_new_f64(3.4028234663852886e+38);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("f32", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_284521_c),jule::Bool(),_284521_c));
		}
		goto _match_end_4641520016;
		_case_end_4641526400:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4641526512; }
		_case_begin_4641526512:;
		{
			jule::Ref<_1131530d0_Const> _285321_c = _1131530d0_Const::_static_method_new_f64(-3.4028234663852886e+38);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("f32", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_285321_c),jule::Bool(),_285321_c));
		}
		goto _match_end_4641520016;
		_case_end_4641526512:;
		_case_begin_4641521568:;
		{
			(*this)._method_push_err(_283838_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("f32", 3)),jule::Any(_283838_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641520016;
		_case_end_4641521568:;
		_match_end_4641520016:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_f64_type_static(_111613f20_Token _286639_ident) {
	
	
	
	{
		auto _match_expr{ _286639_ident._field_kind };
		if (!((jule::Str("MAX", 3)) == _match_expr)) { goto _case_end_4641544640; }
		_case_begin_4641544640:;
		{
			jule::Ref<_1131530d0_Const> _287321_c = _1131530d0_Const::_static_method_new_f64(jule::MAX_F64);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("f64", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_287321_c),jule::Bool(),_287321_c));
		}
		goto _match_end_4641538112;
		_case_end_4641544640:;
		if (!((jule::Str("MIN", 3)) == _match_expr)) { goto _case_end_4641544752; }
		_case_begin_4641544752:;
		{
			jule::Ref<_1131530d0_Const> _288121_c = _1131530d0_Const::_static_method_new_f64(jule::MIN_F64);
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("f64", 3)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_288121_c),jule::Bool(),_288121_c));
		}
		goto _match_end_4641538112;
		_case_end_4641544752:;
		_case_begin_4641539808:;
		{
			(*this)._method_push_err(_286639_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("f64", 3)),jule::Any(_286639_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641538112;
		_case_end_4641539808:;
		_match_end_4641538112:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_prim_static(jule::Str _289435_kind,_111613f20_Token _289446_ident) {
	{
		auto _match_expr{ _289435_kind };
		if (!((jule::Str("int", 3)) == _match_expr)) { goto _case_end_4641556384; }
		_case_begin_4641556384:;
		{
			return (*this)._method_eval_int_type_static(_289446_ident);
		}
		goto _match_end_4641554320;
		_case_end_4641556384:;
		if (!((jule::Str("uint", 4)) == _match_expr)) { goto _case_end_4641559344; }
		_case_begin_4641559344:;
		{
			return (*this)._method_eval_uint_type_static(_289446_ident);
		}
		goto _match_end_4641554320;
		_case_end_4641559344:;
		if (!((jule::Str("i8", 2)) == _match_expr)) { goto _case_end_4641559456; }
		_case_begin_4641559456:;
		{
			return (*this)._method_eval_i8_type_static(_289446_ident);
		}
		goto _match_end_4641554320;
		_case_end_4641559456:;
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4641559920; }
		_case_begin_4641559920:;
		{
			return (*this)._method_eval_i16_type_static(_289446_ident);
		}
		goto _match_end_4641554320;
		_case_end_4641559920:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4641560032; }
		_case_begin_4641560032:;
		{
			return (*this)._method_eval_i32_type_static(_289446_ident);
		}
		goto _match_end_4641554320;
		_case_end_4641560032:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4641555216; }
		_case_begin_4641555216:;
		{
			return (*this)._method_eval_i64_type_static(_289446_ident);
		}
		goto _match_end_4641554320;
		_case_end_4641555216:;
		if (!((jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4641555328; }
		_case_begin_4641555328:;
		{
			return (*this)._method_eval_u8_type_static(_289446_ident);
		}
		goto _match_end_4641554320;
		_case_end_4641555328:;
		if (!((jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4641555440; }
		_case_begin_4641555440:;
		{
			return (*this)._method_eval_u16_type_static(_289446_ident);
		}
		goto _match_end_4641554320;
		_case_end_4641555440:;
		if (!((jule::Str("u32", 3)) == _match_expr)) { goto _case_end_4641558624; }
		_case_begin_4641558624:;
		{
			return (*this)._method_eval_u32_type_static(_289446_ident);
		}
		goto _match_end_4641554320;
		_case_end_4641558624:;
		if (!((jule::Str("u64", 3)) == _match_expr)) { goto _case_end_4641558736; }
		_case_begin_4641558736:;
		{
			return (*this)._method_eval_u64_type_static(_289446_ident);
		}
		goto _match_end_4641554320;
		_case_end_4641558736:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4641558848; }
		_case_begin_4641558848:;
		{
			return (*this)._method_eval_f32_type_tatic(_289446_ident);
		}
		goto _match_end_4641554320;
		_case_end_4641558848:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4641558960; }
		_case_begin_4641558960:;
		{
			return (*this)._method_eval_f64_type_static(_289446_ident);
		}
		goto _match_end_4641554320;
		_case_end_4641558960:;
		_case_begin_4641554416:;
		{
			(*this)._method_push_err(_289446_ident,jule::Str("type_have_not_ident", 19),jule::Slice<jule::Any>({jule::Any(_289435_kind),jule::Any(_289446_ident._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641554320;
		_case_end_4641554416:;
		_match_end_4641554320:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_type_static(jule::Ref<_121dedce0_Data> _291439_d,jule::Ref<_111612b20_SubIdentExpr> _291453_si) {
	{
		if (!((jule::real(_291439_d->_field_kind->_method_prim())))) { goto _case_end_4641584656; }
		_case_begin_4641584656:;
		{
			return (*this)._method_eval_prim_static(_291439_d->_field_kind->_method_prim()->_method_to_str(),_291453_si->_field_ident);
		}
		goto _match_end_4641579216;
		_case_end_4641584656:;
		if (!((jule::real(_291439_d->_field_kind->_method_enm())))) { goto _case_end_4641584768; }
		_case_begin_4641584768:;
		{
			return (*this)._method_eval_enum_static(_291439_d->_field_kind->_method_enm(),_291453_si->_field_ident);
		}
		goto _match_end_4641579216;
		_case_end_4641584768:;
		if (!((jule::real(_291439_d->_field_kind->_method_strct())))) { goto _case_end_4641584400; }
		_case_begin_4641584400:;
		{
			return (*this)._method_eval_struct_static(_291439_d->_field_kind->_method_strct(),_291453_si->_field_ident);
		}
		goto _match_end_4641579216;
		_case_end_4641584400:;
		_case_begin_4641579424:;
		{
			(*this)._method_push_err(_291453_si->_field_ident,jule::Str("type_not_support_sub_fields", 27),jule::Slice<jule::Any>({jule::Any(_291439_d->_field_kind->_method_to_str())}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641579216;
		_case_end_4641579424:;
		_match_end_4641579216:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_obj_sub_ident(jule::Ref<_121dedce0_Data> _293141_d,jule::Ref<_111612b20_SubIdentExpr> _293155_si) {
	jule::Ref<_1217f7750_TypeKind> _293217_kind = _293141_d->_field_kind;
	if (jule::real(_293141_d->_field_kind->_method_ptr())) {
		jule::Ref<_1217f7750_Ptr> _293417_ptr = _293141_d->_field_kind->_method_ptr();
		if ((!(_293417_ptr->_method_is_unsafe()))) {
			if ((!(_293155_si->_field_is_self)) && (!((*this)._method_is_unsafe()))) {
				(*this)._method_push_err(_293155_si->_field_ident,jule::Str("unsafe_behavior_at_out_of_unsafe_scope", 38),jule::Slice<jule::Any>({}));
			}
			_293217_kind=_293141_d->_field_kind->_method_ptr()->_field_elem;
		}
	} else if (jule::real(_293141_d->_field_kind->_method_ref())) {
		_293217_kind=_293141_d->_field_kind->_method_ref()->_field_elem;
	}
	{
		if (!((jule::real(_293141_d->_field_kind->_method_trt())))) { goto _case_end_4641612240; }
		_case_begin_4641612240:;
		{
			return (*this)._method_eval_trait_sub_ident(_293141_d,_293141_d->_field_kind->_method_trt(),_293155_si->_field_ident);
		}
		goto _match_end_4641611872;
		_case_end_4641612240:;
		if (!((jule::real(_293217_kind->_method_strct())))) { goto _case_end_4641612352; }
		_case_begin_4641612352:;
		{
			jule::Ref<_11209db80_StructIns> _295017_s = _293217_kind->_method_strct();
			if (_121dedce0_is_instanced_struct(_295017_s)) {
				jule::Bool _295225_used_reference_elem = jule::real(_293141_d->_field_kind->_method_ref());
				return (*this)._method_eval_struct_sub_ident(_293141_d,_293217_kind->_method_strct(),_293155_si,_295225_used_reference_elem);
			}
		}
		goto _match_end_4641611872;
		_case_end_4641612352:;
		if (!((jule::real(_293217_kind->_method_slc())))) { goto _case_end_4641612464; }
		_case_begin_4641612464:;
		{
			return (*this)._method_eval_slice_sub_ident(_293141_d,_293155_si->_field_ident);
		}
		goto _match_end_4641611872;
		_case_end_4641612464:;
		if (!((jule::real(_293217_kind->_method_arr())))) { goto _case_end_4641612576; }
		_case_begin_4641612576:;
		{
			return (*this)._method_eval_array_sub_ident(_293141_d,_293155_si->_field_ident);
		}
		goto _match_end_4641611872;
		_case_end_4641612576:;
		if (!((jule::real(_293217_kind->_method_map())))) { goto _case_end_4641612704; }
		_case_begin_4641612704:;
		{
			return (*this)._method_eval_map_sub_ident(_293141_d,_293155_si->_field_ident);
		}
		goto _match_end_4641611872;
		_case_end_4641612704:;
		if (!((jule::real(_293217_kind->_method_prim())))) { goto _case_end_4641612832; }
		_case_begin_4641612832:;
		{
			jule::Ref<_1217f7750_Prim> _296617_p = _293217_kind->_method_prim();
			{
				auto _match_expr{ _296617_p->_field_kind };
				if (!((jule::Str("str", 3)) == _match_expr)) { goto _case_end_4641633296; }
				_case_begin_4641633296:;
				{
					return (*this)._method_eval_str_sub_ident(_293141_d,_293155_si->_field_ident);
				}
				goto _match_end_4641632192;
				_case_end_4641633296:;
				_match_end_4641632192:;
			}
		}
		goto _match_end_4641611872;
		_case_end_4641612832:;
		_match_end_4641611872:;
	}
	(*this)._method_push_err(_293155_si->_field_ident,jule::Str("obj_not_support_sub_fields", 26),jule::Slice<jule::Any>({jule::Any(_293141_d->_field_kind->_method_to_str())}));
	return jule::new_ref<_121dedce0_Data>();
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_sub_ident(jule::Ref<_111612b20_SubIdentExpr> _297738_si) {
	jule::Ref<_1217f7750_TypeKind> _297817_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_297817_prefix;
	});
	jule::Ref<_121dedce0_Data> _298217_d = this->self->_method_eval_expr_kind(_297738_si->_field_expr);
	if ((!(jule::real(_298217_d)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_298217_d->_field_decl) {
		return this->self->_method_eval_type_static(_298217_d,_297738_si);
	}
	return this->self->_method_eval_obj_sub_ident(_298217_d,_297738_si);
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_tuple(jule::Ref<_111612b20_TupleExpr> _299434_tup) {
	jule::Ref<_1217f7750_Tuple> _299517_tup_t = jule::new_struct<_1217f7750_Tuple>(new( std::nothrow ) _1217f7750_Tuple());
	_299517_tup_t->_field_types=jule::Slice<jule::Ref<_1217f7750_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_299434_tup->_field_expr.len())));
	jule::Ref<_112673500_TupleExprModel> _299817_model = jule::new_struct<_112673500_TupleExprModel>(new( std::nothrow ) _112673500_TupleExprModel(jule::Slice<jule::Ref<_121dedce0_Data>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_299434_tup->_field_expr.len())))));
	jule::Bool _300217_ok = true;
	{
		auto __julec_range_expr = _299434_tup->_field_expr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121dedce0_i = 0;
			jule::Any _121dedce0_expr = *__julec_range_begin;
			_iter_begin_4641660976:;
			{
				jule::Ref<_121dedce0_Data> _300421_d = this->self->_method_eval_expr_kind(_121dedce0_expr);
				if ((!(jule::real(_300421_d)))) {
					_300217_ok=false;
					goto _iter_next_4641660976;
				}
				_299517_tup_t->_field_types[static_cast<jule::Int>(_121dedce0_i)]=_300421_d->_field_kind;
				_299817_model->_field_datas[static_cast<jule::Int>(_121dedce0_i)]=_300421_d;
			}
			_iter_next_4641660976:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121dedce0_i; _121dedce0_expr = *__julec_range_begin; goto _iter_begin_4641660976; }
			_iter_end_4641660976:;
		}
	}
	if ((!(_300217_ok))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_299517_tup_t)),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_299817_model),jule::Bool(),jule::Ref<_1131530d0_Const>()));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_map(jule::Ref<_1217f7750_Map> _302332_m,jule::Ref<_111612b20_BraceLit> _302345_lit) {
	jule::Ref<_112673500_MapExprModel> _302417_model = jule::new_struct<_112673500_MapExprModel>(new( std::nothrow ) _112673500_MapExprModel(_302332_m->_field_key,_302332_m->_field_val,jule::Slice<jule::Ref<_112673500_KeyValPairExprModel>>()));
	{
		auto __julec_range_expr = _302345_lit->_field_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _121dedce0_expr = *__julec_range_begin;
			_iter_begin_4641678688:;
			{
				{
					auto _match_expr{ _121dedce0_expr };
					if (!(_match_expr.type_is<jule::Ref<_111612b20_KeyValPair>>())) { goto _case_end_4641681440; }
					goto _match_end_4641679920;
					_case_end_4641681440:;
					_case_begin_4641680016:;
					{
						this->self->_method_push_err(_302345_lit->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
						return jule::new_ref<_121dedce0_Data>();
					}
					goto _match_end_4641679920;
					_case_end_4641680016:;
					_match_end_4641679920:;
				}
				jule::Ref<_111612b20_KeyValPair> _303921_pair = _121dedce0_expr.operator jule::Ref<_111612b20_KeyValPair>();
				jule::Ref<_121dedce0_Data> _304121_key = this->self->_method_eval_expr_kind(_303921_pair->_field_key);
				if ((!(jule::real(_304121_key)))) {
					return jule::new_ref<_121dedce0_Data>();
				}
				jule::Ref<_121dedce0_Data> _304621_val = this->self->_method_eval_expr_kind(_303921_pair->_field_val);
				if ((!(jule::real(_304621_val)))) {
					return jule::new_ref<_121dedce0_Data>();
				}
				this->self->_field_s->_method_check_assign_type(_302332_m->_field_key,_304121_key,_303921_pair->_field_colon,true);
				this->self->_field_s->_method_check_assign_type(_302332_m->_field_val,_304621_val,_303921_pair->_field_colon,true);
				_302417_model->_field_entries=append(_302417_model->_field_entries,jule::Slice<jule::Ref<_112673500_KeyValPairExprModel>>({jule::new_struct<_112673500_KeyValPairExprModel>(new( std::nothrow ) _112673500_KeyValPairExprModel(_304121_key->_field_model,_304621_val->_field_model))}));
			}
			_iter_next_4641678688:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _121dedce0_expr = *__julec_range_begin; goto _iter_begin_4641678688; }
			_iter_end_4641678688:;
		}
	}
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_302332_m)),jule::Ref<_1217f7750_TypeKind>(),true,jule::Bool(),false,false,jule::Bool(),jule::Any(_302417_model),false,jule::Ref<_1131530d0_Const>()));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_brace_lit(jule::Ref<_111612b20_BraceLit> _307038_lit) {
	{
		if (!(((!(jule::real(this->self->_field_prefix)))))) { goto _case_end_4641705264; }
		_case_begin_4641705264:;
		{
			this->self->_method_push_err(_307038_lit->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641704128;
		_case_end_4641705264:;
		if (!((jule::real(this->self->_field_prefix->_method_map())))) { goto _case_end_4641708448; }
		_case_begin_4641708448:;
		{
			return this->self->_method_eval_map(this->self->_field_prefix->_method_map(),_307038_lit);
		}
		goto _match_end_4641704128;
		_case_end_4641708448:;
		if (!((jule::real(this->self->_field_prefix->_method_strct())))) { goto _case_end_4641708560; }
		_case_begin_4641708560:;
		{
			return this->self->_method_eval_struct_lit_explicit(this->self->_field_prefix->_method_strct(),_307038_lit->_field_exprs,_307038_lit->_field_token);
		}
		goto _match_end_4641704128;
		_case_end_4641708560:;
		_case_begin_4641704336:;
		{
			this->self->_method_push_err(_307038_lit->_field_token,jule::Str("invalid_syntax", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641704128;
		_case_end_4641704336:;
		_match_end_4641704128:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_anon_fn(jule::Ref<_111612b20_FnDecl> _308835_decl) {
	_1217f7750_TypeChecker _308917_tc = _1217f7750_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ref<_1217f7750_Referencer>(),_111613f20_Token(),jule::Slice<jule::Ref<_111612b20_GenericDecl>>(),jule::Slice<jule::Ref<_1217f7750_TypeAlias>>(),jule::Bool());
	jule::Ref<_112446fb0_FnIns> _309317_ins = _308917_tc._method_build_fn(_308835_decl);
	_309317_ins->_field_anon=true;
	{
		auto _match_expr{ (*this)._field_lookup };
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_ScopeChecker>>())) { goto _case_end_4641728304; }
		_case_begin_4641728304:;
		{
			jule::Ref<_1126288e0_ScopeChecker> _309821_sc = (*this)._field_lookup.operator jule::Ref<_1126288e0_ScopeChecker>();
			jule::Ref<_1126288e0_ScopeChecker> _309921_scc = _309821_sc->_method_new_child_checker();
			_309921_scc->_field_labels=jule::new_ref<jule::Slice<jule::Ref<_1126288e0_ScopeLabel>>>(nullptr);
			_309921_scc->_field_gotos=jule::new_ref<jule::Slice<jule::Ref<_1126288e0_ScopeGoto>>>(nullptr);
			jule::drop(_309921_scc->_field_owner);
			_309921_scc->_field_child_index=0LL;
			_309921_scc->_field_it=0LL;
			_309921_scc->_field_cse=0LL;
			_309921_scc->_field_owner=_309317_ins;
			(*this)._field_s->_method_check_fn_ins_sc(_309317_ins,_309921_scc);
		}
		goto _match_end_4641725488;
		_case_end_4641728304:;
		_case_begin_4641727136:;
		{
			(*this)._field_s->_method_check_fn_ins(_309317_ins);
		}
		goto _match_end_4641725488;
		_case_end_4641727136:;
		_match_end_4641725488:;
	}
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_309317_ins)),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_112673500_AnonFnExprModel>(new( std::nothrow ) _112673500_AnonFnExprModel(_309317_ins,(*this)._method_is_global()))),jule::Bool(),jule::Ref<_1131530d0_Const>()));
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_binop(jule::Ref<_111612b20_BinopExpr> _312234_op) {
	jule::Ref<_1217f7750_TypeKind> _312317_prefix = this->self->_field_prefix;
	jule::drop(this->self->_field_prefix);
	__JULE_DEFER({
		this->self->_field_prefix=_312317_prefix;
	});
	_121dedce0_BinopSolver _312717_bs = _121dedce0_BinopSolver(this->self,jule::Ref<_121dedce0_Data>(),jule::Ref<_121dedce0_Data>(),_111613f20_Token());
	return _312717_bs._method_solve(_312234_op);
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_expr_kind(jule::Any _313338_kind) {
	jule::Ref<_121dedce0_Data> _313417_d = jule::new_ref<_121dedce0_Data>();
	{
		auto _match_expr{ _313338_kind };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_LitExpr>>())) { goto _case_end_4641757104; }
		_case_begin_4641757104:;
		{
			_313417_d=this->self->_method_eval_lit(_313338_kind.operator jule::Ref<_111612b20_LitExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641757104:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_IdentExpr>>())) { goto _case_end_4641756560; }
		_case_begin_4641756560:;
		{
			_313417_d=this->self->_method_eval_ident(_313338_kind.operator jule::Ref<_111612b20_IdentExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641756560:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_UnaryExpr>>())) { goto _case_end_4641756672; }
		_case_begin_4641756672:;
		{
			_313417_d=this->self->_method_eval_unary(_313338_kind.operator jule::Ref<_111612b20_UnaryExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641756672:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_VariadicExpr>>())) { goto _case_end_4641757664; }
		_case_begin_4641757664:;
		{
			_313417_d=this->self->_method_eval_variadic(_313338_kind.operator jule::Ref<_111612b20_VariadicExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641757664:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_UnsafeExpr>>())) { goto _case_end_4641757776; }
		_case_begin_4641757776:;
		{
			_313417_d=this->self->_method_eval_unsafe(_313338_kind.operator jule::Ref<_111612b20_UnsafeExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641757776:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_SliceExpr>>())) { goto _case_end_4641757888; }
		_case_begin_4641757888:;
		{
			_313417_d=this->self->_method_eval_slice_expr(_313338_kind.operator jule::Ref<_111612b20_SliceExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641757888:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_IndexingExpr>>())) { goto _case_end_4641758000; }
		_case_begin_4641758000:;
		{
			_313417_d=this->self->_method_eval_indexing(_313338_kind.operator jule::Ref<_111612b20_IndexingExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641758000:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_SlicingExpr>>())) { goto _case_end_4641758112; }
		_case_begin_4641758112:;
		{
			_313417_d=this->self->_method_eval_slicing(_313338_kind.operator jule::Ref<_111612b20_SlicingExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641758112:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_CastExpr>>())) { goto _case_end_4641758224; }
		_case_begin_4641758224:;
		{
			_313417_d=this->self->_method_eval_cast(_313338_kind.operator jule::Ref<_111612b20_CastExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641758224:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_NsSelectionExpr>>())) { goto _case_end_4641758336; }
		_case_begin_4641758336:;
		{
			_313417_d=this->self->_method_eval_ns_selection(_313338_kind.operator jule::Ref<_111612b20_NsSelectionExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641758336:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_StructLit>>())) { goto _case_end_4641758448; }
		_case_begin_4641758448:;
		{
			_313417_d=this->self->_method_eval_struct_lit(_313338_kind.operator jule::Ref<_111612b20_StructLit>());
		}
		goto _match_end_4641754448;
		_case_end_4641758448:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_TypeDecl>>())) { goto _case_end_4641758560; }
		_case_begin_4641758560:;
		{
			_313417_d=this->self->_method_eval_type(_313338_kind.operator jule::Ref<_111612b20_TypeDecl>());
		}
		goto _match_end_4641754448;
		_case_end_4641758560:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_FnCallExpr>>())) { goto _case_end_4641758672; }
		_case_begin_4641758672:;
		{
			_313417_d=this->self->_method_eval_fn_call(_313338_kind.operator jule::Ref<_111612b20_FnCallExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641758672:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_SubIdentExpr>>())) { goto _case_end_4641758784; }
		_case_begin_4641758784:;
		{
			_313417_d=this->self->_method_eval_sub_ident(_313338_kind.operator jule::Ref<_111612b20_SubIdentExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641758784:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_TupleExpr>>())) { goto _case_end_4641758896; }
		_case_begin_4641758896:;
		{
			_313417_d=this->self->_method_eval_tuple(_313338_kind.operator jule::Ref<_111612b20_TupleExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641758896:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_BraceLit>>())) { goto _case_end_4641759008; }
		_case_begin_4641759008:;
		{
			_313417_d=this->self->_method_eval_brace_lit(_313338_kind.operator jule::Ref<_111612b20_BraceLit>());
		}
		goto _match_end_4641754448;
		_case_end_4641759008:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_FnDecl>>())) { goto _case_end_4641759120; }
		_case_begin_4641759120:;
		{
			_313417_d=this->self->_method_eval_anon_fn(_313338_kind.operator jule::Ref<_111612b20_FnDecl>());
		}
		goto _match_end_4641754448;
		_case_end_4641759120:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_BinopExpr>>())) { goto _case_end_4641759232; }
		_case_begin_4641759232:;
		{
			_313417_d=this->self->_method_eval_binop(_313338_kind.operator jule::Ref<_111612b20_BinopExpr>());
		}
		goto _match_end_4641754448;
		_case_end_4641759232:;
		_case_begin_4641755600:;
		{
			jule::drop(_313417_d);
		}
		goto _match_end_4641754448;
		_case_end_4641755600:;
		_match_end_4641754448:;
	}
	if ((!(jule::real(_313417_d)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if ((!(jule::real(_313417_d->_field_kind)))) {
		return _313417_d;
	}
	if ((((!(jule::real(_313417_d->_field_cast_kind))) && _313417_d->_method_is_const()) && (!(_313417_d->_field_is_rune))) && jule::real(_313417_d->_field_kind->_method_prim())) {
		{
			if (!((_313417_d->_field_constant->_method_is_i64()))) { goto _case_end_4641800464; }
			_case_begin_4641800464:;
			{
				if (_121807de0_int_assignable(jule::Str("int", 3),_313417_d)) {
					_313417_d->_field_kind->_field_kind=_1217f7750_build_prim_type(jule::Str("int", 3));
				}
			}
			goto _match_end_4641800224;
			_case_end_4641800464:;
			if (!((_313417_d->_field_constant->_method_is_u64()))) { goto _case_end_4641800576; }
			_case_begin_4641800576:;
			{
				if (_121807de0_int_assignable(jule::Str("uint", 4),_313417_d)) {
					_313417_d->_field_kind->_field_kind=_1217f7750_build_prim_type(jule::Str("uint", 4));
				}
			}
			goto _match_end_4641800224;
			_case_end_4641800576:;
			_match_end_4641800224:;
		}
	}
	if ((!(_313417_d->_field_decl))) {
		if ((((((jule::real(this->self->_field_prefix) && (!(jule::real(_313417_d->_field_cast_kind)))) && (!(_313417_d->_field_variadiced))) && (!(_313417_d->_field_lvalue))) && (!(_313417_d->_method_is_const()))) && jule::real(_313417_d->_field_kind->_method_prim())) && _1132426f0_is_num(_313417_d->_field_kind->_method_prim()->_field_kind)) {
			_313417_d->_field_cast_kind=_313417_d->_field_kind;
		}
		_121dedce0_apply_cast_kind(_313417_d);
		if ((!(jule::real(_313417_d->_field_kind->_method_prim()))) || (!(_313417_d->_field_kind->_method_prim()->_method_is_any()))) {
			if ((jule::real(this->self->_field_prefix) && jule::real(this->self->_field_prefix->_method_prim())) && this->self->_field_prefix->_method_prim()->_method_is_any()) {
				_313417_d->_field_cast_kind=this->self->_field_prefix;
				_121dedce0_apply_cast_kind_model(_313417_d);
				jule::drop(_313417_d->_field_cast_kind);
			}
		}
	}
	return _313417_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval(jule::Ref<_111612b20_Expr> _320928_expr) {
	jule::Ref<_121dedce0_Data> _321017_d = this->self->_method_eval_expr_kind(_320928_expr->_field_kind);
	if ((!(jule::real(_321017_d))) || (!(jule::real(_321017_d->_field_kind)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		if (!((jule::real(_321017_d->_field_kind->_method_fnc())))) { goto _case_end_4641835376; }
		_case_begin_4641835376:;
		{
			jule::Ref<_112446fb0_FnIns> _321721_f = _321017_d->_field_kind->_method_fnc();
			if (_321721_f->_method_is_builtin()) {
				goto _match_end_4641834928;
			}
			if (_321721_f->_field_generics.len() != _321721_f->_field_decl->_field_generics.len()) {
				this->self->_field_s->_method_push_err(_320928_expr->_field_token,jule::Str("has_generics", 12),jule::Slice<jule::Any>({}));
			}
			if (_321721_f->_field_decl->_method_is_method()) {
				this->self->_field_s->_method_push_err(_320928_expr->_field_token,jule::Str("method_not_invoked", 18),jule::Slice<jule::Any>({}));
			}
		}
		goto _match_end_4641834928;
		_case_end_4641835376:;
		_match_end_4641834928:;
	}
	return _321017_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_Eval::_method_eval_expr(jule::Ref<_111612b20_Expr> _323733_expr) {
	jule::Ref<_121dedce0_Data> _323817_d = this->self->_method_eval(_323733_expr);
	{
		if (!(((!(jule::real(_323817_d)))))) { goto _case_end_4641854768; }
		_case_begin_4641854768:;
		{
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641852240;
		_case_end_4641854768:;
		if (!((_323817_d->_field_decl))) { goto _case_end_4641854880; }
		_case_begin_4641854880:;
		{
			this->self->_method_push_err(_323733_expr->_field_token,jule::Str("invalid_expr", 12),jule::Slice<jule::Any>({}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641852240;
		_case_end_4641854880:;
		_case_begin_4641852496:;
		{
			return _323817_d;
		}
		goto _match_end_4641852240;
		_case_end_4641852496:;
		_match_end_4641852240:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _121dedce0_Eval &_Src) {
	_Stream << "Eval{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "prefix:" << _Src._field_prefix << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "owner:" << _Src._field_owner;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1217f7750_TypeKind::_method_to_str(void) {
	if ((*this)._method_is_nil()) {
		return jule::Str("nil", 3);
	}
	if ((*this)._field_cpp_linked) {
		return jule::Str("cpp.", 4) + (*this)._field_cpp_ident;
	}
	return (*this)._field_kind.get()._method_to_str();
}



inline jule::Bool _1217f7750_TypeKind::_method_equals(jule::Ref<_1217f7750_TypeKind> _7121_other) {
	if ((*this)._method_is_nil()) {
		return _7121_other->_method_is_nil();
	}
	if ((*this)._field_cpp_linked) {
		if ((!(_7121_other->_field_cpp_linked))) {
			return false;
		}
		return (*this)._field_cpp_ident == _7121_other->_field_cpp_ident;
	}
	return (*this)._field_kind.get()._method_equals(_7121_other);
}



inline jule::Ref<_1217f7750_TypeKind> _1217f7750_TypeKind::_method_clone(void) {
	if ((!(jule::real(this->self)))) {
		return jule::new_ref<_1217f7750_TypeKind>();
	}
	jule::Ref<_1217f7750_TypeKind> _9417_kind = jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(this->self->_field_cpp_linked,this->self->_field_cpp_ident,this->self->_field_kind));
	return _9417_kind;
}



inline jule::Bool _1217f7750_TypeKind::_method_is_nil(void) {
	return (*this)._field_kind == nullptr;
}



inline jule::Bool _1217f7750_TypeKind::_method_is_void(void) {
	jule::Ref<_1217f7750_Prim> _10713_prim = (*((&((*this)))))._method_prim();
	return jule::real(_10713_prim) && (_10713_prim->_method_to_str() == jule::Str("void", 4));
}



inline jule::Ref<_1217f7750_Prim> _1217f7750_TypeKind::_method_prim(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_Prim>>())) { goto _case_end_4606882000; }
		_case_begin_4606882000:;
		{
			return (*this)._field_kind.operator jule::Ref<_1217f7750_Prim>();
		}
		goto _match_end_4606880032;
		_case_end_4606882000:;
		_case_begin_4606877344:;
		{
			return jule::new_ref<_1217f7750_Prim>();
		}
		goto _match_end_4606880032;
		_case_end_4606877344:;
		_match_end_4606880032:;
	}
}



inline jule::Ref<_1217f7750_Ref> _1217f7750_TypeKind::_method_ref(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_Ref>>())) { goto _case_end_4606886048; }
		_case_begin_4606886048:;
		{
			return (*this)._field_kind.operator jule::Ref<_1217f7750_Ref>();
		}
		goto _match_end_4606880896;
		_case_end_4606886048:;
		_case_begin_4606881376:;
		{
			return jule::new_ref<_1217f7750_Ref>();
		}
		goto _match_end_4606880896;
		_case_end_4606881376:;
		_match_end_4606880896:;
	}
}



inline jule::Ref<_1217f7750_Ptr> _1217f7750_TypeKind::_method_ptr(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_Ptr>>())) { goto _case_end_4606890288; }
		_case_begin_4606890288:;
		{
			return (*this)._field_kind.operator jule::Ref<_1217f7750_Ptr>();
		}
		goto _match_end_4606887504;
		_case_end_4606890288:;
		_case_begin_4606884336:;
		{
			return jule::new_ref<_1217f7750_Ptr>();
		}
		goto _match_end_4606887504;
		_case_end_4606884336:;
		_match_end_4606887504:;
	}
}



inline jule::Ref<_11261eaf0_Enum> _1217f7750_TypeKind::_method_enm(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_11261eaf0_Enum>>())) { goto _case_end_4606894336; }
		_case_begin_4606894336:;
		{
			return (*this)._field_kind.operator jule::Ref<_11261eaf0_Enum>();
		}
		goto _match_end_4606889184;
		_case_end_4606894336:;
		_case_begin_4606889664:;
		{
			return jule::new_ref<_11261eaf0_Enum>();
		}
		goto _match_end_4606889184;
		_case_end_4606889664:;
		_match_end_4606889184:;
	}
}



inline jule::Ref<_1217f7750_Arr> _1217f7750_TypeKind::_method_arr(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_Arr>>())) { goto _case_end_4606898240; }
		_case_begin_4606898240:;
		{
			return (*this)._field_kind.operator jule::Ref<_1217f7750_Arr>();
		}
		goto _match_end_4606895792;
		_case_end_4606898240:;
		_case_begin_4606892624:;
		{
			return jule::new_ref<_1217f7750_Arr>();
		}
		goto _match_end_4606895792;
		_case_end_4606892624:;
		_match_end_4606895792:;
	}
}



inline jule::Ref<_1217f7750_Slc> _1217f7750_TypeKind::_method_slc(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_Slc>>())) { goto _case_end_4606902288; }
		_case_begin_4606902288:;
		{
			return (*this)._field_kind.operator jule::Ref<_1217f7750_Slc>();
		}
		goto _match_end_4606897136;
		_case_end_4606902288:;
		_case_begin_4606897616:;
		{
			return jule::new_ref<_1217f7750_Slc>();
		}
		goto _match_end_4606897136;
		_case_end_4606897616:;
		_match_end_4606897136:;
	}
}



inline jule::Ref<_112446fb0_FnIns> _1217f7750_TypeKind::_method_fnc(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_112446fb0_FnIns>>())) { goto _case_end_4606906192; }
		_case_begin_4606906192:;
		{
			return (*this)._field_kind.operator jule::Ref<_112446fb0_FnIns>();
		}
		goto _match_end_4606903744;
		_case_end_4606906192:;
		_case_begin_4606900576:;
		{
			return jule::new_ref<_112446fb0_FnIns>();
		}
		goto _match_end_4606903744;
		_case_end_4606900576:;
		_match_end_4606903744:;
	}
}



inline jule::Ref<_11209db80_StructIns> _1217f7750_TypeKind::_method_strct(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_11209db80_StructIns>>())) { goto _case_end_4606910096; }
		_case_begin_4606910096:;
		{
			return (*this)._field_kind.operator jule::Ref<_11209db80_StructIns>();
		}
		goto _match_end_4606905088;
		_case_end_4606910096:;
		_case_begin_4606905568:;
		{
			return jule::new_ref<_11209db80_StructIns>();
		}
		goto _match_end_4606905088;
		_case_end_4606905568:;
		_match_end_4606905088:;
	}
}



inline jule::Ref<_11209e2e0_Trait> _1217f7750_TypeKind::_method_trt(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_11209e2e0_Trait>>())) { goto _case_end_4606914000; }
		_case_begin_4606914000:;
		{
			return (*this)._field_kind.operator jule::Ref<_11209e2e0_Trait>();
		}
		goto _match_end_4606911552;
		_case_end_4606914000:;
		_case_begin_4606908384:;
		{
			return jule::new_ref<_11209e2e0_Trait>();
		}
		goto _match_end_4606911552;
		_case_end_4606908384:;
		_match_end_4606911552:;
	}
}



inline jule::Ref<_1217f7750_Map> _1217f7750_TypeKind::_method_map(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_Map>>())) { goto _case_end_4606917904; }
		_case_begin_4606917904:;
		{
			return (*this)._field_kind.operator jule::Ref<_1217f7750_Map>();
		}
		goto _match_end_4606912896;
		_case_end_4606917904:;
		_case_begin_4606913376:;
		{
			return jule::new_ref<_1217f7750_Map>();
		}
		goto _match_end_4606912896;
		_case_end_4606913376:;
		_match_end_4606912896:;
	}
}



inline jule::Ref<_1217f7750_Tuple> _1217f7750_TypeKind::_method_tup(void) {
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_Tuple>>())) { goto _case_end_4606921856; }
		_case_begin_4606921856:;
		{
			return (*this)._field_kind.operator jule::Ref<_1217f7750_Tuple>();
		}
		goto _match_end_4606919360;
		_case_end_4606921856:;
		_case_begin_4606916192:;
		{
			return jule::new_ref<_1217f7750_Tuple>();
		}
		goto _match_end_4606919360;
		_case_end_4606916192:;
		_match_end_4606919360:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1217f7750_TypeKind &_Src) {
	_Stream << "TypeKind{";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "cpp_ident:" << _Src._field_cpp_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1217f7750_TypeSymbol::_method_checked(void) {
	return jule::real((*this)._field_kind);
}



inline void _1217f7750_TypeSymbol::_method_remove_kind(void) {
	jule::drop((*this)._field_kind);
}







std::ostream &operator<<(std::ostream &_Stream, const _1217f7750_TypeSymbol &_Src) {
	_Stream << "TypeSymbol{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1217f7750_Prim::_method_to_str(void) {
	return (*this)._field_kind;
}



inline jule::Bool _1217f7750_Prim::_method_equals(jule::Ref<_1217f7750_TypeKind> _22521_other) {
	jule::Ref<_1217f7750_Prim> _22613_prim = (_22521_other).alloc->_method_prim();
	if ((!(jule::real(_22613_prim)))) {
		return false;
	}
	return (*this)._field_kind == _22613_prim->_field_kind;
}



inline jule::Bool _1217f7750_Prim::_method_is_i8(void) {
	return (*this)._field_kind == jule::Str("i8", 2);
}



inline jule::Bool _1217f7750_Prim::_method_is_i16(void) {
	return (*this)._field_kind == jule::Str("i16", 3);
}



inline jule::Bool _1217f7750_Prim::_method_is_i32(void) {
	return (*this)._field_kind == jule::Str("i32", 3);
}



inline jule::Bool _1217f7750_Prim::_method_is_i64(void) {
	return (*this)._field_kind == jule::Str("i64", 3);
}



inline jule::Bool _1217f7750_Prim::_method_is_u8(void) {
	return (*this)._field_kind == jule::Str("u8", 2);
}



inline jule::Bool _1217f7750_Prim::_method_is_u16(void) {
	return (*this)._field_kind == jule::Str("u16", 3);
}



inline jule::Bool _1217f7750_Prim::_method_is_u32(void) {
	return (*this)._field_kind == jule::Str("u32", 3);
}



inline jule::Bool _1217f7750_Prim::_method_is_u64(void) {
	return (*this)._field_kind == jule::Str("u64", 3);
}



inline jule::Bool _1217f7750_Prim::_method_is_f32(void) {
	return (*this)._field_kind == jule::Str("f32", 3);
}



inline jule::Bool _1217f7750_Prim::_method_is_f64(void) {
	return (*this)._field_kind == jule::Str("f64", 3);
}



inline jule::Bool _1217f7750_Prim::_method_is_int(void) {
	return (*this)._field_kind == jule::Str("int", 3);
}



inline jule::Bool _1217f7750_Prim::_method_is_uint(void) {
	return (*this)._field_kind == jule::Str("uint", 4);
}



inline jule::Bool _1217f7750_Prim::_method_is_uintptr(void) {
	return (*this)._field_kind == jule::Str("uintptr", 7);
}



inline jule::Bool _1217f7750_Prim::_method_is_bool(void) {
	return (*this)._field_kind == jule::Str("bool", 4);
}



inline jule::Bool _1217f7750_Prim::_method_is_str(void) {
	return (*this)._field_kind == jule::Str("str", 3);
}



inline jule::Bool _1217f7750_Prim::_method_is_any(void) {
	return (*this)._field_kind == jule::Str("any", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _1217f7750_Prim &_Src) {
	_Stream << "Prim{";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1217f7750_Ref::_method_to_str(void) {
	return jule::Str("&", 1) + (*this)._field_elem->_method_to_str();
}



inline jule::Bool _1217f7750_Ref::_method_equals(jule::Ref<_1217f7750_TypeKind> _29421_other) {
	jule::Ref<_1217f7750_Ref> _29513_ref = (_29421_other).alloc->_method_ref();
	if ((!(jule::real(_29513_ref)))) {
		return false;
	}
	return (*this)._field_elem->_method_equals(_29513_ref->_field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1217f7750_Ref &_Src) {
	_Stream << "Ref{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1217f7750_Slc::_method_to_str(void) {
	return jule::Str("[]", 2) + (*this)._field_elem->_method_to_str();
}



inline jule::Bool _1217f7750_Slc::_method_equals(jule::Ref<_1217f7750_TypeKind> _31321_other) {
	jule::Ref<_1217f7750_Slc> _31413_slc = (_31321_other).alloc->_method_slc();
	if ((!(jule::real(_31413_slc)))) {
		return false;
	}
	return (*this)._field_elem->_method_equals(_31413_slc->_field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1217f7750_Slc &_Src) {
	_Stream << "Slc{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1217f7750_Tuple::_method_to_str(void) {
	jule::Str _33017_s = jule::Str("(", 1);
	_33017_s+=(*this)._field_types[static_cast<jule::Int>(0LL)]->_method_to_str();
	{
		auto __julec_range_expr = (*this)._field_types.slice(static_cast<jule::Int>(1LL));
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1217f7750_TypeKind> _1217f7750_t = *__julec_range_begin;
			_iter_begin_4606986592:;
			{
				_33017_s+=jule::Str(",", 1);
				_33017_s+=_1217f7750_t->_method_to_str();
			}
			_iter_next_4606986592:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1217f7750_t = *__julec_range_begin; goto _iter_begin_4606986592; }
			_iter_end_4606986592:;
		}
	}
	_33017_s+=jule::Str(")", 1);
	return _33017_s;
}



inline jule::Bool _1217f7750_Tuple::_method_equals(jule::Ref<_1217f7750_TypeKind> _34121_other) {
	jule::Ref<_1217f7750_Tuple> _34213_tup = (_34121_other).alloc->_method_tup();
	if ((!(jule::real(_34213_tup)))) {
		return false;
	}
	if ((*this)._field_types.len() != _34213_tup->_field_types.len()) {
		return false;
	}
	jule::Int _35117_i = 0LL;
	_iter_begin_4606994224:;
	if (!(_35117_i < (*this)._field_types.len())) { goto _iter_end_4606994224; }
	{
		if ((!((*this)._field_types[static_cast<jule::Int>(_35117_i)]->_method_equals(_34213_tup->_field_types[static_cast<jule::Int>(_35117_i)])))) {
			return false;
		}
	}
	_iter_next_4606994224:;
	(_35117_i)++;
	goto _iter_begin_4606994224;
	_iter_end_4606994224:;
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1217f7750_Tuple &_Src) {
	_Stream << "Tuple{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1217f7750_Map::_method_to_str(void) {
	jule::Str _37117_s = jule::Str("[", 1);
	_37117_s+=(*this)._field_key->_method_to_str();
	_37117_s+=jule::Str(":", 1);
	_37117_s+=(*this)._field_val->_method_to_str();
	_37117_s+=jule::Str("]", 1);
	return _37117_s;
}



inline jule::Bool _1217f7750_Map::_method_equals(jule::Ref<_1217f7750_TypeKind> _38021_other) {
	jule::Ref<_1217f7750_Map> _38113_map = (_38021_other).alloc->_method_map();
	if ((!(jule::real(_38113_map)))) {
		return false;
	}
	return (*this)._field_key->_method_equals(_38113_map->_field_key) && (*this)._field_val->_method_equals(_38113_map->_field_val);
}







std::ostream &operator<<(std::ostream &_Stream, const _1217f7750_Map &_Src) {
	_Stream << "Map{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1217f7750_Arr::_method_to_str(void) {
	jule::Str _39917_s = jule::Str("[", 1);
	_39917_s+=_121837910_itoa((*this)._field_n);
	_39917_s+=jule::Str("]", 1);
	_39917_s+=(*this)._field_elem->_method_to_str();
	return _39917_s;
}



inline jule::Bool _1217f7750_Arr::_method_equals(jule::Ref<_1217f7750_TypeKind> _40721_other) {
	jule::Ref<_1217f7750_Arr> _40813_arr = (_40721_other).alloc->_method_arr();
	if ((!(jule::real(_40813_arr)))) {
		return false;
	}
	return ((*this)._field_n == _40813_arr->_field_n) && (*this)._field_elem->_method_equals(_40813_arr->_field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1217f7750_Arr &_Src) {
	_Stream << "Arr{";
	_Stream << "auto:" << _Src._field_auto << ", ";
	_Stream << "n:" << _Src._field_n << ", ";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1217f7750_Ptr::_method_to_str(void) {
	if ((*this)._method_is_unsafe()) {
		return jule::Str("*unsafe", 7);
	}
	return jule::Str("*", 1) + (*this)._field_elem->_method_to_str();
}



inline jule::Bool _1217f7750_Ptr::_method_equals(jule::Ref<_1217f7750_TypeKind> _43121_other) {
	jule::Ref<_1217f7750_Ptr> _43213_ptr = (_43121_other).alloc->_method_ptr();
	if ((!(jule::real(_43213_ptr)))) {
		return false;
	}
	return (*this)._field_elem->_method_equals(_43213_ptr->_field_elem);
}



inline jule::Bool _1217f7750_Ptr::_method_is_unsafe(void) {
	return (!(jule::real((*this)._field_elem)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1217f7750_Ptr &_Src) {
	_Stream << "Ptr{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1217f7750_Referencer &_Src) {
	_Stream << "Referencer{";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "refs:" << _Src._field_refs;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_11265fb90_ImportInfo> _12209b250_PlainImporter::_method_get_import(jule::Str _10333_path) {
	{
		auto __julec_range_expr = (*this)._field_all_packages;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _12209b250_p = *__julec_range_begin;
			_iter_begin_4643907104:;
			{
				if (_12209b250_p->_field_path == _10333_path) {
					return _12209b250_p;
				}
			}
			_iter_next_4643907104:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _12209b250_p = *__julec_range_begin; goto _iter_begin_4643907104; }
			_iter_end_4643907104:;
		}
	}
	return jule::new_ref<_11265fb90_ImportInfo>();
}



inline std::tuple<jule::Slice<jule::Ref<_1220cb5d0_Ast>>,jule::Slice<_1316b4080_Log>> _12209b250_PlainImporter::_method_import_package(jule::Str _11337_path) {
	jule::Slice<jule::Ref<_1220df4b0_DirEntry>> _11414_dirents;
	jule::Str _11423_err_msg;
	std::tie(_11414_dirents,_11423_err_msg) = _12209b250_read_package_dirents(_11337_path);
	if (_11423_err_msg != jule::Str("", 0)) {
		jule::Slice<_1316b4080_Log> _11621_errors = jule::Slice<_1316b4080_Log>({_12209b250_flat_compiler_err(_11423_err_msg)});
		return std::make_tuple(nullptr,_11621_errors);
	}
	jule::Slice<jule::Ref<_1220cb5d0_Ast>> _12017_asts = jule::Slice<jule::Ref<_1220cb5d0_Ast>>::alloc(static_cast<jule::Int>(0LL),static_cast<jule::Int>(static_cast<jule::I64>(_11414_dirents.len())));
	{
		auto __julec_range_expr = _11414_dirents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1220df4b0_DirEntry> _12209b250_dirent = *__julec_range_begin;
			_iter_begin_4643922192:;
			{
				jule::Str _12217_path = _131739f50_join(jule::Slice<jule::Str>({_11337_path,_12209b250_dirent->_field_name}));
				jule::Ref<_1220fd110_File> _12321_file = _1220fd110_new_file_set(_12217_path);
				jule::Slice<_1316b4080_Log> _12421_errors = _1116b7f10_lex(_12321_file,_12209b250_read_buff(_12321_file->_method_path()));
				if (_12421_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_12421_errors);
				}
				jule::Ref<_11166e240_FileInfo> _12921_finfo = _11166e240_parse_file(_12321_file);
				if (_12921_finfo->_field_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_12921_finfo->_field_errors);
				}
				if ((!(_131696e90_is_pass_file_annotation(_12209b250_dirent->_field_name)))) {
					goto _iter_next_4643922192;
				}
				if ((!(_12209b250_is_pass_build_directives(_12921_finfo->_field_ast)))) {
					goto _iter_next_4643922192;
				}
				_12017_asts=append(_12017_asts,jule::Slice<jule::Ref<_1220cb5d0_Ast>>({_12921_finfo->_field_ast}));
			}
			_iter_next_4643922192:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _12209b250_dirent = *__julec_range_begin; goto _iter_begin_4643922192; }
			_iter_end_4643922192:;
		}
	}
	return std::make_tuple(_12017_asts,nullptr);
}



inline void _12209b250_PlainImporter::_method_imported(jule::Ref<_11265fb90_ImportInfo> _15035_imp) {
	{
		auto __julec_range_expr = (*this)._field_all_packages;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _12209b250_p = *__julec_range_begin;
			_iter_begin_4643944752:;
			{
				if ((_12209b250_p->_field_cpp_linked == _15035_imp->_field_cpp_linked) && (_12209b250_p->_field_link_path == _15035_imp->_field_link_path)) {
					return;
				}
			}
			_iter_next_4643944752:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _12209b250_p = *__julec_range_begin; goto _iter_begin_4643944752; }
			_iter_end_4643944752:;
		}
	}
	(*this)._field_all_packages=append((*this)._field_all_packages,jule::Slice<jule::Ref<_11265fb90_ImportInfo>>({_15035_imp}));
}







std::ostream &operator<<(std::ostream &_Stream, const _12209b250_PlainImporter &_Src) {
	_Stream << "PlainImporter{";
	_Stream << "all_packages:" << _Src._field_all_packages;
	_Stream << "}";
	return _Stream;
}



inline void _122056550_IR::_method_append_structs(jule::Ref<_11265fb90_Package> _2433_p,jule::Slice<jule::Ref<_11209db80_Struct>>& _2451_buffer) {
	{
		auto __julec_range_expr = _2433_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _122056550_f = *__julec_range_begin;
			_iter_begin_4644007280:;
			{
				jule::Int _2621_i = 0LL;
				_iter_begin_4644009584:;
				if (!(_2621_i < _122056550_f->_field_structs._method_len())) { goto _iter_end_4644009584; }
				{
					jule::Ref<_11209db80_Struct> _2825_s = _122056550_f->_field_structs._method_at(_2621_i);
					if ((!(_2825_s->_field_cpp_linked))) {
						_2451_buffer=append(_2451_buffer,jule::Slice<jule::Ref<_11209db80_Struct>>({_2825_s}));
					}
				}
				_iter_next_4644009584:;
				(_2621_i)++;
				goto _iter_begin_4644009584;
				_iter_end_4644009584:;
			}
			_iter_next_4644007280:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _122056550_f = *__julec_range_begin; goto _iter_begin_4644007280; }
			_iter_end_4644007280:;
		}
	}
}



inline jule::Slice<jule::Ref<_11209db80_Struct>> _122056550_IR::_method_get_all_structures(void) {
	jule::Slice<jule::Ref<_11209db80_Struct>> _3917_buffer = nullptr;
	(*this)._method_append_structs((*this)._field_main,_3917_buffer);
	{
		auto __julec_range_expr = (*this)._field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _122056550_u = *__julec_range_begin;
			_iter_begin_4644022064:;
			{
				if ((!(_122056550_u->_field_cpp_linked))) {
					(*this)._method_append_structs(_122056550_u->_field_package,_3917_buffer);
				}
			}
			_iter_next_4644022064:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _122056550_u = *__julec_range_begin; goto _iter_begin_4644022064; }
			_iter_end_4644022064:;
		}
	}
	return _3917_buffer;
}



inline void _122056550_IR::_method_append_vars(jule::Ref<_11265fb90_Package> _5230_p,jule::Slice<jule::Ref<_1320e22c0_Var>>& _5248_buffer) {
	{
		auto __julec_range_expr = _5230_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _122056550_f = *__julec_range_begin;
			_iter_begin_4644028864:;
			{
				jule::Int _5421_i = 0LL;
				_iter_begin_4644031168:;
				if (!(_5421_i < _122056550_f->_field_vars._method_len())) { goto _iter_end_4644031168; }
				{
					jule::Ref<_1320e22c0_Var> _5625_v = _122056550_f->_field_vars._method_at(_5421_i);
					if ((!(_5625_v->_field_cpp_linked))) {
						_5248_buffer=append(_5248_buffer,jule::Slice<jule::Ref<_1320e22c0_Var>>({_5625_v}));
					}
				}
				_iter_next_4644031168:;
				(_5421_i)++;
				goto _iter_begin_4644031168;
				_iter_end_4644031168:;
			}
			_iter_next_4644028864:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _122056550_f = *__julec_range_begin; goto _iter_begin_4644028864; }
			_iter_end_4644028864:;
		}
	}
}



inline jule::Slice<jule::Ref<_1320e22c0_Var>> _122056550_IR::_method_get_all_variables(void) {
	jule::Slice<jule::Ref<_1320e22c0_Var>> _6717_buffer = nullptr;
	(*this)._method_append_vars((*this)._field_main,_6717_buffer);
	{
		auto __julec_range_expr = (*this)._field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _122056550_u = *__julec_range_begin;
			_iter_begin_4644043072:;
			{
				if ((!(_122056550_u->_field_cpp_linked))) {
					(*this)._method_append_vars(_122056550_u->_field_package,_6717_buffer);
				}
			}
			_iter_next_4644043072:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _122056550_u = *__julec_range_begin; goto _iter_begin_4644043072; }
			_iter_end_4644043072:;
		}
	}
	return _6717_buffer;
}







std::ostream &operator<<(std::ostream &_Stream, const _122056550_IR &_Src) {
	_Stream << "IR{";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "main:" << _Src._field_main << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}



inline void _1220584c0_ScopeDeadCode::_method_optimize_child(jule::Ref<_1126288e0_Scope> _2338_s) {
	jule::Ref<_1220584c0_ScopeDeadCode> _2417_sdc = jule::new_struct<_1220584c0_ScopeDeadCode>(new( std::nothrow ) _1220584c0_ScopeDeadCode(this->self,_2338_s,(&(_2338_s->_field_stmts)),jule::Int()));
	{
		_2417_sdc->_method_optimize_stmts();
	}
}



inline void _1220584c0_ScopeDeadCode::_method_eliminate_followed(void) {
	(*this)._field_stmts->_method_remove_range((*this)._field_i + 1LL,static_cast<jule::Int>(((*this)._field_stmts->_method_len() - (*this)._field_i) - 1LL));
	jule::Ref<_1220584c0_ScopeDeadCode> _3417_parent = (*this)._field_parent;
	_iter_begin_4645447312:;
	if (!(jule::real(_3417_parent))) { goto _iter_end_4645447312; }
	{
		_3417_parent->_field_stmts->_method_remove_range(_3417_parent->_field_i + 1LL,static_cast<jule::Int>((_3417_parent->_field_stmts->_method_len() - _3417_parent->_field_i) - 1LL));
		_3417_parent=_3417_parent->_field_parent;
	}
	_iter_next_4645447312:;
	goto _iter_begin_4645447312;
	_iter_end_4645447312:;
}



inline void _1220584c0_ScopeDeadCode::_method_optimize_stmt(jule::Any _4144_st) {
	{
		auto _match_expr{ _4144_st };
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_Scope>>())) { goto _case_end_4645458624; }
		_case_begin_4645458624:;
		{
			jule::Ref<_1126288e0_Scope> _4421_scope = _4144_st.operator jule::Ref<_1126288e0_Scope>();
			if (_4421_scope->_field_deferred) {
				_1220584c0_eliminate_dead_code_of_scope(_4421_scope);
			} else {
				this->self->_method_optimize_child(_4421_scope);
			}
		}
		goto _match_end_4645458160;
		_case_end_4645458624:;
		if (!(_match_expr.type_is<jule::Ref<_121dedce0_Data>>())) { goto _case_end_4645458960; }
		_case_begin_4645458960:;
		{
			{
				auto _match_expr{ _4144_st.operator jule::Ref<_121dedce0_Data>()->_field_model };
				if (!(_match_expr.type_is<jule::Ref<_112673500_BuiltinPanicCallExprModel>>())) { goto _case_end_4645466416; }
				_case_begin_4645466416:;
				{
					this->self->_method_eliminate_followed();
				}
				goto _match_end_4645464736;
				_case_end_4645466416:;
				_match_end_4645464736:;
			}
		}
		goto _match_end_4645458160;
		_case_end_4645458960:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_RetSt>>())) { goto _case_end_4645459072; }
		_case_begin_4645459072:;
		{
			this->self->_method_eliminate_followed();
		}
		goto _match_end_4645458160;
		_case_end_4645459072:;
		_match_end_4645458160:;
	}
}



inline void _1220584c0_ScopeDeadCode::_method_optimize_stmts(void) {
	this->self->_field_i=0LL;
	_iter_begin_4645470848:;
	if (!(this->self->_field_i < this->self->_field_stmts->_method_len())) { goto _iter_end_4645470848; }
	{
		this->self->_method_optimize_stmt(this->self->_field_stmts->_method_at(this->self->_field_i));
	}
	_iter_next_4645470848:;
	(this->self->_field_i)++;
	goto _iter_begin_4645470848;
	_iter_end_4645470848:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1220584c0_ScopeDeadCode &_Src) {
	_Stream << "ScopeDeadCode{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _121b31570_IndexRangeSetter::_method_setup_vars(jule::Ref<_1320e22c0_Var> _4529_key_a,jule::Ref<_1320e22c0_Var> _4546_key_b) {
	jule::Str _4613_indent = _113497500_indent();
	jule::Str _4817_obj = jule::Str("", 0);
	if (jule::real(_4529_key_a)) {
		_4817_obj+=_113497500_gen_var_init_expr(_4529_key_a,jule::Str("0", 1));
		_4817_obj+=jule::Str("\n", 1);
		_4817_obj+=_4613_indent;
	}
	if (jule::real(_4546_key_b)) {
		_4817_obj+=_113497500_gen_var_init_expr(_4546_key_b,jule::Str("*__julec_range_begin", 20));
		_4817_obj+=jule::Str("\n", 1);
		_4817_obj+=_4613_indent;
	}
	return _4817_obj;
}



inline jule::Str _121b31570_IndexRangeSetter::_method_next_steps(jule::Ref<_1320e22c0_Var> _6429_key_a,jule::Ref<_1320e22c0_Var> _6446_key_b,jule::Str _6459_begin) {
	jule::Str _6513_indent = _113497500_indent();
	jule::Str _6717_obj = jule::Str("++__julec_range_begin;\n", 23);
	_6717_obj+=_6513_indent;
	_6717_obj+=jule::Str("if (__julec_range_begin != __julec_range_end) { ", 48);
	if (jule::real(_6429_key_a)) {
		_6717_obj+=(jule::Str("++", 2) + _113468030_var_out_ident(_6429_key_a)) + jule::Str("; ", 2);
	}
	if (jule::real(_6446_key_b)) {
		_6717_obj+=_113468030_var_out_ident(_6446_key_b) + jule::Str(" = *__julec_range_begin; ", 25);
	}
	_6717_obj+=(jule::Str("goto ", 5) + _6459_begin) + jule::Str("; }\n", 4);
	return _6717_obj;
}







std::ostream &operator<<(std::ostream &_Stream, const _121b31570_IndexRangeSetter &_Src) {
	_Stream << "IndexRangeSetter{";
	_Stream << "}";
	return _Stream;
}



inline jule::Str _121b31570_MapRangeSetter::_method_setup_vars(jule::Ref<_1320e22c0_Var> _8629_key_a,jule::Ref<_1320e22c0_Var> _8646_key_b) {
	jule::Str _8713_indent = _113497500_indent();
	jule::Str _8817_obj = jule::Str("", 0);
	if (jule::real(_8629_key_a)) {
		_8817_obj+=_113497500_gen_var_init_expr(_8629_key_a,jule::Str("__julec_range_begin->first", 26));
		_8817_obj+=jule::Str("\n", 1);
		_8817_obj+=_8713_indent;
	}
	if (jule::real(_8646_key_b)) {
		_8817_obj+=_113497500_gen_var_init_expr(_8646_key_b,jule::Str("__julec_range_begin->second", 27));
		_8817_obj+=jule::Str("\n", 1);
		_8817_obj+=_8713_indent;
	}
	return _8817_obj;
}



inline jule::Str _121b31570_MapRangeSetter::_method_next_steps(jule::Ref<_1320e22c0_Var> _10529_key_a,jule::Ref<_1320e22c0_Var> _10546_key_b,jule::Str _10559_begin) {
	jule::Str _10613_indent = _113497500_indent();
	jule::Str _10817_obj = jule::Str("++__julec_range_begin;\n", 23);
	_10817_obj+=_10613_indent;
	_10817_obj+=jule::Str("if (__julec_range_begin != __julec_range_end) { ", 48);
	if (jule::real(_10529_key_a)) {
		_10817_obj+=_113468030_var_out_ident(_10529_key_a);
		_10817_obj+=jule::Str(" = __julec_range_begin->first; ", 31);
	}
	if (jule::real(_10546_key_b)) {
		_10817_obj+=_113468030_var_out_ident(_10546_key_b);
		_10817_obj+=jule::Str(" = __julec_range_begin->second; ", 32);
	}
	_10817_obj+=(jule::Str("goto ", 5) + _10559_begin) + jule::Str("; }\n", 4);
	return _10817_obj;
}







std::ostream &operator<<(std::ostream &_Stream, const _121b31570_MapRangeSetter &_Src) {
	_Stream << "MapRangeSetter{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _113497500_OrderedDecls &_Src) {
	_Stream << "OrderedDecls{";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "globals:" << _Src._field_globals;
	_Stream << "}";
	return _Stream;
}



inline void _1217f7750_TypeChecker::_method_push_err(_111613f20_Token _64527_token,jule::Str _64541_key,jule::Slice<jule::Any> _64551_args) {
	(*this)._field_s->_method_push_err(_64527_token,_64541_key,_64551_args);
}



inline jule::Ref<_1217f7750_Prim> _1217f7750_TypeChecker::_method_build_prim(jule::Ref<_111612b20_IdentTypeDecl> _64929_decl) {
	if ((!(_1217f7750_is_prim(_64929_decl->_field_ident)))) {
		(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid_type", 12),jule::Slice<jule::Any>({}));
		return jule::new_ref<_1217f7750_Prim>();
	}
	if (_64929_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_64929_decl->_field_token,jule::Str("type_not_supports_generics", 26),jule::Slice<jule::Any>({jule::Any(_64929_decl->_field_ident)}));
		return jule::new_ref<_1217f7750_Prim>();
	}
	return _1217f7750_build_prim_type(_64929_decl->_field_ident);
}



inline void _1217f7750_TypeChecker::_method_push_cycle_error(jule::Any _66331_def1,jule::Any _66342_def2,jule::Str& _66358_message) {
	
	jule::Fn<jule::Str(jule::Any&)> _66613_get_ident = jule::Fn<jule::Str(jule::Any&)>([=](jule::Any& _66629_def) mutable -> jule::Str {
		{
			auto _match_expr{ _66629_def };
			if (!(_match_expr.type_is<jule::Ref<_1217f7750_TypeAlias>>())) { goto _case_end_4607070976; }
			_case_begin_4607070976:;
			{
				return _66629_def.operator jule::Ref<_1217f7750_TypeAlias>()->_field_ident;
			}
			goto _match_end_4607069312;
			_case_end_4607070976:;
			if (!(_match_expr.type_is<jule::Ref<_11209db80_Struct>>())) { goto _case_end_4607071088; }
			_case_begin_4607071088:;
			{
				return _66629_def.operator jule::Ref<_11209db80_Struct>()->_field_ident;
			}
			goto _match_end_4607069312;
			_case_end_4607071088:;
			if (!(_match_expr.type_is<jule::Ref<_11261eaf0_Enum>>())) { goto _case_end_4607071984; }
			_case_begin_4607071984:;
			{
				return _66629_def.operator jule::Ref<_11261eaf0_Enum>()->_field_ident;
			}
			goto _match_end_4607069312;
			_case_end_4607071984:;
			_case_begin_4607069408:;
			{
				return jule::Str("", 0);
			}
			goto _match_end_4607069312;
			_case_end_4607069408:;
			_match_end_4607069312:;
		}
	});
	jule::Str _67513_def1_ident = _66613_get_ident(_66331_def1);
	jule::Str _67613_def2_ident = _66613_get_ident(_66342_def2);
	jule::Str _67713_refers_to = _1316b2ff0_errorf(jule::Str("refers_to", 9),jule::Slice<jule::Any>({jule::Any(_67513_def1_ident),jule::Any(_67613_def2_ident)}));
	_66358_message=((_112572770_str_repeat(jule::Str(" ", 1),4LL) + _67713_refers_to) + jule::Str("\n", 1)) + _66358_message;
}



inline jule::Bool _1217f7750_TypeChecker::_method_are_equals_cross_cycle_data_0(jule::Any _68145_a,jule::Any _68153_b) {
	{
		auto _match_expr{ _68145_a };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_TypeAlias>>())) { goto _case_end_4607102032; }
		_case_begin_4607102032:;
		{
			{
				auto _match_expr{ _68153_b };
				if (!(_match_expr.type_is<jule::Ref<_1217f7750_TypeAlias>>())) { goto _case_end_4607104448; }
				_case_begin_4607104448:;
				{
					return (_68145_a.operator jule::Ref<_1217f7750_TypeAlias>()).alloc == (_68153_b.operator jule::Ref<_1217f7750_TypeAlias>()).alloc;
				}
				goto _match_end_4607102144;
				_case_end_4607104448:;
				_case_begin_4607102800:;
				{
					return false;
				}
				goto _match_end_4607102144;
				_case_end_4607102800:;
				_match_end_4607102144:;
			}
		}
		goto _match_end_4607100464;
		_case_end_4607102032:;
		_case_begin_4607100560:;
		{
			return false;
		}
		goto _match_end_4607100464;
		_case_end_4607100560:;
		_match_end_4607100464:;
	}
}

inline jule::Bool _1217f7750_TypeChecker::_method_are_equals_cross_cycle_data_1(jule::Any _68145_a,jule::Any _68153_b) {
	{
		auto _match_expr{ _68145_a };
		if (!(_match_expr.type_is<jule::Ref<_11209db80_Struct>>())) { goto _case_end_4607120000; }
		_case_begin_4607120000:;
		{
			{
				auto _match_expr{ _68153_b };
				if (!(_match_expr.type_is<jule::Ref<_11209db80_Struct>>())) { goto _case_end_4607122416; }
				_case_begin_4607122416:;
				{
					return (_68145_a.operator jule::Ref<_11209db80_Struct>()).alloc == (_68153_b.operator jule::Ref<_11209db80_Struct>()).alloc;
				}
				goto _match_end_4607120112;
				_case_end_4607122416:;
				_case_begin_4607120768:;
				{
					return false;
				}
				goto _match_end_4607120112;
				_case_end_4607120768:;
				_match_end_4607120112:;
			}
		}
		goto _match_end_4607118432;
		_case_end_4607120000:;
		_case_begin_4607118528:;
		{
			return false;
		}
		goto _match_end_4607118432;
		_case_end_4607118528:;
		_match_end_4607118432:;
	}
}



inline jule::Bool _1217f7750_TypeChecker::_method_check_cross_cycle(jule::Any _69432_decl,jule::Str& _69448_message) {
	{
		auto _match_expr{ _69432_decl };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_TypeAlias>>())) { goto _case_end_4607084448; }
		_case_begin_4607084448:;
		{
			jule::Ref<_1217f7750_TypeAlias> _69717_ta = _69432_decl.operator jule::Ref<_1217f7750_TypeAlias>();
			{
				auto __julec_range_expr = _69717_ta->_field_refers;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Any _1217f7750_d = *__julec_range_begin;
					_iter_begin_4607088496:;
					{
						{
							auto _match_expr{ _1217f7750_d };
							if (!(_match_expr.type_is<jule::Ref<_1217f7750_TypeAlias>>())) { goto _case_end_4607089856; }
							_case_begin_4607089856:;
							{
								if ((*this)._method_are_equals_cross_cycle_data_0(_1217f7750_d,(*this)._field_referencer->_field_owner)) {
									(*this)._method_push_cycle_error(jule::Any(_69717_ta),_1217f7750_d,_69448_message);
									return false;
								}
							}
							goto _match_end_4607089760;
							_case_end_4607089856:;
							_match_end_4607089760:;
						}
						if ((!((*this)._method_check_cross_cycle(_1217f7750_d,_69448_message)))) {
							(*this)._method_push_cycle_error(jule::Any(_69717_ta),_1217f7750_d,_69448_message);
							return false;
						}
					}
					_iter_next_4607088496:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _1217f7750_d = *__julec_range_begin; goto _iter_begin_4607088496; }
					_iter_end_4607088496:;
				}
			}
		}
		goto _match_end_4607084304;
		_case_end_4607084448:;
		if (!(_match_expr.type_is<jule::Ref<_11209db80_Struct>>())) { goto _case_end_4607085008; }
		_case_begin_4607085008:;
		{
			jule::Ref<_11209db80_Struct> _71417_s = _69432_decl.operator jule::Ref<_11209db80_Struct>();
			{
				auto __julec_range_expr = _71417_s->_field_depends;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Ref<_11209db80_Struct> _1217f7750_d = *__julec_range_begin;
					_iter_begin_4607091520:;
					{
						if ((*this)._method_are_equals_cross_cycle_data_1(jule::Any(_1217f7750_d),(*this)._field_referencer->_field_owner)) {
							(*this)._method_push_cycle_error(jule::Any(_71417_s),jule::Any(_1217f7750_d),_69448_message);
							return false;
						}
						if ((!((*this)._method_check_cross_cycle(jule::Any(_1217f7750_d),_69448_message)))) {
							(*this)._method_push_cycle_error(jule::Any(_71417_s),jule::Any(_1217f7750_d),_69448_message);
							return false;
						}
					}
					_iter_next_4607091520:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _1217f7750_d = *__julec_range_begin; goto _iter_begin_4607091520; }
					_iter_end_4607091520:;
				}
			}
		}
		goto _match_end_4607084304;
		_case_end_4607085008:;
		_match_end_4607084304:;
	}
	return true;
}



inline jule::Bool _1217f7750_TypeChecker::_method_check_illegal_cycles(jule::Ref<_111612b20_IdentTypeDecl> _73639_ident,jule::Any _73666_decl) {
	jule::Bool _73679_ok = jule::Bool();
	if ((!(jule::real((*this)._field_referencer)))) {
		_73679_ok = true;
		return _73679_ok;
	}
	{
		auto _match_expr{ _73666_decl };
		if (!(_match_expr.type_is<jule::Ref<_11209db80_Struct>>())) { goto _case_end_4607128240; }
		_case_begin_4607128240:;
		{
			if ((*this)._field_not_plain) {
				_73679_ok = true;
				return _73679_ok;
			}
		}
		goto _match_end_4607129296;
		_case_end_4607128240:;
		_match_end_4607129296:;
	}
	if ((*this)._field_referencer->_field_owner == _73666_decl) {
		(*this)._method_push_err(_73639_ident->_field_token,jule::Str("illegal_cycle_refers_itself", 27),jule::Slice<jule::Any>({jule::Any((*this)._field_referencer->_field_ident)}));
		_73679_ok = false;
		return _73679_ok;
	}
	jule::Str _75517_message = jule::Str("", 0);
	if ((!((*this)._method_check_cross_cycle(_73666_decl,_75517_message)))) {
		jule::Str _75821_err_msg = _75517_message;
		_75517_message=jule::Str("", 0);
		(*this)._method_push_cycle_error((*this)._field_referencer->_field_owner,_73666_decl,_75517_message);
		_75821_err_msg=_75821_err_msg + _75517_message;
		(*this)._method_push_err(_73639_ident->_field_token,jule::Str("illegal_cross_cycle", 19),jule::Slice<jule::Any>({jule::Any(_75821_err_msg)}));
		_73679_ok = false;
		return _73679_ok;
	}
	{
		auto _match_expr{ (*this)._field_referencer->_field_owner };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_TypeAlias>>())) { goto _case_end_4607146064; }
		_case_begin_4607146064:;
		{
			{
				(*((*this)._field_referencer->_field_refs))=append((*((*this)._field_referencer->_field_refs)),jule::Slice<jule::Any>({_73666_decl}));
			}
		}
		goto _match_end_4607145568;
		_case_end_4607146064:;
		if (!(_match_expr.type_is<jule::Ref<_11209db80_Struct>>())) { goto _case_end_4607146192; }
		_case_begin_4607146192:;
		{
			{
				auto _match_expr{ _73666_decl };
				if (!(_match_expr.type_is<jule::Ref<_11209db80_Struct>>())) { goto _case_end_4607147008; }
				_case_begin_4607147008:;
				{
					jule::Ref<_11209db80_Struct> _77325_s = (*this)._field_referencer->_field_owner.operator jule::Ref<_11209db80_Struct>();
					_77325_s->_field_depends=append(_77325_s->_field_depends,jule::Slice<jule::Ref<_11209db80_Struct>>({_73666_decl.operator jule::Ref<_11209db80_Struct>()}));
				}
				goto _match_end_4607148672;
				_case_end_4607147008:;
				_match_end_4607148672:;
			}
		}
		goto _match_end_4607145568;
		_case_end_4607146192:;
		_match_end_4607145568:;
	}
	_73679_ok = true;
	return _73679_ok;
}



inline jule::Trait<_1217f7750_Kind> _1217f7750_TypeChecker::_method_from_type_alias(jule::Ref<_111612b20_IdentTypeDecl> _78134_decl,jule::Ref<_1217f7750_TypeAlias> _78160_ta) {
	if ((!((*this)._field_s->_method_is_accessible_define(_78160_ta->_field_public,_78160_ta->_field_token)))) {
		(*this)._method_push_err(_78134_decl->_field_token,jule::Str("ident_not_exist", 15),jule::Slice<jule::Any>({jule::Any(_78134_decl->_field_ident)}));
		return nullptr;
	}
	_78160_ta->_field_used=true;
	if (_78134_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_78134_decl->_field_token,jule::Str("type_not_supports_generics", 26),jule::Slice<jule::Any>({jule::Any(_78134_decl->_field_ident)}));
		return nullptr;
	}
	jule::Bool _79417_ok = (*this)._method_check_illegal_cycles(_78134_decl,jule::Any(_78160_ta));
	if ((!(_79417_ok))) {
		return nullptr;
	}
	_79417_ok=(*this)._field_s->_method_check_type_alias_decl_kind(_78160_ta,(*this)._field_lookup);
	if ((!(_79417_ok))) {
		return nullptr;
	}
	jule::Ref<_1217f7750_TypeKind> _80517_kind = _78160_ta->_field_kind->_field_kind->_method_clone();
	if (_78160_ta->_field_cpp_linked) {
		_80517_kind->_field_cpp_linked=true;
		_80517_kind->_field_cpp_ident=_78160_ta->_field_ident;
	}
	return _80517_kind;
}



inline jule::Ref<_11261eaf0_Enum> _1217f7750_TypeChecker::_method_from_enum(jule::Ref<_111612b20_IdentTypeDecl> _81528_decl,jule::Ref<_11261eaf0_Enum> _81554_e) {
	if ((!((*this)._field_s->_method_is_accessible_define(_81554_e->_field_public,_81554_e->_field_token)))) {
		(*this)._method_push_err(_81528_decl->_field_token,jule::Str("ident_not_exist", 15),jule::Slice<jule::Any>({jule::Any(_81528_decl->_field_ident)}));
		return jule::new_ref<_11261eaf0_Enum>();
	}
	if (_81528_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_81528_decl->_field_token,jule::Str("type_not_supports_generics", 26),jule::Slice<jule::Any>({jule::Any(_81528_decl->_field_ident)}));
		return jule::new_ref<_11261eaf0_Enum>();
	}
	return _81554_e;
}



inline jule::Bool _1217f7750_TypeChecker::_method_check_struct_ins(jule::Ref<_11209db80_StructIns> _82939_ins,_111613f20_Token _82956_error_token) {
	jule::Bool _82978_ok = jule::Bool();
	if (_82939_ins->_field_checked) {
		_82978_ok = true;
		return _82978_ok;
	}
	_82939_ins->_field_checked=true;
	if (jule::real((*this)._field_referencer) && ((*this)._field_referencer->_field_owner == _82939_ins->_field_decl)) {
		_82978_ok = true;
		return _82978_ok;
	}
	jule::Ref<_1320e2330_SymbolTable> _84317_old_file = (*this)._field_s->_field_file;
	__JULE_DEFER({
		(*this)._field_s->_method_set_current_file(_84317_old_file);
	});
	jule::Ref<_1320e2330_SymbolTable> _84617_f = _11262c360_find_file((*this)._field_s->_field_files,_82939_ins->_field_decl->_field_token._field_file);
	if (jule::real(_84617_f)) {
		(*this)._field_s->_method_set_current_file(_84617_f);
	}
	jule::Ref<_1217f7750_Referencer> _85117_referencer = jule::new_struct<_1217f7750_Referencer>(new( std::nothrow ) _1217f7750_Referencer(_82939_ins->_field_decl->_field_ident,jule::Any(_82939_ins->_field_decl),nullptr));
	jule::Slice<jule::Ref<_1217f7750_TypeAlias>> _85617_generics = jule::Slice<jule::Ref<_1217f7750_TypeAlias>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_82939_ins->_field_generics.len())));
	{
		auto __julec_range_expr = _82939_ins->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1217f7750_i = 0;
			jule::Ref<_1217f7750_TypeKind> _1217f7750_g = *__julec_range_begin;
			_iter_begin_4607216272:;
			{
				_85617_generics[static_cast<jule::Int>(_1217f7750_i)]=jule::new_struct<_1217f7750_TypeAlias>(new( std::nothrow ) _1217f7750_TypeAlias(jule::Ref<_111612b20_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),_111613f20_Token(),_82939_ins->_field_decl->_field_generics[static_cast<jule::Int>(_1217f7750_i)]->_field_ident,jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),_1217f7750_g)),jule::Str(),jule::Slice<jule::Any>()));
			}
			_iter_next_4607216272:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1217f7750_i; _1217f7750_g = *__julec_range_begin; goto _iter_begin_4607216272; }
			_iter_end_4607216272:;
		}
	}
	jule::Ref<_1320e2330_SymbolTable> _86617_old_sema_file = _82939_ins->_field_decl->_field_sema->_field_file;
	__JULE_DEFER({
		_82939_ins->_field_decl->_field_sema->_method_set_current_file(_86617_old_sema_file);
	});
	_1217f7750_TypeChecker _86917_tc = _1217f7750_TypeChecker(_82939_ins->_field_decl->_field_sema,_82939_ins->_field_decl->_field_sema,_85117_referencer,_111613f20_Token(),jule::Slice<jule::Ref<_111612b20_GenericDecl>>(),_85617_generics,jule::Bool());
	{
		auto __julec_range_expr = _82939_ins->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_FieldIns> _1217f7750_f = *__julec_range_begin;
			_iter_begin_4607229088:;
			{
				jule::Ref<_1217f7750_TypeKind> _87821_kind = _86917_tc._method_check_decl(_1217f7750_f->_field_decl->_field_kind->_field_decl);
				_82978_ok=jule::real(_87821_kind);
				if ((jule::real(_82939_ins->_field_decl->_field_sema) && ((*this)._field_s != _82939_ins->_field_decl->_field_sema)) && (_82939_ins->_field_decl->_field_sema->_field_errors.len() > 0LL)) {
					(*this)._field_s->_field_errors=append((*this)._field_s->_field_errors,_82939_ins->_field_decl->_field_sema->_field_errors);
				}
				if ((!(_82978_ok))) {
					_82978_ok = false;
					return _82978_ok;
				}
				_1217f7750_f->_field_kind=_87821_kind;
				if (_1217f7750_is_mut(_1217f7750_f->_field_kind)) {
					_82939_ins->_field_has_mut=true;
					(*this)._field_s->_method_check_struct_ins_derive_clone(_82939_ins);
				}
			}
			_iter_next_4607229088:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1217f7750_f = *__julec_range_begin; goto _iter_begin_4607229088; }
			_iter_end_4607229088:;
		}
	}
	if (_82939_ins->_field_generics.len() > 0LL) {
		{
			auto __julec_range_expr = _82939_ins->_field_methods;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_112446fb0_Fn> _1217f7750_m = *__julec_range_begin;
				_iter_begin_4607248080:;
				{
					if (_1217f7750_m->_field_generics.len() > 0LL) {
						goto _iter_next_4607248080;
					}
					(*this)._field_s->_method_check_type_method(_82939_ins,_1217f7750_m);
				}
				_iter_next_4607248080:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1217f7750_m = *__julec_range_begin; goto _iter_begin_4607248080; }
				_iter_end_4607248080:;
			}
		}
	}
	_82978_ok = true;
	return _82978_ok;
}



inline void _1217f7750_TypeChecker::_method_append_used_struct_reference(jule::Ref<_11209db80_Struct> _91051_s) {
	if ((!(jule::real((*this)._field_referencer)))) {
		return;
	}
	{
		auto _match_expr{ (*this)._field_referencer->_field_owner };
		if (!(_match_expr.type_is<jule::Ref<_11209db80_Struct>>())) { goto _case_end_4607259376; }
		_case_begin_4607259376:;
		{
			jule::Ref<_11209db80_Struct> _91721_ref_s = (*this)._field_referencer->_field_owner.operator jule::Ref<_11209db80_Struct>();
			if ((!(_91721_ref_s->_method_is_uses(_91051_s)))) {
				_91721_ref_s->_field_uses=append(_91721_ref_s->_field_uses,jule::Slice<jule::Ref<_11209db80_Struct>>({_91051_s}));
			}
		}
		goto _match_end_4607258288;
		_case_end_4607259376:;
		_match_end_4607258288:;
	}
}



inline jule::Ref<_11209db80_StructIns> _1217f7750_TypeChecker::_method_from_struct(jule::Ref<_111612b20_IdentTypeDecl> _92434_decl,jule::Ref<_11209db80_Struct> _92460_s) {
	if ((!((*this)._field_s->_method_is_accessible_define(_92460_s->_field_public,_92460_s->_field_token)))) {
		(*this)._method_push_err(_92434_decl->_field_token,jule::Str("ident_not_exist", 15),jule::Slice<jule::Any>({jule::Any(_92434_decl->_field_ident)}));
		return jule::new_ref<_11209db80_StructIns>();
	}
	if ((*this)._field_ignore_generics.len() > 0LL) {
		return jule::new_ref<_11209db80_StructIns>();
	}
	jule::Bool _93517_ok = (*this)._field_not_plain || (*this)._method_check_illegal_cycles(_92434_decl,jule::Any(_92460_s));
	if ((!(_93517_ok))) {
		return jule::new_ref<_11209db80_StructIns>();
	}
	(*this)._method_append_used_struct_reference(_92460_s);
	jule::Ref<_11209db80_StructIns> _94117_ins = _92460_s->_method_instance();
	_94117_ins->_field_generics=jule::Slice<jule::Ref<_1217f7750_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_92434_decl->_field_generics.len())));
	jule::Ref<_1217f7750_Referencer> _94317_referencer = (*this)._field_referencer;
	jule::drop((*this)._field_referencer);
	{
		auto __julec_range_expr = _92434_decl->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1217f7750_i = 0;
			jule::Ref<_111612b20_TypeDecl> _1217f7750_g = *__julec_range_begin;
			_iter_begin_4607278944:;
			{
				jule::Ref<_1217f7750_TypeKind> _94621_kind = (*this)._method_build(_1217f7750_g->_field_kind);
				if ((!(jule::real(_94621_kind)))) {
					_93517_ok=false;
					goto _iter_next_4607278944;
				}
				_94117_ins->_field_generics[static_cast<jule::Int>(_1217f7750_i)]=_94621_kind;
			}
			_iter_next_4607278944:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1217f7750_i; _1217f7750_g = *__julec_range_begin; goto _iter_begin_4607278944; }
			_iter_end_4607278944:;
		}
	}
	(*this)._field_referencer=_94317_referencer;
	if ((!(_93517_ok))) {
		return jule::new_ref<_11209db80_StructIns>();
	}
	_93517_ok=(*this)._field_s->_method_check_generic_quantity(static_cast<jule::I64>(_94117_ins->_field_decl->_field_generics.len()),static_cast<jule::I64>(_94117_ins->_field_generics.len()),_92434_decl->_field_token);
	if ((!(_93517_ok))) {
		return jule::new_ref<_11209db80_StructIns>();
	}
	jule::Ref<_11209db80_StructIns> _96517_exist_instance = _92460_s->_method_append_instance(_94117_ins);
	if (jule::real(_96517_exist_instance)) {
		return _96517_exist_instance;
	}
	_93517_ok=(*this)._method_check_struct_ins(_94117_ins,_92434_decl->_field_token);
	if ((!(_93517_ok))) {
		return jule::new_ref<_11209db80_StructIns>();
	}
	return _94117_ins;
}



inline jule::Trait<_1217f7750_Kind> _1217f7750_TypeChecker::_method_get_def(jule::Ref<_111612b20_IdentTypeDecl> _98030_decl) {
	{
		auto __julec_range_expr = (*this)._field_ignore_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_111612b20_GenericDecl> _1217f7750_g = *__julec_range_begin;
			_iter_begin_4607310944:;
			{
				if (_1217f7750_g->_field_ident == _98030_decl->_field_ident) {
					return _1217f7750_build_prim_type(_1217f7750_g->_field_ident);
				}
			}
			_iter_next_4607310944:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1217f7750_g = *__julec_range_begin; goto _iter_begin_4607310944; }
			_iter_end_4607310944:;
		}
	}
	{
		auto __julec_range_expr = (*this)._field_use_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1217f7750_TypeAlias> _1217f7750_g = *__julec_range_begin;
			_iter_begin_4607312560:;
			{
				if (_1217f7750_g->_field_ident == _98030_decl->_field_ident) {
					jule::Ref<_11209db80_StructIns> _98925_st = _1217f7750_g->_field_kind->_field_kind->_method_strct();
					if (jule::real(_98925_st)) {
						jule::Bool _99125_ok = (*this)._method_check_illegal_cycles(_98030_decl,jule::Any(_98925_st->_field_decl));
						if ((!(_99125_ok))) {
							return nullptr;
						}
					}
					return _1217f7750_g->_field_kind->_field_kind->_field_kind;
				}
			}
			_iter_next_4607312560:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1217f7750_g = *__julec_range_begin; goto _iter_begin_4607312560; }
			_iter_end_4607312560:;
		}
	}
	if ((!(_98030_decl->_field_cpp_linked))) {
		jule::Ref<_11261eaf0_Enum> _100121_e = (*this)._field_lookup.get()._method_find_enum(_98030_decl->_field_ident);
		if (jule::real(_100121_e)) {
			return (*this)._method_from_enum(_98030_decl,_100121_e);
		}
		jule::Ref<_11209e2e0_Trait> _100621_t = (*this)._field_lookup.get()._method_find_trait(_98030_decl->_field_ident);
		if ((!(jule::real(_100621_t)))) {
			_100621_t=_1130606b0_find_builtin_trait(_98030_decl->_field_ident);
		}
		if (jule::real(_100621_t)) {
			if ((!((*this)._field_s->_method_is_accessible_define(_100621_t->_field_public,_100621_t->_field_token)))) {
				(*this)._method_push_err(_98030_decl->_field_token,jule::Str("ident_not_exist", 15),jule::Slice<jule::Any>({jule::Any(_98030_decl->_field_ident)}));
				return nullptr;
			}
			if (_98030_decl->_field_generics.len() > 0LL) {
				(*this)._method_push_err(_98030_decl->_field_token,jule::Str("type_not_supports_generics", 26),jule::Slice<jule::Any>({jule::Any(_98030_decl->_field_ident)}));
				return nullptr;
			}
			return _100621_t;
		}
	}
	jule::Ref<_11209db80_Struct> _102417_s = (*this)._field_lookup.get()._method_find_struct(_98030_decl->_field_ident,_98030_decl->_field_cpp_linked);
	if (jule::real(_102417_s)) {
		return (*this)._method_from_struct(_98030_decl,_102417_s);
	}
	jule::Ref<_1217f7750_TypeAlias> _102917_ta = (*this)._field_lookup.get()._method_find_type_alias(_98030_decl->_field_ident,_98030_decl->_field_cpp_linked);
	if ((!(jule::real(_102917_ta)))) {
		_102917_ta=_1130606b0_find_builtin_type_alias(_98030_decl->_field_ident);
	}
	if (jule::real(_102917_ta)) {
		return (*this)._method_from_type_alias(_98030_decl,_102917_ta);
	}
	(*this)._method_push_err(_98030_decl->_field_token,jule::Str("ident_not_exist", 15),jule::Slice<jule::Any>({jule::Any(_98030_decl->_field_ident)}));
	return nullptr;
}



inline jule::Trait<_1217f7750_Kind> _1217f7750_TypeChecker::_method_build_ident(jule::Ref<_111612b20_IdentTypeDecl> _104134_decl) {
	{
		if (!((_1217f7750_is_prim(_104134_decl->_field_ident)))) { goto _case_end_4607358912; }
		_case_begin_4607358912:;
		{
			return (*this)._method_build_prim(_104134_decl);
		}
		goto _match_end_4607356416;
		_case_end_4607358912:;
		_case_begin_4607356624:;
		{
			return (*this)._method_get_def(_104134_decl);
		}
		goto _match_end_4607356416;
		_case_end_4607356624:;
		_match_end_4607356416:;
	}
}



inline jule::Ref<_1217f7750_Ref> _1217f7750_TypeChecker::_method_build_ref_from_type(jule::Ref<_1217f7750_TypeKind> _104842_elem) {
	{
		if (!(((!(jule::real(_104842_elem)))))) { goto _case_end_4607358304; }
		_case_begin_4607358304:;
		{
			return jule::new_ref<_1217f7750_Ref>();
		}
		goto _match_end_4607357984;
		_case_end_4607358304:;
		if (!((jule::real(_104842_elem->_method_strct())))) { goto _case_end_4607358416; }
		_case_begin_4607358416:;
		{
			jule::Ref<_11209db80_StructIns> _105517_s = _104842_elem->_method_strct();
			if (jule::real(_105517_s->_field_decl) && _105517_s->_field_decl->_field_cpp_linked) {
				(*this)._method_push_err((*this)._field_error_token,jule::Str("cpp_linked_struct_for_ref", 25),jule::Slice<jule::Any>({}));
				return jule::new_ref<_1217f7750_Ref>();
			}
		}
		goto _match_end_4607357984;
		_case_end_4607358416:;
		if (!((jule::real(_104842_elem->_method_ref())))) { goto _case_end_4607362256; }
		_case_begin_4607362256:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("ref_refs_ref", 12),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_Ref>();
		}
		goto _match_end_4607357984;
		_case_end_4607362256:;
		if (!((jule::real(_104842_elem->_method_ptr())))) { goto _case_end_4607362368; }
		_case_begin_4607362368:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("ref_refs_ptr", 12),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_Ref>();
		}
		goto _match_end_4607357984;
		_case_end_4607362368:;
		if (!((jule::real(_104842_elem->_method_enm())))) { goto _case_end_4607362480; }
		_case_begin_4607362480:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("ref_refs_enum", 13),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_Ref>();
		}
		goto _match_end_4607357984;
		_case_end_4607362480:;
		if (!((jule::real(_104842_elem->_method_arr())))) { goto _case_end_4607362592; }
		_case_begin_4607362592:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("ref_refs_array", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_Ref>();
		}
		goto _match_end_4607357984;
		_case_end_4607362592:;
		_match_end_4607357984:;
	}
	return jule::new_struct<_1217f7750_Ref>(new( std::nothrow ) _1217f7750_Ref(_104842_elem));
}



inline jule::Ref<_1217f7750_Ref> _1217f7750_TypeChecker::_method_build_ref(jule::Ref<_111612b20_RefTypeDecl> _108332_decl) {
	jule::Bool _108413_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_108413_not_plain;
	});
	jule::Ref<_1217f7750_TypeKind> _108817_elem = (*this)._method_check_decl(_108332_decl->_field_elem);
	return (*this)._method_build_ref_from_type(_108817_elem);
}



inline jule::Ref<_1217f7750_Ptr> _1217f7750_TypeChecker::_method_build_ptr_from_type(jule::Ref<_1217f7750_TypeKind> _109242_elem) {
	{
		if (!(((!(jule::real(_109242_elem)))))) { goto _case_end_4607393840; }
		_case_begin_4607393840:;
		{
			return jule::new_ref<_1217f7750_Ptr>();
		}
		goto _match_end_4607393552;
		_case_end_4607393840:;
		if (!((jule::real(_109242_elem->_method_ref())))) { goto _case_end_4607393952; }
		_case_begin_4607393952:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("ptr_points_ref", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_Ptr>();
		}
		goto _match_end_4607393552;
		_case_end_4607393952:;
		if (!((jule::real(_109242_elem->_method_enm())))) { goto _case_end_4607394064; }
		_case_begin_4607394064:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("ptr_points_enum", 15),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_Ptr>();
		}
		goto _match_end_4607393552;
		_case_end_4607394064:;
		if (!((jule::real(_109242_elem->_method_arr()) && _109242_elem->_method_arr()->_field_auto))) { goto _case_end_4607394192; }
		_case_begin_4607394192:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("array_auto_sized", 16),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_Ptr>();
		}
		goto _match_end_4607393552;
		_case_end_4607394192:;
		_match_end_4607393552:;
	}
	return jule::new_struct<_1217f7750_Ptr>(new( std::nothrow ) _1217f7750_Ptr(_109242_elem));
}



inline jule::Ref<_1217f7750_Ptr> _1217f7750_TypeChecker::_method_build_ptr(jule::Ref<_111612b20_PtrTypeDecl> _111632_decl) {
	jule::Bool _111713_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_111713_not_plain;
	});
	jule::Ref<_1217f7750_TypeKind> _112117_elem = jule::new_ref<_1217f7750_TypeKind>();
	if ((!(_111632_decl->_method_is_unsafe()))) {
		_112117_elem=(*this)._method_check_decl(_111632_decl->_field_elem);
		return (*this)._method_build_ptr_from_type(_112117_elem);
	}
	return jule::new_struct<_1217f7750_Ptr>(new( std::nothrow ) _1217f7750_Ptr(_112117_elem));
}



inline jule::Ref<_1217f7750_Slc> _1217f7750_TypeChecker::_method_build_slc(jule::Ref<_111612b20_SlcTypeDecl> _113332_decl) {
	jule::Bool _113413_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_113413_not_plain;
	});
	jule::Ref<_1217f7750_TypeKind> _113817_elem = (*this)._method_check_decl(_113332_decl->_field_elem);
	{
		if (!(((!(jule::real(_113817_elem)))))) { goto _case_end_4607424400; }
		_case_begin_4607424400:;
		{
			return jule::new_ref<_1217f7750_Slc>();
		}
		goto _match_end_4607423712;
		_case_end_4607424400:;
		if (!((jule::real(_113817_elem->_method_arr()) && _113817_elem->_method_arr()->_field_auto))) { goto _case_end_4607424512; }
		_case_begin_4607424512:;
		{
			(*this)._method_push_err(_113332_decl->_field_elem->_field_token,jule::Str("array_auto_sized", 16),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_Slc>();
		}
		goto _match_end_4607423712;
		_case_end_4607424512:;
		_match_end_4607423712:;
	}
	return jule::new_struct<_1217f7750_Slc>(new( std::nothrow ) _1217f7750_Slc(_113817_elem));
}



inline jule::Ref<_1217f7750_Arr> _1217f7750_TypeChecker::_method_build_arr(jule::Ref<_111612b20_ArrTypeDecl> _115532_decl) {
	jule::Bool _115613_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_115613_not_plain;
	});
	jule::Int _116017_n = 0LL;
	if ((!(_115532_decl->_method_auto_sized()))) {
		jule::Ref<_121dedce0_Data> _116321_size = (*this)._field_s->_method_eval(_115532_decl->_field_size,(*this)._field_lookup);
		if ((!(jule::real(_116321_size)))) {
			return jule::new_ref<_1217f7750_Arr>();
		}
		if ((!(_116321_size->_method_is_const()))) {
			(*this)._method_push_err(_115532_decl->_field_elem->_field_token,jule::Str("expr_not_const", 14),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_Arr>();
		} else if ((!(_1132426f0_is_int(_116321_size->_field_kind->_method_prim()->_field_kind)))) {
			(*this)._method_push_err(_115532_decl->_field_elem->_field_token,jule::Str("array_size_is_not_int", 21),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_Arr>();
		}
		_116017_n=static_cast<jule::Int>(_116321_size->_field_constant->_method_as_i64());
		if (_116017_n < 0LL) {
			(*this)._method_push_err(_115532_decl->_field_elem->_field_token,jule::Str("array_size_is_negative", 22),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_Arr>();
		}
	}
	jule::Ref<_1217f7750_TypeKind> _118317_elem = (*this)._method_check_decl(_115532_decl->_field_elem);
	{
		if (!(((!(jule::real(_118317_elem)))))) { goto _case_end_4644173792; }
		_case_begin_4644173792:;
		{
			return jule::new_ref<_1217f7750_Arr>();
		}
		goto _match_end_4644173584;
		_case_end_4644173792:;
		if (!((jule::real(_118317_elem->_method_arr()) && _118317_elem->_method_arr()->_field_auto))) { goto _case_end_4644173904; }
		_case_begin_4644173904:;
		{
			(*this)._method_push_err(_115532_decl->_field_elem->_field_token,jule::Str("array_auto_sized", 16),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_Arr>();
		}
		goto _match_end_4644173584;
		_case_end_4644173904:;
		_match_end_4644173584:;
	}
	return jule::new_struct<_1217f7750_Arr>(new( std::nothrow ) _1217f7750_Arr(_115532_decl->_method_auto_sized(),_116017_n,_118317_elem));
}



inline jule::Ref<_1217f7750_Map> _1217f7750_TypeChecker::_method_build_map(jule::Ref<_111612b20_MapTypeDecl> _120232_decl) {
	jule::Bool _120313_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_120313_not_plain;
	});
	jule::Ref<_1217f7750_TypeKind> _120717_key = (*this)._method_check_decl(_120232_decl->_field_key);
	if ((!(jule::real(_120717_key)))) {
		return jule::new_ref<_1217f7750_Map>();
	}
	jule::Ref<_1217f7750_TypeKind> _121217_val = (*this)._method_check_decl(_120232_decl->_field_val);
	if ((!(jule::real(_121217_val)))) {
		return jule::new_ref<_1217f7750_Map>();
	}
	if (jule::real(_121217_val->_method_enm())) {
		(*this)._method_push_err(_120232_decl->_field_val->_field_token,jule::Str("enum_as_map_val", 15),jule::Slice<jule::Any>({}));
	}
	return jule::new_struct<_1217f7750_Map>(new( std::nothrow ) _1217f7750_Map(_120717_key,_121217_val));
}



inline jule::Ref<_1217f7750_Tuple> _1217f7750_TypeChecker::_method_build_tuple(jule::Ref<_111612b20_TupleTypeDecl> _122634_decl) {
	jule::Slice<jule::Ref<_1217f7750_TypeKind>> _122717_types = jule::Slice<jule::Ref<_1217f7750_TypeKind>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_122634_decl->_field_types.len())));
	{
		auto __julec_range_expr = _122634_decl->_field_types;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1217f7750_i = 0;
			jule::Ref<_111612b20_TypeDecl> _1217f7750_t = *__julec_range_begin;
			_iter_begin_4644201712:;
			{
				jule::Ref<_1217f7750_TypeKind> _122921_kind = (*this)._method_check_decl(_1217f7750_t);
				if ((!(jule::real(_122921_kind)))) {
					return jule::new_ref<_1217f7750_Tuple>();
				}
				_122717_types[static_cast<jule::Int>(_1217f7750_i)]=_122921_kind;
			}
			_iter_next_4644201712:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1217f7750_i; _1217f7750_t = *__julec_range_begin; goto _iter_begin_4644201712; }
			_iter_end_4644201712:;
		}
	}
	return jule::new_struct<_1217f7750_Tuple>(new( std::nothrow ) _1217f7750_Tuple(_122717_types));
}



inline jule::Bool _1217f7750_TypeChecker::_method_check_fn_types(jule::Ref<_112446fb0_FnIns> _123937_f) {
	jule::Bool _123950_ok = jule::Bool();
	{
		auto __julec_range_expr = _123937_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_ParamIns> _1217f7750_p = *__julec_range_begin;
			_iter_begin_4644211232:;
			{
				_1217f7750_p->_field_kind=(*this)._method_build(_1217f7750_p->_field_decl->_field_kind->_field_decl->_field_kind);
				_123950_ok=jule::real(_1217f7750_p->_field_kind);
				if ((!(_123950_ok))) {
					_123950_ok = false;
					return _123950_ok;
				}
			}
			_iter_next_4644211232:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1217f7750_p = *__julec_range_begin; goto _iter_begin_4644211232; }
			_iter_end_4644211232:;
		}
	}
	if ((!(_123937_f->_field_decl->_method_is_void()))) {
		_123937_f->_field_result=(*this)._method_build(_123937_f->_field_decl->_field_result->_field_kind->_field_decl->_field_kind);
		_123950_ok = jule::real(_123937_f->_field_result);
		return _123950_ok;
	}
	_123950_ok = true;
	return _123950_ok;
}



inline jule::Ref<_112446fb0_FnIns> _1217f7750_TypeChecker::_method_build_fn(jule::Ref<_111612b20_FnDecl> _125631_decl) {
	if (_125631_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_125631_decl->_field_token,jule::Str("genericed_fn_as_anonymous_fn", 28),jule::Slice<jule::Any>({}));
		return jule::new_ref<_112446fb0_FnIns>();
	}
	jule::Ref<_112446fb0_Fn> _126217_f = _112572770_build_fn(_125631_decl);
	jule::Ref<_112446fb0_FnIns> _126317_ins = _126217_f->_method_instance_force();
	_126317_ins->_field_anon=true;
	jule::Bool _126613_ok = (*this)._method_check_fn_types(_126317_ins);
	if ((!(_126613_ok))) {
		return jule::new_ref<_112446fb0_FnIns>();
	}
	return _126317_ins;
}



inline jule::Trait<_1217f7750_Kind> _1217f7750_TypeChecker::_method_build_by_std_namespace(jule::Ref<_111612b20_NamespaceTypeDecl> _127445_decl) {
	jule::Str _127513_path = _1217f7750_build_link_path_by_tokens(_127445_decl->_field_idents);
	jule::Ref<_11265fb90_ImportInfo> _127617_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)>([=](jule::Ref<_11265fb90_ImportInfo> _127653_imp) mutable -> jule::Bool {
		return _127653_imp->_field_std && (_127653_imp->_field_link_path == _127513_path);
	}));
	if ((!(jule::real(_127617_imp))) || (!(_127617_imp->_method_is_lookupable(jule::Str("self", 4))))) {
		(*this)._method_push_err(_127445_decl->_field_idents[static_cast<jule::Int>(0LL)],jule::Str("namespace_not_exist", 19),jule::Slice<jule::Any>({jule::Any(_127513_path)}));
		return nullptr;
	}
	jule::Trait<_112f89930_Lookup> _128517_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_127617_imp;
	jule::Trait<_1217f7750_Kind> _128817_kind = (*this)._method_build_ident(_127445_decl->_field_kind);
	(*this)._field_lookup=_128517_lookup;
	return _128817_kind;
}



inline jule::Trait<_1217f7750_Kind> _1217f7750_TypeChecker::_method_build_by_namespace(jule::Ref<_111612b20_NamespaceTypeDecl> _129541_decl) {
	_111613f20_Token _129613_token = _129541_decl->_field_idents[static_cast<jule::Int>(0LL)];
	if (_129613_token._field_kind == jule::Str("std", 3)) {
		return (*this)._method_build_by_std_namespace(_129541_decl);
	}
	(*this)._method_push_err(_129613_token,jule::Str("ident_not_exist", 15),jule::Slice<jule::Any>({jule::Any(_129613_token._field_kind)}));
	return nullptr;
}



inline jule::Ref<_1217f7750_TypeKind> _1217f7750_TypeChecker::_method_build(jule::Any _130528_decl_kind) {
	jule::Trait<_1217f7750_Kind> _130617_kind = nullptr;
	{
		auto _match_expr{ _130528_decl_kind };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_TypeKind>>())) { goto _case_end_4642290192; }
		_case_begin_4642290192:;
		{
			_130617_kind=_130528_decl_kind.operator jule::Ref<_1217f7750_TypeKind>();
		}
		goto _match_end_4633298496;
		_case_end_4642290192:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_IdentTypeDecl>>())) { goto _case_end_4642276416; }
		_case_begin_4642276416:;
		{
			jule::Trait<_1217f7750_Kind> _131321_t = (*this)._method_build_ident(_130528_decl_kind.operator jule::Ref<_111612b20_IdentTypeDecl>());
			if (_131321_t != nullptr) {
				_130617_kind=_131321_t;
			}
		}
		goto _match_end_4633298496;
		_case_end_4642276416:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_RefTypeDecl>>())) { goto _case_end_4643714336; }
		_case_begin_4643714336:;
		{
			jule::Ref<_1217f7750_Ref> _131921_t = (*this)._method_build_ref(_130528_decl_kind.operator jule::Ref<_111612b20_RefTypeDecl>());
			if (jule::real(_131921_t)) {
				_130617_kind=_131921_t;
			}
		}
		goto _match_end_4633298496;
		_case_end_4643714336:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_PtrTypeDecl>>())) { goto _case_end_4643715168; }
		_case_begin_4643715168:;
		{
			jule::Ref<_1217f7750_Ptr> _132521_t = (*this)._method_build_ptr(_130528_decl_kind.operator jule::Ref<_111612b20_PtrTypeDecl>());
			if (jule::real(_132521_t)) {
				_130617_kind=_132521_t;
			}
		}
		goto _match_end_4633298496;
		_case_end_4643715168:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_SlcTypeDecl>>())) { goto _case_end_4643147296; }
		_case_begin_4643147296:;
		{
			jule::Ref<_1217f7750_Slc> _133121_t = (*this)._method_build_slc(_130528_decl_kind.operator jule::Ref<_111612b20_SlcTypeDecl>());
			if (jule::real(_133121_t)) {
				_130617_kind=_133121_t;
			}
		}
		goto _match_end_4633298496;
		_case_end_4643147296:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_ArrTypeDecl>>())) { goto _case_end_4642647008; }
		_case_begin_4642647008:;
		{
			jule::Ref<_1217f7750_Arr> _133721_t = (*this)._method_build_arr(_130528_decl_kind.operator jule::Ref<_111612b20_ArrTypeDecl>());
			if (jule::real(_133721_t)) {
				_130617_kind=_133721_t;
			}
		}
		goto _match_end_4633298496;
		_case_end_4642647008:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_MapTypeDecl>>())) { goto _case_end_4640685696; }
		_case_begin_4640685696:;
		{
			jule::Ref<_1217f7750_Map> _134321_t = (*this)._method_build_map(_130528_decl_kind.operator jule::Ref<_111612b20_MapTypeDecl>());
			if (jule::real(_134321_t)) {
				_130617_kind=_134321_t;
			}
		}
		goto _match_end_4633298496;
		_case_end_4640685696:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_TupleTypeDecl>>())) { goto _case_end_4636736592; }
		_case_begin_4636736592:;
		{
			jule::Ref<_1217f7750_Tuple> _134921_t = (*this)._method_build_tuple(_130528_decl_kind.operator jule::Ref<_111612b20_TupleTypeDecl>());
			if (jule::real(_134921_t)) {
				_130617_kind=_134921_t;
			}
		}
		goto _match_end_4633298496;
		_case_end_4636736592:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_FnDecl>>())) { goto _case_end_4637186800; }
		_case_begin_4637186800:;
		{
			jule::Ref<_112446fb0_FnIns> _135521_t = (*this)._method_build_fn(_130528_decl_kind.operator jule::Ref<_111612b20_FnDecl>());
			if (jule::real(_135521_t)) {
				_130617_kind=_135521_t;
			}
		}
		goto _match_end_4633298496;
		_case_end_4637186800:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_NamespaceTypeDecl>>())) { goto _case_end_4637120832; }
		_case_begin_4637120832:;
		{
			jule::Trait<_1217f7750_Kind> _136121_t = (*this)._method_build_by_namespace(_130528_decl_kind.operator jule::Ref<_111612b20_NamespaceTypeDecl>());
			if (_136121_t != nullptr) {
				_130617_kind=_136121_t;
			}
		}
		goto _match_end_4633298496;
		_case_end_4637120832:;
		_case_begin_4637291888:;
		{
			(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid_type", 12),jule::Slice<jule::Any>({}));
			return jule::new_ref<_1217f7750_TypeKind>();
		}
		goto _match_end_4633298496;
		_case_end_4637291888:;
		_match_end_4633298496:;
	}
	if (_130617_kind == nullptr) {
		return jule::new_ref<_1217f7750_TypeKind>();
	}
	{
		auto _match_expr{ _130617_kind };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_TypeKind>>())) { goto _case_end_4643730528; }
		_case_begin_4643730528:;
		{
			return _130617_kind.operator jule::Ref<_1217f7750_TypeKind>();
		}
		goto _match_end_4643728816;
		_case_end_4643730528:;
		_case_begin_4643728320:;
		{
			return jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_130617_kind));
		}
		goto _match_end_4643728816;
		_case_end_4643728320:;
		_match_end_4643728816:;
	}
}



inline jule::Ref<_1217f7750_TypeKind> _1217f7750_TypeChecker::_method_check_decl(jule::Ref<_111612b20_TypeDecl> _138633_decl) {
	_111613f20_Token _138817_error_token = (*this)._field_error_token;
	(*this)._field_error_token=_138633_decl->_field_token;
	jule::Ref<_1217f7750_TypeKind> _139117_kind = (*this)._method_build(_138633_decl->_field_kind);
	(*this)._field_error_token=_138817_error_token;
	return _139117_kind;
}



inline void _1217f7750_TypeChecker::_method_check(jule::Ref<_1217f7750_TypeSymbol> _139728_t) {
	if ((!(jule::real(_139728_t->_field_decl)))) {
		return;
	}
	jule::Ref<_1217f7750_TypeKind> _140217_kind = (*this)._method_check_decl(_139728_t->_field_decl);
	if ((!(jule::real(_140217_kind)))) {
		_139728_t->_method_remove_kind();
		return;
	}
	_139728_t->_field_kind=_140217_kind;
}







std::ostream &operator<<(std::ostream &_Stream, const _1217f7750_TypeChecker &_Src) {
	_Stream << "TypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "referencer:" << _Src._field_referencer << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "ignore_generics:" << _Src._field_ignore_generics << ", ";
	_Stream << "use_generics:" << _Src._field_use_generics << ", ";
	_Stream << "not_plain:" << _Src._field_not_plain;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1217f7750_TypeAlias &_Src) {
	_Stream << "TypeAlias{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "refers:" << _Src._field_refers;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _121dedce0_BinopSolver::_method_check_type_compatibility(void) {
	_121807de0_TypeCompatibilityChecker _326217_tcc = _121807de0_TypeCompatibilityChecker((*this)._field_e->_field_s,(*this)._field_l->_field_kind,(*this)._field_r->_field_kind,(*this)._field_op,true,jule::Bool(),jule::Bool());
	return _326217_tcc._method_check();
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_nil(void) {
	if ((!(_1217f7750_is_nil_compatible((*this)._field_r->_field_kind)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any(jule::Str("nil", 3)),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4641874240; }
		_case_begin_4641874240:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641871744;
		_case_end_4641874240:;
		_case_begin_4641865120:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("nil", 3))}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641871744;
		_case_end_4641865120:;
		_match_end_4641871744:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_enum(void) {
	jule::Ref<_11261eaf0_Enum> _329417_enm = (*this)._field_l->_field_kind->_method_enm();
	if ((!(jule::real((*this)._field_r->_field_kind->_method_enm()))) || ((_329417_enm).alloc != ((*this)._field_r->_field_kind->_method_enm()).alloc)) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any(_329417_enm->_field_ident),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4641893360; }
		_case_begin_4641893360:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4641884176;
		_case_end_4641893360:;
		if (!((jule::Str("&", 1)) == _match_expr || (jule::Str("|", 1)) == _match_expr)) { goto _case_end_4641897856; }
		_case_begin_4641897856:;
		{
			if ((!(jule::real(_329417_enm->_field_kind->_field_kind->_method_prim()))) || (!(_1132426f0_is_int(_329417_enm->_field_kind->_field_kind->_method_prim()->_method_to_str())))) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(_329417_enm->_field_ident)}));
			}
			return (*this)._field_l;
		}
		goto _match_end_4641884176;
		_case_end_4641897856:;
		_case_begin_4641891840:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(_329417_enm->_field_ident)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4641884176;
		_case_end_4641891840:;
		_match_end_4641884176:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_ptr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str("<=", 2)) == _match_expr || (jule::Str(">=", 2)) == _match_expr)) { goto _case_end_4604949984; }
		_case_begin_4604949984:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4605553824;
		_case_end_4604949984:;
		_case_begin_4604255888:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4605553824;
		_case_end_4604255888:;
		_match_end_4605553824:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_arr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4603513488; }
		_case_begin_4603513488:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4605363568;
		_case_end_4603513488:;
		_case_begin_4603392032:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4605363568;
		_case_end_4603392032:;
		_match_end_4605363568:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_slc(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4866290016; }
		_case_begin_4866290016:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4865598608;
		_case_end_4866290016:;
		_case_begin_4865762096:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4865598608;
		_case_end_4865762096:;
		_match_end_4865598608:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_fn(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4599629088; }
		_case_begin_4599629088:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4586742000;
		_case_end_4599629088:;
		_case_begin_4599867936:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4586742000;
		_case_end_4599867936:;
		_match_end_4586742000:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_struct(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4603166560; }
		_case_begin_4603166560:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4603099648;
		_case_end_4603166560:;
		_case_begin_4603137120:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4603099648;
		_case_end_4603137120:;
		_match_end_4603099648:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_trait(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4605325360; }
		_case_begin_4605325360:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4605107312;
		_case_end_4605325360:;
		_case_begin_4605092704:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4605107312;
		_case_end_4605092704:;
		_match_end_4605107312:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_any(void) {
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4605187008; }
		_case_begin_4605187008:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4605341344;
		_case_end_4605187008:;
		_case_begin_4605178544:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("any", 3))}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4605341344;
		_case_end_4605178544:;
		_match_end_4605341344:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_bool(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("&&", 2)) == _match_expr || (jule::Str("||", 2)) == _match_expr)) { goto _case_end_4604067328; }
		_case_begin_4604067328:;
		{
			return (*this)._field_l;
		}
		goto _match_end_4603710752;
		_case_end_4604067328:;
		_case_begin_4603776880:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4603710752;
		_case_end_4603776880:;
		_match_end_4603710752:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_str(void) {
	jule::Str _348817_rk = (*this)._field_r->_field_kind->_method_to_str();
	if (_348817_rk != jule::Str("str", 3)) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any((*this)._field_l->_field_kind->_method_to_str()),jule::Any(_348817_rk)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("+", 1)) == _match_expr)) { goto _case_end_4603638816; }
		_case_begin_4603638816:;
		{
			return (*this)._field_l;
		}
		goto _match_end_4603633632;
		_case_end_4603638816:;
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4605644896; }
		_case_begin_4605644896:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4603633632;
		_case_end_4605644896:;
		_case_begin_4604117024:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("any", 3))}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4603633632;
		_case_end_4604117024:;
		_match_end_4603633632:;
	}
}



inline void _121dedce0_BinopSolver::_method_set_type_to_greater(void) {
	if (((*this)._field_l->_method_is_const() && (*this)._field_r->_method_is_const()) || ((!((*this)._field_l->_method_is_const())) && (!((*this)._field_r->_method_is_const())))) {
		jule::Str _351417_lk = (*this)._field_l->_field_kind->_method_to_str();
		jule::Str _351517_rk = (*this)._field_r->_field_kind->_method_to_str();
		if (_1131f8900_is_greater(_351517_rk,_351417_lk)) {
			(*this)._field_l->_field_kind=(*this)._field_r->_field_kind;
		}
		return;
	}
	if ((*this)._field_l->_method_is_const()) {
		(*this)._field_l->_field_kind=(*this)._field_r->_field_kind;
		return;
	}
	(*this)._field_r->_field_kind=(*this)._field_l->_field_kind;
}



inline void _121dedce0_BinopSolver::_method_check_mod_data(jule::Ref<_121dedce0_Data> _353037_d) {
	if ((!(_353037_d->_method_is_const()))) {
		if ((!(jule::real(_353037_d->_field_kind->_method_prim()))) || (!(_1132426f0_is_int(_353037_d->_field_kind->_method_prim()->_field_kind)))) {
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("modulo_with_not_int", 19),jule::Slice<jule::Any>({}));
		}
		return;
	}
	{
		if (!((_121807de0_sig_assignable(jule::Str("i64", 3),_353037_d)))) { goto _case_end_4603895488; }
		_case_begin_4603895488:;
		{
			_353037_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_353037_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4603432224;
		_case_end_4603895488:;
		if (!((_121807de0_unsig_assignable(jule::Str("u64", 3),_353037_d)))) { goto _case_end_4603769904; }
		_case_begin_4603769904:;
		{
			_353037_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_353037_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4603432224;
		_case_end_4603769904:;
		_case_begin_4603713888:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("modulo_with_not_int", 19),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4603432224;
		_case_end_4603713888:;
		_match_end_4603432224:;
	}
}



inline void _121dedce0_BinopSolver::_method_mod(void) {
	(*this)._method_check_mod_data((*this)._field_l);
	(*this)._method_check_mod_data((*this)._field_r);
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_float(void) {
	jule::Str _355613_lk = (*this)._field_l->_field_kind->_method_to_str();
	jule::Str _355713_rk = (*this)._field_r->_field_kind->_method_to_str();
	if ((!(_1132426f0_is_num(_355613_lk))) || (!(_1132426f0_is_num(_355713_rk)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any(_355613_lk),jule::Any(_355713_rk)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str(">=", 2)) == _match_expr || (jule::Str("<=", 2)) == _match_expr)) { goto _case_end_4603608560; }
		_case_begin_4603608560:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4603589440;
		_case_end_4603608560:;
		_match_end_4603589440:;
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("+", 1)) == _match_expr || (jule::Str("-", 1)) == _match_expr || (jule::Str("*", 1)) == _match_expr || (jule::Str("/", 1)) == _match_expr)) { goto _case_end_4605212528; }
		_case_begin_4605212528:;
		{
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4865665104;
		_case_end_4605212528:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4605162368; }
		_case_begin_4605162368:;
		{
			if ((!(_1132426f0_is_int(_355713_rk)))) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any(_355613_lk),jule::Any(_355713_rk)}));
				return jule::new_ref<_121dedce0_Data>();
			}
			(*this)._method_mod();
			return (*this)._field_r;
		}
		goto _match_end_4865665104;
		_case_end_4605162368:;
		_case_begin_4605134944:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_float", 22),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4865665104;
		_case_end_4605134944:;
		_match_end_4865665104:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_unsig_int(void) {
	jule::Str _360213_lk = (*this)._field_l->_field_kind->_method_to_str();
	jule::Str _360313_rk = (*this)._field_r->_field_kind->_method_to_str();
	if ((!(_1132426f0_is_num(_360213_lk))) || (!(_1132426f0_is_num(_360313_rk)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any(_360213_lk),jule::Any(_360313_rk)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str(">=", 2)) == _match_expr || (jule::Str("<=", 2)) == _match_expr)) { goto _case_end_4606808608; }
		_case_begin_4606808608:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4605047120;
		_case_end_4606808608:;
		_match_end_4605047120:;
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("+", 1)) == _match_expr || (jule::Str("-", 1)) == _match_expr || (jule::Str("*", 1)) == _match_expr || (jule::Str("/", 1)) == _match_expr || (jule::Str("&", 1)) == _match_expr || (jule::Str("|", 1)) == _match_expr || (jule::Str("^", 1)) == _match_expr)) { goto _case_end_4603418576; }
		_case_begin_4603418576:;
		{
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4606560480;
		_case_end_4603418576:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4605819952; }
		_case_begin_4605819952:;
		{
			(*this)._method_mod();
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4606560480;
		_case_end_4605819952:;
		if (!((jule::Str("<<", 2)) == _match_expr || (jule::Str(">>", 2)) == _match_expr)) { goto _case_end_4603635168; }
		_case_begin_4603635168:;
		{
			if ((!(_121dedce0_is_ok_for_shifting((*this)._field_r)))) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("bitshift_must_unsigned", 22),jule::Slice<jule::Any>({}));
				return jule::new_ref<_121dedce0_Data>();
			}
			if ((*this)._field_l->_method_is_const()) {
				(*this)._field_l->_field_kind=(*this)._field_r->_field_kind;
			}
			return (*this)._field_l;
		}
		goto _match_end_4606560480;
		_case_end_4603635168:;
		_case_begin_4605373280:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_uint", 21),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4606560480;
		_case_end_4605373280:;
		_match_end_4606560480:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_sig_int(void) {
	jule::Str _366113_lk = (*this)._field_l->_field_kind->_method_to_str();
	jule::Str _366213_rk = (*this)._field_r->_field_kind->_method_to_str();
	if ((!(_1132426f0_is_num(_366113_lk))) || (!(_1132426f0_is_num(_366213_rk)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any(_366113_lk),jule::Any(_366213_rk)}));
		return jule::new_ref<_121dedce0_Data>();
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr || (jule::Str("!=", 2)) == _match_expr || (jule::Str("<", 1)) == _match_expr || (jule::Str(">", 1)) == _match_expr || (jule::Str(">=", 2)) == _match_expr || (jule::Str("<=", 2)) == _match_expr)) { goto _case_end_4602429728; }
		_case_begin_4602429728:;
		{
			return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("bool", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
		}
		goto _match_end_4866160464;
		_case_end_4602429728:;
		_match_end_4866160464:;
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("+", 1)) == _match_expr || (jule::Str("-", 1)) == _match_expr || (jule::Str("*", 1)) == _match_expr || (jule::Str("/", 1)) == _match_expr || (jule::Str("&", 1)) == _match_expr || (jule::Str("|", 1)) == _match_expr || (jule::Str("^", 1)) == _match_expr)) { goto _case_end_4602790784; }
		_case_begin_4602790784:;
		{
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4602685456;
		_case_end_4602790784:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4602790896; }
		_case_begin_4602790896:;
		{
			(*this)._method_mod();
			(*this)._method_set_type_to_greater();
			return (*this)._field_l;
		}
		goto _match_end_4602685456;
		_case_end_4602790896:;
		if (!((jule::Str("<<", 2)) == _match_expr || (jule::Str(">>", 2)) == _match_expr)) { goto _case_end_4602763792; }
		_case_begin_4602763792:;
		{
			if ((!(_121dedce0_is_ok_for_shifting((*this)._field_r)))) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("bitshift_must_unsigned", 22),jule::Slice<jule::Any>({}));
				return jule::new_ref<_121dedce0_Data>();
			}
			return (*this)._field_l;
		}
		goto _match_end_4602685456;
		_case_end_4602763792:;
		_case_begin_4602493936:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_int", 20),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4602685456;
		_case_end_4602493936:;
		_match_end_4602685456:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval_prim(void) {
	jule::Ref<_1217f7750_Prim> _371613_prim = (*this)._field_l->_field_kind->_method_prim();
	{
		if (!((_371613_prim->_method_is_any()))) { goto _case_end_4604203424; }
		_case_begin_4604203424:;
		{
			return (*this)._method_eval_any();
		}
		goto _match_end_4604172000;
		_case_end_4604203424:;
		if (!((_371613_prim->_method_is_bool()))) { goto _case_end_4604203536; }
		_case_begin_4604203536:;
		{
			return (*this)._method_eval_bool();
		}
		goto _match_end_4604172000;
		_case_end_4604203536:;
		if (!((_371613_prim->_method_is_str()))) { goto _case_end_4603434848; }
		_case_begin_4603434848:;
		{
			return (*this)._method_eval_str();
		}
		goto _match_end_4604172000;
		_case_end_4603434848:;
		_match_end_4604172000:;
	}
	jule::Ref<_1217f7750_Prim> _372313_rprim = (*this)._field_r->_field_kind->_method_prim();
	if ((!(jule::real(_372313_rprim)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any(_371613_prim->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Str _372913_lk = _371613_prim->_method_to_str();
	{
		if (!((_1132426f0_is_float(_372913_lk)))) { goto _case_end_4605812224; }
		_case_begin_4605812224:;
		{
			return (*this)._method_eval_float();
		}
		goto _match_end_4606804432;
		_case_end_4605812224:;
		if (!((_1132426f0_is_unsig_int(_372913_lk)))) { goto _case_end_4605885840; }
		_case_begin_4605885840:;
		{
			return (*this)._method_eval_unsig_int();
		}
		goto _match_end_4606804432;
		_case_end_4605885840:;
		if (!((_1132426f0_is_sig_int(_372913_lk)))) { goto _case_end_4605885952; }
		_case_begin_4605885952:;
		{
			return (*this)._method_eval_sig_int();
		}
		goto _match_end_4606804432;
		_case_end_4605885952:;
		_case_begin_4606804848:;
		{
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4606804432;
		_case_end_4606804848:;
		_match_end_4606804432:;
	}
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_eval(void) {
	{
		if (!(((*this)._field_l->_field_kind->_method_is_void()))) { goto _case_end_4603432704; }
		_case_begin_4603432704:;
		{
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator_not_for_juletype", 25),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("void", 4))}));
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4865424176;
		_case_end_4603432704:;
		if (!(((*this)._field_l->_field_kind->_method_is_nil()))) { goto _case_end_4602897616; }
		_case_begin_4602897616:;
		{
			return (*this)._method_eval_nil();
		}
		goto _match_end_4865424176;
		_case_end_4602897616:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_enm())))) { goto _case_end_4602897728; }
		_case_begin_4602897728:;
		{
			return (*this)._method_eval_enum();
		}
		goto _match_end_4865424176;
		_case_end_4602897728:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_ptr())))) { goto _case_end_4866159664; }
		_case_begin_4866159664:;
		{
			return (*this)._method_eval_ptr();
		}
		goto _match_end_4865424176;
		_case_end_4866159664:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_arr())))) { goto _case_end_4866159776; }
		_case_begin_4866159776:;
		{
			return (*this)._method_eval_arr();
		}
		goto _match_end_4865424176;
		_case_end_4866159776:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_slc())))) { goto _case_end_4865814576; }
		_case_begin_4865814576:;
		{
			return (*this)._method_eval_slc();
		}
		goto _match_end_4865424176;
		_case_end_4865814576:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_fnc())))) { goto _case_end_4865814688; }
		_case_begin_4865814688:;
		{
			return (*this)._method_eval_fn();
		}
		goto _match_end_4865424176;
		_case_end_4865814688:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_trt()) || jule::real((*this)._field_r->_field_kind->_method_trt())))) { goto _case_end_4865929872; }
		_case_begin_4865929872:;
		{
			if (jule::real((*this)._field_r->_field_kind->_method_trt())) {
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
			}
			return (*this)._method_eval_trait();
		}
		goto _match_end_4865424176;
		_case_end_4865929872:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_strct())))) { goto _case_end_4865929984; }
		_case_begin_4865929984:;
		{
			return (*this)._method_eval_struct();
		}
		goto _match_end_4865424176;
		_case_end_4865929984:;
		if (!((jule::real((*this)._field_l->_field_kind->_method_prim())))) { goto _case_end_4865930096; }
		_case_begin_4865930096:;
		{
			return (*this)._method_eval_prim();
		}
		goto _match_end_4865424176;
		_case_end_4865930096:;
		_case_begin_4865599072:;
		{
			return jule::new_ref<_121dedce0_Data>();
		}
		goto _match_end_4865424176;
		_case_end_4865599072:;
		_match_end_4865424176:;
	}
}



inline void _121dedce0_BinopSolver::_method_assign_shift(jule::Ref<_121dedce0_Data> _377931_d,jule::F64 _377941_r) {
	{
		if (!((_377941_r <= 6LL))) { goto _case_end_4602881776; }
		_case_begin_4602881776:;
		{
			_377931_d->_field_kind->_method_prim()->_field_kind=jule::Str("i8", 2);
			_377931_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_377931_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4602558032;
		_case_end_4602881776:;
		if (!((_377941_r <= 7LL))) { goto _case_end_4603045840; }
		_case_begin_4603045840:;
		{
			_377931_d->_field_kind->_method_prim()->_field_kind=jule::Str("u8", 2);
			_377931_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_377931_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4602558032;
		_case_end_4603045840:;
		if (!((_377941_r <= 14LL))) { goto _case_end_4603045952; }
		_case_begin_4603045952:;
		{
			_377931_d->_field_kind->_method_prim()->_field_kind=jule::Str("i16", 3);
			_377931_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_377931_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4602558032;
		_case_end_4603045952:;
		if (!((_377941_r <= 15LL))) { goto _case_end_4603046064; }
		_case_begin_4603046064:;
		{
			_377931_d->_field_kind->_method_prim()->_field_kind=jule::Str("u16", 3);
			_377931_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_377931_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4602558032;
		_case_end_4603046064:;
		if (!((_377941_r <= 30LL))) { goto _case_end_4603717680; }
		_case_begin_4603717680:;
		{
			_377931_d->_field_kind->_method_prim()->_field_kind=jule::Str("i32", 3);
			_377931_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_377931_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4602558032;
		_case_end_4603717680:;
		if (!((_377941_r <= 31LL))) { goto _case_end_4603717792; }
		_case_begin_4603717792:;
		{
			_377931_d->_field_kind->_method_prim()->_field_kind=jule::Str("u32", 3);
			_377931_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_377931_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4602558032;
		_case_end_4603717792:;
		if (!((_377941_r <= 62LL))) { goto _case_end_4603717904; }
		_case_begin_4603717904:;
		{
			_377931_d->_field_kind->_method_prim()->_field_kind=jule::Str("i64", 3);
			_377931_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_377931_d->_field_constant->_method_as_i64()));
		}
		goto _match_end_4602558032;
		_case_end_4603717904:;
		if (!((_377941_r <= 63LL))) { goto _case_end_4603718016; }
		_case_begin_4603718016:;
		{
			_377931_d->_field_kind->_method_prim()->_field_kind=jule::Str("u64", 3);
			_377931_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_377931_d->_field_constant->_method_as_u64()));
		}
		goto _match_end_4602558032;
		_case_end_4603718016:;
		if (!((_377941_r <= 127LL))) { goto _case_end_4603745040; }
		_case_begin_4603745040:;
		{
			_377931_d->_field_kind->_method_prim()->_field_kind=jule::Str("f32", 3);
			_377931_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_377931_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4602558032;
		_case_end_4603745040:;
		_case_begin_4602698208:;
		{
			_377931_d->_field_kind->_method_prim()->_field_kind=jule::Str("f64", 3);
			_377931_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_377931_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4602558032;
		_case_end_4602698208:;
		_match_end_4602558032:;
	}
}



inline void _121dedce0_BinopSolver::_method_solve_const(jule::Ref<_121dedce0_Data> _382334_d) {
	{
		if (!(((!(jule::real(_382334_d)))))) { goto _case_end_4605080448; }
		_case_begin_4605080448:;
		{
			return;
		}
		goto _match_end_4605080192;
		_case_end_4605080448:;
		if (!(((!((*this)._field_l->_method_is_const()))) || ((!((*this)._field_r->_method_is_const()))))) { goto _case_end_4605080560; }
		_case_begin_4605080560:;
		{
			jule::drop(_382334_d->_field_constant);
			return;
		}
		goto _match_end_4605080192;
		_case_end_4605080560:;
		_match_end_4605080192:;
	}
	{
		auto _match_expr{ (*this)._field_op._field_kind };
		if (!((jule::Str("==", 2)) == _match_expr)) { goto _case_end_4603961712; }
		_case_begin_4603961712:;
		{
			_382334_d->_field_constant=_1131530d0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_eqs((*this)._field_r->_field_constant));
		}
		goto _match_end_4603736736;
		_case_end_4603961712:;
		if (!((jule::Str("!=", 2)) == _match_expr)) { goto _case_end_4604694032; }
		_case_begin_4604694032:;
		{
			_382334_d->_field_constant=_1131530d0_Const::_static_method_new_bool((!((*this)._field_l->_field_constant->_method_eqs((*this)._field_r->_field_constant))));
		}
		goto _match_end_4603736736;
		_case_end_4604694032:;
		if (!((jule::Str("::", 2)) == _match_expr)) { goto _case_end_4604694144; }
		_case_begin_4604694144:;
		{
			_382334_d->_field_constant=_1131530d0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_or((*this)._field_r->_field_constant));
		}
		goto _match_end_4603736736;
		_case_end_4604694144:;
		if (!((jule::Str("&&", 2)) == _match_expr)) { goto _case_end_4604694256; }
		_case_begin_4604694256:;
		{
			_382334_d->_field_constant=_1131530d0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_and((*this)._field_r->_field_constant));
		}
		goto _match_end_4603736736;
		_case_end_4604694256:;
		if (!((jule::Str(">", 1)) == _match_expr)) { goto _case_end_4604694368; }
		_case_begin_4604694368:;
		{
			_382334_d->_field_constant=_1131530d0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_gt((*this)._field_r->_field_constant));
		}
		goto _match_end_4603736736;
		_case_end_4604694368:;
		if (!((jule::Str("<", 1)) == _match_expr)) { goto _case_end_4605094384; }
		_case_begin_4605094384:;
		{
			_382334_d->_field_constant=_1131530d0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_lt((*this)._field_r->_field_constant));
		}
		goto _match_end_4603736736;
		_case_end_4605094384:;
		if (!((jule::Str(">=", 2)) == _match_expr)) { goto _case_end_4605094496; }
		_case_begin_4605094496:;
		{
			_382334_d->_field_constant=_1131530d0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_gt((*this)._field_r->_field_constant) || (*this)._field_l->_field_constant->_method_eqs((*this)._field_r->_field_constant));
		}
		goto _match_end_4603736736;
		_case_end_4605094496:;
		if (!((jule::Str("<=", 2)) == _match_expr)) { goto _case_end_4605094608; }
		_case_begin_4605094608:;
		{
			_382334_d->_field_constant=_1131530d0_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_lt((*this)._field_r->_field_constant) || (*this)._field_l->_field_constant->_method_eqs((*this)._field_r->_field_constant));
		}
		goto _match_end_4603736736;
		_case_end_4605094608:;
		if (!((jule::Str("+", 1)) == _match_expr)) { goto _case_end_4605094720; }
		_case_begin_4605094720:;
		{
			(*this)._field_l->_field_constant->_method_add((*this)._field_r->_field_constant);
			_382334_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4603736736;
		_case_end_4605094720:;
		if (!((jule::Str("-", 1)) == _match_expr)) { goto _case_end_4605101472; }
		_case_begin_4605101472:;
		{
			(*this)._field_l->_field_constant->_method_sub((*this)._field_r->_field_constant);
			_382334_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4603736736;
		_case_end_4605101472:;
		if (!((jule::Str("*", 1)) == _match_expr)) { goto _case_end_4605101584; }
		_case_begin_4605101584:;
		{
			(*this)._field_l->_field_constant->_method_mul((*this)._field_r->_field_constant);
			_382334_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4603736736;
		_case_end_4605101584:;
		if (!((jule::Str("/", 1)) == _match_expr)) { goto _case_end_4605101696; }
		_case_begin_4605101696:;
		{
			jule::Bool _387317_ok = (*this)._field_l->_field_constant->_method_div((*this)._field_r->_field_constant);
			if ((!(_387317_ok)) && ((*this)._field_r->_field_constant->_method_as_f64() == 0LL)) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("divide_by_zero", 14),jule::Slice<jule::Any>({}));
			}
			_382334_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4603736736;
		_case_end_4605101696:;
		if (!((jule::Str("%", 1)) == _match_expr)) { goto _case_end_4605101808; }
		_case_begin_4605101808:;
		{
			jule::Bool _388017_ok = (*this)._field_l->_field_constant->_method_mod((*this)._field_r->_field_constant);
			if ((!(_388017_ok)) && ((*this)._field_r->_field_constant->_method_as_f64() == 0LL)) {
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("divide_by_zero", 14),jule::Slice<jule::Any>({}));
			}
			_382334_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4603736736;
		_case_end_4605101808:;
		if (!((jule::Str("|", 1)) == _match_expr)) { goto _case_end_4865944192; }
		_case_begin_4865944192:;
		{
			(*this)._field_l->_field_constant->_method_bitwise_or((*this)._field_r->_field_constant);
			_382334_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4603736736;
		_case_end_4865944192:;
		if (!((jule::Str("&", 1)) == _match_expr)) { goto _case_end_4865944304; }
		_case_begin_4865944304:;
		{
			(*this)._field_l->_field_constant->_method_bitwise_and((*this)._field_r->_field_constant);
			_382334_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4603736736;
		_case_end_4865944304:;
		if (!((jule::Str("^", 1)) == _match_expr)) { goto _case_end_4865944416; }
		_case_begin_4865944416:;
		{
			(*this)._field_l->_field_constant->_method_xor((*this)._field_r->_field_constant);
			_382334_d->_field_constant=(*this)._field_l->_field_constant;
		}
		goto _match_end_4603736736;
		_case_end_4865944416:;
		if (!((jule::Str("<<", 2)) == _match_expr)) { goto _case_end_4865944528; }
		_case_begin_4865944528:;
		{
			_382334_d->_field_constant=(*this)._field_l->_field_constant;
			(*this)._field_l->_field_constant->_method_lshift((*this)._field_r->_field_constant);
			(*this)._method_assign_shift(_382334_d,static_cast<jule::F64>((*this)._field_r->_field_constant->_method_as_f64()));
		}
		goto _match_end_4603736736;
		_case_end_4865944528:;
		if (!((jule::Str(">>", 2)) == _match_expr)) { goto _case_end_4865944640; }
		_case_begin_4865944640:;
		{
			_382334_d->_field_constant=(*this)._field_l->_field_constant;
			(*this)._field_l->_field_constant->_method_rshift((*this)._field_r->_field_constant);
			(*this)._method_assign_shift(_382334_d,static_cast<jule::F64>((*this)._field_r->_field_constant->_method_as_f64()));
		}
		goto _match_end_4603736736;
		_case_end_4865944640:;
		_match_end_4603736736:;
	}
	_382334_d->_field_model=jule::Any(_382334_d->_field_constant);
}



inline void _121dedce0_BinopSolver::_method_post_const(jule::Ref<_121dedce0_Data> _391229_d) {
	if ((!(jule::real(_391229_d)))) {
		return;
	}
	if ((!(_391229_d->_method_is_const()))) {
		return;
	}
	_121dedce0_normalize_bitsize(_391229_d);
}



inline void _121dedce0_BinopSolver::_method_prepare_data(jule::Ref<_121dedce0_Data> _392331_d) {
	if (jule::real(_392331_d) && jule::real(_392331_d->_field_kind->_method_ref())) {
		_392331_d->_field_kind=_392331_d->_field_kind->_method_ref()->_field_elem;
	}
}



inline void _121dedce0_BinopSolver::_method_prepare_eval(void) {
	(*this)._method_prepare_data((*this)._field_r);
	(*this)._method_prepare_data((*this)._field_l);
}



inline void _121dedce0_BinopSolver::_method_check_data(jule::Ref<_121dedce0_Data> _393433_d) {
	jule::Ref<_112446fb0_FnIns> _393513_f = _393433_d->_field_kind->_method_fnc();
	if ((jule::real(_393513_f) && jule::real(_393513_f->_field_decl)) && _393513_f->_field_decl->_method_is_method()) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("invalid_expr_for_binop", 22),jule::Slice<jule::Any>({}));
	}
}



inline void _121dedce0_BinopSolver::_method_check_datas(void) {
	(*this)._method_check_data((*this)._field_l);
	(*this)._method_check_data((*this)._field_r);
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_solve_explicit(jule::Ref<_121dedce0_Data> _394637_l,jule::Ref<_121dedce0_Data> _394651_r) {
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_394637_l,_394651_r);
	(*this)._method_prepare_eval();
	(*this)._method_check_datas();
	jule::Ref<_121dedce0_Data> _395217_d = (*this)._method_eval();
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_394637_l,_394651_r);
	(*this)._method_solve_const(_395217_d);
	(*this)._method_post_const(_395217_d);
	if (jule::real(_395217_d) && (!(_395217_d->_method_is_const()))) {
		_395217_d->_field_model=jule::Any(jule::new_struct<_112673500_BinopExprModel>(new( std::nothrow ) _112673500_BinopExprModel(_394637_l->_field_model,_394651_r->_field_model,(*this)._field_op._field_kind)));
	}
	return _395217_d;
}



inline jule::Ref<_121dedce0_Data> _121dedce0_BinopSolver::_method_solve(jule::Ref<_111612b20_BinopExpr> _397528_op) {
	jule::Ref<_121dedce0_Data> _397617_l = (*this)._field_e->_method_eval_expr_kind(_397528_op->_field_left);
	if ((!(jule::real(_397617_l))) || (!(jule::real(_397617_l->_field_kind)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_121dedce0_Data> _398117_r = (*this)._field_e->_method_eval_expr_kind(_397528_op->_field_right);
	if ((!(jule::real(_398117_r))) || (!(jule::real(_398117_r->_field_kind)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	(*this)._field_op=_397528_op->_field_op;
	jule::Ref<_121dedce0_Data> _398817_d = (*this)._method_solve_explicit(_397617_l,_398117_r);
	if ((jule::real(_398817_d) && _397617_l->_field_is_rune) && _398117_r->_field_is_rune) {
		_398817_d->_field_is_rune=true;
	}
	return _398817_d;
}







std::ostream &operator<<(std::ostream &_Stream, const _121dedce0_BinopSolver &_Src) {
	_Stream << "BinopSolver{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline void _121807de0_RetTypeChecker::_method_prepare_types(void) {
	(*this)._field_types=_121807de0_get_fn_result_types((*this)._field_f);
}



inline void _121807de0_RetTypeChecker::_method_prepare_exprs(jule::Ref<_111612b20_Expr> _121436_e) {
	if ((!(jule::real(_121436_e)))) {
		return;
	}
	{
		auto _match_expr{ _121436_e->_field_kind };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_TupleExpr>>())) { goto _case_end_4855651440; }
		_case_begin_4855651440:;
		{
			jule::Ref<_111612b20_TupleExpr> _122121_tup = _121436_e->_field_kind.operator jule::Ref<_111612b20_TupleExpr>();
			(*this)._field_exprs=_122121_tup->_field_expr;
		}
		goto _match_end_4855649664;
		_case_end_4855651440:;
		_case_begin_4855650304:;
		{
			(*this)._field_exprs=append((*this)._field_exprs,jule::Slice<jule::Any>({_121436_e->_field_kind}));
		}
		goto _match_end_4855649664;
		_case_end_4855650304:;
		_match_end_4855649664:;
	}
}



inline void _121807de0_RetTypeChecker::_method_ret_vars(void) {
	if ((*this)._field_f->_field_decl->_method_is_void()) {
		return;
	}
	(*this)._field_vars=jule::Slice<jule::Ref<_1320e22c0_Var>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>((*this)._field_f->_field_decl->_field_result->_field_idents.len())));
	jule::Ref<_1126288e0_ScopeChecker> _123517_root_scope = (*this)._field_sc->_method_get_root();
	jule::Int _123717_j = 0LL;
	{
		auto __julec_range_expr = (*this)._field_f->_field_decl->_field_result->_field_idents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121807de0_i = 0;
			_111613f20_Token _121807de0_ident = *__julec_range_begin;
			_iter_begin_4855666944:;
			{
				if ((!(_111613f20_is_ignore_ident(_121807de0_ident._field_kind)))) {
					(*this)._field_vars[static_cast<jule::Int>(_121807de0_i)]=_123517_root_scope->_field_table->_field_vars._method_at(_123717_j);
					(_123717_j)++;
				} else {
					(*this)._field_vars[static_cast<jule::Int>(_121807de0_i)]=jule::new_struct<_1320e22c0_Var>(new( std::nothrow ) _1320e22c0_Var(jule::Ref<_1126288e0_Scope>(),_111613f20_Token(),jule::Str("_", 1),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),(*this)._field_types[static_cast<jule::Int>(_121807de0_i)])),jule::Ref<_121dedce0_Value>(),jule::Ref<_112572770_ReferenceStack>(),jule::Slice<jule::Ref<_1320e22c0_Var>>()));
				}
			}
			_iter_next_4855666944:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121807de0_i; _121807de0_ident = *__julec_range_begin; goto _iter_begin_4855666944; }
			_iter_end_4855666944:;
		}
	}
	if (_123717_j == 0LL) {
		(*this)._field_vars=nullptr;
	}
}



inline void _121807de0_RetTypeChecker::_method_check_exprs(void) {
	if ((*this)._field_exprs.len() == 0LL) {
		return;
	}
	jule::Slice<jule::Ref<_121dedce0_Data>> _126117_datas = jule::Slice<jule::Ref<_121dedce0_Data>>::alloc(static_cast<jule::Int>(0LL),static_cast<jule::Int>(static_cast<jule::I64>((*this)._field_exprs.len())));
	jule::Ref<_111612b20_Expr> _126317_e = jule::new_struct<_111612b20_Expr>(new( std::nothrow ) _111612b20_Expr());
	{
		auto __julec_range_expr = (*this)._field_exprs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121807de0_i = 0;
			jule::Any _121807de0_expr = *__julec_range_begin;
			_iter_begin_4855685296:;
			{
				if (_121807de0_i >= (*this)._field_types.len()) {
					goto _iter_end_4855685296;
				}
				jule::Ref<_1217f7750_TypeKind> _127021_t = (*this)._field_types[static_cast<jule::Int>(_121807de0_i)];
				_126317_e->_field_kind=_121807de0_expr;
				jule::Ref<_121dedce0_Data> _127321_d = (*this)._field_sc->_field_s->_method_evalp(_126317_e,(*this)._field_sc,_127021_t);
				if ((!(jule::real(_127321_d)))) {
					goto _iter_next_4855685296;
				}
				_126117_datas=append(_126117_datas,jule::Slice<jule::Ref<_121dedce0_Data>>({_127321_d}));
				if ((!(_127321_d->_field_mutable)) && _1217f7750_is_mut(_127321_d->_field_kind)) {
					(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("ret_with_mut_typed_non_mut", 26),jule::Slice<jule::Any>({}));
					return;
				}
				_121807de0_AssignTypeChecker _128521_ac = _121807de0_AssignTypeChecker((*this)._field_sc->_field_s,_127021_t,_127321_d,(*this)._field_error_token,jule::Bool());
				_128521_ac._method_check();
			}
			_iter_next_4855685296:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121807de0_i; _121807de0_expr = *__julec_range_begin; goto _iter_begin_4855685296; }
			_iter_end_4855685296:;
		}
	}
	if (_126117_datas.len() > 1LL) {
		(*this)._field_model=jule::Any(jule::new_struct<_112673500_TupleExprModel>(new( std::nothrow ) _112673500_TupleExprModel(_126117_datas)));
	} else if (_126117_datas.len() == 1LL) {
		(*this)._field_model=_126117_datas[static_cast<jule::Int>(0LL)]->_field_model;
	}
}



inline jule::Bool _121807de0_RetTypeChecker::_method_check(jule::Ref<_111612b20_Expr> _130428_e) {
	(*this)._method_prepare_types();
	(*this)._method_prepare_exprs(_130428_e);
	(*this)._method_ret_vars();
	jule::I64 _130913_n = (*this)._field_exprs.len();
	if ((_130913_n == 0LL) && (!((*this)._field_f->_field_decl->_method_is_void()))) {
		if ((!((*this)._field_f->_field_decl->_method_any_var()))) {
			(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("require_ret_expr", 16),jule::Slice<jule::Any>({}));
			return false;
		}
		return true;
	}
	if ((_130913_n > 0LL) && (*this)._field_f->_field_decl->_method_is_void()) {
		(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("void_function_ret_expr", 22),jule::Slice<jule::Any>({}));
		return false;
	}
	if (_130913_n > (*this)._field_types.len()) {
		(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("overflow_ret", 12),jule::Slice<jule::Any>({}));
	} else if (_130913_n < (*this)._field_types.len()) {
		(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("missing_multi_ret", 17),jule::Slice<jule::Any>({}));
	}
	(*this)._method_check_exprs();
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _121807de0_RetTypeChecker &_Src) {
	_Stream << "RetTypeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "types:" << _Src._field_types << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}



inline void _121807de0_FnCallArgChecker::_method_push_err_token(_111613f20_Token _69933_token,jule::Str _69947_key,jule::Slice<jule::Any> _69957_args) {
	(*this)._field_e->_field_s->_method_push_err(_69933_token,_69947_key,_69957_args);
}



inline void _121807de0_FnCallArgChecker::_method_push_err(jule::Str _70327_key,jule::Slice<jule::Any> _70337_args) {
	(*this)._method_push_err_token((*this)._field_error_token,_70327_key,_70337_args);
}



inline jule::Slice<jule::Ref<_112446fb0_ParamIns>> _121807de0_FnCallArgChecker::_method_get_params(void) {
	if ((((*this)._field_f->_field_params.len() > 0LL) && jule::real((*this)._field_f->_field_params[static_cast<jule::Int>(0LL)]->_field_decl)) && (*this)._field_f->_field_params[static_cast<jule::Int>(0LL)]->_field_decl->_method_is_self()) {
		return (*this)._field_f->_field_params.slice(static_cast<jule::Int>(1LL));
	}
	return (*this)._field_f->_field_params;
}



inline jule::Bool _121807de0_FnCallArgChecker::_method_check_counts(jule::Slice<jule::Ref<_112446fb0_ParamIns>> _71431_params) {
	jule::Bool _71454_ok = jule::Bool();
	jule::I64 _71517_n = _71431_params.len();
	if ((_71517_n > 0LL) && _71431_params[static_cast<jule::Int>(0LL)]->_field_decl->_method_is_self()) {
		(_71517_n)--;
	}
	jule::I64 _72017_diff = _71517_n - (*this)._field_args.len();
	{
		if (!((_72017_diff == 0LL))) { goto _case_end_4855263520; }
		_case_begin_4855263520:;
		{
			_71454_ok = true;
			return _71454_ok;
		}
		goto _match_end_4855263104;
		_case_end_4855263520:;
		if (!(((_71517_n > 0LL) && _71431_params[static_cast<jule::Int>(_71517_n - 1LL)]->_field_decl->_field_variadic))) { goto _case_end_4855263632; }
		_case_begin_4855263632:;
		{
			_71454_ok = true;
			return _71454_ok;
		}
		goto _match_end_4855263104;
		_case_end_4855263632:;
		if (!(((_72017_diff < 0LL) || (_72017_diff > _71431_params.len())))) { goto _case_end_4855263744; }
		_case_begin_4855263744:;
		{
			(*this)._method_push_err(jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
			_71454_ok = false;
			return _71454_ok;
		}
		goto _match_end_4855263104;
		_case_end_4855263744:;
		_match_end_4855263104:;
	}
	jule::Str _73317_idents = jule::Str("", 0);
	_iter_begin_4855268576:;
	if (!(_72017_diff > 0LL)) { goto _iter_end_4855268576; }
	{
		_73317_idents+=jule::Str(", ", 2) + _71431_params[static_cast<jule::Int>(_71517_n - _72017_diff)]->_field_decl->_field_ident;
	}
	_iter_next_4855268576:;
	(_72017_diff)--;
	goto _iter_begin_4855268576;
	_iter_end_4855268576:;
	_73317_idents=_73317_idents.slice(static_cast<jule::Int>(2LL));
	(*this)._method_push_err(jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(_73317_idents)}));
	_71454_ok = false;
	return _71454_ok;
}



inline jule::Bool _121807de0_FnCallArgChecker::_method_check_arg(jule::Ref<_112446fb0_ParamIns> _74332_p,jule::Ref<_121dedce0_Data> _74350_arg,_111613f20_Token _74366_error_token) {
	jule::Bool _74388_ok = jule::Bool();
	if ((*this)._field_dynamic_annotation) {
		_121807de0_DynamicTypeAnnotation _74521_dta = _121807de0_DynamicTypeAnnotation((*this)._field_e,(*this)._field_f,_74332_p,_74350_arg,_74366_error_token,nullptr);
		_74388_ok=_74521_dta._method_annotate();
		if ((!(_74388_ok))) {
			(*this)._method_push_err_token(_74366_error_token,jule::Str("dynamic_type_annotation_failed", 30),jule::Slice<jule::Any>({}));
			_74388_ok = false;
			return _74388_ok;
		}
	}
	(*this)._field_e->_field_s->_method_check_validity_for_init_expr(_74332_p->_field_decl->_field_mutable,_74332_p->_field_decl->_field_reference,_74332_p->_field_kind,_74350_arg,_74366_error_token);
	(*this)._field_e->_field_s->_method_check_assign_type(_74332_p->_field_kind,_74350_arg,_74366_error_token,false);
	_74388_ok = true;
	return _74388_ok;
}



inline jule::Bool _121807de0_FnCallArgChecker::_method_push(jule::Ref<_112446fb0_ParamIns> _76527_p,jule::Ref<_111612b20_Expr> _76545_arg) {
	jule::Bool _76559_ok = jule::Bool();
	jule::Ref<_121dedce0_Data> _76617_d = jule::new_ref<_121dedce0_Data>();
	if ((!((*this)._field_dynamic_annotation)) && (!(_76527_p->_field_decl->_field_variadic))) {
		jule::Ref<_1217f7750_TypeKind> _76821_old = (*this)._field_e->_field_prefix;
		(*this)._field_e->_field_prefix=_76527_p->_field_kind;
		_76617_d=(*this)._field_e->_method_eval_expr_kind(_76545_arg->_field_kind);
		(*this)._field_e->_field_prefix=_76821_old;
	} else {
		jule::Ref<_1217f7750_TypeKind> _77321_old = (*this)._field_e->_field_prefix;
		jule::drop((*this)._field_e->_field_prefix);
		_76617_d=(*this)._field_e->_method_eval_expr_kind(_76545_arg->_field_kind);
		(*this)._field_e->_field_prefix=_77321_old;
	}
	if ((!(jule::real(_76617_d)))) {
		_76559_ok = false;
		return _76559_ok;
	}
	(*this)._field_arg_models=append((*this)._field_arg_models,jule::Slice<jule::Any>({_76617_d->_field_model}));
	_76559_ok = (*this)._method_check_arg(_76527_p,_76617_d,_76545_arg->_field_token);
	return _76559_ok;
}



inline jule::Bool _121807de0_FnCallArgChecker::_method_push_variadic(jule::Ref<_112446fb0_ParamIns> _78536_p,jule::Int _78554_i) {
	jule::Bool _78564_ok = jule::Bool();
	_78564_ok=true;
	jule::Bool _78717_variadiced = false;
	jule::Bool _78813_more = (_78554_i + 1LL) < (*this)._field_args.len();
	jule::Ref<_112673500_SliceExprModel> _78917_model = jule::new_struct<_112673500_SliceExprModel>(new( std::nothrow ) _112673500_SliceExprModel(_78536_p->_field_kind,jule::Slice<jule::Any>()));
	jule::Ref<_1217f7750_TypeKind> _79317_old = (*this)._field_e->_field_prefix;
	_iter_begin_4855324960:;
	if (!(_78554_i < (*this)._field_args.len())) { goto _iter_end_4855324960; }
	{
		jule::Ref<_111612b20_Expr> _79521_arg = (*this)._field_args[static_cast<jule::Int>(_78554_i)];
		{
			auto _match_expr{ _79521_arg->_field_kind };
			if (!(_match_expr.type_is<jule::Ref<_111612b20_VariadicExpr>>())) { goto _case_end_4855334208; }
			_case_begin_4855334208:;
			{
				(*this)._field_e->_field_prefix=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_1217f7750_Slc>(new( std::nothrow ) _1217f7750_Slc(_78536_p->_field_kind))));
			}
			goto _match_end_4855331648;
			_case_end_4855334208:;
			_case_begin_4855332976:;
			{
				(*this)._field_e->_field_prefix=_78536_p->_field_kind;
			}
			goto _match_end_4855331648;
			_case_end_4855332976:;
			_match_end_4855331648:;
		}
		jule::Ref<_121dedce0_Data> _80521_d = (*this)._field_e->_method_eval_expr_kind(_79521_arg->_field_kind);
		if ((!(jule::real(_80521_d)))) {
			_78564_ok=false;
			goto _iter_next_4855324960;
		}
		if (_80521_d->_field_variadiced) {
			_78717_variadiced=true;
			_80521_d->_field_variadiced=false;
			{
				auto _match_expr{ _80521_d->_field_model };
				if (!(_match_expr.type_is<jule::Ref<_112673500_SliceExprModel>>())) { goto _case_end_4855344352; }
				_case_begin_4855344352:;
				{
					_78917_model=_80521_d->_field_model.operator jule::Ref<_112673500_SliceExprModel>();
					_78917_model->_field_elem_kind=_78536_p->_field_kind;
				}
				goto _match_end_4855342096;
				_case_end_4855344352:;
				_case_begin_4855342896:;
				{
					jule::drop(_78917_model);
					(*this)._field_arg_models=append((*this)._field_arg_models,jule::Slice<jule::Any>({_80521_d->_field_model}));
				}
				goto _match_end_4855342096;
				_case_end_4855342896:;
				_match_end_4855342096:;
			}
		} else {
			_78917_model->_field_elems=append(_78917_model->_field_elems,jule::Slice<jule::Any>({_80521_d->_field_model}));
		}
		_78564_ok=(*this)._method_check_arg(_78536_p,_80521_d,_79521_arg->_field_token) && _78564_ok;
	}
	_iter_next_4855324960:;
	(_78554_i)++;
	goto _iter_begin_4855324960;
	_iter_end_4855324960:;
	(*this)._field_e->_field_prefix=_79317_old;
	if (_78717_variadiced && _78813_more) {
		(*this)._method_push_err(jule::Str("more_args_with_variadiced", 25),jule::Slice<jule::Any>({}));
	}
	if (jule::real(_78917_model)) {
		(*this)._field_arg_models=append((*this)._field_arg_models,jule::Slice<jule::Any>({jule::Any(_78917_model)}));
	}
	_78564_ok = _78564_ok;
	return _78564_ok;
}



inline jule::Bool _121807de0_FnCallArgChecker::_method_check_args(jule::Slice<jule::Ref<_112446fb0_ParamIns>> _84133_params) {
	jule::Bool _84156_ok = jule::Bool();
	_84156_ok=true;
	jule::Int _84317_i = 0LL;
	_julec_label_iter:;
	_iter_begin_4855367952:;
	if (!(_84317_i < _84133_params.len())) { goto _iter_end_4855367952; }
	{
		jule::Ref<_112446fb0_ParamIns> _84621_p = _84133_params[static_cast<jule::Int>(_84317_i)];
		{
			if (!((_84621_p->_field_decl->_method_is_self()))) { goto _case_end_4855373360; }
			goto _match_end_4855371088;
			_case_end_4855373360:;
			if (!((_84621_p->_field_decl->_field_variadic))) { goto _case_end_4855372544; }
			_case_begin_4855372544:;
			{
				_84156_ok=(*this)._method_push_variadic(_84621_p,_84317_i) && _84156_ok;
				goto _iter_end_4855367952;
			}
			goto _match_end_4855371088;
			_case_end_4855372544:;
			if (!(((*this)._field_args.len() <= _84317_i))) { goto _case_end_4855372656; }
			_case_begin_4855372656:;
			{
				_84156_ok=false;
				goto _iter_end_4855367952;
			}
			goto _match_end_4855371088;
			_case_end_4855372656:;
			_case_begin_4855371344:;
			{
				_84156_ok=(*this)._method_push(_84621_p,(*this)._field_args[static_cast<jule::Int>(_84317_i)]) && _84156_ok;
			}
			goto _match_end_4855371088;
			_case_end_4855371344:;
			_match_end_4855371088:;
		}
		(_84317_i)++;
	}
	_iter_next_4855367952:;
	goto _iter_begin_4855367952;
	_iter_end_4855367952:;
	_84156_ok = _84156_ok;
	return _84156_ok;
}



inline jule::Bool _121807de0_FnCallArgChecker::_method_check_dynamic_type_annotation(void) {
	jule::Bool _86850_ok = jule::Bool();
	{
		auto __julec_range_expr = (*this)._field_f->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1217f7750_TypeKind> _121807de0_g = *__julec_range_begin;
			_iter_begin_4855383104:;
			{
				if ((!(jule::real(_121807de0_g)))) {
					(*this)._method_push_err(jule::Str("dynamic_type_annotation_failed", 30),jule::Slice<jule::Any>({}));
					_86850_ok = false;
					return _86850_ok;
				}
			}
			_iter_next_4855383104:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _121807de0_g = *__julec_range_begin; goto _iter_begin_4855383104; }
			_iter_end_4855383104:;
		}
	}
	_86850_ok = true;
	return _86850_ok;
}



inline jule::Bool _121807de0_FnCallArgChecker::_method_check(void) {
	jule::Bool _87826_ok = jule::Bool();
	jule::Slice<jule::Ref<_112446fb0_ParamIns>> _87917_params = (*this)._method_get_params();
	_87826_ok=(*this)._method_check_counts(_87917_params);
	if ((!(_87826_ok))) {
		_87826_ok = false;
		return _87826_ok;
	}
	_87826_ok=(*this)._method_check_args(_87917_params);
	if (_87826_ok && (*this)._field_dynamic_annotation) {
		_87826_ok=(*this)._method_check_dynamic_type_annotation();
	}
	_87826_ok = _87826_ok;
	return _87826_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _121807de0_FnCallArgChecker &_Src) {
	_Stream << "FnCallArgChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "dynamic_annotation:" << _Src._field_dynamic_annotation << ", ";
	_Stream << "arg_models:" << _Src._field_arg_models;
	_Stream << "}";
	return _Stream;
}



inline void _121807de0_AssignTypeChecker::_method_push_err(jule::Str _44127_key,jule::Slice<jule::Any> _44137_args) {
	(*this)._field_s->_method_push_err((*this)._field_error_token,_44127_key,_44137_args);
}



inline jule::Bool _121807de0_AssignTypeChecker::_method_check_validity(void) {
	jule::Bool _44617_valid = true;
	{
		if (!((jule::real((*this)._field_d->_field_kind->_method_fnc())))) { goto _case_end_4855040032; }
		_case_begin_4855040032:;
		{
			jule::Ref<_112446fb0_FnIns> _45017_f = (*this)._field_d->_field_kind->_method_fnc();
			{
				if (!((_45017_f->_method_is_builtin()))) { goto _case_end_4855044944; }
				_case_begin_4855044944:;
				{
					(*this)._method_push_err(jule::Str("builtin_as_anonymous_fn", 23),jule::Slice<jule::Any>({}));
					_44617_valid=false;
				}
				goto _match_end_4855044624;
				_case_end_4855044944:;
				if (!((_45017_f->_field_decl->_method_is_method()))) { goto _case_end_4855045056; }
				_case_begin_4855045056:;
				{
					(*this)._method_push_err(jule::Str("method_as_anonymous_fn", 22),jule::Slice<jule::Any>({}));
					_44617_valid=false;
				}
				goto _match_end_4855044624;
				_case_end_4855045056:;
				if (!((_45017_f->_field_decl->_field_generics.len() > 0LL))) { goto _case_end_4855045168; }
				_case_begin_4855045168:;
				{
					(*this)._method_push_err(jule::Str("genericed_fn_as_anonymous_fn", 28),jule::Slice<jule::Any>({}));
					_44617_valid=false;
				}
				goto _match_end_4855044624;
				_case_end_4855045168:;
				_match_end_4855044624:;
			}
		}
		goto _match_end_4855039776;
		_case_end_4855040032:;
		if (!((jule::real((*this)._field_d->_field_kind->_method_tup())))) { goto _case_end_4855040144; }
		_case_begin_4855040144:;
		{
			(*this)._method_push_err(jule::Str("tuple_assign_to_single", 22),jule::Slice<jule::Any>({}));
			_44617_valid=false;
		}
		goto _match_end_4855039776;
		_case_end_4855040144:;
		_match_end_4855039776:;
	}
	return _44617_valid;
}



inline jule::Bool _121807de0_AssignTypeChecker::_method_check_const(void) {
	if ((((!((*this)._field_d->_method_is_const())) || (!(jule::real((*this)._field_dest->_method_prim())))) || (!(jule::real((*this)._field_d->_field_kind->_method_prim())))) || (!(_1132426f0_is_num((*this)._field_d->_field_kind->_method_prim()->_field_kind)))) {
		return false;
	}
	jule::Str _48213_kind = (*this)._field_dest->_method_prim()->_field_kind;
	{
		if (!((_1132426f0_is_float(_48213_kind)))) { goto _case_end_4855068384; }
		_case_begin_4855068384:;
		{
			if ((!(_121807de0_float_assignable(_48213_kind,(*this)._field_d)))) {
				(*this)._method_push_err(jule::Str("overflow_limits", 15),jule::Slice<jule::Any>({}));
				return false;
			}
		}
		goto _match_end_4855067136;
		_case_end_4855068384:;
		if (!((_1132426f0_is_int(_48213_kind)))) { goto _case_end_4855068496; }
		_case_begin_4855068496:;
		{
			if ((!(_121807de0_int_assignable(_48213_kind,(*this)._field_d)))) {
				(*this)._method_push_err(jule::Str("overflow_limits", 15),jule::Slice<jule::Any>({}));
				return false;
			}
		}
		goto _match_end_4855067136;
		_case_end_4855068496:;
		_case_begin_4855067296:;
		{
			return false;
		}
		goto _match_end_4855067136;
		_case_end_4855067296:;
		_match_end_4855067136:;
	}
	return true;
}



inline jule::Bool _121807de0_AssignTypeChecker::_method_check(void) {
	{
		if (!(((!(jule::real((*this)._field_d)))))) { goto _case_end_4855080144; }
		_case_begin_4855080144:;
		{
			return false;
		}
		goto _match_end_4855077600;
		_case_end_4855080144:;
		if (!(((!((*this)._method_check_validity()))))) { goto _case_end_4855078160; }
		_case_begin_4855078160:;
		{
			return false;
		}
		goto _match_end_4855077600;
		_case_end_4855078160:;
		if (!(((*this)._field_d->_field_variadiced))) { goto _case_end_4855078272; }
		_case_begin_4855078272:;
		{
			(*this)._method_push_err(jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any((*this)._field_dest->_method_to_str()),jule::Any(((*this)._field_d->_field_kind->_method_to_str() + jule::Str("...", 3)))}));
			return false;
		}
		goto _match_end_4855077600;
		_case_end_4855078272:;
		if (!(((*this)._method_check_const()))) { goto _case_end_4855078384; }
		_case_begin_4855078384:;
		{
			return true;
		}
		goto _match_end_4855077600;
		_case_end_4855078384:;
		_case_begin_4855077856:;
		{
			return (*this)._field_s->_method_check_type_compatibility((*this)._field_dest,(*this)._field_d->_field_kind,(*this)._field_error_token,(*this)._field_deref);
		}
		goto _match_end_4855077600;
		_case_end_4855077856:;
		_match_end_4855077600:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _121807de0_AssignTypeChecker &_Src) {
	_Stream << "AssignTypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "deref:" << _Src._field_deref;
	_Stream << "}";
	return _Stream;
}



inline void _121807de0_TypeCompatibilityChecker::_method_push_err(jule::Str _15127_key,jule::Slice<jule::Any> _15137_args) {
	(*this)._field_s->_method_push_err((*this)._field_error_token,_15127_key,_15137_args);
}



inline jule::Bool _121807de0_TypeCompatibilityChecker::_method_check_trait(void) {
	jule::Bool _15532_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_15532_ok = true;
		return _15532_ok;
	}
	jule::Ref<_11209e2e0_Trait> _16013_trt = (*this)._field_dest->_method_trt();
	jule::Bool _16117_ref = false;
	{
		if (!((jule::real((*this)._field_src->_method_ref())))) { goto _case_end_4641114768; }
		_case_begin_4641114768:;
		{
			_16117_ref=true;
			(*this)._field_src=(*this)._field_src->_method_ref()->_field_elem;
			if (jule::real((*this)._field_src->_method_strct())) {
				_15532_ok = false;
				return _15532_ok;
			}
			goto _case_begin_4641114880;
		}
		goto _match_end_4641113360;
		_case_end_4641114768:;
		if (!((jule::real((*this)._field_src->_method_strct())))) { goto _case_end_4641114880; }
		_case_begin_4641114880:;
		{
			jule::Ref<_11209db80_StructIns> _17217_s = (*this)._field_src->_method_strct();
			if ((!(_17217_s->_field_decl->_method_is_implements(_16013_trt)))) {
				_15532_ok = false;
				return _15532_ok;
			}
			if (_121807de0_trait_has_reference_receiver(_16013_trt) && (!(_16117_ref))) {
				(*this)._method_push_err(jule::Str("trait_has_reference_parametered_function", 40),jule::Slice<jule::Any>({}));
				_15532_ok = false;
				return _15532_ok;
			}
			_15532_ok = true;
			return _15532_ok;
		}
		goto _match_end_4641113360;
		_case_end_4641114880:;
		if (!((jule::real((*this)._field_src->_method_trt())))) { goto _case_end_4641115792; }
		_case_begin_4641115792:;
		{
			_15532_ok = _16013_trt == (*this)._field_src->_method_trt();
			return _15532_ok;
		}
		goto _match_end_4641113360;
		_case_end_4641115792:;
		_case_begin_4641113808:;
		{
			_15532_ok = false;
			return _15532_ok;
		}
		goto _match_end_4641113360;
		_case_end_4641113808:;
		_match_end_4641113360:;
	}
}



inline jule::Bool _121807de0_TypeCompatibilityChecker::_method_check_ref(void) {
	jule::Bool _19230_ok = jule::Bool();
	if ((*this)._field_dest->_method_to_str() == (*this)._field_src->_method_to_str()) {
		_19230_ok = true;
		return _19230_ok;
	} else if ((!((*this)._field_deref))) {
		_19230_ok = false;
		return _19230_ok;
	} else if ((!(jule::real((*this)._field_src->_method_ref())))) {
		(*this)._field_dest=(*this)._field_dest->_method_ref()->_field_elem;
		_19230_ok = (*this)._method_check();
		return _19230_ok;
	}
	(*this)._field_src=(*this)._field_src->_method_ref()->_field_elem;
	_19230_ok = (*this)._method_check();
	return _19230_ok;
}



inline jule::Bool _121807de0_TypeCompatibilityChecker::_method_check_ptr(void) {
	jule::Bool _20630_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_20630_ok = true;
		return _20630_ok;
	}
	jule::Ref<_1217f7750_Ptr> _21117_src = (*this)._field_src->_method_ptr();
	if ((!(jule::real(_21117_src)))) {
		_20630_ok = false;
		return _20630_ok;
	}
	jule::Ref<_1217f7750_Ptr> _21617_dest = (*this)._field_dest->_method_ptr();
	if (_21617_dest->_method_is_unsafe()) {
		_20630_ok = true;
		return _20630_ok;
	}
	_121807de0_TypeCompatibilityChecker _22217_sub = _121807de0_TypeCompatibilityChecker((*this)._field_s,_21617_dest->_field_elem,_21117_src->_field_elem,(*this)._field_error_token,jule::Bool(),true,true);
	_20630_ok = _22217_sub._method_check();
	return _20630_ok;
}



inline jule::Bool _121807de0_TypeCompatibilityChecker::_method_check_slc(void) {
	jule::Bool _23330_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_23330_ok = true;
		return _23330_ok;
	}
	jule::Ref<_1217f7750_Slc> _23817_src = (*this)._field_src->_method_slc();
	if ((!(jule::real(_23817_src)))) {
		_23330_ok = false;
		return _23330_ok;
	}
	jule::Ref<_1217f7750_Slc> _24217_dest = (*this)._field_dest->_method_slc();
	_121807de0_TypeCompatibilityChecker _24417_sub = _121807de0_TypeCompatibilityChecker((*this)._field_s,_24217_dest->_field_elem,_23817_src->_field_elem,(*this)._field_error_token,jule::Bool(),true,true);
	_23330_ok = _24417_sub._method_check();
	return _23330_ok;
}



inline jule::Bool _121807de0_TypeCompatibilityChecker::_method_check_arr(void) {
	jule::Bool _25530_ok = jule::Bool();
	jule::Ref<_1217f7750_Arr> _25617_src = (*this)._field_src->_method_arr();
	if ((!(jule::real(_25617_src)))) {
		_25530_ok = false;
		return _25530_ok;
	}
	jule::Ref<_1217f7750_Arr> _26017_dest = (*this)._field_dest->_method_arr();
	if (_26017_dest->_field_n != _25617_src->_field_n) {
		_25530_ok = false;
		return _25530_ok;
	}
	_121807de0_TypeCompatibilityChecker _26517_sub = _121807de0_TypeCompatibilityChecker((*this)._field_s,_26017_dest->_field_elem,_25617_src->_field_elem,(*this)._field_error_token,jule::Bool(),true,true);
	_25530_ok = _26517_sub._method_check();
	return _25530_ok;
}



inline jule::Bool _121807de0_TypeCompatibilityChecker::_method_check_map(void) {
	jule::Bool _27630_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_27630_ok = true;
		return _27630_ok;
	}
	jule::Ref<_1217f7750_Map> _28117_src = (*this)._field_src->_method_map();
	if ((!(jule::real(_28117_src)))) {
		_27630_ok = false;
		return _27630_ok;
	}
	jule::Ref<_1217f7750_Map> _28617_dest = (*this)._field_dest->_method_map();
	_121807de0_TypeCompatibilityChecker _28817_sub = _121807de0_TypeCompatibilityChecker((*this)._field_s,_28617_dest->_field_key,_28117_src->_field_key,(*this)._field_error_token,jule::Bool(),jule::Bool(),true);
	if ((!(_28817_sub._method_check()))) {
		_27630_ok = false;
		return _27630_ok;
	}
	_28817_sub._field_src=_28117_src->_field_val;
	_28817_sub._field_dest=_28617_dest->_field_val;
	_27630_ok = _28817_sub._method_check();
	return _27630_ok;
}



inline jule::Bool _121807de0_TypeCompatibilityChecker::_method_check_struct(void) {
	jule::Bool _30433_ok = jule::Bool();
	jule::Ref<_11209db80_StructIns> _30517_src = (*this)._field_src->_method_strct();
	if ((!(jule::real(_30517_src)))) {
		_30433_ok = false;
		return _30433_ok;
	}
	jule::Ref<_11209db80_StructIns> _30917_dest = (*this)._field_dest->_method_strct();
	{
		if (!(((_30917_dest->_field_decl).alloc != (_30517_src->_field_decl).alloc))) { goto _case_end_5135398784; }
		_case_begin_5135398784:;
		{
			_30433_ok = false;
			return _30433_ok;
		}
		goto _match_end_5135397664;
		_case_end_5135398784:;
		if (!((_30917_dest->_field_generics.len() == 0LL))) { goto _case_end_5135491520; }
		_case_begin_5135491520:;
		{
			_30433_ok = true;
			return _30433_ok;
		}
		goto _match_end_5135397664;
		_case_end_5135491520:;
		_match_end_5135397664:;
	}
	{
		auto __julec_range_expr = _30917_dest->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121807de0_i = 0;
			jule::Ref<_1217f7750_TypeKind> _121807de0_dg = *__julec_range_begin;
			_iter_begin_5135566144:;
			{
				jule::Ref<_1217f7750_TypeKind> _31921_sg = _30517_src->_field_generics[static_cast<jule::Int>(_121807de0_i)];
				_121807de0_TypeCompatibilityChecker _32021_sub = _121807de0_TypeCompatibilityChecker((*this)._field_s,_121807de0_dg,_31921_sg,(*this)._field_error_token,jule::Bool(),jule::Bool(),jule::Bool());
				if ((!(_32021_sub._method_check()))) {
					_30433_ok = false;
					return _30433_ok;
				}
			}
			_iter_next_5135566144:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121807de0_i; _121807de0_dg = *__julec_range_begin; goto _iter_begin_5135566144; }
			_iter_end_5135566144:;
		}
	}
	_30433_ok = true;
	return _30433_ok;
}



inline jule::Bool _121807de0_TypeCompatibilityChecker::_method_check_fn(void) {
	jule::Bool _33329_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_33329_ok = true;
		return _33329_ok;
	}
	jule::Ref<_112446fb0_FnIns> _33817_src = (*this)._field_src->_method_fnc();
	if ((!(jule::real(_33817_src)))) {
		_33329_ok = false;
		return _33329_ok;
	}
	jule::Ref<_112446fb0_FnIns> _34317_dest = (*this)._field_dest->_method_fnc();
	if (jule::real(_33817_src->_field_result) != jule::real(_34317_dest->_field_result)) {
		_33329_ok = false;
		return _33329_ok;
	}
	if (_33817_src->_field_params.len() != _34317_dest->_field_params.len()) {
		_33329_ok = false;
		return _33329_ok;
	}
	{
		auto __julec_range_expr = _33817_src->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121807de0_i = 0;
			_iter_begin_5135546944:;
			{
				jule::Ref<_112446fb0_ParamIns> _35221_srcp = _33817_src->_field_params[static_cast<jule::Int>(_121807de0_i)];
				jule::Ref<_112446fb0_ParamIns> _35321_destp = _34317_dest->_field_params[static_cast<jule::Int>(_121807de0_i)];
				if (jule::real(_35221_srcp) != jule::real(_35321_destp)) {
					_33329_ok = false;
					return _33329_ok;
				}
				_121807de0_TypeCompatibilityChecker _35821_sub = _121807de0_TypeCompatibilityChecker((*this)._field_s,_35321_destp->_field_kind,_35221_srcp->_field_kind,(*this)._field_error_token,jule::Bool(),jule::Bool(),jule::Bool());
				if ((!(_35821_sub._method_check()))) {
					_33329_ok = false;
					return _33329_ok;
				}
			}
			_iter_next_5135546944:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121807de0_i; goto _iter_begin_5135546944; }
			_iter_end_5135546944:;
		}
	}
	if (jule::real(_33817_src->_field_result)) {
		_121807de0_TypeCompatibilityChecker _37021_sub = _121807de0_TypeCompatibilityChecker((*this)._field_s,_34317_dest->_field_result,_33817_src->_field_result,(*this)._field_error_token,jule::Bool(),jule::Bool(),jule::Bool());
		if ((!(_37021_sub._method_check()))) {
			_33329_ok = false;
			return _33329_ok;
		}
	}
	_33329_ok = true;
	return _33329_ok;
}



inline jule::Bool _121807de0_TypeCompatibilityChecker::_method_check_enum(void) {
	jule::Bool _38431_ok = jule::Bool();
	jule::Ref<_11261eaf0_Enum> _38513_r = (*this)._field_src->_method_enm();
	if ((!(jule::real(_38513_r)))) {
		_38431_ok = false;
		return _38431_ok;
	}
	_38431_ok = ((*this)._field_dest->_method_enm()).alloc == (_38513_r).alloc;
	return _38431_ok;
}



inline jule::Bool _121807de0_TypeCompatibilityChecker::_method_check(void) {
	jule::Bool _39226_ok = jule::Bool();
	if ((!(jule::real((*this)._field_src)))) {
		_39226_ok = false;
		return _39226_ok;
	}
	if (jule::real((*this)._field_dest->_method_ref())) {
		_39226_ok = (*this)._method_check_ref();
		return _39226_ok;
	}
	if ((!((*this)._field_sub_check)) && jule::real((*this)._field_src->_method_ref())) {
		(*this)._field_src=(*this)._field_src->_method_ref()->_field_elem;
	}
	{
		if (!((jule::real((*this)._field_dest->_method_trt())))) { goto _case_end_4855007248; }
		_case_begin_4855007248:;
		{
			_39226_ok = (*this)._method_check_trait();
			return _39226_ok;
		}
		goto _match_end_5135527200;
		_case_end_4855007248:;
		if (!((jule::real((*this)._field_dest->_method_ptr())))) { goto _case_end_4855007360; }
		_case_begin_4855007360:;
		{
			_39226_ok = (*this)._method_check_ptr();
			return _39226_ok;
		}
		goto _match_end_5135527200;
		_case_end_4855007360:;
		if (!((jule::real((*this)._field_dest->_method_slc())))) { goto _case_end_4855007472; }
		_case_begin_4855007472:;
		{
			_39226_ok = (*this)._method_check_slc();
			return _39226_ok;
		}
		goto _match_end_5135527200;
		_case_end_4855007472:;
		if (!((jule::real((*this)._field_dest->_method_arr())))) { goto _case_end_4855007584; }
		_case_begin_4855007584:;
		{
			_39226_ok = (*this)._method_check_arr();
			return _39226_ok;
		}
		goto _match_end_5135527200;
		_case_end_4855007584:;
		if (!((jule::real((*this)._field_dest->_method_map())))) { goto _case_end_4855007696; }
		_case_begin_4855007696:;
		{
			_39226_ok = (*this)._method_check_map();
			return _39226_ok;
		}
		goto _match_end_5135527200;
		_case_end_4855007696:;
		if (!((jule::real((*this)._field_dest->_method_enm())))) { goto _case_end_4855007808; }
		_case_begin_4855007808:;
		{
			_39226_ok = (*this)._method_check_enum();
			return _39226_ok;
		}
		goto _match_end_5135527200;
		_case_end_4855007808:;
		if (!((jule::real((*this)._field_dest->_method_strct())))) { goto _case_end_4855007920; }
		_case_begin_4855007920:;
		{
			_39226_ok = (*this)._method_check_struct();
			return _39226_ok;
		}
		goto _match_end_5135527200;
		_case_end_4855007920:;
		if (!((jule::real((*this)._field_dest->_method_fnc())))) { goto _case_end_4855008032; }
		_case_begin_4855008032:;
		{
			_39226_ok = (*this)._method_check_fn();
			return _39226_ok;
		}
		goto _match_end_5135527200;
		_case_end_4855008032:;
		_match_end_5135527200:;
	}
	jule::Str _41613_dest = (*this)._field_dest->_method_to_str();
	if ((!((*this)._field_ignore_any)) || (_41613_dest != jule::Str("any", 3))) {
		if (_1131f8900_types_are_compatible(_41613_dest,(*this)._field_src->_method_to_str())) {
			_39226_ok = true;
			return _39226_ok;
		}
	}
	if (_1217f7750_is_nil_compatible((*this)._field_dest)) {
		_39226_ok = (*this)._field_src->_method_is_nil();
		return _39226_ok;
	}
	_39226_ok = false;
	return _39226_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _121807de0_TypeCompatibilityChecker &_Src) {
	_Stream << "TypeCompatibilityChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "src:" << _Src._field_src << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "deref:" << _Src._field_deref << ", ";
	_Stream << "ignore_any:" << _Src._field_ignore_any << ", ";
	_Stream << "sub_check:" << _Src._field_sub_check;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1320e22c0_Var::_method_is_initialized(void) {
	return jule::real((*this)._field_value);
}



inline jule::Bool _1320e22c0_Var::_method_is_type_inferred(void) {
	return (!(jule::real((*this)._field_kind))) || (!(jule::real((*this)._field_kind->_field_decl)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1320e22c0_Var &_Src) {
	_Stream << "Var{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "value:" << _Src._field_value << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "depends:" << _Src._field_depends;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_11265fb90_ImportInfo> _11265fb90_ImportInfo::_method_find_package(jule::Str ) {
	return jule::new_ref<_11265fb90_ImportInfo>();
}



inline jule::Ref<_11265fb90_ImportInfo> _11265fb90_ImportInfo::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)> ) {
	return jule::new_ref<_11265fb90_ImportInfo>();
}



inline jule::Ref<_1320e22c0_Var> _11265fb90_ImportInfo::_method_find_var(jule::Str _14431_ident,jule::Bool _14443_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_14431_ident)))) {
		return jule::new_ref<_1320e22c0_Var>();
	}
	return _11265fb90_find_var_in_package((*this)._field_package->_field_files,_14431_ident,false);
}



inline jule::Ref<_1217f7750_TypeAlias> _11265fb90_ImportInfo::_method_find_type_alias(jule::Str _15738_ident,jule::Bool _15750_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_15738_ident)))) {
		return jule::new_ref<_1217f7750_TypeAlias>();
	}
	return _11265fb90_find_type_alias_in_package((*this)._field_package->_field_files,_15738_ident,false);
}



inline jule::Ref<_11209db80_Struct> _11265fb90_ImportInfo::_method_find_struct(jule::Str _17034_ident,jule::Bool _17046_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_17034_ident)))) {
		return jule::new_ref<_11209db80_Struct>();
	}
	return _11265fb90_find_struct_in_package((*this)._field_package->_field_files,_17034_ident,false);
}



inline jule::Ref<_112446fb0_Fn> _11265fb90_ImportInfo::_method_find_fn(jule::Str _18330_ident,jule::Bool _18342_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_18330_ident)))) {
		return jule::new_ref<_112446fb0_Fn>();
	}
	return _11265fb90_find_fn_in_package((*this)._field_package->_field_files,_18330_ident,false);
}



inline jule::Ref<_11209e2e0_Trait> _11265fb90_ImportInfo::_method_find_trait(jule::Str _19533_ident) {
	if ((!((*this)._method_is_lookupable(_19533_ident)))) {
		return jule::new_ref<_11209e2e0_Trait>();
	}
	return _11265fb90_find_trait_in_package((*this)._field_package->_field_files,_19533_ident);
}



inline jule::Ref<_11261eaf0_Enum> _11265fb90_ImportInfo::_method_find_enum(jule::Str _20732_ident) {
	if ((!((*this)._method_is_lookupable(_20732_ident)))) {
		return jule::new_ref<_11261eaf0_Enum>();
	}
	return _11265fb90_find_enum_in_package((*this)._field_package->_field_files,_20732_ident);
}



inline jule::Bool _11265fb90_ImportInfo::_method_is_lookupable(jule::Str _21728_ident) {
	if ((*this)._field_cpp_linked) {
		return false;
	}
	if ((!((*this)._field_import_all))) {
		if ((*this)._method_exist_ident(jule::Str("self", 4))) {
			return true;
		}
		if ((*this)._field_selected.len() > 0LL) {
			if ((!((*this)._method_exist_ident(_21728_ident)))) {
				return false;
			}
		}
	}
	return true;
}



inline jule::Bool _11265fb90_ImportInfo::_method_exist_ident(jule::Str _23726_ident) {
	{
		auto __julec_range_expr = (*this)._field_selected;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_111613f20_Token _11265fb90_sident = *__julec_range_begin;
			_iter_begin_4639572480:;
			{
				if (_11265fb90_sident._field_kind == _23726_ident) {
					return true;
				}
			}
			_iter_next_4639572480:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11265fb90_sident = *__julec_range_begin; goto _iter_begin_4639572480; }
			_iter_end_4639572480:;
		}
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _11265fb90_ImportInfo &_Src) {
	_Stream << "ImportInfo{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "duplicate:" << _Src._field_duplicate << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std << ", ";
	_Stream << "import_all:" << _Src._field_import_all << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "package:" << _Src._field_package;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_ScopeLabel &_Src) {
	_Stream << "ScopeLabel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _112626410_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base._field_id != 0LLU;
}



inline jule::Bool _112626410_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base._field_id == 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _112626410_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _11261eaf0_Enum::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _11261eaf0_Enum::_method_equals(jule::Ref<_1217f7750_TypeKind> _3521_other) {
	jule::Ref<_11261eaf0_Enum> _3613_enm = (_3521_other).alloc->_method_enm();
	if ((!(jule::real(_3613_enm)))) {
		return false;
	}
	return (&((*this))) == (_3613_enm).alloc;
}



inline jule::Ref<_11261eaf0_EnumItem> _11261eaf0_Enum::_method_find_item(jule::Str _4732_ident) {
	{
		auto __julec_range_expr = (*this)._field_items;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11261eaf0_EnumItem> _11261eaf0_item = *__julec_range_begin;
			_iter_begin_4638317920:;
			{
				if (_11261eaf0_item->_field_ident == _4732_ident) {
					return _11261eaf0_item;
				}
			}
			_iter_next_4638317920:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11261eaf0_item = *__julec_range_begin; goto _iter_begin_4638317920; }
			_iter_end_4638317920:;
		}
	}
	return jule::new_ref<_11261eaf0_EnumItem>();
}







std::ostream &operator<<(std::ostream &_Stream, const _11261eaf0_Enum &_Src) {
	_Stream << "Enum{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc:" << _Src._field_doc;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _11261eaf0_EnumItem::_method_auto_expr(void) {
	return (!(jule::real((*this)._field_value)));
}







std::ostream &operator<<(std::ostream &_Stream, const _11261eaf0_EnumItem &_Src) {
	_Stream << "EnumItem{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _11209e2e0_Trait::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _11209e2e0_Trait::_method_equals(jule::Ref<_1217f7750_TypeKind> _2421_other) {
	jule::Ref<_11209e2e0_Trait> _2513_trt = (_2421_other).alloc->_method_trt();
	if ((!(jule::real(_2513_trt)))) {
		return false;
	}
	return (&((*this))) == (_2513_trt).alloc;
}



inline jule::Bool _11209e2e0_Trait::_method_is_builtin(void) {
	return (*this)._field_token._field_id == 0LLU;
}



inline jule::Ref<_112446fb0_Fn> _11209e2e0_Trait::_method_find_method(jule::Str _3934_ident) {
	{
		auto __julec_range_expr = (*this)._field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_Fn> _11209e2e0_f = *__julec_range_begin;
			_iter_begin_4638302144:;
			{
				if (_11209e2e0_f->_field_ident == _3934_ident) {
					return _11209e2e0_f;
				}
			}
			_iter_next_4638302144:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11209e2e0_f = *__julec_range_begin; goto _iter_begin_4638302144; }
			_iter_end_4638302144:;
		}
	}
	return jule::new_ref<_112446fb0_Fn>();
}







std::ostream &operator<<(std::ostream &_Stream, const _11209e2e0_Trait &_Src) {
	_Stream << "Trait{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "implemented:" << _Src._field_implemented;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _112572770_Pass &_Src) {
	_Stream << "Pass{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _112446fb0_Fn::_method_is_void(void) {
	return (!(jule::real((*this)._field_result)));
}



inline jule::Bool _112446fb0_Fn::_method_is_method(void) {
	return jule::real((*this)._field_owner);
}



inline jule::Bool _112446fb0_Fn::_method_is_entry_point(void) {
	return (*this)._field_ident == jule::Str("main", 4);
}



inline jule::Bool _112446fb0_Fn::_method_is_init(void) {
	return (*this)._field_ident == jule::Str("init", 4);
}



inline jule::Bool _112446fb0_Fn::_method_is_anon(void) {
	return _111613f20_is_anon_ident((*this)._field_ident);
}



inline jule::Bool _112446fb0_Fn::_method_any_var(void) {
	return jule::real((*this)._field_result) && ((*this)._field_result->_field_idents.len() > 0LL);
}



inline jule::Bool _112446fb0_Fn::_method_parameters_uses_generics(void) {
	if ((*this)._field_generics.len() == 0LL) {
		return false;
	}
	{
		auto __julec_range_expr = (*this)._field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_Param> _112446fb0_p = *__julec_range_begin;
			_iter_begin_4637738192:;
			{
				if (_112446fb0_p->_method_is_self()) {
					goto _iter_next_4637738192;
				}
				jule::Str _9317_pk = _112446fb0_p->_field_kind->_field_kind->_method_to_str();
				{
					auto __julec_range_expr = (*this)._field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_111612b20_GenericDecl> _112446fb0_g = *__julec_range_begin;
						_iter_begin_4637744112:;
						{
							if (_9317_pk.find(_112446fb0_g->_field_ident) != -1LL) {
								return true;
							}
						}
						_iter_next_4637744112:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _112446fb0_g = *__julec_range_begin; goto _iter_begin_4637744112; }
						_iter_end_4637744112:;
					}
				}
			}
			_iter_next_4637738192:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _112446fb0_p = *__julec_range_begin; goto _iter_begin_4637738192; }
			_iter_end_4637738192:;
		}
	}
	return false;
}



inline jule::Bool _112446fb0_Fn::_method_result_uses_generics(void) {
	if ((*this)._method_is_void()) {
		return false;
	} else if ((!(jule::real((*this)._field_result->_field_kind))) || (!(jule::real((*this)._field_result->_field_kind->_field_kind)))) {
		return false;
	}
	jule::Str _11213_rk = (*this)._field_result->_field_kind->_field_kind->_method_to_str();
	{
		auto __julec_range_expr = (*this)._field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_111612b20_GenericDecl> _112446fb0_g = *__julec_range_begin;
			_iter_begin_4637756960:;
			{
				if (_11213_rk.find(_112446fb0_g->_field_ident) != -1LL) {
					return true;
				}
			}
			_iter_next_4637756960:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _112446fb0_g = *__julec_range_begin; goto _iter_begin_4637756960; }
			_iter_end_4637756960:;
		}
	}
	return false;
}



inline jule::Ref<_112446fb0_FnIns> _112446fb0_Fn::_method_instance_force(void) {
	jule::Ref<_112446fb0_FnIns> _12417_ins = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),this->self,jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>(),jule::Ref<_1217f7750_TypeKind>(),jule::new_struct<_1126288e0_Scope>(new( std::nothrow ) _1126288e0_Scope()),_112572770_new_reference_stack(),jule::Ref<_112572770_ReferenceStack>(),jule::Fn<jule::Ref<_121dedce0_Data>(jule::Ref<_121dedce0_Eval>,jule::Ref<_111612b20_FnCallExpr>,jule::Ref<_121dedce0_Data>)>(),jule::Bool(),jule::Bool()));
	if (this->self->_method_is_init()) {
		_12417_ins->_field_refers=_112572770_new_reference_stack();
	}
	_12417_ins->_field_params=jule::Slice<jule::Ref<_112446fb0_ParamIns>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(this->self->_field_params.len())));
	{
		auto __julec_range_expr = this->self->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112446fb0_i = 0;
			jule::Ref<_112446fb0_Param> _112446fb0_p = *__julec_range_begin;
			_iter_begin_4637769392:;
			{
				_12417_ins->_field_params[static_cast<jule::Int>(_112446fb0_i)]=_112446fb0_p->_method_instance();
			}
			_iter_next_4637769392:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112446fb0_i; _112446fb0_p = *__julec_range_begin; goto _iter_begin_4637769392; }
			_iter_end_4637769392:;
		}
	}
	if (jule::real(_12417_ins->_field_decl->_field_result)) {
		_12417_ins->_field_result=_12417_ins->_field_decl->_field_result->_field_kind->_field_kind;
	}
	return _12417_ins;
}



inline jule::Ref<_112446fb0_FnIns> _112446fb0_Fn::_method_instance(void) {
	if ((this->self->_field_generics.len() == 0LL) && (this->self->_field_instances.len() == 1LL)) {
		return this->self->_field_instances[static_cast<jule::Int>(0LL)];
	}
	return this->self->_method_instance_force();
}



inline std::tuple<jule::Bool,jule::Int> _112446fb0_Fn::_method_append_instance(jule::Ref<_112446fb0_FnIns> _15538_ins) {
	if ((*this)._field_generics.len() == 0LL) {
		if ((*this)._field_instances.len() == 1LL) {
			return std::make_tuple(false,0LL);
		}
		(*this)._field_instances=append((*this)._field_instances,jule::Slice<jule::Ref<_112446fb0_FnIns>>({_15538_ins}));
		return std::make_tuple(true,-1LL);
	}
	if ((*this)._field_instances.len() == 0LL) {
		(*this)._field_instances=append((*this)._field_instances,jule::Slice<jule::Ref<_112446fb0_FnIns>>({_15538_ins}));
		return std::make_tuple(true,-1LL);
	}
	{
		auto __julec_range_expr = (*this)._field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112446fb0_j = 0;
			jule::Ref<_112446fb0_FnIns> _112446fb0_ains = *__julec_range_begin;
			_iter_begin_4637792720:;
			{
				{
					auto __julec_range_expr = _112446fb0_ains->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _112446fb0_i = 0;
						jule::Ref<_1217f7750_TypeKind> _112446fb0_ag = *__julec_range_begin;
						_iter_begin_4637799696:;
						{
							if (_112446fb0_ag->_method_equals(_15538_ins->_field_generics[static_cast<jule::Int>(_112446fb0_i)])) {
								return std::make_tuple(false,_112446fb0_j);
							}
						}
						_iter_next_4637799696:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_112446fb0_i; _112446fb0_ag = *__julec_range_begin; goto _iter_begin_4637799696; }
						_iter_end_4637799696:;
					}
				}
			}
			_iter_next_4637792720:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112446fb0_j; _112446fb0_ains = *__julec_range_begin; goto _iter_begin_4637792720; }
			_iter_end_4637792720:;
		}
	}
	(*this)._field_instances=append((*this)._field_instances,jule::Slice<jule::Ref<_112446fb0_FnIns>>({_15538_ins}));
	return std::make_tuple(true,-1LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _112446fb0_Fn &_Src) {
	_Stream << "Fn{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_112446fb0_ParamIns> _112446fb0_Param::_method_instance(void) {
	return jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(this->self,jule::Ref<_1217f7750_TypeKind>()));
}



inline jule::Bool _112446fb0_Param::_method_is_self(void) {
	return ((*this)._field_ident == jule::Str("&self", 5)) || ((*this)._field_ident == jule::Str("self", 4));
}



inline jule::Bool _112446fb0_Param::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str("", 0)) && ((*this)._field_ident[static_cast<jule::Int>(0LL)] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _112446fb0_Param &_Src) {
	_Stream << "Param{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_11209db80_FieldIns> _11209db80_Field::_method_instance(void) {
	return jule::new_struct<_11209db80_FieldIns>(new( std::nothrow ) _11209db80_FieldIns(this->self,this->self->_field_kind->_field_kind));
}







std::ostream &operator<<(std::ostream &_Stream, const _11209db80_Field &_Src) {
	_Stream << "Field{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111654d60_AssignInfo &_Src) {
	_Stream << "AssignInfo{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "ok:" << _Src._field_ok;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base._field_id != 0LLU;
}



inline jule::Bool _111612b20_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base._field_id == 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_TraitDecl &_Src) {
	_Stream << "TraitDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_StructDecl &_Src) {
	_Stream << "StructDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_FieldDecl &_Src) {
	_Stream << "FieldDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_EnumDecl::_method_default_typed(void) {
	return (!(jule::real((*this)._field_kind)));
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_EnumDecl &_Src) {
	_Stream << "EnumDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_EnumItemDecl::_method_auto_expr(void) {
	return (!(jule::real((*this)._field_expr)));
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_EnumItemDecl &_Src) {
	_Stream << "EnumItemDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_UseDecl &_Src) {
	_Stream << "UseDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "full:" << _Src._field_full << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_Case &_Src) {
	_Stream << "Case{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_TypeAliasDecl &_Src) {
	_Stream << "TypeAliasDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_Else &_Src) {
	_Stream << "Else{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_If &_Src) {
	_Stream << "If{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_VarDecl &_Src) {
	_Stream << "VarDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_FnDecl &_Src) {
	_Stream << "FnDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_ParamDecl::_method_is_self(void) {
	return (*this)._field_ident.has_suffix(jule::Str("self", 4));
}



inline jule::Bool _111612b20_ParamDecl::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str("", 0)) && ((*this)._field_ident[static_cast<jule::Int>(0LL)] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_ParamDecl &_Src) {
	_Stream << "ParamDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_AssignLeft &_Src) {
	_Stream << "AssignLeft{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_GenericDecl &_Src) {
	_Stream << "GenericDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_FnCallExpr &_Src) {
	_Stream << "FnCallExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "concurrent:" << _Src._field_concurrent;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_Expr::_method_is_fn_call(void) {
	if ((*this)._field_kind == nullptr) {
		return false;
	}
	{
		auto _match_expr{ (*this)._field_kind };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_FnCallExpr>>())) { goto _case_end_4629057552; }
		_case_begin_4629057552:;
		{
			return true;
		}
		goto _match_end_4629055536;
		_case_end_4629057552:;
		_case_begin_4629056224:;
		{
			return false;
		}
		goto _match_end_4629055536;
		_case_end_4629056224:;
		_match_end_4629055536:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_Expr &_Src) {
	_Stream << "Expr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_IdentTypeDecl::_method_is_prim(void) {
	return (*this)._field_token._field_id == 1LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_IdentTypeDecl &_Src) {
	_Stream << "IdentTypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_TypeDecl &_Src) {
	_Stream << "TypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_Directive &_Src) {
	_Stream << "Directive{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "tag:" << _Src._field_tag << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_Comment::_method_is_directive(void) {
	return (*this)._field_text.has_prefix(jule::Str("jule:", 5));
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_Comment &_Src) {
	_Stream << "Comment{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _111612b20_Node::_method_is_decl(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_EnumDecl>>() || _match_expr.type_is<jule::Ref<_111612b20_FnDecl>>() || _match_expr.type_is<jule::Ref<_111612b20_StructDecl>>() || _match_expr.type_is<jule::Ref<_111612b20_TraitDecl>>() || _match_expr.type_is<jule::Ref<_111612b20_TypeAliasDecl>>() || _match_expr.type_is<jule::Ref<_111612b20_FieldDecl>>() || _match_expr.type_is<jule::Ref<_111612b20_UseDecl>>() || _match_expr.type_is<jule::Ref<_111612b20_VarDecl>>() || _match_expr.type_is<jule::Ref<_111612b20_TypeDecl>>())) { goto _case_end_4629011296; }
		_case_begin_4629011296:;
		{
			return true;
		}
		goto _match_end_4629009424;
		_case_end_4629011296:;
		_case_begin_4629010288:;
		{
			return false;
		}
		goto _match_end_4629009424;
		_case_end_4629010288:;
		_match_end_4629009424:;
	}
}



inline jule::Bool _111612b20_Node::_method_is_comment(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_Comment>>() || _match_expr.type_is<jule::Ref<_111612b20_CommentGroup>>())) { goto _case_end_4629029040; }
		_case_begin_4629029040:;
		{
			return true;
		}
		goto _match_end_4629026640;
		_case_end_4629029040:;
		_case_begin_4629028048:;
		{
			return false;
		}
		goto _match_end_4629026640;
		_case_end_4629028048:;
		_match_end_4629026640:;
	}
}



inline jule::Bool _111612b20_Node::_method_is_impl(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_Impl>>())) { goto _case_end_4629033248; }
		_case_begin_4629033248:;
		{
			return true;
		}
		goto _match_end_4629030880;
		_case_end_4629033248:;
		_case_begin_4629032256:;
		{
			return false;
		}
		goto _match_end_4629030880;
		_case_end_4629032256:;
		_match_end_4629030880:;
	}
}



inline jule::Bool _111612b20_Node::_method_is_use_decl(void) {
	{
		auto _match_expr{ (*this)._field_data };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_UseDecl>>())) { goto _case_end_4629037104; }
		_case_begin_4629037104:;
		{
			return true;
		}
		goto _match_end_4629034704;
		_case_end_4629037104:;
		_case_begin_4629036112:;
		{
			return false;
		}
		goto _match_end_4629034704;
		_case_end_4629036112:;
		_match_end_4629034704:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _111612b20_Node &_Src) {
	_Stream << "Node{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline _11203c360_Vector_0 _11203c360_Vector_0::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_0 _4417_vec = _11203c360_Vector_0();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_0::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_0::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<_111613f20_Token>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<_111613f20_Token>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<_111613f20_Token>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_0::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_0::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_0::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_0::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_0::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline _111613f20_Token _11203c360_Vector_0::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<_111613f20_Token>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_0::_method_set(jule::Int _12326_i,_111613f20_Token _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<_111613f20_Token>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_0::_method_push(_111613f20_Token _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<_111613f20_Token>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_0::_method_push_front(_111613f20_Token _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4627001408:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4627001408; }
	{
		{
			__jule_std_vector_heap_move<_111613f20_Token>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4627001408:;
	(_15217_i)--;
	goto _iter_begin_4627001408;
	_iter_end_4627001408:;
	{
		__jule_std_vector_heap_assign<_111613f20_Token>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_0::_method_append(jule::Slice<_111613f20_Token> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<_111613f20_Token>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_111613f20_Token) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<_111613f20_Token>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_0::_method_merge(_11203c360_Vector_0 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<_111613f20_Token>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_111613f20_Token) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_0::_method_merge_front(_11203c360_Vector_0 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4627045072:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4627045072; }
	{
		{
			__jule_std_vector_heap_move<_111613f20_Token>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4627045072:;
	(_20517_i)--;
	goto _iter_begin_4627045072;
	_iter_end_4627045072:;
	{
		__jule_std_vector_copy_range<_111613f20_Token>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_0::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4627071696:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4627071696; }
	{
		{
			__jule_std_vector_heap_move<_111613f20_Token>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4627071696:;
	(_23917_i)++;
	goto _iter_begin_4627071696;
	_iter_end_4627071696:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_0::_method_insert(jule::Int _24829_i,_111613f20_Token _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4627082976:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4627082976; }
	{
		{
			__jule_std_vector_heap_move<_111613f20_Token>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4627082976:;
	(_26117_j)--;
	goto _iter_begin_4627082976;
	_iter_end_4627082976:;
	{
		__jule_std_vector_heap_assign<_111613f20_Token>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_0 _11203c360_Vector_0::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_0::_static_method_new(0LL);
	}
	_11203c360_Vector_0 _29317_vec = _11203c360_Vector_0::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<_111613f20_Token>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_111613f20_Token) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_0 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_1 _11203c360_Vector_1::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_1 _4417_vec = _11203c360_Vector_1();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_1::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_1::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_111612b20_Directive>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_111612b20_Directive>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_111612b20_Directive>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_1::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_1::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_1::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_1::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_1::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_111612b20_Directive> _11203c360_Vector_1::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_111612b20_Directive>>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_1::_method_set(jule::Int _12326_i,jule::Ref<_111612b20_Directive> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_Directive>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_1::_method_push(jule::Ref<_111612b20_Directive> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_Directive>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_1::_method_push_front(jule::Ref<_111612b20_Directive> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4627957216:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4627957216; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_Directive>>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4627957216:;
	(_15217_i)--;
	goto _iter_begin_4627957216;
	_iter_end_4627957216:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_Directive>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_1::_method_append(jule::Slice<jule::Ref<_111612b20_Directive>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_Directive>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_111612b20_Directive>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_111612b20_Directive>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_1::_method_merge(_11203c360_Vector_1 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_Directive>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_111612b20_Directive>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_1::_method_merge_front(_11203c360_Vector_1 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628000976:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4628000976; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_Directive>>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4628000976:;
	(_20517_i)--;
	goto _iter_begin_4628000976;
	_iter_end_4628000976:;
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_Directive>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_1::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4628027600:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4628027600; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_Directive>>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4628027600:;
	(_23917_i)++;
	goto _iter_begin_4628027600;
	_iter_end_4628027600:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_1::_method_insert(jule::Int _24829_i,jule::Ref<_111612b20_Directive> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628038880:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4628038880; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_Directive>>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4628038880:;
	(_26117_j)--;
	goto _iter_begin_4628038880;
	_iter_end_4628038880:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_Directive>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_1 _11203c360_Vector_1::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_1::_static_method_new(0LL);
	}
	_11203c360_Vector_1 _29317_vec = _11203c360_Vector_1::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_Directive>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_111612b20_Directive>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_1 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_2 _11203c360_Vector_2::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_2 _4417_vec = _11203c360_Vector_2();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_2::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_2::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_111612b20_UseDecl>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_111612b20_UseDecl>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_111612b20_UseDecl>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_2::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_2::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_2::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_2::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_2::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_111612b20_UseDecl> _11203c360_Vector_2::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_111612b20_UseDecl>>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_2::_method_set(jule::Int _12326_i,jule::Ref<_111612b20_UseDecl> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_UseDecl>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_2::_method_push(jule::Ref<_111612b20_UseDecl> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_UseDecl>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_2::_method_push_front(jule::Ref<_111612b20_UseDecl> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628166656:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4628166656; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_UseDecl>>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4628166656:;
	(_15217_i)--;
	goto _iter_begin_4628166656;
	_iter_end_4628166656:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_UseDecl>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_2::_method_append(jule::Slice<jule::Ref<_111612b20_UseDecl>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_UseDecl>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_111612b20_UseDecl>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_111612b20_UseDecl>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_2::_method_merge(_11203c360_Vector_2 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_UseDecl>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_111612b20_UseDecl>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_2::_method_merge_front(_11203c360_Vector_2 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628210544:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4628210544; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_UseDecl>>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4628210544:;
	(_20517_i)--;
	goto _iter_begin_4628210544;
	_iter_end_4628210544:;
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_UseDecl>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_2::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4628237168:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4628237168; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_UseDecl>>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4628237168:;
	(_23917_i)++;
	goto _iter_begin_4628237168;
	_iter_end_4628237168:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_2::_method_insert(jule::Int _24829_i,jule::Ref<_111612b20_UseDecl> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628248448:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4628248448; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_UseDecl>>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4628248448:;
	(_26117_j)--;
	goto _iter_begin_4628248448;
	_iter_end_4628248448:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_UseDecl>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_2 _11203c360_Vector_2::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_2::_static_method_new(0LL);
	}
	_11203c360_Vector_2 _29317_vec = _11203c360_Vector_2::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_UseDecl>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_111612b20_UseDecl>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_2 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_3 _11203c360_Vector_3::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_3 _4417_vec = _11203c360_Vector_3();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_3::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_3::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_111612b20_Impl>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_111612b20_Impl>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_111612b20_Impl>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_3::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_3::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_3::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_3::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_3::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_111612b20_Impl> _11203c360_Vector_3::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_111612b20_Impl>>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_3::_method_set(jule::Int _12326_i,jule::Ref<_111612b20_Impl> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_Impl>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_3::_method_push(jule::Ref<_111612b20_Impl> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_Impl>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_3::_method_push_front(jule::Ref<_111612b20_Impl> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628391712:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4628391712; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_Impl>>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4628391712:;
	(_15217_i)--;
	goto _iter_begin_4628391712;
	_iter_end_4628391712:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_Impl>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_3::_method_append(jule::Slice<jule::Ref<_111612b20_Impl>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_Impl>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_111612b20_Impl>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_111612b20_Impl>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_3::_method_merge(_11203c360_Vector_3 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_Impl>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_111612b20_Impl>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_3::_method_merge_front(_11203c360_Vector_3 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628451984:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4628451984; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_Impl>>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4628451984:;
	(_20517_i)--;
	goto _iter_begin_4628451984;
	_iter_end_4628451984:;
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_Impl>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_3::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4628478608:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4628478608; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_Impl>>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4628478608:;
	(_23917_i)++;
	goto _iter_begin_4628478608;
	_iter_end_4628478608:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_3::_method_insert(jule::Int _24829_i,jule::Ref<_111612b20_Impl> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628043232:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4628043232; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_Impl>>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4628043232:;
	(_26117_j)--;
	goto _iter_begin_4628043232;
	_iter_end_4628043232:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_Impl>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_3 _11203c360_Vector_3::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_3::_static_method_new(0LL);
	}
	_11203c360_Vector_3 _29317_vec = _11203c360_Vector_3::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_Impl>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_111612b20_Impl>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_3 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_4 _11203c360_Vector_4::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_4 _4417_vec = _11203c360_Vector_4();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_4::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_4::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_111612b20_Comment>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_111612b20_Comment>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_111612b20_Comment>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_4::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_4::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_4::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_4::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_4::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_111612b20_Comment> _11203c360_Vector_4::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_111612b20_Comment>>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_4::_method_set(jule::Int _12326_i,jule::Ref<_111612b20_Comment> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_Comment>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_4::_method_push(jule::Ref<_111612b20_Comment> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_Comment>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_4::_method_push_front(jule::Ref<_111612b20_Comment> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628615120:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4628615120; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_Comment>>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4628615120:;
	(_15217_i)--;
	goto _iter_begin_4628615120;
	_iter_end_4628615120:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_Comment>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_4::_method_append(jule::Slice<jule::Ref<_111612b20_Comment>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_Comment>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_111612b20_Comment>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_111612b20_Comment>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_4::_method_merge(_11203c360_Vector_4 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_Comment>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_111612b20_Comment>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_4::_method_merge_front(_11203c360_Vector_4 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628658880:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4628658880; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_Comment>>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4628658880:;
	(_20517_i)--;
	goto _iter_begin_4628658880;
	_iter_end_4628658880:;
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_Comment>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_4::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4628685504:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4628685504; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_Comment>>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4628685504:;
	(_23917_i)++;
	goto _iter_begin_4628685504;
	_iter_end_4628685504:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_4::_method_insert(jule::Int _24829_i,jule::Ref<_111612b20_Comment> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628696784:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4628696784; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_111612b20_Comment>>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4628696784:;
	(_26117_j)--;
	goto _iter_begin_4628696784;
	_iter_end_4628696784:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_111612b20_Comment>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_4 _11203c360_Vector_4::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_4::_static_method_new(0LL);
	}
	_11203c360_Vector_4 _29317_vec = _11203c360_Vector_4::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Ref<_111612b20_Comment>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_111612b20_Comment>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_4 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_5 _11203c360_Vector_5::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_5 _4417_vec = _11203c360_Vector_5();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_5::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_5::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<_111612b20_Node>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<_111612b20_Node>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<_111612b20_Node>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_5::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_5::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_5::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_5::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_5::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline _111612b20_Node _11203c360_Vector_5::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<_111612b20_Node>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_5::_method_set(jule::Int _12326_i,_111612b20_Node _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<_111612b20_Node>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_5::_method_push(_111612b20_Node _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<_111612b20_Node>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_5::_method_push_front(_111612b20_Node _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628824144:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4628824144; }
	{
		{
			__jule_std_vector_heap_move<_111612b20_Node>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4628824144:;
	(_15217_i)--;
	goto _iter_begin_4628824144;
	_iter_end_4628824144:;
	{
		__jule_std_vector_heap_assign<_111612b20_Node>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_5::_method_append(jule::Slice<_111612b20_Node> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<_111612b20_Node>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_111612b20_Node) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<_111612b20_Node>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_5::_method_merge(_11203c360_Vector_5 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<_111612b20_Node>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_111612b20_Node) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_5::_method_merge_front(_11203c360_Vector_5 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628867680:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4628867680; }
	{
		{
			__jule_std_vector_heap_move<_111612b20_Node>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4628867680:;
	(_20517_i)--;
	goto _iter_begin_4628867680;
	_iter_end_4628867680:;
	{
		__jule_std_vector_copy_range<_111612b20_Node>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_5::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4628894304:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4628894304; }
	{
		{
			__jule_std_vector_heap_move<_111612b20_Node>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4628894304:;
	(_23917_i)++;
	goto _iter_begin_4628894304;
	_iter_end_4628894304:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_5::_method_insert(jule::Int _24829_i,_111612b20_Node _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4628905584:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4628905584; }
	{
		{
			__jule_std_vector_heap_move<_111612b20_Node>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4628905584:;
	(_26117_j)--;
	goto _iter_begin_4628905584;
	_iter_end_4628905584:;
	{
		__jule_std_vector_heap_assign<_111612b20_Node>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_5 _11203c360_Vector_5::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_5::_static_method_new(0LL);
	}
	_11203c360_Vector_5 _29317_vec = _11203c360_Vector_5::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<_111612b20_Node>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_111612b20_Node) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_5 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_6 _11203c360_Vector_6::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_6 _4417_vec = _11203c360_Vector_6();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_6::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_6::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<_112572770_Pass>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<_112572770_Pass>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<_112572770_Pass>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_6::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_6::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_6::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_6::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_6::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline _112572770_Pass _11203c360_Vector_6::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<_112572770_Pass>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_6::_method_set(jule::Int _12326_i,_112572770_Pass _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<_112572770_Pass>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_6::_method_push(_112572770_Pass _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<_112572770_Pass>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_6::_method_push_front(_112572770_Pass _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4633734784:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4633734784; }
	{
		{
			__jule_std_vector_heap_move<_112572770_Pass>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4633734784:;
	(_15217_i)--;
	goto _iter_begin_4633734784;
	_iter_end_4633734784:;
	{
		__jule_std_vector_heap_assign<_112572770_Pass>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_6::_method_append(jule::Slice<_112572770_Pass> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<_112572770_Pass>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_112572770_Pass) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<_112572770_Pass>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_6::_method_merge(_11203c360_Vector_6 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<_112572770_Pass>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_112572770_Pass) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_6::_method_merge_front(_11203c360_Vector_6 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4633778576:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4633778576; }
	{
		{
			__jule_std_vector_heap_move<_112572770_Pass>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4633778576:;
	(_20517_i)--;
	goto _iter_begin_4633778576;
	_iter_end_4633778576:;
	{
		__jule_std_vector_copy_range<_112572770_Pass>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_6::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4633805200:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4633805200; }
	{
		{
			__jule_std_vector_heap_move<_112572770_Pass>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4633805200:;
	(_23917_i)++;
	goto _iter_begin_4633805200;
	_iter_end_4633805200:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_6::_method_insert(jule::Int _24829_i,_112572770_Pass _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4633816480:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4633816480; }
	{
		{
			__jule_std_vector_heap_move<_112572770_Pass>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4633816480:;
	(_26117_j)--;
	goto _iter_begin_4633816480;
	_iter_end_4633816480:;
	{
		__jule_std_vector_heap_assign<_112572770_Pass>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_6 _11203c360_Vector_6::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_6::_static_method_new(0LL);
	}
	_11203c360_Vector_6 _29317_vec = _11203c360_Vector_6::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<_112572770_Pass>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(_112572770_Pass) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_6 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_7 _11203c360_Vector_7::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_7 _4417_vec = _11203c360_Vector_7();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_7::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_7::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_11265fb90_ImportInfo>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_11265fb90_ImportInfo>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_11265fb90_ImportInfo>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_7::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_7::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_7::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_7::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_7::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_11265fb90_ImportInfo> _11203c360_Vector_7::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_11265fb90_ImportInfo>>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_7::_method_set(jule::Int _12326_i,jule::Ref<_11265fb90_ImportInfo> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11265fb90_ImportInfo>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_7::_method_push(jule::Ref<_11265fb90_ImportInfo> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11265fb90_ImportInfo>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_7::_method_push_front(jule::Ref<_11265fb90_ImportInfo> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4633953456:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4633953456; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11265fb90_ImportInfo>>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4633953456:;
	(_15217_i)--;
	goto _iter_begin_4633953456;
	_iter_end_4633953456:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11265fb90_ImportInfo>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_7::_method_append(jule::Slice<jule::Ref<_11265fb90_ImportInfo>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_11265fb90_ImportInfo>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11265fb90_ImportInfo>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_11265fb90_ImportInfo>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_7::_method_merge(_11203c360_Vector_7 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_11265fb90_ImportInfo>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11265fb90_ImportInfo>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_7::_method_merge_front(_11203c360_Vector_7 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4633997216:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4633997216; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11265fb90_ImportInfo>>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4633997216:;
	(_20517_i)--;
	goto _iter_begin_4633997216;
	_iter_end_4633997216:;
	{
		__jule_std_vector_copy_range<jule::Ref<_11265fb90_ImportInfo>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_7::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4634023840:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4634023840; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11265fb90_ImportInfo>>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4634023840:;
	(_23917_i)++;
	goto _iter_begin_4634023840;
	_iter_end_4634023840:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_7::_method_insert(jule::Int _24829_i,jule::Ref<_11265fb90_ImportInfo> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634035120:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4634035120; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11265fb90_ImportInfo>>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4634035120:;
	(_26117_j)--;
	goto _iter_begin_4634035120;
	_iter_end_4634035120:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11265fb90_ImportInfo>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_7 _11203c360_Vector_7::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_7::_static_method_new(0LL);
	}
	_11203c360_Vector_7 _29317_vec = _11203c360_Vector_7::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Ref<_11265fb90_ImportInfo>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11265fb90_ImportInfo>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_7 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_8 _11203c360_Vector_8::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_8 _4417_vec = _11203c360_Vector_8();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_8::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_8::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Any>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Any>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Any>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_8::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_8::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_8::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_8::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_8::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Any _11203c360_Vector_8::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Any>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_8::_method_set(jule::Int _12326_i,jule::Any _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Any>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_8::_method_push(jule::Any _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Any>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_8::_method_push_front(jule::Any _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634172080:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4634172080; }
	{
		{
			__jule_std_vector_heap_move<jule::Any>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4634172080:;
	(_15217_i)--;
	goto _iter_begin_4634172080;
	_iter_end_4634172080:;
	{
		__jule_std_vector_heap_assign<jule::Any>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_8::_method_append(jule::Slice<jule::Any> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Any>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Any) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Any>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_8::_method_merge(_11203c360_Vector_8 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Any>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Any) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_8::_method_merge_front(_11203c360_Vector_8 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634215840:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4634215840; }
	{
		{
			__jule_std_vector_heap_move<jule::Any>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4634215840:;
	(_20517_i)--;
	goto _iter_begin_4634215840;
	_iter_end_4634215840:;
	{
		__jule_std_vector_copy_range<jule::Any>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_8::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4634242464:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4634242464; }
	{
		{
			__jule_std_vector_heap_move<jule::Any>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4634242464:;
	(_23917_i)++;
	goto _iter_begin_4634242464;
	_iter_end_4634242464:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_8::_method_insert(jule::Int _24829_i,jule::Any _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634253744:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4634253744; }
	{
		{
			__jule_std_vector_heap_move<jule::Any>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4634253744:;
	(_26117_j)--;
	goto _iter_begin_4634253744;
	_iter_end_4634253744:;
	{
		__jule_std_vector_heap_assign<jule::Any>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_8 _11203c360_Vector_8::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_8::_static_method_new(0LL);
	}
	_11203c360_Vector_8 _29317_vec = _11203c360_Vector_8::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Any>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Any) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_8 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_9 _11203c360_Vector_9::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_9 _4417_vec = _11203c360_Vector_9();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_9::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_9::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_1320e22c0_Var>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_1320e22c0_Var>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_1320e22c0_Var>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_9::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_9::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_9::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_9::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_9::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_1320e22c0_Var> _11203c360_Vector_9::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_1320e22c0_Var>>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_9::_method_set(jule::Int _12326_i,jule::Ref<_1320e22c0_Var> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_1320e22c0_Var>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_9::_method_push(jule::Ref<_1320e22c0_Var> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_1320e22c0_Var>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_9::_method_push_front(jule::Ref<_1320e22c0_Var> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634392880:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4634392880; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1320e22c0_Var>>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4634392880:;
	(_15217_i)--;
	goto _iter_begin_4634392880;
	_iter_end_4634392880:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_1320e22c0_Var>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_9::_method_append(jule::Slice<jule::Ref<_1320e22c0_Var>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_1320e22c0_Var>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_1320e22c0_Var>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_1320e22c0_Var>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_9::_method_merge(_11203c360_Vector_9 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_1320e22c0_Var>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_1320e22c0_Var>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_9::_method_merge_front(_11203c360_Vector_9 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634436640:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4634436640; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1320e22c0_Var>>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4634436640:;
	(_20517_i)--;
	goto _iter_begin_4634436640;
	_iter_end_4634436640:;
	{
		__jule_std_vector_copy_range<jule::Ref<_1320e22c0_Var>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_9::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4634463264:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4634463264; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1320e22c0_Var>>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4634463264:;
	(_23917_i)++;
	goto _iter_begin_4634463264;
	_iter_end_4634463264:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_9::_method_insert(jule::Int _24829_i,jule::Ref<_1320e22c0_Var> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634474544:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4634474544; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1320e22c0_Var>>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4634474544:;
	(_26117_j)--;
	goto _iter_begin_4634474544;
	_iter_end_4634474544:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_1320e22c0_Var>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_9 _11203c360_Vector_9::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_9::_static_method_new(0LL);
	}
	_11203c360_Vector_9 _29317_vec = _11203c360_Vector_9::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Ref<_1320e22c0_Var>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_1320e22c0_Var>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_9 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_10 _11203c360_Vector_10::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_10 _4417_vec = _11203c360_Vector_10();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_10::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_10::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_1217f7750_TypeAlias>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_1217f7750_TypeAlias>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_1217f7750_TypeAlias>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_10::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_10::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_10::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_10::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_10::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_1217f7750_TypeAlias> _11203c360_Vector_10::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_1217f7750_TypeAlias>>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_10::_method_set(jule::Int _12326_i,jule::Ref<_1217f7750_TypeAlias> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_1217f7750_TypeAlias>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_10::_method_push(jule::Ref<_1217f7750_TypeAlias> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_1217f7750_TypeAlias>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_10::_method_push_front(jule::Ref<_1217f7750_TypeAlias> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634602768:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4634602768; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1217f7750_TypeAlias>>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4634602768:;
	(_15217_i)--;
	goto _iter_begin_4634602768;
	_iter_end_4634602768:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_1217f7750_TypeAlias>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_10::_method_append(jule::Slice<jule::Ref<_1217f7750_TypeAlias>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_1217f7750_TypeAlias>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_1217f7750_TypeAlias>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_1217f7750_TypeAlias>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_10::_method_merge(_11203c360_Vector_10 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_1217f7750_TypeAlias>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_1217f7750_TypeAlias>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_10::_method_merge_front(_11203c360_Vector_10 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634646528:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4634646528; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1217f7750_TypeAlias>>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4634646528:;
	(_20517_i)--;
	goto _iter_begin_4634646528;
	_iter_end_4634646528:;
	{
		__jule_std_vector_copy_range<jule::Ref<_1217f7750_TypeAlias>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_10::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4634673152:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4634673152; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1217f7750_TypeAlias>>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4634673152:;
	(_23917_i)++;
	goto _iter_begin_4634673152;
	_iter_end_4634673152:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_10::_method_insert(jule::Int _24829_i,jule::Ref<_1217f7750_TypeAlias> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634684432:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4634684432; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_1217f7750_TypeAlias>>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4634684432:;
	(_26117_j)--;
	goto _iter_begin_4634684432;
	_iter_end_4634684432:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_1217f7750_TypeAlias>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_10 _11203c360_Vector_10::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_10::_static_method_new(0LL);
	}
	_11203c360_Vector_10 _29317_vec = _11203c360_Vector_10::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Ref<_1217f7750_TypeAlias>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_1217f7750_TypeAlias>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_10 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_11 _11203c360_Vector_11::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_11 _4417_vec = _11203c360_Vector_11();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_11::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_11::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_112446fb0_Fn>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_112446fb0_Fn>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_112446fb0_Fn>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_11::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_11::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_11::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_11::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_11::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_112446fb0_Fn> _11203c360_Vector_11::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_112446fb0_Fn>>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_11::_method_set(jule::Int _12326_i,jule::Ref<_112446fb0_Fn> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_112446fb0_Fn>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_11::_method_push(jule::Ref<_112446fb0_Fn> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_112446fb0_Fn>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_11::_method_push_front(jule::Ref<_112446fb0_Fn> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634877872:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4634877872; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_112446fb0_Fn>>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4634877872:;
	(_15217_i)--;
	goto _iter_begin_4634877872;
	_iter_end_4634877872:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_112446fb0_Fn>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_11::_method_append(jule::Slice<jule::Ref<_112446fb0_Fn>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_112446fb0_Fn>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_112446fb0_Fn>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_112446fb0_Fn>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_11::_method_merge(_11203c360_Vector_11 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_112446fb0_Fn>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_112446fb0_Fn>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_11::_method_merge_front(_11203c360_Vector_11 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634921632:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4634921632; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_112446fb0_Fn>>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4634921632:;
	(_20517_i)--;
	goto _iter_begin_4634921632;
	_iter_end_4634921632:;
	{
		__jule_std_vector_copy_range<jule::Ref<_112446fb0_Fn>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_11::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4634948256:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4634948256; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_112446fb0_Fn>>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4634948256:;
	(_23917_i)++;
	goto _iter_begin_4634948256;
	_iter_end_4634948256:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_11::_method_insert(jule::Int _24829_i,jule::Ref<_112446fb0_Fn> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4634959536:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4634959536; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_112446fb0_Fn>>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4634959536:;
	(_26117_j)--;
	goto _iter_begin_4634959536;
	_iter_end_4634959536:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_112446fb0_Fn>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_11 _11203c360_Vector_11::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_11::_static_method_new(0LL);
	}
	_11203c360_Vector_11 _29317_vec = _11203c360_Vector_11::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Ref<_112446fb0_Fn>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_112446fb0_Fn>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_11 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_12 _11203c360_Vector_12::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_12 _4417_vec = _11203c360_Vector_12();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_12::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_12::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_11209db80_Struct>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_11209db80_Struct>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_11209db80_Struct>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_12::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_12::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_12::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_12::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_12::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_11209db80_Struct> _11203c360_Vector_12::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_11209db80_Struct>>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_12::_method_set(jule::Int _12326_i,jule::Ref<_11209db80_Struct> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11209db80_Struct>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_12::_method_push(jule::Ref<_11209db80_Struct> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11209db80_Struct>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_12::_method_push_front(jule::Ref<_11209db80_Struct> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4635082832:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4635082832; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11209db80_Struct>>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4635082832:;
	(_15217_i)--;
	goto _iter_begin_4635082832;
	_iter_end_4635082832:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11209db80_Struct>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_12::_method_append(jule::Slice<jule::Ref<_11209db80_Struct>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_11209db80_Struct>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11209db80_Struct>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_11209db80_Struct>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_12::_method_merge(_11203c360_Vector_12 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_11209db80_Struct>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11209db80_Struct>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_12::_method_merge_front(_11203c360_Vector_12 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4635126592:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4635126592; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11209db80_Struct>>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4635126592:;
	(_20517_i)--;
	goto _iter_begin_4635126592;
	_iter_end_4635126592:;
	{
		__jule_std_vector_copy_range<jule::Ref<_11209db80_Struct>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_12::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4635153216:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4635153216; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11209db80_Struct>>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4635153216:;
	(_23917_i)++;
	goto _iter_begin_4635153216;
	_iter_end_4635153216:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_12::_method_insert(jule::Int _24829_i,jule::Ref<_11209db80_Struct> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4635164496:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4635164496; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11209db80_Struct>>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4635164496:;
	(_26117_j)--;
	goto _iter_begin_4635164496;
	_iter_end_4635164496:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11209db80_Struct>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_12 _11203c360_Vector_12::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_12::_static_method_new(0LL);
	}
	_11203c360_Vector_12 _29317_vec = _11203c360_Vector_12::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Ref<_11209db80_Struct>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11209db80_Struct>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_12 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_13 _11203c360_Vector_13::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_13 _4417_vec = _11203c360_Vector_13();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_13::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_13::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_11209e2e0_Trait>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_11209e2e0_Trait>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_11209e2e0_Trait>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_13::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_13::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_13::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_13::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_13::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_11209e2e0_Trait> _11203c360_Vector_13::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_11209e2e0_Trait>>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_13::_method_set(jule::Int _12326_i,jule::Ref<_11209e2e0_Trait> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11209e2e0_Trait>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_13::_method_push(jule::Ref<_11209e2e0_Trait> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11209e2e0_Trait>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_13::_method_push_front(jule::Ref<_11209e2e0_Trait> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4635289584:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4635289584; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11209e2e0_Trait>>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4635289584:;
	(_15217_i)--;
	goto _iter_begin_4635289584;
	_iter_end_4635289584:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11209e2e0_Trait>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_13::_method_append(jule::Slice<jule::Ref<_11209e2e0_Trait>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_11209e2e0_Trait>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11209e2e0_Trait>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_11209e2e0_Trait>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_13::_method_merge(_11203c360_Vector_13 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_11209e2e0_Trait>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11209e2e0_Trait>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_13::_method_merge_front(_11203c360_Vector_13 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4635333344:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4635333344; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11209e2e0_Trait>>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4635333344:;
	(_20517_i)--;
	goto _iter_begin_4635333344;
	_iter_end_4635333344:;
	{
		__jule_std_vector_copy_range<jule::Ref<_11209e2e0_Trait>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_13::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4635359968:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4635359968; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11209e2e0_Trait>>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4635359968:;
	(_23917_i)++;
	goto _iter_begin_4635359968;
	_iter_end_4635359968:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_13::_method_insert(jule::Int _24829_i,jule::Ref<_11209e2e0_Trait> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4635371248:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4635371248; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11209e2e0_Trait>>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4635371248:;
	(_26117_j)--;
	goto _iter_begin_4635371248;
	_iter_end_4635371248:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11209e2e0_Trait>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_13 _11203c360_Vector_13::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_13::_static_method_new(0LL);
	}
	_11203c360_Vector_13 _29317_vec = _11203c360_Vector_13::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Ref<_11209e2e0_Trait>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11209e2e0_Trait>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_13 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_14 _11203c360_Vector_14::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_14 _4417_vec = _11203c360_Vector_14();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_14::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_14::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_11261eaf0_Enum>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_11261eaf0_Enum>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_11261eaf0_Enum>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_14::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_14::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_14::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_14::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_14::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_11261eaf0_Enum> _11203c360_Vector_14::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_11261eaf0_Enum>>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_14::_method_set(jule::Int _12326_i,jule::Ref<_11261eaf0_Enum> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11261eaf0_Enum>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_14::_method_push(jule::Ref<_11261eaf0_Enum> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_11261eaf0_Enum>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_14::_method_push_front(jule::Ref<_11261eaf0_Enum> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4635503840:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4635503840; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11261eaf0_Enum>>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4635503840:;
	(_15217_i)--;
	goto _iter_begin_4635503840;
	_iter_end_4635503840:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11261eaf0_Enum>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_14::_method_append(jule::Slice<jule::Ref<_11261eaf0_Enum>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_11261eaf0_Enum>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11261eaf0_Enum>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_11261eaf0_Enum>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_14::_method_merge(_11203c360_Vector_14 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_11261eaf0_Enum>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11261eaf0_Enum>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_14::_method_merge_front(_11203c360_Vector_14 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4635548112:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4635548112; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11261eaf0_Enum>>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4635548112:;
	(_20517_i)--;
	goto _iter_begin_4635548112;
	_iter_end_4635548112:;
	{
		__jule_std_vector_copy_range<jule::Ref<_11261eaf0_Enum>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_14::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4635574736:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4635574736; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11261eaf0_Enum>>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4635574736:;
	(_23917_i)++;
	goto _iter_begin_4635574736;
	_iter_end_4635574736:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_14::_method_insert(jule::Int _24829_i,jule::Ref<_11261eaf0_Enum> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4635586016:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4635586016; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_11261eaf0_Enum>>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4635586016:;
	(_26117_j)--;
	goto _iter_begin_4635586016;
	_iter_end_4635586016:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_11261eaf0_Enum>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_14 _11203c360_Vector_14::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_14::_static_method_new(0LL);
	}
	_11203c360_Vector_14 _29317_vec = _11203c360_Vector_14::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Ref<_11261eaf0_Enum>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_11261eaf0_Enum>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_14 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}

inline _11203c360_Vector_15 _11203c360_Vector_15::_static_method_new(jule::Int _4319_cap) {
	_11203c360_Vector_15 _4417_vec = _11203c360_Vector_15();
	if (_4319_cap != 0LL) {
		_4417_vec._method_resize_alloc(_4319_cap);
	}
	return _4417_vec;
}



inline jule::Int _11203c360_Vector_15::_method_calc_grow(jule::Int _5324_delta) {
	jule::Int _5413_t = (*this)._field__buffer.len + _5324_delta;
	return _5413_t * 2LL;
}



inline void _11203c360_Vector_15::_method_resize_alloc(jule::Int _5831_n) {
	void* _5917_new_heap = __jule_std_vector_alloc<jule::Ref<_112626410_Impl>>(_5831_n);
	if (_5917_new_heap == nullptr) {
		jule::panic(jule::Str("Vector[T].resize_alloc: heap reallocation failed", 48));
	}
	if ((*this)._field__buffer.heap == nullptr) {
		(*this)._field__buffer.heap=_5917_new_heap;
		(*this)._field__buffer.cap=_5831_n;
		return;
	}
	{
		if ((*this)._field__buffer.len > 0LL) {
			__jule_std_vector_copy_range<jule::Ref<_112626410_Impl>>(_5917_new_heap,(*this)._field__buffer.heap,(*this)._field__buffer.len);
		}
		__jule_std_vector_dealloc<jule::Ref<_112626410_Impl>>((*this)._field__buffer.heap);
		(*this)._field__buffer.heap=_5917_new_heap;
	}
	(*this)._field__buffer.cap=_5831_n;
}



inline void _11203c360_Vector_15::_method_review_allocation(jule::Int _8336_delta) {
	if (((*this)._field__buffer.len + _8336_delta) > (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(static_cast<jule::Int>((*this)._method_calc_grow(_8336_delta)));
	}
}



inline jule::Int _11203c360_Vector_15::_method_len(void) {
	return (*this)._field__buffer.len;
}



inline jule::Int _11203c360_Vector_15::_method_cap(void) {
	return (*this)._field__buffer.cap;
}



inline void _11203c360_Vector_15::_method_dealloc(void) {
	(*this)._field__buffer.drop();
}



inline void _11203c360_Vector_15::_method_set_len(jule::Int _10330_n) {
	if (_10330_n < 0LL) {
		(*this)._field__buffer.len=0LL;
		return;
	}
	if (_10330_n >= (*this)._field__buffer.len) {
		return;
	}
	(*this)._field__buffer.len=_10330_n;
}



inline jule::Ref<_112626410_Impl> _11203c360_Vector_15::_method_at(jule::Int _11525_i) {
	if ((_11525_i < 0LL) || (_11525_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].at: out of range", 26));
	}
	return __jule_std_vector_deref<jule::Ref<_112626410_Impl>>((*this)._field__buffer.heap,_11525_i);
}



inline void _11203c360_Vector_15::_method_set(jule::Int _12326_i,jule::Ref<_112626410_Impl> _12338_item) {
	if ((_12326_i < 0LL) || (_12326_i >= (*this)._field__buffer.len)) {
		jule::panic(jule::Str("Vector[T].set: out of range", 27));
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_112626410_Impl>>((*this)._field__buffer.heap,_12326_i,_12338_item);
	}
}



inline void _11203c360_Vector_15::_method_push(jule::Ref<_112626410_Impl> _13131_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	{
		__jule_std_vector_heap_assign<jule::Ref<_112626410_Impl>>((*this)._field__buffer.heap,(*this)._field__buffer.len,_13131_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_15::_method_push_front(jule::Ref<_112626410_Impl> _14637_item) {
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _15217_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4635713232:;
	if (!(_15217_i >= 0LL)) { goto _iter_end_4635713232; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_112626410_Impl>>((*this)._field__buffer.heap,_15217_i,_15217_i + 1LL);
		}
	}
	_iter_next_4635713232:;
	(_15217_i)--;
	goto _iter_begin_4635713232;
	_iter_end_4635713232:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_112626410_Impl>>((*this)._field__buffer.heap,0LL,_14637_item);
	}
	((*this)._field__buffer.len)++;
}



inline void _11203c360_Vector_15::_method_append(jule::Slice<jule::Ref<_112626410_Impl>> _16333_items) {
	if (_16333_items.len() == 0LL) {
		return;
	}
	(*this)._method_review_allocation(static_cast<jule::I64>(_16333_items.len()));
	{
		__jule_std_vector_copy_range<jule::Ref<_112626410_Impl>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_112626410_Impl>) * (*this)._field__buffer.len))),__jule_get_pointer_of_slice<jule::Ref<_112626410_Impl>>(_16333_items),static_cast<jule::I64>(_16333_items.len()));
	}
	(*this)._field__buffer.len+=static_cast<jule::I64>(_16333_items.len());
}



inline void _11203c360_Vector_15::_method_merge(_11203c360_Vector_15 _18032_vec) {
	if (_18032_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_18032_vec._field__buffer.len);
	{
		__jule_std_vector_copy_range<jule::Ref<_112626410_Impl>>(((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_112626410_Impl>) * (*this)._field__buffer.len))),_18032_vec._field__buffer.heap,_18032_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_18032_vec._field__buffer.len;
}



inline void _11203c360_Vector_15::_method_merge_front(_11203c360_Vector_15 _19738_vec) {
	if (_19738_vec._field__buffer.len == 0LL) {
		return;
	}
	(*this)._method_review_allocation(_19738_vec._field__buffer.len);
	jule::Int _20517_i = (*this)._field__buffer.len - 1LL;
	_iter_begin_4635773520:;
	if (!(_20517_i >= 0LL)) { goto _iter_end_4635773520; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_112626410_Impl>>((*this)._field__buffer.heap,_20517_i,_20517_i + _19738_vec._field__buffer.len);
		}
	}
	_iter_next_4635773520:;
	(_20517_i)--;
	goto _iter_begin_4635773520;
	_iter_end_4635773520:;
	{
		__jule_std_vector_copy_range<jule::Ref<_112626410_Impl>>((*this)._field__buffer.heap,_19738_vec._field__buffer.heap,_19738_vec._field__buffer.len);
	}
	(*this)._field__buffer.len+=_19738_vec._field__buffer.len;
}



inline void _11203c360_Vector_15::_method_remove_range(jule::Int _22335_start,jule::Int _22347_n) {
	if (_22347_n < 1LL) {
		return;
	}
	if (_22335_start < -1LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at negative index", 57));
	}
	if (_22335_start >= (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].remove_range: removing starts at out of range", 55));
	}
	if ((((*this)._field__buffer.len - _22335_start) - _22347_n) < 0LL) {
		jule::panic(jule::Str("Vector[T].remove_range: removing continues at out of range", 58));
	}
	jule::Int _23917_i = _22335_start + _22347_n;
	_iter_begin_4635800128:;
	if (!(_23917_i < (*this)._field__buffer.len)) { goto _iter_end_4635800128; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_112626410_Impl>>((*this)._field__buffer.heap,_23917_i,_23917_i - _22347_n);
		}
	}
	_iter_next_4635800128:;
	(_23917_i)++;
	goto _iter_begin_4635800128;
	_iter_end_4635800128:;
	(*this)._field__buffer.len-=_22347_n;
}



inline void _11203c360_Vector_15::_method_insert(jule::Int _24829_i,jule::Ref<_112626410_Impl> _24841_item) {
	if (_24829_i < 0LL) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at negative index", 52));
	}
	if (_24829_i > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].insert: insertion starts at out of range", 50));
	}
	if ((*this)._field__buffer.len >= (*this)._field__buffer.cap) {
		(*this)._method_resize_alloc(((*this)._field__buffer.cap * 2LL) + 1LL);
	}
	jule::Int _26117_j = (*this)._field__buffer.len - 1LL;
	_iter_begin_4635811408:;
	if (!(_26117_j >= _24829_i)) { goto _iter_end_4635811408; }
	{
		{
			__jule_std_vector_heap_move<jule::Ref<_112626410_Impl>>((*this)._field__buffer.heap,_26117_j,_26117_j + 1LL);
		}
	}
	_iter_next_4635811408:;
	(_26117_j)--;
	goto _iter_begin_4635811408;
	_iter_end_4635811408:;
	{
		__jule_std_vector_heap_assign<jule::Ref<_112626410_Impl>>((*this)._field__buffer.heap,_24829_i,_24841_item);
	}
	((*this)._field__buffer.len)++;
}



inline _11203c360_Vector_15 _11203c360_Vector_15::_method_slice(jule::Int _27228_start,jule::Int _27240_end) {
	if (_27228_start < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at negative index", 49));
	}
	if (_27228_start > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing starts at out of range", 47));
	}
	if (_27240_end > (*this)._field__buffer.len) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at out of range", 45));
	}
	if (_27240_end < 0LL) {
		jule::panic(jule::Str("Vector[T].slice: slicing ends at negative index", 47));
	}
	if (_27228_start > _27240_end) {
		jule::panic(jule::Str("Vector[T].slice: start point < end point", 40));
	}
	if (_27228_start == _27240_end) {
		return _11203c360_Vector_15::_static_method_new(0LL);
	}
	_11203c360_Vector_15 _29317_vec = _11203c360_Vector_15::_static_method_new(_27240_end - _27228_start);
	{
		__jule_std_vector_copy_range<jule::Ref<_112626410_Impl>>(_29317_vec._field__buffer.heap,((void*)(((jule::Uintptr)((*this)._field__buffer.heap)) + (sizeof(jule::Ref<_112626410_Impl>) * _27228_start))),_29317_vec._field__buffer.cap);
	}
	_29317_vec._field__buffer.len=_29317_vec._field__buffer.cap;
	return _29317_vec;
}







std::ostream &operator<<(std::ostream &_Stream, const _11203c360_Vector_15 &_Src) {
	_Stream << "Vector{";
	_Stream << "_buffer: cpp._field__buffer";
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1220fd110_File::_method_is_ok(void) {
	jule::Int _1817_err;
	std::tie(std::ignore,_1817_err) = _111613f90_stat((*this)._field__path);
	return _1817_err == 0LLU;
}



inline jule::Str _1220fd110_File::_method_path(void) {
	return (*this)._field__path;
}



inline jule::Str _1220fd110_File::_method_dir(void) {
	return _131739f50_dir((*this)._field__path);
}



inline jule::Str _1220fd110_File::_method_name(void) {
	return _131739f50_base((*this)._field__path);
}



inline jule::Uintptr _1220fd110_File::_method_addr(void) {
	return ((jule::Uintptr)((&((*this)))));
}



inline _11203c360_Vector_0 _1220fd110_File::_method_tokens(void) {
	return (*this)._field__tokens;
}







std::ostream &operator<<(std::ostream &_Stream, const _1220fd110_File &_Src) {
	_Stream << "File{";
	_Stream << "_path:" << _Src._field__path << ", ";
	_Stream << "_tokens:" << _Src._field__tokens;
	_Stream << "}";
	return _Stream;
}



inline void _1116b7f10_Lex::_method_push_err(jule::Str _40727_key,jule::Slice<jule::Any> _40737_args) {
	(*this)._field_errors=append((*this)._field_errors,jule::Slice<_1316b4080_Log>({_1116b7f10_make_err((*this)._field_row,(*this)._field_column,(*this)._field_file,_40727_key,_40737_args)}));
}



inline void _1116b7f10_Lex::_method_push_err_tok(_111613f20_Token _41231_token,jule::Str _41245_key) {
	(*this)._field_errors=append((*this)._field_errors,jule::Slice<_1316b4080_Log>({_1116b7f10_make_err(_41231_token._field_row,_41231_token._field_column,(*this)._field_file,_41245_key,jule::Slice<jule::Any>({}))}));
}



inline void _1116b7f10_Lex::_method_lex(void) {
	(*this)._field_errors=nullptr;
	(*this)._method_new_line();
	_iter_begin_4627617536:;
	if (!((*this)._field_pos < (*this)._field_data.len())) { goto _iter_end_4627617536; }
	{
		_111613f20_Token _42221_token = (*this)._method_token();
		(*this)._field_first_token_of_line=false;
		if (_42221_token._field_id != 0LLU) {
			(*this)._field_tokens._method_push(_42221_token);
		}
	}
	_iter_next_4627617536:;
	goto _iter_begin_4627617536;
	_iter_end_4627617536:;
	(*this)._field_data=nullptr;
}



inline jule::Str _1116b7f10_Lex::_method_id(jule::Slice<jule::U8> _43321_ln) {
	if (_43321_ln.len() == 0LL) {
		return jule::Str("", 0);
	}
	if ((_43321_ln[static_cast<jule::Int>(0LL)] != '_') && (!(_111613f20_is_letter(static_cast<jule::I32>(_43321_ln[static_cast<jule::Int>(0LL)]))))) {
		return jule::Str("", 0);
	}
	{
		auto __julec_range_expr = _43321_ln;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1116b7f10_i = 0;
			jule::U8 _1116b7f10_r = *__julec_range_begin;
			_iter_begin_4627633696:;
			{
				if (((_1116b7f10_r != '_') && (!(_111613f20_is_decimal(static_cast<jule::U8>(_1116b7f10_r))))) && (!(_111613f20_is_letter(_1116b7f10_r)))) {
					return static_cast<jule::Str>(_43321_ln.slice(0LL,static_cast<jule::Int>(_1116b7f10_i)));
				}
				((*this)._field_pos)++;
			}
			_iter_next_4627633696:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1116b7f10_i; _1116b7f10_r = *__julec_range_begin; goto _iter_begin_4627633696; }
			_iter_end_4627633696:;
		}
	}
	return static_cast<jule::Str>(_43321_ln);
}



inline jule::Slice<jule::U8> _1116b7f10_Lex::_method_resume(void) {
	jule::Int _45417_i = (*this)._field_pos;
	_iter_begin_4627642560:;
	if (!(_45417_i < (*this)._field_data.len())) { goto _iter_end_4627642560; }
	{
		jule::I32 _45617_r = static_cast<jule::I32>((*this)._field_data[static_cast<jule::Int>(_45417_i)]);
		if (_111613f20_is_space(_45617_r)) {
			((*this)._field_pos)++;
			{
				auto _match_expr{ _45617_r };
				if (!(('\n') == _match_expr)) { goto _case_end_4627648912; }
				_case_begin_4627648912:;
				{
					(*this)._method_new_line();
				}
				goto _match_end_4627647344;
				_case_end_4627648912:;
				if (!(('\t') == _match_expr)) { goto _case_end_4627649584; }
				_case_begin_4627649584:;
				{
					(*this)._field_column+=8LL;
				}
				goto _match_end_4627647344;
				_case_end_4627649584:;
				_case_begin_4627648016:;
				{
					((*this)._field_column)++;
				}
				goto _match_end_4627647344;
				_case_end_4627648016:;
				_match_end_4627647344:;
			}
			goto _iter_next_4627642560;
		}
		jule::Int _46721_j = _45417_i;
		_iter_begin_4627646352:;
		if (!(_46721_j < (*this)._field_data.len())) { goto _iter_end_4627646352; }
		{
			jule::U8 _46921_r = (*this)._field_data[static_cast<jule::Int>(_46721_j)];
			if (_46921_r == '\n') {
				goto _iter_end_4627646352;
			}
		}
		_iter_next_4627646352:;
		(_46721_j)++;
		goto _iter_begin_4627646352;
		_iter_end_4627646352:;
		return (*this)._field_data.slice(static_cast<jule::Int>(_45417_i),static_cast<jule::Int>(_46721_j));
	}
	_iter_next_4627642560:;
	(_45417_i)++;
	goto _iter_begin_4627642560;
	_iter_end_4627642560:;
	return nullptr;
}



inline void _1116b7f10_Lex::_method_lex_line_comment(_111613f20_Token& _48040_token) {
	jule::Int _48113_start = (*this)._field_pos;
	(*this)._field_pos+=2LL;
	_iter_begin_4627662240:;
	if (!((*this)._field_pos < (*this)._field_data.len())) { goto _iter_end_4627662240; }
	{
		jule::U8 _48517_r = (*this)._field_data[static_cast<jule::Int>((*this)._field_pos)];
		if ((_48517_r == '\n') || (_48517_r == '\r')) {
			if ((*this)._field_first_token_of_line) {
				_48040_token._field_id=18LLU;
				_48040_token._field_kind=static_cast<jule::Str>((*this)._field_data.slice(static_cast<jule::Int>(_48113_start),static_cast<jule::Int>((*this)._field_pos)));
			}
			return;
		}
	}
	_iter_next_4627662240:;
	((*this)._field_pos)++;
	goto _iter_begin_4627662240;
	_iter_end_4627662240:;
	if ((*this)._field_first_token_of_line) {
		_48040_token._field_id=18LLU;
		_48040_token._field_kind=static_cast<jule::Str>((*this)._field_data.slice(static_cast<jule::Int>(_48113_start)));
	}
}



inline void _1116b7f10_Lex::_method_lex_range_comment(void) {
	(*this)._field_pos+=2LL;
	_iter_begin_4627679200:;
	if (!((*this)._field_pos < (*this)._field_data.len())) { goto _iter_end_4627679200; }
	{
		jule::U8 _50417_r = (*this)._field_data[static_cast<jule::Int>((*this)._field_pos)];
		if (_50417_r == '\r') {
			goto _iter_next_4627679200;
		}
		if (_50417_r == '\n') {
			(*this)._method_new_line();
			goto _iter_next_4627679200;
		}
		(*this)._field_column+=1LL;
		if (((((*this)._field_pos + 1LL) < (*this)._field_data.len()) && (_50417_r == '*')) && ((*this)._field_data[static_cast<jule::Int>((*this)._field_pos + 1LL)] == '/')) {
			(*this)._field_column+=2LL;
			(*this)._field_pos+=2LL;
			return;
		}
	}
	_iter_next_4627679200:;
	((*this)._field_pos)++;
	goto _iter_begin_4627679200;
	_iter_end_4627679200:;
	(*this)._method_push_err(jule::Str("missing_block_comment", 21),jule::Slice<jule::Any>({}));
}



inline jule::Str _1116b7f10_Lex::_method_num(jule::Slice<jule::U8> _52322_txt) {
	jule::Str _52337_lit = jule::Str();
	_52337_lit=_1116b7f10_hex_num(_52322_txt);
	if (_52337_lit != jule::Str("", 0)) {
		goto _julec_label_end;
	}
	_52337_lit=_1116b7f10_octal_num(_52322_txt);
	if (_52337_lit != jule::Str("", 0)) {
		goto _julec_label_end;
	}
	_52337_lit=_1116b7f10_binary_num(_52322_txt);
	if (_52337_lit != jule::Str("", 0)) {
		goto _julec_label_end;
	}
	_52337_lit=_1116b7f10_common_num(_52322_txt);
	_julec_label_end:;
	(*this)._field_pos+=static_cast<jule::I64>(_52337_lit.len());
	return _52337_lit;
}



inline jule::Str _1116b7f10_Lex::_method_escape_seq(jule::Slice<jule::U8> _54229_txt) {
	jule::Str _54317_seq = jule::Str("", 0);
	if (_54229_txt.len() < 2LL) {
		goto _julec_label_end;
	}
	{
		auto _match_expr{ _54229_txt[static_cast<jule::Int>(1LL)] };
		if (!(('\\') == _match_expr || ('\'') == _match_expr || ('\"') == _match_expr || ('a') == _match_expr || ('b') == _match_expr || ('f') == _match_expr || ('n') == _match_expr || ('r') == _match_expr || ('t') == _match_expr || ('v') == _match_expr)) { goto _case_end_4627717424; }
		_case_begin_4627717424:;
		{
			(*this)._field_pos+=2LL;
			return static_cast<jule::Str>(_54229_txt.slice(0LL,static_cast<jule::Int>(2LL)));
		}
		goto _match_end_4627715200;
		_case_end_4627717424:;
		if (!(('U') == _match_expr)) { goto _case_end_4627716736; }
		_case_begin_4627716736:;
		{
			_54317_seq=_1116b7f10_big_unicode_point_escape(_54229_txt);
		}
		goto _match_end_4627715200;
		_case_end_4627716736:;
		if (!(('u') == _match_expr)) { goto _case_end_4627717168; }
		_case_begin_4627717168:;
		{
			_54317_seq=_1116b7f10_little_unicode_point_escape(_54229_txt);
		}
		goto _match_end_4627715200;
		_case_end_4627717168:;
		if (!(('x') == _match_expr)) { goto _case_end_4627715840; }
		_case_begin_4627715840:;
		{
			_54317_seq=_1116b7f10_hex_byte_escape(_54229_txt);
		}
		goto _match_end_4627715200;
		_case_end_4627715840:;
		_case_begin_4627714480:;
		{
			_54317_seq=_1116b7f10_byte_escape(_54229_txt);
		}
		goto _match_end_4627715200;
		_case_end_4627714480:;
		_match_end_4627715200:;
	}
	_julec_label_end:;
	if (_54317_seq == jule::Str("", 0)) {
		((*this)._field_pos)++;
		(*this)._method_push_err(jule::Str("invalid_escape_sequence", 23),jule::Slice<jule::Any>({}));
		return jule::Str("", 0);
	}
	(*this)._field_pos+=static_cast<jule::I64>(_54317_seq.len());
	return _54317_seq;
}



inline jule::Str _1116b7f10_Lex::_method_get_rune(jule::Slice<jule::U8> _57627_txt,jule::Bool _57640_raw) {
	if ((!(_57640_raw)) && (_57627_txt[static_cast<jule::Int>(0LL)] == '\\')) {
		return (*this)._method_escape_seq(_57627_txt);
	}
	jule::I32 _58114_r;
	jule::Int _58117_n;
	std::tie(_58114_r,_58117_n) = _1220fe860_decode_rune(_57627_txt);
	(*this)._field_pos+=_58117_n;
	return static_cast<jule::Str>(_58114_r);
}



inline jule::Str _1116b7f10_Lex::_method_lex_rune(jule::Slice<jule::U8> _58627_txt) {
	jule::Str _58717_run = jule::Str("'", 1);
	((*this)._field_column)++;
	jule::Int _58917_n = 0LL;
	jule::Int _59017_i = 1LL;
	_iter_begin_4627741376:;
	if (!(_59017_i < _58627_txt.len())) { goto _iter_end_4627741376; }
	{
		if (_58627_txt[static_cast<jule::Int>(_59017_i)] == '\r') {
			goto _iter_next_4627741376;
		}
		if (_58627_txt[static_cast<jule::Int>(_59017_i)] == '\n') {
			(*this)._method_push_err(jule::Str("missing_rune_end", 16),jule::Slice<jule::Any>({}));
			((*this)._field_pos)++;
			(*this)._method_new_line();
			return jule::Str("", 0);
		}
		jule::Str _60217_r = (*this)._method_get_rune(_58627_txt.slice(static_cast<jule::Int>(_59017_i)),false);
		_58717_run+=_60217_r;
		jule::I64 _60417_length = _60217_r.len();
		(*this)._field_column+=_60417_length;
		if (_60217_r == jule::Str("'", 1)) {
			((*this)._field_pos)++;
			goto _iter_end_4627741376;
		}
		if (_60417_length > 1LL) {
			_59017_i+=_60417_length - 1LL;
		}
		(_58917_n)++;
	}
	_iter_next_4627741376:;
	(_59017_i)++;
	goto _iter_begin_4627741376;
	_iter_end_4627741376:;
	if (_58917_n == 0LL) {
		(*this)._method_push_err(jule::Str("rune_empty", 10),jule::Slice<jule::Any>({}));
	} else if (_58917_n > 1LL) {
		(*this)._method_push_err(jule::Str("rune_overflow", 13),jule::Slice<jule::Any>({}));
	}
	return _58717_run;
}



inline jule::Str _1116b7f10_Lex::_method_lex_str(void) {
	jule::Str _62617_s = jule::Str("", 0);
	jule::U8 _62713_mark = (*this)._field_data[static_cast<jule::Int>((*this)._field_pos)];
	((*this)._field_pos)++;
	jule::Bool _62913_raw = _62713_mark == '`';
	_62617_s+=static_cast<jule::Str>(_62713_mark);
	((*this)._field_column)++;
	_iter_begin_4627768992:;
	if (!((*this)._field_pos < (*this)._field_data.len())) { goto _iter_end_4627768992; }
	{
		jule::U8 _63417_ch = (*this)._field_data[static_cast<jule::Int>((*this)._field_pos)];
		if (_63417_ch == '\r') {
			goto _iter_next_4627768992;
		}
		if (_63417_ch == '\n') {
			(*this)._method_new_line();
			if ((!(_62913_raw))) {
				(*this)._method_push_err(jule::Str("missing_string_end", 18),jule::Slice<jule::Any>({}));
				((*this)._field_pos)++;
				return jule::Str("", 0);
			}
		}
		jule::Str _64617_r = (*this)._method_get_rune((*this)._field_data.slice(static_cast<jule::Int>((*this)._field_pos)),_62913_raw);
		_62617_s+=_64617_r;
		(*this)._field_column+=static_cast<jule::I64>(_64617_r.len());
		if (_63417_ch == _62713_mark) {
			goto _iter_end_4627768992;
		}
	}
	_iter_next_4627768992:;
	goto _iter_begin_4627768992;
	_iter_end_4627768992:;
	return _62617_s;
}



inline void _1116b7f10_Lex::_method_new_line(void) {
	(*this)._field_first_token_of_line=true;
	((*this)._field_row)++;
	(*this)._field_column=1LL;
}



inline jule::Bool _1116b7f10_Lex::_method_is_op(jule::Slice<jule::U8> _66324_txt,jule::Str _66337_kind,jule::Uint _66348_id,_111613f20_Token& _66366_t) {
	if ((!(_1116b7f10_bytes_has_prefix(_66324_txt,_66337_kind)))) {
		return false;
	}
	_66366_t._field_kind=_66337_kind;
	_66366_t._field_id=_66348_id;
	(*this)._field_pos+=static_cast<jule::I64>(_66337_kind.len());
	return true;
}



inline jule::Bool _1116b7f10_Lex::_method_lex_basic_ops(jule::Slice<jule::U8> _67432_txt,_111613f20_Token& _67450_tok) {
	{
		auto __julec_range_expr = _1116b7f10_BASIC_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_1116b7f10_KindPair _1116b7f10_pair = *__julec_range_begin;
			_iter_begin_4627805392:;
			{
				if ((*this)._method_is_op(_67432_txt,_1116b7f10_pair._field_kind,_1116b7f10_pair._field_id,_67450_tok)) {
					return true;
				}
			}
			_iter_next_4627805392:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1116b7f10_pair = *__julec_range_begin; goto _iter_begin_4627805392; }
			_iter_end_4627805392:;
		}
	}
	return false;
}



inline jule::Bool _1116b7f10_Lex::_method_lex_id(jule::Slice<jule::U8> _68425_txt,_111613f20_Token& _68443_t) {
	jule::Str _68513_lex = (*this)._method_id(_68425_txt);
	if (_68513_lex == jule::Str("", 0)) {
		return false;
	}
	_68443_t._field_kind=_68513_lex;
	_68443_t._field_id=2LLU;
	return true;
}



inline jule::Bool _1116b7f10_Lex::_method_lex_num(jule::Slice<jule::U8> _69526_txt,_111613f20_Token& _69544_t) {
	jule::Str _69613_lex = (*this)._method_num(_69526_txt);
	if (_69613_lex == jule::Str("", 0)) {
		return false;
	}
	_69544_t._field_kind=_69613_lex;
	_69544_t._field_id=6LLU;
	return true;
}



inline _111613f20_Token _1116b7f10_Lex::_method_token(void) {
	_111613f20_Token _70817_t = _111613f20_Token((*this)._field_file,jule::Int(),jule::Int(),jule::Str(),0LLU);
	jule::Slice<jule::U8> _71013_txt = (*this)._method_resume();
	if (_71013_txt == nullptr) {
		return _70817_t;
	}
	_70817_t._field_column=(*this)._field_column;
	_70817_t._field_row=(*this)._field_row;
	{
		if (!(((*this)._method_lex_num(_71013_txt,_70817_t)))) { goto _case_end_4627837568; }
		goto _match_end_4627830800;
		_case_end_4627837568:;
		if (!((_71013_txt[static_cast<jule::Int>(0LL)] == '\''))) { goto _case_end_4627834608; }
		_case_begin_4627834608:;
		{
			_70817_t._field_kind=(*this)._method_lex_rune(_71013_txt);
			_70817_t._field_id=6LLU;
			return _70817_t;
		}
		goto _match_end_4627830800;
		_case_end_4627834608:;
		if (!(((_71013_txt[static_cast<jule::Int>(0LL)] == '\"') || (_71013_txt[static_cast<jule::Int>(0LL)] == '`')))) { goto _case_end_4627831760; }
		_case_begin_4627831760:;
		{
			_70817_t._field_kind=(*this)._method_lex_str();
			_70817_t._field_id=6LLU;
			return _70817_t;
		}
		goto _match_end_4627830800;
		_case_end_4627831760:;
		if (!((_1116b7f10_bytes_has_prefix(_71013_txt,jule::Str("//", 2))))) { goto _case_end_4627831872; }
		_case_begin_4627831872:;
		{
			(*this)._method_lex_line_comment(_70817_t);
			return _70817_t;
		}
		goto _match_end_4627830800;
		_case_end_4627831872:;
		if (!((_1116b7f10_bytes_has_prefix(_71013_txt,jule::Str("/*", 2))))) { goto _case_end_4627831984; }
		_case_begin_4627831984:;
		{
			(*this)._method_lex_range_comment();
			return _70817_t;
		}
		goto _match_end_4627830800;
		_case_end_4627831984:;
		if (!(((*this)._method_is_op(_71013_txt,jule::Str("(", 1),3LLU,_70817_t)) || ((*this)._method_is_op(_71013_txt,jule::Str(")", 1),3LLU,_70817_t)) || ((*this)._method_is_op(_71013_txt,jule::Str("{", 1),3LLU,_70817_t)) || ((*this)._method_is_op(_71013_txt,jule::Str("}", 1),3LLU,_70817_t)) || ((*this)._method_is_op(_71013_txt,jule::Str("[", 1),3LLU,_70817_t)) || ((*this)._method_is_op(_71013_txt,jule::Str("]", 1),3LLU,_70817_t)) || ((*this)._method_lex_basic_ops(_71013_txt,_70817_t)))) { goto _case_end_4627837728; }
		goto _match_end_4627830800;
		_case_end_4627837728:;
		if (!(((*this)._method_lex_id(_71013_txt,_70817_t)))) { goto _case_end_4627837840; }
		_case_begin_4627837840:;
		{
			{
				auto __julec_range_expr = _1116b7f10_KEYWORDS;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					_1116b7f10_KindPair _1116b7f10_pair = *__julec_range_begin;
					_iter_begin_4627859056:;
					{
						if (_1116b7f10_pair._field_kind == _70817_t._field_kind) {
							_70817_t._field_id=_1116b7f10_pair._field_id;
							goto _iter_end_4627859056;
						}
					}
					_iter_next_4627859056:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _1116b7f10_pair = *__julec_range_begin; goto _iter_begin_4627859056; }
					_iter_end_4627859056:;
				}
			}
		}
		goto _match_end_4627830800;
		_case_end_4627837840:;
		_case_begin_4627831312:;
		{
			jule::I32 _76018_r;
			jule::Int _76021_sz;
			std::tie(_76018_r,_76021_sz) = _1220fe860_decode_rune(_71013_txt);
			(*this)._method_push_err(jule::Str("invalid_token", 13),jule::Slice<jule::Any>({jule::Any(_76018_r)}));
			((*this)._field_column)++;
			(*this)._field_pos+=_76021_sz;
			return _70817_t;
		}
		goto _match_end_4627830800;
		_case_end_4627831312:;
		_match_end_4627830800:;
	}
	(*this)._field_column+=static_cast<jule::I64>(_70817_t._field_kind.len());
	return _70817_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _1116b7f10_Lex &_Src) {
	_Stream << "Lex{";
	_Stream << "first_token_of_line:" << _Src._field_first_token_of_line << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "data:" << _Src._field_data << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1220cb5d0_Ast &_Src) {
	_Stream << "Ast{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "top_directives:" << _Src._field_top_directives << ", ";
	_Stream << "use_decls:" << _Src._field_use_decls << ", ";
	_Stream << "impls:" << _Src._field_impls << ", ";
	_Stream << "comments:" << _Src._field_comments << ", ";
	_Stream << "decls:" << _Src._field_decls;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_11209db80_StructIns> _11209db80_Struct::_method_instance(void) {
	if ((this->self->_field_generics.len() == 0LL) && (this->self->_field_instances.len() == 1LL)) {
		return this->self->_field_instances[static_cast<jule::Int>(0LL)];
	}
	jule::Ref<_11209db80_StructIns> _6717_ins = jule::new_struct<_11209db80_StructIns>(new( std::nothrow ) _11209db80_StructIns(jule::Bool(),this->self,jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_11209db80_FieldIns>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(this->self->_field_fields.len()))),jule::Slice<jule::Ref<_112446fb0_Fn>>::alloc(static_cast<jule::Int>(static_cast<jule::Int>(this->self->_field_methods._method_len()))),jule::Bool(),_112572770_new_reference_stack()));
	{
		auto __julec_range_expr = this->self->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11209db80_i = 0;
			jule::Ref<_11209db80_Field> _11209db80_f = *__julec_range_begin;
			_iter_begin_4637604160:;
			{
				_6717_ins->_field_fields[static_cast<jule::Int>(_11209db80_i)]=_11209db80_f->_method_instance();
				if (jule::real(_11209db80_f->_field_kind->_field_kind) && _1217f7750_is_mut(_11209db80_f->_field_kind->_field_kind)) {
					_6717_ins->_field_has_mut=true;
				}
			}
			_iter_next_4637604160:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11209db80_i; _11209db80_f = *__julec_range_begin; goto _iter_begin_4637604160; }
			_iter_end_4637604160:;
		}
	}
	jule::Int _8117_i = 0LL;
	_iter_begin_4637599344:;
	if (!(_8117_i < this->self->_field_methods._method_len())) { goto _iter_end_4637599344; }
	{
		jule::Ref<_112446fb0_Fn> _8321_f = this->self->_field_methods._method_at(_8117_i);
		jule::Ref<_112446fb0_Fn> _8421_fins = jule::new_struct<_112446fb0_Fn>(new( std::nothrow ) _112446fb0_Fn(_8321_f->_field_sema,_8321_f->_field_token,_8321_f->_field_global,_8321_f->_field_unsafety,_8321_f->_field_public,_8321_f->_field_cpp_linked,_8321_f->_field_statically,_8321_f->_field_ident,_8321_f->_field_directives,_8321_f->_field_doc,_8321_f->_field_scope,_8321_f->_field_generics,_8321_f->_field_result,_8321_f->_field_params,_8321_f->_field_owner,nullptr));
		_6717_ins->_field_methods[static_cast<jule::Int>(_8117_i)]=_8421_fins;
	}
	_iter_next_4637599344:;
	(_8117_i)++;
	goto _iter_begin_4637599344;
	_iter_end_4637599344:;
	return _6717_ins;
}



inline jule::Ref<_11209db80_StructIns> _11209db80_Struct::_method_append_instance(jule::Ref<_11209db80_StructIns> _11038_ins) {
	if (((*this)._field_generics.len() == 0LL) && ((*this)._field_instances.len() == 1LL)) {
		return (*this)._field_instances[static_cast<jule::Int>(0LL)];
	}
	{
		auto __julec_range_expr = (*this)._field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_StructIns> _11209db80_ains = *__julec_range_begin;
			_iter_begin_4637631808:;
			{
				{
					auto __julec_range_expr = _11209db80_ains->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _11209db80_i = 0;
						jule::Ref<_1217f7750_TypeKind> _11209db80_ag = *__julec_range_begin;
						_iter_begin_4637634064:;
						{
							if (_11209db80_ag->_method_equals(_11038_ins->_field_generics[static_cast<jule::Int>(_11209db80_i)])) {
								return _11209db80_ains;
							}
						}
						_iter_next_4637634064:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_11209db80_i; _11209db80_ag = *__julec_range_begin; goto _iter_begin_4637634064; }
						_iter_end_4637634064:;
					}
				}
			}
			_iter_next_4637631808:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11209db80_ains = *__julec_range_begin; goto _iter_begin_4637631808; }
			_iter_end_4637631808:;
		}
	}
	(*this)._field_instances=append((*this)._field_instances,jule::Slice<jule::Ref<_11209db80_StructIns>>({_11038_ins}));
	return jule::new_ref<_11209db80_StructIns>();
}



inline jule::Ref<_112446fb0_Fn> _11209db80_Struct::_method_find_method(jule::Str _13134_ident,jule::Bool _13146_statically) {
	jule::Int _13217_i = 0LL;
	_iter_begin_4637645168:;
	if (!(_13217_i < (*this)._field_methods._method_len())) { goto _iter_end_4637645168; }
	{
		jule::Ref<_112446fb0_Fn> _13421_f = (*this)._field_methods._method_at(_13217_i);
		if ((_13421_f->_field_statically == _13146_statically) && (_13421_f->_field_ident == _13134_ident)) {
			return _13421_f;
		}
	}
	_iter_next_4637645168:;
	(_13217_i)++;
	goto _iter_begin_4637645168;
	_iter_end_4637645168:;
	return jule::new_ref<_112446fb0_Fn>();
}



inline jule::Ref<_11209db80_Field> _11209db80_Struct::_method_find_field(jule::Str _14433_ident) {
	{
		auto __julec_range_expr = (*this)._field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_Field> _11209db80_f = *__julec_range_begin;
			_iter_begin_4637654176:;
			{
				if (_11209db80_f->_field_ident == _14433_ident) {
					return _11209db80_f;
				}
			}
			_iter_next_4637654176:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11209db80_f = *__julec_range_begin; goto _iter_begin_4637654176; }
			_iter_end_4637654176:;
		}
	}
	return jule::new_ref<_11209db80_Field>();
}



inline jule::Bool _11209db80_Struct::_method_is_implements(jule::Ref<_11209e2e0_Trait> _15432_t) {
	{
		auto __julec_range_expr = (*this)._field_implements;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209e2e0_Trait> _11209db80_it = *__julec_range_begin;
			_iter_begin_4637659248:;
			{
				if ((_15432_t).alloc == (_11209db80_it).alloc) {
					return true;
				}
			}
			_iter_next_4637659248:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11209db80_it = *__julec_range_begin; goto _iter_begin_4637659248; }
			_iter_end_4637659248:;
		}
	}
	return false;
}



inline jule::Bool _11209db80_Struct::_method_is_derives(jule::Str _16429_ident) {
	{
		auto __julec_range_expr = (*this)._field_directives;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_111612b20_Directive> _11209db80_d = *__julec_range_begin;
			_iter_begin_4637663584:;
			{
				if (_11209db80_d->_field_tag == jule::Str("derive", 6)) {
					if ((_11209db80_d->_field_args.len() == 1LL) && (_11209db80_d->_field_args[static_cast<jule::Int>(0LL)] == _16429_ident)) {
						return true;
					}
				}
			}
			_iter_next_4637663584:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11209db80_d = *__julec_range_begin; goto _iter_begin_4637663584; }
			_iter_end_4637663584:;
		}
	}
	return false;
}



inline jule::Bool _11209db80_Struct::_method_is_uses(jule::Ref<_11209db80_Struct> _17626_s) {
	{
		auto __julec_range_expr = (*this)._field_uses;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_Struct> _11209db80_u = *__julec_range_begin;
			_iter_begin_4637671392:;
			{
				_iter_begin_4637673264:;
				if (!((_17626_s).alloc == (_11209db80_u).alloc)) { goto _iter_end_4637673264; }
				{
					return true;
				}
				_iter_next_4637673264:;
				goto _iter_begin_4637673264;
				_iter_end_4637673264:;
			}
			_iter_next_4637671392:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11209db80_u = *__julec_range_begin; goto _iter_begin_4637671392; }
			_iter_end_4637671392:;
		}
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _11209db80_Struct &_Src) {
	_Stream << "Struct{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "depends:" << _Src._field_depends << ", ";
	_Stream << "uses:" << _Src._field_uses << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "implements:" << _Src._field_implements << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}



inline jule::Int _112572770_ReferenceStack::_method_len(void) {
	return static_cast<jule::Int>((*this)._field_buffer._method_len());
}



inline jule::Any _112572770_ReferenceStack::_method_at(jule::Int _5125_i) {
	return (*this)._field_buffer._method_at(_5125_i);
}



inline void _112572770_ReferenceStack::_method_push(jule::Any _5631_ref) {
	(*this)._field_buffer._method_push(_5631_ref);
}



inline void _112572770_ReferenceStack::_method_push_front(jule::Any _6137_ref) {
	(*this)._field_buffer._method_push_front(_6137_ref);
}



inline void _112572770_ReferenceStack::_method_remove(jule::Int _6629_i) {
	(*this)._field_buffer._method_remove_range(_6629_i,1LL);
}



inline jule::Bool _112572770_ReferenceStack::_method_exist_0(jule::Ref<_1320e22c0_Var> _7127_t) {
	jule::Int _7217_i = 0LL;
	_iter_begin_4642366800:;
	if (!(_7217_i < (*this)._method_len())) { goto _iter_end_4642366800; }
	{
		jule::Any _7417_ref = (&((*this)._field_buffer))->_method_at(_7217_i);
		{
			auto _match_expr{ _7417_ref };
			if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4642371296; }
			_case_begin_4642371296:;
			{
				if ((_7417_ref.operator jule::Ref<_1320e22c0_Var>()).alloc == (_7127_t).alloc) {
					return true;
				}
			}
			goto _match_end_4642370256;
			_case_end_4642371296:;
			_match_end_4642370256:;
		}
	}
	_iter_next_4642366800:;
	(_7217_i)++;
	goto _iter_begin_4642366800;
	_iter_end_4642366800:;
	return false;
}

inline jule::Bool _112572770_ReferenceStack::_method_exist_1(jule::Ref<_112446fb0_FnIns> _7127_t) {
	jule::Int _7217_i = 0LL;
	_iter_begin_4642383488:;
	if (!(_7217_i < (*this)._method_len())) { goto _iter_end_4642383488; }
	{
		jule::Any _7417_ref = (&((*this)._field_buffer))->_method_at(_7217_i);
		{
			auto _match_expr{ _7417_ref };
			if (!(_match_expr.type_is<jule::Ref<_112446fb0_FnIns>>())) { goto _case_end_4642387984; }
			_case_begin_4642387984:;
			{
				if ((_7417_ref.operator jule::Ref<_112446fb0_FnIns>()).alloc == (_7127_t).alloc) {
					return true;
				}
			}
			goto _match_end_4642386944;
			_case_end_4642387984:;
			_match_end_4642386944:;
		}
	}
	_iter_next_4642383488:;
	(_7217_i)++;
	goto _iter_begin_4642383488;
	_iter_end_4642383488:;
	return false;
}

inline jule::Bool _112572770_ReferenceStack::_method_exist_2(jule::Ref<_11209db80_StructIns> _7127_t) {
	jule::Int _7217_i = 0LL;
	_iter_begin_4642433440:;
	if (!(_7217_i < (*this)._method_len())) { goto _iter_end_4642433440; }
	{
		jule::Any _7417_ref = (&((*this)._field_buffer))->_method_at(_7217_i);
		{
			auto _match_expr{ _7417_ref };
			if (!(_match_expr.type_is<jule::Ref<_11209db80_StructIns>>())) { goto _case_end_4642437936; }
			_case_begin_4642437936:;
			{
				if ((_7417_ref.operator jule::Ref<_11209db80_StructIns>()).alloc == (_7127_t).alloc) {
					return true;
				}
			}
			goto _match_end_4642436896;
			_case_end_4642437936:;
			_match_end_4642436896:;
		}
	}
	_iter_next_4642433440:;
	(_7217_i)++;
	goto _iter_begin_4642433440;
	_iter_end_4642433440:;
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _112572770_ReferenceStack &_Src) {
	_Stream << "ReferenceStack{";
	_Stream << "buffer:" << _Src._field_buffer;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1126288e0_Scope &_Src) {
	_Stream << "Scope{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}



inline jule::Ref<_11265fb90_ImportInfo> _1320e2330_SymbolTable::_method_find_package(jule::Str _2635_ident) {
	jule::Int _2717_i = 0LL;
	_iter_begin_4640946160:;
	if (!(_2717_i < (*this)._field_imports._method_len())) { goto _iter_end_4640946160; }
	{
		jule::Ref<_11265fb90_ImportInfo> _2921_pkg = (*this)._field_imports._method_at(_2717_i);
		if (_2921_pkg->_field_ident == _2635_ident) {
			return _2921_pkg;
		}
	}
	_iter_next_4640946160:;
	(_2717_i)++;
	goto _iter_begin_4640946160;
	_iter_end_4640946160:;
	return jule::new_ref<_11265fb90_ImportInfo>();
}



inline jule::Ref<_11265fb90_ImportInfo> _1320e2330_SymbolTable::_method_select_package(jule::Fn<jule::Bool(jule::Ref<_11265fb90_ImportInfo>)> _4037_selector) {
	if (_4037_selector == nullptr) {
		return jule::new_ref<_11265fb90_ImportInfo>();
	}
	jule::Int _4517_i = 0LL;
	_iter_begin_4640953760:;
	if (!(_4517_i < (*this)._field_imports._method_len())) { goto _iter_end_4640953760; }
	{
		jule::Ref<_11265fb90_ImportInfo> _4721_pkg = (*this)._field_imports._method_at(_4517_i);
		if (_4037_selector(_4721_pkg)) {
			return _4721_pkg;
		}
	}
	_iter_next_4640953760:;
	(_4517_i)++;
	goto _iter_begin_4640953760;
	_iter_end_4640953760:;
	return jule::new_ref<_11265fb90_ImportInfo>();
}



inline jule::Ref<_1320e22c0_Var> _1320e2330_SymbolTable::_method_find_var(jule::Str _5731_ident,jule::Bool _5743_cpp_linked) {
	return (*this)._method___find_var(_5731_ident,_5743_cpp_linked,false);
}



inline jule::Ref<_1217f7750_TypeAlias> _1320e2330_SymbolTable::_method_find_type_alias(jule::Str _6338_ident,jule::Bool _6350_cpp_linked) {
	return (*this)._method___find_type_alias(_6338_ident,_6350_cpp_linked,false);
}



inline jule::Ref<_11209db80_Struct> _1320e2330_SymbolTable::_method_find_struct(jule::Str _6934_ident,jule::Bool _6946_cpp_linked) {
	jule::Int _7017_i = 0LL;
	_iter_begin_4640969104:;
	if (!(_7017_i < (*this)._field_structs._method_len())) { goto _iter_end_4640969104; }
	{
		jule::Ref<_11209db80_Struct> _7221_s = (*this)._field_structs._method_at(_7017_i);
		if ((_7221_s->_field_ident == _6934_ident) && (_7221_s->_field_cpp_linked == _6946_cpp_linked)) {
			return _7221_s;
		}
	}
	_iter_next_4640969104:;
	(_7017_i)++;
	goto _iter_begin_4640969104;
	_iter_end_4640969104:;
	return jule::new_ref<_11209db80_Struct>();
}



inline jule::Ref<_112446fb0_Fn> _1320e2330_SymbolTable::_method_find_fn(jule::Str _8230_ident,jule::Bool _8242_cpp_linked) {
	jule::Int _8317_i = 0LL;
	_iter_begin_4640977904:;
	if (!(_8317_i < (*this)._field_funcs._method_len())) { goto _iter_end_4640977904; }
	{
		jule::Ref<_112446fb0_Fn> _8521_f = (*this)._field_funcs._method_at(_8317_i);
		if ((_8521_f->_field_ident == _8230_ident) && (_8521_f->_field_cpp_linked == _8242_cpp_linked)) {
			return _8521_f;
		}
	}
	_iter_next_4640977904:;
	(_8317_i)++;
	goto _iter_begin_4640977904;
	_iter_end_4640977904:;
	return jule::new_ref<_112446fb0_Fn>();
}



inline jule::Ref<_11209e2e0_Trait> _1320e2330_SymbolTable::_method_find_trait(jule::Str _9533_ident) {
	jule::Int _9617_i = 0LL;
	_iter_begin_4640985408:;
	if (!(_9617_i < (*this)._field_traits._method_len())) { goto _iter_end_4640985408; }
	{
		jule::Ref<_11209e2e0_Trait> _9821_t = (*this)._field_traits._method_at(_9617_i);
		if (_9821_t->_field_ident == _9533_ident) {
			return _9821_t;
		}
	}
	_iter_next_4640985408:;
	(_9617_i)++;
	goto _iter_begin_4640985408;
	_iter_end_4640985408:;
	return jule::new_ref<_11209e2e0_Trait>();
}



inline jule::Ref<_11261eaf0_Enum> _1320e2330_SymbolTable::_method_find_enum(jule::Str _10832_ident) {
	jule::Int _10917_i = 0LL;
	_iter_begin_4640992480:;
	if (!(_10917_i < (*this)._field_enums._method_len())) { goto _iter_end_4640992480; }
	{
		jule::Ref<_11261eaf0_Enum> _11121_e = (*this)._field_enums._method_at(_10917_i);
		if (_11121_e->_field_ident == _10832_ident) {
			return _11121_e;
		}
	}
	_iter_next_4640992480:;
	(_10917_i)++;
	goto _iter_begin_4640992480;
	_iter_end_4640992480:;
	return jule::new_ref<_11261eaf0_Enum>();
}



inline jule::Ref<_1320e22c0_Var> _1320e2330_SymbolTable::_method___find_var(jule::Str _12129_ident,jule::Bool _12141_cpp_linked,jule::Bool _12159_reverse) {
	if (_12159_reverse) {
		jule::Int _12321_i = (*this)._field_vars._method_len() - 1LL;
		_iter_begin_4642069952:;
		if (!(_12321_i >= 0LL)) { goto _iter_end_4642069952; }
		{
			jule::Ref<_1320e22c0_Var> _12525_v = (*this)._field_vars._method_at(_12321_i);
			if ((_12525_v->_field_ident == _12129_ident) && (_12525_v->_field_cpp_linked == _12141_cpp_linked)) {
				return _12525_v;
			}
		}
		_iter_next_4642069952:;
		(_12321_i)--;
		goto _iter_begin_4642069952;
		_iter_end_4642069952:;
	} else {
		jule::Int _13121_i = 0LL;
		_iter_begin_4642073168:;
		if (!(_13121_i < (*this)._field_vars._method_len())) { goto _iter_end_4642073168; }
		{
			jule::Ref<_1320e22c0_Var> _13325_v = (*this)._field_vars._method_at(_13121_i);
			if ((_13325_v->_field_ident == _12129_ident) && (_13325_v->_field_cpp_linked == _12141_cpp_linked)) {
				return _13325_v;
			}
		}
		_iter_next_4642073168:;
		(_13121_i)++;
		goto _iter_begin_4642073168;
		_iter_end_4642073168:;
	}
	return jule::new_ref<_1320e22c0_Var>();
}



inline jule::Ref<_1217f7750_TypeAlias> _1320e2330_SymbolTable::_method___find_type_alias(jule::Str _14236_ident,jule::Bool _14248_cpp_linked,jule::Bool _14266_reverse) {
	if (_14266_reverse) {
		jule::Int _14421_i = (*this)._field_type_aliases._method_len() - 1LL;
		_iter_begin_4642086720:;
		if (!(_14421_i >= 0LL)) { goto _iter_end_4642086720; }
		{
			jule::Ref<_1217f7750_TypeAlias> _14625_ta = (*this)._field_type_aliases._method_at(_14421_i);
			if ((_14625_ta->_field_ident == _14236_ident) && (_14625_ta->_field_cpp_linked == _14248_cpp_linked)) {
				return _14625_ta;
			}
		}
		_iter_next_4642086720:;
		(_14421_i)--;
		goto _iter_begin_4642086720;
		_iter_end_4642086720:;
	} else {
		jule::Int _15221_i = 0LL;
		_iter_begin_4642089984:;
		if (!(_15221_i < (*this)._field_type_aliases._method_len())) { goto _iter_end_4642089984; }
		{
			jule::Ref<_1217f7750_TypeAlias> _15425_ta = (*this)._field_type_aliases._method_at(_15221_i);
			if ((_15425_ta->_field_ident == _14236_ident) && (_15425_ta->_field_cpp_linked == _14248_cpp_linked)) {
				return _15425_ta;
			}
		}
		_iter_next_4642089984:;
		(_15221_i)++;
		goto _iter_begin_4642089984;
		_iter_end_4642089984:;
	}
	return jule::new_ref<_1217f7750_TypeAlias>();
}



inline jule::Any _1320e2330_SymbolTable::_method_def_by_ident(jule::Str _16531_ident,jule::Bool _16543_cpp_linked) {
	jule::Int _16617_i = 0LL;
	_iter_begin_4642099920:;
	if (!(_16617_i < (*this)._field_vars._method_len())) { goto _iter_end_4642099920; }
	{
		jule::Ref<_1320e22c0_Var> _16821_v = (*this)._field_vars._method_at(_16617_i);
		if ((_16821_v->_field_ident == _16531_ident) && (_16821_v->_field_cpp_linked == _16543_cpp_linked)) {
			return jule::Any(_16821_v);
		}
	}
	_iter_next_4642099920:;
	(_16617_i)++;
	goto _iter_begin_4642099920;
	_iter_end_4642099920:;
	_16617_i=0LL;
	_iter_begin_4642101168:;
	if (!(_16617_i < (*this)._field_type_aliases._method_len())) { goto _iter_end_4642101168; }
	{
		jule::Ref<_1217f7750_TypeAlias> _17621_ta = (*this)._field_type_aliases._method_at(_16617_i);
		if ((_17621_ta->_field_ident == _16531_ident) && (_17621_ta->_field_cpp_linked == _16543_cpp_linked)) {
			return jule::Any(_17621_ta);
		}
	}
	_iter_next_4642101168:;
	(_16617_i)++;
	goto _iter_begin_4642101168;
	_iter_end_4642101168:;
	_16617_i=0LL;
	_iter_begin_4642107616:;
	if (!(_16617_i < (*this)._field_structs._method_len())) { goto _iter_end_4642107616; }
	{
		jule::Ref<_11209db80_Struct> _18421_s = (*this)._field_structs._method_at(_16617_i);
		if ((_18421_s->_field_ident == _16531_ident) && (_18421_s->_field_cpp_linked == _16543_cpp_linked)) {
			return jule::Any(_18421_s);
		}
	}
	_iter_next_4642107616:;
	(_16617_i)++;
	goto _iter_begin_4642107616;
	_iter_end_4642107616:;
	_16617_i=0LL;
	_iter_begin_4642113536:;
	if (!(_16617_i < (*this)._field_funcs._method_len())) { goto _iter_end_4642113536; }
	{
		jule::Ref<_112446fb0_Fn> _19221_f = (*this)._field_funcs._method_at(_16617_i);
		if ((_19221_f->_field_ident == _16531_ident) && (_19221_f->_field_cpp_linked == _16543_cpp_linked)) {
			return jule::Any(_19221_f);
		}
	}
	_iter_next_4642113536:;
	(_16617_i)++;
	goto _iter_begin_4642113536;
	_iter_end_4642113536:;
	if (_16543_cpp_linked) {
		return jule::Any(nullptr);
	}
	_16617_i=0LL;
	_iter_begin_4642125616:;
	if (!(_16617_i < (*this)._field_traits._method_len())) { goto _iter_end_4642125616; }
	{
		jule::Ref<_11209e2e0_Trait> _20421_t = (*this)._field_traits._method_at(_16617_i);
		if (_20421_t->_field_ident == _16531_ident) {
			return jule::Any(_20421_t);
		}
	}
	_iter_next_4642125616:;
	(_16617_i)++;
	goto _iter_begin_4642125616;
	_iter_end_4642125616:;
	_16617_i=0LL;
	_iter_begin_4642130016:;
	if (!(_16617_i < (*this)._field_enums._method_len())) { goto _iter_end_4642130016; }
	{
		jule::Ref<_11261eaf0_Enum> _21221_e = (*this)._field_enums._method_at(_16617_i);
		if (_21221_e->_field_ident == _16531_ident) {
			return jule::Any(_21221_e);
		}
	}
	_iter_next_4642130016:;
	(_16617_i)++;
	goto _iter_begin_4642130016;
	_iter_end_4642130016:;
	return jule::Any(nullptr);
}



inline jule::Bool _1320e2330_SymbolTable::_method_is_duplicated_ident(jule::Uintptr _22434_itself,jule::Str _22451_ident,jule::Bool _22463_cpp_linked) {
	jule::Int _22517_i = 0LL;
	_iter_begin_4642139888:;
	if (!(_22517_i < (*this)._field_vars._method_len())) { goto _iter_end_4642139888; }
	{
		jule::Ref<_1320e22c0_Var> _22717_v = (&((*this)._field_vars))->_method_at(_22517_i);
		if (((((jule::Uintptr)((_22717_v).alloc)) != _22434_itself) && (_22717_v->_field_ident == _22451_ident)) && (_22717_v->_field_cpp_linked == _22463_cpp_linked)) {
			return true;
		}
	}
	_iter_next_4642139888:;
	(_22517_i)++;
	goto _iter_begin_4642139888;
	_iter_end_4642139888:;
	_22517_i=0LL;
	_iter_begin_4642141072:;
	if (!(_22517_i < (*this)._field_type_aliases._method_len())) { goto _iter_end_4642141072; }
	{
		jule::Ref<_1217f7750_TypeAlias> _23517_ta = (&((*this)._field_type_aliases))->_method_at(_22517_i);
		if (((((jule::Uintptr)((_23517_ta).alloc)) != _22434_itself) && (_23517_ta->_field_ident == _22451_ident)) && (_23517_ta->_field_cpp_linked == _22463_cpp_linked)) {
			return true;
		}
	}
	_iter_next_4642141072:;
	(_22517_i)++;
	goto _iter_begin_4642141072;
	_iter_end_4642141072:;
	_22517_i=0LL;
	_iter_begin_4642148944:;
	if (!(_22517_i < (*this)._field_structs._method_len())) { goto _iter_end_4642148944; }
	{
		jule::Ref<_11209db80_Struct> _24317_s = (&((*this)._field_structs))->_method_at(_22517_i);
		if (((((jule::Uintptr)((_24317_s).alloc)) != _22434_itself) && (_24317_s->_field_ident == _22451_ident)) && (_24317_s->_field_cpp_linked == _22463_cpp_linked)) {
			return true;
		}
	}
	_iter_next_4642148944:;
	(_22517_i)++;
	goto _iter_begin_4642148944;
	_iter_end_4642148944:;
	_22517_i=0LL;
	_iter_begin_4642155280:;
	if (!(_22517_i < (*this)._field_funcs._method_len())) { goto _iter_end_4642155280; }
	{
		jule::Ref<_112446fb0_Fn> _25117_f = (&((*this)._field_funcs))->_method_at(_22517_i);
		if (((((jule::Uintptr)((_25117_f).alloc)) != _22434_itself) && (_25117_f->_field_ident == _22451_ident)) && (_25117_f->_field_cpp_linked == _22463_cpp_linked)) {
			return true;
		}
	}
	_iter_next_4642155280:;
	(_22517_i)++;
	goto _iter_begin_4642155280;
	_iter_end_4642155280:;
	if (_22463_cpp_linked) {
		return false;
	}
	_22517_i=0LL;
	_iter_begin_4642170000:;
	if (!(_22517_i < (*this)._field_traits._method_len())) { goto _iter_end_4642170000; }
	{
		jule::Ref<_11209e2e0_Trait> _26317_t = (&((*this)._field_traits))->_method_at(_22517_i);
		if ((((jule::Uintptr)((_26317_t).alloc)) != _22434_itself) && (_26317_t->_field_ident == _22451_ident)) {
			return true;
		}
	}
	_iter_next_4642170000:;
	(_22517_i)++;
	goto _iter_begin_4642170000;
	_iter_end_4642170000:;
	_22517_i=0LL;
	_iter_begin_4642170144:;
	if (!(_22517_i < (*this)._field_enums._method_len())) { goto _iter_end_4642170144; }
	{
		jule::Ref<_11261eaf0_Enum> _27117_e = (&((*this)._field_enums))->_method_at(_22517_i);
		if ((((jule::Uintptr)((_27117_e).alloc)) != _22434_itself) && (_27117_e->_field_ident == _22451_ident)) {
			return true;
		}
	}
	_iter_next_4642170144:;
	(_22517_i)++;
	goto _iter_begin_4642170144;
	_iter_end_4642170144:;
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1320e2330_SymbolTable &_Src) {
	_Stream << "SymbolTable{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "imports:" << _Src._field_imports << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "type_aliases:" << _Src._field_type_aliases << ", ";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "funcs:" << _Src._field_funcs << ", ";
	_Stream << "traits:" << _Src._field_traits << ", ";
	_Stream << "enums:" << _Src._field_enums << ", ";
	_Stream << "impls:" << _Src._field_impls;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1317ed450_is_surrogate(jule::I32 _6021_r) {
	return (55296LL <= _6021_r) && (_6021_r < 57344LL);
}



inline jule::I32 _1317ed450_decode_rune(jule::I32 _6720_r1,jule::I32 _6730_r2) {
	if ((((55296LL <= _6720_r1) && (_6720_r1 < 56320LL)) && (56320LL <= _6730_r2)) && (_6730_r2 < 57344LL)) {
		return (((_6720_r1 - 55296LL) << 10LL) | (_6730_r2 - 56320LL)) + 65536LL;
	}
	return 65533LL;
}



inline std::tuple<jule::I32,jule::I32> _1317ed450_encode_rune(jule::I32 _7724_r) {
	jule::I32 _7745_r2 = jule::I32();
	jule::I32 _7735_r1 = jule::I32();
	if ((_7724_r < 65536LL) || (_7724_r > 1114111LL)) {
		_7735_r1 = 65533LL;
		_7745_r2 = 65533LL;
		return std::make_tuple(_7735_r1,_7745_r2);
	}
	_7724_r-=65536LL;
	_7735_r1 = static_cast<jule::I32>(55296LL + ((_7724_r >> 10LL) & 1023LL));
	_7745_r2 = static_cast<jule::I32>(56320LL + (_7724_r & 1023LL));
	return std::make_tuple(_7735_r1,_7745_r2);
}



inline jule::Slice<jule::U16> _1317ed450_encode(jule::Slice<jule::I32> _8615_s) {
	jule::I64 _8713_n = _8615_s.len();
	{
		auto __julec_range_expr = _8615_s;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::I32 _1317ed450_v = *__julec_range_begin;
			_iter_begin_4864096784:;
			{
				if (_1317ed450_v >= 65536LL) {
					(_8713_n)++;
				}
			}
			_iter_next_4864096784:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1317ed450_v = *__julec_range_begin; goto _iter_begin_4864096784; }
			_iter_end_4864096784:;
		}
	}
	jule::Slice<jule::U16> _9413_a = jule::Slice<jule::U16>::alloc(static_cast<jule::Int>(_8713_n));
	_8713_n=0LL;
	{
		auto __julec_range_expr = _8615_s;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::I32 _1317ed450_v = *__julec_range_begin;
			_iter_begin_4617488224:;
			{
				{
					if (!(((0LL <= _1317ed450_v) && (_1317ed450_v < 55296LL)) || ((57344LL <= _1317ed450_v) && (_1317ed450_v < 65536LL)))) { goto _case_end_4618826256; }
					_case_begin_4618826256:;
					{
						_9413_a[static_cast<jule::Int>(_8713_n)]=static_cast<jule::U16>(_1317ed450_v);
						(_8713_n)++;
					}
					goto _match_end_4618559312;
					_case_end_4618826256:;
					if (!(((65536LL <= _1317ed450_v) && (_1317ed450_v <= 1114111LL)))) { goto _case_end_4618595712; }
					_case_begin_4618595712:;
					{
						jule::I32 _10418_r1;
						jule::I32 _10422_r2;
						std::tie(_10418_r1,_10422_r2) = _1317ed450_encode_rune(_1317ed450_v);
						_9413_a[static_cast<jule::Int>(_8713_n)]=static_cast<jule::U16>(_10418_r1);
						_9413_a[static_cast<jule::Int>(_8713_n + 1LL)]=static_cast<jule::U16>(_10422_r2);
						_8713_n+=2LL;
					}
					goto _match_end_4618559312;
					_case_end_4618595712:;
					_case_begin_4618565840:;
					{
						_9413_a[static_cast<jule::Int>(_8713_n)]=static_cast<jule::U16>(65533LLU);
						(_8713_n)++;
					}
					goto _match_end_4618559312;
					_case_end_4618565840:;
					_match_end_4618559312:;
				}
			}
			_iter_next_4617488224:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1317ed450_v = *__julec_range_begin; goto _iter_begin_4617488224; }
			_iter_end_4617488224:;
		}
	}
	return _9413_a.slice(0LL,static_cast<jule::Int>(_8713_n));
}



inline jule::Slice<jule::I32> _1317ed450_decode(jule::Slice<jule::U16> _11815_s) {
	jule::Slice<jule::I32> _11913_a = jule::Slice<jule::I32>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_11815_s.len())));
	jule::Int _12013_n = 0LL;
	jule::Int _12113_i = 0LL;
	_iter_begin_4618017984:;
	if (!(_12113_i < _11815_s.len())) { goto _iter_end_4618017984; }
	{
		jule::U16 _12313_r = _11815_s[static_cast<jule::Int>(_12113_i)];
		{
			if (!((_12313_r < 55296LL) || (57344LL <= _12313_r))) { goto _case_end_4617735760; }
			_case_begin_4617735760:;
			{
				_11913_a[static_cast<jule::Int>(_12013_n)]=static_cast<jule::I32>(_12313_r);
			}
			goto _match_end_4617615232;
			_case_end_4617735760:;
			if (!((((((55296LL <= _12313_r) && (_12313_r < 56320LL)) && ((_12113_i + 1LL) < _11815_s.len())) && (56320LL <= _11815_s[static_cast<jule::Int>(_12113_i + 1LL)])) && (_11815_s[static_cast<jule::Int>(_12113_i + 1LL)] < 57344LL)))) { goto _case_end_4617720208; }
			_case_begin_4617720208:;
			{
				_11913_a[static_cast<jule::Int>(_12013_n)]=static_cast<jule::I32>(_1317ed450_decode_rune(static_cast<jule::I32>(_12313_r),static_cast<jule::I32>(_11815_s[static_cast<jule::Int>(_12113_i + 1LL)])));
				(_12113_i)++;
			}
			goto _match_end_4617615232;
			_case_end_4617720208:;
			_case_begin_4617632208:;
			{
				_11913_a[static_cast<jule::Int>(_12013_n)]=65533LL;
			}
			goto _match_end_4617615232;
			_case_end_4617632208:;
			_match_end_4617615232:;
		}
		(_12013_n)++;
	}
	_iter_next_4618017984:;
	(_12113_i)++;
	goto _iter_begin_4618017984;
	_iter_end_4618017984:;
	return _11913_a.slice(0LL,static_cast<jule::Int>(_12013_n));
}



inline jule::Slice<jule::U16> _1317ed450_append_rune(jule::Slice<jule::U16> _14524_a,jule::I32 _14534_r) {
	{
		if (!(((0LL <= _14534_r) && (_14534_r < 55296LL)) || ((57344LL <= _14534_r) && (_14534_r < 65536LL)))) { goto _case_end_4618932368; }
		_case_begin_4618932368:;
		{
			return append(_14524_a,jule::Slice<jule::U16>({static_cast<jule::U16>(_14534_r)}));
		}
		goto _match_end_4618763936;
		_case_end_4618932368:;
		if (!(((65536LL <= _14534_r) && (_14534_r <= 1114111LL)))) { goto _case_end_4618972896; }
		_case_begin_4618972896:;
		{
			jule::I32 _15214_r1;
			jule::I32 _15218_r2;
			std::tie(_15214_r1,_15218_r2) = _1317ed450_encode_rune(_14534_r);
			return append(_14524_a,jule::Slice<jule::U16>({static_cast<jule::U16>(_15214_r1),static_cast<jule::U16>(_15218_r2)}));
		}
		goto _match_end_4618763936;
		_case_end_4618972896:;
		_match_end_4618763936:;
	}
	return append(_14524_a,jule::Slice<jule::U16>({65533LLU}));
}



inline jule::Int _1317134b0_get_last_errno(void) {
	return errno;
}



inline jule::Slice<jule::U16> _1317a9110_utf16_from_str(jule::Str _5023_s) {
	
	jule::Slice<jule::U16> _5613_buf = nullptr;
	jule::Slice<jule::I32> _579_runes = static_cast<jule::Slice<jule::I32>>(_5023_s);
	{
		auto __julec_range_expr = _579_runes;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::I32 _1317a9110_r = *__julec_range_begin;
			_iter_begin_4620021376:;
			{
				if (_1317a9110_r == 0LL) {
					goto _iter_end_4620021376;
				}
				_5613_buf=_1317ed450_append_rune(_5613_buf,_1317a9110_r);
			}
			_iter_next_4620021376:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1317a9110_r = *__julec_range_begin; goto _iter_begin_4620021376; }
			_iter_end_4620021376:;
		}
	}
	return _1317ed450_append_rune(_5613_buf,0LL);
}



inline jule::Str _1317a9110_utf16_to_str(jule::Slice<jule::U16> _7021_s) {
	if (_7021_s == nullptr) {
		return jule::Str("", 0);
	}
	jule::Slice<jule::U16> _7413_code_page = (*((&(_7021_s))));
	{
		auto __julec_range_expr = _7021_s;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1317a9110_i = 0;
			jule::U16 _1317a9110_v = *__julec_range_begin;
			_iter_begin_4620045168:;
			{
				if (_1317a9110_v == 0LL) {
					_7413_code_page=_7413_code_page.slice(static_cast<jule::Int>(0LL),static_cast<jule::Int>(_1317a9110_i));
					goto _iter_end_4620045168;
				}
			}
			_iter_next_4620045168:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1317a9110_i; _1317a9110_v = *__julec_range_begin; goto _iter_begin_4620045168; }
			_iter_end_4620045168:;
		}
	}
	return static_cast<jule::Str>(_1317ed450_decode(_7413_code_page));
}



inline jule::Str _1317a9110_u16_ptr_to_str(jule::U16* _8630_s) {
	if (_8630_s == nullptr) {
		return jule::Str("", 0);
	}
	jule::Slice<jule::U16> _9113_code_page = nullptr;
	jule::Int _9213_i = 0LL;
	_iter_begin_4620054560:;
	{
		jule::U16 _9413_r = static_cast<jule::U16>(_8630_s[static_cast<jule::Int>(_9213_i)]);
		if (_9413_r == 0LL) {
			return static_cast<jule::Str>(_1317ed450_decode(_9113_code_page));
		}
		_9113_code_page=append(_9113_code_page,jule::Slice<jule::U16>({_9413_r}));
	}
	_iter_next_4620054560:;
	(_9213_i)++;
	goto _iter_begin_4620054560;
	_iter_end_4620054560:;
	return jule::Str("", 0);
}



inline jule::Uintptr _1317a9110_get_std_handle(jule::Uintptr _10323_stdh) {
	return ((jule::Uintptr)(GetStdHandle(_10323_stdh)));
}



inline jule::Bool _1317a9110_close_handle(jule::Uintptr _10428_stdh) {
	return CloseHandle(((void*)(_10428_stdh)));
}



inline jule::Int _1317a9110_wstat(jule::U16* _10721_path,struct stat* _10737_stat) {
	return static_cast<jule::Int>(wstat(((wchar_t*)(_10721_path)),_10737_stat));
}



inline jule::Int _1317a9110__wopen(jule::U16* _11222_path,jule::Int _11234_flag,jule::Int _11245_mode) {
	return static_cast<jule::Int>(_wopen(((wchar_t*)((&(_11222_path[static_cast<jule::Int>(0LL)])))),_11234_flag,_11245_mode));
}



inline jule::U32 _1317a9110_get_last_error(void) {
	return static_cast<jule::U32>(GetLastError());
}



inline jule::U32 _1317a9110_get_current_directory(jule::U32 _12137_bufflen,jule::U16* _12155_buff) {
	return static_cast<jule::U32>(GetCurrentDirectoryW(_12137_bufflen,((wchar_t*)(_12155_buff))));
}



inline jule::Bool _1317a9110_set_current_directory(jule::U16* _12737_path) {
	return SetCurrentDirectoryW(((wchar_t*)(_12737_path)));
}



inline jule::Bool _1317a9110_delete_file(jule::U16* _13227_path) {
	return DeleteFileW(((wchar_t*)(_13227_path)));
}



inline jule::Bool _1317a9110_create_directory(jule::U16* _13732_path) {
	return CreateDirectoryW(((wchar_t*)(_13732_path)),nullptr);
}



inline jule::Bool _1317a9110_remove_directory(jule::U16* _14232_path) {
	return RemoveDirectoryW(((wchar_t*)(_14232_path)));
}



inline _WDIR* _1317a9110__wopendir(jule::U16* _14725_path) {
	return _wopendir(((wchar_t*)(_14725_path)));
}



inline struct _wdirent* _1317a9110__wreaddir(_WDIR* _15029_dir) {
	return _wreaddir(_15029_dir);
}



inline jule::Int _1317a9110__wclosedir(_WDIR* _15330_dir) {
	return static_cast<jule::Int>(_wclosedir(_15330_dir));
}



inline jule::U32 _1317a9110_get_full_path_name(jule::U16* _15634_path,jule::U32 _15646_bufflen,jule::U16* _1575_buff,jule::U16** _15717_fname) {
	return static_cast<jule::U32>(GetFullPathNameW(((wchar_t*)(_15634_path)),_15646_bufflen,((wchar_t*)(_1575_buff)),((wchar_t**)(_15717_fname))));
}



inline jule::I64 _1317a9f00_seek(jule::Int _2613_handle,jule::I64 _2626_offset,jule::Int _2639_origin) {
	return static_cast<jule::I64>(lseek(_2613_handle,_2626_offset,_2639_origin));
}



inline jule::Int _1317a9f00_read(jule::Int _3120_handle,void* _3137_buff,jule::Uint _3152_n) {
	return static_cast<jule::Int>(read(_3120_handle,_3137_buff,_3152_n));
}



inline jule::Int _1317a9f00_close(jule::Int _3614_handle) {
	return static_cast<jule::Int>(close(_3614_handle));
}



inline jule::Int _1317a9f00_write(jule::Int _3921_handle,void* _3934_buff,jule::Uint _3949_n) {
	return static_cast<jule::Int>(write(_3921_handle,_3934_buff,_3949_n));
}



inline void _1317a9f00_exit(jule::Int _4413_code) {
	exit(_4413_code);
}



inline jule::Bool _131714a10_is_path_sep(jule::U8 _4720_c) {
	return (_4720_c == 92LL) || (_4720_c == '/');
}



inline jule::Bool _131714a10_is_slash(jule::U8 _5113_c) {
	return (_5113_c == '\\') || (_5113_c == '/');
}



inline jule::U8 _131714a10_to_upper(jule::U8 _5313_c) {
	if (('a' <= _5313_c) && (_5313_c <= 'z')) {
		return _5313_c - 32LL;
	}
	return _5313_c;
}



inline jule::Bool _131714a10_is_abs(jule::Str _6119_path) {
	jule::Int _629_l = _131714a10_volume_name_len(_6119_path);
	if (_629_l == 0LL) {
		return false;
	}
	if (_131714a10_is_slash(_6119_path[static_cast<jule::Int>(0LL)]) && _131714a10_is_slash(_6119_path[static_cast<jule::Int>(1LL)])) {
		return true;
	}
	_6119_path=_6119_path.slice(static_cast<jule::Int>(_629_l));
	if (_6119_path == jule::Str("", 0)) {
		return false;
	}
	return _131714a10_is_slash(_6119_path[static_cast<jule::Int>(0LL)]);
}



inline jule::Int _131714a10_volume_name_len(jule::Str _8120_path) {
	if (_8120_path.len() < 2LL) {
		return 0LL;
	}
	jule::U8 _869_c = _8120_path[static_cast<jule::Int>(0LL)];
	if ((_8120_path[static_cast<jule::Int>(1LL)] == ':') && ((('a' <= _869_c) && (_869_c <= 'z')) || (('A' <= _869_c) && (_869_c <= 'Z')))) {
		return 2LL;
	}
	if ((!(_131714a10_is_slash(_8120_path[static_cast<jule::Int>(0LL)]))) || (!(_131714a10_is_slash(_8120_path[static_cast<jule::Int>(1LL)])))) {
		return 0LL;
	}
	jule::Str _9410_p1;
	jule::Str _9418_rest;
	std::tie(_9410_p1,_9418_rest,std::ignore) = _131714a10_cut_path(_8120_path.slice(static_cast<jule::Int>(2LL)));
	jule::Str _9513_p2 = jule::Str("", 0);
	jule::Bool _9613_ok = false;
	std::tie(_9513_p2,_9418_rest,_9613_ok) = _131714a10_cut_path(_9418_rest);
	if ((!(_9613_ok))) {
		return static_cast<jule::I64>(_8120_path.len());
	}
	if ((_9410_p1 != jule::Str(".", 1)) && (_9410_p1 != jule::Str("?", 1))) {
		return static_cast<jule::I64>((_8120_path.len() - _9418_rest.len()) - 1LL);
	}
	if ((((_9513_p2.len() == 3LL) && (_131714a10_to_upper(_9513_p2[static_cast<jule::Int>(0LL)]) == 'U')) && (_131714a10_to_upper(_9513_p2[static_cast<jule::Int>(1LL)]) == 'N')) && (_131714a10_to_upper(_9513_p2[static_cast<jule::Int>(2LL)]) == 'C')) {
		std::tie(std::ignore,_9418_rest,std::ignore) = _131714a10_cut_path(_9418_rest);
		std::tie(std::ignore,_9418_rest,_9613_ok) = _131714a10_cut_path(_9418_rest);
		if ((!(_9613_ok))) {
			return static_cast<jule::I64>(_8120_path.len());
		}
	}
	return static_cast<jule::I64>((_8120_path.len() - _9418_rest.len()) - 1LL);
}



inline std::tuple<jule::Str,jule::Str,jule::Bool> _131714a10_cut_path(jule::Str _11813_path) {
	jule::Bool _11851_found = jule::Bool();
	jule::Str _11839_after = jule::Str();
	jule::Str _11826_before = jule::Str();
	{
		auto __julec_range_expr = _11813_path;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _131714a10_i = 0;
			_iter_begin_4620195104:;
			{
				if (_131714a10_is_slash(_11813_path[static_cast<jule::Int>(_131714a10_i)])) {
					_11826_before = _11813_path.slice(0LL,static_cast<jule::Int>(_131714a10_i));
					_11839_after = _11813_path.slice(static_cast<jule::Int>(_131714a10_i + 1LL));
					_11851_found = true;
					return std::make_tuple(_11826_before,_11839_after,_11851_found);
				}
			}
			_iter_next_4620195104:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_131714a10_i; goto _iter_begin_4620195104; }
			_iter_end_4620195104:;
		}
	}
	_11826_before = _11813_path;
	_11839_after = jule::Str("", 0);
	_11851_found = false;
	return std::make_tuple(_11826_before,_11839_after,_11851_found);
}



inline std::tuple<jule::Str,jule::Bool> _131714a10_full_path(jule::Str _12714_name) {
	jule::Bool _12738_ok = jule::Bool();
	jule::Str _12727_path = jule::Str();
	jule::Slice<jule::U16> _1289_utf16_name = _1317a9110_utf16_from_str(_12714_name);
	jule::U16* _1299_p = (&(_1289_utf16_name[static_cast<jule::Int>(0LL)]));
	jule::U32 _13013_n = 100LLU;
	_iter_begin_4620227616:;
	{
		jule::Slice<jule::U16> _13217_buff = jule::Slice<jule::U16>::alloc(static_cast<jule::Int>(_13013_n));
		_13013_n=static_cast<jule::U32>(static_cast<jule::U32>(_1317a9110_get_full_path_name(_1299_p,static_cast<jule::U32>(_13217_buff.len()),(&(_13217_buff[static_cast<jule::Int>(0LL)])),nullptr)));
		if (_13013_n == 0LL) {
			_12727_path = jule::Str("", 0);
			_12738_ok = false;
			return std::make_tuple(_12727_path,_12738_ok);
		}
		if (_13013_n <= static_cast<jule::U32>(_13217_buff.len())) {
			_12727_path = _1317a9110_utf16_to_str(_13217_buff.slice(0LL,static_cast<jule::Int>(_13013_n)));
			_12738_ok = true;
			return std::make_tuple(_12727_path,_12738_ok);
		}
	}
	_iter_next_4620227616:;
	goto _iter_begin_4620227616;
	_iter_end_4620227616:;
	_12727_path = jule::Str("", 0);
	_12738_ok = false;
	return std::make_tuple(_12727_path,_12738_ok);
}



inline std::tuple<jule::Str,jule::Bool> _131714a10___abs(jule::Str _14414_path) {
	jule::Bool _14432_ok = jule::Bool();
	if (_14414_path == jule::Str("", 0)) {
		_14414_path=jule::Str(".", 1);
	}
	std::tie(_14414_path,_14432_ok) = _131714a10_full_path(_14414_path);
	if ((!(_14432_ok))) {
		_14432_ok = false;
		return std::make_tuple(jule::Str("", 0),_14432_ok);
	}
	_14432_ok = true;
	return std::make_tuple(_131739f50_clean(_14414_path),_14432_ok);
}



inline jule::Str _131714a10___join(jule::Slice<jule::Str> _15815_elem) {
	jule::Str _15913_s = jule::Str("", 0);
	jule::U8 _16013_last_char = 0LLU;
	{
		auto __julec_range_expr = _15815_elem;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _131714a10_e = *__julec_range_begin;
			_iter_begin_4620251680:;
			{
				{
					if (!((_15913_s.len() == 0LL))) { goto _case_end_4620254624; }
					goto _match_end_4620253264;
					_case_end_4620254624:;
					if (!((_131714a10_is_slash(_16013_last_char)))) { goto _case_end_4620253760; }
					_case_begin_4620253760:;
					{
						_iter_begin_4620255792:;
						if (!((_131714a10_e.len() > 0LL) && _131714a10_is_slash(_131714a10_e[static_cast<jule::Int>(0LL)]))) { goto _iter_end_4620255792; }
						{
							_131714a10_e=_131714a10_e.slice(static_cast<jule::Int>(1LL));
						}
						_iter_next_4620255792:;
						goto _iter_begin_4620255792;
						_iter_end_4620255792:;
					}
					goto _match_end_4620253264;
					_case_end_4620253760:;
					if (!((_16013_last_char == ':'))) { goto _case_end_4620253872; }
					goto _match_end_4620253264;
					_case_end_4620253872:;
					_case_begin_4620253456:;
					{
						_15913_s+=jule::Str("\\", 1);
						_16013_last_char='\\';
					}
					goto _match_end_4620253264;
					_case_end_4620253456:;
					_match_end_4620253264:;
				}
				if (_131714a10_e.len() > 0LL) {
					_15913_s+=_131714a10_e;
					_16013_last_char=_131714a10_e[static_cast<jule::Int>(_131714a10_e.len() - 1LL)];
				}
			}
			_iter_next_4620251680:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _131714a10_e = *__julec_range_begin; goto _iter_begin_4620251680; }
			_iter_end_4620251680:;
		}
	}
	if (_15913_s.len() == 0LL) {
		return jule::Str("", 0);
	}
	return _131739f50_clean(_15913_s);
}



inline jule::Str _131739f50_clean(jule::Str _10718_path) {
	jule::Str _1089_original_path = _10718_path;
	jule::Int _1099_vol_len = _131714a10_volume_name_len(_10718_path);
	_10718_path=_10718_path.slice(static_cast<jule::Int>(_1099_vol_len));
	if (_10718_path == jule::Str("", 0)) {
		if (((_1099_vol_len > 1LL) && _131714a10_is_path_sep(_1089_original_path[static_cast<jule::Int>(0LL)])) && _131714a10_is_path_sep(_1089_original_path[static_cast<jule::Int>(1LL)])) {
			return _131739f50_from_slash(_1089_original_path);
		}
		return _1089_original_path + jule::Str(".", 1);
	}
	jule::Bool _1189_rooted = _131714a10_is_path_sep(_10718_path[static_cast<jule::Int>(0LL)]);
	jule::I64 _1259_n = _10718_path.len();
	_131739f50_LazyBuff _12613_out = _131739f50_LazyBuff(_10718_path,jule::Slice<jule::U8>(),jule::Int(),_1089_original_path,_1099_vol_len);
	jule::Int _13114_r = 0LL;
	jule::Int _13121_dotdot = 0LL;
	std::tie(_13114_r,_13121_dotdot) = std::make_tuple(0LL,0LL);
	if (_1189_rooted) {
		_12613_out._method_append(92LLU);
		std::tie(_13114_r,_13121_dotdot) = std::make_tuple(1LL,1LL);
	}
	_iter_begin_4620289104:;
	if (!(_13114_r < _1259_n)) { goto _iter_end_4620289104; }
	{
		{
			if (!((_131714a10_is_path_sep(_10718_path[static_cast<jule::Int>(_13114_r)])))) { goto _case_end_4620306448; }
			_case_begin_4620306448:;
			{
				(_13114_r)++;
			}
			goto _match_end_4620290672;
			_case_end_4620306448:;
			if (!(((_10718_path[static_cast<jule::Int>(_13114_r)] == '.') && (((_13114_r + 1LL) == _1259_n) || _131714a10_is_path_sep(_10718_path[static_cast<jule::Int>(_13114_r + 1LL)]))))) { goto _case_end_4620309488; }
			_case_begin_4620309488:;
			{
				(_13114_r)++;
			}
			goto _match_end_4620290672;
			_case_end_4620309488:;
			if (!((((_10718_path[static_cast<jule::Int>(_13114_r)] == '.') && (_10718_path[static_cast<jule::Int>(_13114_r + 1LL)] == '.')) && (((_13114_r + 2LL) == _1259_n) || _131714a10_is_path_sep(_10718_path[static_cast<jule::Int>(_13114_r + 2LL)]))))) { goto _case_end_4620309600; }
			_case_begin_4620309600:;
			{
				_13114_r+=2LL;
				{
					if (!((_12613_out._field_w > _13121_dotdot))) { goto _case_end_4620320112; }
					_case_begin_4620320112:;
					{
						(_12613_out._field_w)--;
						_iter_begin_4620320944:;
						if (!((_12613_out._field_w > _13121_dotdot) && (!(_131714a10_is_path_sep(static_cast<jule::U8>(_12613_out._method_index(_12613_out._field_w))))))) { goto _iter_end_4620320944; }
						{
							(_12613_out._field_w)--;
						}
						_iter_next_4620320944:;
						goto _iter_begin_4620320944;
						_iter_end_4620320944:;
					}
					goto _match_end_4620318080;
					_case_end_4620320112:;
					if (!(((!(_1189_rooted))))) { goto _case_end_4620320224; }
					_case_begin_4620320224:;
					{
						if (_12613_out._field_w > 0LL) {
							_12613_out._method_append(92LLU);
						}
						_12613_out._method_append('.');
						_12613_out._method_append('.');
						_13121_dotdot=_12613_out._field_w;
					}
					goto _match_end_4620318080;
					_case_end_4620320224:;
					_match_end_4620318080:;
				}
			}
			goto _match_end_4620290672;
			_case_end_4620309600:;
			_case_begin_4620290864:;
			{
				if ((_1189_rooted && (_12613_out._field_w != 1LL)) || ((!(_1189_rooted)) && (_12613_out._field_w != 0LL))) {
					_12613_out._method_append(92LLU);
				}
				if (((true && (_12613_out._field_w == 0LL)) && (_12613_out._field_vol_len == 0LL)) && (_13114_r != 0LL)) {
					jule::Int _17425_i = _13114_r;
					_iter_begin_4620292384:;
					if (!((_17425_i < _1259_n) && (!(_131714a10_is_path_sep(_10718_path[static_cast<jule::Int>(_17425_i)]))))) { goto _iter_end_4620292384; }
					{
						if (_10718_path[static_cast<jule::Int>(_17425_i)] == ':') {
							_12613_out._method_append('.');
							_12613_out._method_append(92LLU);
							goto _iter_end_4620292384;
						}
					}
					_iter_next_4620292384:;
					(_17425_i)++;
					goto _iter_begin_4620292384;
					_iter_end_4620292384:;
				}
				_iter_begin_4620306352:;
				if (!((_13114_r < _1259_n) && (!(_131714a10_is_path_sep(_10718_path[static_cast<jule::Int>(_13114_r)]))))) { goto _iter_end_4620306352; }
				{
					_12613_out._method_append(_10718_path[static_cast<jule::Int>(_13114_r)]);
				}
				_iter_next_4620306352:;
				(_13114_r)++;
				goto _iter_begin_4620306352;
				_iter_end_4620306352:;
			}
			goto _match_end_4620290672;
			_case_end_4620290864:;
			_match_end_4620290672:;
		}
	}
	_iter_next_4620289104:;
	goto _iter_begin_4620289104;
	_iter_end_4620289104:;
	if (_12613_out._field_w == 0LL) {
		_12613_out._method_append('.');
	}
	return _131739f50_from_slash(_12613_out._method_string());
}



inline jule::Str _131739f50_to_slash(jule::Str _20017_path) {
	if (false) {
		return _20017_path;
	}
	return _20017_path.replace(static_cast<jule::Str>(92LL),jule::Str("/", 1),-1LL);
}



inline jule::Str _131739f50_from_slash(jule::Str _21019_path) {
	if (false) {
		return _21019_path;
	}
	return _21019_path.replace(jule::Str("/", 1),static_cast<jule::Str>(92LL),-1LL);
}



inline jule::Str _131739f50_join(jule::Slice<jule::Str> _22413_elem) {
	return _131714a10___join(_22413_elem);
}



inline jule::Str _131739f50_ext(jule::Str _22912_path) {
	jule::I64 _23013_i = _22912_path.len() - 1LL;
	_iter_begin_4620344416:;
	if (!((_23013_i >= 0LL) && (!(_131714a10_is_path_sep(_22912_path[static_cast<jule::Int>(_23013_i)]))))) { goto _iter_end_4620344416; }
	{
		if (_22912_path[static_cast<jule::Int>(_23013_i)] == '.') {
			return _22912_path.slice(static_cast<jule::Int>(_23013_i));
		}
	}
	_iter_next_4620344416:;
	(_23013_i)--;
	goto _iter_begin_4620344416;
	_iter_end_4620344416:;
	return jule::Str("", 0);
}



inline std::tuple<jule::Str,jule::Bool> _131739f50_abs(jule::Str _24412_path) {
	jule::Str _24510_abs_path;
	jule::Bool _24520_ok;
	std::tie(_24510_abs_path,_24520_ok) = _131714a10___abs(_24412_path);
	return std::make_tuple(_24510_abs_path,_24520_ok);
}



inline jule::Str _131739f50_base(jule::Str _25317_path) {
	if (_25317_path == jule::Str("", 0)) {
		return jule::Str(".", 1);
	}
	_iter_begin_4620357552:;
	if (!((_25317_path.len() > 0LL) && _131714a10_is_path_sep(_25317_path[static_cast<jule::Int>(_25317_path.len() - 1LL)]))) { goto _iter_end_4620357552; }
	{
		_25317_path=_25317_path.slice(static_cast<jule::Int>(0LL),static_cast<jule::Int>(_25317_path.len() - 1LL));
	}
	_iter_next_4620357552:;
	goto _iter_begin_4620357552;
	_iter_end_4620357552:;
	_25317_path=_25317_path.slice(static_cast<jule::Int>(_131739f50_volume_name(_25317_path).len()));
	jule::I64 _26413_i = _25317_path.len() - 1LL;
	_iter_begin_4620358864:;
	if (!((_26413_i >= 0LL) && (!(_131714a10_is_path_sep(_25317_path[static_cast<jule::Int>(_26413_i)]))))) { goto _iter_end_4620358864; }
	{
		(_26413_i)--;
	}
	_iter_next_4620358864:;
	goto _iter_begin_4620358864;
	_iter_end_4620358864:;
	if (_26413_i >= 0LL) {
		_25317_path=_25317_path.slice(static_cast<jule::Int>(_26413_i + 1LL));
	}
	if (_25317_path == jule::Str("", 0)) {
		return static_cast<jule::Str>(92LL);
	}
	return _25317_path;
}



inline jule::Str _131739f50_dir(jule::Str _28412_path) {
	jule::Str _2859_vol = _131739f50_volume_name(_28412_path);
	jule::I64 _28613_i = _28412_path.len() - 1LL;
	_iter_begin_4620375712:;
	if (!((_28613_i >= _2859_vol.len()) && (!(_131714a10_is_path_sep(_28412_path[static_cast<jule::Int>(_28613_i)]))))) { goto _iter_end_4620375712; }
	{
		(_28613_i)--;
	}
	_iter_next_4620375712:;
	goto _iter_begin_4620375712;
	_iter_end_4620375712:;
	jule::Str _2909_dir = _131739f50_clean(_28412_path.slice(static_cast<jule::Int>(_2859_vol.len()),static_cast<jule::Int>(_28613_i + 1LL)));
	if ((_2909_dir == jule::Str(".", 1)) && (_2859_vol.len() > 2LL)) {
		return _2859_vol;
	}
	return _2859_vol + _2909_dir;
}



inline jule::Str _131739f50_volume_name(jule::Str _30220_path) {
	return _131739f50_from_slash(_30220_path.slice(0LL,static_cast<jule::Int>(_131714a10_volume_name_len(_30220_path))));
}



inline jule::Int _121ef7c60_leading_zeros(jule::Uint _4922_x) {
	return static_cast<jule::Int>(64LL - _121ef7c60_len(_4922_x));
}



inline jule::Int _121ef7c60_leading_zeros8(jule::U8 _5223_x) {
	return static_cast<jule::Int>(8LL - _121ef7c60_len8(_5223_x));
}



inline jule::Int _121ef7c60_leading_zeros16(jule::U16 _5524_x) {
	return static_cast<jule::Int>(16LL - _121ef7c60_len16(_5524_x));
}



inline jule::Int _121ef7c60_leading_zeros32(jule::U32 _5824_x) {
	return static_cast<jule::Int>(32LL - _121ef7c60_len32(_5824_x));
}



inline jule::Int _121ef7c60_leading_zeros64(jule::U64 _6124_x) {
	return static_cast<jule::Int>(64LL - _121ef7c60_len64(_6124_x));
}



inline jule::Int _121ef7c60_trailing_zeros(jule::Uint _8323_x) {
	if (false) {
		return static_cast<jule::Int>(_121ef7c60_trailing_zeros32(static_cast<jule::U32>(_8323_x)));
	}
	return static_cast<jule::Int>(_121ef7c60_trailing_zeros64(static_cast<jule::U64>(_8323_x)));
}



inline jule::Int _121ef7c60_trailing_zeros8(jule::U8 _9124_x) {
	return static_cast<jule::Int>(jule::Str("\b\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\5\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\6\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\5\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\a\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\5\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\6\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\5\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00\4\x00\1\x00\2\x00\1\x00\3\x00\1\x00\2\x00\1\x00", 256)[static_cast<jule::Int>(_9124_x)]);
}



inline jule::Int _121ef7c60_trailing_zeros16(jule::U16 _9625_x) {
	if (_9625_x == 0LL) {
		return 16LL;
	}
	return static_cast<jule::Int>(_121ef7c60_DE_BRUIJN32_TAB[static_cast<jule::Int>((static_cast<jule::U32>(_9625_x & (-(_9625_x))) * 125613361LL) >> 27LL)]);
}



inline jule::Int _121ef7c60_trailing_zeros32(jule::U32 _10525_x) {
	if (_10525_x == 0LL) {
		return 32LL;
	}
	return static_cast<jule::Int>(_121ef7c60_DE_BRUIJN32_TAB[static_cast<jule::Int>(((_10525_x & (-(_10525_x))) * 125613361LL) >> 27LL)]);
}



inline jule::Int _121ef7c60_trailing_zeros64(jule::U64 _11425_x) {
	if (_11425_x == 0LL) {
		return 64LL;
	}
	return static_cast<jule::Int>(_121ef7c60_DE_BRUIJN64_TAB[static_cast<jule::Int>(((_11425_x & (-(_11425_x))) * 285870213051353865LL) >> 58LL)]);
}



inline jule::Int _121ef7c60_ones_count(jule::Uint _14119_x) {
	if (false) {
		return static_cast<jule::Int>(_121ef7c60_ones_count32(static_cast<jule::U32>(_14119_x)));
	}
	return static_cast<jule::Int>(_121ef7c60_ones_count64(static_cast<jule::U64>(_14119_x)));
}



inline jule::Int _121ef7c60_ones_count8(jule::U8 _14920_x) {
	return static_cast<jule::Int>(jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_14920_x)]);
}



inline jule::Int _121ef7c60_ones_count16(jule::U16 _15421_x) {
	return static_cast<jule::Int>(jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_15421_x >> 8LL)] + jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_15421_x & 255LL)]);
}



inline jule::Int _121ef7c60_ones_count32(jule::U32 _15921_x) {
	return static_cast<jule::Int>(((jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_15921_x >> 24LL)] + jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>((_15921_x >> 16LL) & 255LL)]) + jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>((_15921_x >> 8LL) & 255LL)]) + jule::Str("\x00\1\1\2\1\2\2\3\1\2\2\3\2\3\3\4\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\1\2\2\3\2\3\3\4\2\3\3\4\3\4\4\5\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\2\3\3\4\3\4\4\5\3\4\4\5\4\5\5\6\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\3\4\4\5\4\5\5\6\4\5\5\6\5\6\6\a\4\5\5\6\5\6\6\a\5\6\6\a\6\a\a\b", 256)[static_cast<jule::Int>(_15921_x & 255LL)]);
}



inline jule::Int _121ef7c60_ones_count64(jule::U64 _16425_x) {
	
	_16425_x=((_16425_x >> 1LL) & 6148914691236517205LL) + (_16425_x & 6148914691236517205LL);
	_16425_x=((_16425_x >> 2LL) & 3689348814741910323LL) + (_16425_x & 3689348814741910323LL);
	_16425_x=((_16425_x >> 4LL) + _16425_x) & 1085102592571150095LL;
	_16425_x+=_16425_x >> 8LL;
	_16425_x+=_16425_x >> 16LL;
	_16425_x+=_16425_x >> 32LL;
	return static_cast<jule::Int>(static_cast<jule::Int>(_16425_x) & 127LLU);
}



inline jule::Uint _121ef7c60_rotate_left(jule::Uint _20020_x,jule::Int _20029_k) {
	if (false) {
		return static_cast<jule::Uint>(_121ef7c60_rotate_left32(static_cast<jule::U32>(_20020_x),_20029_k));
	}
	return static_cast<jule::Uint>(_121ef7c60_rotate_left64(static_cast<jule::U64>(_20020_x),_20029_k));
}



inline jule::U8 _121ef7c60_rotate_left8(jule::U8 _21121_x,jule::Int _21128_k) {
	
	jule::Uint _2139_s = static_cast<jule::Uint>(_21128_k) & 7LL;
	return (_21121_x << _2139_s) | (_21121_x >> (8LL - _2139_s));
}



inline jule::U16 _121ef7c60_rotate_left16(jule::U16 _22122_x,jule::Int _22130_k) {
	
	jule::Uint _2239_s = static_cast<jule::Uint>(_22130_k) & 15LL;
	return (_22122_x << _2239_s) | (_22122_x >> (16LL - _2239_s));
}



inline jule::U32 _121ef7c60_rotate_left32(jule::U32 _23122_x,jule::Int _23130_k) {
	
	jule::Uint _2339_s = static_cast<jule::Uint>(_23130_k) & 31LL;
	return (_23122_x << _2339_s) | (_23122_x >> (32LL - _2339_s));
}



inline jule::U64 _121ef7c60_rotate_left64(jule::U64 _24122_x,jule::Int _24130_k) {
	
	jule::Uint _2439_s = static_cast<jule::Uint>(_24130_k) & 63LL;
	return (_24122_x << _2439_s) | (_24122_x >> (64LL - _2439_s));
}



inline jule::Uint _121ef7c60_reverse(jule::Uint _25016_x) {
	if (false) {
		return static_cast<jule::Uint>(_121ef7c60_reverse32(static_cast<jule::U32>(_25016_x)));
	}
	return static_cast<jule::Uint>(_121ef7c60_reverse64(static_cast<jule::U64>(_25016_x)));
}



inline jule::U8 _121ef7c60_reverse8(jule::U8 _25817_x) {
	return static_cast<jule::U8>(jule::Str("\x00\302\200@\303\200 \302\240`\303\240\020\302\220P\303\2200\302\260p\303\260\b\302\210H\303\210(\302\250h\303\250\030\302\230X\303\2308\302\270x\303\270\4\302\204D\303\204$\302\244d\303\244\024\302\224T\303\2244\302\264t\303\264\f\302\214L\303\214,\302\254l\303\254\034\302\234\\\303\234<\302\274|\303\274\2\302\202B\303\202\"\302\242b\303\242\022\302\222R\303\2222\302\262r\303\262\n\302\212J\303\212*\302\252j\303\252\032\302\232Z\303\232:\302\272z\303\272\6\302\206F\303\206&\302\246f\303\246\026\302\226V\303\2266\302\266v\303\266\016\302\216N\303\216.\302\256n\303\256\036\302\236^\303\236>\302\276~\303\276\1\302\201A\303\201!\302\241a\303\241\021\302\221Q\303\2211\302\261q\303\261\t\302\211I\303\211)\302\251i\303\251\031\302\231Y\303\2319\302\271y\303\271\5\302\205E\303\205%\302\245e\303\245\025\302\225U\303\2255\302\265u\303\265\r\302\215M\303\215-\302\255m\303\255\035\302\235]\303\235=\302\275}\303\275\3\302\203C\303\203#\302\243c\303\243\023\302\223S\303\2233\302\263s\303\263\v\302\213K\303\213+\302\253k\303\253\033\302\233[\303\233;\302\273{\303\273\a\302\207G\303\207'\302\247g\303\247\027\302\227W\303\2277\302\267w\303\267\017\302\217O\303\217/\302\257o\303\257\037\302\237_\303\237?\302\277\177\303\277", 384)[static_cast<jule::Int>(_25817_x)]);
}



inline jule::U16 _121ef7c60_reverse16(jule::U16 _26318_x) {
	return static_cast<jule::U16>(static_cast<jule::U16>(jule::Str("\x00\302\200@\303\200 \302\240`\303\240\020\302\220P\303\2200\302\260p\303\260\b\302\210H\303\210(\302\250h\303\250\030\302\230X\303\2308\302\270x\303\270\4\302\204D\303\204$\302\244d\303\244\024\302\224T\303\2244\302\264t\303\264\f\302\214L\303\214,\302\254l\303\254\034\302\234\\\303\234<\302\274|\303\274\2\302\202B\303\202\"\302\242b\303\242\022\302\222R\303\2222\302\262r\303\262\n\302\212J\303\212*\302\252j\303\252\032\302\232Z\303\232:\302\272z\303\272\6\302\206F\303\206&\302\246f\303\246\026\302\226V\303\2266\302\266v\303\266\016\302\216N\303\216.\302\256n\303\256\036\302\236^\303\236>\302\276~\303\276\1\302\201A\303\201!\302\241a\303\241\021\302\221Q\303\2211\302\261q\303\261\t\302\211I\303\211)\302\251i\303\251\031\302\231Y\303\2319\302\271y\303\271\5\302\205E\303\205%\302\245e\303\245\025\302\225U\303\2255\302\265u\303\265\r\302\215M\303\215-\302\255m\303\255\035\302\235]\303\235=\302\275}\303\275\3\302\203C\303\203#\302\243c\303\243\023\302\223S\303\2233\302\263s\303\263\v\302\213K\303\213+\302\253k\303\253\033\302\233[\303\233;\302\273{\303\273\a\302\207G\303\207'\302\247g\303\247\027\302\227W\303\2277\302\267w\303\267\017\302\217O\303\217/\302\257o\303\257\037\302\237_\303\237?\302\277\177\303\277", 384)[static_cast<jule::Int>(_26318_x >> 8LL)]) | (static_cast<jule::U16>(jule::Str("\x00\302\200@\303\200 \302\240`\303\240\020\302\220P\303\2200\302\260p\303\260\b\302\210H\303\210(\302\250h\303\250\030\302\230X\303\2308\302\270x\303\270\4\302\204D\303\204$\302\244d\303\244\024\302\224T\303\2244\302\264t\303\264\f\302\214L\303\214,\302\254l\303\254\034\302\234\\\303\234<\302\274|\303\274\2\302\202B\303\202\"\302\242b\303\242\022\302\222R\303\2222\302\262r\303\262\n\302\212J\303\212*\302\252j\303\252\032\302\232Z\303\232:\302\272z\303\272\6\302\206F\303\206&\302\246f\303\246\026\302\226V\303\2266\302\266v\303\266\016\302\216N\303\216.\302\256n\303\256\036\302\236^\303\236>\302\276~\303\276\1\302\201A\303\201!\302\241a\303\241\021\302\221Q\303\2211\302\261q\303\261\t\302\211I\303\211)\302\251i\303\251\031\302\231Y\303\2319\302\271y\303\271\5\302\205E\303\205%\302\245e\303\245\025\302\225U\303\2255\302\265u\303\265\r\302\215M\303\215-\302\255m\303\255\035\302\235]\303\235=\302\275}\303\275\3\302\203C\303\203#\302\243c\303\243\023\302\223S\303\2233\302\263s\303\263\v\302\213K\303\213+\302\253k\303\253\033\302\233[\303\233;\302\273{\303\273\a\302\207G\303\207'\302\247g\303\247\027\302\227W\303\2277\302\267w\303\267\017\302\217O\303\217/\302\257o\303\257\037\302\237_\303\237?\302\277\177\303\277", 384)[static_cast<jule::Int>(_26318_x & 255LL)]) << 8LL));
}



inline jule::U32 _121ef7c60_reverse32(jule::U32 _26822_x) {
	
	_26822_x=((_26822_x >> 1LL) & 1431655765LL) | ((_26822_x & 1431655765LL) << 1LL);
	_26822_x=((_26822_x >> 2LL) & 858993459LL) | ((_26822_x & 858993459LL) << 2LL);
	_26822_x=((_26822_x >> 4LL) & 252645135LL) | ((_26822_x & 252645135LL) << 4LL);
	return static_cast<jule::U32>(_121ef7c60_reverse_bytes32(_26822_x));
}



inline jule::U64 _121ef7c60_reverse64(jule::U64 _27722_x) {
	
	_27722_x=((_27722_x >> 1LL) & 6148914691236517205LL) | ((_27722_x & 6148914691236517205LL) << 1LL);
	_27722_x=((_27722_x >> 2LL) & 3689348814741910323LL) | ((_27722_x & 3689348814741910323LL) << 2LL);
	_27722_x=((_27722_x >> 4LL) & 1085102592571150095LL) | ((_27722_x & 1085102592571150095LL) << 4LL);
	return static_cast<jule::U64>(_121ef7c60_reverse_bytes64(_27722_x));
}



inline jule::Uint _121ef7c60_reverse_bytes(jule::Uint _29022_x) {
	if (false) {
		return static_cast<jule::Uint>(_121ef7c60_reverse_bytes32(static_cast<jule::U32>(_29022_x)));
	}
	return static_cast<jule::Uint>(_121ef7c60_reverse_bytes64(static_cast<jule::U64>(_29022_x)));
}



inline jule::U16 _121ef7c60_reverse_bytes16(jule::U16 _30024_x) {
	return (_30024_x >> 8LL) | (_30024_x << 8LL);
}



inline jule::U32 _121ef7c60_reverse_bytes32(jule::U32 _30728_x) {
	
	_30728_x=((_30728_x >> 8LL) & 16711935LL) | ((_30728_x & 16711935LL) << 8LL);
	return (_30728_x >> 16LL) | (_30728_x << 16LL);
}



inline jule::U64 _121ef7c60_reverse_bytes64(jule::U64 _31628_x) {
	
	_31628_x=((_31628_x >> 8LL) & 71777214294589695LL) | ((_31628_x & 71777214294589695LL) << 8LL);
	_31628_x=((_31628_x >> 16LL) & 281470681808895LL) | ((_31628_x & 281470681808895LL) << 16LL);
	return (_31628_x >> 32LL) | (_31628_x << 32LL);
}



inline jule::Int _121ef7c60_len(jule::Uint _32712_x) {
	if (false) {
		return static_cast<jule::Int>(_121ef7c60_len32(static_cast<jule::U32>(_32712_x)));
	}
	return static_cast<jule::Int>(_121ef7c60_len64(static_cast<jule::U64>(_32712_x)));
}



inline jule::Int _121ef7c60_len8(jule::U8 _33613_x) {
	return static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_33613_x)]);
}



inline jule::Int _121ef7c60_len16(jule::U16 _34218_x) {
	jule::Int _34228_n = jule::Int();
	if (_34218_x >= 256LL) {
		_34218_x>>=8LL;
		_34228_n=8LL;
	}
	_34228_n = _34228_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_34218_x)]);
	return _34228_n;
}



inline jule::Int _121ef7c60_len32(jule::U32 _35218_x) {
	jule::Int _35228_n = jule::Int();
	if (_35218_x >= 65536LL) {
		_35218_x>>=16LL;
		_35228_n=16LL;
	}
	if (_35218_x >= 256LL) {
		_35218_x>>=8LL;
		_35228_n+=8LL;
	}
	_35228_n = _35228_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_35218_x)]);
	return _35228_n;
}



inline jule::Int _121ef7c60_len64(jule::U64 _36618_x) {
	jule::Int _36628_n = jule::Int();
	if (_36618_x >= 4294967296LL) {
		_36618_x>>=32LL;
		_36628_n=32LL;
	}
	if (_36618_x >= 65536LL) {
		_36618_x>>=16LL;
		_36628_n+=16LL;
	}
	if (_36618_x >= 256LL) {
		_36618_x>>=8LL;
		_36628_n+=8LL;
	}
	_36628_n = _36628_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_36618_x)]);
	return _36628_n;
}



inline std::tuple<jule::Uint,jule::Uint> _121ef7c60_add(jule::Uint _38912_x,jule::Uint _38921_y,jule::Uint _38930_carry) {
	jule::Uint _38956_carry_out = jule::Uint();
	jule::Uint _38945_sum = jule::Uint();
	if (false) {
		jule::U32 _39114_s32;
		jule::U32 _39119_c32;
		std::tie(_39114_s32,_39119_c32) = _121ef7c60_add32(static_cast<jule::U32>(_38912_x),static_cast<jule::U32>(_38921_y),static_cast<jule::U32>(_38930_carry));
		_38945_sum = static_cast<jule::Uint>(_39114_s32);
		_38956_carry_out = static_cast<jule::Uint>(_39119_c32);
		return std::make_tuple(_38945_sum,_38956_carry_out);
	}
	jule::U64 _39410_s64;
	jule::U64 _39415_c64;
	std::tie(_39410_s64,_39415_c64) = _121ef7c60_add64(static_cast<jule::U64>(_38912_x),static_cast<jule::U64>(_38921_y),static_cast<jule::U64>(_38930_carry));
	_38945_sum = static_cast<jule::Uint>(_39410_s64);
	_38956_carry_out = static_cast<jule::Uint>(_39415_c64);
	return std::make_tuple(_38945_sum,_38956_carry_out);
}



inline std::tuple<jule::U32,jule::U32> _121ef7c60_add32(jule::U32 _40314_x,jule::U32 _40322_y,jule::U32 _40330_carry) {
	jule::U32 _40354_carryout = jule::U32();
	jule::U32 _40344_sum = jule::U32();
	jule::U64 _4049_sum64 = (static_cast<jule::U64>(_40314_x) + static_cast<jule::U64>(_40322_y)) + static_cast<jule::U64>(_40330_carry);
	_40344_sum=static_cast<jule::U32>(_4049_sum64);
	_40354_carryout=static_cast<jule::U32>(_4049_sum64 >> 32LL);
	return std::make_tuple(_40344_sum,_40354_carryout);
}



inline std::tuple<jule::U64,jule::U64> _121ef7c60_add64(jule::U64 _41514_x,jule::U64 _41522_y,jule::U64 _41530_carry) {
	jule::U64 _41554_carryout = jule::U64();
	jule::U64 _41544_sum = jule::U64();
	_41544_sum=(_41514_x + _41522_y) + _41530_carry;
	_41554_carryout=((_41514_x & _41522_y) | ((_41514_x | _41522_y) & (~(_41544_sum)))) >> 63LL;
	return std::make_tuple(_41544_sum,_41554_carryout);
}



inline std::tuple<jule::Uint,jule::Uint> _121ef7c60_sub(jule::Uint _43112_x,jule::Uint _43121_y,jule::Uint _43130_borrow) {
	jule::Uint _43158_borrow_out = jule::Uint();
	jule::Uint _43146_diff = jule::Uint();
	if (false) {
		jule::U32 _43314_d32;
		jule::U32 _43319_b32;
		std::tie(_43314_d32,_43319_b32) = _121ef7c60_sub32(static_cast<jule::U32>(_43112_x),static_cast<jule::U32>(_43121_y),static_cast<jule::U32>(_43130_borrow));
		_43146_diff = static_cast<jule::Uint>(_43314_d32);
		_43158_borrow_out = static_cast<jule::Uint>(_43319_b32);
		return std::make_tuple(_43146_diff,_43158_borrow_out);
	}
	jule::U64 _43610_d64;
	jule::U64 _43615_b64;
	std::tie(_43610_d64,_43615_b64) = _121ef7c60_sub64(static_cast<jule::U64>(_43112_x),static_cast<jule::U64>(_43121_y),static_cast<jule::U64>(_43130_borrow));
	_43146_diff = static_cast<jule::Uint>(_43610_d64);
	_43158_borrow_out = static_cast<jule::Uint>(_43615_b64);
	return std::make_tuple(_43146_diff,_43158_borrow_out);
}



inline std::tuple<jule::U32,jule::U32> _121ef7c60_sub32(jule::U32 _44514_x,jule::U32 _44522_y,jule::U32 _44530_borrow) {
	jule::U32 _44556_borrowout = jule::U32();
	jule::U32 _44545_diff = jule::U32();
	_44545_diff=(_44514_x - _44522_y) - _44530_borrow;
	_44556_borrowout=static_cast<jule::U32>((((~(_44514_x)) & _44522_y) | ((~(_44514_x ^ _44522_y)) & _44545_diff)) >> 31LL);
	return std::make_tuple(_44545_diff,_44556_borrowout);
}



inline std::tuple<jule::U64,jule::U64> _121ef7c60_sub64(jule::U64 _46014_x,jule::U64 _46022_y,jule::U64 _46030_borrow) {
	jule::U64 _46056_borrowout = jule::U64();
	jule::U64 _46045_diff = jule::U64();
	_46045_diff=(_46014_x - _46022_y) - _46030_borrow;
	_46056_borrowout=static_cast<jule::U64>((((~(_46014_x)) & _46022_y) | ((~(_46014_x ^ _46022_y)) & _46045_diff)) >> 63LL);
	return std::make_tuple(_46045_diff,_46056_borrowout);
}



inline std::tuple<jule::Uint,jule::Uint> _121ef7c60_mul(jule::Uint _47412_x,jule::Uint _47421_y) {
	jule::Uint _47442_lo = jule::Uint();
	jule::Uint _47432_hi = jule::Uint();
	if (false) {
		jule::U32 _47614_h;
		jule::U32 _47617_l;
		std::tie(_47614_h,_47617_l) = _121ef7c60_mul32(static_cast<jule::U32>(_47412_x),static_cast<jule::U32>(_47421_y));
		_47432_hi = static_cast<jule::Uint>(_47614_h);
		_47442_lo = static_cast<jule::Uint>(_47617_l);
		return std::make_tuple(_47432_hi,_47442_lo);
	}
	jule::U64 _47910_h;
	jule::U64 _47913_l;
	std::tie(_47910_h,_47913_l) = _121ef7c60_mul64(static_cast<jule::U64>(_47412_x),static_cast<jule::U64>(_47421_y));
	_47432_hi = static_cast<jule::Uint>(_47910_h);
	_47442_lo = static_cast<jule::Uint>(_47913_l);
	return std::make_tuple(_47432_hi,_47442_lo);
}



inline std::tuple<jule::U32,jule::U32> _121ef7c60_mul32(jule::U32 _48814_x,jule::U32 _48822_y) {
	jule::U32 _48841_lo = jule::U32();
	jule::U32 _48832_hi = jule::U32();
	jule::U64 _4899_tmp = static_cast<jule::U64>(_48814_x) * static_cast<jule::U64>(_48822_y);
	std::tie(_48832_hi,_48841_lo) = std::make_tuple(static_cast<jule::U32>(_4899_tmp >> 32LL),static_cast<jule::U32>(_4899_tmp));
	return std::make_tuple(_48832_hi,_48841_lo);
}



inline std::tuple<jule::U64,jule::U64> _121ef7c60_mul64(jule::U64 _49914_x,jule::U64 _49922_y) {
	jule::U64 _49941_lo = jule::U64();
	jule::U64 _49932_hi = jule::U64();
	
	jule::U64 _5019_x0 = _49914_x & 4294967295LL;
	jule::U64 _5029_x1 = _49914_x >> 32LL;
	jule::U64 _5039_y0 = _49922_y & 4294967295LL;
	jule::U64 _5049_y1 = _49922_y >> 32LL;
	jule::U64 _5059_w0 = _5019_x0 * _5039_y0;
	jule::U64 _5069_t = (_5029_x1 * _5039_y0) + (_5059_w0 >> 32LL);
	jule::U64 _50713_w1 = _5069_t & 4294967295LL;
	jule::U64 _5089_w2 = _5069_t >> 32LL;
	_50713_w1+=_5019_x0 * _5049_y1;
	_49932_hi=((_5029_x1 * _5049_y1) + _5089_w2) + (_50713_w1 >> 32LL);
	_49941_lo=_49914_x * _49922_y;
	return std::make_tuple(_49932_hi,_49941_lo);
}



inline std::tuple<jule::Uint,jule::Uint> _121ef7c60_div(jule::Uint _52112_hi,jule::Uint _52122_lo,jule::Uint _52132_y) {
	jule::Uint _52154_rem = jule::Uint();
	jule::Uint _52143_quo = jule::Uint();
	if (false) {
		jule::U32 _52314_q;
		jule::U32 _52317_r;
		std::tie(_52314_q,_52317_r) = _121ef7c60_div32(static_cast<jule::U32>(_52112_hi),static_cast<jule::U32>(_52122_lo),static_cast<jule::U32>(_52132_y));
		_52143_quo = static_cast<jule::Uint>(_52314_q);
		_52154_rem = static_cast<jule::Uint>(_52317_r);
		return std::make_tuple(_52143_quo,_52154_rem);
	}
	jule::U64 _52610_q;
	jule::U64 _52613_r;
	std::tie(_52610_q,_52613_r) = _121ef7c60_div64(static_cast<jule::U64>(_52112_hi),static_cast<jule::U64>(_52122_lo),static_cast<jule::U64>(_52132_y));
	_52143_quo = static_cast<jule::Uint>(_52610_q);
	_52154_rem = static_cast<jule::Uint>(_52613_r);
	return std::make_tuple(_52143_quo,_52154_rem);
}



inline std::tuple<jule::U32,jule::U32> _121ef7c60_div32(jule::U32 _53414_hi,jule::U32 _53423_lo,jule::U32 _53432_y) {
	jule::U32 _53452_rem = jule::U32();
	jule::U32 _53442_quo = jule::U32();
	if (_53432_y == 0LL) {
		jule::panic(_121ef75f0_DIVIDE_ERROR);
	}
	if ((_53432_y != 0LL) && (_53432_y <= _53414_hi)) {
		jule::panic(_121ef75f0_OVERFLOW_ERROR);
	}
	jule::U64 _5419_z = (static_cast<jule::U64>(_53414_hi) << 32LL) | static_cast<jule::U64>(_53423_lo);
	std::tie(_53442_quo,_53452_rem) = std::make_tuple(static_cast<jule::U32>(jule::div(_5419_z,static_cast<jule::U64>(_53432_y))),static_cast<jule::U32>(_5419_z % static_cast<jule::U64>(_53432_y)));
	return std::make_tuple(_53442_quo,_53452_rem);
}



inline std::tuple<jule::U64,jule::U64> _121ef7c60_div64(jule::U64 _55014_hi,jule::U64 _55023_lo,jule::U64 _55036_y) {
	jule::U64 _55056_rem = jule::U64();
	jule::U64 _55046_quo = jule::U64();
	
	
	if (_55036_y == 0LL) {
		jule::panic(_121ef75f0_DIVIDE_ERROR);
	}
	if (_55036_y <= _55014_hi) {
		jule::panic(_121ef75f0_OVERFLOW_ERROR);
	}
	jule::Uint _5609_s = static_cast<jule::Uint>(_121ef7c60_leading_zeros64(_55036_y));
	_55036_y<<=_5609_s;
	jule::U64 _5639_yn1 = _55036_y >> 32LL;
	jule::U64 _5649_yn0 = _55036_y & 4294967295LL;
	jule::U64 _5659_un32 = (_55014_hi << _5609_s) | (_55023_lo >> (64LL - _5609_s));
	jule::U64 _5669_un10 = _55023_lo << _5609_s;
	jule::U64 _5679_un1 = _5669_un10 >> 32LL;
	jule::U64 _5689_un0 = _5669_un10 & 4294967295LL;
	jule::U64 _56913_q1 = jule::div(_5659_un32,_5639_yn1);
	jule::U64 _57013_rhat = _5659_un32 - (_56913_q1 * _5639_yn1);
	_iter_begin_4620844048:;
	if (!((_56913_q1 >= 4294967296LL) || ((_56913_q1 * _5649_yn0) > ((4294967296LL * _57013_rhat) + _5679_un1)))) { goto _iter_end_4620844048; }
	{
		(_56913_q1)--;
		_57013_rhat+=_5639_yn1;
		if (_57013_rhat >= 4294967296LL) {
			goto _iter_end_4620844048;
		}
	}
	_iter_next_4620844048:;
	goto _iter_begin_4620844048;
	_iter_end_4620844048:;
	jule::U64 _5809_un21 = ((_5659_un32 * 4294967296LL) + _5679_un1) - (_56913_q1 * _55036_y);
	jule::U64 _58113_q0 = jule::div(_5809_un21,_5639_yn1);
	_57013_rhat=_5809_un21 - (_58113_q0 * _5639_yn1);
	_iter_begin_4620851184:;
	if (!((_58113_q0 >= 4294967296LL) || ((_58113_q0 * _5649_yn0) > ((4294967296LL * _57013_rhat) + _5689_un0)))) { goto _iter_end_4620851184; }
	{
		(_58113_q0)--;
		_57013_rhat+=_5639_yn1;
		if (_57013_rhat >= 4294967296LL) {
			goto _iter_end_4620851184;
		}
	}
	_iter_next_4620851184:;
	goto _iter_begin_4620851184;
	_iter_end_4620851184:;
	_55046_quo = (_56913_q1 * 4294967296LL) + _58113_q0;
	_55056_rem = (((_5809_un21 * 4294967296LL) + _5689_un0) - (_58113_q0 * _55036_y)) >> _5609_s;
	return std::make_tuple(_55046_quo,_55056_rem);
}



inline jule::Uint _121ef7c60_rem(jule::Uint _59812_hi,jule::Uint _59822_lo,jule::Uint _59832_y) {
	if (false) {
		return static_cast<jule::Uint>(_121ef7c60_rem32(static_cast<jule::U32>(_59812_hi),static_cast<jule::U32>(_59822_lo),static_cast<jule::U32>(_59832_y)));
	}
	return static_cast<jule::Uint>(_121ef7c60_rem64(static_cast<jule::U64>(_59812_hi),static_cast<jule::U64>(_59822_lo),static_cast<jule::U64>(_59832_y)));
}



inline jule::U32 _121ef7c60_rem32(jule::U32 _60814_hi,jule::U32 _60823_lo,jule::U32 _60832_y) {
	return static_cast<jule::U32>(((static_cast<jule::U64>(_60814_hi) << 32LL) | static_cast<jule::U64>(_60823_lo)) % static_cast<jule::U64>(_60832_y));
}



inline jule::U64 _121ef7c60_rem64(jule::U64 _61514_hi,jule::U64 _61523_lo,jule::U64 _61532_y) {
	jule::U64 _62213_rem;
	std::tie(std::ignore,_62213_rem) = _121ef7c60_div64(_61514_hi % _61532_y,_61523_lo,_61532_y);
	return _62213_rem;
}



inline jule::F64 _12186a100_atanh(jule::F64 _7818_x) {
	
	{
		if (!((_7818_x < -1LL) || (_7818_x > 1LL) || (_12192b6b0_is_nan(_7818_x)))) { goto _case_end_4621221584; }
		_case_begin_4621221584:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4621221312;
		_case_end_4621221584:;
		if (!((_7818_x == 1LL))) { goto _case_end_4621222096; }
		_case_begin_4621222096:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(1LL));
		}
		goto _match_end_4621221312;
		_case_end_4621222096:;
		if (!((_7818_x == -1LL))) { goto _case_end_4621222208; }
		_case_begin_4621222208:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(-1LL));
		}
		goto _match_end_4621221312;
		_case_end_4621222208:;
		_match_end_4621221312:;
	}
	jule::Bool _8913_sign = false;
	if (_7818_x < 0LL) {
		_7818_x=static_cast<jule::F64>((-(_7818_x)));
		_8913_sign=true;
	}
	jule::F64 _9413_temp = 0e+00;
	{
		if (!((_7818_x < 3.725290298461914e-09))) { goto _case_end_4621233824; }
		_case_begin_4621233824:;
		{
			_9413_temp=_7818_x;
		}
		goto _match_end_4621232048;
		_case_end_4621233824:;
		if (!((_7818_x < 5e-01))) { goto _case_end_4621234752; }
		_case_begin_4621234752:;
		{
			_9413_temp=_7818_x + _7818_x;
			_9413_temp=static_cast<jule::F64>(5e-01 * _121cd89d0_log1p(_9413_temp + jule::div(_9413_temp * _7818_x,1LL - _7818_x)));
		}
		goto _match_end_4621232048;
		_case_end_4621234752:;
		_case_begin_4621232208:;
		{
			_9413_temp=static_cast<jule::F64>(5e-01 * _121cd89d0_log1p(jule::div(_7818_x + _7818_x,1LL - _7818_x)));
		}
		goto _match_end_4621232048;
		_case_end_4621232208:;
		_match_end_4621232048:;
	}
	if (_8913_sign) {
		_9413_temp=static_cast<jule::F64>((-(_9413_temp)));
	}
	return _9413_temp;
}



inline jule::U32 _12173aa20_f32_bits(jule::F32 _4117_f) {
	return (*(((jule::U32*)((&(_4117_f))))));
}



inline jule::F32 _12173aa20_f32_from_bits(jule::U32 _4722_b) {
	return (*(((jule::F32*)((&(_4722_b))))));
}



inline jule::U64 _12173aa20_f64_bits(jule::F64 _5217_f) {
	return (*(((jule::U64*)((&(_5217_f))))));
}



inline jule::F64 _12173aa20_f64_from_bits(jule::U64 _5822_b) {
	return (*(((jule::F64*)((&(_5822_b))))));
}



inline jule::F64 _121886250_cos(jule::F64 _14816_x) {
	
	
	
	if (_12192b6b0_is_nan(_14816_x) || _12192b6b0_is_inf(_14816_x,0LL)) {
		return static_cast<jule::F64>(_12192b6b0_nan());
	}
	jule::Bool _15813_sign = false;
	_14816_x=static_cast<jule::F64>(_1219bc510_abs(_14816_x));
	jule::U64 _16113_j = 0LLU;
	jule::F64 _16213_y = 0e+00;
	jule::F64 _16313_z = 0e+00;
	if (_14816_x >= 536870912LL) {
		std::tie(_16113_j,_16313_z) = _1219212d0_trig_reduce(_14816_x);
	} else {
		_16113_j=static_cast<jule::U64>(_14816_x * 1.2732395447351628e+00);
		_16213_y=static_cast<jule::F64>(_16113_j);
		if ((_16113_j & 1LL) == 1LL) {
			(_16113_j)++;
			(_16213_y)++;
		}
		_16113_j&=7LL;
		_16313_z=((_14816_x - (_16213_y * 7.853981256484985e-01)) - (_16213_y * 3.774894707930798e-08)) - (_16213_y * 2.6951514290790595e-15);
	}
	if (_16113_j > 3LL) {
		_16113_j-=4LL;
		_15813_sign=(!(_15813_sign));
	}
	if (_16113_j > 1LL) {
		_15813_sign=(!(_15813_sign));
	}
	jule::F64 _1879_zz = _16313_z * _16313_z;
	if ((_16113_j == 1LL) || (_16113_j == 2LL)) {
		_16213_y=_16313_z + ((_16313_z * _1879_zz) * ((((((((((_121886250__SIN[static_cast<jule::Int>(0LL)] * _1879_zz) + _121886250__SIN[static_cast<jule::Int>(1LL)]) * _1879_zz) + _121886250__SIN[static_cast<jule::Int>(2LL)]) * _1879_zz) + _121886250__SIN[static_cast<jule::Int>(3LL)]) * _1879_zz) + _121886250__SIN[static_cast<jule::Int>(4LL)]) * _1879_zz) + _121886250__SIN[static_cast<jule::Int>(5LL)]));
	} else {
		_16213_y=static_cast<jule::F64>((1e+00 - (5e-01 * _1879_zz)) + ((_1879_zz * _1879_zz) * ((((((((((_121886250__COS[static_cast<jule::Int>(0LL)] * _1879_zz) + _121886250__COS[static_cast<jule::Int>(1LL)]) * _1879_zz) + _121886250__COS[static_cast<jule::Int>(2LL)]) * _1879_zz) + _121886250__COS[static_cast<jule::Int>(3LL)]) * _1879_zz) + _121886250__COS[static_cast<jule::Int>(4LL)]) * _1879_zz) + _121886250__COS[static_cast<jule::Int>(5LL)])));
	}
	if (_15813_sign) {
		_16213_y=static_cast<jule::F64>((-(_16213_y)));
	}
	return _16213_y;
}



inline jule::F64 _121886250_sin(jule::F64 _20516_x) {
	
	
	
	{
		if (!((_20516_x == 0LL) || (_12192b6b0_is_nan(_20516_x)))) { goto _case_end_4621297296; }
		_case_begin_4621297296:;
		{
			return _20516_x;
		}
		goto _match_end_4621296848;
		_case_end_4621297296:;
		if (!((_12192b6b0_is_inf(_20516_x,0LL)))) { goto _case_end_4621297408; }
		_case_begin_4621297408:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4621296848;
		_case_end_4621297408:;
		_match_end_4621296848:;
	}
	jule::Bool _21813_sign = false;
	if (_20516_x < 0LL) {
		_20516_x=static_cast<jule::F64>((-(_20516_x)));
		_21813_sign=true;
	}
	jule::U64 _22413_j = 0LLU;
	jule::F64 _22513_y = 0e+00;
	jule::F64 _22613_z = 0e+00;
	if (_20516_x >= 536870912LL) {
		std::tie(_22413_j,_22613_z) = _1219212d0_trig_reduce(_20516_x);
	} else {
		_22413_j=static_cast<jule::U64>(_20516_x * 1.2732395447351628e+00);
		_22513_y=static_cast<jule::F64>(_22413_j);
		if ((_22413_j & 1LL) == 1LL) {
			(_22413_j)++;
			(_22513_y)++;
		}
		_22413_j&=7LL;
		_22613_z=((_20516_x - (_22513_y * 7.853981256484985e-01)) - (_22513_y * 3.774894707930798e-08)) - (_22513_y * 2.6951514290790595e-15);
	}
	if (_22413_j > 3LL) {
		_21813_sign=(!(_21813_sign));
		_22413_j-=4LL;
	}
	jule::F64 _2469_zz = _22613_z * _22613_z;
	if ((_22413_j == 1LL) || (_22413_j == 2LL)) {
		_22513_y=static_cast<jule::F64>((1e+00 - (5e-01 * _2469_zz)) + ((_2469_zz * _2469_zz) * ((((((((((_121886250__COS[static_cast<jule::Int>(0LL)] * _2469_zz) + _121886250__COS[static_cast<jule::Int>(1LL)]) * _2469_zz) + _121886250__COS[static_cast<jule::Int>(2LL)]) * _2469_zz) + _121886250__COS[static_cast<jule::Int>(3LL)]) * _2469_zz) + _121886250__COS[static_cast<jule::Int>(4LL)]) * _2469_zz) + _121886250__COS[static_cast<jule::Int>(5LL)])));
	} else {
		_22513_y=_22613_z + ((_22613_z * _2469_zz) * ((((((((((_121886250__SIN[static_cast<jule::Int>(0LL)] * _2469_zz) + _121886250__SIN[static_cast<jule::Int>(1LL)]) * _2469_zz) + _121886250__SIN[static_cast<jule::Int>(2LL)]) * _2469_zz) + _121886250__SIN[static_cast<jule::Int>(3LL)]) * _2469_zz) + _121886250__SIN[static_cast<jule::Int>(4LL)]) * _2469_zz) + _121886250__SIN[static_cast<jule::Int>(5LL)]));
	}
	if (_21813_sign) {
		_22513_y=static_cast<jule::F64>((-(_22513_y)));
	}
	return _22513_y;
}



inline jule::F64 _12173a540_tan(jule::F64 _11316_x) {
	
	
	
	{
		if (!((_11316_x == 0LL) || (_12192b6b0_is_nan(_11316_x)))) { goto _case_end_4621342176; }
		_case_begin_4621342176:;
		{
			return _11316_x;
		}
		goto _match_end_4621341728;
		_case_end_4621342176:;
		if (!((_12192b6b0_is_inf(_11316_x,0LL)))) { goto _case_end_4621342288; }
		_case_begin_4621342288:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4621341728;
		_case_end_4621342288:;
		_match_end_4621341728:;
	}
	jule::Bool _12613_sign = false;
	if (_11316_x < 0LL) {
		_11316_x=static_cast<jule::F64>((-(_11316_x)));
		_12613_sign=true;
	}
	jule::U64 _13113_j = 0LLU;
	jule::F64 _13213_y = 0e+00;
	jule::F64 _13313_z = 0e+00;
	if (_11316_x >= 536870912LL) {
		std::tie(_13113_j,_13313_z) = _1219212d0_trig_reduce(_11316_x);
	} else {
		_13113_j=static_cast<jule::U64>(_11316_x * 1.2732395447351628e+00);
		_13213_y=static_cast<jule::F64>(_13113_j);
		if ((_13113_j & 1LL) == 1LL) {
			(_13113_j)++;
			(_13213_y)++;
		}
		_13313_z=((_11316_x - (_13213_y * 7.853981256484985e-01)) - (_13213_y * 3.774894707930798e-08)) - (_13213_y * 2.6951514290790595e-15);
	}
	jule::F64 _1489_zz = _13313_z * _13313_z;
	if (_1489_zz > 1.00000000999999999e-14) {
		_13213_y=_13313_z + (_13313_z * jule::div(_1489_zz * ((((_12173a540__TAN_P[static_cast<jule::Int>(0LL)] * _1489_zz) + _12173a540__TAN_P[static_cast<jule::Int>(1LL)]) * _1489_zz) + _12173a540__TAN_P[static_cast<jule::Int>(2LL)]),((((((_1489_zz + _12173a540__TAN_Q[static_cast<jule::Int>(1LL)]) * _1489_zz) + _12173a540__TAN_Q[static_cast<jule::Int>(2LL)]) * _1489_zz) + _12173a540__TAN_Q[static_cast<jule::Int>(3LL)]) * _1489_zz) + _12173a540__TAN_Q[static_cast<jule::Int>(4LL)]));
	} else {
		_13213_y=_13313_z;
	}
	if ((_13113_j & 2LL) == 2LL) {
		_13213_y=static_cast<jule::F64>(jule::div(-1LL,_13213_y));
	}
	if (_12613_sign) {
		_13213_y=static_cast<jule::F64>((-(_13213_y)));
	}
	return _13213_y;
}



inline jule::F64 _1218a35b0_mod(jule::F64 _5212_x,jule::F64 _5224_y) {
	if ((((_5224_y == 0LL) || _12192b6b0_is_inf(_5212_x,0LL)) || _12192b6b0_is_nan(_5212_x)) || _12192b6b0_is_nan(_5224_y)) {
		return static_cast<jule::F64>(_12192b6b0_nan());
	}
	_5224_y=static_cast<jule::F64>(_1219bc510_abs(_5224_y));
	jule::F64 _5810_yfr;
	jule::Int _5815_yexp;
	std::tie(_5810_yfr,_5815_yexp) = _1218cec10_frexp(_5224_y);
	jule::F64 _5913_r = _5212_x;
	if (_5212_x < 0LL) {
		_5913_r=static_cast<jule::F64>((-(_5212_x)));
	}
	_iter_begin_4621385504:;
	if (!(_5913_r >= _5224_y)) { goto _iter_end_4621385504; }
	{
		jule::F64 _6514_rfr;
		jule::Int _6523_rexp;
		std::tie(_6514_rfr,_6523_rexp) = _1218cec10_frexp(_5913_r);
		if (_6514_rfr < _5810_yfr) {
			_6523_rexp=_6523_rexp - 1LL;
		}
		_5913_r=_5913_r - _121a52e30_ldexp(_5224_y,_6523_rexp - _5815_yexp);
	}
	_iter_next_4621385504:;
	goto _iter_begin_4621385504;
	_iter_end_4621385504:;
	if (_5212_x < 0LL) {
		_5913_r=static_cast<jule::F64>((-(_5913_r)));
	}
	return _5913_r;
}



inline std::tuple<jule::F64,jule::Int> _1218cec10_frexp(jule::F64 _4718_f) {
	jule::Int _4739_exp = jule::Int();
	jule::F64 _4728_frac = jule::F64();
	{
		if (!((_4718_f == 0LL))) { goto _case_end_4621393760; }
		_case_begin_4621393760:;
		{
			_4728_frac = _4718_f;
			_4739_exp = 0LL;
			return std::make_tuple(_4728_frac,_4739_exp);
		}
		goto _match_end_4621393504;
		_case_end_4621393760:;
		if (!((_12192b6b0_is_inf(_4718_f,0LL)) || (_12192b6b0_is_nan(_4718_f)))) { goto _case_end_4621393872; }
		_case_begin_4621393872:;
		{
			_4728_frac = _4718_f;
			_4739_exp = 0LL;
			return std::make_tuple(_4728_frac,_4739_exp);
		}
		goto _match_end_4621393504;
		_case_end_4621393872:;
		_match_end_4621393504:;
	}
	std::tie(_4718_f,_4739_exp) = _12192b6b0_normalize(_4718_f);
	jule::U64 _5613_x = _12173aa20_f64_bits(_4718_f);
	_4739_exp+=static_cast<jule::Int>((static_cast<jule::Int>((_5613_x >> 52LL) & 2047LL) - 1023LL) + 1LL);
	_5613_x=_5613_x & -9218868437227405313LL;
	_5613_x|=4602678819172646912LL;
	_4728_frac=static_cast<jule::F64>(_12173aa20_f64_from_bits(_5613_x));
	return std::make_tuple(_4728_frac,_4739_exp);
}



inline jule::F32 _1218f1050_nextafter32(jule::F32 _4420_x,jule::F32 _4428_y) {
	jule::F32 _4438_r = jule::F32();
	{
		if (!((_12192b6b0_is_nan(static_cast<jule::F64>(_4420_x))) || (_12192b6b0_is_nan(static_cast<jule::F64>(_4428_y))))) { goto _case_end_4621409296; }
		_case_begin_4621409296:;
		{
			_4438_r=static_cast<jule::F32>(_12192b6b0_nan());
		}
		goto _match_end_4621407440;
		_case_end_4621409296:;
		if (!((_4420_x == _4428_y))) { goto _case_end_4621408736; }
		_case_begin_4621408736:;
		{
			_4438_r=_4420_x;
		}
		goto _match_end_4621407440;
		_case_end_4621408736:;
		if (!((_4420_x == 0LL))) { goto _case_end_4621410880; }
		_case_begin_4621410880:;
		{
			_4438_r=static_cast<jule::F32>(_121906a20_copysign(static_cast<jule::F64>(_12173aa20_f32_from_bits(1LLU)),static_cast<jule::F64>(_4428_y)));
		}
		goto _match_end_4621407440;
		_case_end_4621410880:;
		if (!(((_4428_y > _4420_x) == (_4420_x > 0LL)))) { goto _case_end_4621410992; }
		_case_begin_4621410992:;
		{
			_4438_r=static_cast<jule::F32>(_12173aa20_f32_from_bits(static_cast<jule::U32>(_12173aa20_f32_bits(_4420_x) + 1LL)));
		}
		goto _match_end_4621407440;
		_case_end_4621410992:;
		_case_begin_4621407648:;
		{
			_4438_r=static_cast<jule::F32>(_12173aa20_f32_from_bits(static_cast<jule::U32>(_12173aa20_f32_bits(_4420_x) - 1LL)));
		}
		goto _match_end_4621407440;
		_case_end_4621407648:;
		_match_end_4621407440:;
	}
	return _4438_r;
}



inline jule::F64 _1218f1050_nextafter(jule::F64 _6618_x,jule::F64 _6626_y) {
	jule::F64 _6636_r = jule::F64();
	{
		if (!((_12192b6b0_is_nan(_6618_x)) || (_12192b6b0_is_nan(_6626_y)))) { goto _case_end_4621423552; }
		_case_begin_4621423552:;
		{
			_6636_r=static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4621421648;
		_case_end_4621423552:;
		if (!((_6618_x == _6626_y))) { goto _case_end_4621422976; }
		_case_begin_4621422976:;
		{
			_6636_r=_6618_x;
		}
		goto _match_end_4621421648;
		_case_end_4621422976:;
		if (!((_6618_x == 0LL))) { goto _case_end_4621425024; }
		_case_begin_4621425024:;
		{
			_6636_r=static_cast<jule::F64>(_121906a20_copysign(static_cast<jule::F64>(_12173aa20_f64_from_bits(1LLU)),_6626_y));
		}
		goto _match_end_4621421648;
		_case_end_4621425024:;
		if (!(((_6626_y > _6618_x) == (_6618_x > 0LL)))) { goto _case_end_4621425136; }
		_case_begin_4621425136:;
		{
			_6636_r=static_cast<jule::F64>(_12173aa20_f64_from_bits(static_cast<jule::U64>(_12173aa20_f64_bits(_6618_x) + 1LL)));
		}
		goto _match_end_4621421648;
		_case_end_4621425136:;
		_case_begin_4621421856:;
		{
			_6636_r=static_cast<jule::F64>(_12173aa20_f64_from_bits(static_cast<jule::U64>(_12173aa20_f64_bits(_6618_x) - 1LL)));
		}
		goto _match_end_4621421648;
		_case_end_4621421856:;
		_match_end_4621421648:;
	}
	return _6636_r;
}



inline jule::F64 _121906a20_copysign(jule::F64 _3917_f,jule::F64 _3925_sign) {
	
	return static_cast<jule::F64>(_12173aa20_f64_from_bits(static_cast<jule::U64>((_12173aa20_f64_bits(_3917_f) & 9223372036854775807LLU) | (_12173aa20_f64_bits(_3925_sign) & 9223372036854775808LLU))));
}



inline std::tuple<jule::U64,jule::F64> _1219212d0_trig_reduce(jule::F64 _6020_x) {
	jule::F64 _6038_z = jule::F64();
	jule::U64 _6030_j = jule::U64();
	
	if (_6020_x < 7.853981633974483e-01) {
		_6030_j = 0LL;
		_6038_z = _6020_x;
		return std::make_tuple(_6030_j,_6038_z);
	}
	jule::U64 _6713_ix = _12173aa20_f64_bits(_6020_x);
	jule::Int _689_exp = (static_cast<jule::Int>((_6713_ix >> 52LL) & 2047LL) - 1023LL) - 52LL;
	_6020_x=_6713_ix & -9218868437227405313LL;
	_6713_ix|=4503599627370496LL;
	jule::Uint _7410_digit = jule::div(static_cast<jule::Uint>(_689_exp + 61LL),64LL);
	jule::Uint _7417_bitshift = static_cast<jule::Uint>(_689_exp + 61LL) % 64LL;
	std::tie(_7410_digit,_7417_bitshift) = std::make_tuple(jule::div(static_cast<jule::Uint>(_689_exp + 61LL),64LL),static_cast<jule::Uint>(_689_exp + 61LL) % 64LL);
	jule::U64 _759_z0 = (_1219212d0_M_PI4[static_cast<jule::Int>(_7410_digit)] << _7417_bitshift) | (_1219212d0_M_PI4[static_cast<jule::Int>(_7410_digit + 1LL)] >> (64LL - _7417_bitshift));
	jule::U64 _769_z1 = (_1219212d0_M_PI4[static_cast<jule::Int>(_7410_digit + 1LL)] << _7417_bitshift) | (_1219212d0_M_PI4[static_cast<jule::Int>(_7410_digit + 2LL)] >> (64LL - _7417_bitshift));
	jule::U64 _779_z2 = (_1219212d0_M_PI4[static_cast<jule::Int>(_7410_digit + 2LL)] << _7417_bitshift) | (_1219212d0_M_PI4[static_cast<jule::Int>(_7410_digit + 3LL)] >> (64LL - _7417_bitshift));
	jule::U64 _7910_z2hi;
	std::tie(_7910_z2hi,std::ignore) = _121ef7c60_mul64(_779_z2,_6713_ix);
	jule::U64 _8010_z1hi;
	jule::U64 _8016_z1lo;
	std::tie(_8010_z1hi,_8016_z1lo) = _121ef7c60_mul64(_769_z1,_6713_ix);
	jule::U64 _819_z0lo = _759_z0 * _6713_ix;
	jule::U64 _8210_lo;
	jule::U64 _8214_c;
	std::tie(_8210_lo,_8214_c) = _121ef7c60_add64(_8016_z1lo,_7910_z2hi,0LLU);
	jule::U64 _8314_hi;
	std::tie(_8314_hi,std::ignore) = _121ef7c60_add64(_819_z0lo,_8010_z1hi,_8214_c);
	_6030_j=_8314_hi >> 61LL;
	_8314_hi=(_8314_hi << 3LL) | (_8210_lo >> 61LL);
	jule::Uint _889_lz = static_cast<jule::Uint>(_121ef7c60_leading_zeros64(_8314_hi));
	jule::U64 _899_e = static_cast<jule::U64>(1023LL - (_889_lz + 1LL));
	_8314_hi=(_8314_hi << (_889_lz + 1LL)) | (_8210_lo >> (64LL - (_889_lz + 1LL)));
	_8314_hi>>=12LL;
	_8314_hi|=_899_e << 52LL;
	_6038_z=static_cast<jule::F64>(_12173aa20_f64_from_bits(_8314_hi));
	if ((_6030_j & 1LL) == 1LL) {
		(_6030_j)++;
		_6030_j&=7LL;
		(_6038_z)--;
	}
	_6030_j = _6030_j;
	_6038_z = _6038_z * 7.853981633974483e-01;
	return std::make_tuple(_6030_j,_6038_z);
}



inline jule::F64 _121929a30_atan2(jule::F64 _6014_y,jule::F64 _6022_x) {
	{
		if (!((_12192b6b0_is_nan(_6014_y)) || (_12192b6b0_is_nan(_6022_x)))) { goto _case_end_4621484240; }
		_case_begin_4621484240:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4621483936;
		_case_end_4621484240:;
		if (!((_6014_y == 0LL))) { goto _case_end_4621484352; }
		_case_begin_4621484352:;
		{
			if ((_6022_x >= 0LL) && (!(_121b8e680_signbit(_6022_x)))) {
				return static_cast<jule::F64>(_121906a20_copysign(0e+00,_6014_y));
			}
			return static_cast<jule::F64>(_121906a20_copysign(3.141592653589793e+00,_6014_y));
		}
		goto _match_end_4621483936;
		_case_end_4621484352:;
		if (!((_6022_x == 0LL))) { goto _case_end_4621484464; }
		_case_begin_4621484464:;
		{
			return static_cast<jule::F64>(_121906a20_copysign(1.5707963267948966e+00,_6014_y));
		}
		goto _match_end_4621483936;
		_case_end_4621484464:;
		if (!((_12192b6b0_is_inf(_6022_x,0LL)))) { goto _case_end_4621484592; }
		_case_begin_4621484592:;
		{
			if (_12192b6b0_is_inf(_6022_x,1LL)) {
				{
					if (!((_12192b6b0_is_inf(_6014_y,0LL)))) { goto _case_end_4621497184; }
					_case_begin_4621497184:;
					{
						return static_cast<jule::F64>(_121906a20_copysign(7.853981633974483e-01,_6014_y));
					}
					goto _match_end_4621494896;
					_case_end_4621497184:;
					_case_begin_4621495088:;
					{
						return static_cast<jule::F64>(_121906a20_copysign(0e+00,_6014_y));
					}
					goto _match_end_4621494896;
					_case_end_4621495088:;
					_match_end_4621494896:;
				}
			}
			{
				if (!((_12192b6b0_is_inf(_6014_y,0LL)))) { goto _case_end_4621500736; }
				_case_begin_4621500736:;
				{
					return static_cast<jule::F64>(_121906a20_copysign(2.356194490192345e+00,_6014_y));
				}
				goto _match_end_4621498464;
				_case_end_4621500736:;
				_case_begin_4621492384:;
				{
					return static_cast<jule::F64>(_121906a20_copysign(3.141592653589793e+00,_6014_y));
				}
				goto _match_end_4621498464;
				_case_end_4621492384:;
				_match_end_4621498464:;
			}
		}
		goto _match_end_4621483936;
		_case_end_4621484592:;
		if (!((_12192b6b0_is_inf(_6014_y,0LL)))) { goto _case_end_4621484720; }
		_case_begin_4621484720:;
		{
			return static_cast<jule::F64>(_121906a20_copysign(1.5707963267948966e+00,_6014_y));
		}
		goto _match_end_4621483936;
		_case_end_4621484720:;
		_match_end_4621483936:;
	}
	jule::F64 _929_q = _121e2b130_atan(jule::div(_6014_y,_6022_x));
	if (_6022_x < 0LL) {
		if (_929_q <= 0LL) {
			return _929_q + 3.141592653589793e+00;
		}
		return _929_q - 3.141592653589793e+00;
	}
	return _929_q;
}



inline jule::F64 _121906e90_floor(jule::F64 _4414_x) {
	if (((_4414_x == 0LL) || _12192b6b0_is_nan(_4414_x)) || _12192b6b0_is_inf(_4414_x,0LL)) {
		return _4414_x;
	}
	if (_4414_x < 0LL) {
		jule::F64 _4918_d;
		jule::F64 _4921_fract;
		std::tie(_4918_d,_4921_fract) = _121af3740_modf(static_cast<jule::F64>((-(_4414_x))));
		if (_4921_fract != 0e+00) {
			_4918_d=_4918_d + 1LL;
		}
		return static_cast<jule::F64>((-(_4918_d)));
	}
	jule::F64 _5510_d;
	std::tie(_5510_d,std::ignore) = _121af3740_modf(_4414_x);
	return _5510_d;
}



inline jule::F64 _121906e90_ceil(jule::F64 _6513_x) {
	return static_cast<jule::F64>((-(_121906e90_floor(static_cast<jule::F64>((-(_6513_x)))))));
}



inline jule::F64 _121906e90_trunc(jule::F64 _7314_x) {
	if (((_7314_x == 0LL) || _12192b6b0_is_nan(_7314_x)) || _12192b6b0_is_inf(_7314_x,0LL)) {
		return _7314_x;
	}
	jule::F64 _7710_d;
	std::tie(_7710_d,std::ignore) = _121af3740_modf(_7314_x);
	return _7710_d;
}



inline jule::F64 _121906e90_round(jule::F64 _8714_x) {
	jule::U64 _9713_bits = _12173aa20_f64_bits(_8714_x);
	jule::Uint _9813_e = static_cast<jule::Uint>(_9713_bits >> 52LL) & 2047LL;
	if (_9813_e < 1023LL) {
		_9713_bits&=9223372036854775808LLU;
		if (_9813_e == 1022LL) {
			_9713_bits|=4607182418800017408LL;
		}
	} else if (_9813_e < 1075LL) {
		
		_9813_e-=1023LL;
		_9713_bits+=static_cast<jule::Int>(2251799813685248LL >> _9813_e);
		_9713_bits&=static_cast<jule::Int>((~(4503599627370495LL >> _9813_e)));
	}
	return static_cast<jule::F64>(_12173aa20_f64_from_bits(_9713_bits));
}



inline jule::F64 _121906e90_round_even(jule::F64 _12419_x) {
	jule::U64 _13613_bits = _12173aa20_f64_bits(_12419_x);
	jule::Uint _13713_e = static_cast<jule::Uint>(_13613_bits >> 52LL) & 2047LL;
	if (_13713_e >= 1023LL) {
		
		_13713_e-=1023LL;
		_13613_bits+=static_cast<jule::U64>((2251799813685247LL + ((_13613_bits >> (52LL - _13713_e)) & 1LL)) >> _13713_e);
		_13613_bits&=static_cast<jule::Int>((~(4503599627370495LL >> _13713_e)));
	} else if ((_13713_e == 1022LL) && ((_13613_bits & 4503599627370495LL) != 0LL)) {
		_13613_bits=(_13613_bits & 9223372036854775808LLU) | 4607182418800017408LL;
	} else {
		_13613_bits&=9223372036854775808LLU;
	}
	return static_cast<jule::F64>(_12173aa20_f64_from_bits(_13613_bits));
}



inline jule::F64 _12192b6b0_nan(void) {
	return static_cast<jule::F64>(_12173aa20_f64_from_bits(9221120237041090561LLU));
}



inline jule::Bool _12192b6b0_is_nan(jule::F64 _5215_f) {
	return _5215_f != _5215_f;
}



inline jule::F64 _12192b6b0_inf(jule::Int _6112_sign) {
	if (_6112_sign >= 0LL) {
		return static_cast<jule::F64>(_12173aa20_f64_from_bits(9218868437227405312LLU));
	}
	return static_cast<jule::F64>(_12173aa20_f64_from_bits(18442240474082181120LLU));
}



inline jule::Bool _12192b6b0_is_inf(jule::F64 _7215_f,jule::Int _7223_sign) {
	return ((_7223_sign >= 0LL) && (_7215_f > jule::MAX_F64)) || ((_7223_sign <= 0LL) && (_7215_f < jule::MIN_F64));
}



inline std::tuple<jule::F64,jule::Int> _12192b6b0_normalize(jule::F64 _8214_x) {
	jule::Int _8232_exp = jule::Int();
	jule::F64 _8224_y = jule::F64();
	
	if (_1219bc510_abs(_8214_x) < 2.2250738585072014e-308) {
		_8224_y = _8214_x * 4503599627370496LL;
		_8232_exp = -52LL;
		return std::make_tuple(_8224_y,_8232_exp);
	}
	_8224_y = _8214_x;
	_8232_exp = 0LL;
	return std::make_tuple(_8224_y,_8232_exp);
}



inline std::tuple<jule::F64,jule::F64> _121973580_sincos(jule::F64 _4619_x) {
	jule::F64 _4639_cos = jule::F64();
	jule::F64 _4629_sin = jule::F64();
	
	
	
	{
		if (!((_4619_x == 0LL))) { goto _case_end_4621571696; }
		_case_begin_4621571696:;
		{
			_4629_sin = _4619_x;
			_4639_cos = 1LL;
			return std::make_tuple(_4629_sin,_4639_cos);
		}
		goto _match_end_4621571248;
		_case_end_4621571696:;
		if (!((_12192b6b0_is_nan(_4619_x)) || (_12192b6b0_is_inf(_4619_x,0LL)))) { goto _case_end_4621571808; }
		_case_begin_4621571808:;
		{
			_4629_sin = static_cast<jule::F64>(_12192b6b0_nan());
			_4639_cos = static_cast<jule::F64>(_12192b6b0_nan());
			return std::make_tuple(_4629_sin,_4639_cos);
		}
		goto _match_end_4621571248;
		_case_end_4621571808:;
		_match_end_4621571248:;
	}
	jule::Bool _5914_sin_sign = false;
	jule::Bool _5928_cos_sign = false;
	std::tie(_5914_sin_sign,_5928_cos_sign) = std::make_tuple(false,false);
	if (_4619_x < 0LL) {
		_4619_x=static_cast<jule::F64>((-(_4619_x)));
		_5914_sin_sign=true;
	}
	jule::U64 _6513_j = 0LLU;
	jule::F64 _6613_y = 0e+00;
	jule::F64 _6713_z = 0e+00;
	if (_4619_x >= 536870912LL) {
		std::tie(_6513_j,_6713_z) = _1219212d0_trig_reduce(_4619_x);
	} else {
		_6513_j=static_cast<jule::U64>(_4619_x * 1.2732395447351628e+00);
		_6613_y=static_cast<jule::F64>(_6513_j);
		if ((_6513_j & 1LL) == 1LL) {
			(_6513_j)++;
			(_6613_y)++;
		}
		_6513_j&=7LL;
		_6713_z=((_4619_x - (_6613_y * 7.853981256484985e-01)) - (_6613_y * 3.774894707930798e-08)) - (_6613_y * 2.6951514290790595e-15);
	}
	if (_6513_j > 3LL) {
		_6513_j-=4LL;
		std::tie(_5914_sin_sign,_5928_cos_sign) = std::make_tuple((!(_5914_sin_sign)),(!(_5928_cos_sign)));
	}
	if (_6513_j > 1LL) {
		_5928_cos_sign=(!(_5928_cos_sign));
	}
	jule::F64 _899_zz = _6713_z * _6713_z;
	_4639_cos=static_cast<jule::F64>((1e+00 - (5e-01 * _899_zz)) + ((_899_zz * _899_zz) * ((((((((((_121886250__COS[static_cast<jule::Int>(0LL)] * _899_zz) + _121886250__COS[static_cast<jule::Int>(1LL)]) * _899_zz) + _121886250__COS[static_cast<jule::Int>(2LL)]) * _899_zz) + _121886250__COS[static_cast<jule::Int>(3LL)]) * _899_zz) + _121886250__COS[static_cast<jule::Int>(4LL)]) * _899_zz) + _121886250__COS[static_cast<jule::Int>(5LL)])));
	_4629_sin=_6713_z + ((_6713_z * _899_zz) * ((((((((((_121886250__SIN[static_cast<jule::Int>(0LL)] * _899_zz) + _121886250__SIN[static_cast<jule::Int>(1LL)]) * _899_zz) + _121886250__SIN[static_cast<jule::Int>(2LL)]) * _899_zz) + _121886250__SIN[static_cast<jule::Int>(3LL)]) * _899_zz) + _121886250__SIN[static_cast<jule::Int>(4LL)]) * _899_zz) + _121886250__SIN[static_cast<jule::Int>(5LL)]));
	if ((_6513_j == 1LL) || (_6513_j == 2LL)) {
		std::tie(_4629_sin,_4639_cos) = std::make_tuple(_4639_cos,_4629_sin);
	}
	if (_5928_cos_sign) {
		_4639_cos=static_cast<jule::F64>((-(_4639_cos)));
	}
	if (_5914_sin_sign) {
		_4629_sin=static_cast<jule::F64>((-(_4629_sin)));
	}
	return std::make_tuple(_4629_sin,_4639_cos);
}



inline jule::F64 _121990700_dim(jule::F64 _4412_x,jule::F64 _4420_y) {
	jule::F64 _509_v = _4412_x - _4420_y;
	if (_509_v <= 0LL) {
		return 0LL;
	}
	return _509_v;
}



inline jule::F64 _121990700_max(jule::F64 _6612_x,jule::F64 _6620_y) {
	{
		if (!((_12192b6b0_is_inf(_6612_x,1LL)) || (_12192b6b0_is_inf(_6620_y,1LL)))) { goto _case_end_4621625312; }
		_case_begin_4621625312:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(1LL));
		}
		goto _match_end_4621625040;
		_case_end_4621625312:;
		if (!((_12192b6b0_is_nan(_6612_x)) || (_12192b6b0_is_nan(_6620_y)))) { goto _case_end_4621625424; }
		_case_begin_4621625424:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4621625040;
		_case_end_4621625424:;
		if (!(((_6612_x == 0LL) && (_6612_x == _6620_y)))) { goto _case_end_4621625536; }
		_case_begin_4621625536:;
		{
			if (_121b8e680_signbit(_6612_x)) {
				return _6620_y;
			}
			return _6612_x;
		}
		goto _match_end_4621625040;
		_case_end_4621625536:;
		_match_end_4621625040:;
	}
	if (_6612_x > _6620_y) {
		return _6612_x;
	}
	return _6620_y;
}



inline jule::F64 _121990700_min(jule::F64 _9212_x,jule::F64 _9220_y) {
	{
		if (!((_12192b6b0_is_inf(_9212_x,-1LL)) || (_12192b6b0_is_inf(_9220_y,-1LL)))) { goto _case_end_4621634880; }
		_case_begin_4621634880:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(-1LL));
		}
		goto _match_end_4621634608;
		_case_end_4621634880:;
		if (!((_12192b6b0_is_nan(_9212_x)) || (_12192b6b0_is_nan(_9220_y)))) { goto _case_end_4621634992; }
		_case_begin_4621634992:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4621634608;
		_case_end_4621634992:;
		if (!(((_9212_x == 0LL) && (_9212_x == _9220_y)))) { goto _case_end_4621635104; }
		_case_begin_4621635104:;
		{
			if (_121b8e680_signbit(_9212_x)) {
				return _9212_x;
			}
			return _9220_y;
		}
		goto _match_end_4621634608;
		_case_end_4621635104:;
		_match_end_4621634608:;
	}
	if (_9212_x < _9220_y) {
		return _9212_x;
	}
	return _9220_y;
}



inline jule::F64 _121961860_log(jule::F64 _11112_x) {
	
	
	
	
	
	
	
	
	
	{
		if (!((_12192b6b0_is_nan(_11112_x)) || (_12192b6b0_is_inf(_11112_x,1LL)))) { goto _case_end_4621653488; }
		_case_begin_4621653488:;
		{
			return _11112_x;
		}
		goto _match_end_4621653264;
		_case_end_4621653488:;
		if (!((_11112_x < 0LL))) { goto _case_end_4621653600; }
		_case_begin_4621653600:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4621653264;
		_case_end_4621653600:;
		if (!((_11112_x == 0LL))) { goto _case_end_4621653712; }
		_case_begin_4621653712:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(-1LL));
		}
		goto _match_end_4621653264;
		_case_end_4621653712:;
		_match_end_4621653264:;
	}
	jule::F64 _13314_f1;
	jule::Int _13322_ki;
	std::tie(_13314_f1,_13322_ki) = _1218cec10_frexp(_11112_x);
	if (_13314_f1 < 7.071067811865476e-01) {
		_13314_f1*=2LL;
		(_13322_ki)--;
	}
	jule::F64 _1389_f = _13314_f1 - 1LL;
	jule::F64 _1399_k = static_cast<jule::F64>(_13322_ki);
	jule::F64 _1429_s = jule::div(_1389_f,2LL + _1389_f);
	jule::F64 _1439_s2 = _1429_s * _1429_s;
	jule::F64 _1449_s4 = _1439_s2 * _1439_s2;
	jule::F64 _1459_t1 = _1439_s2 * (6.666666666666735e-01 + (_1449_s4 * (2.857142874366239e-01 + (_1449_s4 * (1.818357216161805e-01 + (_1449_s4 * 1.4798198605116586e-01))))));
	jule::F64 _1469_t2 = _1449_s4 * (3.999999999940942e-01 + (_1449_s4 * (2.2222198432149784e-01 + (_1449_s4 * 1.5313837699209373e-01))));
	jule::F64 _1479_R = _1459_t1 + _1469_t2;
	jule::F64 _1489_hfsq = (5e-01 * _1389_f) * _1389_f;
	return (_1399_k * 6.931471803691238e-01) - ((_1489_hfsq - ((_1429_s * (_1489_hfsq + _1479_R)) + (_1399_k * 1.9082149292705877e-10))) - _1389_f);
}



inline jule::F64 _1219f3b40_expm1(jule::F64 _15618_x) {
	
	
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_12192b6b0_is_inf(_15618_x,1LL)) || (_12192b6b0_is_nan(_15618_x)))) { goto _case_end_4621694576; }
		_case_begin_4621694576:;
		{
			return _15618_x;
		}
		goto _match_end_4621694368;
		_case_end_4621694576:;
		if (!((_12192b6b0_is_inf(_15618_x,-1LL)))) { goto _case_end_4621694688; }
		_case_begin_4621694688:;
		{
			return -1LL;
		}
		goto _match_end_4621694368;
		_case_end_4621694688:;
		_match_end_4621694368:;
	}
	jule::F64 _18013_absx = _15618_x;
	jule::Bool _18113_sign = false;
	if (_15618_x < 0LL) {
		_18013_absx=static_cast<jule::F64>((-(_18013_absx)));
		_18113_sign=true;
	}
	if (_18013_absx >= 3.8816242111356935e+01) {
		if (_18113_sign) {
			return -1LL;
		}
		if (_18013_absx >= 7.09782712893384e+02) {
			return static_cast<jule::F64>(_12192b6b0_inf(1LL));
		}
	}
	jule::F64 _19813_c = 0e+00;
	jule::Int _19913_k = 0LL;
	if (_18013_absx > 3.4657359027997264e-01) {
		jule::F64 _20117_hi = 0e+00;
		jule::F64 _20217_lo = 0e+00;
		if (_18013_absx < 1.0397207708399179e+00) {
			if ((!(_18113_sign))) {
				_20117_hi=_15618_x - 6.931471803691238e-01;
				_20217_lo=1.9082149292705877e-10;
				_19913_k=1LL;
			} else {
				_20117_hi=_15618_x + 6.931471803691238e-01;
				_20217_lo=-1.9082149292705877e-10;
				_19913_k=-1LL;
			}
		} else {
			if ((!(_18113_sign))) {
				_19913_k=static_cast<jule::Int>((1.4426950408889634e+00 * _15618_x) + 5e-01);
			} else {
				_19913_k=static_cast<jule::Int>((1.4426950408889634e+00 * _15618_x) - 5e-01);
			}
			jule::F64 _21917_t = static_cast<jule::F64>(_19913_k);
			_20117_hi=_15618_x - (_21917_t * 6.931471803691238e-01);
			_20217_lo=_21917_t * 1.9082149292705877e-10;
		}
		_15618_x=_20117_hi - _20217_lo;
		_19813_c=(_20117_hi - _15618_x) - _20217_lo;
	} else if (_18013_absx < 5.551115123125783e-17) {
		return _15618_x;
	} else {
		_19913_k=0LL;
	}
	jule::F64 _2329_hfx = 5e-01 * _15618_x;
	jule::F64 _2339_hxs = _15618_x * _2329_hfx;
	jule::F64 _2349_r1 = 1LL + (_2339_hxs * (-3.333333333333313e-02 + (_2339_hxs * (1.5873015872548146e-03 + (_2339_hxs * (-7.93650757867488e-05 + (_2339_hxs * (4.008217827329362e-06 + (_2339_hxs * -2.0109921818362437e-07)))))))));
	jule::F64 _23513_t = 3LL - (_2349_r1 * _2329_hfx);
	jule::F64 _23613_e = _2339_hxs * jule::div(_2349_r1 - _23513_t,6e+00 - (_15618_x * _23513_t));
	if (_19913_k == 0LL) {
		return _15618_x - ((_15618_x * _23613_e) - _2339_hxs);
	}
	_23613_e=(_15618_x * (_23613_e - _19813_c)) - _19813_c;
	_23613_e-=_2339_hxs;
	{
		if (!((_19913_k == -1LL))) { goto _case_end_4621739008; }
		_case_begin_4621739008:;
		{
			return static_cast<jule::F64>((5e-01 * (_15618_x - _23613_e)) - 5e-01);
		}
		goto _match_end_4621737280;
		_case_end_4621739008:;
		if (!((_19913_k == 1LL))) { goto _case_end_4621739120; }
		_case_begin_4621739120:;
		{
			if (_15618_x < -2.5e-01) {
				return static_cast<jule::F64>(-2LL * (_23613_e - (_15618_x + 5e-01)));
			}
			return static_cast<jule::F64>(1LL + (2LL * (_15618_x - _23613_e)));
		}
		goto _match_end_4621737280;
		_case_end_4621739120:;
		if (!((_19913_k <= -2LL) || (_19913_k > 56LL))) { goto _case_end_4621739232; }
		_case_begin_4621739232:;
		{
			jule::F64 _25117_y = 1LL - (_23613_e - _15618_x);
			_25117_y=static_cast<jule::F64>(_12173aa20_f64_from_bits(static_cast<jule::U64>(_12173aa20_f64_bits(_25117_y) + (static_cast<jule::U64>(_19913_k) << 52LL))));
			return _25117_y - 1LL;
		}
		goto _match_end_4621737280;
		_case_end_4621739232:;
		_match_end_4621737280:;
	}
	if (_19913_k < 20LL) {
		jule::F64 _25613_t = _12173aa20_f64_from_bits(static_cast<jule::U64>(4607182418800017408LL - (9007199254740992LL >> static_cast<jule::Uint>(_19913_k))));
		jule::F64 _25717_y = _25613_t - (_23613_e - _15618_x);
		_25717_y=static_cast<jule::F64>(_12173aa20_f64_from_bits(static_cast<jule::U64>(_12173aa20_f64_bits(_25717_y) + (static_cast<jule::U64>(_19913_k) << 52LL))));
		return _25717_y;
	}
	_23513_t=static_cast<jule::F64>(_12173aa20_f64_from_bits(static_cast<jule::U64>(static_cast<jule::U64>(1023LL - _19913_k) << 52LL)));
	jule::F64 _26213_y = _15618_x - (_23613_e + _23513_t);
	(_26213_y)++;
	_26213_y=static_cast<jule::F64>(_12173aa20_f64_from_bits(static_cast<jule::U64>(_12173aa20_f64_bits(_26213_y) + (static_cast<jule::U64>(_19913_k) << 52LL))));
	return _26213_y;
}



inline jule::F64 _1219bc510_abs(jule::F64 _4312_x) {
	return static_cast<jule::F64>(_12173aa20_f64_from_bits(static_cast<jule::U64>(_12173aa20_f64_bits(_4312_x) & 9223372036854775807LLU)));
}



inline jule::F64 _121a0dc40_j1(jule::F64 _10515_x) {
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_12192b6b0_is_nan(_10515_x)))) { goto _case_end_4621778832; }
		_case_begin_4621778832:;
		{
			return _10515_x;
		}
		goto _match_end_4621778624;
		_case_end_4621778832:;
		if (!((_12192b6b0_is_inf(_10515_x,0LL)) || (_10515_x == 0LL))) { goto _case_end_4621778944; }
		_case_begin_4621778944:;
		{
			return 0LL;
		}
		goto _match_end_4621778624;
		_case_end_4621778944:;
		_match_end_4621778624:;
	}
	jule::Bool _12613_sign = false;
	if (_10515_x < 0LL) {
		_10515_x=static_cast<jule::F64>((-(_10515_x)));
		_12613_sign=true;
	}
	if (_10515_x >= 2LL) {
		jule::F64 _13214_s;
		jule::F64 _13217_c;
		std::tie(_13214_s,_13217_c) = _121973580_sincos(_10515_x);
		jule::F64 _13317_ss = (-(_13214_s)) - _13217_c;
		jule::F64 _13417_cc = _13214_s - _13217_c;
		if (_10515_x < 8.988465674311579e+307) {
			jule::F64 _13817_z = _121886250_cos(_10515_x + _10515_x);
			if ((_13214_s * _13217_c) > 0LL) {
				_13417_cc=jule::div(_13817_z,_13317_ss);
			} else {
				_13317_ss=jule::div(_13817_z,_13417_cc);
			}
		}
		jule::F64 _14917_z = 0e+00;
		if (_10515_x > 5188146770730811392LL) {
			_14917_z=static_cast<jule::F64>(jule::div(5.641895835477563e-01 * _13417_cc,_121d2f040_sqrt(_10515_x)));
		} else {
			jule::F64 _15317_u = _121a0dc40_pone(_10515_x);
			jule::F64 _15417_v = _121a0dc40_qone(_10515_x);
			_14917_z=static_cast<jule::F64>(jule::div(5.641895835477563e-01 * ((_15317_u * _13417_cc) - (_15417_v * _13317_ss)),_121d2f040_sqrt(_10515_x)));
		}
		if (_12613_sign) {
			return static_cast<jule::F64>((-(_14917_z)));
		}
		return _14917_z;
	}
	if (_10515_x < 7.450580596923828e-09) {
		return static_cast<jule::F64>(5e-01 * _10515_x);
	}
	jule::F64 _16613_z = _10515_x * _10515_x;
	jule::F64 _16713_r = _16613_z * (-6.25e-02 + (_16613_z * (1.407056669551897e-03 + (_16613_z * (-1.599556310840356e-05 + (_16613_z * 4.9672799960958445e-08))))));
	jule::F64 _1689_s = 1e+00 + (_16613_z * (1.9153759953836346e-02 + (_16613_z * (1.8594678558863092e-04 + (_16613_z * (1.1771846404262368e-06 + (_16613_z * (5.0463625707621704e-09 + (_16613_z * 1.2354227442613791e-11)))))))));
	_16713_r*=_10515_x;
	_16613_z=static_cast<jule::F64>((5e-01 * _10515_x) + jule::div(_16713_r,_1689_s));
	if (_12613_sign) {
		return static_cast<jule::F64>((-(_16613_z)));
	}
	return _16613_z;
}



inline jule::F64 _121a0dc40_y1(jule::F64 _18411_x) {
	
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_18411_x < 0LL) || (_12192b6b0_is_nan(_18411_x)))) { goto _case_end_4621831808; }
		_case_begin_4621831808:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4621831584;
		_case_end_4621831808:;
		if (!((_12192b6b0_is_inf(_18411_x,1LL)))) { goto _case_end_4621831920; }
		_case_begin_4621831920:;
		{
			return 0LL;
		}
		goto _match_end_4621831584;
		_case_end_4621831920:;
		if (!((_18411_x == 0LL))) { goto _case_end_4621832032; }
		_case_begin_4621832032:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(-1LL));
		}
		goto _match_end_4621831584;
		_case_end_4621832032:;
		_match_end_4621831584:;
	}
	if (_18411_x >= 2LL) {
		jule::F64 _20814_s;
		jule::F64 _20817_c;
		std::tie(_20814_s,_20817_c) = _121973580_sincos(_18411_x);
		jule::F64 _20917_ss = (-(_20814_s)) - _20817_c;
		jule::F64 _21017_cc = _20814_s - _20817_c;
		if (_18411_x < 8.988465674311579e+307) {
			jule::F64 _21417_z = _121886250_cos(_18411_x + _18411_x);
			if ((_20814_s * _20817_c) > 0LL) {
				_21017_cc=jule::div(_21417_z,_20917_ss);
			} else {
				_20917_ss=jule::div(_21417_z,_21017_cc);
			}
		}
		jule::F64 _23217_z = 0e+00;
		if (_18411_x > 5188146770730811392LL) {
			_23217_z=static_cast<jule::F64>(jule::div(5.641895835477563e-01 * _20917_ss,_121d2f040_sqrt(_18411_x)));
		} else {
			jule::F64 _23617_u = _121a0dc40_pone(_18411_x);
			jule::F64 _23717_v = _121a0dc40_qone(_18411_x);
			_23217_z=static_cast<jule::F64>(jule::div(5.641895835477563e-01 * ((_23617_u * _20917_ss) + (_23717_v * _21017_cc)),_121d2f040_sqrt(_18411_x)));
		}
		return _23217_z;
	}
	if (_18411_x <= 5.551115123125783e-17) {
		return static_cast<jule::F64>(jule::div(-6.366197723675814e-01,_18411_x));
	}
	jule::F64 _2459_z = _18411_x * _18411_x;
	jule::F64 _2469_u = -1.9605709064623894e-01 + (_2459_z * (5.044387166398113e-02 + (_2459_z * (-1.9125689587576355e-03 + (_2459_z * (2.352526005616105e-05 + (_2459_z * -9.190991580398789e-08)))))));
	jule::F64 _2479_v = 1LL + (_2459_z * (1.991673182366499e-02 + (_2459_z * (2.0255258102513517e-04 + (_2459_z * (1.3560880109751623e-06 + (_2459_z * (6.227414523646215e-09 + (_2459_z * 1.6655924620799208e-11)))))))));
	return (_18411_x * jule::div(_2469_u,_2479_v)) + (6.366197723675814e-01 * ((_121a0dc40_j1(_18411_x) * _121961860_log(_18411_x)) - jule::div(1LL,_18411_x)));
}



inline jule::F64 _121a0dc40_pone(jule::F64 _3289_x) {
	jule::Array<jule::F64,6>* _32913_p = nullptr;
	jule::Array<jule::F64,5>* _33013_q = nullptr;
	if (_3289_x >= 8LL) {
		_32913_p=(&(_121a0dc40_P_1R8));
		_33013_q=(&(_121a0dc40_P_1S8));
	} else if (_3289_x >= 4.5454e+00) {
		_32913_p=(&(_121a0dc40_P_1R5));
		_33013_q=(&(_121a0dc40_P_1S5));
	} else if (_3289_x >= 2.8571000999999999e+00) {
		_32913_p=(&(_121a0dc40_P_1R3));
		_33013_q=(&(_121a0dc40_P_1S3));
	} else if (_3289_x >= 2LL) {
		_32913_p=(&(_121a0dc40_P_1R2));
		_33013_q=(&(_121a0dc40_P_1S2));
	}
	{
		jule::F64 _34513_z = jule::div(1LL,_3289_x * _3289_x);
		jule::F64 _34613_r = (*(_32913_p))[static_cast<jule::Int>(0LL)] + (_34513_z * ((*(_32913_p))[static_cast<jule::Int>(1LL)] + (_34513_z * ((*(_32913_p))[static_cast<jule::Int>(2LL)] + (_34513_z * ((*(_32913_p))[static_cast<jule::Int>(3LL)] + (_34513_z * ((*(_32913_p))[static_cast<jule::Int>(4LL)] + (_34513_z * (*(_32913_p))[static_cast<jule::Int>(5LL)])))))))));
		jule::F64 _34713_s = 1e+00 + (_34513_z * ((*(_33013_q))[static_cast<jule::Int>(0LL)] + (_34513_z * ((*(_33013_q))[static_cast<jule::Int>(1LL)] + (_34513_z * ((*(_33013_q))[static_cast<jule::Int>(2LL)] + (_34513_z * ((*(_33013_q))[static_cast<jule::Int>(3LL)] + (_34513_z * (*(_33013_q))[static_cast<jule::Int>(4LL)])))))))));
		return static_cast<jule::F64>(1LL + jule::div(_34613_r,_34713_s));
	}
}



inline jule::F64 _121a0dc40_qone(jule::F64 _4339_x) {
	jule::Array<jule::F64,6>* _43413_p = nullptr;
	jule::Array<jule::F64,6>* _43513_q = nullptr;
	if (_4339_x >= 8LL) {
		_43413_p=(&(_121a0dc40_Q_1R8));
		_43513_q=(&(_121a0dc40_Q_1S8));
	} else if (_4339_x >= 4.5454e+00) {
		_43413_p=(&(_121a0dc40_Q_1R5));
		_43513_q=(&(_121a0dc40_Q_1S5));
	} else if (_4339_x >= 2.8571000999999999e+00) {
		_43413_p=(&(_121a0dc40_Q_1R3));
		_43513_q=(&(_121a0dc40_Q_1S3));
	} else if (_4339_x >= 2LL) {
		_43413_p=(&(_121a0dc40_Q_1R2));
		_43513_q=(&(_121a0dc40_Q_1S2));
	}
	{
		jule::F64 _45013_z = jule::div(1LL,_4339_x * _4339_x);
		jule::F64 _45113_r = (*(_43413_p))[static_cast<jule::Int>(0LL)] + (_45013_z * ((*(_43413_p))[static_cast<jule::Int>(1LL)] + (_45013_z * ((*(_43413_p))[static_cast<jule::Int>(2LL)] + (_45013_z * ((*(_43413_p))[static_cast<jule::Int>(3LL)] + (_45013_z * ((*(_43413_p))[static_cast<jule::Int>(4LL)] + (_45013_z * (*(_43413_p))[static_cast<jule::Int>(5LL)])))))))));
		jule::F64 _45213_s = 1LL + (_45013_z * ((*(_43513_q))[static_cast<jule::Int>(0LL)] + (_45013_z * ((*(_43513_q))[static_cast<jule::Int>(1LL)] + (_45013_z * ((*(_43513_q))[static_cast<jule::Int>(2LL)] + (_45013_z * ((*(_43513_q))[static_cast<jule::Int>(3LL)] + (_45013_z * ((*(_43513_q))[static_cast<jule::Int>(4LL)] + (_45013_z * (*(_43513_q))[static_cast<jule::Int>(5LL)])))))))))));
		return static_cast<jule::F64>(jule::div(3.75e-01 + jule::div(_45113_r,_45213_s),_4339_x));
	}
}



inline jule::U64 _121ab8ba0_zero(jule::U64 _409_x) {
	if (_409_x == 0LL) {
		return 1LL;
	}
	return 0LL;
}



inline jule::U64 _121ab8ba0_nonzero(jule::U64 _4912_x) {
	if (_4912_x != 0LL) {
		return 1LL;
	}
	return 0LL;
}



inline std::tuple<jule::U64,jule::U64> _121ab8ba0_shl(jule::U64 _588_u1,jule::U64 _5817_u2,jule::Uint _5826_n) {
	jule::U64 _5846_r2 = jule::U64();
	jule::U64 _5837_r1 = jule::U64();
	_5837_r1=((_588_u1 << _5826_n) | (_5817_u2 >> (64LL - _5826_n))) | (_5817_u2 << (_5826_n - 64LL));
	_5846_r2=_5817_u2 << _5826_n;
	return std::make_tuple(_5837_r1,_5846_r2);
}



inline std::tuple<jule::U64,jule::U64> _121ab8ba0_shr(jule::U64 _648_u1,jule::U64 _6417_u2,jule::Uint _6426_n) {
	jule::U64 _6446_r2 = jule::U64();
	jule::U64 _6437_r1 = jule::U64();
	jule::U64 _7113_shift = _648_u1;
	jule::Uint _7213_shift_n = _6426_n - 64LL;
	_iter_begin_4621945936:;
	if (!((_7113_shift > 0LL) && (_7213_shift_n > 0LL))) { goto _iter_end_4621945936; }
	{
		(_7213_shift_n)--;
		_7113_shift>>=1LL;
	}
	_iter_next_4621945936:;
	goto _iter_begin_4621945936;
	_iter_end_4621945936:;
	_6446_r2=((_6417_u2 >> _6426_n) | (_648_u1 << (64LL - _6426_n))) | _7113_shift;
	_6437_r1=_648_u1 >> _6426_n;
	return std::make_tuple(_6437_r1,_6446_r2);
}



inline std::tuple<jule::U64,jule::U64> _121ab8ba0_shrcompress(jule::U64 _8716_u1,jule::U64 _8725_u2,jule::Uint _8734_n) {
	jule::U64 _8754_r2 = jule::U64();
	jule::U64 _8745_r1 = jule::U64();
	{
		if (!((_8734_n == 0LL))) { goto _case_end_4621954384; }
		_case_begin_4621954384:;
		{
			_8745_r1 = _8716_u1;
			_8754_r2 = _8725_u2;
			return std::make_tuple(_8745_r1,_8754_r2);
		}
		goto _match_end_4621954080;
		_case_end_4621954384:;
		if (!((_8734_n == 64LL))) { goto _case_end_4621954496; }
		_case_begin_4621954496:;
		{
			_8745_r1 = 0LL;
			_8754_r2 = _8716_u1 | _121ab8ba0_nonzero(_8725_u2);
			return std::make_tuple(_8745_r1,_8754_r2);
		}
		goto _match_end_4621954080;
		_case_end_4621954496:;
		if (!((_8734_n >= 128LL))) { goto _case_end_4621954608; }
		_case_begin_4621954608:;
		{
			_8745_r1 = 0LL;
			_8754_r2 = static_cast<jule::U64>(_121ab8ba0_nonzero(_8716_u1 | _8725_u2));
			return std::make_tuple(_8745_r1,_8754_r2);
		}
		goto _match_end_4621954080;
		_case_end_4621954608:;
		if (!((_8734_n < 64LL))) { goto _case_end_4621954736; }
		_case_begin_4621954736:;
		{
			std::tie(_8745_r1,_8754_r2) = _121ab8ba0_shr(_8716_u1,_8725_u2,_8734_n);
			_8754_r2|=static_cast<jule::U64>(_121ab8ba0_nonzero(_8725_u2 & ((1LL << _8734_n) - 1LL)));
		}
		goto _match_end_4621954080;
		_case_end_4621954736:;
		if (!((_8734_n < 128LL))) { goto _case_end_4621954864; }
		_case_begin_4621954864:;
		{
			std::tie(_8745_r1,_8754_r2) = _121ab8ba0_shr(_8716_u1,_8725_u2,_8734_n);
			_8754_r2|=static_cast<jule::U64>(_121ab8ba0_nonzero((_8716_u1 & ((1LL << (_8734_n - 64LL)) - 1LL)) | _8725_u2));
		}
		goto _match_end_4621954080;
		_case_end_4621954864:;
		_match_end_4621954080:;
	}
	return std::make_tuple(_8745_r1,_8754_r2);
}



inline jule::I32 _121ab8ba0_lz(jule::U64 _1057_u1,jule::U64 _10516_u2) {
	jule::I32 _10527_l = jule::I32();
	_10527_l=static_cast<jule::I32>(_121ef7c60_leading_zeros64(_1057_u1));
	if (_10527_l == 64LL) {
		_10527_l+=static_cast<jule::I32>(_121ef7c60_leading_zeros64(_10516_u2));
	}
	_10527_l = _10527_l;
	return _10527_l;
}



inline std::tuple<jule::U32,jule::I32,jule::U64> _121ab8ba0_split(jule::U64 _11610_b) {
	jule::U64 _11641_mantissa = jule::U64();
	jule::I32 _11631_exp = jule::I32();
	jule::U32 _11620_sign = jule::U32();
	_11620_sign=static_cast<jule::U32>(_11610_b >> 63LL);
	_11631_exp=static_cast<jule::I32>(static_cast<jule::I32>(_11610_b >> 52LL) & 2047LL);
	_11641_mantissa=_11610_b & 4503599627370495LL;
	if (_11631_exp == 0LL) {
		jule::Uint _12313_shift = static_cast<jule::Uint>(_121ef7c60_leading_zeros64(_11641_mantissa) - 11LL);
		_11641_mantissa<<=_12313_shift;
		_11631_exp=static_cast<jule::I32>(1LL - static_cast<jule::I32>(_12313_shift));
	} else {
		_11641_mantissa|=4503599627370496LL;
	}
	return std::make_tuple(_11620_sign,_11631_exp,_11641_mantissa);
}



inline jule::F64 _121ab8ba0_fma(jule::F64 _13512_x,jule::F64 _13520_y,jule::F64 _13528_z) {
	jule::U64 _13610_bx = _12173aa20_f64_bits(_13512_x);
	jule::U64 _13614_by = _12173aa20_f64_bits(_13520_y);
	jule::U64 _13618_bz = _12173aa20_f64_bits(_13528_z);
	std::tie(_13610_bx,_13614_by,_13618_bz) = std::make_tuple(_12173aa20_f64_bits(_13512_x),_12173aa20_f64_bits(_13520_y),_12173aa20_f64_bits(_13528_z));
	if (((((_13512_x == 0e+00) || (_13520_y == 0e+00)) || (_13528_z == 0e+00)) || ((_13610_bx & 9218868437227405312LL) == 9218868437227405312LL)) || ((_13614_by & 9218868437227405312LL) == 9218868437227405312LL)) {
		return (_13512_x * _13520_y) + _13528_z;
	}
	if ((_13618_bz & 9218868437227405312LL) == 9218868437227405312LL) {
		return _13528_z;
	}
	jule::U32 _15010_xs;
	jule::I32 _15014_xe;
	jule::U64 _15018_xm;
	std::tie(_15010_xs,_15014_xe,_15018_xm) = _121ab8ba0_split(_13610_bx);
	jule::U32 _15110_ys;
	jule::I32 _15114_ye;
	jule::U64 _15118_ym;
	std::tie(_15110_ys,_15114_ye,_15118_ym) = _121ab8ba0_split(_13614_by);
	jule::U32 _15214_zs;
	jule::I32 _15222_ze;
	jule::U64 _15226_zm;
	std::tie(_15214_zs,_15222_ze,_15226_zm) = _121ab8ba0_split(_13618_bz);
	jule::I32 _15613_pe = ((_15014_xe + _15114_ye) - 1023LL) + 1LL;
	jule::U64 _16114_pm1;
	jule::U64 _16123_pm2;
	std::tie(_16114_pm1,_16123_pm2) = _121ef7c60_mul64(_15018_xm << 10LL,_15118_ym << 11LL);
	jule::U64 _16214_zm1 = _15226_zm << 10LL;
	jule::U64 _16223_zm2 = static_cast<jule::U64>(0LLU);
	std::tie(_16214_zm1,_16223_zm2) = std::make_tuple(_15226_zm << 10LL,static_cast<jule::U64>(0LLU));
	jule::U32 _16313_ps = _15010_xs ^ _15110_ys;
	jule::Uint _1669_is62zero = static_cast<jule::Uint>(((~(_16114_pm1)) >> 62LL) & 1LL);
	std::tie(_16114_pm1,_16123_pm2) = _121ab8ba0_shl(_16114_pm1,_16123_pm2,_1669_is62zero);
	_15613_pe-=static_cast<jule::I32>(_1669_is62zero);
	if ((_15613_pe < _15222_ze) || ((_15613_pe == _15222_ze) && (_16114_pm1 < _16214_zm1))) {
		std::tie(_16313_ps,_15613_pe,_16114_pm1,_16123_pm2,_15214_zs,_15222_ze,_16214_zm1,_16223_zm2) = std::make_tuple(_15214_zs,_15222_ze,_16214_zm1,_16223_zm2,_16313_ps,static_cast<jule::I32>(_15613_pe),_16114_pm1,_16123_pm2);
	}
	std::tie(_16214_zm1,_16223_zm2) = _121ab8ba0_shrcompress(_16214_zm1,_16223_zm2,static_cast<jule::Uint>(_15613_pe - _15222_ze));
	jule::U64 _17913_m = 0LLU;
	jule::U64 _18013_c = 0LLU;
	if (_16313_ps == _15214_zs) {
		std::tie(_16123_pm2,_18013_c) = _121ef7c60_add64(_16123_pm2,_16223_zm2,0LLU);
		std::tie(_16114_pm1,std::ignore) = _121ef7c60_add64(_16114_pm1,_16214_zm1,_18013_c);
		_15613_pe-=static_cast<jule::I32>((~(_16114_pm1)) >> 63LL);
		std::tie(_16114_pm1,_17913_m) = _121ab8ba0_shrcompress(_16114_pm1,_16123_pm2,static_cast<jule::Uint>(64LL + (_16114_pm1 >> 63LL)));
	} else {
		std::tie(_16123_pm2,_18013_c) = _121ef7c60_sub64(_16123_pm2,_16223_zm2,0LLU);
		std::tie(_16114_pm1,std::ignore) = _121ef7c60_sub64(_16114_pm1,_16214_zm1,_18013_c);
		jule::I32 _19113_nz = _121ab8ba0_lz(_16114_pm1,_16123_pm2);
		_15613_pe-=_19113_nz;
		std::tie(_17913_m,_16123_pm2) = _121ab8ba0_shl(_16114_pm1,_16123_pm2,static_cast<jule::Uint>(_19113_nz - 1LL));
		_17913_m|=static_cast<jule::U64>(_121ab8ba0_nonzero(_16123_pm2));
	}
	if ((_15613_pe > 2045LL) || ((_15613_pe == 2045LL) && (((_17913_m + 512LL) >> 63LL) == 1LL))) {
		return static_cast<jule::F64>(_12173aa20_f64_from_bits(static_cast<jule::U64>((static_cast<jule::U64>(_16313_ps) << 63LL) | 9218868437227405312LL)));
	}
	if (_15613_pe < 0LL) {
		jule::Uint _20313_n = static_cast<jule::Uint>((-(_15613_pe)));
		_17913_m=(_17913_m >> _20313_n) | _121ab8ba0_nonzero(_17913_m & ((1LL << _20313_n) - 1LL));
		_15613_pe=0LL;
	}
	_17913_m=((_17913_m + 512LL) >> 10LL) & (~(_121ab8ba0_zero((_17913_m & 1023LL) ^ 512LL)));
	_15613_pe&=static_cast<jule::I32>((-(static_cast<jule::I32>(_121ab8ba0_nonzero(_17913_m)))));
	return static_cast<jule::F64>(_12173aa20_f64_from_bits(static_cast<jule::U64>(((static_cast<jule::U64>(_16313_ps) << 63LL) + (static_cast<jule::U64>(_15613_pe) << 52LL)) + _17913_m)));
}



inline std::tuple<jule::F64,jule::F64> _121af3740_modf(jule::F64 _4413_f) {
	jule::F64 _4437_frac = jule::F64();
	jule::F64 _4423_integer = jule::F64();
	
	jule::F64 _469_abs_f = _1219bc510_abs(_4413_f);
	jule::F64 _4713_i = 0e+00;
	if (_469_abs_f > 4.503599627370496e+15) {
		_4713_i=_4413_f;
	} else {
		_4713_i=_469_abs_f + 4.503599627370496e+15;
		_4713_i-=4.503599627370496e+15;
		_iter_begin_4622061536:;
		if (!(_4713_i > _469_abs_f)) { goto _iter_end_4622061536; }
		{
			(_4713_i)--;
		}
		_iter_next_4622061536:;
		goto _iter_begin_4622061536;
		_iter_end_4622061536:;
		if (_4413_f < 0e+00) {
			_4713_i=static_cast<jule::F64>((-(_4713_i)));
		}
	}
	_4423_integer = _4713_i;
	_4437_frac = _4413_f - _4713_i;
	return std::make_tuple(_4423_integer,_4437_frac);
}



inline jule::F64 _121afd560_log10(jule::F64 _4014_x) {
	return static_cast<jule::F64>(_121961860_log(_4014_x) * 4.3429448190325176e-01);
}



inline jule::F64 _121afd560_log2(jule::F64 _4413_x) {
	jule::F64 _4510_frac;
	jule::Int _4516_exp;
	std::tie(_4510_frac,_4516_exp) = _1218cec10_frexp(_4413_x);
	if (_4510_frac == 5e-01) {
		return static_cast<jule::F64>(_4516_exp - 1LL);
	}
	return static_cast<jule::F64>((_121961860_log(_4510_frac) * 1.4426950408889634e+00) + static_cast<jule::F64>(_4516_exp));
}



inline jule::F64 _121b12210_hypot(jule::F64 _5018_p,jule::F64 _5030_q) {
	{
		if (!((_12192b6b0_is_inf(_5018_p,0LL)) || (_12192b6b0_is_inf(_5030_q,0LL)))) { goto _case_end_4622074912; }
		_case_begin_4622074912:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(1LL));
		}
		goto _match_end_4622074656;
		_case_end_4622074912:;
		if (!((_12192b6b0_is_nan(_5018_p)) || (_12192b6b0_is_nan(_5030_q)))) { goto _case_end_4622075024; }
		_case_begin_4622075024:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4622074656;
		_case_end_4622075024:;
		_match_end_4622074656:;
	}
	std::tie(_5018_p,_5030_q) = std::make_tuple(static_cast<jule::F64>(_1219bc510_abs(_5018_p)),static_cast<jule::F64>(_1219bc510_abs(_5030_q)));
	if (_5018_p < _5030_q) {
		std::tie(_5018_p,_5030_q) = std::make_tuple(_5030_q,_5018_p);
	}
	if (_5018_p == 0LL) {
		return 0LL;
	}
	_5030_q=jule::div(_5030_q,_5018_p);
	return _5018_p * _121d2f040_sqrt(static_cast<jule::F64>(1LL + (_5030_q * _5030_q)));
}



inline jule::F64 _121b24710_j0(jule::F64 _10715_x) {
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_12192b6b0_is_nan(_10715_x)))) { goto _case_end_4622099952; }
		_case_begin_4622099952:;
		{
			return _10715_x;
		}
		goto _match_end_4622099728;
		_case_end_4622099952:;
		if (!((_12192b6b0_is_inf(_10715_x,0LL)))) { goto _case_end_4622100064; }
		_case_begin_4622100064:;
		{
			return 0LL;
		}
		goto _match_end_4622099728;
		_case_end_4622100064:;
		if (!((_10715_x == 0LL))) { goto _case_end_4622100176; }
		_case_begin_4622100176:;
		{
			return 1LL;
		}
		goto _match_end_4622099728;
		_case_end_4622100176:;
		_match_end_4622099728:;
	}
	_10715_x=static_cast<jule::F64>(_1219bc510_abs(_10715_x));
	if (_10715_x >= 2LL) {
		jule::F64 _13214_s;
		jule::F64 _13217_c;
		std::tie(_13214_s,_13217_c) = _121973580_sincos(_10715_x);
		jule::F64 _13317_ss = _13214_s - _13217_c;
		jule::F64 _13417_cc = _13214_s + _13217_c;
		if (_10715_x < 8.988465674311579e+307) {
			jule::F64 _13817_z = (-(_121886250_cos(_10715_x + _10715_x)));
			if ((_13214_s * _13217_c) < 0LL) {
				_13417_cc=jule::div(_13817_z,_13317_ss);
			} else {
				_13317_ss=jule::div(_13817_z,_13417_cc);
			}
		}
		jule::F64 _14917_z = 0e+00;
		if (_10715_x > 5188146770730811392LL) {
			_14917_z=static_cast<jule::F64>(jule::div(5.641895835477563e-01 * _13417_cc,_121d2f040_sqrt(_10715_x)));
		} else {
			jule::F64 _15317_u = _121b24710_pzero(_10715_x);
			jule::F64 _15417_v = _121b24710_qzero(_10715_x);
			_14917_z=static_cast<jule::F64>(jule::div(5.641895835477563e-01 * ((_15317_u * _13417_cc) - (_15417_v * _13317_ss)),_121d2f040_sqrt(_10715_x)));
		}
		return _14917_z;
	}
	if (_10715_x < 1.220703125e-04) {
		if (_10715_x < 7.450580596923828e-09) {
			return 1LL;
		}
		return static_cast<jule::F64>(1LL - ((2.5e-01 * _10715_x) * _10715_x));
	}
	jule::F64 _1659_z = _10715_x * _10715_x;
	jule::F64 _1669_r = _1659_z * (1.5624999999999995e-02 + (_1659_z * (-1.8997929423885472e-04 + (_1659_z * (1.8295404953270067e-06 + (_1659_z * -4.618326885321032e-09))))));
	jule::F64 _1679_s = 1LL + (_1659_z * (1.5619102946489001e-02 + (_1659_z * (1.1692678466333745e-04 + (_1659_z * (5.135465502073181e-07 + (_1659_z * 1.1661400333379e-09)))))));
	if (_10715_x < 1LL) {
		return static_cast<jule::F64>(1LL + (_1659_z * (-2.5e-01 + jule::div(_1669_r,_1679_s))));
	}
	jule::F64 _1719_u = 5e-01 * _10715_x;
	return static_cast<jule::F64>(((1LL + _1719_u) * (1LL - _1719_u)) + (_1659_z * jule::div(_1669_r,_1679_s)));
}



inline jule::F64 _121b24710_y0(jule::F64 _18211_x) {
	
	
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_18211_x < 0LL) || (_12192b6b0_is_nan(_18211_x)))) { goto _case_end_4622171472; }
		_case_begin_4622171472:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4622171248;
		_case_end_4622171472:;
		if (!((_12192b6b0_is_inf(_18211_x,1LL)))) { goto _case_end_4622171584; }
		_case_begin_4622171584:;
		{
			return 0LL;
		}
		goto _match_end_4622171248;
		_case_end_4622171584:;
		if (!((_18211_x == 0LL))) { goto _case_end_4622171696; }
		_case_begin_4622171696:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(-1LL));
		}
		goto _match_end_4622171248;
		_case_end_4622171696:;
		_match_end_4622171248:;
	}
	if (_18211_x >= 2LL) {
		jule::F64 _21814_s;
		jule::F64 _21817_c;
		std::tie(_21814_s,_21817_c) = _121973580_sincos(_18211_x);
		jule::F64 _21917_ss = _21814_s - _21817_c;
		jule::F64 _22017_cc = _21814_s + _21817_c;
		if (_18211_x < 8.988465674311579e+307) {
			jule::F64 _22717_z = (-(_121886250_cos(_18211_x + _18211_x)));
			if ((_21814_s * _21817_c) < 0LL) {
				_22017_cc=jule::div(_22717_z,_21917_ss);
			} else {
				_21917_ss=jule::div(_22717_z,_22017_cc);
			}
		}
		jule::F64 _23417_z = 0e+00;
		if (_18211_x > 5188146770730811392LL) {
			_23417_z=static_cast<jule::F64>(jule::div(5.641895835477563e-01 * _21917_ss,_121d2f040_sqrt(_18211_x)));
		} else {
			jule::F64 _23817_u = _121b24710_pzero(_18211_x);
			jule::F64 _23917_v = _121b24710_qzero(_18211_x);
			_23417_z=static_cast<jule::F64>(jule::div(5.641895835477563e-01 * ((_23817_u * _21917_ss) + (_23917_v * _22017_cc)),_121d2f040_sqrt(_18211_x)));
		}
		return _23417_z;
	}
	if (_18211_x <= 7.450580596923828e-09) {
		return static_cast<jule::F64>(-7.380429510868723e-02 + (6.366197723675814e-01 * _121961860_log(_18211_x)));
	}
	jule::F64 _2479_z = _18211_x * _18211_x;
	jule::F64 _2489_u = -7.380429510868723e-02 + (_2479_z * (1.7666645250918112e-01 + (_2479_z * (-1.381856719455969e-02 + (_2479_z * (3.4745343209368365e-04 + (_2479_z * (-3.8140705372436416e-06 + (_2479_z * (1.9559013703502292e-08 + (_2479_z * -3.982051941321034e-11)))))))))));
	jule::F64 _2499_v = 1LL + (_2479_z * (1.273048348341237e-02 + (_2479_z * (7.600686273503533e-05 + (_2479_z * (2.591508518404578e-07 + (_2479_z * 4.4111031133267547e-10)))))));
	return jule::div(_2489_u,_2499_v) + ((6.366197723675814e-01 * _121b24710_j0(_18211_x)) * _121961860_log(_18211_x));
}



inline jule::F64 _121b24710_pzero(jule::F64 _33010_x) {
	jule::Array<jule::F64,6>* _33113_p = nullptr;
	jule::Array<jule::F64,5>* _33213_q = nullptr;
	if (_33010_x >= 8LL) {
		_33113_p=(&(_121b24710_P_0R8));
		_33213_q=(&(_121b24710_P_0S8));
	} else if (_33010_x >= 4.5454e+00) {
		_33113_p=(&(_121b24710_P_0R5));
		_33213_q=(&(_121b24710_P_0S5));
	} else if (_33010_x >= 2.8571000999999999e+00) {
		_33113_p=(&(_121b24710_P_0R3));
		_33213_q=(&(_121b24710_P_0S3));
	} else if (_33010_x >= 2LL) {
		_33113_p=(&(_121b24710_P_0R2));
		_33213_q=(&(_121b24710_P_0S2));
	}
	{
		jule::F64 _34713_z = jule::div(1LL,_33010_x * _33010_x);
		jule::F64 _34813_r = (*(_33113_p))[static_cast<jule::Int>(0LL)] + (_34713_z * ((*(_33113_p))[static_cast<jule::Int>(1LL)] + (_34713_z * ((*(_33113_p))[static_cast<jule::Int>(2LL)] + (_34713_z * ((*(_33113_p))[static_cast<jule::Int>(3LL)] + (_34713_z * ((*(_33113_p))[static_cast<jule::Int>(4LL)] + (_34713_z * (*(_33113_p))[static_cast<jule::Int>(5LL)])))))))));
		jule::F64 _34913_s = 1LL + (_34713_z * ((*(_33213_q))[static_cast<jule::Int>(0LL)] + (_34713_z * ((*(_33213_q))[static_cast<jule::Int>(1LL)] + (_34713_z * ((*(_33213_q))[static_cast<jule::Int>(2LL)] + (_34713_z * ((*(_33213_q))[static_cast<jule::Int>(3LL)] + (_34713_z * (*(_33213_q))[static_cast<jule::Int>(4LL)])))))))));
		return static_cast<jule::F64>(1LL + jule::div(_34813_r,_34913_s));
	}
}



inline jule::F64 _121b24710_qzero(jule::F64 _43510_x) {
	jule::Array<jule::F64,6>* _43613_p = nullptr;
	jule::Array<jule::F64,6>* _43713_q = nullptr;
	if (_43510_x >= 8LL) {
		_43613_p=(&(_121b24710_Q_0R8));
		_43713_q=(&(_121b24710_Q_0S8));
	} else if (_43510_x >= 4.5454e+00) {
		_43613_p=(&(_121b24710_Q_0R5));
		_43713_q=(&(_121b24710_Q_0S5));
	} else if (_43510_x >= 2.8571000999999999e+00) {
		_43613_p=(&(_121b24710_Q_0R3));
		_43713_q=(&(_121b24710_Q_0S3));
	} else if (_43510_x >= 2LL) {
		_43613_p=(&(_121b24710_Q_0R2));
		_43713_q=(&(_121b24710_Q_0S2));
	}
	{
		jule::F64 _45213_z = jule::div(1LL,_43510_x * _43510_x);
		jule::F64 _45313_r = (*(_43613_p))[static_cast<jule::Int>(0LL)] + (_45213_z * ((*(_43613_p))[static_cast<jule::Int>(1LL)] + (_45213_z * ((*(_43613_p))[static_cast<jule::Int>(2LL)] + (_45213_z * ((*(_43613_p))[static_cast<jule::Int>(3LL)] + (_45213_z * ((*(_43613_p))[static_cast<jule::Int>(4LL)] + (_45213_z * (*(_43613_p))[static_cast<jule::Int>(5LL)])))))))));
		jule::F64 _45413_s = 1LL + (_45213_z * ((*(_43713_q))[static_cast<jule::Int>(0LL)] + (_45213_z * ((*(_43713_q))[static_cast<jule::Int>(1LL)] + (_45213_z * ((*(_43713_q))[static_cast<jule::Int>(2LL)] + (_45213_z * ((*(_43713_q))[static_cast<jule::Int>(3LL)] + (_45213_z * ((*(_43713_q))[static_cast<jule::Int>(4LL)] + (_45213_z * (*(_43713_q))[static_cast<jule::Int>(5LL)])))))))))));
		return static_cast<jule::F64>(jule::div(-1.25e-01 + jule::div(_45313_r,_45413_s),_43510_x));
	}
}



inline jule::F64 _121a52e30_ldexp(jule::F64 _4518_frac,jule::Int _4533_exp) {
	{
		if (!((_4518_frac == 0LL))) { goto _case_end_4622272912; }
		_case_begin_4622272912:;
		{
			return _4518_frac;
		}
		goto _match_end_4622256000;
		_case_end_4622272912:;
		if (!((_12192b6b0_is_inf(_4518_frac,0LL)) || (_12192b6b0_is_nan(_4518_frac)))) { goto _case_end_4622273024; }
		_case_begin_4622273024:;
		{
			return _4518_frac;
		}
		goto _match_end_4622256000;
		_case_end_4622273024:;
		_match_end_4622256000:;
	}
	jule::Int _5313_e = 0LL;
	std::tie(_4518_frac,_5313_e) = _12192b6b0_normalize(_4518_frac);
	_4533_exp+=_5313_e;
	jule::U64 _5613_x = _12173aa20_f64_bits(_4518_frac);
	_4533_exp+=static_cast<jule::Int>((static_cast<jule::Int>(_5613_x >> 52LL) & 2047LL) - 1023LL);
	if (_4533_exp < -1075LL) {
		return static_cast<jule::F64>(_121906a20_copysign(0e+00,_4518_frac));
	}
	if (_4533_exp > 1023LL) {
		if (_4518_frac < 0LL) {
			return static_cast<jule::F64>(_12192b6b0_inf(-1LL));
		}
		return static_cast<jule::F64>(_12192b6b0_inf(1LL));
	}
	jule::F64 _6713_m = 1e+00;
	if (_4533_exp < -1022LL) {
		_4533_exp+=53LL;
		_6713_m=1.1102230246251565e-16;
	}
	_5613_x=_5613_x & -9218868437227405313LL;
	_5613_x|=static_cast<jule::U64>(static_cast<jule::U64>(_4533_exp + 1023LL) << 52LL);
	return _6713_m * _12173aa20_f64_from_bits(_5613_x);
}



inline jule::Bool _121b8e680_signbit(jule::F64 _3916_x) {
	return (_12173aa20_f64_bits(_3916_x) & 9223372036854775808LLU) != 0LL;
}



inline jule::F64 _121b137a0_sinh(jule::F64 _5617_x) {
	
	
	
	
	
	
	
	jule::Bool _6613_sign = false;
	if (_5617_x < 0LL) {
		_5617_x=static_cast<jule::F64>((-(_5617_x)));
		_6613_sign=true;
	}
	jule::F64 _7213_temp = 0e+00;
	{
		if (!((_5617_x > 21LL))) { goto _case_end_4622310304; }
		_case_begin_4622310304:;
		{
			_7213_temp=static_cast<jule::F64>(_121c3a340_exp(_5617_x) * 5e-01);
		}
		goto _match_end_4622307136;
		_case_end_4622310304:;
		if (!((_5617_x > 5e-01))) { goto _case_end_4622314976; }
		_case_begin_4622314976:;
		{
			jule::F64 _7713_ex = _121c3a340_exp(_5617_x);
			_7213_temp=(_7713_ex - jule::div(1LL,_7713_ex)) * 5e-01;
		}
		goto _match_end_4622307136;
		_case_end_4622314976:;
		_case_begin_4622307296:;
		{
			jule::F64 _8013_sq = _5617_x * _5617_x;
			_7213_temp=static_cast<jule::F64>(((((((-2.630563213397497e+01 * _8013_sq) + -2.894211355989564e+03) * _8013_sq) + -8.991272022039509e+04) * _8013_sq) + -6.307673640497717e+05) * _5617_x);
			_7213_temp=jule::div(_7213_temp,((((_8013_sq + -1.736789535582337e+02) * _8013_sq) + 1.521517378790019e+04) * _8013_sq) + -6.307673640497717e+05);
		}
		goto _match_end_4622307136;
		_case_end_4622307296:;
		_match_end_4622307136:;
	}
	if (_6613_sign) {
		_7213_temp=static_cast<jule::F64>((-(_7213_temp)));
	}
	return _7213_temp;
}



inline jule::F64 _121b137a0_cosh(jule::F64 _9717_x) {
	_9717_x=static_cast<jule::F64>(_1219bc510_abs(_9717_x));
	if (_9717_x > 21LL) {
		return static_cast<jule::F64>(_121c3a340_exp(_9717_x) * 5e-01);
	}
	jule::F64 _1029_ex = _121c3a340_exp(_9717_x);
	return (_1029_ex + jule::div(1LL,_1029_ex)) * 5e-01;
}



inline std::tuple<jule::F64,jule::Int> _121baee80_lgamma(jule::F64 _20519_x) {
	jule::Int _20542_sign = jule::Int();
	jule::F64 _20529_lgamma = jule::F64();
	
	
	
	
	
	
	
	_20542_sign=1LL;
	{
		if (!((_12192b6b0_is_nan(_20519_x)))) { goto _case_end_4622336064; }
		_case_begin_4622336064:;
		{
			_20529_lgamma=_20519_x;
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		goto _match_end_4622336304;
		_case_end_4622336064:;
		if (!((_12192b6b0_is_inf(_20519_x,0LL)))) { goto _case_end_4622332208; }
		_case_begin_4622332208:;
		{
			_20529_lgamma=_20519_x;
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		goto _match_end_4622336304;
		_case_end_4622332208:;
		if (!((_20519_x == 0LL))) { goto _case_end_4622337120; }
		_case_begin_4622337120:;
		{
			_20529_lgamma=static_cast<jule::F64>(_12192b6b0_inf(1LL));
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		goto _match_end_4622336304;
		_case_end_4622337120:;
		_match_end_4622336304:;
	}
	jule::Bool _22813_neg = false;
	if (_20519_x < 0LL) {
		_20519_x=static_cast<jule::F64>((-(_20519_x)));
		_22813_neg=true;
	}
	if (_20519_x < 8.4703300000000008e-22) {
		if (_22813_neg) {
			_20542_sign=-1LL;
		}
		_20529_lgamma=static_cast<jule::F64>((-(_121961860_log(_20519_x))));
		return std::make_tuple(_20529_lgamma,_20542_sign);
	}
	jule::F64 _24113_nadj = 0e+00;
	if (_22813_neg) {
		if (_20519_x >= 4503599627370496LL) {
			_20529_lgamma=static_cast<jule::F64>(_12192b6b0_inf(1LL));
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		jule::F64 _24713_t = _121baee80_sin_pi(_20519_x);
		if (_24713_t == 0LL) {
			_20529_lgamma=static_cast<jule::F64>(_12192b6b0_inf(1LL));
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		_24113_nadj=static_cast<jule::F64>(_121961860_log(static_cast<jule::F64>(jule::div(3.141592653589793e+00,_1219bc510_abs(_24713_t * _20519_x)))));
		if (_24713_t < 0LL) {
			_20542_sign=-1LL;
		}
	}
	{
		if (!((_20519_x == 1LL) || (_20519_x == 2LL))) { goto _case_end_4622360416; }
		_case_begin_4622360416:;
		{
			_20529_lgamma=0LL;
			return std::make_tuple(_20529_lgamma,_20542_sign);
		}
		goto _match_end_4622357328;
		_case_end_4622360416:;
		if (!((_20519_x < 2LL))) { goto _case_end_4622360080; }
		_case_begin_4622360080:;
		{
			jule::F64 _26317_y = 0e+00;
			jule::Int _26417_i = 0LL;
			if (_20519_x <= 9.0000000000000002e-01) {
				_20529_lgamma=static_cast<jule::F64>((-(_121961860_log(_20519_x))));
				{
					if (!((_20519_x >= 7.316321449683623e-01))) { goto _case_end_4622369744; }
					_case_begin_4622369744:;
					{
						_26317_y=static_cast<jule::F64>(1LL - _20519_x);
						_26417_i=0LL;
					}
					goto _match_end_4622366608;
					_case_end_4622369744:;
					if (!((_20519_x >= 1.9163214496836223e-01))) { goto _case_end_4622369088; }
					_case_begin_4622369088:;
					{
						_26317_y=_20519_x - 4.6163214496836225e-01;
						_26417_i=1LL;
					}
					goto _match_end_4622366608;
					_case_end_4622369088:;
					_case_begin_4622367696:;
					{
						_26317_y=_20519_x;
						_26417_i=2LL;
					}
					goto _match_end_4622366608;
					_case_end_4622367696:;
					_match_end_4622366608:;
				}
			} else {
				_20529_lgamma=0LL;
				{
					if (!((_20519_x >= 1.7316321449683623e+00))) { goto _case_end_4622377232; }
					_case_begin_4622377232:;
					{
						_26317_y=static_cast<jule::F64>(2LL - _20519_x);
						_26417_i=0LL;
					}
					goto _match_end_4622373168;
					_case_end_4622377232:;
					if (!((_20519_x >= 1.1916321449683622e+00))) { goto _case_end_4622375904; }
					_case_begin_4622375904:;
					{
						_26317_y=_20519_x - 1.4616321449683622e+00;
						_26417_i=1LL;
					}
					goto _match_end_4622373168;
					_case_end_4622375904:;
					_case_begin_4622374944:;
					{
						_26317_y=_20519_x - 1LL;
						_26417_i=2LL;
					}
					goto _match_end_4622373168;
					_case_end_4622374944:;
					_match_end_4622373168:;
				}
			}
			{
				auto _match_expr{ _26417_i };
				if (!((0LL) == _match_expr)) { goto _case_end_4622377616; }
				_case_begin_4622377616:;
				{
					jule::F64 _29417_z = _26317_y * _26317_y;
					jule::F64 _29517_p1 = _121baee80__LGAM_A[static_cast<jule::Int>(0LL)] + (_29417_z * (_121baee80__LGAM_A[static_cast<jule::Int>(2LL)] + (_29417_z * (_121baee80__LGAM_A[static_cast<jule::Int>(4LL)] + (_29417_z * (_121baee80__LGAM_A[static_cast<jule::Int>(6LL)] + (_29417_z * (_121baee80__LGAM_A[static_cast<jule::Int>(8LL)] + (_29417_z * _121baee80__LGAM_A[static_cast<jule::Int>(10LL)])))))))));
					jule::F64 _29617_p2 = _29417_z * (_121baee80__LGAM_A[static_cast<jule::Int>(1LL)] + (_29417_z * ((+(_121baee80__LGAM_A[static_cast<jule::Int>(3LL)])) + (_29417_z * (_121baee80__LGAM_A[static_cast<jule::Int>(5LL)] + (_29417_z * (_121baee80__LGAM_A[static_cast<jule::Int>(7LL)] + (_29417_z * (_121baee80__LGAM_A[static_cast<jule::Int>(9LL)] + (_29417_z * _121baee80__LGAM_A[static_cast<jule::Int>(11LL)]))))))))));
					jule::F64 _29717_p = (_26317_y * _29517_p1) + _29617_p2;
					_20529_lgamma+=_29717_p - (5e-01 * _26317_y);
				}
				goto _match_end_4622381072;
				_case_end_4622377616:;
				if (!((1LL) == _match_expr)) { goto _case_end_4622380176; }
				_case_begin_4622380176:;
				{
					jule::F64 _30017_z = _26317_y * _26317_y;
					jule::F64 _30117_w = _30017_z * _26317_y;
					jule::F64 _30217_p1 = _121baee80__LGAM_T[static_cast<jule::Int>(0LL)] + (_30117_w * (_121baee80__LGAM_T[static_cast<jule::Int>(3LL)] + (_30117_w * (_121baee80__LGAM_T[static_cast<jule::Int>(6LL)] + (_30117_w * (_121baee80__LGAM_T[static_cast<jule::Int>(9LL)] + (_30117_w * _121baee80__LGAM_T[static_cast<jule::Int>(12LL)])))))));
					jule::F64 _30317_p2 = _121baee80__LGAM_T[static_cast<jule::Int>(1LL)] + (_30117_w * (_121baee80__LGAM_T[static_cast<jule::Int>(4LL)] + (_30117_w * (_121baee80__LGAM_T[static_cast<jule::Int>(7LL)] + (_30117_w * (_121baee80__LGAM_T[static_cast<jule::Int>(10LL)] + (_30117_w * _121baee80__LGAM_T[static_cast<jule::Int>(13LL)])))))));
					jule::F64 _30417_p3 = _121baee80__LGAM_T[static_cast<jule::Int>(2LL)] + (_30117_w * (_121baee80__LGAM_T[static_cast<jule::Int>(5LL)] + (_30117_w * (_121baee80__LGAM_T[static_cast<jule::Int>(8LL)] + (_30117_w * (_121baee80__LGAM_T[static_cast<jule::Int>(11LL)] + (_30117_w * _121baee80__LGAM_T[static_cast<jule::Int>(14LL)])))))));
					jule::F64 _30517_p = (_30017_z * _30217_p1) - (-3.638676997039505e-18 - (_30117_w * (_30317_p2 + (_26317_y * _30417_p3))));
					_20529_lgamma+=static_cast<jule::F64>(-1.2148629053584961e-01 + _30517_p);
				}
				goto _match_end_4622381072;
				_case_end_4622380176:;
				if (!((2LL) == _match_expr)) { goto _case_end_4622380288; }
				_case_begin_4622380288:;
				{
					jule::F64 _30817_p1 = _26317_y * (_121baee80__LGAM_U[static_cast<jule::Int>(0LL)] + (_26317_y * (_121baee80__LGAM_U[static_cast<jule::Int>(1LL)] + (_26317_y * (_121baee80__LGAM_U[static_cast<jule::Int>(2LL)] + (_26317_y * (_121baee80__LGAM_U[static_cast<jule::Int>(3LL)] + (_26317_y * (_121baee80__LGAM_U[static_cast<jule::Int>(4LL)] + (_26317_y * _121baee80__LGAM_U[static_cast<jule::Int>(5LL)]))))))))));
					jule::F64 _30917_p2 = 1LL + (_26317_y * (_121baee80__LGAM_V[static_cast<jule::Int>(1LL)] + (_26317_y * (_121baee80__LGAM_V[static_cast<jule::Int>(2LL)] + (_26317_y * (_121baee80__LGAM_V[static_cast<jule::Int>(3LL)] + (_26317_y * (_121baee80__LGAM_V[static_cast<jule::Int>(4LL)] + (_26317_y * _121baee80__LGAM_V[static_cast<jule::Int>(5LL)])))))))));
					_20529_lgamma+=static_cast<jule::F64>((-5e-01 * _26317_y) + jule::div(_30817_p1,_30917_p2));
				}
				goto _match_end_4622381072;
				_case_end_4622380288:;
				_match_end_4622381072:;
			}
		}
		goto _match_end_4622357328;
		_case_end_4622360080:;
		if (!((_20519_x < 8LL))) { goto _case_end_4622360592; }
		_case_begin_4622360592:;
		{
			jule::Int _31313_i = static_cast<jule::Int>(_20519_x);
			jule::F64 _31413_y = _20519_x - static_cast<jule::F64>(_31313_i);
			jule::F64 _31513_p = _31413_y * (_121baee80__LGAM_S[static_cast<jule::Int>(0LL)] + (_31413_y * (_121baee80__LGAM_S[static_cast<jule::Int>(1LL)] + (_31413_y * (_121baee80__LGAM_S[static_cast<jule::Int>(2LL)] + (_31413_y * (_121baee80__LGAM_S[static_cast<jule::Int>(3LL)] + (_31413_y * (_121baee80__LGAM_S[static_cast<jule::Int>(4LL)] + (_31413_y * (_121baee80__LGAM_S[static_cast<jule::Int>(5LL)] + (_31413_y * _121baee80__LGAM_S[static_cast<jule::Int>(6LL)]))))))))))));
			jule::F64 _31613_q = 1LL + (_31413_y * (_121baee80__LGAM_R[static_cast<jule::Int>(1LL)] + (_31413_y * (_121baee80__LGAM_R[static_cast<jule::Int>(2LL)] + (_31413_y * (_121baee80__LGAM_R[static_cast<jule::Int>(3LL)] + (_31413_y * (_121baee80__LGAM_R[static_cast<jule::Int>(4LL)] + (_31413_y * (_121baee80__LGAM_R[static_cast<jule::Int>(5LL)] + (_31413_y * _121baee80__LGAM_R[static_cast<jule::Int>(6LL)])))))))))));
			_20529_lgamma=static_cast<jule::F64>((5e-01 * _31413_y) + jule::div(_31513_p,_31613_q));
			jule::F64 _31817_z = 1e+00;
			{
				auto _match_expr{ _31313_i };
				if (!((7LL) == _match_expr)) { goto _case_end_4622468544; }
				_case_begin_4622468544:;
				{
					_31817_z*=_31413_y + 6LL;
					goto _case_begin_4622468656;
				}
				goto _match_end_4622453536;
				_case_end_4622468544:;
				if (!((6LL) == _match_expr)) { goto _case_end_4622468656; }
				_case_begin_4622468656:;
				{
					_31817_z*=_31413_y + 5LL;
					goto _case_begin_4622468768;
				}
				goto _match_end_4622453536;
				_case_end_4622468656:;
				if (!((5LL) == _match_expr)) { goto _case_end_4622468768; }
				_case_begin_4622468768:;
				{
					_31817_z*=_31413_y + 4LL;
					goto _case_begin_4622468880;
				}
				goto _match_end_4622453536;
				_case_end_4622468768:;
				if (!((4LL) == _match_expr)) { goto _case_end_4622468880; }
				_case_begin_4622468880:;
				{
					_31817_z*=_31413_y + 3LL;
					goto _case_begin_4622468992;
				}
				goto _match_end_4622453536;
				_case_end_4622468880:;
				if (!((3LL) == _match_expr)) { goto _case_end_4622468992; }
				_case_begin_4622468992:;
				{
					_31817_z*=_31413_y + 2LL;
					_20529_lgamma+=static_cast<jule::F64>(_121961860_log(_31817_z));
				}
				goto _match_end_4622453536;
				_case_end_4622468992:;
				_match_end_4622453536:;
			}
		}
		goto _match_end_4622357328;
		_case_end_4622360592:;
		if (!((_20519_x < 288230376151711744LL))) { goto _case_end_4622359168; }
		_case_begin_4622359168:;
		{
			jule::F64 _33713_t = _121961860_log(_20519_x);
			jule::F64 _33813_z = jule::div(1LL,_20519_x);
			jule::F64 _33913_y = _33813_z * _33813_z;
			jule::F64 _34013_w = _121baee80__LGAM_W[static_cast<jule::Int>(0LL)] + (_33813_z * (_121baee80__LGAM_W[static_cast<jule::Int>(1LL)] + (_33913_y * (_121baee80__LGAM_W[static_cast<jule::Int>(2LL)] + (_33913_y * (_121baee80__LGAM_W[static_cast<jule::Int>(3LL)] + (_33913_y * (_121baee80__LGAM_W[static_cast<jule::Int>(4LL)] + (_33913_y * (_121baee80__LGAM_W[static_cast<jule::Int>(5LL)] + (_33913_y * _121baee80__LGAM_W[static_cast<jule::Int>(6LL)])))))))))));
			_20529_lgamma=((_20519_x - 5e-01) * (_33713_t - 1LL)) + _34013_w;
		}
		goto _match_end_4622357328;
		_case_end_4622359168:;
		_case_begin_4622357552:;
		{
			_20529_lgamma=_20519_x * (_121961860_log(_20519_x) - 1LL);
		}
		goto _match_end_4622357328;
		_case_end_4622357552:;
		_match_end_4622357328:;
	}
	if (_22813_neg) {
		_20529_lgamma=_24113_nadj - _20529_lgamma;
	}
	return std::make_tuple(_20529_lgamma,_20542_sign);
}



inline jule::F64 _121baee80_sin_pi(jule::F64 _35215_x) {
	
	
	if (_35215_x < 2.5e-01) {
		return static_cast<jule::F64>((-(_121886250_sin(static_cast<jule::F64>(3.141592653589793e+00 * _35215_x)))));
	}
	jule::F64 _36013_z = _121906e90_floor(_35215_x);
	jule::Int _36113_n = 0LL;
	if (_36013_z != _35215_x) {
		_35215_x=static_cast<jule::F64>(_1218a35b0_mod(_35215_x,2e+00));
		_36113_n=static_cast<jule::Int>(_35215_x * 4LL);
	} else {
		if (_35215_x >= 9007199254740992LL) {
			_35215_x=0LL;
			_36113_n=0LL;
		} else {
			if (_35215_x < 4503599627370496LL) {
				_36013_z=_35215_x + 4503599627370496LL;
			}
			_36113_n=static_cast<jule::Int>(1LL & _12173aa20_f64_bits(_36013_z));
			_35215_x=static_cast<jule::F64>(_36113_n);
			_36113_n<<=2LL;
		}
	}
	{
		auto _match_expr{ _36113_n };
		if (!((0LL) == _match_expr)) { goto _case_end_4622511104; }
		_case_begin_4622511104:;
		{
			_35215_x=static_cast<jule::F64>(_121886250_sin(static_cast<jule::F64>(3.141592653589793e+00 * _35215_x)));
		}
		goto _match_end_4622505744;
		_case_end_4622511104:;
		if (!((1LL) == _match_expr || (2LL) == _match_expr)) { goto _case_end_4622511216; }
		_case_begin_4622511216:;
		{
			_35215_x=static_cast<jule::F64>(_121886250_cos(static_cast<jule::F64>(3.141592653589793e+00 * (5e-01 - _35215_x))));
		}
		goto _match_end_4622505744;
		_case_end_4622511216:;
		if (!((3LL) == _match_expr || (4LL) == _match_expr)) { goto _case_end_4622505232; }
		_case_begin_4622505232:;
		{
			_35215_x=static_cast<jule::F64>(_121886250_sin(static_cast<jule::F64>(3.141592653589793e+00 * (1LL - _35215_x))));
		}
		goto _match_end_4622505744;
		_case_end_4622505232:;
		if (!((5LL) == _match_expr || (6LL) == _match_expr)) { goto _case_end_4622505344; }
		_case_begin_4622505344:;
		{
			_35215_x=static_cast<jule::F64>((-(_121886250_cos(static_cast<jule::F64>(3.141592653589793e+00 * (_35215_x - 1.5e+00))))));
		}
		goto _match_end_4622505744;
		_case_end_4622505344:;
		_case_begin_4622508848:;
		{
			_35215_x=static_cast<jule::F64>(_121886250_sin(static_cast<jule::F64>(3.141592653589793e+00 * (_35215_x - 2LL))));
		}
		goto _match_end_4622505744;
		_case_end_4622508848:;
		_match_end_4622505744:;
	}
	return static_cast<jule::F64>((-(_35215_x)));
}



inline jule::F64 _121c28840_acosh(jule::F64 _7314_x) {
	
	{
		if (!((_7314_x < 1LL) || (_12192b6b0_is_nan(_7314_x)))) { goto _case_end_4622522096; }
		_case_begin_4622522096:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4622521808;
		_case_end_4622522096:;
		if (!((_7314_x == 1LL))) { goto _case_end_4622522208; }
		_case_begin_4622522208:;
		{
			return 0LL;
		}
		goto _match_end_4622521808;
		_case_end_4622522208:;
		if (!((_7314_x >= 268435456LL))) { goto _case_end_4622522320; }
		_case_begin_4622522320:;
		{
			return static_cast<jule::F64>(_121961860_log(_7314_x) + 6.931471805599453e-01);
		}
		goto _match_end_4622521808;
		_case_end_4622522320:;
		if (!((_7314_x > 2LL))) { goto _case_end_4622522432; }
		_case_begin_4622522432:;
		{
			return static_cast<jule::F64>(_121961860_log(static_cast<jule::F64>((2LL * _7314_x) - jule::div(1LL,_7314_x + _121d2f040_sqrt((_7314_x * _7314_x) - 1LL)))));
		}
		goto _match_end_4622521808;
		_case_end_4622522432:;
		_match_end_4622521808:;
	}
	jule::F64 _869_t = _7314_x - 1LL;
	return static_cast<jule::F64>(_121cd89d0_log1p(_869_t + _121d2f040_sqrt(static_cast<jule::F64>((2LL * _869_t) + (_869_t * _869_t)))));
}



inline jule::F64 _121baf000_tanh(jule::F64 _10613_x) {
	
	jule::F64 _10813_z = _1219bc510_abs(_10613_x);
	{
		if (!((_10813_z > 4.4014845965556525e+01))) { goto _case_end_4622541296; }
		_case_begin_4622541296:;
		{
			if (_10613_x < 0LL) {
				return -1LL;
			}
			return 1LL;
		}
		goto _match_end_4622537088;
		_case_end_4622541296:;
		if (!((_10813_z >= 6.25e-01))) { goto _case_end_4622541728; }
		_case_begin_4622541728:;
		{
			jule::F64 _11613_s = _121c3a340_exp(static_cast<jule::F64>(2LL * _10813_z));
			_10813_z=static_cast<jule::F64>(1LL - jule::div(2LL,_11613_s + 1LL));
			if (_10613_x < 0LL) {
				_10813_z=static_cast<jule::F64>((-(_10813_z)));
			}
		}
		goto _match_end_4622537088;
		_case_end_4622541728:;
		_case_begin_4622537600:;
		{
			if (_10613_x == 0LL) {
				return _10613_x;
			}
			jule::F64 _12513_s = _10613_x * _10613_x;
			_10813_z=_10613_x + jule::div((_10613_x * _12513_s) * ((((_121baf000_TANH_P[static_cast<jule::Int>(0LL)] * _12513_s) + _121baf000_TANH_P[static_cast<jule::Int>(1LL)]) * _12513_s) + _121baf000_TANH_P[static_cast<jule::Int>(2LL)]),((((_12513_s + _121baf000_TANH_Q[static_cast<jule::Int>(0LL)]) * _12513_s) + _121baf000_TANH_Q[static_cast<jule::Int>(1LL)]) * _12513_s) + _121baf000_TANH_Q[static_cast<jule::Int>(2LL)]);
		}
		goto _match_end_4622537088;
		_case_end_4622537600:;
		_match_end_4622537088:;
	}
	return _10813_z;
}



inline jule::F64 _121c37c30_cbrt(jule::F64 _5617_x) {
	
	
	
	
	
	
	
	
	if (((_5617_x == 0LL) || _12192b6b0_is_nan(_5617_x)) || _12192b6b0_is_inf(_5617_x,0LL)) {
		return _5617_x;
	}
	jule::Bool _7113_sign = false;
	if (_5617_x < 0LL) {
		_5617_x=static_cast<jule::F64>((-(_5617_x)));
		_7113_sign=true;
	}
	jule::F64 _7813_t = _12173aa20_f64_from_bits(static_cast<jule::U64>(jule::div(_12173aa20_f64_bits(_5617_x),3LL) + 3071306043645493248LL));
	if (_5617_x < 2.2250738585072014e-308) {
		_7813_t=static_cast<jule::F64>(1.8014398509481984e+16);
		_7813_t*=_5617_x;
		_7813_t=static_cast<jule::F64>(_12173aa20_f64_from_bits(static_cast<jule::U64>(jule::div(_12173aa20_f64_bits(_7813_t),3LL) + 2990241250352824320LL)));
	}
	jule::F64 _8713_r = jule::div(_7813_t * _7813_t,_5617_x);
	jule::F64 _8813_s = 5.428571428571428e-01 + (_8713_r * _7813_t);
	_7813_t*=static_cast<jule::F64>(3.5714285714285715e-01 + jule::div(1.6071428571428572e+00,(_8813_s + 1.4142857142857144e+00) + jule::div(-7.053061224489796e-01,_8813_s)));
	_7813_t=static_cast<jule::F64>(_12173aa20_f64_from_bits(static_cast<jule::U64>((_12173aa20_f64_bits(_7813_t) & -1073741824LL) + 1073741824LL)));
	_8813_s=_7813_t * _7813_t;
	_8713_r=jule::div(_5617_x,_8813_s);
	jule::F64 _979_w = _7813_t + _7813_t;
	_8713_r=jule::div(_8713_r - _7813_t,_979_w + _8713_r);
	_7813_t=_7813_t + (_7813_t * _8713_r);
	if (_7113_sign) {
		_7813_t=static_cast<jule::F64>((-(_7813_t)));
	}
	return _7813_t;
}



inline jule::F64 _121c54600_pow(jule::F64 _6412_x,jule::F64 _6420_y) {
	{
		if (!((_6420_y == 0LL) || (_6412_x == 1LL))) { goto _case_end_4622592368; }
		_case_begin_4622592368:;
		{
			return 1LL;
		}
		goto _match_end_4622592016;
		_case_end_4622592368:;
		if (!((_6420_y == 1LL))) { goto _case_end_4622592480; }
		_case_begin_4622592480:;
		{
			return _6412_x;
		}
		goto _match_end_4622592016;
		_case_end_4622592480:;
		if (!((_12192b6b0_is_nan(_6412_x)) || (_12192b6b0_is_nan(_6420_y)))) { goto _case_end_4622592592; }
		_case_begin_4622592592:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4622592016;
		_case_end_4622592592:;
		if (!((_6412_x == 0LL))) { goto _case_end_4622592720; }
		_case_begin_4622592720:;
		{
			{
				if (!((_6420_y < 0LL))) { goto _case_end_4622597744; }
				_case_begin_4622597744:;
				{
					if (_121c54600_is_odd_int(_6420_y)) {
						return static_cast<jule::F64>(_121906a20_copysign(static_cast<jule::F64>(_12192b6b0_inf(1LL)),_6412_x));
					}
					return static_cast<jule::F64>(_12192b6b0_inf(1LL));
				}
				goto _match_end_4622598720;
				_case_end_4622597744:;
				if (!((_6420_y > 0LL))) { goto _case_end_4622597856; }
				_case_begin_4622597856:;
				{
					if (_121c54600_is_odd_int(_6420_y)) {
						return _6412_x;
					}
					return 0LL;
				}
				goto _match_end_4622598720;
				_case_end_4622597856:;
				_match_end_4622598720:;
			}
		}
		goto _match_end_4622592016;
		_case_end_4622592720:;
		if (!((_12192b6b0_is_inf(_6420_y,0LL)))) { goto _case_end_4622592848; }
		_case_begin_4622592848:;
		{
			{
				if (!((_6412_x == -1LL))) { goto _case_end_4622608256; }
				_case_begin_4622608256:;
				{
					return 1LL;
				}
				goto _match_end_4622605568;
				_case_end_4622608256:;
				if (!(((_1219bc510_abs(_6412_x) < 1LL) == _12192b6b0_is_inf(_6420_y,1LL)))) { goto _case_end_4622608928; }
				_case_begin_4622608928:;
				{
					return 0LL;
				}
				goto _match_end_4622605568;
				_case_end_4622608928:;
				_case_begin_4622605680:;
				{
					return static_cast<jule::F64>(_12192b6b0_inf(1LL));
				}
				goto _match_end_4622605568;
				_case_end_4622605680:;
				_match_end_4622605568:;
			}
		}
		goto _match_end_4622592016;
		_case_end_4622592848:;
		if (!((_12192b6b0_is_inf(_6412_x,0LL)))) { goto _case_end_4622592976; }
		_case_begin_4622592976:;
		{
			if (_12192b6b0_is_inf(_6412_x,-1LL)) {
				return static_cast<jule::F64>(_121c54600_pow(static_cast<jule::F64>(jule::div(1LL,_6412_x)),static_cast<jule::F64>((-(_6420_y)))));
			}
			{
				if (!((_6420_y < 0LL))) { goto _case_end_4622612256; }
				_case_begin_4622612256:;
				{
					return 0LL;
				}
				goto _match_end_4622611168;
				_case_end_4622612256:;
				if (!((_6420_y > 0LL))) { goto _case_end_4622612368; }
				_case_begin_4622612368:;
				{
					return static_cast<jule::F64>(_12192b6b0_inf(1LL));
				}
				goto _match_end_4622611168;
				_case_end_4622612368:;
				_match_end_4622611168:;
			}
		}
		goto _match_end_4622592016;
		_case_end_4622592976:;
		if (!((_6420_y == 5e-01))) { goto _case_end_4622593104; }
		_case_begin_4622593104:;
		{
			return static_cast<jule::F64>(_121d2f040_sqrt(_6412_x));
		}
		goto _match_end_4622592016;
		_case_end_4622593104:;
		if (!((_6420_y == -5e-01))) { goto _case_end_4622593232; }
		_case_begin_4622593232:;
		{
			return static_cast<jule::F64>(jule::div(1LL,_121d2f040_sqrt(_6412_x)));
		}
		goto _match_end_4622592016;
		_case_end_4622593232:;
		_match_end_4622592016:;
	}
	jule::F64 _10814_yi;
	jule::F64 _10822_yf;
	std::tie(_10814_yi,_10822_yf) = _121af3740_modf(static_cast<jule::F64>(_1219bc510_abs(_6420_y)));
	if ((_10822_yf != 0LL) && (_6412_x < 0LL)) {
		return static_cast<jule::F64>(_12192b6b0_nan());
	}
	if (_10814_yi >= 9223372036854775808LLU) {
		{
			if (!((_6412_x == -1LL))) { goto _case_end_4622627168; }
			_case_begin_4622627168:;
			{
				return 1LL;
			}
			goto _match_end_4622624160;
			_case_end_4622627168:;
			if (!(((_1219bc510_abs(_6412_x) < 1LL) == (_6420_y > 0LL)))) { goto _case_end_4622627840; }
			_case_begin_4622627840:;
			{
				return 0LL;
			}
			goto _match_end_4622624160;
			_case_end_4622627840:;
			_case_begin_4622624304:;
			{
				return static_cast<jule::F64>(_12192b6b0_inf(1LL));
			}
			goto _match_end_4622624160;
			_case_end_4622624304:;
			_match_end_4622624160:;
		}
	}
	jule::F64 _12613_a1 = 1e+00;
	jule::Int _12713_ae = 0LL;
	if (_10822_yf != 0LL) {
		if (_10822_yf > 5e-01) {
			(_10822_yf)--;
			(_10814_yi)++;
		}
		_12613_a1=static_cast<jule::F64>(_121c3a340_exp(_10822_yf * _121961860_log(_6412_x)));
	}
	jule::F64 _14214_x1;
	jule::Int _14222_xe;
	std::tie(_14214_x1,_14222_xe) = _1218cec10_frexp(_6412_x);
	jule::I64 _14313_i = static_cast<jule::I64>(_10814_yi);
	_iter_begin_4622636960:;
	if (!(_14313_i != 0LL)) { goto _iter_end_4622636960; }
	{
		if ((_14222_xe < -4096LL) || (4096LL < _14222_xe)) {
			_12713_ae+=_14222_xe;
			goto _iter_end_4622636960;
		}
		if ((_14313_i & 1LL) == 1LL) {
			_12613_a1*=_14214_x1;
			_12713_ae+=_14222_xe;
		}
		_14214_x1*=_14214_x1;
		_14222_xe<<=1LL;
		if (_14214_x1 < 5e-01) {
			_14214_x1+=_14214_x1;
			(_14222_xe)--;
		}
	}
	_iter_next_4622636960:;
	_14313_i>>=1LL;
	goto _iter_begin_4622636960;
	_iter_end_4622636960:;
	if (_6420_y < 0LL) {
		_12613_a1=static_cast<jule::F64>(jule::div(1LL,_12613_a1));
		_12713_ae=static_cast<jule::Int>((-(_12713_ae)));
	}
	return static_cast<jule::F64>(_121a52e30_ldexp(_12613_a1,_12713_ae));
}



inline jule::Bool _121c54600_is_odd_int(jule::F64 _17615_x) {
	jule::F64 _17710_xi;
	jule::F64 _17714_xf;
	std::tie(_17710_xi,_17714_xf) = _121af3740_modf(_17615_x);
	return (_17714_xf == 0LL) && ((static_cast<jule::I64>(_17710_xi) & 1LL) == 1LL);
}



inline jule::F64 _121c3a340_exp(jule::F64 _12212_x) {
	
	
	
	
	
	
	{
		if (!((_12192b6b0_is_nan(_12212_x)) || (_12192b6b0_is_inf(_12212_x,1LL)))) { goto _case_end_4622661152; }
		_case_begin_4622661152:;
		{
			return _12212_x;
		}
		goto _match_end_4622660576;
		_case_end_4622661152:;
		if (!((_12192b6b0_is_inf(_12212_x,-1LL)))) { goto _case_end_4622661360; }
		_case_begin_4622661360:;
		{
			return 0LL;
		}
		goto _match_end_4622660576;
		_case_end_4622661360:;
		if (!((_12212_x > 7.09782712893384e+02))) { goto _case_end_4622661472; }
		_case_begin_4622661472:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(1LL));
		}
		goto _match_end_4622660576;
		_case_end_4622661472:;
		if (!((_12212_x < -7.451332191019411e+02))) { goto _case_end_4622661584; }
		_case_begin_4622661584:;
		{
			return 0LL;
		}
		goto _match_end_4622660576;
		_case_end_4622661584:;
		if (!(((-3.725290298461914e-09 < _12212_x) && (_12212_x < 3.725290298461914e-09)))) { goto _case_end_4622661696; }
		_case_begin_4622661696:;
		{
			return static_cast<jule::F64>(1LL + _12212_x);
		}
		goto _match_end_4622660576;
		_case_end_4622661696:;
		_match_end_4622660576:;
	}
	jule::Int _14613_k = 0LL;
	{
		if (!((_12212_x < 0LL))) { goto _case_end_4622670720; }
		_case_begin_4622670720:;
		{
			_14613_k=static_cast<jule::Int>((1.4426950408889634e+00 * _12212_x) - 5e-01);
		}
		goto _match_end_4622658128;
		_case_end_4622670720:;
		if (!((_12212_x > 0LL))) { goto _case_end_4622670832; }
		_case_begin_4622670832:;
		{
			_14613_k=static_cast<jule::Int>((1.4426950408889634e+00 * _12212_x) + 5e-01);
		}
		goto _match_end_4622658128;
		_case_end_4622670832:;
		_match_end_4622658128:;
	}
	jule::F64 _1519_hi = _12212_x - (static_cast<jule::F64>(_14613_k) * 6.931471803691238e-01);
	jule::F64 _1529_lo = static_cast<jule::F64>(_14613_k) * 1.9082149292705877e-10;
	return static_cast<jule::F64>(_121c3a340_expmulti(_1519_hi,_1529_lo,_14613_k));
}



inline jule::F64 _121c3a340_exp2(jule::F64 _16013_x) {
	
	
	
	
	{
		if (!((_12192b6b0_is_nan(_16013_x)) || (_12192b6b0_is_inf(_16013_x,1LL)))) { goto _case_end_4622685200; }
		_case_begin_4622685200:;
		{
			return _16013_x;
		}
		goto _match_end_4622684960;
		_case_end_4622685200:;
		if (!((_12192b6b0_is_inf(_16013_x,-1LL)))) { goto _case_end_4622685312; }
		_case_begin_4622685312:;
		{
			return 0LL;
		}
		goto _match_end_4622684960;
		_case_end_4622685312:;
		if (!((_16013_x > 1.024e+03))) { goto _case_end_4622685424; }
		_case_begin_4622685424:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(1LL));
		}
		goto _match_end_4622684960;
		_case_end_4622685424:;
		if (!((_16013_x < -1074LL))) { goto _case_end_4622685552; }
		_case_begin_4622685552:;
		{
			return 0LL;
		}
		goto _match_end_4622684960;
		_case_end_4622685552:;
		_match_end_4622684960:;
	}
	jule::Int _18113_k = 0LL;
	{
		if (!((_16013_x > 0LL))) { goto _case_end_4622692608; }
		_case_begin_4622692608:;
		{
			_18113_k=static_cast<jule::Int>(_16013_x + 5e-01);
		}
		goto _match_end_4622692400;
		_case_end_4622692608:;
		if (!((_16013_x < 0LL))) { goto _case_end_4622692720; }
		_case_begin_4622692720:;
		{
			_18113_k=static_cast<jule::Int>(_16013_x - 5e-01);
		}
		goto _match_end_4622692400;
		_case_end_4622692720:;
		_match_end_4622692400:;
	}
	jule::F64 _1869_t = _16013_x - static_cast<jule::F64>(_18113_k);
	jule::F64 _1879_hi = _1869_t * 6.931471803691238e-01;
	jule::F64 _1889_lo = (-(_1869_t)) * 1.9082149292705877e-10;
	return static_cast<jule::F64>(_121c3a340_expmulti(_1879_hi,_1889_lo,_18113_k));
}



inline jule::F64 _121c3a340_expmulti(jule::F64 _19513_hi,jule::F64 _19522_lo,jule::Int _19531_k) {
	
	
	
	
	
	jule::F64 _2029_r = _19513_hi - _19522_lo;
	jule::F64 _2039_t = _2029_r * _2029_r;
	jule::F64 _2049_c = _2029_r - (_2039_t * (1.6666666666666666e-01 + (_2039_t * (-2.7777777777015593e-03 + (_2039_t * (6.613756321437934e-05 + (_2039_t * (-1.6533902205465252e-06 + (_2039_t * 4.1381367970572385e-08)))))))));
	jule::F64 _2059_y = 1LL - ((_19522_lo - jule::div(_2029_r * _2049_c,2LL - _2049_c)) - _19513_hi);
	return static_cast<jule::F64>(_121a52e30_ldexp(_2059_y,_19531_k));
}



inline jule::F64 _121cd89d0_log1p(jule::F64 _12614_x) {
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	{
		if (!((_12614_x < -1LL) || (_12192b6b0_is_nan(_12614_x)))) { goto _case_end_4622735824; }
		_case_begin_4622735824:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4622735600;
		_case_end_4622735824:;
		if (!((_12614_x == -1LL))) { goto _case_end_4622735936; }
		_case_begin_4622735936:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(-1LL));
		}
		goto _match_end_4622735600;
		_case_end_4622735936:;
		if (!((_12192b6b0_is_inf(_12614_x,1LL)))) { goto _case_end_4622736048; }
		_case_begin_4622736048:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(1LL));
		}
		goto _match_end_4622735600;
		_case_end_4622736048:;
		_match_end_4622735600:;
	}
	jule::F64 _1529_absx = _1219bc510_abs(_12614_x);
	jule::F64 _15413_f = 0e+00;
	jule::U64 _15513_iu = 0LLU;
	jule::Int _15613_k = 1LL;
	if (_1529_absx < 4.1421356237309503e-01) {
		if (_1529_absx < 1.862645149230957e-09) {
			if (_1529_absx < 5.551115123125783e-17) {
				return _12614_x;
			}
			return _12614_x - ((_12614_x * _12614_x) * 5e-01);
		}
		if (_12614_x > -2.928932188134525e-01) {
			_15613_k=0LL;
			_15413_f=_12614_x;
			_15513_iu=1LL;
		}
	}
	jule::F64 _17113_c = 0e+00;
	if (_15613_k != 0LL) {
		jule::F64 _17317_u = 0e+00;
		if (_1529_absx < 9007199254740992LL) {
			_17317_u=static_cast<jule::F64>(1e+00 + _12614_x);
			_15513_iu=static_cast<jule::U64>(_12173aa20_f64_bits(_17317_u));
			_15613_k=static_cast<jule::Int>((_15513_iu >> 52LL) - 1023LL);
			if (_15613_k > 0LL) {
				_17113_c=static_cast<jule::F64>(1e+00 - (_17317_u - _12614_x));
			} else {
				_17113_c=_12614_x - (_17317_u - 1e+00);
			}
			_17113_c/=_17317_u;
		} else {
			_17317_u=_12614_x;
			_15513_iu=static_cast<jule::U64>(_12173aa20_f64_bits(_17317_u));
			_15613_k=static_cast<jule::Int>((_15513_iu >> 52LL) - 1023LL);
			_17113_c=0LL;
		}
		_15513_iu&=4503599627370495LL;
		if (_15513_iu < 1865452045155277LL) {
			_17317_u=static_cast<jule::F64>(_12173aa20_f64_from_bits(_15513_iu | 4607182418800017408LL));
		} else {
			(_15613_k)++;
			_17317_u=static_cast<jule::F64>(_12173aa20_f64_from_bits(_15513_iu | 4602678819172646912LL));
			_15513_iu=static_cast<jule::U64>((4503599627370496LL - _15513_iu) >> 2LL);
		}
		_15413_f=_17317_u - 1e+00;
	}
	jule::F64 _2029_hfsq = (5e-01 * _15413_f) * _15413_f;
	jule::F64 _20313_s = 0e+00;
	jule::F64 _20413_R = 0e+00;
	jule::F64 _20513_z = 0e+00;
	if (_15513_iu == 0LL) {
		if (_15413_f == 0LL) {
			if (_15613_k == 0LL) {
				return 0LL;
			}
			_17113_c+=static_cast<jule::F64>(static_cast<jule::F64>(_15613_k) * 1.9082149292705877e-10);
			return static_cast<jule::F64>((static_cast<jule::F64>(_15613_k) * 6.931471803691238e-01) + _17113_c);
		}
		_20413_R=_2029_hfsq * (1e+00 - (6.666666666666666e-01 * _15413_f));
		if (_15613_k == 0LL) {
			return _15413_f - _20413_R;
		}
		return static_cast<jule::F64>((static_cast<jule::F64>(_15613_k) * 6.931471803691238e-01) - ((_20413_R - ((static_cast<jule::F64>(_15613_k) * 1.9082149292705877e-10) + _17113_c)) - _15413_f));
	}
	_20313_s=jule::div(_15413_f,2e+00 + _15413_f);
	_20513_z=_20313_s * _20313_s;
	_20413_R=_20513_z * (6.666666666666735e-01 + (_20513_z * (3.999999999940942e-01 + (_20513_z * (2.857142874366239e-01 + (_20513_z * (2.2222198432149784e-01 + (_20513_z * (1.818357216161805e-01 + (_20513_z * (1.5313837699209373e-01 + (_20513_z * 1.4798198605116586e-01))))))))))));
	if (_15613_k == 0LL) {
		return _15413_f - (_2029_hfsq - (_20313_s * (_2029_hfsq + _20413_R)));
	}
	return static_cast<jule::F64>((static_cast<jule::F64>(_15613_k) * 6.931471803691238e-01) - ((_2029_hfsq - ((_20313_s * (_2029_hfsq + _20413_R)) + ((static_cast<jule::F64>(_15613_k) * 1.9082149292705877e-10) + _17113_c))) - _15413_f));
}



inline std::tuple<jule::F64,jule::F64> _121c6f450_stirling(jule::F64 _13113_x) {
	if (_13113_x > 200LL) {
		return std::make_tuple(static_cast<jule::F64>(_12192b6b0_inf(1LL)),1LL);
	}
	
	
	jule::F64 _13713_w = jule::div(1LL,_13113_x);
	_13713_w=static_cast<jule::F64>(1LL + (_13713_w * ((((((((_121c6f450__GAM_S[static_cast<jule::Int>(0LL)] * _13713_w) + _121c6f450__GAM_S[static_cast<jule::Int>(1LL)]) * _13713_w) + _121c6f450__GAM_S[static_cast<jule::Int>(2LL)]) * _13713_w) + _121c6f450__GAM_S[static_cast<jule::Int>(3LL)]) * _13713_w) + _121c6f450__GAM_S[static_cast<jule::Int>(4LL)])));
	jule::F64 _13913_y1 = _121c3a340_exp(_13113_x);
	jule::F64 _14013_y2 = 1e+00;
	if (_13113_x > 1.4301608e+02) {
		jule::F64 _14213_v = _121c54600_pow(_13113_x,static_cast<jule::F64>((5e-01 * _13113_x) - 2.5e-01));
		std::tie(_13913_y1,_14013_y2) = std::make_tuple(_14213_v,jule::div(_14213_v,_13913_y1));
	} else {
		_13913_y1=static_cast<jule::F64>(jule::div(_121c54600_pow(_13113_x,_13113_x - 5e-01),_13913_y1));
	}
	return std::make_tuple(_13913_y1,static_cast<jule::F64>((2.5066282746310007e+00 * _13713_w) * _14013_y2));
}



inline jule::F64 _121c6f450_gamma(jule::F64 _15918_x) {
	
	{
		if (!((_121c6f450_is_neg_int(_15918_x)) || (_12192b6b0_is_inf(_15918_x,-1LL)) || (_12192b6b0_is_nan(_15918_x)))) { goto _case_end_4622823024; }
		_case_begin_4622823024:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4622822704;
		_case_end_4622823024:;
		if (!((_12192b6b0_is_inf(_15918_x,1LL)))) { goto _case_end_4622823136; }
		_case_begin_4622823136:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(1LL));
		}
		goto _match_end_4622822704;
		_case_end_4622823136:;
		if (!((_15918_x == 0LL))) { goto _case_end_4622823248; }
		_case_begin_4622823248:;
		{
			if (_121b8e680_signbit(_15918_x)) {
				return static_cast<jule::F64>(_12192b6b0_inf(-1LL));
			}
			return static_cast<jule::F64>(_12192b6b0_inf(1LL));
		}
		goto _match_end_4622822704;
		_case_end_4622823248:;
		_match_end_4622822704:;
	}
	jule::F64 _17313_q = _1219bc510_abs(_15918_x);
	jule::F64 _17413_p = _121906e90_floor(_17313_q);
	if (_17313_q > 33LL) {
		if (_15918_x >= 0LL) {
			jule::F64 _17718_y1;
			jule::F64 _17722_y2;
			std::tie(_17718_y1,_17722_y2) = _121c6f450_stirling(_15918_x);
			return _17718_y1 * _17722_y2;
		}
		jule::Int _18317_signgam = 1LL;
		jule::I64 _18413_ip = static_cast<jule::I64>(_17413_p);
		if ((_18413_ip & 1LL) == 0LL) {
			_18317_signgam=-1LL;
		}
		jule::F64 _18817_z = _17313_q - _17413_p;
		if (_18817_z > 5e-01) {
			_17413_p=_17413_p + 1LL;
			_18817_z=_17313_q - _17413_p;
		}
		_18817_z=_17313_q * _121886250_sin(static_cast<jule::F64>(3.141592653589793e+00 * _18817_z));
		if (_18817_z == 0LL) {
			return static_cast<jule::F64>(_12192b6b0_inf(_18317_signgam));
		}
		jule::F64 _19714_sq1;
		jule::F64 _19719_sq2;
		std::tie(_19714_sq1,_19719_sq2) = _121c6f450_stirling(_17313_q);
		jule::F64 _19813_absz = _1219bc510_abs(_18817_z);
		jule::F64 _19913_d = (_19813_absz * _19714_sq1) * _19719_sq2;
		if (_12192b6b0_is_inf(_19913_d,0LL)) {
			_18817_z=static_cast<jule::F64>(jule::div(jule::div(jule::div(3.141592653589793e+00,_19813_absz),_19714_sq1),_19719_sq2));
		} else {
			_18817_z=static_cast<jule::F64>(jule::div(3.141592653589793e+00,_19913_d));
		}
		return static_cast<jule::F64>(static_cast<jule::F64>(_18317_signgam) * _18817_z);
	}
	jule::F64 _20913_z = 1e+00;
	_iter_begin_4622857392:;
	if (!(_15918_x >= 3LL)) { goto _iter_end_4622857392; }
	{
		_15918_x=_15918_x - 1LL;
		_20913_z=_20913_z * _15918_x;
	}
	_iter_next_4622857392:;
	goto _iter_begin_4622857392;
	_iter_end_4622857392:;
	_iter_begin_4622858160:;
	if (!(_15918_x < 0LL)) { goto _iter_end_4622858160; }
	{
		if (_15918_x > -1e-09) {
			goto _julec_label_small;
		}
		_20913_z=jule::div(_20913_z,_15918_x);
		_15918_x=_15918_x + 1LL;
	}
	_iter_next_4622858160:;
	goto _iter_begin_4622858160;
	_iter_end_4622858160:;
	_iter_begin_4622864304:;
	if (!(_15918_x < 2LL)) { goto _iter_end_4622864304; }
	{
		if (_15918_x < 1e-09) {
			goto _julec_label_small;
		}
		_20913_z=jule::div(_20913_z,_15918_x);
		_15918_x=_15918_x + 1LL;
	}
	_iter_next_4622864304:;
	goto _iter_begin_4622864304;
	_iter_end_4622864304:;
	if (_15918_x == 2LL) {
		return _20913_z;
	}
	_15918_x=_15918_x - 2LL;
	_17413_p=(((((((((((_15918_x * _121c6f450__GAM_P[static_cast<jule::Int>(0LL)]) + _121c6f450__GAM_P[static_cast<jule::Int>(1LL)]) * _15918_x) + _121c6f450__GAM_P[static_cast<jule::Int>(2LL)]) * _15918_x) + _121c6f450__GAM_P[static_cast<jule::Int>(3LL)]) * _15918_x) + _121c6f450__GAM_P[static_cast<jule::Int>(4LL)]) * _15918_x) + _121c6f450__GAM_P[static_cast<jule::Int>(5LL)]) * _15918_x) + _121c6f450__GAM_P[static_cast<jule::Int>(6LL)];
	_17313_q=(((((((((((((_15918_x * _121c6f450__GAM_Q[static_cast<jule::Int>(0LL)]) + _121c6f450__GAM_Q[static_cast<jule::Int>(1LL)]) * _15918_x) + _121c6f450__GAM_Q[static_cast<jule::Int>(2LL)]) * _15918_x) + _121c6f450__GAM_Q[static_cast<jule::Int>(3LL)]) * _15918_x) + _121c6f450__GAM_Q[static_cast<jule::Int>(4LL)]) * _15918_x) + _121c6f450__GAM_Q[static_cast<jule::Int>(5LL)]) * _15918_x) + _121c6f450__GAM_Q[static_cast<jule::Int>(6LL)]) * _15918_x) + _121c6f450__GAM_Q[static_cast<jule::Int>(7LL)];
	return jule::div(_20913_z * _17413_p,_17313_q);
	_julec_label_small:;
	if (_15918_x == 0LL) {
		return static_cast<jule::F64>(_12192b6b0_inf(1LL));
	}
	return jule::div(_20913_z,(1LL + (5.772156649015329e-01 * _15918_x)) * _15918_x);
}



inline jule::Bool _121c6f450_is_neg_int(jule::F64 _24515_x) {
	if (_24515_x < 0LL) {
		jule::F64 _24717_xf;
		std::tie(std::ignore,_24717_xf) = _121af3740_modf(_24515_x);
		return _24717_xf == 0LL;
	}
	return false;
}



inline jule::F64 _121d46080_erfinv(jule::F64 _10519_x) {
	if ((_12192b6b0_is_nan(_10519_x) || (_10519_x <= -1LL)) || (_10519_x >= 1LL)) {
		if ((_10519_x == -1LL) || (_10519_x == 1LL)) {
			return static_cast<jule::F64>(_12192b6b0_inf(static_cast<jule::Int>(_10519_x)));
		}
		return static_cast<jule::F64>(_12192b6b0_nan());
	}
	jule::Bool _11413_sign = false;
	if (_10519_x < 0LL) {
		_10519_x=static_cast<jule::F64>((-(_10519_x)));
		_11413_sign=true;
	}
	jule::F64 _12013_ans = 0e+00;
	if (_10519_x <= 8.5000000999999997e-01) {
		jule::F64 _12213_r = 1.80625e-01 - ((2.5e-01 * _10519_x) * _10519_x);
		jule::F64 _12313_z1 = (((((((((((((8.870940696254552e+02 * _12213_r) + 1.1819493347062295e+04) * _12213_r) + 2.3782041382114385e+04) * _12213_r) + 1.6235862515167575e+04) * _12213_r) + 4.854886889384388e+03) * _12213_r) + 6.97062665343896e+02) * _12213_r) + 4.707268811238398e+01) * _12213_r) + 1.1975323115670913e+00;
		jule::F64 _12413_z2 = (((((((((((((5.226495278852854e+03 * _12213_r) + 2.8729085735721943e+04) * _12213_r) + 3.930789580009271e+04) * _12213_r) + 2.1213794301586597e+04) * _12213_r) + 5.394196021424751e+03) * _12213_r) + 6.871870074920579e+02) * _12213_r) + 4.231333070160091e+01) * _12213_r) + 1e+00;
		_12013_ans=jule::div(_10519_x * _12313_z1,_12413_z2);
	} else {
		jule::F64 _12717_z1 = 0e+00;
		jule::F64 _12817_z2 = 0e+00;
		jule::F64 _12917_r = _121d2f040_sqrt(static_cast<jule::F64>(6.931471805599453e-01 - _121961860_log(static_cast<jule::F64>(1e+00 - _10519_x))));
		if (_12917_r <= 5e+00) {
			_12917_r-=1.6e+00;
			_12717_z1=static_cast<jule::F64>((((((((((((((7.745450142783414e-04 * _12917_r) + 2.2723844989269184e-02) * _12917_r) + 2.417807251774506e-01) * _12917_r) + 1.2704582524523684e+00) * _12917_r) + 3.6478483247632045e+00) * _12917_r) + 5.769497221460691e+00) * _12917_r) + 4.630337846156546e+00) * _12917_r) + 1.4234371107496835e+00);
			_12817_z2=static_cast<jule::F64>((((((((((((((1.4859850019840355e-09 * _12917_r) + 7.744145906515771e-04) * _12917_r) + 2.1494160384252878e-02) * _12917_r) + 2.094506521051275e-01) * _12917_r) + 9.754783200178743e-01) * _12917_r) + 2.3707661626024534e+00) * _12917_r) + 2.9036514445419948e+00) * _12917_r) + 1.4142135623730951e+00);
		} else {
			_12917_r-=5e+00;
			_12717_z1=static_cast<jule::F64>((((((((((((((2.0103343992922881e-07 * _12917_r) + 2.7115555687434876e-05) * _12917_r) + 1.2426609473880784e-03) * _12917_r) + 2.6532189526576124e-02) * _12917_r) + 2.9656057182850487e-01) * _12917_r) + 1.7848265399172913e+00) * _12917_r) + 5.463784911164114e+00) * _12917_r) + 6.657904643501103e+00);
			_12817_z2=static_cast<jule::F64>((((((((((((((2.8910246058729655e-15 * _12917_r) + 2.010321207683943e-07) * _12917_r) + 2.6110884050805935e-05) * _12917_r) + 1.1128009970788597e-03) * _12917_r) + 2.103693768272069e-02) * _12917_r) + 1.9364809469506591e-01) * _12917_r) + 8.482908416595164e-01) * _12917_r) + 1.4142135623730951e+00);
		}
		_12013_ans=jule::div(_12717_z1,_12817_z2);
	}
	if (_11413_sign) {
		return static_cast<jule::F64>((-(_12013_ans)));
	}
	return _12013_ans;
}



inline jule::F64 _121d46080_erfcinv(jule::F64 _15516_x) {
	return static_cast<jule::F64>(_121d46080_erfinv(static_cast<jule::F64>(1LL - _15516_x)));
}



inline jule::F64 _121d71c00_erf(jule::F64 _21716_x) {
	
	
	{
		if (!((_12192b6b0_is_nan(_21716_x)))) { goto _case_end_4622956160; }
		_case_begin_4622956160:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4622955648;
		_case_end_4622956160:;
		if (!((_12192b6b0_is_inf(_21716_x,1LL)))) { goto _case_end_4622956352; }
		_case_begin_4622956352:;
		{
			return 1LL;
		}
		goto _match_end_4622955648;
		_case_end_4622956352:;
		if (!((_12192b6b0_is_inf(_21716_x,-1LL)))) { goto _case_end_4622956464; }
		_case_begin_4622956464:;
		{
			return -1LL;
		}
		goto _match_end_4622955648;
		_case_end_4622956464:;
		_match_end_4622955648:;
	}
	jule::Bool _22913_sign = false;
	if (_21716_x < 0LL) {
		_21716_x=static_cast<jule::F64>((-(_21716_x)));
		_22913_sign=true;
	}
	if (_21716_x < 8.4375e-01) {
		jule::F64 _23517_temp = 0e+00;
		if (_21716_x < 3.725290298461914e-09) {
			if (_21716_x < 2.848094538889218e-306) {
				_23517_temp=static_cast<jule::F64>(1.25e-01 * ((8e+00 * _21716_x) + (1.0270333367641007e+00 * _21716_x)));
			} else {
				_23517_temp=_21716_x + (1.283791670955126e-01 * _21716_x);
			}
		} else {
			jule::F64 _24317_z = _21716_x * _21716_x;
			jule::F64 _24417_r = 1.2837916709551256e-01 + (_24317_z * (-3.250421072470015e-01 + (_24317_z * (-2.848174957559851e-02 + (_24317_z * (-5.770270296489442e-03 + (_24317_z * -2.3763016656650163e-05)))))));
			jule::F64 _24517_s = 1LL + (_24317_z * (3.9791722395915535e-01 + (_24317_z * (6.50222499887673e-02 + (_24317_z * (5.081306281875766e-03 + (_24317_z * (1.3249473800432164e-04 + (_24317_z * -3.960228278775368e-06)))))))));
			jule::F64 _24617_y = jule::div(_24417_r,_24517_s);
			_23517_temp=_21716_x + (_21716_x * _24617_y);
		}
		if (_22913_sign) {
			return static_cast<jule::F64>((-(_23517_temp)));
		}
		return _23517_temp;
	}
	if (_21716_x < 1.25e+00) {
		jule::F64 _25513_s = _21716_x - 1LL;
		jule::F64 _25613_P = -2.3621185607526594e-03 + (_25513_s * (4.1485611868374833e-01 + (_25513_s * (-3.722078760357013e-01 + (_25513_s * (3.1834661990116175e-01 + (_25513_s * (-1.1089469428239668e-01 + (_25513_s * (3.5478304325618236e-02 + (_25513_s * -2.166375594868791e-03)))))))))));
		jule::F64 _25713_Q = 1LL + (_25513_s * (1.0642088040084423e-01 + (_25513_s * (5.40397917702171e-01 + (_25513_s * (7.182865441419627e-02 + (_25513_s * (1.2617121980876164e-01 + (_25513_s * (1.363708391202905e-02 + (_25513_s * 1.1984499846799107e-02)))))))))));
		if (_22913_sign) {
			return static_cast<jule::F64>(-8.450629115104675e-01 - jule::div(_25613_P,_25713_Q));
		}
		return static_cast<jule::F64>(8.450629115104675e-01 + jule::div(_25613_P,_25713_Q));
	}
	if (_21716_x >= 6LL) {
		if (_22913_sign) {
			return -1LL;
		}
		return 1LL;
	}
	jule::F64 _2699_s = jule::div(1LL,_21716_x * _21716_x);
	jule::F64 _27013_R = 0e+00;
	jule::F64 _27113_S = 0e+00;
	if (_21716_x < 2.857142857142857e+00) {
		_27013_R=static_cast<jule::F64>(-9.864944034847148e-03 + (_2699_s * (-6.938585727071818e-01 + (_2699_s * (-1.0558626225323291e+01 + (_2699_s * (-6.2375332450326006e+01 + (_2699_s * (-1.6239666946257347e+02 + (_2699_s * (-1.8460509290671104e+02 + (_2699_s * (-8.12874355063066e+01 + (_2699_s * -9.814329344169145e+00))))))))))))));
		_27113_S=static_cast<jule::F64>(1LL + (_2699_s * (1.9651271667439257e+01 + (_2699_s * (1.3765775414351904e+02 + (_2699_s * (4.3456587747522923e+02 + (_2699_s * (6.453872717332679e+02 + (_2699_s * (4.2900814002756783e+02 + (_2699_s * (1.0863500554177944e+02 + (_2699_s * (6.570249770319282e+00 + (_2699_s * -6.04244152148581e-02))))))))))))))));
	} else {
		_27013_R=static_cast<jule::F64>(-9.8649429247001e-03 + (_2699_s * (-7.99283237680523e-01 + (_2699_s * (-1.7757954917754752e+01 + (_2699_s * (-1.6063638485582192e+02 + (_2699_s * (-6.375664433683896e+02 + (_2699_s * (-1.0250951316110772e+03 + (_2699_s * -4.835191916086514e+02))))))))))));
		_27113_S=static_cast<jule::F64>(1LL + (_2699_s * (3.033806074348246e+01 + (_2699_s * (3.257925129965739e+02 + (_2699_s * (1.536729586084437e+03 + (_2699_s * (3.1998582195085955e+03 + (_2699_s * (2.5530504064331644e+03 + (_2699_s * (4.7452854120695537e+02 + (_2699_s * -2.244095244658582e+01))))))))))))));
	}
	jule::F64 _2799_z = _12173aa20_f64_from_bits(static_cast<jule::U64>(_12173aa20_f64_bits(_21716_x) & 18446744069414584320LLU));
	jule::F64 _2809_r = _121c3a340_exp(static_cast<jule::F64>(((-(_2799_z)) * _2799_z) - 5.625e-01)) * _121c3a340_exp(((_2799_z - _21716_x) * (_2799_z + _21716_x)) + jule::div(_27013_R,_27113_S));
	if (_22913_sign) {
		return jule::div(_2809_r,_21716_x) - 1LL;
	}
	return static_cast<jule::F64>(1LL - jule::div(_2809_r,_21716_x));
}



inline jule::F64 _121d71c00_erfc(jule::F64 _29317_x) {
	
	{
		if (!((_12192b6b0_is_nan(_29317_x)))) { goto _case_end_4623034304; }
		_case_begin_4623034304:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4623033696;
		_case_end_4623034304:;
		if (!((_12192b6b0_is_inf(_29317_x,1LL)))) { goto _case_end_4623034448; }
		_case_begin_4623034448:;
		{
			return 0LL;
		}
		goto _match_end_4623033696;
		_case_end_4623034448:;
		if (!((_12192b6b0_is_inf(_29317_x,-1LL)))) { goto _case_end_4623034560; }
		_case_begin_4623034560:;
		{
			return 2LL;
		}
		goto _match_end_4623033696;
		_case_end_4623034560:;
		_match_end_4623033696:;
	}
	jule::Bool _30413_sign = false;
	if (_29317_x < 0LL) {
		_29317_x=static_cast<jule::F64>((-(_29317_x)));
		_30413_sign=true;
	}
	if (_29317_x < 8.4375e-01) {
		jule::F64 _31017_temp = 0e+00;
		if (_29317_x < 1.3877787807814457e-17) {
			_31017_temp=_29317_x;
		} else {
			jule::F64 _31417_z = _29317_x * _29317_x;
			jule::F64 _31517_r = 1.2837916709551256e-01 + (_31417_z * (-3.250421072470015e-01 + (_31417_z * (-2.848174957559851e-02 + (_31417_z * (-5.770270296489442e-03 + (_31417_z * -2.3763016656650163e-05)))))));
			jule::F64 _31617_s = 1LL + (_31417_z * (3.9791722395915535e-01 + (_31417_z * (6.50222499887673e-02 + (_31417_z * (5.081306281875766e-03 + (_31417_z * (1.3249473800432164e-04 + (_31417_z * -3.960228278775368e-06)))))))));
			jule::F64 _31717_y = jule::div(_31517_r,_31617_s);
			if (_29317_x < 2.5e-01) {
				_31017_temp=_29317_x + (_29317_x * _31717_y);
			} else {
				_31017_temp=static_cast<jule::F64>(5e-01 + ((_29317_x * _31717_y) + (_29317_x - 5e-01)));
			}
		}
		if (_30413_sign) {
			return static_cast<jule::F64>(1LL + _31017_temp);
		}
		return static_cast<jule::F64>(1LL - _31017_temp);
	}
	if (_29317_x < 1.25e+00) {
		jule::F64 _33013_s = _29317_x - 1LL;
		jule::F64 _33113_P = -2.3621185607526594e-03 + (_33013_s * (4.1485611868374833e-01 + (_33013_s * (-3.722078760357013e-01 + (_33013_s * (3.1834661990116175e-01 + (_33013_s * (-1.1089469428239668e-01 + (_33013_s * (3.5478304325618236e-02 + (_33013_s * -2.166375594868791e-03)))))))))));
		jule::F64 _33213_Q = 1LL + (_33013_s * (1.0642088040084423e-01 + (_33013_s * (5.40397917702171e-01 + (_33013_s * (7.182865441419627e-02 + (_33013_s * (1.2617121980876164e-01 + (_33013_s * (1.363708391202905e-02 + (_33013_s * 1.1984499846799107e-02)))))))))));
		if (_30413_sign) {
			return static_cast<jule::F64>(1.8450629115104675e+00 + jule::div(_33113_P,_33213_Q));
		}
		return static_cast<jule::F64>(1.5493708848953247e-01 - jule::div(_33113_P,_33213_Q));
	}
	if (_29317_x < 28LL) {
		jule::F64 _34013_s = jule::div(1LL,_29317_x * _29317_x);
		jule::F64 _34117_R = 0e+00;
		jule::F64 _34217_S = 0e+00;
		if (_29317_x < 2.857142857142857e+00) {
			_34117_R=static_cast<jule::F64>(-9.864944034847148e-03 + (_34013_s * (-6.938585727071818e-01 + (_34013_s * (-1.0558626225323291e+01 + (_34013_s * (-6.2375332450326006e+01 + (_34013_s * (-1.6239666946257347e+02 + (_34013_s * (-1.8460509290671104e+02 + (_34013_s * (-8.12874355063066e+01 + (_34013_s * -9.814329344169145e+00))))))))))))));
			_34217_S=static_cast<jule::F64>(1LL + (_34013_s * (1.9651271667439257e+01 + (_34013_s * (1.3765775414351904e+02 + (_34013_s * (4.3456587747522923e+02 + (_34013_s * (6.453872717332679e+02 + (_34013_s * (4.2900814002756783e+02 + (_34013_s * (1.0863500554177944e+02 + (_34013_s * (6.570249770319282e+00 + (_34013_s * -6.04244152148581e-02))))))))))))))));
		} else {
			if (_30413_sign && (_29317_x > 6LL)) {
				return 2LL;
			}
			_34117_R=static_cast<jule::F64>(-9.8649429247001e-03 + (_34013_s * (-7.99283237680523e-01 + (_34013_s * (-1.7757954917754752e+01 + (_34013_s * (-1.6063638485582192e+02 + (_34013_s * (-6.375664433683896e+02 + (_34013_s * (-1.0250951316110772e+03 + (_34013_s * -4.835191916086514e+02))))))))))));
			_34217_S=static_cast<jule::F64>(1LL + (_34013_s * (3.033806074348246e+01 + (_34013_s * (3.257925129965739e+02 + (_34013_s * (1.536729586084437e+03 + (_34013_s * (3.1998582195085955e+03 + (_34013_s * (2.5530504064331644e+03 + (_34013_s * (4.7452854120695537e+02 + (_34013_s * -2.244095244658582e+01))))))))))))));
		}
		jule::F64 _35313_z = _12173aa20_f64_from_bits(static_cast<jule::U64>(_12173aa20_f64_bits(_29317_x) & 18446744069414584320LLU));
		jule::F64 _35413_r = _121c3a340_exp(static_cast<jule::F64>(((-(_35313_z)) * _35313_z) - 5.625e-01)) * _121c3a340_exp(((_35313_z - _29317_x) * (_35313_z + _29317_x)) + jule::div(_34117_R,_34217_S));
		if (_30413_sign) {
			return static_cast<jule::F64>(2LL - jule::div(_35413_r,_29317_x));
		}
		return jule::div(_35413_r,_29317_x);
	}
	if (_30413_sign) {
		return 2LL;
	}
	return 0LL;
}



inline jule::F64 _121d85980_pow10(jule::Int _6114_n) {
	if ((0LL <= _6114_n) && (_6114_n <= 308LL)) {
		return _121d85980_POW10_POSTAB32[static_cast<jule::Int>(jule::div(static_cast<jule::Uint>(_6114_n),32LL))] * _121d85980_POW10_TAB[static_cast<jule::Int>(static_cast<jule::Uint>(_6114_n) % 32LL)];
	}
	if ((-323LL <= _6114_n) && (_6114_n <= 0LL)) {
		return jule::div(_121d85980_POW10_NEGTAB32[static_cast<jule::Int>(jule::div(static_cast<jule::Uint>((-(_6114_n))),32LL))],_121d85980_POW10_TAB[static_cast<jule::Int>(static_cast<jule::Uint>((-(_6114_n))) % 32LL)]);
	}
	if (_6114_n > 0LL) {
		return static_cast<jule::F64>(_12192b6b0_inf(1LL));
	}
	return 0LL;
}



inline jule::F64 _121d2f040_sqrt(jule::F64 _12313_x) {
	{
		if (!((_12313_x == 0LL) || (_12192b6b0_is_nan(_12313_x)) || (_12192b6b0_is_inf(_12313_x,1LL)))) { goto _case_end_4623125184; }
		_case_begin_4623125184:;
		{
			return _12313_x;
		}
		goto _match_end_4623123616;
		_case_end_4623125184:;
		if (!((_12313_x < 0LL))) { goto _case_end_4623125296; }
		_case_begin_4623125296:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4623123616;
		_case_end_4623125296:;
		_match_end_4623123616:;
	}
	jule::U64 _13113_ix = _12173aa20_f64_bits(_12313_x);
	jule::Int _13313_exp = static_cast<jule::Int>((_13113_ix >> 52LL) & 2047LL);
	if (_13313_exp == 0LL) {
		_iter_begin_4623130416:;
		if (!((_13113_ix & 4503599627370496LL) == 0LL)) { goto _iter_end_4623130416; }
		{
			_13113_ix<<=1LL;
			(_13313_exp)--;
		}
		_iter_next_4623130416:;
		goto _iter_begin_4623130416;
		_iter_end_4623130416:;
		(_13313_exp)++;
	}
	_13313_exp-=1023LL;
	_13113_ix=_13113_ix & -9218868437227405313LL;
	_13113_ix|=4503599627370496LL;
	if ((_13313_exp & 1LL) == 1LL) {
		_13113_ix<<=1LL;
	}
	_13313_exp>>=1LL;
	_13113_ix<<=1LL;
	jule::U64 _15013_q = 0LLU;
	jule::U64 _15113_s = 0LLU;
	jule::U64 _15213_r = static_cast<jule::U64>(9007199254740992LLU);
	_iter_begin_4623131872:;
	if (!(_15213_r != 0LL)) { goto _iter_end_4623131872; }
	{
		jule::U64 _15413_t = _15113_s + _15213_r;
		if (_15413_t <= _13113_ix) {
			_15113_s=_15413_t + _15213_r;
			_13113_ix-=_15413_t;
			_15013_q+=_15213_r;
		}
		_13113_ix<<=1LL;
		_15213_r>>=1LL;
	}
	_iter_next_4623131872:;
	goto _iter_begin_4623131872;
	_iter_end_4623131872:;
	if (_13113_ix != 0LL) {
		_15013_q+=_15013_q & 1LL;
	}
	_13113_ix=(_15013_q >> 1LL) + (static_cast<jule::U64>((_13313_exp - 1LL) + 1023LL) << 52LL);
	return static_cast<jule::F64>(_12173aa20_f64_from_bits(_13113_ix));
}



inline jule::F64 _121de84b0_logb(jule::F64 _4413_x) {
	{
		if (!((_4413_x == 0LL))) { goto _case_end_4623137056; }
		_case_begin_4623137056:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(-1LL));
		}
		goto _match_end_4623136896;
		_case_end_4623137056:;
		if (!((_12192b6b0_is_inf(_4413_x,0LL)))) { goto _case_end_4623137168; }
		_case_begin_4623137168:;
		{
			return static_cast<jule::F64>(_12192b6b0_inf(1LL));
		}
		goto _match_end_4623136896;
		_case_end_4623137168:;
		if (!((_12192b6b0_is_nan(_4413_x)))) { goto _case_end_4623153104; }
		_case_begin_4623153104:;
		{
			return _4413_x;
		}
		goto _match_end_4623136896;
		_case_end_4623153104:;
		_match_end_4623136896:;
	}
	return static_cast<jule::F64>(_121de84b0__ilogb(_4413_x));
}



inline jule::Int _121de84b0_ilogb(jule::F64 _6314_x) {
	{
		if (!((_6314_x == 0LL))) { goto _case_end_4623159296; }
		_case_begin_4623159296:;
		{
			return -2147483648LL;
		}
		goto _match_end_4623154000;
		_case_end_4623159296:;
		if (!((_12192b6b0_is_nan(_6314_x)))) { goto _case_end_4623159408; }
		_case_begin_4623159408:;
		{
			return 2147483647LL;
		}
		goto _match_end_4623154000;
		_case_end_4623159408:;
		if (!((_12192b6b0_is_inf(_6314_x,0LL)))) { goto _case_end_4623159520; }
		_case_begin_4623159520:;
		{
			return 2147483647LL;
		}
		goto _match_end_4623154000;
		_case_end_4623159520:;
		_match_end_4623154000:;
	}
	return static_cast<jule::Int>(_121de84b0__ilogb(_6314_x));
}



inline jule::Int _121de84b0__ilogb(jule::F64 _7715_x) {
	jule::Int _7813_exp = 0LL;
	std::tie(_7715_x,_7813_exp) = _12192b6b0_normalize(_7715_x);
	return static_cast<jule::Int>((static_cast<jule::Int>((_12173aa20_f64_bits(_7715_x) >> 52LL) & 2047LL) - 1023LL) + _7813_exp);
}



inline jule::F64 _121e22f30_jn(jule::Int _8415_n,jule::F64 _8427_x) {
	
	
	{
		if (!((_12192b6b0_is_nan(_8427_x)))) { goto _case_end_4623190032; }
		_case_begin_4623190032:;
		{
			return _8427_x;
		}
		goto _match_end_4623189824;
		_case_end_4623190032:;
		if (!((_12192b6b0_is_inf(_8427_x,0LL)))) { goto _case_end_4623190144; }
		_case_begin_4623190144:;
		{
			return 0LL;
		}
		goto _match_end_4623189824;
		_case_end_4623190144:;
		_match_end_4623189824:;
	}
	if (_8415_n == 0LL) {
		return static_cast<jule::F64>(_121b24710_j0(_8427_x));
	}
	if (_8427_x == 0LL) {
		return 0LL;
	}
	if (_8415_n < 0LL) {
		std::tie(_8415_n,_8427_x) = std::make_tuple(static_cast<jule::Int>((-(_8415_n))),static_cast<jule::F64>((-(_8427_x))));
	}
	if (_8415_n == 1LL) {
		return static_cast<jule::F64>(_121a0dc40_j1(_8427_x));
	}
	jule::Bool _10913_sign = false;
	if (_8427_x < 0LL) {
		_8427_x=static_cast<jule::F64>((-(_8427_x)));
		if ((_8415_n & 1LL) == 1LL) {
			_10913_sign=true;
		}
	}
	jule::F64 _11613_b = 0e+00;
	if (static_cast<jule::F64>(_8415_n) <= _8427_x) {
		if (_8427_x >= 5967269506265907200LL) {
			jule::F64 _13321_temp = 0e+00;
			jule::F64 _13418_s;
			jule::F64 _13421_c;
			std::tie(_13418_s,_13421_c) = _121973580_sincos(_8427_x);
			{
				auto _match_expr{ _8415_n & 3LL };
				if (!((0LL) == _match_expr)) { goto _case_end_4623209760; }
				_case_begin_4623209760:;
				{
					_13321_temp=_13421_c + _13418_s;
				}
				goto _match_end_4623207360;
				_case_end_4623209760:;
				if (!((1LL) == _match_expr)) { goto _case_end_4623210176; }
				_case_begin_4623210176:;
				{
					_13321_temp=static_cast<jule::F64>((-(_13421_c)) + _13418_s);
				}
				goto _match_end_4623207360;
				_case_end_4623210176:;
				if (!((2LL) == _match_expr)) { goto _case_end_4623210288; }
				_case_begin_4623210288:;
				{
					_13321_temp=static_cast<jule::F64>((-(_13421_c)) - _13418_s);
				}
				goto _match_end_4623207360;
				_case_end_4623210288:;
				if (!((3LL) == _match_expr)) { goto _case_end_4623210400; }
				_case_begin_4623210400:;
				{
					_13321_temp=_13421_c - _13418_s;
				}
				goto _match_end_4623207360;
				_case_end_4623210400:;
				_match_end_4623207360:;
			}
			_11613_b=static_cast<jule::F64>(jule::div(5.641895835477563e-01 * _13321_temp,_121d2f040_sqrt(_8427_x)));
		} else {
			_11613_b=static_cast<jule::F64>(_121a0dc40_j1(_8427_x));
			jule::Int _14422_i = 1LL;
			jule::F64 _14429_a = _121b24710_j0(_8427_x);
			std::tie(_14422_i,_14429_a) = std::make_tuple(1LL,_121b24710_j0(_8427_x));
			_iter_begin_4623218880:;
			if (!(_14422_i < _8415_n)) { goto _iter_end_4623218880; }
			{
				std::tie(_14429_a,_11613_b) = std::make_tuple(_11613_b,(_11613_b * jule::div(static_cast<jule::F64>(_14422_i + _14422_i),_8427_x)) - _14429_a);
			}
			_iter_next_4623218880:;
			(_14422_i)++;
			goto _iter_begin_4623218880;
			_iter_end_4623218880:;
		}
	} else {
		if (_8427_x < 1.862645149230957e-09) {
			if (_8415_n > 33LL) {
				_11613_b=0LL;
			} else {
				jule::F64 _15721_temp = _8427_x * 5e-01;
				_11613_b=_15721_temp;
				jule::F64 _15925_a = 1e+00;
				jule::Int _16025_i = 2LL;
				_iter_begin_4623228608:;
				if (!(_16025_i <= _8415_n)) { goto _iter_end_4623228608; }
				{
					_15925_a*=static_cast<jule::F64>(_16025_i);
					_11613_b*=_15721_temp;
				}
				_iter_next_4623228608:;
				(_16025_i)++;
				goto _iter_begin_4623228608;
				_iter_end_4623228608:;
				_11613_b/=_15925_a;
			}
		} else {
			jule::F64 _19717_w = jule::div(static_cast<jule::F64>(_8415_n + _8415_n),_8427_x);
			jule::F64 _19817_h = jule::div(2LL,_8427_x);
			jule::F64 _19921_q0 = _19717_w;
			jule::F64 _20021_z = _19717_w + _19817_h;
			jule::F64 _20121_q1 = (_19717_w * _20021_z) - 1LL;
			jule::Int _20221_k = 1LL;
			_iter_begin_4623239440:;
			if (!(_20121_q1 < 1e+09)) { goto _iter_end_4623239440; }
			{
				(_20221_k)++;
				_20021_z+=_19817_h;
				std::tie(_19921_q0,_20121_q1) = std::make_tuple(_20121_q1,(_20021_z * _20121_q1) - _19921_q0);
			}
			_iter_next_4623239440:;
			goto _iter_begin_4623239440;
			_iter_end_4623239440:;
			jule::Int _20817_m = _8415_n + _8415_n;
			jule::F64 _20921_t = 0e+00;
			jule::Int _21021_i = 2LL * (_8415_n + _20221_k);
			_iter_begin_4623246800:;
			if (!(_21021_i >= _20817_m)) { goto _iter_end_4623246800; }
			{
				_20921_t=static_cast<jule::F64>(jule::div(1LL,jule::div(static_cast<jule::F64>(_21021_i),_8427_x) - _20921_t));
			}
			_iter_next_4623246800:;
			_21021_i-=2LL;
			goto _iter_begin_4623246800;
			_iter_end_4623246800:;
			jule::F64 _21421_a = _20921_t;
			_11613_b=1LL;
			jule::F64 _22421_tmp = static_cast<jule::F64>(_8415_n);
			jule::F64 _22517_v = jule::div(2LL,_8427_x);
			_22421_tmp=_22421_tmp * _121961860_log(static_cast<jule::F64>(_1219bc510_abs(_22517_v * _22421_tmp)));
			if (_22421_tmp < 7.09782712893384e+02) {
				jule::Int _22825_i = _8415_n - 1LL;
				_iter_begin_4623257600:;
				if (!(_22825_i > 0LL)) { goto _iter_end_4623257600; }
				{
					jule::F64 _23025_di = static_cast<jule::F64>(_22825_i + _22825_i);
					std::tie(_21421_a,_11613_b) = std::make_tuple(_11613_b,jule::div(_11613_b * _23025_di,_8427_x) - _21421_a);
				}
				_iter_next_4623257600:;
				(_22825_i)--;
				goto _iter_begin_4623257600;
				_iter_end_4623257600:;
			} else {
				jule::Int _23425_i = _8415_n - 1LL;
				_iter_begin_4623262640:;
				if (!(_23425_i > 0LL)) { goto _iter_end_4623262640; }
				{
					jule::F64 _23625_di = static_cast<jule::F64>(_23425_i + _23425_i);
					std::tie(_21421_a,_11613_b) = std::make_tuple(_11613_b,jule::div(_11613_b * _23625_di,_8427_x) - _21421_a);
					if (_11613_b > 1.00000000000000002e+100) {
						_21421_a/=_11613_b;
						_20921_t/=_11613_b;
						_11613_b=1LL;
					}
				}
				_iter_next_4623262640:;
				(_23425_i)--;
				goto _iter_begin_4623262640;
				_iter_end_4623262640:;
			}
			_11613_b=jule::div(_20921_t * _121b24710_j0(_8427_x),_11613_b);
		}
	}
	if (_10913_sign) {
		return static_cast<jule::F64>((-(_11613_b)));
	}
	return _11613_b;
}



inline jule::F64 _121e22f30_yn(jule::Int _26315_n,jule::F64 _26323_x) {
	
	{
		if (!((_26323_x < 0LL) || (_12192b6b0_is_nan(_26323_x)))) { goto _case_end_4623272992; }
		_case_begin_4623272992:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4623272736;
		_case_end_4623272992:;
		if (!((_12192b6b0_is_inf(_26323_x,1LL)))) { goto _case_end_4623273104; }
		_case_begin_4623273104:;
		{
			return 0LL;
		}
		goto _match_end_4623272736;
		_case_end_4623273104:;
		_match_end_4623272736:;
	}
	if (_26315_n == 0LL) {
		return static_cast<jule::F64>(_121b24710_y0(_26323_x));
	}
	if (_26323_x == 0LL) {
		if ((_26315_n < 0LL) && ((_26315_n & 1LL) == 1LL)) {
			return static_cast<jule::F64>(_12192b6b0_inf(1LL));
		}
		return static_cast<jule::F64>(_12192b6b0_inf(-1LL));
	}
	jule::Bool _28213_sign = false;
	if (_26315_n < 0LL) {
		_26315_n=static_cast<jule::Int>((-(_26315_n)));
		if ((_26315_n & 1LL) == 1LL) {
			_28213_sign=true;
		}
	}
	if (_26315_n == 1LL) {
		if (_28213_sign) {
			return static_cast<jule::F64>((-(_121a0dc40_y1(_26323_x))));
		}
		return static_cast<jule::F64>(_121a0dc40_y1(_26323_x));
	}
	jule::F64 _29513_b = 0e+00;
	if (_26323_x >= 5967269506265907200LL) {
		jule::F64 _31017_temp = 0e+00;
		jule::F64 _31114_s;
		jule::F64 _31117_c;
		std::tie(_31114_s,_31117_c) = _121973580_sincos(_26323_x);
		{
			auto _match_expr{ _26315_n & 3LL };
			if (!((0LL) == _match_expr)) { goto _case_end_4623295072; }
			_case_begin_4623295072:;
			{
				_31017_temp=_31114_s - _31117_c;
			}
			goto _match_end_4623292672;
			_case_end_4623295072:;
			if (!((1LL) == _match_expr)) { goto _case_end_4623295488; }
			_case_begin_4623295488:;
			{
				_31017_temp=static_cast<jule::F64>((-(_31114_s)) - _31117_c);
			}
			goto _match_end_4623292672;
			_case_end_4623295488:;
			if (!((2LL) == _match_expr)) { goto _case_end_4623295600; }
			_case_begin_4623295600:;
			{
				_31017_temp=static_cast<jule::F64>((-(_31114_s)) + _31117_c);
			}
			goto _match_end_4623292672;
			_case_end_4623295600:;
			if (!((3LL) == _match_expr)) { goto _case_end_4623295712; }
			_case_begin_4623295712:;
			{
				_31017_temp=_31114_s + _31117_c;
			}
			goto _match_end_4623292672;
			_case_end_4623295712:;
			_match_end_4623292672:;
		}
		_29513_b=static_cast<jule::F64>(jule::div(5.641895835477563e-01 * _31017_temp,_121d2f040_sqrt(_26323_x)));
	} else {
		jule::F64 _32017_a = _121b24710_y0(_26323_x);
		_29513_b=static_cast<jule::F64>(_121a0dc40_y1(_26323_x));
		jule::Int _32317_i = 1LL;
		_iter_begin_4623303424:;
		if (!((_32317_i < _26315_n) && (!(_12192b6b0_is_inf(_29513_b,-1LL))))) { goto _iter_end_4623303424; }
		{
			std::tie(_32017_a,_29513_b) = std::make_tuple(_29513_b,static_cast<jule::F64>((jule::div(static_cast<jule::F64>(_32317_i + _32317_i),_26323_x) * _29513_b) - _32017_a));
		}
		_iter_next_4623303424:;
		(_32317_i)++;
		goto _iter_begin_4623303424;
		_iter_end_4623303424:;
	}
	if (_28213_sign) {
		return static_cast<jule::F64>((-(_29513_b)));
	}
	return _29513_b;
}



inline jule::F64 _121e6e8c0_remainder(jule::F64 _6822_x,jule::F64 _6834_y) {
	
	
	{
		if (!((_12192b6b0_is_nan(_6822_x)) || (_12192b6b0_is_nan(_6834_y)) || (_12192b6b0_is_inf(_6822_x,0LL)) || (_6834_y == 0LL))) { goto _case_end_4623314128; }
		_case_begin_4623314128:;
		{
			return static_cast<jule::F64>(_12192b6b0_nan());
		}
		goto _match_end_4623313968;
		_case_end_4623314128:;
		if (!((_12192b6b0_is_inf(_6834_y,0LL)))) { goto _case_end_4623314240; }
		_case_begin_4623314240:;
		{
			return _6822_x;
		}
		goto _match_end_4623313968;
		_case_end_4623314240:;
		_match_end_4623313968:;
	}
	jule::Bool _7913_sign = false;
	if (_6822_x < 0LL) {
		_6822_x=static_cast<jule::F64>((-(_6822_x)));
		_7913_sign=true;
	}
	if (_6834_y < 0LL) {
		_6834_y=static_cast<jule::F64>((-(_6834_y)));
	}
	if (_6822_x == _6834_y) {
		if (_7913_sign) {
			jule::F64 _8917_zero = 0e+00;
			return static_cast<jule::F64>((-(_8917_zero)));
		}
		return 0LL;
	}
	if (_6834_y <= 8.988465674311579e+307) {
		_6822_x=static_cast<jule::F64>(_1218a35b0_mod(_6822_x,_6834_y + _6834_y));
	}
	if (_6834_y < 4.450147717014403e-308) {
		if ((_6822_x + _6822_x) > _6834_y) {
			_6822_x-=_6834_y;
			if ((_6822_x + _6822_x) >= _6834_y) {
				_6822_x-=_6834_y;
			}
		}
	} else {
		jule::F64 _10513_y_half = 5e-01 * _6834_y;
		if (_6822_x > _10513_y_half) {
			_6822_x-=_6834_y;
			if (_6822_x >= _10513_y_half) {
				_6822_x-=_6834_y;
			}
		}
	}
	if (_7913_sign) {
		_6822_x=static_cast<jule::F64>((-(_6822_x)));
	}
	return _6822_x;
}



inline jule::F64 _121e2b130_xatan(jule::F64 _8610_x) {
	
	
	
	
	
	
	
	
	
	
	jule::F64 _9813_z = _8610_x * _8610_x;
	_9813_z=jule::div(_9813_z * ((((((((-8.750608600031904e-01 * _9813_z) + -1.6157537187333652e+01) * _9813_z) + -7.500855792314705e+01) * _9813_z) + -1.2288666844901361e+02) * _9813_z) + -6.485021904942025e+01),((((((((_9813_z + 2.4858464901423062e+01) * _9813_z) + 1.6502700983169885e+02) * _9813_z) + 4.3288106049129027e+02) * _9813_z) + 4.853903996359137e+02) * _9813_z) + 1.945506571482614e+02);
	_9813_z=(_8610_x * _9813_z) + _8610_x;
	return _9813_z;
}



inline jule::F64 _121e2b130_satan(jule::F64 _10610_x) {
	
	
	if (_10610_x <= 6.6000000000000003e-01) {
		return static_cast<jule::F64>(_121e2b130_xatan(_10610_x));
	}
	if (_10610_x > 2.414213562373095e+00) {
		return static_cast<jule::F64>((1.5707963267948966e+00 - _121e2b130_xatan(static_cast<jule::F64>(jule::div(1LL,_10610_x)))) + 6.123233995736766e-17);
	}
	return static_cast<jule::F64>((7.853981633974483e-01 + _121e2b130_xatan(jule::div(_10610_x - 1LL,_10610_x + 1LL))) + 3.061616997868383e-17);
}



inline jule::F64 _121e2b130_atan(jule::F64 _12413_x) {
	if (_12413_x == 0LL) {
		return _12413_x;
	}
	if (_12413_x > 0LL) {
		return static_cast<jule::F64>(_121e2b130_satan(_12413_x));
	}
	return static_cast<jule::F64>((-(_121e2b130_satan(static_cast<jule::F64>((-(_12413_x)))))));
}



inline jule::F64 _121ec97c0_asin(jule::F64 _5017_x) {
	if (_5017_x == 0LL) {
		return _5017_x;
	}
	jule::Bool _5413_sign = false;
	if (_5017_x < 0LL) {
		_5017_x=static_cast<jule::F64>((-(_5017_x)));
		_5413_sign=true;
	}
	if (_5017_x > 1LL) {
		return static_cast<jule::F64>(_12192b6b0_nan());
	}
	jule::F64 _6313_temp = _121d2f040_sqrt(static_cast<jule::F64>(1LL - (_5017_x * _5017_x)));
	if (_5017_x > 7e-01) {
		_6313_temp=static_cast<jule::F64>(1.5707963267948966e+00 - _121e2b130_satan(jule::div(_6313_temp,_5017_x)));
	} else {
		_6313_temp=static_cast<jule::F64>(_121e2b130_satan(jule::div(_5017_x,_6313_temp)));
	}
	if (_5413_sign) {
		_6313_temp=static_cast<jule::F64>((-(_6313_temp)));
	}
	return _6313_temp;
}



inline jule::F64 _121ec97c0_acos(jule::F64 _8013_x) {
	return static_cast<jule::F64>(1.5707963267948966e+00 - _121ec97c0_asin(_8013_x));
}



inline jule::F64 _121e97e50_asinh(jule::F64 _7018_x) {
	
	
	
	if (_12192b6b0_is_nan(_7018_x) || _12192b6b0_is_inf(_7018_x,0LL)) {
		return _7018_x;
	}
	jule::Bool _7913_sign = false;
	if (_7018_x < 0LL) {
		_7018_x=static_cast<jule::F64>((-(_7018_x)));
		_7913_sign=true;
	}
	jule::F64 _8413_temp = 0e+00;
	{
		if (!((_7018_x > 268435456LL))) { goto _case_end_4623397536; }
		_case_begin_4623397536:;
		{
			_8413_temp=static_cast<jule::F64>(_121961860_log(_7018_x) + 6.931471805599453e-01);
		}
		goto _match_end_4623395504;
		_case_end_4623397536:;
		if (!((_7018_x > 2LL))) { goto _case_end_4623400864; }
		_case_begin_4623400864:;
		{
			_8413_temp=static_cast<jule::F64>(_121961860_log(static_cast<jule::F64>((2LL * _7018_x) + jule::div(1LL,_121d2f040_sqrt((_7018_x * _7018_x) + 1LL) + _7018_x))));
		}
		goto _match_end_4623395504;
		_case_end_4623400864:;
		if (!((_7018_x < 3.725290298461914e-09))) { goto _case_end_4623398480; }
		_case_begin_4623398480:;
		{
			_8413_temp=_7018_x;
		}
		goto _match_end_4623395504;
		_case_end_4623398480:;
		_case_begin_4623389136:;
		{
			_8413_temp=static_cast<jule::F64>(_121cd89d0_log1p(_7018_x + jule::div(_7018_x * _7018_x,1LL + _121d2f040_sqrt(static_cast<jule::F64>(1LL + (_7018_x * _7018_x))))));
		}
		goto _match_end_4623395504;
		_case_end_4623389136:;
		_match_end_4623395504:;
	}
	if (_7913_sign) {
		_8413_temp=static_cast<jule::F64>((-(_8413_temp)));
	}
	return _8413_temp;
}



inline std::tuple<jule::Bool,jule::Int> _13174f4d0_conv_bool(jule::Str _4118_s) {
	{
		auto _match_expr{ _4118_s };
		if (!((jule::Str("1", 1)) == _match_expr || (jule::Str("t", 1)) == _match_expr || (jule::Str("T", 1)) == _match_expr || (jule::Str("true", 4)) == _match_expr || (jule::Str("TRUE", 4)) == _match_expr || (jule::Str("True", 4)) == _match_expr)) { goto _case_end_4624071376; }
		_case_begin_4624071376:;
		{
			return std::make_tuple(true,0LLU);
		}
		goto _match_end_4624071232;
		_case_end_4624071376:;
		if (!((jule::Str("0", 1)) == _match_expr || (jule::Str("f", 1)) == _match_expr || (jule::Str("F", 1)) == _match_expr || (jule::Str("false", 5)) == _match_expr || (jule::Str("FALSE", 5)) == _match_expr || (jule::Str("False", 5)) == _match_expr)) { goto _case_end_4624071920; }
		_case_begin_4624071920:;
		{
			return std::make_tuple(false,0LLU);
		}
		goto _match_end_4624071232;
		_case_end_4624071920:;
		_match_end_4624071232:;
	}
	return std::make_tuple(false,2LLU);
}



inline jule::Str _13174f4d0_fmt_bool(jule::Bool _5217_b) {
	if (_5217_b) {
		return jule::Str("true", 4);
	}
	return jule::Str("false", 5);
}



inline jule::Str _131769b70_fmt_float(jule::F64 _7818_f,jule::U8 _7826_fmt,jule::Int _7837_prec,jule::Int _7848_bit_size) {
	return static_cast<jule::Str>(_131769b70_generic_ftoa(nullptr,_7818_f,_7826_fmt,_7837_prec,_7848_bit_size));
}



inline jule::Slice<jule::U8> _131769b70_generic_ftoa(jule::Slice<jule::U8> _8221_dst,jule::F64 _8234_val,jule::U8 _8244_fmt,jule::Int _8259_prec,jule::Int _8270_bit_size) {
	jule::U64 _8313_bits = 0LLU;
	_131769b70_FloatInfo* _8413_flt = nullptr;
	{
		auto _match_expr{ _8270_bit_size };
		if (!((32LL) == _match_expr)) { goto _case_end_4624092064; }
		_case_begin_4624092064:;
		{
			_8313_bits=static_cast<jule::U64>(_12173aa20_f32_bits(static_cast<jule::F32>(_8234_val)));
			_8413_flt=(&(_131769b70_F32_INFO));
		}
		goto _match_end_4624090512;
		_case_end_4624092064:;
		if (!((64LL) == _match_expr)) { goto _case_end_4624092176; }
		_case_begin_4624092176:;
		{
			_8313_bits=static_cast<jule::U64>(_12173aa20_f64_bits(_8234_val));
			_8413_flt=(&(_131769b70_F64_INFO));
		}
		goto _match_end_4624090512;
		_case_end_4624092176:;
		_case_begin_4624091088:;
		{
			jule::panic(jule::Str("std::conv: illegal bit_size", 27));
		}
		goto _match_end_4624090512;
		_case_end_4624091088:;
		_match_end_4624090512:;
	}
	jule::Bool _969_neg = (_8313_bits >> (_8413_flt->_field_expbits + _8413_flt->_field_mantbits)) != 0LL;
	jule::Int _9713_exp = static_cast<jule::Int>(_8313_bits >> _8413_flt->_field_mantbits) & ((1LL << _8413_flt->_field_expbits) - 1LL);
	jule::U64 _9813_mant = _8313_bits & ((static_cast<jule::U64>(1LLU) << _8413_flt->_field_mantbits) - 1LL);
	{
		auto _match_expr{ _9713_exp };
		if (!(((1LL << _8413_flt->_field_expbits) - 1LL) == _match_expr)) { goto _case_end_4624106496; }
		_case_begin_4624106496:;
		{
			jule::Str _10317_s = jule::Str("", 0);
			{
				if (!((_9813_mant != 0LL))) { goto _case_end_4624112832; }
				_case_begin_4624112832:;
				{
					_10317_s=jule::Str("nan", 3);
				}
				goto _match_end_4624110448;
				_case_end_4624112832:;
				if (!((_969_neg))) { goto _case_end_4624111824; }
				_case_begin_4624111824:;
				{
					_10317_s=jule::Str("-inf", 4);
				}
				goto _match_end_4624110448;
				_case_end_4624111824:;
				_case_begin_4624110704:;
				{
					_10317_s=jule::Str("+inf", 4);
				}
				goto _match_end_4624110448;
				_case_end_4624110704:;
				_match_end_4624110448:;
			}
			return append(_8221_dst,static_cast<jule::Slice<jule::U8>>(_10317_s));
		}
		goto _match_end_4624099712;
		_case_end_4624106496:;
		if (!((0LL) == _match_expr)) { goto _case_end_4624105696; }
		_case_begin_4624105696:;
		{
			(_9713_exp)++;
		}
		goto _match_end_4624099712;
		_case_end_4624105696:;
		_case_begin_4624104704:;
		{
			_9813_mant|=static_cast<jule::Uint>(static_cast<jule::U64>(1LLU) << _8413_flt->_field_mantbits);
		}
		goto _match_end_4624099712;
		_case_end_4624104704:;
		_match_end_4624099712:;
	}
	_9713_exp+=_8413_flt->_field_bias;
	if (_8244_fmt == 'b') {
		return _131769b70_fmt_b(_8221_dst,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if ((_8244_fmt == 'x') || (_8244_fmt == 'X')) {
		return _131769b70_fmt_x(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if (false) {
		return _131769b70_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	_131769b70_DecimalSlice _13413_digs = _131769b70_DecimalSlice();
	jule::Bool _13513_ok = false;
	jule::Bool _1379_shortest = _8259_prec < 0LL;
	if (_1379_shortest) {
		jule::Array<jule::U8,32> _14013_buf = jule::Array<jule::U8,32>({});
		_13413_digs._field_d=_14013_buf.slice(0LL);
		_121735870_ryu_ftoa_shortest(_13413_digs,_9813_mant,_9713_exp - static_cast<jule::Int>(_8413_flt->_field_mantbits),(*(_8413_flt)));
		_13513_ok=true;
		{
			auto _match_expr{ _8244_fmt };
			if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4624132496; }
			_case_begin_4624132496:;
			{
				_8259_prec=static_cast<jule::Int>(_131769b70_max(_13413_digs._field_nd - 1LL,0LL));
			}
			goto _match_end_4624130688;
			_case_end_4624132496:;
			if (!(('f') == _match_expr)) { goto _case_end_4624132608; }
			_case_begin_4624132608:;
			{
				_8259_prec=static_cast<jule::Int>(_131769b70_max(_13413_digs._field_nd - _13413_digs._field_dp,0LL));
			}
			goto _match_end_4624130688;
			_case_end_4624132608:;
			if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4624133456; }
			_case_begin_4624133456:;
			{
				_8259_prec=_13413_digs._field_nd;
			}
			goto _match_end_4624130688;
			_case_end_4624133456:;
			_match_end_4624130688:;
		}
	} else if (_8244_fmt != 'f') {
		jule::Int _15517_digits = _8259_prec;
		{
			auto _match_expr{ _8244_fmt };
			if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4624140800; }
			_case_begin_4624140800:;
			{
				(_15517_digits)++;
			}
			goto _match_end_4624138896;
			_case_end_4624140800:;
			if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4624141584; }
			_case_begin_4624141584:;
			{
				if (_8259_prec == 0LL) {
					_8259_prec=1LL;
				}
				_15517_digits=_8259_prec;
			}
			goto _match_end_4624138896;
			_case_end_4624141584:;
			_case_begin_4624140000:;
			{
				_15517_digits=1LL;
			}
			goto _match_end_4624138896;
			_case_end_4624140000:;
			_match_end_4624138896:;
		}
		jule::Array<jule::U8,24> _16813_buf = jule::Array<jule::U8,24>({});
		if ((_8270_bit_size == 32LL) && (_15517_digits <= 9LL)) {
			_13413_digs._field_d=_16813_buf.slice(0LL);
			_121735870_ryu_ftoa_fixed32(_13413_digs,static_cast<jule::U32>(_9813_mant),_9713_exp - static_cast<jule::Int>(_8413_flt->_field_mantbits),_15517_digits);
			_13513_ok=true;
		} else if (_15517_digits <= 18LL) {
			_13413_digs._field_d=_16813_buf.slice(0LL);
			_121735870_ryu_ftoa_fixed64(_13413_digs,_9813_mant,_9713_exp - static_cast<jule::Int>(_8413_flt->_field_mantbits),_15517_digits);
			_13513_ok=true;
		}
	}
	if ((!(_13513_ok))) {
		return _131769b70_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	return _131769b70_fmt_digits(_8221_dst,_1379_shortest,_969_neg,_13413_digs,_8259_prec,_8244_fmt);
}



inline jule::Slice<jule::U8> _131769b70_big_ftoa(jule::Slice<jule::U8> _18617_dst,jule::Int _18634_prec,jule::U8 _18645_fmt,jule::Bool _18656_neg,jule::U64 _18713_mant,jule::Int _18724_exp,_131769b70_FloatInfo& _18735_flt) {
	_13207af00_Decimal _18813_d = _13207af00_Decimal();
	_18813_d._method_assign(_18713_mant);
	_18813_d._method_shift(_18724_exp - static_cast<jule::Int>(_18735_flt._field_mantbits));
	_131769b70_DecimalSlice _19113_digs = _131769b70_DecimalSlice();
	jule::Bool _1929_shortest = _18634_prec < 0LL;
	if (_1929_shortest) {
		_131769b70_round_shortest(_18813_d,_18713_mant,_18724_exp,_18735_flt);
		_19113_digs=_131769b70_DecimalSlice(_18813_d._field_d.slice(0LL),_18813_d._field_nd,_18813_d._field_dp,jule::Bool());
		{
			auto _match_expr{ _18645_fmt };
			if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4624169760; }
			_case_begin_4624169760:;
			{
				_18634_prec=_19113_digs._field_nd - 1LL;
			}
			goto _match_end_4624171152;
			_case_end_4624169760:;
			if (!(('f') == _match_expr)) { goto _case_end_4624174928; }
			_case_begin_4624174928:;
			{
				_18634_prec=static_cast<jule::Int>(_131769b70_max(_19113_digs._field_nd - _19113_digs._field_dp,0LL));
			}
			goto _match_end_4624171152;
			_case_end_4624174928:;
			if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4624175040; }
			_case_begin_4624175040:;
			{
				_18634_prec=_19113_digs._field_nd;
			}
			goto _match_end_4624171152;
			_case_end_4624175040:;
			_match_end_4624171152:;
		}
	} else {
		{
			auto _match_expr{ _18645_fmt };
			if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4624175760; }
			_case_begin_4624175760:;
			{
				_18813_d._method_round(_18634_prec + 1LL);
			}
			goto _match_end_4624180016;
			_case_end_4624175760:;
			if (!(('f') == _match_expr)) { goto _case_end_4624175872; }
			_case_begin_4624175872:;
			{
				_18813_d._method_round(_18813_d._field_dp + _18634_prec);
			}
			goto _match_end_4624180016;
			_case_end_4624175872:;
			if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4624175984; }
			_case_begin_4624175984:;
			{
				if (_18634_prec == 0LL) {
					_18634_prec=1LL;
				}
				_18813_d._method_round(_18634_prec);
			}
			goto _match_end_4624180016;
			_case_end_4624175984:;
			_match_end_4624180016:;
		}
		_19113_digs=_131769b70_DecimalSlice(_18813_d._field_d.slice(0LL),_18813_d._field_nd,_18813_d._field_dp,jule::Bool());
	}
	return _131769b70_fmt_digits(_18617_dst,_1929_shortest,_18656_neg,_19113_digs,_18634_prec,_18645_fmt);
}



inline jule::Slice<jule::U8> _131769b70_fmt_digits(jule::Slice<jule::U8> _22319_dst,jule::Bool _22332_shortest,jule::Bool _22348_neg,_131769b70_DecimalSlice _22413_digs,jule::Int _22437_prec,jule::U8 _22448_fmt) {
	{
		auto _match_expr{ _22448_fmt };
		if (!(('e') == _match_expr || ('E') == _match_expr)) { goto _case_end_4624194672; }
		_case_begin_4624194672:;
		{
			return _131769b70_fmt_e(_22319_dst,_22348_neg,_22413_digs,_22437_prec,_22448_fmt);
		}
		goto _match_end_4624194096;
		_case_end_4624194672:;
		if (!(('f') == _match_expr)) { goto _case_end_4624194784; }
		_case_begin_4624194784:;
		{
			return _131769b70_fmt_f(_22319_dst,_22348_neg,_22413_digs,_22437_prec);
		}
		goto _match_end_4624194096;
		_case_end_4624194784:;
		if (!(('g') == _match_expr || ('G') == _match_expr)) { goto _case_end_4624194896; }
		_case_begin_4624194896:;
		{
			jule::Int _23217_eprec = _22437_prec;
			if ((_23217_eprec > _22413_digs._field_nd) && (_22413_digs._field_nd >= _22413_digs._field_dp)) {
				_23217_eprec=_22413_digs._field_nd;
			}
			if (_22332_shortest) {
				_23217_eprec=6LL;
			}
			jule::Int _24213_exp = _22413_digs._field_dp - 1LL;
			if ((_24213_exp < -4LL) || (_24213_exp >= _23217_eprec)) {
				if (_22437_prec > _22413_digs._field_nd) {
					_22437_prec=_22413_digs._field_nd;
				}
				return _131769b70_fmt_e(_22319_dst,_22348_neg,_22413_digs,_22437_prec - 1LL,(_22448_fmt + 'e') - 'g');
			}
			if (_22437_prec > _22413_digs._field_dp) {
				_22437_prec=_22413_digs._field_nd;
			}
			return _131769b70_fmt_f(_22319_dst,_22348_neg,_22413_digs,static_cast<jule::Int>(_131769b70_max(_22437_prec - _22413_digs._field_dp,0LL)));
		}
		goto _match_end_4624194096;
		_case_end_4624194896:;
		_match_end_4624194096:;
	}
	return append(_22319_dst,jule::Slice<jule::U8>({'%',_22448_fmt}));
}



inline void _131769b70_round_shortest(_13207af00_Decimal& _26124_d,jule::U64 _26136_mant,jule::Int _26147_exp,_131769b70_FloatInfo& _26158_flt) {
	if (_26136_mant == 0LL) {
		_26124_d._field_nd=0LL;
		return;
	}
	jule::Int _2829_minexp = _26158_flt._field_bias + 1LL;
	if ((_26147_exp > _2829_minexp) && ((332LL * (_26124_d._field_dp - _26124_d._field_nd)) >= (100LL * (_26147_exp - static_cast<jule::Int>(_26158_flt._field_mantbits))))) {
		return;
	}
	_13207af00_Decimal _29113_upper = _13207af00_Decimal();
	_29113_upper._method_assign((_26136_mant * 2LL) + 1LL);
	_29113_upper._method_shift((_26147_exp - static_cast<jule::Int>(_26158_flt._field_mantbits)) - 1LL);
	jule::U64 _30113_mantlo = 0LLU;
	jule::Int _30213_explo = 0LL;
	if ((_26136_mant > (1LL << _26158_flt._field_mantbits)) || (_26147_exp == _2829_minexp)) {
		_30113_mantlo=_26136_mant - 1LL;
		_30213_explo=_26147_exp;
	} else {
		_30113_mantlo=(_26136_mant * 2LL) - 1LL;
		_30213_explo=_26147_exp - 1LL;
	}
	_13207af00_Decimal _31013_lower = _13207af00_Decimal();
	_31013_lower._method_assign((_30113_mantlo * 2LL) + 1LL);
	_31013_lower._method_shift((_30213_explo - static_cast<jule::Int>(_26158_flt._field_mantbits)) - 1LL);
	jule::Bool _3179_inclusive = (_26136_mant % 2LL) == 0LL;
	jule::U8 _33013_upperdelta = 0LLU;
	jule::Int _33413_ui = 0LL;
	_iter_begin_4624260016:;
	{
		jule::Int _33913_mi = (_33413_ui - _29113_upper._field_dp) + _26124_d._field_dp;
		if (_33913_mi >= _26124_d._field_nd) {
			goto _iter_end_4624260016;
		}
		jule::Int _34313_li = (_33413_ui - _29113_upper._field_dp) + _31013_lower._field_dp;
		jule::U8 _34417_l = static_cast<jule::U8>(48LLU);
		if ((_34313_li >= 0LL) && (_34313_li < _31013_lower._field_nd)) {
			_34417_l=_31013_lower._field_d[static_cast<jule::Int>(_34313_li)];
		}
		jule::U8 _34817_m = static_cast<jule::U8>(48LLU);
		if (_33913_mi >= 0LL) {
			_34817_m=_26124_d._field_d[static_cast<jule::Int>(_33913_mi)];
		}
		jule::U8 _35217_u = static_cast<jule::U8>(48LLU);
		if (_33413_ui < _29113_upper._field_nd) {
			_35217_u=_29113_upper._field_d[static_cast<jule::Int>(_33413_ui)];
		}
		jule::Bool _36013_okdown = (_34417_l != _34817_m) || (_3179_inclusive && ((_34313_li + 1LL) == _31013_lower._field_nd));
		{
			if (!(((_33013_upperdelta == 0LL) && ((_34817_m + 1LL) < _35217_u)))) { goto _case_end_4624280320; }
			_case_begin_4624280320:;
			{
				_33013_upperdelta=2LL;
			}
			goto _match_end_4624281392;
			_case_end_4624280320:;
			if (!(((_33013_upperdelta == 0LL) && (_34817_m != _35217_u)))) { goto _case_end_4624280432; }
			_case_begin_4624280432:;
			{
				_33013_upperdelta=1LL;
			}
			goto _match_end_4624281392;
			_case_end_4624280432:;
			if (!(((_33013_upperdelta == 1LL) && ((_34817_m != '9') || (_35217_u != '0'))))) { goto _case_end_4624280544; }
			_case_begin_4624280544:;
			{
				_33013_upperdelta=2LL;
			}
			goto _match_end_4624281392;
			_case_end_4624280544:;
			_match_end_4624281392:;
		}
		jule::Bool _38113_okup = (_33013_upperdelta > 0LL) && ((_3179_inclusive || (_33013_upperdelta > 1LL)) || ((_33413_ui + 1LL) < _29113_upper._field_nd));
		{
			if (!((_36013_okdown && _38113_okup))) { goto _case_end_4624290464; }
			_case_begin_4624290464:;
			{
				_26124_d._method_round(_33913_mi + 1LL);
				return;
			}
			goto _match_end_4624286816;
			_case_end_4624290464:;
			if (!((_36013_okdown))) { goto _case_end_4624290576; }
			_case_begin_4624290576:;
			{
				_26124_d._method_round_down(_33913_mi + 1LL);
				return;
			}
			goto _match_end_4624286816;
			_case_end_4624290576:;
			if (!((_38113_okup))) { goto _case_end_4624291024; }
			_case_begin_4624291024:;
			{
				_26124_d._method_round_up(_33913_mi + 1LL);
				return;
			}
			goto _match_end_4624286816;
			_case_end_4624291024:;
			_match_end_4624286816:;
		}
	}
	_iter_next_4624260016:;
	(_33413_ui)++;
	goto _iter_begin_4624260016;
	_iter_end_4624260016:;
}



inline jule::Slice<jule::U8> _131769b70_fmt_e(jule::Slice<jule::U8> _40014_dst,jule::Bool _40027_neg,_131769b70_DecimalSlice _40038_d,jule::Int _40055_prec,jule::U8 _40066_fmt) {
	if (_40027_neg) {
		_40014_dst=append(_40014_dst,jule::Slice<jule::U8>({'-'}));
	}
	jule::U8 _40713_ch = '0';
	if (_40038_d._field_nd != 0LL) {
		_40713_ch=_40038_d._field_d[static_cast<jule::Int>(0LL)];
	}
	_40014_dst=append(_40014_dst,jule::Slice<jule::U8>({_40713_ch}));
	if (_40055_prec > 0LL) {
		_40014_dst=append(_40014_dst,jule::Slice<jule::U8>({'.'}));
		jule::Int _41617_i = 1LL;
		jule::Int _41713_m = _131769b70_min(_40038_d._field_nd,_40055_prec + 1LL);
		if (_41617_i < _41713_m) {
			_40014_dst=append(_40014_dst,_40038_d._field_d.slice(static_cast<jule::Int>(_41617_i),static_cast<jule::Int>(_41713_m)));
			_41617_i=_41713_m;
		}
		_iter_begin_4624319776:;
		if (!(_41617_i <= _40055_prec)) { goto _iter_end_4624319776; }
		{
			_40014_dst=append(_40014_dst,jule::Slice<jule::U8>({'0'}));
		}
		_iter_next_4624319776:;
		(_41617_i)++;
		goto _iter_begin_4624319776;
		_iter_end_4624319776:;
	}
	_40014_dst=append(_40014_dst,jule::Slice<jule::U8>({_40066_fmt}));
	jule::Int _42913_exp = _40038_d._field_dp - 1LL;
	if (_40038_d._field_nd == 0LL) {
		_42913_exp=0LL;
	}
	if (_42913_exp < 0LL) {
		_40713_ch='-';
		_42913_exp=static_cast<jule::Int>((-(_42913_exp)));
	} else {
		_40713_ch='+';
	}
	_40014_dst=append(_40014_dst,jule::Slice<jule::U8>({_40713_ch}));
	{
		if (!((_42913_exp < 10LL))) { goto _case_end_4624337632; }
		_case_begin_4624337632:;
		{
			_40014_dst=append(_40014_dst,jule::Slice<jule::U8>({'0',static_cast<jule::U8>(static_cast<jule::U8>(_42913_exp) + '0')}));
		}
		goto _match_end_4624333328;
		_case_end_4624337632:;
		if (!((_42913_exp < 100LL))) { goto _case_end_4624336352; }
		_case_begin_4624336352:;
		{
			_40014_dst=append(_40014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_42913_exp,10LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(_42913_exp % 10LL) + '0')}));
		}
		goto _match_end_4624333328;
		_case_end_4624336352:;
		_case_begin_4624331184:;
		{
			_40014_dst=append(_40014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_42913_exp,100LL)) + '0'),static_cast<jule::U8>((static_cast<jule::U8>(jule::div(_42913_exp,10LL)) % 10LL) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(_42913_exp % 10LL) + '0')}));
		}
		goto _match_end_4624333328;
		_case_end_4624331184:;
		_match_end_4624333328:;
	}
	return _40014_dst;
}



inline jule::Slice<jule::U8> _131769b70_fmt_f(jule::Slice<jule::U8> _45514_dst,jule::Bool _45527_neg,_131769b70_DecimalSlice _45538_d,jule::Int _45555_prec) {
	if (_45527_neg) {
		_45514_dst=append(_45514_dst,jule::Slice<jule::U8>({'-'}));
	}
	if (_45538_d._field_dp > 0LL) {
		jule::Int _46317_m = _131769b70_min(_45538_d._field_nd,_45538_d._field_dp);
		_45514_dst=append(_45514_dst,_45538_d._field_d.slice(0LL,static_cast<jule::Int>(_46317_m)));
		_iter_begin_4624358624:;
		if (!(_46317_m < _45538_d._field_dp)) { goto _iter_end_4624358624; }
		{
			_45514_dst=append(_45514_dst,jule::Slice<jule::U8>({'0'}));
		}
		_iter_next_4624358624:;
		(_46317_m)++;
		goto _iter_begin_4624358624;
		_iter_end_4624358624:;
	} else {
		_45514_dst=append(_45514_dst,jule::Slice<jule::U8>({'0'}));
	}
	if (_45555_prec > 0LL) {
		_45514_dst=append(_45514_dst,jule::Slice<jule::U8>({'.'}));
		jule::Int _47417_i = 0LL;
		_iter_begin_4624366864:;
		if (!(_47417_i < _45555_prec)) { goto _iter_end_4624366864; }
		{
			jule::U8 _47621_ch = static_cast<jule::U8>(48LLU);
			jule::Int _47717_j = _45538_d._field_dp + _47417_i;
			if ((0LL <= _47717_j) && (_47717_j < _45538_d._field_nd)) {
				_47621_ch=_45538_d._field_d[static_cast<jule::Int>(_47717_j)];
			}
			_45514_dst=append(_45514_dst,jule::Slice<jule::U8>({_47621_ch}));
		}
		_iter_next_4624366864:;
		(_47417_i)++;
		goto _iter_begin_4624366864;
		_iter_end_4624366864:;
	}
	return _45514_dst;
}



inline jule::Slice<jule::U8> _131769b70_fmt_b(jule::Slice<jule::U8> _48814_dst,jule::Bool _48827_neg,jule::U64 _48838_mant,jule::Int _48853_exp,_131769b70_FloatInfo& _48864_flt) {
	if (_48827_neg) {
		_48814_dst=append(_48814_dst,jule::Slice<jule::U8>({'-'}));
	}
	std::tie(_48814_dst,std::ignore) = _121837910_fmt_bits(_48814_dst,_48838_mant,10LL,false,true);
	_48814_dst=append(_48814_dst,jule::Slice<jule::U8>({'p'}));
	_48853_exp-=static_cast<jule::Int>(_48864_flt._field_mantbits);
	if (_48853_exp >= 0LL) {
		_48814_dst=append(_48814_dst,jule::Slice<jule::U8>({'+'}));
	}
	std::tie(_48814_dst,std::ignore) = _121837910_fmt_bits(_48814_dst,static_cast<jule::U64>(_48853_exp),10LL,_48853_exp < 0LL,true);
	return _48814_dst;
}



inline jule::Slice<jule::U8> _131769b70_fmt_x(jule::Slice<jule::U8> _51014_dst,jule::Int _51027_prec,jule::U8 _51038_fmt,jule::Bool _51049_neg,jule::U64 _51113_mant,jule::Int _51128_exp,_131769b70_FloatInfo& _51139_flt) {
	if (_51113_mant == 0LL) {
		_51128_exp=0LL;
	}
	_51113_mant<<=static_cast<jule::Uint>(60LL - _51139_flt._field_mantbits);
	_iter_begin_4624399712:;
	if (!((_51113_mant != 0LL) && ((_51113_mant & 1152921504606846976LL) == 0LL))) { goto _iter_end_4624399712; }
	{
		_51113_mant<<=1LL;
		(_51128_exp)--;
	}
	_iter_next_4624399712:;
	goto _iter_begin_4624399712;
	_iter_end_4624399712:;
	if ((_51027_prec >= 0LL) && (_51027_prec < 15LL)) {
		jule::Uint _52513_shift = static_cast<jule::Uint>(_51027_prec * 4LL);
		jule::U64 _52613_extra = (_51113_mant << _52513_shift) & 1152921504606846976LL;
		_51113_mant>>=static_cast<jule::Uint>(60LL - _52513_shift);
		if ((_52613_extra | (_51113_mant & 1LL)) > 576460752303423488LL) {
			(_51113_mant)++;
		}
		_51113_mant<<=static_cast<jule::Uint>(60LL - _52513_shift);
		if ((_51113_mant & 2305843009213693952LL) != 0LL) {
			_51113_mant>>=1LL;
			(_51128_exp)++;
		}
	}
	jule::Str _53913_hex = jule::Str("0123456789abcdef", 16);
	if (_51038_fmt == 'X') {
		_53913_hex=jule::Str("0123456789ABCDEF", 16);
	}
	if (_51049_neg) {
		_51014_dst=append(_51014_dst,jule::Slice<jule::U8>({'-'}));
	}
	_51014_dst=append(_51014_dst,jule::Slice<jule::U8>({'0',_51038_fmt,static_cast<jule::U8>('0' + static_cast<jule::U8>((_51113_mant >> 60LL) & 1LL))}));
	_51113_mant<<=4LL;
	if ((_51027_prec < 0LL) && (_51113_mant != 0LL)) {
		_51014_dst=append(_51014_dst,jule::Slice<jule::U8>({'.'}));
		_iter_begin_4624426080:;
		if (!(_51113_mant != 0LL)) { goto _iter_end_4624426080; }
		{
			_51014_dst=append(_51014_dst,jule::Slice<jule::U8>({_53913_hex[static_cast<jule::Int>((_51113_mant >> 60LL) & 15LL)]}));
			_51113_mant<<=4LL;
		}
		_iter_next_4624426080:;
		goto _iter_begin_4624426080;
		_iter_end_4624426080:;
	} else if (_51027_prec > 0LL) {
		_51014_dst=append(_51014_dst,jule::Slice<jule::U8>({'.'}));
		jule::Int _56017_i = 0LL;
		_iter_begin_4624433280:;
		if (!(_56017_i < _51027_prec)) { goto _iter_end_4624433280; }
		{
			_51014_dst=append(_51014_dst,jule::Slice<jule::U8>({_53913_hex[static_cast<jule::Int>((_51113_mant >> 60LL) & 15LL)]}));
			_51113_mant<<=4LL;
		}
		_iter_next_4624433280:;
		(_56017_i)++;
		goto _iter_begin_4624433280;
		_iter_end_4624433280:;
	}
	jule::U8 _56813_ch = static_cast<jule::U8>(80LLU);
	if (_51038_fmt == _13219c810_lower(_51038_fmt)) {
		_56813_ch='p';
	}
	_51014_dst=append(_51014_dst,jule::Slice<jule::U8>({_56813_ch}));
	if (_51128_exp < 0LL) {
		_56813_ch='-';
		_51128_exp=static_cast<jule::Int>((-(_51128_exp)));
	} else {
		_56813_ch='+';
	}
	_51014_dst=append(_51014_dst,jule::Slice<jule::U8>({_56813_ch}));
	{
		if (!((_51128_exp < 100LL))) { goto _case_end_4624455024; }
		_case_begin_4624455024:;
		{
			_51014_dst=append(_51014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_51128_exp,10LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(_51128_exp % 10LL) + '0')}));
		}
		goto _match_end_4624444032;
		_case_end_4624455024:;
		if (!((_51128_exp < 1000LL))) { goto _case_end_4624457568; }
		_case_begin_4624457568:;
		{
			_51014_dst=append(_51014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_51128_exp,100LL)) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_51128_exp,10LL) % 10LL) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(_51128_exp % 10LL) + '0')}));
		}
		goto _match_end_4624444032;
		_case_end_4624457568:;
		_case_begin_4624422672:;
		{
			_51014_dst=append(_51014_dst,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_51128_exp,1000LL)) + '0'),static_cast<jule::U8>((static_cast<jule::U8>(jule::div(_51128_exp,100LL)) % 10LL) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(jule::div(_51128_exp,10LL) % 10LL) + '0'),static_cast<jule::U8>(static_cast<jule::U8>(_51128_exp % 10LL) + '0')}));
		}
		goto _match_end_4624444032;
		_case_end_4624422672:;
		_match_end_4624444032:;
	}
	return _51014_dst;
}



inline jule::Int _131769b70_min(jule::Int _5938_a,jule::Int _59316_b) {
	if (_5938_a < _59316_b) {
		return _5938_a;
	}
	return _59316_b;
}



inline jule::Int _131769b70_max(jule::Int _6008_a,jule::Int _60016_b) {
	if (_6008_a > _60016_b) {
		return _6008_a;
	}
	return _60016_b;
}



inline jule::U8 _13219c810_lower(jule::U8 _4910_c) {
	return _4910_c | 32LL;
}



inline std::tuple<jule::U64,jule::Int> _13219c810_parse_uint(jule::Str _5423_s,jule::Int _5435_base,jule::Int _5450_bit_size) {
	if (_5423_s == jule::Str("", 0)) {
		return std::make_tuple(0LL,2LLU);
	}
	{
		if (!(((2LL <= _5435_base) && (_5435_base <= 36LL)))) { goto _case_end_4624480112; }
		goto _match_end_4624477136;
		_case_end_4624480112:;
		if (!((_5435_base == 0LL))) { goto _case_end_4624481136; }
		_case_begin_4624481136:;
		{
			_5435_base=10LL;
			if (_5423_s[static_cast<jule::Int>(0LL)] == '0') {
				{
					if (!(((_5423_s.len() >= 3LL) && (_13219c810_lower(_5423_s[static_cast<jule::Int>(1LL)]) == 'b')))) { goto _case_end_4624486176; }
					_case_begin_4624486176:;
					{
						_5435_base=2LL;
						_5423_s=_5423_s.slice(static_cast<jule::Int>(2LL));
					}
					goto _match_end_4624484688;
					_case_end_4624486176:;
					if (!(((_5423_s.len() >= 3LL) && (_13219c810_lower(_5423_s[static_cast<jule::Int>(1LL)]) == 'o')))) { goto _case_end_4624488096; }
					_case_begin_4624488096:;
					{
						_5435_base=8LL;
						_5423_s=_5423_s.slice(static_cast<jule::Int>(2LL));
					}
					goto _match_end_4624484688;
					_case_end_4624488096:;
					if (!(((_5423_s.len() >= 3LL) && (_13219c810_lower(_5423_s[static_cast<jule::Int>(1LL)]) == 'x')))) { goto _case_end_4624486528; }
					_case_begin_4624486528:;
					{
						_5435_base=16LL;
						_5423_s=_5423_s.slice(static_cast<jule::Int>(2LL));
					}
					goto _match_end_4624484688;
					_case_end_4624486528:;
					_case_begin_4624484880:;
					{
						_5435_base=8LL;
						_5423_s=_5423_s.slice(static_cast<jule::Int>(1LL));
					}
					goto _match_end_4624484688;
					_case_end_4624484880:;
					_match_end_4624484688:;
				}
			}
		}
		goto _match_end_4624477136;
		_case_end_4624481136:;
		_case_begin_4624476096:;
		{
			return std::make_tuple(0LL,3LLU);
		}
		goto _match_end_4624477136;
		_case_end_4624476096:;
		_match_end_4624477136:;
	}
	if (_5450_bit_size == 0LL) {
		_5450_bit_size=64LL;
	} else if ((_5450_bit_size < 0LL) || (_5450_bit_size > 64LL)) {
		return std::make_tuple(0LL,4LLU);
	}
	jule::U64 _9313_cutoff = 0LLU;
	{
		auto _match_expr{ _5435_base };
		if (!((10LL) == _match_expr)) { goto _case_end_4624505968; }
		_case_begin_4624505968:;
		{
			_9313_cutoff=1.8446744073709553e+18;
		}
		goto _match_end_4624501696;
		_case_end_4624505968:;
		if (!((16LL) == _match_expr)) { goto _case_end_4624507504; }
		_case_begin_4624507504:;
		{
			_9313_cutoff=1.152921504606847e+18;
		}
		goto _match_end_4624501696;
		_case_end_4624507504:;
		_case_begin_4624504000:;
		{
			_9313_cutoff=static_cast<jule::U64>(jule::div(jule::MAX_U64,static_cast<jule::U64>(_5435_base)) + 1LL);
		}
		goto _match_end_4624501696;
		_case_end_4624504000:;
		_match_end_4624501696:;
	}
	jule::U64 _10013_max_val = 0LLU;
	{
		auto _match_expr{ _5450_bit_size };
		if (!((32LL) == _match_expr)) { goto _case_end_4624510384; }
		_case_begin_4624510384:;
		{
			_10013_max_val=4294967295LLU;
		}
		goto _match_end_4624508192;
		_case_end_4624510384:;
		if (!((64LL) == _match_expr)) { goto _case_end_4624510496; }
		_case_begin_4624510496:;
		{
			_10013_max_val=jule::MAX_U64;
		}
		goto _match_end_4624508192;
		_case_end_4624510496:;
		_match_end_4624508192:;
	}
	jule::U64 _11213_n = 0LLU;
	{
		auto __julec_range_expr = _5423_s;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::U8 _13219c810_c = *__julec_range_begin;
			_iter_begin_4624504272:;
			{
				jule::U8 _11417_d = 0LLU;
				{
					if (!((('0' <= _13219c810_c) && (_13219c810_c <= '9')))) { goto _case_end_4624518720; }
					_case_begin_4624518720:;
					{
						_11417_d=_13219c810_c - '0';
					}
					goto _match_end_4624517088;
					_case_end_4624518720:;
					if (!((('a' <= _13219c810_lower(_13219c810_c)) && (_13219c810_lower(_13219c810_c) <= 'z')))) { goto _case_end_4624519744; }
					_case_begin_4624519744:;
					{
						_11417_d=static_cast<jule::U8>((_13219c810_lower(_13219c810_c) - 'a') + 10LL);
					}
					goto _match_end_4624517088;
					_case_end_4624519744:;
					_case_begin_4624517344:;
					{
						return std::make_tuple(0LL,2LLU);
					}
					goto _match_end_4624517088;
					_case_end_4624517344:;
					_match_end_4624517088:;
				}
				if (_11417_d >= static_cast<jule::U8>(_5435_base)) {
					return std::make_tuple(0LL,2LLU);
				}
				if (_11213_n >= _9313_cutoff) {
					return std::make_tuple(_10013_max_val,1LLU);
				}
				_11213_n*=static_cast<jule::U64>(_5435_base);
				jule::U64 _13413_n1 = _11213_n + static_cast<jule::U64>(_11417_d);
				if ((_13413_n1 < _11213_n) || (_13413_n1 > _10013_max_val)) {
					return std::make_tuple(_10013_max_val,1LLU);
				}
				_11213_n=_13413_n1;
			}
			_iter_next_4624504272:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _13219c810_c = *__julec_range_begin; goto _iter_begin_4624504272; }
			_iter_end_4624504272:;
		}
	}
	return std::make_tuple(_11213_n,0LLU);
}



inline std::tuple<jule::I64,jule::Int> _13219c810_parse_int(jule::Str _16522_s,jule::Int _16530_base,jule::Int _16545_bit_size) {
	jule::Int _16570_err = 0LLU;
	jule::I64 _16562_i = jule::I64();
	if (_16522_s == jule::Str("", 0)) {
		_16562_i = 0LL;
		_16570_err = 2LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	jule::Bool _17113_neg = false;
	if (_16522_s[static_cast<jule::Int>(0LL)] == '+') {
		_16522_s=_16522_s.slice(static_cast<jule::Int>(1LL));
	} else if (_16522_s[static_cast<jule::Int>(0LL)] == '-') {
		_17113_neg=true;
		_16522_s=_16522_s.slice(static_cast<jule::Int>(1LL));
	}
	jule::Uint _18013_un = 0LLU;
	std::tie(_18013_un,_16570_err) = _13219c810_parse_uint(_16522_s,_16530_base,_16545_bit_size);
	if ((_16570_err != 0LLU) && (_16570_err != 1LLU)) {
		_16562_i = 0LL;
		_16570_err = _16570_err;
		return std::make_tuple(_16562_i,_16570_err);
	}
	if (_16545_bit_size == 0LL) {
		_16545_bit_size=64LL;
	}
	jule::U64 _1909_cutoff = static_cast<jule::U64>(1LL << static_cast<jule::Uint>(_16545_bit_size - 1LL));
	if ((!(_17113_neg)) && (_18013_un >= _1909_cutoff)) {
		_16562_i = static_cast<jule::I64>(_1909_cutoff - 1LL);
		_16570_err = 1LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	if (_17113_neg && (_18013_un > _1909_cutoff)) {
		_16562_i = static_cast<jule::I64>((-(static_cast<jule::I64>(_1909_cutoff))));
		_16570_err = 1LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	jule::I64 _19713_n = static_cast<jule::I64>(_18013_un);
	if (_17113_neg) {
		_19713_n=static_cast<jule::I64>((-(_19713_n)));
	}
	_16562_i = _19713_n;
	_16570_err = 0LLU;
	return std::make_tuple(_16562_i,_16570_err);
}



inline std::tuple<jule::F64,jule::Bool> _1321c5450_eisel_lemire64(jule::U64 _4123_man,jule::Int _4133_exp10,jule::Bool _4145_neg) {
	jule::Bool _4166_ok = jule::Bool();
	jule::F64 _4158_f = jule::F64();
	if (_4123_man == 0LL) {
		if (_4145_neg) {
			_4158_f=static_cast<jule::F64>(_12173aa20_f64_from_bits(9223372036854775808LLU));
		}
		_4158_f = _4158_f;
		_4166_ok = true;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	if ((_4133_exp10 < -348LL) || (347LL < _4133_exp10)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::Int _579_clz = _121ef7c60_leading_zeros64(_4123_man);
	_4123_man<<=static_cast<jule::Uint>(_579_clz);
	
	jule::U64 _6013_ret_exp2 = static_cast<jule::U64>((((217706LL * _4133_exp10) >> 16LL) + 64LL) + 1023LL) - static_cast<jule::U64>(_579_clz);
	jule::U64 _6314_x_hi;
	jule::U64 _6324_x_lo;
	std::tie(_6314_x_hi,_6324_x_lo) = _121ef7c60_mul64(_4123_man,_1321c5450_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_4133_exp10 - -348LL)][static_cast<jule::Int>(1LL)]);
	if (((_6314_x_hi & 511LL) == 511LL) && ((_6324_x_lo + _4123_man) < _4123_man)) {
		jule::U64 _6714_y_hi;
		jule::U64 _6720_y_lo;
		std::tie(_6714_y_hi,_6720_y_lo) = _121ef7c60_mul64(_4123_man,_1321c5450_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_4133_exp10 - -348LL)][static_cast<jule::Int>(0LL)]);
		jule::U64 _6818_merged_hi = _6314_x_hi;
		jule::U64 _6829_merged_lo = _6324_x_lo + _6714_y_hi;
		std::tie(_6818_merged_hi,_6829_merged_lo) = std::make_tuple(_6314_x_hi,_6324_x_lo + _6714_y_hi);
		if (_6829_merged_lo < _6324_x_lo) {
			(_6818_merged_hi)++;
		}
		if ((((_6818_merged_hi & 511LL) == 511LL) && ((_6829_merged_lo + 1LL) == 0LL)) && ((_6720_y_lo + _4123_man) < _4123_man)) {
			_4158_f = 0LL;
			_4166_ok = false;
			return std::make_tuple(_4158_f,_4166_ok);
		}
		std::tie(_6314_x_hi,_6324_x_lo) = std::make_tuple(_6818_merged_hi,_6829_merged_lo);
	}
	jule::U64 _799_msb = _6314_x_hi >> 63LL;
	jule::U64 _8013_ret_mantissa = _6314_x_hi >> (_799_msb + 9LL);
	_6013_ret_exp2-=static_cast<jule::U64>(1LL ^ _799_msb);
	if (((_6324_x_lo == 0LL) && ((_6314_x_hi & 511LL) == 0LL)) && ((_8013_ret_mantissa & 3LL) == 1LL)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	_8013_ret_mantissa+=_8013_ret_mantissa & 1LL;
	_8013_ret_mantissa>>=1LL;
	if ((_8013_ret_mantissa >> 53LL) > 0LL) {
		_8013_ret_mantissa>>=1LL;
		_6013_ret_exp2+=1LL;
	}
	if ((_6013_ret_exp2 - 1LL) >= 2046LL) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::U64 _10313_ret_bits = (_6013_ret_exp2 << 52LL) | (_8013_ret_mantissa & 4503599627370495LL);
	if (_4145_neg) {
		_10313_ret_bits|=9223372036854775808LLU;
	}
	_4158_f = static_cast<jule::F64>(_12173aa20_f64_from_bits(_10313_ret_bits));
	_4166_ok = true;
	return std::make_tuple(_4158_f,_4166_ok);
}



inline std::tuple<jule::F32,jule::Bool> _1321c5450_eisel_lemire32(jule::U64 _11023_man,jule::Int _11033_exp10,jule::Bool _11045_neg) {
	jule::Bool _11066_ok = jule::Bool();
	jule::F32 _11058_f = jule::F32();
	if (_11023_man == 0LL) {
		if (_11045_neg) {
			_11058_f=static_cast<jule::F32>(_12173aa20_f32_from_bits(2147483648LLU));
		}
		_11058_f = _11058_f;
		_11066_ok = true;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	if ((_11033_exp10 < -348LL) || (347LL < _11033_exp10)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::Int _1329_clz = _121ef7c60_leading_zeros64(_11023_man);
	_11023_man<<=static_cast<jule::Uint>(_1329_clz);
	
	jule::U64 _13513_ret_exp2 = static_cast<jule::U64>((((217706LL * _11033_exp10) >> 16LL) + 64LL) + 127LL) - static_cast<jule::U64>(_1329_clz);
	jule::U64 _13814_x_hi;
	jule::U64 _13824_x_lo;
	std::tie(_13814_x_hi,_13824_x_lo) = _121ef7c60_mul64(_11023_man,_1321c5450_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_11033_exp10 - -348LL)][static_cast<jule::Int>(1LL)]);
	if (((_13814_x_hi & 274877906943LL) == 274877906943LL) && ((_13824_x_lo + _11023_man) < _11023_man)) {
		jule::U64 _14214_y_hi;
		jule::U64 _14220_y_lo;
		std::tie(_14214_y_hi,_14220_y_lo) = _121ef7c60_mul64(_11023_man,_1321c5450_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_11033_exp10 - -348LL)][static_cast<jule::Int>(0LL)]);
		jule::U64 _14318_merged_hi = _13814_x_hi;
		jule::U64 _14329_merged_lo = _13824_x_lo + _14214_y_hi;
		std::tie(_14318_merged_hi,_14329_merged_lo) = std::make_tuple(_13814_x_hi,_13824_x_lo + _14214_y_hi);
		if (_14329_merged_lo < _13824_x_lo) {
			(_14318_merged_hi)++;
		}
		if ((((_14318_merged_hi & 274877906943LL) == 274877906943LL) && ((_14329_merged_lo + 1LL) == 0LL)) && ((_14220_y_lo + _11023_man) < _11023_man)) {
			_11058_f = 0LL;
			_11066_ok = false;
			return std::make_tuple(_11058_f,_11066_ok);
		}
		std::tie(_13814_x_hi,_13824_x_lo) = std::make_tuple(_14318_merged_hi,_14329_merged_lo);
	}
	jule::U64 _1549_msb = _13814_x_hi >> 63LL;
	jule::U64 _15513_ret_mantissa = _13814_x_hi >> (_1549_msb + 38LL);
	_13513_ret_exp2-=static_cast<jule::U64>(1LL ^ _1549_msb);
	if (((_13824_x_lo == 0LL) && ((_13814_x_hi & 274877906943LL) == 0LL)) && ((_15513_ret_mantissa & 3LL) == 1LL)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	_15513_ret_mantissa+=_15513_ret_mantissa & 1LL;
	_15513_ret_mantissa>>=1LL;
	if ((_15513_ret_mantissa >> 24LL) > 0LL) {
		_15513_ret_mantissa>>=1LL;
		_13513_ret_exp2+=1LL;
	}
	if ((_13513_ret_exp2 - 1LL) >= 254LL) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::U64 _17813_ret_bits = (_13513_ret_exp2 << 23LL) | (_15513_ret_mantissa & 8388607LL);
	if (_11045_neg) {
		_17813_ret_bits|=2147483648LL;
	}
	_11058_f = static_cast<jule::F32>(_12173aa20_f32_from_bits(static_cast<jule::U32>(_17813_ret_bits)));
	_11066_ok = true;
	return std::make_tuple(_11058_f,_11066_ok);
}



inline jule::Int _1320824b0_common_prefix_len_ignore_case(jule::Str _4534_s,jule::Str _4542_prefix) {
	jule::I64 _4613_n = _4542_prefix.len();
	if (_4613_n > _4534_s.len()) {
		_4613_n=static_cast<jule::I64>(_4534_s.len());
	}
	jule::Int _5013_i = 0LL;
	_iter_begin_4624669600:;
	if (!(_5013_i < _4613_n)) { goto _iter_end_4624669600; }
	{
		jule::U8 _5217_c = _4534_s[static_cast<jule::Int>(_5013_i)];
		if (('A' <= _5217_c) && (_5217_c <= 'Z')) {
			_5217_c+=32LL;
		}
		if (_5217_c != _4542_prefix[static_cast<jule::Int>(_5013_i)]) {
			return _5013_i;
		}
	}
	_iter_next_4624669600:;
	(_5013_i)++;
	goto _iter_begin_4624669600;
	_iter_end_4624669600:;
	return _4613_n;
}



inline std::tuple<jule::F64,jule::Int,jule::Bool> _1320824b0_special(jule::Str _6816_s) {
	jule::Bool _6842_ok = jule::Bool();
	jule::Int _6834_n = jule::Int();
	jule::F64 _6826_f = jule::F64();
	if (_6816_s == jule::Str("", 0)) {
		_6826_f = 0LL;
		_6834_n = 0LL;
		_6842_ok = false;
		return std::make_tuple(_6826_f,_6834_n,_6842_ok);
	}
	jule::Int _7213_sign = 1LL;
	jule::Int _7313_nsign = 0LL;
	{
		auto _match_expr{ _6816_s[static_cast<jule::Int>(0LL)] };
		if (!(('+') == _match_expr || ('-') == _match_expr)) { goto _case_end_4624685040; }
		_case_begin_4624685040:;
		{
			if (_6816_s[static_cast<jule::Int>(0LL)] == '-') {
				_7213_sign=-1LL;
			}
			_7313_nsign=1LL;
			_6816_s=_6816_s.slice(static_cast<jule::Int>(1LL));
			goto _case_begin_4624686208;
		}
		goto _match_end_4624683424;
		_case_end_4624685040:;
		if (!(('i') == _match_expr || ('I') == _match_expr)) { goto _case_end_4624686208; }
		_case_begin_4624686208:;
		{
			jule::Int _8317_case_n = _1320824b0_common_prefix_len_ignore_case(_6816_s,jule::Str("infinity", 8));
			if ((3LL < _8317_case_n) && (_8317_case_n < 8LL)) {
				_8317_case_n=3LL;
			}
			if ((_8317_case_n == 3LL) || (_8317_case_n == 8LL)) {
				_6826_f = static_cast<jule::F64>(_12192b6b0_inf(_7213_sign));
				_6834_n = _7313_nsign + _6834_n;
				_6842_ok = true;
				return std::make_tuple(_6826_f,_6834_n,_6842_ok);
			}
		}
		goto _match_end_4624683424;
		_case_end_4624686208:;
		if (!(('n') == _match_expr || ('N') == _match_expr)) { goto _case_end_4624686320; }
		_case_begin_4624686320:;
		{
			if (_1320824b0_common_prefix_len_ignore_case(_6816_s,jule::Str("nan", 3)) == 3LL) {
				_6826_f = static_cast<jule::F64>(_12192b6b0_nan());
				_6834_n = 3LL;
				_6842_ok = true;
				return std::make_tuple(_6826_f,_6834_n,_6842_ok);
			}
		}
		goto _match_end_4624683424;
		_case_end_4624686320:;
		_match_end_4624683424:;
	}
	_6826_f = 0LL;
	_6834_n = 0LL;
	_6842_ok = false;
	return std::make_tuple(_6826_f,_6834_n,_6842_ok);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _1320824b0_read_float(jule::Str _10315_s) {
	jule::Bool _10457_ok = jule::Bool();
	jule::Int _10449_i = jule::Int();
	jule::Bool _10438_hex = jule::Bool();
	jule::Bool _10425_trunc = jule::Bool();
	jule::Bool _10350_neg = jule::Bool();
	jule::Int _10340_exp = jule::Int();
	jule::U64 _10325_mantissa = jule::U64();
	if (_10449_i >= _10315_s.len()) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	{
		if (!((_10315_s[static_cast<jule::Int>(_10449_i)] == '+'))) { goto _case_end_4624708400; }
		_case_begin_4624708400:;
		{
			(_10449_i)++;
		}
		goto _match_end_4624709328;
		_case_end_4624708400:;
		if (!((_10315_s[static_cast<jule::Int>(_10449_i)] == '-'))) { goto _case_end_4624708512; }
		_case_begin_4624708512:;
		{
			_10350_neg=true;
			(_10449_i)++;
		}
		goto _match_end_4624709328;
		_case_end_4624708512:;
		_match_end_4624709328:;
	}
	jule::U64 _11813_base = 10LLU;
	jule::Int _11913_max_mant_digits = 19LL;
	jule::U8 _12013_exp_char = 'e';
	if ((((_10449_i + 2LL) < _10315_s.len()) && (_10315_s[static_cast<jule::Int>(_10449_i)] == '0')) && (_13219c810_lower(_10315_s[static_cast<jule::Int>(_10449_i + 1LL)]) == 'x')) {
		_11813_base=16LL;
		_11913_max_mant_digits=16LL;
		_10449_i+=2LL;
		_12013_exp_char='p';
		_10438_hex=true;
	}
	jule::Bool _12813_sawdot = false;
	jule::Bool _12913_sawdigits = false;
	jule::Int _13013_nd = 0LL;
	jule::Int _13113_nd_mant = 0LL;
	jule::Int _13213_dp = 0LL;
	_iter_begin_4624727664:;
	if (!(_10449_i < _10315_s.len())) { goto _iter_end_4624727664; }
	{
		jule::U8 _13413_c = _10315_s[static_cast<jule::Int>(_10449_i)];
		{
			if (!((_13413_c == '.'))) { goto _case_end_4624732128; }
			_case_begin_4624732128:;
			{
				if (_12813_sawdot) {
					goto _julec_label_loop_end;
				}
				_12813_sawdot=true;
				_13213_dp=_13013_nd;
				goto _iter_next_4624727664;
			}
			goto _match_end_4624731584;
			_case_end_4624732128:;
			if (!((('0' <= _13413_c) && (_13413_c <= '9')))) { goto _case_end_4624732240; }
			_case_begin_4624732240:;
			{
				_12913_sawdigits=true;
				if ((_13413_c == '0') && (_13013_nd == 0LL)) {
					(_13213_dp)--;
					goto _iter_next_4624727664;
				}
				(_13013_nd)++;
				if (_13113_nd_mant < _11913_max_mant_digits) {
					_10325_mantissa*=_11813_base;
					_10325_mantissa+=static_cast<jule::U64>(_13413_c - '0');
					(_13113_nd_mant)++;
				} else if (_13413_c != '0') {
					_10425_trunc=true;
				}
				goto _iter_next_4624727664;
			}
			goto _match_end_4624731584;
			_case_end_4624732240:;
			if (!((((_11813_base == 16LL) && ('a' <= _13219c810_lower(_13413_c))) && (_13219c810_lower(_13413_c) <= 'f')))) { goto _case_end_4624732352; }
			_case_begin_4624732352:;
			{
				_12913_sawdigits=true;
				(_13013_nd)++;
				if (_13113_nd_mant < _11913_max_mant_digits) {
					_10325_mantissa*=16LL;
					_10325_mantissa+=static_cast<jule::U64>((_13219c810_lower(_13413_c) - 'a') + 10LL);
					(_13113_nd_mant)++;
				} else {
					_10425_trunc=true;
				}
				goto _iter_next_4624727664;
			}
			goto _match_end_4624731584;
			_case_end_4624732352:;
			_match_end_4624731584:;
		}
		goto _iter_end_4624727664;
	}
	_iter_next_4624727664:;
	(_10449_i)++;
	goto _iter_begin_4624727664;
	_iter_end_4624727664:;
	_julec_label_loop_end:;
	if ((!(_12913_sawdigits))) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if ((!(_12813_sawdot))) {
		_13213_dp=_13013_nd;
	}
	if (_11813_base == 16LL) {
		_13213_dp*=4LL;
		_13113_nd_mant*=4LL;
	}
	if ((_10449_i < _10315_s.len()) && (_13219c810_lower(_10315_s[static_cast<jule::Int>(_10449_i)]) == _12013_exp_char)) {
		(_10449_i)++;
		if (_10449_i >= _10315_s.len()) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _19517_esign = 1LL;
		if (_10315_s[static_cast<jule::Int>(_10449_i)] == '+') {
			(_10449_i)++;
		} else if (_10315_s[static_cast<jule::Int>(_10449_i)] == '-') {
			(_10449_i)++;
			_19517_esign=-1LL;
		}
		if (((_10449_i >= _10315_s.len()) || (_10315_s[static_cast<jule::Int>(_10449_i)] < '0')) || (_10315_s[static_cast<jule::Int>(_10449_i)] > '9')) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _20517_e = 0LL;
		_iter_begin_4624763008:;
		if (!((_10449_i < _10315_s.len()) && (('0' <= _10315_s[static_cast<jule::Int>(_10449_i)]) && (_10315_s[static_cast<jule::Int>(_10449_i)] <= '9')))) { goto _iter_end_4624763008; }
		{
			if (_20517_e < 10000LL) {
				_20517_e=((_20517_e * 10LL) + static_cast<jule::Int>(_10315_s[static_cast<jule::Int>(_10449_i)])) - '0';
			}
		}
		_iter_next_4624763008:;
		(_10449_i)++;
		goto _iter_begin_4624763008;
		_iter_end_4624763008:;
		_13213_dp+=_20517_e * _19517_esign;
	} else if (_11813_base == 16LL) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if (_10325_mantissa != 0LL) {
		_10340_exp=_13213_dp - _13113_nd_mant;
	}
	_10457_ok=true;
	return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
}



inline std::tuple<jule::F64,jule::Bool> _1320824b0_atof64_exact(jule::U64 _43317_mantissa,jule::Int _43336_exp,jule::Bool _43346_neg) {
	jule::Bool _43367_ok = jule::Bool();
	jule::F64 _43359_f = jule::F64();
	if ((_43317_mantissa >> _131769b70_F64_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_43359_f,_43367_ok);
	}
	_43359_f=static_cast<jule::F64>(_43317_mantissa);
	if (_43346_neg) {
		_43359_f=static_cast<jule::F64>((-(_43359_f)));
	}
	{
		if (!((_43336_exp == 0LL))) { goto _case_end_4624784144; }
		_case_begin_4624784144:;
		{
			_43359_f = _43359_f;
			_43367_ok = true;
			return std::make_tuple(_43359_f,_43367_ok);
		}
		goto _match_end_4624783776;
		_case_end_4624784144:;
		if (!(((_43336_exp > 0LL) && (_43336_exp <= 37LL)))) { goto _case_end_4624784256; }
		_case_begin_4624784256:;
		{
			if (_43336_exp > 22LL) {
				_43359_f*=_1320824b0_F64_POW10[static_cast<jule::Int>(_43336_exp - 22LL)];
				_43336_exp=22LL;
			}
			if ((_43359_f > 1e+15) || (_43359_f < -1000000000000000LL)) {
				return std::make_tuple(_43359_f,_43367_ok);
			}
			_43359_f = _43359_f * _1320824b0_F64_POW10[static_cast<jule::Int>(_43336_exp)];
			_43367_ok = true;
			return std::make_tuple(_43359_f,_43367_ok);
		}
		goto _match_end_4624783776;
		_case_end_4624784256:;
		if (!(((_43336_exp < 0LL) && (_43336_exp >= -22LL)))) { goto _case_end_4624784368; }
		_case_begin_4624784368:;
		{
			_43359_f = jule::div(_43359_f,_1320824b0_F64_POW10[static_cast<jule::Int>((-(_43336_exp)))]);
			_43367_ok = true;
			return std::make_tuple(_43359_f,_43367_ok);
		}
		goto _match_end_4624783776;
		_case_end_4624784368:;
		_match_end_4624783776:;
	}
	return std::make_tuple(_43359_f,_43367_ok);
}



inline std::tuple<jule::F64,jule::Bool> _1320824b0_atof64exact(jule::U64 _47216_mantissa,jule::Int _47235_exp,jule::Bool _47245_neg) {
	jule::Bool _47266_ok = jule::Bool();
	jule::F64 _47258_f = jule::F64();
	if ((_47216_mantissa >> _131769b70_F64_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_47258_f,_47266_ok);
	}
	_47258_f=static_cast<jule::F64>(_47216_mantissa);
	if (_47245_neg) {
		_47258_f=static_cast<jule::F64>((-(_47258_f)));
	}
	{
		if (!((_47235_exp == 0LL))) { goto _case_end_4624804256; }
		_case_begin_4624804256:;
		{
			_47258_f = _47258_f;
			_47266_ok = true;
			return std::make_tuple(_47258_f,_47266_ok);
		}
		goto _match_end_4624804800;
		_case_end_4624804256:;
		if (!(((_47235_exp > 0LL) && (_47235_exp <= 37LL)))) { goto _case_end_4624804368; }
		_case_begin_4624804368:;
		{
			if (_47235_exp > 22LL) {
				_47258_f*=_1320824b0_F64_POW10[static_cast<jule::Int>(_47235_exp - 22LL)];
				_47235_exp=22LL;
			}
			if ((_47258_f > 1e+15) || (_47258_f < -1000000000000000LL)) {
				return std::make_tuple(_47258_f,_47266_ok);
			}
			_47258_f = _47258_f * _1320824b0_F64_POW10[static_cast<jule::Int>(_47235_exp)];
			_47266_ok = true;
			return std::make_tuple(_47258_f,_47266_ok);
		}
		goto _match_end_4624804800;
		_case_end_4624804368:;
		if (!(((_47235_exp < 0LL) && (_47235_exp >= -22LL)))) { goto _case_end_4624804480; }
		_case_begin_4624804480:;
		{
			_47258_f = jule::div(_47258_f,_1320824b0_F64_POW10[static_cast<jule::Int>((-(_47235_exp)))]);
			_47266_ok = true;
			return std::make_tuple(_47258_f,_47266_ok);
		}
		goto _match_end_4624804800;
		_case_end_4624804480:;
		_match_end_4624804800:;
	}
	return std::make_tuple(_47258_f,_47266_ok);
}



inline std::tuple<jule::F32,jule::Bool> _1320824b0_atof32exact(jule::U64 _50616_mantissa,jule::Int _50635_exp,jule::Bool _50649_neg) {
	jule::Bool _50670_ok = jule::Bool();
	jule::F32 _50662_f = jule::F32();
	if ((_50616_mantissa >> _131769b70_F32_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_50662_f,_50670_ok);
	}
	_50662_f=static_cast<jule::F32>(_50616_mantissa);
	if (_50649_neg) {
		_50662_f=static_cast<jule::F32>((-(_50662_f)));
	}
	{
		if (!((_50635_exp == 0LL))) { goto _case_end_4624824896; }
		_case_begin_4624824896:;
		{
			_50662_f = _50662_f;
			_50670_ok = true;
			return std::make_tuple(_50662_f,_50670_ok);
		}
		goto _match_end_4624824528;
		_case_end_4624824896:;
		if (!(((_50635_exp > 0LL) && (_50635_exp <= 17LL)))) { goto _case_end_4624825008; }
		_case_begin_4624825008:;
		{
			if (_50635_exp > 10LL) {
				_50662_f*=_1320824b0_F32_POW10[static_cast<jule::Int>(_50635_exp - 10LL)];
				_50635_exp=10LL;
			}
			if ((_50662_f > 1e+07) || (_50662_f < -10000000LL)) {
				return std::make_tuple(_50662_f,_50670_ok);
			}
			_50662_f = _50662_f * _1320824b0_F32_POW10[static_cast<jule::Int>(_50635_exp)];
			_50670_ok = true;
			return std::make_tuple(_50662_f,_50670_ok);
		}
		goto _match_end_4624824528;
		_case_end_4624825008:;
		if (!(((_50635_exp < 0LL) && (_50635_exp >= -10LL)))) { goto _case_end_4624825120; }
		_case_begin_4624825120:;
		{
			_50662_f = jule::div(_50662_f,_1320824b0_F32_POW10[static_cast<jule::Int>((-(_50635_exp)))]);
			_50670_ok = true;
			return std::make_tuple(_50662_f,_50670_ok);
		}
		goto _match_end_4624824528;
		_case_end_4624825120:;
		_match_end_4624824528:;
	}
	return std::make_tuple(_50662_f,_50670_ok);
}



inline std::tuple<jule::F64,jule::Int> _1320824b0_atof_hex(jule::Str _54213_s,_131769b70_FloatInfo& _54222_flt,jule::U64 _54242_mantissa,jule::Int _54261_exp,jule::Bool _54271_neg,jule::Bool _54282_trunc) {
	jule::Int _5439_max_exp = ((1LL << _54222_flt._field_expbits) + _54222_flt._field_bias) - 2LL;
	jule::Int _5449_min_exp = _54222_flt._field_bias + 1LL;
	_54261_exp+=static_cast<jule::Int>(_54222_flt._field_mantbits);
	_iter_begin_4624846928:;
	if (!((_54242_mantissa != 0LL) && ((_54242_mantissa >> (_54222_flt._field_mantbits + 2LL)) == 0LL))) { goto _iter_end_4624846928; }
	{
		_54242_mantissa<<=1LL;
		(_54261_exp)--;
	}
	_iter_next_4624846928:;
	goto _iter_begin_4624846928;
	_iter_end_4624846928:;
	if (_54282_trunc) {
		_54242_mantissa|=1LL;
	}
	_iter_begin_4624851072:;
	if (!((_54242_mantissa >> ((1LL + _54222_flt._field_mantbits) + 2LL)) != 0LL)) { goto _iter_end_4624851072; }
	{
		_54242_mantissa=(_54242_mantissa >> 1LL) | (_54242_mantissa & 1LL);
		(_54261_exp)++;
	}
	_iter_next_4624851072:;
	goto _iter_begin_4624851072;
	_iter_end_4624851072:;
	_iter_begin_4624849552:;
	if (!((_54242_mantissa > 1LL) && (_54261_exp < (_5449_min_exp - 2LL)))) { goto _iter_end_4624849552; }
	{
		_54242_mantissa=(_54242_mantissa >> 1LL) | (_54242_mantissa & 1LL);
		(_54261_exp)++;
	}
	_iter_next_4624849552:;
	goto _iter_begin_4624849552;
	_iter_end_4624849552:;
	jule::U64 _57413_round = _54242_mantissa & 3LL;
	_54242_mantissa>>=2LL;
	_57413_round|=_54242_mantissa & 1LL;
	_54261_exp+=2LL;
	if (_57413_round == 3LL) {
		(_54242_mantissa)++;
		if (_54242_mantissa == (1LL << (1LL + _54222_flt._field_mantbits))) {
			_54242_mantissa>>=1LL;
			(_54261_exp)++;
		}
	}
	if ((_54242_mantissa >> _54222_flt._field_mantbits) == 0LL) {
		_54261_exp=_54222_flt._field_bias;
	}
	jule::Int _58913_err = 0LLU;
	if (_54261_exp > _5439_max_exp) {
		_54242_mantissa=static_cast<jule::U64>(1LL << _54222_flt._field_mantbits);
		_54261_exp=_5439_max_exp + 1LL;
		_58913_err=1LLU;
	}
	jule::U64 _59613_bits = _54242_mantissa & ((1LL << _54222_flt._field_mantbits) - 1LL);
	_59613_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_54261_exp - _54222_flt._field_bias) & ((1LL << _54222_flt._field_expbits) - 1LL)) << _54222_flt._field_mantbits);
	if (_54271_neg) {
		_59613_bits|=static_cast<jule::Int>((1LL << _54222_flt._field_mantbits) << _54222_flt._field_expbits);
	}
	if (_54222_flt == _131769b70_F32_INFO) {
		return std::make_tuple(static_cast<jule::F64>(_12173aa20_f32_from_bits(static_cast<jule::U32>(_59613_bits))),_58913_err);
	}
	return std::make_tuple(static_cast<jule::F64>(_12173aa20_f64_from_bits(_59613_bits)),_58913_err);
}



inline std::tuple<jule::F32,jule::Int,jule::Int> _1320824b0_atof32(jule::Str _60711_s) {
	jule::Int _60745_err = 0LLU;
	jule::Int _60733_n = jule::Int();
	jule::F32 _60721_f = jule::F32();
	{
		jule::F64 _60914_val;
		jule::Int _60919__n;
		jule::Bool _60923_ok;
		std::tie(_60914_val,_60919__n,_60923_ok) = _1320824b0_special(_60711_s);
		if (_60923_ok) {
			_60721_f = static_cast<jule::F32>(_60914_val);
			_60733_n = _60919__n;
			_60745_err = 0LLU;
			return std::make_tuple(_60721_f,_60733_n,_60745_err);
		}
	}
	jule::U64 _61510_mantissa;
	jule::Int _61520_exp;
	jule::Bool _61525_neg;
	jule::Bool _61530_trunc;
	jule::Bool _61537_hex;
	jule::Int _61542__n;
	jule::Bool _61550_ok;
	std::tie(_61510_mantissa,_61520_exp,_61525_neg,_61530_trunc,_61537_hex,_61542__n,_61550_ok) = _1320824b0_read_float(_60711_s);
	_60733_n=_61542__n;
	if ((!(_61550_ok))) {
		_60721_f = 0LL;
		_60733_n = _60733_n;
		_60745_err = 2LLU;
		return std::make_tuple(_60721_f,_60733_n,_60745_err);
	}
	if (_61537_hex) {
		jule::F64 _62217_ff = 0e+00;
		std::tie(_62217_ff,_60745_err) = _1320824b0_atof_hex(_60711_s.slice(0LL,static_cast<jule::Int>(_60733_n)),_131769b70_F32_INFO,_61510_mantissa,_61520_exp,_61525_neg,_61530_trunc);
		_60721_f = static_cast<jule::F32>(_62217_ff);
		_60733_n = _60733_n;
		_60745_err = _60745_err;
		return std::make_tuple(_60721_f,_60733_n,_60745_err);
	}
	if (true) {
		if ((!(_61530_trunc))) {
			std::tie(_60721_f,_61550_ok) = _1320824b0_atof32exact(_61510_mantissa,_61520_exp,_61525_neg);
			if (_61550_ok) {
				_60721_f = _60721_f;
				_60733_n = _60733_n;
				_60745_err = 0LLU;
				return std::make_tuple(_60721_f,_60733_n,_60745_err);
			}
		}
		std::tie(_60721_f,_61550_ok) = _1321c5450_eisel_lemire32(_61510_mantissa,_61520_exp,_61525_neg);
		if (_61550_ok) {
			if ((!(_61530_trunc))) {
				_60721_f = _60721_f;
				_60733_n = _60733_n;
				_60745_err = 0LLU;
				return std::make_tuple(_60721_f,_60733_n,_60745_err);
			}
			jule::F32 _64421_f_up = 0e+00;
			std::tie(_64421_f_up,_61550_ok) = _1321c5450_eisel_lemire32(_61510_mantissa + 1LL,_61520_exp,_61525_neg);
			if (_61550_ok && (_60721_f == _64421_f_up)) {
				_60721_f = _60721_f;
				_60733_n = _60733_n;
				_60745_err = 0LLU;
				return std::make_tuple(_60721_f,_60733_n,_60745_err);
			}
		}
	}
	_13207af00_Decimal _65313_d = _13207af00_Decimal();
	if ((!(_65313_d._method_set(_60711_s.slice(0LL,static_cast<jule::Int>(_60733_n)))))) {
		_60721_f = 0LL;
		_60733_n = _60733_n;
		_60745_err = 2LLU;
		return std::make_tuple(_60721_f,_60733_n,_60745_err);
	}
	jule::U64 _65710_b;
	jule::Bool _65713_ovf;
	std::tie(_65710_b,_65713_ovf) = _65313_d._method_float_bits(_131769b70_F32_INFO);
	_60721_f=static_cast<jule::F32>(_12173aa20_f32_from_bits(static_cast<jule::U32>(_65710_b)));
	if (_65713_ovf) {
		_60745_err=1LLU;
	}
	_60721_f = _60721_f;
	_60733_n = _60733_n;
	_60745_err = _60745_err;
	return std::make_tuple(_60721_f,_60733_n,_60745_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _1320824b0_atof64(jule::Str _66511_s) {
	jule::Int _66545_err = 0LLU;
	jule::Int _66537_n = jule::Int();
	jule::F64 _66525_f = jule::F64();
	{
		jule::F64 _66714_val;
		jule::Int _66719__n;
		jule::Bool _66723_ok;
		std::tie(_66714_val,_66719__n,_66723_ok) = _1320824b0_special(_66511_s);
		if (_66723_ok) {
			_66525_f = _66714_val;
			_66537_n = _66719__n;
			_66545_err = 0LLU;
			return std::make_tuple(_66525_f,_66537_n,_66545_err);
		}
	}
	jule::U64 _67310_mantissa;
	jule::Int _67320_exp;
	jule::Bool _67325_neg;
	jule::Bool _67330_trunc;
	jule::Bool _67337_hex;
	jule::Int _67342__n;
	jule::Bool _67350_ok;
	std::tie(_67310_mantissa,_67320_exp,_67325_neg,_67330_trunc,_67337_hex,_67342__n,_67350_ok) = _1320824b0_read_float(_66511_s);
	_66537_n=_67342__n;
	if ((!(_67350_ok))) {
		_66525_f = 0LL;
		_66537_n = _66537_n;
		_66545_err = 2LLU;
		return std::make_tuple(_66525_f,_66537_n,_66545_err);
	}
	if (_67337_hex) {
		std::tie(_66525_f,_66545_err) = _1320824b0_atof_hex(_66511_s.slice(0LL,static_cast<jule::Int>(_66537_n)),_131769b70_F64_INFO,_67310_mantissa,_67320_exp,_67325_neg,_67330_trunc);
		_66525_f = _66525_f;
		_66537_n = _66537_n;
		_66545_err = _66545_err;
		return std::make_tuple(_66525_f,_66537_n,_66545_err);
	}
	if (true) {
		if ((!(_67330_trunc))) {
			std::tie(_66525_f,_67350_ok) = _1320824b0_atof64exact(_67310_mantissa,_67320_exp,_67325_neg);
			if (_67350_ok) {
				_66525_f = _66525_f;
				_66537_n = _66537_n;
				_66545_err = 0LLU;
				return std::make_tuple(_66525_f,_66537_n,_66545_err);
			}
		}
		std::tie(_66525_f,_67350_ok) = _1321c5450_eisel_lemire64(_67310_mantissa,_67320_exp,_67325_neg);
		if (_67350_ok) {
			if ((!(_67330_trunc))) {
				_66525_f = _66525_f;
				_66537_n = _66537_n;
				_66545_err = 0LLU;
				return std::make_tuple(_66525_f,_66537_n,_66545_err);
			}
			jule::F64 _70121_f_up = 0e+00;
			std::tie(_70121_f_up,_67350_ok) = _1321c5450_eisel_lemire64(_67310_mantissa + 1LL,_67320_exp,_67325_neg);
			if (_67350_ok && (_66525_f == _70121_f_up)) {
				_66525_f = _66525_f;
				_66537_n = _66537_n;
				_66545_err = 0LLU;
				return std::make_tuple(_66525_f,_66537_n,_66545_err);
			}
		}
	}
	_13207af00_Decimal _71013_d = _13207af00_Decimal();
	if ((!(_71013_d._method_set(_66511_s.slice(0LL,static_cast<jule::Int>(_66537_n)))))) {
		_66525_f = 0LL;
		_66537_n = _66537_n;
		_66545_err = 2LLU;
		return std::make_tuple(_66525_f,_66537_n,_66545_err);
	}
	jule::U64 _71410_b;
	jule::Bool _71413_ovf;
	std::tie(_71410_b,_71413_ovf) = _71013_d._method_float_bits(_131769b70_F64_INFO);
	_66525_f=static_cast<jule::F64>(_12173aa20_f64_from_bits(_71410_b));
	if (_71413_ovf) {
		_66545_err=1LLU;
	}
	_66525_f = _66525_f;
	_66537_n = _66537_n;
	_66545_err = _66545_err;
	return std::make_tuple(_66525_f,_66537_n,_66545_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _1320824b0_parse_float_prefix(jule::Str _72223_s,jule::Int _72231_bit_size) {
	if (_72231_bit_size == 32LL) {
		jule::F32 _72414_f;
		jule::Int _72417_n;
		jule::Int _72420_err;
		std::tie(_72414_f,_72417_n,_72420_err) = _1320824b0_atof32(_72223_s);
		return std::make_tuple(static_cast<jule::F64>(_72414_f),_72417_n,_72420_err);
	}
	jule::F64 _72810_f;
	jule::Int _72813_n;
	jule::Int _72816_err;
	std::tie(_72810_f,_72813_n,_72816_err) = _1320824b0_atof64(_72223_s);
	return std::make_tuple(_72810_f,_72813_n,_72816_err);
}



inline std::tuple<jule::F64,jule::Int> _1320824b0_parse_float(jule::Str _75620_s,jule::Int _75628_bit_size) {
	jule::F64 _75710_f;
	jule::Int _75713_n;
	jule::Int _75716_err;
	std::tie(_75710_f,_75713_n,_75716_err) = _1320824b0_parse_float_prefix(_75620_s,_75628_bit_size);
	if ((_75713_n != _75620_s.len()) && ((_75716_err == 0LLU) || (_75716_err != 2LLU))) {
		return std::make_tuple(0LL,2LLU);
	}
	return std::make_tuple(_75710_f,_75716_err);
}



inline void _121735870_ryu_ftoa_fixed32(_131769b70_DecimalSlice& _4926_d,jule::U32 _4947_mant,jule::Int _4958_exp,jule::Int _4968_prec) {
	if (_4968_prec < 0LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with negative prec", 42));
	}
	if (_4968_prec > 9LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with prec > 9", 37));
	}
	if (_4947_mant == 0LL) {
		std::tie(_4926_d._field_nd,_4926_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _6213_e2 = _4958_exp;
	jule::Int _639_b = _121ef7c60_len32(_4947_mant);
	if (_639_b < 25LL) {
		_4947_mant<<=static_cast<jule::Uint>(25LL - _639_b);
		_6213_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_639_b) - 25LL);
	}
	jule::Int _749_q = ((-(_121735870_mul_by_log2_log10(_6213_e2 + 24LL))) + _4968_prec) - 1LL;
	jule::Bool _7913_exact = (_749_q <= 27LL) && (_749_q >= 0LL);
	jule::U32 _8114_di;
	jule::Int _8118_dexp2;
	jule::Bool _8129_d0;
	std::tie(_8114_di,_8118_dexp2,_8129_d0) = _121735870_mult64bit_pow10(_4947_mant,_6213_e2,_749_q);
	if (_8118_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult64bit_pow10", 49));
	}
	if (((_749_q < 0LL) && (_749_q >= -10LL)) && _121735870_divisible_by_pow5(static_cast<jule::U64>(_4947_mant),static_cast<jule::Int>((-(_749_q))))) {
		_7913_exact=true;
		_8129_d0=true;
	}
	jule::Uint _949_extra = static_cast<jule::Uint>((-(_8118_dexp2)));
	jule::U32 _959_extra_mask = static_cast<jule::U32>((1LL << _949_extra) - 1LL);
	jule::U32 _9713_dfrac = 0LLU;
	std::tie(_8114_di,_9713_dfrac) = std::make_tuple(_8114_di >> _949_extra,_8114_di & _959_extra_mask);
	jule::Bool _9913_round_up = false;
	if (_7913_exact) {
		_9913_round_up=((_9713_dfrac > (1LL << (_949_extra - 1LL))) || ((_9713_dfrac == (1LL << (_949_extra - 1LL))) && (!(_8129_d0)))) || (((_9713_dfrac == (1LL << (_949_extra - 1LL))) && _8129_d0) && ((_8114_di & 1LL) == 1LL));
	} else {
		_9913_round_up=(_9713_dfrac >> (_949_extra - 1LL)) == 1LL;
	}
	if (_9713_dfrac != 0LL) {
		_8129_d0=false;
	}
	_121735870_format_decimal(_4926_d,static_cast<jule::U64>(_8114_di),(!(_8129_d0)),_9913_round_up,_4968_prec);
	_4926_d._field_dp-=_749_q;
}



inline void _121735870_ryu_ftoa_fixed64(_131769b70_DecimalSlice& _12326_d,jule::U64 _12347_mant,jule::Int _12358_exp,jule::Int _12368_prec) {
	if (_12368_prec > 18LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed64 called with prec > 18", 38));
	}
	if (_12347_mant == 0LL) {
		std::tie(_12326_d._field_nd,_12326_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _13313_e2 = _12358_exp;
	jule::Int _1349_b = _121ef7c60_len64(_12347_mant);
	if (_1349_b < 55LL) {
		_12347_mant=_12347_mant << static_cast<jule::Uint>(55LL - _1349_b);
		_13313_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_1349_b) - 55LL);
	}
	jule::Int _1489_q = ((-(_121735870_mul_by_log2_log10(_13313_e2 + 54LL))) + _12368_prec) - 1LL;
	jule::Bool _15313_exact = (_1489_q <= 55LL) && (_1489_q >= 0LL);
	jule::U64 _15514_di;
	jule::Int _15518_dexp2;
	jule::Bool _15529_d0;
	std::tie(_15514_di,_15518_dexp2,_15529_d0) = _121735870_mult128bit_pow10(_12347_mant,_13313_e2,_1489_q);
	if (_15518_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50));
	}
	if (((_1489_q < 0LL) && (_1489_q >= -22LL)) && _121735870_divisible_by_pow5(_12347_mant,static_cast<jule::Int>((-(_1489_q))))) {
		_15313_exact=true;
		_15529_d0=true;
	}
	jule::Uint _1689_extra = static_cast<jule::Uint>((-(_15518_dexp2)));
	jule::U64 _1699_extra_mask = static_cast<jule::U64>((1LL << _1689_extra) - 1LL);
	jule::U64 _17113_dfrac = 0LLU;
	std::tie(_15514_di,_17113_dfrac) = std::make_tuple(_15514_di >> _1689_extra,_15514_di & _1699_extra_mask);
	jule::Bool _17313_round_up = false;
	if (_15313_exact) {
		_17313_round_up=((_17113_dfrac > (1LL << (_1689_extra - 1LL))) || ((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && (!(_15529_d0)))) || (((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && _15529_d0) && ((_15514_di & 1LL) == 1LL));
	} else {
		_17313_round_up=(_17113_dfrac >> (_1689_extra - 1LL)) == 1LL;
	}
	if (_17113_dfrac != 0LL) {
		_15529_d0=false;
	}
	_121735870_format_decimal(_12326_d,_15514_di,(!(_15529_d0)),_17313_round_up,_12368_prec);
	_12326_d._field_dp-=_1489_q;
}



inline void _121735870_format_decimal(_131769b70_DecimalSlice& _20424_d,jule::U64 _20445_m,jule::Bool _20457_trunc,jule::Bool _20474_round_up,jule::Int _20490_prec) {
	jule::U64 _2059_max = _121735870_U64_POW10[static_cast<jule::Int>(_20490_prec)];
	jule::Int _20613_trimmed = 0LL;
	_iter_begin_4625081440:;
	if (!(_20445_m >= _2059_max)) { goto _iter_end_4625081440; }
	{
		jule::U64 _20814_a = jule::div(_20445_m,10LL);
		jule::U64 _20817_b = _20445_m % 10LL;
		std::tie(_20814_a,_20817_b) = std::make_tuple(jule::div(_20445_m,10LL),_20445_m % 10LL);
		_20445_m=_20814_a;
		(_20613_trimmed)++;
		if (_20817_b > 5LL) {
			_20474_round_up=true;
		} else if (_20817_b < 5LL) {
			_20474_round_up=false;
		} else {
			_20474_round_up=_20457_trunc || ((_20445_m & 1LL) == 1LL);
		}
		if (_20817_b != 0LL) {
			_20457_trunc=true;
		}
	}
	_iter_next_4625081440:;
	goto _iter_begin_4625081440;
	_iter_end_4625081440:;
	if (_20474_round_up) {
		(_20445_m)++;
	}
	if (_20445_m >= _2059_max) {
		_20445_m/=10LL;
		(_20613_trimmed)++;
	}
	jule::Uint _23313_n = static_cast<jule::Uint>(_20490_prec);
	_20424_d._field_nd=static_cast<jule::Int>(_20490_prec);
	jule::U64 _23513_v = _20445_m;
	_iter_begin_4625095216:;
	if (!(_23513_v >= 100LL)) { goto _iter_end_4625095216; }
	{
		jule::U64 _23717_v1 = 0LLU;
		jule::U64 _23817_v2 = 0LLU;
		if ((_23513_v >> 32LL) == 0LL) {
			std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(jule::div(static_cast<jule::U32>(_23513_v),100LL)),static_cast<jule::U64>(static_cast<jule::U32>(_23513_v) % 100LL));
		} else {
			std::tie(_23717_v1,_23817_v2) = std::make_tuple(jule::div(_23513_v,100LL),_23513_v % 100LL);
		}
		_23313_n-=2LL;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 1LL)]);
		_20424_d._field_d[static_cast<jule::Int>(_23313_n + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 0LL)]);
		_23513_v=_23717_v1;
	}
	_iter_next_4625095216:;
	goto _iter_begin_4625095216;
	_iter_end_4625095216:;
	if (_23513_v > 0LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23513_v) + 1LL)]);
	}
	if (_23513_v >= 10LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(2LL * _23513_v)]);
	}
	_iter_begin_4625121392:;
	if (!(_20424_d._field_d[static_cast<jule::Int>(_20424_d._field_nd - 1LL)] == '0')) { goto _iter_end_4625121392; }
	{
		(_20424_d._field_nd)--;
		(_20613_trimmed)++;
	}
	_iter_next_4625121392:;
	goto _iter_begin_4625121392;
	_iter_end_4625121392:;
	_20424_d._field_dp=_20424_d._field_nd + _20613_trimmed;
}



inline void _121735870_ryu_ftoa_shortest(_131769b70_DecimalSlice& _26527_d,jule::U64 _26548_mant,jule::Int _26559_exp,_131769b70_FloatInfo& _26570_flt) {
	if (_26548_mant == 0LL) {
		std::tie(_26527_d._field_nd,_26527_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	if ((_26559_exp <= 0LL) && (_121ef7c60_trailing_zeros64(_26548_mant) >= (-(_26559_exp)))) {
		_26548_mant>>=static_cast<jule::Uint>((-(_26559_exp)));
		_121735870_ryu_digits(_26527_d,_26548_mant,_26548_mant,_26548_mant,true,false);
		return;
	}
	jule::U64 _27710_ml;
	jule::U64 _27714_mc;
	jule::U64 _27718_mu;
	jule::Int _27726_e2;
	std::tie(_27710_ml,_27714_mc,_27718_mu,_27726_e2) = _121735870_compute_bounds(_26548_mant,_26559_exp,_26570_flt);
	if (_27726_e2 == 0LL) {
		_121735870_ryu_digits(_26527_d,_27710_ml,_27714_mc,_27718_mu,true,false);
		return;
	}
	jule::Int _2839_q = _121735870_mul_by_log2_log10(static_cast<jule::Int>((-(_27726_e2)))) + 1LL;
	jule::U64 _28713_dl = 0LLU;
	jule::U64 _28813_dc = 0LLU;
	jule::U64 _28913_du = 0LLU;
	jule::Bool _29013_dl0 = false;
	jule::Bool _29113_dc0 = false;
	jule::Bool _29213_du0 = false;
	if (_26570_flt == _131769b70_F32_INFO) {
		jule::U32 _29417_dl32 = 0LLU;
		jule::U32 _29517_dc32 = 0LLU;
		jule::U32 _29617_du32 = 0LLU;
		std::tie(_29417_dl32,std::ignore,_29013_dl0) = _121735870_mult64bit_pow10(static_cast<jule::U32>(_27710_ml),_27726_e2,_2839_q);
		std::tie(_29517_dc32,std::ignore,_29113_dc0) = _121735870_mult64bit_pow10(static_cast<jule::U32>(_27714_mc),_27726_e2,_2839_q);
		std::tie(_29617_du32,_27726_e2,_29213_du0) = _121735870_mult64bit_pow10(static_cast<jule::U32>(_27718_mu),_27726_e2,_2839_q);
		std::tie(_28713_dl,_28813_dc,_28913_du) = std::make_tuple(static_cast<jule::U64>(_29417_dl32),static_cast<jule::U64>(_29517_dc32),static_cast<jule::U64>(_29617_du32));
	} else {
		std::tie(_28713_dl,std::ignore,_29013_dl0) = _121735870_mult128bit_pow10(_27710_ml,_27726_e2,_2839_q);
		std::tie(_28813_dc,std::ignore,_29113_dc0) = _121735870_mult128bit_pow10(_27714_mc,_27726_e2,_2839_q);
		std::tie(_28913_du,_27726_e2,_29213_du0) = _121735870_mult128bit_pow10(_27718_mu,_27726_e2,_2839_q);
	}
	if (_27726_e2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50));
	}
	if (_2839_q > 55LL) {
		std::tie(_29013_dl0,_29113_dc0,_29213_du0) = std::make_tuple(false,false,false);
	}
	if ((_2839_q < 0LL) && (_2839_q >= -24LL)) {
		if (_121735870_divisible_by_pow5(_27710_ml,static_cast<jule::Int>((-(_2839_q))))) {
			_29013_dl0=true;
		}
		if (_121735870_divisible_by_pow5(_27714_mc,static_cast<jule::Int>((-(_2839_q))))) {
			_29113_dc0=true;
		}
		if (_121735870_divisible_by_pow5(_27718_mu,static_cast<jule::Int>((-(_2839_q))))) {
			_29213_du0=true;
		}
	}
	jule::Uint _3299_extra = static_cast<jule::Uint>((-(_27726_e2)));
	jule::U64 _3309_extra_mask = static_cast<jule::U64>((1LL << _3299_extra) - 1LL);
	jule::U64 _33213_fracl = 0LLU;
	std::tie(_28713_dl,_33213_fracl) = std::make_tuple(_28713_dl >> _3299_extra,_28713_dl & _3309_extra_mask);
	jule::U64 _33413_fracc = 0LLU;
	std::tie(_28813_dc,_33413_fracc) = std::make_tuple(_28813_dc >> _3299_extra,_28813_dc & _3309_extra_mask);
	jule::U64 _33613_fracu = 0LLU;
	std::tie(_28913_du,_33613_fracu) = std::make_tuple(_28913_du >> _3299_extra,_28913_du & _3309_extra_mask);
	jule::Bool _34213_uok = (!(_29213_du0)) || (_33613_fracu > 0LL);
	if (_29213_du0 && (_33613_fracu == 0LL)) {
		_34213_uok=(_26548_mant & 1LL) == 0LL;
	}
	if ((!(_34213_uok))) {
		(_28913_du)--;
	}
	jule::Bool _35113_cup = false;
	if (_29113_dc0) {
		_35113_cup=(_33413_fracc > (1LL << (_3299_extra - 1LL))) || ((_33413_fracc == (1LL << (_3299_extra - 1LL))) && ((_28813_dc & 1LL) == 1LL));
	} else {
		_35113_cup=(_33413_fracc >> (_3299_extra - 1LL)) == 1LL;
	}
	jule::Bool _3679_lok = (_29013_dl0 && (_33213_fracl == 0LL)) && ((_26548_mant & 1LL) == 0LL);
	if ((!(_3679_lok))) {
		(_28713_dl)++;
	}
	jule::Bool _3729_c0 = _29113_dc0 && (_33413_fracc == 0LL);
	_121735870_ryu_digits(_26527_d,_28713_dl,_28813_dc,_28913_du,_3729_c0,_35113_cup);
	_26527_d._field_dp-=_2839_q;
}



inline jule::Int _121735870_mul_by_log2_log10(jule::Int _38322_x) {
	return (_38322_x * 78913LL) >> 18LL;
}



inline jule::Int _121735870_mul_by_log10_log2(jule::Int _39322_x) {
	return (_39322_x * 108853LL) >> 15LL;
}



inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _121735870_compute_bounds(jule::U64 _40119_mant,jule::Int _40130_exp,_131769b70_FloatInfo& _40218_flt) {
	jule::Int _40274_e2 = jule::Int();
	jule::U64 _40262_upper = jule::U64();
	jule::U64 _40248_central = jule::U64();
	jule::U64 _40236_lower = jule::U64();
	if ((_40119_mant != (1LL << _40218_flt._field_mantbits)) || (_40130_exp == ((_40218_flt._field_bias + 1LL) - static_cast<jule::Int>(_40218_flt._field_mantbits)))) {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((2LL * _40119_mant) - 1LL),static_cast<jule::U64>(2LL * _40119_mant),static_cast<jule::U64>((2LL * _40119_mant) + 1LL));
		_40274_e2=_40130_exp - 1LL;
	} else {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((4LL * _40119_mant) - 1LL),static_cast<jule::U64>(4LL * _40119_mant),static_cast<jule::U64>((4LL * _40119_mant) + 2LL));
		_40274_e2=_40130_exp - 2LL;
	}
	return std::make_tuple(_40236_lower,_40248_central,_40262_upper,_40274_e2);
}



inline void _121735870_ryu_digits(_131769b70_DecimalSlice& _41520_d,jule::U64 _41537_lower,jule::U64 _41549_central,jule::U64 _41563_upper,jule::Bool _41579_c0,jule::Bool _41593_cup) {
	jule::U32 _41614_lhi;
	jule::U32 _41619_llo;
	std::tie(_41614_lhi,_41619_llo) = _121735870_divmod1e9(_41537_lower);
	jule::U32 _41710_chi;
	jule::U32 _41715_clo;
	std::tie(_41710_chi,_41715_clo) = _121735870_divmod1e9(_41549_central);
	jule::U32 _41810_uhi;
	jule::U32 _41815_ulo;
	std::tie(_41810_uhi,_41815_ulo) = _121735870_divmod1e9(_41563_upper);
	if (_41810_uhi == 0LL) {
		_121735870_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,8LL);
	} else if (_41614_lhi < _41810_uhi) {
		if (_41619_llo != 0LL) {
			(_41614_lhi)++;
		}
		_41579_c0=_41579_c0 && (_41715_clo == 0LL);
		_41593_cup=(_41715_clo > 5e+08) || ((_41715_clo == 5e+08) && _41593_cup);
		_121735870_ryu_digits32(_41520_d,_41614_lhi,_41710_chi,_41810_uhi,_41579_c0,_41593_cup,8LL);
		_41520_d._field_dp+=9LL;
	} else {
		_41520_d._field_nd=0LL;
		jule::Uint _43417_n = static_cast<jule::Uint>(9LLU);
		jule::U32 _43517_v = _41710_chi;
		_iter_begin_4625245328:;
		if (!(_43517_v > 0LL)) { goto _iter_end_4625245328; }
		{
			jule::U32 _43718_v1 = jule::div(_43517_v,10LL);
			jule::U32 _43722_v2 = _43517_v % 10LL;
			std::tie(_43718_v1,_43722_v2) = std::make_tuple(jule::div(_43517_v,10LL),_43517_v % 10LL);
			_43517_v=_43718_v1;
			(_43417_n)--;
			_41520_d._field_d[static_cast<jule::Int>(_43417_n)]=static_cast<jule::U8>(_43722_v2 + '0');
		}
		_iter_next_4625245328:;
		goto _iter_begin_4625245328;
		_iter_end_4625245328:;
		_41520_d._field_d=_41520_d._field_d.slice(static_cast<jule::Int>(_43417_n));
		_41520_d._field_nd=static_cast<jule::Int>(9LL - _43417_n);
		_121735870_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,_41520_d._field_nd + 8LL);
	}
	_iter_begin_4625253376:;
	if (!((_41520_d._field_nd > 0LL) && (_41520_d._field_d[static_cast<jule::Int>(_41520_d._field_nd - 1LL)] == '0'))) { goto _iter_end_4625253376; }
	{
		(_41520_d._field_nd)--;
	}
	_iter_next_4625253376:;
	goto _iter_begin_4625253376;
	_iter_end_4625253376:;
	_iter_begin_4625256736:;
	if (!((_41520_d._field_nd > 0LL) && (_41520_d._field_d[static_cast<jule::Int>(0LL)] == '0'))) { goto _iter_end_4625256736; }
	{
		(_41520_d._field_nd)--;
		(_41520_d._field_dp)--;
		_41520_d._field_d=_41520_d._field_d.slice(static_cast<jule::Int>(1LL));
	}
	_iter_next_4625256736:;
	goto _iter_begin_4625256736;
	_iter_end_4625256736:;
}



inline void _121735870_ryu_digits32(_131769b70_DecimalSlice& _46022_d,jule::U32 _46043_lower,jule::U32 _46059_central,jule::U32 _46121_upper,jule::Bool _46137_c0,jule::Bool _46151_cup,jule::Int _46166_endindex) {
	if (_46121_upper == 0LL) {
		_46022_d._field_dp=_46166_endindex + 1LL;
		return;
	}
	jule::Int _46613_trimmed = 0LL;
	jule::Int _46913_c_next_digit = 0LL;
	_iter_begin_4625287440:;
	if (!(_46121_upper > 0LL)) { goto _iter_end_4625287440; }
	{
		jule::U32 _47613_l = jule::div(_46043_lower + 9LL,10LL);
		jule::U32 _47718_c = jule::div(_46059_central,10LL);
		jule::U32 _47725_cdigit = _46059_central % 10LL;
		std::tie(_47718_c,_47725_cdigit) = std::make_tuple(jule::div(_46059_central,10LL),_46059_central % 10LL);
		jule::U32 _47813_u = jule::div(_46121_upper,10LL);
		if (_47613_l > _47813_u) {
			goto _iter_end_4625287440;
		}
		if ((_47613_l == (_47718_c + 1LL)) && (_47718_c < _47813_u)) {
			(_47718_c)++;
			_47725_cdigit=0LL;
			_46151_cup=false;
		}
		(_46613_trimmed)++;
		_46137_c0=_46137_c0 && (_46913_c_next_digit == 0LL);
		_46913_c_next_digit=static_cast<jule::Int>(_47725_cdigit);
		std::tie(_46043_lower,_46059_central,_46121_upper) = std::make_tuple(_47613_l,_47718_c,_47813_u);
	}
	_iter_next_4625287440:;
	goto _iter_begin_4625287440;
	_iter_end_4625287440:;
	if (_46613_trimmed > 0LL) {
		_46151_cup=((_46913_c_next_digit > 5LL) || ((_46913_c_next_digit == 5LL) && (!(_46137_c0)))) || (((_46913_c_next_digit == 5LL) && _46137_c0) && ((_46059_central & 1LL) == 1LL));
	}
	if ((_46059_central < _46121_upper) && _46151_cup) {
		(_46059_central)++;
	}
	_46166_endindex-=_46613_trimmed;
	jule::U32 _51713_v = _46059_central;
	jule::Int _51813_n = _46166_endindex;
	_iter_begin_4625288928:;
	if (!(_51813_n > _46022_d._field_nd)) { goto _iter_end_4625288928; }
	{
		jule::U32 _52014_v1 = jule::div(_51713_v,100LL);
		jule::U32 _52018_v2 = _51713_v % 100LL;
		std::tie(_52014_v1,_52018_v2) = std::make_tuple(jule::div(_51713_v,100LL),_51713_v % 100LL);
		_46022_d._field_d[static_cast<jule::Int>(_51813_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 1LL)]);
		_46022_d._field_d[static_cast<jule::Int>(_51813_n - 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 0LL)]);
		_51813_n-=2LL;
		_51713_v=_52014_v1;
	}
	_iter_next_4625288928:;
	goto _iter_begin_4625288928;
	_iter_end_4625288928:;
	if (_51813_n == _46022_d._field_nd) {
		_46022_d._field_d[static_cast<jule::Int>(_51813_n)]=static_cast<jule::U8>(_51713_v + '0');
	}
	_46022_d._field_nd=_46166_endindex + 1LL;
	_46022_d._field_dp=_46022_d._field_nd + _46613_trimmed;
}



inline std::tuple<jule::U32,jule::Int,jule::Bool> _121735870_mult64bit_pow10(jule::U32 _54220_m,jule::Int _54232_e2,jule::Int _54241_q) {
	jule::Bool _54273_exact = jule::Bool();
	jule::Int _54262_resE = jule::Int();
	jule::U32 _54251_resM = jule::U32();
	if (_54241_q == 0LL) {
		_54251_resM = _54220_m << 6LL;
		_54262_resE = _54232_e2 - 6LL;
		_54273_exact = true;
		return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
	}
	if ((_54241_q < -348LL) || (347LL < _54241_q)) {
		jule::panic(jule::Str("mult64bit_pow10: power of 10 is out of range", 44));
	}
	jule::U64 _55113_pow = _1321c5450_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_54241_q - -348LL)][static_cast<jule::Int>(1LL)];
	if (_54241_q < 0LL) {
		_55113_pow+=1LL;
	}
	jule::U64 _55610_hi;
	jule::U64 _55614_lo;
	std::tie(_55610_hi,_55614_lo) = _121ef7c60_mul64(static_cast<jule::U64>(_54220_m),_55113_pow);
	_54232_e2+=static_cast<jule::Int>((_121735870_mul_by_log10_log2(_54241_q) - 63LL) + 57LL);
	_54251_resM = static_cast<jule::U32>((_55610_hi << 7LL) | (_55614_lo >> 57LL));
	_54262_resE = _54232_e2;
	_54273_exact = (_55614_lo << 7LL) == 0LL;
	return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool> _121735870_mult128bit_pow10(jule::U64 _57021_m,jule::Int _57033_e2,jule::Int _57042_q) {
	jule::Bool _57074_exact = jule::Bool();
	jule::Int _57063_resE = jule::Int();
	jule::U64 _57052_resM = jule::U64();
	if (_57042_q == 0LL) {
		_57052_resM = _57021_m << 8LL;
		_57063_resE = _57033_e2 - 8LL;
		_57074_exact = true;
		return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
	}
	if ((_57042_q < -348LL) || (347LL < _57042_q)) {
		jule::panic(jule::Str("mult128bit_pow10: power of 10 is out of range", 45));
	}
	jule::Array<jule::U64,2> _57913_pow = _1321c5450_DETAILED_POWS_OF_TEN[static_cast<jule::Int>(_57042_q - -348LL)];
	if (_57042_q < 0LL) {
		_57913_pow[static_cast<jule::Int>(0LL)]+=1LL;
	}
	_57033_e2+=static_cast<jule::Int>((_121735870_mul_by_log10_log2(_57042_q) - 127LL) + 119LL);
	jule::U64 _58710_l1;
	jule::U64 _58714_l0;
	std::tie(_58710_l1,_58714_l0) = _121ef7c60_mul64(_57021_m,_57913_pow[static_cast<jule::Int>(0LL)]);
	jule::U64 _58814_h1;
	jule::U64 _58818_h0;
	std::tie(_58814_h1,_58818_h0) = _121ef7c60_mul64(_57021_m,_57913_pow[static_cast<jule::Int>(1LL)]);
	jule::U64 _58910_mid;
	jule::U64 _58915_carry;
	std::tie(_58910_mid,_58915_carry) = _121ef7c60_add64(_58710_l1,_58818_h0,0LLU);
	_58814_h1+=_58915_carry;
	_57052_resM = (_58814_h1 << 9LL) | (_58910_mid >> 55LL);
	_57063_resE = _57033_e2;
	_57074_exact = ((_58910_mid << 9LL) == 0LL) && (_58714_l0 == 0LL);
	return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
}



inline jule::Bool _121735870_divisible_by_pow5(jule::U64 _59426_m,jule::Int _59434_k) {
	if (_59426_m == 0LL) {
		return true;
	}
	jule::Int _59813_i = 0LL;
	_iter_begin_4625375152:;
	if (!(_59813_i < _59434_k)) { goto _iter_end_4625375152; }
	{
		if ((_59426_m % 5LL) != 0LL) {
			return false;
		}
		_59426_m/=5LL;
	}
	_iter_next_4625375152:;
	(_59813_i)++;
	goto _iter_begin_4625375152;
	_iter_end_4625375152:;
	return true;
}



inline std::tuple<jule::U32,jule::U32> _121735870_divmod1e9(jule::U64 _61014_x) {
	if (true) {
		return std::make_tuple(static_cast<jule::U32>(jule::div(_61014_x,1e+09)),static_cast<jule::U32>(_61014_x % 1000000000LL));
	}
	jule::U64 _61510_hi;
	std::tie(_61510_hi,std::ignore) = _121ef7c60_mul64(_61014_x >> 1LL,9903520314283042200LLU);
	jule::U64 _6169_q = _61510_hi >> 28LL;
	return std::make_tuple(static_cast<jule::U32>(_6169_q),static_cast<jule::U32>(_61014_x - (_6169_q * 1e+09)));
}



inline jule::Int _13207af00_digit_zero(jule::Slice<jule::U8> _26519_dst) {
	{
		auto __julec_range_expr = _26519_dst;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _13207af00_i = 0;
			_iter_begin_4625387808:;
			{
				_26519_dst[static_cast<jule::Int>(_13207af00_i)]='0';
			}
			_iter_next_4625387808:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_13207af00_i; goto _iter_begin_4625387808; }
			_iter_end_4625387808:;
		}
	}
	return static_cast<jule::I64>(_26519_dst.len());
}



inline void _13207af00_trim(_13207af00_Decimal& _27514_a) {
	_iter_begin_4625389312:;
	if (!((_27514_a._field_nd > 0LL) && (_27514_a._field_d[static_cast<jule::Int>(_27514_a._field_nd - 1LL)] == '0'))) { goto _iter_end_4625389312; }
	{
		(_27514_a._field_nd)--;
	}
	_iter_next_4625389312:;
	goto _iter_begin_4625389312;
	_iter_end_4625389312:;
	if (_27514_a._field_nd == 0LL) {
		_27514_a._field_dp=0LL;
	}
}



inline void _13207af00_right_shift(_13207af00_Decimal& _28521_a,jule::Uint _28533_k) {
	jule::Int _28613_r = 0LL;
	jule::Int _28713_w = 0LL;
	jule::Uint _29013_n = 0LLU;
	_iter_begin_4625397264:;
	if (!((_29013_n >> _28533_k) == 0LL)) { goto _iter_end_4625397264; }
	{
		if (_28613_r >= _28521_a._field_nd) {
			if (_29013_n == 0LL) {
				_28521_a._field_nd=0LL;
				return;
			}
			_iter_begin_4625405856:;
			if (!((_29013_n >> _28533_k) == 0LL)) { goto _iter_end_4625405856; }
			{
				_29013_n=_29013_n * 10LL;
				(_28613_r)++;
			}
			_iter_next_4625405856:;
			goto _iter_begin_4625405856;
			_iter_end_4625405856:;
			goto _iter_end_4625397264;
		}
		jule::Uint _30413_c = static_cast<jule::Uint>(_28521_a._field_d[static_cast<jule::Int>(_28613_r)]);
		_29013_n=((_29013_n * 10LL) + _30413_c) - '0';
	}
	_iter_next_4625397264:;
	(_28613_r)++;
	goto _iter_begin_4625397264;
	_iter_end_4625397264:;
	_28521_a._field_dp-=_28613_r - 1LL;
	jule::Uint _3099_mask = static_cast<jule::Uint>(static_cast<jule::Uint>(1LL << _28533_k) - 1LL);
	_iter_begin_4625411744:;
	if (!(_28613_r < _28521_a._field_nd)) { goto _iter_end_4625411744; }
	{
		jule::Uint _31313_c = static_cast<jule::Uint>(_28521_a._field_d[static_cast<jule::Int>(_28613_r)]);
		jule::Uint _31413_dig = _29013_n >> _28533_k;
		_29013_n&=_3099_mask;
		_28521_a._field_d[static_cast<jule::Int>(_28713_w)]=static_cast<jule::U8>(_31413_dig + '0');
		(_28713_w)++;
		_29013_n=((_29013_n * 10LL) + _31313_c) - '0';
	}
	_iter_next_4625411744:;
	(_28613_r)++;
	goto _iter_begin_4625411744;
	_iter_end_4625411744:;
	_iter_begin_4625420288:;
	if (!(_29013_n > 0LL)) { goto _iter_end_4625420288; }
	{
		jule::Uint _32313_dig = _29013_n >> _28533_k;
		_29013_n&=_3099_mask;
		if (_28713_w < 800LL) {
			_28521_a._field_d[static_cast<jule::Int>(_28713_w)]=static_cast<jule::U8>(_32313_dig + '0');
			(_28713_w)++;
		} else if (_32313_dig > 0LL) {
			_28521_a._field_trunc=true;
		}
		_29013_n=_29013_n * 10LL;
	}
	_iter_next_4625420288:;
	goto _iter_begin_4625420288;
	_iter_end_4625420288:;
	_28521_a._field_nd=_28713_w;
	_13207af00_trim(_28521_a);
}



inline jule::Bool _13207af00_prefix_is_less_than(jule::Slice<jule::U8> _33924_b,jule::Str _33935_s) {
	jule::Int _34013_i = 0LL;
	_iter_begin_4625431856:;
	if (!(_34013_i < _33935_s.len())) { goto _iter_end_4625431856; }
	{
		if (_34013_i >= _33924_b.len()) {
			return true;
		}
		if (_33924_b[static_cast<jule::Int>(_34013_i)] != _33935_s[static_cast<jule::Int>(_34013_i)]) {
			return _33924_b[static_cast<jule::Int>(_34013_i)] < _33935_s[static_cast<jule::Int>(_34013_i)];
		}
	}
	_iter_next_4625431856:;
	(_34013_i)++;
	goto _iter_begin_4625431856;
	_iter_end_4625431856:;
	return false;
}



inline void _13207af00_left_shift(_13207af00_Decimal& _35320_a,jule::Uint _35332_k) {
	jule::Int _35413_delta = _13207af00_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_delta;
	if (_13207af00_prefix_is_less_than(_35320_a._field_d.slice(static_cast<jule::Int>(0LL),static_cast<jule::Int>(_35320_a._field_nd)),_13207af00_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_cutoff)) {
		(_35413_delta)--;
	}
	jule::Int _35913_r = _35320_a._field_nd;
	jule::Int _36013_w = _35320_a._field_nd + _35413_delta;
	jule::Uint _36313_n = 0LLU;
	(_35913_r)--;
	_iter_begin_4625450512:;
	if (!(_35913_r >= 0LL)) { goto _iter_end_4625450512; }
	{
		_36313_n+=static_cast<jule::Uint>((static_cast<jule::Uint>(_35320_a._field_d[static_cast<jule::Int>(_35913_r)]) - '0') << _35332_k);
		jule::Uint _36713_quo = jule::div(_36313_n,10LL);
		jule::Uint _36813_rem = _36313_n - (10LL * _36713_quo);
		(_36013_w)--;
		if (_36013_w < 800LL) {
			_35320_a._field_d[static_cast<jule::Int>(_36013_w)]=static_cast<jule::U8>(_36813_rem + '0');
		} else if (_36813_rem != 0LL) {
			_35320_a._field_trunc=true;
		}
		_36313_n=_36713_quo;
	}
	_iter_next_4625450512:;
	(_35913_r)--;
	goto _iter_begin_4625450512;
	_iter_end_4625450512:;
	_iter_begin_4625457280:;
	if (!(_36313_n > 0LL)) { goto _iter_end_4625457280; }
	{
		jule::Uint _38013_quo = jule::div(_36313_n,10LL);
		jule::Uint _38113_rem = _36313_n - (10LL * _38013_quo);
		(_36013_w)--;
		if (_36013_w < 800LL) {
			_35320_a._field_d[static_cast<jule::Int>(_36013_w)]=static_cast<jule::U8>(_38113_rem + '0');
		} else if (_38113_rem != 0LL) {
			_35320_a._field_trunc=true;
		}
		_36313_n=_38013_quo;
	}
	_iter_next_4625457280:;
	goto _iter_begin_4625457280;
	_iter_end_4625457280:;
	_35320_a._field_nd+=_35413_delta;
	if (_35320_a._field_nd >= 800LL) {
		_35320_a._field_nd=800LL;
	}
	_35320_a._field_dp+=_35413_delta;
	_13207af00_trim(_35320_a);
}



inline jule::Bool _13207af00_should_round_up(_13207af00_Decimal& _40021_a,jule::Int _40033_nd) {
	if ((_40033_nd < 0LL) || (_40033_nd >= _40021_a._field_nd)) {
		return false;
	}
	if ((_40021_a._field_d[static_cast<jule::Int>(_40033_nd)] == '5') && ((_40033_nd + 1LL) == _40021_a._field_nd)) {
		if (_40021_a._field_trunc) {
			return true;
		}
		return (_40033_nd > 0LL) && (((_40021_a._field_d[static_cast<jule::Int>(_40033_nd - 1LL)] - '0') % 2LL) != 0LL);
	}
	return _40021_a._field_d[static_cast<jule::Int>(_40033_nd)] >= '5';
}



inline jule::Str _121837910_fmt_uint(jule::U64 _6217_i,jule::Int _6225_base) {
	if ((true && (_6217_i < 100LL)) && (_6225_base == 10LL)) {
		return _121837910_small(static_cast<jule::Int>(_6217_i));
	}
	jule::Str _6613_s;
	std::tie(std::ignore,_6613_s) = _121837910_fmt_bits(nullptr,_6217_i,_6225_base,false,false);
	return _6613_s;
}



inline jule::Str _121837910_fmt_int(jule::I64 _7316_i,jule::Int _7324_base) {
	if (((true && (0LL <= _7316_i)) && (_7316_i < 100LL)) && (_7324_base == 10LL)) {
		return _121837910_small(static_cast<jule::Int>(_7316_i));
	}
	jule::Str _7713_s;
	std::tie(std::ignore,_7713_s) = _121837910_fmt_bits(nullptr,static_cast<jule::U64>(_7316_i),_7324_base,_7316_i < 0LL,false);
	return _7713_s;
}



inline jule::Str _121837910_itoa(jule::Int _8213_i) {
	return _121837910_fmt_int(static_cast<jule::I64>(_8213_i),10LL);
}



inline jule::Str _121837910_small(jule::Int _8510_i) {
	if (_8510_i < 10LL) {
		return jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).slice(static_cast<jule::Int>(_8510_i),static_cast<jule::Int>(_8510_i + 1LL));
	}
	return jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200).slice(static_cast<jule::Int>(_8510_i * 2LL),static_cast<jule::Int>((_8510_i * 2LL) + 2LL));
}



inline jule::Bool _121837910_is_power_of_two(jule::Int _9220_x) {
	return (_9220_x & (_9220_x - 1LL)) == 0LL;
}



inline std::tuple<jule::Slice<jule::U8>,jule::Str> _121837910_fmt_bits(jule::Slice<jule::U8> _9917_dst,jule::U64 _9934_u,jule::Int _9942_base,jule::Bool _9953_neg,jule::Bool _9964_append_) {
	jule::Str _9992_s = jule::Str();
	jule::Slice<jule::U8> _9981_d = jule::Slice<jule::U8>();
	if ((_9942_base < 2LL) || (_9942_base > jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).len())) {
		jule::panic(jule::Str("std::conv: illegal base", 23));
	}
	jule::Array<jule::U8,65> _10513_a = jule::Array<jule::U8,65>({});
	jule::Int _10613_i = 65LL;
	if (_9953_neg) {
		_9934_u=static_cast<jule::U64>((-(_9934_u)));
	}
	if (_9942_base == 10LL) {
		if (false) {
			_iter_begin_4625520288:;
			if (!(_9934_u >= 1e+09)) { goto _iter_end_4625520288; }
			{
				jule::U64 _12521_q = jule::div(_9934_u,1e+09);
				jule::Uint _12625_us = static_cast<jule::Uint>(_9934_u - (_12521_q * 1e+09));
				jule::Int _12725_j = 4LL;
				_iter_begin_4625523456:;
				if (!(_12725_j > 0LL)) { goto _iter_end_4625523456; }
				{
					jule::Uint _12925_is = (_12625_us % 100LL) * 2LL;
					_12625_us/=100LL;
					_10613_i-=2LL;
					_10513_a[static_cast<jule::Int>(_10613_i + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_12925_is + 1LL)]);
					_10513_a[static_cast<jule::Int>(_10613_i + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_12925_is + 0LL)]);
				}
				_iter_next_4625523456:;
				(_12725_j)--;
				goto _iter_begin_4625523456;
				_iter_end_4625523456:;
				(_10613_i)--;
				_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((_12625_us * 2LL) + 1LL)]);
				_9934_u=_12521_q;
			}
			_iter_next_4625520288:;
			goto _iter_begin_4625520288;
			_iter_end_4625520288:;
		}
		jule::Uint _14717_us = static_cast<jule::Uint>(_9934_u);
		_iter_begin_4625519600:;
		if (!(_14717_us >= 100LL)) { goto _iter_end_4625519600; }
		{
			jule::Uint _14917_is = (_14717_us % 100LL) * 2LL;
			_14717_us/=100LL;
			_10613_i-=2LL;
			_10513_a[static_cast<jule::Int>(_10613_i + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_14917_is + 1LL)]);
			_10513_a[static_cast<jule::Int>(_10613_i + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_14917_is + 0LL)]);
		}
		_iter_next_4625519600:;
		goto _iter_begin_4625519600;
		_iter_end_4625519600:;
		jule::Uint _15713_is = _14717_us * 2LL;
		(_10613_i)--;
		_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15713_is + 1LL)]);
		if (_14717_us >= 10LL) {
			(_10613_i)--;
			_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15713_is)]);
		}
	} else if (_121837910_is_power_of_two(_9942_base)) {
		jule::Uint _17213_shift = static_cast<jule::Uint>(_121ef7c60_trailing_zeros(static_cast<jule::Uint>(_9942_base))) & 7LL;
		jule::U64 _17313_b = static_cast<jule::U64>(_9942_base);
		jule::Uint _17413_m = static_cast<jule::Uint>(_9942_base) - 1LL;
		_iter_begin_4625559296:;
		if (!(_9934_u >= _17313_b)) { goto _iter_end_4625559296; }
		{
			(_10613_i)--;
			_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u) & _17413_m)]);
			_9934_u>>=_17213_shift;
		}
		_iter_next_4625559296:;
		goto _iter_begin_4625559296;
		_iter_end_4625559296:;
		(_10613_i)--;
		_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u))]);
	} else {
		jule::U64 _18513_b = static_cast<jule::U64>(_9942_base);
		_iter_begin_4625568528:;
		if (!(_9934_u >= _18513_b)) { goto _iter_end_4625568528; }
		{
			(_10613_i)--;
			jule::U64 _19117_q = jule::div(_9934_u,_18513_b);
			_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u - (_19117_q * _18513_b)))]);
			_9934_u=_19117_q;
		}
		_iter_next_4625568528:;
		goto _iter_begin_4625568528;
		_iter_end_4625568528:;
		(_10613_i)--;
		_10513_a[static_cast<jule::Int>(_10613_i)]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u))]);
	}
	if (_9953_neg) {
		(_10613_i)--;
		_10513_a[static_cast<jule::Int>(_10613_i)]='-';
	}
	if (_9964_append_) {
		_9981_d=append(_9917_dst,_10513_a.slice(static_cast<jule::Int>(_10613_i)));
		return std::make_tuple(_9981_d,_9992_s);
	}
	_9992_s=static_cast<jule::Str>(_10513_a.slice(static_cast<jule::Int>(_10613_i)));
	return std::make_tuple(_9981_d,_9992_s);
}



inline jule::Int _1217e3350_get_last_os_error(void) {
	jule::Int _319_err = _1317134b0_get_last_errno();
	{
		auto _match_expr{ _319_err };
		if (!((13LL) == _match_expr)) { goto _case_end_4625777696; }
		_case_begin_4625777696:;
		{
			return 1LLU;
		}
		goto _match_end_4625776048;
		_case_end_4625777696:;
		if (!((5LL) == _match_expr)) { goto _case_end_4625776928; }
		_case_begin_4625776928:;
		{
			return 2LLU;
		}
		goto _match_end_4625776048;
		_case_end_4625776928:;
		if (!((114LL) == _match_expr)) { goto _case_end_4625777040; }
		_case_begin_4625777040:;
		{
			return 3LLU;
		}
		goto _match_end_4625776048;
		_case_end_4625777040:;
		if (!((38LL) == _match_expr)) { goto _case_end_4625777152; }
		_case_begin_4625777152:;
		{
			return 4LLU;
		}
		goto _match_end_4625776048;
		_case_end_4625777152:;
		if (!((2LL) == _match_expr)) { goto _case_end_4625778000; }
		_case_begin_4625778000:;
		{
			return 5LLU;
		}
		goto _match_end_4625776048;
		_case_end_4625778000:;
		if (!((20LL) == _match_expr)) { goto _case_end_4625778112; }
		_case_begin_4625778112:;
		{
			return 6LLU;
		}
		goto _match_end_4625776048;
		_case_end_4625778112:;
		if (!((12LL) == _match_expr)) { goto _case_end_4625778224; }
		_case_begin_4625778224:;
		{
			return 7LLU;
		}
		goto _match_end_4625776048;
		_case_end_4625778224:;
		_case_begin_4625776624:;
		{
			return 0LLU;
		}
		goto _match_end_4625776048;
		_case_end_4625776624:;
		_match_end_4625776048:;
	}
}



inline jule::Int _1217dc7a0_get_last_os_error_windows(void) {
	jule::U32 _169_err = _1317a9110_get_last_error();
	{
		auto _match_expr{ _169_err };
		if (!((5LL) == _match_expr)) { goto _case_end_4625786240; }
		_case_begin_4625786240:;
		{
			return 1LLU;
		}
		goto _match_end_4625785040;
		_case_end_4625786240:;
		if (!((3LL) == _match_expr)) { goto _case_end_4625786352; }
		_case_begin_4625786352:;
		{
			return 5LLU;
		}
		goto _match_end_4625785040;
		_case_end_4625786352:;
		if (!((21LL) == _match_expr)) { goto _case_end_4625785552; }
		_case_begin_4625785552:;
		{
			return 8LLU;
		}
		goto _match_end_4625785040;
		_case_end_4625785552:;
		if (!((123LL) == _match_expr)) { goto _case_end_4625785664; }
		_case_begin_4625785664:;
		{
			return 5LLU;
		}
		goto _match_end_4625785040;
		_case_end_4625785664:;
		_case_begin_4625779472:;
		{
			return 0LLU;
		}
		goto _match_end_4625785040;
		_case_end_4625779472:;
		_match_end_4625785040:;
	}
}



inline std::tuple<jule::Str,jule::Int> _121828050_working_dir(void) {
	jule::Str _3310_p;
	jule::Int _3313_err;
	std::tie(_3310_p,_3313_err) = _121848920___getwd();
	return std::make_tuple(_3310_p,_3313_err);
}



inline jule::Int _121828050_set_working_dir(jule::Str _4224_path) {
	if (_4224_path == jule::Str("", 0)) {
		return 6LLU;
	}
	return _121848920___chdir(_4224_path);
}



inline void _121828050_init(void) {
	{
		(*((&(_121828050_ARGS))))=__jule_get_command_line_args();
		(*((&(_121828050_ENV))))=__jule_get_environment_variables();
	}
}



inline std::tuple<jule::Str,jule::Int> _121848920___getwd(void) {
	jule::Array<jule::U16,261> _1613_buff = jule::Array<jule::U16,261>({});
	jule::U32 _179_n = _1317a9110_get_current_directory(261LLU,(&(_1613_buff[static_cast<jule::Int>(0LL)])));
	if (_179_n == 0LL) {
		return std::make_tuple(jule::Str("", 0),_1217dc7a0_get_last_os_error_windows());
	}
	return std::make_tuple(_1317a9110_u16_ptr_to_str((&(_1613_buff[static_cast<jule::Int>(0LL)]))),0LLU);
}



inline jule::Int _121848920___chdir(jule::Str _2612_path) {
	jule::Slice<jule::U16> _279_utf16_path = _1317a9110_utf16_from_str(_2612_path);
	if (_1317a9110_set_current_directory((&(_279_utf16_path[static_cast<jule::Int>(0LL)])))) {
		return 0LLU;
	}
	return _1217dc7a0_get_last_os_error_windows();
}



inline void _1217b31d0_exit(jule::Int _1313_code) {
	_1317a9f00_exit(_1313_code);
}



inline jule::Str _1217b31d0_executable(void) {
	return __jule_executable();
}



inline jule::Bool _1316301d0_is_std_header_path(jule::Str _2627_p) {
	return (_2627_p[static_cast<jule::Int>(0LL)] == '<') && (_2627_p[static_cast<jule::Int>(_2627_p.len() - 1LL)] == '>');
}



inline jule::Bool _1316301d0_is_valid_header_ext(jule::Str _3128_ext) {
	{
		auto __julec_range_expr = _1316301d0_CPP_HEADER_EXTS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1316301d0_valid_ext = *__julec_range_begin;
			_iter_begin_4625979440:;
			{
				if (_3128_ext == _1316301d0_valid_ext) {
					return true;
				}
			}
			_iter_next_4625979440:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1316301d0_valid_ext = *__julec_range_begin; goto _iter_begin_4625979440; }
			_iter_end_4625979440:;
		}
	}
	return false;
}



inline jule::Bool _1316301d0_is_valid_cpp_ext(jule::Str _4225_ext) {
	{
		auto __julec_range_expr = _1316301d0_CPP_EXTS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1316301d0_e = *__julec_range_begin;
			_iter_begin_4625984096:;
			{
				if (_4225_ext == _1316301d0_e) {
					return true;
				}
			}
			_iter_next_4625984096:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1316301d0_e = *__julec_range_begin; goto _iter_begin_4625984096; }
			_iter_end_4625984096:;
		}
	}
	{
		auto __julec_range_expr = _1316301d0_OBJECTIVE_CPP_EXTS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1316301d0_e = *__julec_range_begin;
			_iter_begin_4625988352:;
			{
				if (_4225_ext == _1316301d0_e) {
					return true;
				}
			}
			_iter_next_4625988352:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1316301d0_e = *__julec_range_begin; goto _iter_begin_4625988352; }
			_iter_end_4625988352:;
		}
	}
	return false;
}



inline std::tuple<jule::Bool,jule::Bool> _131696e90_check_os(jule::Str _713_arg) {
	jule::Bool _735_exist = jule::Bool();
	jule::Bool _725_ok = jule::Bool();
	_725_ok=false;
	_735_exist=true;
	{
		auto _match_expr{ _713_arg };
		if (!((jule::Str("windows", 7)) == _match_expr)) { goto _case_end_4625995104; }
		_case_begin_4625995104:;
		{
			_725_ok=_1316e9330_is_windows(_1316f28b0_OS);
		}
		goto _match_end_4625992000;
		_case_end_4625995104:;
		if (!((jule::Str("darwin", 6)) == _match_expr)) { goto _case_end_4625993744; }
		_case_begin_4625993744:;
		{
			_725_ok=_1316e9330_is_darwin(_1316f28b0_OS);
		}
		goto _match_end_4625992000;
		_case_end_4625993744:;
		if (!((jule::Str("linux", 5)) == _match_expr)) { goto _case_end_4625993856; }
		_case_begin_4625993856:;
		{
			_725_ok=_1316e9330_is_linux(_1316f28b0_OS);
		}
		goto _match_end_4625992000;
		_case_end_4625993856:;
		if (!((jule::Str("unix", 4)) == _match_expr)) { goto _case_end_4625993968; }
		_case_begin_4625993968:;
		{
			_725_ok=_1316e9330_is_unix(_1316f28b0_OS);
		}
		goto _match_end_4625992000;
		_case_end_4625993968:;
		_case_begin_4625992432:;
		{
			_725_ok=true;
			_735_exist=false;
		}
		goto _match_end_4625992000;
		_case_end_4625992432:;
		_match_end_4625992000:;
	}
	return std::make_tuple(_725_ok,_735_exist);
}



inline std::tuple<jule::Bool,jule::Bool> _131696e90_check_arch(jule::Str _2415_arg) {
	jule::Bool _2437_exist = jule::Bool();
	jule::Bool _2427_ok = jule::Bool();
	_2427_ok=false;
	_2437_exist=true;
	{
		auto _match_expr{ _2415_arg };
		if (!((jule::Str("i386", 4)) == _match_expr)) { goto _case_end_4626004624; }
		_case_begin_4626004624:;
		{
			_2427_ok=_1316e9330_is_i386(_1316f28b0_ARCH);
		}
		goto _match_end_4626001520;
		_case_end_4626004624:;
		if (!((jule::Str("amd64", 5)) == _match_expr)) { goto _case_end_4626003264; }
		_case_begin_4626003264:;
		{
			_2427_ok=_1316e9330_is_amd64(_1316f28b0_ARCH);
		}
		goto _match_end_4626001520;
		_case_end_4626003264:;
		if (!((jule::Str("arm64", 5)) == _match_expr)) { goto _case_end_4626003376; }
		_case_begin_4626003376:;
		{
			_2427_ok=_1316e9330_is_arm64(_1316f28b0_ARCH);
		}
		goto _match_end_4626001520;
		_case_end_4626003376:;
		if (!((jule::Str("64bit", 5)) == _match_expr)) { goto _case_end_4626003488; }
		_case_begin_4626003488:;
		{
			_2427_ok=_1316e9330_is_64bit(_1316f28b0_ARCH);
		}
		goto _match_end_4626001520;
		_case_end_4626003488:;
		if (!((jule::Str("32bit", 5)) == _match_expr)) { goto _case_end_4626003920; }
		_case_begin_4626003920:;
		{
			_2427_ok=_1316e9330_is_32bit(_1316f28b0_ARCH);
		}
		goto _match_end_4626001520;
		_case_end_4626003920:;
		_case_begin_4626001952:;
		{
			_2427_ok=true;
			_2437_exist=false;
		}
		goto _match_end_4626001520;
		_case_end_4626001952:;
		_match_end_4626001520:;
	}
	return std::make_tuple(_2427_ok,_2437_exist);
}



inline jule::Bool _131696e90_is_pass_file_annotation(jule::Str _4336_p) {
	_4336_p=_131739f50_base(_4336_p);
	jule::I64 _459_n = _4336_p.len();
	_4336_p=_4336_p.slice(0LL,static_cast<jule::Int>(_459_n - _131739f50_ext(_4336_p).len()));
	jule::Str _5113_a1 = jule::Str("", 0);
	jule::Str _5413_a2 = jule::Str("", 0);
	jule::Int _5713_i = _4336_p.rfind(jule::Str("_", 1));
	if (_5713_i == -1LL) {
		jule::Bool _6018_ok;
		jule::Bool _6026_exist;
		std::tie(_6018_ok,_6026_exist) = _131696e90_check_os(_4336_p);
		if (_6026_exist) {
			return _6018_ok;
		}
		std::tie(_6018_ok,_6026_exist) = _131696e90_check_arch(_4336_p);
		return (!(_6026_exist)) || _6018_ok;
	}
	if ((_5713_i + 1LL) >= _459_n) {
		return true;
	}
	_5113_a1=_4336_p.slice(static_cast<jule::Int>(_5713_i + 1LL));
	_4336_p=_4336_p.slice(0LL,static_cast<jule::Int>(_5713_i));
	_5713_i=static_cast<jule::Int>(_4336_p.rfind(jule::Str("_", 1)));
	if (_5713_i != -1LL) {
		_5413_a2=_4336_p.slice(static_cast<jule::Int>(_5713_i + 1LL));
	}
	if (_5413_a2 == jule::Str("", 0)) {
		jule::Bool _8118_ok;
		jule::Bool _8126_exist;
		std::tie(_8118_ok,_8126_exist) = _131696e90_check_os(_5113_a1);
		if (_8126_exist) {
			return _8118_ok;
		}
		std::tie(_8118_ok,_8126_exist) = _131696e90_check_arch(_5113_a1);
		return (!(_8126_exist)) || _8118_ok;
	}
	jule::Bool _8914_ok;
	jule::Bool _8922_exist;
	std::tie(_8914_ok,_8922_exist) = _131696e90_check_arch(_5113_a1);
	if (_8922_exist) {
		if ((!(_8914_ok))) {
			return false;
		}
		jule::Bool _9414_ok;
		jule::Bool _9418_exist;
		std::tie(_9414_ok,_9418_exist) = _131696e90_check_os(_5413_a2);
		return (!(_9418_exist)) || _9414_ok;
	}
	std::tie(_8914_ok,_8922_exist) = _131696e90_check_os(_5113_a1);
	return (!(_8922_exist)) || _8914_ok;
}



inline jule::Str _1316b2ff0_errorf(jule::Str _20215_key,jule::Slice<jule::Any> _20225_args) {
	jule::Str _2039_fmt = _1316b2ff0_ERRORS[_20215_key];
	return _1316b2ff0_apply_fmt(_2039_fmt,_20225_args);
}



inline jule::Str _1316b2ff0_arg_to_str(jule::Any _20715_arg) {
	{
		auto _match_expr{ _20715_arg };
		if (!(_match_expr.type_is<jule::Str>())) { goto _case_end_4626051088; }
		_case_begin_4626051088:;
		{
			return _20715_arg.operator jule::Str();
		}
		goto _match_end_4626048912;
		_case_end_4626051088:;
		if (!(_match_expr.type_is<jule::U8>())) { goto _case_end_4626051200; }
		_case_begin_4626051200:;
		{
			return static_cast<jule::Str>(_20715_arg.operator jule::U8());
		}
		goto _match_end_4626048912;
		_case_end_4626051200:;
		if (!(_match_expr.type_is<jule::I32>())) { goto _case_end_4626049664; }
		_case_begin_4626049664:;
		{
			return static_cast<jule::Str>(_20715_arg.operator jule::I32());
		}
		goto _match_end_4626048912;
		_case_end_4626049664:;
		_case_begin_4626047792:;
		{
			return jule::Str("<fmt?>", 6);
		}
		goto _match_end_4626048912;
		_case_end_4626047792:;
		_match_end_4626048912:;
	}
}



inline jule::Int _1316b2ff0_find_next_fmt(jule::Str _21618_fmt) {
	{
		auto __julec_range_expr = _21618_fmt;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1316b2ff0_i = 0;
			jule::U8 _1316b2ff0_b = *__julec_range_begin;
			_iter_begin_4626049088:;
			{
				if (_1316b2ff0_b == '@') {
					return _1316b2ff0_i;
				}
			}
			_iter_next_4626049088:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1316b2ff0_i; _1316b2ff0_b = *__julec_range_begin; goto _iter_begin_4626049088; }
			_iter_end_4626049088:;
		}
	}
	return -1LL;
}



inline jule::Str _1316b2ff0_apply_fmt(jule::Str _22518_fmt,jule::Slice<jule::Any> _22528_args) {
	jule::Str _22613_s = jule::Str("", 0);
	{
		auto __julec_range_expr = _22528_args;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1316b2ff0_arg = *__julec_range_begin;
			_iter_begin_4626060448:;
			{
				jule::Int _22913_i = _1316b2ff0_find_next_fmt(_22518_fmt);
				if (_22913_i == -1LL) {
					goto _iter_end_4626060448;
				}
				_22613_s+=_22518_fmt.slice(0LL,static_cast<jule::Int>(_22913_i));
				_22613_s+=_1316b2ff0_arg_to_str(_1316b2ff0_arg);
				_22518_fmt=_22518_fmt.slice(static_cast<jule::Int>(_22913_i + 1LL));
			}
			_iter_next_4626060448:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1316b2ff0_arg = *__julec_range_begin; goto _iter_begin_4626060448; }
			_iter_end_4626060448:;
		}
	}
	_22613_s+=_22518_fmt;
	return _22613_s;
}



inline jule::Bool _1316ed230_is_top_directive(jule::Str _3425_directive) {
	return (_3425_directive == jule::Str("pass", 4)) || (_3425_directive == jule::Str("build", 5));
}



inline jule::Bool _1316e9330_is_windows(jule::Str _5119_os) {
	return _5119_os == jule::Str("windows", 7);
}



inline jule::Bool _1316e9330_is_darwin(jule::Str _5318_os) {
	return _5318_os == jule::Str("darwin", 6);
}



inline jule::Bool _1316e9330_is_linux(jule::Str _5517_os) {
	return _5517_os == jule::Str("linux", 5);
}



inline jule::Bool _1316e9330_is_i386(jule::Str _5716_arch) {
	return _5716_arch == jule::Str("i386", 4);
}



inline jule::Bool _1316e9330_is_amd64(jule::Str _5917_arch) {
	return _5917_arch == jule::Str("amd64", 5);
}



inline jule::Bool _1316e9330_is_arm64(jule::Str _6117_arch) {
	return _6117_arch == jule::Str("arm64", 5);
}



inline jule::Bool _1316e9330_is_unix(jule::Str _6316_os) {
	return _1316e9330_is_darwin(_6316_os) || _1316e9330_is_linux(_6316_os);
}



inline jule::Bool _1316e9330_is_32bit(jule::Str _6517_arch) {
	return _1316e9330_is_i386(_6517_arch);
}



inline jule::Bool _1316e9330_is_64bit(jule::Str _6717_arch) {
	return _1316e9330_is_amd64(_6717_arch) || _1316e9330_is_arm64(_6717_arch);
}



inline void _1316f28b0_exit_err(jule::Str _2513_msg) {
	
	jule::outln(_2513_msg);
	_1217b31d0_exit(1LL);
}



inline void _1316f28b0_init(void) {
	jule::Str _3313_path = _1217b31d0_executable();
	if (_3313_path == jule::Str("", 0)) {
		_1316f28b0_exit_err(jule::Str("std::jule::build: executable file cannot found", 46));
	}
	jule::Str _3810_pwd;
	jule::Int _3815_err;
	std::tie(_3810_pwd,_3815_err) = _121828050_working_dir();
	if (_3815_err != 0LLU) {
		_1316f28b0_exit_err(jule::Str("std::jule::build: working directory path cannot found", 53));
	}
	jule::Str _439_path_exec = _131739f50_dir(_3313_path);
	_3313_path=_131739f50_join(jule::Slice<jule::Str>({_439_path_exec,jule::Str("..", 2)}));
	{
		(*((&(_1316f28b0_PATH_WD))))=_3810_pwd;
		(*((&(_1316f28b0_PATH_EXEC))))=_439_path_exec;
		(*((&(_1316f28b0_PATH_STDLIB))))=_131739f50_join(jule::Slice<jule::Str>({_3313_path,jule::Str("std", 3)}));
		(*((&(_1316f28b0_PATH_API))))=_131739f50_join(jule::Slice<jule::Str>({_1316f28b0_PATH_EXEC,jule::Str("..", 2)}));
		(*((&(_1316f28b0_PATH_API))))=_131739f50_join(jule::Slice<jule::Str>({_1316f28b0_PATH_API,jule::Str("api", 3)}));
		(*((&(_1316f28b0_PATH_API))))=_131739f50_join(jule::Slice<jule::Str>({_1316f28b0_PATH_API,jule::Str("jule.hpp", 8)}));
	}
}



inline jule::Bool _1317087a0_is_jule(jule::Str _2316_path) {
	return _131739f50_ext(_2316_path) == jule::Str(".jule", 5);
}



inline jule::Int _1220ca200_get_last_fs_error(void) {
	jule::Int _739_err = _1317134b0_get_last_errno();
	{
		auto _match_expr{ _739_err };
		if (!((13LL) == _match_expr)) { goto _case_end_4626162800; }
		_case_begin_4626162800:;
		{
			return 1LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626162800:;
		if (!((5LL) == _match_expr)) { goto _case_end_4626162912; }
		_case_begin_4626162912:;
		{
			return 2LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626162912:;
		if (!((114LL) == _match_expr)) { goto _case_end_4626162160; }
		_case_begin_4626162160:;
		{
			return 3LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626162160:;
		if (!((38LL) == _match_expr)) { goto _case_end_4626162272; }
		_case_begin_4626162272:;
		{
			return 4LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626162272:;
		if (!((2LL) == _match_expr)) { goto _case_end_4626162384; }
		_case_begin_4626162384:;
		{
			return 5LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626162384:;
		if (!((20LL) == _match_expr)) { goto _case_end_4626163712; }
		_case_begin_4626163712:;
		{
			return 6LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626163712:;
		if (!((132LL) == _match_expr)) { goto _case_end_4626163824; }
		_case_begin_4626163824:;
		{
			return 7LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626163824:;
		if (!((9LL) == _match_expr)) { goto _case_end_4626163936; }
		_case_begin_4626163936:;
		{
			return 8LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626163936:;
		if (!((24LL) == _match_expr)) { goto _case_end_4626164048; }
		_case_begin_4626164048:;
		{
			return 9LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626164048:;
		if (!((23LL) == _match_expr)) { goto _case_end_4626164368; }
		_case_begin_4626164368:;
		{
			return 10LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626164368:;
		if (!((12LL) == _match_expr)) { goto _case_end_4626164480; }
		_case_begin_4626164480:;
		{
			return 11LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626164480:;
		if (!((17LL) == _match_expr)) { goto _case_end_4626164592; }
		_case_begin_4626164592:;
		{
			return 12LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626164592:;
		if (!((4LL) == _match_expr)) { goto _case_end_4626164704; }
		_case_begin_4626164704:;
		{
			return 13LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626164704:;
		if (!((22LL) == _match_expr)) { goto _case_end_4626164816; }
		_case_begin_4626164816:;
		{
			return 14LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626164816:;
		if (!((21LL) == _match_expr)) { goto _case_end_4626164928; }
		_case_begin_4626164928:;
		{
			return 15LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626164928:;
		if (!((124LL) == _match_expr)) { goto _case_end_4626165040; }
		_case_begin_4626165040:;
		{
			return 16LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626165040:;
		if (!((28LL) == _match_expr)) { goto _case_end_4626165152; }
		_case_begin_4626165152:;
		{
			return 17LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626165152:;
		if (!((6LL) == _match_expr)) { goto _case_end_4626165264; }
		_case_begin_4626165264:;
		{
			return 18LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626165264:;
		if (!((30LL) == _match_expr)) { goto _case_end_4626165376; }
		_case_begin_4626165376:;
		{
			return 19LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626165376:;
		if (!((11LL) == _match_expr)) { goto _case_end_4626165488; }
		_case_begin_4626165488:;
		{
			return 20LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626165488:;
		if (!((139LL) == _match_expr || (16LL) == _match_expr)) { goto _case_end_4626165600; }
		_case_begin_4626165600:;
		{
			return 21LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626165600:;
		if (!((27LL) == _match_expr)) { goto _case_end_4626165712; }
		_case_begin_4626165712:;
		{
			return 22LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626165712:;
		if (!((32LL) == _match_expr)) { goto _case_end_4626165824; }
		_case_begin_4626165824:;
		{
			return 23LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626165824:;
		if (!((34LL) == _match_expr)) { goto _case_end_4626165936; }
		_case_begin_4626165936:;
		{
			return 24LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626165936:;
		if (!((29LL) == _match_expr)) { goto _case_end_4626166048; }
		_case_begin_4626166048:;
		{
			return 25LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626166048:;
		if (!((119LL) == _match_expr)) { goto _case_end_4626166160; }
		_case_begin_4626166160:;
		{
			return 26LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626166160:;
		if (!((104LL) == _match_expr)) { goto _case_end_4626166272; }
		_case_begin_4626166272:;
		{
			return 27LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626166272:;
		if (!((41LL) == _match_expr)) { goto _case_end_4626166384; }
		_case_begin_4626166384:;
		{
			return 28LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626166384:;
		_case_begin_4626161856:;
		{
			return 0LLU;
		}
		goto _match_end_4626161280;
		_case_end_4626161856:;
		_match_end_4626161280:;
	}
}



inline std::tuple<jule::Slice<jule::U8>,jule::Int> _1220de8f0_read_file(jule::Str _12118_path) {
	jule::Ref<_1220d93f0_Status> _12210_s;
	jule::Int _12217_err;
	std::tie(_12210_s,_12217_err) = _111613f90_stat(_12118_path);
	if (_12217_err != 0LLU) {
		return std::make_tuple(nullptr,_12217_err);
	}
	if ((!(_12210_s->_method_is_reg()))) {
		return std::make_tuple(nullptr,15LLU);
	}
	if (_12210_s->_field_size == 0LL) {
		return std::make_tuple(jule::Slice<jule::U8>::alloc(static_cast<jule::Int>(0LL)),0LLU);
	}
	jule::Ref<_1220de8f0_File> _13514_f;
	std::tie(_13514_f,_12217_err) = _1220f3000_open(_12118_path,0LL,0LL);
	if (_12217_err != 0LLU) {
		return std::make_tuple(nullptr,_12217_err);
	}
	__JULE_DEFER({
		_13514_f->_method_close();
	});
	jule::Slice<jule::U8> _14113_buff = jule::Slice<jule::U8>::alloc(static_cast<jule::Int>(_12210_s->_field_size));
	jule::Int _14210_n;
	std::tie(_14210_n,_12217_err) = _13514_f->_method_read(_14113_buff);
	if (_12217_err != 0LLU) {
		return std::make_tuple(nullptr,_12217_err);
	}
	return std::make_tuple(_14113_buff.slice(0LL,static_cast<jule::Int>(_14210_n)),0LLU);
}



inline std::tuple<jule::Ref<_1220de8f0_File>,jule::Int> _1220f3000_open(jule::Str _2113_path,jule::Int _2124_flag,jule::Int _2137_mode) {
	jule::Slice<jule::U16> _229_utf16_path = _1317a9110_utf16_from_str(_2113_path);
	jule::Int _239_handle = _1317a9110__wopen((&(_229_utf16_path[static_cast<jule::Int>(0LL)])),static_cast<jule::Int>(_2124_flag),_2137_mode);
	if (_239_handle == -1LL) {
		return std::make_tuple(jule::new_ref<_1220de8f0_File>(),_1220ca200_get_last_fs_error());
	}
	return std::make_tuple(jule::new_struct<_1220de8f0_File>(new( std::nothrow ) _1220de8f0_File(_239_handle)),0LLU);
}



inline jule::Int _1220f3000_remove_file(jule::Str _3420_path) {
	jule::Slice<jule::U16> _359_utf16_path = _1317a9110_utf16_from_str(_3420_path);
	if (_1317a9110_delete_file((&(_359_utf16_path[static_cast<jule::Int>(0LL)])))) {
		return 0LLU;
	}
	return _1220ca200_get_last_fs_error();
}



inline std::tuple<jule::Slice<jule::Ref<_1220df4b0_DirEntry>>,jule::Int> _1220e63c0_read_dir(jule::Str _2117_path) {
	jule::Int _2152_err = 0LLU;
	jule::Slice<jule::Ref<_1220df4b0_DirEntry>> _2130_dirents = jule::Slice<jule::Ref<_1220df4b0_DirEntry>>();
	jule::Slice<jule::U16> _229_utf16_path = _1317a9110_utf16_from_str(_2117_path);
	_WDIR* _2313_dir = _1317a9110__wopendir((&(_229_utf16_path[static_cast<jule::Int>(0LL)])));
	if (_2313_dir == nullptr) {
		_2152_err=_1220ca200_get_last_fs_error();
		return std::make_tuple(_2130_dirents,_2152_err);
	}
	_iter_begin_4626225648:;
	{
		struct _wdirent* _2913_dirent = _1317a9110__wreaddir(_2313_dir);
		if (_2913_dirent == nullptr) {
			goto _iter_end_4626225648;
		}
		jule::Str _3313_name = _1317a9110_u16_ptr_to_str(((jule::U16*)(_2913_dirent->d_name)));
		jule::Ref<_1220d93f0_Status> _3414_stat;
		jule::Int _3420_serr;
		std::tie(_3414_stat,_3420_serr) = _111613f90_stat(_131739f50_join(jule::Slice<jule::Str>({_2117_path,_3313_name})));
		if (_3420_serr != 0LLU) {
			_2152_err=_3420_serr;
			_2130_dirents=nullptr;
			goto _iter_end_4626225648;
		}
		_2130_dirents=append(_2130_dirents,jule::Slice<jule::Ref<_1220df4b0_DirEntry>>({jule::new_struct<_1220df4b0_DirEntry>(new( std::nothrow ) _1220df4b0_DirEntry(_3313_name,_3414_stat))}));
	}
	_iter_next_4626225648:;
	goto _iter_begin_4626225648;
	_iter_end_4626225648:;
	_1317a9110__wclosedir(_2313_dir);
	return std::make_tuple(_2130_dirents,_2152_err);
}



inline jule::Int _1220e63c0_create_dir(jule::Str _5219_path) {
	jule::Slice<jule::U16> _579_utf16_path = _1317a9110_utf16_from_str(_5219_path);
	if (_1317a9110_create_directory((&(_579_utf16_path[static_cast<jule::Int>(0LL)])))) {
		return 0LLU;
	}
	return _1220ca200_get_last_fs_error();
}



inline jule::Int _1220e63c0_remove_dir(jule::Str _6719_path) {
	jule::Slice<jule::U16> _689_utf16_path = _1317a9110_utf16_from_str(_6719_path);
	if (_1317a9110_remove_directory((&(_689_utf16_path[static_cast<jule::Int>(0LL)])))) {
		return 0LLU;
	}
	return _1220ca200_get_last_fs_error();
}



inline std::tuple<jule::Ref<_1220d93f0_Status>,jule::Int> _111613f90_stat(jule::Str _1113_path) {
	jule::Int _1138_err = 0LLU;
	jule::Ref<_1220d93f0_Status> _1126_s = jule::Ref<_1220d93f0_Status>();
	jule::Slice<jule::U16> _129_utf16_path = _1317a9110_utf16_from_str(_1113_path);
	struct stat _1313_handle = (struct stat){};
	jule::Int _149_code = _1317a9110_wstat((&(_129_utf16_path[static_cast<jule::Int>(0LL)])),(&(_1313_handle)));
	if (_149_code != -1LL) {
		_1138_err=0LLU;
		_1126_s=jule::new_struct<_1220d93f0_Status>(new( std::nothrow ) _1220d93f0_Status(static_cast<jule::Uint>(_1313_handle.st_mode),static_cast<jule::Uint>(_1313_handle.st_size)));
	} else {
		_1138_err=_1220ca200_get_last_fs_error();
	}
	return std::make_tuple(_1126_s,_1138_err);
}



inline jule::Bool _1220fe860_full_rune(jule::Slice<jule::U8> _13718_p) {
	if (_13718_p.len() == 0LL) {
		return false;
	}
	jule::U8 _1419_x = _1220fe860_FIRST[static_cast<jule::Int>(_13718_p[static_cast<jule::Int>(0LL)])];
	if (_13718_p.len() >= static_cast<jule::Int>(_1419_x & 7LL)) {
		return true;
	}
	_1220fe860_accept_range _1469_accept = _1220fe860_ACCEPT_RANGES[static_cast<jule::Int>(_1419_x >> 4LL)];
	if ((_13718_p.len() > 1LL) && ((_13718_p[static_cast<jule::Int>(1LL)] < _1469_accept._field_lo) || (_1469_accept._field_hi < _13718_p[static_cast<jule::Int>(1LL)]))) {
		return true;
	} else if ((_13718_p.len() > 2LL) && ((_13718_p[static_cast<jule::Int>(2LL)] < 128LL) || (191LL < _13718_p[static_cast<jule::Int>(2LL)]))) {
		return true;
	}
	return false;
}



inline jule::Bool _1220fe860_full_rune_str(jule::Str _15622_s) {
	if (_15622_s.len() == 0LL) {
		return false;
	}
	jule::U8 _1609_x = _1220fe860_FIRST[static_cast<jule::Int>(_15622_s[static_cast<jule::Int>(0LL)])];
	if (_15622_s.len() >= static_cast<jule::Int>(_1609_x & 7LL)) {
		return true;
	}
	_1220fe860_accept_range _1659_accept = _1220fe860_ACCEPT_RANGES[static_cast<jule::Int>(_1609_x >> 4LL)];
	if ((_15622_s.len() > 1LL) && ((_15622_s[static_cast<jule::Int>(1LL)] < _1659_accept._field_lo) || (_1659_accept._field_hi < _15622_s[static_cast<jule::Int>(1LL)]))) {
		return true;
	} else if ((_15622_s.len() > 2LL) && ((_15622_s[static_cast<jule::Int>(2LL)] < 128LL) || (191LL < _15622_s[static_cast<jule::Int>(2LL)]))) {
		return true;
	}
	return false;
}



inline std::tuple<jule::I32,jule::Int> _1220fe860_decode_rune(jule::Slice<jule::U8> _18220_p) {
	jule::Int _18242_size = jule::Int();
	jule::I32 _18233_r = jule::I32();
	if (_18220_p.len() < 1LL) {
		_18233_r = 65533LL;
		_18242_size = 0LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _1869_p0 = _18220_p[static_cast<jule::Int>(0LL)];
	jule::U8 _1879_x = _1220fe860_FIRST[static_cast<jule::Int>(_1869_p0)];
	if (_1879_x >= 240LL) {
		jule::I32 _19213_mask = (_1879_x << 31LL) >> 31LL;
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_18220_p[static_cast<jule::Int>(0LL)]) & (~(_19213_mask))) | (65533LL & _19213_mask));
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::Int _1959_sz = static_cast<jule::Int>(_1879_x & 7LL);
	_1220fe860_accept_range _1969_accept = _1220fe860_ACCEPT_RANGES[static_cast<jule::Int>(_1879_x >> 4LL)];
	if (_18220_p.len() < _1959_sz) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2009_b1 = _18220_p[static_cast<jule::Int>(1LL)];
	if ((_2009_b1 < _1969_accept._field_lo) || (_1969_accept._field_hi < _2009_b1)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 2LL) {
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_1869_p0 & 31LL) << 6LL) | static_cast<jule::I32>(_2009_b1 & 63LL));
		_18242_size = 2LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2079_b2 = _18220_p[static_cast<jule::Int>(2LL)];
	if ((_2079_b2 < 128LL) || (191LL < _2079_b2)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 3LL) {
		_18233_r = static_cast<jule::I32>(((static_cast<jule::I32>(_1869_p0 & 15LL) << 12LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 6LL)) | static_cast<jule::I32>(_2079_b2 & 63LL));
		_18242_size = 3LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2149_b3 = _18220_p[static_cast<jule::Int>(3LL)];
	if ((_2149_b3 < 128LL) || (191LL < _2149_b3)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	_18233_r = static_cast<jule::I32>((((static_cast<jule::I32>(_1869_p0 & 7LL) << 18LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 12LL)) | (static_cast<jule::I32>(_2079_b2 & 63LL) << 6LL)) | static_cast<jule::I32>(_2149_b3 & 63LL));
	_18242_size = 4LL;
	return std::make_tuple(_18233_r,_18242_size);
}



inline std::tuple<jule::I32,jule::Int> _1220fe860_decode_rune_str(jule::Str _22924_s) {
	jule::Int _22943_size = jule::Int();
	jule::I32 _22934_r = jule::I32();
	if (_22924_s.len() < 1LL) {
		_22934_r = 65533LL;
		_22943_size = 0LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::U8 _2339_s0 = _22924_s[static_cast<jule::Int>(0LL)];
	jule::U8 _2349_x = _1220fe860_FIRST[static_cast<jule::Int>(_2339_s0)];
	if (_2349_x >= 240LL) {
		jule::I32 _23913_mask = (_2349_x << 31LL) >> 31LL;
		_22934_r = static_cast<jule::I32>((static_cast<jule::I32>(_22924_s[static_cast<jule::Int>(0LL)]) & (~(_23913_mask))) | (65533LL & _23913_mask));
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::Int _2429_sz = static_cast<jule::Int>(_2349_x & 7LL);
	_1220fe860_accept_range _2439_accept = _1220fe860_ACCEPT_RANGES[static_cast<jule::Int>(_2349_x >> 4LL)];
	if (_22924_s.len() < _2429_sz) {
		_22934_r = 65533LL;
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::U8 _2479_s1 = _22924_s[static_cast<jule::Int>(1LL)];
	if ((_2479_s1 < _2439_accept._field_lo) || (_2439_accept._field_hi < _2479_s1)) {
		_22934_r = 65533LL;
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	if (_2429_sz <= 2LL) {
		_22934_r = static_cast<jule::I32>((static_cast<jule::I32>(_2339_s0 & 31LL) << 6LL) | static_cast<jule::I32>(_2479_s1 & 63LL));
		_22943_size = 2LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::U8 _2549_s2 = _22924_s[static_cast<jule::Int>(2LL)];
	if ((_2549_s2 < 128LL) || (191LL < _2549_s2)) {
		_22934_r = 65533LL;
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	if (_2429_sz <= 3LL) {
		_22934_r = static_cast<jule::I32>(((static_cast<jule::I32>(_2339_s0 & 15LL) << 12LL) | (static_cast<jule::I32>(_2479_s1 & 63LL) << 6LL)) | static_cast<jule::I32>(_2549_s2 & 63LL));
		_22943_size = 3LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	jule::U8 _2619_s3 = _22924_s[static_cast<jule::Int>(3LL)];
	if ((_2619_s3 < 128LL) || (191LL < _2619_s3)) {
		_22934_r = 65533LL;
		_22943_size = 1LL;
		return std::make_tuple(_22934_r,_22943_size);
	}
	_22934_r = static_cast<jule::I32>((((static_cast<jule::I32>(_2339_s0 & 7LL) << 18LL) | (static_cast<jule::I32>(_2479_s1 & 63LL) << 12LL)) | (static_cast<jule::I32>(_2549_s2 & 63LL) << 6LL)) | static_cast<jule::I32>(_2619_s3 & 63LL));
	_22943_size = 4LL;
	return std::make_tuple(_22934_r,_22943_size);
}



inline std::tuple<jule::I32,jule::Int> _1220fe860_decode_last_rune(jule::Slice<jule::U8> _27625_p) {
	jule::Int _27647_size = jule::Int();
	jule::I32 _27638_r = jule::I32();
	if (_27625_p.len() == 0LL) {
		_27638_r = 65533LL;
		_27647_size = 0LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I64 _2809_end = _27625_p.len();
	jule::I64 _28113_start = _2809_end - 1LL;
	_27638_r=static_cast<jule::I32>(_27625_p[static_cast<jule::Int>(_28113_start)]);
	if (_27638_r < 128LL) {
		_27638_r = _27638_r;
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I64 _28913_lim = _2809_end - 4LL;
	if (_28913_lim < 0LL) {
		_28913_lim=0LL;
	}
	(_28113_start)--;
	_iter_begin_4626565056:;
	if (!(_28113_start >= _28913_lim)) { goto _iter_end_4626565056; }
	{
		if (_1220fe860_rune_start(_27625_p[static_cast<jule::Int>(_28113_start)])) {
			goto _iter_end_4626565056;
		}
	}
	_iter_next_4626565056:;
	(_28113_start)--;
	goto _iter_begin_4626565056;
	_iter_end_4626565056:;
	if (_28113_start < 0LL) {
		_28113_start=0LL;
	}
	std::tie(_27638_r,_27647_size) = _1220fe860_decode_rune(_27625_p.slice(static_cast<jule::Int>(_28113_start),static_cast<jule::Int>(_2809_end)));
	if ((_28113_start + _27647_size) != _2809_end) {
		_27638_r = 65533LL;
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	_27638_r = _27638_r;
	_27647_size = _27647_size;
	return std::make_tuple(_27638_r,_27647_size);
}



inline std::tuple<jule::I32,jule::Int> _1220fe860_decode_last_rune_str(jule::Str _31729_s) {
	jule::Int _31748_size = jule::Int();
	jule::I32 _31739_r = jule::I32();
	if (_31729_s.len() == 0LL) {
		_31739_r = 65533LL;
		_31748_size = 0LL;
		return std::make_tuple(_31739_r,_31748_size);
	}
	jule::I64 _3219_end = _31729_s.len();
	jule::I64 _32213_start = _3219_end - 1LL;
	_31739_r=static_cast<jule::I32>(_31729_s[static_cast<jule::Int>(_32213_start)]);
	if (_31739_r < 128LL) {
		_31739_r = _31739_r;
		_31748_size = 1LL;
		return std::make_tuple(_31739_r,_31748_size);
	}
	jule::I64 _33013_lim = _3219_end - 4LL;
	if (_33013_lim < 0LL) {
		_33013_lim=0LL;
	}
	(_32213_start)--;
	_iter_begin_4626587040:;
	if (!(_32213_start >= _33013_lim)) { goto _iter_end_4626587040; }
	{
		if (_1220fe860_rune_start(_31729_s[static_cast<jule::Int>(_32213_start)])) {
			goto _iter_end_4626587040;
		}
	}
	_iter_next_4626587040:;
	(_32213_start)--;
	goto _iter_begin_4626587040;
	_iter_end_4626587040:;
	if (_32213_start < 0LL) {
		_32213_start=0LL;
	}
	std::tie(_31739_r,_31748_size) = _1220fe860_decode_rune_str(_31729_s.slice(static_cast<jule::Int>(_32213_start),static_cast<jule::Int>(_3219_end)));
	if ((_32213_start + _31748_size) != _3219_end) {
		_31739_r = 65533LL;
		_31748_size = 1LL;
		return std::make_tuple(_31739_r,_31748_size);
	}
	_31739_r = _31739_r;
	_31748_size = _31748_size;
	return std::make_tuple(_31739_r,_31748_size);
}



inline jule::Int _1220fe860_rune_len(jule::I32 _35217_r) {
	{
		if (!((_35217_r < 0LL))) { goto _case_end_4626597664; }
		_case_begin_4626597664:;
		{
			return -1LL;
		}
		goto _match_end_4626596256;
		_case_end_4626597664:;
		if (!((_35217_r <= 127LLU))) { goto _case_end_4626596768; }
		_case_begin_4626596768:;
		{
			return 1LL;
		}
		goto _match_end_4626596256;
		_case_end_4626596768:;
		if (!((_35217_r <= 2047LL))) { goto _case_end_4626596880; }
		_case_begin_4626596880:;
		{
			return 2LL;
		}
		goto _match_end_4626596256;
		_case_end_4626596880:;
		if (!(((55296LL <= _35217_r) && (_35217_r <= 57343LL)))) { goto _case_end_4626596992; }
		_case_begin_4626596992:;
		{
			return -1LL;
		}
		goto _match_end_4626596256;
		_case_end_4626596992:;
		if (!((_35217_r <= 65535LL))) { goto _case_end_4626598816; }
		_case_begin_4626598816:;
		{
			return 3LL;
		}
		goto _match_end_4626596256;
		_case_end_4626598816:;
		if (!((_35217_r <= 1114111LL))) { goto _case_end_4626598928; }
		_case_begin_4626598928:;
		{
			return 4LL;
		}
		goto _match_end_4626596256;
		_case_end_4626598928:;
		_case_begin_4626596464:;
		{
			return -1LL;
		}
		goto _match_end_4626596256;
		_case_end_4626596464:;
		_match_end_4626596256:;
	}
}



inline jule::Int _1220fe860_encode_rune(jule::Slice<jule::U8> _36724_p,jule::I32 _36739_r) {
	jule::U32 _3699_i = static_cast<jule::U32>(_36739_r);
	{
		if (!((_3699_i <= 127LLU))) { goto _case_end_4626616816; }
		_case_begin_4626616816:;
		{
			_36724_p[static_cast<jule::Int>(0LL)]=static_cast<jule::U8>(_36739_r);
			return 1LL;
		}
		goto _match_end_4626607456;
		_case_end_4626616816:;
		if (!((_3699_i <= 2047LL))) { goto _case_end_4626618544; }
		_case_begin_4626618544:;
		{
			_36724_p[static_cast<jule::Int>(0LL)]=static_cast<jule::U8>(192LL | static_cast<jule::U8>(_36739_r >> 6LL));
			_36724_p[static_cast<jule::Int>(1LL)]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
			return 2LL;
		}
		goto _match_end_4626607456;
		_case_end_4626618544:;
		if (!((_3699_i > 1114111LL) || ((55296LL <= _3699_i) && (_3699_i <= 57343LL)))) { goto _case_end_4626613264; }
		_case_begin_4626613264:;
		{
			_36739_r=65533LL;
			goto _case_begin_4626607968;
		}
		goto _match_end_4626607456;
		_case_end_4626613264:;
		if (!((_3699_i <= 65535LL))) { goto _case_end_4626607968; }
		_case_begin_4626607968:;
		{
			_36724_p[static_cast<jule::Int>(0LL)]=static_cast<jule::U8>(224LL | static_cast<jule::U8>(_36739_r >> 12LL));
			_36724_p[static_cast<jule::Int>(1LL)]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 6LL) & 63LL));
			_36724_p[static_cast<jule::Int>(2LL)]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
			return 3LL;
		}
		goto _match_end_4626607456;
		_case_end_4626607968:;
		_case_begin_4626607664:;
		{
			_36724_p[static_cast<jule::Int>(0LL)]=static_cast<jule::U8>(240LL | static_cast<jule::U8>(_36739_r >> 18LL));
			_36724_p[static_cast<jule::Int>(1LL)]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 12LL) & 63LL));
			_36724_p[static_cast<jule::Int>(2LL)]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 6LL) & 63LL));
			_36724_p[static_cast<jule::Int>(3LL)]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
			return 4LL;
		}
		goto _match_end_4626607456;
		_case_end_4626607664:;
		_match_end_4626607456:;
	}
}



inline jule::Slice<jule::U8> _1220fe860_append_rune(jule::Slice<jule::U8> _39824_p,jule::I32 _39835_r) {
	if (static_cast<jule::U32>(_39835_r) <= 127LLU) {
		return append(_39824_p,jule::Slice<jule::U8>({static_cast<jule::U8>(_39835_r)}));
	}
	return _1220fe860_append_rune_non_ascii(_39824_p,_39835_r);
}



inline jule::Slice<jule::U8> _1220fe860_append_rune_non_ascii(jule::Slice<jule::U8> _40530_p,jule::I32 _40545_r) {
	jule::U32 _4079_i = static_cast<jule::U32>(_40545_r);
	{
		if (!((_4079_i <= 2047LL))) { goto _case_end_4626656368; }
		_case_begin_4626656368:;
		{
			return append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(192LL | static_cast<jule::U8>(_40545_r >> 6LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
		}
		goto _match_end_4626646240;
		_case_end_4626656368:;
		if (!((_4079_i > 1114111LL) || ((55296LL <= _4079_i) && (_4079_i <= 57343LL)))) { goto _case_end_4626648512; }
		_case_begin_4626648512:;
		{
			_40545_r=65533LL;
			goto _case_begin_4626650096;
		}
		goto _match_end_4626646240;
		_case_end_4626648512:;
		if (!((_4079_i <= 65535LL))) { goto _case_end_4626650096; }
		_case_begin_4626650096:;
		{
			return append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(224LL | static_cast<jule::U8>(_40545_r >> 12LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
		}
		goto _match_end_4626646240;
		_case_end_4626650096:;
		_case_begin_4626646448:;
		{
			return append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(240LL | static_cast<jule::U8>(_40545_r >> 18LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 12LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
		}
		goto _match_end_4626646240;
		_case_end_4626646448:;
		_match_end_4626646240:;
	}
}



inline jule::Int _1220fe860_rune_count(jule::Slice<jule::U8> _42319_p) {
	jule::Int _42332_n = jule::Int();
	jule::Int _42413_i = 0LL;
	_iter_begin_4626663024:;
	if (!(_42413_i < _42319_p.len())) { goto _iter_end_4626663024; }
	{
		(_42332_n)++;
		jule::U8 _42717_c = _42319_p[static_cast<jule::Int>(_42413_i)];
		if (_42717_c < 128LL) {
			(_42413_i)++;
			goto _iter_next_4626663024;
		}
		jule::U8 _43313_x = _1220fe860_FIRST[static_cast<jule::Int>(_42717_c)];
		if (_43313_x == 241LL) {
			(_42413_i)++;
			goto _iter_next_4626663024;
		}
		jule::Int _43817_size = static_cast<jule::Int>(_43313_x & 7LL);
		if ((_42413_i + _43817_size) > _42319_p.len()) {
			(_42413_i)++;
			goto _iter_next_4626663024;
		}
		_1220fe860_accept_range _44313_accept = _1220fe860_ACCEPT_RANGES[static_cast<jule::Int>(_43313_x >> 4LL)];
		_42717_c=_42319_p[static_cast<jule::Int>(_42413_i + 1LL)];
		if ((_42717_c < _44313_accept._field_lo) || (_44313_accept._field_hi < _42717_c)) {
			_43817_size=1LL;
		} else if (_43817_size == 2LL) {
		} else {
			_42717_c=_42319_p[static_cast<jule::Int>(_42413_i + 2LL)];
			if ((_42717_c < 128LL) || (191LL < _42717_c)) {
				_43817_size=1LL;
			} else if (_43817_size == 3LL) {
			} else {
				_42717_c=_42319_p[static_cast<jule::Int>(_42413_i + 3LL)];
				if ((_42717_c < 128LL) || (191LL < _42717_c)) {
					_43817_size=1LL;
				}
			}
		}
		_42413_i+=_43817_size;
	}
	_iter_next_4626663024:;
	goto _iter_begin_4626663024;
	_iter_end_4626663024:;
	_42332_n = _42332_n;
	return _42332_n;
}



inline jule::Int _1220fe860_rune_count_str(jule::Str _46623_s) {
	jule::Int _46633_n = jule::Int();
	jule::Int _46713_i = 0LL;
	_iter_begin_4626698752:;
	if (!(_46713_i < _46623_s.len())) { goto _iter_end_4626698752; }
	{
		jule::U8 _46917_c = _46623_s[static_cast<jule::Int>(_46713_i)];
		if (_46917_c < 128LL) {
			(_46713_i)++;
			goto _iter_next_4626698752;
		}
		jule::U8 _47513_x = _1220fe860_FIRST[static_cast<jule::Int>(_46917_c)];
		if (_47513_x == 241LL) {
			(_46713_i)++;
			goto _iter_next_4626698752;
		}
		jule::Int _48017_size = static_cast<jule::Int>(_47513_x & 7LL);
		if ((_46713_i + _48017_size) > _46623_s.len()) {
			(_46713_i)++;
			goto _iter_next_4626698752;
		}
		_1220fe860_accept_range _48513_accept = _1220fe860_ACCEPT_RANGES[static_cast<jule::Int>(_47513_x >> 4LL)];
		_46917_c=_46623_s[static_cast<jule::Int>(_46713_i + 1LL)];
		if ((_46917_c < _48513_accept._field_lo) || (_48513_accept._field_hi < _46917_c)) {
			_48017_size=1LL;
		} else if (_48017_size == 2LL) {
		} else {
			_46917_c=_46623_s[static_cast<jule::Int>(_46713_i + 2LL)];
			if ((_46917_c < 128LL) || (191LL < _46917_c)) {
				_48017_size=1LL;
			} else if (_48017_size == 3LL) {
			} else {
				_46917_c=_46623_s[static_cast<jule::Int>(_46713_i + 3LL)];
				if ((_46917_c < 128LL) || (191LL < _46917_c)) {
					_48017_size=1LL;
				}
			}
		}
		_46713_i+=_48017_size;
	}
	_iter_next_4626698752:;
	(_46633_n)++;
	goto _iter_begin_4626698752;
	_iter_end_4626698752:;
	_46633_n = _46633_n;
	return _46633_n;
}



inline jule::Bool _1220fe860_rune_start(jule::U8 _51019_b) {
	return (_51019_b & 192LL) != 128LL;
}



inline jule::Bool _1220fe860_valid(jule::Slice<jule::U8> _51314_p) {
	jule::Slice<jule::U8> _51613_cp = (*((&(_51314_p))));
	_iter_begin_4626727392:;
	if (!(_51613_cp.len() >= 8LL)) { goto _iter_end_4626727392; }
	{
		jule::U32 _52213_first32 = ((static_cast<jule::U32>(_51613_cp[static_cast<jule::Int>(0LL)]) | (static_cast<jule::U32>(_51613_cp[static_cast<jule::Int>(1LL)]) << 8LL)) | (static_cast<jule::U32>(_51613_cp[static_cast<jule::Int>(2LL)]) << 16LL)) | (static_cast<jule::U32>(_51613_cp[static_cast<jule::Int>(3LL)]) << 24LL);
		jule::U32 _52313_second32 = ((static_cast<jule::U32>(_51613_cp[static_cast<jule::Int>(4LL)]) | (static_cast<jule::U32>(_51613_cp[static_cast<jule::Int>(5LL)]) << 8LL)) | (static_cast<jule::U32>(_51613_cp[static_cast<jule::Int>(6LL)]) << 16LL)) | (static_cast<jule::U32>(_51613_cp[static_cast<jule::Int>(7LL)]) << 24LL);
		if (((_52213_first32 | _52313_second32) & 2155905152LL) != 0LL) {
			goto _iter_end_4626727392;
		}
		_51613_cp=_51613_cp.slice(static_cast<jule::Int>(8LL));
	}
	_iter_next_4626727392:;
	goto _iter_begin_4626727392;
	_iter_end_4626727392:;
	jule::Int _53013_i = 0LL;
	_iter_begin_4626727920:;
	if (!(_53013_i < _51613_cp.len())) { goto _iter_end_4626727920; }
	{
		jule::U8 _53213_pi = _51613_cp[static_cast<jule::Int>(_53013_i)];
		if (_53213_pi < 128LL) {
			(_53013_i)++;
			goto _iter_next_4626727920;
		}
		jule::U8 _53713_x = _1220fe860_FIRST[static_cast<jule::Int>(_53213_pi)];
		if (_53713_x == 241LL) {
			return false;
		}
		jule::Int _54113_size = static_cast<jule::Int>(_53713_x & 7LL);
		if ((_53013_i + _54113_size) > _51613_cp.len()) {
			return false;
		}
		_1220fe860_accept_range _54513_accept = _1220fe860_ACCEPT_RANGES[static_cast<jule::Int>(_53713_x >> 4LL)];
		jule::U8 _54617_c = _51613_cp[static_cast<jule::Int>(_53013_i + 1LL)];
		if ((_54617_c < _54513_accept._field_lo) || (_54513_accept._field_hi < _54617_c)) {
			return false;
		} else if (_54113_size == 2LL) {
		} else {
			_54617_c=_51613_cp[static_cast<jule::Int>(_53013_i + 2LL)];
			if ((_54617_c < 128LL) || (191LL < _54617_c)) {
				return false;
			} else if (_54113_size == 3LL) {
			} else {
				_54617_c=_51613_cp[static_cast<jule::Int>(_53013_i + 3LL)];
				if ((_54617_c < 128LL) || (191LL < _54617_c)) {
					return false;
				}
			}
		}
		_53013_i+=_54113_size;
	}
	_iter_next_4626727920:;
	goto _iter_begin_4626727920;
	_iter_end_4626727920:;
	return true;
}



inline jule::Bool _1220fe860_valid_str(jule::Str _56822_s) {
	_iter_begin_4626771904:;
	if (!(_56822_s.len() >= 8LL)) { goto _iter_end_4626771904; }
	{
		jule::U32 _57313_first32 = ((static_cast<jule::U32>(_56822_s[static_cast<jule::Int>(0LL)]) | (static_cast<jule::U32>(_56822_s[static_cast<jule::Int>(1LL)]) << 8LL)) | (static_cast<jule::U32>(_56822_s[static_cast<jule::Int>(2LL)]) << 16LL)) | (static_cast<jule::U32>(_56822_s[static_cast<jule::Int>(3LL)]) << 24LL);
		jule::U32 _57413_second32 = ((static_cast<jule::U32>(_56822_s[static_cast<jule::Int>(4LL)]) | (static_cast<jule::U32>(_56822_s[static_cast<jule::Int>(5LL)]) << 8LL)) | (static_cast<jule::U32>(_56822_s[static_cast<jule::Int>(6LL)]) << 16LL)) | (static_cast<jule::U32>(_56822_s[static_cast<jule::Int>(7LL)]) << 24LL);
		if (((_57313_first32 | _57413_second32) & 2155905152LL) != 0LL) {
			goto _iter_end_4626771904;
		}
		_56822_s=_56822_s.slice(static_cast<jule::Int>(8LL));
	}
	_iter_next_4626771904:;
	goto _iter_begin_4626771904;
	_iter_end_4626771904:;
	jule::Int _58113_i = 0LL;
	_iter_begin_4626765120:;
	if (!(_58113_i < _56822_s.len())) { goto _iter_end_4626765120; }
	{
		jule::U8 _58313_si = _56822_s[static_cast<jule::Int>(_58113_i)];
		if (_58313_si < 128LL) {
			(_58113_i)++;
			goto _iter_next_4626765120;
		}
		jule::U8 _58813_x = _1220fe860_FIRST[static_cast<jule::Int>(_58313_si)];
		if (_58813_x == 241LL) {
			return false;
		}
		jule::Int _59213_size = static_cast<jule::Int>(_58813_x & 7LL);
		if ((_58113_i + _59213_size) > _56822_s.len()) {
			return false;
		}
		_1220fe860_accept_range _59613_accept = _1220fe860_ACCEPT_RANGES[static_cast<jule::Int>(_58813_x >> 4LL)];
		jule::U8 _59717_c = _56822_s[static_cast<jule::Int>(_58113_i + 1LL)];
		if ((_59717_c < _59613_accept._field_lo) || (_59613_accept._field_hi < _59717_c)) {
			return false;
		} else if (_59213_size == 2LL) {
		} else {
			_59717_c=_56822_s[static_cast<jule::Int>(_58113_i + 2LL)];
			if ((_59717_c < 128LL) || (191LL < _59717_c)) {
				return false;
			} else if (_59213_size == 3LL) {
			} else {
				_59717_c=_56822_s[static_cast<jule::Int>(_58113_i + 3LL)];
				if ((_59717_c < 128LL) || (191LL < _59717_c)) {
					return false;
				}
			}
		}
		_58113_i+=_59213_size;
	}
	_iter_next_4626765120:;
	goto _iter_begin_4626765120;
	_iter_end_4626765120:;
	return true;
}



inline jule::Bool _1220fe860_valid_rune(jule::I32 _62019_r) {
	{
		if (!(((0LL <= _62019_r) && (_62019_r < 55296LL)))) { goto _case_end_4626821568; }
		_case_begin_4626821568:;
		{
			return true;
		}
		goto _match_end_4626820272;
		_case_end_4626821568:;
		if (!(((57343LL < _62019_r) && (_62019_r <= 1114111LL)))) { goto _case_end_4626821680; }
		_case_begin_4626821680:;
		{
			return true;
		}
		goto _match_end_4626820272;
		_case_end_4626821680:;
		_case_begin_4626820480:;
		{
			return false;
		}
		goto _match_end_4626820272;
		_case_end_4626820480:;
		_match_end_4626820272:;
	}
}



inline jule::Bool _111613f20_is_unary_op(jule::Str _31020_kind) {
	{
		auto __julec_range_expr = _111613f20_UNARY_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _111613f20_op = *__julec_range_begin;
			_iter_begin_4627269312:;
			{
				if (_31020_kind == _111613f20_op) {
					return true;
				}
			}
			_iter_next_4627269312:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111613f20_op = *__julec_range_begin; goto _iter_begin_4627269312; }
			_iter_end_4627269312:;
		}
	}
	return false;
}



inline jule::Bool _111613f20_is_bin_op(jule::Str _32118_kind) {
	{
		auto __julec_range_expr = _111613f20_BIN_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _111613f20_op = *__julec_range_begin;
			_iter_begin_4627273584:;
			{
				if (_32118_kind == _111613f20_op) {
					return true;
				}
			}
			_iter_next_4627273584:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111613f20_op = *__julec_range_begin; goto _iter_begin_4627273584; }
			_iter_end_4627273584:;
		}
	}
	return false;
}



inline jule::Bool _111613f20_is_weak_op(jule::Str _33219_kind) {
	{
		auto __julec_range_expr = _111613f20_WEAK_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _111613f20_op = *__julec_range_begin;
			_iter_begin_4627275664:;
			{
				if (_33219_kind == _111613f20_op) {
					return true;
				}
			}
			_iter_next_4627275664:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111613f20_op = *__julec_range_begin; goto _iter_begin_4627275664; }
			_iter_end_4627275664:;
		}
	}
	return false;
}



inline jule::Bool _111613f20_is_str(jule::Str _34315_k) {
	return (_34315_k != jule::Str("", 0)) && ((_34315_k[static_cast<jule::Int>(0LL)] == '\"') || _111613f20_is_raw_str(_34315_k));
}



inline jule::Bool _111613f20_is_raw_str(jule::Str _34519_k) {
	return (_34519_k != jule::Str("", 0)) && (_34519_k[static_cast<jule::Int>(0LL)] == '`');
}



inline jule::Bool _111613f20_is_rune(jule::Str _34816_k) {
	return (_34816_k != jule::Str("", 0)) && (_34816_k[static_cast<jule::Int>(0LL)] == '\'');
}



inline jule::Bool _111613f20_is_nil(jule::Str _35015_k) {
	return _35015_k == jule::Str("nil", 3);
}



inline jule::Bool _111613f20_is_bool(jule::Str _35216_k) {
	return (_35216_k == jule::Str("true", 4)) || (_35216_k == jule::Str("false", 5));
}



inline jule::Bool _111613f20_contains_any(jule::Str _35417_s,jule::Str _35425_bytes) {
	{
		auto __julec_range_expr = _35425_bytes;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::U8 _111613f20_b = *__julec_range_begin;
			_iter_begin_4627288480:;
			{
				jule::Int _35613_i = _35417_s.find(static_cast<jule::Str>(_111613f20_b));
				if (_35613_i >= 0LL) {
					return true;
				}
			}
			_iter_next_4627288480:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111613f20_b = *__julec_range_begin; goto _iter_begin_4627288480; }
			_iter_end_4627288480:;
		}
	}
	return false;
}



inline jule::Bool _111613f20_is_float(jule::Str _36617_k) {
	if (_36617_k.has_prefix(jule::Str("0x", 2))) {
		return _111613f20_contains_any(_36617_k,jule::Str(".pP", 3));
	}
	return _111613f20_contains_any(_36617_k,jule::Str(".eE", 3));
}



inline jule::Bool _111613f20_is_num(jule::Str _37515_k) {
	if (_37515_k == jule::Str("", 0)) {
		return false;
	}
	jule::U8 _3809_b = _37515_k[static_cast<jule::Int>(0LL)];
	return (_3809_b == '.') || (('0' <= _3809_b) && (_3809_b <= '9'));
}



inline jule::Bool _111613f20_is_lit(jule::Str _38515_k) {
	return (((_111613f20_is_num(_38515_k) || _111613f20_is_str(_38515_k)) || _111613f20_is_rune(_38515_k)) || _111613f20_is_nil(_38515_k)) || _111613f20_is_bool(_38515_k);
}



inline jule::Bool _111613f20_is_ignore_ident(jule::Str _39024_ident) {
	return _39024_ident == jule::Str("_", 1);
}



inline jule::Bool _111613f20_is_anon_ident(jule::Str _39222_ident) {
	return _39222_ident == jule::Str("<anonymous>", 11);
}



inline jule::Bool _111613f20_is_punct(jule::I32 _39517_r) {
	{
		auto __julec_range_expr = _111613f20_PUNCTS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::I32 _111613f20_cr = *__julec_range_begin;
			_iter_begin_4627311840:;
			{
				if (_39517_r == _111613f20_cr) {
					return true;
				}
			}
			_iter_next_4627311840:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111613f20_cr = *__julec_range_begin; goto _iter_begin_4627311840; }
			_iter_end_4627311840:;
		}
	}
	return false;
}



inline jule::Bool _111613f20_is_space(jule::I32 _40617_r) {
	{
		auto __julec_range_expr = _111613f20_SPACES;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::I32 _111613f20_cr = *__julec_range_begin;
			_iter_begin_4627314384:;
			{
				if (_40617_r == _111613f20_cr) {
					return true;
				}
			}
			_iter_next_4627314384:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111613f20_cr = *__julec_range_begin; goto _iter_begin_4627314384; }
			_iter_end_4627314384:;
		}
	}
	return false;
}



inline jule::Bool _111613f20_is_letter(jule::I32 _41718_r) {
	return (('a' <= _41718_r) && (_41718_r <= 'z')) || (('A' <= _41718_r) && (_41718_r <= 'Z'));
}



inline jule::Bool _111613f20_is_ident_rune(jule::Str _42322_s) {
	if (_42322_s == jule::Str("", 0)) {
		return false;
	}
	if (_42322_s[static_cast<jule::Int>(0LL)] != '_') {
		jule::I32 _42914_r;
		std::tie(_42914_r,std::ignore) = _1220fe860_decode_rune_str(_42322_s);
		if ((!(_111613f20_is_letter(_42914_r)))) {
			return false;
		}
	}
	return true;
}



inline jule::Bool _111613f20_is_decimal(jule::U8 _43919_b) {
	return ('0' <= _43919_b) && (_43919_b <= '9');
}



inline jule::Bool _111613f20_is_binary(jule::U8 _44118_b) {
	return (_44118_b == '0') || (_44118_b == '1');
}



inline jule::Bool _111613f20_is_octal(jule::U8 _44317_b) {
	return ('0' <= _44317_b) && (_44317_b <= '7');
}



inline jule::Bool _111613f20_is_hex(jule::U8 _44615_b) {
	{
		if (!((('0' <= _44615_b) && (_44615_b <= '9')))) { goto _case_end_4627334304; }
		_case_begin_4627334304:;
		{
			return true;
		}
		goto _match_end_4627332064;
		_case_end_4627334304:;
		if (!((('a' <= _44615_b) && (_44615_b <= 'f')))) { goto _case_end_4627335968; }
		_case_begin_4627335968:;
		{
			return true;
		}
		goto _match_end_4627332064;
		_case_end_4627335968:;
		if (!((('A' <= _44615_b) && (_44615_b <= 'F')))) { goto _case_end_4627336080; }
		_case_begin_4627336080:;
		{
			return true;
		}
		goto _match_end_4627332064;
		_case_end_4627336080:;
		_case_begin_4627333248:;
		{
			return false;
		}
		goto _match_end_4627332064;
		_case_end_4627333248:;
		_match_end_4627332064:;
	}
}



inline jule::Bool _111613f20_is_assign(jule::Uint _45818_id) {
	return ((((((_45818_id == 2LLU) || (_45818_id == 31LLU)) || (_45818_id == 34LLU)) || (_45818_id == 20LLU)) || (_45818_id == 28LLU)) || (_45818_id == 3LLU)) || (_45818_id == 7LLU);
}



inline jule::Bool _111613f20_is_postfix_op(jule::Str _47122_kind) {
	{
		auto __julec_range_expr = _111613f20_POSTFIX_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _111613f20_op = *__julec_range_begin;
			_iter_begin_4627338784:;
			{
				if (_47122_kind == _111613f20_op) {
					return true;
				}
			}
			_iter_next_4627338784:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111613f20_op = *__julec_range_begin; goto _iter_begin_4627338784; }
			_iter_end_4627338784:;
		}
	}
	return false;
}



inline jule::Bool _111613f20_is_assign_op(jule::Str _48221_kind) {
	if (_111613f20_is_postfix_op(_48221_kind)) {
		return true;
	}
	{
		auto __julec_range_expr = _111613f20_ASSING_OPS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _111613f20_op = *__julec_range_begin;
			_iter_begin_4627348416:;
			{
				if (_48221_kind == _111613f20_op) {
					return true;
				}
			}
			_iter_next_4627348416:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111613f20_op = *__julec_range_begin; goto _iter_begin_4627348416; }
			_iter_end_4627348416:;
		}
	}
	return false;
}



inline jule::Ref<_1220fd110_File> _1220fd110_new_file_set(jule::Str _4021_path) {
	return jule::new_struct<_1220fd110_File>(new( std::nothrow ) _1220fd110_File(_4021_path,_11203c360_Vector_0()));
}



inline _1316b4080_Log _1116b7f10_make_err(jule::Int _10413_row,jule::Int _10423_col,jule::Ref<_1220fd110_File> _10433_f,jule::Str _10443_key,jule::Slice<jule::Any> _10453_args) {
	return _1316b4080_Log(1LLU,_10413_row,_10423_col,_10433_f->_method_path(),_1316b2ff0_errorf(_10443_key,_10453_args));
}



inline jule::Bool _1116b7f10_bytes_has_prefix(jule::Slice<jule::U8> _11421_bytes,jule::Str _11436_prefix) {
	if (_11421_bytes.len() < _11436_prefix.len()) {
		return false;
	}
	{
		auto __julec_range_expr = _11436_prefix;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1116b7f10_i = 0;
			_iter_begin_4627356432:;
			{
				if (_11421_bytes[static_cast<jule::Int>(_1116b7f10_i)] != _11436_prefix[static_cast<jule::Int>(_1116b7f10_i)]) {
					return false;
				}
			}
			_iter_next_4627356432:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1116b7f10_i; goto _iter_begin_4627356432; }
			_iter_end_4627356432:;
		}
	}
	return true;
}



inline jule::Str _1116b7f10_float_fmt_e(jule::Slice<jule::U8> _12616_txt,jule::Int _12633_i) {
	jule::Str _12643_lit = jule::Str();
	(_12633_i)++;
	if (_12633_i >= _12616_txt.len()) {
		return _12643_lit;
	}
	jule::U8 _1329_b = _12616_txt[static_cast<jule::Int>(_12633_i)];
	if ((_1329_b == '+') || (_1329_b == '-')) {
		(_12633_i)++;
		if (_12633_i >= _12616_txt.len()) {
			return _12643_lit;
		}
	}
	jule::Int _1409_first = _12633_i;
	_iter_begin_4627390208:;
	if (!(_12633_i < _12616_txt.len())) { goto _iter_end_4627390208; }
	{
		jule::U8 _14213_b = _12616_txt[static_cast<jule::Int>(_12633_i)];
		if ((!(_111613f20_is_decimal(_14213_b)))) {
			goto _iter_end_4627390208;
		}
	}
	_iter_next_4627390208:;
	(_12633_i)++;
	goto _iter_begin_4627390208;
	_iter_end_4627390208:;
	if (_12633_i == _1409_first) {
		_12643_lit = jule::Str("", 0);
		return _12643_lit;
	}
	_12643_lit = static_cast<jule::Str>(_12616_txt.slice(0LL,static_cast<jule::Int>(_12633_i)));
	return _12643_lit;
}



inline jule::Str _1116b7f10_float_fmt_p(jule::Slice<jule::U8> _15416_txt,jule::Int _15429_i) {
	return _1116b7f10_float_fmt_e(_15416_txt,_15429_i);
}



inline jule::Str _1116b7f10_float_fmt_dotnp(jule::Slice<jule::U8> _15620_txt,jule::Int _15637_i) {
	if (_15620_txt[static_cast<jule::Int>(_15637_i)] != '.') {
		return jule::Str("", 0);
	}
	(_15637_i)++;
	_julec_label_loop:;
	_iter_begin_4627401904:;
	if (!(_15637_i < _15620_txt.len())) { goto _iter_end_4627401904; }
	{
		jule::U8 _16413_b = _15620_txt[static_cast<jule::Int>(_15637_i)];
		{
			if (!((_111613f20_is_decimal(_16413_b)))) { goto _case_end_4627406608; }
			_case_begin_4627406608:;
			{
				goto _iter_next_4627401904;
			}
			goto _match_end_4627406048;
			_case_end_4627406608:;
			if (!((_1116b7f10_is_float_fmt_p(_16413_b,_15637_i)))) { goto _case_end_4627406720; }
			_case_begin_4627406720:;
			{
				return _1116b7f10_float_fmt_p(_15620_txt,_15637_i);
			}
			goto _match_end_4627406048;
			_case_end_4627406720:;
			_case_begin_4627406304:;
			{
				goto _iter_end_4627401904;
			}
			goto _match_end_4627406048;
			_case_end_4627406304:;
			_match_end_4627406048:;
		}
	}
	_iter_next_4627401904:;
	(_15637_i)++;
	goto _iter_begin_4627401904;
	_iter_end_4627401904:;
	return jule::Str("", 0);
}



inline jule::Str _1116b7f10_float_fmt_dotfp(jule::Slice<jule::U8> _17420_txt,jule::Int _17437_i) {
	_17437_i+=2LL;
	return _1116b7f10_float_fmt_e(_17420_txt,_17437_i);
}



inline jule::Str _1116b7f10_float_fmt_dotp(jule::Slice<jule::U8> _18119_txt,jule::Int _18136_i) {
	(_18136_i)++;
	return _1116b7f10_float_fmt_e(_18119_txt,_18136_i);
}



inline jule::Str _1116b7f10_float_num(jule::Slice<jule::U8> _18814_txt,jule::Int _18831_i) {
	jule::Str _18841_lit = jule::Str();
	(_18831_i)++;
	_iter_begin_4627418192:;
	if (!(_18831_i < _18814_txt.len())) { goto _iter_end_4627418192; }
	{
		jule::U8 _19113_b = _18814_txt[static_cast<jule::Int>(_18831_i)];
		if ((_18831_i > 1LL) && ((_19113_b == 'e') || (_19113_b == 'E'))) {
			_18841_lit = _1116b7f10_float_fmt_e(_18814_txt,_18831_i);
			return _18841_lit;
		}
		if ((!(_111613f20_is_decimal(_19113_b)))) {
			goto _iter_end_4627418192;
		}
	}
	_iter_next_4627418192:;
	(_18831_i)++;
	goto _iter_begin_4627418192;
	_iter_end_4627418192:;
	if (_18831_i == 1LL) {
		return _18841_lit;
	}
	_18841_lit = static_cast<jule::Str>(_18814_txt.slice(0LL,static_cast<jule::Int>(_18831_i)));
	return _18841_lit;
}



inline jule::Str _1116b7f10_common_num(jule::Slice<jule::U8> _20615_txt) {
	jule::Str _20630_lit = jule::Str();
	jule::Int _20713_i = 0LL;
	_julec_label_loop:;
	_iter_begin_4627429472:;
	if (!(_20713_i < _20615_txt.len())) { goto _iter_end_4627429472; }
	{
		jule::U8 _21013_b = _20615_txt[static_cast<jule::Int>(_20713_i)];
		{
			if (!((_21013_b == '.'))) { goto _case_end_4627432800; }
			_case_begin_4627432800:;
			{
				_20630_lit = _1116b7f10_float_num(_20615_txt,_20713_i);
				return _20630_lit;
			}
			goto _match_end_4627432480;
			_case_end_4627432800:;
			if (!((_1116b7f10_is_float_fmt_e(_21013_b,_20713_i)))) { goto _case_end_4627432912; }
			_case_begin_4627432912:;
			{
				_20630_lit = _1116b7f10_float_fmt_e(_20615_txt,_20713_i);
				return _20630_lit;
			}
			goto _match_end_4627432480;
			_case_end_4627432912:;
			if (!(((!(_111613f20_is_decimal(_21013_b)))))) { goto _case_end_4627433024; }
			_case_begin_4627433024:;
			{
				goto _iter_end_4627429472;
			}
			goto _match_end_4627432480;
			_case_end_4627433024:;
			_match_end_4627432480:;
		}
	}
	_iter_next_4627429472:;
	(_20713_i)++;
	goto _iter_begin_4627429472;
	_iter_end_4627429472:;
	if (_20713_i == 0LL) {
		return _20630_lit;
	}
	_20630_lit = static_cast<jule::Str>(_20615_txt.slice(0LL,static_cast<jule::Int>(_20713_i)));
	return _20630_lit;
}



inline jule::Str _1116b7f10_binary_num(jule::Slice<jule::U8> _22415_txt) {
	jule::Str _22430_lit = jule::Str();
	if ((!(_1116b7f10_bytes_has_prefix(_22415_txt,jule::Str("0b", 2))))) {
		_22430_lit = jule::Str("", 0);
		return _22430_lit;
	}
	if (_22415_txt.len() < 2LL) {
		return _22430_lit;
	}
	
	jule::Int _23313_i = 2LL;
	_iter_begin_4627443824:;
	if (!(_23313_i < _22415_txt.len())) { goto _iter_end_4627443824; }
	{
		if ((!(_111613f20_is_binary(_22415_txt[static_cast<jule::Int>(_23313_i)])))) {
			goto _iter_end_4627443824;
		}
	}
	_iter_next_4627443824:;
	(_23313_i)++;
	goto _iter_begin_4627443824;
	_iter_end_4627443824:;
	if (_23313_i == 2LL) {
		return _22430_lit;
	}
	_22430_lit = static_cast<jule::Str>(_22415_txt.slice(0LL,static_cast<jule::Int>(_23313_i)));
	return _22430_lit;
}



inline jule::Bool _1116b7f10_is_float_fmt_e(jule::U8 _24619_b,jule::Int _24628_i) {
	return (_24628_i > 0LL) && ((_24619_b == 'e') || (_24619_b == 'E'));
}



inline jule::Bool _1116b7f10_is_float_fmt_p(jule::U8 _24719_b,jule::Int _24728_i) {
	return (_24728_i > 0LL) && ((_24719_b == 'p') || (_24719_b == 'P'));
}



inline jule::Bool _1116b7f10_is_float_fmt_dotnp(jule::Slice<jule::U8> _24923_txt,jule::Int _24940_i) {
	if (_24923_txt[static_cast<jule::Int>(_24940_i)] != '.') {
		return false;
	}
	(_24940_i)++;
	_julec_label_loop:;
	_iter_begin_4627461472:;
	if (!(_24940_i < _24923_txt.len())) { goto _iter_end_4627461472; }
	{
		jule::U8 _25713_b = _24923_txt[static_cast<jule::Int>(_24940_i)];
		{
			if (!((_111613f20_is_decimal(_25713_b)))) { goto _case_end_4627465120; }
			_case_begin_4627465120:;
			{
				goto _iter_next_4627461472;
			}
			goto _match_end_4627464560;
			_case_end_4627465120:;
			if (!((_1116b7f10_is_float_fmt_p(_25713_b,_24940_i)))) { goto _case_end_4627465232; }
			_case_begin_4627465232:;
			{
				return true;
			}
			goto _match_end_4627464560;
			_case_end_4627465232:;
			_case_begin_4627464816:;
			{
				goto _iter_end_4627461472;
			}
			goto _match_end_4627464560;
			_case_end_4627464816:;
			_match_end_4627464560:;
		}
	}
	_iter_next_4627461472:;
	(_24940_i)++;
	goto _iter_begin_4627461472;
	_iter_end_4627461472:;
	return false;
}



inline jule::Bool _1116b7f10_is_float_fmt_dotp(jule::Slice<jule::U8> _26822_txt,jule::Int _26835_i) {
	{
		if (!((_26822_txt.len() < 3LL))) { goto _case_end_4627472256; }
		_case_begin_4627472256:;
		{
			goto _case_begin_4627472368;
		}
		goto _match_end_4627470896;
		_case_end_4627472256:;
		if (!((_26822_txt[static_cast<jule::Int>(_26835_i)] != '.'))) { goto _case_end_4627472368; }
		_case_begin_4627472368:;
		{
			goto _case_begin_4627473232;
		}
		goto _match_end_4627470896;
		_case_end_4627472368:;
		if (!(((_26822_txt[static_cast<jule::Int>(_26835_i + 1LL)] != 'p') && (_26822_txt[static_cast<jule::Int>(_26835_i + 1LL)] != 'P')))) { goto _case_end_4627473232; }
		_case_begin_4627473232:;
		{
			return false;
		}
		goto _match_end_4627470896;
		_case_end_4627473232:;
		_case_begin_4627471104:;
		{
			return true;
		}
		goto _match_end_4627470896;
		_case_end_4627471104:;
		_match_end_4627470896:;
	}
}



inline jule::Bool _1116b7f10_is_float_fmt_dotfp(jule::Slice<jule::U8> _27723_txt,jule::Int _27736_i) {
	{
		if (!((_27723_txt.len() < 4LL))) { goto _case_end_4627480688; }
		_case_begin_4627480688:;
		{
			goto _case_begin_4627480800;
		}
		goto _match_end_4627479312;
		_case_end_4627480688:;
		if (!((_27723_txt[static_cast<jule::Int>(_27736_i)] != '.'))) { goto _case_end_4627480800; }
		_case_begin_4627480800:;
		{
			goto _case_begin_4627481648;
		}
		goto _match_end_4627479312;
		_case_end_4627480800:;
		if (!(((_27723_txt[static_cast<jule::Int>(_27736_i + 1LL)] != 'f') && (_27723_txt[static_cast<jule::Int>(_27736_i + 1LL)] != 'F')))) { goto _case_end_4627481648; }
		_case_begin_4627481648:;
		{
			goto _case_begin_4627481760;
		}
		goto _match_end_4627479312;
		_case_end_4627481648:;
		if (!(((_27723_txt[static_cast<jule::Int>(_27736_i + 2LL)] != 'p') && (_27723_txt[static_cast<jule::Int>(_27736_i + 1LL)] != 'P')))) { goto _case_end_4627481760; }
		_case_begin_4627481760:;
		{
			return false;
		}
		goto _match_end_4627479312;
		_case_end_4627481760:;
		_case_begin_4627479568:;
		{
			return true;
		}
		goto _match_end_4627479312;
		_case_end_4627479568:;
		_match_end_4627479312:;
	}
}



inline jule::Str _1116b7f10_octal_num(jule::Slice<jule::U8> _28714_txt) {
	jule::Str _28729_lit = jule::Str();
	if (_28714_txt[static_cast<jule::Int>(0LL)] != '0') {
		_28729_lit = jule::Str("", 0);
		return _28729_lit;
	}
	if (_28714_txt.len() < 2LL) {
		return _28729_lit;
	}
	jule::Int _29513_octal_start = 1LL;
	if (_28714_txt[static_cast<jule::Int>(1LL)] == 'o') {
		if (_28714_txt.len() < 3LL) {
			return _28729_lit;
		}
		(_29513_octal_start)++;
	}
	jule::Int _30413_i = _29513_octal_start;
	_iter_begin_4627497376:;
	if (!(_30413_i < _28714_txt.len())) { goto _iter_end_4627497376; }
	{
		jule::U8 _30613_b = _28714_txt[static_cast<jule::Int>(_30413_i)];
		if (_1116b7f10_is_float_fmt_e(_30613_b,_30413_i)) {
			_28729_lit = _1116b7f10_float_fmt_e(_28714_txt,_30413_i);
			return _28729_lit;
		}
		if ((!(_111613f20_is_octal(_30613_b)))) {
			goto _iter_end_4627497376;
		}
	}
	_iter_next_4627497376:;
	(_30413_i)++;
	goto _iter_begin_4627497376;
	_iter_end_4627497376:;
	if (_30413_i == _29513_octal_start) {
		return _28729_lit;
	}
	_28729_lit = static_cast<jule::Str>(_28714_txt.slice(0LL,static_cast<jule::Int>(_30413_i)));
	return _28729_lit;
}



inline jule::Str _1116b7f10_hex_num(jule::Slice<jule::U8> _32112_txt) {
	jule::Str _32127_lit = jule::Str();
	if (_32112_txt.len() < 3LL) {
		return _32127_lit;
	}
	if ((_32112_txt[static_cast<jule::Int>(0LL)] != '0') || ((_32112_txt[static_cast<jule::Int>(1LL)] != 'x') && (_32112_txt[static_cast<jule::Int>(1LL)] != 'X'))) {
		return _32127_lit;
	}
	
	jule::Int _33013_i = 2LL;
	_julec_label_loop:;
	_iter_begin_4627516192:;
	if (!(_33013_i < _32112_txt.len())) { goto _iter_end_4627516192; }
	{
		jule::U8 _33313_b = _32112_txt[static_cast<jule::Int>(_33013_i)];
		{
			if (!((_1116b7f10_is_float_fmt_dotp(_32112_txt,_33013_i)))) { goto _case_end_4627519568; }
			_case_begin_4627519568:;
			{
				_32127_lit = _1116b7f10_float_fmt_dotp(_32112_txt,_33013_i);
				return _32127_lit;
			}
			goto _match_end_4627519216;
			_case_end_4627519568:;
			if (!((_1116b7f10_is_float_fmt_dotfp(_32112_txt,_33013_i)))) { goto _case_end_4627519680; }
			_case_begin_4627519680:;
			{
				_32127_lit = _1116b7f10_float_fmt_dotfp(_32112_txt,_33013_i);
				return _32127_lit;
			}
			goto _match_end_4627519216;
			_case_end_4627519680:;
			if (!((_1116b7f10_is_float_fmt_p(_33313_b,_33013_i)))) { goto _case_end_4627519792; }
			_case_begin_4627519792:;
			{
				_32127_lit = _1116b7f10_float_fmt_p(_32112_txt,_33013_i);
				return _32127_lit;
			}
			goto _match_end_4627519216;
			_case_end_4627519792:;
			if (!((_1116b7f10_is_float_fmt_dotnp(_32112_txt,_33013_i)))) { goto _case_end_4627519904; }
			_case_begin_4627519904:;
			{
				_32127_lit = _1116b7f10_float_fmt_dotnp(_32112_txt,_33013_i);
				return _32127_lit;
			}
			goto _match_end_4627519216;
			_case_end_4627519904:;
			if (!(((!(_111613f20_is_hex(_33313_b)))))) { goto _case_end_4627520016; }
			_case_begin_4627520016:;
			{
				goto _iter_end_4627516192;
			}
			goto _match_end_4627519216;
			_case_end_4627520016:;
			_match_end_4627519216:;
		}
	}
	_iter_next_4627516192:;
	(_33013_i)++;
	goto _iter_begin_4627516192;
	_iter_end_4627516192:;
	if (_33013_i == 2LL) {
		return _32127_lit;
	}
	_32127_lit = static_cast<jule::Str>(_32112_txt.slice(0LL,static_cast<jule::Int>(_33013_i)));
	return _32127_lit;
}



inline jule::Str _1116b7f10_hex_escape(jule::Slice<jule::U8> _35815_txt,jule::Int _35828_n) {
	jule::Str _35838_seq = jule::Str();
	if (_35815_txt.len() < _35828_n) {
		return _35838_seq;
	}
	
	jule::Int _36413_i = 2LL;
	_iter_begin_4627534880:;
	if (!(_36413_i < _35828_n)) { goto _iter_end_4627534880; }
	{
		if ((!(_111613f20_is_hex(_35815_txt[static_cast<jule::Int>(_36413_i)])))) {
			return _35838_seq;
		}
	}
	_iter_next_4627534880:;
	(_36413_i)++;
	goto _iter_begin_4627534880;
	_iter_end_4627534880:;
	_35838_seq=static_cast<jule::Str>(_35815_txt.slice(0LL,static_cast<jule::Int>(_35828_n)));
	return _35838_seq;
}



inline jule::Str _1116b7f10_big_unicode_point_escape(jule::Slice<jule::U8> _37629_txt) {
	return _1116b7f10_hex_escape(_37629_txt,10LL);
}



inline jule::Str _1116b7f10_little_unicode_point_escape(jule::Slice<jule::U8> _37932_txt) {
	return _1116b7f10_hex_escape(_37932_txt,6LL);
}



inline jule::Str _1116b7f10_hex_byte_escape(jule::Slice<jule::U8> _38220_txt) {
	return _1116b7f10_hex_escape(_38220_txt,4LL);
}



inline jule::Str _1116b7f10_byte_escape(jule::Slice<jule::U8> _38516_txt) {
	jule::Str _38531_seq = jule::Str();
	if (_38516_txt.len() < 4LL) {
		return _38531_seq;
	}
	if (((!(_111613f20_is_octal(_38516_txt[static_cast<jule::Int>(1LL)]))) || (!(_111613f20_is_octal(_38516_txt[static_cast<jule::Int>(2LL)])))) || (!(_111613f20_is_octal(_38516_txt[static_cast<jule::Int>(3LL)])))) {
		return _38531_seq;
	}
	_38531_seq = static_cast<jule::Str>(_38516_txt.slice(0LL,static_cast<jule::Int>(4LL)));
	return _38531_seq;
}



inline jule::Slice<_1316b4080_Log> _1116b7f10_lex(jule::Ref<_1220fd110_File> _77516_f,jule::Slice<jule::U8> _77526_text) {
	if ((!(jule::real(_77516_f)))) {
		return nullptr;
	}
	_1116b7f10_Lex _78013_lex = _1116b7f10_Lex(jule::Bool(),_11203c360_Vector_0(),_77526_text,_77516_f,0LL,jule::Int(),-1LL,jule::Slice<_1316b4080_Log>());
	_78013_lex._method_new_line();
	_78013_lex._method_lex();
	if (_78013_lex._field_errors.len() > 0LL) {
		return _78013_lex._field_errors;
	}
	_77516_f->_field__tokens=_78013_lex._field_tokens;
	return nullptr;
}



inline jule::Ref<_11166e240_FileInfo> _11166e240_parse_file(jule::Ref<_1220fd110_File> _2223_f) {
	if ((!(jule::real(_2223_f)))) {
		return jule::new_ref<_11166e240_FileInfo>();
	}
	jule::Ref<_11166e240_FileInfo> _2713_finf = jule::new_struct<_11166e240_FileInfo>(new( std::nothrow ) _11166e240_FileInfo());
	std::tie(_2713_finf->_field_ast,_2713_finf->_field_errors) = _11166e240_parse_fileset(_2223_f);
	if (_2713_finf->_field_errors.len() > 0LL) {
		jule::drop(_2713_finf->_field_ast);
	}
	return _2713_finf;
}



inline jule::Ref<_11166e240_PackageInfo> _11166e240_parse_package(jule::Slice<jule::Ref<_1220fd110_File>> _3926_filesets) {
	if (_3926_filesets == nullptr) {
		return jule::new_ref<_11166e240_PackageInfo>();
	}
	jule::Ref<_11166e240_PackageInfo> _4413_pinf = jule::new_struct<_11166e240_PackageInfo>(new( std::nothrow ) _11166e240_PackageInfo());
	_4413_pinf->_field_files=jule::Slice<jule::Ref<_11166e240_FileInfo>>::alloc(static_cast<jule::Int>(0LL),static_cast<jule::Int>(static_cast<jule::I64>(_3926_filesets.len())));
	{
		auto __julec_range_expr = _3926_filesets;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1220fd110_File> _11166e240_f = *__julec_range_begin;
			_iter_begin_4629232640:;
			{
				if ((!(jule::real(_11166e240_f)))) {
					goto _iter_next_4629232640;
				}
				jule::Ref<_11166e240_FileInfo> _5117_finfo = _11166e240_parse_file(_11166e240_f);
				_4413_pinf->_field_files=append(_4413_pinf->_field_files,jule::Slice<jule::Ref<_11166e240_FileInfo>>({_5117_finfo}));
			}
			_iter_next_4629232640:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11166e240_f = *__julec_range_begin; goto _iter_begin_4629232640; }
			_iter_end_4629232640:;
		}
	}
	return _4413_pinf;
}



inline std::tuple<jule::Ref<_1220cb5d0_Ast>,jule::Slice<_1316b4080_Log>> _11166e240_parse_fileset(jule::Ref<_1220fd110_File> _5822_f) {
	jule::Ref<_111681860_Parser> _5913_p = jule::new_struct<_111681860_Parser>(new( std::nothrow ) _111681860_Parser());
	_5913_p->_method_parse(_5822_f);
	return std::make_tuple(_5913_p->_field_ast,_5913_p->_field_errors);
}



inline jule::Ref<_111612b20_ScopeTree> _11167f570_new_scope(void) {
	return jule::new_struct<_111612b20_ScopeTree>(new( std::nothrow ) _111612b20_ScopeTree());
}



inline std::tuple<jule::Bool,jule::Bool> _11167f570_is_st(_111613f20_Token _4310_current,_111613f20_Token _4326_prev) {
	jule::Bool _4351_terminated = jule::Bool();
	jule::Bool _4341_ok = jule::Bool();
	_4341_ok=(_4310_current._field_id == 5LLU) || (_4326_prev._field_row < _4310_current._field_row);
	_4351_terminated=_4310_current._field_id == 5LLU;
	return std::make_tuple(_4341_ok,_4351_terminated);
}



inline std::tuple<jule::Int,jule::Bool> _11167f570_next_st_pos(jule::Slice<_111613f20_Token> _5016_tokens,jule::Int _5033_start) {
	jule::Int _5113_brace_n = 0LL;
	jule::Int _5213_i = _5033_start;
	_iter_begin_4629257088:;
	if (!(_5213_i < _5016_tokens.len())) { goto _iter_end_4629257088; }
	{
		jule::Bool _5417_ok = false;
		jule::Bool _5517_terminated = false;
		_111613f20_Token _5613_tok = _5016_tokens[static_cast<jule::Int>(_5213_i)];
		{
			auto _match_expr{ _5613_tok._field_id };
			if (!((3LLU) == _match_expr)) { goto _case_end_4629263520; }
			_case_begin_4629263520:;
			{
				{
					auto _match_expr{ _5613_tok._field_kind };
					if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4629272256; }
					_case_begin_4629272256:;
					{
						if ((_5113_brace_n == 0LL) && (_5213_i > _5033_start)) {
							std::tie(_5417_ok,_5517_terminated) = _11167f570_is_st(_5613_tok,_5016_tokens[static_cast<jule::Int>(_5213_i - 1LL)]);
							if (_5417_ok) {
								goto _julec_label_return;
							}
						}
						(_5113_brace_n)++;
						goto _iter_next_4629257088;
					}
					goto _match_end_4629263872;
					_case_end_4629272256:;
					_case_begin_4629265328:;
					{
						(_5113_brace_n)--;
						if ((_5113_brace_n == 0LL) && ((_5213_i + 1LL) < _5016_tokens.len())) {
							std::tie(_5417_ok,_5517_terminated) = _11167f570_is_st(_5016_tokens[static_cast<jule::Int>(_5213_i + 1LL)],_5613_tok);
							if (_5417_ok) {
								(_5213_i)++;
								goto _julec_label_return;
							}
						}
						goto _iter_next_4629257088;
					}
					goto _match_end_4629263872;
					_case_end_4629265328:;
					_match_end_4629263872:;
				}
			}
			goto _match_end_4629261040;
			_case_end_4629263520:;
			_match_end_4629261040:;
		}
		if (_5113_brace_n != 0LL) {
			goto _iter_next_4629257088;
		} else if (_5213_i > _5033_start) {
			_111613f20_Token _8817_prev = _5016_tokens[static_cast<jule::Int>(_5213_i - 1LL)];
			if (((_8817_prev._field_id == 7LLU) && _111613f20_is_bin_op(_8817_prev._field_kind)) && (_8817_prev._field_row < _5613_tok._field_row)) {
				goto _iter_next_4629257088;
			}
			std::tie(_5417_ok,_5517_terminated) = _11167f570_is_st(_5613_tok,_8817_prev);
		} else {
			std::tie(_5417_ok,_5517_terminated) = _11167f570_is_st(_5613_tok,_5613_tok);
		}
		if ((!(_5417_ok))) {
			goto _iter_next_4629257088;
		}
		_julec_label_return:;
		if (_5517_terminated) {
			(_5213_i)++;
		}
		return std::make_tuple(_5213_i,_5517_terminated);
	}
	_iter_next_4629257088:;
	(_5213_i)++;
	goto _iter_begin_4629257088;
	_iter_end_4629257088:;
	return std::make_tuple(_5213_i,false);
}



inline std::tuple<jule::Slice<_111613f20_Token>,jule::Bool> _11167f570_skip_st(jule::Int& _11117_i,jule::Slice<_111613f20_Token> _11129_tokens) {
	jule::Int _1129_start = _11117_i;
	jule::Bool _11313_terminated = false;
	std::tie(_11117_i,_11313_terminated) = _11167f570_next_st_pos(_11129_tokens,_1129_start);
	jule::Slice<_111613f20_Token> _11513_st_tokens = _11129_tokens.slice(static_cast<jule::Int>(_1129_start),static_cast<jule::Int>(_11117_i));
	if (_11313_terminated) {
		if (_11513_st_tokens.len() == 1LL) {
			std::tie(_11513_st_tokens,_11313_terminated) = _11167f570_skip_st(_11117_i,_11129_tokens);
			return std::make_tuple(_11513_st_tokens,_11313_terminated);
		}
		_11513_st_tokens=_11513_st_tokens.slice(0LL,static_cast<jule::Int>(_11513_st_tokens.len() - 1LL));
	}
	return std::make_tuple(_11513_st_tokens,_11313_terminated);
}



inline jule::Slice<jule::Ref<_11167f570_Stmt>> _11167f570_split_stms(jule::Slice<_111613f20_Token> _13319_tokens) {
	jule::Slice<jule::Ref<_11167f570_Stmt>> _13413_stms = nullptr;
	jule::Int _13513_pos = 0LL;
	_iter_begin_4629301648:;
	if (!(_13513_pos < _13319_tokens.len())) { goto _iter_end_4629301648; }
	{
		jule::Slice<_111613f20_Token> _13718_tokens;
		jule::Bool _13726_terminated;
		std::tie(_13718_tokens,_13726_terminated) = _11167f570_skip_st(_13513_pos,_13319_tokens);
		_13413_stms=append(_13413_stms,jule::Slice<jule::Ref<_11167f570_Stmt>>({jule::new_struct<_11167f570_Stmt>(new( std::nothrow ) _11167f570_Stmt(_13718_tokens,_13726_terminated))}));
	}
	_iter_next_4629301648:;
	goto _iter_begin_4629301648;
	_iter_end_4629301648:;
	return _13413_stms;
}



inline jule::Slice<_111613f20_Token> _112190570_is_fn_call(jule::Slice<_111613f20_Token> _3819_tokens) {
	{
		auto _match_expr{ _3819_tokens[static_cast<jule::Int>(0LL)]._field_id };
		if (!((3LLU) == _match_expr || (2LLU) == _match_expr || (1LLU) == _match_expr)) { goto _case_end_4629320480; }
		goto _match_end_4629316016;
		_case_end_4629320480:;
		_case_begin_4629317024:;
		{
			_111613f20_Token _4613_tok = _3819_tokens[static_cast<jule::Int>(_3819_tokens.len() - 1LL)];
			if ((_4613_tok._field_id != 3LLU) && (_4613_tok._field_kind != jule::Str(")", 1))) {
				return nullptr;
			}
		}
		goto _match_end_4629316016;
		_case_end_4629317024:;
		_match_end_4629316016:;
	}
	_111613f20_Token _519_tok = _3819_tokens[static_cast<jule::Int>(_3819_tokens.len() - 1LL)];
	if ((_519_tok._field_id != 3LLU) || (_519_tok._field_kind != jule::Str(")", 1))) {
		return nullptr;
	}
	jule::Int _5513_brace_n = 0LL;
	jule::I64 _5813_i = _3819_tokens.len() - 1LL;
	_iter_begin_4629328928:;
	if (!(_5813_i >= 1LL)) { goto _iter_end_4629328928; }
	{
		_111613f20_Token _6013_tok = _3819_tokens[static_cast<jule::Int>(_5813_i)];
		if (_6013_tok._field_id == 3LLU) {
			{
				auto _match_expr{ _6013_tok._field_kind };
				if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4629334064; }
				_case_begin_4629334064:;
				{
					(_5513_brace_n)++;
				}
				goto _match_end_4629333104;
				_case_end_4629334064:;
				if (!((jule::Str("(", 1)) == _match_expr)) { goto _case_end_4629334176; }
				_case_begin_4629334176:;
				{
					(_5513_brace_n)--;
				}
				goto _match_end_4629333104;
				_case_end_4629334176:;
				_match_end_4629333104:;
			}
			if (_5513_brace_n == 0LL) {
				return _3819_tokens.slice(0LL,static_cast<jule::Int>(_5813_i));
			}
		}
	}
	_iter_next_4629328928:;
	(_5813_i)--;
	goto _iter_begin_4629328928;
	_iter_end_4629328928:;
	return nullptr;
}



inline jule::Ref<_112190570_CallData> _112190570_get_call_data(jule::Slice<_111613f20_Token> _8022_tokens) {
	jule::Ref<_112190570_CallData> _8113_data = jule::new_struct<_112190570_CallData>(new( std::nothrow ) _112190570_CallData());
	std::tie(_8113_data->_field_expr_tokens,_8113_data->_field_args_tokens) = _111681860_range_last(_8022_tokens);
	if (_8113_data->_field_expr_tokens.len() == 0LL) {
		return _8113_data;
	}
	_111613f20_Token _889_token = _8113_data->_field_expr_tokens[static_cast<jule::Int>(_8113_data->_field_expr_tokens.len() - 1LL)];
	if ((_889_token._field_id == 3LLU) && (_889_token._field_kind == jule::Str("]", 1))) {
		std::tie(_8113_data->_field_expr_tokens,_8113_data->_field_generics_tokens) = _111681860_range_last(_8113_data->_field_expr_tokens);
	}
	return _8113_data;
}



inline jule::Slice<_111613f20_Token> _112190570_get_block_expr(jule::Slice<_111613f20_Token> _9623_tokens) {
	jule::Int _9713_brace_n = 0LL;
	{
		auto __julec_range_expr = _9623_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			_111613f20_Token _112190570_tok = *__julec_range_begin;
			_iter_begin_4629350816:;
			{
				if (_112190570_tok._field_id == 3LLU) {
					{
						auto _match_expr{ _112190570_tok._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr)) { goto _case_end_4629356112; }
						_case_begin_4629356112:;
						{
							if (_9713_brace_n > 0LL) {
								(_9713_brace_n)++;
								goto _match_end_4629354080;
							}
							return _9623_tokens.slice(0LL,static_cast<jule::Int>(_112190570_i));
						}
						goto _match_end_4629354080;
						_case_end_4629356112:;
						if (!((jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4629356352; }
						_case_begin_4629356352:;
						{
							(_9713_brace_n)++;
						}
						goto _match_end_4629354080;
						_case_end_4629356352:;
						_case_begin_4629354992:;
						{
							(_9713_brace_n)--;
						}
						goto _match_end_4629354080;
						_case_end_4629354992:;
						_match_end_4629354080:;
					}
				}
			}
			_iter_next_4629350816:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_tok = *__julec_range_begin; goto _iter_begin_4629350816; }
			_iter_end_4629350816:;
		}
	}
	return nullptr;
}



inline std::tuple<jule::Slice<_111613f20_Token>,jule::Slice<_111613f20_Token>> _112190570_split_colon(jule::Slice<_111613f20_Token> _12220_tokens) {
	jule::Int _12313_range_n = 0LL;
	{
		auto __julec_range_expr = _12220_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			_111613f20_Token _112190570_token = *__julec_range_begin;
			_iter_begin_4629352768:;
			{
				{
					auto _match_expr{ _112190570_token._field_id };
					if (!((3LLU) == _match_expr)) { goto _case_end_4629363920; }
					_case_begin_4629363920:;
					{
						{
							auto _match_expr{ _112190570_token._field_kind };
							if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4629367088; }
							_case_begin_4629367088:;
							{
								(_12313_range_n)++;
								goto _iter_next_4629352768;
							}
							goto _match_end_4629364208;
							_case_end_4629367088:;
							_case_begin_4629366016:;
							{
								(_12313_range_n)--;
							}
							goto _match_end_4629364208;
							_case_end_4629366016:;
							_match_end_4629364208:;
						}
					}
					goto _match_end_4629363008;
					_case_end_4629363920:;
					if (!((11LLU) == _match_expr)) { goto _case_end_4629364032; }
					_case_begin_4629364032:;
					{
						if (_12313_range_n < 1LL) {
							jule::Slice<_111613f20_Token> _14025_l = _12220_tokens.slice(0LL,static_cast<jule::Int>(_112190570_i));
							jule::Slice<_111613f20_Token> _14125_r = _12220_tokens.slice(static_cast<jule::Int>(_112190570_i + 1LL));
							return std::make_tuple(_14025_l,_14125_r);
						}
					}
					goto _match_end_4629363008;
					_case_end_4629364032:;
					_match_end_4629363008:;
				}
			}
			_iter_next_4629352768:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_token = *__julec_range_begin; goto _iter_begin_4629352768; }
			_iter_end_4629352768:;
		}
	}
	return std::make_tuple(nullptr,nullptr);
}



inline jule::Slice<_111613f20_Token> _112190570_eliminate_comments(jule::Slice<_111613f20_Token> _18027_tokens) {
	jule::Slice<_111613f20_Token> _18113_cutted = nullptr;
	{
		auto __julec_range_expr = _18027_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_111613f20_Token _112190570_token = *__julec_range_begin;
			_iter_begin_4629376960:;
			{
				if (_112190570_token._field_id != 18LLU) {
					_18113_cutted=append(_18113_cutted,jule::Slice<_111613f20_Token>({_112190570_token}));
				}
			}
			_iter_next_4629376960:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _112190570_token = *__julec_range_begin; goto _iter_begin_4629376960; }
			_iter_end_4629376960:;
		}
	}
	return _18113_cutted;
}



inline jule::Int _112190570_find_lowest_prec_op(jule::Slice<_111613f20_Token> _19224_tokens) {
	_112190570_Precedencer _19313_prec = _112190570_Precedencer();
	jule::Int _19413_brace_n = 0LL;
	{
		auto __julec_range_expr = _19224_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112190570_i = 0;
			_111613f20_Token _112190570_token = *__julec_range_begin;
			_iter_begin_4629386736:;
			{
				{
					if (!((_112190570_token._field_id == 3LLU))) { goto _case_end_4629389248; }
					_case_begin_4629389248:;
					{
						{
							auto _match_expr{ _112190570_token._field_kind };
							if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr)) { goto _case_end_4629393248; }
							_case_begin_4629393248:;
							{
								(_19413_brace_n)++;
							}
							goto _match_end_4629390656;
							_case_end_4629393248:;
							_case_begin_4629391264:;
							{
								(_19413_brace_n)--;
							}
							goto _match_end_4629390656;
							_case_end_4629391264:;
							_match_end_4629390656:;
						}
						goto _iter_next_4629386736;
					}
					goto _match_end_4629388976;
					_case_end_4629389248:;
					if (!((_112190570_i == 0LL))) { goto _case_end_4629389360; }
					_case_begin_4629389360:;
					{
						goto _iter_next_4629386736;
					}
					goto _match_end_4629388976;
					_case_end_4629389360:;
					if (!((_112190570_token._field_id != 7LLU))) { goto _case_end_4629389472; }
					_case_begin_4629389472:;
					{
						goto _iter_next_4629386736;
					}
					goto _match_end_4629388976;
					_case_end_4629389472:;
					if (!((_19413_brace_n > 0LL))) { goto _case_end_4629389600; }
					_case_begin_4629389600:;
					{
						goto _iter_next_4629386736;
					}
					goto _match_end_4629388976;
					_case_end_4629389600:;
					_match_end_4629388976:;
				}
				_111613f20_Token _21913_left = _19224_tokens[static_cast<jule::Int>(_112190570_i - 1LL)];
				if ((_21913_left._field_id == 7LLU) || (_21913_left._field_id == 11LLU)) {
					goto _iter_next_4629386736;
				}
				if (((_112190570_i > 1LL) && (_21913_left._field_id == 3LLU)) && (_21913_left._field_kind == jule::Str("]", 1))) {
					_111613f20_Token _22717_lleft = _19224_tokens[static_cast<jule::Int>(_112190570_i - 2LL)];
					if ((_22717_lleft._field_id == 3LLU) && (_22717_lleft._field_kind == jule::Str("[", 1))) {
						if ((_112190570_token._field_kind == jule::Str("&", 1)) || (_112190570_token._field_kind == jule::Str("*", 1))) {
							goto _iter_next_4629386736;
						}
					}
				}
				jule::Int _23613_p = _112190570_token._method_prec();
				if (_23613_p != -1LL) {
					_19313_prec._method_set(_23613_p,jule::Any(_112190570_i));
				}
			}
			_iter_next_4629386736:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112190570_i; _112190570_token = *__julec_range_begin; goto _iter_begin_4629386736; }
			_iter_end_4629386736:;
		}
	}
	jule::Any _2429_data = _19313_prec._method_get_lower();
	if (_2429_data == nullptr) {
		return -1LL;
	}
	return _2429_data.operator jule::Int();
}



inline jule::Ref<_111612b20_IdentExpr> _112190570_build_ident_expr(_111613f20_Token _24925_token) {
	return jule::new_struct<_111612b20_IdentExpr>(new( std::nothrow ) _111612b20_IdentExpr(_24925_token,_24925_token._field_kind,false));
}



inline std::tuple<jule::Slice<_111613f20_Token>,jule::Int> _112190570_get_range_expr_tokens(jule::Slice<_111613f20_Token> _25730_tokens) {
	jule::Int _25813_range_n = 0LL;
	jule::I64 _25913_i = _25730_tokens.len() - 1LL;
	_iter_begin_4629423168:;
	if (!(_25913_i >= 0LL)) { goto _iter_end_4629423168; }
	{
		_111613f20_Token _26113_tok = _25730_tokens[static_cast<jule::Int>(_25913_i)];
		if (_26113_tok._field_id == 3LLU) {
			{
				auto _match_expr{ _26113_tok._field_kind };
				if (!((jule::Str("}", 1)) == _match_expr || (jule::Str("]", 1)) == _match_expr || (jule::Str(")", 1)) == _match_expr)) { goto _case_end_4629428544; }
				_case_begin_4629428544:;
				{
					(_25813_range_n)++;
				}
				goto _match_end_4629426512;
				_case_end_4629428544:;
				_case_begin_4629427424:;
				{
					(_25813_range_n)--;
				}
				goto _match_end_4629426512;
				_case_end_4629427424:;
				_match_end_4629426512:;
			}
		}
		if (_25813_range_n == 0LL) {
			return std::make_tuple(_25730_tokens.slice(0LL,static_cast<jule::Int>(_25913_i)),_25813_range_n);
		}
	}
	_iter_next_4629423168:;
	(_25913_i)--;
	goto _iter_begin_4629423168;
	_iter_end_4629423168:;
	return std::make_tuple(nullptr,_25813_range_n);
}



inline jule::Bool _111654d60_check_assign_tokens(jule::Slice<_111613f20_Token> _1624_tokens) {
	if ((_1624_tokens.len() == 0LL) || (!(_111613f20_is_assign(_1624_tokens[static_cast<jule::Int>(0LL)]._field_id)))) {
		return false;
	}
	jule::Int _2113_brace_n = 0LL;
	{
		auto __julec_range_expr = _1624_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_111613f20_Token _111654d60_t = *__julec_range_begin;
			_iter_begin_4629437712:;
			{
				if (_111654d60_t._field_id == 3LLU) {
					{
						auto _match_expr{ _111654d60_t._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4629442288; }
						_case_begin_4629442288:;
						{
							(_2113_brace_n)++;
						}
						goto _match_end_4629440256;
						_case_end_4629442288:;
						_case_begin_4629441168:;
						{
							(_2113_brace_n)--;
						}
						goto _match_end_4629440256;
						_case_end_4629441168:;
						_match_end_4629440256:;
					}
				}
				if (_2113_brace_n < 0LL) {
					return false;
				} else if (_2113_brace_n > 0LL) {
					goto _iter_next_4629437712;
				} else if ((_111654d60_t._field_id == 7LLU) && _111613f20_is_assign_op(_111654d60_t._field_kind)) {
					return true;
				}
			}
			_iter_next_4629437712:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111654d60_t = *__julec_range_begin; goto _iter_begin_4629437712; }
			_iter_end_4629437712:;
		}
	}
	return false;
}



inline _1316b4080_Log _111681860_make_err(jule::Int _5513_row,jule::Int _5523_col,jule::Ref<_1220fd110_File> _5533_f,jule::Str _5543_key,jule::Slice<jule::Any> _5553_args) {
	return _1316b4080_Log(1LLU,_5513_row,_5523_col,_5533_f->_method_path(),_1316b2ff0_errorf(_5543_key,_5553_args));
}



inline jule::Slice<_111613f20_Token> _111681860_range(jule::Int& _7415_i,jule::Str _7423_open,jule::Str _7440_close,jule::Slice<_111613f20_Token> _7462_tokens) {
	if (_7415_i >= _7462_tokens.len()) {
		return nullptr;
	}
	_111613f20_Token _799_tok = _7462_tokens[static_cast<jule::Int>(_7415_i)];
	if ((_799_tok._field_id != 3LLU) || (_799_tok._field_kind != _7423_open)) {
		return nullptr;
	}
	(_7415_i)++;
	jule::Int _8513_range_n = 1LL;
	jule::Int _869_start = _7415_i;
	_iter_begin_4629479552:;
	if (!((_8513_range_n != 0LL) && (_7415_i < _7462_tokens.len()))) { goto _iter_end_4629479552; }
	{
		_111613f20_Token _8813_token = _7462_tokens[static_cast<jule::Int>(_7415_i)];
		if (_8813_token._field_id == 3LLU) {
			{
				auto _match_expr{ _8813_token._field_kind };
				if (!((_7423_open) == _match_expr)) { goto _case_end_4629484576; }
				_case_begin_4629484576:;
				{
					(_8513_range_n)++;
				}
				goto _match_end_4629483616;
				_case_end_4629484576:;
				if (!((_7440_close) == _match_expr)) { goto _case_end_4629484688; }
				_case_begin_4629484688:;
				{
					(_8513_range_n)--;
				}
				goto _match_end_4629483616;
				_case_end_4629484688:;
				_match_end_4629483616:;
			}
		}
	}
	_iter_next_4629479552:;
	(_7415_i)++;
	goto _iter_begin_4629479552;
	_iter_end_4629479552:;
	return _7462_tokens.slice(static_cast<jule::Int>(_869_start),static_cast<jule::Int>(_7415_i - 1LL));
}



inline std::tuple<jule::Slice<_111613f20_Token>,jule::Slice<_111613f20_Token>> _111681860_range_last(jule::Slice<_111613f20_Token> _10719_tokens) {
	jule::Slice<_111613f20_Token> _10755_cut = jule::Slice<_111613f20_Token>();
	jule::Slice<_111613f20_Token> _10738_cutted = jule::Slice<_111613f20_Token>();
	if (_10719_tokens.len() == 0LL) {
		_10738_cutted = _10719_tokens;
		_10755_cut = nullptr;
		return std::make_tuple(_10738_cutted,_10755_cut);
	} else if (_10719_tokens[static_cast<jule::Int>(_10719_tokens.len() - 1LL)]._field_id != 3LLU) {
		_10738_cutted = _10719_tokens;
		_10755_cut = nullptr;
		return std::make_tuple(_10738_cutted,_10755_cut);
	}
	jule::Int _11413_brace_n = 0LL;
	jule::I64 _11513_i = _10719_tokens.len() - 1LL;
	_iter_begin_4629488960:;
	if (!(_11513_i >= 0LL)) { goto _iter_end_4629488960; }
	{
		_111613f20_Token _11713_token = _10719_tokens[static_cast<jule::Int>(_11513_i)];
		if (_11713_token._field_id == 3LLU) {
			{
				auto _match_expr{ _11713_token._field_kind };
				if (!((jule::Str("}", 1)) == _match_expr || (jule::Str("]", 1)) == _match_expr || (jule::Str(")", 1)) == _match_expr)) { goto _case_end_4629503872; }
				_case_begin_4629503872:;
				{
					(_11413_brace_n)++;
					goto _iter_next_4629488960;
				}
				goto _match_end_4629501840;
				_case_end_4629503872:;
				_case_begin_4629502752:;
				{
					(_11413_brace_n)--;
				}
				goto _match_end_4629501840;
				_case_end_4629502752:;
				_match_end_4629501840:;
			}
		}
		if (_11413_brace_n == 0LL) {
			_10738_cutted = _10719_tokens.slice(0LL,static_cast<jule::Int>(_11513_i));
			_10755_cut = _10719_tokens.slice(static_cast<jule::Int>(_11513_i));
			return std::make_tuple(_10738_cutted,_10755_cut);
		}
	}
	_iter_next_4629488960:;
	(_11513_i)--;
	goto _iter_begin_4629488960;
	_iter_end_4629488960:;
	_10738_cutted = _10719_tokens;
	_10755_cut = nullptr;
	return std::make_tuple(_10738_cutted,_10755_cut);
}



inline std::tuple<jule::Slice<jule::Slice<_111613f20_Token>>,jule::Slice<_1316b4080_Log>> _111681860_parts(jule::Slice<_111613f20_Token> _14514_tokens,jule::Uint _14531_id,jule::Bool _14544_expr_must) {
	if (_14514_tokens.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Slice<jule::Slice<_111613f20_Token>> _15013_parts = nullptr;
	jule::Slice<_1316b4080_Log> _15113_errors = nullptr;
	jule::Int _15313_range_n = 0LL;
	jule::Int _15413_last = 0LL;
	{
		auto __julec_range_expr = _14514_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _111681860_i = 0;
			_111613f20_Token _111681860_token = *__julec_range_begin;
			_iter_begin_4629520000:;
			{
				if (_111681860_token._field_id == 3LLU) {
					{
						auto _match_expr{ _111681860_token._field_kind };
						if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4629524752; }
						_case_begin_4629524752:;
						{
							(_15313_range_n)++;
							goto _iter_next_4629520000;
						}
						goto _match_end_4629522720;
						_case_end_4629524752:;
						_case_begin_4629523632:;
						{
							(_15313_range_n)--;
						}
						goto _match_end_4629522720;
						_case_end_4629523632:;
						_match_end_4629522720:;
					}
				}
				if (_15313_range_n > 0LL) {
					goto _iter_next_4629520000;
				}
				if (_111681860_token._field_id == _14531_id) {
					if (_14544_expr_must && ((_111681860_i - _15413_last) <= 0LL)) {
						_1316b4080_Log _17421_err = _111681860_make_err(_111681860_token._field_row,_111681860_token._field_column,_111681860_token._field_file,jule::Str("missing_expr", 12),jule::Slice<jule::Any>({}));
						_15113_errors=append(_15113_errors,jule::Slice<_1316b4080_Log>({_17421_err}));
					}
					_15013_parts=append(_15013_parts,jule::Slice<jule::Slice<_111613f20_Token>>({_14514_tokens.slice(static_cast<jule::Int>(_15413_last),static_cast<jule::Int>(_111681860_i))}));
					_15413_last=_111681860_i + 1LL;
				}
			}
			_iter_next_4629520000:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_111681860_i; _111681860_token = *__julec_range_begin; goto _iter_begin_4629520000; }
			_iter_end_4629520000:;
		}
	}
	if (_15413_last < _14514_tokens.len()) {
		_15013_parts=append(_15013_parts,jule::Slice<jule::Slice<_111613f20_Token>>({_14514_tokens.slice(static_cast<jule::Int>(_15413_last))}));
	} else if ((!(_14544_expr_must))) {
		_15013_parts=append(_15013_parts,jule::Slice<jule::Slice<_111613f20_Token>>({jule::Slice<_111613f20_Token>({})}));
	}
	return std::make_tuple(_15013_parts,_15113_errors);
}



inline jule::Str _111681860_get_close_kind_of_brace(jule::Str _19128_left) {
	{
		auto _match_expr{ _19128_left };
		if (!((jule::Str(")", 1)) == _match_expr)) { goto _case_end_4629547920; }
		_case_begin_4629547920:;
		{
			return jule::Str("(", 1);
		}
		goto _match_end_4629546352;
		_case_end_4629547920:;
		if (!((jule::Str("}", 1)) == _match_expr)) { goto _case_end_4629548032; }
		_case_begin_4629548032:;
		{
			return jule::Str("{", 1);
		}
		goto _match_end_4629546352;
		_case_end_4629548032:;
		if (!((jule::Str("]", 1)) == _match_expr)) { goto _case_end_4629548928; }
		_case_begin_4629548928:;
		{
			return jule::Str("[", 1);
		}
		goto _match_end_4629546352;
		_case_end_4629548928:;
		_case_begin_4629546880:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4629546352;
		_case_end_4629546880:;
		_match_end_4629546352:;
	}
}



inline _1316b4080_Log _111681860_compiler_err(_111613f20_Token _20017_token,jule::Str _20031_key,jule::Slice<jule::Any> _20041_args) {
	return _1316b4080_Log(1LLU,_20017_token._field_row,_20017_token._field_column,_20017_token._field_file->_method_path(),_1316b2ff0_errorf(_20031_key,_20041_args));
}



inline jule::Ref<_111612b20_Comment> _111681860_build_comment(_111613f20_Token _21022_token) {
	_21022_token._field_kind=_21022_token._field_kind.slice(static_cast<jule::Int>(2LL)).trim(jule::Str(" \n\r\t\v", 5));
	return jule::new_struct<_111612b20_Comment>(new( std::nothrow ) _111612b20_Comment(_21022_token,_21022_token._field_kind));
}



inline jule::Str _111681860_tokstoa(jule::Slice<_111613f20_Token> _21912_tokens) {
	jule::Str _22013_s = jule::Str("", 0);
	{
		auto __julec_range_expr = _21912_tokens;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_111613f20_Token _111681860_token = *__julec_range_begin;
			_iter_begin_4629561680:;
			{
				_22013_s+=_111681860_token._field_kind;
			}
			_iter_next_4629561680:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _111681860_token = *__julec_range_begin; goto _iter_begin_4629561680; }
			_iter_end_4629561680:;
		}
	}
	return _22013_s;
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_build_void_type(void) {
	return jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl());
}



inline jule::Ref<_111612b20_TypeDecl> _111680c00_build_prim_type(_111613f20_Token _1924_token) {
	return jule::new_struct<_111612b20_TypeDecl>(new( std::nothrow ) _111612b20_TypeDecl(_1924_token,jule::Any(jule::new_struct<_111612b20_IdentTypeDecl>(new( std::nothrow ) _111612b20_IdentTypeDecl(_1924_token,_1924_token._field_kind,false,nullptr)))));
}



inline std::tuple<jule::Slice<_111613f20_Token>,jule::Int> _111680c00_split_map_range(jule::Slice<_111613f20_Token> _3424_tokens,jule::Int& _3446_i) {
	jule::Int _3479_colon = jule::Int();
	jule::Slice<_111613f20_Token> _3456_range_tokens = jule::Slice<_111613f20_Token>();
	_3479_colon=-1LL;
	jule::Int _3613_range_n = 0LL;
	jule::Int _379_start = _3446_i;
	_iter_begin_4629571904:;
	if (!(_3446_i < _3424_tokens.len())) { goto _iter_end_4629571904; }
	{
		_111613f20_Token _3913_token = _3424_tokens[static_cast<jule::Int>(_3446_i)];
		if (_3913_token._field_id == 3LLU) {
			{
				auto _match_expr{ _3913_token._field_kind };
				if (!((jule::Str("{", 1)) == _match_expr || (jule::Str("[", 1)) == _match_expr || (jule::Str("(", 1)) == _match_expr)) { goto _case_end_4629577840; }
				_case_begin_4629577840:;
				{
					(_3613_range_n)++;
					goto _iter_next_4629571904;
				}
				goto _match_end_4629575808;
				_case_end_4629577840:;
				_case_begin_4629576720:;
				{
					(_3613_range_n)--;
				}
				goto _match_end_4629575808;
				_case_end_4629576720:;
				_match_end_4629575808:;
			}
		}
		if (_3613_range_n == 0LL) {
			if ((_379_start + 1LL) > _3446_i) {
				return std::make_tuple(_3456_range_tokens,_3479_colon);
			}
			_3456_range_tokens=_3424_tokens.slice(static_cast<jule::Int>(_379_start + 1LL),static_cast<jule::Int>(_3446_i));
			goto _iter_end_4629571904;
		} else if (_3613_range_n != 1LL) {
			goto _iter_next_4629571904;
		}
		if ((_3479_colon == -1LL) && (_3913_token._field_id == 11LLU)) {
			_3479_colon=(_3446_i - _379_start) - 1LL;
		}
	}
	_iter_next_4629571904:;
	(_3446_i)++;
	goto _iter_begin_4629571904;
	_iter_end_4629571904:;
	return std::make_tuple(_3456_range_tokens,_3479_colon);
}



inline void _1131530d0_lshift_unsig(_1131530d0_Const& _53222_c,_1131530d0_Const& _53233_x) {
	jule::U64 _5339_l = _53222_c._method_as_u64();
	jule::U64 _5349_r = _53233_x._method_as_u64();
	_53222_c._method_set_u64(_5339_l << _5349_r);
}



inline void _1131530d0_rshift_unsig(_1131530d0_Const& _53822_c,_1131530d0_Const& _53833_x) {
	jule::U64 _5399_l = _53822_c._method_as_u64();
	jule::U64 _5409_r = _53833_x._method_as_u64();
	_53822_c._method_set_u64(_5399_l >> _5409_r);
}



inline jule::Bool _113157670_check_bit(jule::Str _914_v,jule::Int _922_bit,jule::Fn<jule::Bool(jule::Str,jule::Int,jule::Int)> _932_checker) {
	{
		if (!((_914_v == jule::Str("", 0)))) { goto _case_end_4633202848; }
		_case_begin_4633202848:;
		{
			return false;
		}
		goto _match_end_4633201552;
		_case_end_4633202848:;
		if (!((_914_v.len() == 1LL))) { goto _case_end_4633202960; }
		_case_begin_4633202960:;
		{
			return true;
		}
		goto _match_end_4633201552;
		_case_end_4633202960:;
		if (!((_914_v.has_prefix(jule::Str("0x", 2))))) { goto _case_end_4633205104; }
		_case_begin_4633205104:;
		{
			return _932_checker(_914_v.slice(static_cast<jule::Int>(2LL)),16LL,_922_bit);
		}
		goto _match_end_4633201552;
		_case_end_4633205104:;
		if (!((_914_v.has_prefix(jule::Str("0b", 2))))) { goto _case_end_4633205216; }
		_case_begin_4633205216:;
		{
			return _932_checker(_914_v.slice(static_cast<jule::Int>(2LL)),2LL,_922_bit);
		}
		goto _match_end_4633201552;
		_case_end_4633205216:;
		if (!((_914_v.has_prefix(jule::Str("0o", 2))))) { goto _case_end_4633202064; }
		_case_begin_4633202064:;
		{
			return _932_checker(_914_v.slice(static_cast<jule::Int>(2LL)),8LL,_922_bit);
		}
		goto _match_end_4633201552;
		_case_end_4633202064:;
		if (!((_914_v[static_cast<jule::Int>(0LL)] == '0'))) { goto _case_end_4633202176; }
		_case_begin_4633202176:;
		{
			return _932_checker(_914_v.slice(static_cast<jule::Int>(1LL)),8LL,_922_bit);
		}
		goto _match_end_4633201552;
		_case_end_4633202176:;
		_case_begin_4633201760:;
		{
			return _932_checker(_914_v,10LL,_922_bit);
		}
		goto _match_end_4633201552;
		_case_end_4633201760:;
		_match_end_4633201552:;
	}
}



inline jule::Str _113157670_real_kind_of(jule::Str _2421_kind) {
	{
		auto _match_expr{ _2421_kind };
		if (!((jule::Str("int", 3)) == _match_expr)) { goto _case_end_4633219168; }
		_case_begin_4633219168:;
		{
			return jule::Str("i32", 3);
		}
		goto _match_end_4633216272;
		_case_end_4633219168:;
		if (!((jule::Str("uint", 4)) == _match_expr || (jule::Str("uintptr", 7)) == _match_expr)) { goto _case_end_4633219280; }
		_case_begin_4633219280:;
		{
			return jule::Str("u32", 3);
		}
		goto _match_end_4633216272;
		_case_end_4633219280:;
		_case_begin_4633212352:;
		{
			return _2421_kind;
		}
		goto _match_end_4633216272;
		_case_end_4633212352:;
		_match_end_4633216272:;
	}
}



inline jule::Int _113157670_bitsize_of(jule::Str _4019_k) {
	{
		auto _match_expr{ _4019_k };
		if (!((jule::Str("i8", 2)) == _match_expr || (jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4633224960; }
		_case_begin_4633224960:;
		{
			return 8LL;
		}
		goto _match_end_4633221648;
		_case_end_4633224960:;
		if (!((jule::Str("i16", 3)) == _match_expr || (jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4633225072; }
		_case_begin_4633225072:;
		{
			return 16LL;
		}
		goto _match_end_4633221648;
		_case_end_4633225072:;
		if (!((jule::Str("i32", 3)) == _match_expr || (jule::Str("u32", 3)) == _match_expr || (jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4633222448; }
		_case_begin_4633222448:;
		{
			return 32LL;
		}
		goto _match_end_4633221648;
		_case_end_4633222448:;
		if (!((jule::Str("i64", 3)) == _match_expr || (jule::Str("u64", 3)) == _match_expr || (jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4633222560; }
		_case_begin_4633222560:;
		{
			return 64LL;
		}
		goto _match_end_4633221648;
		_case_end_4633222560:;
		if (!((jule::Str("uint", 4)) == _match_expr || (jule::Str("int", 3)) == _match_expr)) { goto _case_end_4633222672; }
		_case_begin_4633222672:;
		{
			return 32LL;
		}
		goto _match_end_4633221648;
		_case_end_4633222672:;
		_case_begin_4633224256:;
		{
			return -1LL;
		}
		goto _match_end_4633221648;
		_case_end_4633224256:;
		_match_end_4633221648:;
	}
}



inline jule::Str _113157670_int_from_bits(jule::U64 _7222_bits) {
	{
		auto _match_expr{ _7222_bits };
		if (!((8LL) == _match_expr)) { goto _case_end_4633233424; }
		_case_begin_4633233424:;
		{
			return jule::Str("i8", 2);
		}
		goto _match_end_4633231648;
		_case_end_4633233424:;
		if (!((16LL) == _match_expr)) { goto _case_end_4633233536; }
		_case_begin_4633233536:;
		{
			return jule::Str("i16", 3);
		}
		goto _match_end_4633231648;
		_case_end_4633233536:;
		if (!((32LL) == _match_expr)) { goto _case_end_4633231952; }
		_case_begin_4633231952:;
		{
			return jule::Str("i32", 3);
		}
		goto _match_end_4633231648;
		_case_end_4633231952:;
		if (!((64LL) == _match_expr)) { goto _case_end_4633232064; }
		_case_begin_4633232064:;
		{
			return jule::Str("i64", 3);
		}
		goto _match_end_4633231648;
		_case_end_4633232064:;
		_case_begin_4633230032:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4633231648;
		_case_end_4633230032:;
		_match_end_4633231648:;
	}
}



inline jule::Str _113157670_uint_from_bits(jule::U64 _8523_bits) {
	{
		auto _match_expr{ _8523_bits };
		if (!((8LL) == _match_expr)) { goto _case_end_4633238464; }
		_case_begin_4633238464:;
		{
			return jule::Str("u8", 2);
		}
		goto _match_end_4633235296;
		_case_end_4633238464:;
		if (!((16LL) == _match_expr)) { goto _case_end_4633238576; }
		_case_begin_4633238576:;
		{
			return jule::Str("u16", 3);
		}
		goto _match_end_4633235296;
		_case_end_4633238576:;
		if (!((32LL) == _match_expr)) { goto _case_end_4633238688; }
		_case_begin_4633238688:;
		{
			return jule::Str("u32", 3);
		}
		goto _match_end_4633235296;
		_case_end_4633238688:;
		if (!((64LL) == _match_expr)) { goto _case_end_4633235696; }
		_case_begin_4633235696:;
		{
			return jule::Str("u64", 3);
		}
		goto _match_end_4633235296;
		_case_end_4633235696:;
		_case_begin_4633236576:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4633235296;
		_case_end_4633236576:;
		_match_end_4633235296:;
	}
}



inline jule::Str _113157670_float_from_bits(jule::U64 _9924_bits) {
	{
		auto _match_expr{ _9924_bits };
		if (!((32LL) == _match_expr)) { goto _case_end_4633242464; }
		_case_begin_4633242464:;
		{
			return jule::Str("f32", 3);
		}
		goto _match_end_4633242064;
		_case_end_4633242464:;
		if (!((64LL) == _match_expr)) { goto _case_end_4633243584; }
		_case_begin_4633243584:;
		{
			return jule::Str("f64", 3);
		}
		goto _match_end_4633242064;
		_case_end_4633243584:;
		_case_begin_4633241696:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4633242064;
		_case_end_4633241696:;
		_match_end_4633242064:;
	}
}



inline jule::Bool _113157670_check_bit_int(jule::Str _10822_v,jule::Int _10830_bit) {
	return _113157670_check_bit(_10822_v,_10830_bit,jule::Fn<jule::Bool(jule::Str,jule::Int,jule::Int)>([=](jule::Str _10930_v,jule::Int _10938_base,jule::Int _10949_bit) mutable -> jule::Bool {
		jule::Int _11017_err;
		std::tie(std::ignore,_11017_err) = _13219c810_parse_int(_10930_v,_10938_base,_10949_bit);
		return _11017_err == 0LLU;
	}));
}



inline jule::Bool _113157670_check_bit_uint(jule::Str _11623_v,jule::Int _11631_bit) {
	return _113157670_check_bit(_11623_v,_11631_bit,jule::Fn<jule::Bool(jule::Str,jule::Int,jule::Int)>([=](jule::Str _11730_v,jule::Int _11738_base,jule::Int _11749_bit) mutable -> jule::Bool {
		jule::Int _11817_err;
		std::tie(std::ignore,_11817_err) = _13219c810_parse_uint(_11730_v,_11738_base,_11749_bit);
		return _11817_err == 0LLU;
	}));
}



inline jule::Bool _113157670_check_bit_float(jule::Str _12424_val,jule::Int _12434_bit) {
	jule::Int _12513_err;
	std::tie(std::ignore,_12513_err) = _1320824b0_parse_float(_12424_val,_12434_bit);
	return _12513_err == 0LLU;
}



inline jule::U64 _113157670_bitsize_of_float(jule::F64 _13425_x) {
	{
		if (!(((-3.4028234663852886e+38 <= _13425_x) && (_13425_x <= 3.4028234663852886e+38)))) { goto _case_end_4633269296; }
		_case_begin_4633269296:;
		{
			return 32LL;
		}
		goto _match_end_4633266448;
		_case_end_4633269296:;
		_case_begin_4633266608:;
		{
			return 64LL;
		}
		goto _match_end_4633266448;
		_case_end_4633266608:;
		_match_end_4633266448:;
	}
}



inline jule::U64 _113157670_bitsize_of_int(jule::I64 _14823_x) {
	{
		if (!(((-128LL <= _14823_x) && (_14823_x <= 127LL)))) { goto _case_end_4633273008; }
		_case_begin_4633273008:;
		{
			return 8LL;
		}
		goto _match_end_4633269840;
		_case_end_4633273008:;
		if (!(((-32768LL <= _14823_x) && (_14823_x <= 32767LL)))) { goto _case_end_4633273120; }
		_case_begin_4633273120:;
		{
			return 16LL;
		}
		goto _match_end_4633269840;
		_case_end_4633273120:;
		if (!(((-2147483648LL <= _14823_x) && (_14823_x <= 2147483647LL)))) { goto _case_end_4633271792; }
		_case_begin_4633271792:;
		{
			return 32LL;
		}
		goto _match_end_4633269840;
		_case_end_4633271792:;
		_case_begin_4633270288:;
		{
			return 64LL;
		}
		goto _match_end_4633269840;
		_case_end_4633270288:;
		_match_end_4633269840:;
	}
}



inline jule::U64 _113157670_bitsize_of_uint(jule::U64 _16424_x) {
	{
		if (!((_16424_x <= 255LL))) { goto _case_end_4633280208; }
		_case_begin_4633280208:;
		{
			return 8LL;
		}
		goto _match_end_4633278384;
		_case_end_4633280208:;
		if (!((_16424_x <= 65535LL))) { goto _case_end_4633280320; }
		_case_begin_4633280320:;
		{
			return 16LL;
		}
		goto _match_end_4633278384;
		_case_end_4633280320:;
		if (!((_16424_x <= 4294967295LL))) { goto _case_end_4633278992; }
		_case_begin_4633278992:;
		{
			return 32LL;
		}
		goto _match_end_4633278384;
		_case_end_4633278992:;
		_case_begin_4633277552:;
		{
			return 64LL;
		}
		goto _match_end_4633278384;
		_case_end_4633277552:;
		_match_end_4633278384:;
	}
}



inline jule::F64 _1131a6a20_min_of(jule::Str _4319_k) {
	_4319_k=_113157670_real_kind_of(_4319_k);
	{
		auto _match_expr{ _4319_k };
		if (!((jule::Str("i8", 2)) == _match_expr)) { goto _case_end_4633286192; }
		_case_begin_4633286192:;
		{
			return -128LL;
		}
		goto _match_end_4633281296;
		_case_end_4633286192:;
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4633284864; }
		_case_begin_4633284864:;
		{
			return -32768LL;
		}
		goto _match_end_4633281296;
		_case_end_4633284864:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4633284976; }
		_case_begin_4633284976:;
		{
			return -2147483648LL;
		}
		goto _match_end_4633281296;
		_case_end_4633284976:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4633284416; }
		_case_begin_4633284416:;
		{
			return jule::MIN_I64;
		}
		goto _match_end_4633281296;
		_case_end_4633284416:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4633284528; }
		_case_begin_4633284528:;
		{
			return -3.4028234663852886e+38;
		}
		goto _match_end_4633281296;
		_case_end_4633284528:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4633284640; }
		_case_begin_4633284640:;
		{
			return jule::MIN_F64;
		}
		goto _match_end_4633281296;
		_case_end_4633284640:;
		_case_begin_4633284144:;
		{
			return 0LL;
		}
		goto _match_end_4633281296;
		_case_end_4633284144:;
		_match_end_4633281296:;
	}
}



inline jule::F64 _1131a6a20_max_of(jule::Str _5819_k) {
	_5819_k=_113157670_real_kind_of(_5819_k);
	{
		auto _match_expr{ _5819_k };
		if (!((jule::Str("i8", 2)) == _match_expr)) { goto _case_end_4633294304; }
		_case_begin_4633294304:;
		{
			return 127LL;
		}
		goto _match_end_4633292256;
		_case_end_4633294304:;
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4633292928; }
		_case_begin_4633292928:;
		{
			return 32767LL;
		}
		goto _match_end_4633292256;
		_case_end_4633292928:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4633293040; }
		_case_begin_4633293040:;
		{
			return 2147483647LL;
		}
		goto _match_end_4633292256;
		_case_end_4633293040:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4633292368; }
		_case_begin_4633292368:;
		{
			return jule::MAX_I64;
		}
		goto _match_end_4633292256;
		_case_end_4633292368:;
		if (!((jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4633292480; }
		_case_begin_4633292480:;
		{
			return 255LL;
		}
		goto _match_end_4633292256;
		_case_end_4633292480:;
		if (!((jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4633292592; }
		_case_begin_4633292592:;
		{
			return 65535LL;
		}
		goto _match_end_4633292256;
		_case_end_4633292592:;
		if (!((jule::Str("u32", 3)) == _match_expr)) { goto _case_end_4633293344; }
		_case_begin_4633293344:;
		{
			return 4294967295LL;
		}
		goto _match_end_4633292256;
		_case_end_4633293344:;
		if (!((jule::Str("u64", 3)) == _match_expr)) { goto _case_end_4633293456; }
		_case_begin_4633293456:;
		{
			return jule::MAX_U64;
		}
		goto _match_end_4633292256;
		_case_end_4633293456:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4633293568; }
		_case_begin_4633293568:;
		{
			return 3.4028234663852886e+38;
		}
		goto _match_end_4633292256;
		_case_end_4633293568:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4633293680; }
		_case_begin_4633293680:;
		{
			return jule::MAX_F64;
		}
		goto _match_end_4633292256;
		_case_end_4633293680:;
		_case_begin_4633287120:;
		{
			return 0LL;
		}
		goto _match_end_4633292256;
		_case_end_4633287120:;
		_match_end_4633292256:;
	}
}



inline jule::Bool _1131f8900_is_i8_compatible(jule::Str _629_k) {
	_629_k=_113157670_real_kind_of(_629_k);
	return _629_k == jule::Str("i8", 2);
}



inline jule::Bool _1131f8900_is_i16_compatible(jule::Str _1230_k) {
	_1230_k=_113157670_real_kind_of(_1230_k);
	return ((_1230_k == jule::Str("i8", 2)) || (_1230_k == jule::Str("i16", 3))) || (_1230_k == jule::Str("u8", 2));
}



inline jule::Bool _1131f8900_is_i32_compatible(jule::Str _2230_k) {
	_2230_k=_113157670_real_kind_of(_2230_k);
	return ((((_2230_k == jule::Str("i8", 2)) || (_2230_k == jule::Str("i16", 3))) || (_2230_k == jule::Str("i32", 3))) || (_2230_k == jule::Str("u8", 2))) || (_2230_k == jule::Str("u16", 3));
}



inline jule::Bool _1131f8900_is_i64_compatible(jule::Str _3430_k) {
	_3430_k=_113157670_real_kind_of(_3430_k);
	return ((((((_3430_k == jule::Str("i8", 2)) || (_3430_k == jule::Str("i16", 3))) || (_3430_k == jule::Str("i32", 3))) || (_3430_k == jule::Str("i64", 3))) || (_3430_k == jule::Str("u8", 2))) || (_3430_k == jule::Str("u16", 3))) || (_3430_k == jule::Str("u32", 3));
}



inline jule::Bool _1131f8900_is_u8_compatible(jule::Str _4829_k) {
	_4829_k=_113157670_real_kind_of(_4829_k);
	return _4829_k == jule::Str("u8", 2);
}



inline jule::Bool _1131f8900_is_u16_compatible(jule::Str _5430_k) {
	_5430_k=_113157670_real_kind_of(_5430_k);
	return (_5430_k == jule::Str("u8", 2)) || (_5430_k == jule::Str("u16", 3));
}



inline jule::Bool _1131f8900_is_u32_compatible(jule::Str _6030_k) {
	_6030_k=_113157670_real_kind_of(_6030_k);
	return ((_6030_k == jule::Str("u8", 2)) || (_6030_k == jule::Str("u16", 3))) || (_6030_k == jule::Str("u32", 3));
}



inline jule::Bool _1131f8900_is_u64_compatible(jule::Str _7030_k) {
	_7030_k=_113157670_real_kind_of(_7030_k);
	return (((_7030_k == jule::Str("u8", 2)) || (_7030_k == jule::Str("u16", 3))) || (_7030_k == jule::Str("u32", 3))) || (_7030_k == jule::Str("u64", 3));
}



inline jule::Bool _1131f8900_is_f32_compatible(jule::Str _8130_k) {
	_8130_k=_113157670_real_kind_of(_8130_k);
	return ((((((((_8130_k == jule::Str("f32", 3)) || (_8130_k == jule::Str("i8", 2))) || (_8130_k == jule::Str("i16", 3))) || (_8130_k == jule::Str("i32", 3))) || (_8130_k == jule::Str("i64", 3))) || (_8130_k == jule::Str("u8", 2))) || (_8130_k == jule::Str("u16", 3))) || (_8130_k == jule::Str("u32", 3))) || (_8130_k == jule::Str("u64", 3));
}



inline jule::Bool _1131f8900_is_f64_compatible(jule::Str _9730_k) {
	_9730_k=_113157670_real_kind_of(_9730_k);
	return (((((((((_9730_k == jule::Str("f64", 3)) || (_9730_k == jule::Str("f32", 3))) || (_9730_k == jule::Str("i8", 2))) || (_9730_k == jule::Str("i16", 3))) || (_9730_k == jule::Str("i32", 3))) || (_9730_k == jule::Str("i64", 3))) || (_9730_k == jule::Str("u8", 2))) || (_9730_k == jule::Str("u16", 3))) || (_9730_k == jule::Str("u32", 3))) || (_9730_k == jule::Str("u64", 3));
}



inline jule::Bool _1131f8900_types_are_compatible(jule::Str _11633_k1,jule::Str _11642_k2) {
	_11633_k1=_113157670_real_kind_of(_11633_k1);
	{
		auto _match_expr{ _11633_k1 };
		if (!((jule::Str("any", 3)) == _match_expr)) { goto _case_end_4633344736; }
		_case_begin_4633344736:;
		{
			return true;
		}
		goto _match_end_4633341024;
		_case_end_4633344736:;
		if (!((jule::Str("i8", 2)) == _match_expr)) { goto _case_end_4633344848; }
		_case_begin_4633344848:;
		{
			return _1131f8900_is_i8_compatible(_11642_k2);
		}
		goto _match_end_4633341024;
		_case_end_4633344848:;
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4633344960; }
		_case_begin_4633344960:;
		{
			return _1131f8900_is_i16_compatible(_11642_k2);
		}
		goto _match_end_4633341024;
		_case_end_4633344960:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4633343200; }
		_case_begin_4633343200:;
		{
			return _1131f8900_is_i32_compatible(_11642_k2);
		}
		goto _match_end_4633341024;
		_case_end_4633343200:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4633343312; }
		_case_begin_4633343312:;
		{
			return _1131f8900_is_i64_compatible(_11642_k2);
		}
		goto _match_end_4633341024;
		_case_end_4633343312:;
		if (!((jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4633343424; }
		_case_begin_4633343424:;
		{
			return _1131f8900_is_u8_compatible(_11642_k2);
		}
		goto _match_end_4633341024;
		_case_end_4633343424:;
		if (!((jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4633344048; }
		_case_begin_4633344048:;
		{
			return _1131f8900_is_u16_compatible(_11642_k2);
		}
		goto _match_end_4633341024;
		_case_end_4633344048:;
		if (!((jule::Str("u32", 3)) == _match_expr)) { goto _case_end_4633344160; }
		_case_begin_4633344160:;
		{
			return _1131f8900_is_u32_compatible(_11642_k2);
		}
		goto _match_end_4633341024;
		_case_end_4633344160:;
		if (!((jule::Str("u64", 3)) == _match_expr)) { goto _case_end_4633344272; }
		_case_begin_4633344272:;
		{
			return _1131f8900_is_u64_compatible(_11642_k2);
		}
		goto _match_end_4633341024;
		_case_end_4633344272:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4633344384; }
		_case_begin_4633344384:;
		{
			return _1131f8900_is_f32_compatible(_11642_k2);
		}
		goto _match_end_4633341024;
		_case_end_4633344384:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4633345104; }
		_case_begin_4633345104:;
		{
			return _1131f8900_is_f64_compatible(_11642_k2);
		}
		goto _match_end_4633341024;
		_case_end_4633345104:;
		if (!((jule::Str("bool", 4)) == _match_expr)) { goto _case_end_4633345216; }
		_case_begin_4633345216:;
		{
			return _11642_k2 == jule::Str("bool", 4);
		}
		goto _match_end_4633341024;
		_case_end_4633345216:;
		if (!((jule::Str("str", 3)) == _match_expr)) { goto _case_end_4633345328; }
		_case_begin_4633345328:;
		{
			return _11642_k2 == jule::Str("str", 3);
		}
		goto _match_end_4633341024;
		_case_end_4633345328:;
		_case_begin_4633342896:;
		{
			return false;
		}
		goto _match_end_4633341024;
		_case_end_4633342896:;
		_match_end_4633341024:;
	}
}



inline jule::Bool _1131f8900_is_i16_greater(jule::Str _13727_k) {
	_13727_k=_113157670_real_kind_of(_13727_k);
	return _13727_k == jule::Str("u8", 2);
}



inline jule::Bool _1131f8900_is_i32_greater(jule::Str _14327_k) {
	_14327_k=_113157670_real_kind_of(_14327_k);
	return (_14327_k == jule::Str("i8", 2)) || (_14327_k == jule::Str("i16", 3));
}



inline jule::Bool _1131f8900_is_i64_greater(jule::Str _14927_k) {
	_14927_k=_113157670_real_kind_of(_14927_k);
	return ((_14927_k == jule::Str("i8", 2)) || (_14927_k == jule::Str("i16", 3))) || (_14927_k == jule::Str("i32", 3));
}



inline jule::Bool _1131f8900_is_u8_greater(jule::Str _15926_k) {
	_15926_k=_113157670_real_kind_of(_15926_k);
	return _15926_k == jule::Str("i8", 2);
}



inline jule::Bool _1131f8900_is_u16_greater(jule::Str _16527_k) {
	_16527_k=_113157670_real_kind_of(_16527_k);
	return ((_16527_k == jule::Str("u8", 2)) || (_16527_k == jule::Str("i8", 2))) || (_16527_k == jule::Str("i16", 3));
}



inline jule::Bool _1131f8900_is_u32_greater(jule::Str _17527_k) {
	_17527_k=_113157670_real_kind_of(_17527_k);
	return ((((_17527_k == jule::Str("u8", 2)) || (_17527_k == jule::Str("u16", 3))) || (_17527_k == jule::Str("i8", 2))) || (_17527_k == jule::Str("i16", 3))) || (_17527_k == jule::Str("i32", 3));
}



inline jule::Bool _1131f8900_is_u64_greater(jule::Str _18727_k) {
	_18727_k=_113157670_real_kind_of(_18727_k);
	return ((((((_18727_k == jule::Str("u8", 2)) || (_18727_k == jule::Str("u16", 3))) || (_18727_k == jule::Str("u32", 3))) || (_18727_k == jule::Str("i8", 2))) || (_18727_k == jule::Str("i16", 3))) || (_18727_k == jule::Str("i32", 3))) || (_18727_k == jule::Str("i64", 3));
}



inline jule::Bool _1131f8900_is_f32_greater(jule::Str _20123_k) {
	return _20123_k != jule::Str("f64", 3);
}



inline jule::Bool _1131f8900_is_f64_greater(jule::Str _20323_k) {
	return true;
}



inline jule::Bool _1131f8900_is_greater(jule::Str _20623_k1,jule::Str _20632_k2) {
	_20623_k1=_113157670_real_kind_of(_20623_k1);
	{
		auto _match_expr{ _20623_k1 };
		if (!((jule::Str("i16", 3)) == _match_expr)) { goto _case_end_4633384912; }
		_case_begin_4633384912:;
		{
			return _1131f8900_is_i16_greater(_20632_k2);
		}
		goto _match_end_4633383040;
		_case_end_4633384912:;
		if (!((jule::Str("i32", 3)) == _match_expr)) { goto _case_end_4633385776; }
		_case_begin_4633385776:;
		{
			return _1131f8900_is_i32_greater(_20632_k2);
		}
		goto _match_end_4633383040;
		_case_end_4633385776:;
		if (!((jule::Str("i64", 3)) == _match_expr)) { goto _case_end_4633385888; }
		_case_begin_4633385888:;
		{
			return _1131f8900_is_i64_greater(_20632_k2);
		}
		goto _match_end_4633383040;
		_case_end_4633385888:;
		if (!((jule::Str("u16", 3)) == _match_expr)) { goto _case_end_4633386000; }
		_case_begin_4633386000:;
		{
			return _1131f8900_is_u16_greater(_20632_k2);
		}
		goto _match_end_4633383040;
		_case_end_4633386000:;
		if (!((jule::Str("u8", 2)) == _match_expr)) { goto _case_end_4633384272; }
		_case_begin_4633384272:;
		{
			return _1131f8900_is_u8_greater(_20632_k2);
		}
		goto _match_end_4633383040;
		_case_end_4633384272:;
		if (!((jule::Str("u32", 3)) == _match_expr)) { goto _case_end_4633384384; }
		_case_begin_4633384384:;
		{
			return _1131f8900_is_u32_greater(_20632_k2);
		}
		goto _match_end_4633383040;
		_case_end_4633384384:;
		if (!((jule::Str("u64", 3)) == _match_expr)) { goto _case_end_4633384496; }
		_case_begin_4633384496:;
		{
			return _1131f8900_is_u64_greater(_20632_k2);
		}
		goto _match_end_4633383040;
		_case_end_4633384496:;
		if (!((jule::Str("f32", 3)) == _match_expr)) { goto _case_end_4633385088; }
		_case_begin_4633385088:;
		{
			return _1131f8900_is_f32_greater(_20632_k2);
		}
		goto _match_end_4633383040;
		_case_end_4633385088:;
		if (!((jule::Str("f64", 3)) == _match_expr)) { goto _case_end_4633385200; }
		_case_begin_4633385200:;
		{
			return _1131f8900_is_f64_greater(_20632_k2);
		}
		goto _match_end_4633383040;
		_case_end_4633385200:;
		if (!((jule::Str("any", 3)) == _match_expr)) { goto _case_end_4633385312; }
		_case_begin_4633385312:;
		{
			return true;
		}
		goto _match_end_4633383040;
		_case_end_4633385312:;
		_case_begin_4633383808:;
		{
			return false;
		}
		goto _match_end_4633383040;
		_case_end_4633383808:;
		_match_end_4633383040:;
	}
}



inline jule::Bool _1132426f0_is_sig_int(jule::Str _2723_k) {
	_2723_k=_113157670_real_kind_of(_2723_k);
	return (((_2723_k == jule::Str("i8", 2)) || (_2723_k == jule::Str("i16", 3))) || (_2723_k == jule::Str("i32", 3))) || (_2723_k == jule::Str("i64", 3));
}



inline jule::Bool _1132426f0_is_unsig_int(jule::Str _3825_k) {
	_3825_k=_113157670_real_kind_of(_3825_k);
	return (((_3825_k == jule::Str("u8", 2)) || (_3825_k == jule::Str("u16", 3))) || (_3825_k == jule::Str("u32", 3))) || (_3825_k == jule::Str("u64", 3));
}



inline jule::Bool _1132426f0_is_int(jule::Str _4915_k) {
	return _1132426f0_is_sig_int(_4915_k) || _1132426f0_is_unsig_int(_4915_k);
}



inline jule::Bool _1132426f0_is_float(jule::Str _5417_k) {
	return (_5417_k == jule::Str("f32", 3)) || (_5417_k == jule::Str("f64", 3));
}



inline jule::Bool _1132426f0_is_num(jule::Str _5915_k) {
	return _1132426f0_is_int(_5915_k) || _1132426f0_is_float(_5915_k);
}



inline jule::Bool _1132426f0_is_sig_num(jule::Str _6419_k) {
	return _1132426f0_is_sig_int(_6419_k) || _1132426f0_is_float(_6419_k);
}



inline std::tuple<jule::Str,jule::Bool> _1132be720_is_byte_lit(jule::Str _1524_kind) {
	if (_1524_kind.len() < 3LL) {
		return std::make_tuple(jule::Str("", 0),false);
	}
	_1524_kind=_1524_kind.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_1524_kind.len() - 1LL));
	jule::Bool _2113_is_byte = false;
	{
		if (!(((_1524_kind.len() == 1LL) && (_1524_kind[static_cast<jule::Int>(0LL)] <= 255LL)))) { goto _case_end_4633430832; }
		_case_begin_4633430832:;
		{
			_2113_is_byte=true;
		}
		goto _match_end_4633430384;
		_case_end_4633430832:;
		if (!(((_1524_kind[static_cast<jule::Int>(0LL)] == '\\') && (_1524_kind[static_cast<jule::Int>(1LL)] == 'x')))) { goto _case_end_4633430944; }
		_case_begin_4633430944:;
		{
			_2113_is_byte=true;
		}
		goto _match_end_4633430384;
		_case_end_4633430944:;
		if (!((((_1524_kind[static_cast<jule::Int>(0LL)] == '\\') && (_1524_kind[static_cast<jule::Int>(1LL)] >= '0')) && (_1524_kind[static_cast<jule::Int>(1LL)] <= '7')))) { goto _case_end_4633431056; }
		_case_begin_4633431056:;
		{
			_2113_is_byte=true;
		}
		goto _match_end_4633430384;
		_case_end_4633431056:;
		_match_end_4633430384:;
	}
	return std::make_tuple(_1524_kind,_2113_is_byte);
}



inline jule::I32 _1132be720_to_rune(jule::Slice<jule::U8> _4016_bytes) {
	if (_4016_bytes.len() == 0LL) {
		return 0LL;
	}
	jule::I32 _4513_r = 0LL;
	if ((_4016_bytes[static_cast<jule::Int>(0LL)] == '\\') && (_4016_bytes.len() > 1LL)) {
		jule::Int _4717_i = 0LL;
		_4513_r=static_cast<jule::I32>(_1132be720_rune_from_esq_seq(_4016_bytes,_4717_i));
	} else {
		std::tie(_4513_r,std::ignore) = _1220fe860_decode_rune(_4016_bytes);
	}
	return _4513_r;
}



inline jule::Str _1132be720_to_raw_str(jule::Slice<jule::U8> _5919_bytes) {
	return static_cast<jule::Str>(_5919_bytes);
}



inline jule::Str _1132be720_to_str(jule::Slice<jule::U8> _6415_bytes) {
	if (_6415_bytes.len() == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _6913_s = jule::Str("", 0);
	jule::Int _7013_i = 0LL;
	_iter_begin_4633456688:;
	if (!(_7013_i < _6415_bytes.len())) { goto _iter_end_4633456688; }
	{
		jule::U8 _7213_b = _6415_bytes[static_cast<jule::Int>(_7013_i)];
		if (_7213_b == '\\') {
			_6913_s+=_1132be720_str_esq_seq(_6415_bytes,_7013_i);
		} else {
			jule::I32 _7618_r;
			jule::Int _7621_size;
			std::tie(_7618_r,_7621_size) = _1220fe860_decode_rune(_6415_bytes.slice(static_cast<jule::Int>(_7013_i)));
			_7013_i+=_7621_size;
			_6913_s+=static_cast<jule::Str>(_7618_r);
		}
	}
	_iter_next_4633456688:;
	goto _iter_begin_4633456688;
	_iter_end_4633456688:;
	return _6913_s;
}



inline std::tuple<jule::U8,jule::Bool> _1132be720_try_btoa_common_esq(jule::Slice<jule::U8> _8424_bytes) {
	jule::Bool _8452_ok = jule::Bool();
	jule::U8 _8441_seq = jule::U8();
	if ((_8424_bytes.len() < 2LL) || (_8424_bytes[static_cast<jule::Int>(0LL)] != '\\')) {
		return std::make_tuple(_8441_seq,_8452_ok);
	}
	{
		auto _match_expr{ _8424_bytes[static_cast<jule::Int>(1LL)] };
		if (!(('\\') == _match_expr)) { goto _case_end_4633471024; }
		_case_begin_4633471024:;
		{
			_8441_seq='\\';
		}
		goto _match_end_4633467872;
		_case_end_4633471024:;
		if (!(('\'') == _match_expr)) { goto _case_end_4633471136; }
		_case_begin_4633471136:;
		{
			_8441_seq='\'';
		}
		goto _match_end_4633467872;
		_case_end_4633471136:;
		if (!(('\"') == _match_expr)) { goto _case_end_4633471248; }
		_case_begin_4633471248:;
		{
			_8441_seq='\"';
		}
		goto _match_end_4633467872;
		_case_end_4633471248:;
		if (!(('a') == _match_expr)) { goto _case_end_4633471360; }
		_case_begin_4633471360:;
		{
			_8441_seq='\a';
		}
		goto _match_end_4633467872;
		_case_end_4633471360:;
		if (!(('b') == _match_expr)) { goto _case_end_4633471472; }
		_case_begin_4633471472:;
		{
			_8441_seq='\b';
		}
		goto _match_end_4633467872;
		_case_end_4633471472:;
		if (!(('f') == _match_expr)) { goto _case_end_4633471584; }
		_case_begin_4633471584:;
		{
			_8441_seq='\f';
		}
		goto _match_end_4633467872;
		_case_end_4633471584:;
		if (!(('n') == _match_expr)) { goto _case_end_4633471696; }
		_case_begin_4633471696:;
		{
			_8441_seq='\n';
		}
		goto _match_end_4633467872;
		_case_end_4633471696:;
		if (!(('r') == _match_expr)) { goto _case_end_4633471808; }
		_case_begin_4633471808:;
		{
			_8441_seq='\r';
		}
		goto _match_end_4633467872;
		_case_end_4633471808:;
		if (!(('t') == _match_expr)) { goto _case_end_4633471920; }
		_case_begin_4633471920:;
		{
			_8441_seq='\t';
		}
		goto _match_end_4633467872;
		_case_end_4633471920:;
		if (!(('v') == _match_expr)) { goto _case_end_4633472032; }
		_case_begin_4633472032:;
		{
			_8441_seq='\v';
		}
		goto _match_end_4633467872;
		_case_end_4633472032:;
		_match_end_4633467872:;
	}
	_8452_ok=_8441_seq != 0LL;
	return std::make_tuple(_8441_seq,_8452_ok);
}



inline jule::I32 _1132be720_rune_from_esq_seq(jule::Slice<jule::U8> _10622_bytes,jule::Int& _10642_i) {
	jule::U8 _10710_b;
	jule::Bool _10713_ok;
	std::tie(_10710_b,_10713_ok) = _1132be720_try_btoa_common_esq(_10622_bytes.slice(static_cast<jule::Int>(_10642_i)));
	(_10642_i)++;
	if (_10713_ok) {
		(_10642_i)++;
		return static_cast<jule::I32>(_10710_b);
	}
	{
		auto _match_expr{ _10622_bytes[static_cast<jule::Int>(_10642_i)] };
		if (!(('u') == _match_expr)) { goto _case_end_4633490640; }
		_case_begin_4633490640:;
		{
			
			jule::U64 _11714_rc;
			std::tie(_11714_rc,std::ignore) = _13219c810_parse_uint(static_cast<jule::Str>(_10622_bytes.slice(static_cast<jule::Int>(_10642_i + 1LL),static_cast<jule::Int>(_10642_i + 5LL))),16LL,64LL);
			_10642_i+=5LL;
			jule::I32 _11913_r = static_cast<jule::I32>(_11714_rc);
			return _11913_r;
		}
		goto _match_end_4633485792;
		_case_end_4633490640:;
		if (!(('U') == _match_expr)) { goto _case_end_4633493168; }
		_case_begin_4633493168:;
		{
			
			jule::U64 _12414_rc;
			std::tie(_12414_rc,std::ignore) = _13219c810_parse_uint(static_cast<jule::Str>(_10622_bytes.slice(static_cast<jule::Int>(_10642_i + 1LL),static_cast<jule::Int>(_10642_i + 9LL))),16LL,64LL);
			_10642_i+=9LL;
			jule::I32 _12613_r = static_cast<jule::I32>(_12414_rc);
			return _12613_r;
		}
		goto _match_end_4633485792;
		_case_end_4633493168:;
		if (!(('x') == _match_expr)) { goto _case_end_4633494944; }
		_case_begin_4633494944:;
		{
			
			jule::Slice<jule::U8> _13113_seq = _10622_bytes.slice(static_cast<jule::Int>(_10642_i + 1LL),static_cast<jule::Int>(_10642_i + 3LL));
			_10642_i+=3LL;
			jule::U64 _13314_b;
			std::tie(_13314_b,std::ignore) = _13219c810_parse_uint(static_cast<jule::Str>(_13113_seq),16LL,64LL);
			return static_cast<jule::I32>(_13314_b);
		}
		goto _match_end_4633485792;
		_case_end_4633494944:;
		_case_begin_4633485184:;
		{
			
			jule::Slice<jule::U8> _13813_seq = _10622_bytes.slice(static_cast<jule::Int>(_10642_i),static_cast<jule::Int>(_10642_i + 3LL));
			_10642_i+=3LL;
			jule::U64 _14014_b;
			std::tie(_14014_b,std::ignore) = _13219c810_parse_uint(static_cast<jule::Str>(_13813_seq.slice(static_cast<jule::Int>(1LL))),8LL,64LL);
			return static_cast<jule::I32>(_14014_b);
		}
		goto _match_end_4633485792;
		_case_end_4633485184:;
		_match_end_4633485792:;
	}
}



inline jule::Str _1132be720_str_esq_seq(jule::Slice<jule::U8> _14516_bytes,jule::Int& _14536_i) {
	jule::I32 _1469_r = _1132be720_rune_from_esq_seq(_14516_bytes,_14536_i);
	if (_1469_r <= 255LL) {
		return static_cast<jule::Str>(_1469_r);
	}
	return _1132be720_to_str(static_cast<jule::Slice<jule::U8>>(static_cast<jule::Str>(_1469_r)));
}



inline jule::Ref<_112572770_ReferenceStack> _112572770_new_reference_stack(void) {
	return jule::new_struct<_112572770_ReferenceStack>(new( std::nothrow ) _112572770_ReferenceStack());
}



inline jule::Str _112572770_str_repeat(jule::Str _9615_sub,jule::Int _9629_n) {
	if (_9629_n == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _10113_s = jule::Str("", 0);
	_iter_begin_4636273872:;
	if (!(_9629_n > 0LL)) { goto _iter_end_4636273872; }
	{
		_10113_s+=_9615_sub;
	}
	_iter_next_4636273872:;
	(_9629_n)--;
	goto _iter_begin_4636273872;
	_iter_end_4636273872:;
	return _10113_s;
}



inline jule::Str _112572770_build_doc(jule::Ref<_111612b20_CommentGroup> _10818_cg) {
	if ((!(jule::real(_10818_cg)))) {
		return jule::Str("", 0);
	}
	jule::Str _11313_doc = jule::Str("", 0);
	{
		auto __julec_range_expr = _10818_cg->_field_comments;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_111612b20_Comment> _112572770_c = *__julec_range_begin;
			_iter_begin_4636279568:;
			{
				_11313_doc+=_112572770_c->_field_text;
				_11313_doc+=jule::Str(" ", 1);
			}
			_iter_next_4636279568:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _112572770_c = *__julec_range_begin; goto _iter_begin_4636279568; }
			_iter_end_4636279568:;
		}
	}
	return _11313_doc;
}



inline jule::Ref<_1217f7750_TypeSymbol> _112572770_build_type(jule::Ref<_111612b20_TypeDecl> _12119_t) {
	if ((!(jule::real(_12119_t)))) {
		return jule::new_ref<_1217f7750_TypeSymbol>();
	}
	return jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(_12119_t,jule::Ref<_1217f7750_TypeKind>()));
}



inline jule::Ref<_121dedce0_Value> _112572770_build_expr(jule::Ref<_111612b20_Expr> _13019_expr) {
	if ((!(jule::real(_13019_expr)))) {
		return jule::new_ref<_121dedce0_Value>();
	}
	return jule::new_struct<_121dedce0_Value>(new( std::nothrow ) _121dedce0_Value(_13019_expr,jule::Ref<_121dedce0_Data>()));
}



inline jule::Ref<_1217f7750_TypeAlias> _112572770_build_type_alias(jule::Ref<_111612b20_TypeAliasDecl> _14025_decl) {
	return jule::new_struct<_1217f7750_TypeAlias>(new( std::nothrow ) _1217f7750_TypeAlias(_14025_decl->_field_scope,_14025_decl->_field_public,_14025_decl->_field_cpp_linked,jule::Bool(),_14025_decl->_field_token,_14025_decl->_field_ident,_112572770_build_type(_14025_decl->_field_kind),_112572770_build_doc(_14025_decl->_field_doc_comments),jule::Slice<jule::Any>()));
}



inline jule::Ref<_11209db80_Field> _112572770_build_field(jule::Ref<_111612b20_FieldDecl> _15220_decl) {
	return jule::new_struct<_11209db80_Field>(new( std::nothrow ) _11209db80_Field(jule::Ref<_11209db80_Struct>(),_15220_decl->_field_token,_15220_decl->_field_public,_15220_decl->_field_mutable,_15220_decl->_field_ident,_112572770_build_type(_15220_decl->_field_kind)));
}



inline jule::Slice<jule::Ref<_11209db80_Field>> _112572770_build_fields(jule::Slice<jule::Ref<_111612b20_FieldDecl>> _16221_decls) {
	jule::Slice<jule::Ref<_11209db80_Field>> _16313_fields = jule::Slice<jule::Ref<_11209db80_Field>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_16221_decls.len())));
	{
		auto __julec_range_expr = _16221_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112572770_i = 0;
			jule::Ref<_111612b20_FieldDecl> _112572770_decl = *__julec_range_begin;
			_iter_begin_4636297504:;
			{
				_16313_fields[static_cast<jule::Int>(_112572770_i)]=_112572770_build_field(_112572770_decl);
			}
			_iter_next_4636297504:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112572770_i; _112572770_decl = *__julec_range_begin; goto _iter_begin_4636297504; }
			_iter_end_4636297504:;
		}
	}
	return _16313_fields;
}



inline jule::Ref<_11209db80_Struct> _112572770_build_struct(jule::Ref<_111612b20_StructDecl> _17021_decl) {
	return jule::new_struct<_11209db80_Struct>(new( std::nothrow ) _11209db80_Struct(jule::Ref<_11262c360_Sema>(),jule::Slice<jule::Ref<_11209db80_Struct>>(),jule::Slice<jule::Ref<_11209db80_Struct>>(),_17021_decl->_field_token,_17021_decl->_field_ident,_112572770_build_fields(_17021_decl->_field_fields),_11203c360_Vector_11(),_17021_decl->_field_public,_17021_decl->_field_cpp_linked,_17021_decl->_field_directives,_112572770_build_doc(_17021_decl->_field_doc_comments),_17021_decl->_field_generics,jule::Slice<jule::Ref<_11209e2e0_Trait>>(),jule::Slice<jule::Ref<_11209db80_StructIns>>()));
}



inline jule::Ref<_112446fb0_Param> _112572770_build_param(jule::Ref<_111612b20_ParamDecl> _18320_decl) {
	return jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_18320_decl->_field_token,_18320_decl->_field_mutable,_18320_decl->_field_variadic,_18320_decl->_field_reference,_112572770_build_type(_18320_decl->_field_kind),_18320_decl->_field_ident));
}



inline jule::Slice<jule::Ref<_112446fb0_Param>> _112572770_build_params(jule::Slice<jule::Ref<_111612b20_ParamDecl>> _19421_decls) {
	jule::Slice<jule::Ref<_112446fb0_Param>> _19513_params = jule::Slice<jule::Ref<_112446fb0_Param>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_19421_decls.len())));
	{
		auto __julec_range_expr = _19421_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112572770_i = 0;
			jule::Ref<_111612b20_ParamDecl> _112572770_decl = *__julec_range_begin;
			_iter_begin_4636314736:;
			{
				_19513_params[static_cast<jule::Int>(_112572770_i)]=_112572770_build_param(_112572770_decl);
			}
			_iter_next_4636314736:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112572770_i; _112572770_decl = *__julec_range_begin; goto _iter_begin_4636314736; }
			_iter_end_4636314736:;
		}
	}
	return _19513_params;
}



inline jule::Ref<_112446fb0_RetType> _112572770_build_ret_type(jule::Ref<_111612b20_RetTypeDecl> _20223_decl) {
	if ((_20223_decl->_field_idents == nullptr) && (!(jule::real(_20223_decl->_field_kind)))) {
		return jule::new_ref<_112446fb0_RetType>();
	}
	return jule::new_struct<_112446fb0_RetType>(new( std::nothrow ) _112446fb0_RetType(_112572770_build_type(_20223_decl->_field_kind),_20223_decl->_field_idents));
}



inline jule::Ref<_112446fb0_Fn> _112572770_build_fn(jule::Ref<_111612b20_FnDecl> _21217_decl) {
	return jule::new_struct<_112446fb0_Fn>(new( std::nothrow ) _112446fb0_Fn(jule::Ref<_11262c360_Sema>(),_21217_decl->_field_token,_21217_decl->_field_global,_21217_decl->_field_unsafety,_21217_decl->_field_public,_21217_decl->_field_cpp_linked,_21217_decl->_field_statically,_21217_decl->_field_ident,_21217_decl->_field_directives,_112572770_build_doc(_21217_decl->_field_doc_comments),_21217_decl->_field_scope,_21217_decl->_field_generics,_112572770_build_ret_type(_21217_decl->_field_result),_112572770_build_params(_21217_decl->_field_params),jule::Ref<_11209db80_Struct>(),jule::Slice<jule::Ref<_112446fb0_FnIns>>()));
}



inline jule::Slice<jule::Ref<_112446fb0_Fn>> _112572770_build_methods(jule::Slice<jule::Ref<_111612b20_FnDecl>> _23022_decls) {
	jule::Slice<jule::Ref<_112446fb0_Fn>> _23113_methods = jule::Slice<jule::Ref<_112446fb0_Fn>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_23022_decls.len())));
	{
		auto __julec_range_expr = _23022_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112572770_i = 0;
			jule::Ref<_111612b20_FnDecl> _112572770_decl = *__julec_range_begin;
			_iter_begin_4636332464:;
			{
				_23113_methods[static_cast<jule::Int>(_112572770_i)]=_112572770_build_fn(_112572770_decl);
			}
			_iter_next_4636332464:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112572770_i; _112572770_decl = *__julec_range_begin; goto _iter_begin_4636332464; }
			_iter_end_4636332464:;
		}
	}
	return _23113_methods;
}



inline jule::Ref<_11209e2e0_Trait> _112572770_build_trait(jule::Ref<_111612b20_TraitDecl> _23820_decl) {
	return jule::new_struct<_11209e2e0_Trait>(new( std::nothrow ) _11209e2e0_Trait(_23820_decl->_field_token,_23820_decl->_field_ident,_23820_decl->_field_public,_112572770_build_doc(_23820_decl->_field_doc_comments),_112572770_build_methods(_23820_decl->_field_methods),jule::Slice<jule::Ref<_11209db80_Struct>>()));
}



inline jule::Ref<_11261eaf0_EnumItem> _112572770_build_enum_item(jule::Ref<_111612b20_EnumItemDecl> _24824_decl) {
	return jule::new_struct<_11261eaf0_EnumItem>(new( std::nothrow ) _11261eaf0_EnumItem(_24824_decl->_field_token,_24824_decl->_field_ident,_112572770_build_expr(_24824_decl->_field_expr)));
}



inline jule::Slice<jule::Ref<_11261eaf0_EnumItem>> _112572770_build_enum_items(jule::Slice<jule::Ref<_111612b20_EnumItemDecl>> _25625_decls) {
	jule::Slice<jule::Ref<_11261eaf0_EnumItem>> _25713_items = jule::Slice<jule::Ref<_11261eaf0_EnumItem>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_25625_decls.len())));
	{
		auto __julec_range_expr = _25625_decls;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _112572770_i = 0;
			jule::Ref<_111612b20_EnumItemDecl> _112572770_decl = *__julec_range_begin;
			_iter_begin_4636347296:;
			{
				_25713_items[static_cast<jule::Int>(_112572770_i)]=_112572770_build_enum_item(_112572770_decl);
			}
			_iter_next_4636347296:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_112572770_i; _112572770_decl = *__julec_range_begin; goto _iter_begin_4636347296; }
			_iter_end_4636347296:;
		}
	}
	return _25713_items;
}



inline jule::Ref<_11261eaf0_Enum> _112572770_build_enum(jule::Ref<_111612b20_EnumDecl> _26419_decl) {
	return jule::new_struct<_11261eaf0_Enum>(new( std::nothrow ) _11261eaf0_Enum(_26419_decl->_field_token,_26419_decl->_field_public,_26419_decl->_field_ident,_112572770_build_type(_26419_decl->_field_kind),_112572770_build_enum_items(_26419_decl->_field_items),_112572770_build_doc(_26419_decl->_field_doc_comments)));
}



inline jule::Ref<_1320e22c0_Var> _112572770_build_var(jule::Ref<_111612b20_VarDecl> _27518_decl) {
	return jule::new_struct<_1320e22c0_Var>(new( std::nothrow ) _1320e22c0_Var(jule::Ref<_1126288e0_Scope>(),_27518_decl->_field_token,_27518_decl->_field_ident,_27518_decl->_field_cpp_linked,_27518_decl->_field_constant,_27518_decl->_field_mutable,_27518_decl->_field_public,jule::Bool(),_27518_decl->_field_statically,_27518_decl->_field_reference,_112572770_build_doc(_27518_decl->_field_doc_comments),_112572770_build_type(_27518_decl->_field_kind),_112572770_build_expr(_27518_decl->_field_expr),_112572770_new_reference_stack(),jule::Slice<jule::Ref<_1320e22c0_Var>>()));
}



inline jule::Ref<_112626410_Impl> _112572770_build_impl(jule::Ref<_111612b20_Impl> _29219_decl) {
	return jule::new_struct<_112626410_Impl>(new( std::nothrow ) _112626410_Impl(_29219_decl->_field_base,_29219_decl->_field_dest,_112572770_build_methods(_29219_decl->_field_methods)));
}



inline jule::Ref<_1126288e0_ScopeChecker> _1126288e0_new_scope_checker_base(jule::Ref<_11262c360_Sema> _3831_s,jule::Ref<_112446fb0_FnIns> _3845_owner) {
	return jule::new_struct<_1126288e0_ScopeChecker>(new( std::nothrow ) _1126288e0_ScopeChecker(_3831_s,_3845_owner,jule::Ref<_1126288e0_ScopeChecker>(),jule::Int(),jule::new_struct<_1320e2330_SymbolTable>(new( std::nothrow ) _1320e2330_SymbolTable()),jule::Ref<_1126288e0_Scope>(),jule::Ref<_111612b20_ScopeTree>(),jule::Uintptr(),jule::Uintptr(),jule::Ref<jule::Slice<jule::Ref<_1126288e0_ScopeLabel>>>(),jule::Ref<jule::Slice<jule::Ref<_1126288e0_ScopeGoto>>>(),jule::Int()));
}



inline jule::Ref<_1126288e0_ScopeChecker> _1126288e0_new_scope_checker(jule::Ref<_11262c360_Sema> _4626_s,jule::Ref<_112446fb0_FnIns> _4640_owner) {
	jule::Ref<_1126288e0_ScopeChecker> _4713_base = _1126288e0_new_scope_checker_base(_4626_s,_4640_owner);
	_4713_base->_field_labels=jule::new_ref<jule::Slice<jule::Ref<_1126288e0_ScopeLabel>>>(nullptr);
	_4713_base->_field_gotos=jule::new_ref<jule::Slice<jule::Ref<_1126288e0_ScopeGoto>>>(nullptr);
	return _4713_base;
}



inline jule::Ref<_1126288e0_ScopeLabel> _1126288e0_find_label_parent(jule::Str _5622_ident,jule::Ref<_1126288e0_ScopeChecker> _5638_scope) {
	jule::Ref<_1126288e0_ScopeLabel> _5713_label = _5638_scope->_method_find_label_scope(_5622_ident);
	_iter_begin_4636376480:;
	if (!((!(jule::real(_5713_label))))) { goto _iter_end_4636376480; }
	{
		if ((!(jule::real(_5638_scope->_field_parent))) || jule::real(_5638_scope->_field_owner)) {
			return jule::new_ref<_1126288e0_ScopeLabel>();
		}
		_5638_scope=_5638_scope->_field_parent;
		_5713_label=_5638_scope->_method_find_label_scope(_5622_ident);
	}
	_iter_next_4636376480:;
	goto _iter_begin_4636376480;
	_iter_end_4636376480:;
	return _5713_label;
}



inline jule::Int _1126288e0_count_match_type(jule::Ref<_1126288e0_Match> _7021_m,jule::Ref<_1217f7750_TypeKind> _7032_t) {
	jule::Int _7113_n = 0LL;
	jule::Str _729_kind = _7032_t->_method_to_str();
	_julec_label_loop:;
	{
		auto __julec_range_expr = _7021_m->_field_cases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1126288e0_Case> _1126288e0_c = *__julec_range_begin;
			_iter_begin_4636387296:;
			{
				if ((!(jule::real(_1126288e0_c)))) {
					goto _iter_next_4636387296;
				}
				{
					auto __julec_range_expr = _1126288e0_c->_field_exprs;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Any _1126288e0_expr = *__julec_range_begin;
						_iter_begin_4636390320:;
						{
							if (_1126288e0_expr == nullptr) {
								goto _iter_end_4636387296;
							}
							if (_729_kind == _1126288e0_expr.operator jule::Ref<_1217f7750_TypeKind>()->_method_to_str()) {
								(_7113_n)++;
							}
						}
						_iter_next_4636390320:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _1126288e0_expr = *__julec_range_begin; goto _iter_begin_4636390320; }
						_iter_end_4636390320:;
					}
				}
			}
			_iter_next_4636387296:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1126288e0_c = *__julec_range_begin; goto _iter_begin_4636387296; }
			_iter_end_4636387296:;
		}
	}
	return _7113_n;
}



inline jule::Slice<jule::Ref<_121dedce0_Data>> _1126288e0_get_datas_from_tuple_data(jule::Ref<_121dedce0_Data> _9434_d) {
	if (jule::real(_9434_d->_field_kind->_method_tup())) {
		{
			auto _match_expr{ _9434_d->_field_model };
			if (!(_match_expr.type_is<jule::Ref<_112673500_TupleExprModel>>())) { goto _case_end_4636408768; }
			_case_begin_4636408768:;
			{
				return _9434_d->_field_model.operator jule::Ref<_112673500_TupleExprModel>()->_field_datas;
			}
			goto _match_end_4636396400;
			_case_end_4636408768:;
			_case_begin_4636397200:;
			{
				jule::Ref<_1217f7750_Tuple> _10121_t = _9434_d->_field_kind->_method_tup();
				jule::Slice<jule::Ref<_121dedce0_Data>> _10221_r = jule::Slice<jule::Ref<_121dedce0_Data>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_10121_t->_field_types.len())));
				{
					auto __julec_range_expr = _10121_t->_field_types;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Int _1126288e0_i = 0;
						jule::Ref<_1217f7750_TypeKind> _1126288e0_kind = *__julec_range_begin;
						_iter_begin_4636405952:;
						{
							_10221_r[static_cast<jule::Int>(_1126288e0_i)]=jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(_1126288e0_kind,jule::Ref<_1217f7750_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
						}
						_iter_next_4636405952:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { ++_1126288e0_i; _1126288e0_kind = *__julec_range_begin; goto _iter_begin_4636405952; }
						_iter_end_4636405952:;
					}
				}
				return _10221_r;
			}
			goto _match_end_4636396400;
			_case_end_4636397200:;
			_match_end_4636396400:;
		}
	} else {
		return jule::Slice<jule::Ref<_121dedce0_Data>>({_9434_d});
	}
}



inline jule::Slice<jule::Any> _1126288e0_get_expr_models(jule::Any _11624_m) {
	{
		auto _match_expr{ _11624_m };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_TupleExpr>>())) { goto _case_end_4636415696; }
		_case_begin_4636415696:;
		{
			return _11624_m.operator jule::Ref<_111612b20_TupleExpr>()->_field_expr;
		}
		goto _match_end_4636413808;
		_case_end_4636415696:;
		_case_begin_4636413904:;
		{
			return jule::Slice<jule::Any>({_11624_m});
		}
		goto _match_end_4636413808;
		_case_end_4636413904:;
		_match_end_4636413808:;
	}
}



inline jule::Bool _1126288e0_check_mut(jule::Ref<_11262c360_Sema> _12318_s,jule::Ref<_121dedce0_Data> _12328_left,jule::Ref<_121dedce0_Data> _12345_right,_111613f20_Token _12359_error_token) {
	jule::Bool _12381_ok = jule::Bool();
	{
		if (!(((!(_12328_left->_field_mutable))))) { goto _case_end_4636421008; }
		_case_begin_4636421008:;
		{
			_12318_s->_method_push_err(_12359_error_token,jule::Str("assignment_to_non_mut", 21),jule::Slice<jule::Any>({}));
			_12381_ok = false;
			return _12381_ok;
		}
		goto _match_end_4636419728;
		_case_end_4636421008:;
		if (!(((jule::real(_12345_right) && (!(_12345_right->_field_mutable))) && _1217f7750_is_mut(_12345_right->_field_kind)))) { goto _case_end_4636421120; }
		_case_begin_4636421120:;
		{
			_12318_s->_method_push_err(_12359_error_token,jule::Str("assignment_non_mut_to_mut", 25),jule::Slice<jule::Any>({}));
			_12381_ok = false;
			return _12381_ok;
		}
		goto _match_end_4636419728;
		_case_end_4636421120:;
		_case_begin_4636419920:;
		{
			_12381_ok = true;
			return _12381_ok;
		}
		goto _match_end_4636419728;
		_case_end_4636419920:;
		_match_end_4636419728:;
	}
}



inline jule::Bool _1126288e0_check_assign(jule::Ref<_11262c360_Sema> _13821_s,jule::Ref<_121dedce0_Data> _13835_left,jule::Ref<_121dedce0_Data> _13852_right,_111613f20_Token _13866_error_token) {
	jule::Bool _13888_ok = jule::Bool();
	jule::Ref<_112446fb0_FnIns> _1399_f = _13835_left->_field_kind->_method_fnc();
	if ((jule::real(_1399_f) && jule::real(_1399_f->_field_decl)) && _1399_f->_field_decl->_field_global) {
		_13821_s->_method_push_err(_13866_error_token,jule::Str("assign_type_not_support_value", 29),jule::Slice<jule::Any>({}));
		_13888_ok = false;
		return _13888_ok;
	}
	{
		if (!(((!(_13835_left->_field_lvalue))))) { goto _case_end_4636440288; }
		_case_begin_4636440288:;
		{
			_13821_s->_method_push_err(_13866_error_token,jule::Str("assign_require_lvalue", 21),jule::Slice<jule::Any>({}));
			_13888_ok = false;
			return _13888_ok;
		}
		goto _match_end_4636434912;
		_case_end_4636440288:;
		if (!((_13835_left->_method_is_const()))) { goto _case_end_4636440400; }
		_case_begin_4636440400:;
		{
			_13821_s->_method_push_err(_13866_error_token,jule::Str("assign_const", 12),jule::Slice<jule::Any>({}));
			_13888_ok = false;
			return _13888_ok;
		}
		goto _match_end_4636434912;
		_case_end_4636440400:;
		if (!(((!(_1126288e0_check_mut(_13821_s,_13835_left,_13852_right,_13866_error_token)))))) { goto _case_end_4636441312; }
		_case_begin_4636441312:;
		{
			_13888_ok = false;
			return _13888_ok;
		}
		goto _match_end_4636434912;
		_case_end_4636441312:;
		_case_begin_4636439136:;
		{
			_13888_ok = true;
			return _13888_ok;
		}
		goto _match_end_4636434912;
		_case_end_4636439136:;
		_match_end_4636434912:;
	}
}



inline jule::Bool _1126288e0_is_valid_ast_st_for_next_st(jule::Any _16236_n) {
	{
		auto _match_expr{ _16236_n };
		if (!(_match_expr.type_is<jule::Ref<_111612b20_AssignSt>>())) { goto _case_end_4636450832; }
		_case_begin_4636450832:;
		{
			return (!(_16236_n.operator jule::Ref<_111612b20_AssignSt>()->_field_declarative));
		}
		goto _match_end_4636449136;
		_case_end_4636450832:;
		if (!(_match_expr.type_is<jule::Ref<_111612b20_FnCallExpr>>() || _match_expr.type_is<jule::Ref<_111612b20_Expr>>())) { goto _case_end_4636450944; }
		_case_begin_4636450944:;
		{
			return true;
		}
		goto _match_end_4636449136;
		_case_end_4636450944:;
		_case_begin_4636448288:;
		{
			return false;
		}
		goto _match_end_4636449136;
		_case_end_4636448288:;
		_match_end_4636449136:;
	}
}



inline jule::Bool _1126288e0_is_valid_st_for_next_st(jule::Any _17628_st) {
	{
		auto _match_expr{ _17628_st };
		if (!(_match_expr.type_is<jule::Ref<_112673500_FnCallExprModel>>() || _match_expr.type_is<jule::Ref<_1126288e0_Postfix>>() || _match_expr.type_is<jule::Ref<_1126288e0_Assign>>() || _match_expr.type_is<jule::Ref<_1126288e0_MultiAssign>>())) { goto _case_end_4636455680; }
		_case_begin_4636455680:;
		{
			return true;
		}
		goto _match_end_4636451184;
		_case_end_4636455680:;
		if (!(_match_expr.type_is<jule::Ref<_121dedce0_Data>>())) { goto _case_end_4636455792; }
		_case_begin_4636455792:;
		{
			{
				auto _match_expr{ _17628_st.operator jule::Ref<_121dedce0_Data>()->_field_model };
				if (!(_match_expr.type_is<jule::Ref<_112673500_FnCallExprModel>>())) { goto _case_end_4636464496; }
				_case_begin_4636464496:;
				{
					return true;
				}
				goto _match_end_4636462640;
				_case_end_4636464496:;
				_case_begin_4636463504:;
				{
					return false;
				}
				goto _match_end_4636462640;
				_case_end_4636463504:;
				_match_end_4636462640:;
			}
		}
		goto _match_end_4636451184;
		_case_end_4636455792:;
		_case_begin_4636453168:;
		{
			return false;
		}
		goto _match_end_4636451184;
		_case_end_4636453168:;
		_match_end_4636451184:;
	}
}



inline jule::Bool _1126288e0_st_is_def(jule::Any _19514_st) {
	{
		auto _match_expr{ _19514_st };
		if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4636466096; }
		_case_begin_4636466096:;
		{
			return true;
		}
		goto _match_end_4636466656;
		_case_end_4636466096:;
		_case_begin_4636463840:;
		{
			return false;
		}
		goto _match_end_4636466656;
		_case_end_4636463840:;
		_match_end_4636466656:;
	}
}



inline jule::Ref<_1320e22c0_Var> _11265fb90_find_var_in_package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>> _2728_files,jule::Str _2751_ident,jule::Bool _2763_cpp_linked) {
	{
		auto __julec_range_expr = _2728_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11265fb90_f = *__julec_range_begin;
			_iter_begin_4636469792:;
			{
				jule::Ref<_1320e22c0_Var> _2917_v = _11265fb90_f->_method_find_var(_2751_ident,_2763_cpp_linked);
				if (jule::real(_2917_v)) {
					return _2917_v;
				}
			}
			_iter_next_4636469792:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11265fb90_f = *__julec_range_begin; goto _iter_begin_4636469792; }
			_iter_end_4636469792:;
		}
	}
	return jule::new_ref<_1320e22c0_Var>();
}



inline jule::Ref<_1217f7750_TypeAlias> _11265fb90_find_type_alias_in_package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>> _3935_files,jule::Str _3958_ident,jule::Bool _3970_cpp_linked) {
	{
		auto __julec_range_expr = _3935_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11265fb90_f = *__julec_range_begin;
			_iter_begin_4636470576:;
			{
				jule::Ref<_1217f7750_TypeAlias> _4117_ta = _11265fb90_f->_method_find_type_alias(_3958_ident,_3970_cpp_linked);
				if (jule::real(_4117_ta)) {
					return _4117_ta;
				}
			}
			_iter_next_4636470576:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11265fb90_f = *__julec_range_begin; goto _iter_begin_4636470576; }
			_iter_end_4636470576:;
		}
	}
	return jule::new_ref<_1217f7750_TypeAlias>();
}



inline jule::Ref<_11209db80_Struct> _11265fb90_find_struct_in_package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>> _5131_files,jule::Str _5154_ident,jule::Bool _5166_cpp_linked) {
	{
		auto __julec_range_expr = _5131_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11265fb90_f = *__julec_range_begin;
			_iter_begin_4636478064:;
			{
				jule::Ref<_11209db80_Struct> _5317_s = _11265fb90_f->_method_find_struct(_5154_ident,_5166_cpp_linked);
				if (jule::real(_5317_s)) {
					return _5317_s;
				}
			}
			_iter_next_4636478064:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11265fb90_f = *__julec_range_begin; goto _iter_begin_4636478064; }
			_iter_end_4636478064:;
		}
	}
	return jule::new_ref<_11209db80_Struct>();
}



inline jule::Ref<_112446fb0_Fn> _11265fb90_find_fn_in_package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>> _6327_files,jule::Str _6350_ident,jule::Bool _6362_cpp_linked) {
	{
		auto __julec_range_expr = _6327_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11265fb90_file = *__julec_range_begin;
			_iter_begin_4636485536:;
			{
				jule::Ref<_112446fb0_Fn> _6517_f = _11265fb90_file->_method_find_fn(_6350_ident,_6362_cpp_linked);
				if (jule::real(_6517_f)) {
					return _6517_f;
				}
			}
			_iter_next_4636485536:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11265fb90_file = *__julec_range_begin; goto _iter_begin_4636485536; }
			_iter_end_4636485536:;
		}
	}
	return jule::new_ref<_112446fb0_Fn>();
}



inline jule::Ref<_11209e2e0_Trait> _11265fb90_find_trait_in_package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>> _7530_files,jule::Str _7553_ident) {
	{
		auto __julec_range_expr = _7530_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11265fb90_f = *__julec_range_begin;
			_iter_begin_4636493104:;
			{
				jule::Ref<_11209e2e0_Trait> _7717_t = _11265fb90_f->_method_find_trait(_7553_ident);
				if (jule::real(_7717_t)) {
					return _7717_t;
				}
			}
			_iter_next_4636493104:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11265fb90_f = *__julec_range_begin; goto _iter_begin_4636493104; }
			_iter_end_4636493104:;
		}
	}
	return jule::new_ref<_11209e2e0_Trait>();
}



inline jule::Ref<_11261eaf0_Enum> _11265fb90_find_enum_in_package(jule::Slice<jule::Ref<_1320e2330_SymbolTable>> _8729_files,jule::Str _8752_ident) {
	{
		auto __julec_range_expr = _8729_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11265fb90_f = *__julec_range_begin;
			_iter_begin_4636499968:;
			{
				jule::Ref<_11261eaf0_Enum> _8917_e = _11265fb90_f->_method_find_enum(_8752_ident);
				if (jule::real(_8917_e)) {
					return _8917_e;
				}
			}
			_iter_next_4636499968:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11265fb90_f = *__julec_range_begin; goto _iter_begin_4636499968; }
			_iter_end_4636499968:;
		}
	}
	return jule::new_ref<_11261eaf0_Enum>();
}



inline _1316b4080_Log _11262c360_compiler_err(_111613f20_Token _1617_token,jule::Str _1631_key,jule::Slice<jule::Any> _1641_args) {
	return _1316b4080_Log(1LLU,_1617_token._field_row,_1617_token._field_column,_1617_token._field_file->_method_path(),_1316b2ff0_errorf(_1631_key,_1641_args));
}



inline jule::Bool _11262c360_imp_is_lookupable(jule::Ref<_11265fb90_ImportInfo> _2622_i,jule::Str _2638_ident) {
	if (_2622_i->_field_cpp_linked) {
		return false;
	}
	if ((!(_2622_i->_field_import_all))) {
		if (_2622_i->_field_selected.len() > 0LL) {
			return _2622_i->_method_exist_ident(_2638_ident);
		}
	}
	return _2622_i->_field_import_all;
}



inline jule::Slice<jule::Ref<_1320e22c0_Var>> _11262c360_build_ret_vars(jule::Ref<_112446fb0_FnIns> _3923_f) {
	if (_3923_f->_field_decl->_method_is_void() || (!(jule::real(_3923_f->_field_result)))) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_1320e22c0_Var>> _4413_vars = nullptr;
	jule::Slice<jule::Ref<_1217f7750_TypeKind>> _4513_types = _121807de0_get_fn_result_types(_3923_f);
	{
		auto __julec_range_expr = _3923_f->_field_decl->_field_result->_field_idents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11262c360_i = 0;
			_111613f20_Token _11262c360_ident = *__julec_range_begin;
			_iter_begin_4636530304:;
			{
				if (_111613f20_is_ignore_ident(_11262c360_ident._field_kind)) {
					goto _iter_next_4636530304;
				}
				jule::Ref<_1320e22c0_Var> _5117_v = jule::new_struct<_1320e22c0_Var>(new( std::nothrow ) _1320e22c0_Var(_3923_f->_field_scope,_11262c360_ident,_11262c360_ident._field_kind,jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),_4513_types[static_cast<jule::Int>(_11262c360_i)])),jule::new_struct<_121dedce0_Value>(new( std::nothrow ) _121dedce0_Value(jule::Ref<_111612b20_Expr>(),jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data()))),jule::Ref<_112572770_ReferenceStack>(),jule::Slice<jule::Ref<_1320e22c0_Var>>()));
				_4413_vars=append(_4413_vars,jule::Slice<jule::Ref<_1320e22c0_Var>>({_5117_v}));
			}
			_iter_next_4636530304:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11262c360_i; _11262c360_ident = *__julec_range_begin; goto _iter_begin_4636530304; }
			_iter_end_4636530304:;
		}
	}
	return _4413_vars;
}



inline jule::Slice<jule::Ref<_1320e22c0_Var>> _11262c360_build_param_vars(jule::Ref<_112446fb0_FnIns> _6825_f) {
	if (_6825_f->_field_params.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_1320e22c0_Var>> _7313_vars = jule::Slice<jule::Ref<_1320e22c0_Var>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_6825_f->_field_params.len())));
	{
		auto __julec_range_expr = _6825_f->_field_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11262c360_i = 0;
			jule::Ref<_112446fb0_ParamIns> _11262c360_p = *__julec_range_begin;
			_iter_begin_4636547680:;
			{
				jule::Ref<_1320e22c0_Var> _7517_v = jule::new_struct<_1320e22c0_Var>(new( std::nothrow ) _1320e22c0_Var(_6825_f->_field_scope,_11262c360_p->_field_decl->_field_token,_11262c360_p->_field_decl->_field_ident,jule::Bool(),jule::Bool(),_11262c360_p->_field_decl->_field_mutable,jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol()),jule::new_struct<_121dedce0_Value>(new( std::nothrow ) _121dedce0_Value(jule::Ref<_111612b20_Expr>(),jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data()))),jule::Ref<_112572770_ReferenceStack>(),jule::Slice<jule::Ref<_1320e22c0_Var>>()));
				{
					if (!((_11262c360_p->_field_decl->_method_is_self()))) { goto _case_end_4636556720; }
					_case_begin_4636556720:;
					{
						_7517_v->_field_kind->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_6825_f->_field_owner));
						_7517_v->_field_reference=true;
						if (_11262c360_p->_field_decl->_method_is_ref()) {
							_7517_v->_field_ident=_7517_v->_field_ident.slice(static_cast<jule::Int>(1LL));
							_7517_v->_field_kind->_field_kind->_field_kind=jule::new_struct<_1217f7750_Ref>(new( std::nothrow ) _1217f7750_Ref(_7517_v->_field_kind->_field_kind->_method_clone()));
						}
					}
					goto _match_end_4636555264;
					_case_end_4636556720:;
					if (!((_11262c360_p->_field_decl->_field_variadic))) { goto _case_end_4636557712; }
					_case_begin_4636557712:;
					{
						_7517_v->_field_kind->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_1217f7750_Slc>(new( std::nothrow ) _1217f7750_Slc(_11262c360_p->_field_kind->_method_clone()))));
					}
					goto _match_end_4636555264;
					_case_end_4636557712:;
					_case_begin_4636555536:;
					{
						_7517_v->_field_kind->_field_kind=_11262c360_p->_field_kind->_method_clone();
					}
					goto _match_end_4636555264;
					_case_end_4636555536:;
					_match_end_4636555264:;
				}
				_7313_vars[static_cast<jule::Int>(_11262c360_i)]=_7517_v;
			}
			_iter_next_4636547680:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11262c360_i; _11262c360_p = *__julec_range_begin; goto _iter_begin_4636547680; }
			_iter_end_4636547680:;
		}
	}
	return _7313_vars;
}



inline jule::Slice<jule::Ref<_1217f7750_TypeAlias>> _11262c360_build_generic_type_aliases(jule::Ref<_112446fb0_FnIns> _11635_f) {
	jule::I64 _11713_size = _11635_f->_field_generics.len();
	if (jule::real(_11635_f->_field_decl->_field_owner)) {
		_11713_size+=static_cast<jule::I64>(_11635_f->_field_decl->_field_owner->_field_generics.len());
	}
	if (_11713_size == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ref<_1217f7750_TypeAlias>> _12613_aliases = jule::Slice<jule::Ref<_1217f7750_TypeAlias>>::alloc(static_cast<jule::Int>(_11713_size));
	{
		auto __julec_range_expr = _11635_f->_field_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11262c360_i = 0;
			jule::Ref<_1217f7750_TypeKind> _11262c360_g = *__julec_range_begin;
			_iter_begin_4636585040:;
			{
				jule::Ref<_111612b20_GenericDecl> _12917_decl = _11635_f->_field_decl->_field_generics[static_cast<jule::Int>(_11262c360_i)];
				_12613_aliases[static_cast<jule::Int>(_11262c360_i)]=jule::new_struct<_1217f7750_TypeAlias>(new( std::nothrow ) _1217f7750_TypeAlias(_11635_f->_field_decl->_field_scope,jule::Bool(),jule::Bool(),true,_12917_decl->_field_token,_12917_decl->_field_ident,jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),_11262c360_g)),jule::Str(),jule::Slice<jule::Any>()));
			}
			_iter_next_4636585040:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11262c360_i; _11262c360_g = *__julec_range_begin; goto _iter_begin_4636585040; }
			_iter_end_4636585040:;
		}
	}
	if (jule::real(_11635_f->_field_decl->_field_owner)) {
		jule::Ref<_11209db80_StructIns> _14017_owner = _11635_f->_field_owner;
		{
			auto __julec_range_expr = _14017_owner->_field_generics;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _11262c360_i = 0;
				jule::Ref<_1217f7750_TypeKind> _11262c360_g = *__julec_range_begin;
				_iter_begin_4636595152:;
				{
					jule::Ref<_111612b20_GenericDecl> _14221_decl = _14017_owner->_field_decl->_field_generics[static_cast<jule::Int>(_11262c360_i)];
					_12613_aliases[static_cast<jule::Int>(_11635_f->_field_generics.len() + _11262c360_i)]=jule::new_struct<_1217f7750_TypeAlias>(new( std::nothrow ) _1217f7750_TypeAlias(_11635_f->_field_decl->_field_scope,jule::Bool(),jule::Bool(),true,_14221_decl->_field_token,_14221_decl->_field_ident,jule::new_struct<_1217f7750_TypeSymbol>(new( std::nothrow ) _1217f7750_TypeSymbol(jule::Ref<_111612b20_TypeDecl>(),_11262c360_g)),jule::Str(),jule::Slice<jule::Any>()));
				}
				_iter_next_4636595152:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_11262c360_i; _11262c360_g = *__julec_range_begin; goto _iter_begin_4636595152; }
				_iter_end_4636595152:;
			}
		}
	}
	return _12613_aliases;
}



inline jule::Ref<_1320e2330_SymbolTable> _11262c360_find_file(jule::Slice<jule::Ref<_1320e2330_SymbolTable>> _15618_files,jule::Ref<_1220fd110_File> _15641_handler) {
	{
		auto __julec_range_expr = _15618_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _11262c360_fl = *__julec_range_begin;
			_iter_begin_4636604880:;
			{
				if ((_11262c360_fl->_field_file).alloc == (_15641_handler).alloc) {
					return _11262c360_fl;
				}
			}
			_iter_next_4636604880:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_fl = *__julec_range_begin; goto _iter_begin_4636604880; }
			_iter_end_4636604880:;
		}
	}
	return jule::new_ref<_1320e2330_SymbolTable>();
}



inline std::tuple<jule::Bool,jule::Bool> _11262c360_conditional_has_ret(jule::Ref<_1126288e0_Conditional> _16528_c) {
	jule::Bool _16557_breaking = jule::Bool();
	jule::Bool _16547_ok = jule::Bool();
	jule::Bool _16613_breaked = false;
	{
		auto __julec_range_expr = _16528_c->_field_elifs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1126288e0_If> _11262c360_elif = *__julec_range_begin;
			_iter_begin_4636611216:;
			{
				if ((!(jule::real(_11262c360_elif)))) {
					_16547_ok = false;
					_16557_breaking = false;
					return std::make_tuple(_16547_ok,_16557_breaking);
				}
				std::tie(_16547_ok,std::ignore,_16557_breaking) = _11262c360___has_ret(_11262c360_elif->_field_scope);
				_16613_breaked=_16613_breaked || _16557_breaking;
				if ((!(_16547_ok))) {
					_16547_ok = false;
					_16557_breaking = _16613_breaked;
					return std::make_tuple(_16547_ok,_16557_breaking);
				}
			}
			_iter_next_4636611216:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_elif = *__julec_range_begin; goto _iter_begin_4636611216; }
			_iter_end_4636611216:;
		}
	}
	if ((!(jule::real(_16528_c->_field_default)))) {
		_16547_ok = false;
		_16557_breaking = _16613_breaked;
		return std::make_tuple(_16547_ok,_16557_breaking);
	}
	std::tie(_16547_ok,std::ignore,_16557_breaking) = _11262c360___has_ret(_16528_c->_field_default->_field_scope);
	_16613_breaked=_16613_breaked || _16557_breaking;
	_16547_ok = _16547_ok;
	_16557_breaking = _16613_breaked;
	return std::make_tuple(_16547_ok,_16557_breaking);
}



inline jule::Bool _11262c360_match_has_ret(jule::Ref<_1126288e0_Match> _18722_m) {
	if ((!(jule::real(_18722_m->_field_default)))) {
		return false;
	}
	jule::Bool _19213_ok = true;
	jule::Bool _19313_falled = false;
	jule::Bool _19413_breaked = false;
	{
		auto __julec_range_expr = _18722_m->_field_cases;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1126288e0_Case> _11262c360_c = *__julec_range_begin;
			_iter_begin_4636628688:;
			{
				if ((!(jule::real(_11262c360_c)))) {
					return false;
				}
				std::tie(_19213_ok,_19313_falled,_19413_breaked) = _11262c360___has_ret(_11262c360_c->_field_scope);
				if (((!(_19213_ok)) && (!(_19313_falled))) || _19413_breaked) {
					return false;
				}
				{
					if (!(((!(_19213_ok))))) { goto _case_end_4636634656; }
					_case_begin_4636634656:;
					{
						if ((!(_19313_falled))) {
							return false;
						}
						goto _case_begin_4636635344;
					}
					goto _match_end_4636635152;
					_case_end_4636634656:;
					if (!((_19313_falled))) { goto _case_end_4636635344; }
					_case_begin_4636635344:;
					{
						if ((!(jule::real(_11262c360_c->_field_next)))) {
							return false;
						}
						goto _iter_next_4636628688;
					}
					goto _match_end_4636635152;
					_case_end_4636635344:;
					_match_end_4636635152:;
				}
				_19313_falled=false;
			}
			_iter_next_4636628688:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _11262c360_c = *__julec_range_begin; goto _iter_begin_4636628688; }
			_iter_end_4636628688:;
		}
	}
	return _11262c360_has_ret(_18722_m->_field_default->_field_scope);
}



inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _11262c360___has_ret(jule::Ref<_1126288e0_Scope> _22318_s) {
	jule::Bool _22355_breaked = jule::Bool();
	jule::Bool _22341_falled = jule::Bool();
	jule::Bool _22331_ok = jule::Bool();
	if ((!(jule::real(_22318_s)))) {
		_22331_ok = false;
		_22341_falled = false;
		_22355_breaked = false;
		return std::make_tuple(_22331_ok,_22341_falled,_22355_breaked);
	}
	jule::Int _22813_i = 0LL;
	_iter_begin_4636643408:;
	if (!(_22813_i < _22318_s->_field_stmts._method_len())) { goto _iter_end_4636643408; }
	{
		jule::Any _23017_st = _22318_s->_field_stmts._method_at(_22813_i);
		{
			auto _match_expr{ _23017_st };
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_FallSt>>())) { goto _case_end_4636650736; }
			_case_begin_4636650736:;
			{
				_22341_falled=true;
			}
			goto _match_end_4636649456;
			_case_end_4636650736:;
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_BreakSt>>())) { goto _case_end_4636650848; }
			_case_begin_4636650848:;
			{
				_22331_ok = false;
				_22341_falled = false;
				_22355_breaked = true;
				return std::make_tuple(_22331_ok,_22341_falled,_22355_breaked);
			}
			goto _match_end_4636649456;
			_case_end_4636650848:;
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_RetSt>>())) { goto _case_end_4636650960; }
			_case_begin_4636650960:;
			{
				_22331_ok = true;
				_22341_falled = _22341_falled;
				_22355_breaked = _22355_breaked;
				return std::make_tuple(_22331_ok,_22341_falled,_22355_breaked);
			}
			goto _match_end_4636649456;
			_case_end_4636650960:;
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_Scope>>())) { goto _case_end_4636651072; }
			_case_begin_4636651072:;
			{
				jule::Bool _24217_ok = _11262c360_has_ret(_23017_st.operator jule::Ref<_1126288e0_Scope>());
				if (_24217_ok) {
					_22331_ok = true;
					_22341_falled = false;
					_22355_breaked = false;
					return std::make_tuple(_22331_ok,_22341_falled,_22355_breaked);
				}
			}
			goto _match_end_4636649456;
			_case_end_4636651072:;
			if (!(_match_expr.type_is<jule::Ref<_121dedce0_Data>>())) { goto _case_end_4636651184; }
			_case_begin_4636651184:;
			{
				{
					auto _match_expr{ _23017_st.operator jule::Ref<_121dedce0_Data>()->_field_model };
					if (!(_match_expr.type_is<jule::Ref<_112673500_BuiltinPanicCallExprModel>>())) { goto _case_end_4636666960; }
					_case_begin_4636666960:;
					{
						_22331_ok = true;
						_22341_falled = _22341_falled;
						_22355_breaked = _22355_breaked;
						return std::make_tuple(_22331_ok,_22341_falled,_22355_breaked);
					}
					goto _match_end_4636666288;
					_case_end_4636666960:;
					_match_end_4636666288:;
				}
			}
			goto _match_end_4636649456;
			_case_end_4636651184:;
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_Recover>>())) { goto _case_end_4636651296; }
			_case_begin_4636651296:;
			{
				jule::Bool _25418_ok;
				jule::Bool _25422_falled;
				jule::Bool _25430_breaked;
				std::tie(_25418_ok,_25422_falled,_25430_breaked) = _11262c360___has_ret(_23017_st.operator jule::Ref<_1126288e0_Recover>()->_field_scope);
				if (_25418_ok) {
					_22331_ok = true;
					_22341_falled = _25422_falled;
					_22355_breaked = _25430_breaked;
					return std::make_tuple(_22331_ok,_22341_falled,_22355_breaked);
				}
			}
			goto _match_end_4636649456;
			_case_end_4636651296:;
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_Conditional>>())) { goto _case_end_4636651408; }
			_case_begin_4636651408:;
			{
				jule::Bool _26018_ok;
				jule::Bool _26022_breaking;
				std::tie(_26018_ok,_26022_breaking) = _11262c360_conditional_has_ret(_23017_st.operator jule::Ref<_1126288e0_Conditional>());
				if (_26018_ok) {
					_22331_ok = true;
					_22341_falled = false;
					_22355_breaked = false;
					return std::make_tuple(_22331_ok,_22341_falled,_22355_breaked);
				}
				if (_26022_breaking) {
					_22331_ok = false;
					_22341_falled = false;
					_22355_breaked = _22355_breaked;
					return std::make_tuple(_22331_ok,_22341_falled,_22355_breaked);
				}
			}
			goto _match_end_4636649456;
			_case_end_4636651408:;
			if (!(_match_expr.type_is<jule::Ref<_1126288e0_Match>>())) { goto _case_end_4636651520; }
			_case_begin_4636651520:;
			{
				jule::Bool _27017_ok = _11262c360_match_has_ret(_23017_st.operator jule::Ref<_1126288e0_Match>());
				if (_27017_ok) {
					_22331_ok = true;
					_22341_falled = false;
					_22355_breaked = false;
					return std::make_tuple(_22331_ok,_22341_falled,_22355_breaked);
				}
			}
			goto _match_end_4636649456;
			_case_end_4636651520:;
			_match_end_4636649456:;
		}
	}
	_iter_next_4636643408:;
	(_22813_i)++;
	goto _iter_begin_4636643408;
	_iter_end_4636643408:;
	_22331_ok = false;
	_22341_falled = _22341_falled;
	_22355_breaked = _22355_breaked;
	return std::make_tuple(_22331_ok,_22341_falled,_22355_breaked);
}



inline jule::Bool _11262c360_has_ret(jule::Ref<_1126288e0_Scope> _28016_s) {
	jule::Bool _28110_ok;
	std::tie(_28110_ok,std::ignore,std::ignore) = _11262c360___has_ret(_28016_s);
	return _28110_ok;
}



inline jule::Slice<jule::Ref<_1217f7750_TypeKind>> _121807de0_get_fn_result_types(jule::Ref<_112446fb0_FnIns> _3628_f) {
	{
		if (!((_3628_f->_field_decl->_method_is_void() || (!(jule::real(_3628_f->_field_result)))))) { goto _case_end_4636697648; }
		_case_begin_4636697648:;
		{
			return nullptr;
		}
		goto _match_end_4636695056;
		_case_end_4636697648:;
		if (!(((!(jule::real(_3628_f->_field_result->_method_tup())))))) { goto _case_end_4636698464; }
		_case_begin_4636698464:;
		{
			return jule::Slice<jule::Ref<_1217f7750_TypeKind>>({_3628_f->_field_result});
		}
		goto _match_end_4636695056;
		_case_end_4636698464:;
		_case_begin_4636695344:;
		{
			return _3628_f->_field_result->_method_tup()->_field_types;
		}
		goto _match_end_4636695056;
		_case_end_4636695344:;
		_match_end_4636695056:;
	}
}



inline jule::Bool _121807de0_trait_has_reference_receiver(jule::Ref<_11209e2e0_Trait> _4933_t) {
	{
		auto __julec_range_expr = _4933_t->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_Fn> _121807de0_f = *__julec_range_begin;
			_iter_begin_4636701216:;
			{
				if (_121807de0_f->_field_statically) {
					goto _iter_next_4636701216;
				}
				jule::Ref<_112446fb0_Param> _5613_p = _121807de0_f->_field_params[static_cast<jule::Int>(0LL)];
				if (_5613_p->_method_is_ref() && _5613_p->_method_is_self()) {
					return true;
				}
			}
			_iter_next_4636701216:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _121807de0_f = *__julec_range_begin; goto _iter_begin_4636701216; }
			_iter_end_4636701216:;
		}
	}
	return false;
}



inline jule::Bool _121807de0_float_assignable(jule::Str _6421_kind,jule::Ref<_121dedce0_Data> _6432_d) {
	jule::Str _659_value = _131769b70_fmt_float(static_cast<jule::F64>(_6432_d->_field_constant->_method_read_f64()),'e',-1LL,64LL);
	return _113157670_check_bit_float(_659_value,static_cast<jule::Int>(_113157670_bitsize_of(_6421_kind)));
}



inline jule::Bool _121807de0_sig_assignable(jule::Str _6919_kind,jule::Ref<_121dedce0_Data> _6930_d) {
	jule::F64 _709_min = _1131a6a20_min_of(_6919_kind);
	jule::F64 _719_max = _1131a6a20_max_of(_6919_kind);
	{
		if (!((_6930_d->_field_constant->_method_is_f64()))) { goto _case_end_4636719856; }
		_case_begin_4636719856:;
		{
			jule::F64 _7513_x = static_cast<jule::F64>(_6930_d->_field_constant->_method_read_f64());
			jule::F64 _7614_i;
			jule::F64 _7617_frac;
			std::tie(_7614_i,_7617_frac) = _121af3740_modf(_7513_x);
			if (_7617_frac != 0LL) {
				return false;
			}
			return (_7614_i >= _709_min) && (_7614_i <= _719_max);
		}
		goto _match_end_4636719584;
		_case_end_4636719856:;
		if (!((_6930_d->_field_constant->_method_is_u64()))) { goto _case_end_4636719968; }
		_case_begin_4636719968:;
		{
			jule::F64 _8313_x = static_cast<jule::F64>(_6930_d->_field_constant->_method_read_u64());
			if (_8313_x <= _719_max) {
				return true;
			}
		}
		goto _match_end_4636719584;
		_case_end_4636719968:;
		if (!((_6930_d->_field_constant->_method_is_i64()))) { goto _case_end_4636720080; }
		_case_begin_4636720080:;
		{
			jule::F64 _8913_x = static_cast<jule::F64>(_6930_d->_field_constant->_method_read_i64());
			return (_709_min <= _8913_x) && (_8913_x <= _719_max);
		}
		goto _match_end_4636719584;
		_case_end_4636720080:;
		_match_end_4636719584:;
	}
	return false;
}



inline jule::Bool _121807de0_unsig_assignable(jule::Str _9621_kind,jule::Ref<_121dedce0_Data> _9632_d) {
	jule::F64 _979_max = _1131a6a20_max_of(_9621_kind);
	{
		if (!((_9632_d->_field_constant->_method_is_f64()))) { goto _case_end_4636739296; }
		_case_begin_4636739296:;
		{
			jule::F64 _10113_x = _9632_d->_field_constant->_method_read_f64();
			if (_10113_x < 0LL) {
				return false;
			}
			jule::F64 _10614_i;
			jule::F64 _10617_frac;
			std::tie(_10614_i,_10617_frac) = _121af3740_modf(_10113_x);
			if (_10617_frac != 0LL) {
				return false;
			}
			return _10614_i <= _979_max;
		}
		goto _match_end_4636738944;
		_case_end_4636739296:;
		if (!((_9632_d->_field_constant->_method_is_u64()))) { goto _case_end_4636739408; }
		_case_begin_4636739408:;
		{
			jule::F64 _11313_x = static_cast<jule::F64>(_9632_d->_field_constant->_method_read_u64());
			if (_11313_x <= _979_max) {
				return true;
			}
		}
		goto _match_end_4636738944;
		_case_end_4636739408:;
		if (!((_9632_d->_field_constant->_method_is_i64()))) { goto _case_end_4636739520; }
		_case_begin_4636739520:;
		{
			jule::F64 _11913_x = static_cast<jule::F64>(_9632_d->_field_constant->_method_read_i64());
			return (0LL <= _11913_x) && (_11913_x <= _979_max);
		}
		goto _match_end_4636738944;
		_case_end_4636739520:;
		_match_end_4636738944:;
	}
	return false;
}



inline jule::Bool _121807de0_int_assignable(jule::Str _12619_kind,jule::Ref<_121dedce0_Data> _12630_d) {
	{
		if (!((_1132426f0_is_sig_int(_12619_kind)))) { goto _case_end_4636758336; }
		_case_begin_4636758336:;
		{
			return _121807de0_sig_assignable(_12619_kind,_12630_d);
		}
		goto _match_end_4636754960;
		_case_end_4636758336:;
		if (!((_1132426f0_is_unsig_int(_12619_kind)))) { goto _case_end_4636758448; }
		_case_begin_4636758448:;
		{
			return _121807de0_unsig_assignable(_12619_kind,_12630_d);
		}
		goto _match_end_4636754960;
		_case_end_4636758448:;
		_case_begin_4636755168:;
		{
			return false;
		}
		goto _match_end_4636754960;
		_case_end_4636755168:;
		_match_end_4636754960:;
	}
}



inline jule::Any _121dedce0_find_builtins_import(jule::Str _7825_ident,jule::Ref<_11265fb90_ImportInfo> _7837_imp) {
	return _1130606b0_find_package_builtin_def(_7837_imp->_field_link_path,_7825_ident);
}



inline jule::Any _121dedce0_find_builtins_sema(jule::Str _8223_ident,jule::Ref<_11262c360_Sema> _8239_s) {
	jule::Int _8313_i = 0LL;
	_iter_begin_4636763728:;
	if (!(_8313_i < _8239_s->_field_file->_field_imports._method_len())) { goto _iter_end_4636763728; }
	{
		jule::Ref<_11265fb90_ImportInfo> _8517_imp = _8239_s->_field_file->_field_imports._method_at(_8313_i);
		if (_8517_imp->_field_import_all || _8517_imp->_method_exist_ident(_8223_ident)) {
			jule::Any _8721_def = _121dedce0_find_builtins_import(_8223_ident,_8517_imp);
			if (_8721_def != nullptr) {
				return _8721_def;
			}
		}
	}
	_iter_next_4636763728:;
	(_8313_i)++;
	goto _iter_begin_4636763728;
	_iter_end_4636763728:;
	return jule::Any(nullptr);
}



inline jule::Bool _121dedce0_is_ok_for_shifting(jule::Ref<_121dedce0_Data> _9627_d) {
	jule::Ref<_1217f7750_Prim> _979_prim = _9627_d->_field_kind->_method_prim();
	if ((!(jule::real(_979_prim))) || (!(_1132426f0_is_int(_979_prim->_method_to_str())))) {
		return false;
	}
	if ((!(_9627_d->_method_is_const()))) {
		return true;
	}
	{
		if (!((_9627_d->_field_constant->_method_is_i64()))) { goto _case_end_4636783888; }
		_case_begin_4636783888:;
		{
			return _9627_d->_field_constant->_method_read_i64() >= 0LL;
		}
		goto _match_end_4636781600;
		_case_end_4636783888:;
		if (!((_9627_d->_field_constant->_method_is_u64()))) { goto _case_end_4636784000; }
		_case_begin_4636784000:;
		{
			return true;
		}
		goto _match_end_4636781600;
		_case_end_4636784000:;
		_case_begin_4636782416:;
		{
			return false;
		}
		goto _match_end_4636781600;
		_case_end_4636782416:;
		_match_end_4636781600:;
	}
}



inline jule::Bool _121dedce0_is_instanced_struct(jule::Ref<_11209db80_StructIns> _11324_s) {
	return _11324_s->_field_decl->_field_generics.len() == _11324_s->_field_generics.len();
}



inline void _121dedce0_normalize_bitsize(jule::Ref<_121dedce0_Data> _11726_d) {
	if ((!(_11726_d->_method_is_const()))) {
		return;
	}
	jule::Str _12213_kind = jule::Str("", 0);
	{
		if (!((_11726_d->_field_constant->_method_is_f64()))) { goto _case_end_4636794624; }
		_case_begin_4636794624:;
		{
			jule::F64 _12513_x = _11726_d->_field_constant->_method_read_f64();
			_12213_kind=_113157670_float_from_bits(static_cast<jule::U64>(_113157670_bitsize_of_float(_12513_x)));
		}
		goto _match_end_4636793312;
		_case_end_4636794624:;
		if (!((_11726_d->_field_constant->_method_is_i64()))) { goto _case_end_4636794736; }
		_case_begin_4636794736:;
		{
			jule::I64 _12913_x = _11726_d->_field_constant->_method_read_i64();
			_12213_kind=_113157670_int_from_bits(static_cast<jule::U64>(_113157670_bitsize_of_int(_12913_x)));
		}
		goto _match_end_4636793312;
		_case_end_4636794736:;
		if (!((_11726_d->_field_constant->_method_is_u64()))) { goto _case_end_4636793776; }
		_case_begin_4636793776:;
		{
			jule::U64 _13313_x = _11726_d->_field_constant->_method_read_u64();
			_12213_kind=_113157670_uint_from_bits(static_cast<jule::U64>(_113157670_bitsize_of_uint(_13313_x)));
		}
		goto _match_end_4636793312;
		_case_end_4636793776:;
		_case_begin_4636793472:;
		{
			return;
		}
		goto _match_end_4636793312;
		_case_end_4636793472:;
		_match_end_4636793312:;
	}
	if (jule::real(_11726_d->_field_kind->_method_enm())) {
		return;
	}
	_11726_d->_field_kind->_field_kind=_1217f7750_build_prim_type(_12213_kind);
}



inline void _121dedce0_normalize_type(jule::Ref<_121dedce0_Data> _14823_d) {
	{
		if (!((_121807de0_int_assignable(jule::Str("int", 3),_14823_d)))) { goto _case_end_4636828096; }
		_case_begin_4636828096:;
		{
			_14823_d->_field_kind->_field_kind=_1217f7750_build_prim_type(jule::Str("int", 3));
			_14823_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_14823_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4636827840;
		_case_end_4636828096:;
		if (!((_121807de0_int_assignable(jule::Str("uint", 4),_14823_d)))) { goto _case_end_4636828208; }
		_case_begin_4636828208:;
		{
			_14823_d->_field_kind->_field_kind=_1217f7750_build_prim_type(jule::Str("uint", 4));
			_14823_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_14823_d->_field_constant->_method_as_f64()));
		}
		goto _match_end_4636827840;
		_case_end_4636828208:;
		_match_end_4636827840:;
	}
}



inline void _121dedce0_apply_cast_kind_model(jule::Ref<_121dedce0_Data> _16030_d) {
	_16030_d->_field_model=jule::Any(jule::new_struct<_112673500_CastingExprModel>(new( std::nothrow ) _112673500_CastingExprModel(_16030_d->_field_model,_16030_d->_field_cast_kind,_16030_d->_field_kind)));
}



inline void _121dedce0_apply_cast_kind(jule::Ref<_121dedce0_Data> _16824_d) {
	if ((!(jule::real(_16824_d->_field_cast_kind)))) {
		return;
	}
	_121dedce0_apply_cast_kind_model(_16824_d);
	_16824_d->_field_kind=_16824_d->_field_cast_kind;
	jule::drop(_16824_d->_field_cast_kind);
}



inline jule::Ref<_121dedce0_Data> _121dedce0_build_void_data(void) {
	return jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("void", 4)))),jule::Ref<_1217f7750_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Bool(),jule::Any(),false,jule::Ref<_1131530d0_Const>()));
}



inline jule::Str _121dedce0_kind_by_bitsize(jule::Any _18920_expr) {
	{
		auto _match_expr{ _18920_expr };
		if (!(_match_expr.type_is<jule::F64>())) { goto _case_end_4636852880; }
		_case_begin_4636852880:;
		{
			jule::F64 _19213_x = _18920_expr.operator jule::F64();
			return _113157670_float_from_bits(static_cast<jule::U64>(_113157670_bitsize_of_float(_19213_x)));
		}
		goto _match_end_4636849408;
		_case_end_4636852880:;
		if (!(_match_expr.type_is<jule::I64>())) { goto _case_end_4636852992; }
		_case_begin_4636852992:;
		{
			jule::I64 _19613_x = _18920_expr.operator jule::I64();
			return _113157670_int_from_bits(static_cast<jule::U64>(_113157670_bitsize_of_int(_19613_x)));
		}
		goto _match_end_4636849408;
		_case_end_4636852992:;
		if (!(_match_expr.type_is<jule::U64>())) { goto _case_end_4636851392; }
		_case_begin_4636851392:;
		{
			jule::U64 _20013_x = _18920_expr.operator jule::U64();
			return _113157670_uint_from_bits(static_cast<jule::U64>(_113157670_bitsize_of_uint(_20013_x)));
		}
		goto _match_end_4636849408;
		_case_end_4636851392:;
		_case_begin_4636851200:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4636849408;
		_case_end_4636851200:;
		_match_end_4636849408:;
	}
}



inline jule::Str _121dedce0_check_data_for_integer_indexing(jule::Ref<_121dedce0_Data> _20840_d) {
	jule::Str _20852_err_key = jule::Str();
	if ((!(jule::real(_20840_d)))) {
		_20852_err_key = jule::Str("", 0);
		return _20852_err_key;
	}
	jule::Ref<_1217f7750_TypeKind> _21313_kind = _20840_d->_field_kind;
	if (jule::real(_21313_kind->_method_ref())) {
		_21313_kind=_21313_kind->_method_ref()->_field_elem;
	}
	{
		if (!(((!(jule::real(_21313_kind->_method_prim())))))) { goto _case_end_4636868352; }
		_case_begin_4636868352:;
		{
			_20852_err_key = jule::Str("invalid_expr", 12);
			return _20852_err_key;
		}
		goto _match_end_4636865584;
		_case_end_4636868352:;
		if (!(((!(_1132426f0_is_int(_21313_kind->_method_prim()->_method_to_str())))))) { goto _case_end_4636868464; }
		_case_begin_4636868464:;
		{
			_20852_err_key = jule::Str("invalid_expr", 12);
			return _20852_err_key;
		}
		goto _match_end_4636865584;
		_case_end_4636868464:;
		if (!((_20840_d->_method_is_const() && (_20840_d->_field_constant->_method_as_i64() < 0LL)))) { goto _case_end_4636868576; }
		_case_begin_4636868576:;
		{
			_20852_err_key = jule::Str("overflow_limits", 15);
			return _20852_err_key;
		}
		goto _match_end_4636865584;
		_case_end_4636868576:;
		_case_begin_4636868048:;
		{
			_20840_d->_field_cast_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("int", 3))));
			_121dedce0_apply_cast_kind(_20840_d);
			_20852_err_key = jule::Str("", 0);
			return _20852_err_key;
		}
		goto _match_end_4636865584;
		_case_end_4636868048:;
		_match_end_4636865584:;
	}
}



inline jule::Bool _1217f7750_can_get_ptr(jule::Ref<_121dedce0_Data> _44520_d) {
	if ((!(_44520_d->_field_lvalue)) || _44520_d->_method_is_const()) {
		return false;
	}
	{
		if (!((jule::real(_44520_d->_field_kind->_method_fnc()) || jule::real(_44520_d->_field_kind->_method_enm())))) { goto _case_end_4636881696; }
		_case_begin_4636881696:;
		{
			return false;
		}
		goto _match_end_4636879024;
		_case_end_4636881696:;
		_case_begin_4636880688:;
		{
			return true;
		}
		goto _match_end_4636879024;
		_case_end_4636880688:;
		_match_end_4636879024:;
	}
}



inline jule::Bool _1217f7750_is_lvalue(jule::Ref<_1217f7750_TypeKind> _45918_t) {
	return ((jule::real(_45918_t->_method_ref()) || jule::real(_45918_t->_method_ptr())) || jule::real(_45918_t->_method_slc())) || jule::real(_45918_t->_method_map());
}



inline jule::Bool _1217f7750_is_mut(jule::Ref<_1217f7750_TypeKind> _46315_t) {
	if (jule::real(_46315_t->_method_strct())) {
		return _46315_t->_method_strct()->_field_has_mut;
	}
	if (jule::real(_46315_t->_method_prim())) {
		jule::Ref<_1217f7750_Prim> _46813_p = _46315_t->_method_prim();
		return _46813_p->_method_is_any();
	}
	return (jule::real(_46315_t->_method_slc()) || jule::real(_46315_t->_method_ptr())) || jule::real(_46315_t->_method_ref());
}



inline jule::Bool _1217f7750_supports_cloning(jule::Ref<_1217f7750_TypeKind> _47425_k) {
	{
		if (!((jule::real(_47425_k->_method_prim())))) { goto _case_end_4636907888; }
		_case_begin_4636907888:;
		{
			return (!(_47425_k->_method_prim()->_method_is_any()));
		}
		goto _match_end_4636901984;
		_case_end_4636907888:;
		if (!((jule::real(_47425_k->_method_enm())))) { goto _case_end_4636908768; }
		_case_begin_4636908768:;
		{
			return true;
		}
		goto _match_end_4636901984;
		_case_end_4636908768:;
		if (!((jule::real(_47425_k->_method_fnc())))) { goto _case_end_4636908880; }
		_case_begin_4636908880:;
		{
			return true;
		}
		goto _match_end_4636901984;
		_case_end_4636908880:;
		if (!((jule::real(_47425_k->_method_ptr())))) { goto _case_end_4636908992; }
		_case_begin_4636908992:;
		{
			return true;
		}
		goto _match_end_4636901984;
		_case_end_4636908992:;
		if (!((jule::real(_47425_k->_method_slc())))) { goto _case_end_4636906960; }
		_case_begin_4636906960:;
		{
			return _1217f7750_supports_cloning(_47425_k->_method_slc()->_field_elem);
		}
		goto _match_end_4636901984;
		_case_end_4636906960:;
		if (!((jule::real(_47425_k->_method_map())))) { goto _case_end_4636907072; }
		_case_begin_4636907072:;
		{
			return _1217f7750_supports_cloning(_47425_k->_method_map()->_field_key) && _1217f7750_supports_cloning(_47425_k->_method_map()->_field_val);
		}
		goto _match_end_4636901984;
		_case_end_4636907072:;
		if (!((jule::real(_47425_k->_method_arr())))) { goto _case_end_4636907184; }
		_case_begin_4636907184:;
		{
			return _1217f7750_supports_cloning(_47425_k->_method_arr()->_field_elem);
		}
		goto _match_end_4636901984;
		_case_end_4636907184:;
		if (!((jule::real(_47425_k->_method_ref())))) { goto _case_end_4636908080; }
		_case_begin_4636908080:;
		{
			return _1217f7750_supports_cloning(_47425_k->_method_ref()->_field_elem);
		}
		goto _match_end_4636901984;
		_case_end_4636908080:;
		if (!((jule::real(_47425_k->_method_strct())))) { goto _case_end_4636908192; }
		_case_begin_4636908192:;
		{
			jule::Ref<_11209db80_StructIns> _50117_s = _47425_k->_method_strct();
			if ((!(_50117_s->_field_has_mut))) {
				return true;
			}
			if (((!(jule::real(_50117_s->_field_decl))) || _50117_s->_field_decl->_field_cpp_linked) || (!(_50117_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))))) {
				return false;
			}
			return true;
		}
		goto _match_end_4636901984;
		_case_end_4636908192:;
		_case_begin_4636906432:;
		{
			return false;
		}
		goto _match_end_4636901984;
		_case_end_4636906432:;
		_match_end_4636901984:;
	}
}



inline jule::Bool _1217f7750_is_nil_compatible(jule::Ref<_1217f7750_TypeKind> _51526_t) {
	jule::Ref<_1217f7750_Prim> _5169_prim = _51526_t->_method_prim();
	if (jule::real(_5169_prim) && _5169_prim->_method_is_any()) {
		return true;
	}
	return ((((_51526_t->_method_is_nil() || jule::real(_51526_t->_method_fnc())) || jule::real(_51526_t->_method_ptr())) || jule::real(_51526_t->_method_trt())) || jule::real(_51526_t->_method_slc())) || jule::real(_51526_t->_method_map());
}



inline jule::Bool _1217f7750_is_valid_for_ref(jule::Ref<_1217f7750_TypeKind> _53125_t) {
	jule::Ref<_11209db80_StructIns> _53213_s = _53125_t->_method_strct();
	if ((jule::real(_53213_s) && jule::real(_53213_s->_field_decl)) && _53213_s->_field_decl->_field_cpp_linked) {
		return false;
	}
	return (!(((jule::real(_53125_t->_method_enm()) || jule::real(_53125_t->_method_ptr())) || jule::real(_53125_t->_method_ref())) || jule::real(_53125_t->_method_arr())));
}



inline jule::Bool _1217f7750_is_variadicable(jule::Ref<_1217f7750_TypeKind> _53924_tk) {
	return jule::real(_53924_tk->_method_slc());
}



inline jule::Str _1217f7750_build_link_path_by_tokens(jule::Slice<_111613f20_Token> _54130_tokens) {
	jule::Str _54213_s = _54130_tokens[static_cast<jule::Int>(0LL)]._field_kind;
	{
		auto __julec_range_expr = _54130_tokens.slice(static_cast<jule::Int>(1LL));
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_111613f20_Token _1217f7750_token = *__julec_range_begin;
			_iter_begin_4636956032:;
			{
				_54213_s+=jule::Str("::", 2);
				_54213_s+=_1217f7750_token._field_kind;
			}
			_iter_next_4636956032:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1217f7750_token = *__julec_range_begin; goto _iter_begin_4636956032; }
			_iter_end_4636956032:;
		}
	}
	return _54213_s;
}



inline jule::Ref<_1217f7750_Prim> _1217f7750_build_prim_type(jule::Str _55020_kind) {
	return jule::new_struct<_1217f7750_Prim>(new( std::nothrow ) _1217f7750_Prim(_55020_kind));
}



inline jule::Ref<_11209db80_Struct> _1217f7750_get_struct_from_kind(jule::Ref<_1217f7750_TypeKind> _55629_k) {
	{
		if (!(((!(jule::real(_55629_k)))))) { goto _case_end_4636963968; }
		_case_begin_4636963968:;
		{
			return jule::new_ref<_11209db80_Struct>();
		}
		goto _match_end_4636961824;
		_case_end_4636963968:;
		if (!((jule::real(_55629_k->_method_strct())))) { goto _case_end_4636963600; }
		_case_begin_4636963600:;
		{
			return _55629_k->_method_strct()->_field_decl;
		}
		goto _match_end_4636961824;
		_case_end_4636963600:;
		if (!((jule::real(_55629_k->_method_ref())))) { goto _case_end_4636963712; }
		_case_begin_4636963712:;
		{
			return _1217f7750_get_struct_from_kind(_55629_k->_method_ref()->_field_elem);
		}
		goto _match_end_4636961824;
		_case_end_4636963712:;
		if (!((jule::real(_55629_k->_method_slc())))) { goto _case_end_4636964176; }
		_case_begin_4636964176:;
		{
			return _1217f7750_get_struct_from_kind(_55629_k->_method_slc()->_field_elem);
		}
		goto _match_end_4636961824;
		_case_end_4636964176:;
		if (!((jule::real(_55629_k->_method_arr())))) { goto _case_end_4636964288; }
		_case_begin_4636964288:;
		{
			return _1217f7750_get_struct_from_kind(_55629_k->_method_arr()->_field_elem);
		}
		goto _match_end_4636961824;
		_case_end_4636964288:;
		if (!((jule::real(_55629_k->_method_ptr())))) { goto _case_end_4636962608; }
		_case_begin_4636962608:;
		{
			return jule::new_ref<_11209db80_Struct>();
		}
		goto _match_end_4636961824;
		_case_end_4636962608:;
		_case_begin_4636960144:;
		{
			return jule::new_ref<_11209db80_Struct>();
		}
		goto _match_end_4636961824;
		_case_end_4636960144:;
		_match_end_4636961824:;
	}
}



inline jule::Bool _1217f7750_is_prim(jule::Str _58512_kind) {
	return (((((((((((((((_58512_kind == jule::Str("i8", 2)) || (_58512_kind == jule::Str("i16", 3))) || (_58512_kind == jule::Str("i32", 3))) || (_58512_kind == jule::Str("i64", 3))) || (_58512_kind == jule::Str("u8", 2))) || (_58512_kind == jule::Str("u16", 3))) || (_58512_kind == jule::Str("u32", 3))) || (_58512_kind == jule::Str("u64", 3))) || (_58512_kind == jule::Str("f32", 3))) || (_58512_kind == jule::Str("f64", 3))) || (_58512_kind == jule::Str("int", 3))) || (_58512_kind == jule::Str("uint", 4))) || (_58512_kind == jule::Str("uintptr", 7))) || (_58512_kind == jule::Str("bool", 4))) || (_58512_kind == jule::Str("str", 3))) || (_58512_kind == jule::Str("any", 3));
}



inline std::tuple<jule::Ref<_1320e2330_SymbolTable>,jule::Slice<_1316b4080_Log>> _11304a4a0_build_symbols(jule::Ref<_1220cb5d0_Ast> _922_ast,jule::Trait<_11265fb90_Importer> _937_importer,jule::Ref<_112572770_SymbolBuilder> _961_owner) {
	jule::Ref<_112572770_SymbolBuilder> _1013_sb = jule::new_struct<_112572770_SymbolBuilder>(new( std::nothrow ) _112572770_SymbolBuilder(_961_owner,_937_importer,jule::Slice<_1316b4080_Log>(),_922_ast,jule::Ref<_1320e2330_SymbolTable>()));
	_1013_sb->_method_build();
	if (_1013_sb->_field_errors.len() == 0LL) {
		return std::make_tuple(_1013_sb->_field_table,nullptr);
	}
	return std::make_tuple(jule::new_ref<_1320e2330_SymbolTable>(),_1013_sb->_field_errors);
}



inline std::tuple<jule::Ref<_11265fb90_Package>,jule::Slice<_1316b4080_Log>> _11304a4a0___analyze_package(jule::Slice<jule::Ref<_1220cb5d0_Ast>> _2326_files,jule::Trait<_11265fb90_Importer> _2345_importer) {
	jule::Slice<jule::Ref<_1320e2330_SymbolTable>> _2513_tables = jule::Slice<jule::Ref<_1320e2330_SymbolTable>>::alloc(static_cast<jule::Int>(static_cast<jule::I64>(_2326_files.len())));
	{
		auto __julec_range_expr = _2326_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _11304a4a0_i = 0;
			jule::Ref<_1220cb5d0_Ast> _11304a4a0_f = *__julec_range_begin;
			_iter_begin_4636996400:;
			{
				jule::Ref<_1320e2330_SymbolTable> _2718_table;
				jule::Slice<_1316b4080_Log> _2729_errors;
				std::tie(_2718_table,_2729_errors) = _11304a4a0_build_symbols(_11304a4a0_f,_2345_importer,jule::new_ref<_112572770_SymbolBuilder>());
				if (_2729_errors.len() > 0LL) {
					return std::make_tuple(jule::new_ref<_11265fb90_Package>(),_2729_errors);
				}
				_2513_tables[static_cast<jule::Int>(_11304a4a0_i)]=_2718_table;
			}
			_iter_next_4636996400:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_11304a4a0_i; _11304a4a0_f = *__julec_range_begin; goto _iter_begin_4636996400; }
			_iter_end_4636996400:;
		}
	}
	jule::Ref<_11262c360_Sema> _3413_sema = jule::new_struct<_11262c360_Sema>(new( std::nothrow ) _11262c360_Sema());
	_3413_sema->_method_check(_2513_tables);
	if (_3413_sema->_field_errors.len() > 0LL) {
		return std::make_tuple(jule::new_ref<_11265fb90_Package>(),_3413_sema->_field_errors);
	}
	jule::Ref<_11265fb90_Package> _4013_pkg = jule::new_struct<_11265fb90_Package>(new( std::nothrow ) _11265fb90_Package(_3413_sema->_field_files));
	return std::make_tuple(_4013_pkg,nullptr);
}



inline std::tuple<jule::Ref<_11265fb90_Package>,jule::Slice<_1316b4080_Log>> _11304a4a0_analyze_package(jule::Slice<jule::Ref<_1220cb5d0_Ast>> _6428_files,jule::Trait<_11265fb90_Importer> _6447_importer) {
	if (_6428_files.len() == 0LL) {
		return std::make_tuple(jule::new_ref<_11265fb90_Package>(),nullptr);
	}
	jule::Ref<_11265fb90_Package> _6914_package;
	jule::Slice<_1316b4080_Log> _6927_logs;
	std::tie(_6914_package,_6927_logs) = _11304a4a0___analyze_package(_6428_files,_6447_importer);
	return std::make_tuple(_6914_package,_6927_logs);
}



inline std::tuple<jule::Ref<_1320e2330_SymbolTable>,jule::Slice<_1316b4080_Log>> _11304a4a0_analyze_file(jule::Ref<_1220cb5d0_Ast> _9025_f,jule::Trait<_11265fb90_Importer> _9038_importer) {
	jule::Slice<jule::Ref<_1220cb5d0_Ast>> _9113_files = jule::Slice<jule::Ref<_1220cb5d0_Ast>>({_9025_f});
	jule::Ref<_11265fb90_Package> _9214_pkg;
	jule::Slice<_1316b4080_Log> _9223_errors;
	std::tie(_9214_pkg,_9223_errors) = _11304a4a0_analyze_package(_9113_files,_9038_importer);
	if (_9223_errors.len() > 0LL) {
		return std::make_tuple(jule::new_ref<_1320e2330_SymbolTable>(),_9223_errors);
	}
	jule::Ref<_1320e2330_SymbolTable> _9913_table = _9214_pkg->_field_files[static_cast<jule::Int>(0LL)];
	return std::make_tuple(_9913_table,nullptr);
}



inline void _1130606b0_init(void) {
	_1130606b0_BUILTIN_FN_OUT->_field_caller=_1130606b0_builtin_caller_out;
	_1130606b0_BUILTIN_FN_OUTLN->_field_caller=_1130606b0_builtin_caller_outln;
	_1130606b0_BUILTIN_FN_NEW->_field_caller=_1130606b0_builtin_caller_new;
	_1130606b0_BUILTIN_FN_REAL->_field_caller=_1130606b0_builtin_caller_real;
	_1130606b0_BUILTIN_FN_DROP->_field_caller=_1130606b0_builtin_caller_drop;
	_1130606b0_BUILTIN_FN_PANIC->_field_caller=_1130606b0_builtin_caller_panic;
	_1130606b0_BUILTIN_FN_MAKE->_field_caller=_1130606b0_builtin_caller_make;
	_1130606b0_BUILTIN_FN_APPEND->_field_caller=_1130606b0_builtin_caller_append;
	_1130606b0_BUILTIN_FN_COPY->_field_caller=_1130606b0_builtin_caller_copy;
	_1130606b0_BUILTIN_FN_RECOVER->_field_caller=_1130606b0_builtin_caller_recover;
	_1130606b0_BUILTIN_FN_CLONE->_field_caller=_1130606b0_builtin_caller_clone;
	_1130606b0_BUILTIN_FN_STD_MEM_SIZE_OF->_field_caller=_1130606b0_builtin_caller_std_mem_size_of;
	_1130606b0_BUILTIN_FN_STD_MEM_ALIGN_OF->_field_caller=_1130606b0_builtin_caller_std_mem_align_of;
	jule::Ref<_112446fb0_Fn> _9113_error_method = _1130606b0_BUILTIN_TRAIT_ERROR->_method_find_method(jule::Str("error", 5));
	jule::Ref<_112446fb0_FnIns> _9213_error_method_ins = _9113_error_method->_method_instance();
	_9213_error_method_ins->_field_result=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("str", 3))));
	_9213_error_method_ins->_field_caller=_1130606b0_builtin_caller_common;
	_9113_error_method->_method_append_instance(_9213_error_method_ins);
}



inline jule::Ref<_112446fb0_FnIns> _1130606b0_find_builtin_fn(jule::Str _9820_ident) {
	{
		auto _match_expr{ _9820_ident };
		if (!((jule::Str("out", 3)) == _match_expr)) { goto _case_end_4637056128; }
		_case_begin_4637056128:;
		{
			return _1130606b0_BUILTIN_FN_OUT;
		}
		goto _match_end_4637053408;
		_case_end_4637056128:;
		if (!((jule::Str("outln", 5)) == _match_expr)) { goto _case_end_4637056240; }
		_case_begin_4637056240:;
		{
			return _1130606b0_BUILTIN_FN_OUTLN;
		}
		goto _match_end_4637053408;
		_case_end_4637056240:;
		if (!((jule::Str("new", 3)) == _match_expr)) { goto _case_end_4637055872; }
		_case_begin_4637055872:;
		{
			return _1130606b0_BUILTIN_FN_NEW;
		}
		goto _match_end_4637053408;
		_case_end_4637055872:;
		if (!((jule::Str("real", 4)) == _match_expr)) { goto _case_end_4637055984; }
		_case_begin_4637055984:;
		{
			return _1130606b0_BUILTIN_FN_REAL;
		}
		goto _match_end_4637053408;
		_case_end_4637055984:;
		if (!((jule::Str("drop", 4)) == _match_expr)) { goto _case_end_4637056448; }
		_case_begin_4637056448:;
		{
			return _1130606b0_BUILTIN_FN_DROP;
		}
		goto _match_end_4637053408;
		_case_end_4637056448:;
		if (!((jule::Str("panic", 5)) == _match_expr)) { goto _case_end_4637056560; }
		_case_begin_4637056560:;
		{
			return _1130606b0_BUILTIN_FN_PANIC;
		}
		goto _match_end_4637053408;
		_case_end_4637056560:;
		if (!((jule::Str("make", 4)) == _match_expr)) { goto _case_end_4637054880; }
		_case_begin_4637054880:;
		{
			return _1130606b0_BUILTIN_FN_MAKE;
		}
		goto _match_end_4637053408;
		_case_end_4637054880:;
		if (!((jule::Str("append", 6)) == _match_expr)) { goto _case_end_4637054992; }
		_case_begin_4637054992:;
		{
			return _1130606b0_BUILTIN_FN_APPEND;
		}
		goto _match_end_4637053408;
		_case_end_4637054992:;
		if (!((jule::Str("copy", 4)) == _match_expr)) { goto _case_end_4637054240; }
		_case_begin_4637054240:;
		{
			return _1130606b0_BUILTIN_FN_COPY;
		}
		goto _match_end_4637053408;
		_case_end_4637054240:;
		if (!((jule::Str("recover", 7)) == _match_expr)) { goto _case_end_4637054352; }
		_case_begin_4637054352:;
		{
			return _1130606b0_BUILTIN_FN_RECOVER;
		}
		goto _match_end_4637053408;
		_case_end_4637054352:;
		if (!((jule::Str("clone", 5)) == _match_expr)) { goto _case_end_4637054464; }
		_case_begin_4637054464:;
		{
			return _1130606b0_BUILTIN_FN_CLONE;
		}
		goto _match_end_4637053408;
		_case_end_4637054464:;
		_case_begin_4637053904:;
		{
			return jule::new_ref<_112446fb0_FnIns>();
		}
		goto _match_end_4637053408;
		_case_end_4637053904:;
		_match_end_4637053408:;
	}
}



inline jule::Ref<_1217f7750_TypeAlias> _1130606b0_find_builtin_type_alias(jule::Str _11528_ident) {
	{
		auto _match_expr{ _11528_ident };
		if (!((jule::Str("byte", 4)) == _match_expr)) { goto _case_end_4637066960; }
		_case_begin_4637066960:;
		{
			return _1130606b0_BUILTIN_TYPE_ALIAS_BYTE;
		}
		goto _match_end_4637064896;
		_case_end_4637066960:;
		if (!((jule::Str("rune", 4)) == _match_expr)) { goto _case_end_4637067072; }
		_case_begin_4637067072:;
		{
			return _1130606b0_BUILTIN_TYPE_ALIAS_RUNE;
		}
		goto _match_end_4637064896;
		_case_end_4637067072:;
		_case_begin_4637057344:;
		{
			return jule::new_ref<_1217f7750_TypeAlias>();
		}
		goto _match_end_4637064896;
		_case_end_4637057344:;
		_match_end_4637064896:;
	}
}



inline jule::Ref<_11209e2e0_Trait> _1130606b0_find_builtin_trait(jule::Str _12323_ident) {
	{
		auto _match_expr{ _12323_ident };
		if (!((jule::Str("Error", 5)) == _match_expr)) { goto _case_end_4637070448; }
		_case_begin_4637070448:;
		{
			return _1130606b0_BUILTIN_TRAIT_ERROR;
		}
		goto _match_end_4637069024;
		_case_end_4637070448:;
		_case_begin_4637065712:;
		{
			return jule::new_ref<_11209e2e0_Trait>();
		}
		goto _match_end_4637069024;
		_case_end_4637065712:;
		_match_end_4637069024:;
	}
}



inline jule::Any _1130606b0_find_builtin_def(jule::Str _13021_ident) {
	jule::Ref<_112446fb0_FnIns> _13113_f = _1130606b0_find_builtin_fn(_13021_ident);
	if (jule::real(_13113_f)) {
		return jule::Any(_13113_f);
	}
	jule::Ref<_1217f7750_TypeAlias> _13613_ta = _1130606b0_find_builtin_type_alias(_13021_ident);
	if (jule::real(_13613_ta)) {
		return jule::Any(_13613_ta);
	}
	jule::Ref<_11209e2e0_Trait> _14113_t = _1130606b0_find_builtin_trait(_13021_ident);
	if (jule::real(_14113_t)) {
		return jule::Any(_14113_t);
	}
	return jule::Any(nullptr);
}



inline jule::Any _1130606b0_find_builtin_def_std_mem(jule::Str _14929_ident) {
	{
		auto _match_expr{ _14929_ident };
		if (!((jule::Str("size_of", 7)) == _match_expr)) { goto _case_end_4637081056; }
		_case_begin_4637081056:;
		{
			return jule::Any(_1130606b0_BUILTIN_FN_STD_MEM_SIZE_OF);
		}
		goto _match_end_4637076640;
		_case_end_4637081056:;
		if (!((jule::Str("align_of", 8)) == _match_expr)) { goto _case_end_4637081280; }
		_case_begin_4637081280:;
		{
			return jule::Any(_1130606b0_BUILTIN_FN_STD_MEM_ALIGN_OF);
		}
		goto _match_end_4637076640;
		_case_end_4637081280:;
		_case_begin_4637078112:;
		{
			return jule::Any(nullptr);
		}
		goto _match_end_4637076640;
		_case_end_4637078112:;
		_match_end_4637076640:;
	}
}



inline jule::Any _1130606b0_find_package_builtin_def(jule::Str _15729_link_path,jule::Str _15745_ident) {
	{
		auto _match_expr{ _15729_link_path };
		if (!((jule::Str("std::mem", 8)) == _match_expr)) { goto _case_end_4637085888; }
		_case_begin_4637085888:;
		{
			return _1130606b0_find_builtin_def_std_mem(_15745_ident);
		}
		goto _match_end_4637080736;
		_case_end_4637085888:;
		_case_begin_4637081920:;
		{
			return jule::Any(nullptr);
		}
		goto _match_end_4637080736;
		_case_end_4637081920:;
		_match_end_4637080736:;
	}
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_common_plain(jule::Ref<_121dedce0_Eval> _16436_e,jule::Ref<_111612b20_FnCallExpr> _16450_fc,jule::Ref<_121dedce0_Data> _16471_d) {
	jule::Ref<_112446fb0_FnIns> _16513_f = _16471_d->_field_kind->_method_fnc();
	_121807de0_FnCallArgChecker _16713_fcac = _121807de0_FnCallArgChecker(_16436_e,_16450_fc->_field_args,_16450_fc->_field_token,_16513_f,false,jule::Slice<jule::Any>());
	_16713_fcac._method_check();
	jule::Ref<_112673500_FnCallExprModel> _17613_model = jule::new_struct<_112673500_FnCallExprModel>(new( std::nothrow ) _112673500_FnCallExprModel(_16513_f,_16450_fc->_field_concurrent,_16471_d->_field_model,_16713_fcac._field_arg_models));
	if ((!(jule::real(_16513_f->_field_result)))) {
		_16471_d=_121dedce0_build_void_data();
	} else {
		_16471_d=jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(_16513_f->_field_result,jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
	}
	_16471_d->_field_model=jule::Any(_17613_model);
	return _16471_d;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_common(jule::Ref<_121dedce0_Eval> _19530_e,jule::Ref<_111612b20_FnCallExpr> _19544_fc,jule::Ref<_121dedce0_Data> _19565_d) {
	if (_19544_fc->_field_generics.len() > 0LL) {
		_19530_e->_method_push_err(_19544_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	return _1130606b0_builtin_caller_common_plain(_19530_e,_19544_fc,_19565_d);
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_common_mut(jule::Ref<_121dedce0_Eval> _20334_e,jule::Ref<_111612b20_FnCallExpr> _20348_fc,jule::Ref<_121dedce0_Data> _20369_d) {
	if ((!(_20369_d->_field_mutable))) {
		_20334_e->_method_push_err(_20348_fc->_field_token,jule::Str("mutable_operation_on_immutable", 30),jule::Slice<jule::Any>({}));
	}
	return _1130606b0_builtin_caller_common(_20334_e,_20348_fc,_20369_d);
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_out(jule::Ref<_121dedce0_Eval> _21027_e,jule::Ref<_111612b20_FnCallExpr> _21041_fc,jule::Ref<_121dedce0_Data> ) {
	if (_21041_fc->_field_generics.len() > 0LL) {
		_21027_e->_method_push_err(_21041_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	if (_21041_fc->_field_args.len() < 1LL) {
		_21027_e->_method_push_err(_21041_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_21041_fc->_field_args.len() > 1LL) {
		_21027_e->_method_push_err(_21041_fc->_field_args[static_cast<jule::Int>(1LL)]->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _22213_expr = _21027_e->_method_eval_expr(_21041_fc->_field_args[static_cast<jule::Int>(0LL)]);
	if ((!(jule::real(_22213_expr)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_22213_expr->_method_is_void() || jule::real(_22213_expr->_field_kind->_method_fnc())) {
		_21027_e->_method_push_err(_21041_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("invalid_expr", 12),jule::Slice<jule::Any>({}));
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_121dedce0_Data> _23213_d = _121dedce0_build_void_data();
	_23213_d->_field_model=jule::Any(jule::new_struct<_112673500_BuiltinOutCallExprModel>(new( std::nothrow ) _112673500_BuiltinOutCallExprModel(_22213_expr->_field_model)));
	return _23213_d;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_outln(jule::Ref<_121dedce0_Eval> _23729_e,jule::Ref<_111612b20_FnCallExpr> _23743_fc,jule::Ref<_121dedce0_Data> ) {
	jule::Ref<_121dedce0_Data> _23813_d = _1130606b0_builtin_caller_out(_23729_e,_23743_fc,jule::new_ref<_121dedce0_Data>());
	if ((!(jule::real(_23813_d)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	_23813_d->_field_model=jule::Any(jule::new_struct<_112673500_BuiltinOutlnCallExprModel>(new( std::nothrow ) _112673500_BuiltinOutlnCallExprModel(_23813_d->_field_model.operator jule::Ref<_112673500_BuiltinOutCallExprModel>()->_field_expr)));
	return _23813_d;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_new(jule::Ref<_121dedce0_Eval> _24927_e,jule::Ref<_111612b20_FnCallExpr> _24941_fc,jule::Ref<_121dedce0_Data> _24962_d) {
	if (_24941_fc->_field_generics.len() > 0LL) {
		_24927_e->_method_push_err(_24941_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	if (_24941_fc->_field_args.len() < 1LL) {
		_24927_e->_method_push_err(_24941_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("type", 4))}));
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_24941_fc->_field_args.len() > 2LL) {
		_24927_e->_method_push_err(_24941_fc->_field_args[static_cast<jule::Int>(2LL)]->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _26113_t = _24927_e->_method_eval_expr_kind(_24941_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_kind);
	if ((!(jule::real(_26113_t)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if ((!(_26113_t->_field_decl))) {
		_24927_e->_method_push_err(_24941_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("invalid_type", 12),jule::Slice<jule::Any>({}));
		return jule::new_ref<_121dedce0_Data>();
	}
	if ((!(_1217f7750_is_valid_for_ref(_26113_t->_field_kind)))) {
		jule::Ref<_11209db80_StructIns> _27217_s = _26113_t->_field_kind->_method_strct();
		if ((jule::real(_27217_s) && jule::real(_27217_s->_field_decl)) && _27217_s->_field_decl->_field_cpp_linked) {
			_24927_e->_method_push_err(_24941_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("cpp_linked_struct_for_ref", 25),jule::Slice<jule::Any>({}));
		} else {
			_24927_e->_method_push_err(_24941_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("invalid_type", 12),jule::Slice<jule::Any>({}));
		}
		return jule::new_ref<_121dedce0_Data>();
	}
	_24962_d->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),jule::new_struct<_1217f7750_Ref>(new( std::nothrow ) _1217f7750_Ref(_26113_t->_field_kind->_method_clone()))));
	if (_24941_fc->_field_args.len() == 2LL) {
		jule::Ref<_121dedce0_Data> _28417_init = _24927_e->_field_s->_method_evalp(_24941_fc->_field_args[static_cast<jule::Int>(1LL)],_24927_e->_field_lookup,_26113_t->_field_kind);
		if (jule::real(_28417_init)) {
			_26113_t->_field_mutable=true;
			_1126288e0_check_mut(_24927_e->_field_s,_26113_t,_28417_init,_24941_fc->_field_args[static_cast<jule::Int>(1LL)]->_field_token);
			_24927_e->_field_s->_method_check_assign_type(_26113_t->_field_kind,_28417_init,_24941_fc->_field_args[static_cast<jule::Int>(1LL)]->_field_token,false);
			if (jule::real(_28417_init->_field_kind->_method_ref())) {
				_28417_init->_field_model=jule::Any(jule::new_struct<_112673500_ExplicitDerefExprModel>(new( std::nothrow ) _112673500_ExplicitDerefExprModel(_28417_init->_field_model)));
			}
			_24962_d->_field_model=jule::Any(jule::new_struct<_112673500_BuiltinNewCallExprModel>(new( std::nothrow ) _112673500_BuiltinNewCallExprModel(_26113_t->_field_kind,_28417_init->_field_model)));
		}
	} else {
		_24962_d->_field_model=jule::Any(jule::new_struct<_112673500_BuiltinNewCallExprModel>(new( std::nothrow ) _112673500_BuiltinNewCallExprModel(_26113_t->_field_kind,jule::Any())));
	}
	return _24962_d;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_real(jule::Ref<_121dedce0_Eval> _30828_e,jule::Ref<_111612b20_FnCallExpr> _30842_fc,jule::Ref<_121dedce0_Data> _30863_d) {
	if (_30842_fc->_field_generics.len() > 0LL) {
		_30828_e->_method_push_err(_30842_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	if (_30842_fc->_field_args.len() < 1LL) {
		_30828_e->_method_push_err(_30842_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("ref", 3))}));
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_30842_fc->_field_args.len() > 1LL) {
		_30828_e->_method_push_err(_30842_fc->_field_args[static_cast<jule::Int>(1LL)]->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _32013_ref = _30828_e->_method_eval_expr(_30842_fc->_field_args[static_cast<jule::Int>(0LL)]);
	if ((!(jule::real(_32013_ref)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if ((!(jule::real(_32013_ref->_field_kind->_method_ref())))) {
		_30828_e->_method_push_err(_30842_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("invalid_expr", 12),jule::Slice<jule::Any>({}));
		return jule::new_ref<_121dedce0_Data>();
	}
	_30863_d->_field_kind=_1130606b0_BUILTIN_FN_REAL->_field_result;
	_30863_d->_field_model=jule::Any(jule::new_struct<_112673500_BuiltinRealCallExprModel>(new( std::nothrow ) _112673500_BuiltinRealCallExprModel(_32013_ref->_field_model)));
	return _30863_d;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_drop(jule::Ref<_121dedce0_Eval> _33528_e,jule::Ref<_111612b20_FnCallExpr> _33542_fc,jule::Ref<_121dedce0_Data> ) {
	if (_33542_fc->_field_generics.len() > 0LL) {
		_33528_e->_method_push_err(_33542_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	if (_33542_fc->_field_args.len() < 1LL) {
		_33528_e->_method_push_err(_33542_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("ref", 3))}));
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_33542_fc->_field_args.len() > 1LL) {
		_33528_e->_method_push_err(_33542_fc->_field_args[static_cast<jule::Int>(2LL)]->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _34713_ref = _33528_e->_method_eval_expr(_33542_fc->_field_args[static_cast<jule::Int>(0LL)]);
	if ((!(jule::real(_34713_ref)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if ((!(jule::real(_34713_ref->_field_kind->_method_ref())))) {
		_33528_e->_method_push_err(_33542_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("invalid_expr", 12),jule::Slice<jule::Any>({}));
		return jule::new_ref<_121dedce0_Data>();
	}
	_1126288e0_check_mut(_33528_e->_field_s,_34713_ref,jule::new_ref<_121dedce0_Data>(),_33542_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token);
	jule::Ref<_121dedce0_Data> _35913_d = _121dedce0_build_void_data();
	_35913_d->_field_model=jule::Any(jule::new_struct<_112673500_BuiltinDropCallExprModel>(new( std::nothrow ) _112673500_BuiltinDropCallExprModel(_34713_ref->_field_model)));
	return _35913_d;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_panic(jule::Ref<_121dedce0_Eval> _36429_e,jule::Ref<_111612b20_FnCallExpr> _36443_fc,jule::Ref<_121dedce0_Data> ) {
	if (_36443_fc->_field_generics.len() > 0LL) {
		_36429_e->_method_push_err(_36443_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	if (_36443_fc->_field_args.len() < 1LL) {
		_36429_e->_method_push_err(_36443_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("error", 5))}));
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_36443_fc->_field_args.len() > 1LL) {
		_36429_e->_method_push_err(_36443_fc->_field_args[static_cast<jule::Int>(2LL)]->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _37613_expr = _36429_e->_method_eval_expr(_36443_fc->_field_args[static_cast<jule::Int>(0LL)]);
	if ((!(jule::real(_37613_expr)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if (jule::real(_37613_expr->_field_kind->_method_strct())) {
		jule::Ref<_11209db80_StructIns> _38213_s = _37613_expr->_field_kind->_method_strct();
		if (_38213_s->_field_decl->_method_is_implements(_1130606b0_BUILTIN_TRAIT_ERROR)) {
			_37613_expr->_field_cast_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1130606b0_BUILTIN_TRAIT_ERROR));
			_121dedce0_apply_cast_kind(_37613_expr);
		}
	}
	jule::Ref<_121dedce0_Data> _39113_d = _121dedce0_build_void_data();
	_39113_d->_field_model=jule::Any(jule::new_struct<_112673500_BuiltinPanicCallExprModel>(new( std::nothrow ) _112673500_BuiltinPanicCallExprModel(_37613_expr->_field_model)));
	return _39113_d;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_make(jule::Ref<_121dedce0_Eval> _39628_e,jule::Ref<_111612b20_FnCallExpr> _39642_fc,jule::Ref<_121dedce0_Data> _39663_d) {
	if (_39642_fc->_field_generics.len() > 0LL) {
		_39628_e->_method_push_err(_39642_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	if (_39642_fc->_field_args.len() < 2LL) {
		if (_39642_fc->_field_args.len() == 1LL) {
			_39628_e->_method_push_err(_39642_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("size", 4))}));
			return jule::new_ref<_121dedce0_Data>();
		}
		_39628_e->_method_push_err(_39642_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("type, size", 10))}));
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_39642_fc->_field_args.len() > 3LL) {
		_39628_e->_method_push_err(_39642_fc->_field_args[static_cast<jule::Int>(3LL)]->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _41213_t = _39628_e->_method_eval_expr_kind(_39642_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_kind);
	if ((!(jule::real(_41213_t)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if ((!(_41213_t->_field_decl)) || (!(jule::real(_41213_t->_field_kind->_method_slc())))) {
		_39628_e->_method_push_err(_39642_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("invalid_type", 12),jule::Slice<jule::Any>({}));
		return jule::new_ref<_121dedce0_Data>();
	}
	_39663_d->_field_kind=_41213_t->_field_kind;
	jule::Ref<_121dedce0_Data> _42413_len = _39628_e->_field_s->_method_evalp(_39642_fc->_field_args[static_cast<jule::Int>(1LL)],_39628_e->_field_lookup,_41213_t->_field_kind);
	if ((!(jule::real(_42413_len)))) {
		return _39663_d;
	}
	_39628_e->_method_check_integer_indexing_by_data(_42413_len,_39642_fc->_field_args[static_cast<jule::Int>(1LL)]->_field_token);
	if (_39642_fc->_field_args.len() == 3LL) {
		jule::Ref<_121dedce0_Data> _43217_cap = _39628_e->_field_s->_method_evalp(_39642_fc->_field_args[static_cast<jule::Int>(2LL)],_39628_e->_field_lookup,_41213_t->_field_kind);
		if ((!(jule::real(_43217_cap)))) {
			return _39663_d;
		}
		_39628_e->_method_check_integer_indexing_by_data(_43217_cap,_39642_fc->_field_args[static_cast<jule::Int>(2LL)]->_field_token);
		_39663_d->_field_model=jule::Any(jule::new_struct<_112673500_BuiltinMakeCallExprModel>(new( std::nothrow ) _112673500_BuiltinMakeCallExprModel(_41213_t->_field_kind,_42413_len->_field_model,_43217_cap->_field_model)));
	} else {
		_39663_d->_field_model=jule::Any(jule::new_struct<_112673500_BuiltinMakeCallExprModel>(new( std::nothrow ) _112673500_BuiltinMakeCallExprModel(_41213_t->_field_kind,_42413_len->_field_model,jule::Any())));
	}
	return _39663_d;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_append(jule::Ref<_121dedce0_Eval> _45330_e,jule::Ref<_111612b20_FnCallExpr> _45344_fc,jule::Ref<_121dedce0_Data> _45365_d) {
	if (_45344_fc->_field_generics.len() > 0LL) {
		_45330_e->_method_push_err(_45344_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	if (_45344_fc->_field_args.len() < 2LL) {
		if (_45344_fc->_field_args.len() == 1LL) {
			_45330_e->_method_push_err(_45344_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return jule::new_ref<_121dedce0_Data>();
		}
		_45330_e->_method_push_err(_45344_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_121dedce0_Data> _46613_t = _45330_e->_method_eval_expr(_45344_fc->_field_args[static_cast<jule::Int>(0LL)]);
	if ((!(jule::real(_46613_t)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Bool _47113_ref = false;
	if (jule::real(_46613_t->_field_kind->_method_ref())) {
		_46613_t->_field_kind=_46613_t->_field_kind->_method_ref()->_field_elem;
		_47113_ref=true;
	}
	if ((!(jule::real(_46613_t->_field_kind->_method_slc())))) {
		_45330_e->_method_push_err(_45344_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("invalid_expr", 12),jule::Slice<jule::Any>({}));
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Ref<_112446fb0_FnIns> _48213_f = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),true,jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str())),_46613_t->_field_kind->_method_clone())),jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),true,true,jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str())),_46613_t->_field_kind->_method_slc()->_field_elem->_method_clone()))}),_46613_t->_field_kind->_method_clone(),jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common_plain,jule::Bool(),jule::Bool()));
	_45365_d->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_48213_f));
	_45365_d->_field_model=jule::Any(jule::new_struct<_112673500_CommonIdentExprModel>(new( std::nothrow ) _112673500_CommonIdentExprModel(jule::Str("append", 6))));
	_45365_d=_1130606b0_builtin_caller_common_plain(_45330_e,_45344_fc,_45365_d);
	if (jule::real(_45365_d) && _47113_ref) {
		_45365_d->_field_model.operator jule::Ref<_112673500_FnCallExprModel>()->_field_args[static_cast<jule::Int>(0LL)]=jule::Any(jule::new_struct<_112673500_ExplicitDerefExprModel>(new( std::nothrow ) _112673500_ExplicitDerefExprModel(_46613_t->_field_model)));
	}
	return _45365_d;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_copy(jule::Ref<_121dedce0_Eval> _51328_e,jule::Ref<_111612b20_FnCallExpr> _51342_fc,jule::Ref<_121dedce0_Data> _51363_d) {
	if (_51342_fc->_field_generics.len() > 0LL) {
		_51328_e->_method_push_err(_51342_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	if (_51342_fc->_field_args.len() < 2LL) {
		if (_51342_fc->_field_args.len() == 1LL) {
			_51328_e->_method_push_err(_51342_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return jule::new_ref<_121dedce0_Data>();
		}
		_51328_e->_method_push_err(_51342_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_51342_fc->_field_args.len() > 2LL) {
		_51328_e->_method_push_err(_51342_fc->_field_args[static_cast<jule::Int>(2LL)]->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _52913_t = _51328_e->_method_eval_expr(_51342_fc->_field_args[static_cast<jule::Int>(0LL)]);
	if ((!(jule::real(_52913_t)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Bool _53413_ref = false;
	if (jule::real(_52913_t->_field_kind->_method_ref())) {
		_52913_t->_field_kind=_52913_t->_field_kind->_method_ref()->_field_elem;
		_53413_ref=false;
	}
	if ((!(jule::real(_52913_t->_field_kind->_method_slc())))) {
		_51328_e->_method_push_err(_51342_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("invalid_expr", 12),jule::Slice<jule::Any>({}));
		return jule::new_ref<_121dedce0_Data>();
	}
	if ((!(_52913_t->_field_mutable))) {
		_51328_e->_method_push_err(_51342_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("mutable_operation_on_immutable", 30),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_112446fb0_FnIns> _54913_f = jule::new_struct<_112446fb0_FnIns>(new( std::nothrow ) _112446fb0_FnIns(jule::Ref<_11209db80_StructIns>(),jule::Ref<_112446fb0_Fn>(),jule::Slice<jule::Ref<_1217f7750_TypeKind>>(),jule::Slice<jule::Ref<_112446fb0_ParamIns>>({jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param()),_52913_t->_field_kind->_method_clone())),jule::new_struct<_112446fb0_ParamIns>(new( std::nothrow ) _112446fb0_ParamIns(jule::new_struct<_112446fb0_Param>(new( std::nothrow ) _112446fb0_Param(_111613f20_Token(),true,jule::Bool(),jule::Bool(),jule::Ref<_1217f7750_TypeSymbol>(),jule::Str())),_52913_t->_field_kind->_method_clone()))}),_1130606b0_BUILTIN_FN_COPY->_field_result,jule::Ref<_1126288e0_Scope>(),jule::Ref<_112572770_ReferenceStack>(),jule::Ref<_112572770_ReferenceStack>(),_1130606b0_builtin_caller_common_plain,jule::Bool(),jule::Bool()));
	_51363_d->_field_kind=jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_54913_f));
	_51363_d->_field_model=jule::Any(jule::new_struct<_112673500_CommonIdentExprModel>(new( std::nothrow ) _112673500_CommonIdentExprModel(jule::Str("copy", 4))));
	_51363_d=_1130606b0_builtin_caller_common_plain(_51328_e,_51342_fc,_51363_d);
	if (jule::real(_51363_d) && _53413_ref) {
		_51363_d->_field_model.operator jule::Ref<_112673500_FnCallExprModel>()->_field_args[static_cast<jule::Int>(0LL)]=jule::Any(jule::new_struct<_112673500_ExplicitDerefExprModel>(new( std::nothrow ) _112673500_ExplicitDerefExprModel(_52913_t->_field_model)));
	}
	return _51363_d;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_recover(jule::Ref<_121dedce0_Eval> _57831_e,jule::Ref<_111612b20_FnCallExpr> _57845_fc,jule::Ref<_121dedce0_Data> ) {
	if (_57845_fc->_field_generics.len() > 0LL) {
		_57831_e->_method_push_err(_57845_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	
	if (_57845_fc->_field_args.len() < 1LL) {
		_57831_e->_method_push_err(_57845_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("handler", 7))}));
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_57845_fc->_field_args.len() > 1LL) {
		_57831_e->_method_push_err(_57845_fc->_field_args[static_cast<jule::Int>(1LL)]->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _59213_t = _57831_e->_method_eval_expr(_57845_fc->_field_args[static_cast<jule::Int>(0LL)]);
	if ((!(jule::real(_59213_t)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	if ((!(jule::real(_59213_t->_field_kind->_method_fnc())))) {
		_57831_e->_method_push_err(_57845_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("invalid_expr", 12),jule::Slice<jule::Any>({}));
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Str _6029_tkind = _59213_t->_field_kind->_method_fnc()->_method_to_str();
	if (_6029_tkind != jule::Str("fn(Error)", 9)) {
		_57831_e->_method_push_err(_57845_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("incompatible_types", 18),jule::Slice<jule::Any>({jule::Any(_6029_tkind),jule::Any(jule::Str("fn(Error)", 9))}));
	}
	jule::Ref<_121dedce0_Data> _60713_d = _121dedce0_build_void_data();
	_60713_d->_field_kind=_59213_t->_field_kind->_method_clone();
	_60713_d->_field_model=jule::Any(jule::new_struct<_1126288e0_Recover>(new( std::nothrow ) _1126288e0_Recover(jule::Ref<_112446fb0_FnIns>(),_59213_t->_field_model,jule::Ref<_1126288e0_Scope>(),jule::Ref<_112446fb0_FnIns>())));
	return _60713_d;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_clone(jule::Ref<_121dedce0_Eval> _61529_e,jule::Ref<_111612b20_FnCallExpr> _61543_fc,jule::Ref<_121dedce0_Data> ) {
	if (_61543_fc->_field_generics.len() > 0LL) {
		_61529_e->_method_push_err(_61543_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	if (_61543_fc->_field_args.len() < 1LL) {
		_61529_e->_method_push_err(_61543_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return jule::new_ref<_121dedce0_Data>();
	}
	if (_61543_fc->_field_args.len() > 1LL) {
		_61529_e->_method_push_err(_61543_fc->_field_args[static_cast<jule::Int>(1LL)]->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _62813_d = _61529_e->_method_eval_expr_kind(_61543_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_kind);
	if ((!(jule::real(_62813_d)))) {
		return jule::new_ref<_121dedce0_Data>();
	}
	jule::Fn<void(jule::Ref<_1217f7750_TypeKind>)> _6339_check_kind = jule::Fn<void(jule::Ref<_1217f7750_TypeKind>)>([=](jule::Ref<_1217f7750_TypeKind> _63329_k) mutable -> void {
		{
			if (!((jule::real(_63329_k->_method_slc())))) { goto _case_end_4637494080; }
			_case_begin_4637494080:;
			{
				if ((!(_1217f7750_supports_cloning(_63329_k->_method_slc()->_field_elem)))) {
					_61529_e->_method_push_err(_61543_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("internal_type_not_supports_clone", 32),jule::Slice<jule::Any>({jule::Any(_63329_k->_method_to_str())}));
				}
			}
			goto _match_end_4637492320;
			_case_end_4637494080:;
			if (!((jule::real(_63329_k->_method_map())))) { goto _case_end_4637493344; }
			_case_begin_4637493344:;
			{
				if ((!(_1217f7750_supports_cloning(_63329_k->_method_map()->_field_key))) || _1217f7750_supports_cloning(_63329_k->_method_map()->_field_val)) {
					_61529_e->_method_push_err(_61543_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("internal_type_not_supports_clone", 32),jule::Slice<jule::Any>({jule::Any(_63329_k->_method_to_str())}));
				}
			}
			goto _match_end_4637492320;
			_case_end_4637493344:;
			if (!((jule::real(_63329_k->_method_arr())))) { goto _case_end_4637492832; }
			_case_begin_4637492832:;
			{
				if ((!(_1217f7750_supports_cloning(_63329_k->_method_arr()->_field_elem)))) {
					_61529_e->_method_push_err(_61543_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("internal_type_not_supports_clone", 32),jule::Slice<jule::Any>({jule::Any(_63329_k->_method_to_str())}));
				}
			}
			goto _match_end_4637492320;
			_case_end_4637492832:;
			if (!((jule::real(_63329_k->_method_ref())))) { goto _case_end_4637492944; }
			_case_begin_4637492944:;
			{
				if ((!(_1217f7750_supports_cloning(_63329_k->_method_ref()->_field_elem)))) {
					_61529_e->_method_push_err(_61543_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("internal_type_not_supports_clone", 32),jule::Slice<jule::Any>({jule::Any(_63329_k->_method_to_str())}));
				}
			}
			goto _match_end_4637492320;
			_case_end_4637492944:;
			if (!((jule::real(_63329_k->_method_strct())))) { goto _case_end_4637493056; }
			_case_begin_4637493056:;
			{
				jule::Ref<_11209db80_StructIns> _65617_s = _62813_d->_field_kind->_method_strct();
				if ((!(_65617_s->_field_has_mut))) {
					_61529_e->_method_push_err(_61543_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("clone_immut_struct", 18),jule::Slice<jule::Any>({jule::Any(_62813_d->_field_kind->_method_to_str())}));
				}
				if (((!(jule::real(_65617_s->_field_decl))) || _65617_s->_field_decl->_field_cpp_linked) || (!(_65617_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))))) {
					_61529_e->_method_push_err(_61543_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("type_is_not_derives", 19),jule::Slice<jule::Any>({jule::Any(_62813_d->_field_kind->_method_to_str()),jule::Any(jule::Str("Clone", 5))}));
				}
			}
			goto _match_end_4637492320;
			_case_end_4637493056:;
			_case_begin_4637492528:;
			{
				_61529_e->_method_push_err(_61543_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("type_is_not_derives", 19),jule::Slice<jule::Any>({jule::Any(_62813_d->_field_kind->_method_to_str()),jule::Any(jule::Str("Clone", 5))}));
			}
			goto _match_end_4637492320;
			_case_end_4637492528:;
			_match_end_4637492320:;
		}
	});
	{
		if (!(((!(_62813_d->_field_lvalue))))) { goto _case_end_4637538768; }
		_case_begin_4637538768:;
		{
			_61529_e->_method_push_err(_61543_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_token,jule::Str("clone_non_lvalue", 16),jule::Slice<jule::Any>({}));
		}
		goto _match_end_4637539264;
		_case_end_4637538768:;
		if (!(((!(_1217f7750_supports_cloning(_62813_d->_field_kind)))))) { goto _case_end_4637538880; }
		_case_begin_4637538880:;
		{
			_6339_check_kind(_62813_d->_field_kind);
		}
		goto _match_end_4637539264;
		_case_end_4637538880:;
		_match_end_4637539264:;
	}
	_62813_d->_field_mutable=true;
	_62813_d->_field_model=jule::Any(jule::new_struct<_112673500_BuiltinCloneCallExprModel>(new( std::nothrow ) _112673500_BuiltinCloneCallExprModel(_62813_d->_field_model)));
	return _62813_d;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_std_mem_size_of(jule::Ref<_121dedce0_Eval> _68239_e,jule::Ref<_111612b20_FnCallExpr> _68253_fc,jule::Ref<_121dedce0_Data> ) {
	if (_68253_fc->_field_generics.len() > 0LL) {
		_68239_e->_method_push_err(_68253_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _68613_result = jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("uint", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
	if (_68253_fc->_field_args.len() < 1LL) {
		_68239_e->_method_push_err(_68253_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _68613_result;
	}
	if (_68253_fc->_field_args.len() > 1LL) {
		_68239_e->_method_push_err(_68253_fc->_field_args[static_cast<jule::Int>(1LL)]->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _69813_d = _68239_e->_method_eval_expr_kind(_68253_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_kind);
	if ((!(jule::real(_69813_d)))) {
		return _68613_result;
	}
	_68613_result->_field_model=jule::Any(jule::new_struct<_112673500_SizeofExprModel>(new( std::nothrow ) _112673500_SizeofExprModel(_69813_d->_field_model)));
	return _68613_result;
}



inline jule::Ref<_121dedce0_Data> _1130606b0_builtin_caller_std_mem_align_of(jule::Ref<_121dedce0_Eval> _70740_e,jule::Ref<_111612b20_FnCallExpr> _70754_fc,jule::Ref<_121dedce0_Data> ) {
	if (_70754_fc->_field_generics.len() > 0LL) {
		_70740_e->_method_push_err(_70754_fc->_field_token,jule::Str("not_has_generics", 16),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _71113_result = jule::new_struct<_121dedce0_Data>(new( std::nothrow ) _121dedce0_Data(jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_1217f7750_build_prim_type(jule::Str("uint", 4)))),jule::Ref<_1217f7750_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ref<_1131530d0_Const>()));
	if (_70754_fc->_field_args.len() < 1LL) {
		_70740_e->_method_push_err(_70754_fc->_field_token,jule::Str("missing_expr_for", 16),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _71113_result;
	}
	if (_70754_fc->_field_args.len() > 1LL) {
		_70740_e->_method_push_err(_70754_fc->_field_args[static_cast<jule::Int>(1LL)]->_field_token,jule::Str("argument_overflow", 17),jule::Slice<jule::Any>({}));
	}
	jule::Ref<_121dedce0_Data> _72313_d = _70740_e->_method_eval_expr_kind(_70754_fc->_field_args[static_cast<jule::Int>(0LL)]->_field_kind);
	if ((!(jule::real(_72313_d)))) {
		return _71113_result;
	}
	_71113_result->_field_model=jule::Any(jule::new_struct<_112673500_AlignofExprModel>(new( std::nothrow ) _112673500_AlignofExprModel(_72313_d->_field_model)));
	return _71113_result;
}



inline jule::Bool _12207c390_eval_directive_ident(jule::Str _625_ident) {
	if (_625_ident == jule::Str("", 0)) {
		return false;
	}
	{
		auto __julec_range_expr = _122082160_FLAGS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _12207c390_flag = *__julec_range_begin;
			_iter_begin_4643764512:;
			{
				if (_12207c390_flag == _625_ident) {
					return true;
				}
			}
			_iter_next_4643764512:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _12207c390_flag = *__julec_range_begin; goto _iter_begin_4643764512; }
			_iter_end_4643764512:;
		}
	}
	return false;
}



inline jule::Bool _12207c390_eval_directive_part(jule::Str _2228_part) {
	jule::Bool _239_logical_not = _2228_part[static_cast<jule::Int>(0LL)] == '!';
	if (_239_logical_not) {
		_2228_part=_2228_part.slice(static_cast<jule::Int>(1LL));
	}
	jule::Bool _2813_result = _12207c390_eval_directive_ident(_2228_part);
	if (_239_logical_not) {
		_2813_result=(!(_2813_result));
	}
	return _2813_result;
}



inline jule::Slice<jule::Str> _12207c390_split_operans(jule::Str _3718_op,jule::Str _3727_expr) {
	jule::Slice<jule::Str> _3813_parts = jule::Slice<jule::Str>::alloc(static_cast<jule::Int>(0LL),static_cast<jule::Int>(10LL));
	jule::Int _4013_range_n = 0LL;
	jule::Int _4113_i = 0LL;
	jule::Int _4213_last = 0LL;
	_iter_begin_4643777312:;
	if (!(_4113_i < (_3727_expr.len() - 1LL))) { goto _iter_end_4643777312; }
	{
		jule::U8 _4413_b = _3727_expr[static_cast<jule::Int>(_4113_i)];
		if (_4413_b == '(') {
			(_4013_range_n)++;
			goto _iter_next_4643777312;
		} else if (_4413_b == ')') {
			(_4013_range_n)--;
		}
		if (_4013_range_n > 0LL) {
			goto _iter_next_4643777312;
		}
		{
			auto _match_expr{ _3718_op };
			if (!((jule::Str("||", 2)) == _match_expr)) { goto _case_end_4643783936; }
			_case_begin_4643783936:;
			{
				if ((_4413_b == '|') && (_3727_expr[static_cast<jule::Int>(_4113_i + 1LL)] == '|')) {
					_3813_parts=append(_3813_parts,jule::Slice<jule::Str>({_3727_expr.slice(static_cast<jule::Int>(_4213_last),static_cast<jule::Int>(_4113_i))}));
					_4213_last=_4113_i + 2LL;
				}
			}
			goto _match_end_4643787600;
			_case_end_4643783936:;
			if (!((jule::Str("&&", 2)) == _match_expr)) { goto _case_end_4643786208; }
			_case_begin_4643786208:;
			{
				if ((_4413_b == '&') && (_3727_expr[static_cast<jule::Int>(_4113_i + 1LL)] == '&')) {
					_3813_parts=append(_3813_parts,jule::Slice<jule::Str>({_3727_expr.slice(static_cast<jule::Int>(_4213_last),static_cast<jule::Int>(_4113_i))}));
					_4213_last=_4113_i + 2LL;
				}
			}
			goto _match_end_4643787600;
			_case_end_4643786208:;
			_match_end_4643787600:;
		}
	}
	_iter_next_4643777312:;
	(_4113_i)++;
	goto _iter_begin_4643777312;
	_iter_end_4643777312:;
	if (_4213_last < _3727_expr.len()) {
		_3813_parts=append(_3813_parts,jule::Slice<jule::Str>({_3727_expr.slice(static_cast<jule::Int>(_4213_last))}));
	} else {
		_3813_parts=append(_3813_parts,jule::Slice<jule::Str>({jule::Str("", 0)}));
	}
	return _3813_parts;
}



inline jule::Bool _12207c390_eval_directive_expr(jule::Str _8724_expr) {
	if (_8724_expr == jule::Str("", 0)) {
		return false;
	}
	jule::Bool _9213_result = false;
	jule::Slice<jule::Str> _949_logical_or_parts = _12207c390_split_operans(jule::Str("||", 2),_8724_expr);
	{
		auto __julec_range_expr = _949_logical_or_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _12207c390_part = *__julec_range_begin;
			_iter_begin_4643813248:;
			{
				if (_12207c390_part == jule::Str("", 0)) {
					return false;
				}
				jule::Bool _10017_and = true;
				jule::Slice<jule::Str> _10113_logical_and_parts = _12207c390_split_operans(jule::Str("&&", 2),_12207c390_part);
				{
					auto __julec_range_expr = _10113_logical_and_parts;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Str _12207c390_and_part = *__julec_range_begin;
						_iter_begin_4643818672:;
						{
							if (_12207c390_and_part.find(jule::Str("(", 1)) != -1LL) {
								if (_12207c390_and_part[static_cast<jule::Int>(_12207c390_and_part.len() - 1LL)] != ')') {
									return false;
								}
								jule::Str _10721_expr = _12207c390_and_part.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_12207c390_and_part.len() - 1LL));
								_10017_and=_10017_and && _12207c390_eval_directive_expr(_10721_expr);
							} else {
								_10017_and=_10017_and && _12207c390_eval_directive_part(_12207c390_and_part);
							}
						}
						_iter_next_4643818672:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _12207c390_and_part = *__julec_range_begin; goto _iter_begin_4643818672; }
						_iter_end_4643818672:;
					}
				}
				_9213_result=_9213_result || _10017_and;
			}
			_iter_next_4643813248:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _12207c390_part = *__julec_range_begin; goto _iter_begin_4643813248; }
			_iter_end_4643813248:;
		}
	}
	return _9213_result;
}



inline void _122082160_set_os_flags(void) {
	{
		if (!((jule::Str("windows", 7)) == jule::Str("windows", 7))) { goto _case_end_4643819600; }
		_case_begin_4643819600:;
		{
			_122082160_FLAGS=append(_122082160_FLAGS,jule::Slice<jule::Str>({jule::Str("windows", 7)}));
		}
		goto _match_end_4643812064;
		_case_end_4643819600:;
		if (!((jule::Str("linux", 5)) == jule::Str("windows", 7))) { goto _case_end_4643819712; }
		_case_begin_4643819712:;
		{
			_122082160_FLAGS=append(_122082160_FLAGS,jule::Slice<jule::Str>({jule::Str("linux", 5)}));
		}
		goto _match_end_4643812064;
		_case_end_4643819712:;
		if (!((jule::Str("darwin", 6)) == jule::Str("windows", 7))) { goto _case_end_4643819824; }
		_case_begin_4643819824:;
		{
			_122082160_FLAGS=append(_122082160_FLAGS,jule::Slice<jule::Str>({jule::Str("darwin", 6)}));
		}
		goto _match_end_4643812064;
		_case_end_4643819824:;
		_match_end_4643812064:;
	}
	if (_1316e9330_is_unix(jule::Str("windows", 7))) {
		_122082160_FLAGS=append(_122082160_FLAGS,jule::Slice<jule::Str>({jule::Str("unix", 4)}));
	}
}



inline void _122082160_set_arch_flags(void) {
	{
		if (!((jule::Str("i386", 4)) == jule::Str("i386", 4))) { goto _case_end_4643841984; }
		_case_begin_4643841984:;
		{
			_122082160_FLAGS=append(_122082160_FLAGS,jule::Slice<jule::Str>({jule::Str("i386", 4)}));
		}
		goto _match_end_4643837456;
		_case_end_4643841984:;
		if (!((jule::Str("amd64", 5)) == jule::Str("i386", 4))) { goto _case_end_4643842096; }
		_case_begin_4643842096:;
		{
			_122082160_FLAGS=append(_122082160_FLAGS,jule::Slice<jule::Str>({jule::Str("amd64", 5)}));
		}
		goto _match_end_4643837456;
		_case_end_4643842096:;
		if (!((jule::Str("arm64", 5)) == jule::Str("i386", 4))) { goto _case_end_4643814160; }
		_case_begin_4643814160:;
		{
			_122082160_FLAGS=append(_122082160_FLAGS,jule::Slice<jule::Str>({jule::Str("arm64", 5)}));
		}
		goto _match_end_4643837456;
		_case_end_4643814160:;
		_match_end_4643837456:;
	}
	if (_1316e9330_is_64bit(jule::Str("i386", 4))) {
		_122082160_FLAGS=append(_122082160_FLAGS,jule::Slice<jule::Str>({jule::Str("64bit", 5)}));
	}
	if (_1316e9330_is_32bit(jule::Str("i386", 4))) {
		_122082160_FLAGS=append(_122082160_FLAGS,jule::Slice<jule::Str>({jule::Str("32bit", 5)}));
	}
}



inline void _122082160_init(void) {
	_122082160_set_os_flags();
	_122082160_set_arch_flags();
}



inline void _12209b250_exit_err(jule::Str _2313_msg) {
	
	jule::outln(_2313_msg);
	_1217b31d0_exit(1LL);
}



inline jule::Slice<jule::U8> _12209b250_read_buff(jule::Str _3114_path) {
	jule::Slice<jule::U8> _3214_buffer;
	jule::Int _3222_err;
	std::tie(_3214_buffer,_3222_err) = _1220de8f0_read_file(_3114_path);
	if (_3222_err != 0LLU) {
		_12209b250_exit_err(jule::Str("error: file cannot read", 23));
	}
	return _3214_buffer;
}



inline _1316b4080_Log _12209b250_flat_compiler_err(jule::Str _4122_text) {
	return _1316b4080_Log(1LLU,jule::Int(),jule::Int(),jule::Str(),_4122_text);
}



inline std::tuple<jule::Slice<jule::Ref<_1220df4b0_DirEntry>>,jule::Str> _12209b250_read_package_dirents(jule::Str _4925_path) {
	jule::Str _4951_err_msg = jule::Str();
	jule::Slice<jule::Ref<_1220df4b0_DirEntry>> _5014_dirents;
	jule::Int _5023_err;
	std::tie(_5014_dirents,_5023_err) = _1220e63c0_read_dir(_4925_path);
	if (_5023_err != 0LLU) {
		_4951_err_msg = jule::Str("connot read package directory: ", 31) + _4925_path;
		return std::make_tuple(nullptr,_4951_err_msg);
	}
	jule::Slice<jule::Ref<_1220df4b0_DirEntry>> _5513_passed_dirents = nullptr;
	{
		auto __julec_range_expr = _5014_dirents;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1220df4b0_DirEntry> _12209b250_dirent = *__julec_range_begin;
			_iter_begin_4643875536:;
			{
				jule::Str _5713_name = _12209b250_dirent->_field_name;
				if (_12209b250_dirent->_field_stat->_method_is_dir() || (!(_5713_name.has_suffix(jule::Str(".jule", 5))))) {
					goto _iter_next_4643875536;
				}
				_5513_passed_dirents=append(_5513_passed_dirents,jule::Slice<jule::Ref<_1220df4b0_DirEntry>>({_12209b250_dirent}));
			}
			_iter_next_4643875536:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _12209b250_dirent = *__julec_range_begin; goto _iter_begin_4643875536; }
			_iter_end_4643875536:;
		}
	}
	_4951_err_msg = jule::Str("", 0);
	return std::make_tuple(_5513_passed_dirents,_4951_err_msg);
}



inline jule::Str _12209b250_concat_all_parts(jule::Slice<jule::Str> _7121_parts) {
	jule::Str _7213_s = jule::Str("", 0);
	{
		auto __julec_range_expr = _7121_parts;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _12209b250_part = *__julec_range_begin;
			_iter_begin_4643888592:;
			{
				_7213_s+=_12209b250_part;
			}
			_iter_next_4643888592:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _12209b250_part = *__julec_range_begin; goto _iter_begin_4643888592; }
			_iter_end_4643888592:;
		}
	}
	return _7213_s;
}



inline jule::Bool _12209b250_is_pass_build_directives(jule::Ref<_1220cb5d0_Ast>& _8034_file) {
	jule::Int _8113_i = 0LL;
	_iter_begin_4643889776:;
	if (!(_8113_i < _8034_file->_field_top_directives._method_len())) { goto _iter_end_4643889776; }
	{
		jule::Ref<_111612b20_Directive> _8317_td = _8034_file->_field_top_directives._method_at(_8113_i);
		if (_8317_td->_field_tag != jule::Str("build", 5)) {
			goto _iter_next_4643889776;
		}
		jule::Str _8813_expr = _12209b250_concat_all_parts(_8317_td->_field_args);
		jule::Bool _8913_result = _12207c390_eval_directive_expr(_8813_expr);
		if ((!(_8913_result))) {
			return false;
		}
	}
	_iter_next_4643889776:;
	(_8113_i)++;
	goto _iter_begin_4643889776;
	_iter_end_4643889776:;
	return true;
}



inline void _122056550_push_passes(jule::Ref<_11265fb90_Package> _8120_p,jule::Slice<jule::Str>& _8138_passes) {
	{
		auto __julec_range_expr = _8120_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _122056550_f = *__julec_range_begin;
			_iter_begin_4643964480:;
			{
				jule::Int _8317_i = 0LL;
				_julec_label_push:;
				_iter_begin_4643967920:;
				if (!(_8317_i < _122056550_f->_field_passes._method_len())) { goto _iter_end_4643967920; }
				{
					_112572770_Pass _8621_pass = _122056550_f->_field_passes._method_at(_8317_i);
					if (_8621_pass._field_text == jule::Str("", 0)) {
						goto _iter_next_4643967920;
					}
					{
						auto __julec_range_expr = _8138_passes;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Str _122056550_cpass = *__julec_range_begin;
							_iter_begin_4643972352:;
							{
								if (_122056550_cpass == _8621_pass._field_text) {
									goto _iter_next_4643967920;
								}
							}
							_iter_next_4643972352:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _122056550_cpass = *__julec_range_begin; goto _iter_begin_4643972352; }
							_iter_end_4643972352:;
						}
					}
					_8138_passes=append(_8138_passes,jule::Slice<jule::Str>({_8621_pass._field_text}));
				}
				_iter_next_4643967920:;
				(_8317_i)++;
				goto _iter_begin_4643967920;
				_iter_end_4643967920:;
			}
			_iter_next_4643964480:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _122056550_f = *__julec_range_begin; goto _iter_begin_4643964480; }
			_iter_end_4643964480:;
		}
	}
}



inline jule::Slice<jule::Str> _122056550_get_all_unique_passes(jule::Ref<_11265fb90_Package> _10030_pkg,jule::Slice<jule::Ref<_11265fb90_ImportInfo>> _10049_uses) {
	jule::Slice<jule::Str> _10113_passes = nullptr;
	_122056550_push_passes(_10030_pkg,_10113_passes);
	{
		auto __julec_range_expr = _10049_uses;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _122056550_u = *__julec_range_begin;
			_iter_begin_4643981712:;
			{
				if ((!(_122056550_u->_field_cpp_linked))) {
					_122056550_push_passes(_122056550_u->_field_package,_10113_passes);
				}
			}
			_iter_next_4643981712:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _122056550_u = *__julec_range_begin; goto _iter_begin_4643981712; }
			_iter_end_4643981712:;
		}
	}
	return _10113_passes;
}



inline std::tuple<jule::Ref<_122056550_IR>,jule::Slice<_1316b4080_Log>> _122056550_build_ir(jule::Str _11917_path) {
	jule::Ref<_12209b250_PlainImporter> _12013_importer = jule::new_struct<_12209b250_PlainImporter>(new( std::nothrow ) _12209b250_PlainImporter());
	jule::Slice<jule::Ref<_1220cb5d0_Ast>> _12114_files;
	jule::Slice<_1316b4080_Log> _12125_logs;
	std::tie(_12114_files,_12125_logs) = _12013_importer->_method_import_package(_11917_path);
	if (_12125_logs.len() > 0LL) {
		return std::make_tuple(jule::new_ref<_122056550_IR>(),_12125_logs);
	}
	if (_12114_files.len() == 0LL) {
		return std::make_tuple(jule::new_ref<_122056550_IR>(),nullptr);
	}
	jule::Ref<_11265fb90_Package> _13014_pkg;
	std::tie(_13014_pkg,_12125_logs) = _11304a4a0_analyze_package(_12114_files,_12013_importer);
	if (_12125_logs.len() > 0LL) {
		return std::make_tuple(jule::new_ref<_122056550_IR>(),_12125_logs);
	}
	jule::Ref<_122056550_IR> _13513_ir = jule::new_struct<_122056550_IR>(new( std::nothrow ) _122056550_IR(jule::Slice<jule::Str>(),_13014_pkg,_12013_importer->_field_all_packages));
	_13513_ir->_field_passes=_122056550_get_all_unique_passes(_13513_ir->_field_main,_13513_ir->_field_used);
	return std::make_tuple(_13513_ir,nullptr);
}



inline jule::Bool _131692a90_is_exist_0(jule::Slice<jule::Any> _3116_arr,jule::Ref<_112446fb0_FnIns> _3128_t) {
	{
		auto __julec_range_expr = _3116_arr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _131692a90_ref = *__julec_range_begin;
			_iter_begin_4644092416:;
			{
				{
					auto _match_expr{ _131692a90_ref };
					if (!(_match_expr.type_is<jule::Ref<_112446fb0_FnIns>>())) { goto _case_end_4644094128; }
					_case_begin_4644094128:;
					{
						if ((_131692a90_ref.operator jule::Ref<_112446fb0_FnIns>()).alloc == (_3128_t).alloc) {
							return true;
						}
					}
					goto _match_end_4644094032;
					_case_end_4644094128:;
					_match_end_4644094032:;
				}
			}
			_iter_next_4644092416:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _131692a90_ref = *__julec_range_begin; goto _iter_begin_4644092416; }
			_iter_end_4644092416:;
		}
	}
	return false;
}

inline jule::Bool _131692a90_is_exist_1(jule::Slice<jule::Any> _3116_arr,jule::Ref<_1320e22c0_Var> _3128_t) {
	{
		auto __julec_range_expr = _3116_arr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _131692a90_ref = *__julec_range_begin;
			_iter_begin_4644101568:;
			{
				{
					auto _match_expr{ _131692a90_ref };
					if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4644103280; }
					_case_begin_4644103280:;
					{
						if ((_131692a90_ref.operator jule::Ref<_1320e22c0_Var>()).alloc == (_3128_t).alloc) {
							return true;
						}
					}
					goto _match_end_4644103184;
					_case_end_4644103280:;
					_match_end_4644103184:;
				}
			}
			_iter_next_4644101568:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _131692a90_ref = *__julec_range_begin; goto _iter_begin_4644101568; }
			_iter_end_4644101568:;
		}
	}
	return false;
}

inline jule::Bool _131692a90_is_exist_2(jule::Slice<jule::Any> _3116_arr,jule::Ref<_11209db80_StructIns> _3128_t) {
	{
		auto __julec_range_expr = _3116_arr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _131692a90_ref = *__julec_range_begin;
			_iter_begin_4644110784:;
			{
				{
					auto _match_expr{ _131692a90_ref };
					if (!(_match_expr.type_is<jule::Ref<_11209db80_StructIns>>())) { goto _case_end_4644112496; }
					_case_begin_4644112496:;
					{
						if ((_131692a90_ref.operator jule::Ref<_11209db80_StructIns>()).alloc == (_3128_t).alloc) {
							return true;
						}
					}
					goto _match_end_4644112400;
					_case_end_4644112496:;
					_match_end_4644112400:;
				}
			}
			_iter_next_4644110784:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _131692a90_ref = *__julec_range_begin; goto _iter_begin_4644110784; }
			_iter_end_4644110784:;
		}
	}
	return false;
}

inline jule::Bool _131692a90_is_exist_3(jule::Slice<jule::Any> _3116_arr,jule::Ref<_11209e2e0_Trait> _3128_t) {
	{
		auto __julec_range_expr = _3116_arr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _131692a90_ref = *__julec_range_begin;
			_iter_begin_4644119936:;
			{
				{
					auto _match_expr{ _131692a90_ref };
					if (!(_match_expr.type_is<jule::Ref<_11209e2e0_Trait>>())) { goto _case_end_4644121648; }
					_case_begin_4644121648:;
					{
						if ((_131692a90_ref.operator jule::Ref<_11209e2e0_Trait>()).alloc == (_3128_t).alloc) {
							return true;
						}
					}
					goto _match_end_4644121552;
					_case_end_4644121648:;
					_match_end_4644121552:;
				}
			}
			_iter_next_4644119936:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _131692a90_ref = *__julec_range_begin; goto _iter_begin_4644119936; }
			_iter_end_4644119936:;
		}
	}
	return false;
}



inline jule::Bool _131692a90_is_exist_ref(jule::Slice<jule::Any> _4421_refs,jule::Any _4434_ref) {
	{
		auto _match_expr{ _4434_ref };
		if (!(_match_expr.type_is<jule::Ref<_112446fb0_FnIns>>())) { goto _case_end_4644084496; }
		_case_begin_4644084496:;
		{
			return _131692a90_is_exist_0(_4421_refs,_4434_ref.operator jule::Ref<_112446fb0_FnIns>());
		}
		goto _match_end_4644082832;
		_case_end_4644084496:;
		if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4644084608; }
		_case_begin_4644084608:;
		{
			return _131692a90_is_exist_1(_4421_refs,_4434_ref.operator jule::Ref<_1320e22c0_Var>());
		}
		goto _match_end_4644082832;
		_case_end_4644084608:;
		if (!(_match_expr.type_is<jule::Ref<_11209db80_StructIns>>())) { goto _case_end_4644085456; }
		_case_begin_4644085456:;
		{
			return _131692a90_is_exist_2(_4421_refs,_4434_ref.operator jule::Ref<_11209db80_StructIns>());
		}
		goto _match_end_4644082832;
		_case_end_4644085456:;
		if (!(_match_expr.type_is<jule::Ref<_11209e2e0_Trait>>())) { goto _case_end_4644085568; }
		_case_begin_4644085568:;
		{
			return _131692a90_is_exist_3(_4421_refs,_4434_ref.operator jule::Ref<_11209e2e0_Trait>());
		}
		goto _match_end_4644082832;
		_case_end_4644085568:;
		_case_begin_4644083248:;
		{
			return false;
		}
		goto _match_end_4644082832;
		_case_end_4644083248:;
		_match_end_4644082832:;
	}
}



inline jule::Bool _131692a90_is_dead(jule::Any _5516_ref) {
	jule::Bool _5528_dead = jule::Bool();
	if (_131692a90_is_exist_ref(_131692a90_deads,_5516_ref)) {
		_5528_dead = true;
		return _5528_dead;
	}
	{
		auto _match_expr{ _5516_ref };
		if (!(_match_expr.type_is<jule::Ref<_112446fb0_FnIns>>())) { goto _case_end_4644129568; }
		_case_begin_4644129568:;
		{
			if (_5516_ref.operator jule::Ref<_112446fb0_FnIns>()->_field_decl->_method_is_init()) {
				goto _match_end_4644108384;
			}
			goto _case_begin_4644122928;
		}
		goto _match_end_4644108384;
		_case_end_4644129568:;
		_case_begin_4644122928:;
		{
			if (_131692a90_is_exist_ref(jule::Slice<jule::Any>({_131692a90_current,_131692a90_main_current}),_5516_ref)) {
				_5528_dead = true;
				return _5528_dead;
			}
			if (_131692a90_is_exist_ref(_131692a90_checking,_5516_ref)) {
				_5528_dead = true;
				return _5528_dead;
			}
		}
		goto _match_end_4644108384;
		_case_end_4644122928:;
		_match_end_4644108384:;
	}
	jule::Any _7613_old = _131692a90_current;
	_131692a90_current=_5516_ref;
	jule::I64 _789_len = _131692a90_checking.len();
	_131692a90_checking=append(_131692a90_checking,jule::Slice<jule::Any>({_5516_ref}));
	__JULE_DEFER({
		_131692a90_current=_7613_old;
		_131692a90_drop_ref(_131692a90_checking,_789_len);
	});
	{
		auto _match_expr{ _5516_ref };
		if (!(_match_expr.type_is<jule::Ref<_112446fb0_FnIns>>())) { goto _case_end_4644139264; }
		_case_begin_4644139264:;
		{
			_5528_dead = _131692a90_is_fn_dead(_5516_ref.operator jule::Ref<_112446fb0_FnIns>());
			return _5528_dead;
		}
		goto _match_end_4644133104;
		_case_end_4644139264:;
		if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4644139376; }
		_case_begin_4644139376:;
		{
			_5528_dead = _131692a90_is_var_dead(_5516_ref.operator jule::Ref<_1320e22c0_Var>());
			return _5528_dead;
		}
		goto _match_end_4644133104;
		_case_end_4644139376:;
		if (!(_match_expr.type_is<jule::Ref<_11209db80_StructIns>>())) { goto _case_end_4644138544; }
		_case_begin_4644138544:;
		{
			_5528_dead = _131692a90_is_struct_dead(_5516_ref.operator jule::Ref<_11209db80_StructIns>());
			return _5528_dead;
		}
		goto _match_end_4644133104;
		_case_end_4644138544:;
		if (!(_match_expr.type_is<jule::Ref<_11209e2e0_Trait>>())) { goto _case_end_4644138656; }
		_case_begin_4644138656:;
		{
			_5528_dead = _131692a90_is_trait_dead(_5516_ref.operator jule::Ref<_11209e2e0_Trait>());
			return _5528_dead;
		}
		goto _match_end_4644133104;
		_case_end_4644138656:;
		_case_begin_4644132288:;
		{
			_5528_dead = false;
			return _5528_dead;
		}
		goto _match_end_4644133104;
		_case_end_4644132288:;
		_match_end_4644133104:;
	}
}



inline void _131692a90_remove_from_slice_0(jule::Slice<jule::Ref<_112446fb0_FnIns>>& _10630_s,jule::Int _10639_pos) {
	if (_10639_pos == _10630_s.len()) {
		return;
	}
	_10630_s=append(_10630_s.slice(0LL,static_cast<jule::Int>(_10639_pos)),_10630_s.slice(static_cast<jule::Int>(_10639_pos + 1LL)));
}

inline void _131692a90_remove_from_slice_1(jule::Slice<jule::Ref<_11209db80_StructIns>>& _10630_s,jule::Int _10639_pos) {
	if (_10639_pos == _10630_s.len()) {
		return;
	}
	_10630_s=append(_10630_s.slice(0LL,static_cast<jule::Int>(_10639_pos)),_10630_s.slice(static_cast<jule::Int>(_10639_pos + 1LL)));
}



inline void _131692a90_drop_ref(jule::Slice<jule::Any>& _11418_refs,jule::Int _11431_pos) {
	_11418_refs=_11418_refs.slice(0LL,static_cast<jule::Int>(_11431_pos));
}



inline jule::Bool _131692a90_is_all_references_are_dead_0(jule::Ref<_112572770_ReferenceStack> _12438_references) {
	jule::Int _12513_i = 0LL;
	_iter_begin_4645227616:;
	if (!(_12513_i < _12438_references->_method_len())) { goto _iter_end_4645227616; }
	{
		jule::Any _12717_ref = _12438_references->_method_at(_12513_i);
		{
			auto _match_expr{ _131692a90_current };
			if (!(_match_expr.type_is<jule::Ref<_112446fb0_FnIns>>())) { goto _case_end_4645231648; }
			_case_begin_4645231648:;
			{
				{
					auto _match_expr{ _12717_ref };
					if (!(_match_expr.type_is<jule::Ref<_112446fb0_FnIns>>())) { goto _case_end_4645233328; }
					_case_begin_4645233328:;
					{
						if ((_131692a90_current.operator jule::Ref<_112446fb0_FnIns>()).alloc == (_12717_ref.operator jule::Ref<_112446fb0_FnIns>()).alloc) {
							goto _iter_next_4645227616;
						}
					}
					goto _match_end_4645231760;
					_case_end_4645233328:;
					_match_end_4645231760:;
				}
			}
			goto _match_end_4645230736;
			_case_end_4645231648:;
			_match_end_4645230736:;
		}
		{
			auto _match_expr{ _131692a90_main_current };
			if (!(_match_expr.type_is<jule::Ref<_112446fb0_FnIns>>())) { goto _case_end_4645232192; }
			_case_begin_4645232192:;
			{
				{
					auto _match_expr{ _12717_ref };
					if (!(_match_expr.type_is<jule::Ref<_112446fb0_FnIns>>())) { goto _case_end_4645234528; }
					_case_begin_4645234528:;
					{
						if ((_131692a90_main_current.operator jule::Ref<_112446fb0_FnIns>()).alloc == (_12717_ref.operator jule::Ref<_112446fb0_FnIns>()).alloc) {
							goto _iter_next_4645227616;
						}
					}
					goto _match_end_4645237248;
					_case_end_4645234528:;
					_match_end_4645237248:;
				}
			}
			goto _match_end_4645238176;
			_case_end_4645232192:;
			_match_end_4645238176:;
		}
		if ((!(_131692a90_is_dead(_12717_ref)))) {
			return false;
		}
	}
	_iter_next_4645227616:;
	(_12513_i)++;
	goto _iter_begin_4645227616;
	_iter_end_4645227616:;
	return true;
}

inline jule::Bool _131692a90_is_all_references_are_dead_1(jule::Ref<_112572770_ReferenceStack> _12438_references) {
	jule::Int _12513_i = 0LL;
	_iter_begin_4645249920:;
	if (!(_12513_i < _12438_references->_method_len())) { goto _iter_end_4645249920; }
	{
		jule::Any _12717_ref = _12438_references->_method_at(_12513_i);
		{
			auto _match_expr{ _131692a90_current };
			if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4645253904; }
			_case_begin_4645253904:;
			{
				{
					auto _match_expr{ _12717_ref };
					if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4645255552; }
					_case_begin_4645255552:;
					{
						if ((_131692a90_current.operator jule::Ref<_1320e22c0_Var>()).alloc == (_12717_ref.operator jule::Ref<_1320e22c0_Var>()).alloc) {
							goto _iter_next_4645249920;
						}
					}
					goto _match_end_4645252864;
					_case_end_4645255552:;
					_match_end_4645252864:;
				}
			}
			goto _match_end_4645251952;
			_case_end_4645253904:;
			_match_end_4645251952:;
		}
		{
			auto _match_expr{ _131692a90_main_current };
			if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4645258544; }
			_case_begin_4645258544:;
			{
				{
					auto _match_expr{ _12717_ref };
					if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4645256704; }
					_case_begin_4645256704:;
					{
						if ((_131692a90_main_current.operator jule::Ref<_1320e22c0_Var>()).alloc == (_12717_ref.operator jule::Ref<_1320e22c0_Var>()).alloc) {
							goto _iter_next_4645249920;
						}
					}
					goto _match_end_4645259520;
					_case_end_4645256704:;
					_match_end_4645259520:;
				}
			}
			goto _match_end_4645260400;
			_case_end_4645258544:;
			_match_end_4645260400:;
		}
		if ((!(_131692a90_is_dead(_12717_ref)))) {
			return false;
		}
	}
	_iter_next_4645249920:;
	(_12513_i)++;
	goto _iter_begin_4645249920;
	_iter_end_4645249920:;
	return true;
}

inline jule::Bool _131692a90_is_all_references_are_dead_2(jule::Ref<_112572770_ReferenceStack> _12438_references) {
	jule::Int _12513_i = 0LL;
	_iter_begin_4645292896:;
	if (!(_12513_i < _12438_references->_method_len())) { goto _iter_end_4645292896; }
	{
		jule::Any _12717_ref = _12438_references->_method_at(_12513_i);
		{
			auto _match_expr{ _131692a90_current };
			if (!(_match_expr.type_is<jule::Ref<_11209db80_StructIns>>())) { goto _case_end_4645296944; }
			_case_begin_4645296944:;
			{
				{
					auto _match_expr{ _12717_ref };
					if (!(_match_expr.type_is<jule::Ref<_11209db80_StructIns>>())) { goto _case_end_4645298576; }
					_case_begin_4645298576:;
					{
						if ((_131692a90_current.operator jule::Ref<_11209db80_StructIns>()).alloc == (_12717_ref.operator jule::Ref<_11209db80_StructIns>()).alloc) {
							goto _iter_next_4645292896;
						}
					}
					goto _match_end_4645294928;
					_case_end_4645298576:;
					_match_end_4645294928:;
				}
			}
			goto _match_end_4645295584;
			_case_end_4645296944:;
			_match_end_4645295584:;
		}
		{
			auto _match_expr{ _131692a90_main_current };
			if (!(_match_expr.type_is<jule::Ref<_11209db80_StructIns>>())) { goto _case_end_4645301568; }
			_case_begin_4645301568:;
			{
				{
					auto _match_expr{ _12717_ref };
					if (!(_match_expr.type_is<jule::Ref<_11209db80_StructIns>>())) { goto _case_end_4645299824; }
					_case_begin_4645299824:;
					{
						if ((_131692a90_main_current.operator jule::Ref<_11209db80_StructIns>()).alloc == (_12717_ref.operator jule::Ref<_11209db80_StructIns>()).alloc) {
							goto _iter_next_4645292896;
						}
					}
					goto _match_end_4645297440;
					_case_end_4645299824:;
					_match_end_4645297440:;
				}
			}
			goto _match_end_4645303424;
			_case_end_4645301568:;
			_match_end_4645303424:;
		}
		if ((!(_131692a90_is_dead(_12717_ref)))) {
			return false;
		}
	}
	_iter_next_4645292896:;
	(_12513_i)++;
	goto _iter_begin_4645292896;
	_iter_end_4645292896:;
	return true;
}



inline jule::Bool _131692a90_is_fn_dead(jule::Ref<_112446fb0_FnIns> _15319_f) {
	if (_15319_f->_field_decl->_field_cpp_linked) {
		return false;
	}
	if (_15319_f->_field_decl->_method_is_entry_point() || _15319_f->_field_decl->_method_is_init()) {
		return (!(_15319_f->_field_decl->_field_statically));
	}
	if (jule::real(_15319_f->_field_owner)) {
		if (_131692a90_is_exist_ref(_131692a90_checking,jule::Any(_15319_f->_field_owner))) {
			return true;
		}
		return _131692a90_is_dead(jule::Any(_15319_f->_field_owner));
	}
	return _131692a90_is_all_references_are_dead_0(_15319_f->_field_references);
}



inline jule::Bool _131692a90_is_var_dead(jule::Ref<_1320e22c0_Var> _17920_v) {
	if (_17920_v->_field_constant) {
		return true;
	}
	if (_17920_v->_field_cpp_linked) {
		return false;
	}
	return _131692a90_is_all_references_are_dead_1(_17920_v->_field_references);
}



inline jule::Bool _131692a90_kind_is_dead(jule::Ref<_1217f7750_TypeKind> _19121_k) {
	{
		if (!((jule::real(_19121_k->_method_ref())))) { goto _case_end_4645245168; }
		_case_begin_4645245168:;
		{
			return _131692a90_kind_is_dead(_19121_k->_method_ref()->_field_elem);
		}
		goto _match_end_4645264960;
		_case_end_4645245168:;
		if (!((jule::real(_19121_k->_method_ptr())))) { goto _case_end_4645243600; }
		_case_begin_4645243600:;
		{
			return _131692a90_kind_is_dead(_19121_k->_method_ptr()->_field_elem);
		}
		goto _match_end_4645264960;
		_case_end_4645243600:;
		if (!((jule::real(_19121_k->_method_slc())))) { goto _case_end_4645243712; }
		_case_begin_4645243712:;
		{
			return _131692a90_kind_is_dead(_19121_k->_method_slc()->_field_elem);
		}
		goto _match_end_4645264960;
		_case_end_4645243712:;
		if (!((jule::real(_19121_k->_method_arr())))) { goto _case_end_4645243824; }
		_case_begin_4645243824:;
		{
			return _131692a90_kind_is_dead(_19121_k->_method_arr()->_field_elem);
		}
		goto _match_end_4645264960;
		_case_end_4645243824:;
		if (!((jule::real(_19121_k->_method_trt())))) { goto _case_end_4645265632; }
		_case_begin_4645265632:;
		{
			jule::Ref<_11209e2e0_Trait> _20617_t = _19121_k->_method_trt();
			if (_131692a90_is_dead(jule::Any(_20617_t))) {
				return true;
			}
		}
		goto _match_end_4645264960;
		_case_end_4645265632:;
		if (!((jule::real(_19121_k->_method_strct())))) { goto _case_end_4645265744; }
		_case_begin_4645265744:;
		{
			jule::Ref<_11209db80_StructIns> _21217_s = _19121_k->_method_strct();
			if (_131692a90_is_dead(jule::Any(_21217_s))) {
				return true;
			}
		}
		goto _match_end_4645264960;
		_case_end_4645265744:;
		_match_end_4645264960:;
	}
	return false;
}



inline jule::Bool _131692a90_is_any_generic_is_dead(jule::Slice<jule::Ref<_1217f7750_TypeKind>>& _22032_generics) {
	{
		auto __julec_range_expr = _22032_generics;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1217f7750_TypeKind> _131692a90_g = *__julec_range_begin;
			_iter_begin_4645281184:;
			{
				if (_131692a90_kind_is_dead(_131692a90_g)) {
					return true;
				}
			}
			_iter_next_4645281184:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _131692a90_g = *__julec_range_begin; goto _iter_begin_4645281184; }
			_iter_end_4645281184:;
		}
	}
	return false;
}



inline jule::Bool _131692a90_is_struct_dead(jule::Ref<_11209db80_StructIns> _22923_s) {
	return false;
	if (_22923_s->_field_decl->_field_cpp_linked) {
		return false;
	}
	return _131692a90_is_all_references_are_dead_2(_22923_s->_field_references);
}



inline jule::Bool _131692a90_is_trait_dead(jule::Ref<_11209e2e0_Trait> _24622_t) {
	return false;
	{
		auto __julec_range_expr = _24622_t->_field_implemented;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_Struct> _131692a90_imp = *__julec_range_begin;
			_iter_begin_4645304464:;
			{
				jule::Int _25117_i = 0LL;
				_iter_begin_4645310112:;
				if (!(_25117_i < _131692a90_imp->_field_instances.len())) { goto _iter_end_4645310112; }
				{
					jule::Ref<_11209db80_StructIns> _25321_ins = _131692a90_imp->_field_instances[static_cast<jule::Int>(_25117_i)];
					if ((!(_131692a90_is_struct_dead(_25321_ins)))) {
						return false;
					}
				}
				_iter_next_4645310112:;
				(_25117_i)++;
				goto _iter_begin_4645310112;
				_iter_end_4645310112:;
			}
			_iter_next_4645304464:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _131692a90_imp = *__julec_range_begin; goto _iter_begin_4645304464; }
			_iter_end_4645304464:;
		}
	}
	return true;
}



inline void _131692a90_eliminate_dead_functions(_11203c360_Vector_11& _26434_funcs) {
	jule::Int _26513_i = 0LL;
	_iter_begin_4645315504:;
	if (!(_26513_i < _26434_funcs._method_len())) { goto _iter_end_4645315504; }
	{
		jule::Ref<_112446fb0_Fn> _26717_f = _26434_funcs._method_at(_26513_i);
		jule::Int _26817_j = 0LL;
		_iter_begin_4645320608:;
		if (!(_26817_j < _26717_f->_field_instances.len())) { goto _iter_end_4645320608; }
		{
			jule::Ref<_112446fb0_FnIns> _27021_ins = _26717_f->_field_instances[static_cast<jule::Int>(_26817_j)];
			_131692a90_main_current=jule::Any(_27021_ins);
			if (_131692a90_is_fn_dead(_27021_ins)) {
				_131692a90_deads=append(_131692a90_deads,jule::Slice<jule::Any>({jule::Any(_27021_ins)}));
				_131692a90_remove_from_slice_0(_26717_f->_field_instances,_26817_j);
				goto _iter_next_4645320608;
			}
			_1220584c0_eliminate_dead_code_of_scope(_27021_ins->_field_scope);
			(_26817_j)++;
		}
		_iter_next_4645320608:;
		goto _iter_begin_4645320608;
		_iter_end_4645320608:;
		if (_26717_f->_field_instances.len() == 0LL) {
			_26434_funcs._method_remove_range(_26513_i,1LL);
			goto _iter_next_4645315504;
		}
		(_26513_i)++;
	}
	_iter_next_4645315504:;
	goto _iter_begin_4645315504;
	_iter_end_4645315504:;
}



inline void _131692a90_eliminate_dead_globals(jule::Ref<_11265fb90_Package>& _29032_pkg) {
	{
		auto __julec_range_expr = _29032_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _131692a90_f = *__julec_range_begin;
			_iter_begin_4645342864:;
			{
				jule::Int _29217_i = 0LL;
				_iter_begin_4645346272:;
				if (!(_29217_i < _131692a90_f->_field_vars._method_len())) { goto _iter_end_4645346272; }
				{
					jule::Ref<_1320e22c0_Var> _29421_v = _131692a90_f->_field_vars._method_at(_29217_i);
					_131692a90_main_current=jule::Any(_29421_v);
					if (_131692a90_is_var_dead(_29421_v)) {
						_131692a90_deads=append(_131692a90_deads,jule::Slice<jule::Any>({jule::Any(_29421_v)}));
						_131692a90_f->_field_vars._method_remove_range(_29217_i,1LL);
					} else {
						(_29217_i)++;
					}
				}
				_iter_next_4645346272:;
				goto _iter_begin_4645346272;
				_iter_end_4645346272:;
			}
			_iter_next_4645342864:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _131692a90_f = *__julec_range_begin; goto _iter_begin_4645342864; }
			_iter_end_4645342864:;
		}
	}
}



inline void _131692a90_eliminate_dead_functions_package(jule::Ref<_11265fb90_Package>& _30642_pkg) {
	{
		auto __julec_range_expr = _30642_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _131692a90_f = *__julec_range_begin;
			_iter_begin_4642069632:;
			{
				_131692a90_eliminate_dead_functions(_131692a90_f->_field_funcs);
			}
			_iter_next_4642069632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _131692a90_f = *__julec_range_begin; goto _iter_begin_4642069632; }
			_iter_end_4642069632:;
		}
	}
}



inline void _131692a90_eliminate_dead_structs(jule::Ref<_11265fb90_Package>& _31232_pkg) {
	{
		auto __julec_range_expr = _31232_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _131692a90_f = *__julec_range_begin;
			_iter_begin_4645360416:;
			{
				jule::Int _31417_i = 0LL;
				_iter_begin_4645361952:;
				if (!(_31417_i < _131692a90_f->_field_structs._method_len())) { goto _iter_end_4645361952; }
				{
					jule::Ref<_11209db80_Struct> _31621_s = _131692a90_f->_field_structs._method_at(_31417_i);
					jule::Int _31721_j = 0LL;
					_iter_begin_4645366720:;
					if (!(_31721_j < _31621_s->_field_instances.len())) { goto _iter_end_4645366720; }
					{
						jule::Ref<_11209db80_StructIns> _31925_ins = _31621_s->_field_instances[static_cast<jule::Int>(_31721_j)];
						_131692a90_main_current=jule::Any(_31925_ins);
						if (_131692a90_is_struct_dead(_31925_ins)) {
							_131692a90_deads=append(_131692a90_deads,jule::Slice<jule::Any>({jule::Any(_31925_ins)}));
							_131692a90_remove_from_slice_1(_31621_s->_field_instances,_31721_j);
							goto _iter_next_4645366720;
						}
						(_31721_j)++;
					}
					_iter_next_4645366720:;
					goto _iter_begin_4645366720;
					_iter_end_4645366720:;
					if (_31621_s->_field_instances.len() == 0LL) {
						_131692a90_f->_field_structs._method_remove_range(_31417_i,1LL);
						goto _iter_next_4645361952;
					}
					(_31417_i)++;
				}
				_iter_next_4645361952:;
				goto _iter_begin_4645361952;
				_iter_end_4645361952:;
			}
			_iter_next_4645360416:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _131692a90_f = *__julec_range_begin; goto _iter_begin_4645360416; }
			_iter_end_4645360416:;
		}
	}
}



inline void _131692a90_eliminate_dead_traits(jule::Ref<_11265fb90_Package>& _34931_pkg) {
	{
		auto __julec_range_expr = _34931_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _131692a90_f = *__julec_range_begin;
			_iter_begin_4645390032:;
			{
				jule::Int _35117_i = 0LL;
				_iter_begin_4645391696:;
				if (!(_35117_i < _131692a90_f->_field_traits._method_len())) { goto _iter_end_4645391696; }
				{
					jule::Ref<_11209e2e0_Trait> _35321_t = _131692a90_f->_field_traits._method_at(_35117_i);
					_131692a90_main_current=jule::Any(_35321_t);
					if (_131692a90_is_trait_dead(_35321_t)) {
						_131692a90_deads=append(_131692a90_deads,jule::Slice<jule::Any>({jule::Any(_35321_t)}));
						_131692a90_f->_field_traits._method_remove_range(_35117_i,1LL);
					} else {
						(_35117_i)++;
					}
				}
				_iter_next_4645391696:;
				goto _iter_begin_4645391696;
				_iter_end_4645391696:;
			}
			_iter_next_4645390032:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _131692a90_f = *__julec_range_begin; goto _iter_begin_4645390032; }
			_iter_end_4645390032:;
		}
	}
}



inline void _131692a90_catch_alive_init(jule::Ref<_11265fb90_Package>& _36526_pkg) {
	
	
	jule::Ref<_112446fb0_Fn> _36813_f = _36526_pkg->_method_find_fn(jule::Str("init", 4),false);
	if ((!(jule::real(_36813_f)))) {
		return;
	}
	jule::I64 _3739_n = _131692a90_deads.len();
	__JULE_DEFER({
		_131692a90_deads=_131692a90_deads.slice(0LL,static_cast<jule::Int>(_3739_n));
		_131692a90_checking=nullptr;
		_131692a90_current=jule::Any(nullptr);
	});
	jule::Ref<_112446fb0_FnIns> _38113_ins = _36813_f->_field_instances[static_cast<jule::Int>(0LL)];
	jule::Int _38213_i = 0LL;
	_iter_begin_4645406016:;
	if (!(_38213_i < _38113_ins->_field_refers->_method_len())) { goto _iter_end_4645406016; }
	{
		if ((!(_131692a90_is_dead(_38113_ins->_field_refers->_method_at(_38213_i))))) {
			_36813_f->_field_statically=true;
			return;
		}
	}
	_iter_next_4645406016:;
	(_38213_i)++;
	goto _iter_begin_4645406016;
	_iter_end_4645406016:;
}



inline void _131692a90_eliminate_dead_code_package(jule::Ref<_11265fb90_Package>& _39137_pkg) {
	_131692a90_deads=jule::Slice<jule::Any>::alloc(static_cast<jule::Int>(0LL),static_cast<jule::Int>(2000LL));
	_131692a90_catch_alive_init(_39137_pkg);
	_131692a90_eliminate_dead_globals(_39137_pkg);
	_131692a90_eliminate_dead_functions_package(_39137_pkg);
}



inline void _131692a90_eliminate_dead_code(jule::Ref<_122056550_IR> _40232_ir) {
	jule::I64 _40313_i = _40232_ir->_field_used.len() - 1LL;
	_iter_begin_4645425088:;
	if (!(_40313_i >= 0LL)) { goto _iter_end_4645425088; }
	{
		jule::Ref<_11265fb90_ImportInfo> _40517_u = _40232_ir->_field_used[static_cast<jule::Int>(_40313_i)];
		if ((!(_40517_u->_field_cpp_linked))) {
			_131692a90_eliminate_dead_code_package(_40517_u->_field_package);
		}
	}
	_iter_next_4645425088:;
	(_40313_i)--;
	goto _iter_begin_4645425088;
	_iter_end_4645425088:;
	_131692a90_eliminate_dead_code_package(_40232_ir->_field_main);
	_131692a90_deads=nullptr;
	_131692a90_checking=nullptr;
	_131692a90_current=jule::Any(nullptr);
}



inline void _1220584c0_eliminate_dead_code_of_scope(jule::Ref<_1126288e0_Scope> _7437_s) {
	jule::Ref<_1220584c0_ScopeDeadCode> _7513_sdc = jule::new_struct<_1220584c0_ScopeDeadCode>(new( std::nothrow ) _1220584c0_ScopeDeadCode(jule::Ref<_1220584c0_ScopeDeadCode>(),_7437_s,(&(_7437_s->_field_stmts)),jule::Int()));
	{
		_7513_sdc->_method_optimize_stmts();
	}
}



inline void _1219d92f0_push_opt_level(jule::Int _2623_level) {
	{
		auto _match_expr{ _2623_level };
		if (!((0LLU) == _match_expr)) { goto _case_end_4645481984; }
		_case_begin_4645481984:;
		{
			_1219d92f0_OPTIMIZATIONS=nullptr;
		}
		goto _match_end_4645480384;
		_case_end_4645481984:;
		if (!((1LLU) == _match_expr)) { goto _case_end_4645482096; }
		_case_begin_4645482096:;
		{
			_1219d92f0_OPTIMIZATIONS=append(_1219d92f0_OPTIMIZATIONS,jule::Slice<jule::Str>({jule::Str("--opt-copy", 10),jule::Str("--opt-deadcode", 14)}));
		}
		goto _match_end_4645480384;
		_case_end_4645482096:;
		_case_begin_4645480480:;
		{
			return;
		}
		goto _match_end_4645480384;
		_case_end_4645480480:;
		_match_end_4645480384:;
	}
}



inline jule::Bool _1219d92f0_is_opt_enabled(jule::Str _4223_opt) {
	{
		auto __julec_range_expr = _1219d92f0_OPTIMIZATIONS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1219d92f0_oopt = *__julec_range_begin;
			_iter_begin_4645482656:;
			{
				if (_4223_opt == _1219d92f0_oopt) {
					return true;
				}
			}
			_iter_next_4645482656:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1219d92f0_oopt = *__julec_range_begin; goto _iter_begin_4645482656; }
			_iter_end_4645482656:;
		}
	}
	return false;
}



inline jule::Str _121b31570_gen_if(jule::Ref<_1126288e0_If> _12715_i) {
	jule::Str _12813_obj = jule::Str("if (", 4);
	_12813_obj+=_1133950d0_gen_expr(_12715_i->_field_expr);
	_12813_obj+=jule::Str(") ", 2);
	_12813_obj+=_121b31570_gen_scope(_12715_i->_field_scope);
	return _12813_obj;
}



inline jule::Str _121b31570_gen_conditional(jule::Ref<_1126288e0_Conditional> _13524_c) {
	jule::Str _13613_obj = _121b31570_gen_if(_13524_c->_field_elifs[static_cast<jule::Int>(0LL)]);
	{
		auto __julec_range_expr = _13524_c->_field_elifs.slice(static_cast<jule::Int>(1LL));
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1126288e0_If> _121b31570_elif = *__julec_range_begin;
			_iter_begin_4645796656:;
			{
				_13613_obj+=jule::Str(" else ", 6);
				_13613_obj+=_121b31570_gen_if(_121b31570_elif);
			}
			_iter_next_4645796656:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _121b31570_elif = *__julec_range_begin; goto _iter_begin_4645796656; }
			_iter_end_4645796656:;
		}
	}
	if (jule::real(_13524_c->_field_default)) {
		_13613_obj+=jule::Str(" else ", 6);
		_13613_obj+=_121b31570_gen_scope(_13524_c->_field_default->_field_scope);
	}
	return _13613_obj;
}



inline jule::Str _121b31570_gen_inf_iter(jule::Ref<_1126288e0_InfIter> _15121_it) {
	jule::Str _1529_begin = _113468030_iter_begin_label_ident(((jule::Uintptr)((_15121_it).alloc)));
	jule::Str _1539_end = _113468030_iter_end_label_ident(((jule::Uintptr)((_15121_it).alloc)));
	jule::Str _1549_next = _113468030_iter_next_label_ident(((jule::Uintptr)((_15121_it).alloc)));
	jule::Str _1559_indent = _113497500_indent();
	jule::Str _15713_obj = _1529_begin + jule::Str(":;\n", 3);
	_15713_obj+=_1559_indent;
	_15713_obj+=_121b31570_gen_scope(_15121_it->_field_scope);
	_15713_obj+=jule::Str("\n", 1);
	_15713_obj+=_1559_indent;
	_15713_obj+=_1549_next + jule::Str(":;\n", 3);
	_15713_obj+=_1559_indent;
	_15713_obj+=(jule::Str("goto ", 5) + _1529_begin) + jule::Str(";\n", 2);
	_15713_obj+=_1559_indent;
	_15713_obj+=_1539_end + jule::Str(":;", 2);
	return _15713_obj;
}



inline jule::Str _121b31570_gen_while_iter(jule::Ref<_1126288e0_WhileIter> _17123_it) {
	jule::Str _1729_begin = _113468030_iter_begin_label_ident(((jule::Uintptr)((_17123_it).alloc)));
	jule::Str _1739_end = _113468030_iter_end_label_ident(((jule::Uintptr)((_17123_it).alloc)));
	jule::Str _1749_next = _113468030_iter_next_label_ident(((jule::Uintptr)((_17123_it).alloc)));
	jule::Str _1759_indent = _113497500_indent();
	jule::Str _17713_obj = _1729_begin + jule::Str(":;\n", 3);
	_17713_obj+=_1759_indent;
	if (_17123_it->_field_expr != nullptr) {
		_17713_obj+=jule::Str("if (!(", 6);
		_17713_obj+=_1133950d0_gen_expr(_17123_it->_field_expr);
		_17713_obj+=jule::Str(")) { goto ", 10);
		_17713_obj+=_1739_end;
		_17713_obj+=jule::Str("; }\n", 4);
		_17713_obj+=_1759_indent;
	}
	_17713_obj+=_121b31570_gen_scope(_17123_it->_field_scope);
	_17713_obj+=jule::Str("\n", 1);
	_17713_obj+=_1759_indent;
	_17713_obj+=_1749_next + jule::Str(":;\n", 3);
	_17713_obj+=_1759_indent;
	if (_17123_it->_field_next != nullptr) {
		_17713_obj+=_121b31570_gen_st(_17123_it->_field_next);
		_17713_obj+=jule::Str("\n", 1);
		_17713_obj+=_1759_indent;
	}
	_17713_obj+=(jule::Str("goto ", 5) + _1729_begin) + jule::Str(";\n", 2);
	_17713_obj+=_1759_indent;
	_17713_obj+=_1739_end + jule::Str(":;", 2);
	return _17713_obj;
}



inline jule::Trait<_121b31570_RangeSetter> _121b31570_get_range_setter(jule::Ref<_1126288e0_RangeIter> _20425_it) {
	{
		if (!((jule::real(_20425_it->_field_expr->_field_kind->_method_slc())))) { goto _case_end_4645840192; }
		_case_begin_4645840192:;
		{
			return jule::new_struct<_121b31570_IndexRangeSetter>(new( std::nothrow ) _121b31570_IndexRangeSetter());
		}
		goto _match_end_4645835408;
		_case_end_4645840192:;
		if (!((jule::real(_20425_it->_field_expr->_field_kind->_method_arr())))) { goto _case_end_4645842176; }
		_case_begin_4645842176:;
		{
			return jule::new_struct<_121b31570_IndexRangeSetter>(new( std::nothrow ) _121b31570_IndexRangeSetter());
		}
		goto _match_end_4645835408;
		_case_end_4645842176:;
		if (!((jule::real(_20425_it->_field_expr->_field_kind->_method_map())))) { goto _case_end_4645841888; }
		_case_begin_4645841888:;
		{
			return jule::new_struct<_121b31570_MapRangeSetter>(new( std::nothrow ) _121b31570_MapRangeSetter());
		}
		goto _match_end_4645835408;
		_case_end_4645841888:;
		_case_begin_4645830800:;
		{
			return jule::new_struct<_121b31570_IndexRangeSetter>(new( std::nothrow ) _121b31570_IndexRangeSetter());
		}
		goto _match_end_4645835408;
		_case_end_4645830800:;
		_match_end_4645835408:;
	}
}



inline jule::Str _121b31570_gen_range_iter(jule::Ref<_1126288e0_RangeIter> _21323_it) {
	_113497500_add_indent();
	jule::Str _2169_begin = _113468030_iter_begin_label_ident(((jule::Uintptr)((_21323_it).alloc)));
	jule::Str _2179_end = _113468030_iter_end_label_ident(((jule::Uintptr)((_21323_it).alloc)));
	jule::Str _2189_next = _113468030_iter_next_label_ident(((jule::Uintptr)((_21323_it).alloc)));
	jule::Str _21913__indent = _113497500_indent();
	jule::Trait<_121b31570_RangeSetter> _2209_setter = _121b31570_get_range_setter(_21323_it);
	jule::Str _22213_obj = jule::Str("{\n", 2);
	_22213_obj+=_21913__indent;
	if (_21323_it->_field_expr->_field_lvalue && _1219d92f0_is_opt_enabled(jule::Str("--opt-copy", 10))) {
		_22213_obj+=jule::Str("auto &__julec_range_expr = ", 27);
	} else {
		_22213_obj+=jule::Str("auto __julec_range_expr = ", 26);
	}
	_22213_obj+=_1133950d0_gen_expr(_21323_it->_field_expr->_field_model) + jule::Str(";\n", 2);
	_22213_obj+=_21913__indent;
	_22213_obj+=jule::Str("if (__julec_range_expr.begin() != __julec_range_expr.end()) {\n", 62);
	_113497500_add_indent();
	_21913__indent=_113497500_indent();
	_22213_obj+=_21913__indent;
	_22213_obj+=jule::Str("auto __julec_range_begin = __julec_range_expr.begin();\n", 55);
	_22213_obj+=_21913__indent;
	_22213_obj+=jule::Str("const auto __julec_range_end = __julec_range_expr.end();\n", 57);
	_22213_obj+=_21913__indent;
	_22213_obj+=_2209_setter.get()._method_setup_vars(_21323_it->_field_key_a,_21323_it->_field_key_b);
	_22213_obj+=_2169_begin + jule::Str(":;\n", 3);
	_22213_obj+=_21913__indent;
	_22213_obj+=_121b31570_gen_scope(_21323_it->_field_scope);
	_22213_obj+=jule::Str("\n", 1);
	_22213_obj+=_21913__indent;
	_22213_obj+=_2189_next + jule::Str(":;\n", 3);
	_22213_obj+=_21913__indent;
	_22213_obj+=_2209_setter.get()._method_next_steps(_21323_it->_field_key_a,_21323_it->_field_key_b,_2169_begin);
	_22213_obj+=_21913__indent;
	_22213_obj+=_2179_end + jule::Str(":;\n", 3);
	_113497500_done_indent();
	_21913__indent=_113497500_indent();
	_22213_obj+=_21913__indent;
	_22213_obj+=jule::Str("}\n", 2);
	_113497500_done_indent();
	_21913__indent=_113497500_indent();
	_22213_obj+=_21913__indent;
	_22213_obj+=jule::Str("}", 1);
	return _22213_obj;
}



inline jule::Str _121b31570_gen_cont(jule::Ref<_1126288e0_ContSt> _26813_c) {
	return (jule::Str("goto ", 5) + _113468030_iter_next_label_ident(_26813_c->_field_it)) + jule::Str(";", 1);
}



inline jule::Str _121b31570_gen_label(jule::Ref<_1126288e0_Label> _27214_l) {
	return _113468030_label_ident(_27214_l->_field_ident) + jule::Str(":;", 2);
}



inline jule::Str _121b31570_gen_goto(jule::Ref<_1126288e0_GotoSt> _27613_gt) {
	return (jule::Str("goto ", 5) + _113468030_label_ident(_27613_gt->_field_ident)) + jule::Str(";", 1);
}



inline jule::Str _121b31570_gen_postfix(jule::Ref<_1126288e0_Postfix> _28020_p) {
	return (((jule::Str("(", 1) + _1133950d0_gen_expr(_28020_p->_field_expr)) + jule::Str(")", 1)) + _28020_p->_field_op) + jule::Str(";", 1);
}



inline jule::Str _121b31570_gen_assign(jule::Ref<_1126288e0_Assign> _28419_a) {
	jule::Str _28513_obj = _1133950d0_gen_expr(_28419_a->_field_l);
	_28513_obj+=_28419_a->_field_op;
	_28513_obj+=_1133950d0_gen_expr(_28419_a->_field_r);
	_28513_obj+=jule::Str(";", 1);
	return _28513_obj;
}



inline jule::Str _121b31570_gen_multi_assign(jule::Ref<_1126288e0_MultiAssign> _29225_a) {
	jule::Str _29313_obj = jule::Str("std::tie(", 9);
	{
		auto __julec_range_expr = _29225_a->_field_l;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _121b31570_l = *__julec_range_begin;
			_iter_begin_4645896640:;
			{
				if (_121b31570_l == nullptr) {
					_29313_obj+=jule::Str("std::ignore,", 12);
				} else {
					_29313_obj+=_1133950d0_gen_expr(_121b31570_l) + jule::Str(",", 1);
				}
			}
			_iter_next_4645896640:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _121b31570_l = *__julec_range_begin; goto _iter_begin_4645896640; }
			_iter_end_4645896640:;
		}
	}
	_29313_obj=_29313_obj.slice(0LL,static_cast<jule::Int>(_29313_obj.len() - 1LL));
	_29313_obj+=jule::Str(") = ", 4);
	_29313_obj+=_1133950d0_gen_expr(_29225_a->_field_r);
	_29313_obj+=jule::Str(";", 1);
	return _29313_obj;
}



inline jule::Str _121b31570_gen_case(jule::Ref<_1126288e0_Match> _31017_m,jule::Ref<_1126288e0_Case> _31032_c) {
	
	jule::Str _3139_end = _113468030_case_end_label_ident(((jule::Uintptr)((_31032_c).alloc)));
	jule::Str _31413_obj = jule::Str("", 0);
	if (_31032_c->_field_exprs.len() > 0LL) {
		_31413_obj+=jule::Str("if (!(", 6);
		{
			auto __julec_range_expr = _31032_c->_field_exprs;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Int _121b31570_i = 0;
				jule::Any _121b31570_expr = *__julec_range_begin;
				_iter_begin_4645910400:;
				{
					{
						if (!(((!(_31017_m->_field_type_match))))) { goto _case_end_4645915952; }
						_case_begin_4645915952:;
						{
							_31413_obj+=jule::Str("(", 1);
							_31413_obj+=_1133950d0_gen_expr(_121b31570_expr);
							_31413_obj+=jule::Str(")", 1);
							if (_31017_m->_field_expr->_method_is_const()) {
								if ((!(_31017_m->_field_expr->_field_constant->_method_is_bool())) || (!(_31017_m->_field_expr->_field_constant->_method_read_bool()))) {
									_31413_obj+=jule::Str(" == ", 4);
									_31413_obj+=_1133950d0_gen_expr_model(_31017_m->_field_expr->_field_model);
								}
							} else {
								_31413_obj+=jule::Str(" == ", 4);
								_31413_obj+=jule::Str("_match_expr", 11);
							}
						}
						goto _match_end_4645913888;
						_case_end_4645915952:;
						_case_begin_4645914080:;
						{
							_31413_obj+=jule::Str("_match_expr", 11);
							_31413_obj+=(jule::Str(".type_is<", 9) + _1133950d0_gen_expr(_121b31570_expr)) + jule::Str(">()", 3);
						}
						goto _match_end_4645913888;
						_case_end_4645914080:;
						_match_end_4645913888:;
					}
					if ((_121b31570_i + 1LL) < _31032_c->_field_exprs.len()) {
						_31413_obj+=jule::Str(" || ", 4);
					}
				}
				_iter_next_4645910400:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { ++_121b31570_i; _121b31570_expr = *__julec_range_begin; goto _iter_begin_4645910400; }
				_iter_end_4645910400:;
			}
		}
		_31413_obj+=jule::Str(")) { goto ", 10);
		_31413_obj+=_3139_end + jule::Str("; }\n", 4);
	}
	if (_31032_c->_field_scope->_field_stmts._method_len() > 0LL) {
		_31413_obj+=_113497500_indent();
		_31413_obj+=_113468030_case_begin_label_ident(((jule::Uintptr)((_31032_c).alloc))) + jule::Str(":;\n", 3);
		_31413_obj+=_113497500_indent();
		_31413_obj+=_121b31570_gen_scope(_31032_c->_field_scope);
		_31413_obj+=jule::Str("\n", 1);
	}
	_31413_obj+=_113497500_indent();
	_31413_obj+=jule::Str("goto ", 5);
	_31413_obj+=_113468030_match_end_label_ident(((jule::Uintptr)((_31017_m).alloc))) + jule::Str(";", 1);
	_31413_obj+=jule::Str("\n", 1);
	_31413_obj+=_113497500_indent();
	_31413_obj+=_3139_end + jule::Str(":;", 2);
	return _31413_obj;
}



inline jule::Str _121b31570_gen_match(jule::Ref<_1126288e0_Match> _36518_m) {
	jule::Str _36613_obj = jule::Str("{\n", 2);
	_113497500_add_indent();
	_36613_obj+=_113497500_indent();
	if ((!(_36518_m->_field_expr->_method_is_const()))) {
		if (_36518_m->_field_expr->_field_lvalue && _1219d92f0_is_opt_enabled(jule::Str("--opt-copy", 10))) {
			_36613_obj+=jule::Str("auto &_match_expr{ ", 19);
		} else {
			_36613_obj+=jule::Str("auto _match_expr{ ", 18);
		}
		_36613_obj+=_1133950d0_gen_expr(_36518_m->_field_expr->_field_model);
		_36613_obj+=jule::Str(" };\n", 4);
		_36613_obj+=_113497500_indent();
	}
	if (_36518_m->_field_cases.len() > 0LL) {
		_36613_obj+=_121b31570_gen_case(_36518_m,_36518_m->_field_cases[static_cast<jule::Int>(0LL)]);
		{
			auto __julec_range_expr = _36518_m->_field_cases.slice(static_cast<jule::Int>(1LL));
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1126288e0_Case> _121b31570_c = *__julec_range_begin;
				_iter_begin_4645951904:;
				{
					_36613_obj+=jule::Str("\n", 1);
					_36613_obj+=_113497500_indent();
					_36613_obj+=_121b31570_gen_case(_36518_m,_121b31570_c);
				}
				_iter_next_4645951904:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _121b31570_c = *__julec_range_begin; goto _iter_begin_4645951904; }
				_iter_end_4645951904:;
			}
		}
	}
	if (jule::real(_36518_m->_field_default)) {
		_36613_obj+=jule::Str("\n", 1);
		_36613_obj+=_121b31570_gen_case(_36518_m,_36518_m->_field_default);
	}
	_36613_obj+=jule::Str("\n", 1);
	_36613_obj+=_113497500_indent();
	_36613_obj+=_113468030_match_end_label_ident(((jule::Uintptr)((_36518_m).alloc))) + jule::Str(":;", 2);
	_36613_obj+=jule::Str("\n", 1);
	_113497500_done_indent();
	_36613_obj+=_113497500_indent();
	_36613_obj+=jule::Str("}", 1);
	return _36613_obj;
}



inline jule::Str _121b31570_gen_fall_st(jule::Ref<_1126288e0_FallSt> _41116_f) {
	return (jule::Str("goto ", 5) + _113468030_case_begin_label_ident(_41116_f->_field_dest_case)) + jule::Str(";", 1);
}



inline jule::Str _121b31570_gen_break_st(jule::Ref<_1126288e0_BreakSt> _41517_b) {
	jule::Str _41613_obj = jule::Str("goto ", 5);
	if (_41517_b->_field_it != 0LL) {
		_41613_obj+=_113468030_iter_end_label_ident(_41517_b->_field_it);
	} else {
		_41613_obj+=_113468030_match_end_label_ident(_41517_b->_field_mtch);
	}
	_41613_obj+=jule::Str(";", 1);
	return _41613_obj;
}



inline jule::Str _121b31570_gen_ret_vars(jule::Ref<_1126288e0_RetSt> _42721_r) {
	jule::Str _42813_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _42721_r->_field_vars;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e22c0_Var> _121b31570_v = *__julec_range_begin;
			_iter_begin_4645972912:;
			{
				if (_111613f20_is_ignore_ident(_121b31570_v->_field_ident)) {
					_42813_obj+=_1133950d0_get_init_expr(_121b31570_v->_field_kind->_field_kind);
				} else {
					_42813_obj+=_113468030_var_out_ident(_121b31570_v);
				}
				_42813_obj+=jule::Str(",", 1);
			}
			_iter_next_4645972912:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _121b31570_v = *__julec_range_begin; goto _iter_begin_4645972912; }
			_iter_end_4645972912:;
		}
	}
	_42813_obj=_42813_obj.slice(0LL,static_cast<jule::Int>(_42813_obj.len() - 1LL));
	if (_42721_r->_field_vars.len() > 1LL) {
		_42813_obj=(jule::Str("return std::make_tuple(", 23) + _42813_obj) + jule::Str(")", 1);
	} else {
		_42813_obj=jule::Str("return ", 7) + _42813_obj;
	}
	_42813_obj+=jule::Str(";", 1);
	return _42813_obj;
}



inline jule::Str _121b31570_gen_ret_expr_tuple(jule::Ref<_1126288e0_RetSt> _45127_r) {
	{
		auto _match_expr{ _45127_r->_field_expr };
		if (!(_match_expr.type_is<jule::Ref<_112673500_FnCallExprModel>>())) { goto _case_end_4645984400; }
		_case_begin_4645984400:;
		{
			return (jule::Str("return ", 7) + _1133950d0_gen_expr_model(_45127_r->_field_expr)) + jule::Str(";", 1);
		}
		goto _match_end_4645980512;
		_case_end_4645984400:;
		_match_end_4645980512:;
	}
	jule::Slice<jule::Ref<_121dedce0_Data>> _45713_datas = _45127_r->_field_expr.operator jule::Ref<_112673500_TupleExprModel>()->_field_datas;
	jule::Str _45813_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _45127_r->_field_vars;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121b31570_i = 0;
			jule::Ref<_1320e22c0_Var> _121b31570_v = *__julec_range_begin;
			_iter_begin_4645990384:;
			{
				if ((!(_111613f20_is_ignore_ident(_121b31570_v->_field_ident)))) {
					jule::Str _46217_ident = _113468030_var_out_ident(_121b31570_v);
					_45813_obj+=((_46217_ident + jule::Str(" = ", 3)) + _1133950d0_gen_expr(_45713_datas[static_cast<jule::Int>(_121b31570_i)]->_field_model)) + jule::Str(";\n", 2);
					_45813_obj+=_113497500_indent();
				}
			}
			_iter_next_4645990384:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121b31570_i; _121b31570_v = *__julec_range_begin; goto _iter_begin_4645990384; }
			_iter_end_4645990384:;
		}
	}
	_45813_obj+=jule::Str("return std::make_tuple(", 23);
	{
		auto __julec_range_expr = _45713_datas;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _121b31570_i = 0;
			jule::Ref<_121dedce0_Data> _121b31570_d = *__julec_range_begin;
			_iter_begin_4645991856:;
			{
				jule::Ref<_1320e22c0_Var> _47017_v = _45127_r->_field_vars[static_cast<jule::Int>(_121b31570_i)];
				if (_111613f20_is_ignore_ident(_47017_v->_field_ident)) {
					_45813_obj+=_1133950d0_gen_expr(_121b31570_d->_field_model);
				} else {
					_45813_obj+=_113468030_var_out_ident(_47017_v);
				}
				_45813_obj+=jule::Str(",", 1);
			}
			_iter_next_4645991856:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_121b31570_i; _121b31570_d = *__julec_range_begin; goto _iter_begin_4645991856; }
			_iter_end_4645991856:;
		}
	}
	_45813_obj=_45813_obj.slice(0LL,static_cast<jule::Int>(_45813_obj.len() - 1LL));
	_45813_obj+=jule::Str(");", 2);
	return _45813_obj;
}



inline jule::Str _121b31570_gen_ret_expr(jule::Ref<_1126288e0_RetSt> _48521_r) {
	if (_48521_r->_field_vars.len() == 0LL) {
		return (jule::Str("return ", 7) + _1133950d0_gen_expr(_48521_r->_field_expr)) + jule::Str(";", 1);
	}
	if (_48521_r->_field_vars.len() > 1LL) {
		return _121b31570_gen_ret_expr_tuple(_48521_r);
	}
	if ((!(_111613f20_is_ignore_ident(_48521_r->_field_vars[static_cast<jule::Int>(0LL)]->_field_ident)))) {
		jule::Str _49513_ident = _113468030_var_out_ident(_48521_r->_field_vars[static_cast<jule::Int>(0LL)]);
		jule::Str _49617_obj = ((_49513_ident + jule::Str(" = ", 3)) + _1133950d0_gen_expr(_48521_r->_field_expr)) + jule::Str(";\n", 2);
		_49617_obj+=_113497500_indent();
		_49617_obj+=(jule::Str("return ", 7) + _49513_ident) + jule::Str(";", 1);
		return _49617_obj;
	}
	return (jule::Str("return ", 7) + _1133950d0_gen_expr(_48521_r->_field_expr)) + jule::Str(";", 1);
}



inline jule::Str _121b31570_gen_ret_st(jule::Ref<_1126288e0_RetSt> _50519_r) {
	if ((_50519_r->_field_expr == nullptr) && (_50519_r->_field_vars.len() == 0LL)) {
		return jule::Str("return;", 7);
	}
	if (_50519_r->_field_expr == nullptr) {
		return _121b31570_gen_ret_vars(_50519_r);
	}
	return _121b31570_gen_ret_expr(_50519_r);
}



inline jule::Str _121b31570_gen_ret_st_with_defaults(jule::Ref<_1217f7750_TypeKind> _51733_result) {
	jule::Str _51813_obj = jule::Str("return ", 7);
	if (jule::real(_51733_result->_method_tup())) {
		_51813_obj+=jule::Str("std::make_tuple(", 16);
		{
			auto __julec_range_expr = _51733_result->_method_tup()->_field_types;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_1217f7750_TypeKind> _121b31570_t = *__julec_range_begin;
				_iter_begin_4638995728:;
				{
					_51813_obj+=_1133950d0_get_init_expr(_121b31570_t);
					_51813_obj+=jule::Str(",", 1);
				}
				_iter_next_4638995728:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _121b31570_t = *__julec_range_begin; goto _iter_begin_4638995728; }
				_iter_end_4638995728:;
			}
		}
		_51813_obj=_51813_obj.slice(0LL,static_cast<jule::Int>(_51813_obj.len() - 1LL));
		_51813_obj+=jule::Str(")", 1);
	} else {
		_51813_obj+=_1133950d0_get_init_expr(_51733_result);
	}
	_51813_obj+=jule::Str(";", 1);
	return _51813_obj;
}



inline jule::Str _121b31570_gen_recover(jule::Ref<_1126288e0_Recover> _53420_r) {
	jule::Str _53513_obj = jule::Str("try ", 4);
	_53513_obj+=_121b31570_gen_scope(_53420_r->_field_scope);
	_53513_obj+=jule::Str(" catch(jule::Exception e) ", 26);
	if (_53420_r->_field_handler->_method_is_anon()) {
		_113497500_add_indent();
		_53513_obj+=jule::Str("{\n", 2);
		_53513_obj+=_113497500_indent();
		_53513_obj+=_1133950d0_gen_expr(_53420_r->_field_handler_expr);
		_53513_obj+=jule::Str("(jule::exception_to_error(e));", 30);
		if ((!(_53420_r->_field_scope_owner->_field_decl->_method_is_void()))) {
			_53513_obj+=jule::Str("\n", 1);
			_53513_obj+=_113497500_indent();
			_113497500_done_indent();
			_53513_obj+=_121b31570_gen_ret_st_with_defaults(_53420_r->_field_scope_owner->_field_result);
		} else {
			_113497500_done_indent();
		}
		_53513_obj+=jule::Str("\n", 1);
		_53513_obj+=_113497500_indent();
		_53513_obj+=jule::Str("}", 1);
	} else {
		_53513_obj+=jule::Str("{\n", 2);
		_113497500_add_indent();
		_53513_obj+=_113497500_indent();
		_53513_obj+=_1133950d0_gen_expr(_53420_r->_field_handler_expr);
		_53513_obj+=jule::Str("(jule::exception_to_error(e));\n", 31);
		_53513_obj+=_113497500_indent();
		if (_53420_r->_field_scope_owner->_field_decl->_method_is_void()) {
			_113497500_done_indent();
			_53513_obj+=jule::Str(" }", 2);
		} else {
			_53513_obj+=_121b31570_gen_ret_st_with_defaults(_53420_r->_field_scope_owner->_field_result);
			_53513_obj+=jule::Str("\n", 1);
			_113497500_done_indent();
			_53513_obj+=_113497500_indent();
			_53513_obj+=jule::Str("}", 1);
		}
	}
	return _53513_obj;
}



inline jule::Str _121b31570_gen_data_expr(jule::Ref<_121dedce0_Data> _58322_d) {
	return _1133950d0_gen_expr(_58322_d->_field_model) + jule::Str(";", 1);
}



inline jule::Str _121b31570_gen_st(jule::Any _58815_st) {
	{
		auto _match_expr{ _58815_st };
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_Scope>>())) { goto _case_end_4646066480; }
		_case_begin_4646066480:;
		{
			return _121b31570_gen_scope(_58815_st.operator jule::Ref<_1126288e0_Scope>());
		}
		goto _match_end_4646065952;
		_case_end_4646066480:;
		if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4646066592; }
		_case_begin_4646066592:;
		{
			return _113497500_gen_var(_58815_st.operator jule::Ref<_1320e22c0_Var>());
		}
		goto _match_end_4646065952;
		_case_end_4646066592:;
		if (!(_match_expr.type_is<jule::Ref<_121dedce0_Data>>())) { goto _case_end_4646066704; }
		_case_begin_4646066704:;
		{
			return _121b31570_gen_data_expr(_58815_st.operator jule::Ref<_121dedce0_Data>());
		}
		goto _match_end_4646065952;
		_case_end_4646066704:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_Conditional>>())) { goto _case_end_4646068208; }
		_case_begin_4646068208:;
		{
			return _121b31570_gen_conditional(_58815_st.operator jule::Ref<_1126288e0_Conditional>());
		}
		goto _match_end_4646065952;
		_case_end_4646068208:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_InfIter>>())) { goto _case_end_4646068320; }
		_case_begin_4646068320:;
		{
			return _121b31570_gen_inf_iter(_58815_st.operator jule::Ref<_1126288e0_InfIter>());
		}
		goto _match_end_4646065952;
		_case_end_4646068320:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_WhileIter>>())) { goto _case_end_4646068432; }
		_case_begin_4646068432:;
		{
			return _121b31570_gen_while_iter(_58815_st.operator jule::Ref<_1126288e0_WhileIter>());
		}
		goto _match_end_4646065952;
		_case_end_4646068432:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_RangeIter>>())) { goto _case_end_4646068544; }
		_case_begin_4646068544:;
		{
			return _121b31570_gen_range_iter(_58815_st.operator jule::Ref<_1126288e0_RangeIter>());
		}
		goto _match_end_4646065952;
		_case_end_4646068544:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_ContSt>>())) { goto _case_end_4646067472; }
		_case_begin_4646067472:;
		{
			return _121b31570_gen_cont(_58815_st.operator jule::Ref<_1126288e0_ContSt>());
		}
		goto _match_end_4646065952;
		_case_end_4646067472:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_Label>>())) { goto _case_end_4646067584; }
		_case_begin_4646067584:;
		{
			return _121b31570_gen_label(_58815_st.operator jule::Ref<_1126288e0_Label>());
		}
		goto _match_end_4646065952;
		_case_end_4646067584:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_GotoSt>>())) { goto _case_end_4646067696; }
		_case_begin_4646067696:;
		{
			return _121b31570_gen_goto(_58815_st.operator jule::Ref<_1126288e0_GotoSt>());
		}
		goto _match_end_4646065952;
		_case_end_4646067696:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_Postfix>>())) { goto _case_end_4646067808; }
		_case_begin_4646067808:;
		{
			return _121b31570_gen_postfix(_58815_st.operator jule::Ref<_1126288e0_Postfix>());
		}
		goto _match_end_4646065952;
		_case_end_4646067808:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_Assign>>())) { goto _case_end_4646067920; }
		_case_begin_4646067920:;
		{
			return _121b31570_gen_assign(_58815_st.operator jule::Ref<_1126288e0_Assign>());
		}
		goto _match_end_4646065952;
		_case_end_4646067920:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_MultiAssign>>())) { goto _case_end_4646068720; }
		_case_begin_4646068720:;
		{
			return _121b31570_gen_multi_assign(_58815_st.operator jule::Ref<_1126288e0_MultiAssign>());
		}
		goto _match_end_4646065952;
		_case_end_4646068720:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_Match>>())) { goto _case_end_4646068832; }
		_case_begin_4646068832:;
		{
			return _121b31570_gen_match(_58815_st.operator jule::Ref<_1126288e0_Match>());
		}
		goto _match_end_4646065952;
		_case_end_4646068832:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_FallSt>>())) { goto _case_end_4646068944; }
		_case_begin_4646068944:;
		{
			return _121b31570_gen_fall_st(_58815_st.operator jule::Ref<_1126288e0_FallSt>());
		}
		goto _match_end_4646065952;
		_case_end_4646068944:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_BreakSt>>())) { goto _case_end_4646069056; }
		_case_begin_4646069056:;
		{
			return _121b31570_gen_break_st(_58815_st.operator jule::Ref<_1126288e0_BreakSt>());
		}
		goto _match_end_4646065952;
		_case_end_4646069056:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_RetSt>>())) { goto _case_end_4646069168; }
		_case_begin_4646069168:;
		{
			return _121b31570_gen_ret_st(_58815_st.operator jule::Ref<_1126288e0_RetSt>());
		}
		goto _match_end_4646065952;
		_case_end_4646069168:;
		if (!(_match_expr.type_is<jule::Ref<_1126288e0_Recover>>())) { goto _case_end_4646069280; }
		_case_begin_4646069280:;
		{
			return _121b31570_gen_recover(_58815_st.operator jule::Ref<_1126288e0_Recover>());
		}
		goto _match_end_4646065952;
		_case_end_4646069280:;
		_case_begin_4646064384:;
		{
			return jule::Str("<unimplemented_stmt>", 20);
		}
		goto _match_end_4646065952;
		_case_end_4646064384:;
		_match_end_4646065952:;
	}
}



inline jule::Str _121b31570_gen_scope(jule::Ref<_1126288e0_Scope> _61318_s) {
	jule::Str _61413_obj = jule::Str("{\n", 2);
	_113497500_add_indent();
	jule::Int _61713_i = 0LL;
	_iter_begin_4646103952:;
	if (!(_61713_i < _61318_s->_field_stmts._method_len())) { goto _iter_end_4646103952; }
	{
		jule::Any _61917_st = _61318_s->_field_stmts._method_at(_61713_i);
		_61413_obj+=_113497500_indent();
		_61413_obj+=_121b31570_gen_st(_61917_st);
		_61413_obj+=jule::Str("\n", 1);
	}
	_iter_next_4646103952:;
	(_61713_i)++;
	goto _iter_begin_4646103952;
	_iter_end_4646103952:;
	_113497500_done_indent();
	_61413_obj+=_113497500_indent();
	_61413_obj+=jule::Str("}", 1);
	if (_61318_s->_field_deferred) {
		_61413_obj=(jule::Str("__JULE_DEFER(", 13) + _61413_obj) + jule::Str(");", 2);
	}
	return _61413_obj;
}



inline jule::Str _121b31570_gen_fn_scope(jule::Ref<_112446fb0_FnIns> _63721_f) {
	if (jule::real(_63721_f->_field_owner)) {
		return _121b31570_gen_method_scope(_63721_f);
	}
	return _121b31570_gen_scope(_63721_f->_field_scope);
}



inline jule::Str _121b31570_gen_method_scope(jule::Ref<_112446fb0_FnIns> _64625_f) {
	return _121b31570_gen_scope(_64625_f->_field_scope);
}



inline jule::Str _1133950d0_get_accessor(jule::Ref<_1217f7750_TypeKind> _7321_t) {
	if (jule::real(_7321_t->_method_ref()) || jule::real(_7321_t->_method_ptr())) {
		return jule::Str("->", 2);
	}
	return jule::Str(".", 1);
}



inline jule::Str _1133950d0_decompose_common_esq(jule::U8 _8025_b) {
	{
		auto _match_expr{ _8025_b };
		if (!(('\\') == _match_expr)) { goto _case_end_4646123280; }
		_case_begin_4646123280:;
		{
			return jule::Str("\\\\", 2);
		}
		goto _match_end_4646118112;
		_case_end_4646123280:;
		if (!(('\'') == _match_expr)) { goto _case_end_4646124176; }
		_case_begin_4646124176:;
		{
			return jule::Str("'", 1);
		}
		goto _match_end_4646118112;
		_case_end_4646124176:;
		if (!(('\"') == _match_expr)) { goto _case_end_4646124288; }
		_case_begin_4646124288:;
		{
			return jule::Str("\\\"", 2);
		}
		goto _match_end_4646118112;
		_case_end_4646124288:;
		if (!(('\a') == _match_expr)) { goto _case_end_4646124400; }
		_case_begin_4646124400:;
		{
			return jule::Str("\\a", 2);
		}
		goto _match_end_4646118112;
		_case_end_4646124400:;
		if (!(('\b') == _match_expr)) { goto _case_end_4646122672; }
		_case_begin_4646122672:;
		{
			return jule::Str("\\b", 2);
		}
		goto _match_end_4646118112;
		_case_end_4646122672:;
		if (!(('\f') == _match_expr)) { goto _case_end_4646122784; }
		_case_begin_4646122784:;
		{
			return jule::Str("\\f", 2);
		}
		goto _match_end_4646118112;
		_case_end_4646122784:;
		if (!(('\n') == _match_expr)) { goto _case_end_4646122896; }
		_case_begin_4646122896:;
		{
			return jule::Str("\\n", 2);
		}
		goto _match_end_4646118112;
		_case_end_4646122896:;
		if (!(('\r') == _match_expr)) { goto _case_end_4646123456; }
		_case_begin_4646123456:;
		{
			return jule::Str("\\r", 2);
		}
		goto _match_end_4646118112;
		_case_end_4646123456:;
		if (!(('\t') == _match_expr)) { goto _case_end_4646123568; }
		_case_begin_4646123568:;
		{
			return jule::Str("\\t", 2);
		}
		goto _match_end_4646118112;
		_case_end_4646123568:;
		if (!(('\v') == _match_expr)) { goto _case_end_4646123680; }
		_case_begin_4646123680:;
		{
			return jule::Str("\\v", 2);
		}
		goto _match_end_4646118112;
		_case_end_4646123680:;
		_case_begin_4646120784:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4646118112;
		_case_end_4646120784:;
		_match_end_4646118112:;
	}
}



inline jule::Str _1133950d0_sbtoa(jule::U8 _9610_b) {
	if (_9610_b == 0LL) {
		return jule::Str("\\x00", 4);
	}
	if (_9610_b <= 127LL) {
		jule::Str _10213_seq = _1133950d0_decompose_common_esq(_9610_b);
		if (_10213_seq != jule::Str("", 0)) {
			return _10213_seq;
		}
		if ((32LL <= _9610_b) && (_9610_b <= 126LL)) {
			return static_cast<jule::Str>(_9610_b);
		}
	}
	jule::Str _1129_seq = _121837910_fmt_uint(static_cast<jule::U64>(_9610_b),8LL);
	if (_1129_seq.len() == 2LL) {
		return jule::Str("\\0", 2) + _1129_seq;
	}
	return jule::Str("\\", 1) + _1129_seq;
}



inline jule::Str _1133950d0_get_str_model(jule::Ref<_1131530d0_Const> _11918_c) {
	jule::Str _1209_content = _11918_c->_method_read_str();
	jule::Slice<jule::U8> _1219_bytes = static_cast<jule::Slice<jule::U8>>(_1209_content);
	jule::Str _1229_len = _121837910_fmt_int(static_cast<jule::I64>(_1219_bytes.len()),10LL);
	jule::Str _12413_lit = jule::Str("", 0);
	{
		auto __julec_range_expr = _1219_bytes;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::U8 _1133950d0_b = *__julec_range_begin;
			_iter_begin_4646148624:;
			{
				_12413_lit+=_1133950d0_sbtoa(_1133950d0_b);
			}
			_iter_next_4646148624:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1133950d0_b = *__julec_range_begin; goto _iter_begin_4646148624; }
			_iter_end_4646148624:;
		}
	}
	return ((((_113468030_as_jt(jule::Str("str", 3)) + jule::Str("(\"", 2)) + _12413_lit) + jule::Str("\", ", 3)) + _1229_len) + jule::Str(")", 1);
}



inline jule::Str _1133950d0_get_bool_model(jule::Ref<_1131530d0_Const> _13219_c) {
	if (_13219_c->_method_read_bool()) {
		return jule::Str("true", 4);
	}
	return jule::Str("false", 5);
}



inline jule::Str _1133950d0_get_nil_model(void) {
	return jule::Str("nullptr", 7);
}



inline jule::Str _1133950d0_gen_float_special_cases(jule::F64 _14128_x) {
	{
		if (!((_12192b6b0_is_nan(_14128_x)))) { goto _case_end_4646157456; }
		_case_begin_4646157456:;
		{
			return jule::Str("NAN", 3);
		}
		goto _match_end_4646156144;
		_case_end_4646157456:;
		if (!((_12192b6b0_is_inf(_14128_x,1LL)))) { goto _case_end_4646157568; }
		_case_begin_4646157568:;
		{
			return jule::Str("INFINITY", 8);
		}
		goto _match_end_4646156144;
		_case_end_4646157568:;
		if (!((_12192b6b0_is_inf(_14128_x,-1LL)))) { goto _case_end_4646158464; }
		_case_begin_4646158464:;
		{
			return jule::Str("-INFINITY", 9);
		}
		goto _match_end_4646156144;
		_case_end_4646158464:;
		_case_begin_4646156304:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4646156144;
		_case_end_4646156304:;
		_match_end_4646156144:;
	}
}



inline jule::Str _1133950d0_get_f32_model(jule::Ref<_1131530d0_Const> _15018_c) {
	jule::F64 _1519_x = _15018_c->_method_as_f64();
	jule::Str _1549_f = _1133950d0_gen_float_special_cases(_1519_x);
	if (_1549_f != jule::Str("", 0)) {
		return _1549_f;
	}
	{
		if (!((_1519_x == 3.4028234663852886e+38))) { goto _case_end_4646164592; }
		_case_begin_4646164592:;
		{
			return jule::Str("jule::MAX_F32", 13);
		}
		goto _match_end_4646164448;
		_case_end_4646164592:;
		if (!((_1519_x == -3.4028234663852886e+38))) { goto _case_end_4646165440; }
		_case_begin_4646165440:;
		{
			return jule::Str("jule::MIN_F32", 13);
		}
		goto _match_end_4646164448;
		_case_end_4646165440:;
		_match_end_4646164448:;
	}
	return _131769b70_fmt_float(_1519_x,'e',-1LL,32LL) + jule::Str("f", 1);
}



inline jule::Str _1133950d0_get_f64_model(jule::Ref<_1131530d0_Const> _16718_c) {
	jule::F64 _1689_x = _16718_c->_method_as_f64();
	jule::Str _1719_f = _1133950d0_gen_float_special_cases(_1689_x);
	if (_1719_f != jule::Str("", 0)) {
		return _1719_f;
	}
	{
		if (!((_1689_x == jule::MAX_F64))) { goto _case_end_4646174112; }
		_case_begin_4646174112:;
		{
			return jule::Str("jule::MAX_F64", 13);
		}
		goto _match_end_4646173968;
		_case_end_4646174112:;
		if (!((_1689_x == jule::MIN_F64))) { goto _case_end_4646174912; }
		_case_begin_4646174912:;
		{
			return jule::Str("jule::MIN_F64", 13);
		}
		goto _match_end_4646173968;
		_case_end_4646174912:;
		_match_end_4646173968:;
	}
	return _131769b70_fmt_float(_1689_x,'e',-1LL,64LL);
}



inline jule::Str _1133950d0_get_float_model(jule::Ref<_121dedce0_Data> _18424_d) {
	{
		if (!((_18424_d->_field_kind->_method_prim()->_method_is_f32()))) { goto _case_end_4646182640; }
		_case_begin_4646182640:;
		{
			return _1133950d0_get_f32_model(_18424_d->_field_constant);
		}
		goto _match_end_4646176544;
		_case_end_4646182640:;
		_case_begin_4646177392:;
		{
			return _1133950d0_get_f64_model(_18424_d->_field_constant);
		}
		goto _match_end_4646176544;
		_case_end_4646177392:;
		_match_end_4646176544:;
	}
}



inline jule::Str _1133950d0_i64toa(jule::I64 _19111_x) {
	{
		if (!((_19111_x == jule::MAX_I64))) { goto _case_end_4646183232; }
		_case_begin_4646183232:;
		{
			return jule::Str("jule::MAX_I64", 13);
		}
		goto _match_end_4646184688;
		_case_end_4646183232:;
		if (!((_19111_x == jule::MIN_I64))) { goto _case_end_4646183344; }
		_case_begin_4646183344:;
		{
			return jule::Str("jule::MIN_I64", 13);
		}
		goto _match_end_4646184688;
		_case_end_4646183344:;
		_match_end_4646184688:;
	}
	jule::Str _1979_fmt = _121837910_fmt_int(_19111_x,10LL);
	if (_1316e9330_is_64bit(jule::Str("i386", 4))) {
		return _1979_fmt + jule::Str("LL", 2);
	}
	return _1979_fmt + jule::Str("L", 1);
}



inline jule::Str _1133950d0_get_i64_model(jule::Ref<_1131530d0_Const> _20418_c) {
	return _1133950d0_i64toa(static_cast<jule::I64>(_20418_c->_method_read_i64()));
}



inline jule::Str _1133950d0_get_u64_model(jule::Ref<_1131530d0_Const> _20818_c) {
	jule::U64 _2099_x = _20818_c->_method_read_u64();
	{
		if (!((_2099_x == jule::MAX_U64))) { goto _case_end_4646195168; }
		_case_begin_4646195168:;
		{
			return jule::Str("jule::MAX_U64", 13);
		}
		goto _match_end_4646194912;
		_case_end_4646195168:;
		_match_end_4646194912:;
	}
	jule::Str _2169_fmt = _121837910_fmt_uint(_2099_x,10LL);
	if (_1316e9330_is_64bit(jule::Str("i386", 4))) {
		return _2169_fmt + jule::Str("LLU", 3);
	}
	return _2169_fmt + jule::Str("LU", 2);
}



inline jule::Str _1133950d0_gen_const_expr(jule::Ref<_121dedce0_Data> _22323_d) {
	{
		if (!((_22323_d->_field_constant->_method_is_str()))) { goto _case_end_4646202624; }
		_case_begin_4646202624:;
		{
			return _1133950d0_get_str_model(_22323_d->_field_constant);
		}
		goto _match_end_4646199376;
		_case_end_4646202624:;
		if (!((_22323_d->_field_constant->_method_is_bool()))) { goto _case_end_4646203584; }
		_case_begin_4646203584:;
		{
			return _1133950d0_get_bool_model(_22323_d->_field_constant);
		}
		goto _match_end_4646199376;
		_case_end_4646203584:;
		if (!((_22323_d->_field_constant->_method_is_f64()))) { goto _case_end_4646203696; }
		_case_begin_4646203696:;
		{
			return _1133950d0_get_float_model(_22323_d);
		}
		goto _match_end_4646199376;
		_case_end_4646203696:;
		if (!((_22323_d->_field_constant->_method_is_i64()))) { goto _case_end_4646203808; }
		_case_begin_4646203808:;
		{
			return _1133950d0_get_i64_model(_22323_d->_field_constant);
		}
		goto _match_end_4646199376;
		_case_end_4646203808:;
		if (!((_22323_d->_field_constant->_method_is_u64()))) { goto _case_end_4646201744; }
		_case_begin_4646201744:;
		{
			return _1133950d0_get_u64_model(_22323_d->_field_constant);
		}
		goto _match_end_4646199376;
		_case_end_4646201744:;
		if (!((_22323_d->_field_constant->_method_is_nil()))) { goto _case_end_4646201856; }
		_case_begin_4646201856:;
		{
			return _1133950d0_get_nil_model();
		}
		goto _match_end_4646199376;
		_case_end_4646201856:;
		_case_begin_4646201168:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4646199376;
		_case_end_4646201168:;
		_match_end_4646199376:;
	}
}



inline jule::Str _1133950d0_gen_const_expr_model(jule::Ref<_1131530d0_Const> _23525_m) {
	{
		if (!((_23525_m->_method_is_str()))) { goto _case_end_4646216960; }
		_case_begin_4646216960:;
		{
			return _1133950d0_get_str_model(_23525_m);
		}
		goto _match_end_4646209328;
		_case_end_4646216960:;
		if (!((_23525_m->_method_is_bool()))) { goto _case_end_4646217920; }
		_case_begin_4646217920:;
		{
			return _1133950d0_get_bool_model(_23525_m);
		}
		goto _match_end_4646209328;
		_case_end_4646217920:;
		if (!((_23525_m->_method_is_f64()))) { goto _case_end_4646218032; }
		_case_begin_4646218032:;
		{
			return _1133950d0_get_f64_model(_23525_m);
		}
		goto _match_end_4646209328;
		_case_end_4646218032:;
		if (!((_23525_m->_method_is_i64()))) { goto _case_end_4646218144; }
		_case_begin_4646218144:;
		{
			return _1133950d0_get_i64_model(_23525_m);
		}
		goto _match_end_4646209328;
		_case_end_4646218144:;
		if (!((_23525_m->_method_is_u64()))) { goto _case_end_4646216320; }
		_case_begin_4646216320:;
		{
			return _1133950d0_get_u64_model(_23525_m);
		}
		goto _match_end_4646209328;
		_case_end_4646216320:;
		if (!((_23525_m->_method_is_nil()))) { goto _case_end_4646216432; }
		_case_begin_4646216432:;
		{
			return _1133950d0_get_nil_model();
		}
		goto _match_end_4646209328;
		_case_end_4646216432:;
		_case_begin_4646209504:;
		{
			return jule::Str("", 0);
		}
		goto _match_end_4646209328;
		_case_end_4646209504:;
		_match_end_4646209328:;
	}
}



inline jule::Str _1133950d0_gen_binop_expr_model(jule::Ref<_112673500_BinopExprModel> _24729_m) {
	{
		auto _match_expr{ _24729_m->_field_op };
		if (!((jule::Str("/", 1)) == _match_expr)) { goto _case_end_4646233088; }
		_case_begin_4646233088:;
		{
			jule::Str _25017_obj = jule::Str("jule::div(", 10);
			_25017_obj+=_1133950d0_gen_expr(_24729_m->_field_left);
			_25017_obj+=jule::Str(",", 1);
			_25017_obj+=_1133950d0_gen_expr(_24729_m->_field_right);
			_25017_obj+=jule::Str(")", 1);
			return _25017_obj;
		}
		goto _match_end_4646226896;
		_case_end_4646233088:;
		_case_begin_4646218832:;
		{
			jule::Str _25817_obj = jule::Str("(", 1);
			_25817_obj+=_1133950d0_gen_expr_model(_24729_m->_field_left);
			_25817_obj+=jule::Str(" ", 1);
			_25817_obj+=_24729_m->_field_op;
			_25817_obj+=jule::Str(" ", 1);
			_25817_obj+=_1133950d0_gen_expr_model(_24729_m->_field_right);
			_25817_obj+=jule::Str(")", 1);
			return _25817_obj;
		}
		goto _match_end_4646226896;
		_case_end_4646218832:;
		_match_end_4646226896:;
	}
}



inline jule::Str _1133950d0_gen_var_expr_model(jule::Ref<_1320e22c0_Var> _26927_m) {
	return _113468030_var_out_ident(_26927_m);
}



inline jule::Str _1133950d0_gen_struct_expr_model(jule::Ref<_11209db80_Struct> _27326_m) {
	return _113497140_gen_struct_kind(_27326_m);
}



inline jule::Str _1133950d0_gen_struct_ins_expr_model(jule::Ref<_11209db80_StructIns> _27734_m) {
	return _113497140_gen_struct_kind_ins(_27734_m);
}



inline jule::Str _1133950d0_gen_unary_expr_model(jule::Ref<_112673500_UnaryExprModel> _28129_m) {
	{
		auto _match_expr{ _28129_m->_field_op };
		if (!((jule::Str("^", 1)) == _match_expr)) { goto _case_end_4646262512; }
		_case_begin_4646262512:;
		{
			return (jule::Str("(~(", 3) + _1133950d0_gen_expr(_28129_m->_field_expr)) + jule::Str("))", 2);
		}
		goto _match_end_4646257488;
		_case_end_4646262512:;
		_case_begin_4646258272:;
		{
			return (((jule::Str("(", 1) + _28129_m->_field_op) + jule::Str("(", 1)) + _1133950d0_gen_expr(_28129_m->_field_expr)) + jule::Str("))", 2);
		}
		goto _match_end_4646257488;
		_case_end_4646258272:;
		_match_end_4646257488:;
	}
}



inline jule::Str _1133950d0_gen_get_ref_ptr_expr_model(jule::Ref<_112673500_GetRefPtrExprModel> _28835_m) {
	return (jule::Str("(", 1) + _1133950d0_gen_expr(_28835_m->_field_expr)) + jule::Str(").alloc", 7);
}



inline jule::Str _1133950d0_gen_cpp_struct_lit_expr_model(jule::Ref<_112673500_StructLitExprModel> _29238_m) {
	jule::Str _29313_obj = jule::Str("(", 1) + _113497140_gen_struct_kind_ins(_29238_m->_field_strct);
	_29313_obj+=jule::Str("){", 2);
	if (_29238_m->_field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto __julec_range_expr = _29238_m->_field_strct->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_11209db80_FieldIns> _1133950d0_f = *__julec_range_begin;
				_iter_begin_4646270976:;
				{
					if (_29238_m->_field_strct->_field_decl->_field_cpp_linked) {
						{
							auto __julec_range_expr = _29238_m->_field_args;
							if (__julec_range_expr.begin() != __julec_range_expr.end()) {
								auto __julec_range_begin = __julec_range_expr.begin();
								const auto __julec_range_end = __julec_range_expr.end();
								jule::Ref<_112673500_StructArgExprModel> _1133950d0_arg = *__julec_range_begin;
								_iter_begin_4646274032:;
								{
									if (_1133950d0_arg->_field_field == _1133950d0_f) {
										_29313_obj+=jule::Str(".", 1);
										_29313_obj+=_113468030_field_out_ident(_1133950d0_f->_field_decl);
										_29313_obj+=jule::Str("=", 1);
										_29313_obj+=_1133950d0_gen_expr(_1133950d0_arg->_field_expr) + jule::Str(",", 1);
										goto _iter_next_4646270976;
									}
								}
								_iter_next_4646274032:;
								++__julec_range_begin;
								if (__julec_range_begin != __julec_range_end) { _1133950d0_arg = *__julec_range_begin; goto _iter_begin_4646274032; }
								_iter_end_4646274032:;
							}
						}
						goto _iter_next_4646270976;
					}
					_29313_obj+=_113468030_field_out_ident(_1133950d0_f->_field_decl) + jule::Str(": ", 2);
					{
						auto __julec_range_expr = _29238_m->_field_args;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Ref<_112673500_StructArgExprModel> _1133950d0_arg = *__julec_range_begin;
							_iter_begin_4646272784:;
							{
								if (_1133950d0_arg->_field_field == _1133950d0_f) {
									_29313_obj+=_1133950d0_gen_expr(_1133950d0_arg->_field_expr) + jule::Str(",", 1);
									goto _iter_next_4646270976;
								}
							}
							_iter_next_4646272784:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _1133950d0_arg = *__julec_range_begin; goto _iter_begin_4646272784; }
							_iter_end_4646272784:;
						}
					}
					_29313_obj+=_1133950d0_get_init_expr(_1133950d0_f->_field_kind) + jule::Str(",", 1);
				}
				_iter_next_4646270976:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1133950d0_f = *__julec_range_begin; goto _iter_begin_4646270976; }
				_iter_end_4646270976:;
			}
		}
		_29313_obj=_29313_obj.slice(0LL,static_cast<jule::Int>(_29313_obj.len() - 1LL));
	}
	_29313_obj+=jule::Str("}", 1);
	return _29313_obj;
}



inline jule::Str _1133950d0_gen_struct_lit_expr_model(jule::Ref<_112673500_StructLitExprModel> _32634_m) {
	if (_32634_m->_field_strct->_field_decl->_field_cpp_linked) {
		return _1133950d0_gen_cpp_struct_lit_expr_model(_32634_m);
	}
	jule::Str _33113_obj = _113468030_struct_ins_out_ident(_32634_m->_field_strct);
	_33113_obj+=jule::Str("(", 1);
	if (_32634_m->_field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto __julec_range_expr = _32634_m->_field_strct->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_11209db80_FieldIns> _1133950d0_f = *__julec_range_begin;
				_iter_begin_4646297056:;
				{
					{
						auto __julec_range_expr = _32634_m->_field_args;
						if (__julec_range_expr.begin() != __julec_range_expr.end()) {
							auto __julec_range_begin = __julec_range_expr.begin();
							const auto __julec_range_end = __julec_range_expr.end();
							jule::Ref<_112673500_StructArgExprModel> _1133950d0_arg = *__julec_range_begin;
							_iter_begin_4646299104:;
							{
								if (_1133950d0_arg->_field_field == _1133950d0_f) {
									_33113_obj+=_1133950d0_gen_expr(_1133950d0_arg->_field_expr) + jule::Str(",", 1);
									goto _iter_next_4646297056;
								}
							}
							_iter_next_4646299104:;
							++__julec_range_begin;
							if (__julec_range_begin != __julec_range_end) { _1133950d0_arg = *__julec_range_begin; goto _iter_begin_4646299104; }
							_iter_end_4646299104:;
						}
					}
					_33113_obj+=_1133950d0_get_init_expr(_1133950d0_f->_field_kind) + jule::Str(",", 1);
				}
				_iter_next_4646297056:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1133950d0_f = *__julec_range_begin; goto _iter_begin_4646297056; }
				_iter_end_4646297056:;
			}
		}
		_33113_obj=_33113_obj.slice(0LL,static_cast<jule::Int>(_33113_obj.len() - 1LL));
	}
	_33113_obj+=jule::Str(")", 1);
	return _33113_obj;
}



inline jule::Str _1133950d0_gen_alloc_struct_lit_expr_model(jule::Ref<_112673500_AllocStructLitExprModel> _35040_m) {
	jule::Str _35113_obj = jule::Str("jule::new_struct<", 17);
	_35113_obj+=_113468030_struct_out_ident(_35040_m->_field_lit->_field_strct->_field_decl);
	_35113_obj+=jule::Str(">(new( std::nothrow ) ", 22);
	_35113_obj+=_1133950d0_gen_struct_lit_expr_model(_35040_m->_field_lit);
	_35113_obj+=jule::Str(")", 1);
	return _35113_obj;
}



inline jule::Str _1133950d0_gen_casting_expr_model(jule::Ref<_112673500_CastingExprModel> _35931_m) {
	jule::Str _36013_obj = jule::Str("", 0);
	{
		if (!((jule::real(_35931_m->_field_kind->_method_prim()) && _35931_m->_field_kind->_method_prim()->_method_is_any()))) { goto _case_end_4646317920; }
		_case_begin_4646317920:;
		{
			_36013_obj+=_113497140_gen_type_kind(_35931_m->_field_kind);
			_36013_obj+=jule::Str("(", 1);
			_36013_obj+=_1133950d0_gen_expr_model(_35931_m->_field_expr);
			_36013_obj+=jule::Str(")", 1);
		}
		goto _match_end_4646314528;
		_case_end_4646317920:;
		if (!((jule::real(_35931_m->_field_expr_kind->_method_ptr())) || (jule::real(_35931_m->_field_kind->_method_ptr())))) { goto _case_end_4646319664; }
		_case_begin_4646319664:;
		{
			_36013_obj+=jule::Str("((", 2);
			_36013_obj+=_113497140_gen_type_kind(_35931_m->_field_kind);
			_36013_obj+=jule::Str(")(", 2);
			_36013_obj+=_1133950d0_gen_expr(_35931_m->_field_expr);
			_36013_obj+=jule::Str("))", 2);
		}
		goto _match_end_4646314528;
		_case_end_4646319664:;
		if (!((jule::real(_35931_m->_field_expr_kind->_method_trt())) || (jule::real(_35931_m->_field_expr_kind->_method_prim()) && _35931_m->_field_expr_kind->_method_prim()->_method_is_any()))) { goto _case_end_4646316896; }
		_case_begin_4646316896:;
		{
			_36013_obj+=_1133950d0_gen_expr_model(_35931_m->_field_expr);
			_36013_obj+=_1133950d0_get_accessor(_35931_m->_field_expr_kind);
			_36013_obj+=jule::Str("operator ", 9);
			_36013_obj+=_113497140_gen_type_kind(_35931_m->_field_kind);
			_36013_obj+=jule::Str("()", 2);
		}
		goto _match_end_4646314528;
		_case_end_4646316896:;
		_case_begin_4646314784:;
		{
			_36013_obj+=jule::Str("static_cast<", 12);
			_36013_obj+=_113497140_gen_type_kind(_35931_m->_field_kind);
			_36013_obj+=jule::Str(">(", 2);
			_36013_obj+=_1133950d0_gen_expr(_35931_m->_field_expr);
			_36013_obj+=jule::Str(")", 1);
		}
		goto _match_end_4646314528;
		_case_end_4646314784:;
		_match_end_4646314528:;
	}
	return _36013_obj;
}



inline jule::Str _1133950d0_gen_arg_expr_models(jule::Slice<jule::Any> _39428_models) {
	if (_39428_models.len() == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _39913_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _39428_models;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Any _1133950d0_m = *__julec_range_begin;
			_iter_begin_4641917744:;
			{
				_39913_obj+=_1133950d0_gen_expr(_1133950d0_m) + jule::Str(",", 1);
			}
			_iter_next_4641917744:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1133950d0_m = *__julec_range_begin; goto _iter_begin_4641917744; }
			_iter_end_4641917744:;
		}
	}
	_39913_obj=_39913_obj.slice(0LL,static_cast<jule::Int>(_39913_obj.len() - 1LL));
	return _39913_obj;
}



inline jule::Str _1133950d0_gen_fn_call_expr_model(jule::Ref<_112673500_FnCallExprModel> _40731_m) {
	jule::Str _40813_obj = _1133950d0_gen_expr_model(_40731_m->_field_expr);
	if ((!(_40731_m->_field_func->_method_is_builtin()))) {
		if (_40731_m->_field_func->_field_decl->_field_cpp_linked && (_40731_m->_field_func->_field_generics.len() > 0LL)) {
			if ((!(_113497140_has_directive(_40731_m->_field_func->_field_decl->_field_directives,jule::Str("cdef", 4))))) {
				_40813_obj+=jule::Str("<", 1);
				{
					auto __julec_range_expr = _40731_m->_field_func->_field_generics;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1217f7750_TypeKind> _1133950d0_g = *__julec_range_begin;
						_iter_begin_4641927680:;
						{
							_40813_obj+=_113497140_gen_type_kind(_1133950d0_g) + jule::Str(",", 1);
						}
						_iter_next_4641927680:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _1133950d0_g = *__julec_range_begin; goto _iter_begin_4641927680; }
						_iter_end_4641927680:;
					}
				}
				_40813_obj=_40813_obj.slice(0LL,static_cast<jule::Int>(_40813_obj.len() - 1LL));
				_40813_obj+=jule::Str(">", 1);
			}
		}
	}
	_40813_obj+=jule::Str("(", 1);
	_40813_obj+=_1133950d0_gen_arg_expr_models(_40731_m->_field_args);
	_40813_obj+=jule::Str(")", 1);
	if (_40731_m->_field_is_co) {
		_40813_obj=(jule::Str("__JULE_CO(", 10) + _40813_obj) + jule::Str(")", 1);
	}
	return _40813_obj;
}



inline jule::Str _1133950d0_gen_slice_expr_model(jule::Ref<_112673500_SliceExprModel> _43229_m) {
	jule::Str _43313_obj = _113497140_as_slice_kind(_43229_m->_field_elem_kind);
	_43313_obj+=jule::Str("({", 2);
	_43313_obj+=_1133950d0_gen_arg_expr_models(_43229_m->_field_elems);
	_43313_obj+=jule::Str("})", 2);
	return _43313_obj;
}



inline jule::Str _1133950d0_gen_indexing_expr_model(jule::Ref<_112673500_IndexigExprModel> _44032_m) {
	jule::Str _44113_obj = _1133950d0_gen_expr_model(_44032_m->_field_expr);
	_44113_obj+=jule::Str("[", 1);
	_44113_obj+=_1133950d0_gen_expr(_44032_m->_field_index);
	_44113_obj+=jule::Str("]", 1);
	return _44113_obj;
}



inline jule::Str _1133950d0_gen_anon_fn_expr_model(jule::Ref<_112673500_AnonFnExprModel> _44831_m) {
	jule::Str _44913_obj = _113497140_gen_fn_kind(_44831_m->_field_func);
	_44913_obj+=jule::Str("([=]", 4);
	_44913_obj+=_113497500_gen_params_ins(_44831_m->_field_func->_field_params);
	_44913_obj+=jule::Str(" mutable -> ", 12);
	_44913_obj+=_113497500_gen_fn_ins_result(_44831_m->_field_func);
	_44913_obj+=jule::Str(" ", 1);
	_44913_obj+=_121b31570_gen_fn_scope(_44831_m->_field_func);
	_44913_obj+=jule::Str(")", 1);
	return _44913_obj;
}



inline jule::Str _1133950d0_gen_map_expr_model(jule::Ref<_112673500_MapExprModel> _46527_m) {
	jule::Str _46613_obj = _113468030_as_jt(jule::Str("map", 3));
	_46613_obj+=jule::Str("<", 1);
	_46613_obj+=_113497140_gen_type_kind(_46527_m->_field_key_kind);
	_46613_obj+=jule::Str(",", 1);
	_46613_obj+=_113497140_gen_type_kind(_46527_m->_field_val_kind);
	_46613_obj+=jule::Str(">({", 3);
	if (_46527_m->_field_entries.len() > 0LL) {
		{
			auto __julec_range_expr = _46527_m->_field_entries;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_112673500_KeyValPairExprModel> _1133950d0_pair = *__julec_range_begin;
				_iter_begin_4641961440:;
				{
					jule::Str _47421_pair_obj = jule::Str("{", 1);
					_47421_pair_obj+=_1133950d0_gen_expr(_1133950d0_pair->_field_key);
					_47421_pair_obj+=jule::Str(",", 1);
					_47421_pair_obj+=_1133950d0_gen_expr(_1133950d0_pair->_field_val);
					_47421_pair_obj+=jule::Str("}", 1);
					_46613_obj+=_47421_pair_obj;
					_46613_obj+=jule::Str(",", 1);
				}
				_iter_next_4641961440:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _1133950d0_pair = *__julec_range_begin; goto _iter_begin_4641961440; }
				_iter_end_4641961440:;
			}
		}
		_46613_obj=_46613_obj.slice(0LL,static_cast<jule::Int>(_46613_obj.len() - 1LL));
	}
	_46613_obj+=jule::Str("})", 2);
	return _46613_obj;
}



inline jule::Str _1133950d0_gen_slicing_expr_model(jule::Ref<_112673500_SlicingExprModel> _48831_m) {
	jule::Str _48913_obj = _1133950d0_gen_expr_model(_48831_m->_field_expr);
	_48913_obj+=jule::Str(".slice(", 7);
	_48913_obj+=_1133950d0_gen_expr(_48831_m->_field_left);
	if (_48831_m->_field_right != nullptr) {
		_48913_obj+=jule::Str(",", 1);
		_48913_obj+=_1133950d0_gen_expr(_48831_m->_field_right);
	}
	_48913_obj+=jule::Str(")", 1);
	return _48913_obj;
}



inline jule::Str _1133950d0_gen_trait_sub_ident_expr_model(jule::Ref<_112673500_TraitSubIdentExprModel> _50039_m) {
	jule::Str _50113_obj = _1133950d0_gen_expr_model(_50039_m->_field_expr);
	_50113_obj+=jule::Str(".get()._method_", 15);
	_50113_obj+=_50039_m->_field_ident;
	return _50113_obj;
}



inline jule::Str _1133950d0_gen_struct_sub_ident_expr_model(jule::Ref<_112673500_StructSubIdentExprModel> _50740_m) {
	jule::Str _50813_obj = _1133950d0_gen_expr_model(_50740_m->_field_expr);
	_50813_obj+=_1133950d0_get_accessor(_50740_m->_field_expr_kind);
	if (jule::real(_50740_m->_field_field)) {
		_50813_obj+=_113468030_field_out_ident(_50740_m->_field_field->_field_decl);
	} else {
		_50813_obj+=_113468030_fn_ins_out_ident(_50740_m->_field_method);
	}
	return _50813_obj;
}



inline jule::Str _1133950d0_gen_common_ident_expr_model(jule::Ref<_112673500_CommonIdentExprModel> _51832_m) {
	return _51832_m->_field_ident;
}



inline jule::Str _1133950d0_gen_common_sub_ident_expr_model(jule::Ref<_112673500_CommonSubIdentExprModel> _52240_m) {
	jule::Str _52313_obj = _1133950d0_gen_expr_model(_52240_m->_field_expr);
	_52313_obj+=_1133950d0_get_accessor(_52240_m->_field_expr_kind);
	_52313_obj+=_52240_m->_field_ident;
	return _52313_obj;
}



inline jule::Str _1133950d0_gen_array_expr_model(jule::Ref<_112673500_ArrayExprModel> _52929_m) {
	jule::Str _53013_obj = _113497140_gen_array_kind(_52929_m->_field_kind);
	_53013_obj+=jule::Str("({", 2);
	_53013_obj+=_1133950d0_gen_arg_expr_models(_52929_m->_field_elems);
	_53013_obj+=jule::Str("})", 2);
	return _53013_obj;
}



inline jule::Str _1133950d0_gen_fn_ins_expr_model(jule::Ref<_112446fb0_FnIns> _53726_m) {
	return _113468030_fn_ins_out_ident(_53726_m);
}



inline jule::Str _1133950d0_gen_tuple_expr_model(jule::Ref<_112673500_TupleExprModel> _54129_m) {
	jule::Str _54213_obj = jule::Str("std::make_tuple(", 16);
	{
		auto __julec_range_expr = _54129_m->_field_datas;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_121dedce0_Data> _1133950d0_d = *__julec_range_begin;
			_iter_begin_4641999840:;
			{
				_54213_obj+=_1133950d0_gen_expr(_1133950d0_d->_field_model) + jule::Str(",", 1);
			}
			_iter_next_4641999840:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1133950d0_d = *__julec_range_begin; goto _iter_begin_4641999840; }
			_iter_end_4641999840:;
		}
	}
	_54213_obj=_54213_obj.slice(0LL,static_cast<jule::Int>(_54213_obj.len() - 1LL));
	_54213_obj+=jule::Str(")", 1);
	return _54213_obj;
}



inline jule::Str _1133950d0_gen_builtin_new_call_expr_model(jule::Ref<_112673500_BuiltinNewCallExprModel> _55140_m) {
	jule::Str _55213_obj = jule::Str("jule::new_ref<", 14);
	_55213_obj+=_113497140_gen_type_kind(_55140_m->_field_kind);
	_55213_obj+=jule::Str(">(", 2);
	if (_55140_m->_field_init != nullptr) {
		_55213_obj+=_1133950d0_gen_expr(_55140_m->_field_init);
	}
	_55213_obj+=jule::Str(")", 1);
	return _55213_obj;
}



inline jule::Str _1133950d0_gen_builtin_out_call_expr_model(jule::Ref<_112673500_BuiltinOutCallExprModel> _56240_m) {
	jule::Str _56313_obj = jule::Str("jule::out(", 10);
	_56313_obj+=_1133950d0_gen_expr(_56240_m->_field_expr);
	_56313_obj+=jule::Str(")", 1);
	return _56313_obj;
}



inline jule::Str _1133950d0_gen_builtin_outln_call_expr_model(jule::Ref<_112673500_BuiltinOutlnCallExprModel> _56942_m) {
	jule::Str _57013_obj = jule::Str("jule::outln(", 12);
	_57013_obj+=_1133950d0_gen_expr(_56942_m->_field_expr);
	_57013_obj+=jule::Str(")", 1);
	return _57013_obj;
}



inline jule::Str _1133950d0_gen_builtin_real_call_expr_model(jule::Ref<_112673500_BuiltinRealCallExprModel> _57641_m) {
	jule::Str _57713_obj = jule::Str("jule::real(", 11);
	_57713_obj+=_1133950d0_gen_expr(_57641_m->_field_expr);
	_57713_obj+=jule::Str(")", 1);
	return _57713_obj;
}



inline jule::Str _1133950d0_gen_builtin_drop_call_expr_model(jule::Ref<_112673500_BuiltinDropCallExprModel> _58341_m) {
	jule::Str _58413_obj = jule::Str("jule::drop(", 11);
	_58413_obj+=_1133950d0_gen_expr(_58341_m->_field_expr);
	_58413_obj+=jule::Str(")", 1);
	return _58413_obj;
}



inline jule::Str _1133950d0_gen_builtin_panic_call_expr_model(jule::Ref<_112673500_BuiltinPanicCallExprModel> _59042_m) {
	jule::Str _59113_obj = jule::Str("jule::panic(", 12);
	_59113_obj+=_1133950d0_gen_expr(_59042_m->_field_expr);
	_59113_obj+=jule::Str(")", 1);
	return _59113_obj;
}



inline jule::Str _1133950d0_gen_builtin_make_call_expr_model(jule::Ref<_112673500_BuiltinMakeCallExprModel> _59741_m) {
	jule::Str _59813_obj = jule::Str("", 0);
	if (_59741_m->_field_len != nullptr) {
		_59813_obj+=_1133950d0_gen_expr(_59741_m->_field_len);
	} else {
		_59813_obj+=jule::Str("0", 1);
	}
	if (_59741_m->_field_cap != nullptr) {
		_59813_obj+=jule::Str(",", 1) + _1133950d0_gen_expr(_59741_m->_field_cap);
	}
	if (jule::real(_59741_m->_field_kind->_method_slc()->_field_elem->_method_enm())) {
		_59813_obj+=jule::Str(",", 1);
		_59813_obj+=_1133950d0_get_init_expr(_59741_m->_field_kind->_method_slc()->_field_elem);
		if (_59741_m->_field_cap != nullptr) {
			_59813_obj=(_113497140_gen_type_kind(_59741_m->_field_kind) + jule::Str("::alloc(", 8)) + _59813_obj;
		} else {
			_59813_obj=(_113497140_gen_type_kind(_59741_m->_field_kind) + jule::Str("::alloc_def(", 12)) + _59813_obj;
		}
	} else {
		_59813_obj=(_113497140_gen_type_kind(_59741_m->_field_kind) + jule::Str("::alloc(", 8)) + _59813_obj;
	}
	_59813_obj+=jule::Str(")", 1);
	return _59813_obj;
}



inline jule::Str _1133950d0_gen_builtin_clone_call_expr_model(jule::Ref<_112673500_BuiltinCloneCallExprModel> _62442_m) {
	jule::Str _62513_obj = jule::Str("jule::clone(", 12);
	_62513_obj+=_1133950d0_gen_expr_model(_62442_m->_field_expr);
	_62513_obj+=jule::Str(")", 1);
	return _62513_obj;
}



inline jule::Str _1133950d0_gen_sizeof_expr_model(jule::Ref<_112673500_SizeofExprModel> _63130_m) {
	jule::Str _63213_obj = jule::Str("sizeof(", 7);
	_63213_obj+=_1133950d0_gen_expr(_63130_m->_field_expr);
	_63213_obj+=jule::Str(")", 1);
	return _63213_obj;
}



inline jule::Str _1133950d0_gen_alignof_expr_model(jule::Ref<_112673500_AlignofExprModel> _63831_m) {
	jule::Str _63913_obj = jule::Str("alignof(", 8);
	_63913_obj+=_1133950d0_gen_expr(_63831_m->_field_expr);
	_63913_obj+=jule::Str(")", 1);
	return _63913_obj;
}



inline jule::Str _1133950d0_gen_rune_expr_model(jule::Ref<_112673500_RuneExprModel> _64524_m) {
	if (_64524_m->_field_code <= 127LL) {
		jule::Str _64717_b = _1133950d0_sbtoa(static_cast<jule::U8>(_64524_m->_field_code));
		if (_64717_b == jule::Str("'", 1)) {
			_64717_b=jule::Str("\\'", 2);
		}
		return (jule::Str("'", 1) + _64717_b) + jule::Str("'", 1);
	}
	return _1133950d0_i64toa(static_cast<jule::I64>(_64524_m->_field_code));
}



inline jule::Str _1133950d0_gen_builtin_error_trait_sub_ident_expr_model(jule::Ref<_112673500_BuiltinErrorTraitSubIdentExprModel> _65653_m) {
	jule::Str _65713_obj = _1133950d0_gen_expr_model(_65653_m->_field_expr);
	_65713_obj+=jule::Str(".get().", 7);
	_65713_obj+=_65653_m->_field_ident;
	return _65713_obj;
}



inline jule::Str _1133950d0_gen_explicit_deref_expr_model(jule::Ref<_112673500_ExplicitDerefExprModel> _66338_m) {
	jule::Str _66413_obj = _1133950d0_gen_expr_model(_66338_m->_field_expr);
	_66413_obj+=jule::Str(".get()", 6);
	return _66413_obj;
}



inline jule::Str _1133950d0_gen_struct_static_ident_expr_model(jule::Ref<_112673500_StructStaticIdentExprModel> _66943_m) {
	jule::Str _67013_obj = _113468030_struct_ins_out_ident(_66943_m->_field_structure);
	_67013_obj+=jule::Str("::", 2);
	_67013_obj+=_113468030_fn_ins_out_ident(_66943_m->_field_method);
	return _67013_obj;
}



inline jule::Str _1133950d0_gen_expr_model(jule::Any _67623_m) {
	{
		auto _match_expr{ _67623_m };
		if (!(_match_expr.type_is<jule::Ref<_1217f7750_TypeKind>>())) { goto _case_end_4655724544; }
		_case_begin_4655724544:;
		{
			return _113497140_gen_type_kind(_67623_m.operator jule::Ref<_1217f7750_TypeKind>());
		}
		goto _match_end_4655721728;
		_case_end_4655724544:;
		if (!(_match_expr.type_is<jule::Ref<_1131530d0_Const>>())) { goto _case_end_4655724656; }
		_case_begin_4655724656:;
		{
			return _1133950d0_gen_const_expr_model(_67623_m.operator jule::Ref<_1131530d0_Const>());
		}
		goto _match_end_4655721728;
		_case_end_4655724656:;
		if (!(_match_expr.type_is<jule::Ref<_1320e22c0_Var>>())) { goto _case_end_4655723280; }
		_case_begin_4655723280:;
		{
			return _1133950d0_gen_var_expr_model(_67623_m.operator jule::Ref<_1320e22c0_Var>());
		}
		goto _match_end_4655721728;
		_case_end_4655723280:;
		if (!(_match_expr.type_is<jule::Ref<_11209e2e0_Trait>>())) { goto _case_end_4655723392; }
		_case_begin_4655723392:;
		{
			return _113468030_trait_out_ident(_67623_m.operator jule::Ref<_11209e2e0_Trait>());
		}
		goto _match_end_4655721728;
		_case_end_4655723392:;
		if (!(_match_expr.type_is<jule::Ref<_11209db80_Struct>>())) { goto _case_end_4655722496; }
		_case_begin_4655722496:;
		{
			return _1133950d0_gen_struct_expr_model(_67623_m.operator jule::Ref<_11209db80_Struct>());
		}
		goto _match_end_4655721728;
		_case_end_4655722496:;
		if (!(_match_expr.type_is<jule::Ref<_11209db80_StructIns>>())) { goto _case_end_4655722608; }
		_case_begin_4655722608:;
		{
			return _1133950d0_gen_struct_ins_expr_model(_67623_m.operator jule::Ref<_11209db80_StructIns>());
		}
		goto _match_end_4655721728;
		_case_end_4655722608:;
		if (!(_match_expr.type_is<jule::Ref<_112446fb0_FnIns>>())) { goto _case_end_4655722720; }
		_case_begin_4655722720:;
		{
			return _1133950d0_gen_fn_ins_expr_model(_67623_m.operator jule::Ref<_112446fb0_FnIns>());
		}
		goto _match_end_4655721728;
		_case_end_4655722720:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_BinopExprModel>>())) { goto _case_end_4655724848; }
		_case_begin_4655724848:;
		{
			return _1133950d0_gen_binop_expr_model(_67623_m.operator jule::Ref<_112673500_BinopExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655724848:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_UnaryExprModel>>())) { goto _case_end_4655724960; }
		_case_begin_4655724960:;
		{
			return _1133950d0_gen_unary_expr_model(_67623_m.operator jule::Ref<_112673500_UnaryExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655724960:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_GetRefPtrExprModel>>())) { goto _case_end_4655725072; }
		_case_begin_4655725072:;
		{
			return _1133950d0_gen_get_ref_ptr_expr_model(_67623_m.operator jule::Ref<_112673500_GetRefPtrExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655725072:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_StructLitExprModel>>())) { goto _case_end_4655725184; }
		_case_begin_4655725184:;
		{
			return _1133950d0_gen_struct_lit_expr_model(_67623_m.operator jule::Ref<_112673500_StructLitExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655725184:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_AllocStructLitExprModel>>())) { goto _case_end_4655725296; }
		_case_begin_4655725296:;
		{
			return _1133950d0_gen_alloc_struct_lit_expr_model(_67623_m.operator jule::Ref<_112673500_AllocStructLitExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655725296:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_CastingExprModel>>())) { goto _case_end_4655725408; }
		_case_begin_4655725408:;
		{
			return _1133950d0_gen_casting_expr_model(_67623_m.operator jule::Ref<_112673500_CastingExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655725408:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_FnCallExprModel>>())) { goto _case_end_4655725520; }
		_case_begin_4655725520:;
		{
			return _1133950d0_gen_fn_call_expr_model(_67623_m.operator jule::Ref<_112673500_FnCallExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655725520:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_SliceExprModel>>())) { goto _case_end_4655725632; }
		_case_begin_4655725632:;
		{
			return _1133950d0_gen_slice_expr_model(_67623_m.operator jule::Ref<_112673500_SliceExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655725632:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_ArrayExprModel>>())) { goto _case_end_4655725744; }
		_case_begin_4655725744:;
		{
			return _1133950d0_gen_array_expr_model(_67623_m.operator jule::Ref<_112673500_ArrayExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655725744:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_IndexigExprModel>>())) { goto _case_end_4655725856; }
		_case_begin_4655725856:;
		{
			return _1133950d0_gen_indexing_expr_model(_67623_m.operator jule::Ref<_112673500_IndexigExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655725856:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_AnonFnExprModel>>())) { goto _case_end_4655725968; }
		_case_begin_4655725968:;
		{
			return _1133950d0_gen_anon_fn_expr_model(_67623_m.operator jule::Ref<_112673500_AnonFnExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655725968:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_MapExprModel>>())) { goto _case_end_4655726080; }
		_case_begin_4655726080:;
		{
			return _1133950d0_gen_map_expr_model(_67623_m.operator jule::Ref<_112673500_MapExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655726080:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_SlicingExprModel>>())) { goto _case_end_4655726192; }
		_case_begin_4655726192:;
		{
			return _1133950d0_gen_slicing_expr_model(_67623_m.operator jule::Ref<_112673500_SlicingExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655726192:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_TraitSubIdentExprModel>>())) { goto _case_end_4655726304; }
		_case_begin_4655726304:;
		{
			return _1133950d0_gen_trait_sub_ident_expr_model(_67623_m.operator jule::Ref<_112673500_TraitSubIdentExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655726304:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_StructSubIdentExprModel>>())) { goto _case_end_4655726416; }
		_case_begin_4655726416:;
		{
			return _1133950d0_gen_struct_sub_ident_expr_model(_67623_m.operator jule::Ref<_112673500_StructSubIdentExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655726416:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_CommonIdentExprModel>>())) { goto _case_end_4655726528; }
		_case_begin_4655726528:;
		{
			return _1133950d0_gen_common_ident_expr_model(_67623_m.operator jule::Ref<_112673500_CommonIdentExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655726528:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_CommonSubIdentExprModel>>())) { goto _case_end_4655726640; }
		_case_begin_4655726640:;
		{
			return _1133950d0_gen_common_sub_ident_expr_model(_67623_m.operator jule::Ref<_112673500_CommonSubIdentExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655726640:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_TupleExprModel>>())) { goto _case_end_4655726752; }
		_case_begin_4655726752:;
		{
			return _1133950d0_gen_tuple_expr_model(_67623_m.operator jule::Ref<_112673500_TupleExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655726752:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_BuiltinOutCallExprModel>>())) { goto _case_end_4655726864; }
		_case_begin_4655726864:;
		{
			return _1133950d0_gen_builtin_out_call_expr_model(_67623_m.operator jule::Ref<_112673500_BuiltinOutCallExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655726864:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_BuiltinOutlnCallExprModel>>())) { goto _case_end_4655726976; }
		_case_begin_4655726976:;
		{
			return _1133950d0_gen_builtin_outln_call_expr_model(_67623_m.operator jule::Ref<_112673500_BuiltinOutlnCallExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655726976:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_BuiltinNewCallExprModel>>())) { goto _case_end_4655727088; }
		_case_begin_4655727088:;
		{
			return _1133950d0_gen_builtin_new_call_expr_model(_67623_m.operator jule::Ref<_112673500_BuiltinNewCallExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655727088:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_BuiltinRealCallExprModel>>())) { goto _case_end_4655727216; }
		_case_begin_4655727216:;
		{
			return _1133950d0_gen_builtin_real_call_expr_model(_67623_m.operator jule::Ref<_112673500_BuiltinRealCallExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655727216:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_BuiltinDropCallExprModel>>())) { goto _case_end_4655727344; }
		_case_begin_4655727344:;
		{
			return _1133950d0_gen_builtin_drop_call_expr_model(_67623_m.operator jule::Ref<_112673500_BuiltinDropCallExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655727344:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_BuiltinPanicCallExprModel>>())) { goto _case_end_4655727472; }
		_case_begin_4655727472:;
		{
			return _1133950d0_gen_builtin_panic_call_expr_model(_67623_m.operator jule::Ref<_112673500_BuiltinPanicCallExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655727472:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_BuiltinMakeCallExprModel>>())) { goto _case_end_4655727600; }
		_case_begin_4655727600:;
		{
			return _1133950d0_gen_builtin_make_call_expr_model(_67623_m.operator jule::Ref<_112673500_BuiltinMakeCallExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655727600:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_BuiltinCloneCallExprModel>>())) { goto _case_end_4655727728; }
		_case_begin_4655727728:;
		{
			return _1133950d0_gen_builtin_clone_call_expr_model(_67623_m.operator jule::Ref<_112673500_BuiltinCloneCallExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655727728:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_SizeofExprModel>>())) { goto _case_end_4655727856; }
		_case_begin_4655727856:;
		{
			return _1133950d0_gen_sizeof_expr_model(_67623_m.operator jule::Ref<_112673500_SizeofExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655727856:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_AlignofExprModel>>())) { goto _case_end_4655727984; }
		_case_begin_4655727984:;
		{
			return _1133950d0_gen_alignof_expr_model(_67623_m.operator jule::Ref<_112673500_AlignofExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655727984:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_RuneExprModel>>())) { goto _case_end_4655728112; }
		_case_begin_4655728112:;
		{
			return _1133950d0_gen_rune_expr_model(_67623_m.operator jule::Ref<_112673500_RuneExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655728112:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_BuiltinErrorTraitSubIdentExprModel>>())) { goto _case_end_4655728240; }
		_case_begin_4655728240:;
		{
			return _1133950d0_gen_builtin_error_trait_sub_ident_expr_model(_67623_m.operator jule::Ref<_112673500_BuiltinErrorTraitSubIdentExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655728240:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_ExplicitDerefExprModel>>())) { goto _case_end_4655728368; }
		_case_begin_4655728368:;
		{
			return _1133950d0_gen_explicit_deref_expr_model(_67623_m.operator jule::Ref<_112673500_ExplicitDerefExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655728368:;
		if (!(_match_expr.type_is<jule::Ref<_112673500_StructStaticIdentExprModel>>())) { goto _case_end_4655728496; }
		_case_begin_4655728496:;
		{
			return _1133950d0_gen_struct_static_ident_expr_model(_67623_m.operator jule::Ref<_112673500_StructStaticIdentExprModel>());
		}
		goto _match_end_4655721728;
		_case_end_4655728496:;
		_case_begin_4655721856:;
		{
			return jule::Str("<unimplemented_expression_model>", 32);
		}
		goto _match_end_4655721728;
		_case_end_4655721856:;
		_match_end_4655721728:;
	}
}



inline jule::Str _1133950d0_gen_expr(jule::Any _80017_e) {
	jule::Str _80113_obj = _1133950d0_gen_expr_model(_80017_e);
	if (_80113_obj[static_cast<jule::Int>(0LL)] != '(') {
		return _80113_obj;
	}
	{
		auto _match_expr{ _80017_e };
		if (!(_match_expr.type_is<jule::Ref<_112673500_BinopExprModel>>())) { goto _case_end_4655800752; }
		_case_begin_4655800752:;
		{
			_80113_obj=_80113_obj.slice(static_cast<jule::Int>(1LL),static_cast<jule::Int>(_80113_obj.len() - 1LL));
		}
		goto _match_end_4655801440;
		_case_end_4655800752:;
		_match_end_4655801440:;
	}
	return _80113_obj;
}



inline jule::Str _1133950d0_gen_val(jule::Ref<_121dedce0_Value> _81316_v) {
	if (_81316_v->_field_data->_method_is_const()) {
		return _1133950d0_gen_const_expr(_81316_v->_field_data);
	}
	return _1133950d0_gen_expr(_81316_v->_field_data->_field_model);
}



inline jule::Str _1133950d0_get_init_expr(jule::Ref<_1217f7750_TypeKind> _82022_t) {
	if (jule::real(_82022_t->_method_ptr())) {
		return jule::Str("nullptr", 7);
	}
	jule::Ref<_11261eaf0_Enum> _82513_enm = _82022_t->_method_enm();
	if ((!(jule::real(_82513_enm)))) {
		return _113497140_gen_type_kind(_82022_t) + jule::Str("()", 2);
	}
	return _1133950d0_gen_val(_82513_enm->_field_items[static_cast<jule::Int>(0LL)]->_field_value);
}



inline jule::Str _113466390_get_derive_fn_decl_clone(jule::Ref<_11209db80_Struct> _729_s) {
	jule::Str _813_obj = _113497140_gen_struct_kind(_729_s);
	_813_obj+=jule::Str(" clone(void) const ", 19);
	return _813_obj;
}



inline jule::Str _113466390_get_derive_fn_def_clone(jule::Ref<_11209db80_Struct> _1328_s) {
	jule::Str _1413_obj = _113497140_gen_struct_kind(_1328_s);
	_1413_obj+=(jule::Str(" ", 1) + _1413_obj) + jule::Str("::clone(void) const ", 20);
	return _1413_obj;
}



inline jule::Str _113468030_as_ident(jule::Str _2513_ident) {
	return jule::Str("_", 1) + _2513_ident;
}



inline jule::Str _113468030_as_jt(jule::Str _2810_id) {
	jule::Slice<jule::I32> _2913_ident = static_cast<jule::Slice<jule::I32>>(_2810_id);
	if ((97LL <= _2913_ident[static_cast<jule::Int>(0LL)]) && (_2913_ident[static_cast<jule::Int>(0LL)] <= 122LL)) {
		_2913_ident[static_cast<jule::Int>(0LL)]-=32LL;
	}
	return jule::Str("jule::", 6) + static_cast<jule::Str>(_2913_ident);
}



inline jule::Str _113468030_get_ptr_as_ident(jule::Uintptr _3721_ptr) {
	jule::Str _3813_addr = jule::Str("_", 1) + _121837910_fmt_uint(static_cast<jule::U64>(_3721_ptr),16LL);
	{
		auto __julec_range_expr = _3813_addr;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _113468030_i = 0;
			jule::U8 _113468030_r = *__julec_range_begin;
			_iter_begin_4655834464:;
			{
				if (_113468030_r != '0') {
					_3813_addr=_3813_addr.slice(static_cast<jule::Int>(_113468030_i));
					goto _iter_end_4655834464;
				}
			}
			_iter_next_4655834464:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_113468030_i; _113468030_r = *__julec_range_begin; goto _iter_begin_4655834464; }
			_iter_end_4655834464:;
		}
	}
	return _3813_addr;
}



inline jule::Str _113468030_as_out_ident(jule::Str _5317_ident,jule::Uintptr _5329_ptr) {
	if (_5329_ptr != 0LL) {
		return (_113468030_get_ptr_as_ident(_5329_ptr) + jule::Str("_", 1)) + _5317_ident;
	}
	return _113468030_as_ident(_5317_ident);
}



inline jule::Str _113468030_as_local_ident(jule::Int _6619_row,jule::Int _6629_col,jule::Str _6643_ident) {
	_6643_ident=((_121837910_itoa(_6619_row) + _121837910_itoa(_6629_col)) + jule::Str("_", 1)) + _6643_ident;
	return _113468030_as_ident(_6643_ident);
}



inline jule::Str _113468030_fn_out_ident(jule::Ref<_112446fb0_Fn> _7217_f) {
	{
		if (!((_7217_f->_field_cpp_linked))) { goto _case_end_4655849856; }
		_case_begin_4655849856:;
		{
			return _7217_f->_field_ident;
		}
		goto _match_end_4655846560;
		_case_end_4655849856:;
		if (!((_7217_f->_field_ident == jule::Str("main", 4)))) { goto _case_end_4655852160; }
		_case_begin_4655852160:;
		{
			return jule::Str("entry_point", 11);
		}
		goto _match_end_4655846560;
		_case_end_4655852160:;
		if (!((_7217_f->_method_is_method()))) { goto _case_end_4655852272; }
		_case_begin_4655852272:;
		{
			if (_7217_f->_field_statically) {
				return jule::Str("_static_method_", 15) + _7217_f->_field_ident;
			}
			return jule::Str("_method_", 8) + _7217_f->_field_ident;
		}
		goto _match_end_4655846560;
		_case_end_4655852272:;
		_case_begin_4655847824:;
		{
			return _113468030_as_out_ident(_7217_f->_field_ident,static_cast<jule::Uintptr>(_7217_f->_field_token._field_file->_method_addr()));
		}
		goto _match_end_4655846560;
		_case_end_4655847824:;
		_match_end_4655846560:;
	}
}



inline jule::Str _113468030_fn_ins_out_ident(jule::Ref<_112446fb0_FnIns> _9221_f) {
	if (_9221_f->_method_is_builtin()) {
		return jule::Str("jule::", 6) + _9221_f->_field_decl->_field_ident;
	}
	if (_9221_f->_field_decl->_field_cpp_linked || (_9221_f->_field_generics.len() == 0LL)) {
		return _113468030_fn_out_ident(_9221_f->_field_decl);
	}
	{
		auto __julec_range_expr = _9221_f->_field_decl->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _113468030_i = 0;
			jule::Ref<_112446fb0_FnIns> _113468030_ins = *__julec_range_begin;
			_iter_begin_4655860992:;
			{
				jule::Ref<_1217f7750_TypeKind> _10213_kind = jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_113468030_ins));
				if (_9221_f->_method_equals(_10213_kind)) {
					return (_113468030_fn_out_ident(_9221_f->_field_decl) + jule::Str("_", 1)) + _121837910_itoa(_113468030_i);
				}
			}
			_iter_next_4655860992:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_113468030_i; _113468030_ins = *__julec_range_begin; goto _iter_begin_4655860992; }
			_iter_end_4655860992:;
		}
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _113468030_trait_out_ident(jule::Ref<_11209e2e0_Trait> _11220_t) {
	if (_11220_t->_method_is_builtin()) {
		return jule::Str("jule::", 6) + _11220_t->_field_ident;
	}
	return _113468030_as_out_ident(_11220_t->_field_ident,static_cast<jule::Uintptr>(_11220_t->_field_token._field_file->_method_addr()));
}



inline jule::Str _113468030_param_out_ident(jule::Ref<_112446fb0_Param> _12020_p) {
	if (_111613f20_is_anon_ident(_12020_p->_field_ident) || _111613f20_is_ignore_ident(_12020_p->_field_ident)) {
		return jule::Str("", 0);
	}
	return _113468030_as_local_ident(_12020_p->_field_token._field_row,_12020_p->_field_token._field_column,_12020_p->_field_ident);
}



inline jule::Str _113468030_struct_out_ident(jule::Ref<_11209db80_Struct> _12821_s) {
	if (_12821_s->_field_cpp_linked) {
		if (_113497140_has_directive(_12821_s->_field_directives,jule::Str("typedef", 7))) {
			return _12821_s->_field_ident;
		}
		return jule::Str("struct ", 7) + _12821_s->_field_ident;
	}
	return _113468030_as_out_ident(_12821_s->_field_ident,static_cast<jule::Uintptr>(_12821_s->_field_token._field_file->_method_addr()));
}



inline jule::Str _113468030_struct_ins_out_ident(jule::Ref<_11209db80_StructIns> _13925_s) {
	if (_13925_s->_field_decl->_field_cpp_linked || (_13925_s->_field_generics.len() == 0LL)) {
		return _113468030_struct_out_ident(_13925_s->_field_decl);
	}
	{
		auto __julec_range_expr = _13925_s->_field_decl->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _113468030_i = 0;
			jule::Ref<_11209db80_StructIns> _113468030_ins = *__julec_range_begin;
			_iter_begin_4655887408:;
			{
				jule::Ref<_1217f7750_TypeKind> _14513_kind = jule::new_struct<_1217f7750_TypeKind>(new( std::nothrow ) _1217f7750_TypeKind(jule::Bool(),jule::Str(),_113468030_ins));
				if (_13925_s->_method_equals(_14513_kind)) {
					return (_113468030_struct_out_ident(_13925_s->_field_decl) + jule::Str("_", 1)) + _121837910_itoa(_113468030_i);
				}
			}
			_iter_next_4655887408:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_113468030_i; _113468030_ins = *__julec_range_begin; goto _iter_begin_4655887408; }
			_iter_end_4655887408:;
		}
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _113468030_field_out_ident(jule::Ref<_11209db80_Field> _15520_f) {
	if (_15520_f->_field_owner->_field_cpp_linked) {
		return _15520_f->_field_ident;
	}
	return jule::Str("_field_", 7) + _15520_f->_field_ident;
}



inline jule::Str _113468030_var_out_ident(jule::Ref<_1320e22c0_Var> _16322_v) {
	{
		if (!((_16322_v->_field_cpp_linked))) { goto _case_end_4655903696; }
		_case_begin_4655903696:;
		{
			return _16322_v->_field_ident;
		}
		goto _match_end_4655895264;
		_case_end_4655903696:;
		if (!((_16322_v->_field_ident == jule::Str("self", 4)))) { goto _case_end_4655905552; }
		_case_begin_4655905552:;
		{
			if (jule::real(_16322_v->_field_kind->_field_kind->_method_ref())) {
				return jule::Str("this->self", 10);
			}
			return jule::Str("(*this)", 7);
		}
		goto _match_end_4655895264;
		_case_end_4655905552:;
		if (!((jule::real(_16322_v->_field_scope)))) { goto _case_end_4655905664; }
		_case_begin_4655905664:;
		{
			return _113468030_as_local_ident(_16322_v->_field_token._field_row,_16322_v->_field_token._field_column,_16322_v->_field_ident);
		}
		goto _match_end_4655895264;
		_case_end_4655905664:;
		_case_begin_4655895472:;
		{
			return _113468030_as_out_ident(_16322_v->_field_ident,static_cast<jule::Uintptr>(_16322_v->_field_token._field_file->_method_addr()));
		}
		goto _match_end_4655895264;
		_case_end_4655895472:;
		_match_end_4655895264:;
	}
}



inline jule::Str _113468030_iter_begin_label_ident(jule::Uintptr _18327_it) {
	return jule::Str("_iter_begin_", 12) + _121837910_itoa(static_cast<jule::Int>(_18327_it));
}



inline jule::Str _113468030_iter_end_label_ident(jule::Uintptr _18825_it) {
	return jule::Str("_iter_end_", 10) + _121837910_itoa(static_cast<jule::Int>(_18825_it));
}



inline jule::Str _113468030_iter_next_label_ident(jule::Uintptr _19326_it) {
	return jule::Str("_iter_next_", 11) + _121837910_itoa(static_cast<jule::Int>(_19326_it));
}



inline jule::Str _113468030_label_ident(jule::Str _19816_ident) {
	return jule::Str("_julec_label_", 13) + _19816_ident;
}



inline jule::Str _113468030_match_end_label_ident(jule::Uintptr _20326_m) {
	return jule::Str("_match_end_", 11) + _121837910_itoa(static_cast<jule::Int>(_20326_m));
}



inline jule::Str _113468030_case_begin_label_ident(jule::Uintptr _20827_c) {
	return jule::Str("_case_begin_", 12) + _121837910_itoa(static_cast<jule::Int>(_20827_c));
}



inline jule::Str _113468030_case_end_label_ident(jule::Uintptr _21325_c) {
	return jule::Str("_case_end_", 10) + _121837910_itoa(static_cast<jule::Int>(_21325_c));
}



inline jule::Bool _113497140_has_directive(jule::Slice<jule::Ref<_111612b20_Directive>> _2518_directives,jule::Str _2560_tag) {
	{
		auto __julec_range_expr = _2518_directives;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_111612b20_Directive> _113497140_dr = *__julec_range_begin;
			_iter_begin_4655924624:;
			{
				if (_113497140_dr->_field_tag == _2560_tag) {
					return true;
				}
			}
			_iter_next_4655924624:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497140_dr = *__julec_range_begin; goto _iter_begin_4655924624; }
			_iter_end_4655924624:;
		}
	}
	return false;
}



inline jule::Str _113497140_gen_prim_kind(jule::Ref<_1217f7750_Prim> _3518_p) {
	return _113468030_as_jt(_3518_p->_method_to_str());
}



inline jule::Str _113497140_gen_tuple_kind(jule::Ref<_1217f7750_Tuple> _4023_t) {
	jule::Str _4113_obj = jule::Str("std::tuple<", 11);
	{
		auto __julec_range_expr = _4023_t->_field_types;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1217f7750_TypeKind> _113497140_t = *__julec_range_begin;
			_iter_begin_4655934656:;
			{
				_4113_obj+=_113497140_gen_type_kind(_113497140_t) + jule::Str(",", 1);
			}
			_iter_next_4655934656:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497140_t = *__julec_range_begin; goto _iter_begin_4655934656; }
			_iter_end_4655934656:;
		}
	}
	_4113_obj=_4113_obj.slice(0LL,static_cast<jule::Int>(_4113_obj.len() - 1LL));
	return _4113_obj + jule::Str(">", 1);
}



inline jule::Str _113497140_as_ref_kind(jule::Str _5016_elem) {
	jule::Str _519_ref = _113468030_as_jt(jule::Str("ref", 3));
	return ((_519_ref + jule::Str("<", 1)) + _5016_elem) + jule::Str(">", 1);
}



inline jule::Str _113497140_gen_ref_kind(jule::Ref<_1217f7750_Ref> _5621_r) {
	jule::Str _579_elem = _113497140_gen_type_kind(_5621_r->_field_elem);
	return _113497140_as_ref_kind(_579_elem);
}



inline jule::Str _113497140_gen_ptr_kind(jule::Ref<_1217f7750_Ptr> _6221_p) {
	
	if (_6221_p->_method_is_unsafe()) {
		return jule::Str("void*", 5);
	}
	jule::Str _689_elem = _113497140_gen_type_kind(_6221_p->_field_elem);
	return _689_elem + jule::Str("*", 1);
}



inline jule::Str _113497140_gen_enum_kind(jule::Ref<_11261eaf0_Enum> _7322_e) {
	return _113497140_gen_type_kind(_7322_e->_field_kind->_field_kind);
}



inline jule::Str _113497140_as_slice_kind(jule::Ref<_1217f7750_TypeKind> _7722_elem) {
	jule::Str _789_elem_s = _113497140_gen_type_kind(_7722_elem);
	jule::Str _799_slc = _113468030_as_jt(jule::Str("slice", 5));
	return ((_799_slc + jule::Str("<", 1)) + _789_elem_s) + jule::Str(">", 1);
}



inline jule::Str _113497140_gen_slice_kind(jule::Ref<_1217f7750_Slc> _8423_s) {
	return _113497140_as_slice_kind(_8423_s->_field_elem);
}



inline jule::Str _113497140_gen_map_kind(jule::Ref<_1217f7750_Map> _8921_m) {
	jule::Str _909_key = _113497140_gen_type_kind(_8921_m->_field_key);
	jule::Str _919_val = _113497140_gen_type_kind(_8921_m->_field_val);
	jule::Str _929__map = _113468030_as_jt(jule::Str("map", 3));
	return ((((_929__map + jule::Str("<", 1)) + _909_key) + jule::Str(",", 1)) + _919_val) + jule::Str(">", 1);
}



inline jule::Str _113497140_gen_trait_kind_from_ident(jule::Str _9630_ident) {
	jule::Str _979_trt = _113468030_as_jt(jule::Str("trait", 5));
	return ((_979_trt + jule::Str("<", 1)) + _9630_ident) + jule::Str(">", 1);
}



inline jule::Str _113497140_gen_trait_kind(jule::Ref<_11209e2e0_Trait> _10219_t) {
	jule::Str _1039_ident = _113468030_trait_out_ident(_10219_t);
	return _113497140_gen_trait_kind_from_ident(_1039_ident);
}



inline jule::Str _113497140_gen_struct_kind(jule::Ref<_11209db80_Struct> _10820_s) {
	jule::Str _10913_rep = jule::Str("", 0);
	if (_10820_s->_field_cpp_linked && (!(_113497140_has_directive(_10820_s->_field_directives,jule::Str("typedef", 7))))) {
		_10913_rep+=jule::Str("struct ", 7);
	}
	_10913_rep+=_113468030_struct_out_ident(_10820_s);
	return _10913_rep;
}



inline jule::Str _113497140_gen_struct_kind_ins(jule::Ref<_11209db80_StructIns> _11928_s) {
	if (_11928_s->_field_decl->_field_cpp_linked) {
		jule::Str _12117_ident = _113468030_struct_ins_out_ident(_11928_s);
		if (_11928_s->_field_generics.len() > 0LL) {
			_12117_ident+=jule::Str("<", 1);
			{
				auto __julec_range_expr = _11928_s->_field_generics;
				if (__julec_range_expr.begin() != __julec_range_expr.end()) {
					auto __julec_range_begin = __julec_range_expr.begin();
					const auto __julec_range_end = __julec_range_expr.end();
					jule::Ref<_1217f7750_TypeKind> _113497140_g = *__julec_range_begin;
					_iter_begin_4655980880:;
					{
						_12117_ident+=_113497140_gen_type_kind(_113497140_g) + jule::Str(",", 1);
					}
					_iter_next_4655980880:;
					++__julec_range_begin;
					if (__julec_range_begin != __julec_range_end) { _113497140_g = *__julec_range_begin; goto _iter_begin_4655980880; }
					_iter_end_4655980880:;
				}
			}
			_12117_ident=_12117_ident.slice(0LL,static_cast<jule::Int>(_12117_ident.len() - 1LL));
			_12117_ident+=jule::Str(">", 1);
		}
		return _12117_ident;
	}
	return _113468030_struct_ins_out_ident(_11928_s);
}



inline jule::Str _113497140_gen_array_kind(jule::Ref<_1217f7750_Arr> _13623_a) {
	jule::Str _1379_arr = _113468030_as_jt(jule::Str("array", 5));
	jule::Str _1389_elem = _113497140_gen_type_kind(_13623_a->_field_elem);
	jule::Str _1399_size = _121837910_itoa(_13623_a->_field_n);
	return ((((_1379_arr + jule::Str("<", 1)) + _1389_elem) + jule::Str(",", 1)) + _1399_size) + jule::Str(">", 1);
}



inline jule::Str _113497140_gen_fn_anon_decl(jule::Ref<_112446fb0_FnIns> _14325_f) {
	jule::Str _14413_decl = _113497500_gen_fn_ins_result(_14325_f);
	_14413_decl+=jule::Str("(", 1);
	if (_14325_f->_field_params.len() > 0LL) {
		{
			auto __julec_range_expr = _14325_f->_field_params;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_112446fb0_ParamIns> _113497140_param = *__julec_range_begin;
				_iter_begin_4655995760:;
				{
					if (_113497140_param->_field_decl->_method_is_self()) {
						goto _iter_next_4655995760;
					}
					_14413_decl+=_113497500_gen_param_ins_prototype(_113497140_param);
					_14413_decl+=jule::Str(",", 1);
				}
				_iter_next_4655995760:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _113497140_param = *__julec_range_begin; goto _iter_begin_4655995760; }
				_iter_end_4655995760:;
			}
		}
		_14413_decl=_14413_decl.slice(0LL,static_cast<jule::Int>(_14413_decl.len() - 1LL));
	} else {
		_14413_decl+=jule::Str("void", 4);
	}
	_14413_decl+=jule::Str(")", 1);
	return _14413_decl;
}



inline jule::Str _113497140_gen_fn_kind(jule::Ref<_112446fb0_FnIns> _16620_f) {
	jule::Str _1679_fnc = _113468030_as_jt(jule::Str("fn", 2));
	jule::Str _1689_decl = _113497140_gen_fn_anon_decl(_16620_f);
	return ((_1679_fnc + jule::Str("<", 1)) + _1689_decl) + jule::Str(">", 1);
}



inline jule::Str _113497140_gen_type_kind(jule::Ref<_1217f7750_TypeKind> _17322_k) {
	{
		if (!((_17322_k->_field_cpp_linked))) { goto _case_end_4656012272; }
		_case_begin_4656012272:;
		{
			return _17322_k->_field_cpp_ident;
		}
		goto _match_end_4656008976;
		_case_end_4656012272:;
		if (!((jule::real(_17322_k->_method_prim())))) { goto _case_end_4656011296; }
		_case_begin_4656011296:;
		{
			return _113497140_gen_prim_kind(_17322_k->_method_prim());
		}
		goto _match_end_4656008976;
		_case_end_4656011296:;
		if (!((jule::real(_17322_k->_method_tup())))) { goto _case_end_4656011408; }
		_case_begin_4656011408:;
		{
			return _113497140_gen_tuple_kind(_17322_k->_method_tup());
		}
		goto _match_end_4656008976;
		_case_end_4656011408:;
		if (!((jule::real(_17322_k->_method_ref())))) { goto _case_end_4656011520; }
		_case_begin_4656011520:;
		{
			return _113497140_gen_ref_kind(_17322_k->_method_ref());
		}
		goto _match_end_4656008976;
		_case_end_4656011520:;
		if (!((jule::real(_17322_k->_method_ptr())))) { goto _case_end_4656013312; }
		_case_begin_4656013312:;
		{
			return _113497140_gen_ptr_kind(_17322_k->_method_ptr());
		}
		goto _match_end_4656008976;
		_case_end_4656013312:;
		if (!((jule::real(_17322_k->_method_enm())))) { goto _case_end_4656013424; }
		_case_begin_4656013424:;
		{
			return _113497140_gen_enum_kind(_17322_k->_method_enm());
		}
		goto _match_end_4656008976;
		_case_end_4656013424:;
		if (!((jule::real(_17322_k->_method_slc())))) { goto _case_end_4656013536; }
		_case_begin_4656013536:;
		{
			return _113497140_gen_slice_kind(_17322_k->_method_slc());
		}
		goto _match_end_4656008976;
		_case_end_4656013536:;
		if (!((jule::real(_17322_k->_method_map())))) { goto _case_end_4656013648; }
		_case_begin_4656013648:;
		{
			return _113497140_gen_map_kind(_17322_k->_method_map());
		}
		goto _match_end_4656008976;
		_case_end_4656013648:;
		if (!((jule::real(_17322_k->_method_trt())))) { goto _case_end_4656012400; }
		_case_begin_4656012400:;
		{
			return _113497140_gen_trait_kind(_17322_k->_method_trt());
		}
		goto _match_end_4656008976;
		_case_end_4656012400:;
		if (!((jule::real(_17322_k->_method_strct())))) { goto _case_end_4656012512; }
		_case_begin_4656012512:;
		{
			return _113497140_gen_struct_kind_ins(_17322_k->_method_strct());
		}
		goto _match_end_4656008976;
		_case_end_4656012512:;
		if (!((jule::real(_17322_k->_method_arr())))) { goto _case_end_4656012624; }
		_case_begin_4656012624:;
		{
			return _113497140_gen_array_kind(_17322_k->_method_arr());
		}
		goto _match_end_4656008976;
		_case_end_4656012624:;
		if (!((jule::real(_17322_k->_method_fnc())))) { goto _case_end_4656012736; }
		_case_begin_4656012736:;
		{
			return _113497140_gen_fn_kind(_17322_k->_method_fnc());
		}
		goto _match_end_4656008976;
		_case_end_4656012736:;
		_case_begin_4656009120:;
		{
			return jule::Str("[<unimplemented_type_kind>]", 27);
		}
		goto _match_end_4656008976;
		_case_end_4656009120:;
		_match_end_4656008976:;
	}
}



inline void _113497500_add_indent(void) {
	(_113497500_INDENT)++;
}



inline void _113497500_done_indent(void) {
	(_113497500_INDENT)--;
}



inline jule::Str _113497500_indent(void) {
	
	if (_113497500_INDENT == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _7913_s = jule::Str("", 0);
	jule::Int _8013_i = 0LL;
	_iter_begin_4656016256:;
	if (!(_8013_i < _113497500_INDENT)) { goto _iter_end_4656016256; }
	{
		_7913_s+=jule::Str("\t", 1);
	}
	_iter_next_4656016256:;
	(_8013_i)++;
	goto _iter_begin_4656016256;
	_iter_end_4656016256:;
	return _7913_s;
}



inline jule::Bool _113497500_is_cpp_header_file(jule::Str _8723_path) {
	jule::Int _889_offset = _8723_path.rfind(jule::Str(".", 1));
	if (_889_offset == -1LL) {
		return false;
	}
	return _1316301d0_is_valid_header_ext(_8723_path.slice(static_cast<jule::Int>(_889_offset)));
}



inline jule::Str _113497500_gen_links(jule::Ref<_122056550_IR> _9618_ir) {
	jule::Str _9713_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _9618_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _113497500_pkg = *__julec_range_begin;
			_iter_begin_4656050544:;
			{
				{
					if (!(((!(_113497500_pkg->_field_cpp_linked))))) { goto _case_end_4656052512; }
					_case_begin_4656052512:;
					{
						goto _iter_next_4656050544;
					}
					goto _match_end_4656052272;
					_case_end_4656052512:;
					if (!((_1316301d0_is_std_header_path(_113497500_pkg->_field_path)))) { goto _case_end_4656052624; }
					_case_begin_4656052624:;
					{
						_9713_obj+=(jule::Str("#include ", 9) + _113497500_pkg->_field_path) + jule::Str("\n", 1);
					}
					goto _match_end_4656052272;
					_case_end_4656052624:;
					_match_end_4656052272:;
				}
			}
			_iter_next_4656050544:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_pkg = *__julec_range_begin; goto _iter_begin_4656050544; }
			_iter_end_4656050544:;
		}
	}
	{
		auto __julec_range_expr = _9618_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _113497500_pkg = *__julec_range_begin;
			_iter_begin_4656055584:;
			{
				{
					if (!(((!(_113497500_pkg->_field_cpp_linked))))) { goto _case_end_4656058832; }
					_case_begin_4656058832:;
					{
						goto _iter_next_4656055584;
					}
					goto _match_end_4656058592;
					_case_end_4656058832:;
					if (!((_113497500_is_cpp_header_file(_113497500_pkg->_field_path)))) { goto _case_end_4656058944; }
					_case_begin_4656058944:;
					{
						_9713_obj+=(jule::Str("#include \"", 10) + _113497500_pkg->_field_path) + jule::Str("\"\n", 2);
					}
					goto _match_end_4656058592;
					_case_end_4656058944:;
					_match_end_4656058592:;
				}
			}
			_iter_next_4656055584:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_pkg = *__julec_range_begin; goto _iter_begin_4656055584; }
			_iter_end_4656055584:;
		}
	}
	return _9713_obj;
}



inline jule::Str _113497500_gen_fn_result(jule::Ref<_112446fb0_Fn> _12122_f) {
	if (_12122_f->_method_is_void()) {
		return jule::Str("void", 4);
	}
	return _113497140_gen_type_kind(_12122_f->_field_result->_field_kind->_field_kind);
}



inline jule::Str _113497500_gen_fn_ins_result(jule::Ref<_112446fb0_FnIns> _12926_f) {
	if (_12926_f->_field_decl->_method_is_void()) {
		return jule::Str("void", 4);
	}
	return _113497140_gen_type_kind(_12926_f->_field_result);
}



inline jule::Str _113497500_gen_param_prototype(jule::Ref<_112446fb0_Param> _13728_p) {
	jule::Str _13813_obj = jule::Str("", 0);
	if (_13728_p->_field_variadic) {
		_13813_obj+=_113468030_as_jt(jule::Str("slice", 5));
		_13813_obj+=jule::Str("<", 1);
		_13813_obj+=_113497140_gen_type_kind(_13728_p->_field_kind->_field_kind);
		_13813_obj+=jule::Str(">", 1);
	} else {
		_13813_obj+=_113497140_gen_type_kind(_13728_p->_field_kind->_field_kind);
	}
	return _13813_obj;
}



inline jule::Str _113497500_gen_param_ins(jule::Ref<_112446fb0_ParamIns> _15122_p) {
	jule::Str _15213_obj = _113497500_gen_param_ins_prototype(_15122_p);
	_15213_obj+=jule::Str(" ", 1);
	_15213_obj+=_113468030_param_out_ident(_15122_p->_field_decl);
	return _15213_obj;
}



inline jule::Str _113497500_gen_param_ins_prototype(jule::Ref<_112446fb0_ParamIns> _15932_p) {
	jule::Str _16013_obj = jule::Str("", 0);
	if (_15932_p->_field_decl->_field_variadic) {
		_16013_obj+=_113468030_as_jt(jule::Str("slice", 5));
		_16013_obj+=jule::Str("<", 1);
		_16013_obj+=_113497140_gen_type_kind(_15932_p->_field_kind);
		_16013_obj+=jule::Str(">", 1);
	} else {
		_16013_obj+=_113497140_gen_type_kind(_15932_p->_field_kind);
	}
	if (_15932_p->_field_decl->_field_reference) {
		_16013_obj+=jule::Str("&", 1);
	}
	return _16013_obj;
}



inline jule::Str _113497500_gen_param(jule::Ref<_112446fb0_Param> _17818_p) {
	jule::Str _17913_obj = _113497500_gen_param_prototype(_17818_p);
	if (((_17818_p->_field_ident != jule::Str("", 0)) && (!(_111613f20_is_ignore_ident(_17818_p->_field_ident)))) && (!(_111613f20_is_anon_ident(_17818_p->_field_ident)))) {
		_17913_obj+=jule::Str(" ", 1) + _113468030_param_out_ident(_17818_p);
	}
	return _17913_obj;
}



inline jule::Str _113497500_gen_params(jule::Slice<jule::Ref<_112446fb0_Param>> _18719_params) {
	{
		if (!((_18719_params.len() == 0LL))) { goto _case_end_4656096544; }
		_case_begin_4656096544:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4656096256;
		_case_end_4656096544:;
		if (!(((_18719_params.len() == 1LL) && _18719_params[static_cast<jule::Int>(0LL)]->_method_is_self()))) { goto _case_end_4656096656; }
		_case_begin_4656096656:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4656096256;
		_case_end_4656096656:;
		_match_end_4656096256:;
	}
	jule::Str _19613_obj = jule::Str("(", 1);
	{
		auto __julec_range_expr = _18719_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_Param> _113497500_p = *__julec_range_begin;
			_iter_begin_4656101328:;
			{
				if ((!(_113497500_p->_method_is_self()))) {
					_19613_obj+=_113497500_gen_param(_113497500_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4656101328:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_p = *__julec_range_begin; goto _iter_begin_4656101328; }
			_iter_end_4656101328:;
		}
	}
	_19613_obj=_19613_obj.slice(0LL,static_cast<jule::Int>(_19613_obj.len() - 1LL));
	return _19613_obj + jule::Str(")", 1);
}



inline jule::Str _113497500_gen_params_ins(jule::Slice<jule::Ref<_112446fb0_ParamIns>> _20823_params) {
	{
		if (!((_20823_params.len() == 0LL))) { goto _case_end_4656108560; }
		_case_begin_4656108560:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4656103104;
		_case_end_4656108560:;
		if (!(((_20823_params.len() == 1LL) && _20823_params[static_cast<jule::Int>(0LL)]->_field_decl->_method_is_self()))) { goto _case_end_4656108672; }
		_case_begin_4656108672:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4656103104;
		_case_end_4656108672:;
		_match_end_4656103104:;
	}
	jule::Str _21713_obj = jule::Str("(", 1);
	{
		auto __julec_range_expr = _20823_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_ParamIns> _113497500_p = *__julec_range_begin;
			_iter_begin_4656113856:;
			{
				if ((!(_113497500_p->_field_decl->_method_is_self()))) {
					_21713_obj+=_113497500_gen_param_ins(_113497500_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4656113856:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_p = *__julec_range_begin; goto _iter_begin_4656113856; }
			_iter_end_4656113856:;
		}
	}
	_21713_obj=_21713_obj.slice(0LL,static_cast<jule::Int>(_21713_obj.len() - 1LL));
	return _21713_obj + jule::Str(")", 1);
}



inline jule::Str _113497500_gen_params_prototypes(jule::Slice<jule::Ref<_112446fb0_ParamIns>> _23030_params) {
	{
		if (!((_23030_params.len() == 0LL))) { goto _case_end_4656121008; }
		_case_begin_4656121008:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4656120752;
		_case_end_4656121008:;
		if (!(((_23030_params.len() == 1LL) && _23030_params[static_cast<jule::Int>(0LL)]->_field_decl->_method_is_self()))) { goto _case_end_4656121120; }
		_case_begin_4656121120:;
		{
			return jule::Str("(void)", 6);
		}
		goto _match_end_4656120752;
		_case_end_4656121120:;
		_match_end_4656120752:;
	}
	jule::Str _23913_obj = jule::Str("(", 1);
	{
		auto __julec_range_expr = _23030_params;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_ParamIns> _113497500_p = *__julec_range_begin;
			_iter_begin_4656126704:;
			{
				if ((!(_113497500_p->_field_decl->_method_is_self()))) {
					_23913_obj+=_113497500_gen_param_ins_prototype(_113497500_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4656126704:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_p = *__julec_range_begin; goto _iter_begin_4656126704; }
			_iter_end_4656126704:;
		}
	}
	_23913_obj=_23913_obj.slice(0LL,static_cast<jule::Int>(_23913_obj.len() - 1LL));
	return _23913_obj + jule::Str(")", 1);
}



inline jule::Str _113497500_gen_trait(jule::Ref<_11209e2e0_Trait> _25218_t) {
	
	jule::Str _2549_outid = _113468030_trait_out_ident(_25218_t);
	jule::Str _25613_obj = jule::Str("struct ", 7);
	_25613_obj+=_2549_outid;
	_25613_obj+=jule::Str(" {\n", 3);
	_25613_obj+=jule::Str("\t", 1);
	_25613_obj+=jule::Str("virtual ~", 9);
	_25613_obj+=_2549_outid;
	_25613_obj+=jule::Str("(void) {}\n\n", 11);
	{
		auto __julec_range_expr = _25218_t->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_Fn> _113497500_f = *__julec_range_begin;
			_iter_begin_4656139824:;
			{
				_25613_obj+=jule::Str("\t", 1);
				_25613_obj+=jule::Str("virtual ", 8);
				_25613_obj+=_113497500_gen_fn_result(_113497500_f);
				_25613_obj+=jule::Str(" _method_", 9);
				_25613_obj+=_113497500_f->_field_ident;
				_25613_obj+=_113497500_gen_params(_113497500_f->_field_params);
				_25613_obj+=jule::Str(" {", 2);
				if ((!(_113497500_f->_method_is_void()))) {
					_25613_obj+=jule::Str(" return {}; ", 12);
				}
				_25613_obj+=jule::Str("}\n", 2);
			}
			_iter_next_4656139824:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_f = *__julec_range_begin; goto _iter_begin_4656139824; }
			_iter_end_4656139824:;
		}
	}
	_25613_obj+=jule::Str("};", 2);
	return _25613_obj;
}



inline jule::Str _113497500_gen_traits_tbl(jule::Ref<_1320e2330_SymbolTable> _28123_tbl) {
	jule::Str _28213_obj = jule::Str("", 0);
	jule::Int _28313_i = 0LL;
	_iter_begin_4656150640:;
	if (!(_28313_i < _28123_tbl->_field_traits._method_len())) { goto _iter_end_4656150640; }
	{
		jule::Ref<_11209e2e0_Trait> _28517_t = _28123_tbl->_field_traits._method_at(_28313_i);
		_28213_obj+=_113497500_gen_trait(_28517_t) + jule::Str("\n\n", 2);
	}
	_iter_next_4656150640:;
	(_28313_i)++;
	goto _iter_begin_4656150640;
	_iter_end_4656150640:;
	return _28213_obj;
}



inline jule::Str _113497500_gen_traits_pkg(jule::Ref<_11265fb90_Package> _29223_pkg) {
	jule::Str _29313_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _29223_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _113497500_tbl = *__julec_range_begin;
			_iter_begin_4656157760:;
			{
				_29313_obj+=_113497500_gen_traits_tbl(_113497500_tbl);
			}
			_iter_next_4656157760:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_tbl = *__julec_range_begin; goto _iter_begin_4656157760; }
			_iter_end_4656157760:;
		}
	}
	return _29313_obj;
}



inline jule::Str _113497500_gen_traits(jule::Ref<_122056550_IR> _30119_ir) {
	jule::Str _30213_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _30119_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _113497500_u = *__julec_range_begin;
			_iter_begin_4656161952:;
			{
				if ((!(_113497500_u->_field_cpp_linked))) {
					_30213_obj+=_113497500_gen_traits_pkg(_113497500_u->_field_package);
				}
			}
			_iter_next_4656161952:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_u = *__julec_range_begin; goto _iter_begin_4656161952; }
			_iter_end_4656161952:;
		}
	}
	_30213_obj+=_113497500_gen_traits_pkg(_30119_ir->_field_main);
	return _30213_obj;
}



inline jule::Str _113497500_gen_trait_prototype(jule::Ref<_11209e2e0_Trait> _31324_t) {
	return (jule::Str("struct ", 7) + _113468030_trait_out_ident(_31324_t)) + jule::Str(";", 1);
}



inline jule::Str _113497500_gen_trait_prototypes(jule::Ref<_11265fb90_Package> _31829_p) {
	jule::Str _31913_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _31829_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _113497500_f = *__julec_range_begin;
			_iter_begin_4656170304:;
			{
				jule::Int _32117_i = 0LL;
				_iter_begin_4656171952:;
				if (!(_32117_i < _113497500_f->_field_traits._method_len())) { goto _iter_end_4656171952; }
				{
					jule::Ref<_11209e2e0_Trait> _32317_t = _113497500_f->_field_traits._method_at(_32117_i);
					if (_32317_t->_field_token._field_id != 0LLU) {
						_31913_obj+=_113497500_gen_trait_prototype(_32317_t) + jule::Str("\n", 1);
					}
				}
				_iter_next_4656171952:;
				(_32117_i)++;
				goto _iter_begin_4656171952;
				_iter_end_4656171952:;
			}
			_iter_next_4656170304:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_f = *__julec_range_begin; goto _iter_begin_4656170304; }
			_iter_end_4656170304:;
		}
	}
	return _31913_obj;
}



inline jule::Str _113497500_gen_struct_plain_prototype(jule::Ref<_11209db80_Struct> _33331_s) {
	jule::Str _33413_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _33331_s->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_StructIns> _113497500_ins = *__julec_range_begin;
			_iter_begin_4656180672:;
			{
				_33413_obj+=jule::Str("\nstruct ", 8);
				_33413_obj+=_113468030_struct_ins_out_ident(_113497500_ins);
				_33413_obj+=jule::Str(";", 1);
				_33413_obj+=jule::Str("\n", 1);
			}
			_iter_next_4656180672:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_ins = *__julec_range_begin; goto _iter_begin_4656180672; }
			_iter_end_4656180672:;
		}
	}
	return _33413_obj;
}



inline jule::Str _113497500_gen_struct_plain_prototypes(jule::Slice<jule::Ref<_11209db80_Struct>> _34536_structs) {
	jule::Str _34613_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _34536_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_Struct> _113497500_s = *__julec_range_begin;
			_iter_begin_4656187120:;
			{
				if ((!(_113497500_s->_field_cpp_linked)) && (_113497500_s->_field_token._field_id != 0LLU)) {
					_34613_obj+=_113497500_gen_struct_plain_prototype(_113497500_s) + jule::Str("\n", 1);
				}
			}
			_iter_next_4656187120:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_s = *__julec_range_begin; goto _iter_begin_4656187120; }
			_iter_end_4656187120:;
		}
	}
	return _34613_obj;
}



inline jule::Str _113497500_gen_struct_traits(jule::Ref<_11209db80_Struct> _35622_s) {
	if (_35622_s->_field_implements.len() == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _36113_obj = jule::Str(": ", 2);
	{
		auto __julec_range_expr = _35622_s->_field_implements;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209e2e0_Trait> _113497500_i = *__julec_range_begin;
			_iter_begin_4656195120:;
			{
				_36113_obj+=jule::Str("public ", 7);
				_36113_obj+=_113468030_trait_out_ident(_113497500_i);
				_36113_obj+=jule::Str(",", 1);
			}
			_iter_next_4656195120:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_i = *__julec_range_begin; goto _iter_begin_4656195120; }
			_iter_end_4656195120:;
		}
	}
	_36113_obj=_36113_obj.slice(0LL,static_cast<jule::Int>(_36113_obj.len() - 1LL));
	return _36113_obj;
}



inline jule::Str _113497500_gen_field_decl(jule::Ref<_11209db80_FieldIns> _37223_f) {
	jule::Str _37313_obj = _113497140_gen_type_kind(_37223_f->_field_kind) + jule::Str(" ", 1);
	_37313_obj+=_113468030_field_out_ident(_37223_f->_field_decl);
	_37313_obj+=(jule::Str("{", 1) + _1133950d0_get_init_expr(_37223_f->_field_kind)) + jule::Str("}", 1);
	_37313_obj+=jule::Str(";", 1);
	return _37313_obj;
}



inline jule::Str _113497500_gen_struct_self_field_type_kind(jule::Ref<_11209db80_StructIns> _38140_s) {
	return _113497140_as_ref_kind(_113497140_gen_struct_kind_ins(_38140_s));
}



inline jule::Str _113497500_gen_struct_self_field(jule::Ref<_11209db80_StructIns> _38630_s) {
	jule::Str _38713_obj = _113497500_gen_struct_self_field_type_kind(_38630_s);
	_38713_obj+=jule::Str(" self{};", 8);
	return _38713_obj;
}



inline jule::Str _113497500_gen_struct_self_field_init_st(jule::Ref<_11209db80_StructIns> _39238_s) {
	jule::Str _39313_obj = jule::Str("this->self = ", 13);
	_39313_obj+=_113497500_gen_struct_self_field_type_kind(_39238_s);
	_39313_obj+=jule::Str("::make(this, nullptr);", 22);
	return _39313_obj;
}



inline jule::Str _113497500_gen_struct_constructor(jule::Ref<_11209db80_StructIns> _39931_s) {
	jule::Str _40013_obj = _113468030_struct_ins_out_ident(_39931_s);
	_40013_obj+=jule::Str("(", 1);
	if (_39931_s->_field_fields.len() > 0LL) {
		{
			auto __julec_range_expr = _39931_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_11209db80_FieldIns> _113497500_f = *__julec_range_begin;
				_iter_begin_4656217344:;
				{
					_40013_obj+=_113497140_gen_type_kind(_113497500_f->_field_kind);
					_40013_obj+=(jule::Str(" __param_", 9) + _113497500_f->_field_decl->_field_ident) + jule::Str(", ", 2);
				}
				_iter_next_4656217344:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _113497500_f = *__julec_range_begin; goto _iter_begin_4656217344; }
				_iter_end_4656217344:;
			}
		}
		_40013_obj=_40013_obj.slice(0LL,static_cast<jule::Int>(_40013_obj.len() - 2LL));
	} else {
		_40013_obj+=jule::Str("void", 4);
	}
	_40013_obj+=jule::Str(") {\n", 4);
	_113497500_add_indent();
	_40013_obj+=_113497500_indent();
	_40013_obj+=_113497500_gen_struct_self_field_init_st(_39931_s);
	_40013_obj+=jule::Str("\n", 1);
	if (_39931_s->_field_fields.len() > 0LL) {
		{
			auto __julec_range_expr = _39931_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_11209db80_FieldIns> _113497500_f = *__julec_range_begin;
				_iter_begin_4656225456:;
				{
					_40013_obj+=jule::Str("\n", 1);
					_40013_obj+=_113497500_indent();
					_40013_obj+=jule::Str("this->", 6);
					_40013_obj+=_113468030_field_out_ident(_113497500_f->_field_decl);
					_40013_obj+=jule::Str(" = ", 3);
					_40013_obj+=jule::Str("__param_", 8) + _113497500_f->_field_decl->_field_ident;
					_40013_obj+=jule::Str(";", 1);
				}
				_iter_next_4656225456:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _113497500_f = *__julec_range_begin; goto _iter_begin_4656225456; }
				_iter_end_4656225456:;
			}
		}
	}
	_113497500_done_indent();
	_40013_obj+=(jule::Str("\n", 1) + _113497500_indent()) + jule::Str("}", 1);
	return _40013_obj;
}



inline jule::Str _113497500_gen_struct_destructor(jule::Ref<_11209db80_StructIns> _43626_s) {
	jule::Str _43713_obj = jule::Str("~", 1);
	_43713_obj+=_113468030_struct_ins_out_ident(_43626_s);
	_43713_obj+=jule::Str("(void) { /* heap allocations managed by traits or references */ this->self.ref = nullptr; }", 91);
	return _43713_obj;
}



inline jule::Str _113497500_gen_struct_operators(jule::Ref<_11209db80_StructIns> _44329_s) {
	jule::Str _4449_out_ident = _113468030_struct_ins_out_ident(_44329_s);
	jule::Str _44513_obj = jule::Str("", 0);
	_44513_obj+=_113497500_indent();
	_44513_obj+=jule::Str("inline bool operator==(const ", 29);
	_44513_obj+=_4449_out_ident;
	_44513_obj+=jule::Str(" &_Src) {", 9);
	if (_44329_s->_field_fields.len() > 0LL) {
		_113497500_add_indent();
		_44513_obj+=jule::Str("\n", 1);
		_44513_obj+=_113497500_indent();
		_44513_obj+=jule::Str("return ", 7);
		_113497500_add_indent();
		jule::Int _45717_n = 0LL;
		{
			auto __julec_range_expr = _44329_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_11209db80_FieldIns> _113497500_f = *__julec_range_begin;
				_iter_begin_4656248528:;
				{
					jule::Ref<_11209db80_StructIns> _46017_strct = _113497500_f->_field_kind->_method_strct();
					if ((jule::real(_46017_strct) && jule::real(_46017_strct->_field_decl)) && _46017_strct->_field_decl->_field_cpp_linked) {
						goto _iter_next_4656248528;
					}
					(_45717_n)++;
					_44513_obj+=jule::Str("\n", 1);
					_44513_obj+=_113497500_indent();
					_44513_obj+=jule::Str("this->", 6);
					jule::Str _46917_f_ident = _113468030_field_out_ident(_113497500_f->_field_decl);
					_44513_obj+=_46917_f_ident;
					_44513_obj+=jule::Str(" == _Src.", 9);
					_44513_obj+=_46917_f_ident;
					_44513_obj+=jule::Str(" &&", 3);
				}
				_iter_next_4656248528:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _113497500_f = *__julec_range_begin; goto _iter_begin_4656248528; }
				_iter_end_4656248528:;
			}
		}
		_113497500_done_indent();
		if (_45717_n > 0LL) {
			_44513_obj=_44513_obj.slice(0LL,static_cast<jule::Int>(_44513_obj.len() - 3LL));
		} else {
			_44513_obj+=jule::Str("true", 4);
		}
		_44513_obj+=jule::Str(";\n", 2);
		_113497500_done_indent();
		_44513_obj+=_113497500_indent();
		_44513_obj+=jule::Str("}", 1);
	} else {
		_44513_obj+=jule::Str(" return true; }", 15);
	}
	_44513_obj+=jule::Str("\n\n", 2);
	_44513_obj+=_113497500_indent();
	_44513_obj+=jule::Str("inline bool operator!=(const ", 29);
	_44513_obj+=_4449_out_ident;
	_44513_obj+=jule::Str(" &_Src) { return !this->operator==(_Src); }", 43);
	return _44513_obj;
}



inline jule::Str _113497500_gen_struct_derive_defs_prototypes(jule::Ref<_11209db80_StructIns> _49638_s) {
	jule::Str _49713_obj = jule::Str("", 0);
	if (_49638_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))) {
		_49713_obj+=_113497500_indent();
		_49713_obj+=_113466390_get_derive_fn_decl_clone(_49638_s->_field_decl);
		_49713_obj+=jule::Str(";\n\n", 3);
	}
	return _49713_obj;
}



inline jule::Str _113497500_gen_struct_ins_prototype(jule::Ref<_11209db80_StructIns> _50833_s) {
	jule::Str _50913_obj = jule::Str("struct ", 7);
	jule::Str _5109_out_ident = _113468030_struct_ins_out_ident(_50833_s);
	_50913_obj+=_5109_out_ident;
	_50913_obj+=_113497500_gen_struct_traits(_50833_s->_field_decl);
	_50913_obj+=jule::Str(" {\n", 3);
	_113497500_add_indent();
	_50913_obj+=_113497500_indent();
	_50913_obj+=_113497500_gen_struct_self_field(_50833_s);
	_50913_obj+=jule::Str("\n\n", 2);
	if (_50833_s->_field_fields.len() > 0LL) {
		{
			auto __julec_range_expr = _50833_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_11209db80_FieldIns> _113497500_f = *__julec_range_begin;
				_iter_begin_4656283296:;
				{
					_50913_obj+=_113497500_indent();
					_50913_obj+=_113497500_gen_field_decl(_113497500_f);
					_50913_obj+=jule::Str("\n", 1);
				}
				_iter_next_4656283296:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _113497500_f = *__julec_range_begin; goto _iter_begin_4656283296; }
				_iter_end_4656283296:;
			}
		}
		_50913_obj+=jule::Str("\n\n", 2);
		_50913_obj+=_113497500_indent();
		_50913_obj+=_113497500_gen_struct_constructor(_50833_s);
		_50913_obj+=jule::Str("\n\n", 2);
	}
	_50913_obj+=_113497500_indent();
	_50913_obj+=_113497500_gen_struct_destructor(_50833_s);
	_50913_obj+=jule::Str("\n\n", 2);
	_50913_obj+=_113497500_indent();
	_50913_obj+=_5109_out_ident;
	_50913_obj+=jule::Str("(void) { ", 9);
	_50913_obj+=_113497500_gen_struct_self_field_init_st(_50833_s);
	_50913_obj+=jule::Str(" }\n\n", 4);
	{
		auto __julec_range_expr = _50833_s->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_Fn> _113497500_f = *__julec_range_begin;
			_iter_begin_4656292784:;
			{
				jule::Str _54317_proto = _113497500_gen_fn_prototype(_113497500_f,true);
				if (_113497500_f->_field_statically) {
					_54317_proto=(_113497500_indent() + jule::Str("static ", 7)) + _54317_proto.trim(jule::Str("\t ", 2));
				}
				_50913_obj+=_54317_proto;
				_50913_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4656292784:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_f = *__julec_range_begin; goto _iter_begin_4656292784; }
			_iter_end_4656292784:;
		}
	}
	_50913_obj+=_113497500_gen_struct_derive_defs_prototypes(_50833_s);
	_50913_obj+=_113497500_gen_struct_operators(_50833_s);
	_50913_obj+=jule::Str("\n", 1);
	_113497500_done_indent();
	_50913_obj+=_113497500_indent() + jule::Str("};", 2);
	return _50913_obj;
}



inline jule::Str _113497500_gen_struct_prototype(jule::Ref<_11209db80_Struct> _56229_s) {
	jule::Str _56313_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _56229_s->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_StructIns> _113497500_ins = *__julec_range_begin;
			_iter_begin_4656304352:;
			{
				_56313_obj+=_113497500_gen_struct_ins_prototype(_113497500_ins) + jule::Str("\n\n", 2);
			}
			_iter_next_4656304352:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_ins = *__julec_range_begin; goto _iter_begin_4656304352; }
			_iter_end_4656304352:;
		}
	}
	return _56313_obj;
}



inline jule::Str _113497500_gen_struct_prototypes(jule::Slice<jule::Ref<_11209db80_Struct>> _57130_structs) {
	jule::Str _57213_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _57130_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_Struct> _113497500_s = *__julec_range_begin;
			_iter_begin_4656308336:;
			{
				if ((!(_113497500_s->_field_cpp_linked)) && (_113497500_s->_field_token._field_id != 0LLU)) {
					_57213_obj+=_113497500_gen_struct_prototype(_113497500_s) + jule::Str("\n", 1);
				}
			}
			_iter_next_4656308336:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_s = *__julec_range_begin; goto _iter_begin_4656308336; }
			_iter_end_4656308336:;
		}
	}
	return _57213_obj;
}



inline jule::Str _113497500_gen_fn_decl_head(jule::Ref<_112446fb0_FnIns> _58125_f,jule::Bool _58136_method) {
	jule::Str _58213_obj = jule::Str("", 0);
	if ((!(_58125_f->_field_decl->_method_is_entry_point()))) {
		_58213_obj+=jule::Str("inline ", 7);
	}
	_58213_obj+=_113497500_gen_fn_ins_result(_58125_f) + jule::Str(" ", 1);
	if ((!(_58136_method)) && jule::real(_58125_f->_field_decl->_field_owner)) {
		_58213_obj+=_113468030_struct_ins_out_ident(_58125_f->_field_owner) + jule::Str("::", 2);
	}
	_58213_obj+=_113468030_fn_ins_out_ident(_58125_f);
	return _58213_obj;
}



inline jule::Str _113497500_gen_fn_prototype(jule::Ref<_112446fb0_Fn> _59825_f,jule::Bool _59833_method) {
	jule::Str _59913_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _59825_f->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_FnIns> _113497500_c = *__julec_range_begin;
			_iter_begin_4656324944:;
			{
				_59913_obj+=_113497500_indent();
				_59913_obj+=_113497500_gen_fn_decl_head(_113497500_c,_59833_method);
				_59913_obj+=_113497500_gen_params_prototypes(_113497500_c->_field_params);
				_59913_obj+=jule::Str(";\n", 2);
			}
			_iter_next_4656324944:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_c = *__julec_range_begin; goto _iter_begin_4656324944; }
			_iter_end_4656324944:;
		}
	}
	return _59913_obj;
}



inline jule::Str _113497500_gen_fn_prototypes(jule::Ref<_11265fb90_Package> _61026_pkg) {
	jule::Str _61113_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _61026_pkg->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _113497500_file = *__julec_range_begin;
			_iter_begin_4656331296:;
			{
				jule::Int _61317_i = 0LL;
				_iter_begin_4656332944:;
				if (!(_61317_i < _113497500_file->_field_funcs._method_len())) { goto _iter_end_4656332944; }
				{
					jule::Ref<_112446fb0_Fn> _61521_f = _113497500_file->_field_funcs._method_at(_61317_i);
					if ((!(_61521_f->_field_cpp_linked)) && (_61521_f->_field_token._field_id != 0LLU)) {
						_61113_obj+=_113497500_gen_fn_prototype(_61521_f,false);
					}
				}
				_iter_next_4656332944:;
				(_61317_i)++;
				goto _iter_begin_4656332944;
				_iter_end_4656332944:;
			}
			_iter_next_4656331296:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_file = *__julec_range_begin; goto _iter_begin_4656331296; }
			_iter_end_4656331296:;
		}
	}
	return _61113_obj;
}



inline jule::Str _113497500_gen_prototypes(jule::Ref<_122056550_IR> _62523_ir,jule::Slice<jule::Ref<_11209db80_Struct>> _62536_structs) {
	jule::Str _62613_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _62523_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _113497500_u = *__julec_range_begin;
			_iter_begin_4656342848:;
			{
				if ((!(_113497500_u->_field_cpp_linked))) {
					_62613_obj+=_113497500_gen_trait_prototypes(_113497500_u->_field_package);
				}
			}
			_iter_next_4656342848:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_u = *__julec_range_begin; goto _iter_begin_4656342848; }
			_iter_end_4656342848:;
		}
	}
	_62613_obj+=_113497500_gen_trait_prototypes(_62523_ir->_field_main);
	_62613_obj+=_113497500_gen_struct_plain_prototypes(_62536_structs);
	_62613_obj+=_113497500_gen_traits(_62523_ir) + jule::Str("\n", 1);
	_62613_obj+=_113497500_gen_struct_prototypes(_62536_structs);
	{
		auto __julec_range_expr = _62523_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _113497500_u = *__julec_range_begin;
			_iter_begin_4656349584:;
			{
				if ((!(_113497500_u->_field_cpp_linked))) {
					_62613_obj+=_113497500_gen_fn_prototypes(_113497500_u->_field_package);
				}
			}
			_iter_next_4656349584:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_u = *__julec_range_begin; goto _iter_begin_4656349584; }
			_iter_end_4656349584:;
		}
	}
	_62613_obj+=_113497500_gen_fn_prototypes(_62523_ir->_field_main);
	return _62613_obj;
}



inline jule::Str _113497500_gen_var_init_expr(jule::Ref<_1320e22c0_Var> _65326_v,jule::Str _65335_init) {
	jule::Str _65413_obj = jule::Str("", 0);
	if (_65326_v->_field_statically) {
		_65413_obj+=jule::Str("static ", 7);
	}
	_65413_obj+=_113497140_gen_type_kind(_65326_v->_field_kind->_field_kind) + jule::Str(" ", 1);
	if (_65326_v->_field_reference) {
		_65413_obj+=jule::Str("&", 1);
	}
	_65413_obj+=_113468030_var_out_ident(_65326_v);
	if (_65335_init != jule::Str("", 0)) {
		_65413_obj+=jule::Str(" = ", 3) + _65335_init;
	}
	_65413_obj+=jule::Str(";", 1);
	return _65413_obj;
}



inline jule::Str _113497500_gen_var(jule::Ref<_1320e22c0_Var> _67216_v) {
	if (_111613f20_is_ignore_ident(_67216_v->_field_ident)) {
		return jule::Str("", 0);
	}
	if (_67216_v->_field_constant) {
		return jule::Str("", 0);
	}
	if (jule::real(_67216_v->_field_value) && jule::real(_67216_v->_field_value->_field_expr)) {
		if (_67216_v->_field_value->_field_data->_field_model != nullptr) {
			return _113497500_gen_var_init_expr(_67216_v,_1133950d0_gen_val(_67216_v->_field_value));
		}
		return _113497500_gen_var_init_expr(_67216_v,jule::Str("", 0));
	}
	return _113497500_gen_var_init_expr(_67216_v,_1133950d0_get_init_expr(_67216_v->_field_kind->_field_kind));
}



inline jule::Str _113497500_gen_globals(jule::Slice<jule::Ref<_1320e22c0_Var>> _69020_globals) {
	jule::Str _69113_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _69020_globals;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e22c0_Var> _113497500_v = *__julec_range_begin;
			_iter_begin_4656375952:;
			{
				if ((!(_113497500_v->_field_constant)) && (_113497500_v->_field_token._field_id != 0LLU)) {
					_69113_obj+=_113497500_gen_var(_113497500_v) + jule::Str("\n", 1);
				}
			}
			_iter_next_4656375952:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_v = *__julec_range_begin; goto _iter_begin_4656375952; }
			_iter_end_4656375952:;
		}
	}
	return _69113_obj;
}



inline jule::Str _113497500_gen_fn(jule::Ref<_112446fb0_Fn> _70315_f) {
	jule::Str _70413_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _70315_f->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_FnIns> _113497500_ins = *__julec_range_begin;
			_iter_begin_4656382800:;
			{
				_70413_obj+=_113497500_gen_fn_decl_head(_113497500_ins,false);
				_70413_obj+=_113497500_gen_params_ins(_113497500_ins->_field_params) + jule::Str(" ", 1);
				_70413_obj+=_121b31570_gen_fn_scope(_113497500_ins);
				_70413_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4656382800:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_ins = *__julec_range_begin; goto _iter_begin_4656382800; }
			_iter_end_4656382800:;
		}
	}
	return _70413_obj;
}



inline jule::Str _113497500_gen_pkg_fns(jule::Ref<_11265fb90_Package> _71520_p) {
	jule::Str _71613_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _71520_p->_field_files;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e2330_SymbolTable> _113497500_f = *__julec_range_begin;
			_iter_begin_4656389568:;
			{
				jule::Int _71817_i = 0LL;
				_iter_begin_4656391216:;
				if (!(_71817_i < _113497500_f->_field_funcs._method_len())) { goto _iter_end_4656391216; }
				{
					jule::Ref<_112446fb0_Fn> _72021_f = _113497500_f->_field_funcs._method_at(_71817_i);
					if ((!(_72021_f->_field_cpp_linked)) && (_72021_f->_field_token._field_id != 0LLU)) {
						_71613_obj+=_113497500_gen_fn(_72021_f) + jule::Str("\n\n", 2);
					}
				}
				_iter_next_4656391216:;
				(_71817_i)++;
				goto _iter_begin_4656391216;
				_iter_end_4656391216:;
			}
			_iter_next_4656389568:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_f = *__julec_range_begin; goto _iter_begin_4656389568; }
			_iter_end_4656389568:;
		}
	}
	return _71613_obj;
}



inline jule::Str _113497500_gen_struct_method_defs(jule::Ref<_11209db80_StructIns> _73031_s) {
	jule::Str _73113_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _73031_s->_field_methods;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_112446fb0_Fn> _113497500_f = *__julec_range_begin;
			_iter_begin_4656400560:;
			{
				_73113_obj+=_113497500_indent();
				_73113_obj+=_113497500_gen_fn(_113497500_f);
				_73113_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4656400560:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_f = *__julec_range_begin; goto _iter_begin_4656400560; }
			_iter_end_4656400560:;
		}
	}
	return _73113_obj;
}



inline jule::Str _113497500_gen_struct_ostream(jule::Ref<_11209db80_StructIns> _74127_s) {
	jule::Str _74213_obj = jule::Str("", 0);
	_74213_obj+=_113497500_indent();
	_74213_obj+=jule::Str("std::ostream &operator<<(std::ostream &_Stream, const ", 54);
	_74213_obj+=_113468030_struct_ins_out_ident(_74127_s);
	_74213_obj+=jule::Str(" &_Src) {\n", 10);
	_113497500_add_indent();
	_74213_obj+=_113497500_indent();
	_74213_obj+=jule::Str("_Stream << \"", 12);
	_74213_obj+=_74127_s->_field_decl->_field_ident;
	_74213_obj+=jule::Str("{\";\n", 4);
	{
		auto __julec_range_expr = _74127_s->_field_fields;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _113497500_i = 0;
			jule::Ref<_11209db80_FieldIns> _113497500_f = *__julec_range_begin;
			_iter_begin_4656412112:;
			{
				_74213_obj+=_113497500_indent();
				_74213_obj+=jule::Str("_Stream << \"", 12);
				_74213_obj+=_113497500_f->_field_decl->_field_ident;
				_74213_obj+=jule::Str(":", 1);
				jule::Ref<_11209db80_StructIns> _76013_strct = _113497500_f->_field_kind->_method_strct();
				if ((jule::real(_76013_strct) && jule::real(_76013_strct->_field_decl)) && _76013_strct->_field_decl->_field_cpp_linked) {
					_74213_obj+=(jule::Str(" cpp.", 5) + _113468030_field_out_ident(_113497500_f->_field_decl)) + jule::Str("\"", 1);
				} else {
					_74213_obj+=jule::Str("\" << _Src.", 10);
					_74213_obj+=_113468030_field_out_ident(_113497500_f->_field_decl);
				}
				if ((_113497500_i + 1LL) < _74127_s->_field_fields.len()) {
					_74213_obj+=jule::Str(" << \", \"", 8);
				}
				_74213_obj+=jule::Str(";\n", 2);
			}
			_iter_next_4656412112:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_113497500_i; _113497500_f = *__julec_range_begin; goto _iter_begin_4656412112; }
			_iter_end_4656412112:;
		}
	}
	_74213_obj+=_113497500_indent();
	_74213_obj+=jule::Str("_Stream << \"}\";\n", 16);
	_74213_obj+=_113497500_indent();
	_74213_obj+=jule::Str("return _Stream;\n", 16);
	_113497500_done_indent();
	_74213_obj+=_113497500_indent();
	_74213_obj+=jule::Str("}", 1);
	return _74213_obj;
}



inline jule::Str _113497500_gen_struct_derive_defs(jule::Ref<_11209db80_StructIns> _78331_s) {
	jule::Str _78413_obj = jule::Str("", 0);
	if (_78331_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))) {
		_78413_obj+=_113497500_indent();
		_78413_obj+=_113466390_get_derive_fn_def_clone(_78331_s->_field_decl);
		_78413_obj+=jule::Str("{\n", 2);
		_113497500_add_indent();
		_78413_obj+=_113497500_indent();
		_78413_obj+=_113497140_gen_struct_kind_ins(_78331_s);
		_78413_obj+=jule::Str(" clone;\n", 8);
		{
			auto __julec_range_expr = _78331_s->_field_fields;
			if (__julec_range_expr.begin() != __julec_range_expr.end()) {
				auto __julec_range_begin = __julec_range_expr.begin();
				const auto __julec_range_end = __julec_range_expr.end();
				jule::Ref<_11209db80_FieldIns> _113497500_f = *__julec_range_begin;
				_iter_begin_4656436880:;
				{
					jule::Str _79517_ident = _113468030_field_out_ident(_113497500_f->_field_decl);
					_78413_obj+=_113497500_indent();
					_78413_obj+=jule::Str("clone.", 6);
					_78413_obj+=_79517_ident;
					_78413_obj+=jule::Str(" = jule::clone(this->", 21);
					_78413_obj+=_79517_ident;
					_78413_obj+=jule::Str(");\n", 3);
				}
				_iter_next_4656436880:;
				++__julec_range_begin;
				if (__julec_range_begin != __julec_range_end) { _113497500_f = *__julec_range_begin; goto _iter_begin_4656436880; }
				_iter_end_4656436880:;
			}
		}
		_78413_obj+=_113497500_indent();
		_78413_obj+=jule::Str("return clone;\n", 14);
		_113497500_done_indent();
		_78413_obj+=_113497500_indent();
		_78413_obj+=jule::Str("}", 1);
	}
	return _78413_obj;
}



inline jule::Str _113497500_gen_struct_ins(jule::Ref<_11209db80_StructIns> _81523_s) {
	jule::Str _81613_obj = _113497500_gen_struct_method_defs(_81523_s);
	_81613_obj+=jule::Str("\n\n", 2);
	_81613_obj+=_113497500_gen_struct_derive_defs(_81523_s);
	_81613_obj+=jule::Str("\n\n", 2);
	_81613_obj+=_113497500_gen_struct_ostream(_81523_s);
	return _81613_obj;
}



inline jule::Str _113497500_gen_struct(jule::Ref<_11209db80_Struct> _82519_s) {
	jule::Str _82613_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _82519_s->_field_instances;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_StructIns> _113497500_ins = *__julec_range_begin;
			_iter_begin_4656451360:;
			{
				_82613_obj+=_113497500_gen_struct_ins(_113497500_ins) + jule::Str("\n\n", 2);
			}
			_iter_next_4656451360:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_ins = *__julec_range_begin; goto _iter_begin_4656451360; }
			_iter_end_4656451360:;
		}
	}
	return _82613_obj;
}



inline jule::Str _113497500_gen_structs(jule::Slice<jule::Ref<_11209db80_Struct>> _83420_structs) {
	jule::Str _83513_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _83420_structs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_Struct> _113497500_s = *__julec_range_begin;
			_iter_begin_4656455216:;
			{
				if ((!(_113497500_s->_field_cpp_linked)) && (_113497500_s->_field_token._field_id != 0LLU)) {
					_83513_obj+=_113497500_gen_struct(_113497500_s);
					_83513_obj+=jule::Str("\n\n", 2);
				}
			}
			_iter_next_4656455216:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_s = *__julec_range_begin; goto _iter_begin_4656455216; }
			_iter_end_4656455216:;
		}
	}
	return _83513_obj;
}



inline jule::Str _113497500_gen_fns(jule::Ref<_122056550_IR> _84616_ir) {
	jule::Str _84713_obj = jule::Str("", 0);
	{
		auto __julec_range_expr = _84616_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _113497500_u = *__julec_range_begin;
			_iter_begin_4656462192:;
			{
				if ((!(_113497500_u->_field_cpp_linked))) {
					_84713_obj+=_113497500_gen_pkg_fns(_113497500_u->_field_package);
				}
			}
			_iter_next_4656462192:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_u = *__julec_range_begin; goto _iter_begin_4656462192; }
			_iter_end_4656462192:;
		}
	}
	_84713_obj+=_113497500_gen_pkg_fns(_84616_ir->_field_main);
	return _84713_obj;
}



inline void _113497500_push_init(jule::Ref<_11265fb90_Package> _85918_pkg,jule::Str& _85938_obj) {
	
	
	jule::Ref<_112446fb0_Fn> _8639_f = _85918_pkg->_method_find_fn(jule::Str("init", 4),false);
	if ((!(jule::real(_8639_f)))) {
		return;
	}
	_85938_obj+=(jule::Str("\n\t", 2) + _113468030_fn_out_ident(_8639_f)) + jule::Str("();", 3);
}



inline jule::Str _113497500_gen_init_caller(jule::Ref<_122056550_IR> _87224_ir) {
	jule::Str _87313_obj = jule::Str("void ", 5);
	_87313_obj+=jule::Str("__jule_call_initializers", 24);
	_87313_obj+=jule::Str("(void) {", 8);
	{
		auto __julec_range_expr = _87224_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _113497500_u = *__julec_range_begin;
			_iter_begin_4656477792:;
			{
				if ((!(_113497500_u->_field_cpp_linked))) {
					_113497500_push_init(_113497500_u->_field_package,_87313_obj);
				}
			}
			_iter_next_4656477792:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _113497500_u = *__julec_range_begin; goto _iter_begin_4656477792; }
			_iter_end_4656477792:;
		}
	}
	_113497500_push_init(_87224_ir->_field_main,_87313_obj);
	_87313_obj+=jule::Str("\n}", 2);
	return _87313_obj;
}



inline void _113497500_append_standard(jule::Str& _88829_obj_code,jule::Str _88844_compiler,jule::Str _88859_compiler_cmd) {
	struct JuleCompileTime _8899_time = time_now();
	jule::Str _89113_time_str = jule::Str("", 0);
	_89113_time_str+=_121837910_itoa(_8899_time.day);
	_89113_time_str+=jule::Str("/", 1);
	_89113_time_str+=_121837910_itoa(_8899_time.month);
	_89113_time_str+=jule::Str("/", 1);
	_89113_time_str+=_121837910_itoa(_8899_time.year);
	_89113_time_str+=jule::Str(" ", 1);
	_89113_time_str+=_121837910_itoa(_8899_time.hour);
	_89113_time_str+=jule::Str(".", 1);
	_89113_time_str+=_121837910_itoa(_8899_time.minute);
	_89113_time_str+=jule::Str(" (DD/MM/YYYY) (HH.MM)", 21);
	jule::Str _90313_s = jule::Str("", 0);
	_90313_s+=jule::Str("// Auto generated by JuleC.\n", 28);
	_90313_s+=jule::Str("// JuleC version: ", 18);
	_90313_s+=jule::Str("beta 0.0.3 @master", 18);
	_90313_s+=jule::Str("\n", 1);
	_90313_s+=jule::Str("// Date: ", 9);
	_90313_s+=_89113_time_str;
	_90313_s+=jule::Str("\n//\n// Recommended Compile Command;\n// ", 39);
	_90313_s+=_88844_compiler;
	_90313_s+=jule::Str(" ", 1);
	_90313_s+=_88859_compiler_cmd;
	_90313_s+=jule::Str("\n\n#include \"", 12);
	_90313_s+=_1316f28b0_PATH_API;
	_90313_s+=jule::Str("\"\n\n", 3);
	_90313_s+=_88829_obj_code;
	_90313_s+=jule::Str("\nint main(int argc, char *argv[], char *envp[]) {\n    std::set_terminate(&jule::terminate_handler);\n    jule::set_sig_handler(jule::signal_handler);\n    jule::setup_command_line_args(argc, argv);\n    jule::setup_environment_variables(envp);\n\n    __jule_call_initializers();\n    entry_point();\n\n    return EXIT_SUCCESS;\n}", 320);
	_88829_obj_code=_90313_s;
}



inline jule::Str _113497500_gen(jule::Ref<_122056550_IR> _93716_ir) {
	jule::Ref<_113497500_OrderedDecls> _93813_od = jule::new_struct<_113497500_OrderedDecls>(new( std::nothrow ) _113497500_OrderedDecls());
	_93813_od->_field_structs=_93716_ir->_method_get_all_structures();
	_1134c7790_order_structures(_93813_od->_field_structs);
	_93813_od->_field_globals=_93716_ir->_method_get_all_variables();
	_1134c7790_order_variables(_93813_od->_field_globals);
	jule::Str _94513_obj = jule::Str("", 0);
	_94513_obj+=_113497500_gen_links(_93716_ir) + jule::Str("\n", 1);
	_94513_obj+=_113497500_gen_prototypes(_93716_ir,_93813_od->_field_structs) + jule::Str("\n\n", 2);
	_94513_obj+=_113497500_gen_globals(_93813_od->_field_globals) + jule::Str("\n", 1);
	_94513_obj+=_113497500_gen_structs(_93813_od->_field_structs);
	_94513_obj+=_113497500_gen_fns(_93716_ir) + jule::Str("\n", 1);
	_94513_obj+=_113497500_gen_init_caller(_93716_ir) + jule::Str("\n", 1);
	return _94513_obj;
}



inline jule::Bool _1134c7790_is_struct_ordered(jule::Slice<jule::Ref<_11209db80_Struct>> _822_structs,jule::Ref<_11209db80_Struct> _842_s) {
	{
		auto __julec_range_expr = _842_s->_field_depends;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11209db80_Struct> _1134c7790_d = *__julec_range_begin;
			_iter_begin_4656519776:;
			{
				{
					auto __julec_range_expr = _822_structs;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_11209db80_Struct> _1134c7790_ss = *__julec_range_begin;
						_iter_begin_4656521200:;
						{
							if ((_1134c7790_ss).alloc == (_842_s).alloc) {
								return false;
							} else if ((_1134c7790_ss).alloc == (_1134c7790_d).alloc) {
								goto _iter_end_4656521200;
							}
						}
						_iter_next_4656521200:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _1134c7790_ss = *__julec_range_begin; goto _iter_begin_4656521200; }
						_iter_end_4656521200:;
					}
				}
			}
			_iter_next_4656519776:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1134c7790_d = *__julec_range_begin; goto _iter_begin_4656519776; }
			_iter_end_4656519776:;
		}
	}
	return true;
}



inline void _1134c7790_order_structures(jule::Slice<jule::Ref<_11209db80_Struct>> _2425_structs) {
	jule::I64 _259_n = _2425_structs.len();
	jule::Int _2613_i = 0LL;
	_iter_begin_4656527136:;
	if (!(_2613_i < _259_n)) { goto _iter_end_4656527136; }
	{
		jule::Bool _2817_swapped = false;
		jule::Int _3017_j = 0LL;
		_iter_begin_4656530144:;
		if (!(_3017_j < ((_259_n - _2613_i) - 1LL))) { goto _iter_end_4656530144; }
		{
			if (_2425_structs[static_cast<jule::Int>(_3017_j)]->_field_depends.len() > 1LL) {
				std::tie(_2425_structs[static_cast<jule::Int>(_3017_j)],_2425_structs[static_cast<jule::Int>(_3017_j + 1LL)]) = std::make_tuple(_2425_structs[static_cast<jule::Int>(_3017_j + 1LL)],_2425_structs[static_cast<jule::Int>(_3017_j)]);
				_2817_swapped=true;
			}
		}
		_iter_next_4656530144:;
		(_3017_j)++;
		goto _iter_begin_4656530144;
		_iter_end_4656530144:;
		if ((!(_2817_swapped))) {
			goto _iter_end_4656527136;
		}
	}
	_iter_next_4656527136:;
	(_2613_i)++;
	goto _iter_begin_4656527136;
	_iter_end_4656527136:;
	_2613_i=0LL;
	_iter_begin_4656530336:;
	if (!(_2613_i < _259_n)) { goto _iter_end_4656530336; }
	{
		jule::Bool _4517_swapped = false;
		jule::Int _4717_j = 0LL;
		_iter_begin_4656542512:;
		if (!(_4717_j < ((_259_n - _2613_i) - 1LL))) { goto _iter_end_4656542512; }
		{
			if ((!(_1134c7790_is_struct_ordered(_2425_structs,_2425_structs[static_cast<jule::Int>(_4717_j)])))) {
				std::tie(_2425_structs[static_cast<jule::Int>(_4717_j)],_2425_structs[static_cast<jule::Int>(_4717_j + 1LL)]) = std::make_tuple(_2425_structs[static_cast<jule::Int>(_4717_j + 1LL)],_2425_structs[static_cast<jule::Int>(_4717_j)]);
				_4517_swapped=true;
			}
		}
		_iter_next_4656542512:;
		(_4717_j)++;
		goto _iter_begin_4656542512;
		_iter_end_4656542512:;
		if ((!(_4517_swapped))) {
			goto _iter_end_4656530336;
		}
	}
	_iter_next_4656530336:;
	(_2613_i)++;
	goto _iter_begin_4656530336;
	_iter_end_4656530336:;
}



inline jule::Bool _1134c7790_is_var_ordered(jule::Slice<jule::Ref<_1320e22c0_Var>> _6219_vars,jule::Ref<_1320e22c0_Var> _6233_v) {
	{
		auto __julec_range_expr = _6233_v->_field_depends;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_1320e22c0_Var> _1134c7790_d = *__julec_range_begin;
			_iter_begin_4656552944:;
			{
				{
					auto __julec_range_expr = _6219_vars;
					if (__julec_range_expr.begin() != __julec_range_expr.end()) {
						auto __julec_range_begin = __julec_range_expr.begin();
						const auto __julec_range_end = __julec_range_expr.end();
						jule::Ref<_1320e22c0_Var> _1134c7790_vv = *__julec_range_begin;
						_iter_begin_4656554368:;
						{
							if ((_1134c7790_vv).alloc == (_6233_v).alloc) {
								return false;
							} else if ((_1134c7790_vv).alloc == (_1134c7790_d).alloc) {
								goto _iter_end_4656554368;
							}
						}
						_iter_next_4656554368:;
						++__julec_range_begin;
						if (__julec_range_begin != __julec_range_end) { _1134c7790_vv = *__julec_range_begin; goto _iter_begin_4656554368; }
						_iter_end_4656554368:;
					}
				}
			}
			_iter_next_4656552944:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1134c7790_d = *__julec_range_begin; goto _iter_begin_4656552944; }
			_iter_end_4656552944:;
		}
	}
	return true;
}



inline void _1134c7790_order_variables(jule::Slice<jule::Ref<_1320e22c0_Var>> _7824_vars) {
	jule::I64 _799_n = _7824_vars.len();
	jule::Int _8013_i = 0LL;
	_iter_begin_4656560304:;
	if (!(_8013_i < _799_n)) { goto _iter_end_4656560304; }
	{
		jule::Bool _8217_swapped = false;
		jule::Int _8417_j = 0LL;
		_iter_begin_4656563312:;
		if (!(_8417_j < ((_799_n - _8013_i) - 1LL))) { goto _iter_end_4656563312; }
		{
			if ((!(_1134c7790_is_var_ordered(_7824_vars,_7824_vars[static_cast<jule::Int>(_8417_j)])))) {
				std::tie(_7824_vars[static_cast<jule::Int>(_8417_j)],_7824_vars[static_cast<jule::Int>(_8417_j + 1LL)]) = std::make_tuple(_7824_vars[static_cast<jule::Int>(_8417_j + 1LL)],_7824_vars[static_cast<jule::Int>(_8417_j)]);
				_8217_swapped=true;
			}
		}
		_iter_next_4656563312:;
		(_8417_j)++;
		goto _iter_begin_4656563312;
		_iter_end_4656563312:;
		if ((!(_8217_swapped))) {
			goto _iter_end_4656560304;
		}
	}
	_iter_next_4656560304:;
	(_8013_i)++;
	goto _iter_begin_4656560304;
	_iter_end_4656560304:;
}



inline jule::Str _1316092f0_str_repeat(jule::Str _3015_sub,jule::Int _3029_n) {
	if (_3029_n == 0LL) {
		return jule::Str("", 0);
	}
	jule::Str _3513_s = jule::Str("", 0);
	_iter_begin_4656675792:;
	if (!(_3029_n > 0LL)) { goto _iter_end_4656675792; }
	{
		_3513_s+=_3015_sub;
	}
	_iter_next_4656675792:;
	(_3029_n)--;
	goto _iter_begin_4656675792;
	_iter_end_4656675792:;
	return _3513_s;
}



inline void _1316092f0_print_error_message(jule::Str _4224_msg) {
	jule::outln(_4224_msg);
}



inline void _1316092f0_help(void) {
	if (_121828050_ARGS.len() > 2LL) {
		_1316092f0_print_error_message(jule::Str("invalid command: ", 17) + _121828050_ARGS[static_cast<jule::Int>(2LL)]);
		return;
	}
	jule::I64 _5113_max = _1316092f0_HELP_MAP[static_cast<jule::Int>(0LL)][static_cast<jule::Int>(0LL)].len();
	{
		auto __julec_range_expr = _1316092f0_HELP_MAP;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Array<jule::Str,2> _1316092f0_k = *__julec_range_begin;
			_iter_begin_4656685952:;
			{
				jule::I64 _5313_n = _1316092f0_k[static_cast<jule::Int>(0LL)].len();
				if (_5313_n > _5113_max) {
					_5113_max=_5313_n;
				}
			}
			_iter_next_4656685952:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1316092f0_k = *__julec_range_begin; goto _iter_begin_4656685952; }
			_iter_end_4656685952:;
		}
	}
	jule::Str _5913_s = jule::Str("", 0);
	
	{
		auto __julec_range_expr = _1316092f0_HELP_MAP;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Int _1316092f0_i = 0;
			jule::Array<jule::Str,2> _1316092f0_part = *__julec_range_begin;
			_iter_begin_4656692096:;
			{
				_5913_s+=_1316092f0_part[static_cast<jule::Int>(0LL)];
				_5913_s+=_1316092f0_str_repeat(jule::Str(" ", 1),(_5113_max - _1316092f0_part[static_cast<jule::Int>(0LL)].len()) + 5LL);
				_5913_s+=_1316092f0_part[static_cast<jule::Int>(1LL)];
				if ((_1316092f0_i + 1LL) < 4LL) {
					_5913_s+=jule::Str("\n", 1);
				}
			}
			_iter_next_4656692096:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { ++_1316092f0_i; _1316092f0_part = *__julec_range_begin; goto _iter_begin_4656692096; }
			_iter_end_4656692096:;
		}
	}
	jule::outln(_5913_s);
}



inline void _1316092f0_version(void) {
	if (_121828050_ARGS.len() > 2LL) {
		_1316092f0_print_error_message(jule::Str("invalid command: ", 17) + _121828050_ARGS[static_cast<jule::Int>(2LL)]);
		return;
	}
	jule::out(jule::Str("julec version ", 14));
	jule::outln(jule::Str("beta 0.0.3 @master", 18));
}



inline void _1316092f0_tool_distos(void) {
	jule::out(jule::Str("supported operating systems:\n ", 30));
	{
		auto __julec_range_expr = _1316e9330_DISTOS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1316092f0_os = *__julec_range_begin;
			_iter_begin_4656706496:;
			{
				jule::out(_1316092f0_os);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_4656706496:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1316092f0_os = *__julec_range_begin; goto _iter_begin_4656706496; }
			_iter_end_4656706496:;
		}
	}
	jule::outln(jule::Str("", 0));
}



inline void _1316092f0_tool_distarch(void) {
	jule::out(jule::Str("supported architects:\n ", 23));
	{
		auto __julec_range_expr = _1316e9330_DISTARCH;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1316092f0_arch = *__julec_range_begin;
			_iter_begin_4656710400:;
			{
				jule::out(_1316092f0_arch);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_4656710400:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1316092f0_arch = *__julec_range_begin; goto _iter_begin_4656710400; }
			_iter_end_4656710400:;
		}
	}
	jule::outln(jule::Str("", 0));
}



inline void _1316092f0_tool(void) {
	if (_121828050_ARGS.len() == 2LL) {
		jule::outln(jule::Str("tool commands:\n distos     Lists all supported operating systems\n distarch   Lists all supported architects", 107));
		return;
	} else if (_121828050_ARGS.len() > 3LL) {
		_1316092f0_print_error_message(jule::Str("invalid command: ", 17) + _121828050_ARGS[static_cast<jule::Int>(3LL)]);
		return;
	}
	jule::Str _1149_cmd = _121828050_ARGS[static_cast<jule::Int>(2LL)];
	{
		auto _match_expr{ _1149_cmd };
		if (!((jule::Str("distos", 6)) == _match_expr)) { goto _case_end_4656722528; }
		_case_begin_4656722528:;
		{
			_1316092f0_tool_distos();
		}
		goto _match_end_4656716944;
		_case_end_4656722528:;
		if (!((jule::Str("distarch", 8)) == _match_expr)) { goto _case_end_4656721952; }
		_case_begin_4656721952:;
		{
			_1316092f0_tool_distarch();
		}
		goto _match_end_4656716944;
		_case_end_4656721952:;
		_case_begin_4656720880:;
		{
			_1316092f0_print_error_message(jule::Str("Undefined command: ", 19) + _1149_cmd);
		}
		goto _match_end_4656716944;
		_case_end_4656720880:;
		_match_end_4656716944:;
	}
}



inline void _1316092f0_julenv(void) {
	jule::outln(jule::Str("julec version: beta 0.0.3 @master", 33));
	jule::outln(jule::Str("architecture: i386", 18));
	jule::outln(jule::Str("operating system: windows", 25));
}



inline jule::Bool _1316092f0_process_command(void) {
	{
		auto _match_expr{ _121828050_ARGS[static_cast<jule::Int>(1LL)] };
		if (!((jule::Str("help", 4)) == _match_expr)) { goto _case_end_4656746272; }
		_case_begin_4656746272:;
		{
			_1316092f0_help();
		}
		goto _match_end_4656723424;
		_case_end_4656746272:;
		if (!((jule::Str("version", 7)) == _match_expr)) { goto _case_end_4656746384; }
		_case_begin_4656746384:;
		{
			_1316092f0_version();
		}
		goto _match_end_4656723424;
		_case_end_4656746384:;
		if (!((jule::Str("tool", 4)) == _match_expr)) { goto _case_end_4656747232; }
		_case_begin_4656747232:;
		{
			_1316092f0_tool();
		}
		goto _match_end_4656723424;
		_case_end_4656747232:;
		if (!((jule::Str("julenv", 6)) == _match_expr)) { goto _case_end_4656747344; }
		_case_begin_4656747344:;
		{
			_1316092f0_julenv();
		}
		goto _match_end_4656723424;
		_case_end_4656747344:;
		_case_begin_4656742784:;
		{
			return false;
		}
		goto _match_end_4656723424;
		_case_end_4656742784:;
		_match_end_4656723424:;
	}
	return true;
}



inline void _1316092f0_init(void) {
	if (true) {
		_1316303f0_COMPILER=jule::Str("gcc", 3);
		_1316303f0_COMPILER_PATH=jule::Str("g++", 3);
	} else {
		_1316303f0_COMPILER=jule::Str("clang", 5);
		_1316303f0_COMPILER_PATH=jule::Str("clang++", 7);
	}
}



inline void _1316092f0_exit_err(jule::Str _15413_msg) {
	jule::outln(_15413_msg);
	_1217b31d0_exit(1LL);
}



void entry_point(void) {
	if (_121828050_ARGS.len() < 2LL) {
		_1217b31d0_exit(0LL);
	}
	if (_1316092f0_process_command()) {
		return;
	}
	_1316303f0_compile_command();
}



inline jule::Int _1316303f0_system(jule::Str _6511_cmd) {
	return static_cast<jule::Int>(static_cast<jule::Int>(system(((char*)((&(_6511_cmd[static_cast<jule::Int>(0LL)])))))));
}



inline std::tuple<jule::Str,jule::Str> _1316303f0_get_option(jule::Slice<jule::Str> _6915_args,jule::Int& _6933_i) {
	jule::Str _6953_content = jule::Str();
	jule::Str _6943_arg = jule::Str();
	_iter_begin_4656768096:;
	if (!(_6933_i < _6915_args.len())) { goto _iter_end_4656768096; }
	{
		_6943_arg=_6915_args[static_cast<jule::Int>(_6933_i)];
		jule::Int _7217_j = 0LL;
		jule::Slice<jule::I32> _7317_runes = static_cast<jule::Slice<jule::I32>>(_6943_arg);
		jule::I32 _7417_r = _7317_runes[static_cast<jule::Int>(_7217_j)];
		if (_7417_r != '-') {
			_6953_content+=_6943_arg;
			_6943_arg=jule::Str("", 0);
			goto _iter_next_4656768096;
		}
		(_7217_j)++;
		if (_7217_j >= _7317_runes.len()) {
			_1316092f0_exit_err(jule::Str("undefined syntax: ", 18) + _6943_arg);
		}
		_7417_r=_7317_runes[static_cast<jule::Int>(_7217_j)];
		if (_7417_r == '-') {
			(_7217_j)++;
			if (_7217_j >= _7317_runes.len()) {
				_1316092f0_exit_err(jule::Str("undefined syntax: ", 18) + _6943_arg);
			}
			_7417_r=_7317_runes[static_cast<jule::Int>(_7217_j)];
		}
		if ((!(_111613f20_is_ident_rune(static_cast<jule::Str>(_7417_r))))) {
			_1316092f0_exit_err(jule::Str("undefined syntax: ", 18) + _6943_arg);
		}
		(_7217_j)++;
		_iter_begin_4656780800:;
		if (!(_7217_j < _7317_runes.len())) { goto _iter_end_4656780800; }
		{
			_7417_r=_7317_runes[static_cast<jule::Int>(_7217_j)];
			if (((((!(_111613f20_is_space(_7417_r))) && (!(_111613f20_is_letter(_7417_r)))) && (!(_111613f20_is_decimal(static_cast<jule::U8>(_7417_r))))) && (_7417_r != '_')) && (_7417_r != '-')) {
				_1316092f0_exit_err(jule::Str("undefined syntax: ", 18) + static_cast<jule::Str>(_7317_runes.slice(static_cast<jule::Int>(_7217_j))));
			}
		}
		_iter_next_4656780800:;
		(_7217_j)++;
		goto _iter_begin_4656780800;
		_iter_end_4656780800:;
		goto _iter_end_4656768096;
	}
	_iter_next_4656768096:;
	(_6933_i)++;
	goto _iter_begin_4656768096;
	_iter_end_4656768096:;
	return std::make_tuple(_6943_arg,_6953_content);
}



inline jule::Str _1316303f0_get_option_value(jule::Slice<jule::Str> _11321_args,jule::Int& _11339_i) {
	(_11339_i)++;
	if (_11339_i < _11321_args.len()) {
		jule::Str _11613_arg = _11321_args[static_cast<jule::Int>(_11339_i)];
		return _11613_arg;
	}
	return jule::Str("", 0);
}



inline void _1316303f0_parse_out_option(jule::Slice<jule::Str> _12221_args,jule::Int& _12239_i) {
	jule::Str _1239_value = _1316303f0_get_option_value(_12221_args,_12239_i);
	if (_1239_value == jule::Str("", 0)) {
		_1316092f0_exit_err(jule::Str("missing option value: -o --out", 30));
	}
	_1316303f0_OUT=_1239_value;
}



inline void _1316303f0_parse_opt_option(jule::Slice<jule::Str> _13021_args,jule::Int& _13039_i) {
	jule::Str _1319_value = _1316303f0_get_option_value(_13021_args,_13039_i);
	if (_1319_value == jule::Str("", 0)) {
		_1316092f0_exit_err(jule::Str("missing option value: --opt", 27));
	}
	{
		auto _match_expr{ _1319_value };
		if (!((jule::Str("L0", 2)) == _match_expr)) { goto _case_end_4656811440; }
		_case_begin_4656811440:;
		{
			_1219d92f0_push_opt_level(0LLU);
		}
		goto _match_end_4656810848;
		_case_end_4656811440:;
		if (!((jule::Str("L1", 2)) == _match_expr)) { goto _case_end_4656811552; }
		_case_begin_4656811552:;
		{
			_1219d92f0_push_opt_level(1LLU);
		}
		goto _match_end_4656810848;
		_case_end_4656811552:;
		_case_begin_4656808752:;
		{
			_1316092f0_exit_err(jule::Str("invalid optimization level: ", 28) + _1319_value);
		}
		goto _match_end_4656810848;
		_case_end_4656808752:;
		_match_end_4656810848:;
	}
}



inline void _1316303f0_check_target_arch(jule::Str _14322_arch) {
	{
		auto __julec_range_expr = _1316e9330_DISTARCH;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1316303f0_distarch = *__julec_range_begin;
			_iter_begin_4656815632:;
			{
				if (_14322_arch == _1316303f0_distarch) {
					return;
				}
			}
			_iter_next_4656815632:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1316303f0_distarch = *__julec_range_begin; goto _iter_begin_4656815632; }
			_iter_end_4656815632:;
		}
	}
	_1316092f0_exit_err(jule::Str("unsupported/undefined architecture: ", 36) + _14322_arch);
}



inline void _1316303f0_check_target_os(jule::Str _15320_os) {
	{
		auto __julec_range_expr = _1316e9330_DISTOS;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1316303f0_distos = *__julec_range_begin;
			_iter_begin_4656813056:;
			{
				if (_15320_os == _1316303f0_distos) {
					return;
				}
			}
			_iter_next_4656813056:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1316303f0_distos = *__julec_range_begin; goto _iter_begin_4656813056; }
			_iter_end_4656813056:;
		}
	}
	_1316092f0_exit_err(jule::Str("unsupported/undefined operating system: ", 40) + _15320_os);
}



inline void _1316303f0_parse_target_option(jule::Slice<jule::Str> _16324_args,jule::Int& _16342_i) {
	jule::Str _1649_value = _1316303f0_get_option_value(_16324_args,_16342_i);
	if (_1649_value == jule::Str("", 0)) {
		_1316092f0_exit_err(jule::Str("missing option value: --target", 30));
	}
	jule::Slice<jule::Str> _1699_parts = _1649_value.split(jule::Str("-", 1),-1LL);
	if (_1699_parts.len() != 2LL) {
		_1316092f0_exit_err(jule::Str("undefined platform target format: ", 34) + _1649_value);
	}
	jule::Str _17410_os = _1699_parts[static_cast<jule::Int>(0LL)];
	jule::Str _17414_arch = _1699_parts[static_cast<jule::Int>(1LL)];
	std::tie(_17410_os,_17414_arch) = std::make_tuple(_1699_parts[static_cast<jule::Int>(0LL)],_1699_parts[static_cast<jule::Int>(1LL)]);
	if (_17410_os != jule::Str("native", 6)) {
		_1316303f0_check_target_os(_17410_os);
		_1316f28b0_OS=_17410_os;
	}
	if (_17414_arch != jule::Str("native", 6)) {
		_1316303f0_check_target_arch(_17414_arch);
		_1316f28b0_ARCH=_17414_arch;
	}
}



inline void _1316303f0_parse_compiler_option(jule::Slice<jule::Str> _18726_args,jule::Int& _18744_i) {
	jule::Str _1889_value = _1316303f0_get_option_value(_18726_args,_18744_i);
	{
		auto _match_expr{ _1889_value };
		if (!((jule::Str("", 0)) == _match_expr)) { goto _case_end_4656844272; }
		_case_begin_4656844272:;
		{
			_1316092f0_exit_err(jule::Str("missing option value: --compiler", 32));
		}
		goto _match_end_4656841968;
		_case_end_4656844272:;
		if (!((jule::Str("clang", 5)) == _match_expr)) { goto _case_end_4656844736; }
		_case_begin_4656844736:;
		{
			_1316303f0_COMPILER=jule::Str("clang", 5);
			_1316303f0_COMPILER_PATH=jule::Str("clang++", 7);
		}
		goto _match_end_4656841968;
		_case_end_4656844736:;
		if (!((jule::Str("gcc", 3)) == _match_expr)) { goto _case_end_4656844848; }
		_case_begin_4656844848:;
		{
			_1316303f0_COMPILER=jule::Str("gcc", 3);
			_1316303f0_COMPILER_PATH=jule::Str("g++", 3);
		}
		goto _match_end_4656841968;
		_case_end_4656844848:;
		_case_begin_4656843472:;
		{
			_1316092f0_exit_err(jule::Str("invalid option value for --compiler: ", 37) + _1889_value);
		}
		goto _match_end_4656841968;
		_case_end_4656843472:;
		_match_end_4656841968:;
	}
}



inline jule::Str _1316303f0_parse_options(jule::Slice<jule::Str> _20618_args) {
	jule::Str _20713_cmd = jule::Str("", 0);
	jule::Int _21113_i = 1LL;
	_iter_begin_4656852288:;
	if (!(_21113_i < _20618_args.len())) { goto _iter_end_4656852288; }
	{
		jule::Str _21314_arg;
		jule::Str _21319_content;
		std::tie(_21314_arg,_21319_content) = _1316303f0_get_option(_20618_args,_21113_i);
		_20713_cmd+=_21319_content;
		{
			auto _match_expr{ _21314_arg };
			if (!((jule::Str("", 0)) == _match_expr)) { goto _case_end_4656817392; }
			goto _match_end_4656856608;
			_case_end_4656817392:;
			if (!((jule::Str("-o", 2)) == _match_expr || (jule::Str("--out", 5)) == _match_expr)) { goto _case_end_4656856736; }
			_case_begin_4656856736:;
			{
				_1316303f0_parse_out_option(_20618_args,_21113_i);
			}
			goto _match_end_4656856608;
			_case_end_4656856736:;
			if (!((jule::Str("-t", 2)) == _match_expr || (jule::Str("--transpile", 11)) == _match_expr)) { goto _case_end_4656856848; }
			_case_begin_4656856848:;
			{
				_1316303f0_MODE=1LLU;
			}
			goto _match_end_4656856608;
			_case_end_4656856848:;
			if (!((jule::Str("-c", 2)) == _match_expr || (jule::Str("--compile", 9)) == _match_expr)) { goto _case_end_4656856960; }
			_case_begin_4656856960:;
			{
				_1316303f0_MODE=0LLU;
			}
			goto _match_end_4656856608;
			_case_end_4656856960:;
			if (!((jule::Str("--compiler", 10)) == _match_expr)) { goto _case_end_4656857072; }
			_case_begin_4656857072:;
			{
				_1316303f0_parse_compiler_option(_20618_args,_21113_i);
			}
			goto _match_end_4656856608;
			_case_end_4656857072:;
			if (!((jule::Str("--opt-copy", 10)) == _match_expr)) { goto _case_end_4656859088; }
			_case_begin_4656859088:;
			{
				_1219d92f0_OPTIMIZATIONS=append(_1219d92f0_OPTIMIZATIONS,jule::Slice<jule::Str>({jule::Str("--opt-copy", 10)}));
			}
			goto _match_end_4656856608;
			_case_end_4656859088:;
			if (!((jule::Str("--opt-deadcode", 14)) == _match_expr)) { goto _case_end_4656859200; }
			_case_begin_4656859200:;
			{
				_1219d92f0_OPTIMIZATIONS=append(_1219d92f0_OPTIMIZATIONS,jule::Slice<jule::Str>({jule::Str("--opt-deadcode", 14)}));
			}
			goto _match_end_4656856608;
			_case_end_4656859200:;
			if (!((jule::Str("--opt", 5)) == _match_expr)) { goto _case_end_4656859312; }
			_case_begin_4656859312:;
			{
				_1316303f0_parse_opt_option(_20618_args,_21113_i);
			}
			goto _match_end_4656856608;
			_case_end_4656859312:;
			if (!((jule::Str("--target", 8)) == _match_expr)) { goto _case_end_4656859424; }
			_case_begin_4656859424:;
			{
				_1316303f0_parse_target_option(_20618_args,_21113_i);
			}
			goto _match_end_4656856608;
			_case_end_4656859424:;
			_case_begin_4656855824:;
			{
				_1316092f0_exit_err(jule::Str("undefined option: ", 18) + _21314_arg);
			}
			goto _match_end_4656856608;
			_case_end_4656855824:;
			_match_end_4656856608:;
		}
	}
	_iter_next_4656852288:;
	(_21113_i)++;
	goto _iter_begin_4656852288;
	_iter_end_4656852288:;
	_20713_cmd=_20713_cmd.trim(jule::Str(" \t\r\n\v", 5));
	return _20713_cmd;
}



inline void _1316303f0_write_output(jule::Str _25017_path,jule::Str _25028_content) {
	jule::Str _2519_dir = _131739f50_dir(_25017_path);
	jule::Int _25317_err;
	std::tie(std::ignore,_25317_err) = _111613f90_stat(_2519_dir);
	if (_25317_err != 0LLU) {
		jule::Int _25513_err = _1220e63c0_create_dir(_2519_dir);
		if (_25513_err != 0LLU) {
			_1316092f0_exit_err(jule::Str("a problem occurs when code generation", 37));
		}
	}
	jule::Ref<_1220de8f0_File> _26114_f;
	std::tie(_26114_f,_25317_err) = _1220f3000_open(_25017_path,770LL,438LL);
	if (_25317_err != 0LLU) {
		_1316092f0_exit_err(jule::Str("a problem occurs when code generation", 37));
	}
	std::tie(std::ignore,_25317_err) = _26114_f->_method_write(static_cast<jule::Slice<jule::U8>>(_25028_content));
	if (_25317_err != 0LLU) {
		_1316092f0_exit_err(jule::Str("a problem occurs when code generation", 37));
	}
	_26114_f->_method_close();
}



inline void _1316303f0_clear_objects(void) {
	if (_1220f3000_remove_file(_1316303f0_get_compile_path()) != 0LLU) {
		jule::outln(jule::Str("a problem occurs when object cleaning", 37));
		return;
	}
	_1220e63c0_remove_dir(_1316303f0_OUT_DIR);
}



inline void _1316303f0_compile_ir(jule::Str _28715_compiler,jule::Str _28730_compiler_cmd) {
	jule::Int _2889_status = _1316303f0_system((_28715_compiler + jule::Str(" ", 1)) + _28730_compiler_cmd);
	if (_2889_status != 0LL) {
		jule::out(jule::Str("external compiler failed with status code: ", 43));
		jule::outln(_2889_status);
		_1316092f0_exit_err(jule::Str("", 0));
	}
	_1316303f0_clear_objects();
}



inline void _1316303f0_do_spell(jule::Str _29913_obj,jule::Str _29923_compiler,jule::Str _29938_compiler_cmd) {
	jule::Str _3009_path = _1316303f0_get_compile_path();
	_1316303f0_write_output(_3009_path,_29913_obj);
	{
		auto _match_expr{ _1316303f0_MODE };
		if (!((0LLU) == _match_expr)) { goto _case_end_4656904576; }
		_case_begin_4656904576:;
		{
			_1316303f0_compile_ir(_29923_compiler,_29938_compiler_cmd);
		}
		goto _match_end_4656904288;
		_case_end_4656904576:;
		_match_end_4656904288:;
	}
}



inline void _1316303f0_check_mode(void) {
	if ((_1316303f0_MODE != 1LLU) && (_1316303f0_MODE != 0LLU)) {
		jule::outln(_1316b2ff0_errorf(jule::Str("invalid_value_for_key", 21),jule::Slice<jule::Any>({jule::Any(_1316303f0_MODE),jule::Any(jule::Str("mode", 4))})));
		_1316092f0_exit_err(jule::Str("", 0));
	}
}



inline void _1316303f0_check_compiler(void) {
	if ((_1316303f0_COMPILER != jule::Str("gcc", 3)) && (_1316303f0_COMPILER != jule::Str("clang", 5))) {
		jule::outln(_1316b2ff0_errorf(jule::Str("invalid_value_for_key", 21),jule::Slice<jule::Any>({jule::Any(_1316303f0_COMPILER),jule::Any(jule::Str("compiler", 8))})));
		_1316092f0_exit_err(jule::Str("", 0));
	}
}



inline void _1316303f0_set(void) {
	_1316303f0_check_mode();
	_1316303f0_check_compiler();
}



inline void _1316303f0_print_logs(jule::Slice<_1316b4080_Log> _32915_logs) {
	jule::Str _33013_s = jule::Str("", 0);
	{
		auto __julec_range_expr = _32915_logs;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			_1316b4080_Log _1316303f0_l = *__julec_range_begin;
			_iter_begin_4656918032:;
			{
				_33013_s+=_1316303f0_l._method_to_str() + jule::Str("\n", 1);
			}
			_iter_next_4656918032:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1316303f0_l = *__julec_range_begin; goto _iter_begin_4656918032; }
			_iter_end_4656918032:;
		}
	}
	jule::out(_33013_s);
}



inline jule::Bool _1316303f0_is_cpp_source_file(jule::Str _33723_path) {
	jule::Int _3389_offset = _33723_path.rfind(jule::Str(".", 1));
	if (_3389_offset == -1LL) {
		return false;
	}
	return _1316301d0_is_valid_cpp_ext(_33723_path.slice(static_cast<jule::Int>(_3389_offset)));
}



inline std::tuple<jule::Str,jule::Str> _1316303f0_gen_compile_cmd(jule::Str _34620_source_path,jule::Ref<_122056550_IR> _34638_ir) {
	jule::Str _3479_compiler = _1316303f0_COMPILER_PATH;
	
	
	
	
	jule::Str _35413_cmd = jule::Str("-O0 ", 4);
	{
		auto _match_expr{ _1316303f0_COMPILER };
		if (!((jule::Str("gcc", 3)) == _match_expr)) { goto _case_end_4656935504; }
		_case_begin_4656935504:;
		{
			_35413_cmd+=jule::Str("-w ", 3);
		}
		goto _match_end_4656934864;
		_case_end_4656935504:;
		if (!((jule::Str("clang", 5)) == _match_expr)) { goto _case_end_4656935616; }
		_case_begin_4656935616:;
		{
			_35413_cmd+=jule::Str("-Wno-everything ", 16);
		}
		goto _match_end_4656934864;
		_case_end_4656935616:;
		_match_end_4656934864:;
	}
	_35413_cmd+=jule::Str("--std=c++14 ", 12);
	{
		auto __julec_range_expr = _34638_ir->_field_passes;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Str _1316303f0_pass = *__julec_range_begin;
			_iter_begin_4656932656:;
			{
				_35413_cmd+=_1316303f0_pass + jule::Str(" ", 1);
			}
			_iter_next_4656932656:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1316303f0_pass = *__julec_range_begin; goto _iter_begin_4656932656; }
			_iter_end_4656932656:;
		}
	}
	{
		auto __julec_range_expr = _34638_ir->_field_used;
		if (__julec_range_expr.begin() != __julec_range_expr.end()) {
			auto __julec_range_begin = __julec_range_expr.begin();
			const auto __julec_range_end = __julec_range_expr.end();
			jule::Ref<_11265fb90_ImportInfo> _1316303f0_u = *__julec_range_begin;
			_iter_begin_4656940240:;
			{
				if (_1316303f0_u->_field_cpp_linked && _1316303f0_is_cpp_source_file(_1316303f0_u->_field_path)) {
					_35413_cmd+=_1316303f0_u->_field_path + jule::Str(" ", 1);
				}
			}
			_iter_next_4656940240:;
			++__julec_range_begin;
			if (__julec_range_begin != __julec_range_end) { _1316303f0_u = *__julec_range_begin; goto _iter_begin_4656940240; }
			_iter_end_4656940240:;
		}
	}
	if (_1316303f0_OUT != jule::Str("", 0)) {
		_35413_cmd+=(jule::Str("-o ", 3) + _1316303f0_OUT) + jule::Str(" ", 1);
	}
	_35413_cmd+=_34620_source_path;
	return std::make_tuple(_3479_compiler,_35413_cmd);
}



inline jule::Str _1316303f0_get_compile_path(void) {
	return _131739f50_join(jule::Slice<jule::Str>({_1316303f0_OUT_DIR,_1316303f0_OUT_NAME}));
}



inline void _1316303f0_apply_target_independent_optimizations(jule::Ref<_122056550_IR> _39547_ir) {
	if (_1219d92f0_is_opt_enabled(jule::Str("--opt-deadcode", 14))) {
		_131692a90_eliminate_dead_code(_39547_ir);
	}
}



inline void _1316303f0_compile_command(void) {
	jule::Str _4039_path = _1316303f0_parse_options(_121828050_ARGS);
	if (_4039_path == jule::Str("", 0)) {
		_1316092f0_exit_err(_1316b2ff0_errorf(jule::Str("missing_compile_path", 20),jule::Slice<jule::Any>({})));
	}
	jule::Ref<_1220d93f0_Status> _40910_inf;
	jule::Int _40915_err;
	std::tie(_40910_inf,_40915_err) = _111613f90_stat(_1316f28b0_PATH_STDLIB);
	if ((_40915_err != 0LLU) || (!(_40910_inf->_method_is_dir()))) {
		_1316092f0_exit_err(_1316b2ff0_errorf(jule::Str("stdlib_not_exist", 16),jule::Slice<jule::Any>({})));
	}
	_1316303f0_set();
	jule::Ref<_122056550_IR> _41614_ir;
	jule::Slice<_1316b4080_Log> _41618_logs;
	std::tie(_41614_ir,_41618_logs) = _122056550_build_ir(_4039_path);
	if ((!(jule::real(_41614_ir))) && (_41618_logs == nullptr)) {
		_1316092f0_exit_err(_1316b2ff0_errorf(jule::Str("no_file_in_entry_package", 24),jule::Slice<jule::Any>({jule::Any(_4039_path)})));
	}
	if (_41618_logs != nullptr) {
		_1316303f0_print_logs(_41618_logs);
		_1316092f0_exit_err(jule::Str("", 0));
	}
	
	jule::Ref<_112446fb0_Fn> _42813_f = _41614_ir->_field_main->_method_find_fn(jule::Str("main", 4),false);
	if ((!(jule::real(_42813_f)))) {
		_1316092f0_exit_err(_1316b2ff0_errorf(jule::Str("no_entry_point", 14),jule::Slice<jule::Any>({})));
	}
	_42813_f->_field_statically=true;
	_42813_f=_41614_ir->_field_main->_method_find_fn(jule::Str("init", 4),false);
	if (jule::real(_42813_f)) {
		_42813_f->_field_statically=true;
	}
	_1316303f0_apply_target_independent_optimizations(_41614_ir);
	jule::Str _44110_compiler;
	jule::Str _44120_compiler_cmd;
	std::tie(_44110_compiler,_44120_compiler_cmd) = _1316303f0_gen_compile_cmd(_1316303f0_get_compile_path(),_41614_ir);
	jule::Str _44313_obj = _113497500_gen(_41614_ir);
	_113497500_append_standard(_44313_obj,_44110_compiler,_44120_compiler_cmd);
	_1316303f0_do_spell(_44313_obj,_44110_compiler,_44120_compiler_cmd);
}




void __jule_call_initializers(void) {
	_121828050_init();
	_1316f28b0_init();
	_1130606b0_init();
	_122082160_init();
	_1316092f0_init();
}

int main(int argc, char *argv[], char *envp[]) {
    std::set_terminate(&jule::terminate_handler);
    jule::set_sig_handler(jule::signal_handler);
    jule::setup_command_line_args(argc, argv);
    jule::setup_environment_variables(envp);

    __jule_call_initializers();
    entry_point();

    return EXIT_SUCCESS;
}